{"sha": "cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2IxYjQ5N2VjMTRmOWU0YzVlZjVlMTVhOGEwYjJmNDU0ZjVhMWRmYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-03T10:05:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-03T10:05:38Z"}, "message": "i386.md: Remove empty prepartion statements from splitters.\n\n\t* config/i386/i386.md: Remove empty prepartion statements\n\tfrom splitters.\n\nFrom-SVN: r163806", "tree": {"sha": "4d9318c74c47fc3c3d31819bfc56fb2666ff55b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d9318c74c47fc3c3d31819bfc56fb2666ff55b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc/comments", "author": null, "committer": null, "parents": [{"sha": "f74bd71564c24fffa3902e2a133d2141537a67a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74bd71564c24fffa3902e2a133d2141537a67a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74bd71564c24fffa3902e2a133d2141537a67a3"}], "stats": {"total": 317, "additions": 135, "deletions": 182}, "files": [{"sha": "bfd0889d13bd2e575ff6ce25522fe6090a2205cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "patch": "@@ -1,9 +1,16 @@\n+2010-09-03  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md: Remove empty prepartion statements\n+\tfrom splitters.\n+\n 2010-09-03  Jan Hubicka  <jh@suse.cz>\n \n-\t* passes.c (rest_of_decl_compilation): Do not add local vars into varpol.\n+\t* passes.c (rest_of_decl_compilation): Do not add local vars into\n+\tvarpool.\n \t* varpool.c (varpool_get_node, varpool_node): Sanity check that only\n \tstatic or extern vars are in varpool.\n-\t(varpool_finalize_decl): Sanity check that only static vars are finalized.\n+\t(varpool_finalize_decl): Sanity check that only static vars are\n+\tfinalized.\n \n 2010-09-03  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -32,8 +39,7 @@\n \t(get_addr_base_and_unit_offset): Likewise.\n \t* tree-eh.c (tree_could_trap_p): Likewise.\n \t* tree-pretty-print.c (dump_generic_node): Likewise.\n-\t* tree-ssa-address.c (tree_mem_ref_addr): Simplify.  Handle\n-\tTMR_INDEX2.\n+\t* tree-ssa-address.c (tree_mem_ref_addr): Simplify.  Handle TMR_INDEX2.\n \t(create_mem_ref_raw): Merge symbol and base.  Move 2ndary\n \tbase to index2.\n \t(get_address_description): Reconstruct addres description\n@@ -119,17 +125,16 @@\n \t* targhooks.c (default_class_likely_spilled_p): New function.\n \t* targhooks.h (default_class_likely_spilled_p): Declare.\n \t* regs.h (CLASS_LIKELY_SPILLED_P): Remove.\n-\t* combine.c: (cant_combine_insn_p, likely_spilled_retval_p): Use\n+\t* combine.c (cant_combine_insn_p, likely_spilled_retval_p): Use\n \tTARGET_CLASS_LIKELY_SPILLED_P target hook. Use HARD_REGISTER_P macro.\n \tUse fixed_reg_set instead of fixed_regs.\n \t* cse.c (hash_rtx_cb): Use TARGET_CLASS_LIKELY_SPILLED_P target hook.\n \t* calls.c (avoid_likely_spilled_reg): Ditto.\n-\t* ira-conflicts.c: (ira_build_conflicts): Ditto.\n+\t* ira-conflicts.c (ira_build_conflicts): Ditto.\n \t* ira.c (update_equiv_regs): Ditto.\n \t* mode-switching.c (create_pre_exit): Ditto.\n \t* regmove.c (find_matches): Ditto.\n-\t(regclass_compatible_p): Use TARGET_CLASS_LIKELY_SPILLED_P target\n-\thook.\n+\t(regclass_compatible_p): Use TARGET_CLASS_LIKELY_SPILLED_P target hook.\n \t* reload.c (SMALL_REGISTER_CLASS_P): Remove macro.\n \t(small_register_class_p): New inline function.\n \t(push_secondary_reload, find_reusable_reload, find_reloads): Use\n@@ -276,17 +281,17 @@\n \n 2010-09-01  Uros Bizjak  <ubizjak@gmail.com>\n \n-        PR target/45476\n-        * config/i386/cygming.h (LIBGCC2_HAS_TF_MODE,\n+\tPR target/45476\n+\t* config/i386/cygming.h (LIBGCC2_HAS_TF_MODE,\n \tLIBGCC2_TF_CEXT, TF_SIZE): Move from ...\n-        * config/i386/mingw32.h: ... here.\n+\t* config/i386/mingw32.h: ... here.\n \n 2010-09-01  Andi Kleen\t<ak@linux.intel.com>\n \n \tPR lto/45475\n \t* lto-streamer-in.c (lto_input_ts_target_option): Add.\n \t(lto_input_tree_pointers): Call lto_input_ts_target_option.\n-\t* lto-streamer-out: (lto_output_ts_target_option): Add.\n+\t* lto-streamer-out (lto_output_ts_target_option): Add.\n \t(lto_output_tree_pointers): Call lto_output_ts_target_option.\n \n 2010-09-01  Kai Tietz  <kai.tietz@onevision.com>\n@@ -2677,7 +2682,7 @@\n \t* doc/tm.texi: Regenerate.\n \t* targhooks.c (default_asm_output_addr_const_extra): New function.\n \t* targhooks.h (default_asm_output_addr_const_extra): Declare.\n-\t* final.c: (output_addr_const): Use TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+\t* final.c (output_addr_const): Use TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n \ttarget hook.\n \n \t* config/i386/i386.h (OUTPUT_ADDR_CONST_EXTRA): Remove."}, {"sha": "56c2722f13da4a3fc5ea51818d356e9d5d4794fc", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 117, "deletions": 169, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cb1b497ec14f9e4c5ef5e15a8a0b2f454f5a1dfc", "patch": "@@ -1599,50 +1599,6 @@\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"direct\")])\n \f\n-;; Move instructions.\n-\n-(define_expand \"movoi\"\n-  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:OI 1 \"general_operand\" \"\"))]\n-  \"TARGET_AVX\"\n-  \"ix86_expand_move (OImode, operands); DONE;\")\n-\n-(define_expand \"movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TI 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_64BIT || TARGET_SSE\"\n-{\n-  if (TARGET_64BIT)\n-    ix86_expand_move (TImode, operands);\n-  else if (push_operand (operands[0], TImode))\n-    ix86_expand_push (TImode, operands[1]);\n-  else\n-    ix86_expand_vector_move (TImode, operands);\n-  DONE;\n-})\n-\n-;; This expands to what emit_move_complex would generate if we didn't\n-;; have a movti pattern.  Having this avoids problems with reload on\n-;; 32-bit targets when SSE is present, but doesn't seem to be harmful\n-;; to have around all the time.\n-(define_expand \"movcdi\"\n-  [(set (match_operand:CDI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:CDI 1 \"general_operand\" \"\"))]\n-  \"\"\n-{\n-  if (push_operand (operands[0], CDImode))\n-    emit_move_complex_push (CDImode, operands[0], operands[1]);\n-  else\n-    emit_move_complex_parts (operands[0], operands[1]);\n-  DONE;\n-})\n-\n-(define_expand \"mov<mode>\"\n-  [(set (match_operand:SWI1248x 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SWI1248x 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n-\n ;; Push/pop instructions.\n \n (define_insn \"*pushdi2_rex64\"\n@@ -1771,6 +1727,50 @@\n   \"pop{<imodesuffix>}\\t%0\"\n   [(set_attr \"type\" \"pop\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\f\n+;; Move instructions.\n+\n+(define_expand \"movoi\"\n+  [(set (match_operand:OI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:OI 1 \"general_operand\" \"\"))]\n+  \"TARGET_AVX\"\n+  \"ix86_expand_move (OImode, operands); DONE;\")\n+\n+(define_expand \"movti\"\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TI 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_64BIT || TARGET_SSE\"\n+{\n+  if (TARGET_64BIT)\n+    ix86_expand_move (TImode, operands);\n+  else if (push_operand (operands[0], TImode))\n+    ix86_expand_push (TImode, operands[1]);\n+  else\n+    ix86_expand_vector_move (TImode, operands);\n+  DONE;\n+})\n+\n+;; This expands to what emit_move_complex would generate if we didn't\n+;; have a movti pattern.  Having this avoids problems with reload on\n+;; 32-bit targets when SSE is present, but doesn't seem to be harmful\n+;; to have around all the time.\n+(define_expand \"movcdi\"\n+  [(set (match_operand:CDI 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:CDI 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  if (push_operand (operands[0], CDImode))\n+    emit_move_complex_push (CDImode, operands[0], operands[1]);\n+  else\n+    emit_move_complex_parts (operands[0], operands[1]);\n+  DONE;\n+})\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:SWI1248x 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:SWI1248x 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*mov<mode>_xor\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n@@ -2572,22 +2572,7 @@\n   [(set_attr \"type\" \"imov\")\n    (set_attr \"mode\" \"QI\")])\n \f\n-;; Floating point move instructions.\n-\n-(define_expand \"movtf\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n-  \"TARGET_SSE2\"\n-{\n-  ix86_expand_move (TFmode, operands);\n-  DONE;\n-})\n-\n-(define_expand \"mov<mode>\"\n-  [(set (match_operand:X87MODEF 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:X87MODEF 1 \"general_operand\" \"\"))]\n-  \"\"\n-  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n+;; Floating point push instructions.\n \n (define_insn \"*pushtf\"\n   [(set (match_operand:TF 0 \"push_operand\" \"=<,<,<\")\n@@ -2614,8 +2599,7 @@\n \t(match_operand:TF 1 \"any_fp_register_operand\" \"\"))]\n   \"TARGET_SSE2\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -16)))\n-   (set (mem:TF (reg:P SP_REG)) (match_dup 1))]\n-  \"\")\n+   (set (mem:TF (reg:P SP_REG)) (match_dup 1))])\n \n (define_insn \"*pushxf\"\n   [(set (match_operand:XF 0 \"push_operand\" \"=<,<\")\n@@ -2698,8 +2682,7 @@\n \t(match_operand:DF 1 \"any_fp_register_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (const_int -8)))\n-   (set (mem:DF (reg:P SP_REG)) (match_dup 1))]\n-  \"\")\n+   (set (mem:DF (reg:P SP_REG)) (match_dup 1))])\n \n (define_split\n   [(set (match_operand:DF 0 \"push_operand\" \"\")\n@@ -2752,6 +2735,23 @@\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n    (set (mem:SF (reg:P SP_REG)) (match_dup 1))]\n   \"operands[2] = GEN_INT (-GET_MODE_SIZE (<MODE>mode));\")\n+\f\n+;; Floating point move instructions.\n+\n+(define_expand \"movtf\"\n+  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:TF 1 \"nonimmediate_operand\" \"\"))]\n+  \"TARGET_SSE2\"\n+{\n+  ix86_expand_move (TFmode, operands);\n+  DONE;\n+})\n+\n+(define_expand \"mov<mode>\"\n+  [(set (match_operand:X87MODEF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:X87MODEF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"ix86_expand_move (<MODE>mode, operands); DONE;\")\n \n (define_insn \"*movtf_internal\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,m,x,?r,?o\")\n@@ -3199,6 +3199,7 @@\n     case 3:\n     case 4:\n       return \"#\";\n+\n     case 5:\n       switch (get_attr_mode (insn))\n \t{\n@@ -3750,8 +3751,7 @@\n   \"reload_completed\n    && true_regnum (operands[0]) == true_regnum (operands[1])\"\n   [(parallel [(set (match_dup 0) (and:SWI24 (match_dup 0) (const_int 255)))\n-\t      (clobber (reg:CC FLAGS_REG))])]\n-  \"\")\n+\t      (clobber (reg:CC FLAGS_REG))])])\n \f\n ;; Sign extension instructions\n \n@@ -4328,9 +4328,7 @@\n   \"reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (match_dup 0) (match_dup 2))]\n-{\n-  operands[1] = gen_rtx_REG (SFmode, true_regnum (operands[1]));\n-})\n+  \"operands[1] = gen_rtx_REG (SFmode, true_regnum (operands[1]));\")\n \n ;; Conversion from XFmode to {SF,DF}mode\n \n@@ -4411,17 +4409,15 @@\n    (clobber (match_operand:MODEF 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387 && reload_completed\"\n   [(set (match_dup 2) (float_truncate:MODEF (match_dup 1)))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 2))])\n \n (define_split\n   [(set (match_operand:MODEF 0 \"memory_operand\" \"\")\n \t(float_truncate:MODEF\n \t  (match_operand:XF 1 \"register_operand\" \"\")))\n    (clobber (match_operand:MODEF 2 \"memory_operand\" \"\"))]\n   \"TARGET_80387\"\n-  [(set (match_dup 0) (float_truncate:MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float_truncate:MODEF (match_dup 1)))])\n \f\n ;; Signed conversion to DImode.\n \n@@ -4684,8 +4680,7 @@\n   \"reload_completed\"\n   [(parallel [(set (match_dup 2) (fix:X87MODEI (match_dup 1)))\n \t      (clobber (match_dup 3))])\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 2))])\n \n (define_split\n   [(set (match_operand:X87MODEI 0 \"memory_operand\" \"\")\n@@ -4694,8 +4689,7 @@\n    (clobber (match_scratch 3 \"\"))]\n   \"reload_completed\"\n   [(parallel [(set (match_dup 0) (fix:X87MODEI (match_dup 1)))\n-\t      (clobber (match_dup 3))])]\n-  \"\")\n+\t      (clobber (match_dup 3))])])\n \n ;; See the comments in i386.h near OPTIMIZE_MODE_SWITCHING for the description\n ;; of the machinery. Please note the clobber of FLAGS_REG. In i387 control\n@@ -4776,8 +4770,7 @@\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 5))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -4790,8 +4783,7 @@\n   [(parallel [(set (match_dup 0) (fix:DI (match_dup 1)))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n-\t      (clobber (match_dup 5))])]\n-  \"\")\n+\t      (clobber (match_dup 5))])])\n \n (define_insn \"fix_trunc<mode>_i387\"\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n@@ -4830,8 +4822,7 @@\n   [(parallel [(set (match_dup 4) (fix:X87MODEI12 (match_dup 1)))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n@@ -4842,15 +4833,15 @@\n   \"reload_completed\"\n   [(parallel [(set (match_dup 0) (fix:X87MODEI12 (match_dup 1)))\n \t      (use (match_dup 2))\n-\t      (use (match_dup 3))])]\n-  \"\")\n+\t      (use (match_dup 3))])])\n \n (define_insn \"x86_fnstcw_1\"\n   [(set (match_operand:HI 0 \"memory_operand\" \"=m\")\n \t(unspec:HI [(reg:HI FPCR_REG)] UNSPEC_FSTCW))]\n   \"TARGET_80387\"\n   \"fnstcw\\t%0\"\n-  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n+  [(set (attr \"length\")\n+\t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")])\n \n@@ -4859,7 +4850,8 @@\n \t(unspec:HI [(match_operand:HI 0 \"memory_operand\" \"m\")] UNSPEC_FLDCW))]\n   \"TARGET_80387\"\n   \"fldcw\\t%0\"\n-  [(set (attr \"length\") (symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n+  [(set (attr \"length\")\n+\t(symbol_ref \"ix86_attr_length_address_default (insn) + 2\"))\n    (set_attr \"mode\" \"HI\")\n    (set_attr \"unit\" \"i387\")\n    (set_attr \"athlon_decode\" \"vector\")\n@@ -4926,8 +4918,7 @@\n        || TARGET_MIX_SSE_I387)\n    && reload_completed\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n-  \"\")\n+   (set (match_dup 0) (float:X87MODEF (match_dup 2)))])\n \n (define_split\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n@@ -4937,8 +4928,7 @@\n     && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n         || TARGET_MIX_SSE_I387)\n     && reload_completed\"\n-  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n (define_expand \"float<SSEMODEI24:mode><X87MODEF:mode>2\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n@@ -5063,8 +5053,7 @@\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && SSE_REG_P (operands[0])))\"\n-  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_split\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n@@ -5078,8 +5067,7 @@\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && SSE_REG_P (operands[0])))\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (float:MODEF (match_dup 2)))]\n-  \"\")\n+   (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n (define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_mixed_interunit\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=f,x,x\")\n@@ -5322,8 +5310,7 @@\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && SSE_REG_P (operands[0])))\"\n-  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SSEMODEI24:mode><MODEF:mode>2_sse_nointerunit\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x\")\n@@ -5358,8 +5345,7 @@\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && SSE_REG_P (operands[0])))\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (float:MODEF (match_dup 2)))]\n-  \"\")\n+   (set (match_dup 0) (float:MODEF (match_dup 2)))])\n \n (define_split\n   [(set (match_operand:MODEF 0 \"register_operand\" \"\")\n@@ -5371,8 +5357,7 @@\n    && (SSE_REG_P (operands[0])\n        || (GET_CODE (operands[0]) == SUBREG\n \t   && SSE_REG_P (operands[0])))\"\n-  [(set (match_dup 0) (float:MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:MODEF (match_dup 1)))])\n \n (define_insn \"*float<SSEMODEI24:mode><X87MODEF:mode>2_i387_with_temp\"\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"=f,f\")\n@@ -5409,8 +5394,7 @@\n    && reload_completed\n    && FP_REG_P (operands[0])\"\n   [(set (match_dup 2) (match_dup 1))\n-   (set (match_dup 0) (float:X87MODEF (match_dup 2)))]\n-  \"\")\n+   (set (match_dup 0) (float:X87MODEF (match_dup 2)))])\n \n (define_split\n   [(set (match_operand:X87MODEF 0 \"register_operand\" \"\")\n@@ -5420,8 +5404,7 @@\n    && X87_ENABLE_FLOAT (<X87MODEF:MODE>mode, <SSEMODEI24:MODE>mode)\n    && reload_completed\n    && FP_REG_P (operands[0])\"\n-  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n ;; Avoid store forwarding (partial memory) stall penalty\n ;; by passing DImode value through XMM registers.  */\n@@ -5479,8 +5462,7 @@\n    && !TARGET_64BIT && optimize_function_for_speed_p (cfun)\n    && reload_completed\n    && FP_REG_P (operands[0])\"\n-  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))]\n-  \"\")\n+  [(set (match_dup 0) (float:X87MODEF (match_dup 1)))])\n \n ;; Avoid store forwarding (partial memory) stall penalty by extending\n ;; SImode value to DImode through XMM register instead of pushing two\n@@ -6050,8 +6032,7 @@\n   \"TARGET_64BIT && reload_completed \n    && true_regnum (operands[0]) != true_regnum (operands[1])\"\n   [(set (match_dup 0)\n-\t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))])\n \n ;; Convert lea to the lea pattern to avoid flags dependency.\n (define_split\n@@ -8840,10 +8821,7 @@\n    (match_operand:CSGNMODE 2 \"register_operand\" \"\")]\n   \"(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n    || (TARGET_SSE2 && (<MODE>mode == TFmode))\"\n-{\n-  ix86_expand_copysign (operands);\n-  DONE;\n-})\n+  \"ix86_expand_copysign (operands); DONE;\")\n \n (define_insn_and_split \"copysign<mode>3_const\"\n   [(set (match_operand:CSGNMODE 0 \"register_operand\" \"=x\")\n@@ -8857,10 +8835,7 @@\n   \"#\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n-{\n-  ix86_split_copysign_const (operands);\n-  DONE;\n-})\n+  \"ix86_split_copysign_const (operands); DONE;\")\n \n (define_insn \"copysign<mode>3_var\"\n   [(set (match_operand:CSGNMODE 0 \"register_operand\" \"=x,x,x,x,x\")\n@@ -8888,10 +8863,7 @@\n     || (TARGET_SSE2 && (<MODE>mode == TFmode)))\n    && reload_completed\"\n   [(const_int 0)]\n-{\n-  ix86_split_copysign_var (operands);\n-  DONE;\n-})\n+  \"ix86_split_copysign_var (operands); DONE;\")\n \f\n ;; One complement instructions\n \n@@ -8954,8 +8926,7 @@\n \t\t   (match_op_dup 2 [(xor:SWI (match_dup 3) (const_int -1))\n \t\t\t\t    (const_int 0)]))\n \t      (set (match_dup 1)\n-\t\t   (xor:SWI (match_dup 3) (const_int -1)))])]\n-  \"\")\n+\t\t   (xor:SWI (match_dup 3) (const_int -1)))])])\n \n ;; ??? Currently never generated - xor is used instead.\n (define_insn \"*one_cmplsi2_2_zext\"\n@@ -8982,8 +8953,7 @@\n \t\t   (match_op_dup 2 [(xor:SI (match_dup 3) (const_int -1))\n \t\t\t\t    (const_int 0)]))\n \t      (set (match_dup 1)\n-\t\t   (zero_extend:DI (xor:SI (match_dup 3) (const_int -1))))])]\n-  \"\")\n+\t\t   (zero_extend:DI (xor:SI (match_dup 3) (const_int -1))))])])\n \f\n ;; Shift instructions\n \n@@ -10157,8 +10127,7 @@\n   && (TARGET_USE_XCHGB || optimize_function_for_size_p (cfun))\"\n  [(parallel [(set (strict_low_part (match_dup 0))\n \t\t  (bswap:HI (match_dup 0)))\n-\t     (clobber (reg:CC FLAGS_REG))])]\n- \"\")\n+\t     (clobber (reg:CC FLAGS_REG))])])\n \f\n ;; Bit set / bit test instructions\n \n@@ -10467,9 +10436,7 @@\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  PUT_MODE (operands[1], QImode);\n-})\n+  \"PUT_MODE (operands[1], QImode);\")\n \n (define_split\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"\"))\n@@ -10478,9 +10445,7 @@\n \t    (const_int 0)))]\n   \"\"\n   [(set (match_dup 0) (match_dup 1))]\n-{\n-  PUT_MODE (operands[1], QImode);\n-})\n+  \"PUT_MODE (operands[1], QImode);\")\n \n (define_split\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n@@ -10609,9 +10574,7 @@\n \t(if_then_else (match_dup 0)\n \t\t      (label_ref (match_dup 1))\n \t\t      (pc)))]\n-{\n-  PUT_MODE (operands[0], VOIDmode);\n-})\n+  \"PUT_MODE (operands[0], VOIDmode);\")\n \n (define_split\n   [(set (pc)\n@@ -13062,8 +13025,7 @@\n \t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n    && !(reload_completed || reload_in_progress)\"\n-  [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))]\n-  \"\")\n+  [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))])\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n@@ -13073,8 +13035,7 @@\n \t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n    && !(reload_completed || reload_in_progress)\"\n-  [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))]\n-  \"\")\n+  [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))])\n \n (define_insn \"sincos_extend<mode>xf3_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n@@ -13100,8 +13061,8 @@\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n    && !(reload_completed || reload_in_progress)\"\n-  [(set (match_dup 1) (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SIN))]\n-  \"\")\n+  [(set (match_dup 1)\n+\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SIN))])\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n@@ -13112,8 +13073,8 @@\n \t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n    && !(reload_completed || reload_in_progress)\"\n-  [(set (match_dup 0) (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_COS))]\n-  \"\")\n+  [(set (match_dup 0)\n+\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_COS))])\n \n (define_expand \"sincos<mode>3\"\n   [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n@@ -14112,8 +14073,7 @@\n   \"reload_completed\"\n   [(parallel [(set (match_dup 2) (unspec:DI [(match_dup 1)] UNSPEC_FIST))\n \t      (clobber (match_dup 3))])\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 2))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -14123,8 +14083,7 @@\n    (clobber (match_scratch 3 \"\"))]\n   \"reload_completed\"\n   [(parallel [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_FIST))\n-\t      (clobber (match_dup 3))])]\n-  \"\")\n+\t      (clobber (match_dup 3))])])\n \n (define_insn_and_split \"*fist<mode>2_1\"\n   [(set (match_operand:X87MODEI12 0 \"register_operand\" \"\")\n@@ -14170,17 +14129,15 @@\n    (clobber (match_operand:X87MODEI12 2 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n   [(set (match_dup 2) (unspec:X87MODEI12 [(match_dup 1)] UNSPEC_FIST))\n-   (set (match_dup 0) (match_dup 2))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 2))])\n \n (define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n \t(unspec:X87MODEI12 [(match_operand:XF 1 \"register_operand\" \"\")]\n \t\t\t   UNSPEC_FIST))\n    (clobber (match_operand:X87MODEI12 2 \"memory_operand\" \"\"))]\n   \"reload_completed\"\n-  [(set (match_dup 0) (unspec:X87MODEI12 [(match_dup 1)] UNSPEC_FIST))]\n-  \"\")\n+  [(set (match_dup 0) (unspec:X87MODEI12 [(match_dup 1)] UNSPEC_FIST))])\n \n (define_expand \"lrintxf<mode>2\"\n   [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n@@ -14376,8 +14333,7 @@\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 5))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -14391,8 +14347,7 @@\n   [(parallel [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_FIST_FLOOR))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n-\t      (clobber (match_dup 5))])]\n-  \"\")\n+\t      (clobber (match_dup 5))])])\n \n (define_insn \"fist<mode>2_floor\"\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n@@ -14433,8 +14388,7 @@\n \t\t\t\t  UNSPEC_FIST_FLOOR))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n@@ -14447,8 +14401,7 @@\n   [(parallel [(set (match_dup 0) (unspec:X87MODEI12 [(match_dup 1)]\n \t\t\t\t  UNSPEC_FIST_FLOOR))\n \t      (use (match_dup 2))\n-\t      (use (match_dup 3))])]\n-  \"\")\n+\t      (use (match_dup 3))])])\n \n (define_expand \"lfloorxf<mode>2\"\n   [(parallel [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n@@ -14638,8 +14591,7 @@\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n \t      (clobber (match_dup 5))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n@@ -14653,8 +14605,7 @@\n   [(parallel [(set (match_dup 0) (unspec:DI [(match_dup 1)] UNSPEC_FIST_CEIL))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))\n-\t      (clobber (match_dup 5))])]\n-  \"\")\n+\t      (clobber (match_dup 5))])])\n \n (define_insn \"fist<mode>2_ceil\"\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"=m\")\n@@ -14695,8 +14646,7 @@\n \t\t\t\t  UNSPEC_FIST_CEIL))\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))])\n-   (set (match_dup 0) (match_dup 4))]\n-  \"\")\n+   (set (match_dup 0) (match_dup 4))])\n \n (define_split\n   [(set (match_operand:X87MODEI12 0 \"memory_operand\" \"\")\n@@ -14709,8 +14659,7 @@\n   [(parallel [(set (match_dup 0) (unspec:X87MODEI12 [(match_dup 1)]\n \t\t\t\t  UNSPEC_FIST_CEIL))\n \t      (use (match_dup 2))\n-\t      (use (match_dup 3))])]\n-  \"\")\n+\t      (use (match_dup 3))])])\n \n (define_expand \"lceilxf<mode>2\"\n   [(parallel [(set (match_operand:X87MODEI 0 \"nonimmediate_operand\" \"\")\n@@ -16521,7 +16470,6 @@\n   \"operands[0] = gen_lowpart (SImode, operands[0]);\n    operands[2] = gen_lowpart (SImode, operands[2]);\n    operands[3] = gen_lowpart (SImode, operands[3]);\")\n-\n \f\n ;; RTL Peephole optimizations, run before sched2.  These primarily look to\n ;; transform a complex memory operation into two memory to register operations."}]}