{"sha": "81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjZmJiYzIzYzUzZDI5YjE2Y2FlMjRjOThlYjBhN2QxNWUyYzNmYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-05-13T13:57:19Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-05-13T13:57:19Z"}, "message": "builtins-43.c: Use gimple dump instead of generic.\n\n\n\t* gcc.dg/builtins-43.c: Use gimple dump instead of generic.\n\t* gcc.dg/fold-xor-?.c: Likewise.\n\t* gcc.dg/pr15784-?.c: Likewise.\n\t* gcc.dg/pr20922-?.c: Likewise.\n\t* gcc.dg/tree-ssa/20050128-1.c: Likewise.\n\t* gcc.dg/tree-ssa/pr17598.c: Likewise.\n\t* gcc.dg/tree-ssa/pr20470.c: Likewise.\n\n\t* tree-inline.c (copy_body_r): Simplify substituted ADDR_EXPRs.\n\t* tree-optimize.c (pass_gimple): Kill.\n\t(init_tree_optimization_passes): Kill pass_gimple.\n\t* tree-cfg.c (build_tree_cfg): Do verify_stmts to check that we are gimple.\n\t* tree-dump.c (dump_files): Rename .generic to .gimple.*\n\nFrom-SVN: r99658", "tree": {"sha": "0103e79ff875c3089dc30563ad5cc977bee6de6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0103e79ff875c3089dc30563ad5cc977bee6de6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/comments", "author": null, "committer": null, "parents": [{"sha": "618656ff893c2741edeb413fb2fa294e867d28cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618656ff893c2741edeb413fb2fa294e867d28cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618656ff893c2741edeb413fb2fa294e867d28cd"}], "stats": {"total": 160, "additions": 78, "deletions": 82}, "files": [{"sha": "61d986100ed1de5429210612cfae811a8ce932d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,3 +1,11 @@\n+2005-05-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-inline.c (copy_body_r): Simplify substituted ADDR_EXPRs.\n+\t* tree-optimize.c (pass_gimple): Kill.\n+\t(init_tree_optimization_passes): Kill pass_gimple.\n+\t* tree-cfg.c (build_tree_cfg): Do verify_stmts to check that we are gimple.\n+\t* tree-dump.c (dump_files): Rename .generic to .gimple.*\n+\n 2005-05-13  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR rtl-optimization/20756:"}, {"sha": "44abb234dc4bf2f27dd027540250aaafb85e39f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,3 +1,13 @@\n+2005-05-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/builtins-43.c: Use gimple dump instead of generic.\n+\t* gcc.dg/fold-xor-?.c: Likewise.\n+\t* gcc.dg/pr15784-?.c: Likewise.\n+\t* gcc.dg/pr20922-?.c: Likewise.\n+\t* gcc.dg/tree-ssa/20050128-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr17598.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr20470.c: Likewise.\n+\n 2005-05-11  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/21260"}, {"sha": "4941ffd8904dd6b9f8f640b7aaa7ee02a87efc81", "filename": "gcc/testsuite/gcc.dg/builtins-43.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-43.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fno-trapping-math -fdump-tree-generic -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fno-trapping-math -fdump-tree-gimple -fdump-tree-optimized\" } */\n   \n extern void f(int);\n extern void link_error ();\n@@ -46,8 +46,8 @@ main ()\n \n \n /* Check that all instances of __builtin_isnan were folded.  */\n-/* { dg-final { scan-tree-dump-times \"isnan\" 0 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"isnan\" 0 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n \n /* Check that all instances of link_error were subject to DCE.  */\n /* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" } } */"}, {"sha": "52b1ac4670e63b4e91858a62ce14726f9984dcad", "filename": "gcc/testsuite/gcc.dg/fold-xor-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-1.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n \n int f (int a, int b) {\n   return ~a ^ ~b;\n@@ -8,5 +8,5 @@ int f (int a, int b) {\n unsigned int g (unsigned int a, unsigned int b) {\n   return ~a ^ ~b;\n }\n-/* { dg-final { scan-tree-dump-times \"a \\\\^ b\" 2 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"a \\\\^ b\" 2 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "35337c9c9e83c4132192ed34c499023fa8f9aa23", "filename": "gcc/testsuite/gcc.dg/fold-xor-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-xor-2.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n int f (int a, int b) {\n \treturn ~(a ^ -(b + 1));\n }\n@@ -12,5 +12,5 @@ unsigned int h (unsigned int a, unsigned int b) {\n \treturn ~(-(b + 1) ^ a);\n }\n \n-/* { dg-final { scan-tree-dump-times \"b \\\\^ a\" 3 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"b \\\\^ a\" 3 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "0e492a3babe13cb0c0af7b88e341441dd95905a3", "filename": "gcc/testsuite/gcc.dg/pr15784-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-1.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n /* Test for folding abs(x) where appropriate.  */\n #define abs(x) x > 0 ? x : -x\n extern double fabs (double);\n@@ -39,5 +39,5 @@ int h (float x) {\n int i (float x) {\n \treturn fabs(x) == -0.0;\n }\n-/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 0 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 0 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "eb1608c64edc4ea3db7cd59235f9bed9087250b4", "filename": "gcc/testsuite/gcc.dg/pr15784-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-2.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic -ffast-math\" } */\n+/* { dg-options \"-fdump-tree-gimple -ffast-math\" } */\n /* Test for folding abs(x) where appropriate.  */\n #define abs(x) x > 0 ? x : -x\n extern double fabs (double);\n@@ -8,5 +8,5 @@ int a (float x) {\n \treturn fabs(x) >= 0.0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 0 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 0 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "a8bdc552cde26211ec56025591ed150b5f53c14c", "filename": "gcc/testsuite/gcc.dg/pr15784-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr15784-3.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* SH4 without -mieee defaults to -ffinite-math-only.  */\n-/* { dg-options \"-fdump-tree-generic -fno-finite-math-only\" } */\n+/* { dg-options \"-fdump-tree-gimple -fno-finite-math-only\" } */\n /* Test for folding abs(x) where appropriate.  */\n #define abs(x) x > 0 ? x : -x\n extern double fabs (double);\n@@ -9,5 +9,5 @@ int a (float x) {\n \treturn fabs(x) >= 0.0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 1 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "43ba57b62cca4466b73d34941fb7f5c61abb9db3", "filename": "gcc/testsuite/gcc.dg/pr20130-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20130-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20130-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20130-1.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n int z (int a) {\n \treturn a * -1;\n }\n@@ -11,4 +11,4 @@ int x (int a) {\n int y (int a) {\n \treturn -(-1 * -a);\n }\n-/* { dg-final { scan-tree-dump-times \"-a\" 3 \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"-a\" 3 \"gimple\" } } */"}, {"sha": "64a75f525663ffda155b90e52b5bcc3be6c64290", "filename": "gcc/testsuite/gcc.dg/pr20922-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-1.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-wrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-fno-wrapv -fdump-tree-gimple\" } */\n int f(int i)\n {\n   return (i - 2) > i;\n@@ -34,5 +34,5 @@ int z(double i)\n {\n   return (i + (-2.0)) > i;\n }\n-/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "4bbebfd5f17d422a1187c9df32aabe4b7445ba8d", "filename": "gcc/testsuite/gcc.dg/pr20922-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-2.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fwrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-fwrapv -fdump-tree-gimple\" } */\n int f (int i)\n {\n   return (i - 2) > i;\n@@ -14,5 +14,5 @@ int h (double i)\n {\n   return (i + 2.0) <= i;\n }\n-/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "ce400528d630a1e727560a8e6890ebce4a0562ca", "filename": "gcc/testsuite/gcc.dg/pr20922-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-3.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-gimple\" } */\n int f(int i)\n {\n   return (i - 2) <= i;\n@@ -29,5 +29,5 @@ int z(double i)\n {\n   return (i + (-2.0)) <= i;\n }\n-/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "9b95b3829345bf31930dbc3dd5724c113d9e7d28", "filename": "gcc/testsuite/gcc.dg/pr20922-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-4.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fno-wrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-fno-wrapv -fdump-tree-gimple\" } */\n int f(int i)\n {\n   return i < (i - 2);\n@@ -34,5 +34,5 @@ int z(double i)\n {\n   return i < (i + (-2.0));\n }\n-/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 0\" 7 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "db94c7ba0326fad3f820da337a3e8ad416004e26", "filename": "gcc/testsuite/gcc.dg/pr20922-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-5.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsignaling-nans -fwrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-fsignaling-nans -fwrapv -fdump-tree-gimple\" } */\n int f(int i)\n {\n   return i < (i - 2);\n@@ -19,5 +19,5 @@ int j (double i)\n {\n   return i > i + 2.0;\n }\n-/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 0\" 0 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "0c099bd38211fa633d7853fcbaf93af3edee776d", "filename": "gcc/testsuite/gcc.dg/pr20922-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20922-6.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-generic\" } */\n+/* { dg-options \"-ffast-math -fno-wrapv -fdump-tree-gimple\" } */\n int f(int i)\n {\n   return i >= (i - 2);\n@@ -29,5 +29,5 @@ int z(double i)\n {\n   return i >= (i + (-2.0));\n }\n-/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \" = 1\" 6 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "7197ec8b2c7f0536223a6a466a895b96f2c39d71", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20050128-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050128-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050128-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20050128-1.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-generic\" } */\n+/* { dg-options \"-O2 -fdump-tree-gimple\" } */\n \n int\n foo (int align)\n@@ -8,7 +8,7 @@ foo (int align)\n   return off ? align - off : 0;\n }\n \n-/* We should have optimized away the mod operator before we genericized\n+/* We should have optimized away the mod operator before we gimpleized\n    the code.  */\n-/* { dg-final { scan-tree-dump-times \"%\" 0 \"generic\"} } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"%\" 0 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "ac912a2b19b4f2a827ff94328096cebb77c86b42", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr17598.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr17598.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n \n struct f\n {\n@@ -35,8 +35,8 @@ int foobar2(struct g *x)\n   return &x->k->i == &yy.k->i; /* x->k == yy.k */\n }\n \n-/* { dg-final { scan-tree-dump-times \"x == y\" 1 \"generic\" } } */\n-/* { dg-final { scan-tree-dump-times \"x == &y\" 2 \"generic\" } } */\n-/* { dg-final { scan-tree-dump \"x->k\" \"generic\" } } */\n-/* { dg-final { scan-tree-dump \"yy.k\" \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"x == y\" 1 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump-times \"x == &y\" 2 \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"x->k\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"yy.k\" \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "b0d7492de98cde3f953fa2457d93e123d9a0303a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20470.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20470.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20470.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20470.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fdump-tree-generic\" } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n \n /* PR tree-optimization/20470:\n     Missing fold to abs(x) when x == MINUS_EXPR.  */\n@@ -11,5 +11,5 @@ void f1()\n   i = abs(j-k);\n }\n \n-/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 1 \"generic\" } } */\n-/* { dg-final { cleanup-tree-dump \"generic\" } } */\n+/* { dg-final { scan-tree-dump-times \"ABS_EXPR\" 1 \"gimple\" } } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "983530ef361957c9c82824bcb0c0e1e7c90796be", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -212,6 +212,10 @@ build_tree_cfg (tree *tp)\n       }\n   }\n \n+#ifdef ENABLE_CHECKING\n+  verify_stmts ();\n+#endif\n+\n   /* Dump a textual representation of the flowgraph.  */\n   if (dump_file)\n     dump_tree_cfg (dump_file, dump_flags);"}, {"sha": "836b10cc05b6a7330cb24601bac91df308a016fe", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -672,7 +672,7 @@ static struct dump_file_info dump_files[TDI_end] =\n   {\".tu\", \"translation-unit\", NULL, TDF_TREE, 0, 0, 0},\n   {\".class\", \"class-hierarchy\", NULL, TDF_TREE, 0, 1, 0},\n   {\".original\", \"tree-original\", NULL, TDF_TREE, 0, 2, 0},\n-  {\".generic\", \"tree-generic\", NULL, TDF_TREE, 0, 3, 0},\n+  {\".gimple\", \"tree-gimple\", NULL, TDF_TREE, 0, 3, 0},\n   {\".nested\", \"tree-nested\", NULL, TDF_TREE, 0, 4, 0},\n   {\".inlined\", \"tree-inlined\", NULL, TDF_TREE, 0, 5, 0},\n   {\".vcg\", \"tree-vcg\", NULL, TDF_TREE, 0, 6, 0},"}, {"sha": "5873d6257e92a84d2c39db1ac4bb877094ab8b57", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -566,21 +566,15 @@ copy_body_r (tree *tp, int *walk_subtrees, void *data)\n \t{\n \t  /* Get rid of *& from inline substitutions that can happen when a\n \t     pointer argument is an ADDR_EXPR.  */\n-\t  tree decl = TREE_OPERAND (*tp, 0), value;\n+\t  tree decl = TREE_OPERAND (*tp, 0);\n \t  splay_tree_node n;\n \n \t  n = splay_tree_lookup (id->decl_map, (splay_tree_key) decl);\n \t  if (n)\n \t    {\n-\t      value = (tree) n->value;\n-\t      STRIP_NOPS (value);\n-\t      if (TREE_CODE (value) == ADDR_EXPR\n-\t\t  && (lang_hooks.types_compatible_p\n-\t\t      (TREE_TYPE (*tp), TREE_TYPE (TREE_OPERAND (value, 0)))))\n-\t\t{\n-\t\t  *tp = TREE_OPERAND (value, 0);\n-\t\t  return copy_body_r (tp, walk_subtrees, data);\n-\t\t}\n+\t      *tp = build_fold_indirect_ref ((tree)n->value);\n+\t      *walk_subtrees = 0;\n+\t      return NULL;\n \t    }\n \t}\n "}, {"sha": "c85830d2b2fa31d575918f8d53e7498ecbe93cb1", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=81cfbbc23c53d29b16cae24c98eb0a7d15e2c3fc", "patch": "@@ -57,25 +57,6 @@ bool in_gimple_form;\n /* The root of the compilation pass tree, once constructed.  */\n static struct tree_opt_pass *all_passes, *all_ipa_passes;\n \n-/* Pass: dump the gimplified, inlined, functions.  */\n-\n-static struct tree_opt_pass pass_gimple = \n-{\n-  \"gimple\",\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n-  NULL,\t\t\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  0,\t\t\t\t\t/* tv_id */\n-  0,\t\t\t\t\t/* properties_required */\n-  PROP_gimple_any,\t\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n-};\n-\n /* Gate: execute, or not, all of the non-trivial optimizations.  */\n \n static bool\n@@ -340,7 +321,6 @@ init_tree_optimization_passes (void)\n   *p = NULL;\n \n   p = &all_passes;\n-  NEXT_PASS (pass_gimple);\n   NEXT_PASS (pass_remove_useless_stmts);\n   NEXT_PASS (pass_mudflap_1);\n   NEXT_PASS (pass_lower_cf);"}]}