{"sha": "d0aa42d276497d762934da72d7ad6d3d4b5551fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBhYTQyZDI3NjQ5N2Q3NjI5MzRkYTcyZDdhZDZkM2Q0YjU1NTFmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-06-18T16:08:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-06-18T16:08:29Z"}, "message": "* constexpr.c (cxx_eval_store_expression): Delay target evaluation.\n\nFrom-SVN: r272431", "tree": {"sha": "19dfd17c9aa5d02407078e9c1bc4455940fd9676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19dfd17c9aa5d02407078e9c1bc4455940fd9676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0aa42d276497d762934da72d7ad6d3d4b5551fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aa42d276497d762934da72d7ad6d3d4b5551fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0aa42d276497d762934da72d7ad6d3d4b5551fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aa42d276497d762934da72d7ad6d3d4b5551fc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "043666e0955d64ed538f2a5511f9fdc5484b657a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043666e0955d64ed538f2a5511f9fdc5484b657a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/043666e0955d64ed538f2a5511f9fdc5484b657a"}], "stats": {"total": 53, "additions": 37, "deletions": 16}, "files": [{"sha": "7bd47cf4b569f8f9f85e0dd31d6d9abb7edee280", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aa42d276497d762934da72d7ad6d3d4b5551fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aa42d276497d762934da72d7ad6d3d4b5551fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d0aa42d276497d762934da72d7ad6d3d4b5551fc", "patch": "@@ -1,3 +1,7 @@\n+2019-06-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_store_expression): Delay target evaluation.\n+\n 2019-06-18  Jason Merrill  <jason@redhat.com>\n \n \t* constexpr.c (eval_and_check_array_index): Split out from..."}, {"sha": "22f4fa0d3511b3285dabc7bf9e844e0c3796520f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0aa42d276497d762934da72d7ad6d3d4b5551fc/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0aa42d276497d762934da72d7ad6d3d4b5551fc/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d0aa42d276497d762934da72d7ad6d3d4b5551fc", "patch": "@@ -3747,22 +3747,18 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       if (*non_constant_p)\n \treturn t;\n     }\n-  target = cxx_eval_constant_expression (ctx, target,\n-\t\t\t\t\t true,\n-\t\t\t\t\t non_constant_p, overflow_p);\n-  if (*non_constant_p)\n-    return t;\n \n-  if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (target), type))\n+  bool evaluated = false;\n+  if (lval)\n     {\n-      /* For initialization of an empty base, the original target will be\n-         *(base*)this, which the above evaluation resolves to the object\n-\t argument, which has the derived type rather than the base type.  In\n-\t this situation, just evaluate the initializer and return, since\n-\t there's no actual data to store.  */\n-      gcc_assert (is_empty_class (type));\n-      return cxx_eval_constant_expression (ctx, init, false,\n-\t\t\t\t\t   non_constant_p, overflow_p);\n+      /* If we want to return a reference to the target, we need to evaluate it\n+\t as a whole; otherwise, only evaluate the innermost piece to avoid\n+\t building up unnecessary *_REFs.  */\n+      target = cxx_eval_constant_expression (ctx, target, true,\n+\t\t\t\t\t     non_constant_p, overflow_p);\n+      evaluated = true;\n+      if (*non_constant_p)\n+\treturn t;\n     }\n \n   /* Find the underlying variable.  */\n@@ -3792,7 +3788,17 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t  break;\n \n \tdefault:\n-\t  object = probe;\n+\t  if (evaluated)\n+\t    object = probe;\n+\t  else\n+\t    {\n+\t      probe = cxx_eval_constant_expression (ctx, probe, true,\n+\t\t\t\t\t\t    non_constant_p, overflow_p);\n+\t      evaluated = true;\n+\t      if (*non_constant_p)\n+\t\treturn t;\n+\t    }\n+\t  break;\n \t}\n     }\n \n@@ -3948,7 +3954,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       new_ctx.object = target;\n       init = cxx_eval_constant_expression (&new_ctx, init, false,\n \t\t\t\t\t   non_constant_p, overflow_p);\n-      if (target == object)\n+      if (ctors->is_empty())\n \t/* The hash table might have moved since the get earlier.  */\n \tvalp = ctx->values->get (object);\n     }\n@@ -3961,6 +3967,17 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n     {\n       /* An outer ctx->ctor might be pointing to *valp, so replace\n \t its contents.  */\n+      if (!same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (init),\n+\t\t\t\t\t\t      TREE_TYPE (*valp)))\n+\t{\n+\t  /* For initialization of an empty base, the original target will be\n+\t   *(base*)this, evaluation of which resolves to the object\n+\t   argument, which has the derived type rather than the base type.  In\n+\t   this situation, just evaluate the initializer and return, since\n+\t   there's no actual data to store.  */\n+\t  gcc_assert (is_empty_class (TREE_TYPE (init)) && !lval);\n+\t  return init;\n+\t}\n       CONSTRUCTOR_ELTS (*valp) = CONSTRUCTOR_ELTS (init);\n       TREE_CONSTANT (*valp) = TREE_CONSTANT (init);\n       TREE_SIDE_EFFECTS (*valp) = TREE_SIDE_EFFECTS (init);"}]}