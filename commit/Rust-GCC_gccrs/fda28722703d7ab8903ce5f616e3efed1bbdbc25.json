{"sha": "fda28722703d7ab8903ce5f616e3efed1bbdbc25", "node_id": "C_kwDOANBUbNoAKGZkYTI4NzIyNzAzZDdhYjg5MDNjZTVmNjE2ZTNlZmVkMWJiZGJjMjU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T14:21:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-12-14T21:45:46Z"}, "message": "libstdc++: Simplify typedefs by using __UINTPTR_TYPE__\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/ext/pointer.h (_Relative_pointer_impl::_UIntPtrType):\n\tRename to uintptr_t and define as __UINTPTR_TYPE__.", "tree": {"sha": "2510980478f8572e8de0fde5cb2211ab4f88ccce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2510980478f8572e8de0fde5cb2211ab4f88ccce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fda28722703d7ab8903ce5f616e3efed1bbdbc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda28722703d7ab8903ce5f616e3efed1bbdbc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fda28722703d7ab8903ce5f616e3efed1bbdbc25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fda28722703d7ab8903ce5f616e3efed1bbdbc25/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63bb98e1c1eabaa9a68e8a6270663f2dfff047d8"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "5bf638a0c288b9cdc5e4a9d05c0934b2854b9876", "filename": "libstdc++-v3/include/ext/pointer.h", "status": "modified", "additions": 19, "deletions": 31, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fda28722703d7ab8903ce5f616e3efed1bbdbc25/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fda28722703d7ab8903ce5f616e3efed1bbdbc25/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpointer.h?ref=fda28722703d7ab8903ce5f616e3efed1bbdbc25", "patch": "@@ -120,7 +120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (_M_diff == 1)\n           return 0;\n         else\n-          return reinterpret_cast<_Tp*>(reinterpret_cast<_UIntPtrType>(this)\n+          return reinterpret_cast<_Tp*>(reinterpret_cast<uintptr_t>(this)\n \t\t\t\t\t+ _M_diff);\n       }\n   \n@@ -130,30 +130,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (!__arg)\n           _M_diff = 1;\n         else\n-          _M_diff = reinterpret_cast<_UIntPtrType>(__arg) \n-                    - reinterpret_cast<_UIntPtrType>(this);\n+          _M_diff = reinterpret_cast<uintptr_t>(__arg) \n+                    - reinterpret_cast<uintptr_t>(this);\n       }\n   \n       // Comparison of pointers\n       inline bool\n       operator<(const _Relative_pointer_impl& __rarg) const\n-      { return (reinterpret_cast<_UIntPtrType>(this->get())\n-\t\t< reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n+      { return (reinterpret_cast<uintptr_t>(this->get())\n+\t\t< reinterpret_cast<uintptr_t>(__rarg.get())); }\n \n       inline bool\n       operator==(const _Relative_pointer_impl& __rarg) const\n-      { return (reinterpret_cast<_UIntPtrType>(this->get())\n-\t\t== reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n+      { return (reinterpret_cast<uintptr_t>(this->get())\n+\t\t== reinterpret_cast<uintptr_t>(__rarg.get())); }\n \n     private:\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-      typedef __gnu_cxx::__conditional_type<\n-\t (sizeof(unsigned long) >= sizeof(void*)),\n-\t unsigned long, unsigned long long>::__type _UIntPtrType;\n-#else\n-      typedef unsigned long _UIntPtrType;\n-#endif\n-      _UIntPtrType _M_diff;\n+      typedef __UINTPTR_TYPE__ uintptr_t;\n+      uintptr_t _M_diff;\n     };\n   \n   /**\n@@ -173,7 +167,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           return 0;\n         else\n           return reinterpret_cast<const _Tp*>\n-\t      (reinterpret_cast<_UIntPtrType>(this) + _M_diff);\n+\t      (reinterpret_cast<uintptr_t>(this) + _M_diff);\n       }\n   \n       void \n@@ -182,30 +176,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         if (!__arg)\n           _M_diff = 1;\n         else\n-          _M_diff = reinterpret_cast<_UIntPtrType>(__arg) \n-                    - reinterpret_cast<_UIntPtrType>(this);\n+          _M_diff = reinterpret_cast<uintptr_t>(__arg) \n+                    - reinterpret_cast<uintptr_t>(this);\n       }\n   \n       // Comparison of pointers\n       inline bool\n       operator<(const _Relative_pointer_impl& __rarg) const\n-      { return (reinterpret_cast<_UIntPtrType>(this->get())\n-\t\t< reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n+      { return (reinterpret_cast<uintptr_t>(this->get())\n+\t\t< reinterpret_cast<uintptr_t>(__rarg.get())); }\n \n       inline bool\n       operator==(const _Relative_pointer_impl& __rarg) const\n-      { return (reinterpret_cast<_UIntPtrType>(this->get())\n-\t\t== reinterpret_cast<_UIntPtrType>(__rarg.get())); }\n+      { return (reinterpret_cast<uintptr_t>(this->get())\n+\t\t== reinterpret_cast<uintptr_t>(__rarg.get())); }\n   \n     private:\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-      typedef __gnu_cxx::__conditional_type<\n-\t (sizeof(unsigned long) >= sizeof(void*)),\n-\t unsigned long, unsigned long long>::__type _UIntPtrType;\n-#else\n-      typedef unsigned long _UIntPtrType;\n-#endif\n-       _UIntPtrType _M_diff;\n+      typedef __UINTPTR_TYPE__ uintptr_t;\n+      uintptr_t _M_diff;\n     };\n \n   /**\n@@ -597,7 +585,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up>\n         using rebind = typename __gnu_cxx::_Pointer_adapter<\n-\ttypename pointer_traits<_Storage_policy>::template rebind<_Up>>;\n+\t  typename pointer_traits<_Storage_policy>::template rebind<_Up>>;\n \n       static pointer pointer_to(typename pointer::reference __r) noexcept\n       { return pointer(std::addressof(__r)); }"}]}