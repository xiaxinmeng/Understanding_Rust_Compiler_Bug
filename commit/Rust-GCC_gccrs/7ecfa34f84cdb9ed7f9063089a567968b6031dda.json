{"sha": "7ecfa34f84cdb9ed7f9063089a567968b6031dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VjZmEzNGY4NGNkYjllZDdmOTA2MzA4OWE1Njc5NjhiNjAzMWRkYQ==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-06-21T08:53:06Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-06-21T08:53:06Z"}, "message": "usegld.h: New file.\n\n\t* config/usegld.h: New file.\n\t* config/sol2.h (PREFERRED_DEBUGGING_TYPE): Remove.\n\t(CPP_SUBTARGET_SPEC): Remove -compat-bsd support.\n\t(LIB_SPEC): Likewise.\n\tSearch /lib.\n\t(LINK_ARCH32_SPEC_BASE): Remove -compat-bsd support.\n\t(RDYNAMIC_SPEC): Handle GNU ld.\n\t[HAVE_LD_EH_FRAME_HDR && TARGET_DL_ITERATE_PHDR] (LINK_EH_SPEC): Define.\n\t(SUPPORTS_INIT_PRIORITY): Only disable for Sun ld.\n\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Define.\n\t[!USE_GAS] (NO_DBX_BNSYM_ENSYM): Redefine.\n\t(STACK_CHECK_STATIC_BUILTIN): Define.\n\t* config/sol2.opt (compat-bsd): Remove.\n\t* config/sol2-10.h (TARGET_C99_FUNCTIONS): Remove undef.\n\t* config/sol2-bi.h: New file.\n\t* config/sol2-gld.h: Remove.\n\t* config/i386/sol2.h (TLS_COMMON_ASM_OP): Only define if !USE_GAS.\n\t(NO_DBX_BNSYM_ENSYM): Remove.\n\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Remove.\n\t(STACK_CHECK_STATIC_BUILTIN): Remove.\n\tTest USE_GLD instead of TARGET_GNU_LD.\n\t* config/i386/sol2-10.h: Rename to ...\n\t* config/i386/sol2-bi.h .. this.\n\t(SUBTARGET_EXTRA_SPECS): Redefine.\n\t(WCHAR_TYPE, WCHAR_TYPE_SIZE, WINT_TYPE, WINT_TYPE_SIZE): Remove.\n\t(MULTILIB_DEFAULTS): Remove.\n\t(DEFAULT_ARCH32_P): Define.\n\t(LINK_ARCH64_SPEC_BASE, LINK_ARCH64_SPEC): Remove.\n\t(ARCH64_SUBDIR): Define.\n\tTest USE_GLD instead of TARGET_GNU_LD.\n\t(I386_EMULATION): Rename to ...\n\t(ARCH32_EMULATION): ... this.\n\t(X86_64_EMULATION): Rename to ...\n\t(ARCH64_EMULATION): ... this.\n\t(TARGET_LD_EMULATION): Remove.\n\t(LINK_ARCH_SPEC): Remove.\n\t* config/i386/sol2-gas.h: Remove.\n\t* config/i386/t-sol2-10: Rename to ...\n\t* config/i386/t-sol2-64: ... this.\n\t* config/sparc/sol2.h (SPARC_DEFAULT_CMODEL): Redefine.\n\t(AS_SPARC64_FLAG): Define.\n\t(ASM_CPU32_DEFAULT_SPEC, ASM_CPU64_DEFAULT_SPEC): Redefine.\n\t(CPP_CPU64_DEFAULT_SPEC, ASM_CPU32_DEFAULT_SPEC): Redefine\n\tdepending on TARGET_CPU_DEFAULT.\n\t(CPP_CPU_SPEC): Redefine.\n\t(ASM_CPU_SPEC): Handle DEFAULT_ARCH32_P.\n\t(CPP_CPU_DEFAULT_SPEC, ASM_CPU_DEFAULT_SPEC): Redefine.\n\t(CPP_ARCH32_SPEC, CPP_ARCH64_SPEC, CPP_ARCH_SPEC): Redefine.\n\t(ASM_ARCH_SPEC, ASM_ARCH32_SPEC, ASM_ARCH64_SPEC,\n\tASM_ARCH_DEFAULT_SPEC): Redefine.\n\t(SUBTARGET_EXTRA_SPECS): Add LINK_ARCH32_SPEC, LINK_ARCH64_SPEC,\n\tLINK_ARCH_DEFAULT_SPEC.\n\t[USE_GLD] (ARCH32_EMULATION, ARCH64_EMULATION): Define.\n\t[USE_GLD] (LINK_ARCH32_SPEC, LINK_ARCH64_SPEC): Redefine.\n\t(ARCH64_SUBDIR): Define.\n\t(LINK_ARCH64_SPEC): Redefine.\n\t(CC1_SPEC): Redefine.\n\t(OPTION_DEFAULT_SPECS): Redefine.\n\t(MULTILIB_DEFAULTS): Define.\n\t(WCHAR_TYPE, WCHAR_TYPE_SIZE, WINT_TYPE, WINT_TYPE_SIZE): Redefine.\n\t[USE_GAS && HAVE_AS_TLS] (TARGET_SUN_TLS, TARGET_GNU_TLS): Redefine.\n\t[USE_GLD] (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Undef.\n\t(NO_DBX_BNSYM_ENSYM): Remove.\n\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Remove.\n\t(ASM_OUTPUT_ALIGN_WITH_NOP): Only define if !USE_GAS.\n\t(TARGET_ASM_NAMED_SECTION): Likewise.\n\t(STACK_CHECK_STATIC_BUILTIN): Remove.\n\t* config/sparc/sol2-bi.h: Remove.\n\t* config/sparc/sol2-gas-bi.h: Remove.\n\t* config/sparc/sol2-gas.h: Remove.\n\t* config/sparc/sol2-gld-bi.h: Remove.\n\t* config.gcc (i[34567]86-*-solaris2*, sparc*-*-solaris2*): Move\n\tcommon parts ...\n\t(*-*-solaris2*): ... here.\n\nFrom-SVN: r175245", "tree": {"sha": "54e754d7718349903f64502e7344f614091edde2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54e754d7718349903f64502e7344f614091edde2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ecfa34f84cdb9ed7f9063089a567968b6031dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecfa34f84cdb9ed7f9063089a567968b6031dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ecfa34f84cdb9ed7f9063089a567968b6031dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ecfa34f84cdb9ed7f9063089a567968b6031dda/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1795c28e175fbdf2a23d8bf0293f95794c7167bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1795c28e175fbdf2a23d8bf0293f95794c7167bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1795c28e175fbdf2a23d8bf0293f95794c7167bd"}], "stats": {"total": 1396, "additions": 600, "deletions": 796}, "files": [{"sha": "932e047837150cf7ed44bc558010298e88a15d1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -1,3 +1,80 @@\n+2011-06-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/usegld.h: New file.\n+\t* config/sol2.h (PREFERRED_DEBUGGING_TYPE): Remove.\n+\t(CPP_SUBTARGET_SPEC): Remove -compat-bsd support.\n+\t(LIB_SPEC): Likewise.\n+\tSearch /lib.\n+\t(LINK_ARCH32_SPEC_BASE): Remove -compat-bsd support.\n+\t(RDYNAMIC_SPEC): Handle GNU ld.\n+\t[HAVE_LD_EH_FRAME_HDR && TARGET_DL_ITERATE_PHDR] (LINK_EH_SPEC): Define.\n+\t(SUPPORTS_INIT_PRIORITY): Only disable for Sun ld.\n+\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Define.\n+\t[!USE_GAS] (NO_DBX_BNSYM_ENSYM): Redefine.\n+\t(STACK_CHECK_STATIC_BUILTIN): Define.\n+\t* config/sol2.opt (compat-bsd): Remove.\n+\t* config/sol2-10.h (TARGET_C99_FUNCTIONS): Remove undef.\n+\t* config/sol2-bi.h: New file.\n+\t* config/sol2-gld.h: Remove.\n+\t* config/i386/sol2.h (TLS_COMMON_ASM_OP): Only define if !USE_GAS.\n+\t(NO_DBX_BNSYM_ENSYM): Remove.\n+\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Remove.\n+\t(STACK_CHECK_STATIC_BUILTIN): Remove.\n+\tTest USE_GLD instead of TARGET_GNU_LD.\n+\t* config/i386/sol2-10.h: Rename to ...\n+\t* config/i386/sol2-bi.h .. this.\n+\t(SUBTARGET_EXTRA_SPECS): Redefine.\n+\t(WCHAR_TYPE, WCHAR_TYPE_SIZE, WINT_TYPE, WINT_TYPE_SIZE): Remove.\n+\t(MULTILIB_DEFAULTS): Remove.\n+\t(DEFAULT_ARCH32_P): Define.\n+\t(LINK_ARCH64_SPEC_BASE, LINK_ARCH64_SPEC): Remove.\n+\t(ARCH64_SUBDIR): Define.\n+\tTest USE_GLD instead of TARGET_GNU_LD.\n+\t(I386_EMULATION): Rename to ...\n+\t(ARCH32_EMULATION): ... this.\n+\t(X86_64_EMULATION): Rename to ...\n+\t(ARCH64_EMULATION): ... this.\n+\t(TARGET_LD_EMULATION): Remove.\n+\t(LINK_ARCH_SPEC): Remove.\n+\t* config/i386/sol2-gas.h: Remove.\n+\t* config/i386/t-sol2-10: Rename to ...\n+\t* config/i386/t-sol2-64: ... this.\n+\t* config/sparc/sol2.h (SPARC_DEFAULT_CMODEL): Redefine.\n+\t(AS_SPARC64_FLAG): Define.\n+\t(ASM_CPU32_DEFAULT_SPEC, ASM_CPU64_DEFAULT_SPEC): Redefine.\n+\t(CPP_CPU64_DEFAULT_SPEC, ASM_CPU32_DEFAULT_SPEC): Redefine\n+\tdepending on TARGET_CPU_DEFAULT.\n+\t(CPP_CPU_SPEC): Redefine.\n+\t(ASM_CPU_SPEC): Handle DEFAULT_ARCH32_P.\n+\t(CPP_CPU_DEFAULT_SPEC, ASM_CPU_DEFAULT_SPEC): Redefine.\n+\t(CPP_ARCH32_SPEC, CPP_ARCH64_SPEC, CPP_ARCH_SPEC): Redefine.\n+\t(ASM_ARCH_SPEC, ASM_ARCH32_SPEC, ASM_ARCH64_SPEC,\n+\tASM_ARCH_DEFAULT_SPEC): Redefine.\n+\t(SUBTARGET_EXTRA_SPECS): Add LINK_ARCH32_SPEC, LINK_ARCH64_SPEC,\n+\tLINK_ARCH_DEFAULT_SPEC.\n+\t[USE_GLD] (ARCH32_EMULATION, ARCH64_EMULATION): Define.\n+\t[USE_GLD] (LINK_ARCH32_SPEC, LINK_ARCH64_SPEC): Redefine.\n+\t(ARCH64_SUBDIR): Define.\n+\t(LINK_ARCH64_SPEC): Redefine.\n+\t(CC1_SPEC): Redefine.\n+\t(OPTION_DEFAULT_SPECS): Redefine.\n+\t(MULTILIB_DEFAULTS): Define.\n+\t(WCHAR_TYPE, WCHAR_TYPE_SIZE, WINT_TYPE, WINT_TYPE_SIZE): Redefine.\n+\t[USE_GAS && HAVE_AS_TLS] (TARGET_SUN_TLS, TARGET_GNU_TLS): Redefine.\n+\t[USE_GLD] (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP): Undef.\n+\t(NO_DBX_BNSYM_ENSYM): Remove.\n+\t(SUBTARGET_INSERT_ATTRIBUTES, SUBTARGET_ATTRIBUTE_TABLE): Remove.\n+\t(ASM_OUTPUT_ALIGN_WITH_NOP): Only define if !USE_GAS.\n+\t(TARGET_ASM_NAMED_SECTION): Likewise.\n+\t(STACK_CHECK_STATIC_BUILTIN): Remove.\n+\t* config/sparc/sol2-bi.h: Remove.\n+\t* config/sparc/sol2-gas-bi.h: Remove.\n+\t* config/sparc/sol2-gas.h: Remove.\n+\t* config/sparc/sol2-gld-bi.h: Remove.\n+\t* config.gcc (i[34567]86-*-solaris2*, sparc*-*-solaris2*): Move\n+\tcommon parts ...\n+\t(*-*-solaris2*): ... here.\n+\n 2011-06-21  Christian Bruel  <christian.bruel@st.com>\n \t\n \tPR other/43564"}, {"sha": "11714aafe6eaf27b4ee7d9fb9f3d8599fa31bcc8", "filename": "gcc/config.gcc", "status": "modified", "additions": 33, "deletions": 68, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -686,7 +686,35 @@ case ${target} in\n   tm_defines=\"$tm_defines DEFAULT_LIBC=LIBC_UCLIBC SINGLE_LIBC\"\n   ;;\n *-*-solaris2*)\n+  # i?86-*-solaris2* needs to insert headers between cpu default and\n+  # Solaris 2 specific ones.\n+  sol2_tm_file=\"dbxelf.h elfos.h ${cpu_type}/sysv4.h sol2.h ${cpu_type}/sol2.h\"\n+  case ${target} in\n+    *-*-solaris2.1[0-9]*)\n+      sol2_tm_file=\"${sol2_tm_file} sol2-10.h\"\n+      use_gcc_stdint=wrap\n+      ;;\n+    *)\n+      use_gcc_stdint=provide\n+      ;;\n+  esac\n+  if test x$gnu_ld = xyes; then\n+    tm_file=\"usegld.h ${tm_file}\"\n+  fi\n+  if test x$gas = xyes; then\n+    tm_file=\"usegas.h ${tm_file}\"\n+  fi\n+  tm_p_file=\"${tm_p_file} sol2-protos.h\"\n+  tmake_file=\"${tmake_file} t-sol2 t-slibgcc-dummy\"\n+  c_target_objs=\"${c_target_objs} sol2-c.o\"\n+  cxx_target_objs=\"${cxx_target_objs} sol2-c.o\"\n+  extra_objs=\"sol2.o\"\n   extra_options=\"${extra_options} sol2.opt\"\n+  case ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n+    \"\":yes:* | yes:yes:* )\n+      thread_file=posix\n+      ;;\n+  esac\n   ;;\n *-*-*vms*)\n   extra_options=\"${extra_options} vms/vms.opt\"\n@@ -1335,7 +1363,7 @@ i[34567]86-*-rtems*)\n \ttmake_file=\"${tmake_file} i386/t-rtems t-rtems\"\n \t;;\n i[34567]86-*-solaris2*)\n-\ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h i386/sysv4.h sol2.h\"\n+\ttm_file=\"${tm_file} i386/unix.h i386/att.h ${sol2_tm_file}\"\n \t# Set default arch_32 to pentium4, tune_32 to generic like the other\n \t# i386 targets, although config.guess defaults to i386-pc-solaris2*.\n \tcase ${target} in\n@@ -1351,36 +1379,11 @@ i[34567]86-*-solaris2*)\n \twith_tune_32=${with_tune_32:-generic}\n \tcase ${target} in\n \t*-*-solaris2.1[0-9]*)\n-\t\ttm_file=\"${tm_file} sol2-10.h\"\n-\t\t;;\n-\tesac\n-\ttm_file=\"${tm_file} i386/sol2.h\"\n-\tif test x$gnu_ld = xyes; then\n-\t\ttm_file=\"${tm_file} sol2-gld.h\"\n-\tfi\n-\tif test x$gas = xyes; then\n-\t\ttm_file=\"${tm_file} i386/sol2-gas.h\"\n-\tfi\n-\ttmake_file=\"${tmake_file} t-sol2 t-slibgcc-dummy\"\n-\tc_target_objs=\"${c_target_objs} sol2-c.o\"\n-\tcxx_target_objs=\"${cxx_target_objs} sol2-c.o\"\n-\textra_objs=\"sol2.o\"\n-\ttm_p_file=\"${tm_p_file} sol2-protos.h\"\n-\tif test x$gnu_ld = xyes; then\n-\t\ttm_defines=\"${tm_defines} TARGET_GNU_LD=1\"\n-\tfi\n-\tif test x$gas = xyes; then\n-\t\ttm_file=\"usegas.h ${tm_file}\"\n-\tfi\n-\ttm_file=\"$tm_file tm-dwarf2.h\"\n-\tcase ${target} in\n-\t*-*-solaris2.1[0-9]*)\n-\t\ttm_file=\"${tm_file} i386/x86-64.h i386/sol2-10.h\"\n+\t\ttm_file=\"${tm_file} i386/x86-64.h i386/sol2-bi.h sol2-bi.h\"\n \t\ttm_defines=\"${tm_defines} TARGET_BI_ARCH=1\"\n-\t\ttmake_file=\"$tmake_file i386/t-sol2-10\"\n+\t\ttmake_file=\"$tmake_file i386/t-sol2-64\"\n \t\tneed_64bit_hwint=yes\n \t\tneed_64bit_isa=yes\n-\t\tuse_gcc_stdint=wrap\n \t\tcase X\"${with_cpu}\" in\n \t\tXgeneric|Xatom|Xcore2|Xcorei7|Xcorei7-avx|Xnocona|Xx86-64|Xbdver1|Xbtver1|Xamdfam10|Xbarcelona|Xk8|Xopteron|Xathlon64|Xathlon-fx|Xathlon64-sse3|Xk8-sse3|Xopteron-sse3)\n \t\t\t;;\n@@ -1396,14 +1399,6 @@ i[34567]86-*-solaris2*)\n \t\t\t;;\n \t\tesac\n \t\t;;\n-\t*)\n-\t\tuse_gcc_stdint=provide\n-\t\t;;\n-\tesac\n-\tcase ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n-\t  \"\":yes:* | yes:yes:* )\n-\t\tthread_file=posix\n-\t\t;;\n \tesac\n \t;;\n i[4567]86-wrs-vxworks|i[4567]86-wrs-vxworksae)\n@@ -2479,17 +2474,7 @@ sparc-*-netbsdelf*)\n \textra_options=\"${extra_options} sparc/long-double-switch.opt\"\n \t;;\n sparc*-*-solaris2*)\n-\ttm_file=\"sparc/biarch64.h ${tm_file} dbxelf.h elfos.h sparc/sysv4.h sol2.h\"\n-\tcase ${target} in\n-\t    *-*-solaris2.1[0-9]*)\n-\t\ttm_file=\"${tm_file} sol2-10.h\"\n-\t\tuse_gcc_stdint=wrap\n-\t\t;;\n-\t    *)\n-\t\tuse_gcc_stdint=provide\n-\t\t;;\n-\tesac\n-\ttm_file=\"${tm_file} sparc/sol2.h\"\n+\ttm_file=\"sparc/biarch64.h ${tm_file} ${sol2_tm_file} sol2-bi.h\"\n \tcase ${target} in\n \t    sparc64-*-* | sparcv9-*-*)\n \t\ttm_file=\"${tm_file} sparc/sol2-64.h\"\n@@ -2498,27 +2483,7 @@ sparc*-*-solaris2*)\n \t\ttest x$with_cpu != x || with_cpu=v9\n \t\t;;\n \tesac\n-\ttm_file=\"${tm_file} sparc/sol2-bi.h\"\n-\tif test x$gas = xyes; then\n-\t\ttm_file=\"${tm_file} sparc/sol2-gas.h sparc/sol2-gas-bi.h\"\n-\tfi\n-\tif test x$gnu_ld = xyes; then\n-\t\ttm_file=\"${tm_file} sol2-gld.h sparc/sol2-gld-bi.h\"\n-\tfi\n-\ttm_file=\"${tm_file} tm-dwarf2.h\"\n-\ttmake_file=\"t-sol2 t-slibgcc-dummy sparc/t-sol2-64\"\n-\tif test x$gas = xyes; then\n-\t\ttm_file=\"usegas.h ${tm_file}\"\n-\tfi\n-\tc_target_objs=\"sol2-c.o\"\n-\tcxx_target_objs=\"sol2-c.o\"\n-\textra_objs=\"sol2.o\"\n-\ttm_p_file=\"${tm_p_file} sol2-protos.h\"\n-\tcase ${enable_threads}:${have_pthread_h}:${have_thread_h} in\n-\t  \"\":yes:* | yes:yes:* )\n-\t\tthread_file=posix\n-\t\t;;\n-\tesac\n+\ttmake_file=\"${tmake_file} sparc/t-sol2-64\"\n \t;;\n sparc-wrs-vxworks)\n \ttm_file=\"${tm_file} elfos.h sparc/sysv4.h vx-common.h vxworks.h sparc/vxworks.h\""}, {"sha": "394ca580884918dc426e914fa92ce041c6cbc200", "filename": "gcc/config/i386/sol2-bi.h", "status": "renamed", "additions": 37, "deletions": 69, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-bi.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -1,4 +1,4 @@\n-/* Solaris 10 configuration.\n+/* Definitions of target machine for GCC, for bi-arch Solaris 2/x86.\n    Copyright (C) 2004, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by CodeSourcery, LLC.\n@@ -19,10 +19,17 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#undef ASM_COMMENT_START\n-#define ASM_COMMENT_START \"/\"\n+/* Override i386/sol2.h version: return 8-byte vectors in MMX registers if\n+   possible, matching Sun Studio 12 Update 1+ compilers and other x86\n+   targets.  */\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n \n-/* binutils' GNU as understands --32 and --64, but the native Solaris\n+#define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\t\\\n+  { OPT_LEVELS_1_PLUS, OPT_momit_leaf_frame_pointer, NULL, 1 }\n+\n+/* GNU as understands --32 and --64, but the native Solaris\n    assembler requires -xarch=generic or -xarch=generic64 instead.  */\n #undef ASM_SPEC\n #ifdef USE_GAS\n@@ -33,6 +40,29 @@ along with GCC; see the file COPYING3.  If not see\n \t\t \"-s %(asm_cpu)\"\n #endif\n \n+/* We do not need to search a special directory for startup files.  */\n+#undef MD_STARTFILE_PREFIX\n+\n+/* No 64-bit default configurations.  */\n+#define DEFAULT_ARCH32_P 1\n+\n+#define ARCH64_SUBDIR \"amd64\"\n+\n+#ifdef USE_GLD\n+/* Since binutils 2.21, GNU ld supports new *_sol2 emulations to strictly\n+   follow the Solaris 2 ABI.  Prefer them if present.  */\n+#ifdef HAVE_LD_SOL2_EMULATION\n+#define ARCH32_EMULATION \"elf_i386_sol2\"\n+#define ARCH64_EMULATION \"elf_x86_64_sol2\"\n+#else\n+#define ARCH32_EMULATION \"elf_i386\"\n+#define ARCH64_EMULATION \"elf_x86_64\"\n+#endif\n+#endif\n+\n+#undef ASM_COMMENT_START\n+#define ASM_COMMENT_START \"/\"\n+\n /* The native Solaris assembler can't calculate the difference between\n    symbols in different sections, which causes problems for -fPIC jump\n    tables in .rodata.  */\n@@ -64,72 +94,10 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while  (0)\n \n-#undef NO_PROFILE_COUNTERS\n-\n-#undef MCOUNT_NAME\n-#define MCOUNT_NAME \"_mcount\"\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 32\n-\n-#undef WINT_TYPE\n-#define WINT_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n-#undef WINT_TYPE_SIZE\n-#define WINT_TYPE_SIZE 32\n-\n #define USE_IX86_FRAME_POINTER 1\n #define USE_X86_64_FRAME_POINTER 1\n \n-/* Override i386/sol2.h version: return 8-byte vectors in MMX registers if\n-   possible, matching Sun Studio 12 Update 1+ compilers and other x86\n-   targets.  */\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT \\\n-\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS)\n-\n-#define SUBTARGET_OPTIMIZATION_OPTIONS\t\t\t\t\\\n-  { OPT_LEVELS_1_PLUS, OPT_momit_leaf_frame_pointer, NULL, 1 }\n-\n-#define MULTILIB_DEFAULTS { \"m32\" }\n-\n-#undef LINK_ARCH64_SPEC_BASE\n-#define LINK_ARCH64_SPEC_BASE \\\n-  \"%{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,/usr/ucblib/64:/usr/lib/libp/64:/lib/64:/usr/lib/64} \\\n-             %{!p:%{!pg:-Y P,/usr/ucblib/64:/lib:/usr/lib/64}}} \\\n-             -R /usr/ucblib/64} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,/usr/lib/libp/64:/lib/64:/usr/lib/64} \\\n-             %{!p:%{!pg:-Y P,/lib/64:/usr/lib/64}}}}\"\n-\n-#undef LINK_ARCH64_SPEC\n-#define LINK_ARCH64_SPEC LINK_ARCH64_SPEC_BASE\n-\n-#ifdef TARGET_GNU_LD\n-/* Since binutils 2.21, GNU ld supports new *_sol2 emulations to strictly\n-   follow the Solaris 2 ABI.  Prefer them if present.  */\n-#ifdef HAVE_LD_SOL2_EMULATION\n-#define I386_EMULATION \"elf_i386_sol2\"\n-#define X86_64_EMULATION \"elf_x86_64_sol2\"\n-#else\n-#define I386_EMULATION \"elf_i386\"\n-#define X86_64_EMULATION \"elf_x86_64\"\n-#endif\n-\n-#define TARGET_LD_EMULATION \"%{m64:-m \" X86_64_EMULATION \"}\" \\\n-\t\t\t    \"%{!m64:-m \" I386_EMULATION \"} \"\n-#else\n-#define TARGET_LD_EMULATION \"\"\n-#endif\n-\n-#undef LINK_ARCH_SPEC\n-#define LINK_ARCH_SPEC TARGET_LD_EMULATION \\\n-\t\t       \"%{m64:\" LINK_ARCH64_SPEC \"}%{!m64:\" LINK_ARCH32_SPEC \"}\"\n+#undef NO_PROFILE_COUNTERS\n \n-/* We do not need to search a special directory for startup files.  */\n-#undef MD_STARTFILE_PREFIX\n+#undef MCOUNT_NAME\n+#define MCOUNT_NAME \"_mcount\"", "previous_filename": "gcc/config/i386/sol2-10.h"}, {"sha": "8d15b9d119d793e28b2e909685c84340f7dd3ba6", "filename": "gcc/config/i386/sol2-gas.h", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fi386%2Fsol2-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fi386%2Fsol2-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2-gas.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,31 +0,0 @@\n-/* Definitions of target machine for GCC, for x86 running Solaris 2\n-   using the GNU assembler.\n-\n-Copyright (C) 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Undefine this so that BNSYM/ENSYM pairs are emitted by STABS+.  */\n-#undef NO_DBX_BNSYM_ENSYM\n-\n-/* Restore default; gas doesn't understand Sun as .tcomm.  */\n-#undef TLS_COMMON_ASM_OP"}, {"sha": "f5e5c762612202c4da30a8d566b97f5f115f1e58", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 38, "deletions": 45, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -19,6 +19,13 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Augment i386/unix.h version to return 8-byte vectors in memory, matching\n+   Sun Studio compilers until version 12, the only ones supported on\n+   Solaris 8 and 9.  */\n+#undef TARGET_SUBTARGET_DEFAULT\n+#define TARGET_SUBTARGET_DEFAULT \\\n+\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n+\n /* Old versions of the Solaris assembler can not handle the difference of\n    labels in different sections, so force DW_EH_PE_datarel.  */\n #undef ASM_PREFERRED_EH_DATA_FORMAT\n@@ -37,23 +44,42 @@ along with GCC; see the file COPYING3.  If not see\n #undef EH_TABLES_CAN_BE_READ_ONLY\n #define EH_TABLES_CAN_BE_READ_ONLY (TARGET_64BIT)\n \n-/* Solaris 2/Intel as chokes on #line directives.  */\n+/* Follow Sun requirements for TLS code sequences and use Sun assembler TLS\n+   syntax.  */\n+#undef TARGET_SUN_TLS\n+#define TARGET_SUN_TLS 1\n+\n+#undef  SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef  PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Solaris 2/Intel as chokes on #line directives before Solaris 10.  */\n #undef CPP_SPEC\n #define CPP_SPEC \"%{,assembler-with-cpp:-P} %(cpp_subtarget)\"\n \n-/* FIXME: Removed -K PIC from generic Solaris 2 ASM_SPEC: the native assembler\n-   gives many warnings: R_386_32 relocation is used for symbol \".text\".  */\n+#define ASM_CPU_SPEC \"\"\n+ \n+/* Removed -K PIC from generic sol2.h ASM_SPEC: the Solaris 8 and 9 assembler\n+   gives many warnings: R_386_32 relocation is used for symbol \".text\", and\n+   GNU as doesn't recognize -K at all.  */\n+/* FIXME: Perhaps split between common and CPU-specific parts?  */\n #undef ASM_SPEC\n #define ASM_SPEC \"%{v:-V} %{Qy:} %{!Qn:-Qy} %{Ym,*} -s %(asm_cpu)\"\n \n-#define ASM_CPU_SPEC \"\"\n- \n+#define SUBTARGET_CPU_EXTRA_SPECS \\\n+  { \"cpp_subtarget\",\t CPP_SUBTARGET_SPEC },\t\t\\\n+  { \"asm_cpu\",\t\t ASM_CPU_SPEC }\n+\n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS \\\n-  { \"cpp_subtarget\",\tCPP_SUBTARGET_SPEC },\t\\\n-  { \"asm_cpu\",\t\tASM_CPU_SPEC },\t\t\\\n-  { \"startfile_arch\",\tSTARTFILE_ARCH_SPEC },\t\\\n-  { \"link_arch\",\tLINK_ARCH_SPEC }\n+  { \"startfile_arch\",\tSTARTFILE_ARCH_SPEC },\t\t\\\n+  { \"link_arch\",\tLINK_ARCH_SPEC },\t\t\\\n+  SUBTARGET_CPU_EXTRA_SPECS\n+\n+/* Register the Solaris-specific #pragma directives.  */\n+#define REGISTER_SUBTARGET_PRAGMAS() solaris_register_pragmas ()\n \n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\"\n@@ -78,18 +104,13 @@ along with GCC; see the file COPYING3.  If not see\n       }\t\t\t\t\t\t\t\\\n   } while (0)\n \n-/* Follow Sun requirements for TLS code sequences and use Sun assembler TLS\n-   syntax.  */\n-#undef TARGET_SUN_TLS\n-#define TARGET_SUN_TLS 1\n-\n+#ifndef USE_GAS\n /* The Sun assembler uses .tcomm for TLS common sections.  */\n #define TLS_COMMON_ASM_OP \".tcomm\"\n \n /* Similar to the Sun assembler on SPARC, the native assembler requires\n    TLS objects to be declared as @tls_obj (not @tls_object).  Unlike SPARC,\n    gas doesn't understand this variant.  */\n-#ifndef USE_GAS\n #undef  ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -113,26 +134,7 @@ along with GCC; see the file COPYING3.  If not see\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n-#endif\n-\n-/* The Solaris assembler cannot grok .stabd directives.  */\n-#undef NO_DBX_BNSYM_ENSYM\n-#define NO_DBX_BNSYM_ENSYM 1\n-\n-/* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n-   the bits from config/sol2.c.  */\n-#define SUBTARGET_INSERT_ATTRIBUTES solaris_insert_attributes\n-#define SUBTARGET_ATTRIBUTE_TABLE SOLARIS_ATTRIBUTE_TABLE\n-\n-/* Register the Solaris-specific #pragma directives.  */\n-#define REGISTER_SUBTARGET_PRAGMAS() solaris_register_pragmas ()\n-\n-/* Augment i386/unix.h version to return 8-byte vectors in memory, matching\n-   Sun Studio compilers until version 12, the only ones supported on\n-   Solaris 8 and 9.  */\n-#undef TARGET_SUBTARGET_DEFAULT\n-#define TARGET_SUBTARGET_DEFAULT \\\n-\t(MASK_80387 | MASK_IEEE_FP | MASK_FLOAT_RETURNS | MASK_VECT8_RETURNS)\n+#endif /* !USE_GAS */\n \n /* Output a simple call for .init/.fini.  */\n #define ASM_OUTPUT_CALL(FILE, FN)\t\t\t\t\\\n@@ -151,12 +153,9 @@ along with GCC; see the file COPYING3.  If not see\n #undef X86_FILE_START_VERSION_DIRECTIVE\n #define X86_FILE_START_VERSION_DIRECTIVE false\n \n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n-\n /* Only recent versions of Solaris 11 ld properly support hidden .gnu.linkonce\n    sections, so don't use them.  */\n-#ifndef TARGET_GNU_LD\n+#ifndef USE_GLD\n #define USE_HIDDEN_LINKONCE 0\n #endif\n \n@@ -165,9 +164,3 @@ along with GCC; see the file COPYING3.  If not see\n #define LIBGCC2_HAS_TF_MODE 1\n #define LIBGCC2_TF_CEXT q\n #define TF_SIZE 113\n-\n-#undef  SIZE_TYPE\n-#define SIZE_TYPE \"unsigned int\"\n-\n-#undef  PTRDIFF_TYPE\n-#define PTRDIFF_TYPE \"int\""}, {"sha": "c86870934e5693efd3d2b39f006b0fe940fb43b2", "filename": "gcc/config/i386/t-sol2-64", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Ft-sol2-64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fi386%2Ft-sol2-64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ft-sol2-64?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "previous_filename": "gcc/config/i386/t-sol2-10"}, {"sha": "edea6551387ecdfdd3c5eb8d37a7be30904cae64", "filename": "gcc/config/sol2-10.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2-10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2-10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-10.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -1,6 +1,6 @@\n /* Operating system specific defines to be used when targeting GCC for any\n    Solaris 2 system starting from Solaris 10.\n-   Copyright 2006, 2007 Free Software Foundation, Inc.\n+   Copyright 2006, 2007, 2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -19,5 +19,4 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Solaris 10 has the float and long double forms of math functions.  */\n-#undef TARGET_C99_FUNCTIONS\n #define TARGET_C99_FUNCTIONS 1"}, {"sha": "371cdd6df41d5b340474451b7a592e6ac884fcab", "filename": "gcc/config/sol2-bi.h", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-bi.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -0,0 +1,119 @@\n+/* Definitions of target machine for GCC, for bi-arch Solaris 2.\n+   Copyright (C) 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+   FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+   for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* wchar_t is called differently in <wchar.h> for 32 and 64-bit\n+   compilations.  This is called for by SCD 2.4.1, p. 6-83, Figure 6-65\n+   (32-bit) and p. 6P-10, Figure 6.38 (64-bit).  */\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+/* Same for wint_t.  See SCD 2.4.1, p. 6-83, Figure 6-66 (32-bit).  There's\n+   no corresponding 64-bit definition, but this is what Solaris 8\n+   <iso/wchar_iso.h> uses.  */\n+\n+#undef WINT_TYPE\n+#define WINT_TYPE (TARGET_64BIT ? \"int\" : \"long int\")\n+\n+#undef WINT_TYPE_SIZE\n+#define WINT_TYPE_SIZE 32\n+\n+#if DEFAULT_ARCH32_P\n+#define MULTILIB_DEFAULTS { \"m32\" }\n+#else\n+#define MULTILIB_DEFAULTS { \"m64\" }\n+#endif\n+\n+#if DEFAULT_ARCH32_P\n+#define DEF_ARCH32_SPEC(__str) \"%{!m64:\" __str \"}\"\n+#define DEF_ARCH64_SPEC(__str) \"%{m64:\" __str \"}\"\n+#else\n+#define DEF_ARCH32_SPEC(__str) \"%{m32:\" __str \"}\"\n+#define DEF_ARCH64_SPEC(__str) \"%{!m32:\" __str \"}\"\n+#endif\n+\n+/* This should be the same as LINK_ARCH32_SPEC_BASE, except with\n+   ARCH64_SUBDIR appended to the paths and /usr/ccs/lib is no longer\n+   necessary.  */\n+#undef LINK_ARCH64_SPEC_BASE\n+#define LINK_ARCH64_SPEC_BASE \\\n+  \"%{G:-G} \\\n+   %{YP,*} \\\n+   %{R*} \\\n+   %{!YP,*:%{p|pg:-Y P,%R/usr/lib/libp/\" ARCH64_SUBDIR \":%R/lib/\" ARCH64_SUBDIR \":%R/usr/lib/\" ARCH64_SUBDIR \"}\t\\\n+\t   %{!p:%{!pg:-Y P,%R/lib/\" ARCH64_SUBDIR \":%R/usr/lib/\" ARCH64_SUBDIR \"}}}\"\n+\n+#undef LINK_ARCH64_SPEC\n+#ifndef USE_GLD\n+/* FIXME: Used to be SPARC-only.  Not SPARC-specfic but for the model name!  */\n+#define LINK_ARCH64_SPEC \\\n+  \"%{mcmodel=medlow:-M /usr/lib/ld/\" ARCH64_SUBDIR \"/map.below4G} \" \\\n+  LINK_ARCH64_SPEC_BASE\n+#else\n+#define LINK_ARCH64_SPEC LINK_ARCH64_SPEC_BASE\n+#endif\n+\n+#ifdef USE_GLD\n+#define TARGET_LD_EMULATION \"%{m32:-m \" ARCH32_EMULATION \"}\" \\\n+\t\t\t    \"%{m64:-m \" ARCH64_EMULATION \"} \"\n+#else\n+#define TARGET_LD_EMULATION \"\"\n+#endif\n+\n+#undef LINK_ARCH_SPEC\n+#if DISABLE_MULTILIB\n+#if DEFAULT_ARCH32_P\n+#define LINK_ARCH_SPEC TARGET_LD_EMULATION \" \\\n+%{m32:%(link_arch32)} \\\n+%{m64:%edoes not support multilib} \\\n+%{!m32:%{!m64:%(link_arch_default)}} \\\n+\"\n+#else\n+#define LINK_ARCH_SPEC TARGET_LD_EMULATION \" \\\n+%{m32:%edoes not support multilib} \\\n+%{m64:%(link_arch64)} \\\n+%{!m32:%{!m64:%(link_arch_default)}} \\\n+\"\n+#endif\n+#else\n+#define LINK_ARCH_SPEC TARGET_LD_EMULATION \" \\\n+%{m32:%(link_arch32)} \\\n+%{m64:%(link_arch64)} \\\n+%{!m32:%{!m64:%(link_arch_default)}}\"\n+#endif\n+\n+#define LINK_ARCH_DEFAULT_SPEC \\\n+(DEFAULT_ARCH32_P ? LINK_ARCH32_SPEC : LINK_ARCH64_SPEC)\n+\n+#undef SUBTARGET_EXTRA_SPECS\n+#define SUBTARGET_EXTRA_SPECS \\\n+  { \"startfile_arch\",\t STARTFILE_ARCH_SPEC },\t\t\\\n+  { \"link_arch32\",       LINK_ARCH32_SPEC },            \\\n+  { \"link_arch64\",       LINK_ARCH64_SPEC },            \\\n+  { \"link_arch_default\", LINK_ARCH_DEFAULT_SPEC },\t\\\n+  { \"link_arch\",\t LINK_ARCH_SPEC },\t\t\\\n+  SUBTARGET_CPU_EXTRA_SPECS"}, {"sha": "5ab1582356a9cf323d86ee458d10dc4fee551f7d", "filename": "gcc/config/sol2-gld.h", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsol2-gld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsol2-gld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-gld.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,36 +0,0 @@\n-/* Definitions of target machine for GCC, for any machine running Solaris 2\n-   using the GNU linker.\n-\n-   Copyright (C) 2002, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Undefine this so that attribute((init_priority)) works.  */\n-#undef CTORS_SECTION_ASM_OP\n-#undef DTORS_SECTION_ASM_OP\n-\n-#undef SUPPORTS_INIT_PRIORITY\n-#define SUPPORTS_INIT_PRIORITY 1\n-\n-/* GNU ld needs --export-dynamic to implement -rdynamic.  */\n-#undef RDYNAMIC_SPEC\n-#define RDYNAMIC_SPEC \"--export-dynamic\"\n-\n-/* Solaris 11 build 135+ implements dl_iterate_phdr.  */\n-#if defined(HAVE_LD_EH_FRAME_HDR) && defined(TARGET_DL_ITERATE_PHDR)\n-#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n-#endif /* HAVE_LD_EH_FRAME && TARGET_DL_ITERATE_PHDR */"}, {"sha": "d898c2ef2ae7b01405276b1bd97677779f3c0168", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 65, "deletions": 58, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -22,11 +22,6 @@ along with GCC; see the file COPYING3.  If not see\n /* We are compiling for Solaris 2 now.  */\n #define TARGET_SOLARIS 1\n \n-/* We use stabs-in-elf for debugging, because that is what the native\n-   toolchain uses.  */\n-#undef PREFERRED_DEBUGGING_TYPE\n-#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n-\n /* Solaris 2 (at least as of 2.5.1) uses a 32-bit wchar_t.  */\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"long int\"\n@@ -76,15 +71,9 @@ along with GCC; see the file COPYING3.  If not see\n #define INTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long int\" : \"int\")\n #define UINTPTR_TYPE (LONG_TYPE_SIZE == 64 ? \"long unsigned int\" : \"unsigned int\")\n \n-/* ??? Note: in order for -compat-bsd to work fully,\n-   we must somehow arrange to fixincludes /usr/ucbinclude\n-   and put the result in $(libsubdir)/ucbinclude.  */\n-\n #undef CPP_SUBTARGET_SPEC\n #define CPP_SUBTARGET_SPEC \"\\\n-%{pthreads|pthread:-D_REENTRANT -D_PTHREADS} \\\n-%{compat-bsd:-iwithprefixbefore ucbinclude -I/usr/ucbinclude} \\\n-\"\n+%{pthreads|pthread:-D_REENTRANT -D_PTHREADS}\"\n \n /* Names to predefine in the preprocessor for this target machine.  */\n #define TARGET_SUB_OS_CPP_BUILTINS()\n@@ -110,9 +99,6 @@ along with GCC; see the file COPYING3.  If not see\n \tTARGET_SUB_OS_CPP_BUILTINS();\t\t\t\\\n     } while (0)\n \n-/* The system headers under Solaris 2 are C++-aware since 2.0.  */\n-#define NO_IMPLICIT_EXTERN_C\n-\n /* It's safe to pass -s always, even if -g is not used.  */\n #undef ASM_SPEC\n #define ASM_SPEC \"\\\n@@ -121,6 +107,15 @@ along with GCC; see the file COPYING3.  If not see\n %(asm_cpu) \\\n \"\n \n+#undef LIB_SPEC\n+#define LIB_SPEC \\\n+  \"%{!symbolic:\\\n+     %{pthreads|pthread:\" \\\n+        LIB_THREAD_LDFLAGS_SPEC \" -lpthread \" LIB_TLS_SPEC \"} \\\n+     %{fprofile-generate*:\" \\\n+        LIB_THREAD_LDFLAGS_SPEC \" \" LIB_TLS_SPEC \"} \\\n+     %{p|pg:-ldl} -lc}\"\n+\n #ifndef CROSS_DIRECTORY_STRUCTURE\n #undef MD_EXEC_PREFIX\n #define MD_EXEC_PREFIX \"/usr/ccs/bin/\"\n@@ -129,21 +124,12 @@ along with GCC; see the file COPYING3.  If not see\n #define MD_STARTFILE_PREFIX \"/usr/ccs/lib/\"\n #endif\n \n-/* We don't use the standard LIB_SPEC only because we don't yet support c++.  */\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{compat-bsd:-lucb -lsocket -lnsl -lelf -laio} \\\n-   %{!symbolic:\\\n-     %{pthreads|pthread:\" \\\n-        LIB_THREAD_LDFLAGS_SPEC \" -lpthread \" LIB_TLS_SPEC \"} \\\n-     %{fprofile-generate*:\" \\\n-        LIB_THREAD_LDFLAGS_SPEC \" \" LIB_TLS_SPEC \"} \\\n-     %{p|pg:-ldl} -lc}\"\n+#undef STARTFILE_ARCH32_SPEC\n+#define STARTFILE_ARCH32_SPEC \"%{ansi:values-Xc.o%s} \\\n+\t\t\t    %{!ansi:values-Xa.o%s}\"\n \n-#undef  ENDFILE_SPEC\n-#define ENDFILE_SPEC \\\n-  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n-   crtend.o%s crtn.o%s\"\n+#undef STARTFILE_ARCH_SPEC\n+#define STARTFILE_ARCH_SPEC STARTFILE_ARCH32_SPEC\n \n /* We don't use the standard svr4 STARTFILE_SPEC because it's wrong for us.  */\n #undef STARTFILE_SPEC\n@@ -156,32 +142,33 @@ along with GCC; see the file COPYING3.  If not see\n \t\t\tcrti.o%s %(startfile_arch) \\\n \t\t\tcrtbegin.o%s\"\n \n-#undef STARTFILE_ARCH32_SPEC\n-#define STARTFILE_ARCH32_SPEC \"%{ansi:values-Xc.o%s} \\\n-\t\t\t    %{!ansi:values-Xa.o%s}\"\n-\n-#undef STARTFILE_ARCH_SPEC\n-#define STARTFILE_ARCH_SPEC STARTFILE_ARCH32_SPEC\n+#undef  ENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n+   crtend.o%s crtn.o%s\"\n \n #undef LINK_ARCH32_SPEC_BASE\n #define LINK_ARCH32_SPEC_BASE \\\n   \"%{G:-G} \\\n    %{YP,*} \\\n    %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,%R/usr/ucblib:%R/usr/ccs/lib/libp:%R/usr/lib/libp:%R/usr/ccs/lib:%R/usr/lib} \\\n-             %{!p:%{!pg:-Y P,%R/usr/ucblib:%R/usr/ccs/lib:%R/usr/lib}}} \\\n-             -R %R/usr/ucblib} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,%R/usr/ccs/lib/libp:%R/usr/lib/libp:%R/usr/ccs/lib:%R/usr/lib} \\\n-             %{!p:%{!pg:-Y P,%R/usr/ccs/lib:%R/usr/lib}}}}\"\n+   %{!YP,*:%{p|pg:-Y P,%R/usr/ccs/lib/libp:%R/usr/lib/libp:%R/usr/ccs/lib:%R/lib:%R/usr/lib} \\\n+\t   %{!p:%{!pg:-Y P,%R/usr/ccs/lib:%R/lib:%R/usr/lib}}}\"\n \n #undef LINK_ARCH32_SPEC\n #define LINK_ARCH32_SPEC LINK_ARCH32_SPEC_BASE\n \n #undef LINK_ARCH_SPEC\n #define LINK_ARCH_SPEC LINK_ARCH32_SPEC\n \n+#ifndef USE_GLD\n+/* With Sun ld, -rdynamic is a no-op.  */\n+#define RDYNAMIC_SPEC \"\"\n+#else\n+/* GNU ld needs --export-dynamic to implement -rdynamic.  */\n+#define RDYNAMIC_SPEC \"--export-dynamic\"\n+#endif\n+\n #undef  LINK_SPEC\n #define LINK_SPEC \\\n   \"%{h*} %{v:-V} \\\n@@ -192,22 +179,22 @@ along with GCC; see the file COPYING3.  If not see\n    %(link_arch) \\\n    %{Qy:} %{!Qn:-Qy}\"\n \n-/* With Sun ld, -rdynamic is a no-op.  */\n-#define RDYNAMIC_SPEC \"\"\n-\n-/* The Solaris linker doesn't understand constructor priorities.  (The\n-   GNU linker does support constructor priorities, so GNU ld\n-   configuration files for Solaris override this setting.)  */\n-#undef SUPPORTS_INIT_PRIORITY\n-#define SUPPORTS_INIT_PRIORITY 0\n+#ifdef USE_GLD\n+/* Solaris 11 build 135+ implements dl_iterate_phdr.  GNU ld needs\n+   --eh-frame-hdr to create the required .eh_frame_hdr sections.  */\n+#if defined(HAVE_LD_EH_FRAME_HDR) && defined(TARGET_DL_ITERATE_PHDR)\n+#define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n+#endif /* HAVE_LD_EH_FRAME && TARGET_DL_ITERATE_PHDR */\n+#endif\n \n /* collect2.c can only parse GNU nm -n output.  Solaris nm needs -png to\n    produce the same format.  */\n #define NM_FLAGS \"-png\"\n+\f\n+/* The system headers under Solaris 2 are C++-aware since 2.0.  */\n+#define NO_IMPLICIT_EXTERN_C\n \n #define STDC_0_IN_SYSTEM_HEADERS 1\n-\f\n-#define HAVE_ENABLE_EXECUTE_STACK\n \n /* Support Solaris-specific format checking for cmn_err.  */\n #define TARGET_N_FORMAT_TYPES 1\n@@ -219,6 +206,14 @@ along with GCC; see the file COPYING3.  If not see\n   { \"init\",      0, 0, true,  false,  false, NULL, false },\t\t\\\n   { \"fini\",      0, 0, true,  false,  false, NULL, false }\n \n+/* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n+   the bits from config/sol2.c.  */\n+#define SUBTARGET_INSERT_ATTRIBUTES solaris_insert_attributes\n+#define SUBTARGET_ATTRIBUTE_TABLE SOLARIS_ATTRIBUTE_TABLE\n+\n+/* Allow macro expansion in #pragma pack.  */\n+#define HANDLE_PRAGMA_PACK_WITH_EXPANSION\n+\n /* Solaris/x86 as and gas support unquoted section names.  */\n #define SECTION_NAME_FORMAT\t\"%s\"\n \n@@ -234,7 +229,7 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* Solaris 'as' has a bug: a .common directive in .tbss or .tdata section\n+/* Solaris as has a bug: a .common directive in .tbss or .tdata section\n    behaves as .tls_common rather than normal non-TLS .common.  */\n #undef  ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n@@ -257,13 +252,25 @@ along with GCC; see the file COPYING3.  If not see\n \n #define AS_NEEDS_DASH_FOR_PIPED_INPUT\n \n+/* The Solaris assembler cannot grok .stabd directives.  */\n+#undef NO_DBX_BNSYM_ENSYM\n+#define NO_DBX_BNSYM_ENSYM 1\n #endif\n \n-extern GTY(()) tree solaris_pending_aligns;\n-extern GTY(()) tree solaris_pending_inits;\n-extern GTY(()) tree solaris_pending_finis;\n+#ifndef USE_GLD\n+/* The Solaris linker doesn't understand constructor priorities.  */\n+#undef SUPPORTS_INIT_PRIORITY\n+#define SUPPORTS_INIT_PRIORITY 0\n+#endif\n \n-/* Allow macro expansion in #pragma pack.  */\n-#define HANDLE_PRAGMA_PACK_WITH_EXPANSION\n+/* Solaris has an implementation of __enable_execute_stack.  */\n+#define HAVE_ENABLE_EXECUTE_STACK\n+\n+/* Static stack checking is supported by means of probes.  */\n+#define STACK_CHECK_STATIC_BUILTIN 1\n \n #define TARGET_POSIX_IO\n+\n+extern GTY(()) tree solaris_pending_aligns;\n+extern GTY(()) tree solaris_pending_inits;\n+extern GTY(()) tree solaris_pending_finis;"}, {"sha": "37a313920695e066d37431ae4b292a7a715d9993", "filename": "gcc/config/sol2.opt", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsol2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.opt?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -27,9 +27,6 @@ Driver Joined\n Ym,\n Driver Joined\n \n-compat-bsd\n-Driver\n-\n mimpure-text\n Target Report\n Pass -z text to linker"}, {"sha": "d1d62ebbea79fb89b24e26b56b6a5d8b83d675fc", "filename": "gcc/config/sparc/sol2-bi.h", "status": "removed", "additions": 0, "deletions": 271, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-bi.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,271 +0,0 @@\n-/* Definitions of target machine for GCC, for bi-arch SPARC\n-   running Solaris 2 using the system assembler and linker.\n-   Copyright (C) 2002, 2003, 2004, 2006, 2007, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* The default code model used to be CM_MEDANY on Solaris\n-   but even Sun eventually found it to be quite wasteful\n-   and changed it to CM_MEDMID in the Studio 9 compiler.  */\n-#undef SPARC_DEFAULT_CMODEL\n-#define SPARC_DEFAULT_CMODEL CM_MEDMID\n-\n-#define AS_SPARC64_FLAG\t\"-xarch=v9\"\n-\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC\t\"\"\n-#undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC\tAS_SPARC64_FLAG\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_v9\n-#undef CPP_CPU64_DEFAULT_SPEC\n-#define CPP_CPU64_DEFAULT_SPEC \"\"\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plus\"\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n-#undef CPP_CPU64_DEFAULT_SPEC\n-#define CPP_CPU64_DEFAULT_SPEC \"\"\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusa\"\n-#undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"a\"\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3\n-#undef CPP_CPU64_DEFAULT_SPEC\n-#define CPP_CPU64_DEFAULT_SPEC \"\"\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n-#undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara\n-#undef CPP_CPU64_DEFAULT_SPEC\n-#define CPP_CPU64_DEFAULT_SPEC \"\"\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n-#undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n-#endif\n-\n-#if TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n-#undef CPP_CPU64_DEFAULT_SPEC\n-#define CPP_CPU64_DEFAULT_SPEC \"\"\n-#undef ASM_CPU32_DEFAULT_SPEC\n-#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n-#undef ASM_CPU64_DEFAULT_SPEC\n-#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n-#endif\n-\n-#if DEFAULT_ARCH32_P\n-#define DEF_ARCH32_SPEC(__str) \"%{!m64:\" __str \"}\"\n-#define DEF_ARCH64_SPEC(__str) \"%{m64:\" __str \"}\"\n-#else\n-#define DEF_ARCH32_SPEC(__str) \"%{m32:\" __str \"}\"\n-#define DEF_ARCH64_SPEC(__str) \"%{!m32:\" __str \"}\"\n-#endif\n-\n-#undef CPP_CPU_SPEC\n-#define CPP_CPU_SPEC \"\\\n-%{mcpu=sparclet|mcpu=tsc701:-D__sparclet__} \\\n-%{mcpu=sparclite|mcpu-f930|mcpu=f934:-D__sparclite__} \\\n-%{mcpu=v8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=supersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara|mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n-%{!mcpu*:%(cpp_cpu_default)} \\\n-\"\n-\n-#undef ASM_CPU_SPEC\n-#define ASM_CPU_SPEC \"\\\n-%{mcpu=v9:\" DEF_ARCH32_SPEC(\"-xarch=v8plus\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"} \\\n-%{mcpu=ultrasparc:\" DEF_ARCH32_SPEC(\"-xarch=v8plusa\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"a\") \"} \\\n-%{mcpu=ultrasparc3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{mcpu=niagara:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n-%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}} \\\n-%{!mcpu*:%(asm_cpu_default)} \\\n-\"\n-\n-#undef CPP_CPU_DEFAULT_SPEC\n-#define CPP_CPU_DEFAULT_SPEC \\\n-(DEFAULT_ARCH32_P ? \"\\\n-%{m64:\" CPP_CPU64_DEFAULT_SPEC \"} \\\n-%{!m64:\" CPP_CPU32_DEFAULT_SPEC \"} \\\n-\" : \"\\\n-%{m32:\" CPP_CPU32_DEFAULT_SPEC \"} \\\n-%{!m32:\" CPP_CPU64_DEFAULT_SPEC \"} \\\n-\")\n-\n-#undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \\\n-(DEFAULT_ARCH32_P ? \"\\\n-%{m64:\" ASM_CPU64_DEFAULT_SPEC \"} \\\n-%{!m64:\" ASM_CPU32_DEFAULT_SPEC \"} \\\n-\" : \"\\\n-%{m32:\" ASM_CPU32_DEFAULT_SPEC \"} \\\n-%{!m32:\" ASM_CPU64_DEFAULT_SPEC \"} \\\n-\")\n-\n-/* wchar_t is called differently in <wchar.h> for 32 and 64-bit\n-   compilations.  This is called for by SCD 2.4.1, p. 6-83, Figure 6-65\n-   (32-bit) and p. 6P-10, Figure 6.38 (64-bit).  */\n-\n-#undef WCHAR_TYPE\n-#define WCHAR_TYPE (TARGET_ARCH64 ? \"int\" : \"long int\")\n-\n-#undef WCHAR_TYPE_SIZE\n-#define WCHAR_TYPE_SIZE 32\n-\n-/* Same for wint_t.  See SCD 2.4.1, p. 6-83, Figure 6-66 (32-bit).  There's\n-   no corresponding 64-bit definition, but this is what Solaris 8\n-   <iso/wchar_iso.h> uses.  */\n-\n-#undef WINT_TYPE\n-#define WINT_TYPE (TARGET_ARCH64 ? \"int\" : \"long int\")\n-\n-#undef WINT_TYPE_SIZE\n-#define WINT_TYPE_SIZE 32\n-\n-#undef CPP_ARCH32_SPEC\n-#define CPP_ARCH32_SPEC \"\"\n-#undef CPP_ARCH64_SPEC\n-#define CPP_ARCH64_SPEC \"-D__arch64__ -D__sparcv9\"\n-\n-#undef CPP_ARCH_SPEC\n-#define CPP_ARCH_SPEC \"\\\n-%{m32:%(cpp_arch32)} \\\n-%{m64:%(cpp_arch64)} \\\n-%{!m32:%{!m64:%(cpp_arch_default)}} \\\n-\"\n-\n-#undef ASM_ARCH_SPEC\n-#define ASM_ARCH_SPEC \"\"\n-\n-#undef ASM_ARCH32_SPEC\n-#define ASM_ARCH32_SPEC \"\"\n-\n-#undef ASM_ARCH64_SPEC\n-#define ASM_ARCH64_SPEC \"\"\n-\n-#undef ASM_ARCH_DEFAULT_SPEC\n-#define ASM_ARCH_DEFAULT_SPEC \"\"\n-\n-#undef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS \\\n-  { \"startfile_arch\",\t STARTFILE_ARCH_SPEC },\t\t  \\\n-  { \"link_arch32\",       LINK_ARCH32_SPEC },              \\\n-  { \"link_arch64\",       LINK_ARCH64_SPEC },              \\\n-  { \"link_arch_default\", LINK_ARCH_DEFAULT_SPEC },\t  \\\n-  { \"link_arch\",\t LINK_ARCH_SPEC },\n-    \n-/*\n- * This should be the same as in sol2.h, except with \"/sparcv9\"\n- * appended to the paths and /usr/ccs/lib is no longer necessary\n- */\n-#define LINK_ARCH64_SPEC_BASE \\\n-  \"%{mcmodel=medlow:-M /usr/lib/ld/sparcv9/map.below4G} \\\n-   %{G:-G} \\\n-   %{YP,*} \\\n-   %{R*} \\\n-   %{compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,%R/usr/ucblib/sparcv9:%R/usr/lib/libp/sparcv9:%R/usr/lib/sparcv9} \\\n-       %{!p:%{!pg:-Y P,%R/usr/ucblib/sparcv9:%R/usr/lib/sparcv9}}} \\\n-     -R %R/usr/ucblib/sparcv9} \\\n-   %{!compat-bsd: \\\n-     %{!YP,*:%{p|pg:-Y P,%R/usr/lib/libp/sparcv9:%R/usr/lib/sparcv9} \\\n-       %{!p:%{!pg:-Y P,%R/usr/lib/sparcv9}}}}\"\n-\n-#define LINK_ARCH64_SPEC LINK_ARCH64_SPEC_BASE\n-\n-#undef LINK_ARCH_SPEC\n-#if DISABLE_MULTILIB\n-#if DEFAULT_ARCH32_P\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:%(link_arch32)} \\\n-%{m64:%edoes not support multilib} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#else\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:%edoes not support multilib} \\\n-%{m64:%(link_arch64)} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#endif\n-#else\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:%(link_arch32)} \\\n-%{m64:%(link_arch64)} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#endif\n-\n-#define LINK_ARCH_DEFAULT_SPEC \\\n-(DEFAULT_ARCH32_P ? LINK_ARCH32_SPEC : LINK_ARCH64_SPEC)\n-\n-#undef\tCC1_SPEC\n-#if DEFAULT_ARCH32_P\n-#define CC1_SPEC \"\\\n-%{m64:%{m32:%emay not use both -m32 and -m64}} \\\n-%{m64:-mptr64 -mstack-bias -mno-v8plus \\\n-  %{!mcpu*:-%{!mv8plus:mcpu=v9}}} \\\n-\"\n-#else\n-#define CC1_SPEC \"\\\n-%{m32:%{m64:%emay not use both -m32 and -m64}} \\\n-%{m32:-mptr32 -mno-stack-bias \\\n-  %{!mcpu*:%{!mv8plus:-mcpu=v9}}} \\\n-%{mv8plus:-m32 -mptr32 -mno-stack-bias \\\n-  %{!mcpu*:-mcpu=v9}} \\\n-\"\n-#endif\n-\n-/* Support for a compile-time default CPU, et cetera.  The rules are:\n-   --with-cpu is ignored if -mcpu is specified.\n-   --with-tune is ignored if -mtune is specified.\n-   --with-float is ignored if -mhard-float, -msoft-float, -mfpu, or -mno-fpu\n-     are specified.\n-   In the SPARC_BI_ARCH compiler we cannot pass %{!mcpu=*:-mcpu=%(VALUE)}\n-   here, otherwise say -mcpu=v7 would be passed even when -m64.\n-   CC1_SPEC above takes care of this instead.  */\n-#undef OPTION_DEFAULT_SPECS\n-#if DEFAULT_ARCH32_P\n-#define OPTION_DEFAULT_SPECS \\\n-  {\"cpu\", \"%{!m64:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n-  {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n-  {\"float\", \"%{!msoft-float:%{!mhard-float:%{!mfpu:%{!mno-fpu:-m%(VALUE)-float}}}}\" }\n-#else\n-#define OPTION_DEFAULT_SPECS \\\n-  {\"cpu\", \"%{!m32:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n-  {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n-  {\"float\", \"%{!msoft-float:%{!mhard-float:%{!mfpu:%{!mno-fpu:-m%(VALUE)-float}}}}\" }\n-#endif\n-\n-#if DEFAULT_ARCH32_P\n-#define MULTILIB_DEFAULTS { \"m32\" }\n-#else\n-#define MULTILIB_DEFAULTS { \"m64\" }\n-#endif"}, {"sha": "001f978b889f8b1ad9641dd8fbd458ac358aedc9", "filename": "gcc/config/sparc/sol2-gas-bi.h", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gas-bi.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,23 +0,0 @@\n-/* Definitions of target machine for GCC, for bi-arch SPARC\n-   running Solaris 2 using the GNU assembler.\n-\n-   Copyright (C) 2002, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef  AS_SPARC64_FLAG\n-#define AS_SPARC64_FLAG\t\"-TSO -64 -Av9\""}, {"sha": "d83e7b9179be873a3859fdefa8b0cd3948d0802e", "filename": "gcc/config/sparc/sol2-gas.h", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gas.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,47 +0,0 @@\n-/* Definitions of target machine for GCC, for SPARC running Solaris 2\n-   using the GNU assembler.\n-   Copyright (C) 2004, 2005, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* Undefine this as the filler pattern doesn't work with GNU as.  */\n-#undef ASM_OUTPUT_ALIGN_WITH_NOP\n-\n-/* Undefine this so that BNSYM/ENSYM pairs are emitted by STABS+.  */\n-#undef NO_DBX_BNSYM_ENSYM\n-\n-/* Use GNU extensions to TLS support.  */\n-#ifdef HAVE_AS_TLS\n-#undef TARGET_SUN_TLS\n-#undef TARGET_GNU_TLS\n-#define TARGET_SUN_TLS 0\n-#define TARGET_GNU_TLS 1\n-#endif\n-\n-/* Use default ELF section syntax.  */\n-#undef TARGET_ASM_NAMED_SECTION\n-#define TARGET_ASM_NAMED_SECTION default_elf_asm_named_section\n-\n-/* And standard pushsection syntax.  While GNU as supports the non-standard\n-   variant too, we prefer the former.  */\n-#undef PUSHSECTION_FORMAT\n-#define PUSHSECTION_FORMAT \"\\t.pushsection\\t%s\\n\""}, {"sha": "3be20b2cdf4a6900d6b0731f1d148d0204a3b674", "filename": "gcc/config/sparc/sol2-gld-bi.h", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1795c28e175fbdf2a23d8bf0293f95794c7167bd/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2-gld-bi.h?ref=1795c28e175fbdf2a23d8bf0293f95794c7167bd", "patch": "@@ -1,67 +0,0 @@\n-/* Definitions of target machine for GCC, for bi-arch SPARC\n-   running Solaris 2 using the GNU linker.\n-\n-Copyright (C) 2002, 2003, 2010 Free Software Foundation, Inc.\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify it under\n-the terms of the GNU General Public License as published by the Free\n-Software Foundation; either version 3, or (at your option) any later\n-version.\n-\n-GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-for more details.\n-\n-Under Section 7 of GPL version 3, you are granted additional\n-permissions described in the GCC Runtime Library Exception, version\n-3.1, as published by the Free Software Foundation.\n-\n-You should have received a copy of the GNU General Public License and\n-a copy of the GCC Runtime Library Exception along with this program;\n-see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-<http://www.gnu.org/licenses/>.  */\n-\n-#undef LINK_ARCH32_SPEC\n-#define LINK_ARCH32_SPEC \\\n-  LINK_ARCH32_SPEC_BASE \"%{!static: -rpath-link %R/usr/lib}\"\n-\n-#undef LINK_ARCH64_SPEC\n-#define LINK_ARCH64_SPEC \\\n-  LINK_ARCH64_SPEC_BASE \"%{!static: -rpath-link %R/usr/lib/sparcv9}\"\n-\n-/* Since binutils 2.21, GNU ld supports new *_sol2 emulations to strictly\n-   follow the Solaris 2 ABI.  Prefer them if present.  */\n-#ifdef HAVE_LD_SOL2_EMULATION\n-#define SPARC32_EMULATION \"elf32_sparc_sol2\"\n-#define SPARC64_EMULATION \"elf64_sparc_sol2\"\n-#else\n-#define SPARC32_EMULATION \"elf32_sparc\"\n-#define SPARC64_EMULATION \"elf64_sparc\"\n-#endif\n-\n-#undef LINK_ARCH_SPEC\n-#if DISABLE_MULTILIB\n-#if DEFAULT_ARCH32_P\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:-m \" SPARC32_EMULATION \" %(link_arch32)} \\\n-%{m64:%edoes not support multilib} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#else\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:%edoes not support multilib} \\\n-%{m64:-m \" SPARC64_EMULATION \" %(link_arch64)} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#endif\n-#else\n-#define LINK_ARCH_SPEC \"\\\n-%{m32:-m \" SPARC32_EMULATION \" %(link_arch32)} \\\n-%{m64:-m \" SPARC64_EMULATION \" %(link_arch64)} \\\n-%{!m32:%{!m64:%(link_arch_default)}} \\\n-\"\n-#endif\n-"}, {"sha": "627b05e92aba067227b2750102d74738e52bf2e0", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 229, "deletions": 76, "changes": 305, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -20,62 +20,240 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Solaris allows 64 bit out and global registers in 32 bit mode.\n+   sparc_override_options will disable V8+ if not generating V9 code.  */\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_V8PLUS + MASK_APP_REGS + MASK_FPU \\\n+\t\t\t+ MASK_LONG_DOUBLE_128)\n+\n+/* The default code model used to be CM_MEDANY on Solaris\n+   but even Sun eventually found it to be quite wasteful\n+   and changed it to CM_MEDMID in the Studio 9 compiler.  */\n+#undef SPARC_DEFAULT_CMODEL\n+#define SPARC_DEFAULT_CMODEL CM_MEDMID\n+\n+/* Select a format to encode pointers in exception handling data.  CODE\n+   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n+   true if the symbol may be affected by dynamic relocations.\n+\n+   Some Solaris dynamic linkers don't handle unaligned section relative\n+   relocs properly, so force them to be aligned.  */\n+#ifndef HAVE_AS_SPARC_UA_PCREL\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\\\n+  ((flag_pic || GLOBAL) ? DW_EH_PE_aligned : DW_EH_PE_absptr)\n+#endif\n+\n+\f\n+\n /* Supposedly the same as vanilla sparc svr4, except for the stuff below: */\n \n /* This is here rather than in sparc.h because it's not known what\n    other assemblers will accept.  */\n \n+#ifndef USE_GAS\n+#define AS_SPARC64_FLAG\t\"-xarch=v9\"\n+#else\n+#define AS_SPARC64_FLAG\t\"-TSO -64 -Av9\"\n+#endif\n+\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC\t\"\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC\tAS_SPARC64_FLAG\n+\n #if TARGET_CPU_DEFAULT == TARGET_CPU_v9\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plus\"\n #undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plus\"\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusa\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"a\"\n #undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusa\"\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_ultrasparc3\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n #undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_niagara\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n #undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n #endif\n \n #if TARGET_CPU_DEFAULT == TARGET_CPU_niagara2\n+#undef CPP_CPU64_DEFAULT_SPEC\n+#define CPP_CPU64_DEFAULT_SPEC \"\"\n+#undef ASM_CPU32_DEFAULT_SPEC\n+#define ASM_CPU32_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#undef ASM_CPU64_DEFAULT_SPEC\n+#define ASM_CPU64_DEFAULT_SPEC AS_SPARC64_FLAG \"b\"\n #undef ASM_CPU_DEFAULT_SPEC\n-#define ASM_CPU_DEFAULT_SPEC \"-xarch=v8plusb\"\n+#define ASM_CPU_DEFAULT_SPEC ASM_CPU32_DEFAULT_SPEC\n+#endif\n+\n+#undef CPP_CPU_SPEC\n+#define CPP_CPU_SPEC \"\\\n+%{mcpu=sparclet|mcpu=tsc701:-D__sparclet__} \\\n+%{mcpu=sparclite|mcpu-f930|mcpu=f934:-D__sparclite__} \\\n+%{mcpu=v8:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{mcpu=supersparc:-D__supersparc__ \" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{mcpu=v9|mcpu=ultrasparc|mcpu=ultrasparc3|mcpu=niagara|mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-D__sparcv8\") \"} \\\n+%{!mcpu*:%(cpp_cpu_default)} \\\n+\"\n+\n+#undef CPP_CPU_DEFAULT_SPEC\n+#define CPP_CPU_DEFAULT_SPEC \\\n+(DEFAULT_ARCH32_P ? \"\\\n+%{m64:\" CPP_CPU64_DEFAULT_SPEC \"} \\\n+%{!m64:\" CPP_CPU32_DEFAULT_SPEC \"} \\\n+\" : \"\\\n+%{m32:\" CPP_CPU32_DEFAULT_SPEC \"} \\\n+%{!m32:\" CPP_CPU64_DEFAULT_SPEC \"} \\\n+\")\n+\n+#undef CPP_ARCH32_SPEC\n+#define CPP_ARCH32_SPEC \"\"\n+#undef CPP_ARCH64_SPEC\n+#define CPP_ARCH64_SPEC \"-D__arch64__ -D__sparcv9\"\n+\n+#undef CPP_ARCH_SPEC\n+#define CPP_ARCH_SPEC \"\\\n+%{m32:%(cpp_arch32)} \\\n+%{m64:%(cpp_arch64)} \\\n+%{!m32:%{!m64:%(cpp_arch_default)}} \\\n+\"\n+\n+#undef\tCC1_SPEC\n+#if DEFAULT_ARCH32_P\n+#define CC1_SPEC \"\\\n+%{m64:%{m32:%emay not use both -m32 and -m64}} \\\n+%{m64:-mptr64 -mstack-bias -mno-v8plus \\\n+  %{!mcpu*:-%{!mv8plus:mcpu=v9}}} \\\n+\"\n+#else\n+#define CC1_SPEC \"\\\n+%{m32:%{m64:%emay not use both -m32 and -m64}} \\\n+%{m32:-mptr32 -mno-stack-bias \\\n+  %{!mcpu*:%{!mv8plus:-mcpu=v9}}} \\\n+%{mv8plus:-m32 -mptr32 -mno-stack-bias \\\n+  %{!mcpu*:-mcpu=v9}} \\\n+\"\n+#endif\n+\n+/* Support for a compile-time default CPU, et cetera.  The rules are:\n+   --with-cpu is ignored if -mcpu is specified.\n+   --with-tune is ignored if -mtune is specified.\n+   --with-float is ignored if -mhard-float, -msoft-float, -mfpu, or -mno-fpu\n+     are specified.\n+   In the SPARC_BI_ARCH compiler we cannot pass %{!mcpu=*:-mcpu=%(VALUE)}\n+   here, otherwise say -mcpu=v7 would be passed even when -m64.\n+   CC1_SPEC above takes care of this instead.  */\n+#undef OPTION_DEFAULT_SPECS\n+#if DEFAULT_ARCH32_P\n+#define OPTION_DEFAULT_SPECS \\\n+  {\"cpu\", \"%{!m64:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n+  {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n+  {\"float\", \"%{!msoft-float:%{!mhard-float:%{!mfpu:%{!mno-fpu:-m%(VALUE)-float}}}}\" }\n+#else\n+#define OPTION_DEFAULT_SPECS \\\n+  {\"cpu\", \"%{!m32:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n+  {\"tune\", \"%{!mtune=*:-mtune=%(VALUE)}\" }, \\\n+  {\"float\", \"%{!msoft-float:%{!mhard-float:%{!mfpu:%{!mno-fpu:-m%(VALUE)-float}}}}\" }\n #endif\n \n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \"\\\n-%{mcpu=v9:-xarch=v8plus} \\\n-%{mcpu=ultrasparc:-xarch=v8plusa} \\\n-%{mcpu=ultrasparc3:-xarch=v8plusb} \\\n-%{mcpu=niagara:-xarch=v8plusb} \\\n-%{mcpu=niagara2:-xarch=v8plusb} \\\n+%{mcpu=v9:\" DEF_ARCH32_SPEC(\"-xarch=v8plus\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"} \\\n+%{mcpu=ultrasparc:\" DEF_ARCH32_SPEC(\"-xarch=v8plusa\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"a\") \"} \\\n+%{mcpu=ultrasparc3:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{mcpu=niagara:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{mcpu=niagara2:\" DEF_ARCH32_SPEC(\"-xarch=v8plusb\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG \"b\") \"} \\\n+%{!mcpu=niagara2:%{!mcpu=niagara:%{!mcpu=ultrasparc3:%{!mcpu=ultrasparc:%{!mcpu=v9:%{mcpu*:\" DEF_ARCH32_SPEC(\"-xarch=v8\") DEF_ARCH64_SPEC(AS_SPARC64_FLAG) \"}}}}}} \\\n %{!mcpu*:%(asm_cpu_default)} \\\n \"\n \n-#undef SUBTARGET_EXTRA_SPECS\n-#define SUBTARGET_EXTRA_SPECS \\\n-  { \"startfile_arch\",\tSTARTFILE_ARCH_SPEC },\t\\\n-  { \"link_arch\",\tLINK_ARCH_SPEC }\n+#undef ASM_CPU_DEFAULT_SPEC\n+#define ASM_CPU_DEFAULT_SPEC \\\n+(DEFAULT_ARCH32_P ? \"\\\n+%{m64:\" ASM_CPU64_DEFAULT_SPEC \"} \\\n+%{!m64:\" ASM_CPU32_DEFAULT_SPEC \"} \\\n+\" : \"\\\n+%{m32:\" ASM_CPU32_DEFAULT_SPEC \"} \\\n+%{!m32:\" ASM_CPU64_DEFAULT_SPEC \"} \\\n+\")\n+\n+#undef ASM_ARCH32_SPEC\n+#define ASM_ARCH32_SPEC \"\"\n+\n+#undef ASM_ARCH64_SPEC\n+#define ASM_ARCH64_SPEC \"\"\n+\n+#undef ASM_ARCH_DEFAULT_SPEC\n+#define ASM_ARCH_DEFAULT_SPEC \"\"\n+\n+#undef ASM_ARCH_SPEC\n+#define ASM_ARCH_SPEC \"\"\n+\n+#ifdef USE_GLD\n+/* Since binutils 2.21, GNU ld supports new *_sol2 emulations to strictly\n+   follow the Solaris 2 ABI.  Prefer them if present.  */\n+#ifdef HAVE_LD_SOL2_EMULATION\n+#define ARCH32_EMULATION \"elf32_sparc_sol2\"\n+#define ARCH64_EMULATION \"elf64_sparc_sol2\"\n+#else\n+#define ARCH32_EMULATION \"elf32_sparc\"\n+#define ARCH64_EMULATION \"elf64_sparc\"\n+#endif\n+#endif\n+\n+#define ARCH64_SUBDIR \"sparcv9\"\n \n-/* However it appears that Solaris 2.0 uses the same reg numbering as\n-   the old BSD-style system did.  */\n+#define SUBTARGET_CPU_EXTRA_SPECS\n+\n+\f\n+\n+/* Register the Solaris-specific #pragma directives.  */\n+#define REGISTER_TARGET_PRAGMAS() solaris_register_pragmas ()\n+\n+#if defined(USE_GAS) && defined(HAVE_AS_TLS)\n+/* Use GNU extensions to TLS support.  */\n+#undef TARGET_SUN_TLS\n+#undef TARGET_GNU_TLS\n+#define TARGET_SUN_TLS 0\n+#define TARGET_GNU_TLS 1\n+#endif\n+\n+#undef  LOCAL_LABEL_PREFIX\n+#define LOCAL_LABEL_PREFIX  \".\"\n \n /* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.skip %u\\n\", (int)(SIZE))\n \n-#undef  LOCAL_LABEL_PREFIX\n-#define LOCAL_LABEL_PREFIX  \".\"\n-\n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.\n@@ -87,7 +265,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The native TLS-enabled assembler requires the directive #tls_object\n    to be put on objects in TLS sections (as of v7.1).  This is not\n-   required by the GNU assembler but supported on SPARC.  */\n+   required by GNU as but supported on SPARC.  */\n #undef  ASM_DECLARE_OBJECT_NAME\n #define ASM_DECLARE_OBJECT_NAME(FILE, NAME, DECL)\t\t\\\n   do\t\t\t\t\t\t\t\t\\\n@@ -112,56 +290,6 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* The Solaris assembler cannot grok .stabd directives.  */\n-#undef NO_DBX_BNSYM_ENSYM\n-#define NO_DBX_BNSYM_ENSYM 1\n-\f\n-\n-/* Select a format to encode pointers in exception handling data.  CODE\n-   is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n-   true if the symbol may be affected by dynamic relocations.\n-\n-   Some Solaris dynamic linkers don't handle unaligned section relative\n-   relocs properly, so force them to be aligned.  */\n-#ifndef HAVE_AS_SPARC_UA_PCREL\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)\t\t\\\n-  ((flag_pic || GLOBAL) ? DW_EH_PE_aligned : DW_EH_PE_absptr)\n-#endif\n-\n-\f\n-/* Define for support of TFmode long double.\n-   SPARC ABI says that long double is 4 words.  */\n-#define LONG_DOUBLE_TYPE_SIZE 128\n-\n-/* Solaris's _Qp_* library routine implementation clobbers the output\n-   memory before the inputs are fully consumed.  */\n-\n-#undef TARGET_BUGGY_QP_LIB\n-#define TARGET_BUGGY_QP_LIB\t1\n-\n-#undef SUN_CONVERSION_LIBFUNCS\n-#define SUN_CONVERSION_LIBFUNCS 1\n-\n-#undef DITF_CONVERSION_LIBFUNCS\n-#define DITF_CONVERSION_LIBFUNCS 1\n-\n-#undef SUN_INTEGER_MULTIPLY_64\n-#define SUN_INTEGER_MULTIPLY_64 1\n-\n-/* Solaris allows 64 bit out and global registers in 32 bit mode.\n-   sparc_override_options will disable V8+ if not generating V9 code.  */\n-#undef TARGET_DEFAULT\n-#define TARGET_DEFAULT (MASK_V8PLUS + MASK_APP_REGS + MASK_FPU \\\n-\t\t\t+ MASK_LONG_DOUBLE_128)\n-\n-/* Solaris-specific #pragmas are implemented on top of attributes.  Hook in\n-   the bits from config/sol2.c.  */\n-#define SUBTARGET_INSERT_ATTRIBUTES solaris_insert_attributes\n-#define SUBTARGET_ATTRIBUTE_TABLE SOLARIS_ATTRIBUTE_TABLE\n-\n-/* Register the Solaris-specific #pragma directives.  */\n-#define REGISTER_TARGET_PRAGMAS() solaris_register_pragmas ()\n-\n /* Output a simple call for .init/.fini.  */\n #define ASM_OUTPUT_CALL(FILE, FN)\t\t\t\t        \\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -172,27 +300,52 @@ along with GCC; see the file COPYING3.  If not see\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#ifndef USE_GAS\n /* This is how to output an assembler line that says to advance\n    the location counter to a multiple of 2**LOG bytes using the\n-   NOP instruction as padding.  */\n+   NOP instruction as padding.  The filler pattern doesn't work\n+   with GNU as. */\n #define ASM_OUTPUT_ALIGN_WITH_NOP(FILE,LOG)   \\\n   if ((LOG) != 0)                             \\\n     fprintf (FILE, \"\\t.align %d,0x1000000\\n\", (1<<(LOG)))\n \n-/* Use Solaris ELF section syntax.  */\n+/* Use Solaris ELF section syntax with Sun as.  */\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION sparc_solaris_elf_asm_named_section\n \n /* Emit COMDAT group signature symbols for Sun as.  */\n #undef TARGET_ASM_CODE_END\n #define TARGET_ASM_CODE_END solaris_code_end\n \n-/* Solaris/SPARC as requires doublequoted section names.  While gas\n+/* Sun as requires doublequoted section names on SPARC.  While GNU as\n    supports that, too, we prefer the standard variant.  */\n-#ifndef USE_GAS\n #undef SECTION_NAME_FORMAT\n #define SECTION_NAME_FORMAT\t\"\\\"%s\\\"\"\n+#endif /* !USE_GAS */\n+\n+/* Undefine this so that attribute((init_priority)) works with GNU ld.  */\n+#ifdef USE_GLD\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n #endif\n \n-/* Static stack checking is supported by means of probes.  */\n-#define STACK_CHECK_STATIC_BUILTIN 1\n+\f\n+\n+/* Define for support of TFmode long double.\n+   SPARC ABI says that long double is 4 words.  */\n+#define LONG_DOUBLE_TYPE_SIZE 128\n+\n+/* Solaris's _Qp_* library routine implementation clobbers the output\n+   memory before the inputs are fully consumed.  */\n+\n+#undef TARGET_BUGGY_QP_LIB\n+#define TARGET_BUGGY_QP_LIB\t1\n+\n+#undef SUN_CONVERSION_LIBFUNCS\n+#define SUN_CONVERSION_LIBFUNCS 1\n+\n+#undef DITF_CONVERSION_LIBFUNCS\n+#define DITF_CONVERSION_LIBFUNCS 1\n+\n+#undef SUN_INTEGER_MULTIPLY_64\n+#define SUN_INTEGER_MULTIPLY_64 1"}, {"sha": "06677327099acc22d9f11a680ab902da81513367", "filename": "gcc/config/usegld.h", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fusegld.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ecfa34f84cdb9ed7f9063089a567968b6031dda/gcc%2Fconfig%2Fusegld.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fusegld.h?ref=7ecfa34f84cdb9ed7f9063089a567968b6031dda", "patch": "@@ -0,0 +1 @@\n+#define USE_GLD 1"}]}