{"sha": "d7cea7ceff9a2be7436108030c598628c51fba0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdjZWE3Y2VmZjlhMmJlNzQzNjEwODAzMGM1OTg2MjhjNTFmYmEwZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-23T14:02:03Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-03-23T14:02:03Z"}, "message": "aarch64: Make aarch64_add_offset work with -ftrapv [PR99540]\n\naarch64_add_offset uses expand_mult to multiply the SVE VL by an\nout-of-range constant.  expand_mult takes an argument to indicate\nwhether the multiplication is signed or unsigned, but in this\ncontext the multiplication is effectively signless and so the\nchoice seemed arbitrary.\n\nHowever, one of the things that the signedness input does is\nindicate whether signed overflow should be trapped for -ftrapv.\nWe don't want that here, so we must treat the multiplication\nas unsigned.\n\ngcc/\n2021-03-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/99540\n\t* config/aarch64/aarch64.c (aarch64_add_offset): Tell\n\texpand_mult to perform an unsigned rather than a signed\n\tmultiplication.\n\ngcc/testsuite/\n2021-03-23  Richard Sandiford  <richard.sandiford@arm.com>\n\n\tPR target/99540\n\t* gcc.dg/vect/pr99540.c: New test.", "tree": {"sha": "ec6e1ac8bc0bfd796da0a91e3df0c8e9fc780058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec6e1ac8bc0bfd796da0a91e3df0c8e9fc780058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7cea7ceff9a2be7436108030c598628c51fba0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cea7ceff9a2be7436108030c598628c51fba0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7cea7ceff9a2be7436108030c598628c51fba0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7cea7ceff9a2be7436108030c598628c51fba0f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c89c9e9c6b59260c7745c8714b69f94784a9c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c89c9e9c6b59260c7745c8714b69f94784a9c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c89c9e9c6b59260c7745c8714b69f94784a9c13"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "c8a87fe858a3c53c3d863361ccdc05d20ac4798c", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cea7ceff9a2be7436108030c598628c51fba0f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cea7ceff9a2be7436108030c598628c51fba0f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d7cea7ceff9a2be7436108030c598628c51fba0f", "patch": "@@ -4639,7 +4639,7 @@ aarch64_add_offset (scalar_int_mode mode, rtx dest, rtx src,\n \t  if (can_create_pseudo_p ())\n \t    {\n \t      rtx coeff1 = gen_int_mode (factor, mode);\n-\t      val = expand_mult (mode, val, coeff1, NULL_RTX, false, true);\n+\t      val = expand_mult (mode, val, coeff1, NULL_RTX, true, true);\n \t    }\n \t  else\n \t    {"}, {"sha": "9136b099d94fd821e0013aab65371966757056cf", "filename": "gcc/testsuite/gcc.dg/vect/pr99540.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7cea7ceff9a2be7436108030c598628c51fba0f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99540.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7cea7ceff9a2be7436108030c598628c51fba0f/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99540.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr99540.c?ref=d7cea7ceff9a2be7436108030c598628c51fba0f", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftrapv -ffloat-store -march=armv8.2-a+sve\" { target aarch64*-*-* } } */\n+\n+float *MSalign2m2m_rec_initverticalw, *MSalign2m2m_rec_currentw;\n+\n+void\n+match_ribosum (int MSalign2m2m_rec_i, int MSalign2m2m_rec_lgth1,\n+               int MSalign2m2m_rec_lgth2)\n+{\n+  float **WMMTX;\n+\n+  while (MSalign2m2m_rec_i < 1)\n+    WMMTX[MSalign2m2m_rec_i++][0] = MSalign2m2m_rec_initverticalw[0];\n+\n+  while (MSalign2m2m_rec_i < MSalign2m2m_rec_lgth1)\n+    MSalign2m2m_rec_initverticalw[MSalign2m2m_rec_i++] += 0.1;\n+\n+  while (MSalign2m2m_rec_i < MSalign2m2m_rec_lgth2)\n+    MSalign2m2m_rec_currentw[MSalign2m2m_rec_i++] += 0.1;\n+}"}]}