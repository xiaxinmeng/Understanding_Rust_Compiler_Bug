{"sha": "05fda8480960186392f5f0501793dae9a96c9a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmZGE4NDgwOTYwMTg2MzkyZjVmMDUwMTc5M2RhZTlhOTZjOWE2Ng==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-28T20:27:30Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-28T20:27:30Z"}, "message": "* score.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n\nFrom-SVN: r166046", "tree": {"sha": "354a485ffe38221bc86e10e6331ee87d1c9fd29b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/354a485ffe38221bc86e10e6331ee87d1c9fd29b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05fda8480960186392f5f0501793dae9a96c9a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fda8480960186392f5f0501793dae9a96c9a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05fda8480960186392f5f0501793dae9a96c9a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05fda8480960186392f5f0501793dae9a96c9a66/comments", "author": null, "committer": null, "parents": [{"sha": "73f3f8411f8eab303306829f4cb9a62c25129b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73f3f8411f8eab303306829f4cb9a62c25129b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73f3f8411f8eab303306829f4cb9a62c25129b6f"}], "stats": {"total": 25, "additions": 4, "deletions": 21}, "files": [{"sha": "01c7b6a2d8dda81ecf8e5031d93677c0c1d7cb90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fda8480960186392f5f0501793dae9a96c9a66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fda8480960186392f5f0501793dae9a96c9a66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05fda8480960186392f5f0501793dae9a96c9a66", "patch": "@@ -1,3 +1,7 @@\n+2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* score.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Delete.\n+\n 2010-10-28  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/cris/cris.h (FUNCTION_ARG, FUNCTION_INCOMING_ARG): Delete."}, {"sha": "49887040014448b5bae8a3429cd79af115d2cbf3", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05fda8480960186392f5f0501793dae9a96c9a66/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05fda8480960186392f5f0501793dae9a96c9a66/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=05fda8480960186392f5f0501793dae9a96c9a66", "patch": "@@ -569,21 +569,6 @@ extern enum reg_class score_char_to_class[256];\n #define OUTGOING_REG_PARM_STACK_SPACE(FNTYPE) 1\n \n /* Passing Arguments in Registers  */\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  score_function_arg (&CUM, MODE, TYPE, NAMED)\n-\n /* A C type for declaring a variable that is used as the first argument of\n    `FUNCTION_ARG' and other related values.  For some target machines, the\n    type `int' suffices and can hold the number of bytes of argument so far.  */\n@@ -602,12 +587,6 @@ typedef struct score_args\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, n_named_args) \\\n   score_init_cumulative_args (&CUM, FNTYPE, LIBNAME)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-  score_function_arg_advance (&CUM, MODE, TYPE, NAMED)\n-\n /* 1 if N is a possible register number for function argument passing.\n    We have no FP argument registers when soft-float.  When FP registers\n    are 32 bits, we can't directly reference the odd numbered ones.  */"}]}