{"sha": "e443f142047e2a9f67dd859e77d26d94fa3241e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ0M2YxNDIwNDdlMmE5ZjY3ZGQ4NTllNzdkMjZkOTRmYTMyNDFlOA==", "commit": {"author": {"name": "Tristan Gingold", "email": "gingold@adacore.com", "date": "2013-10-14T13:06:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-14T13:06:44Z"}, "message": "cstand.adb (Create_Standard): Change Import_Code component of Standard_Exception_Type to Foreign_Data.\n\n2013-10-14  Tristan Gingold  <gingold@adacore.com>\n\n\t* cstand.adb (Create_Standard): Change Import_Code component\n\tof Standard_Exception_Type to Foreign_Data. Its type is now\n\tStandard_A_Char (access to character).\n\t* exp_prag.adb (Expand_Pragma_Import_Export_Exception): Adjust\n\tdefinition of Code to match the type of Foreign_Data.\n\t* s-stalib.ads (Exception_Data): Replace Import_Code by Foreign_Data\n\tChange the definition of standard predefined exceptions.\n\t(Exception_Code): Remove.\n\t* raise.h (Exception_Code): Remove (Exception_Data): Replace\n\tImport_Code field by Foreign_Data.\n\t* rtsfind.ads (RE_Exception_Code): Remove\n\t(RE_Import_Address): Add.\n\t* a-exexpr-gcc.adb (Import_Code_For): Replaced by Foreign_Data_For.\n\t* exp_ch11.adb (Expand_N_Exception_Declaration): Associate null\n\tto Foreign_Data component.\n\t* raise-gcc.c (Import_Code_For): Replaced by Foreign_Data_For.\n\t(is_handled_by): Add comments. Use replaced function. Change\n\tcondition so that an Ada occurrence is never handled by\n\tForeign_Exception.\n\t* s-exctab.adb (Internal_Exception): Associate Null_Address to\n\tForeign_Data component.\n\t* s-vmexta.adb, s-vmexta.ads (Exception_Code): Declare Replace\n\tSSL.Exception_Code by Exception_Code.\n\nFrom-SVN: r203538", "tree": {"sha": "67a482fe81e10cfe634ac5d4ee42783847372e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67a482fe81e10cfe634ac5d4ee42783847372e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e443f142047e2a9f67dd859e77d26d94fa3241e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e443f142047e2a9f67dd859e77d26d94fa3241e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e443f142047e2a9f67dd859e77d26d94fa3241e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e443f142047e2a9f67dd859e77d26d94fa3241e8/comments", "author": {"login": "gingold-adacore", "id": 16334725, "node_id": "MDQ6VXNlcjE2MzM0NzI1", "avatar_url": "https://avatars.githubusercontent.com/u/16334725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gingold-adacore", "html_url": "https://github.com/gingold-adacore", "followers_url": "https://api.github.com/users/gingold-adacore/followers", "following_url": "https://api.github.com/users/gingold-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/gingold-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/gingold-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gingold-adacore/subscriptions", "organizations_url": "https://api.github.com/users/gingold-adacore/orgs", "repos_url": "https://api.github.com/users/gingold-adacore/repos", "events_url": "https://api.github.com/users/gingold-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/gingold-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a015f2bbd6ac66c55aceb510c7a8c522f8f6948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a015f2bbd6ac66c55aceb510c7a8c522f8f6948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a015f2bbd6ac66c55aceb510c7a8c522f8f6948"}], "stats": {"total": 217, "additions": 114, "deletions": 103}, "files": [{"sha": "b12ce0a717aaf7e43a8cd449443fe159fce52125", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -1,3 +1,29 @@\n+2013-10-14  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* cstand.adb (Create_Standard): Change Import_Code component\n+\tof Standard_Exception_Type to Foreign_Data. Its type is now\n+\tStandard_A_Char (access to character).\n+\t* exp_prag.adb (Expand_Pragma_Import_Export_Exception): Adjust\n+\tdefinition of Code to match the type of Foreign_Data.\n+\t* s-stalib.ads (Exception_Data): Replace Import_Code by Foreign_Data\n+\tChange the definition of standard predefined exceptions.\n+\t(Exception_Code): Remove.\n+\t* raise.h (Exception_Code): Remove (Exception_Data): Replace\n+\tImport_Code field by Foreign_Data.\n+\t* rtsfind.ads (RE_Exception_Code): Remove\n+\t(RE_Import_Address): Add.\n+\t* a-exexpr-gcc.adb (Import_Code_For): Replaced by Foreign_Data_For.\n+\t* exp_ch11.adb (Expand_N_Exception_Declaration): Associate null\n+\tto Foreign_Data component.\n+\t* raise-gcc.c (Import_Code_For): Replaced by Foreign_Data_For.\n+\t(is_handled_by): Add comments. Use replaced function. Change\n+\tcondition so that an Ada occurrence is never handled by\n+\tForeign_Exception.\n+\t* s-exctab.adb (Internal_Exception): Associate Null_Address to\n+\tForeign_Data component.\n+\t* s-vmexta.adb, s-vmexta.ads (Exception_Code): Declare Replace\n+\tSSL.Exception_Code by Exception_Code.\n+\n 2013-10-14  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_ugn.texi: Document -gnateu switch."}, {"sha": "0bf3198be695ca1e9748eef7304fecbb04b6f57a", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -270,8 +270,8 @@ package body Exception_Propagation is\n    function Language_For (E : Exception_Data_Ptr) return Character;\n    pragma Export (C, Language_For, \"__gnat_language_for\");\n \n-   function Import_Code_For (E : Exception_Data_Ptr) return Exception_Code;\n-   pragma Export (C, Import_Code_For, \"__gnat_import_code_for\");\n+   function Foreign_Data_For (E : Exception_Data_Ptr) return Address;\n+   pragma Export (C, Foreign_Data_For, \"__gnat_foreign_data_for\");\n \n    function EID_For (GNAT_Exception : not null GNAT_GCC_Exception_Access)\n      return Exception_Id;\n@@ -489,16 +489,16 @@ package body Exception_Propagation is\n       return GNAT_Exception.Occurrence.Id;\n    end EID_For;\n \n-   ---------------------\n-   -- Import_Code_For --\n-   ---------------------\n+   ----------------------\n+   -- Foreign_Data_For --\n+   ----------------------\n \n-   function Import_Code_For\n-     (E : SSL.Exception_Data_Ptr) return Exception_Code\n+   function Foreign_Data_For\n+     (E : SSL.Exception_Data_Ptr) return Address\n    is\n    begin\n-      return E.all.Import_Code;\n-   end Import_Code_For;\n+      return E.Foreign_Data;\n+   end Foreign_Data_For;\n \n    --------------------------\n    -- Is_Handled_By_Others --"}, {"sha": "87555fd8fe774c833b550fe28d5c27da0814ccf5", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -1470,14 +1470,7 @@ package body CStand is\n       end Build_Duration;\n \n       --  Build standard exception type. Note that the type name here is\n-      --  actually used in the generated code, so it must be set correctly\n-\n-      --  ??? Also note that the Import_Code component is now declared\n-      --  as a System.Standard_Library.Exception_Code to enforce run-time\n-      --  library implementation consistency. It's too early here to resort\n-      --  to rtsfind to get the proper node for that type, so we use the\n-      --  closest possible available type node at hand instead. We should\n-      --  probably be fixing this up at some point.\n+      --  actually used in the generated code, so it must be set correctly.\n \n       Standard_Exception_Type := New_Standard_Entity;\n       Set_Ekind       (Standard_Exception_Type, E_Record_Type);\n@@ -1501,7 +1494,7 @@ package body CStand is\n       Make_Component\n         (Standard_Exception_Type, Standard_A_Char,    \"HTable_Ptr\");\n       Make_Component\n-        (Standard_Exception_Type, Standard_Unsigned,  \"Import_Code\");\n+        (Standard_Exception_Type, Standard_A_Char,    \"Foreign_Data\");\n       Make_Component\n         (Standard_Exception_Type, Standard_A_Char,    \"Raise_Hook\");\n "}, {"sha": "d67a67ff8c265e433b25d0ef9c0704be05c73164", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -1172,7 +1172,7 @@ package body Exp_Ch11 is\n    --                    Name_Length      => exceptE'Length,\n    --                    Full_Name        => exceptE'Address,\n    --                    HTable_Ptr       => null,\n-   --                    Import_Code      => 0,\n+   --                    Foreign_Data     => null,\n    --                    Raise_Hook       => null,\n    --                    );\n \n@@ -1319,9 +1319,9 @@ package body Exp_Ch11 is\n \n       Append_To (L, Make_Null (Loc));\n \n-      --  Import_Code component: 0\n+      --  Foreign_Data component: null\n \n-      Append_To (L, Make_Integer_Literal (Loc, 0));\n+      Append_To (L, Make_Null (Loc));\n \n       --  Raise_Hook component: null\n "}, {"sha": "6f425d15cc4c48fa99a99455b80de1561802d41f", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -646,16 +646,17 @@ package body Exp_Prag is\n                      --  alias to define the symbol.\n \n                      Code :=\n-                       Make_Integer_Literal (Loc,\n-                         Intval => Exception_Code (Id));\n+                       Unchecked_Convert_To (Standard_A_Char,\n+                         Make_Integer_Literal (Loc,\n+                           Intval => Exception_Code (Id)));\n \n                      --  Declare a dummy object\n \n                      Excep_Object :=\n                        Make_Object_Declaration (Loc,\n                          Defining_Identifier => Excep_Internal,\n                          Object_Definition   =>\n-                           New_Reference_To (RTE (RE_Exception_Code), Loc));\n+                           New_Reference_To (RTE (RE_Address), Loc));\n \n                      Insert_Action (N, Excep_Object);\n                      Analyze (Excep_Object);\n@@ -711,13 +712,12 @@ package body Exp_Prag is\n \n                   else\n                      Code :=\n-                        Unchecked_Convert_To (RTE (RE_Exception_Code),\n-                          Make_Function_Call (Loc,\n-                            Name =>\n-                              New_Reference_To (RTE (RE_Import_Value), Loc),\n-                            Parameter_Associations => New_List\n-                              (Make_String_Literal (Loc,\n-                                Strval => Excep_Image))));\n+                        Make_Function_Call (Loc,\n+                          Name =>\n+                            New_Reference_To (RTE (RE_Import_Address), Loc),\n+                          Parameter_Associations => New_List\n+                            (Make_String_Literal (Loc,\n+                              Strval => Excep_Image)));\n                   end if;\n \n                   --  Generate the call to Register_VMS_Exception\n@@ -733,7 +733,7 @@ package body Exp_Prag is\n                             Prefix         => New_Occurrence_Of (Id, Loc),\n                             Attribute_Name => Name_Unrestricted_Access)))));\n \n-                  Analyze_And_Resolve (Code, RTE (RE_Exception_Code));\n+                  Analyze_And_Resolve (Code, RTE (RE_Address));\n                   Analyze (Call);\n                end if;\n "}, {"sha": "897dca285c92eb4e811fec8057a317302d4f26fd", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -812,22 +812,32 @@ get_call_site_action_for (_Unwind_Ptr ip,\n \n #define Is_Handled_By_Others  __gnat_is_handled_by_others\n #define Language_For          __gnat_language_for\n-#define Import_Code_For       __gnat_import_code_for\n+#define Foreign_Data_For      __gnat_foreign_data_for\n #define EID_For               __gnat_eid_for\n \n extern bool Is_Handled_By_Others (_Unwind_Ptr eid);\n extern char Language_For (_Unwind_Ptr eid);\n \n-extern Exception_Code Import_Code_For (_Unwind_Ptr eid);\n+extern void *Foreign_Data_For (_Unwind_Ptr eid);\n \n extern Exception_Id EID_For (_GNAT_Exception * e);\n \n+#define Foreign_Exception system__exceptions__foreign_exception\n+extern struct Exception_Data Foreign_Exception;\n+\n+#ifdef VMS\n+#define Non_Ada_Error system__aux_dec__non_ada_error\n+extern struct Exception_Data Non_Ada_Error;\n+#endif\n+\n static enum action_kind\n is_handled_by (_Unwind_Ptr choice, _GNAT_Exception * propagated_exception)\n {\n+  /* All others choice match everything.  */\n   if (choice == GNAT_ALL_OTHERS)\n     return handler;\n \n+  /* GNAT exception occurrence.  */\n   if (propagated_exception->common.exception_class == GNAT_EXCEPTION_CLASS)\n     {\n       /* Pointer to the GNAT exception data corresponding to the propagated\n@@ -845,36 +855,33 @@ is_handled_by (_Unwind_Ptr choice, _GNAT_Exception * propagated_exception)\n       if (choice == E || (choice == GNAT_OTHERS && Is_Handled_By_Others (E)))\n \treturn handler;\n \n+#ifdef VMS\n       /* In addition, on OpenVMS, Non_Ada_Error matches VMS exceptions, and we\n          may have different exception data pointers that should match for the\n          same condition code, if both an export and an import have been\n          registered.  The import code for both the choice and the propagated\n          occurrence are expected to have been masked off regarding severity\n          bits already (at registration time for the former and from within the\n          low level exception vector for the latter).  */\n-#ifdef VMS\n-#     define Non_Ada_Error system__aux_dec__non_ada_error\n-      extern struct Exception_Data Non_Ada_Error;\n-\n       if ((Language_For (E) == 'V'\n \t   && choice != GNAT_OTHERS\n \t   && ((Language_For (choice) == 'V'\n-\t\t&& Import_Code_For (choice) != 0\n-\t\t&& Import_Code_For (choice) == Import_Code_For (E))\n+\t\t&& Foreign_Data_For (choice) != 0\n+\t\t&& Foreign_Data_For (choice) == Foreign_Data_For (E))\n \t       || choice == (_Unwind_Ptr)&Non_Ada_Error)))\n \treturn handler;\n #endif\n-    }\n-  else\n-    {\n-#     define Foreign_Exception system__exceptions__foreign_exception\n-      extern struct Exception_Data Foreign_Exception;\n \n-      if (choice == GNAT_ALL_OTHERS\n-\t  || choice == GNAT_OTHERS\n-\t  || choice == (_Unwind_Ptr) &Foreign_Exception)\n-\treturn handler;\n+      /* Otherwise, it doesn't match an Ada choice.  */\n+      return nothing;\n     }\n+\n+  /* All others and others choice match any foreign exception.  */\n+  if (choice == GNAT_ALL_OTHERS\n+      || choice == GNAT_OTHERS\n+      || choice == (_Unwind_Ptr) &Foreign_Exception)\n+    return handler;\n+\n   return nothing;\n }\n "}, {"sha": "8f699bc6269ecd94ed7f9a78b40ff85300e9d493", "filename": "gcc/ada/raise.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fraise.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fraise.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.h?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2012, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2013, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -35,15 +35,14 @@ extern \"C\" {\n \n /* C counterparts of what System.Standard_Library defines.  */\n \n-typedef unsigned Exception_Code;\n-\n struct Exception_Data\n {\n   char Not_Handled_By_Others;\n   char Lang;\n   int Name_Length;\n-  char *Full_Name, *Htable_Ptr;\n-  Exception_Code Import_Code;\n+  char *Full_Name;\n+  char *Htable_Ptr;\n+  void *Foreign_Data;\n   void (*Raise_Hook)(void);\n };\n "}, {"sha": "d863e1cdd35d0605ce340059cf4856267b104b2c", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -748,6 +748,7 @@ package Rtsfind is\n      RE_Uint64,                          -- System.Atomic_Primitives\n \n      RE_AST_Handler,                     -- System.Aux_DEC\n+     RE_Import_Address,                  -- System.Aux_DEC\n      RE_Import_Value,                    -- System.Aux_DEC\n      RE_No_AST_Handler,                  -- System.Aux_DEC\n      RE_Type_Class,                      -- System.Aux_DEC\n@@ -1413,7 +1414,6 @@ package Rtsfind is\n      RE_Shared_Var_Procs,                -- System.Shared_Storage\n \n      RE_Abort_Undefer_Direct,            -- System.Standard_Library\n-     RE_Exception_Code,                  -- System.Standard_Library\n      RE_Exception_Data_Ptr,              -- System.Standard_Library\n \n      RE_Integer_Address,                 -- System.Storage_Elements\n@@ -2001,6 +2001,7 @@ package Rtsfind is\n      RE_Uint64                           => System_Atomic_Primitives,\n \n      RE_AST_Handler                      => System_Aux_DEC,\n+     RE_Import_Address                   => System_Aux_DEC,\n      RE_Import_Value                     => System_Aux_DEC,\n      RE_No_AST_Handler                   => System_Aux_DEC,\n      RE_Type_Class                       => System_Aux_DEC,\n@@ -2670,7 +2671,6 @@ package Rtsfind is\n      RE_Shared_Var_Procs                 => System_Shared_Storage,\n \n      RE_Abort_Undefer_Direct             => System_Standard_Library,\n-     RE_Exception_Code                   => System_Standard_Library,\n      RE_Exception_Data_Ptr               => System_Standard_Library,\n \n      RE_Integer_Address                  => System_Storage_Elements,"}, {"sha": "42d4e952c11baf2b062a9df08c4698c90391bbac", "filename": "gcc/ada/s-exctab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-exctab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-exctab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctab.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -180,7 +180,7 @@ package body System.Exception_Table is\n               Name_Length           => Copy'Length,\n               Full_Name             => Dyn_Copy.all'Address,\n               HTable_Ptr            => null,\n-              Import_Code           => 0,\n+              Foreign_Data          => Null_Address,\n               Raise_Hook            => null);\n \n          Register_Exception (Res);"}, {"sha": "6658afbae31e6404e4e2c1a51c45b255e12cb62d", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -85,20 +85,6 @@ package System.Standard_Library is\n    type Exception_Data_Ptr is access all Exception_Data;\n    --  An equivalent of Exception_Id that is public\n \n-   type Exception_Code is mod 2 ** Integer'Size;\n-   --  A scalar value bound to some exception data. Typically used for\n-   --  imported or exported exceptions on VMS. Having a separate type for this\n-   --  is useful to enforce consistency throughout the various run-time units\n-   --  handling such codes, and having it unsigned is the most appropriate\n-   --  choice for it's currently single use on VMS.\n-\n-   --  ??? The construction in Cstand has no way to access the proper type\n-   --  node for Exception_Code, and currently uses Standard_Unsigned as a\n-   --  fallback. The representations shall match, and the size clause below\n-   --  is aimed at ensuring that.\n-\n-   for Exception_Code'Size use Integer'Size;\n-\n    --  The following record defines the underlying representation of exceptions\n \n    --  WARNING! Any changes to this may need to be reflected in the following\n@@ -121,6 +107,7 @@ package System.Standard_Library is\n       --  A character indicating the language raising the exception.\n       --  Set to \"A\" for exceptions defined by an Ada program.\n       --  Set to \"V\" for imported VMS exceptions.\n+      --  Set to \"C\" for imported C++ exceptions.\n \n       Name_Length : Natural;\n       --  Length of fully expanded name of exception\n@@ -134,11 +121,10 @@ package System.Standard_Library is\n       --  built (by Register_Exception in s-exctab.adb) for converting between\n       --  identities and names.\n \n-      Import_Code : Exception_Code;\n-      --  Value for imported exceptions. Needed only for the handling of\n-      --  Import/Export_Exception for the VMS case, but present in all\n-      --  implementations (we might well extend this mechanism for other\n-      --  systems in the future).\n+      Foreign_Data : Address;\n+      --  Data for imported exceptions. This represents the exception code\n+      --  for the handling of Import/Export_Exception for the VMS case.\n+      --  This represents the address of the RTTI for the C++ case.\n \n       Raise_Hook : Raise_Action;\n       --  This field can be used to place a \"hook\" on an exception. If the\n@@ -169,7 +155,7 @@ package System.Standard_Library is\n       Name_Length           => Constraint_Error_Name'Length,\n       Full_Name             => Constraint_Error_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    Numeric_Error_Def : aliased Exception_Data :=\n@@ -178,7 +164,7 @@ package System.Standard_Library is\n       Name_Length           => Numeric_Error_Name'Length,\n       Full_Name             => Numeric_Error_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    Program_Error_Def : aliased Exception_Data :=\n@@ -187,7 +173,7 @@ package System.Standard_Library is\n       Name_Length           => Program_Error_Name'Length,\n       Full_Name             => Program_Error_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    Storage_Error_Def : aliased Exception_Data :=\n@@ -196,7 +182,7 @@ package System.Standard_Library is\n       Name_Length           => Storage_Error_Name'Length,\n       Full_Name             => Storage_Error_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    Tasking_Error_Def : aliased Exception_Data :=\n@@ -205,7 +191,7 @@ package System.Standard_Library is\n       Name_Length           => Tasking_Error_Name'Length,\n       Full_Name             => Tasking_Error_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    Abort_Signal_Def : aliased Exception_Data :=\n@@ -214,7 +200,7 @@ package System.Standard_Library is\n       Name_Length           => Abort_Signal_Name'Length,\n       Full_Name             => Abort_Signal_Name'Address,\n       HTable_Ptr            => null,\n-      Import_Code           => 0,\n+      Foreign_Data          => Null_Address,\n       Raise_Hook            => null);\n \n    pragma Export (C, Constraint_Error_Def, \"constraint_error\");"}, {"sha": "fb454cfc9a3eb28a72683cfe4de6e767795f2937", "filename": "gcc/ada/s-vmexta.adb", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-vmexta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-vmexta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vmexta.adb?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,8 +36,6 @@ pragma Elaborate_All (System.HTable);\n \n package body System.VMS_Exception_Table is\n \n-   use type SSL.Exception_Code;\n-\n    type HTable_Headers is range 1 .. 37;\n \n    type Exception_Code_Data;\n@@ -47,7 +45,7 @@ package body System.VMS_Exception_Table is\n    --  Ada exception.\n \n    type Exception_Code_Data is record\n-      Code       : SSL.Exception_Code;\n+      Code       : Exception_Code;\n       Except     : SSL.Exception_Data_Ptr;\n       HTable_Ptr : Exception_Code_Data_Ptr;\n    end record;\n@@ -59,8 +57,8 @@ package body System.VMS_Exception_Table is\n    function Get_HT_Link (T : Exception_Code_Data_Ptr)\n      return Exception_Code_Data_Ptr;\n \n-   function Hash (F : SSL.Exception_Code) return HTable_Headers;\n-   function Get_Key (T : Exception_Code_Data_Ptr) return SSL.Exception_Code;\n+   function Hash (F : Exception_Code) return HTable_Headers;\n+   function Get_Key (T : Exception_Code_Data_Ptr) return Exception_Code;\n \n    package Exception_Code_HTable is new System.HTable.Static_HTable (\n      Header_Num => HTable_Headers,\n@@ -69,7 +67,7 @@ package body System.VMS_Exception_Table is\n      Null_Ptr   => null,\n      Set_Next   => Set_HT_Link,\n      Next       => Get_HT_Link,\n-     Key        => SSL.Exception_Code,\n+     Key        => Exception_Code,\n      Get_Key    => Get_Key,\n      Hash       => Hash,\n      Equal      => \"=\");\n@@ -79,7 +77,7 @@ package body System.VMS_Exception_Table is\n    ------------------\n \n    function Base_Code_In\n-     (Code : SSL.Exception_Code) return SSL.Exception_Code\n+     (Code : Exception_Code) return Exception_Code\n    is\n    begin\n       return Code and not 2#0111#;\n@@ -90,7 +88,7 @@ package body System.VMS_Exception_Table is\n    ---------------------\n \n    function Coded_Exception\n-     (X : SSL.Exception_Code) return SSL.Exception_Data_Ptr\n+     (X : Exception_Code) return SSL.Exception_Data_Ptr\n    is\n       Res : Exception_Code_Data_Ptr;\n \n@@ -121,7 +119,7 @@ package body System.VMS_Exception_Table is\n    -------------\n \n    function Get_Key (T : Exception_Code_Data_Ptr)\n-     return SSL.Exception_Code\n+     return Exception_Code\n    is\n    begin\n       return T.Code;\n@@ -132,10 +130,10 @@ package body System.VMS_Exception_Table is\n    ----------\n \n    function Hash\n-     (F : SSL.Exception_Code) return HTable_Headers\n+     (F : Exception_Code) return HTable_Headers\n    is\n-      Headers_Magnitude : constant SSL.Exception_Code :=\n-        SSL.Exception_Code (HTable_Headers'Last - HTable_Headers'First + 1);\n+      Headers_Magnitude : constant Exception_Code :=\n+        Exception_Code (HTable_Headers'Last - HTable_Headers'First + 1);\n \n    begin\n       return HTable_Headers (F mod Headers_Magnitude + 1);\n@@ -146,13 +144,13 @@ package body System.VMS_Exception_Table is\n    ----------------------------\n \n    procedure Register_VMS_Exception\n-     (Code : SSL.Exception_Code;\n+     (Code : Exception_Code;\n       E    : SSL.Exception_Data_Ptr)\n    is\n       --  We bind the exception data with the base code found in the\n       --  input value, that is with the severity bits masked off.\n \n-      Excode : constant SSL.Exception_Code := Base_Code_In (Code);\n+      Excode : constant Exception_Code := Base_Code_In (Code);\n \n    begin\n       --  The exception data registered here is mostly filled prior to this\n@@ -165,7 +163,7 @@ package body System.VMS_Exception_Table is\n       --  routine attempts to match the import codes in this case.\n \n       E.Lang := 'V';\n-      E.Import_Code := Excode;\n+      E.Foreign_Data := Excode;\n \n       if Exception_Code_HTable.Get (Excode) = null then\n          Exception_Code_HTable.Set (new Exception_Code_Data'(Excode, E, null));"}, {"sha": "5ad3f3cd373d23e5c400f42cb610085eed014f7a", "filename": "gcc/ada/s-vmexta.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-vmexta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e443f142047e2a9f67dd859e77d26d94fa3241e8/gcc%2Fada%2Fs-vmexta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vmexta.ads?ref=e443f142047e2a9f67dd859e77d26d94fa3241e8", "patch": "@@ -38,8 +38,10 @@ package System.VMS_Exception_Table is\n \n    package SSL renames System.Standard_Library;\n \n+   subtype Exception_Code is System.Address;\n+\n    procedure Register_VMS_Exception\n-     (Code : SSL.Exception_Code;\n+     (Code : Exception_Code;\n       E    : SSL.Exception_Data_Ptr);\n    --  Register an exception in hash table mapping with a VMS condition code.\n    --\n@@ -55,10 +57,10 @@ private\n    --  The following functions are directly called (without import/export) in\n    --  init.c by __gnat_handle_vms_condition.\n \n-   function Base_Code_In (Code : SSL.Exception_Code) return SSL.Exception_Code;\n+   function Base_Code_In (Code : Exception_Code) return Exception_Code;\n    --  Value of Code with the severity bits masked off\n \n-   function Coded_Exception (X : SSL.Exception_Code)\n+   function Coded_Exception (X : Exception_Code)\n      return SSL.Exception_Data_Ptr;\n    --  Given a VMS condition, find and return its allocated Ada exception\n "}]}