{"sha": "1ea71a82f9d42684c542147b231afb63e8a6da8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhNzFhODJmOWQ0MjY4NGM1NDIxNDdiMjMxYWZiNjNlOGE2ZGE4Zg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-06T06:24:40Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-06T06:24:40Z"}, "message": "[PR c++/84492] stmt expr ending with overload\n\nWe ICEd when returning a stmt expr that ends with an overloaded\nfunction, because instantiate_type did not know what to do with\nSTMT_EXPRs.  And it shouldn't have to: the expected type of a stmt\nexpr cannot be used to resolve its value: an unresolved overload\ncannot supply the result of a stmt expr.  Catch that and report the\nerror in the stmt expr before we have a chance to instantiate it.\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/84492\n\t* semantics.c (finish_stmt_expr_expr): Reject unresolved\n\toverloads used as stmt expr values.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/84492\n\t* g++.dg/pr84492.C: New.\n\nFrom-SVN: r258269", "tree": {"sha": "20819b137643b69d6eadb2f84b1076132aff78cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20819b137643b69d6eadb2f84b1076132aff78cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea71a82f9d42684c542147b231afb63e8a6da8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea71a82f9d42684c542147b231afb63e8a6da8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea71a82f9d42684c542147b231afb63e8a6da8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea71a82f9d42684c542147b231afb63e8a6da8f/comments", "author": null, "committer": null, "parents": [{"sha": "4900146ce0cf227aee88a1bd3b152c9394c64771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4900146ce0cf227aee88a1bd3b152c9394c64771", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4900146ce0cf227aee88a1bd3b152c9394c64771"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "cbacda6e3824c1eb204f1c7d4cd143d8a99b9762", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1ea71a82f9d42684c542147b231afb63e8a6da8f", "patch": "@@ -1,3 +1,9 @@\n+2018-03-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84492\n+\t* semantics.c (finish_stmt_expr_expr): Reject unresolved\n+\toverloads used as stmt expr values.\n+\n 2018-03-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/84708 - ICE with lambda in local class NSDMI."}, {"sha": "8a0096ddf923fd5e951de86f2e84de4c71f23e8b", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=1ea71a82f9d42684c542147b231afb63e8a6da8f", "patch": "@@ -2114,7 +2114,14 @@ finish_stmt_expr_expr (tree expr, tree stmt_expr)\n     {\n       tree type = TREE_TYPE (expr);\n \n-      if (processing_template_decl)\n+      if (type && type_unknown_p (type))\n+\t{\n+\t  error (\"a statement expression is an insufficient context\"\n+\t\t \" for overload resolution\");\n+\t  TREE_TYPE (stmt_expr) = error_mark_node;\n+\t  return error_mark_node;\n+\t}\n+      else if (processing_template_decl)\n \t{\n \t  expr = build_stmt (input_location, EXPR_STMT, expr);\n \t  expr = add_stmt (expr);"}, {"sha": "e3e3262ddf2a1b118c897b5f0f756c8821fec91f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ea71a82f9d42684c542147b231afb63e8a6da8f", "patch": "@@ -1,3 +1,8 @@\n+2018-03-06  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR c++/84492\n+\t* g++.dg/pr84492.C: New.\n+\n 2018-03-05  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/spec-barr-1.c: Change called function name to"}, {"sha": "1a2922096d19102c54e51b6775986e2a7fab71ae", "filename": "gcc/testsuite/g++.dg/pr84492.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84492.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea71a82f9d42684c542147b231afb63e8a6da8f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84492.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr84492.C?ref=1ea71a82f9d42684c542147b231afb63e8a6da8f", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-fpermissive\" }\n+\n+template<int> int foo()\n+{\n+  return ({ foo; }); // { dg-error \"insufficient context\" }\n+}\n+\n+int bar()\n+{\n+  return ({ foo; }); // { dg-error \"insufficient context\" }\n+}\n+\n+void bar(int);\n+\n+typedef void (*bart)(int);\n+\n+bart barf()\n+{\n+  return ({ bar; }); // { dg-error \"insufficient context\" }\n+}\n+\n+bool bark()\n+{\n+  return ({ barf; }); // ok, no overload\n+}\n+\n+template <typename T>\n+class C\n+{\n+  static int f();\n+  bool g()\n+  {\n+    return ({ f; }); // ok, no overload\n+  }\n+  bool g(int)\n+  {\n+    return ({ g; }); // { dg-error \"insufficient context\" }\n+  }\n+};"}]}