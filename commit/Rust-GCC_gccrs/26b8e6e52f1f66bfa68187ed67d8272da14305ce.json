{"sha": "26b8e6e52f1f66bfa68187ed67d8272da14305ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZiOGU2ZTUyZjFmNjZiZmE2ODE4N2VkNjdkODI3MmRhMTQzMDVjZQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-17T03:08:34Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-04-17T03:08:34Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r757", "tree": {"sha": "8a92be7abdd889dfca7689274b0ce02977c7f63f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a92be7abdd889dfca7689274b0ce02977c7f63f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26b8e6e52f1f66bfa68187ed67d8272da14305ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b8e6e52f1f66bfa68187ed67d8272da14305ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26b8e6e52f1f66bfa68187ed67d8272da14305ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26b8e6e52f1f66bfa68187ed67d8272da14305ce/comments", "author": null, "committer": null, "parents": [{"sha": "c4b9be8e7c58d1c7c5639db07fd07072b57c3d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b9be8e7c58d1c7c5639db07fd07072b57c3d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b9be8e7c58d1c7c5639db07fd07072b57c3d48"}], "stats": {"total": 169, "additions": 124, "deletions": 45}, "files": [{"sha": "1435e388f48f5a808db7713cec2ccfdabb743a30", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 124, "deletions": 45, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26b8e6e52f1f66bfa68187ed67d8272da14305ce/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26b8e6e52f1f66bfa68187ed67d8272da14305ce/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=26b8e6e52f1f66bfa68187ed67d8272da14305ce", "patch": "@@ -305,7 +305,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\n@@ -334,7 +334,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\n@@ -377,7 +377,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && INTVAL (operands[2]) > 0\"\n@@ -400,7 +400,7 @@\n \t(plus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t (match_operand:DI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"=d\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && INTVAL (operands[2]) > 0\"\n@@ -485,7 +485,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -512,7 +512,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"register_operand\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -553,7 +553,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && INTVAL (operands[2]) > 0\"\n@@ -576,7 +576,7 @@\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t  (match_operand:DI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && INTVAL (operands[2]) > 0\"\n@@ -651,7 +651,7 @@\n \t\t (match_operand:SI 2 \"register_operand\" \"\")))\n    (clobber (reg:SI 64))\n    (clobber (reg:SI 65))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(parallel [(set (reg:SI 65)\t\t;; low register\n \t\t   (mult:SI (match_dup 1)\n \t\t\t    (match_dup 2)))\n@@ -1054,7 +1054,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n \n@@ -1090,7 +1090,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(not:DI (ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"\"))))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -1141,7 +1141,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(and:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -1178,7 +1178,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ior:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -1215,7 +1215,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(xor:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t(match_operand:DI 2 \"register_operand\" \"\")))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\n    && GET_CODE (operands[2]) == REG && GP_REG_P (REGNO (operands[2]))\"\n@@ -1762,7 +1762,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(match_operand:DI 1 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n \n@@ -1776,7 +1776,7 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(match_operand:SI 1 \"large_int\" \"\"))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(match_dup 2))\n    (set (match_dup 0)\n@@ -1882,14 +1882,15 @@ move\\\\t%0,%z4\\\\n\\\\\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))]\n-  \"reload_completed && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && GP_REG_P (REGNO (operands[0]))\n    && GET_CODE (operands[1]) == REG && GP_REG_P (REGNO (operands[1]))\"\n \n   [(set (subreg:SI (match_dup 0) 0) (subreg:SI (match_dup 1) 0))\n    (set (subreg:SI (match_dup 0) 1) (subreg:SI (match_dup 1) 1))]\n   \"\")\n \n+\f\n ;; Block moves, see mips.c for more details.\n ;; Argument 0 is the destination\n ;; Argument 1 is the source\n@@ -1914,20 +1915,96 @@ move\\\\t%0,%z4\\\\n\\\\\n ;; Insn generated by block moves\n \n (define_insn \"movstrsi_internal\"\n-  [(set (match_operand:BLK 0 \"memory_operand\" \"=Ro\")\n-\t(match_operand:BLK 1 \"memory_operand\" \"Ro\"))\n-   (clobber (match_scratch:SI 4 \"=&d\"))\n-   (clobber (match_scratch:SI 5 \"=&d\"))\n-   (clobber (match_scratch:SI 6 \"=&d\"))\n-   (clobber (match_scratch:SI 7 \"=&d\"))\n-   (use (match_operand:SI 2 \"small_int\" \"I\"))\n-   (use (match_operand:SI 3 \"small_int\" \"I\"))]\n-  \"\"\n-  \"* return output_block_move (insn, operands, 4);\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=Ro\")\t;; destination\n+\t(match_operand:BLK 1 \"memory_operand\" \"Ro\"))\t;; source\n+   (clobber (match_scratch:SI 4 \"=&d\"))\t\t\t;; temp 1\n+   (clobber (match_scratch:SI 5 \"=&d\"))\t\t\t;; temp 2\n+   (clobber (match_scratch:SI 6 \"=&d\"))\t\t\t;; temp 3\n+   (clobber (match_scratch:SI 7 \"=&d\"))\t\t\t;; temp 4\n+   (use (match_operand:SI 2 \"small_int\" \"I\"))\t\t;; # bytes to move\n+   (use (match_operand:SI 3 \"small_int\" \"I\"))\t\t;; alignment\n+   (use (const_int 0))]\t\t\t\t\t;; normal block move\n+  \"\"\n+  \"* return output_block_move (insn, operands, 4, BLOCK_MOVE_NORMAL);\"\n   [(set_attr \"type\"\t\"multi\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"20\")])\n \n+;; Split a block move into 2 parts, the first part is everything\n+;; except for the last move, and the second part is just the last\n+;; store, which is exactly 1 instruction (ie, not a usw), so it can\n+;; fill a delay slot.  This also prevents a bug in delayed branches\n+;; from showing up, which reuses one of the registers in our clobbers.\n+\n+(define_split\n+  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"\"))\n+\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"\")))\n+   (clobber (match_operand:SI 4 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 5 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 6 \"register_operand\" \"\"))\n+   (clobber (match_operand:SI 7 \"register_operand\" \"\"))\n+   (use (match_operand:SI 2 \"small_int\" \"\"))\n+   (use (match_operand:SI 3 \"small_int\" \"\"))\n+   (use (const_int 0))]\n+\n+  \"reload_completed && !TARGET_DEBUG_D_MODE && INTVAL (operands[2]) > 0\"\n+\n+  ;; All but the last move\n+  [(parallel [(set (mem:BLK (match_dup 0))\n+\t\t   (mem:BLK (match_dup 1)))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))\n+\t      (clobber (match_dup 7))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (use (const_int 1))])\n+\n+   ;; The last store, so it can fill a delay slot\n+   (parallel [(set (mem:BLK (match_dup 0))\n+\t\t   (mem:BLK (match_dup 1)))\n+\t      (clobber (match_dup 4))\n+\t      (clobber (match_dup 5))\n+\t      (clobber (match_dup 6))\n+\t      (clobber (match_dup 7))\n+\t      (use (match_dup 2))\n+\t      (use (match_dup 3))\n+\t      (use (const_int 2))])]\n+\n+  \"\")\n+\n+(define_insn \"movstrsi_internal2\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=Ro\")\t;; destination\n+\t(match_operand:BLK 1 \"memory_operand\" \"Ro\"))\t;; source\n+   (clobber (match_scratch:SI 4 \"=&d\"))\t\t\t;; temp 1\n+   (clobber (match_scratch:SI 5 \"=&d\"))\t\t\t;; temp 2\n+   (clobber (match_scratch:SI 6 \"=&d\"))\t\t\t;; temp 3\n+   (clobber (match_scratch:SI 7 \"=&d\"))\t\t\t;; temp 4\n+   (use (match_operand:SI 2 \"small_int\" \"I\"))\t\t;; # bytes to move\n+   (use (match_operand:SI 3 \"small_int\" \"I\"))\t\t;; alignment\n+   (use (const_int 1))]\t\t\t\t\t;; all but last store\n+  \"\"\n+  \"* return output_block_move (insn, operands, 4, BLOCK_MOVE_NOT_LAST);\"\n+  [(set_attr \"type\"\t\"multi\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"20\")])\n+\n+(define_insn \"movstrsi_internal3\"\n+  [(set (match_operand:BLK 0 \"memory_operand\" \"=Ro\")\t;; destination\n+\t(match_operand:BLK 1 \"memory_operand\" \"Ro\"))\t;; source\n+   (clobber (match_scratch:SI 4 \"=&d\"))\t\t\t;; temp 1\n+   (clobber (match_scratch:SI 5 \"=&d\"))\t\t\t;; temp 2\n+   (clobber (match_scratch:SI 6 \"=&d\"))\t\t\t;; temp 3\n+   (clobber (match_scratch:SI 7 \"=&d\"))\t\t\t;; temp 4\n+   (use (match_operand:SI 2 \"small_int\" \"I\"))\t\t;; # bytes to move\n+   (use (match_operand:SI 3 \"small_int\" \"I\"))\t\t;; alignment\n+   (use (const_int 2))]\t\t\t\t\t;; just last store of block mvoe\n+  \"\"\n+  \"* return output_block_move (insn, operands, 4, BLOCK_MOVE_LAST);\"\n+  [(set_attr \"type\"\t\"store\")\n+   (set_attr \"mode\"\t\"none\")\n+   (set_attr \"length\"\t\"1\")])\n+\n \f\n ;;\n ;;  ....................\n@@ -2018,7 +2095,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2034,7 +2111,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2073,7 +2150,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -2107,7 +2184,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t   (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -2217,7 +2294,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2233,7 +2310,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2271,7 +2348,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -2305,7 +2382,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -2416,7 +2493,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2432,7 +2509,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 32) != 0\"\n@@ -2470,7 +2547,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && !WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -2504,7 +2581,7 @@ move\\\\t%0,%z4\\\\n\\\\\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"\")\n \t\t     (match_operand:SI 2 \"small_int\" \"\")))\n    (clobber (match_operand:SI 3 \"register_operand\" \"\"))]\n-  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_G_MODE\n+  \"reload_completed && WORDS_BIG_ENDIAN && !TARGET_DEBUG_D_MODE && !TARGET_DEBUG_G_MODE\n    && GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\n    && GET_CODE (operands[1]) == REG && REGNO (operands[1]) < FIRST_PSEUDO_REGISTER\n    && (INTVAL (operands[2]) & 63) < 32\n@@ -3139,7 +3216,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(eq:CC_EQ (match_operand:SI 1 \"register_operand\" \"\")\n \t\t  (match_operand:SI 2 \"uns_arith_operand\" \"\")))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0\"\n+  \"!TARGET_DEBUG_D_MODE\n+    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -3193,7 +3271,8 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ne:CC_EQ (match_operand:SI 1 \"register_operand\" \"\")\n \t\t  (match_operand:SI 2 \"uns_arith_operand\" \"\")))]\n-  \"GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0\"\n+  \"!TARGET_DEBUG_D_MODE\n+    && (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\"\n   [(set (match_dup 0)\n \t(xor:SI (match_dup 1)\n \t\t(match_dup 2)))\n@@ -3265,7 +3344,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(ge:CC (match_operand:SI 1 \"register_operand\" \"\")\n \t       (match_operand:SI 2 \"arith_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(lt:CC (match_dup 1)\n \t       (match_dup 2)))\n@@ -3339,7 +3418,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(le:CC (match_operand:SI 1 \"register_operand\" \"\")\n \t       (match_operand:SI 2 \"register_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(lt:CC (match_dup 2)\n \t       (match_dup 1)))\n@@ -3411,7 +3490,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(geu:CC (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(ltu:CC (match_dup 1)\n \t\t(match_dup 2)))\n@@ -3485,7 +3564,7 @@ move\\\\t%0,%z4\\\\n\\\\\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n \t(leu:CC (match_operand:SI 1 \"register_operand\" \"\")\n \t\t(match_operand:SI 2 \"register_operand\" \"\")))]\n-  \"\"\n+  \"!TARGET_DEBUG_D_MODE\"\n   [(set (match_dup 0)\n \t(ltu:CC (match_dup 2)\n \t\t(match_dup 1)))"}]}