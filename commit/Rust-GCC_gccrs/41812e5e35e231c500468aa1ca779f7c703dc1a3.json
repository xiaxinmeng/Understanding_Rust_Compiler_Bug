{"sha": "41812e5e35e231c500468aa1ca779f7c703dc1a3", "node_id": "C_kwDOANBUbNoAKDQxODEyZTVlMzVlMjMxYzUwMDQ2OGFhMWNhNzc5ZjdjNzAzZGMxYTM", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-20T16:07:54Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-10-20T16:07:54Z"}, "message": "AArch64: Add combine patterns for narrowing shift of half top bits (shuffle)\n\nWhen doing a (narrowing) right shift by half the width of the original type then\nwe are essentially shuffling the top bits from the first number down.\n\nIf we have a hi/lo pair we can just use a single shuffle instead of needing two\nshifts.\n\ni.e.\n\ntypedef short int16_t;\ntypedef unsigned short uint16_t;\n\nvoid foo (uint16_t * restrict a, int16_t * restrict d, int n)\n{\n    for( int i = 0; i < n; i++ )\n      d[i] = (a[i] * a[i]) >> 16;\n}\n\nnow generates:\n\n.L4:\n        ldr     q0, [x0, x3]\n        umull   v1.4s, v0.4h, v0.4h\n        umull2  v0.4s, v0.8h, v0.8h\n        uzp2    v0.8h, v1.8h, v0.8h\n        str     q0, [x1, x3]\n        add     x3, x3, 16\n        cmp     x4, x3\n        bne     .L4\n\ninstead of\n\n.L4:\n        ldr     q0, [x0, x3]\n        umull   v1.4s, v0.4h, v0.4h\n        umull2  v0.4s, v0.8h, v0.8h\n        sshr    v1.4s, v1.4s, 16\n        sshr    v0.4s, v0.4s, 16\n        xtn     v1.4h, v1.4s\n        xtn2    v1.8h, v0.4s\n        str     q1, [x1, x3]\n        add     x3, x3, 16\n        cmp     x4, x3\n        bne     .L4\n\nThanks,\nTamar\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd.md\n\t(*aarch64_<srn_op>topbits_shuffle<mode>_le): New.\n\t(*aarch64_topbits_shuffle<mode>_le): New.\n\t(*aarch64_<srn_op>topbits_shuffle<mode>_be): New.\n\t(*aarch64_topbits_shuffle<mode>_be): New.\n\t* config/aarch64/predicates.md\n\t(aarch64_simd_shift_imm_vec_exact_top): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/shrn-combine-10.c: New test.\n\t* gcc.target/aarch64/shrn-combine-5.c: New test.\n\t* gcc.target/aarch64/shrn-combine-6.c: New test.\n\t* gcc.target/aarch64/shrn-combine-7.c: New test.\n\t* gcc.target/aarch64/shrn-combine-8.c: New test.\n\t* gcc.target/aarch64/shrn-combine-9.c: New test.", "tree": {"sha": "c65aabe34a6df64555849d14d6d7af50b11fd55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c65aabe34a6df64555849d14d6d7af50b11fd55c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41812e5e35e231c500468aa1ca779f7c703dc1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41812e5e35e231c500468aa1ca779f7c703dc1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41812e5e35e231c500468aa1ca779f7c703dc1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41812e5e35e231c500468aa1ca779f7c703dc1a3/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e33aef11e145996fc550eca07e899f0c756d3802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e33aef11e145996fc550eca07e899f0c756d3802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e33aef11e145996fc550eca07e899f0c756d3802"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "7f0888ee2f81ae17ac97be1f8438a2e588587c2a", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -1852,6 +1852,66 @@\n   [(set_attr \"type\" \"neon_shift_imm_narrow_q\")]\n )\n \n+(define_insn \"*aarch64_<srn_op>topbits_shuffle<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+          (truncate:<VNARROWQ>\n+            (SHIFTRT:VQN (match_operand:VQN 1 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")))\n+\t  (truncate:<VNARROWQ>\n+\t    (SHIFTRT:VQN (match_operand:VQN 3 \"register_operand\" \"w\")\n+\t      (match_dup 2)))))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n+  [(set_attr \"type\" \"neon_permute<q>\")]\n+)\n+\n+(define_insn \"*aarch64_topbits_shuffle<mode>_le\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+          (unspec:<VNARROWQ> [\n+              (match_operand:VQN 1 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")\n+\t     ] UNSPEC_RSHRN)\n+\t  (unspec:<VNARROWQ> [\n+\t      (match_operand:VQN 3 \"register_operand\" \"w\")\n+\t      (match_dup 2)\n+\t     ] UNSPEC_RSHRN)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n+  [(set_attr \"type\" \"neon_permute<q>\")]\n+)\n+\n+(define_insn \"*aarch64_<srn_op>topbits_shuffle<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (truncate:<VNARROWQ>\n+\t    (SHIFTRT:VQN (match_operand:VQN 3 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")))\n+          (truncate:<VNARROWQ>\n+            (SHIFTRT:VQN (match_operand:VQN 1 \"register_operand\" \"w\")\n+\t      (match_dup 2)))))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n+  [(set_attr \"type\" \"neon_permute<q>\")]\n+)\n+\n+(define_insn \"*aarch64_topbits_shuffle<mode>_be\"\n+  [(set (match_operand:<VNARROWQ2> 0 \"register_operand\" \"=w\")\n+\t(vec_concat:<VNARROWQ2>\n+\t  (unspec:<VNARROWQ> [\n+\t      (match_operand:VQN 3 \"register_operand\" \"w\")\n+\t      (match_operand:VQN 2 \"aarch64_simd_shift_imm_vec_exact_top\")\n+\t     ] UNSPEC_RSHRN)\n+          (unspec:<VNARROWQ> [\n+              (match_operand:VQN 1 \"register_operand\" \"w\")\n+\t      (match_dup 2)\n+\t     ] UNSPEC_RSHRN)))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"uzp2\\\\t%0.<V2ntype>, %1.<V2ntype>, %3.<V2ntype>\"\n+  [(set_attr \"type\" \"neon_permute<q>\")]\n+)\n+\n (define_expand \"aarch64_shrn<mode>\"\n   [(set (match_operand:<VNARROWQ> 0 \"register_operand\")\n \t(truncate:<VNARROWQ>"}, {"sha": "7fd4f9e7d06d3082d6f3047290f0446789e1d0d2", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -545,6 +545,12 @@\n   (and (match_code \"const_int\")\n        (match_test \"IN_RANGE (INTVAL (op), 1, 64)\")))\n \n+(define_predicate \"aarch64_simd_shift_imm_vec_exact_top\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"aarch64_const_vec_all_same_in_range_p (op,\n+\t\t\tGET_MODE_UNIT_BITSIZE (GET_MODE (op)) / 2,\n+\t\t\tGET_MODE_UNIT_BITSIZE (GET_MODE (op)) / 2)\")))\n+\n (define_predicate \"aarch64_simd_shift_imm_vec_qi\"\n   (and (match_code \"const_vector\")\n        (match_test \"aarch64_const_vec_all_same_in_range_p (op, 1, 8)\")))"}, {"sha": "3a1cfce93e9065e8d5b43a770b0ef24a17586411", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-10.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-10.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+uint32x4_t foo (uint64x2_t a, uint64x2_t b)\n+{\n+  return vrshrn_high_n_u64 (vrshrn_n_u64 (a, 32), b, 32);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}, {"sha": "408e85535788b2c1c9b05672a269e4e6567f2683", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-5.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-5.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE1 char\n+#define TYPE2 short\n+#define SHIFT 8\n+\n+void foo (TYPE2 * restrict a, TYPE1 * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = a[i] >> SHIFT;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}, {"sha": "6211ba3e41c199f325b80217d298801767c8dad5", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-6.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-6.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE1 short\n+#define TYPE2 int\n+#define SHIFT 16\n+\n+void foo (TYPE2 * restrict a, TYPE1 * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = a[i] >> SHIFT;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}, {"sha": "56cbeacc6de54f177f5b66d26b62ba6cefb921ad", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-7.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+#define TYPE1 int\n+#define TYPE2 long long\n+#define SHIFT 32\n+\n+void foo (TYPE2 * restrict a, TYPE1 * restrict d, int n)\n+{\n+    for( int i = 0; i < n; i++ )\n+      d[i] = a[i] >> SHIFT;\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}, {"sha": "6a47f3cdaee399e603c57a1c6a0c09c6cfd21abb", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-8.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-8.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+uint8x16_t foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vrshrn_high_n_u16 (vrshrn_n_u16 (a, 8), b, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}, {"sha": "929a55c5c338844e6a5c5ad249af482286ab9c61", "filename": "gcc/testsuite/gcc.target/aarch64/shrn-combine-9.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41812e5e35e231c500468aa1ca779f7c703dc1a3/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrn-combine-9.c?ref=41812e5e35e231c500468aa1ca779f7c703dc1a3", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O3 --save-temps --param=vect-epilogues-nomask=0\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+uint16x8_t foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vrshrn_high_n_u32 (vrshrn_n_u32 (a, 16), b, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tuzp2\\t} 1 } } */\n+/* { dg-final { scan-assembler-not {\\tshrn\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tshrn2\\t} } } */"}]}