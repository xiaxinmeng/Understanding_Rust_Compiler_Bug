{"sha": "00f4a3fb56f284ca1d3c6745a124076978c83ee3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBmNGEzZmI1NmYyODRjYTFkM2M2NzQ1YTEyNDA3Njk3OGM4M2VlMw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-10-11T17:19:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-11T17:19:46Z"}, "message": "2003-10-11  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/ActiveEvent.java\n\t* java/awt/datatransfer/ClipboardOwner.java\n\t* java/awt/datatransfer/FlavorMap.java\n\t* java/awt/datatransfer/Transferable.java\n\t* java/awt/dnd/Autoscroll.java\n\t* java/awt/dnd/peer/DragSourceContextPeer.java\n\t* java/awt/dnd/peer/DropTargetContextPeer.java\n\t* java/awt/dnd/peer/DropTargetPeer.java\n\t* java/awt/font/MultipleMaster.java\n\t* java/awt/font/OpenType.java\n\t* java/awt/im/spi/InputMethodDescriptor.java\n\t* java/awt/image/ImageObserver.java\n\t* java/awt/image/ImageConsumer.java\n\t* java/awt/image/ImageProducer.java\n\t* java/awt/image/RGBImageFilter.java\n\t* java/awt/image/RasterOp.java\n\t* java/awt/image/renderable/RenderableImage.java\n\nFrom-SVN: r72341", "tree": {"sha": "bacec23b96c272c8919e500e99e363359f431a4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacec23b96c272c8919e500e99e363359f431a4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00f4a3fb56f284ca1d3c6745a124076978c83ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f4a3fb56f284ca1d3c6745a124076978c83ee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00f4a3fb56f284ca1d3c6745a124076978c83ee3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00f4a3fb56f284ca1d3c6745a124076978c83ee3/comments", "author": null, "committer": null, "parents": [{"sha": "b46f35f3a81cc9ba8ae73e099455fcc2f4838fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b46f35f3a81cc9ba8ae73e099455fcc2f4838fc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b46f35f3a81cc9ba8ae73e099455fcc2f4838fc8"}], "stats": {"total": 211, "additions": 119, "deletions": 92}, "files": [{"sha": "01a9dd74906002ba8cfa27387f23068e94b33693", "filename": "libjava/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -1,3 +1,23 @@\n+2003-10-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/ActiveEvent.java\n+\t* java/awt/datatransfer/ClipboardOwner.java\n+\t* java/awt/datatransfer/FlavorMap.java\n+\t* java/awt/datatransfer/Transferable.java\n+\t* java/awt/dnd/Autoscroll.java\n+\t* java/awt/dnd/peer/DragSourceContextPeer.java\n+\t* java/awt/dnd/peer/DropTargetContextPeer.java\n+\t* java/awt/dnd/peer/DropTargetPeer.java\n+\t* java/awt/font/MultipleMaster.java\n+\t* java/awt/font/OpenType.java\n+\t* java/awt/im/spi/InputMethodDescriptor.java\n+\t* java/awt/image/ImageObserver.java\n+\t* java/awt/image/ImageConsumer.java\n+\t* java/awt/image/ImageProducer.java\n+\t* java/awt/image/RGBImageFilter.java\n+\t* java/awt/image/RasterOp.java\n+\t* java/awt/image/renderable/RenderableImage.java\n+\n 2003-10-11  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/awt/j2d/DirectRasterGraphics.java,"}, {"sha": "d43fef16df12b0de980655774f80a53ab777a56b", "filename": "libjava/java/awt/ActiveEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2FActiveEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2FActiveEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FActiveEvent.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -57,5 +57,5 @@\n    * Dispatch the event, according to what the event needs done. Invoked\n    * automatically if this is placed on the <code>EventDispatchQueue</code>.\n    */\n-  public void dispatch();\n+  void dispatch();\n } // interface ActiveEvent"}, {"sha": "28e58aae1845d9b95c28f66dd7126d1075c8d755", "filename": "libjava/java/awt/datatransfer/ClipboardOwner.java", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboardOwner.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboardOwner.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FClipboardOwner.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -39,22 +39,20 @@\n package java.awt.datatransfer;\n \n /**\n-  * This interface is for classes that will own a clipboard object.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This interface is for classes that will own a clipboard object.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public interface ClipboardOwner\n {\n-\n-/**\n-  * This method is called to notify this object that it no longer\n-  * has ownership of the specified <code>Clipboard</code>.\n-  *\n-  * @param clipboard The clipboard for which ownership was lost.\n-  * @param contents The contents of the clipboard which are no longer owned.\n-  */\n-public abstract void\n-lostOwnership(Clipboard clipboard, Transferable contents); \n+  /**\n+   * This method is called to notify this object that it no longer\n+   * has ownership of the specified <code>Clipboard</code>.\n+   *\n+   * @param clipboard The clipboard for which ownership was lost.\n+   * @param contents The contents of the clipboard which are no longer owned.\n+   */\n+  void lostOwnership (Clipboard clipboard, Transferable contents); \n \n } // interface ClipboardOwner\n "}, {"sha": "ea64facb1ba951b4bd2ee1b11c56ad9d13dbc677", "filename": "libjava/java/awt/datatransfer/FlavorMap.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FFlavorMap.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -58,7 +58,7 @@\n    *\n    * @return A <code>Map</code> of native data types.\n    */\n-  public abstract Map getNativesForFlavors (DataFlavor[] flavors);\n+  Map getNativesForFlavors (DataFlavor[] flavors);\n \n   /**\n    * Maps the specified native type names to <code>DataFlavor</code>'s.\n@@ -71,5 +71,5 @@\n    *\n    * @return A <code>Map</code> of data flavors.\n    */\n-  public abstract Map getFlavorsForNatives (String[] natives);\n+  Map getFlavorsForNatives (String[] natives);\n }"}, {"sha": "2b4993143061ada971bc81837fb9b0055eeee790", "filename": "libjava/java/awt/datatransfer/Transferable.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FTransferable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdatatransfer%2FTransferable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdatatransfer%2FTransferable.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -56,7 +56,7 @@\n    *\n    * @return adA list of data flavors for this data\n    */\n-  public abstract DataFlavor[] getTransferDataFlavors();\n+  DataFlavor[] getTransferDataFlavors();\n \n   /**\n    * Tests whether or not this data can be delivered in the specified data\n@@ -65,7 +65,7 @@\n    * @param flavor the data flavor to test\n    * @return true if the data flavor is supported\n    */\n-  public abstract boolean isDataFlavorSupported(DataFlavor flavor);\n+  boolean isDataFlavorSupported(DataFlavor flavor);\n \n   /**\n    * Returns the data in the specified <code>DataFlavor</code>.\n@@ -76,6 +76,8 @@\n    * @throws IOException if the data is not available\n    * @see DataFlavor#getRepresentationClass\n    */\n-  public abstract Object getTransferData(DataFlavor flavor)\n+  Object getTransferData(DataFlavor flavor)\n     throws UnsupportedFlavorException, IOException;\n+\n } // interface Transferable\n+"}, {"sha": "5c5233874cb66ef9e90f84acc68001ca6a21139b", "filename": "libjava/java/awt/dnd/Autoscroll.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2FAutoscroll.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -55,13 +55,15 @@\n    * This method returns the Insets describing the autoscrolling region or\n    * border relative to the geometry of the implementing Component\n    */\n-  public Insets getAutoscrollInsets ();\n+  Insets getAutoscrollInsets ();\n \n   /**\n    * Notify the Component to autoscroll\n    *\n    * @param location A Point indicating the location of the cursor that\n    * triggered this operation\n    */\n-  public void autoscroll (Point location);\n+  void autoscroll (Point location);\n+\n } // interface Autoscroll\n+"}, {"sha": "11c3d0c0975bb9739a6533dae81223192edc2b1b", "filename": "libjava/java/awt/dnd/peer/DragSourceContextPeer.java", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDragSourceContextPeer.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -49,9 +49,9 @@\n  */\n public interface DragSourceContextPeer\n {\n-  public void startDrag(DragSourceContext context, Cursor c, Image i, Point p)\n+  void startDrag(DragSourceContext context, Cursor c, Image i, Point p)\n     throws InvalidDnDOperationException;\n-  public Cursor getCursor();\n-  public void setCursor(Cursor c) throws InvalidDnDOperationException;\n-  public void transferablesFlavorsChanged();\n+  Cursor getCursor();\n+  void setCursor(Cursor c) throws InvalidDnDOperationException;\n+  void transferablesFlavorsChanged();\n } // interface DragSourceContextPeer"}, {"sha": "239a43778b8311d5a5512564bb988188f234ec4b", "filename": "libjava/java/awt/dnd/peer/DropTargetContextPeer.java", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetContextPeer.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -53,15 +53,15 @@\n  */\n public interface DropTargetContextPeer\n {\n-  public void setTargetActions(int actions);\n-  public int getTargetActions();\n-  public DropTarget getDropTarget();\n-  public DataFlavor[] getTransferDataFlavors();\n-  public Transferable getTransferable() throws InvalidDnDOperationException;\n-  public boolean isTransferableJVMLocal();\n-  public void acceptDrag(int dragAction);\n-  public void rejectDrag();\n-  public void acceptDrop(int dropAction);\n-  public void rejectDrop();\n-  public void dropComplete(boolean success);\n+  void setTargetActions(int actions);\n+  int getTargetActions();\n+  DropTarget getDropTarget();\n+  DataFlavor[] getTransferDataFlavors();\n+  Transferable getTransferable() throws InvalidDnDOperationException;\n+  boolean isTransferableJVMLocal();\n+  void acceptDrag(int dragAction);\n+  void rejectDrag();\n+  void acceptDrop(int dropAction);\n+  void rejectDrop();\n+  void dropComplete(boolean success);\n }"}, {"sha": "b6fd973219f849d231c0bdbf3530c616dbf7c32c", "filename": "libjava/java/awt/dnd/peer/DropTargetPeer.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fdnd%2Fpeer%2FDropTargetPeer.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -43,6 +43,6 @@\n  */\n public interface DropTargetPeer\n {\n-  public void addDropTarget (DropTarget target);\n-  public void removeDropTarget (DropTarget target);\n+  void addDropTarget (DropTarget target);\n+  void removeDropTarget (DropTarget target);\n } // interface DropTargetContextPeer"}, {"sha": "90d65f1190a0a211e14f9258276c8e1f2ba7ec28", "filename": "libjava/java/awt/font/MultipleMaster.java", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Ffont%2FMultipleMaster.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Ffont%2FMultipleMaster.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Ffont%2FMultipleMaster.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -45,17 +45,17 @@\n  */\n public interface MultipleMaster\n {\n-  public Font deriveMMFont (float[] axes);\n+  Font deriveMMFont (float[] axes);\n   \n-  public Font deriveMMFont (float[] glyphWidths, float avgStemWidth,\n-                            float typicalCapHeight, float typicalXHeight,\n-                            float italicAngle);\n+  Font deriveMMFont (float[] glyphWidths, float avgStemWidth,\n+                     float typicalCapHeight, float typicalXHeight,\n+                     float italicAngle);\n   \n-  public float[] getDesignAxisDefaults ();\n+  float[] getDesignAxisDefaults();\n   \n-  public String[] getDesignAxisNames ();\n+  String[] getDesignAxisNames();\n   \n-  public float[] getDesignAxisRanges ();\n+  float[] getDesignAxisRanges();\n   \n-  public int getNumDesignAxes ();\n+  int getNumDesignAxes();\n }"}, {"sha": "ec604e6de0114a8c1c7050658f53cefbef2bd44f", "filename": "libjava/java/awt/font/OpenType.java", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Ffont%2FOpenType.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Ffont%2FOpenType.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Ffont%2FOpenType.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -95,17 +95,17 @@\n   int TAG_VHEA = 1986553185;\n   int TAG_VMTX = 1986884728;\n   \n-  public byte[] getFontTable (int sfntTag);\n+  byte[] getFontTable (int sfntTag);\n   \n-  public byte[] getFontTable (int sfntTag, int offset, int count);\n+  byte[] getFontTable (int sfntTag, int offset, int count);\n   \n-  public byte[] getFontTable (String strSfntTag);\n+  byte[] getFontTable (String strSfntTag);\n   \n-  public byte[] getFontTable (String strSfntTag, int offset, int count);\n+  byte[] getFontTable (String strSfntTag, int offset, int count);\n   \n-  public int getFontTableSize (int sfntTag);\n+  int getFontTableSize (int sfntTag);\n   \n-  public int getFontTableSize (String strSfntTag);\n+  int getFontTableSize (String strSfntTag);\n   \n-  public int getVersion ();\n+  int getVersion ();\n }"}, {"sha": "9ba97744aefeab46b3ef05788b33bf9f890ab02b", "filename": "libjava/java/awt/im/spi/InputMethodDescriptor.java", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fim%2Fspi%2FInputMethodDescriptor.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -88,8 +88,8 @@\n    * @param displayLanguage the language of the result\n    * @return the name of the input method when using the given inputLocale\n    */\n-  public String getInputMethodDisplayName(Locale inputLocale,\n-                                          Locale displayLanguage);\n+  String getInputMethodDisplayName(Locale inputLocale,\n+                                   Locale displayLanguage);\n \n   /**\n    * Returns a 16x16 icon for the input locale. The inputLocale parameter\n@@ -99,13 +99,15 @@ public String getInputMethodDisplayName(Locale inputLocale,\n    * @param inputLocale the locale of the input method, or null\n    * @return a 16x16 icon for the input method when using the given inputLocale\n    */\n-  public Image getInputMethodIcon(Locale inputLocale);\n+  Image getInputMethodIcon(Locale inputLocale);\n \n   /**\n    * Creates a new instance of the input method.\n    *\n    * @return the newly created input method\n    * @throws Exception if anything goes wrong\n    */\n-  public InputMethod createInputMethod() throws Exception;\n+  InputMethod createInputMethod() throws Exception;\n+\n } // interface InputMethodDescriptor\n+"}, {"sha": "330f21f6bd2b89ae9bbac64b698a0f11ce654474", "filename": "libjava/java/awt/image/ImageConsumer.java", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageConsumer.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -54,21 +54,21 @@\n      *\n      * @see #setHints \n      */\n-    public static final int RANDOMPIXELORDER = 1;\n+    int RANDOMPIXELORDER = 1;\n \n     /**\n      * The pixel order is top-down, left-right.\n      *\n      * @see #setHints\n      */\n-    public static final int TOPDOWNLEFTRIGHT = 2;\n+    int TOPDOWNLEFTRIGHT = 2;\n \n     /**\n      * The pixel order is in multiples of complete scanlines.\n      *\n      * @see #setHints\n      */\n-    public static final int COMPLETESCANLINES = 4;\n+    int COMPLETESCANLINES = 4;\n \n     /**\n      * The pixels will be delivered in a single pass.  There is at\n@@ -77,7 +77,7 @@\n      * @see #setHints\n      * @see #setPixels \n      */\n-    public static final int SINGLEPASS = 8;\n+    int SINGLEPASS = 8;\n \n     /**\n      * The pixels will be delivered with multiple calls to\n@@ -91,35 +91,35 @@\n      * @see #setHints\n      * @see #imageComplete \n      */\n-    public static final int SINGLEFRAME = 16;\n+    int SINGLEFRAME = 16;\n \n     /**\n      * Indicates an error occurred while producing an image.\n      *\n      * @see #imageComplete\n      */\n-    public static final int IMAGEERROR = 1;\n+    int IMAGEERROR = 1;\n \n     /**\n      * A single frame is complete but more will follow.\n      * \n      * @see #imageComplete\n      */\n-    public static final int SINGLEFRAMEDONE = 2;\n+    int SINGLEFRAMEDONE = 2;\n \n     /**\n      * The image is complete and no more pixels or frames will follow.\n      *\n      * @see #imageComplete\n      */\n-    public static final int STATICIMAGEDONE = 3;\n+    int STATICIMAGEDONE = 3;\n \n     /**\n      * Production of the image has been aborted.\n      *\n      * @see #imageComplete\n      */\n-    public static final int IMAGEABORTED = 4;\n+    int IMAGEABORTED = 4;\n \n     /**\n      * An <code>ImageProducer</code> indicates the size of the image\n@@ -128,15 +128,15 @@\n      * @param width the width of the image\n      * @param height the height of the image \n      */\n-    public abstract void setDimensions(int width, int height);\n+    void setDimensions(int width, int height);\n \n     /**\n      * An <code>ImageProducer</code> can set a list of properties\n      * associated with this image by using this method.\n      *\n      * @param props the list of properties associated with this image \n      */\n-    public abstract void setProperties(Hashtable props);\n+    void setProperties(Hashtable props);\n \n     /**\n      * This <code>ColorModel</code> should indicate the model used by\n@@ -147,7 +147,7 @@\n      * @param model the color model to be used most often by setPixels\n      * @see ColorModel \n      */\n-    public abstract void setColorModel(ColorModel model);\n+    void setColorModel(ColorModel model);\n \n     /**\n      * The <code>ImageProducer</code> should call this method with a\n@@ -157,22 +157,22 @@\n      * \n      * @param flags a bit mask of hints\n      */\n-    public abstract void setHints(int flags);\n+    void setHints(int flags);\n \n     /**\n      * This function delivers a rectangle of pixels where any\n      * pixel(m,n) is stored in the array as a <code>byte</code> at\n      * index (n * scansize + m + offset).  \n      */\n-    public abstract void setPixels(int x, int y, int w, int h, \n+    void setPixels(int x, int y, int w, int h, \n \t   ColorModel model, byte[] pixels, int offset, int scansize);\n \n     /**\n      * This function delivers a rectangle of pixels where any\n      * pixel(m,n) is stored in the array as an <code>int</code> at\n      * index (n * scansize + m + offset).  \n      */\n-    public abstract void setPixels(int x, int y, int w, int h, \n+    void setPixels(int x, int y, int w, int h, \n            ColorModel model, int[] pixels, int offset, int scansize);\n \n     /**\n@@ -181,6 +181,6 @@ public abstract void setPixels(int x, int y, int w, int h,\n      * also used to indicate an error in loading or producing the\n      * image.  \n      */\n-    public abstract void imageComplete(int status);\n+    void imageComplete(int status);\n }\n "}, {"sha": "738e08a1f5367a2ab76ca5e281921b82729f4639", "filename": "libjava/java/awt/image/ImageObserver.java", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageObserver.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -56,60 +56,60 @@\n      *\n      * @see #imageUpdate \n      */\n-    public static final int WIDTH = 1;\n+    int WIDTH = 1;\n \n     /**\n      * The height of the image has been provided as the\n      * <code>height</code> argument to <code>imageUpdate</code>.\n      *\n      * @see #imageUpdate \n      */\n-    public static final int HEIGHT = 2;\n+    int HEIGHT = 2;\n \n     /**\n      * The properties of the image have been provided.\n      *\n      * @see #imageUpdate\n      * @see java.awt.Image#getProperty (java.lang.String, java.awt.image.ImageObserver)\n      */\n-    public static final int PROPERTIES = 4;\n+    int PROPERTIES = 4;\n \n     /**\n      * More pixels are now available for drawing a scaled variation of\n      * the image.\n      *\n      * @see #imageUpdate \n      */\n-    public static final int SOMEBITS = 8;\n+    int SOMEBITS = 8;\n \n     /**\n      * All the pixels needed to draw a complete frame of a multi-frame\n      * image are available.\n      *\n      * @see #imageUpdate \n      */\n-    public static final int FRAMEBITS = 16;\n+    int FRAMEBITS = 16;\n \n     /**\n      * An image with a single frame, a static image, is complete.\n      *\n      * @see #imageUpdate\n      */\n-    public static final int ALLBITS = 32;\n+    int ALLBITS = 32;\n \n     /**\n      * An error was encountered while producing the image.\n      *\n      * @see #imageUpdate\n      */\n-    public static final int ERROR = 64;\n+    int ERROR = 64;\n \n     /**\n      * Production of the image was aborted.\n      *\n      * @see #imageUpdate\n      */\n-    public static final int ABORT = 128;\n+    int ABORT = 128;\n \n     /**\n      * This is a callback method for an asynchronous image producer to\n@@ -124,6 +124,6 @@\n      * \n      * @see java.awt.Image \n      */\n-    public abstract boolean imageUpdate(Image image, int flags, int x, \n+    boolean imageUpdate(Image image, int flags, int x, \n \t\t\t\t\tint y, int width, int height);\n }"}, {"sha": "47530f1233624798c0be105ac613f413e0b252fd", "filename": "libjava/java/awt/image/ImageProducer.java", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FImageProducer.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -53,33 +53,33 @@\n      * Used to register an <code>ImageConsumer</code> with this\n      * <code>ImageProducer</code>.  \n      */\n-    public abstract void addConsumer(ImageConsumer ic);\n+    void addConsumer(ImageConsumer ic);\n \n     /**\n      * Used to determine if the given <code>ImageConsumer</code> is\n      * already registered with this <code>ImageProducer</code>.  \n      */\n-    public abstract boolean isConsumer(ImageConsumer ic);\n+    boolean isConsumer(ImageConsumer ic);\n \n     /**\n      * Used to remove an <code>ImageConsumer</code> from the list of\n      * registered consumers for this <code>ImageProducer</code>.  \n      */\n-    public abstract void removeConsumer(ImageConsumer ic);\n+    void removeConsumer(ImageConsumer ic);\n \n     /**\n      * Used to register an <code>ImageConsumer</code> with this\n      * <code>ImageProducer</code> and then immediately start\n      * reconstruction of the image data to be delivered to all\n      * registered consumers.  \n      */\n-    public abstract void startProduction(ImageConsumer ic);\n+    void startProduction(ImageConsumer ic);\n \n     /**\n      * Used to register an <code>ImageConsumer</code> with this\n      * <code>ImageProducer</code> and then request that this producer\n      * resend the image data in the order top-down, left-right.  \n      */\n-    public abstract void requestTopDownLeftRightResend(ImageConsumer ic);\n+    void requestTopDownLeftRightResend(ImageConsumer ic);\n }\n "}, {"sha": "b15fe25d0e70c883fae882d1b43c9c1b24604eba", "filename": "libjava/java/awt/image/RGBImageFilter.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FRGBImageFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FRGBImageFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FRGBImageFilter.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -149,7 +149,7 @@ public void filterRGBPixels(int x,\n \t\t\t\tint off,\n \t\t\t\tint scansize)\n     {\n-\tint xp, yp, i;\n+\tint xp, yp;\n \n \tfor( xp = x; xp < ( x + w); xp++ )\n \t    for( yp = y; yp < (y + h); yp++ )\n@@ -212,7 +212,7 @@ public void setPixels(int x, int y, int w, int h,\n     private void convertColorModelToDefault( int x, int y, int w, int h, \n \t    ColorModel model, int pixels[], int offset, int scansize)\n \t{\n-\tint xp, yp, i;\n+\tint xp, yp;\n \n \tfor( xp = x; xp < ( x + w); xp++ )\n \t    for( yp = y; yp < (y + h); yp++ )"}, {"sha": "57961808e2ecf158ccc416e8d10e7a31c33f217f", "filename": "libjava/java/awt/image/RasterOp.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FRasterOp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2FRasterOp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FRasterOp.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -50,6 +50,6 @@ public interface RasterOp {\n \n   Point2D getPoint2D(Point2D srcPoint, Point2D destPoint);\n \n-  public RenderingHints getRenderingHints();\n+  RenderingHints getRenderingHints();\n }\n "}, {"sha": "c953914c6ebd5885ecbc7076eb8a0eb32202699d", "filename": "libjava/java/awt/image/renderable/RenderableImage.java", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00f4a3fb56f284ca1d3c6745a124076978c83ee3/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2Frenderable%2FRenderableImage.java?ref=00f4a3fb56f284ca1d3c6745a124076978c83ee3", "patch": "@@ -44,7 +44,8 @@\n \n public interface RenderableImage\n {\n-  static final String HINTS_OBSERVED = \"HINTS_OBSERVED\";\n+  String HINTS_OBSERVED = \"HINTS_OBSERVED\";\n+  \n   Vector getSources();\n   Object getProperty(String name);\n   String[] getPropertyNames();\n@@ -56,4 +57,6 @@\n   RenderedImage createScaledRendering(int w, int h, RenderingHints hints);\n   RenderedImage createDefaultRendering();\n   RenderedImage createRendering(RenderContext context);\n+\n } // interface RenderableImage\n+"}]}