{"sha": "985873e5087843a7c3d38266d21456259ac55542", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg1ODczZTUwODc4NDNhN2MzZDM4MjY2ZDIxNDU2MjU5YWM1NTU0Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-02-12T21:52:24Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-02-12T21:52:24Z"}, "message": "Combine the two H8 mode shortening peepholes into a single peephole\n\n\t* config/h8300/h8300.md (comparison shortening peepholes): Use\n\ta mode iterator to merge the HImode and SImode peepholes.", "tree": {"sha": "ca2f8880b1c4e3b4347aba85d17b731a2f056aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca2f8880b1c4e3b4347aba85d17b731a2f056aa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/985873e5087843a7c3d38266d21456259ac55542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985873e5087843a7c3d38266d21456259ac55542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/985873e5087843a7c3d38266d21456259ac55542", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/985873e5087843a7c3d38266d21456259ac55542/comments", "author": null, "committer": null, "parents": [{"sha": "99bbab9f77424c6387e7dfcba5c62937a8cff841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bbab9f77424c6387e7dfcba5c62937a8cff841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99bbab9f77424c6387e7dfcba5c62937a8cff841"}], "stats": {"total": 46, "additions": 13, "deletions": 33}, "files": [{"sha": "fe42cee9e22ecde8491085ac4ffcfb798debcbbe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985873e5087843a7c3d38266d21456259ac55542/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985873e5087843a7c3d38266d21456259ac55542/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=985873e5087843a7c3d38266d21456259ac55542", "patch": "@@ -1,3 +1,8 @@\n+2020-02-12  Jeff Law  <law@redhat.com>\n+\n+\t* config/h8300/h8300.md (comparison shortening peepholes): Use\n+\ta mode iterator to merge the HImode and SImode peepholes.\n+\n 2020-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93663"}, {"sha": "f12eb46306f2dad1f19c828f9fd1b146b60a15d6", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/985873e5087843a7c3d38266d21456259ac55542/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/985873e5087843a7c3d38266d21456259ac55542/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=985873e5087843a7c3d38266d21456259ac55542", "patch": "@@ -5366,38 +5366,13 @@\n   {\n     operands[5] = GEN_INT (- INTVAL (operands[1]));\n   })\n-;; Narrow the mode of testing if possible.\n \n-(define_peephole2\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(and:HI (match_dup 0)\n-\t\t(match_operand:HI 1 \"const_int_qi_operand\" \"\")))\n-   (set (cc0) (compare (match_dup 0)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_operator 3 \"eqne_operator\"\n-\t\t       [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"peep2_reg_dead_p (2, operands[0])\"\n-  [(set (match_dup 4)\n-\t(and:QI (match_dup 4)\n-\t\t(match_dup 5)))\n-   (set (cc0) (compare (match_dup 4)\n-\t\t       (const_int 0)))\n-   (set (pc)\n-\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n-\t\t      (label_ref (match_dup 2))\n-\t\t      (pc)))]\n-  {\n-    operands[4] = gen_rtx_REG (QImode, REGNO (operands[0]));\n-    operands[5] = gen_int_mode (INTVAL (operands[1]), QImode);\n-  })\n+;; Narrow the mode of testing if possible.\n \n (define_peephole2\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(and:SI (match_dup 0)\n-\t\t(match_operand:SI 1 \"const_int_qi_operand\" \"\")))\n+  [(set (match_operand:HSI 0 \"register_operand\" \"\")\n+\t(and:HSI (match_dup 0)\n+\t\t (match_operand:HSI 1 \"const_int_qi_operand\" \"\")))\n    (set (cc0) (compare (match_dup 0)\n \t\t       (const_int 0)))\n    (set (pc)\n@@ -5406,11 +5381,10 @@\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"((const_int_qi_operand (operands[1], QImode)\n-     || const_int_hi_operand (operands[1], HImode))\n+     || (GET_MODE (operands[0]) == SImode\n+\t && const_int_hi_operand (operands[1], HImode)))\n     && peep2_reg_dead_p (2, operands[0]))\"\n-  [(set (match_dup 4)\n-\t(and:QI (match_dup 4)\n-\t\t(match_dup 5)))\n+  [(set (match_dup 4) (match_dup 6))\n    (set (cc0) (compare (match_dup 4)\n \t\t       (const_int 0)))\n    (set (pc)\n@@ -5423,6 +5397,7 @@\n     mode = const_int_qi_operand (operands[1], QImode) ? QImode : HImode;\n     operands[4] = gen_rtx_REG (mode, REGNO (operands[0]));\n     operands[5] = gen_int_mode (INTVAL (operands[1]), mode);\n+    operands[6] = gen_rtx_AND (mode, operands[4], operands[5]);\n   })\n \n ;; These triggers right at the end of allocation of locals in the"}]}