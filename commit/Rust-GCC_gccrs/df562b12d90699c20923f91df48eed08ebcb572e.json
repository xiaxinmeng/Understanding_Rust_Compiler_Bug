{"sha": "df562b12d90699c20923f91df48eed08ebcb572e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY1NjJiMTJkOTA2OTljMjA5MjNmOTFkZjQ4ZWVkMDhlYmNiNTcyZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-02T10:57:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-02T10:57:11Z"}, "message": "aarch64: Fix ICE due to aarch64_gen_compare_reg_maybe_ze [PR94435]\n\nThe following testcase ICEs, because aarch64_gen_compare_reg_maybe_ze emits\ninvalid RTL.\nFor y_mode [QH]Imode it expects y to be of that mode (or CONST_INT that fits\ninto that mode) and x being SImode; for non-CONST_INT y it zero extends y\ninto SImode and compares that against x, for CONST_INT y it zero extends y\ninto SImode.  The problem is that when the zero extended constant isn't\nusable directly, it forces it into a REG, but with y_mode mode, and then\ncompares against y.  That is wrong, because it should force it into a SImode\nREG and compare that way.\n\n2020-04-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94435\n\t* config/aarch64/aarch64.c (aarch64_gen_compare_reg_maybe_ze): For\n\ty_mode E_[QH]Imode and y being a CONST_INT, change y_mode to SImode.\n\n\t* gcc.target/aarch64/pr94435.c: New test.", "tree": {"sha": "7c0675c7f0d3bdbe237ca58bf2d53ad52bba9a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0675c7f0d3bdbe237ca58bf2d53ad52bba9a78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df562b12d90699c20923f91df48eed08ebcb572e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df562b12d90699c20923f91df48eed08ebcb572e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df562b12d90699c20923f91df48eed08ebcb572e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df562b12d90699c20923f91df48eed08ebcb572e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66e327517b10a19690a470c8dccfa363ba061022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66e327517b10a19690a470c8dccfa363ba061022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66e327517b10a19690a470c8dccfa363ba061022"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "25eccc755b3660dd451f3280300826cb79e95239", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df562b12d90699c20923f91df48eed08ebcb572e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df562b12d90699c20923f91df48eed08ebcb572e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=df562b12d90699c20923f91df48eed08ebcb572e", "patch": "@@ -2371,7 +2371,10 @@ aarch64_gen_compare_reg_maybe_ze (RTX_CODE code, rtx x, rtx y,\n   if (y_mode == E_QImode || y_mode == E_HImode)\n     {\n       if (CONST_INT_P (y))\n-\ty = GEN_INT (INTVAL (y) & GET_MODE_MASK (y_mode));\n+\t{\n+\t  y = GEN_INT (INTVAL (y) & GET_MODE_MASK (y_mode));\n+\t  y_mode = SImode;\n+\t}\n       else\n \t{\n \t  rtx t, cc_reg;"}, {"sha": "5713c14d5f90b1d42f92d040e9030ecc03c97d51", "filename": "gcc/testsuite/gcc.target/aarch64/pr94435.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df562b12d90699c20923f91df48eed08ebcb572e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94435.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df562b12d90699c20923f91df48eed08ebcb572e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94435.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr94435.c?ref=df562b12d90699c20923f91df48eed08ebcb572e", "patch": "@@ -0,0 +1,25 @@\n+/* PR target/94435 */\n+/* { dg-do compile } */\n+/* { dg-options \"-march=armv8-a+nolse -moutline-atomics\" } */\n+\n+int b, c, d, e, f, h;\n+short g;\n+int foo (int) __attribute__ ((__const__));\n+\n+void\n+bar (void)\n+{\n+  while (1)\n+    {\n+      while (1)\n+\t{\n+\t  __atomic_load_n (&e, 0);\n+\t  if (foo (2))\n+\t    __sync_val_compare_and_swap (&c, 0, f);\n+\t  b = 1;\n+\t  if (h == e)\n+\t    break;\n+\t}\n+      __sync_val_compare_and_swap (&g, -1, f);\n+    }\n+}"}]}