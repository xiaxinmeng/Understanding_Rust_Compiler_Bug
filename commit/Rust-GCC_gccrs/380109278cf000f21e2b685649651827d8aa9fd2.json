{"sha": "380109278cf000f21e2b685649651827d8aa9fd2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgwMTA5Mjc4Y2YwMDBmMjFlMmI2ODU2NDk2NTE4MjdkOGFhOWZkMg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@one.net.au", "date": "2001-04-13T05:06:32Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2001-04-13T05:06:32Z"}, "message": "pa-64.h (WCHAR_TYPE, [...]): Define.\n\n\t* pa-64.h (WCHAR_TYPE, WCHAR_TYPE_SIZE): Define.\n\t(ASM_OUTPUT_DOUBLE_INT): Format, protect macro with do..while.\n\t(LINK_SPEC, LIB_SPEC, MD_EXEC_PREFIX, MD_STARTFILE_PREFIX,\n\tNEW_HP_ASSEMBLER, ASM_FILE_START, OBJECT_FORMAT_ELF,\n\tDWARF2_DEBUGGING_INFO, PREFERRED_DEBUGGING_FORMAT,\n\tDWARF2_ASM_LINE_DEBUG_INFO, USE_CONST_SECTION, CONST_SECTION_ASM_OP,\n\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, INIT_SECTION_ASM_OP,\n\tFINI_SECTION_ASM_OP, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS,\n\tREADONLY_DATA_SECTION, CONST_SECTION_FUNCTION, CTORS_SECTION_FUNCTION,\n\tDTORS_SECTION_FUNCTION, ASM_OUTPUT_SECTION_NAME, MAKE_DECL_ONE_ONLY,\n\tUNIQUE_SECTION_P, UNIQUE_SECTION, INT_ASM_OP, ASM_OUTPUT_CONSTRUCTOR,\n\tASM_OUTPUT_DESTRUCTOR, TYPE_ASM_OP, SIZE_ASM_OP, ASM_WEAKEN_LABEL,\n\tTYPE_OPERAND_FMT, ASM_DECLARE_RESULT): Move to..\n\t* pa64-hpux.h: New file.\n\t(ASM_FILE_START): Correct typo.\n\t(PREFERRED_DEBUGGING_FORMAT): Rename to PREFERRED_DEBUGGING_TYPE.\n\t* config.gcc: Modify for above.\n\nFrom-SVN: r41321", "tree": {"sha": "31e16735cd1dadcb8d6b5acfb7cadf536f09d3e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31e16735cd1dadcb8d6b5acfb7cadf536f09d3e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/380109278cf000f21e2b685649651827d8aa9fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380109278cf000f21e2b685649651827d8aa9fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/380109278cf000f21e2b685649651827d8aa9fd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/380109278cf000f21e2b685649651827d8aa9fd2/comments", "author": null, "committer": null, "parents": [{"sha": "35bb0780fcaf96e18159da57c2d77393d1aeb7eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bb0780fcaf96e18159da57c2d77393d1aeb7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bb0780fcaf96e18159da57c2d77393d1aeb7eb"}], "stats": {"total": 373, "additions": 42, "deletions": 331}, "files": [{"sha": "8b9de17631b29b45e77d469cab90d489127e7d1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=380109278cf000f21e2b685649651827d8aa9fd2", "patch": "@@ -1,3 +1,23 @@\n+2001-04-13  Alan Modra  <amodra@one.net.au>\n+\n+\t* pa-64.h (WCHAR_TYPE, WCHAR_TYPE_SIZE): Define.\n+\t(ASM_OUTPUT_DOUBLE_INT): Format, protect macro with do..while.\n+\t(LINK_SPEC, LIB_SPEC, MD_EXEC_PREFIX, MD_STARTFILE_PREFIX,\n+\tNEW_HP_ASSEMBLER, ASM_FILE_START, OBJECT_FORMAT_ELF,\n+\tDWARF2_DEBUGGING_INFO, PREFERRED_DEBUGGING_FORMAT,\n+\tDWARF2_ASM_LINE_DEBUG_INFO, USE_CONST_SECTION, CONST_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, INIT_SECTION_ASM_OP,\n+\tFINI_SECTION_ASM_OP, EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS,\n+\tREADONLY_DATA_SECTION, CONST_SECTION_FUNCTION, CTORS_SECTION_FUNCTION,\n+\tDTORS_SECTION_FUNCTION, ASM_OUTPUT_SECTION_NAME, MAKE_DECL_ONE_ONLY,\n+\tUNIQUE_SECTION_P, UNIQUE_SECTION, INT_ASM_OP, ASM_OUTPUT_CONSTRUCTOR,\n+\tASM_OUTPUT_DESTRUCTOR, TYPE_ASM_OP, SIZE_ASM_OP, ASM_WEAKEN_LABEL,\n+\tTYPE_OPERAND_FMT, ASM_DECLARE_RESULT): Move to..\n+\t* pa64-hpux.h: New file.\n+\t(ASM_FILE_START): Correct typo.\n+\t(PREFERRED_DEBUGGING_FORMAT): Rename to PREFERRED_DEBUGGING_TYPE.\n+\t* config.gcc: Modify for above.\n+\n Fri Apr 13 00:09:22 EDT 2001  John Wehle  (john@feith.com)\n \n \t* jump.c (jump_optimize_1): Don't delete dead stores here."}, {"sha": "c70dba3bf91d6a4a172dbccf93d2a9787d0c3eac", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=380109278cf000f21e2b685649651827d8aa9fd2", "patch": "@@ -798,7 +798,7 @@ hppa*64*-*-hpux11*)\n \txm_defines=USG\n \txmake_file=pa/x-pa-hpux\n \ttmake_file=pa/t-pa\n-\ttm_file=\"pa/pa64-start.h ${tm_file} pa/pa64-regs.h pa/long_double.h pa/elf.h pa/pa-hpux.h pa/pa-hpux11.h pa/pa-64.h\"\n+\ttm_file=\"pa/pa64-start.h ${tm_file} pa/pa64-regs.h pa/long_double.h pa/elf.h pa/pa-hpux.h pa/pa-hpux11.h pa/pa-64.h pa/pa64-hpux.h\"\n \tfloat_format=i128\n \ttmake_file=pa/t-pa64\n \ttarget_cpu_default=\"(MASK_PA_11|MASK_PA_20|MASK_GAS)\""}, {"sha": "e09447237aff0e87efc0fa0073ab68b8c012784a", "filename": "gcc/config/pa/pa-64.h", "status": "modified", "additions": 21, "deletions": 330, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2Fconfig%2Fpa%2Fpa-64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/380109278cf000f21e2b685649651827d8aa9fd2/gcc%2Fconfig%2Fpa%2Fpa-64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-64.h?ref=380109278cf000f21e2b685649651827d8aa9fd2", "patch": "@@ -19,43 +19,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-/* We can debug dynamically linked executables on hpux11; we also\n-   want dereferencing of a NULL pointer to cause a SEGV.  */\n-#undef LINK_SPEC\n-#define LINK_SPEC \\\n-  \"-E %{mlinker-opt:-O} %{!shared:-u main} %{static:-a archive} %{shared:-shared}\"\n-\n-/* Like the default, except no -lg.  */\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{!shared:\\\n-     %{!p:\\\n-       %{!pg:\\\n-         %{!threads:-lc}\\\n-         %{threads:-lcma -lc_r}}\\\n-       %{p: -L/lib/libp/ -lc}\\\n-       %{pg: -L/lib/libp/ -lc}}} /usr/lib/pa20_64/milli.a\"\n-\n-/* Under hpux11, the normal location of the `ld' and `as' programs is the\n-   /usr/ccs/bin directory.  */\n-\n-#ifndef CROSS_COMPILE\n-#undef MD_EXEC_PREFIX\n-#define MD_EXEC_PREFIX \"/opt/langtools/bin\"\n-#endif\n-\n-/* Under hpux11 the normal location of the various *crt*.o files is the\n-   /usr/ccs/lib directory.  */\n-\n-#ifndef CROSS_COMPILE\n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX \"/opt/langtools/lib/pa20_64/\"\n-#endif\n-\n-/* hpux11 has the new HP assembler.  It's still lousy, but it's a whole lot\n-   better than the assembler shipped with older versions of hpux.  */\n-#define NEW_HP_ASSEMBLER\n-\n /* The default sizes for basic datatypes provided by GCC are not\n    correct for the PA64 runtime architecture.\n \n@@ -76,11 +39,17 @@ Boston, MA 02111-1307, USA.  */\n      \n   Make GCC agree with types.h.  */\n #undef SIZE_TYPE\n-#undef PTRDIFF_TYPE\n-\n #define SIZE_TYPE \"long unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n \n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"unsigned int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n /* If it is not listed here, then the default selected by GCC is OK.  */\n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE 32\n@@ -95,23 +64,6 @@ Boston, MA 02111-1307, USA.  */\n #define LONG_DOUBLE_TYPE_SIZE 64\n #define MAX_WCHAR_TYPE_SIZE 32\n \n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE) \\\n-do {  \\\n-     if (TARGET_64BIT) \\\n-       fputs(\"\\t.LEVEL 2.0w\\n\", FILE); \\\n-     else if (TARGET_PA_11) \\\n-       fputs(\"\\t.LEVEL 2.0\\n\", FILE); \\\n-     else if (TARGET_PA_11) \\\n-       fputs(\"\\t.LEVEL 1.1\\n\", FILE); \\\n-     else \\\n-       fputs(\"\\t.LEVEL 1.0\\n\", FILE); \\\n-     if (profile_flag)\\\n-       fprintf (FILE, \"\\t.IMPORT _mcount, CODE\\n\");\\\n-     if (write_symbols != NO_DEBUG) \\\n-       output_file_directive ((FILE), main_input_filename); \\\n-   } while (0)\n-\n /* Temporary until we figure out what to do with those *(&@$ 32bit\n    relocs which appear in stabs.  */\n #undef DBX_DEBUGGING_INFO\n@@ -135,280 +87,19 @@ do {  \\\n /* This is not needed for correct operation in 32bit mode, and since\n    older versions of gas and the hpux assembler do not accept .dword\n    we put this here instead of the more logical location, pa.h.  */\n-#define ASM_OUTPUT_DOUBLE_INT(FILE,VALUE)  \\\n-{ fputs (\"\\t.dword \", FILE);                    \\\n-  if (function_label_operand (VALUE, VOIDmode)) \\\n-    fputs (\"P%\", FILE);                         \\\n-  output_addr_const (FILE, (VALUE));            \\\n-  fputs (\"\\n\", FILE);}\n-\n-/* It looks like DWARF2 will be the easiest debug format to handle on this\n-   platform.  */\n-#define OBJECT_FORMAT_ELF\n-#define DWARF2_DEBUGGING_INFO\n-#define PREFERRED_DEBUGGING_FORMAT DWARF2_DEBUG\n-/* This isn't quite ready yet.  I'm seeing it mess up some line\n-   tables.  For example, we're getting lines starting/ending at\n-   impossible addresses.  */\n-#define DWARF2_ASM_LINE_DEBUG_INFO 1\n-\n-\n-/* Nonzero if we do not know how to pass TYPE solely in registers. */\n-#define MUST_PASS_IN_STACK(MODE,TYPE)                   \\\n-  ((TYPE) != 0                                          \\\n-   && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST      \\\n-       || TREE_ADDRESSABLE (TYPE)))\n-\n-/* The rest of this file is copied from the generic svr4.h.  One day we\n-   would like to simply include svr4.h instead of copying all these\n-   definitions.  */\n-\n-/* Support const sections and the ctors and dtors sections for g++.\n-   Note that there appears to be two different ways to support const\n-   sections at the moment.  You can either #define the symbol\n-   READONLY_DATA_SECTION (giving it some code which switches to the\n-   readonly data section) or else you can #define the symbols\n-   EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS, SELECT_SECTION, and\n-   SELECT_RTX_SECTION.  We do both here just to be on the safe side.  */\n-\n-#define USE_CONST_SECTION\t1\n-\n-#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n-\n-/* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n-\n-   Note that we want to give these sections the SHF_WRITE attribute\n-   because these sections will actually contain data (i.e. tables of\n-   addresses of functions in the current root executable or shared library\n-   file) and, in the case of a shared library, the relocatable addresses\n-   will have to be properly resolved/relocated (and then written into) by\n-   the dynamic linker when it actually attaches the given shared library\n-   to the executing process.  (Note that on SVR4, you may wish to use the\n-   `-z text' option to the ELF linker, when building a shared library, as\n-   an additional check that you are doing everything right.  But if you do\n-   use the `-z text' option when building a shared library, you will get\n-   errors unless the .ctors and .dtors sections are marked as writable\n-   via the SHF_WRITE attribute.)  */\n-\n-#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n-\n-/* On svr4, we *do* have support for the .init and .fini sections, and we\n-   can put stuff in there to be executed before and after `main'.  We let\n-   crtstuff.c and other files know this by defining the following symbols.\n-   The definitions say how to change sections to the .init and .fini\n-   sections.  This is the same for all known svr4 assemblers.  */\n-\n-/* ??? For the time being, we aren't using init sections. */\n-#if 0\n-#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n-#endif\n-\n-/* A default list of other sections which we might be \"in\" at any given\n-   time.  For targets that use additional sections (e.g. .tdesc) you\n-   should override this definition in the target-specific file which\n-   includes this file.  */\n-\n-#undef EXTRA_SECTIONS\n-#define EXTRA_SECTIONS in_const, in_ctors, in_dtors\n-\n-/* A default list of extra section function definitions.  For targets\n-   that use additional sections (e.g. .tdesc) you should override this\n-   definition in the target-specific file which includes this file.  */\n-\n-#undef EXTRA_SECTION_FUNCTIONS\n-#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n-  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-  DTORS_SECTION_FUNCTION\n-\n-#define READONLY_DATA_SECTION() const_section ()\n-\n-#define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-const_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (!USE_CONST_SECTION)\t\t\t\t\t\t\\\n-    text_section();\t\t\t\t\t\t\t\\\n-  else if (in_section != in_const)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CONST_SECTION_ASM_OP);\t\t\\\n-      in_section = in_const;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-ctors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_ctors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_ctors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-dtors_section ()\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (in_section != in_dtors)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n-      in_section = in_dtors;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\n-\n-/* Switch into a generic section.\n- \n-   We make the section read-only and executable for a function decl,\n-   read-only for a const data decl, and writable for a non-const data decl.\n- \n-   If the section has already been defined, we must not\n-   emit the attributes here. The SVR4 assembler does not\n-   recognize section redefinitions.\n-   If DECL is NULL, no attributes are emitted.  */\n-\n-#define ASM_OUTPUT_SECTION_NAME(FILE, DECL, NAME, RELOC)\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      static htab_t htab;                                               \\\n-                                                                        \\\n-      struct section_info                                               \\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tenum sect_enum {SECT_RW, SECT_RO, SECT_EXEC} type;\t\t\\\n-      };                                                                \\\n-                                                                        \\\n-      struct section_info *s;\t\t\t\t\t\t\\\n-      const char *mode;\t\t\t\t\t\t\t\\\n-      enum sect_enum type;                                              \\\n-      PTR* slot;                                                        \\\n-                                                                        \\\n-      /* The names we put in the hashtable will always be the unique    \\\n-\t versions gived to us by the stringtable, so we can just use    \\\n-\t their addresses as the keys.  */                               \\\n-      if (!htab)                                                        \\\n-\thtab = htab_create (31,                                         \\\n-\t\t\t    htab_hash_pointer,                          \\\n-\t\t\t    htab_eq_pointer,                            \\\n-\t\t\t    NULL);                                      \\\n-                                                                        \\\n-      if (DECL && TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\ttype = SECT_EXEC, mode = \"ax\";\t\t\t\t\t\\\n-      else if (DECL && DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\ttype = SECT_RO, mode = \"a\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\ttype = SECT_RW, mode = \"aw\";\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\t\\\n-                                                                        \\\n-      /* See if we already have an entry for this section.  */          \\\n-      slot = htab_find_slot (htab, NAME, INSERT);                       \\\n-      if (!*slot)                                                       \\\n-\t{                                                               \\\n-\t  s = (struct section_info *) xmalloc (sizeof (* s));\t\t\\\n-\t  s->type = type;\t\t\t\t\t\t\\\n-\t  *slot = s;\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s,\\\"%s\\\",@progbits\\n\",\t\t\\\n-\t\t   NAME, mode);\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  s = (struct section_info *) *slot;                            \\\n-\t  if (DECL && s->type != type)\t\t\t\t\t\\\n-\t    error_with_decl (DECL,                                      \\\n-\t\t\t     \"%s causes a section type conflict\");      \\\n-\t  \t\t\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\t.section\\t%s\\n\", NAME);\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define MAKE_DECL_ONE_ONLY(DECL) (DECL_WEAK (DECL) = 1)\n-#define UNIQUE_SECTION_P(DECL) (DECL_ONE_ONLY (DECL))\n-#define UNIQUE_SECTION(DECL,RELOC)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  int len;\t\t\t\t\t\t\t\\\n-  char *name, *string, *prefix;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (DECL));\t\\\n-\t\t\t\t\t\t\t\t\\\n-  if (! DECL_ONE_ONLY (DECL))\t\t\t\t\t\\\n+#define ASM_OUTPUT_DOUBLE_INT(FILE,VALUE) \\\n+  do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n-      prefix = \".\";                                             \\\n-      if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\tprefix = \".text.\";\t\t\t\t\t\\\n-      else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\\\n-\tprefix = \".rodata.\";\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\\\n-\tprefix = \".data.\";\t\t\t\t\t\\\n+      fputs (\"\\t.dword \", FILE);\t\t\t\t\\\n+      if (function_label_operand (VALUE, VOIDmode))\t\t\\\n+\tfputs (\"P%\", FILE);\t\t\t\t\t\\\n+      output_addr_const (FILE, (VALUE));\t\t\t\\\n+      fputs (\"\\n\", FILE);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-    prefix = \".gnu.linkonce.t.\";\t\t\t\t\\\n-  else if (DECL_READONLY_SECTION (DECL, RELOC))\t\t\t\\\n-    prefix = \".gnu.linkonce.r.\";\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    prefix = \".gnu.linkonce.d.\";\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  len = strlen (name) + strlen (prefix);\t\t\t\\\n-  string = alloca (len + 1);\t\t\t\t\t\\\n-  sprintf (string, \"%s%s\", prefix, name);\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-  DECL_SECTION_NAME (DECL) = build_string (len, string);\t\\\n-} while (0)\n-\n-#define INT_ASM_OP \"\\t.dword\\t\"\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global constructors.  */\n-#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    ctors_section ();\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%sP%%\", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* A C statement (sans semicolon) to output an element in the table of\n-   global destructors.  */\n-#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    dtors_section ();                   \t\t\t\t\\\n-    fprintf (FILE, \"%sP%%\", INT_ASM_OP);\t\t\t\t\\\n-    assemble_name (FILE, NAME);              \t\t\t\t\\\n-    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-  } while (0)\n-\n-/* ??? For the time being, we aren't using .ctors/.dtors sections. */\n-#undef ASM_OUTPUT_DESTRUCTOR\n-#undef ASM_OUTPUT_CONSTRUCTOR\n-\n-/* Define the strings used for the special svr4 .type and .size directives.\n-   These strings generally do not vary from one system running svr4 to\n-   another, but if a given system (e.g. m88k running svr) needs to use\n-   different pseudo-op names for these, they may be overridden in the\n-   file which includes this one.  */\n-\n-#define TYPE_ASM_OP\t\"\\t.type\\t\"\n-#define SIZE_ASM_OP\t\"\\t.size\\t\"\n-\n-/* This is how we tell the assembler that a symbol is weak.  */\n-\n-#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n-  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n-       fputc ('\\n', FILE); } while (0)\n-\n-/* The following macro defines the format used to output the second\n-   operand of the .type assembler directive.  Different svr4 assemblers\n-   expect various different forms for this operand.  The one given here\n-   is just a default.  You may need to override it in your machine-\n-   specific tm.h file (depending upon the particulars of your assembler).  */\n-\n-#define TYPE_OPERAND_FMT\t\"@%s\"\n-\n-/* Write the extra assembler code needed to declare a function's result.\n-   Most svr4 assemblers don't require any special declaration of the\n-   result value, but there are exceptions.  */\n+  while (0)\n \n-#ifndef ASM_DECLARE_RESULT\n-#define ASM_DECLARE_RESULT(FILE, RESULT)\n-#endif\n+/* Nonzero if we do not know how to pass TYPE solely in registers. */\n+#define MUST_PASS_IN_STACK(MODE,TYPE) \\\n+  ((TYPE) != 0\t\t\t\t\t\t\t\\\n+   && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\t\\\n+       || TREE_ADDRESSABLE (TYPE)))"}]}