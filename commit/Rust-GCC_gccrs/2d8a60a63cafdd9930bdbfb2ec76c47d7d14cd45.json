{"sha": "2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ4YTYwYTYzY2FmZGQ5OTMwYmRiZmIyZWM3NmM0N2Q3ZDE0Y2Q0NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-05T14:13:46Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-05T14:13:46Z"}, "message": "optgen: make more sanity checks for enums.\n\n\t* opt-functions.awk (opt_args_non_empty): New function.\n\t* opt-read.awk: Use the function for various option arguments.", "tree": {"sha": "97f2d4fee31df31fd402980aca805bdab64a21e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97f2d4fee31df31fd402980aca805bdab64a21e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl6xdJoACgkQTcGC3A+n\nN4WcuAf+O+Vf0ZAMMWK7jxtuoGBXCUhgMwIYckrw3RYQX03CbfYdoaJdh0+MfDeO\nnD5KsVnll1k4gZQZaE+iTyreVMDRkXBs3Mt+QrY8iH6kqRkoKQy0bTik4YpVlshD\n74zB2+ImWga+H2iINhiVQ4OOT+ZVycJHyREgUfyEtBnO5qhTNfP1j3Q4wnp9gy5g\nU22z5FtsCDu0CraEi6bGDdXsGUitUXHa2Wl5aWFVuUoYoXY8W1JhSnG0jsQANODD\nyigcOmU4WeR60VgBV/L63mCf5aiVyI7Ie3sJqTP8dxZeNPlWuVWM1eqmeCklnf4l\nUTeYw6m9bOqDzc6aGBixiPy8MH2Fxg==\n=7RWz\n-----END PGP SIGNATURE-----", "payload": "tree 97f2d4fee31df31fd402980aca805bdab64a21e6\nparent 0f62caf58b5d11f375f789385d6d49891ebd9a94\nauthor Martin Liska <mliska@suse.cz> 1588688026 +0200\ncommitter Martin Liska <mliska@suse.cz> 1588688026 +0200\n\noptgen: make more sanity checks for enums.\n\n\t* opt-functions.awk (opt_args_non_empty): New function.\n\t* opt-read.awk: Use the function for various option arguments.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f62caf58b5d11f375f789385d6d49891ebd9a94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f62caf58b5d11f375f789385d6d49891ebd9a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f62caf58b5d11f375f789385d6d49891ebd9a94"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "5f18676d4cd8510b6f0385e867ed309bbb182bef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "patch": "@@ -1,3 +1,8 @@\n+2020-05-05  Martin Liska  <mliska@suse.cz>\n+\n+\t* opt-functions.awk (opt_args_non_empty): New function.\n+\t* opt-read.awk: Use the function for various option arguments.\n+\n 2020-05-05  Martin Liska  <mliska@suse.cz>\n \n \tPR driver/94330"}, {"sha": "b4952b893159f63a4eb0a24a92266db4b1dd8633", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "patch": "@@ -72,6 +72,16 @@ function opt_args(name, flags)\n \treturn flags\n }\n \n+# If FLAGS contains a \"NAME(...argument...)\" flag, return the value\n+# of the argument.  Print error message otherwise.\n+function opt_args_non_empty(name, flags, description)\n+{\n+\targs = opt_args(name, flags)\n+\tif (args == \"\")\n+\t\tprint \"#error Empty option argument '\" name \"' during parsing of: \" flags\n+\treturn args\n+}\n+\n # Return the Nth comma-separated element of S.  Return the empty string\n # if S does not contain N elements.\n function nth_arg(n, s)"}, {"sha": "9bb9dfcf6caa7caeb68d513d0debf84e7c162d91", "filename": "gcc/opt-read.awk", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2Fopt-read.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45/gcc%2Fopt-read.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-read.awk?ref=2d8a60a63cafdd9930bdbfb2ec76c47d7d14cd45", "patch": "@@ -81,8 +81,8 @@ BEGIN {\n \t\t}\n \t\telse if ($1 == \"Enum\") {\n \t\t\tprops = $2\n-\t\t\tname = opt_args(\"Name\", props)\n-\t\t\ttype = opt_args(\"Type\", props)\n+\t\t\tname = opt_args_non_empty(\"Name\", props)\n+\t\t\ttype = opt_args_non_empty(\"Type\", props)\n \t\t\tunknown_error = opt_args(\"UnknownError\", props)\n \t\t\tenum_names[n_enums] = name\n \t\t\tenum_type[name] = type\n@@ -93,9 +93,9 @@ BEGIN {\n \t\t}\n \t\telse if ($1 == \"EnumValue\")  {\n \t\t\tprops = $2\n-\t\t\tenum_name = opt_args(\"Enum\", props)\n-\t\t\tstring = opt_args(\"String\", props)\n-\t\t\tvalue = opt_args(\"Value\", props)\n+\t\t\tenum_name = opt_args_non_empty(\"Enum\", props)\n+\t\t\tstring = opt_args_non_empty(\"String\", props)\n+\t\t\tvalue = opt_args_non_empty(\"Value\", props)\n \t\t\tval_flags = \"0\"\n \t\t\tval_flags = val_flags \\\n \t\t\t  test_flag(\"Canonical\", props, \"| CL_ENUM_CANONICAL\") \\"}]}