{"sha": "3f36bac24bce8dff4633e0238c94487f8d3d82ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzNmJhYzI0YmNlOGRmZjQ2MzNlMDIzOGM5NDQ4N2Y4ZDNkODJhZQ==", "commit": {"author": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-09T05:32:21Z"}, "committer": {"name": "Adam Nemet", "email": "nemet@gcc.gnu.org", "date": "2009-07-09T05:32:21Z"}, "message": "combine.c (make_extraction): Check TRULY_NOOP_TRUNCATION before creating LHS paradoxical subregs.\n\n\t* combine.c (make_extraction): Check TRULY_NOOP_TRUNCATION before\n\tcreating LHS paradoxical subregs.  Fix surrounding returns to\n\tuse NULL_RTX rather than 0.\n\nFrom-SVN: r149401", "tree": {"sha": "fa860a534f9dd2bcd83ddd57eb70f6554a21c2e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa860a534f9dd2bcd83ddd57eb70f6554a21c2e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f36bac24bce8dff4633e0238c94487f8d3d82ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f36bac24bce8dff4633e0238c94487f8d3d82ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f36bac24bce8dff4633e0238c94487f8d3d82ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f36bac24bce8dff4633e0238c94487f8d3d82ae/comments", "author": null, "committer": null, "parents": [{"sha": "ae30c1fa3d408d80ddae53efa00586ed45277120", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae30c1fa3d408d80ddae53efa00586ed45277120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae30c1fa3d408d80ddae53efa00586ed45277120"}], "stats": {"total": 41, "additions": 27, "deletions": 14}, "files": [{"sha": "4007a660c21a3c8c2ea5d038b372f17a94b111ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f36bac24bce8dff4633e0238c94487f8d3d82ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f36bac24bce8dff4633e0238c94487f8d3d82ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f36bac24bce8dff4633e0238c94487f8d3d82ae", "patch": "@@ -1,3 +1,9 @@\n+2009-07-08  Adam Nemet  <anemet@caviumnetworks.com>\n+\n+\t* combine.c (make_extraction): Check TRULY_NOOP_TRUNCATION before\n+\tcreating LHS paradoxical subregs.  Fix surrounding returns to\n+\tuse NULL_RTX rather than 0.\n+\n 2009-07-08  DJ Delorie  <dj@redhat.com>\n \n \t* config/mep/mep.c: (mep_option_can_inline_p): New.\n@@ -36,9 +42,9 @@\n \t* optabs.h (optab_libfunc): Ditto.\n \t* tree.h (tree_expr_nonzero_warnv_p): Ditto.\n \t* tree-flow.h (vect_can_force_dr_alignment_p,\n-\tget_vectype_for_scalar_type): Ditto.\t\n+\tget_vectype_for_scalar_type): Ditto.\n \t(vectorize_loops): Move prototype to ...\n-\t* tree-vectorizer.h: ... here. Also, adjust comment. \n+\t* tree-vectorizer.h: ... here. Also, adjust comment.\n \t(vect_set_verbosity_level): Remove duplicate prototype.\n \t* tree-ssa-loop.c: Include tree-vectorizer.h.\n \t* Makefile.in (tree-ssa-loop.o): Depend on tree-vectorizer.h.\n@@ -57,7 +63,7 @@\n \t* config/mep/intrinsics.md: Regenerated.\n \t* config/mep/mep.c (mep_interrupt_saved_reg): Save IVC2 control\n \tregisters when asm() or calls are detected.\n-\t\n+\n 2009-07-08  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/31246\n@@ -66,7 +72,7 @@\n \t* gimple (gimple_build_call_from_tree): Likewise.\n \t* tree-cfg.c (remove_useless_stmts_warn_notreached): Check\n \tno_warning flag before warning.\n-\t\n+\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* tree.c (set_expr_locus): Remove.\n@@ -152,7 +158,7 @@\n \t* config/mep/intrinsics.md: Regenerate.\n \t* config/mep/intrinsics.h: Regenerate.\n \t* config/mep/mep-intrin.h: Regenerate.\n-\t\n+\n 2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c-lex.c: Replace %H by an explicit location. Update all calls.\n@@ -248,7 +254,7 @@\n \tPR target/40587\n \t* ira.c (build_insn_chain): Use DF_LR_OUT instead of\n \tdf_get_live_out.\n-\t\n+\n 2009-07-03  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40640\n@@ -363,16 +369,16 @@\n \t* config/mep/intrinsics.md: Regenerate.\n \t* config/mep/intrinsics.h: Regenerate.\n \t* config/mep/mep-intrin.h: Regenerate.\n-\t\n+\n 2009-07-01  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxie.c (moxie_expand_prologue): Use dec\n \tinstruction when possible.\n \t(moxie_expand_prologue): Ditto.  Also, save an instruction and\n-\tsome complexity by popping off of $r12 instead of $sp.  \n+\tsome complexity by popping off of $r12 instead of $sp.\n \t* config/moxie/moxie.md (movsi_pop): Don't assume $sp.  Take two\n \toperands.\n-\t\n+\n 2009-07-01  Richard Henderson  <rth@redhat.com>\n \n \tPR bootstrap/40347"}, {"sha": "a781484b76469fa7f170cd8ea6bd60edb12c6ac3", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f36bac24bce8dff4633e0238c94487f8d3d82ae/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f36bac24bce8dff4633e0238c94487f8d3d82ae/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=3f36bac24bce8dff4633e0238c94487f8d3d82ae", "patch": "@@ -6692,18 +6692,25 @@ make_extraction (enum machine_mode mode, rtx inner, HOST_WIDE_INT pos,\n       inner = adjust_address_nv (inner, wanted_inner_mode, offset);\n     }\n \n-  /* If INNER is not memory, we can always get it into the proper mode.  If we\n-     are changing its mode, POS must be a constant and smaller than the size\n-     of the new mode.  */\n+  /* If INNER is not memory, get it into the proper mode.  If we are changing\n+     its mode, POS must be a constant and smaller than the size of the new\n+     mode.  */\n   else if (!MEM_P (inner))\n     {\n+      /* On the LHS, don't create paradoxical subregs implicitely truncating\n+\t the register unless TRULY_NOOP_TRUNCATION.  */\n+      if (in_dest\n+\t  && !TRULY_NOOP_TRUNCATION (GET_MODE_BITSIZE (GET_MODE (inner)),\n+\t\t\t\t     GET_MODE_BITSIZE (wanted_inner_mode)))\n+\treturn NULL_RTX;\n+\n       if (GET_MODE (inner) != wanted_inner_mode\n \t  && (pos_rtx != 0\n \t      || orig_pos + len > GET_MODE_BITSIZE (wanted_inner_mode)))\n-\treturn 0;\n+\treturn NULL_RTX;\n \n       if (orig_pos < 0)\n-\treturn 0;\n+\treturn NULL_RTX;\n \n       inner = force_to_mode (inner, wanted_inner_mode,\n \t\t\t     pos_rtx"}]}