{"sha": "4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NGU1OGJmZDVkNTdlNzM5OWY5MWM3YzI3YWU2Y2NlYmM3ZGNiMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-09T08:34:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-09T08:34:51Z"}, "message": "fold-const: Fix up native_encode_initializer missing field handling [PR98193]\n\nWhen native_encode_initializer is called with non-NULL mask (i.e. ATM\nbit_cast only), it checks if the current index in the CONSTRUCTOR (if any)\nis the next initializable FIELD_DECL, and if not, decrements cnt and\nperforms the iteration with that FIELD_DECL as field and val of zero\n(so that it computes mask properly).  As the testcase shows, I forgot to\nset pos to the byte position of the field though (like it is done\nfor e.g. index referenced FIELD_DECLs in the constructor.\n\n2020-12-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/98193\n\t* fold-const.c (native_encode_initializer): Set pos to field's\n\tbyte position if iterating over a field with missing initializer.\n\n\t* g++.dg/cpp2a/bit-cast7.C: New test.", "tree": {"sha": "e9f70fb13606ba8e2fead253f67b67e68dbd85d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9f70fb13606ba8e2fead253f67b67e68dbd85d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a63fb3854392af65a191154e3586e7f5a1066e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3a63fb3854392af65a191154e3586e7f5a1066e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3a63fb3854392af65a191154e3586e7f5a1066e"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "81467f19fdb203231fe45ff89c2cd57a1c1bfd25", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "patch": "@@ -8256,6 +8256,7 @@ native_encode_initializer (tree init, unsigned char *ptr, int len,\n \t\t    {\n \t\t      cnt--;\n \t\t      field = fld;\n+\t\t      pos = int_byte_position (field);\n \t\t      val = build_zero_cst (TREE_TYPE (fld));\n \t\t      if (TREE_CODE (val) == CONSTRUCTOR)\n \t\t\tto_free = val;"}, {"sha": "4a3c68200701b07687addd0fb05a2244ee6999fd", "filename": "gcc/testsuite/g++.dg/cpp2a/bit-cast7.C", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fbit-cast7.C?ref=4164e58bfd5d57e7399f91c7c27ae6ccebc7dcb0", "patch": "@@ -0,0 +1,39 @@\n+// PR c++/98193\n+// { dg-do compile { target c++20 } }\n+\n+template <typename To, typename From>\n+constexpr To\n+bit_cast (const From &from)\n+{\n+  return __builtin_bit_cast (To, from);\n+}\n+\n+struct J\n+{\n+  long int a, b : 11, h;\n+};\n+\n+struct K\n+{\n+  long int a, b : 11, c;\n+  constexpr bool operator == (const K &x)\n+  {\n+    return a == x.a && b == x.b && c == x.c;\n+  }\n+};\n+\n+struct L\n+{\n+  long long int a, b : 11, h;\n+};\n+struct M\n+{\n+  long long int a, b : 11, c;\n+  constexpr bool operator == (const M &x)\n+  {\n+    return a == x.a && b == x.b && c == x.c;\n+  }\n+};\n+\n+static_assert (bit_cast <K> (J{}) == K{}, \"\");\n+static_assert (bit_cast <M> (L{0x0feedbacdeadbeefLL}) == M{0x0feedbacdeadbeefLL}, \"\");"}]}