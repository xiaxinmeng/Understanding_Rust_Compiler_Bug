{"sha": "9e28024aeb0a31037280e3cc579e7c289287d8ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyODAyNGFlYjBhMzEwMzcyODBlM2NjNTc5ZTdjMjg5Mjg3ZDhlZQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-12-01T12:20:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-12-01T12:20:20Z"}, "message": "* vec.h (VEC_block_remove): New.\n\nFrom-SVN: r107817", "tree": {"sha": "77bed436cfc4b173dec8644258fba81df08eef57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77bed436cfc4b173dec8644258fba81df08eef57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e28024aeb0a31037280e3cc579e7c289287d8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28024aeb0a31037280e3cc579e7c289287d8ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e28024aeb0a31037280e3cc579e7c289287d8ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e28024aeb0a31037280e3cc579e7c289287d8ee/comments", "author": null, "committer": null, "parents": [{"sha": "5d352b2d0a626db647dc54d7b61f37545c8b2852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d352b2d0a626db647dc54d7b61f37545c8b2852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d352b2d0a626db647dc54d7b61f37545c8b2852"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "17808f0f73875841b2cb431d1e749d05c30f6449", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28024aeb0a31037280e3cc579e7c289287d8ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28024aeb0a31037280e3cc579e7c289287d8ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e28024aeb0a31037280e3cc579e7c289287d8ee", "patch": "@@ -1,3 +1,7 @@\n+2005-12-01  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* vec.h (VEC_block_remove): New.\n+\n 2005-12-01  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tPR c/13384"}, {"sha": "93453a895ed89e0a2a79b312f07ac8a894a9d2fd", "filename": "gcc/vec.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e28024aeb0a31037280e3cc579e7c289287d8ee/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e28024aeb0a31037280e3cc579e7c289287d8ee/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=9e28024aeb0a31037280e3cc579e7c289287d8ee", "patch": "@@ -366,6 +366,15 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #define VEC_unordered_remove(T,V,I)\t\\\n \t(VEC_OP(T,base,unordered_remove)(VEC_BASE(V),I VEC_CHECK_INFO))\n \n+/* Remove a block of elements\n+   void VEC_T_block_remove (VEC(T) *v, unsigned ix, unsigned len);\n+   \n+   Remove LEN elements starting at the IXth.  Ordering is retained.\n+   This is an O(1) operation.  */\n+\n+#define VEC_block_remove(T,V,I,L)\t\\\n+\t(VEC_OP(T,base,block_remove)(VEC_BASE(V),I,L VEC_CHECK_INFO))\n+\n /* Get the address of the array of elements\n    T *VEC_T_address (VEC(T) v)\n \n@@ -636,6 +645,17 @@ static inline T VEC_OP (T,base,unordered_remove)\t\t\t  \\\n   return obj_;\t\t\t\t\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n+static inline void VEC_OP (T,base,block_remove)\t\t\t\t  \\\n+     (VEC(T,base) *vec_, unsigned ix_, unsigned len_ VEC_CHECK_DECL)\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  T *slot_;\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n+  VEC_ASSERT (ix_ + len_ <= vec_->num, \"block_remove\", T, base);\t  \\\n+  slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n+  vec_->num -= len_;\t\t\t\t\t\t\t  \\\n+  memmove (slot_, slot_ + len_, (vec_->num - ix_) * sizeof (T));\t  \\\n+}\t\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n static inline T *VEC_OP (T,base,address)\t\t\t\t  \\\n      (VEC(T,base) *vec_)\t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n@@ -886,6 +906,17 @@ static inline void VEC_OP (T,base,unordered_remove)\t\t\t  \\\n   vec_->vec[ix_] = vec_->vec[--vec_->num];\t\t\t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n+static inline void VEC_OP (T,base,block_remove)\t\t\t\t  \\\n+     (VEC(T,base) *vec_, unsigned ix_, unsigned len_ VEC_CHECK_DECL)\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  T *slot_;\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n+  VEC_ASSERT (ix_ + len_ <= vec_->num, \"block_remove\", T, base);\t  \\\n+  slot_ = &vec_->vec[ix_];\t\t\t\t\t\t  \\\n+  vec_->num -= len_;\t\t\t\t\t\t\t  \\\n+  memmove (slot_, slot_ + len_, (vec_->num - ix_) * sizeof (T));\t  \\\n+}\t\t\t\t\t\t\t\t\t  \\\n+\t\t\t\t\t\t\t\t\t  \\\n static inline T *VEC_OP (T,base,address)\t\t\t\t  \\\n      (VEC(T,base) *vec_)\t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\"}]}