{"sha": "e60365d30ebb046f961e6e7976a4459a1dee6b6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYwMzY1ZDMwZWJiMDQ2Zjk2MWU2ZTc5NzZhNDQ1OWExZGVlNmI2ZA==", "commit": {"author": {"name": "Trevor Saunders", "email": "tsaunders@mozilla.com", "date": "2014-09-04T21:11:34Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2014-09-04T21:11:34Z"}, "message": "use rtx_insn * a little more\n\ngcc/ChangeLog:\n\n2014-09-04  Trevor Saunders  <tsaunders@mozilla.com>\n\n\t* config/bfin/bfin.c, config/c6x/c6x.c, config/m32c/m32c.c,\n\tconfig/mn10300/mn10300.c, config/s390/s390.c, config/sh/sh.c,\n\tifcvt.c, reorg.c: Change types of variables from rtx to rtx_insn *.\n\nFrom-SVN: r214923", "tree": {"sha": "eeeedaedf49c3021cb0f2301276881e265cb087b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeeedaedf49c3021cb0f2301276881e265cb087b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e60365d30ebb046f961e6e7976a4459a1dee6b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60365d30ebb046f961e6e7976a4459a1dee6b6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60365d30ebb046f961e6e7976a4459a1dee6b6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60365d30ebb046f961e6e7976a4459a1dee6b6d/comments", "author": null, "committer": null, "parents": [{"sha": "e4685bc8caf5da2142eabeda9536567b1ea7bc12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4685bc8caf5da2142eabeda9536567b1ea7bc12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4685bc8caf5da2142eabeda9536567b1ea7bc12"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "f8178f43369e0c276c04e32482b9e588383c7a79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -1,3 +1,9 @@\n+2014-09-04  Trevor Saunders  <tsaunders@mozilla.com>\n+\n+\t* config/bfin/bfin.c, config/c6x/c6x.c, config/m32c/m32c.c,\n+\tconfig/mn10300/mn10300.c, config/s390/s390.c, config/sh/sh.c,\n+\tifcvt.c, reorg.c: Change types of variables from rtx to rtx_insn *.\n+\n 2014-09-04  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* emit-rtl.c (get_first_nonnote_insn): Return rtx_insn * instead of"}, {"sha": "f92b6d1be3afef7fee992ee8fddce64c3ec8dbad", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -3443,7 +3443,8 @@ hwloop_optimize (hwloop_info loop)\n   rtx loop_init, start_label, end_label;\n   rtx iter_reg, scratchreg, scratch_init, scratch_init_insn;\n   rtx lc_reg, lt_reg, lb_reg;\n-  rtx seq, seq_end;\n+  rtx seq_end;\n+  rtx_insn *seq;\n   int length;\n   bool clobber0, clobber1;\n "}, {"sha": "79759df080f58b7d9370de4ba2dc254f8c56c98f", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -4726,10 +4726,10 @@ c6x_gen_bundles (void)\n \n /* Emit a NOP instruction for CYCLES cycles after insn AFTER.  Return it.  */\n \n-static rtx\n+static rtx_insn *\n emit_nop_after (int cycles, rtx after)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n \n   /* mpydp has 9 delay slots, and we may schedule a stall for a cross-path\n      operation.  We don't need the extra NOP since in this case, the hardware\n@@ -5030,10 +5030,11 @@ static void\n reorg_emit_nops (rtx *call_labels)\n {\n   bool first;\n-  rtx prev, last_call;\n+  rtx last_call;\n+  rtx_insn *prev;\n   int prev_clock, earliest_bb_end;\n   int prev_implicit_nops;\n-  rtx insn = get_insns ();\n+  rtx_insn *insn = get_insns ();\n \n   /* We look at one insn (or bundle inside a sequence) in each iteration, storing\n      its issue time in PREV_CLOCK for the next iteration.  If there is a gap in\n@@ -5045,15 +5046,15 @@ reorg_emit_nops (rtx *call_labels)\n      a multi-cycle nop.  The code is scheduled such that subsequent insns will\n      show the cycle gap, but we needn't insert a real NOP instruction.  */\n   insn = next_real_insn (insn);\n-  last_call = prev = NULL_RTX;\n+  last_call = prev = NULL;\n   prev_clock = -1;\n   earliest_bb_end = 0;\n   prev_implicit_nops = 0;\n   first = true;\n   while (insn)\n     {\n       int this_clock = -1;\n-      rtx next;\n+      rtx_insn *next;\n       int max_cycles = 0;\n \n       next = next_real_insn (insn);"}, {"sha": "b02c6ea87b501f0478bde6b43b5e9d3863de9293", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -3819,7 +3819,8 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t undefined to skip one of the comparisons.  */\n \n       rtx count;\n-      rtx label, insn, tempvar;\n+      rtx label, tempvar;\n+      rtx_insn *insn;\n \n       emit_move_insn (operands[0], operands[1]);\n "}, {"sha": "c4d74c10a1d133981819a8ac465a21498cd350d1", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -3169,7 +3169,7 @@ mn10300_insert_setlb_lcc (rtx label, rtx branch)\n \n   if (LABEL_NUSES (label) > 1)\n     {\n-      rtx insn;\n+      rtx_insn *insn;\n \n       /* This label is used both as an entry point to the loop\n \t and as a loop-back point for the loop.  We need to separate"}, {"sha": "9e910cc373a58f1367a3fc12aee6b6e2070cd895", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -11039,7 +11039,7 @@ s390_fix_long_loop_prediction (rtx_insn *insn)\n {\n   rtx set = single_set (insn);\n   rtx code_label, label_ref, new_label;\n-  rtx uncond_jump;\n+  rtx_insn *uncond_jump;\n   rtx_insn *cur_insn;\n   rtx tmp;\n   int distance;"}, {"sha": "849867a78b6a47a7d2418df438b48ddc67c8fc9b", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -4739,7 +4739,7 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n     }\n   if (TARGET_FMOVD && TARGET_ALIGN_DOUBLE && have_df)\n     {\n-      rtx align_insn = NULL_RTX;\n+      rtx_insn *align_insn = NULL;\n \n       scan = emit_label_after (gen_label_rtx (), scan);\n       scan = emit_insn_after (gen_align_log (GEN_INT (3)), scan);\n@@ -4768,7 +4768,7 @@ dump_table (rtx_insn *start, rtx_insn *barrier)\n \t\t\t\t\talign_insn);\n \t\t    }\n \t\t  delete_insn (align_insn);\n-\t\t  align_insn = NULL_RTX;\n+\t\t  align_insn = NULL;\n \t\t  continue;\n \t\t}\n \t      else\n@@ -5737,7 +5737,7 @@ enum mdep_reorg_phase_e mdep_reorg_phase;\n static void\n gen_far_branch (struct far_branch *bp)\n {\n-  rtx insn = bp->insert_place;\n+  rtx_insn *insn = bp->insert_place;\n   rtx_insn *jump;\n   rtx_code_label *label = gen_label_rtx ();\n   int ok;"}, {"sha": "374275947f06e7c8ebbbb0ce199dcaad0891248c", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -2915,7 +2915,7 @@ cond_move_process_if_block (struct noce_if_info *if_info)\n   basic_block then_bb = if_info->then_bb;\n   basic_block else_bb = if_info->else_bb;\n   basic_block join_bb = if_info->join_bb;\n-  rtx jump = if_info->jump;\n+  rtx_insn *jump = if_info->jump;\n   rtx cond = if_info->cond;\n   rtx_insn *seq, *loc_insn;\n   rtx reg;"}, {"sha": "89d500da0660c9a66f746c8f4948de676423d111", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e60365d30ebb046f961e6e7976a4459a1dee6b6d/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=e60365d30ebb046f961e6e7976a4459a1dee6b6d", "patch": "@@ -1899,7 +1899,7 @@ get_label_before (rtx_insn *insn, rtx sibling)\n \n   if (label == 0 || !LABEL_P (label))\n     {\n-      rtx prev = PREV_INSN (insn);\n+      rtx_insn *prev = PREV_INSN (insn);\n \n       label = gen_label_rtx ();\n       emit_label_after (label, prev);"}]}