{"sha": "5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE0OGQyZTM4ZmE1ZmY2NDI3ZmNhNDhjYjU5MmNhMzRhNDZhZjNmOQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2015-10-29T12:29:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2015-10-29T12:29:43Z"}, "message": "Add BUILD_NO_PIE_CFLAGS and BUILD_NO_PIE_FLAG\n\nWe shouldn't use NO_PIE_CFLAGS and NO_PIE_FLAG with CXX_FOR_BUILD\nwhen CXX_FOR_BUILD != CXX.  This patch adds BUILD_NO_PIE_CFLAGS\nand BUILD_NO_PIE_FLAG to use with CXX_FOR_BUILD.  They are set to\nNO_PIE_CFLAGS and NO_PIE_FLAG when build machine == host machine.\nOtherwise, they are set to NO_PIE_CFLAGS_FOR_BUILD and\nNO_PIE_FLAG_FOR_BUILD.\n\n\t* Makefile.in (NO_PIE_CFLAGS): New.\n\t(NO_PIE_FLAG): Likewise.\n\t(NO_PIE_CFLAGS_FOR_BUILD): Likewise.\n\t(NO_PIE_FLAG_FOR_BUILD): Likewise.\n\t(BUILD_NO_PIE_CFLAGS): Likewise.\n\t(BUILD_NO_PIE_FLAG): Likewise.\n\t(COMPILER): Replace @NO_PIE_CFLAGS@ with $(NO_PIE_CFLAGS).\n\t(LINKER): Replace @NO_PIE_FLAG@ with $(NO_PIE_FLAG).\n\t(BUILD_CFLAGS): Replace @NO_PIE_CFLAGS@ with\n\t$(BUILD_NO_PIE_CFLAGS).\n\t(BUILD_CXXFLAGS): Likewise.\n\t(BUILD_LDFLAGS ): Replace @NO_PIE_FLAG@ with\n\t$(BUILD_NO_PIE_FLAG).\n\t* configure.ac (BUILD_NO_PIE_CFLAGS): New.  AC_SUBST.\n\t(BUILD_NO_PIE_FLAG): Likewise.\n\t(NO_PIE_CFLAGS_FOR_BUILD): Likewise.\n\t(NO_PIE_FLAG_FOR_BUILD): Likewise.\n\t* configure: Regenerated.\n\nFrom-SVN: r229522", "tree": {"sha": "8d713006ef3d7505ce82f73c5489cda89f7dd071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d713006ef3d7505ce82f73c5489cda89f7dd071"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41e977ac9054519259a7740d0f4b434105cd366a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e977ac9054519259a7740d0f4b434105cd366a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e977ac9054519259a7740d0f4b434105cd366a"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "e72098c7d7e7f18df72cf678211297858adda328", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "patch": "@@ -1,3 +1,24 @@\n+2015-10-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* Makefile.in (NO_PIE_CFLAGS): New.\n+\t(NO_PIE_FLAG): Likewise.\n+\t(NO_PIE_CFLAGS_FOR_BUILD): Likewise.\n+\t(NO_PIE_FLAG_FOR_BUILD): Likewise.\n+\t(BUILD_NO_PIE_CFLAGS): Likewise.\n+\t(BUILD_NO_PIE_FLAG): Likewise.\n+\t(COMPILER): Replace @NO_PIE_CFLAGS@ with $(NO_PIE_CFLAGS).\n+\t(LINKER): Replace @NO_PIE_FLAG@ with $(NO_PIE_FLAG).\n+\t(BUILD_CFLAGS): Replace @NO_PIE_CFLAGS@ with\n+\t$(BUILD_NO_PIE_CFLAGS).\n+\t(BUILD_CXXFLAGS): Likewise.\n+\t(BUILD_LDFLAGS ): Replace @NO_PIE_FLAG@ with\n+\t$(BUILD_NO_PIE_FLAG).\n+\t* configure.ac (BUILD_NO_PIE_CFLAGS): New.  AC_SUBST.\n+\t(BUILD_NO_PIE_FLAG): Likewise.\n+\t(NO_PIE_CFLAGS_FOR_BUILD): Likewise.\n+\t(NO_PIE_FLAG_FOR_BUILD): Likewise.\n+\t* configure: Regenerated.\n+\n 2015-10-29  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/56956"}, {"sha": "9a544e7c109a55946cd9c501f7f1cf59d8bee4c9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "patch": "@@ -258,11 +258,14 @@ LINKER = $(CC)\n LINKER_FLAGS = $(CFLAGS)\n endif\n \n+NO_PIE_CFLAGS = @NO_PIE_CFLAGS@\n+NO_PIE_FLAG = @NO_PIE_FLAG@\n+\n # We don't want to compile the compilers with -fPIE, it make PCH fail.\n-COMPILER += @NO_PIE_CFLAGS@\n+COMPILER += $(NO_PIE_CFLAGS)\n \n # Link with -no-pie since we compile the compiler with -fno-PIE.\n-LINKER += @NO_PIE_FLAG@\n+LINKER += $(NO_PIE_FLAG)\n \n # Like LINKER, but use a mutex for serializing front end links.\n ifeq (@DO_LINK_MUTEX@,true)\n@@ -755,10 +758,13 @@ DIR = ../gcc\n # Native compiler for the build machine and its switches.\n CC_FOR_BUILD = @CC_FOR_BUILD@\n CXX_FOR_BUILD = @CXX_FOR_BUILD@\n+NO_PIE_CFLAGS_FOR_BUILD = @NO_PIE_CFLAGS_FOR_BUILD@\n+NO_PIE_FLAG_FOR_BUILD = @NO_PIE_FLAG_FOR_BUILD@\n BUILD_CFLAGS= @BUILD_CFLAGS@ -DGENERATOR_FILE\n BUILD_CXXFLAGS = @BUILD_CXXFLAGS@ -DGENERATOR_FILE\n-BUILD_CFLAGS += @NO_PIE_CFLAGS@\n-BUILD_CXXFLAGS += @NO_PIE_CFLAGS@\n+BUILD_NO_PIE_CFLAGS = @BUILD_NO_PIE_CFLAGS@\n+BUILD_CFLAGS += $(BUILD_NO_PIE_CFLAGS)\n+BUILD_CXXFLAGS += $(BUILD_NO_PIE_CFLAGS)\n \n # Native compiler that we use.  This may be C++ some day.\n COMPILER_FOR_BUILD = $(CXX_FOR_BUILD)\n@@ -770,7 +776,8 @@ BUILD_LINKERFLAGS = $(BUILD_CXXFLAGS)\n \n # Native linker and preprocessor flags.  For x-fragment overrides.\n BUILD_LDFLAGS=@BUILD_LDFLAGS@\n-BUILD_LDFLAGS += @NO_PIE_FLAG@\n+BUILD_NO_PIE_FLAG = @BUILD_NO_PIE_FLAG@\n+BUILD_LDFLAGS += $(BUILD_NO_PIE_FLAG)\n BUILD_CPPFLAGS= -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n \t\t-I$(srcdir)/../include @INCINTL@ $(CPPINC) $(CPPFLAGS)\n "}, {"sha": "92bda6c759e48a69701f73abf0dacf8c20109423", "filename": "gcc/configure", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "patch": "@@ -707,6 +707,10 @@ FGREP\n SED\n LIBTOOL\n collect2\n+NO_PIE_FLAG_FOR_BUILD\n+NO_PIE_CFLAGS_FOR_BUILD\n+BUILD_NO_PIE_FLAG\n+BUILD_NO_PIE_CFLAGS\n STMP_FIXINC\n BUILD_LDFLAGS\n BUILD_CXXFLAGS\n@@ -7096,7 +7100,8 @@ if test x$ac_checking != x ; then\n \n $as_echo \"#define ENABLE_CHECKING 1\" >>confdefs.h\n \n-  $as_echo \"#define CHECKING_P 1\" >>confdefs.h\n+\n+$as_echo \"#define CHECKING_P 1\" >>confdefs.h\n \n   nocommon_flag=-fno-common\n else\n@@ -12253,14 +12258,24 @@ BUILD_CXXFLAGS='$(ALL_CXXFLAGS)'\n BUILD_LDFLAGS='$(LDFLAGS)'\n STMP_FIXINC=stmp-fixinc\n \n+BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS)'\n+BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)'\n+\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n     BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD)'\n     BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n+\n+    NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}\n+    NO_PIE_FLAG_FOR_BUILD=${NO_PIE_FLAG_FOR_BUILD-${NO_PIE_FLAG}}\n+    BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS_FOR_BUILD)'\n+    BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG_FOR_BUILD)'\n fi\n \n+\n+\n # Expand extra_headers to include complete path.\n # This substitutes for lots of t-* files.\n extra_headers_list=\n@@ -18390,7 +18405,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18393 \"configure\"\n+#line 18408 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18496,7 +18511,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18499 \"configure\"\n+#line 18514 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "7e22267e3bb9f1a477b3226ff054bc60a77e19f9", "filename": "gcc/configure.ac", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5148d2e38fa5ff6427fca48cb592ca34a46af3f9/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=5148d2e38fa5ff6427fca48cb592ca34a46af3f9", "patch": "@@ -2041,13 +2041,23 @@ BUILD_CXXFLAGS='$(ALL_CXXFLAGS)' AC_SUBST(BUILD_CXXFLAGS)\n BUILD_LDFLAGS='$(LDFLAGS)'\tAC_SUBST(BUILD_LDFLAGS)\n STMP_FIXINC=stmp-fixinc\t\tAC_SUBST(STMP_FIXINC)\n \n+BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS)' AC_SUBST(BUILD_NO_PIE_CFLAGS)\n+BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG)' AC_SUBST(BUILD_NO_PIE_FLAG)\n+\n # And these apply if build != host, or we are generating coverage data\n if test x$build != x$host || test \"x$coverage_flags\" != x\n then\n     BUILD_CFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS_FOR_BUILD)'\n     BUILD_CXXFLAGS='$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CXXFLAGS_FOR_BUILD)'\n     BUILD_LDFLAGS='$(LDFLAGS_FOR_BUILD)'\n+\n+    NO_PIE_CFLAGS_FOR_BUILD=${NO_PIE_CFLAGS_FOR_BUILD-${NO_PIE_CFLAGS}}\n+    NO_PIE_FLAG_FOR_BUILD=${NO_PIE_FLAG_FOR_BUILD-${NO_PIE_FLAG}}\n+    BUILD_NO_PIE_CFLAGS='$(NO_PIE_CFLAGS_FOR_BUILD)'\n+    BUILD_NO_PIE_FLAG='$(NO_PIE_FLAG_FOR_BUILD)'\n fi\n+AC_SUBST(NO_PIE_CFLAGS_FOR_BUILD)\n+AC_SUBST(NO_PIE_FLAG_FOR_BUILD)\n \n # Expand extra_headers to include complete path.\n # This substitutes for lots of t-* files."}]}