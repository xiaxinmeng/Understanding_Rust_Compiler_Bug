{"sha": "b52b558a25df4860b17f5e23a9597f20898b802e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyYjU1OGEyNWRmNDg2MGIxN2Y1ZTIzYTk1OTdmMjA4OThiODAyZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-20T21:11:22Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-11-20T21:11:22Z"}, "message": "re PR middle-end/38151 (structures with _Complex arguments are not passed correctly)\n\n\tPR target/38151\n\t* config/i386/i386.c (classify_argument) [integer mode size <= 64bit]:\n\tHandle cases when integer argument crosses argument register boundary.\n\ntestsuite/ChangeLog:\n\n\tPR target/38151\n\t* gcc.target/i386/pr38151-1.c: New test.\n\nFrom-SVN: r142059", "tree": {"sha": "77cac3ff38e705a37accc7751ca2e0508f38a754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77cac3ff38e705a37accc7751ca2e0508f38a754"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b52b558a25df4860b17f5e23a9597f20898b802e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b558a25df4860b17f5e23a9597f20898b802e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52b558a25df4860b17f5e23a9597f20898b802e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52b558a25df4860b17f5e23a9597f20898b802e/comments", "author": null, "committer": null, "parents": [{"sha": "586125658af94e158c850dda1da26e6c889d5e57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/586125658af94e158c850dda1da26e6c889d5e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/586125658af94e158c850dda1da26e6c889d5e57"}], "stats": {"total": 92, "additions": 76, "deletions": 16}, "files": [{"sha": "f63d37bdd2a86a19abd306ca3c1f7acd47ed6cda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b52b558a25df4860b17f5e23a9597f20898b802e", "patch": "@@ -1,3 +1,9 @@\n+2008-11-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/38151\n+\t* config/i386/i386.c (classify_argument) [integer mode size <= 64bit]:\n+\tHandle cases when integer argument crosses argument register boundary.\n+\n 2008-11-20  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \tPR bootstrap/33100\n@@ -18,10 +24,10 @@\n \tPR rtl-optimization/32283\n \t* tree-ssa-loop-niter.c (scev_probably_wraps_p): Use type of the base\n \tof the induction variable to decide whether it may wrap.\n-\t* tree-ssa-loop-ivopts.c (rewrite_use_compare): Emit the initialization\n-\tof the bound before the loop.\n-\t* simplify-rtx.c (simplify_binary_operation_1): Add two simplifications\n-\tregarding AND.\n+\t* tree-ssa-loop-ivopts.c (rewrite_use_compare): Emit the\n+\tinitialization of the bound before the loop.\n+\t* simplify-rtx.c (simplify_binary_operation_1): Add two\n+\tsimplifications regarding AND.\n \t(simplify_plus_minus): Only fail if no simplification is possible.\n \t* loop-iv.c (simple_rhs_p): Consider reg + reg and reg << cst simple.\n \n@@ -73,8 +79,7 @@\n \t* ira-conflicts.c (ira_allocno_live_ranges_intersect_p,\n \tira_pseudo_live_ranges_intersect_p): Rename to\n \tallocnos_have_intersected_live_ranges_p and\n-\tpseudos_have_intersected_live_ranges_p.  Move them from here to\n-\t...\n+\tpseudos_have_intersected_live_ranges_p.  Move them from here to ...\n \n \t* ira-color.c: ... here\n \t(coalesced_allocno_conflict_p): Use\n@@ -112,8 +117,7 @@\n 2008-11-19  Richard Guenther  <rguenther@suse.de>\n \n \t* tree.c (build2_stat): Allow non-POINTER_PLUS_EXPRs with\n-\tnon-sizetype offsets if their precision matches that of\n-\tthe pointer.\n+\tnon-sizetype offsets if their precision matches that of the pointer.\n \t* expr.c (expand_expr_real_1): Always sign-extend the offset\n \toperand of a POINTER_PLUS_EXPR.\n \n@@ -134,8 +138,8 @@\n \n 2008-11-19  Razya Ladelsky  <razya@il.ibm.com>\n \n-        PR target/38156\n-        * tree-parloops.c (loop_parallel_p): NULL vect_dump.\n+\tPR target/38156\n+\t* tree-parloops.c (loop_parallel_p): NULL vect_dump.\n \t(separate_decls_in_region): Create shared struct even when there \n \tare only reductions.\n \n@@ -272,7 +276,7 @@\n 2008-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (function_arg_vector_value): Remove 'base_mode'\n-\tparameter. \ufffdUse DImode for computing the number of registers.\n+\tparameter.  Use DImode for computing the number of registers.\n \t(function_arg): Adjust for above change.\n \t(function_value): Likewise.\n "}, {"sha": "fca4d8593023c37dbebbbfa4111293270668b493", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=b52b558a25df4860b17f5e23a9597f20898b802e", "patch": "@@ -5029,11 +5029,33 @@ classify_argument (enum machine_mode mode, const_tree type,\n     case CSImode:\n     case CHImode:\n     case CQImode:\n-      if (bit_offset + GET_MODE_BITSIZE (mode) <= 32)\n-\tclasses[0] = X86_64_INTEGERSI_CLASS;\n-      else\n-\tclasses[0] = X86_64_INTEGER_CLASS;\n-      return 1;\n+      {\n+\tint size = (bit_offset % 64)+ (int) GET_MODE_BITSIZE (mode);\n+\n+\tif (size <= 32)\n+\t  {\n+\t    classes[0] = X86_64_INTEGERSI_CLASS;\n+\t    return 1;\n+\t  }\n+\telse if (size <= 64)\n+\t  {\n+\t    classes[0] = X86_64_INTEGER_CLASS;\n+\t    return 1;\n+\t  }\n+\telse if (size <= 64+32)\n+\t  {\n+\t    classes[0] = X86_64_INTEGER_CLASS;\n+\t    classes[1] = X86_64_INTEGERSI_CLASS;\n+\t    return 2;\n+\t  }\n+\telse if (size <= 64+64)\n+\t  {\n+\t    classes[0] = classes[1] = X86_64_INTEGER_CLASS;\n+\t    return 2;\n+\t  }\n+\telse\n+\t  gcc_unreachable ();\n+      }\n     case CDImode:\n     case TImode:\n       classes[0] = classes[1] = X86_64_INTEGER_CLASS;"}, {"sha": "6eaad340c00d24b496a8d31ce8dc7ecb6a8b0a81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b52b558a25df4860b17f5e23a9597f20898b802e", "patch": "@@ -1,3 +1,8 @@\n+2008-11-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/38151\n+\t* gcc.target/i386/pr38151-1.c: New test.\n+\n 2008-11-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/28513"}, {"sha": "6500a5029b6aff4e15cf6b45a5008f9dc924c7e7", "filename": "gcc/testsuite/gcc.target/i386/pr38151-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38151-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b52b558a25df4860b17f5e23a9597f20898b802e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38151-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr38151-1.c?ref=b52b558a25df4860b17f5e23a9597f20898b802e", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+struct S2848\n+{\n+  unsigned int a;\n+  _Complex int b;\n+};\n+\n+struct S2848 s2848;\n+\n+void __attribute__((noinline))\n+check2848 (struct S2848 arg0)\n+{\n+  if (arg0.b != s2848.b)\n+    abort ();\n+}\n+\n+int main()\n+{\n+  s2848.a = 4027477739U;\n+  s2848.b = (723419448 + -218144346 * __extension__ 1i);\n+\n+  check2848 (s2848);\n+\n+  return 0;\n+}"}]}