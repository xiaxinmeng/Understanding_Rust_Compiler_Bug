{"sha": "cf606f453b573214bdf791479bda3b93ba43807c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2MDZmNDUzYjU3MzIxNGJkZjc5MTQ3OWJkYTNiOTNiYTQzODA3Yw==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-09-26T00:40:42Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-09-26T00:40:42Z"}, "message": "Fix bad use of FP reg in post-modify address.\n\n\t* config/ia64/ia64.h (INDEX_REG_CLASS): Define to GENERAL_REGS.\n\t(REGNO_OK_FOR_INDEX_P): Define to REGNO_OK_FOR_BASE_P.\n\t(LEGITIMATE_ADDRESS_DISP): Use LEGITIMATE_ADDRESS_REG.\n\t(REG_OK_FOR_INDEX): Define to REG_OK_FOR_BASE_P.\n\nFrom-SVN: r36640", "tree": {"sha": "61a5669d1e5f6c5c1d12177b6cb7ffe27a28de0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61a5669d1e5f6c5c1d12177b6cb7ffe27a28de0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf606f453b573214bdf791479bda3b93ba43807c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf606f453b573214bdf791479bda3b93ba43807c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf606f453b573214bdf791479bda3b93ba43807c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf606f453b573214bdf791479bda3b93ba43807c/comments", "author": null, "committer": null, "parents": [{"sha": "a94c1199226699ca26717aff8c71c2ee19212f6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a94c1199226699ca26717aff8c71c2ee19212f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a94c1199226699ca26717aff8c71c2ee19212f6d"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "aeba67f9301d6d96918bdf7e28c4abc4b15eb368", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf606f453b573214bdf791479bda3b93ba43807c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf606f453b573214bdf791479bda3b93ba43807c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf606f453b573214bdf791479bda3b93ba43807c", "patch": "@@ -1,3 +1,10 @@\n+2000-09-25  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64.h (INDEX_REG_CLASS): Define to GENERAL_REGS.\n+\t(REGNO_OK_FOR_INDEX_P): Define to REGNO_OK_FOR_BASE_P.\n+\t(LEGITIMATE_ADDRESS_DISP): Use LEGITIMATE_ADDRESS_REG.\n+\t(REG_OK_FOR_INDEX): Define to REG_OK_FOR_BASE_P.\n+\n Tue 26-Sep-2000 00:16:22 BST  Neil Booth  <neilb@earthling.net>\n \n         * cpplex.c (parse_args): Don't set VOID_REST flag."}, {"sha": "6f13d8cbd57ebf87fb9d5e3cd02e4fc6d1843507", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf606f453b573214bdf791479bda3b93ba43807c/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf606f453b573214bdf791479bda3b93ba43807c/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=cf606f453b573214bdf791479bda3b93ba43807c", "patch": "@@ -978,8 +978,8 @@ enum reg_class\n /* A macro whose definition is the name of the class to which a valid index\n    register must belong.  An index register is one used in an address where its\n    value is either multiplied by a scale factor or added to another register\n-   (as well as added to a displacement).  */\n-#define INDEX_REG_CLASS NO_REGS\n+   (as well as added to a displacement).  This is needed for POST_MODIFY.  */\n+#define INDEX_REG_CLASS GENERAL_REGS\n \n /* A C expression which defines the machine-dependent operand constraint\n    letters for register classes.  If CHAR is such a letter, the value should be\n@@ -1004,8 +1004,9 @@ enum reg_class\n \n /* A C expression which is nonzero if register number NUM is suitable for use\n    as an index register in operand addresses.  It may be either a suitable hard\n-   register or a pseudo register that has been allocated such a hard reg.  */\n-#define REGNO_OK_FOR_INDEX_P(NUM) 0\n+   register or a pseudo register that has been allocated such a hard reg.\n+   This is needed for POST_MODIFY.  */\n+#define REGNO_OK_FOR_INDEX_P(NUM) REGNO_OK_FOR_BASE_P (NUM)\n \n /* A C expression that places additional restrictions on the register class to\n    use when it is necessary to copy value X into a register in class CLASS.\n@@ -1743,7 +1744,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LEGITIMATE_ADDRESS_DISP(R, X)\t\t\t\t\t\\\n   (GET_CODE (X) == PLUS\t\t\t\t\t\t\t\\\n    && rtx_equal_p (R, XEXP (X, 0))\t\t\t\t\t\\\n-   && (GET_CODE (XEXP (X, 1)) == REG\t\t\t\t\t\\\n+   && (LEGITIMATE_ADDRESS_REG (XEXP (X, 1))\t\t\t\t\\\n        || (GET_CODE (XEXP (X, 1)) == CONST_INT\t\t\t\t\\\n \t   && INTVAL (XEXP (X, 1)) >= -256\t\t\t\t\\\n \t   && INTVAL (XEXP (X, 1)) < 256)))\n@@ -1774,9 +1775,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #endif\n \n /* A C expression that is nonzero if X (assumed to be a `reg' RTX) is valid for\n-   use as an index register.  */\n+   use as an index register.  This is needed for POST_MODIFY.  */\n \n-#define REG_OK_FOR_INDEX_P(X) 0\n+#define REG_OK_FOR_INDEX_P(X) REG_OK_FOR_BASE_P (X)\n \n /* A C compound statement that attempts to replace X with a valid memory\n    address for an operand of mode MODE."}]}