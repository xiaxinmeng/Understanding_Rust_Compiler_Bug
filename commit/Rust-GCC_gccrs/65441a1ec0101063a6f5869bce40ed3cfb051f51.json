{"sha": "65441a1ec0101063a6f5869bce40ed3cfb051f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NDFhMWVjMDEwMTA2M2E2ZjU4NjliY2U0MGVkM2NmYjA1MWY1MQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-01-20T15:15:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T15:15:34Z"}, "message": "sem_attr.adb (Analyze_Attribute, [...]): Allow Loop_Entry in Assert, Assert_And_Cut, and Assume pragmas.\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): Allow\n\tLoop_Entry in Assert, Assert_And_Cut, and Assume pragmas.\n\t* sem_prag.adb (Analyze_Pragma, case Assert[_And_Cut], Assume):\n\tAllow Loop_Entry to be used in these pragmas if they appear in\n\tan appropriate context.\n\t(Placement_Error): Specialize error\n\tmessage for pragma Assert[_And_Cut] or pragma Assume containing\n\tLoop_Entry attribute.\n\t* a-exexpr-gcc.adb, sinput.adb: Minor reformatting.\n\t* s-excmac-arm.ads, s-except.ads, s-excmac-gcc.ads: Minor reformatting\n\tand code clean ups.\n\nFrom-SVN: r206818", "tree": {"sha": "c3ea2492b8063eb3e367076a7a649f1c50270310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3ea2492b8063eb3e367076a7a649f1c50270310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65441a1ec0101063a6f5869bce40ed3cfb051f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65441a1ec0101063a6f5869bce40ed3cfb051f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65441a1ec0101063a6f5869bce40ed3cfb051f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65441a1ec0101063a6f5869bce40ed3cfb051f51/comments", "author": null, "committer": null, "parents": [{"sha": "800da97743ec985d0de0215afcf6bb44b7cd23c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/800da97743ec985d0de0215afcf6bb44b7cd23c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/800da97743ec985d0de0215afcf6bb44b7cd23c8"}], "stats": {"total": 125, "additions": 104, "deletions": 21}, "files": [{"sha": "442465517c5d885b55140cd42ecd68ade1733827", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -1,3 +1,17 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case Loop_Entry): Allow\n+\tLoop_Entry in Assert, Assert_And_Cut, and Assume pragmas.\n+\t* sem_prag.adb (Analyze_Pragma, case Assert[_And_Cut], Assume):\n+\tAllow Loop_Entry to be used in these pragmas if they appear in\n+\tan appropriate context.\n+\t(Placement_Error): Specialize error\n+\tmessage for pragma Assert[_And_Cut] or pragma Assume containing\n+\tLoop_Entry attribute.\n+\t* a-exexpr-gcc.adb, sinput.adb: Minor reformatting.\n+\t* s-excmac-arm.ads, s-except.ads, s-excmac-gcc.ads: Minor reformatting\n+\tand code clean ups.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat1drv.adb: Minor comment update."}, {"sha": "3208027a72b79f554df2f1441eecc6bb9577c547", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -34,7 +34,7 @@\n with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n \n-with System.Storage_Elements;  use System.Storage_Elements;\n+with System.Storage_Elements;   use System.Storage_Elements;\n with System.Exceptions.Machine; use System.Exceptions.Machine;\n \n separate (Ada.Exceptions)"}, {"sha": "b7087c68f697cf2344fd7c4e30b95c8bc702c13e", "filename": "gcc/ada/s-except.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-except.ads?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -37,7 +37,7 @@ package System.Exceptions is\n    --  To let Ada.Exceptions \"with\" us and let us \"with\" Standard_Library\n \n    ZCX_By_Default : constant Boolean;\n-   --  Visible copy to allow Ada.Exceptions to know the exception model.\n+   --  Visible copy to allow Ada.Exceptions to know the exception model\n \n private\n "}, {"sha": "88759b8e228117aacea22e6bf45ac4b722bc3cea", "filename": "gcc/ada/s-excmac-arm.ads", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-excmac-arm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-excmac-arm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excmac-arm.ads?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -29,6 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Declaration of the machine exception and some associated facilities. The\n+--  machine exception is the object that is propagated by low level routines\n+--  and that contains the Ada exception occurrence.\n+\n --  This is the version using the ARM EHABI mechanism\n \n with Ada.Unchecked_Conversion;\n@@ -106,8 +110,8 @@ package System.Exceptions.Machine is\n    end record;\n \n    type Barrier_Cache_Type is record\n-      Sp          : uint32_t;\n-      Bitpattern  : uint32_t_array (0 .. 4);\n+      Sp         : uint32_t;\n+      Bitpattern : uint32_t_array (0 .. 4);\n    end record;\n \n    type Cleanup_Cache_Type is record\n@@ -122,8 +126,8 @@ package System.Exceptions.Machine is\n    end record;\n \n    type Unwind_Control_Block is record\n-      Class    : Exception_Class;\n-      Cleanup  : System.Address;\n+      Class   : Exception_Class;\n+      Cleanup : System.Address;\n \n       --  Caches\n       Unwinder_Cache : Unwinder_Cache_Type;\n@@ -178,4 +182,5 @@ package System.Exceptions.Machine is\n                          others => <>),\n           Occurrence => <>));\n    --  Allocate and initialize a machine occurrence\n+\n end System.Exceptions.Machine;"}, {"sha": "3700993c47f21202cefb1a8136c2facaf7066302", "filename": "gcc/ada/s-excmac-gcc.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-excmac-gcc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fs-excmac-gcc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-excmac-gcc.ads?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -29,6 +29,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n+--  Declaration of the machine exception and some associated facilities. The\n+--  machine exception is the object that is propagated by low level routines\n+--  and that contains the Ada exception occurrence.\n+\n --  This is the version using the GCC EH mechanism\n \n with Ada.Unchecked_Conversion;\n@@ -183,4 +187,5 @@ package System.Exceptions.Machine is\n                         others  => 0),\n          Occurrence => <>));\n    --  Allocate and initialize a machine occurrence\n+\n end System.Exceptions.Machine;"}, {"sha": "dbfbcd98e74c89384cc0da2ec6c923e6231eabc5", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -3903,13 +3903,17 @@ package body Sem_Attr is\n          Stmt := Attr;\n          while Present (Stmt) loop\n \n-            --  Locate the enclosing Loop_Invariant / Loop_Variant pragma\n+            --  Locate the corresponding enclosing pragma. Note that in the\n+            --  case of Assert[And_Cut] and Assume, we have already checked\n+            --  that the pragma appears in an appropriate loop location.\n \n             if Nkind (Original_Node (Stmt)) = N_Pragma\n-              and then\n-                Nam_In (Pragma_Name (Original_Node (Stmt)),\n-                        Name_Loop_Invariant,\n-                        Name_Loop_Variant)\n+              and then Nam_In (Pragma_Name (Original_Node (Stmt)),\n+                               Name_Loop_Invariant,\n+                               Name_Loop_Variant,\n+                               Name_Assert,\n+                               Name_Assert_And_Cut,\n+                               Name_Assume)\n             then\n                In_Loop_Assertion := True;\n \n@@ -3941,12 +3945,14 @@ package body Sem_Attr is\n             Stmt := Parent (Stmt);\n          end loop;\n \n-         --  Loop_Entry must appear within a Loop_Assertion pragma\n+            --  Loop_Entry must appear within a Loop_Assertion pragma (Assert,\n+            --  Assert_And_Cut, Assume count as loop assertion pragmas for this\n+            --  purpose if they appear in an appropriate location in a loop,\n+            --  which was already checked by the top level pragma circuit).\n \n          if not In_Loop_Assertion then\n             Error_Attr\n-              (\"attribute % must appear within pragma Loop_Variant or \" &\n-               \"Loop_Invariant\", N);\n+              (\"attribute % must appear within appropriate pragma\", N);\n          end if;\n \n          --  A Loop_Entry that applies to a given loop statement shall not"}, {"sha": "c7488550677f3aa3ac22a378d8875cbb5546678a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -4074,14 +4074,22 @@ package body Sem_Prag is\n          ---------------------\n \n          procedure Placement_Error (Constr : Node_Id) is\n+            LA : constant String := \" with Loop_Entry\";\n          begin\n+            if Prag_Id = Pragma_Assert then\n+               Error_Msg_String (1 .. LA'Length) := LA;\n+               Error_Msg_Strlen := LA'Length;\n+            else\n+               Error_Msg_Strlen := 0;\n+            end if;\n+\n             if Nkind (Constr) = N_Pragma then\n                Error_Pragma\n-                 (\"pragma % must appear immediately within the statements \"\n+                 (\"pragma %~ must appear immediately within the statements \"\n                   & \"of a loop\");\n             else\n                Error_Pragma_Arg\n-                 (\"block containing pragma % must appear immediately within \"\n+                 (\"block containing pragma %~ must appear immediately within \"\n                   & \"the statements of a loop\", Constr);\n             end if;\n          end Placement_Error;\n@@ -9915,6 +9923,48 @@ package body Sem_Prag is\n             Expr : Node_Id;\n             Newa : List_Id;\n \n+            Has_Loop_Entry : Boolean;\n+            --  Set True by\n+\n+            function Contains_Loop_Entry return Boolean;\n+            --  Tests if Expr contains a Loop_Entry attribute reference\n+\n+            -------------------------\n+            -- Contains_Loop_Entry --\n+            -------------------------\n+\n+            function Contains_Loop_Entry return Boolean is\n+               function Process (N : Node_Id) return Traverse_Result;\n+               --  Process function for traversal to look for Loop_Entry\n+\n+               -------------\n+               -- Process --\n+               -------------\n+\n+               function Process (N : Node_Id) return Traverse_Result is\n+               begin\n+                  if Nkind (N) = N_Attribute_Reference\n+                    and then Attribute_Name (N) = Name_Loop_Entry\n+                  then\n+                     Has_Loop_Entry := True;\n+                     return Abandon;\n+                  else\n+                     return OK;\n+                  end if;\n+               end Process;\n+\n+               procedure Traverse is new Traverse_Proc (Process);\n+\n+            --  Start of processing for Contains_Loop_Entry\n+\n+            begin\n+               Has_Loop_Entry := False;\n+               Traverse (Expr);\n+               return Has_Loop_Entry;\n+            end Contains_Loop_Entry;\n+\n+         --  Start of processing for Assert\n+\n          begin\n             --  Assert is an Ada 2005 RM-defined pragma\n \n@@ -9931,11 +9981,14 @@ package body Sem_Prag is\n             Check_At_Most_N_Arguments (2);\n             Check_Arg_Order ((Name_Check, Name_Message));\n             Check_Optional_Identifier (Arg1, Name_Check);\n+            Expr := Get_Pragma_Arg (Arg1);\n \n-            --  Special processing for Loop_Invariant\n-\n-            if Prag_Id = Pragma_Loop_Invariant then\n+            --  Special processing for Loop_Invariant or for other cases if\n+            --  a Loop_Entry attribute is present.\n \n+            if Prag_Id = Pragma_Loop_Invariant\n+              or else Contains_Loop_Entry\n+            then\n                --  Check restricted placement, must be within a loop\n \n                Check_Loop_Pragma_Placement;\n@@ -9959,7 +10012,6 @@ package body Sem_Prag is\n             --  Assume, or Assert_And_Cut pragma can be retrieved from the\n             --  pragma kind of Original_Node(N).\n \n-            Expr := Get_Pragma_Arg (Arg1);\n             Newa := New_List (\n               Make_Pragma_Argument_Association (Loc,\n                 Expression => Make_Identifier (Loc, Pname)),"}, {"sha": "dac8dd809a890ebce9e4d08b19d88ad5b2a3a333", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65441a1ec0101063a6f5869bce40ed3cfb051f51/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=65441a1ec0101063a6f5869bce40ed3cfb051f51", "patch": "@@ -771,6 +771,7 @@ package body Sinput is\n \n       function Process (N : Node_Id) return Traverse_Result is\n          Orig : constant Node_Id := Original_Node (N);\n+\n       begin\n          if Sloc (Orig) < Min then\n             if Sloc (Orig) > No_Location then"}]}