{"sha": "fe9115101ea5e0af397001c68461041ac1faa0ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU5MTE1MTAxZWE1ZTBhZjM5NzAwMWM2ODQ2MTA0MWFjMWZhYTBlZQ==", "commit": {"author": {"name": "Nic Ferrier", "email": "nferrier@tapsellferrier.co.uk", "date": "2002-03-20T22:07:58Z"}, "committer": {"name": "Nic Ferrier", "email": "nferrier@gcc.gnu.org", "date": "2002-03-20T22:07:58Z"}, "message": "gcj.texi: @code{gcj} becomes @command{gcj}.\n\n        * gcj.texi: @code{gcj} becomes @command{gcj}.\n        @code{gcc} becomes @command{gcc}.\n        GcjRaw changed to gnu.gcc.RawData.\n\nFrom-SVN: r51092", "tree": {"sha": "bb5bf9deb450bfc930b2a6747011f360cebbd67c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb5bf9deb450bfc930b2a6747011f360cebbd67c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe9115101ea5e0af397001c68461041ac1faa0ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9115101ea5e0af397001c68461041ac1faa0ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe9115101ea5e0af397001c68461041ac1faa0ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe9115101ea5e0af397001c68461041ac1faa0ee/comments", "author": null, "committer": null, "parents": [{"sha": "71a833733ef29741deca3c90a5e9bae622a815e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a833733ef29741deca3c90a5e9bae622a815e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a833733ef29741deca3c90a5e9bae622a815e4"}], "stats": {"total": 123, "additions": 65, "deletions": 58}, "files": [{"sha": "ebbdc1dcf2cfd9485a0fe724485c0ca1a01973be", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9115101ea5e0af397001c68461041ac1faa0ee/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9115101ea5e0af397001c68461041ac1faa0ee/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fe9115101ea5e0af397001c68461041ac1faa0ee", "patch": "@@ -1,3 +1,9 @@\n+2002-03-20  Nic Ferrier  <nferrier@tapsellferrier.co.uk>\n+\n+       \t* gcj.texi: @code{gcj} becomes @command{gcj}. \n+\t@code{gcc} becomes @command{gcc}. \n+        GcjRaw changed to gnu.gcc.RawData.\n+\t\n 2002-03-20  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* decl.c (start_java_method): Use new hook."}, {"sha": "b6067ce545b131ec42174e1f04a6daa2ee5f46af", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 59, "deletions": 58, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe9115101ea5e0af397001c68461041ac1faa0ee/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe9115101ea5e0af397001c68461041ac1faa0ee/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=fe9115101ea5e0af397001c68461041ac1faa0ee", "patch": "@@ -107,16 +107,16 @@ texts being (a) (see below), and with the Back-Cover Texts being (b)\n @node Top\n @top Introduction\n \n-This manual describes how to use @code{gcj}, the GNU compiler for the\n-Java programming language.  @code{gcj} can generate both @file{.class}\n+This manual describes how to use @command{gcj}, the GNU compiler for the\n+Java programming language.  @command{gcj} can generate both @file{.class}\n files and object files, and it can read both Java source code and\n @file{.class} files.\n \n @menu\n * Copying::\t\tThe GNU General Public License\n * GNU Free Documentation License::\n \t\t\tHow you can share and copy this manual\n-* Invoking gcj::\tCompiler options supported by @code{gcj}\n+* Invoking gcj::\tCompiler options supported by @command{gcj}\n * Compatibility::\tCompatibility between gcj and other tools for Java\n * Invoking gcjh::       Generate header files from class files\n * Invoking jv-scan::    Print information about source files\n@@ -156,10 +156,10 @@ and the Info entries for @file{gcj} and @file{gcc}.\n \n @c man begin DESCRIPTION gcj\n \n-As @code{gcj} is just another front end to @code{gcc}, it supports many\n+As @command{gcj} is just another front end to @command{gcc}, it supports many\n of the same options as gcc.  @xref{Option Summary, , Option Summary,\n gcc, Using the GNU Compiler Collection (GCC)}.  This manual only documents the\n-options specific to @code{gcj}.\n+options specific to @command{gcj}.\n \n @c man end\n \n@@ -177,7 +177,7 @@ options specific to @code{gcj}.\n @node Input and output files\n @section Input and output files\n \n-A @code{gcj} command is like a @code{gcc} command, in that it\n+A @command{gcj} command is like a @command{gcc} command, in that it\n consists of a number of options and file names.  The following kinds\n of input file names are supported:\n \n@@ -198,17 +198,17 @@ Each named file is compiled, just as if it had been on the command line.\n @item @var{library}.a\n @itemx @var{library}.so\n @itemx -l@var{libname}\n-Libraries to use when linking.  See the @code{gcc} manual.\n+Libraries to use when linking.  See the @command{gcc} manual.\n @end table\n \n-You can specify more than one input file on the @code{gcj} command line,\n+You can specify more than one input file on the @command{gcj} command line,\n in which case they will all be compiled.  If you specify a\n @code{-o @var{FILENAME}}\n option, all the input files will be compiled together, producing a\n single output file, named @var{FILENAME}.\n This is allowed even when using @code{-S} or @code{-c},\n but not when using @code{-C} or @code{-R}.\n-(This is an extension beyond the what plain @code{gcc} allows.)\n+(This is an extension beyond the what plain @command{gcc} allows.)\n (If more than one input file is specified, all must currently\n be @code{.java} files, though we hope to fix this.)\n \n@@ -217,20 +217,20 @@ be @code{.java} files, though we hope to fix this.)\n \n @cindex class path\n \n-@code{gcj} has options to control where it looks to find files it needs.\n-For instance, @code{gcj} might need to load a class that is referenced\n+@command{gcj} has options to control where it looks to find files it needs.\n+For instance, @command{gcj} might need to load a class that is referenced\n by the file it has been asked to compile.  Like other compilers for the\n-Java language, @code{gcj} has a notion of a @dfn{class path}.  There are\n+Java language, @command{gcj} has a notion of a @dfn{class path}.  There are\n several options and environment variables which can be used to\n-manipulate the class path.  When @code{gcj} looks for a given class, it\n+manipulate the class path.  When @command{gcj} looks for a given class, it\n searches the class path looking for matching @file{.class} or\n-@file{.java} file.  @code{gcj} comes with a built-in class path which\n+@file{.java} file.  @command{gcj} comes with a built-in class path which\n points at the installed @file{libgcj.jar}, a file which contains all the\n standard classes.\n \n In the below, a directory or path component can refer either to an\n actual directory on the filesystem, or to a @file{.zip} or @file{.jar}\n-file, which @code{gcj} will search as if it is a directory.\n+file, which @command{gcj} will search as if it is a directory.\n \n @table @gcctabopt\n @item -I@var{dir}\n@@ -272,7 +272,7 @@ Finally, if @code{--bootclasspath} was specified, append its value.\n Otherwise, append the built-in system directory, @file{libgcj.jar}.\n @end itemize\n \n-The classfile built by @code{gcj} for the class @code{java.lang.Object}\n+The classfile built by @command{gcj} for the class @code{java.lang.Object}\n (and placed in @code{libgcj.jar}) contains a special zero length\n attribute @code{gnu.gcj.gcj-compiled}. The compiler looks for this\n attribute when loading @code{java.lang.Object} and will report an error\n@@ -291,53 +291,53 @@ issue an error if it isn't found.\n @section Encodings\n \n The Java programming language uses Unicode throughout.  In an effort to\n-integrate well with other locales, @code{gcj} allows @file{.java} files\n-to be written using almost any encoding.  @code{gcj} knows how to\n+integrate well with other locales, @command{gcj} allows @file{.java} files\n+to be written using almost any encoding.  @command{gcj} knows how to\n convert these encodings into its internal encoding at compile time.\n \n You can use the @code{--encoding=@var{NAME}} option to specify an\n encoding (of a particular character set) to use for source files.  If\n this is not specified, the default encoding comes from your current\n locale.  If your host system has insufficient locale support, then\n-@code{gcj} assumes the default encoding to be the @samp{UTF-8} encoding\n+@command{gcj} assumes the default encoding to be the @samp{UTF-8} encoding\n of Unicode.\n \n-To implement @code{--encoding}, @code{gcj} simply uses the host\n+To implement @code{--encoding}, @command{gcj} simply uses the host\n platform's @code{iconv} conversion routine.  This means that in practice\n-@code{gcj} is limited by the capabilities of the host platform.\n+@command{gcj} is limited by the capabilities of the host platform.\n \n The names allowed for the argument @code{--encoding} vary from platform\n to platform (since they are not standardized anywhere).  However,\n-@code{gcj} implements the encoding named @samp{UTF-8} internally, so if\n+@command{gcj} implements the encoding named @samp{UTF-8} internally, so if\n you choose to use this for your source files you can be assured that it\n will work on every host.\n \n \n @node Warnings\n @section Warnings\n \n-@code{gcj} implements several warnings.  As with other generic\n-@code{gcc} warnings, if an option of the form @code{-Wfoo} enables a\n+@command{gcj} implements several warnings.  As with other generic\n+@command{gcc} warnings, if an option of the form @code{-Wfoo} enables a\n warning, then @code{-Wno-foo} will disable it.  Here we've chosen to\n document the form of the warning which will have an effect -- the\n default being the opposite of what is listed.\n \n @table @gcctabopt\n @item -Wredundant-modifiers\n-With this flag, @code{gcj} will warn about redundant modifiers.  For\n+With this flag, @command{gcj} will warn about redundant modifiers.  For\n instance, it will warn if an interface method is declared @code{public}.\n \n @item -Wextraneous-semicolon\n-This causes @code{gcj} to warn about empty statements.  Empty statements\n+This causes @command{gcj} to warn about empty statements.  Empty statements\n have been deprecated.\n \n @item -Wno-out-of-date\n-This option will cause @code{gcj} not to warn when a source file is\n-newer than its matching class file.  By default @code{gcj} will warn\n+This option will cause @command{gcj} not to warn when a source file is\n+newer than its matching class file.  By default @command{gcj} will warn\n about this.\n \n @item -Wunused\n-This is the same as @code{gcc}'s @code{-Wunused}.\n+This is the same as @command{gcc}'s @code{-Wunused}.\n \n @item -Wall\n This is the same as @code{-Wredundant-modifiers -Wextraneous-semicolon\n@@ -348,8 +348,8 @@ This is the same as @code{-Wredundant-modifiers -Wextraneous-semicolon\n @node Code Generation\n @section Code Generation\n \n-In addition to the many @code{gcc} options controlling code generation,\n-@code{gcj} has several options specific to itself.\n+In addition to the many @command{gcc} options controlling code generation,\n+@command{gcj} has several options specific to itself.\n \n @table @gcctabopt\n @item --main=@var{CLASSNAME}\n@@ -369,11 +369,11 @@ are initialized at the program's startup and can be retrieved at runtime\n using the @code{java.lang.System.getProperty} method.\n \n @item -C\n-This option is used to tell @code{gcj} to generate bytecode\n+This option is used to tell @command{gcj} to generate bytecode\n (@file{.class} files) rather than object code.\n \n @item -R @var{resource-name}\n-This option is used to tell @code{gcj} to compile the contents of a\n+This option is used to tell @command{gcj} to compile the contents of a\n given file to object code so it may be accessed at runtime with the core\n protocol handler as @var{core:/resource-name}.\n \n@@ -384,7 +384,7 @@ default they will be put in subdirectories of the current working\n directory.\n \n @item -fno-bounds-check\n-By default, @code{gcj} generates code which checks the bounds of all\n+By default, @command{gcj} generates code which checks the bounds of all\n array indexing operations.  With this option, these checks are omitted, which\n can improve performance for code that uses arrays extensively.  Note that this \n can result in unpredictable behavior if the code in question actually does \n@@ -401,16 +401,16 @@ It is safe to use this option if you are sure your code will never throw an\n @code{ArrayStoreException}.\n \n @item -fjni\n-With @code{gcj} there are two options for writing native methods: CNI\n-and JNI@.  By default @code{gcj} assumes you are using CNI@.  If you are\n+With @command{gcj} there are two options for writing native methods: CNI\n+and JNI@.  By default @command{gcj} assumes you are using CNI@.  If you are\n compiling a class with native methods, and these methods are implemented\n using JNI, then you must use @code{-fjni}.  This option causes\n-@code{gcj} to generate stubs which will invoke the underlying JNI\n+@command{gcj} to generate stubs which will invoke the underlying JNI\n methods.\n \n @item -fno-optimize-static-class-initialization\n When the optimization level is greather or equal to @code{-O2},\n-@code{gcj} will try to optimize the way calls into the runtime are made\n+@command{gcj} will try to optimize the way calls into the runtime are made\n to initialize static classes upon their first use (this optimization\n isn't carried out if @code{-C} was specified.) When compiling to native\n code, @code{-fno-optimize-static-class-initialization} will turn this\n@@ -421,23 +421,23 @@ optimization off, regardless of the optimization level in use.\n @node Configure-time Options\n @section Configure-time Options\n \n-Some @code{gcj} code generations options affect the resulting ABI, and\n+Some @command{gcj} code generations options affect the resulting ABI, and\n so can only be meaningfully given when @code{libgcj}, the runtime\n package, is configured.  @code{libgcj} puts the appropriate options from\n-this group into a @samp{spec} file which is read by @code{gcj}.  These\n+this group into a @samp{spec} file which is read by @command{gcj}.  These\n options are listed here for completeness; if you are using @code{libgcj}\n then you won't want to touch these options.\n \n @table @gcctabopt\n @item -fuse-boehm-gc\n This enables the use of the Boehm GC bitmap marking code.  In particular\n-this causes @code{gcj} to put an object marking descriptor into each\n+this causes @command{gcj} to put an object marking descriptor into each\n vtable.\n \n @item -fhash-synchronization\n By default, synchronization data (the data used for @code{synchronize},\n @code{wait}, and @code{notify}) is pointed to by a word in each object.\n-With this option @code{gcj} assumes that this information is stored in a\n+With this option @command{gcj} assumes that this information is stored in a\n hash table and not in the object itself.\n \n @item -fuse-divide-subroutine\n@@ -458,16 +458,16 @@ processor.\n @chapter Compatibility with the Java Platform\n \n As we believe it is important that the Java platform not be fragmented,\n-@code{gcj} and @code{libgcj} try to conform to the relevant Java\n+@command{gcj} and @code{libgcj} try to conform to the relevant Java\n specifications.  However, limited manpower and incomplete and unclear\n documentation work against us.  So, there are caveats to using\n-@code{gcj}.\n+@command{gcj}.\n \n This list of compatibility issues is by no means complete.\n \n @itemize @bullet\n @item\n-@code{gcj} implements the JDK 1.1 language.  It supports inner classes,\n+@command{gcj} implements the JDK 1.1 language.  It supports inner classes,\n though these are known to still be buggy.  It does not yet support the\n Java 2 @code{strictfp} keyword (it recognizes the keyword but ignores\n it).\n@@ -552,7 +552,7 @@ This is ignored in JNI mode.\n @itemx -I@var{directory}\n @itemx -d @var{directory}\n @itemx -o @var{file}\n-These options are all identical to the corresponding @code{gcj} options.\n+These options are all identical to the corresponding @command{gcj} options.\n \n @item -o @var{file}\n Sets the output file name.  This cannot be used if there is more than\n@@ -621,7 +621,7 @@ This prints a complexity measure, related to cyclomatic complexity, for\n each input file.\n \n @item --encoding=@var{name}\n-This works like the corresponding @code{gcj} option.\n+This works like the corresponding @command{gcj} option.\n \n @item --print-main\n This prints the name of the class in this file containing a @code{main}\n@@ -687,7 +687,7 @@ feature is very incomplete.\n @itemx --CLASSPATH=@var{path}\n @itemx -I@var{directory}\n @itemx -o @var{file}\n-These options as the same as the corresponding @code{gcj} options.\n+These options as the same as the corresponding @command{gcj} options.\n \n @item --help\n Print help, then exit.\n@@ -726,7 +726,7 @@ and the Info entries for @file{gcj} and @file{gcc}.\n @code{gij} is a Java bytecode interpreter included with @code{libgcj}.\n @code{gij} is not available on every platform; porting it requires a\n small amount of assembly programming which has not been done for all the\n-targets supported by @code{gcj}.\n+targets supported by @command{gcj}.\n \n The primary argument to @code{gij} is the name of a class or, with\n @code{-jar}, a jar file.  Options before this argument are interpreted\n@@ -883,7 +883,7 @@ Classes are organized in a package hierarchy.\n All of the listed attributes are also true of C++, though C++ has\n extra features (for example in C++ objects may be allocated not just\n on the heap, but also statically or in a local stack frame).  Because\n-@code{gcj} uses the same compiler technology as G++ (the GNU\n+@command{gcj} uses the same compiler technology as G++ (the GNU\n C++ compiler), it is possible to make the intersection of the two\n languages use the same ABI (object representation and calling\n conventions).  The key idea in CNI is that Java objects are C++\n@@ -1530,9 +1530,10 @@ jint\n @end example\n \n But this restriction can cause a problem so @acronym{CNI} includes the\n-@code{GcjRaw} class.  The @code{GcjRaw} class is a @dfn{non-scanned reference} \n-type.  In other words variables declared of type @code{GcjRaw} can\n-contain any data and are not checked by the compiler in any way.\n+@code{gnu.gcj.RawData} class.  The @code{RawData} class is a\n+@dfn{non-scanned reference} type.  In other words variables declared\n+of type @code{RawData} can contain any data and are not checked by the\n+compiler in any way.\n \n This means that you can put C/C++ data structures (including classes)\n in your @acronym{CNI} classes, as long as you use the appropriate cast.\n@@ -1546,7 +1547,7 @@ class ::MyClass : public java::lang::Object\n    GcjRaw string;\n \n    MyClass ();\n-   GcjRaw getText ();\n+   gnu.gcj.RawData getText ();\n    void printText ();\n @}\n \n@@ -1556,7 +1557,7 @@ class ::MyClass : public java::lang::Object\n    string = text;\n @}\n \n-GcjRaw\n+gnu.gcj.RawData\n ::MyClass::getText ()\n @{\n    return string;\n@@ -1674,7 +1675,7 @@ This is equivalent to wrapping the entire method body in a\n (Alternatively, an implementation could require the caller to do\n the synchronization.  This is not practical for a compiler, because\n each virtual method call would have to test at run-time if\n-synchronization is needed.)  Since in @code{gcj}\n+synchronization is needed.)  Since in @command{gcj}\n the @code{synchronized} attribute is handled by the\n method implementation, it is up to the programmer\n of a synchronized native method to handle the synchronization\n@@ -1709,14 +1710,14 @@ are as in JNI@.\n @node Resources\n @chapter Resources\n \n-While writing @code{gcj} and @code{libgcj} we have, of course, relied\n+While writing @command{gcj} and @code{libgcj} we have, of course, relied\n heavily on documentation from Sun Microsystems.  In particular we have\n used The Java Language Specification (both first and second editions),\n the Java Class Libraries (volumes one and two), and the Java Virtual\n Machine Specification.  In addition we've used the online documentation\n at @uref{http://java.sun.com/}.\n \n-The current @code{gcj} home page is\n+The current @command{gcj} home page is\n @uref{http://gcc.gnu.org/java/}.\n \n For more information on gcc, see @uref{http://gcc.gnu.org/}."}]}