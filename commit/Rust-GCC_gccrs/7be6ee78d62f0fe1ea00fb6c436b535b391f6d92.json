{"sha": "7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlNmVlNzhkNjJmMGZlMWVhMDBmYjZjNDM2YjUzNWIzOTFmNmQ5Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-01T06:05:01Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-04-01T06:05:01Z"}, "message": "re PR middle-end/85090 (wrong code with -O2 -fno-tree-dominator-opts -mavx512f -fira-algorithm=priority)\n\n\tPR middle-end/85090\n\t* config/i386/sse.md (V): Add V64QI and V32HI for TARGET_AVX512F.\n\t(V_128_256): New mode iterator.\n\t(*avx512dq_vextract<shuffletype>64x2_1 splitter): New define_split.\n\t(*avx512f_vextract<shuffletype>32x4_1 splitter): Likewise.\n\t(xop_pcmov_<mode><avxsizesuffix>): Use V_128_256 mode iterator instead\n\tof V.\n\t* config/i386/i386.c (ix86_expand_vector_set): Improve V32HImode and\n\tV64QImode expansion for !TARGET_AVX512BW && TARGET_AVX512F.\n\n\t* gcc.target/i386/avx512f-pr85090-1.c: New test.\n\t* gcc.target/i386/avx512f-pr85090-2.c: New test.\n\t* gcc.target/i386/avx512f-pr85090-3.c: New test.\n\t* gcc.target/i386/avx512bw-pr85090-2.c: New test.\n\t* gcc.target/i386/avx512bw-pr85090-3.c: New test.\n\nFrom-SVN: r258994", "tree": {"sha": "1eddafeccf10766f89a19b13a94ae5edc5b257ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eddafeccf10766f89a19b13a94ae5edc5b257ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/comments", "author": null, "committer": null, "parents": [{"sha": "0a4800de9fbc55c63c757af0dacf76657de46bff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4800de9fbc55c63c757af0dacf76657de46bff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4800de9fbc55c63c757af0dacf76657de46bff"}], "stats": {"total": 309, "additions": 290, "deletions": 19}, "files": [{"sha": "ad75aa20ec2c49c35681805d2edcc66eab2bf221", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -1,3 +1,15 @@\n+2018-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/85090\n+\t* config/i386/sse.md (V): Add V64QI and V32HI for TARGET_AVX512F.\n+\t(V_128_256): New mode iterator.\n+\t(*avx512dq_vextract<shuffletype>64x2_1 splitter): New define_split.\n+\t(*avx512f_vextract<shuffletype>32x4_1 splitter): Likewise.\n+\t(xop_pcmov_<mode><avxsizesuffix>): Use V_128_256 mode iterator instead\n+\tof V.\n+\t* config/i386/i386.c (ix86_expand_vector_set): Improve V32HImode and\n+\tV64QImode expansion for !TARGET_AVX512BW && TARGET_AVX512F.\n+\n 2018-03-31  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/83315\n@@ -1123,7 +1135,7 @@\n \tPR target/84807\n \t* config/i386/i386.opt: Replace Enforcment with Enforcement.\n \n-2018-03-10  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-10  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/84620\n \t* dwarf2out.h (dw_val_class): Add dw_val_class_symview.\n@@ -1171,7 +1183,7 @@\n \t(builtin_access::generic_overlap): Be prepared to handle non-array\n \tbase objects.\n \n-2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR rtl-optimization/84682\n \t* lra-constraints.c (process_address_1): Check is_address flag\n@@ -1302,7 +1314,7 @@\n \t* doc/gcov.texi: Document usage of profile files.\n \t* gcov-io.h: Document changes in the format.\n \n-2018-03-08  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-08  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR debug/84404\n \tPR debug/84408"}, {"sha": "337545f127ccd1019bc4c110e89d5cb7383e99f7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 50, "deletions": 2, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -44085,21 +44085,69 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       break;\n \n     case E_V32HImode:\n-      if (TARGET_AVX512F && TARGET_AVX512BW)\n+      if (TARGET_AVX512BW)\n \t{\n \t  mmode = SImode;\n \t  gen_blendm = gen_avx512bw_blendmv32hi;\n \t}\n+      else if (TARGET_AVX512F)\n+\t{\n+\t  half_mode = E_V8HImode;\n+\t  n = 8;\n+\t  goto quarter;\n+\t}\n       break;\n \n     case E_V64QImode:\n-      if (TARGET_AVX512F && TARGET_AVX512BW)\n+      if (TARGET_AVX512BW)\n \t{\n \t  mmode = DImode;\n \t  gen_blendm = gen_avx512bw_blendmv64qi;\n \t}\n+      else if (TARGET_AVX512F)\n+\t{\n+\t  half_mode = E_V16QImode;\n+\t  n = 16;\n+\t  goto quarter;\n+\t}\n       break;\n \n+quarter:\n+      /* Compute offset.  */\n+      i = elt / n;\n+      elt %= n;\n+\n+      gcc_assert (i <= 3);\n+\n+      {\n+\t/* Extract the quarter.  */\n+\ttmp = gen_reg_rtx (V4SImode);\n+\trtx tmp2 = gen_lowpart (V16SImode, target);\n+\trtx mask = gen_reg_rtx (QImode);\n+\n+\temit_move_insn (mask, constm1_rtx);\n+\temit_insn (gen_avx512f_vextracti32x4_mask (tmp, tmp2, GEN_INT (i),\n+\t\t\t\t\t\t   tmp, mask));\n+\n+\ttmp2 = gen_reg_rtx (half_mode);\n+\temit_move_insn (tmp2, gen_lowpart (half_mode, tmp));\n+\ttmp = tmp2;\n+\n+\t/* Put val in tmp at elt.  */\n+\tix86_expand_vector_set (false, tmp, val, elt);\n+\n+\t/* Put it back.  */\n+\ttmp2 = gen_reg_rtx (V16SImode);\n+\trtx tmp3 = gen_lowpart (V16SImode, target);\n+\tmask = gen_reg_rtx (HImode);\n+\temit_move_insn (mask, constm1_rtx);\n+\ttmp = gen_lowpart (V4SImode, tmp);\n+\temit_insn (gen_avx512f_vinserti32x4_mask (tmp2, tmp3, tmp, GEN_INT (i),\n+\t\t\t\t\t\t  tmp3, mask));\n+\temit_move_insn (target, gen_lowpart (mode, tmp2));\n+      }\n+      return;\n+\n     default:\n       break;\n     }"}, {"sha": "34c007f8f43ca4013059e7592e51f1e68951e097", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -229,8 +229,8 @@\n \n ;; All vector modes\n (define_mode_iterator V\n-  [(V32QI \"TARGET_AVX\") V16QI\n-   (V16HI \"TARGET_AVX\") V8HI\n+  [(V64QI \"TARGET_AVX512F\") (V32QI \"TARGET_AVX\") V16QI\n+   (V32HI \"TARGET_AVX512F\") (V16HI \"TARGET_AVX\") V8HI\n    (V16SI \"TARGET_AVX512F\") (V8SI \"TARGET_AVX\") V4SI\n    (V8DI \"TARGET_AVX512F\")  (V4DI \"TARGET_AVX\") V2DI\n    (V16SF \"TARGET_AVX512F\") (V8SF \"TARGET_AVX\") V4SF\n@@ -244,6 +244,10 @@\n (define_mode_iterator V_256\n   [V32QI V16HI V8SI V4DI V8SF V4DF])\n \n+;; All 128bit and 256bit vector modes\n+(define_mode_iterator V_128_256\n+  [V32QI V16QI V16HI V8HI V8SI V4SI V4DI V2DI V8SF V4SF V4DF V2DF])\n+\n ;; All 512bit vector modes\n (define_mode_iterator V_512 [V64QI V32HI V16SI V8DI V16SF V8DF])\n \n@@ -7351,6 +7355,15 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_split\n+  [(set (match_operand:<ssequartermode> 0 \"nonimmediate_operand\")\n+\t(vec_select:<ssequartermode>\n+\t  (match_operand:V8FI 1 \"register_operand\")\n+\t  (parallel [(const_int 0) (const_int 1)])))]\n+  \"TARGET_AVX512DQ && reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\")\n+\n (define_insn \"<mask_codefor>avx512f_vextract<shuffletype>32x4_1<mask_name>\"\n   [(set (match_operand:<ssequartermode> 0 \"<store_mask_predicate>\" \"=<store_mask_constraint>\")\n \t(vec_select:<ssequartermode>\n@@ -7374,6 +7387,16 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_split\n+  [(set (match_operand:<ssequartermode> 0 \"nonimmediate_operand\")\n+\t(vec_select:<ssequartermode>\n+\t  (match_operand:V16FI 1 \"register_operand\")\n+\t  (parallel [(const_int 0) (const_int 1)\n+\t\t     (const_int 2) (const_int 3)])))]\n+  \"TARGET_AVX512F && reload_completed\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"operands[1] = gen_lowpart (<ssequartermode>mode, operands[1]);\")\n+\n (define_mode_attr extract_type_2\n   [(V16SF \"avx512dq\") (V16SI \"avx512dq\") (V8DF \"avx512f\") (V8DI \"avx512f\")])\n \n@@ -16478,11 +16501,11 @@\n \n ;; XOP parallel XMM conditional moves\n (define_insn \"xop_pcmov_<mode><avxsizesuffix>\"\n-  [(set (match_operand:V 0 \"register_operand\" \"=x,x\")\n-\t(if_then_else:V\n-\t  (match_operand:V 3 \"nonimmediate_operand\" \"x,m\")\n-\t  (match_operand:V 1 \"register_operand\" \"x,x\")\n-\t  (match_operand:V 2 \"nonimmediate_operand\" \"xm,x\")))]\n+  [(set (match_operand:V_128_256 0 \"register_operand\" \"=x,x\")\n+\t(if_then_else:V_128_256\n+\t  (match_operand:V_128_256 3 \"nonimmediate_operand\" \"x,m\")\n+\t  (match_operand:V_128_256 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V_128_256 2 \"nonimmediate_operand\" \"xm,x\")))]\n   \"TARGET_XOP\"\n   \"vpcmov\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"sse4arg\")])"}, {"sha": "7fddf8c271a29cba07e8d87fb2c837242cbedc92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -1,4 +1,13 @@\n-2018-03-31  Alexandre Oliva <aoliva@redhat.com>\n+2018-04-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/85090\n+\t* gcc.target/i386/avx512f-pr85090-1.c: New test.\n+\t* gcc.target/i386/avx512f-pr85090-2.c: New test.\n+\t* gcc.target/i386/avx512f-pr85090-3.c: New test.\n+\t* gcc.target/i386/avx512bw-pr85090-2.c: New test.\n+\t* gcc.target/i386/avx512bw-pr85090-3.c: New test.\n+\n+2018-03-31  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/85027\n \t* g++.dg/pr85027.C: New.\n@@ -101,7 +110,7 @@\n \tPR sanitizer/85081\n \t* g++.dg/asan/pr85081.C: New test.\n \n-2018-03-28  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-28  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84789\n \t* g++.dg/template/pr84789.C: Adjust for testing with\n@@ -376,7 +385,7 @@\n \tPR sanitizer/85029\n \t* g++.dg/ubsan/pr85029.C: New test.\n \n-2018-03-23  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-23  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/71251\n \t* g++.dg/cpp0x/pr71251.C: New.\n@@ -440,7 +449,7 @@\n \n \t* gcc.dg/builtin-tgmath-3.c: New test.\n \n-2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-21  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/71965\n \t* g++.dg/concepts/pr71965.C: New.\n@@ -1072,7 +1081,7 @@\n \t* gcc.dg/Wrestrict-10.c: New test.\n \t* gcc.dg/Wrestrict-11.c: New test.\n \n-2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-09  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR rtl-optimization/84682\n \t* gcc.dg/torture/pr84682-1.c: New.\n@@ -1144,7 +1153,7 @@\n \t* gcc.dg/torture/pr84746.c: New testcase.\n \n \n-2018-03-08  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-08  Alexandre Oliva  <aoliva@redhat.com>\n \tPR debug/84404\n \tPR debug/84408\n \t* gcc.dg/graphite/pr84404.c: New.\n@@ -1236,7 +1245,7 @@\n \tPR tree-optimization/84687\n \t* gcc.dg/pr84687.c: New test.\n \n-2018-03-06  Alexandre Oliva <aoliva@redhat.com>\n+2018-03-06  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR c++/84231\n \t* g++.dg/pr84231.C: New."}, {"sha": "b93ae4b071f14e007f5183467b8b1e3f7c736e39", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr85090-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-2.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/85090 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mtune=intel -masm=att\" } */\n+\n+typedef short V __attribute__((vector_size (64)));\n+\n+V\n+f1 (V x, int y)\n+{\n+  x[0] = y;\n+  return x;\n+}\n+\n+V\n+f2 (V x, int y)\n+{\n+  x[7] = y;\n+  return x;\n+}\n+\n+V\n+f3 (V x, int y)\n+{\n+  x[11] = y;\n+  return x;\n+}\n+\n+V\n+f4 (V x, int y)\n+{\n+  x[29] = y;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastw\\t\" 4 } } */"}, {"sha": "9e32a31edd46934e9e16f62ab70949815c981439", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr85090-3.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr85090-3.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/85090 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512bw -mtune=intel -masm=att\" } */\n+\n+typedef signed char V __attribute__((vector_size (64)));\n+\n+V\n+f1 (V x, int y)\n+{\n+  x[0] = y;\n+  return x;\n+}\n+\n+V\n+f2 (V x, int y)\n+{\n+  x[15] = y;\n+  return x;\n+}\n+\n+V\n+f3 (V x, int y)\n+{\n+  x[22] = y;\n+  return x;\n+}\n+\n+V\n+f4 (V x, int y)\n+{\n+  x[59] = y;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpbroadcastb\\t\" 4 } } */"}, {"sha": "f5c0feec319b7575a31082ed42e794eea284fb0c", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr85090-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-1.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -0,0 +1,35 @@\n+/* PR middle-end/85090 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -mavx512f -fira-algorithm=priority\" } */\n+\n+#include \"avx512f-check.h\"\n+\n+typedef unsigned short U __attribute__ ((vector_size (64)));\n+typedef unsigned int V __attribute__ ((vector_size (64)));\n+typedef unsigned __int128 W __attribute__ ((vector_size (64)));\n+\n+V h;\n+W d, e, g;\n+U f;\n+\n+static __attribute__((noipa)) U\n+foo (U i)\n+{\n+  f >>= ((U)d > f) & 1;\n+  i[0] <<= 1;\n+  e = (7 & -d) << (7 & -(g & 7));\n+  return i;\n+}\n+\n+void\n+avx512f_test (void)\n+{\n+  U x;\n+  for (unsigned i = 0; i < 32; i++)\n+    x[i] = i;\n+  x = foo (x);\n+  for (unsigned i = 0; i < 32; i++)\n+    if (x[i] != i)\n+      abort ();\n+}"}, {"sha": "968d2f55c213baaeb16562c6a035d5f2290c4fd4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr85090-2.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-2.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/85090 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512bw -mtune=intel -masm=att\" } */\n+\n+typedef short V __attribute__((vector_size (64)));\n+\n+V\n+f1 (V x, int y)\n+{\n+  x[0] = y;\n+  return x;\n+}\n+\n+V\n+f2 (V x, int y)\n+{\n+  x[7] = y;\n+  return x;\n+}\n+\n+V\n+f3 (V x, int y)\n+{\n+  x[11] = y;\n+  return x;\n+}\n+\n+V\n+f4 (V x, int y)\n+{\n+  x[29] = y;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpinsrw\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\t\" 4 } } */"}, {"sha": "ffe515474d28a868090a412708dd7cfd4a62e740", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr85090-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be6ee78d62f0fe1ea00fb6c436b535b391f6d92/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr85090-3.c?ref=7be6ee78d62f0fe1ea00fb6c436b535b391f6d92", "patch": "@@ -0,0 +1,37 @@\n+/* PR middle-end/85090 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512f -mno-avx512bw -mtune=intel -masm=att\" } */\n+\n+typedef signed char V __attribute__((vector_size (64)));\n+\n+V\n+f1 (V x, int y)\n+{\n+  x[0] = y;\n+  return x;\n+}\n+\n+V\n+f2 (V x, int y)\n+{\n+  x[15] = y;\n+  return x;\n+}\n+\n+V\n+f3 (V x, int y)\n+{\n+  x[22] = y;\n+  return x;\n+}\n+\n+V\n+f4 (V x, int y)\n+{\n+  x[59] = y;\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpinsrb\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vextracti32x4\\t\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vinserti32x4\\t\" 4 } } */"}]}