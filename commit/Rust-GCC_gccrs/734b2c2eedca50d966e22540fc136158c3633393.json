{"sha": "734b2c2eedca50d966e22540fc136158c3633393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0YjJjMmVlZGNhNTBkOTY2ZTIyNTQwZmMxMzYxNThjMzYzMzM5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-15T20:53:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-16T22:06:31Z"}, "message": "libstdc++: Add missing 'constexpr' to std::tuple [PR102270]\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/102270\n\t* include/std/tuple (_Head_base, _Tuple_impl): Add\n\t_GLIBCXX20_CONSTEXPR to allocator-extended constructors.\n\t(tuple<>::swap(tuple&)): Add _GLIBCXX20_CONSTEXPR.\n\t* testsuite/20_util/tuple/cons/102270.C: New test.", "tree": {"sha": "acba6d3d33c5ed42d6b76af64ccd4132127f7aaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acba6d3d33c5ed42d6b76af64ccd4132127f7aaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/734b2c2eedca50d966e22540fc136158c3633393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734b2c2eedca50d966e22540fc136158c3633393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734b2c2eedca50d966e22540fc136158c3633393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734b2c2eedca50d966e22540fc136158c3633393/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67917f5df9d84f5aed3513b3931a82870d25135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e67917f5df9d84f5aed3513b3931a82870d25135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e67917f5df9d84f5aed3513b3931a82870d25135"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "6f0dc6346e1f32501a50f1e3d68b0562316b2938", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734b2c2eedca50d966e22540fc136158c3633393/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734b2c2eedca50d966e22540fc136158c3633393/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=734b2c2eedca50d966e22540fc136158c3633393", "patch": "@@ -95,10 +95,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_head_impl() { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n \t: _M_head_impl(allocator_arg, *__a._M_a) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n \t: _M_head_impl(*__a._M_a) { }\n \n@@ -108,11 +110,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_head_impl(std::forward<_UHead>(__uhead)) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))\n \t{ }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n@@ -142,26 +146,32 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         constexpr _Head_base(_UHead&& __h)\n \t: _Head(std::forward<_UHead>(__h)) { }\n \n+      _GLIBCXX20_CONSTEXPR\n       _Head_base(allocator_arg_t, __uses_alloc0)\n       : _Head() { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n \t: _Head(allocator_arg, *__a._M_a) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n \t: _Head(*__a._M_a) { }\n \n       template<typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc0, _UHead&& __uhead)\n \t: _Head(std::forward<_UHead>(__uhead)) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\n \t: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n@@ -194,10 +204,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_head_impl() { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)\n \t: _M_head_impl(allocator_arg, *__a._M_a) { }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)\n \t: _M_head_impl(*__a._M_a) { }\n \n@@ -207,11 +219,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_head_impl(std::forward<_UHead>(__uhead)) { }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))\n \t{ }\n \n       template<typename _Alloc, typename _UHead>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)\n \t: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }\n \n@@ -467,6 +481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{ }\n \n       template<typename _Alloc>\n+\t_GLIBCXX20_CONSTEXPR\n \t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n \t\t    const _Head& __head)\n \t: _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), __head)\n@@ -955,6 +970,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class tuple<>\n     {\n     public:\n+      _GLIBCXX20_CONSTEXPR\n       void swap(tuple&) noexcept { /* no-op */ }\n       // We need the default since we're going to define no-op\n       // allocator constructors."}, {"sha": "998329817c747ffab2c24dbf228670f1a23c6ef7", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/102270.C", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734b2c2eedca50d966e22540fc136158c3633393/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F102270.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734b2c2eedca50d966e22540fc136158c3633393/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F102270.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F102270.C?ref=734b2c2eedca50d966e22540fc136158c3633393", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <tuple>\n+\n+// PR libstdc++/102270 - std::tuple<>::swap missing constexpr specifier\n+\n+constexpr bool swap_empty_tuple()\n+{\n+  std::tuple<> t, u;\n+  t.swap(u);\n+  return true;\n+}\n+static_assert( swap_empty_tuple() );\n+\n+#include <testsuite_allocator.h>\n+\n+constexpr bool construct_using_allocator()\n+{\n+  using Alloc = __gnu_test::SimpleAllocator<int>;\n+\n+  Alloc a;\n+  const int i = 0;\n+\n+  struct X0a {\n+    using allocator_type = Alloc;\n+    /* not constexpr */ X0a() { }\n+    constexpr X0a(allocator_type) { }\n+  };\n+  std::tuple<X0a> t0a(std::allocator_arg, a);\n+  std::tuple<X0a, X0a> t00a(std::allocator_arg, a);\n+\n+  struct X0b {\n+    using allocator_type = Alloc;\n+    /* not constexpr */ X0b() { }\n+    constexpr X0b(std::allocator_arg_t, allocator_type) { }\n+  };\n+  std::tuple<X0b> t0b(std::allocator_arg, a);\n+  std::tuple<X0b, X0b> t00b(std::allocator_arg, a);\n+\n+  struct X1a {\n+    using allocator_type = Alloc;\n+    /* not constexpr */ X1a(int) { }\n+    constexpr X1a(int, allocator_type) { }\n+  };\n+  std::tuple<X1a> t1a(std::allocator_arg, a, 1);\n+  std::tuple<X1a, X1a> t11a(std::allocator_arg, a, 1, i);\n+\n+  struct X1b {\n+    using allocator_type = Alloc;\n+    /* not constexpr */ X1b(int) { }\n+    constexpr X1b(std::allocator_arg_t, allocator_type, int) { }\n+  };\n+  std::tuple<X1b> t1b(std::allocator_arg, a, 1);\n+  std::tuple<X1b, X1b> t11b(std::allocator_arg, a, 1, i);\n+\n+  std::tuple<X1a, X1a, X1b, X1b> t1a1b(std::allocator_arg, a, 1, i, 1, i);\n+\n+  return true;\n+}\n+static_assert( construct_using_allocator() );"}]}