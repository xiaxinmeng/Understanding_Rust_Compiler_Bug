{"sha": "d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "node_id": "C_kwDOANBUbNoAKGQ2MmUxNGUyNGNkYzZkZTExYjEzNjc5MTZjZGQ2MTNjYzdiZDNlZDc", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-12T14:29:06Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2022-01-12T14:53:52Z"}, "message": "[nvptx] Improve gcc.target/nvptx/atomic_fetch-*.c test-cases\n\nFix a few issues in test-cases gcc.target/nvptx/atomic_fetch-*.c:\n- atomic_fetch-1.c uses scan-assembler instead of scan-assembler-times,\n  which is less accurate\n- atomic_fetch-2.c only contains negative testing using\n  scan-assembler-not\n- the test-cases use stack variables to generate generic addresses,\n  while stack atomics are not natively supported\n- the test-cases only test (64-bit) x (generic), instead of\n  (32-bit, 64-bit) x (generic, global, shared)\n- the test-cases use a hardcoded '0' instead of the clearer\n  MEMMODEL_RELAXED\n\nTested on nvptx.\n\ngcc/testsuite/ChangeLog:\n\n2022-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* gcc.target/nvptx/atomic_fetch-1.c: Rewrite.\n\t* gcc.target/nvptx/atomic_fetch-2.c: Rewrite.", "tree": {"sha": "d7703f82f284367e13249418f93fc219c935a7b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7703f82f284367e13249418f93fc219c935a7b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "016bd7523131b645bca5b5530c81ab5149922743", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/016bd7523131b645bca5b5530c81ab5149922743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/016bd7523131b645bca5b5530c81ab5149922743"}], "stats": {"total": 190, "additions": 168, "deletions": 22}, "files": [{"sha": "941cf3a2ab49781f12b377eb212fee4e9cdbf7b1", "filename": "gcc/testsuite/gcc.target/nvptx/atomic_fetch-1.c", "status": "modified", "additions": 87, "deletions": 11, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c?ref=d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "patch": "@@ -4,21 +4,97 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -misa=sm_35\" } */\n \n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0\n+};\n+\n+unsigned long long int *p64;\n+unsigned int *p32;\n+\n+unsigned long long int g64;\n+unsigned int g32;\n+\n+unsigned int s32 __attribute__((shared));\n+unsigned long long int s64 __attribute__((shared));\n+\n+unsigned long long int v64;\n+unsigned int v32;\n+\n int\n main()\n {\n-  unsigned long long a = ~0;\n-  unsigned b = 0xa;\n+  /* Generic.  */\n \n-  __atomic_fetch_add (&a, b, 0);\n-  __atomic_fetch_and (&a, b, 0);\n-  __atomic_fetch_or (&a, b, 0);\n-  __atomic_fetch_xor (&a, b, 0);\n+  __atomic_fetch_add (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (p64, v64, MEMMODEL_RELAXED);\n   \n-  return a;\n+  __atomic_fetch_add (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (p32, v32, MEMMODEL_RELAXED);\n+\n+  /* Global.  */\n+\n+  __atomic_fetch_add (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&g64, v64, MEMMODEL_RELAXED);\n+  \n+  __atomic_fetch_add (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&g32, v32, MEMMODEL_RELAXED);\n+\n+  /* Shared.  */\n+\n+  __atomic_fetch_add (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&s64, v64, MEMMODEL_RELAXED);\n+  \n+  __atomic_fetch_add (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&s32, v32, MEMMODEL_RELAXED);\n+\n+  return 0;\n }\n \n-/* { dg-final { scan-assembler \"atom.add.u64\" } } */\n-/* { dg-final { scan-assembler \"atom.b64.and\" } } */\n-/* { dg-final { scan-assembler \"atom.b64.or\" } } */\n-/* { dg-final { scan-assembler \"atom.b64.xor\" } } */\n+/* Generic.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b64.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b64.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b64.xor\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.xor\" 1 } } */\n+\n+/* Global.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.global.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b64.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b64.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b64.xor\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.global.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.xor\" 1 } } */\n+\n+/* Shared.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b64.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b64.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b64.xor\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.xor\" 1 } } */"}, {"sha": "f5131fc49848339ca02fedd542ea6d8d86f880b1", "filename": "gcc/testsuite/gcc.target/nvptx/atomic_fetch-2.c", "status": "modified", "additions": 81, "deletions": 11, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62e14e24cdc6de11b1367916cdd613cc7bd3ed7/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-2.c?ref=d62e14e24cdc6de11b1367916cdd613cc7bd3ed7", "patch": "@@ -4,21 +4,91 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -misa=sm_30\" } */\n \n+enum memmodel\n+{\n+  MEMMODEL_RELAXED = 0\n+};\n+\n+unsigned long long int *p64;\n+unsigned int *p32;\n+\n+unsigned long long int g64;\n+unsigned int g32;\n+\n+unsigned int s32 __attribute__((shared));\n+unsigned long long int s64 __attribute__((shared));\n+\n+unsigned long long int v64;\n+unsigned int v32;\n+\n int\n main()\n {\n-  unsigned long long a = ~0;\n-  unsigned b = 0xa;\n+  /* Generic.  */\n \n-  __atomic_fetch_add (&a, b, 0);\n-  __atomic_fetch_and (&a, b, 0);\n-  __atomic_fetch_or (&a, b, 0);\n-  __atomic_fetch_xor (&a, b, 0);\n+  __atomic_fetch_add (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (p64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (p64, v64, MEMMODEL_RELAXED);\n   \n-  return a;\n+  __atomic_fetch_add (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (p32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (p32, v32, MEMMODEL_RELAXED);\n+\n+  /* Global.  */\n+\n+  __atomic_fetch_add (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&g64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&g64, v64, MEMMODEL_RELAXED);\n+  \n+  __atomic_fetch_add (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&g32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&g32, v32, MEMMODEL_RELAXED);\n+\n+  /* Shared.  */\n+\n+  __atomic_fetch_add (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&s64, v64, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&s64, v64, MEMMODEL_RELAXED);\n+  \n+  __atomic_fetch_add (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_and (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_or (&s32, v32, MEMMODEL_RELAXED);\n+  __atomic_fetch_xor (&s32, v32, MEMMODEL_RELAXED);\n+\n+  return 0;\n }\n \n-/* { dg-final { scan-assembler-not \"atom.b64.add\" } } */\n-/* { dg-final { scan-assembler-not \"atom.b64.and\" } } */\n-/* { dg-final { scan-assembler-not \"atom.b64.or\" } } */\n-/* { dg-final { scan-assembler-not \"atom.b64.xor\" } } */\n+/* Generic.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.cas.b64\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.b32.xor\" 1 } } */\n+\n+/* Global.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.global.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.cas.b64\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.global.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.global.b32.xor\" 1 } } */\n+\n+/* Shared.  */\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.add.u64\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.cas.b64\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"atom.shared.add.u32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.and\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.or\" 1 } } */\n+/* { dg-final { scan-assembler-times \"atom.shared.b32.xor\" 1 } } */"}]}