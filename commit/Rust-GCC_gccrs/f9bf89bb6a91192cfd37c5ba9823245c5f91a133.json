{"sha": "f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjliZjg5YmI2YTkxMTkyY2ZkMzdjNWJhOTgyMzI0NWM1ZjkxYTEzMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2016-04-01T12:10:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2016-04-01T12:10:17Z"}, "message": "re PR c++/68475 (ICE: in merge_exception_specifiers, at cp/typeck2.c:2115 with -fno-exceptions on invalid code)\n\n\tPR c++/68475\n\t* decl.c (check_redeclaration_exception_specification): Check\n\tregardless of -fno-exceptions.\n\t* typeck2.c (merge_exception_specifiers): Relax assert by checking\n\tflag_exceptions too.\n\n\t* g++.dg/g++.dg/cpp0x/noexcept29.C: New.\n\nFrom-SVN: r234667", "tree": {"sha": "c3fa1d2d7c3ec986ecf88309c6206c316b44041a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3fa1d2d7c3ec986ecf88309c6206c316b44041a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4afdcfaa6f925047857feebc13d50a4583a75eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4afdcfaa6f925047857feebc13d50a4583a75eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4afdcfaa6f925047857feebc13d50a4583a75eb0"}], "stats": {"total": 42, "additions": 37, "deletions": 5}, "files": [{"sha": "e44818dc42dce9823897dadd790a27af1ff40aca", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "patch": "@@ -1,3 +1,11 @@\n+2016-04-01  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/68475\n+\t* decl.c (check_redeclaration_exception_specification): Check\n+\tregardless of -fno-exceptions.\n+\t* typeck2.c (merge_exception_specifiers): Relax assert by checking\n+\tflag_exceptions too.\n+\n 2016-03-31  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (start_preparsed_function): Remove unnecessary bracing."}, {"sha": "9260f4c4254f9a7a523237ea8baffa587708aa49", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "patch": "@@ -1202,16 +1202,19 @@ check_redeclaration_exception_specification (tree new_decl,\n      specialization, of that function shall have an\n      exception-specification with the same set of type-ids.  */\n   if (! DECL_IS_BUILTIN (old_decl)\n-      && flag_exceptions\n       && !comp_except_specs (new_exceptions, old_exceptions, ce_normal))\n     {\n       const char *msg\n \t= \"declaration of %q+F has a different exception specifier\";\n       bool complained = true;\n-      if (! DECL_IN_SYSTEM_HEADER (old_decl))\n-\terror (msg, new_decl);\n-      else\n+      if (DECL_IN_SYSTEM_HEADER (old_decl))\n \tcomplained = pedwarn (0, OPT_Wsystem_headers, msg, new_decl);\n+      else if (!flag_exceptions)\n+\t/* We used to silently permit mismatched eh specs with\n+\t   -fno-exceptions, so make them a pedwarn now.  */\n+\tcomplained = pedwarn (0, OPT_Wpedantic, msg, new_decl);\n+      else\n+\terror (msg, new_decl);\n       if (complained)\n \tinform (0, \"from previous declaration %q+F\", old_decl);\n     }"}, {"sha": "b921689808a174199d73bc4534c9725c1a290a0b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "patch": "@@ -2143,7 +2143,7 @@ merge_exception_specifiers (tree list, tree add)\n     return add;\n   noex = TREE_PURPOSE (list);\n   gcc_checking_assert (!TREE_PURPOSE (add)\n-\t\t       || errorcount\n+\t\t       || errorcount || !flag_exceptions\n \t\t       || cp_tree_equal (noex, TREE_PURPOSE (add)));\n \n   /* Combine the dynamic-exception-specifiers, if any.  */"}, {"sha": "519a926092b2467227232b4267e313f24f1cc4a5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "patch": "@@ -1,3 +1,5 @@\n+2016-04-01  Nathan Sidwell  <nathan@acm.org>\n+\n 2016-04-01  Ilya Enkovich  <enkovich.gnu@gmail.com>\n \n \tPR target/69890"}, {"sha": "8b920c5b4bc4fa09c42c81c62e522baf6e110fb6", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept29.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9bf89bb6a91192cfd37c5ba9823245c5f91a133/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept29.C?ref=f9bf89bb6a91192cfd37c5ba9823245c5f91a133", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options \"-fno-exceptions\" }\n+\n+// PR68475 we used to not check eh spec matching with -fno-exceptions,\n+// but this could lead to ICEs.\n+\n+template <typename> struct traits;\n+\n+template <typename T> struct X\n+{\n+  void Foo () noexcept (traits <T>::foo ()); // { dg-message \"previous declaration\" }\n+};\n+\n+template <typename T>\n+void\n+X<T>::Foo () noexcept (traits <T>::bar ()) // { dg-error \"different exception specifier\" }\n+{\n+}\n+"}]}