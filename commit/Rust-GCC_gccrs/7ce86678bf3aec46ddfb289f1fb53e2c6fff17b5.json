{"sha": "7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlODY2NzhiZjNhZWM0NmRkZmIyODlmMWZiNTNlMmM2ZmZmMTdiNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-02-02T03:05:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-02-02T03:05:57Z"}, "message": "sparc.c (fp_zero_operand): Turn into a normal predicate.\n\n        * sparc.c (fp_zero_operand): Turn into a normal predicate.\n        Use CONST0_RTX.  Update all callers.\n        * sparc.h, sparc-protos.h: Update accordingly.\n        * sparc.md (fp mov insns): Use fp_zero_operand directly\n        where applicable.\n\nFrom-SVN: r31748", "tree": {"sha": "32bb67fb0f82699e11e73a9b0d543bef87de07d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32bb67fb0f82699e11e73a9b0d543bef87de07d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/comments", "author": null, "committer": null, "parents": [{"sha": "32bd39747e2b252eea74ef8c748ef1974db22f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32bd39747e2b252eea74ef8c748ef1974db22f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32bd39747e2b252eea74ef8c748ef1974db22f91"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "31d33d33066a8433cf44986d60cff1debfc297da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "patch": "@@ -1,3 +1,11 @@\n+2000-02-01  Richard Henderson  <rth@cygnus.com>\n+\n+\t* sparc.c (fp_zero_operand): Turn into a normal predicate.\n+\tUse CONST0_RTX.  Update all callers.\n+\t* sparc.h, sparc-protos.h: Update accordingly.\n+\t* sparc.md (fp mov insns): Use fp_zero_operand directly\n+\twhere applicable.\n+\n Wed Feb  2 02:59:45 2000  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* tm.texi (Values in Registers): Fix typo in HARD_REGNO_NREGS"}, {"sha": "9fa6d45ab35cadeca264a3ca1bd837fc3a02d979", "filename": "gcc/config/sparc/sparc-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc-protos.h?ref=7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "patch": "@@ -124,7 +124,7 @@ extern int eligible_for_return_delay PARAMS ((rtx));\n extern int emit_move_sequence PARAMS ((rtx, enum machine_mode));\n extern int extend_op PARAMS ((rtx, enum machine_mode));\n extern int fcc_reg_operand PARAMS ((rtx, enum machine_mode));\n-extern int fp_zero_operand PARAMS ((rtx));\n+extern int fp_zero_operand PARAMS ((rtx, enum machine_mode));\n extern int fp_sethi_p PARAMS ((rtx));\n extern int fp_mov_p PARAMS ((rtx));\n extern int fp_high_losum_p PARAMS ((rtx));"}, {"sha": "891da83a12f2ea7804e3e105fd1d87b7b9740e9a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "patch": "@@ -387,23 +387,21 @@ reg_or_0_operand (op, mode)\n       && CONST_DOUBLE_HIGH (op) == 0\n       && CONST_DOUBLE_LOW (op) == 0)\n     return 1;\n-  if (GET_MODE_CLASS (GET_MODE (op)) == MODE_FLOAT\n-      && GET_CODE (op) == CONST_DOUBLE\n-      && fp_zero_operand (op))\n+  if (fp_zero_operand (op, mode))\n     return 1;\n   return 0;\n }\n \n /* Nonzero if OP is a floating point value with value 0.0.  */\n \n int\n-fp_zero_operand (op)\n+fp_zero_operand (op, mode)\n      rtx op;\n+     enum machine_mode mode;\n {\n-  REAL_VALUE_TYPE r;\n-\n-  REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-  return (REAL_VALUES_EQUAL (r, dconst0) && ! REAL_VALUE_MINUS_ZERO (r));\n+  if (GET_MODE_CLASS (GET_MODE (op)) != MODE_FLOAT)\n+    return 0;\n+  return op == CONST0_RTX (mode);\n }\n \n /* Nonzero if OP is a floating point constant which can"}, {"sha": "e69217df12de37d02f13aaa805b770bbcb2fc2a3", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "patch": "@@ -1467,8 +1467,8 @@ extern char leaf_reg_remap[];\n    Here VALUE is the CONST_DOUBLE rtx itself.  */\n \n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)\t\\\n-  ((C) == 'G' ? fp_zero_operand (VALUE)\t\t\t\\\n-   : (C) == 'H' ? arith_double_operand (VALUE, DImode)\t\\\n+  ((C) == 'G' ? fp_zero_operand (VALUE, GET_MODE (VALUE))\t\\\n+   : (C) == 'H' ? arith_double_operand (VALUE, DImode)\t\t\\\n    : 0)\n \n /* Given an rtx X being reloaded into a reg required to be\n@@ -2266,7 +2266,7 @@ LFLGRET\"ID\":\\n\\\n    (TARGET_VIS &&\t\t\t\t\t\t\t\\\n     (GET_MODE (X) == SFmode || GET_MODE (X) == DFmode ||\t\t\\\n      GET_MODE (X) == TFmode) &&\t\t\t\t\t\t\\\n-    fp_zero_operand (X)))\n+    fp_zero_operand (X, GET_MODE (X))))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class."}, {"sha": "e84294e3e34773a0b9f4c5241b1f18c771630080", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 18, "deletions": 35, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=7ce86678bf3aec46ddfb289f1fb53e2c6fff17b5", "patch": "@@ -3023,7 +3023,7 @@\n   \"(TARGET_FPU && ! TARGET_VIS && ! TARGET_LIVE_G0)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n-       || fp_zero_operand (operands[1]))\"\n+       || fp_zero_operand (operands[1], SFmode))\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -3068,7 +3068,7 @@\n   \"(TARGET_FPU && TARGET_VIS)\n    && (register_operand (operands[0], SFmode)\n        || register_operand (operands[1], SFmode)\n-       || fp_zero_operand (operands[1]))\"\n+       || fp_zero_operand (operands[1], SFmode))\"\n   \"*\n {\n   if (GET_CODE (operands[1]) == CONST_DOUBLE\n@@ -3181,9 +3181,7 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n-      if (TARGET_VIS\n-          && GET_CODE (operands[1]) == CONST_DOUBLE\n-\t  && fp_zero_operand (operands[1]))\n+      if (TARGET_VIS && fp_zero_operand (operands[1], SFmode))\n \tgoto movsf_is_ok;\n \n       /* emit_group_store will send such bogosity to us when it is\n@@ -3199,9 +3197,7 @@\n   if (GET_CODE (operands[0]) == MEM)\n     {\n       if (register_operand (operands[1], SFmode)\n-\t  || (! TARGET_LIVE_G0\n-\t      && GET_CODE (operands[1]) == CONST_DOUBLE\n-              && fp_zero_operand (operands[1])))\n+\t  || (! TARGET_LIVE_G0 && fp_zero_operand (operands[1], SFmode)))\n \tgoto movsf_is_ok;\n \n       if (! reload_in_progress)\n@@ -3234,19 +3230,16 @@\n \n (define_insn \"*clear_df\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n-        (match_operand:DF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_VIS\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:DF 1 \"fp_zero_operand\" \"\"))]\n+  \"TARGET_VIS\"\n   \"fzero\\\\t%0\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"1\")])\n \n (define_insn \"*clear_dfp\"\n   [(set (match_operand:DF 0 \"memory_operand\" \"=m\")\n-        (match_operand:DF 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0\n-   && TARGET_V9\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:DF 1 \"fp_zero_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0 && TARGET_V9\"\n   \"stx\\\\t%%g0, %0\"\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"1\")])\n@@ -3340,9 +3333,7 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n-      if (TARGET_VIS\n-          && GET_CODE (operands[1]) == CONST_DOUBLE\n-\t  && fp_zero_operand (operands[1]))\n+      if (TARGET_VIS && fp_zero_operand (operands[1], DFmode))\n \tgoto movdf_is_ok;\n \n       /* emit_group_store will send such bogosity to us when it is\n@@ -3604,18 +3595,16 @@\n \n (define_insn \"*clear_tf\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n-        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_VIS\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n+  \"TARGET_VIS\"\n   \"#\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:TF 0 \"register_operand\" \"\")\n-        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n-  \"TARGET_VIS && reload_completed\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n+  \"TARGET_VIS && reload_completed\"\n   [(set (subreg:DF (match_dup 0) 0) (match_dup 1))\n    (set (subreg:DF (match_dup 0) 8) (match_dup 1))]\n   \"\n@@ -3626,20 +3615,16 @@\n \n (define_insn \"*clear_tfp\"\n   [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n-        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0\n-   && TARGET_V9\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0 && TARGET_V9\"\n   \"#\"\n   [(set_attr \"type\" \"fpmove\")\n    (set_attr \"length\" \"2\")])\n \n (define_split\n   [(set (match_operand:TF 0 \"memory_operand\" \"=m\")\n-        (match_operand:TF 1 \"const_double_operand\" \"\"))]\n-  \"! TARGET_LIVE_G0\n-   && TARGET_V9 && reload_completed\n-   && fp_zero_operand (operands[1])\"\n+        (match_operand:TF 1 \"fp_zero_operand\" \"\"))]\n+  \"! TARGET_LIVE_G0 && TARGET_V9 && reload_completed\"\n   [(set (subreg:DF (match_dup 0) 0) (match_dup 1))\n    (set (subreg:DF (match_dup 0) 8) (match_dup 1))]\n   \"\n@@ -3658,9 +3643,7 @@\n   if (GET_CODE (operands[0]) == REG\n       && CONSTANT_P (operands[1]))\n     {\n-      if (TARGET_VIS\n-          && GET_CODE (operands[1]) == CONST_DOUBLE\n-\t  && fp_zero_operand (operands[1]))\n+      if (TARGET_VIS && fp_zero_operand (operands[1], TFmode))\n \tgoto movtf_is_ok;\n \n       /* emit_group_store will send such bogosity to us when it is"}]}