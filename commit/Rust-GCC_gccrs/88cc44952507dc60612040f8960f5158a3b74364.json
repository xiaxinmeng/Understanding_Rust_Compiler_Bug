{"sha": "88cc44952507dc60612040f8960f5158a3b74364", "node_id": "C_kwDOANBUbNoAKDg4Y2M0NDk1MjUwN2RjNjA2MTIwNDBmODk2MGY1MTU4YTNiNzQzNjQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-17T00:17:49Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2023-02-17T00:17:49Z"}, "message": "Daily bump.", "tree": {"sha": "25dc978ca660b283011a227e9a2fa9cbbca88d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25dc978ca660b283011a227e9a2fa9cbbca88d85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88cc44952507dc60612040f8960f5158a3b74364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cc44952507dc60612040f8960f5158a3b74364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cc44952507dc60612040f8960f5158a3b74364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cc44952507dc60612040f8960f5158a3b74364/comments", "author": null, "committer": null, "parents": [{"sha": "4d3b7be281e73ecdaa233598db1a8390422b7770", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3b7be281e73ecdaa233598db1a8390422b7770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3b7be281e73ecdaa233598db1a8390422b7770"}], "stats": {"total": 448, "additions": 447, "deletions": 1}, "files": [{"sha": "b26e482eb543adae14c588335c0043525bb469cb", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,7 @@\n+2023-02-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* MAINTAINERS: I'm stepping down from my positions.\n+\n 2023-01-10  Philip Herron  <herron.philip@googlemail.com>\n \n \t* MAINTAINERS: Add Philip Herron as Rust front-end maintainer"}, {"sha": "27dccaca91e4865008121deaca352a3780b6e379", "filename": "contrib/regression/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/contrib%2Fregression%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/contrib%2Fregression%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fregression%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,7 @@\n+2023-02-16  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* objs-gcc.sh: Only bootstrap if source-directory contains gcc.\n+\n 2012-08-26  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* btest-gcc.sh (TESTLOGS): Make gfortran.sum optional."}, {"sha": "b8fbe647a76cc09584b7af9b1e4c88dd52fbb44c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,128 @@\n+2023-02-16  Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/invoke.texi (Optimize Options): Reword the explanation\n+\tgetting minimal, maximal and default values of a parameter.\n+\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* addresses.h: Mechanically drop 'static' from 'static inline'\n+\tfunctions via s/^static inline/inline/g.\n+\t* asan.h: Likewise.\n+\t* attribs.h: Likewise.\n+\t* basic-block.h: Likewise.\n+\t* bitmap.h: Likewise.\n+\t* cfghooks.h: Likewise.\n+\t* cfgloop.h: Likewise.\n+\t* cgraph.h: Likewise.\n+\t* cselib.h: Likewise.\n+\t* data-streamer.h: Likewise.\n+\t* debug.h: Likewise.\n+\t* df.h: Likewise.\n+\t* diagnostic.h: Likewise.\n+\t* dominance.h: Likewise.\n+\t* dumpfile.h: Likewise.\n+\t* emit-rtl.h: Likewise.\n+\t* except.h: Likewise.\n+\t* expmed.h: Likewise.\n+\t* expr.h: Likewise.\n+\t* fixed-value.h: Likewise.\n+\t* gengtype.h: Likewise.\n+\t* gimple-expr.h: Likewise.\n+\t* gimple-iterator.h: Likewise.\n+\t* gimple-predict.h: Likewise.\n+\t* gimple-range-fold.h: Likewise.\n+\t* gimple-ssa.h: Likewise.\n+\t* gimple.h: Likewise.\n+\t* graphite.h: Likewise.\n+\t* hard-reg-set.h: Likewise.\n+\t* hash-map.h: Likewise.\n+\t* hash-set.h: Likewise.\n+\t* hash-table.h: Likewise.\n+\t* hwint.h: Likewise.\n+\t* input.h: Likewise.\n+\t* insn-addr.h: Likewise.\n+\t* internal-fn.h: Likewise.\n+\t* ipa-fnsummary.h: Likewise.\n+\t* ipa-icf-gimple.h: Likewise.\n+\t* ipa-inline.h: Likewise.\n+\t* ipa-modref.h: Likewise.\n+\t* ipa-prop.h: Likewise.\n+\t* ira-int.h: Likewise.\n+\t* ira.h: Likewise.\n+\t* lra-int.h: Likewise.\n+\t* lra.h: Likewise.\n+\t* lto-streamer.h: Likewise.\n+\t* memmodel.h: Likewise.\n+\t* omp-general.h: Likewise.\n+\t* optabs-query.h: Likewise.\n+\t* optabs.h: Likewise.\n+\t* plugin.h: Likewise.\n+\t* pretty-print.h: Likewise.\n+\t* range.h: Likewise.\n+\t* read-md.h: Likewise.\n+\t* recog.h: Likewise.\n+\t* regs.h: Likewise.\n+\t* rtl-iter.h: Likewise.\n+\t* rtl.h: Likewise.\n+\t* sbitmap.h: Likewise.\n+\t* sched-int.h: Likewise.\n+\t* sel-sched-ir.h: Likewise.\n+\t* sese.h: Likewise.\n+\t* sparseset.h: Likewise.\n+\t* ssa-iterators.h: Likewise.\n+\t* system.h: Likewise.\n+\t* target-globals.h: Likewise.\n+\t* target.h: Likewise.\n+\t* timevar.h: Likewise.\n+\t* tree-chrec.h: Likewise.\n+\t* tree-data-ref.h: Likewise.\n+\t* tree-iterator.h: Likewise.\n+\t* tree-outof-ssa.h: Likewise.\n+\t* tree-phinodes.h: Likewise.\n+\t* tree-scalar-evolution.h: Likewise.\n+\t* tree-sra.h: Likewise.\n+\t* tree-ssa-alias.h: Likewise.\n+\t* tree-ssa-live.h: Likewise.\n+\t* tree-ssa-loop-manip.h: Likewise.\n+\t* tree-ssa-loop.h: Likewise.\n+\t* tree-ssa-operands.h: Likewise.\n+\t* tree-ssa-propagate.h: Likewise.\n+\t* tree-ssa-sccvn.h: Likewise.\n+\t* tree-ssa.h: Likewise.\n+\t* tree-ssanames.h: Likewise.\n+\t* tree-streamer.h: Likewise.\n+\t* tree-switch-conversion.h: Likewise.\n+\t* tree-vectorizer.h: Likewise.\n+\t* tree.h: Likewise.\n+\t* wide-int.h: Likewise.\n+\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108657\n+\t* tree-ssa-dse.cc (initialize_ao_ref_for_dse): If lhs of stmt\n+\texists and is not a SSA_NAME, call ao_ref_init even if the stmt\n+\tis a call to internal or builtin function.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/invoke.texi (C++ Dialect Options): Suggest adding a\n+\tusing-declaration to unhide functions.\n+\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108783\n+\t* tree-ssa-reassoc.cc (eliminate_redundant_comparison): If lcode\n+\tis equal to TREE_CODE (t), op1 to newop1 and op2 to newop2, set\n+\tt to curr->op.  Otherwise, punt if either newop1 or newop2 are\n+\tSSA_NAME_OCCURS_IN_ABNORMAL_PHI SSA_NAMEs.\n+\n+2023-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108791\n+\t* tree-ssa-forwprop.cc (optimize_vector_load): Build\n+\tthe ADDR_EXPR of a TARGET_MEM_REF using a more meaningful\n+\ttype.\n+\n 2023-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/90458"}, {"sha": "ef309477de2d109d7117a31f0f8d607042f13549", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1 +1 @@\n-20230216\n+20230217"}, {"sha": "15a3de715fb905608d1a5814630c6ead071c3971", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,20 @@\n+2023-02-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108806\n+\t* constraint-manager.cc (bounded_range::dump_to_pp): Use\n+\tbounded_range::singleton_p.\n+\t(constraint_manager::add_bounded_ranges): Handle singleton ranges\n+\tby adding an EQ_EXPR constraint.\n+\t(constraint_manager::impossible_derived_conditions_p): New.\n+\t(constraint_manager::eval_condition): Reject EQ_EXPR when it would\n+\timply impossible derived conditions.\n+\t(selftest::test_bits): New.\n+\t(selftest::run_constraint_manager_tests): Run it.\n+\t* constraint-manager.h (bounded_range::singleton_p): New.\n+\t(constraint_manager::impossible_derived_conditions_p): New decl.\n+\t* region-model.cc (region_model::get_rvalue_1): Handle\n+\tBIT_AND_EXPR, BIT_IOR_EXPR, and BIT_XOR_EXPR.\n+\n 2023-02-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/108664"}, {"sha": "5bc8fa5582cbfe7ef985f92c864f3e59b9c5feee", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,8 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* c-common.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\n 2023-02-01  Jason Merrill  <jason@redhat.com>\n \n \t* c.opt: Add -Wno-changes-meaning."}, {"sha": "26eeee2653d984746684ef3c7481b04e216aac84", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,8 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* c-parser.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\n 2023-02-10  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-convert.cc (c_convert): Allow conversion of a null pointer"}, {"sha": "148276bff270c718de04762534be4a8d93aeea88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,34 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107773\n+\t* cp-tree.h (enum tsubst_flags): New flag tf_qualifying_scope.\n+\t* decl.cc (make_typename_type): Use lookup_member instead of\n+\tlookup_field.  If tf_qualifying_scope is set, pass want_type=true\n+\tinstead of =false to lookup_member.  Generalize format specifier\n+\tin diagnostic to handle both type and non-type bindings.\n+\t* pt.cc (tsubst_aggr_type_1): Clear tf_qualifying_scope.  Tidy\n+\tthe function.\n+\t(tsubst_decl) <case USING_DECL>: Set tf_qualifying_scope when\n+\tsubstituting USING_DECL_SCOPE.\n+\t(tsubst): Clear tf_qualifying_scope right away and remember if\n+\tit was set.  Do the same for tf_tst_ok sooner.\n+\t<case TYPENAME_TYPE>: Set tf_qualifying_scope when substituting\n+\tTYPE_CONTEXT.  Pass tf_qualifying_scope to make_typename_type\n+\tif it was set.\n+\t(tsubst_qualified_id): Set tf_qualifying_scope when substituting\n+\tthe scope.\n+\t(tsubst_copy): Clear tf_qualifying_scope and remember if it was\n+\tset.\n+\t<case SCOPE_REF>: Set tf_qualifying_scope when substituting the\n+\tscope.\n+\t<case *_TYPE>: Pass tf_qualifying_scope to tsubst if it was set.\n+\t* search.cc (lookup_member): Document default argument.\n+\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\n 2023-02-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106675"}, {"sha": "2253b6e333b429ccc4248afa7ea5ff49f1cde58e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,8 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* gfortran.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\n 2023-02-15  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/103608"}, {"sha": "4c30cab1db82000e96128975cb20ce7c30be31bf", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,9 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* jit-dejagnu.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\t* jit-recording.h: Likewise.\n+\n 2023-01-07  LIU Hao  <lh_mouse@126.com>\n \n \tPR middle-end/108300"}, {"sha": "8e9f676d15b727af806fbf8bc23bb6fd0d1f4a74", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,11 @@\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* objc-act.h: Mechanically drop static from static inline\n+\tfunctions via s/^static inline/inline/g.\n+\t* objc-map.h: Likewise.\n+\t* objc-act.cc: Remove the redundant redeclarations of is_ivar\n+\tand lookup_category.\n+\n 2022-10-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* objc-next-runtime-abi-01.cc (build_next_objc_exception_stuff):"}, {"sha": "63968c79cd33a1810a8a5ffe94dcd231efefaa4a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,44 @@\n+2023-02-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/108806\n+\t* gcc.dg/analyzer/null-deref-pr108806-qemu.c: New test.\n+\t* gcc.dg/analyzer/pr103217.c: Add -Wno-analyzer-too-complex.\n+\t* gcc.dg/analyzer/switch.c (test_bitmask_1): New.\n+\t(test_bitmask_2): New.\n+\t* gcc.dg/analyzer/uninit-pr108806-qemu.c: New test.\n+\n+2023-02-16  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc.dg/proto-lossage-4.m: Amendn diagnostic matches for Windows.\n+\n+2023-02-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107773\n+\t* g++.dg/template/typename24.C: New test.\n+\t* g++.dg/template/typename25.C: New test.\n+\t* g++.dg/template/typename25a.C: New test.\n+\t* g++.dg/template/typename26.C: New test.\n+\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108657\n+\t* gcc.dg/pr108657.c: New test.\n+\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/108783\n+\t* gcc.c-torture/compile/pr108783.c: New test.\n+\n+2023-02-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/108791\n+\t* gcc.dg/torture/pr108791.c: New testcase.\n+\n+2023-02-16  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_lra): Add CRIS\n+\tas a non-LRA target.\n+\n 2023-02-15  Steve Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/103608"}, {"sha": "13ddf64e65850a41459744ce5db78d33c1030adf", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,12 @@\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.texi: Fix typos - theads -> threads.\n+\n+2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.fortran/target-nowait-array-section.f90: Fix\n+\tcomment typo and improve its wording.\n+\n 2023-02-15  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* target.c (gomp_target_rev): Dereference ptr"}, {"sha": "00aafa46b1765ae9274e4f61903716b48d84ee76", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88cc44952507dc60612040f8960f5158a3b74364/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88cc44952507dc60612040f8960f5158a3b74364/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=88cc44952507dc60612040f8960f5158a3b74364", "patch": "@@ -1,3 +1,189 @@\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_math.h (__hypot): Bitcasting\n+\tbetween scalars requires the __bit_cast helper function instead\n+\tof simd_bit_cast.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd_x86.h\n+\t(_SimdImplX86::_S_not_equal_to, _SimdImplX86::_S_less)\n+\t(_SimdImplX86::_S_less_equal): Do not call\n+\t__builtin_is_constant_evaluated in constexpr-if.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/experimental/simd/tests/bits/verify.h\n+\t(verify::verify): Use %zx for size_t in format string.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/experimental/simd/generate_makefile.sh: Generate and\n+\tpre-compile pch.h, which includes all headers that do not depend\n+\ton command-line macros.\n+\t* testsuite/experimental/simd/tests/bits/main.h: New file.\n+\t(iterate_abis, main): Moved from verify.h.\n+\t* testsuite/experimental/simd/tests/bits/verify.h\n+\t(iterate_abis, main): Moved to main.h.\n+\t* testsuite/experimental/simd/tests/bits/conversions.h: Add\n+\tinclude guard.\n+\t(genHalfBits): Simplify.\n+\t* testsuite/experimental/simd/tests/bits/make_vec.h: Add include\n+\tguard.\n+\t(make_alternating_mask): Moved from mask_loadstore.\n+\t* testsuite/experimental/simd/tests/bits/mathreference.h: Add\n+\tinclude guard.\n+\t* testsuite/experimental/simd/tests/bits/test_values.h: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_loadstore.cc\n+\t(make_mask, make_alternating_mask): Removed.\n+\t* testsuite/experimental/simd/tests/mask_reductions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/operators.cc (genHalfBits):\n+\tRemoved.\n+\t* testsuite/experimental/simd/tests/abs.cc: Only include\n+\tbits/main.h.\n+\tDitto.\n+\t* testsuite/experimental/simd/tests/algorithms.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/broadcast.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/casts.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/fpclassify.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/frexp.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/generator.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/hypot3_fma.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/integer_operators.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/ldexp_scalbn_scalbln_modf.cc:\n+\t* testsuite/experimental/simd/tests/loadstore.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/logarithm.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_broadcast.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_conversions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_implicit_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_operator_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/mask_operators.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/math_1arg.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/math_2arg.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/operator_cvt.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/reductions.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/remqo.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/simd.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/sincos.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/split_concat.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/splits.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/trigonometric.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/trunc_ceil_floor.cc: Ditto.\n+\t* testsuite/experimental/simd/tests/where.cc: Ditto.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* testsuite/experimental/simd/README.md: Document the timeout\n+\tand timeout-factor directives. Minor typo fixed.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\tPR libstdc++/108030\n+\t* include/experimental/bits/simd_detail.h: Define\n+\t_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA.\n+\t* include/experimental/bits/simd.h: Annotate lambdas with\n+\t_GLIBCXX_SIMD_ALWAYS_INLINE_LAMBDA.\n+\t* include/experimental/bits/simd_builtin.h: Ditto.\n+\t* include/experimental/bits/simd_converter.h: Ditto.\n+\t* include/experimental/bits/simd_fixed_size.h: Ditto.\n+\t* include/experimental/bits/simd_math.h: Ditto.\n+\t* include/experimental/bits/simd_neon.h: Ditto.\n+\t* include/experimental/bits/simd_x86.h: Ditto.\n+\n+2023-02-16  Matthias Kretz  <m.kretz@gsi.de>\n+\n+\t* include/experimental/bits/simd.h\n+\t(_SimdWrapper::_M_is_constprop_none_of)\n+\t(_SimdWrapper::_M_is_constprop_all_of): Return false unless the\n+\tcomputed result still satisfies __builtin_constant_p.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/format/arguments/lwg3810.cc: Replace UTF-8\n+\tellipsis character.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/Makefile.am: Add new header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/experimental/synchronized_value: New file.\n+\t* testsuite/experimental/synchronized_value.cc: New test.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/experimental/optional: Fix header name in comment.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (__format::_Arg_store): New class template.\n+\t(basic_format_args): Remove nested type _Store and add deduction\n+\tguide from _Arg_store.\n+\t(basic_format_arg, make_format_args): Adjust.\n+\t* testsuite/std/format/arguments/lwg3810.cc: New test.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_pair.h (pair) [C++20]: Add non-dangling\n+\tconstraints to constructors and add deleted overloads for the\n+\tdangling cases, as per P2255R2.\n+\t(pair) [!C++20 && _GLIBCXX_DEBUG]: Add static assertions to\n+\tmake dangling cases ill-formed.\n+\t* testsuite/20_util/pair/dangling_ref.cc: New test.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names_pstl.cc: Require et tbb_backend.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/throw_allocator.h: Use reserved names for\n+\tparameters.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/17_intro/names_pstl.cc: Add space after effective\n+\ttarget name.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/pstl/algorithm_fwd.h (__pattern_search_n)\n+\t(__brick_unique_copy, __brick_adjacent_find)\n+\t(__brick_generate_n, __pattern_generate_n): Use reserved names\n+\tfor parameters.\n+\t* include/pstl/algorithm_impl.h (__brick_unique_copy)\n+\t(__pattern_reverse, __brick_generate_n): Likewise.\n+\t* include/pstl/execution_impl.h (__prefer_unsequenced_tag)\n+\t(__prefer_parallel_tag): Likewise.\n+\t* include/pstl/glue_algorithm_impl.h (transform): Likewise.\n+\t* include/pstl/glue_numeric_defs.h (adjacent_difference):\n+\tLikewise.\n+\t* include/pstl/numeric_impl.h (__brick_adjacent_difference):\n+\tLikewise.\n+\t* include/pstl/parallel_backend_tbb.h (__merge_func): Likewise.\n+\t* include/pstl/unseq_backend_simd.h (_Combiner)\n+\t(__simd_min_element, __simd_minmax_element): Likewise.\n+\t* testsuite/17_intro/names_pstl.cc: New test.\n+\n+2023-02-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_ops.h (create_directory): Use reserved name\n+\tfor parameter.\n+\t* include/bits/ranges_algo.h (__contains_subrange_fn):\n+\tLikewise.\n+\t* include/bits/regex_automaton.h (_State_base::_M_print):\n+\tLikewise.\n+\t* include/bits/regex_automaton.tcc(_State_base::_M_print):\n+\tLikewise.\n+\t* include/bits/regex_scanner.tcc(_Scanner::_M_print): Likewise.\n+\t* include/experimental/bits/fs_ops.h (create_directory):\n+\tLikewise.\n+\t* include/std/mutex (timed_mutex::_M_clocklock): Likewise.\n+\t(recursive_timed_mutex:_M_clocklock): Likewise.\n+\t* include/std/tuple (basic_common_reference): Likewise.\n+\t* libsupc++/cxxabi_init_exception.h\n+\t(__cxa_init_primary_exception): Likewise.\n+\t* testsuite/17_intro/names.cc: Add checks.\n+\n 2023-02-14  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update an open-std.org link"}]}