{"sha": "b701e1f8f6870c0f8cb4050674da489101dd05a5", "node_id": "C_kwDOANBUbNoAKGI3MDFlMWY4ZjY4NzBjMGY4Y2I0MDUwNjc0ZGE0ODkxMDFkZDA1YTU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:11Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-09-29T12:48:11Z"}, "message": "libstdc++: std::basic_regex should treat '\\0' as an ordinary char [PR84110]\n\nWhen the input sequence contains a _CharT(0) character, the strchr call\nin _Scanner<_CharT>::_M_scan_normal() will search for '\\0' and so return\na pointer to the terminating null at the end of the string. This makes\nthe scanner think it's found a special character. Because it doesn't\nmatch any of the actual special characters, we fall off the end of the\nfunction (or assert in debug mode).\n\nWe should check for a null character explicitly and either treat it as\nan ordinary character (for the ECMAScript grammar) or an error (for all\nothers). I'm not 100% sure that's right, but it seems consistent with\nthe POSIX RE rules where a '\\0' means the end of the regex pattern or\nthe end of the sequence being matched.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/84110\n\t* include/bits/regex_error.h (regex_constants::_S_null): New\n\terror code for internal use.\n\t* include/bits/regex_scanner.tcc (_Scanner::_M_scan_normal()):\n\tCheck for null character.\n\t* testsuite/28_regex/basic_regex/84110.cc: New test.", "tree": {"sha": "890c89e93d92bf94e4028a2c309be6cfe012ba0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/890c89e93d92bf94e4028a2c309be6cfe012ba0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b701e1f8f6870c0f8cb4050674da489101dd05a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b701e1f8f6870c0f8cb4050674da489101dd05a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b701e1f8f6870c0f8cb4050674da489101dd05a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b701e1f8f6870c0f8cb4050674da489101dd05a5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b59be1adbaea022f19dc7c30d9bf5089e80795d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59be1adbaea022f19dc7c30d9bf5089e80795d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59be1adbaea022f19dc7c30d9bf5089e80795d9"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "722ce26cda3fccc7bac1725fc86eaa0688b6ead4", "filename": "libstdc++-v3/include/bits/regex_error.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_error.h?ref=b701e1f8f6870c0f8cb4050674da489101dd05a5", "patch": "@@ -61,6 +61,7 @@ namespace regex_constants\n       _S_error_badrepeat,\n       _S_error_complexity,\n       _S_error_stack,\n+      _S_null\n     };\n \n   /** The expression contained an invalid collating element name. */"}, {"sha": "d81627dc3e9dee705e94b98cb6dfba8c05b0c7cc", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=b701e1f8f6870c0f8cb4050674da489101dd05a5", "patch": "@@ -175,6 +175,16 @@ namespace __detail\n \t  _M_state = _S_state_in_brace;\n \t  _M_token = _S_token_interval_begin;\n \t}\n+      else if (__builtin_expect(__c == _CharT(0), false))\n+\t{\n+\t  if (!_M_is_ecma())\n+\t    {\n+\t      __throw_regex_error(regex_constants::_S_null,\n+\t\t  \"Unexpected null character in regular expression\");\n+\t    }\n+\t  _M_token = _S_token_ord_char;\n+\t  _M_value.assign(1, __c);\n+\t}\n       else if (__c != ']' && __c != '}')\n \t{\n \t  auto __it = _M_token_tbl;"}, {"sha": "b9971dcaac5fcfe194734da5c3453fe786f14712", "filename": "libstdc++-v3/testsuite/28_regex/basic_regex/84110.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F84110.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b701e1f8f6870c0f8cb4050674da489101dd05a5/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F84110.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fbasic_regex%2F84110.cc?ref=b701e1f8f6870c0f8cb4050674da489101dd05a5", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do run { target c++11 } }\n+#include <regex>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  const std::string s(1ul, '\\0');\n+  std::regex re(s);\n+  VERIFY( std::regex_match(s, re) ); // PR libstdc++/84110\n+\n+#if __cpp_exceptions\n+  using namespace std::regex_constants;\n+  for (auto syn : {basic, extended, awk, grep, egrep})\n+  {\n+    try\n+    {\n+      std::regex{s, syn}; // '\\0' is not valid for other grammars\n+      VERIFY( false );\n+    }\n+    catch (const std::regex_error&)\n+    {\n+    }\n+  }\n+#endif\n+}\n+\n+void test02()\n+{\n+  const std::string s(\"uh-\\0h\", 5);\n+  std::regex re(s);\n+  VERIFY( std::regex_match(s, re) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}