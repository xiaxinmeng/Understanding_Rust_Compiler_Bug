{"sha": "73e89414882ecb8bd7de1bceb9d003e1af598c11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNlODk0MTQ4ODJlY2I4YmQ3ZGUxYmNlYjlkMDAzZTFhZjU5OGMxMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-03T20:06:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-08-03T20:07:23Z"}, "message": "Refer to C++20\n\nI noticed a bunch of references to c++2a.\n\n\tgcc/\n\t* doc/invoke.texi: Refer to c++20", "tree": {"sha": "3a546e26362aca0dc1fe523c33157f86d7a1a4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a546e26362aca0dc1fe523c33157f86d7a1a4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e89414882ecb8bd7de1bceb9d003e1af598c11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e89414882ecb8bd7de1bceb9d003e1af598c11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e89414882ecb8bd7de1bceb9d003e1af598c11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e89414882ecb8bd7de1bceb9d003e1af598c11/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2f4212e20c5dc4422aea355abe9a3bf0e05db71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2f4212e20c5dc4422aea355abe9a3bf0e05db71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2f4212e20c5dc4422aea355abe9a3bf0e05db71"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b6a58853a9906487564b5a808472f1f2111adb93", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e89414882ecb8bd7de1bceb9d003e1af598c11/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e89414882ecb8bd7de1bceb9d003e1af598c11/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=73e89414882ecb8bd7de1bceb9d003e1af598c11", "patch": "@@ -2833,7 +2833,7 @@ This flag is enabled by default for @option{-std=c++17}.\n @itemx -fno-char8_t\n @opindex fchar8_t\n @opindex fno-char8_t\n-Enable support for @code{char8_t} as adopted for C++2a.  This includes\n+Enable support for @code{char8_t} as adopted for C++20.  This includes\n the addition of a new @code{char8_t} fundamental type, changes to the\n types of UTF-8 string and character literals, new signatures for\n user-defined literals, associated standard library updates, and new\n@@ -2899,10 +2899,10 @@ exhaustion is signalled by throwing @code{std::bad_alloc}.  See also\n @itemx -fconcepts-ts\n @opindex fconcepts\n @opindex fconcepts-ts\n-Below @option{-std=c++2a}, @option{-fconcepts} enables support for the\n+Below @option{-std=c++20}, @option{-fconcepts} enables support for the\n C++ Extensions for Concepts Technical Specification, ISO 19217 (2015).\n \n-With @option{-std=c++2a} and above, Concepts are part of the language\n+With @option{-std=c++20} and above, Concepts are part of the language\n standard, so @option{-fconcepts} defaults to on.  But the standard\n specification of Concepts differs significantly from the TS, so some\n constructs that were allowed in the TS but didn't make it into the\n@@ -3286,7 +3286,7 @@ about ABI tags.\n @opindex Wcomma-subscript\n @opindex Wno-comma-subscript\n Warn about uses of a comma expression within a subscripting expression.\n-This usage was deprecated in C++2a.  However, a comma expression wrapped\n+This usage was deprecated in C++20.  However, a comma expression wrapped\n in @code{( )} is not deprecated.  Example:\n \n @smallexample\n@@ -3298,7 +3298,7 @@ void f(int *a, int b, int c) @{\n @end group\n @end smallexample\n \n-Enabled by default with @option{-std=c++2a}.\n+Enabled by default with @option{-std=c++20}.\n \n @item -Wctor-dtor-privacy @r{(C++ and Objective-C++ only)}\n @opindex Wctor-dtor-privacy\n@@ -3819,7 +3819,7 @@ non-class type, @code{volatile}-qualified function return type,\n @code{volatile}-qualified parameter type, and structured bindings of a\n @code{volatile}-qualified type.  This usage was deprecated in C++20.\n \n-Enabled by default with @option{-std=c++2a}.\n+Enabled by default with @option{-std=c++20}.\n \n @item -Wzero-as-null-pointer-constant @r{(C++ and Objective-C++ only)}\n @opindex Wzero-as-null-pointer-constant\n@@ -6273,7 +6273,7 @@ This is the warning level of @option{-Wshift-overflow} and is enabled\n by default in C99 and C++11 modes (and newer).  This warning level does\n not warn about left-shifting 1 into the sign bit.  (However, in C, such\n an overflow is still rejected in contexts where an integer constant expression\n-is required.)  No warning is emitted in C++2A mode (and newer), as signed left\n+is required.)  No warning is emitted in C++20 mode (and newer), as signed left\n shifts always wrap.\n \n @item -Wshift-overflow=2"}]}