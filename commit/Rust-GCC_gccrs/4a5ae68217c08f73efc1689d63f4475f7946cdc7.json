{"sha": "4a5ae68217c08f73efc1689d63f4475f7946cdc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE1YWU2ODIxN2MwOGY3M2VmYzE2ODlkNjNmNDQ3NWY3OTQ2Y2RjNw==", "commit": {"author": {"name": "Craig Burley", "email": "craig@jcb-sc.com", "date": "1999-05-01T23:00:12Z"}, "committer": {"name": "Craig Burley", "email": "burley@gcc.gnu.org", "date": "1999-05-01T23:00:12Z"}, "message": "new test, fails at -O2 on x86 target\n\nFrom-SVN: r26722", "tree": {"sha": "81f2072d4f3f3bda1fb28388c8784bb59ff9fea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81f2072d4f3f3bda1fb28388c8784bb59ff9fea4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a5ae68217c08f73efc1689d63f4475f7946cdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5ae68217c08f73efc1689d63f4475f7946cdc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5ae68217c08f73efc1689d63f4475f7946cdc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5ae68217c08f73efc1689d63f4475f7946cdc7/comments", "author": null, "committer": null, "parents": [{"sha": "851fc3922bf23a13494e0f7d74b6d335bef09ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/851fc3922bf23a13494e0f7d74b6d335bef09ca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/851fc3922bf23a13494e0f7d74b6d335bef09ca5"}], "stats": {"total": 355, "additions": 355, "deletions": 0}, "files": [{"sha": "02e025398729e5d42b2679bfbe0d81dfcc09a0b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5ae68217c08f73efc1689d63f4475f7946cdc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5ae68217c08f73efc1689d63f4475f7946cdc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a5ae68217c08f73efc1689d63f4475f7946cdc7", "patch": "@@ -1,3 +1,7 @@\n+1999-05-02  Craig Burley  <craig@jcb-sc.com>\n+\n+\t* g77.f-torture/compile/19990502-0.f: New test.\n+\n Sun May  2 01:38:50 1999  Craig Burley  <craig@jcb-sc.com>\n \n \t* g77.f-torture/execute/u77-test.f (main): Declare FTELL as"}, {"sha": "3c5cdc6ee61a44e75e220bca8fd2965d0a959866", "filename": "gcc/testsuite/g77.f-torture/compile/19990502-0.f", "status": "added", "additions": 351, "deletions": 0, "changes": 351, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5ae68217c08f73efc1689d63f4475f7946cdc7/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F19990502-0.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5ae68217c08f73efc1689d63f4475f7946cdc7/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F19990502-0.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg77.f-torture%2Fcompile%2F19990502-0.f?ref=4a5ae68217c08f73efc1689d63f4475f7946cdc7", "patch": "@@ -0,0 +1,351 @@\n+      SUBROUTINE TRF2F2(QDERIV,QPRINT,\n+     @                  XRH,XRK,XRL,FCALC,FOBS,FPART,WEIGHT,TEST,FOM,\n+     @                  ITEST)\n+C\n+C Computes the standard linear correlation coefficient between\n+C  F(obs)^2  and F(calc)^2 or between |F(obs)|  and |F(calc)|\n+C\n+C Author: Axel T. Brunger\n+C =======================\n+      IMPLICIT NONE\n+C I/O\n+C*\n+C*    BEGINNING OF INCLUDE FILE: xrefin.fcm\n+C*\n+C\n+C XREFIN.FCM\n+C\n+C data structure for XREFIN.FLX\n+C crystallographic restraints\n+C\n+C update flags\n+      LOGICAL XRQCHK, XRUPAT, XRREUP\n+C\n+C method flag\n+      LOGICAL QFFT, QLOOK\n+C target function string\n+      CHARACTER*4 XRTRGT\n+C\n+C tolerance for linear approximation\n+      DOUBLE PRECISION XRLTOL\n+C\n+C x-ray diffraction data\n+C XRMREF: max. allocation for reflections\n+C XRNREF: current number of reflections\n+C XRIREF: number of reflections within limits (resolution, f_window...)\n+C XRNPHA: number of phase specifications\n+C XRH, XRK, XRL: reflection indices\n+C FOBS: observed structure factor\n+C FOM: figure of merit for observed phases (zero if not used)\n+C WEIGHT: individual weight\n+C FCALC: calculated structure factor\n+C FPART: partial structure factor to be added to FCALC\n+C TEST: integer array for cross-validation tests\n+      INTEGER XRMREF, XRNREF, XRIREF, XRNPHA\n+      INTEGER HPH, HPK, HPL, HPFOBS, HPFCAL, HPFPAR, HPFOM\n+      INTEGER HPWEIG, HPTEST, HPSIGM\n+C scattering tables\n+      INTEGER XRSM, XRSN\n+      PARAMETER (XRSM=20)\n+      DOUBLE PRECISION XRSA(XRSM,4), XRSB(XRSM,4), XRSC(XRSM)\n+      DOUBLE PRECISION XRF(XRSM), XRSI(XRSM)\n+C unit cell\n+      DOUBLE PRECISION XRCELL(9), XRTR(3,3), XRINTR(3,3), XRVOL\n+C symmetry operators\n+      INTEGER XRNSYM, XRMSYM, XRSYTH\n+      PARAMETER (XRMSYM=192, XRSYTH=24)\n+      INTEGER XRSYMM(XRMSYM,3,4), XRITSY(XRMSYM,3,3)\n+      LOGICAL QHERM\n+C reciprocal resolution limits\n+      DOUBLE PRECISION XRHIGH, XRLOW\n+C fobs limits\n+      DOUBLE PRECISION XRFLOW, XRFHIG\n+C XREFIN atom lists\n+      INTEGER XRMATO, XRNATO, XRNATF, HPFLAG, HPATOM, HPINDX\n+      INTEGER HPATOF, HPINDF, HPFX, HPFY, HPFZ, HPFB, HPFQ, HPFQS\n+      INTEGER HPDX, HPDY, HPDZ, HPDT, HPDQ\n+C scale factor\n+      DOUBLE PRECISION XRSCAL\n+C phase potential scale factor and exponent\n+      DOUBLE PRECISION XRPSCA\n+      INTEGER XRPEXP\n+C Fobs/Fcalc scale factor\n+      DOUBLE PRECISION XRFFK\n+      LOGICAL XRFFKQ\n+C unscaled restraint energies\n+      DOUBLE PRECISION XRE, XREPHA\n+C number of bins for R factor analysis\n+      INTEGER MBINS\n+C logical flag indicating the presence of TEST sets (for\n+C cross-validation)\n+      LOGICAL XCVTEST\n+C\n+C     double precision common block\n+C\n+      COMMON /XREFI/ XRLTOL,\n+     @               XRSA, XRSB, XRSC, XRF, XRSI,\n+     @               XRCELL, XRTR, XRINTR, XRHIGH, XRLOW,\n+     @               XRSCAL, XRPSCA,\n+     @               XRFFK,  XRE, XREPHA,\n+     @               XRFLOW, XRFHIG, XRVOL\n+C\n+C     integer common block\n+C\n+      COMMON /IXREFI/\n+     @               XRMREF, XRNREF, XRIREF, XRNPHA, HPH, HPK, HPL,\n+     @               HPFOBS, HPFCAL, HPFPAR, HPFOM, HPWEIG, HPTEST,\n+     @               HPSIGM, XRSN,   HPFLAG,\n+     @               XRMATO, XRNATO, HPATOM, HPINDX, XRNATF, HPATOF,\n+     @               HPINDF, HPFX, HPFY, HPFZ, HPFB, HPFQ, HPFQS,\n+     @               HPDX, HPDY, HPDZ, HPDT, HPDQ,\n+     @               XRPEXP,\n+     @               XRNSYM, XRSYMM, MBINS, XRITSY\n+C\n+C     logical common block\n+C\n+      COMMON /LXREFI/ XRQCHK,  XRUPAT,  XRFFKQ,\n+     @                QFFT,    QLOOK,  XRREUP, QHERM, XCVTEST\n+C\n+C     character string common block\n+C\n+      COMMON /CXREFI/ XRTRGT\n+C\n+      SAVE /XREFI/\n+      SAVE /IXREFI/\n+      SAVE /LXREFI/\n+      SAVE /CXREFI/\n+C*\n+C*    BEGINNING OF INCLUDE FILE: consta.fcm\n+C*\n+C  CONSTA.FCM\n+C\n+C this file contains all physical and mathematical constants\n+C and conversion factors.\n+C\n+C at present the following units are used:\n+C\n+C   length: Angstroms\n+C   time: ps\n+C   energy: Kcal/mol\n+C   mass: atomic-mass-unit\n+C   charge: electron-charge\n+C\n+C\n+      DOUBLE PRECISION RSMALL\n+      PARAMETER (RSMALL=1.0D-10)\n+      DOUBLE PRECISION R4SMAL,R4BIG\n+      PARAMETER (R4SMAL=0.0001D0,R4BIG=1.0D+10)\n+C\n+C physical constants in SI units\n+C ------------------------------\n+C     Kb = 1.380662 E-23 J/K\n+C     Na = 6.022045 E23  1/mol\n+C     e = 1.6021892 E-19 C\n+C     eps = 8.85418782 E-12 F/m\n+C\n+C     1 Kcal = 4184.0 J\n+C     1 amu = 1.6605655 E-27 Kg\n+C     1 A = 1.0 E-10 m\n+C\n+C reference: CRC Handbook for Chemistry and Physics, 1983/84\n+C\n+C\n+      DOUBLE PRECISION PI\n+      PARAMETER(PI=3.1415926535898D0)\n+C\n+C     TIMFAC is the conversion factor from AKMA time to picoseconds.\n+C            (TIMFAC = SQRT ( ( 1A )**2 * 1amu * Na  / 1Kcal )\n+C            this factor is used only intrinsically, all I/O is in ps.\n+C\n+      DOUBLE PRECISION TIMFAC\n+      PARAMETER (TIMFAC=0.04888821D0)\n+C\n+C KBOLTZ is Boltzman constant AKMA units (KBOLTZ = N *K  / 1 Kcal)\n+C                                                   a  b\n+      DOUBLE PRECISION KBOLTZ\n+      PARAMETER (KBOLTZ=1.987191D-03)\n+C\n+C CCELEC is 1/ (4 pi eps ) in AKMA units, conversion from SI\n+C units: CCELEC = e*e*Na / (4*pi*eps*1Kcal*1A)\n+C\n+      DOUBLE PRECISION CCELEC\n+      PARAMETER (CCELEC=332.0636D0)\n+C\n+C CDEBHU is used in the Debye-Hueckel approximation:\n+C      DIV GRAD phi = kappa**2 phi\n+C      kappa**2 = CDEBHU * ionic_strength [M] / ( T [K] eps   )\n+C                                                          ext\n+C where CDEBHU is defined as CDEBHU=2E+3 Na e**2 / (eps0 Kb )\n+C (in SI units, ref: Gordon M.Barrow, Physical Chemistry,\n+C McGraw Hill (1979) ) and ionic_strength is given in molar units.\n+C The conversion to AKMA units brings another factor 1.0E-20.\n+C\n+      DOUBLE PRECISION CDEBHU\n+      PARAMETER (CDEBHU=2529.09702D0)\n+      LOGICAL QDERIV, QPRINT\n+      INTEGER XRH(*), XRK(*), XRL(*)\n+      DOUBLE COMPLEX FCALC(*), FOBS(*), FPART(*)\n+      DOUBLE PRECISION WEIGHT(*)\n+      INTEGER TEST(*)\n+      DOUBLE PRECISION FOM(*)\n+      INTEGER ITEST\n+C local\n+      INTEGER REFLCT\n+      DOUBLE PRECISION CI, CJ, CII, CJJ, CIJ, IFCALC, IFOBS\n+      DOUBLE PRECISION WSUM, DSUM, CSUM, DERIV, CORR\n+      CHARACTER*30 LINE\n+      INTEGER LLINE\n+      DOUBLE COMPLEX DBCOMP\n+C parameters\n+      DOUBLE PRECISION ZERO, ONE, TWO, THREE, FOUR\n+      PARAMETER (ZERO=0.0D0, ONE=1.0D0, TWO=2.0D0, THREE=3.0D0)\n+      PARAMETER (FOUR=4.0D0)\n+C begin\n+C\n+C initialize correlation coefficients\n+      WSUM=ZERO\n+      CI=ZERO\n+      CJ=ZERO\n+      CII=ZERO\n+      CJJ=ZERO\n+      CIJ=ZERO\n+      IF (XRTRGT.EQ.'F2F2') THEN\n+      DO 17790 REFLCT=1,XRIREF\n+      IF (TEST(REFLCT).EQ.ITEST) THEN\n+C\n+C compute F^2's\n+      IFOBS=DREAL(FOBS(REFLCT))**2+DIMAG(FOBS(REFLCT))**2\n+      IFCALC=DREAL(FCALC(REFLCT)+FPART(REFLCT))**2\n+     @      +DIMAG(FCALC(REFLCT)+FPART(REFLCT))**2\n+C\n+C accumulate information for weighted correlation coefficients\n+      WSUM=WSUM+WEIGHT(REFLCT)\n+      CI=CI+WEIGHT(REFLCT)*IFOBS\n+      CJ=CJ+WEIGHT(REFLCT)*IFCALC\n+      CII=CII+WEIGHT(REFLCT)*IFOBS**2\n+      CJJ=CJJ+WEIGHT(REFLCT)*IFCALC**2\n+      CIJ=CIJ+WEIGHT(REFLCT)*IFOBS*IFCALC\n+      END IF\n+17790 CONTINUE\n+      ELSE\n+      DO 17791 REFLCT=1,XRIREF\n+      IF (TEST(REFLCT).EQ.ITEST) THEN\n+C\n+C compute |F|'s\n+      IFOBS=SQRT(DREAL(FOBS(REFLCT))**2+DIMAG(FOBS(REFLCT))**2)\n+      IFCALC=SQRT(DREAL(FCALC(REFLCT)+FPART(REFLCT))**2\n+     @      +DIMAG(FCALC(REFLCT)+FPART(REFLCT))**2)\n+C\n+C accumulate information for weighted correlation coefficients\n+      WSUM=WSUM+WEIGHT(REFLCT)\n+      CI=CI+WEIGHT(REFLCT)*IFOBS\n+      CJ=CJ+WEIGHT(REFLCT)*IFCALC\n+      CII=CII+WEIGHT(REFLCT)*IFOBS**2\n+      CJJ=CJJ+WEIGHT(REFLCT)*IFCALC**2\n+      CIJ=CIJ+WEIGHT(REFLCT)*IFOBS*IFCALC\n+      END IF\n+17791 CONTINUE\n+      END IF\n+C\n+C do some checking\n+      IF (ABS(CI).LT.RSMALL) THEN\n+      WRITE(6,'(A,I3,A)')\n+     @ ' %TRF2F2-error: sum over WEIGHT*FOBS is zero (for TEST=',\n+     @ ITEST,')'\n+      ELSE IF (ABS(CJ).LT.RSMALL) THEN\n+      WRITE(6,'(A,I3,A)')\n+     @' %TRF2F2-error: sum over WEIGHT*(FCALC+FPART) is 0 (for TEST=',\n+     @ ITEST,')'\n+      ELSE\n+C\n+C compute weighted correlation coefficient\n+      DSUM=(CII-CI**2/WSUM)*(CJJ-CJ**2/WSUM)\n+      CSUM=CIJ - CI*CJ/WSUM\n+      IF (DSUM.GT.RSMALL) THEN\n+      DSUM=SQRT(DSUM)\n+      CORR=CSUM/DSUM\n+      ELSE\n+      CORR=ZERO\n+      END IF\n+C\n+C store in energy term\n+      XRE=XRSCAL*(ONE-CORR)\n+C\n+C compute derivatives if required\n+      IF (QDERIV) THEN\n+C\n+C compute derivatives for F's\n+      IF (XRTRGT.EQ.'F2F2') THEN\n+      DO 17792 REFLCT=1,XRIREF\n+      IF (TEST(REFLCT).EQ.ITEST) THEN\n+C\n+C compute amplitudes\n+      IFOBS=DREAL(FOBS(REFLCT))**2+DIMAG(FOBS(REFLCT))**2\n+      IFCALC=DREAL(FCALC(REFLCT)+FPART(REFLCT))**2\n+     @      +DIMAG(FCALC(REFLCT)+FPART(REFLCT))**2\n+C\n+C compute derivative with respect to FCALC(H)\n+      IF (DSUM.GT.RSMALL) THEN\n+      DERIV=-TWO*XRSCAL*WEIGHT(REFLCT)*( (IFOBS-CI/WSUM)/DSUM -\n+     @      (CORR/DSUM**2)*(CII-CI**2/WSUM)*(IFCALC-CJ/WSUM) )\n+      ELSE\n+      DERIV=ZERO\n+      END IF\n+      FCALC(REFLCT)=(FCALC(REFLCT)+FPART(REFLCT))*DERIV\n+      ELSE\n+      FCALC(REFLCT)=ZERO\n+      END IF\n+17792 CONTINUE\n+      ELSE\n+      DO 17793 REFLCT=1,XRIREF\n+      IF (TEST(REFLCT).EQ.ITEST) THEN\n+C\n+C compute amplitudes\n+      IFOBS=SQRT(DREAL(FOBS(REFLCT))**2+DIMAG(FOBS(REFLCT))**2)\n+      IFCALC=SQRT(DREAL(FCALC(REFLCT)+FPART(REFLCT))**2\n+     @           +DIMAG(FCALC(REFLCT)+FPART(REFLCT))**2)\n+C\n+C compute derivative with respect to |FCALC|(H)\n+      IF (DSUM.GT.RSMALL.AND.IFCALC.GT.RSMALL) THEN\n+      DERIV=-XRSCAL*WEIGHT(REFLCT)*( (IFOBS-CI/WSUM)/DSUM -\n+     @      (CORR/DSUM**2)*(CII-CI**2/WSUM)*(IFCALC-CJ/WSUM) ) /\n+     @       IFCALC\n+      ELSE\n+      DERIV=ZERO\n+      END IF\n+      FCALC(REFLCT)=(FCALC(REFLCT)+FPART(REFLCT))*DERIV\n+      ELSE\n+      FCALC(REFLCT)=ZERO\n+      END IF\n+17793 CONTINUE\n+      END IF\n+      END IF\n+C\n+      IF (QPRINT) THEN\n+      IF (XCVTEST.AND.ITEST.EQ.0) THEN\n+      CALL DECLAR( 'CORR', 'DP', ' ', DBCOMP, CORR )\n+      LINE=' ->[WORKING SET (TEST=0)]'\n+      LLINE=25\n+      ELSEIF (XCVTEST.AND.ITEST.EQ.1) THEN\n+      CALL DECLAR( 'TEST_CORR', 'DP', ' ', DBCOMP, CORR )\n+      LINE=' ->[TEST SET (TEST=1)]   '\n+      LLINE=22\n+      ELSE\n+      CALL DECLAR( 'CORR', 'DP', ' ', DBCOMP, CORR )\n+      LINE=' '\n+      LLINE=1\n+      END IF\n+      IF (XRTRGT.EQ.'F2F2') THEN\n+      WRITE(6,'(3A,F12.3)')\n+     @ ' TRF2F2:',LINE(1:LLINE),\n+     @ ' Corr<F(obs)^2, F(calc)^2> =',CORR\n+      ELSE\n+      WRITE(6,'(3A,F12.3)')\n+     @ ' TRF2F2:',LINE(1:LLINE),\n+     @ ' Corr<|F(obs)|, |F(calc)|> =',CORR\n+      END IF\n+      END IF\n+C\n+      END IF\n+      RETURN\n+      END"}]}