{"sha": "d174af6c5853a9adef67ed509faa51a79ad9d320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3NGFmNmM1ODUzYTlhZGVmNjdlZDUwOWZhYTUxYTc5YWQ5ZDMyMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-02-18T08:36:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-02-18T08:36:11Z"}, "message": "re PR c++/26266 (Trouble with static const data members in template classes)\n\n\tPR c++/26266\n\t* cp-tree.h (cp_finish_decl): Adjust declaration.\n\t(grokbitfield): Likewise.\n\t(finish_static_data_member_decl): Likewise.\n\t* init.c (constant_value_1): Ensure processing_template_decl when\n\tfolding non-dependent initializers for static data members of\n\tdependent types.  Return error_mark_node for erroneous\n\tinitailizers.\n\t* class.c (get_vtable_decl): Use finish_decl, not cp_finish_decl.\n\t* decl.c (cp_make_fname_decl): Adjust call to cp_finish_decl.\n\t(cp_finish_decl): Add init_const_expr_p parameter.  Set\n\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P here.\n\t(finish_decl): Adjust call to cp_finish_decl.\n\t(compute_array_index_type): Robustify.\n\t(start_method): Use finish_decl, not cp_finish_decl.\n\t* rtti.c (emit_tinfo_decl): Likewise.\n\t* except.c (initialize_handler_parm): Adjust call to\n\tcp_finish_decl.\n\t(expand_start_catch_block): Likewise.\n\t* cvt.c (build_up_reference): Adjust call to cp_finish_decl.\n\t* pt.c (instantiate_class_template): Adjust call to\n\tfinish_static_data_member_decl.\n\t(tsubst_expr): Use finish_decl, not cp_finish_decl.\n\t(instantiate_decl): Adjust call to cp_finish_decl.\n\t* name-lookup.c (pushdecl_top_level_1): Use finish_decl, not\n\tcp_finish_decl.\n\t* decl2.c (finish_static_data_member_decl): Add init_const_expr_p\n\tparameter.\n\t(grokfield): Likewise.\n\t* parser.c (cp_parser_condition): Check for constant initializers.\n\t(cp_parser_init_declarator): Adjust calls to grokfield and\n\tcp_finish_decl.  Don't set\n\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P here.\n\t(cp_parser_member_declaration): Likewise.\n\t(cp_parser_objc_class_ivars): Likewise.\n\tPR c++/26266\n\t* g++.dg/template/static22.C: New test.\n\t* g++.dg/template/static23.C: New test.\n\t* g++.dg/template/static24.C: New test.\n\t* g++.dg/template/non-dependent13.C: New test.\n\nFrom-SVN: r111229", "tree": {"sha": "c096019ad738deb34504520ca833df4491508a99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c096019ad738deb34504520ca833df4491508a99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d174af6c5853a9adef67ed509faa51a79ad9d320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d174af6c5853a9adef67ed509faa51a79ad9d320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d174af6c5853a9adef67ed509faa51a79ad9d320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d174af6c5853a9adef67ed509faa51a79ad9d320/comments", "author": null, "committer": null, "parents": [{"sha": "8305d7868da2a057825734b31113455ef97d9a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8305d7868da2a057825734b31113455ef97d9a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8305d7868da2a057825734b31113455ef97d9a76"}], "stats": {"total": 265, "additions": 190, "deletions": 75}, "files": [{"sha": "b7cda7715f1201692987b6b64e4d19b3a1e5ecdc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -1,3 +1,41 @@\n+2006-02-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26266\n+\t* cp-tree.h (cp_finish_decl): Adjust declaration.\n+\t(grokbitfield): Likewise.\n+\t(finish_static_data_member_decl): Likewise.\n+\t* init.c (constant_value_1): Ensure processing_template_decl when\n+\tfolding non-dependent initializers for static data members of\n+\tdependent types.  Return error_mark_node for erroneous\n+\tinitailizers.\n+\t* class.c (get_vtable_decl): Use finish_decl, not cp_finish_decl.\n+\t* decl.c (cp_make_fname_decl): Adjust call to cp_finish_decl.\n+\t(cp_finish_decl): Add init_const_expr_p parameter.  Set\n+\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P here.\n+\t(finish_decl): Adjust call to cp_finish_decl.\n+\t(compute_array_index_type): Robustify.\n+\t(start_method): Use finish_decl, not cp_finish_decl.\n+\t* rtti.c (emit_tinfo_decl): Likewise.\n+\t* except.c (initialize_handler_parm): Adjust call to\n+\tcp_finish_decl.\n+\t(expand_start_catch_block): Likewise.\n+\t* cvt.c (build_up_reference): Adjust call to cp_finish_decl.\n+\t* pt.c (instantiate_class_template): Adjust call to\n+\tfinish_static_data_member_decl.\n+\t(tsubst_expr): Use finish_decl, not cp_finish_decl.\n+\t(instantiate_decl): Adjust call to cp_finish_decl.\n+\t* name-lookup.c (pushdecl_top_level_1): Use finish_decl, not\n+\tcp_finish_decl.\n+\t* decl2.c (finish_static_data_member_decl): Add init_const_expr_p\n+\tparameter.\n+\t(grokfield): Likewise.\n+\t* parser.c (cp_parser_condition): Check for constant initializers.\n+\t(cp_parser_init_declarator): Adjust calls to grokfield and\n+\tcp_finish_decl.  Don't set\n+\tDECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P here.\n+\t(cp_parser_member_declaration): Likewise.\n+\t(cp_parser_objc_class_ivars): Likewise.\n+\n 2006-02-14  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* call.c (standard_conversion): Return NULL instead of 0."}, {"sha": "3f48faeb4eca5f5df9f07ea6c7845e277fd7ce2a", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -741,7 +741,7 @@ get_vtable_decl (tree type, int complete)\n   if (complete)\n     {\n       DECL_EXTERNAL (decl) = 1;\n-      cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0);\n+      finish_decl (decl, NULL_TREE, NULL_TREE);\n     }\n \n   return decl;"}, {"sha": "2f67f374ff31b50af2f9047feeeb158ac2a4faa4", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -3802,7 +3802,7 @@ extern tree shadow_tag\t\t\t\t(cp_decl_specifier_seq *);\n extern tree groktypename\t\t\t(cp_decl_specifier_seq *, const cp_declarator *);\n extern tree start_decl\t\t\t\t(const cp_declarator *, cp_decl_specifier_seq *, int, tree, tree, tree *);\n extern void start_decl_1\t\t\t(tree);\n-extern void cp_finish_decl\t\t\t(tree, tree, tree, int);\n+extern void cp_finish_decl\t\t\t(tree, tree, bool, tree, int);\n extern void finish_decl\t\t\t\t(tree, tree, tree);\n extern int cp_complete_array_type\t\t(tree *, tree, bool);\n extern tree build_ptrmemfunc_type\t\t(tree);\n@@ -3876,7 +3876,7 @@ extern tree delete_sanity\t\t\t(tree, tree, bool, int);\n extern tree check_classfn\t\t\t(tree, tree, tree);\n extern void check_member_template\t\t(tree);\n extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n-\t\t       tree, tree, tree);\n+\t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);\n@@ -3891,7 +3891,7 @@ extern tree build_cleanup\t\t\t(tree);\n extern tree build_offset_ref_call_from_tree\t(tree, tree);\n extern void check_default_args\t\t\t(tree);\n extern void mark_used\t\t\t\t(tree);\n-extern void finish_static_data_member_decl\t(tree, tree, tree, int);\n+extern void finish_static_data_member_decl\t(tree, tree, bool, tree, int);\n extern tree cp_build_parm_decl\t\t\t(tree, tree);\n extern tree get_guard\t\t\t\t(tree);\n extern tree get_guard_cond\t\t\t(tree);"}, {"sha": "c59c74c135cae45d3485aebbf73c053314696b83", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -365,7 +365,7 @@ build_up_reference (tree type, tree arg, int flags, tree decl)\n \n       /* Process the initializer for the declaration.  */\n       DECL_INITIAL (arg) = targ;\n-      cp_finish_decl (arg, targ, NULL_TREE,\n+      cp_finish_decl (arg, targ, /*init_const_expr_p=*/false, NULL_TREE,\n \t\t      LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n     }\n   else if (!(flags & DIRECT_BIND) && ! lvalue_p (arg))"}, {"sha": "35dc38c0a45537bc4eb9b8d3f1a80bcedbf01a54", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -3197,7 +3197,8 @@ cp_make_fname_decl (tree id, int type_dep)\n       while (b->level_chain->kind != sk_function_parms)\n \tb = b->level_chain;\n       pushdecl_with_scope (decl, b, /*is_friend=*/false);\n-      cp_finish_decl (decl, init, NULL_TREE, LOOKUP_ONLYCONVERTING);\n+      cp_finish_decl (decl, init, /*init_const_expr_p=*/false, NULL_TREE, \n+\t\t      LOOKUP_ONLYCONVERTING);\n     }\n   else\n     pushdecl_top_level_and_finish (decl, init);\n@@ -4855,14 +4856,15 @@ initialize_artificial_var (tree decl, tree init)\n    If the length of an array type is not known before,\n    it must be determined now, from the initial value, or it is an error.\n \n-   INIT holds the value of an initializer that should be allowed to escape\n-   the normal rules.\n+   INIT is the initializer (if any) for DECL.  If INIT_CONST_EXPR_P is\n+   true, then INIT is an integral constant expression.\n \n    FLAGS is LOOKUP_ONLYCONVERTING if the = init syntax was used, else 0\n    if the (init) syntax was used.  */\n \n void\n-cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n+cp_finish_decl (tree decl, tree init, bool init_const_expr_p, \n+\t\ttree asmspec_tree, int flags)\n {\n   tree type;\n   tree cleanup;\n@@ -4914,7 +4916,16 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \tadd_decl_expr (decl);\n \n       if (init && DECL_INITIAL (decl))\n-\tDECL_INITIAL (decl) = init;\n+\t{\n+\t  DECL_INITIAL (decl) = init;\n+\t  if (init_const_expr_p)\n+\t    {\n+\t      DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n+\t      if (DECL_INTEGRAL_CONSTANT_VAR_P (decl))\n+\t\tTREE_CONSTANT (decl) = 1;\n+\t    }\n+\t}\n+\n       if (TREE_CODE (decl) == VAR_DECL\n \t  && !DECL_PRETTY_FUNCTION_P (decl)\n \t  && !dependent_type_p (TREE_TYPE (decl)))\n@@ -4975,7 +4986,15 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n \t  && (!DECL_EXTERNAL (decl) || init))\n \t{\n \t  if (init)\n-\t    DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n+\t    {\n+\t      DECL_NONTRIVIALLY_INITIALIZED_P (decl) = 1;\n+\t      if (init_const_expr_p)\n+\t\t{\n+\t\t  DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n+\t\t  if (DECL_INTEGRAL_CONSTANT_VAR_P (decl))\n+\t\t    TREE_CONSTANT (decl) = 1;\n+\t\t}\n+\t    }\n \t  init = check_initializer (decl, init, flags, &cleanup);\n \t  /* Thread-local storage cannot be dynamically initialized.  */\n \t  if (DECL_THREAD_LOCAL_P (decl) && init)\n@@ -5127,7 +5146,7 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n void\n finish_decl (tree decl, tree init, tree asmspec_tree)\n {\n-  cp_finish_decl (decl, init, asmspec_tree, 0);\n+  cp_finish_decl (decl, init, /*init_const_expr_p=*/false, asmspec_tree, 0);\n }\n \n /* Returns a declaration for a VAR_DECL as if:\n@@ -5152,7 +5171,7 @@ declare_global_var (tree name, tree type)\n      library), then it is possible that our declaration will be merged\n      with theirs by pushdecl.  */\n   decl = pushdecl (decl);\n-  cp_finish_decl (decl, NULL_TREE, NULL_TREE, 0);\n+  finish_decl (decl, NULL_TREE, NULL_TREE);\n   pop_from_top_level ();\n \n   return decl;\n@@ -6274,9 +6293,13 @@ check_static_variable_definition (tree decl, tree type)\n tree\n compute_array_index_type (tree name, tree size)\n {\n-  tree type = TREE_TYPE (size);\n+  tree type;\n   tree itype;\n \n+  if (error_operand_p (size))\n+    return error_mark_node;\n+\n+  type = TREE_TYPE (size);\n   /* The array bound must be an integer type.  */\n   if (!dependent_type_p (type) && !INTEGRAL_TYPE_P (type))\n     {\n@@ -11033,7 +11056,7 @@ start_method (cp_decl_specifier_seq *declspecs,\n       grok_special_member_properties (fndecl);\n     }\n \n-  cp_finish_decl (fndecl, NULL_TREE, NULL_TREE, 0);\n+  finish_decl (fndecl, NULL_TREE, NULL_TREE);\n \n   /* Make a place for the parms.  */\n   begin_scope (sk_function_parms, fndecl);"}, {"sha": "18cdae214f9af3e323807027a716fc25df6936e5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -737,12 +737,12 @@ note_vague_linkage_var (tree var)\n }\n \n /* We have just processed the DECL, which is a static data member.\n-   Its initializer, if present, is INIT.  The ASMSPEC_TREE, if\n-   present, is the assembly-language name for the data member.\n-   FLAGS is as for cp_finish_decl.  */\n+   The other parameters are as for cp_finish_decl.  */\n \n void\n-finish_static_data_member_decl (tree decl, tree init, tree asmspec_tree,\n+finish_static_data_member_decl (tree decl, \n+\t\t\t\ttree init, bool init_const_expr_p,\n+\t\t\t\ttree asmspec_tree,\n \t\t\t\tint flags)\n {\n   gcc_assert (TREE_PUBLIC (decl));\n@@ -783,31 +783,18 @@ finish_static_data_member_decl (tree decl, tree init, tree asmspec_tree,\n   DECL_INITIAL (decl) = init;\n   DECL_IN_AGGR_P (decl) = 1;\n \n-  cp_finish_decl (decl, init, asmspec_tree, flags);\n+  cp_finish_decl (decl, init, init_const_expr_p, asmspec_tree, flags);\n }\n \n-/* Process the specs, declarator (NULL if omitted) and width (NULL if omitted)\n-   of a structure component, returning a _DECL node.\n-   QUALS is a list of type qualifiers for this decl (such as for declaring\n-   const member functions).\n-\n-   This is done during the parsing of the struct declaration.\n-   The _DECL nodes are chained together and the lot of them\n-   are ultimately passed to `build_struct' to make the RECORD_TYPE node.\n-\n-   If class A defines that certain functions in class B are friends, then\n-   the way I have set things up, it is B who is interested in permission\n-   granted by A.  However, it is in A's context that these declarations\n-   are parsed.  By returning a void_type_node, class A does not attempt\n-   to incorporate the declarations of the friends within its structure.\n-\n-   DO NOT MAKE ANY CHANGES TO THIS CODE WITHOUT MAKING CORRESPONDING\n-   CHANGES TO CODE IN `start_method'.  */\n+/* DECLARATOR and DECLSPECS correspond to a class member.  The othe\n+   parameters are as for cp_finish_decl.  Return the DECL for the\n+   class member declared.  */ \n \n tree\n grokfield (const cp_declarator *declarator,\n \t   cp_decl_specifier_seq *declspecs,\n-\t   tree init, tree asmspec_tree,\n+\t   tree init, bool init_const_expr_p,\n+\t   tree asmspec_tree,\n \t   tree attrlist)\n {\n   tree value;\n@@ -946,16 +933,17 @@ grokfield (const cp_declarator *declarator,\n   switch (TREE_CODE (value))\n     {\n     case VAR_DECL:\n-      finish_static_data_member_decl (value, init, asmspec_tree,\n-\t\t\t\t      flags);\n+      finish_static_data_member_decl (value, init, init_const_expr_p,\n+\t\t\t\t      asmspec_tree, flags);\n       return value;\n \n     case FIELD_DECL:\n       if (asmspec)\n \terror (\"%<asm%> specifiers are not permitted on non-static data members\");\n       if (DECL_INITIAL (value) == error_mark_node)\n \tinit = error_mark_node;\n-      cp_finish_decl (value, init, NULL_TREE, flags);\n+      cp_finish_decl (value, init, /*init_const_expr_p=*/false, \n+\t\t      NULL_TREE, flags);\n       DECL_INITIAL (value) = init;\n       DECL_IN_AGGR_P (value) = 1;\n       return value;\n@@ -966,7 +954,8 @@ grokfield (const cp_declarator *declarator,\n       if (!DECL_FRIEND_P (value))\n \tgrok_special_member_properties (value);\n \n-      cp_finish_decl (value, init, asmspec_tree, flags);\n+      cp_finish_decl (value, init, /*init_const_expr_p=*/false, \n+\t\t      asmspec_tree, flags);\n \n       /* Pass friends back this way.  */\n       if (DECL_FRIEND_P (value))\n@@ -1025,7 +1014,7 @@ grokbitfield (const cp_declarator *declarator,\n       error (\"static member %qD cannot be a bit-field\", value);\n       return NULL_TREE;\n     }\n-  cp_finish_decl (value, NULL_TREE, NULL_TREE, 0);\n+  finish_decl (value, NULL_TREE, NULL_TREE);\n \n   if (width != error_mark_node)\n     {"}, {"sha": "8d684864232263d3015495be43e6fa551b781edf", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -397,7 +397,7 @@ initialize_handler_parm (tree decl, tree exp)\n   decl = pushdecl (decl);\n \n   start_decl_1 (decl);\n-  cp_finish_decl (decl, init, NULL_TREE,\n+  cp_finish_decl (decl, init, /*init_const_expr_p=*/false, NULL_TREE,\n \t\t  LOOKUP_ONLYCONVERTING|DIRECT_BIND);\n }\n \n@@ -461,7 +461,8 @@ expand_start_catch_block (tree decl)\n       tree init = do_begin_catch ();\n       exp = create_temporary_var (ptr_type_node);\n       DECL_REGISTER (exp) = 1;\n-      cp_finish_decl (exp, init, NULL_TREE, LOOKUP_ONLYCONVERTING);\n+      cp_finish_decl (exp, init, /*init_const_expr=*/false, \n+\t\t      NULL_TREE, LOOKUP_ONLYCONVERTING);\n       finish_expr_stmt (build_modify_expr (exp, INIT_EXPR, init));\n       initialize_handler_parm (decl, exp);\n     }"}, {"sha": "6a7e625a00f28d8d7da8d817e4c7a94ccaf11739", "filename": "gcc/cp/init.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -1484,7 +1484,7 @@ constant_value_1 (tree decl, bool integral_p)\n       tree init;\n       /* Static data members in template classes may have\n \t non-dependent initializers.  References to such non-static\n-\t data members are no value-dependent, so we must retrieve the\n+\t data members are not value-dependent, so we must retrieve the\n \t initializer here.  The DECL_INITIAL will have the right type,\n \t but will not have been folded because that would prevent us\n \t from performing all appropriate semantic checks at\n@@ -1493,7 +1493,11 @@ constant_value_1 (tree decl, bool integral_p)\n \t  && CLASSTYPE_TEMPLATE_INFO (DECL_CONTEXT (decl))\n \t  && uses_template_parms (CLASSTYPE_TI_ARGS \n \t\t\t\t  (DECL_CONTEXT (decl))))\n-\tinit = fold_non_dependent_expr (DECL_INITIAL (decl));\n+\t{\n+\t  ++processing_template_decl;\n+\t  init = fold_non_dependent_expr (DECL_INITIAL (decl));\n+\t  --processing_template_decl;\n+\t}\n       else\n \t{\n \t  /* If DECL is a static data member in a template\n@@ -1503,7 +1507,9 @@ constant_value_1 (tree decl, bool integral_p)\n \t  mark_used (decl);\n \t  init = DECL_INITIAL (decl);\n \t}\n-      if (!init || init == error_mark_node\n+      if (init == error_mark_node)\n+\treturn error_mark_node;\n+      if (!init\n \t  || !TREE_TYPE (init)\n \t  || (integral_p\n \t      ? !INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (init))"}, {"sha": "52cef59bb9573055747bcf32ca7e7aae2db213a6", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -3324,7 +3324,7 @@ pushdecl_top_level_1 (tree x, tree *init, bool is_friend)\n   push_to_top_level ();\n   x = pushdecl_namespace_level (x, is_friend);\n   if (init)\n-    cp_finish_decl (x, *init, NULL_TREE, 0);\n+    finish_decl (x, *init, NULL_TREE);\n   pop_from_top_level ();\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, x);\n }"}, {"sha": "ffec8f2fdddb776f8b72ea64c44d2d64b31df124", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -6500,19 +6500,24 @@ cp_parser_condition (cp_parser* parser)\n       if (cp_parser_parse_definitely (parser))\n \t{\n \t  tree pushed_scope;\n+\t  bool non_constant_p;\n \n \t  /* Create the declaration.  */\n \t  decl = start_decl (declarator, &type_specifiers,\n \t\t\t     /*initialized_p=*/true,\n \t\t\t     attributes, /*prefix_attributes=*/NULL_TREE,\n \t\t\t     &pushed_scope);\n \t  /* Parse the assignment-expression.  */\n-\t  initializer = cp_parser_assignment_expression (parser,\n-\t\t\t\t\t\t\t /*cast_p=*/false);\n+\t  initializer \n+\t    = cp_parser_constant_expression (parser,\n+\t\t\t\t\t     /*allow_non_constant_p=*/true,\n+\t\t\t\t\t     &non_constant_p);\n+\t  if (!non_constant_p)\n+\t    initializer = fold_non_dependent_expr (initializer);\n \n \t  /* Process the initializer.  */\n \t  cp_finish_decl (decl,\n-\t\t\t  initializer,\n+\t\t\t  initializer, !non_constant_p, \n \t\t\t  asm_specification,\n \t\t\t  LOOKUP_ONLYCONVERTING);\n \n@@ -11061,7 +11066,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t  pushed_scope = false;\n \t}\n       decl = grokfield (declarator, decl_specifiers,\n-\t\t\tinitializer, /*asmspec=*/NULL_TREE,\n+\t\t\tinitializer, !is_non_constant_init,\n+\t\t\t/*asmspec=*/NULL_TREE,\n \t\t\tprefix_attributes);\n       if (decl && TREE_CODE (decl) == FUNCTION_DECL)\n \tcp_parser_save_default_args (parser, decl);\n@@ -11072,7 +11078,7 @@ cp_parser_init_declarator (cp_parser* parser,\n   if (!friend_p && decl && decl != error_mark_node)\n     {\n       cp_finish_decl (decl,\n-\t\t      initializer,\n+\t\t      initializer, !is_non_constant_init,\n \t\t      asm_specification,\n \t\t      /* If the initializer is in parentheses, then this is\n \t\t\t a direct-initialization, which means that an\n@@ -11084,12 +11090,6 @@ cp_parser_init_declarator (cp_parser* parser,\n   if (!friend_p && pushed_scope)\n     pop_scope (pushed_scope);\n \n-  /* Remember whether or not variables were initialized by\n-     constant-expressions.  */\n-  if (decl && TREE_CODE (decl) == VAR_DECL\n-      && is_initialized && !is_non_constant_init)\n-    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = true;\n-\n   return decl;\n }\n \n@@ -13706,16 +13706,11 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  return;\n \t\t}\n \t      else\n-\t\t{\n-\t\t  /* Create the declaration.  */\n-\t\t  decl = grokfield (declarator, &decl_specifiers,\n-\t\t\t\t    initializer, asm_specification,\n-\t\t\t\t    attributes);\n-\t\t  /* Any initialization must have been from a\n-\t\t     constant-expression.  */\n-\t\t  if (decl && TREE_CODE (decl) == VAR_DECL && initializer)\n-\t\t    DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl) = 1;\n-\t\t}\n+\t\t/* Create the declaration.  */\n+\t\tdecl = grokfield (declarator, &decl_specifiers,\n+\t\t\t\t  initializer, /*init_const_expr_p=*/true,\n+\t\t\t\t  asm_specification,\n+\t\t\t\t  attributes);\n \t    }\n \n \t  /* Reset PREFIX_ATTRIBUTES.  */\n@@ -17278,7 +17273,8 @@ cp_parser_objc_class_ivars (cp_parser* parser)\n \t      cplus_decl_attributes (&decl, attributes, /*flags=*/0);\n \t    }\n \t  else\n-\t    decl = grokfield (declarator, &declspecs, NULL_TREE,\n+\t    decl = grokfield (declarator, &declspecs, \n+\t\t\t      NULL_TREE, /*init_const_expr_p=*/false,\n \t\t\t      NULL_TREE, attributes);\n \n \t  /* Add the instance variable.  */"}, {"sha": "40c682f93c2b67da1a4f9b171ee2af0a28fa7a8e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -5743,6 +5743,7 @@ instantiate_class_template (tree type)\n \t\t      finish_static_data_member_decl \n \t\t\t(r, \n \t\t\t /*init=*/NULL_TREE, \n+\t\t\t /*init_const_expr_p=*/false,\n \t\t\t /*asmspec_tree=*/NULL_TREE, \n \t\t\t /*flags=*/0);\n \t\t      if (DECL_INITIALIZED_IN_CLASS_P (r))\n@@ -8218,7 +8219,7 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t      }\n \t\t    else\n \t\t      init = tsubst_expr (init, args, complain, in_decl);\n-\t\t    cp_finish_decl (decl, init, NULL_TREE, 0);\n+\t\t    finish_decl (decl, init, NULL_TREE);\n \t\t  }\n \t      }\n \t  }\n@@ -11694,7 +11695,8 @@ instantiate_decl (tree d, int defer_ok,\n \t\t\t      args,\n \t\t\t      tf_warning_or_error, NULL_TREE);\n \t  DECL_INITIAL (d) = init;\n-\t  cp_finish_decl (d, init, /*asmspec_tree=*/NULL_TREE,\n+\t  cp_finish_decl (d, init, /*init_const_expr_p=*/false,\n+\t\t\t  /*asmspec_tree=*/NULL_TREE,\n \t\t\t  LOOKUP_ONLYCONVERTING);\n \t  pop_nested_class ();\n \t  pop_nested_namespace (ns);\n@@ -11771,7 +11773,7 @@ instantiate_decl (tree d, int defer_ok,\n \n       /* Enter the scope of D so that access-checking works correctly.  */\n       push_nested_class (DECL_CONTEXT (d));\n-      cp_finish_decl (d, DECL_INITIAL (d), NULL_TREE, 0);\n+      finish_decl (d, DECL_INITIAL (d), NULL_TREE);\n       pop_nested_class ();\n     }\n   else if (TREE_CODE (d) == FUNCTION_DECL)"}, {"sha": "0275ed9675d9debc451e8346058537953e2b8e61", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -1482,7 +1482,7 @@ emit_tinfo_decl (tree decl)\n       init = get_pseudo_ti_init (type, get_pseudo_ti_index (type));\n       DECL_INITIAL (decl) = init;\n       mark_used (decl);\n-      cp_finish_decl (decl, init, NULL_TREE, 0);\n+      finish_decl (decl, init, NULL_TREE);\n       return true;\n     }\n   else"}, {"sha": "137938c5f7f16241c2a365b95310060155c48edd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -1,3 +1,11 @@\n+2006-02-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/26266\n+\t* g++.dg/template/static22.C: New test.\n+\t* g++.dg/template/static23.C: New test.\n+\t* g++.dg/template/static24.C: New test.\n+\t* g++.dg/template/non-dependent13.C: New test.\n+\n 2006-02-16  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \tPR target/26255"}, {"sha": "9e69948ac20c65519c8e23961e9dbcdb0aed11a8", "filename": "gcc/testsuite/g++.dg/template/non-dependent13.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent13.C?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/26266\n+\n+template <int I>\n+struct S;\n+\n+template <int I>\n+void f() {\n+  if (const int i = 3) {\n+    S<i>::j; // { dg-error \"incomplete\" }\n+  }\n+}"}, {"sha": "02c7a0cd67d5bf4f91bf4df49f834a07f5dd47b6", "filename": "gcc/testsuite/g++.dg/template/static22.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic22.C?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/26266\n+\n+template<typename> struct A\n+{\n+  static const int i = 1;\n+  static const int j = i;\n+  static const int k = int(j);\n+  int x[k];\n+};\n+\n+A<char> a;"}, {"sha": "b28400a64d2fb6160054ae9903babe5c8e6102eb", "filename": "gcc/testsuite/g++.dg/template/static23.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic23.C?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/26266\n+\n+template<typename> struct A\n+{\n+  static const int i = 1;\n+};\n+\n+template<typename> struct B\n+{\n+  static const int j = A<char>::i;\n+  static const int k = int(j);\n+  int x[k];\n+};\n+\n+B<char> b;"}, {"sha": "3d8f9e326bf53d55f1415c46fe6955e60228a06f", "filename": "gcc/testsuite/g++.dg/template/static24.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d174af6c5853a9adef67ed509faa51a79ad9d320/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic24.C?ref=d174af6c5853a9adef67ed509faa51a79ad9d320", "patch": "@@ -0,0 +1,15 @@\n+template<typename> struct A;\n+\n+template<> struct A<char>\n+{\n+  static const char i = 1;\n+};\n+\n+template<typename T> struct B\n+{\n+  static const int j = A<T>::i;\n+  static const int k = int(j);\n+  int x[k];\n+};\n+\n+B<char> b;"}]}