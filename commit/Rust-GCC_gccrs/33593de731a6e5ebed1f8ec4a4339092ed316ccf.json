{"sha": "33593de731a6e5ebed1f8ec4a4339092ed316ccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM1OTNkZTczMWE2ZTVlYmVkMWY4ZWM0YTQzMzkwOTJlZDMxNmNjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-09-19T18:32:21Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-09-19T18:32:21Z"}, "message": "recog.c (peephole2_optimize): Likewise.\n\n        * recog.c (peephole2_optimize): Likewise.  Handle EH_REGION;\n        copy over CALL_INSN_FUNCTION_USAGE.\n\nFrom-SVN: r45693", "tree": {"sha": "0ab5d4ace72ef7a97ad21aea402e46a371cca067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ab5d4ace72ef7a97ad21aea402e46a371cca067"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33593de731a6e5ebed1f8ec4a4339092ed316ccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33593de731a6e5ebed1f8ec4a4339092ed316ccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33593de731a6e5ebed1f8ec4a4339092ed316ccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33593de731a6e5ebed1f8ec4a4339092ed316ccf/comments", "author": null, "committer": null, "parents": [{"sha": "bb7fd9624b935a2edae7dc29864a95e7b6dfbdbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7fd9624b935a2edae7dc29864a95e7b6dfbdbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7fd9624b935a2edae7dc29864a95e7b6dfbdbe"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "336cf9bc32f39f9ebcdb71f91109e1f3d6136613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33593de731a6e5ebed1f8ec4a4339092ed316ccf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33593de731a6e5ebed1f8ec4a4339092ed316ccf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33593de731a6e5ebed1f8ec4a4339092ed316ccf", "patch": "@@ -4,6 +4,8 @@\n \n \t* emit-rtl.c (try_split): Copy NORETURN, SETJMP, ALWAYS_RETURN\n \tand NON_LOCAL_GOTO notes.\n+\t* recog.c (peephole2_optimize): Likewise.  Handle EH_REGION;\n+\tcopy over CALL_INSN_FUNCTION_USAGE.\n \n 2001-09-18  Catherine Moore  <clm@redhat.com>\n "}, {"sha": "c0b60f8575ad4ad8cdfd50704a119936e6551e2c", "filename": "gcc/recog.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33593de731a6e5ebed1f8ec4a4339092ed316ccf/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33593de731a6e5ebed1f8ec4a4339092ed316ccf/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=33593de731a6e5ebed1f8ec4a4339092ed316ccf", "patch": "@@ -3059,6 +3059,69 @@ peephole2_optimize (dump_file)\n \t      try = peephole2_insns (PATTERN (insn), insn, &match_len);\n \t      if (try != NULL)\n \t\t{\n+\t\t  /* If we are splitting a CALL_INSN, look for the CALL_INSN\n+\t\t     in SEQ and copy our CALL_INSN_FUNCTION_USAGE and other\n+\t\t     cfg-related call notes.  */\n+\t\t  for (i = 0; i <= match_len; ++i)\n+\t\t    {\n+\t\t      int j, k;\n+\t\t      rtx old_insn, new_insn, note;\n+\n+\t\t      j = i + peep2_current;\n+\t\t      if (j >= MAX_INSNS_PER_PEEP2 + 1)\n+\t\t\tj -= MAX_INSNS_PER_PEEP2 + 1;\n+\t\t      old_insn = peep2_insn_data[j].insn;\n+\t\t      if (GET_CODE (old_insn) != CALL_INSN)\n+\t\t\tcontinue;\n+\n+\t\t      new_insn = NULL_RTX;\n+\t\t      if (GET_CODE (try) == SEQUENCE)\n+\t\t\tfor (k = XVECLEN (try, 0) - 1; k >= 0; k--)\n+\t\t\t  {\n+\t\t\t    rtx x = XVECEXP (try, 0, k);\n+\t\t\t    if (GET_CODE (x) == CALL_INSN)\n+\t\t\t      {\n+\t\t\t\tnew_insn = x;\n+\t\t\t\tbreak;\n+\t\t\t      }\n+\t\t\t  }\n+\t\t      else if (GET_CODE (try) == CALL_INSN)\n+\t\t\tnew_insn = try;\n+\t\t      if (! new_insn)\n+\t\t\tabort ();\n+\n+\t\t      CALL_INSN_FUNCTION_USAGE (new_insn)\n+\t\t\t= CALL_INSN_FUNCTION_USAGE (old_insn);\n+\n+\t\t      for (note = REG_NOTES (old_insn);\n+\t\t\t   note;\n+\t\t\t   note = XEXP (note, 1))\n+\t\t\tswitch (REG_NOTE_KIND (note))\n+\t\t\t  {\n+\t\t\t  case REG_EH_REGION:\n+\t\t\t  case REG_NORETURN:\n+\t\t\t  case REG_SETJMP:\n+\t\t\t  case REG_ALWAYS_RETURN:\n+\t\t\t    REG_NOTES (new_insn)\n+\t\t\t      = gen_rtx_EXPR_LIST (REG_NOTE_KIND (note),\n+\t\t\t\t\t\t   XEXP (note, 0),\n+\t\t\t\t\t\t   REG_NOTES (new_insn));\n+\t\t\t    break;\n+\t\t\t  }\n+\n+\t\t      /* Croak if there is another call in the sequence.  */\n+\t\t      while (++i <= match_len)\n+\t\t\t{\n+\t\t\t  j = i + peep2_current;\n+\t\t\t  if (j >= MAX_INSNS_PER_PEEP2 + 1)\n+\t\t\t    j -= MAX_INSNS_PER_PEEP2 + 1;\n+\t\t\t  old_insn = peep2_insn_data[j].insn;\n+\t\t\t  if (GET_CODE (old_insn) == CALL_INSN)\n+\t\t\t    abort ();\n+\t\t\t}\n+\t\t      break;\n+\t\t    }\n+\n \t\t  i = match_len + peep2_current;\n \t\t  if (i >= MAX_INSNS_PER_PEEP2 + 1)\n \t\t    i -= MAX_INSNS_PER_PEEP2 + 1;"}]}