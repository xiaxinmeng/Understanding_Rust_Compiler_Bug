{"sha": "3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwMzE1MGM0YzVmM2Y2YjVlN2JhNWQ2NDMwYTQxOWZmOGQzOGZlMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2002-11-18T12:46:48Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2002-11-18T12:46:48Z"}, "message": "sh.c (pool_node): New field: part_of_sequence_p.\n\n\t* config/sh/sh.c (pool_node): New field: part_of_sequence_p.\n\t(add_constant): Set it.\n\t(dump_table): Don't reorder a constant if part_of_sequence_p.\n\t(machine_dependent_reorg): Assume that float constants will\n\tstay in their original order if used as a sequence.\n\nFrom-SVN: r59213", "tree": {"sha": "5ee06779c76524b019b4fcf122b1d4bad9b623f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ee06779c76524b019b4fcf122b1d4bad9b623f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/comments", "author": null, "committer": null, "parents": [{"sha": "180bde4f78fdc3c07ed45f8219a130f94a214171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/180bde4f78fdc3c07ed45f8219a130f94a214171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/180bde4f78fdc3c07ed45f8219a130f94a214171"}], "stats": {"total": 101, "additions": 77, "deletions": 24}, "files": [{"sha": "5a61cca728e045658c765b54aa72bc977915cad8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "patch": "@@ -1,3 +1,11 @@\n+2002-11-18  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/sh/sh.c (pool_node): New field: part_of_sequence_p.\n+\t(add_constant): Set it.\n+\t(dump_table): Don't reorder a constant if part_of_sequence_p.\n+\t(machine_dependent_reorg): Assume that float constants will\n+\tstay in their original order if used as a sequence.\n+\n 2002-11-18  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/sh/sh.c (calc_live_regs): Update check for PIC liveness"}, {"sha": "a26d92b8339681f2f2027062c21917dd7f951ffb", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 15, "deletions": 24, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "patch": "@@ -2258,6 +2258,10 @@ typedef struct\n   rtx label;\t\t\t/* Label of value.  */\n   rtx wend;\t\t\t/* End of window.  */\n   enum machine_mode mode;\t/* Mode of value.  */\n+\n+  /* True if this constant is accessed as part of a post-increment\n+     sequence.  Note that HImode constants are never accessed in this way.  */\n+  bool part_of_sequence_p;\n } pool_node;\n \n /* The maximum number of constants that can fit into one pool, since\n@@ -2331,12 +2335,16 @@ add_constant (x, mode, last_value)\n   /* Need a new one.  */\n   pool_vector[pool_size].value = x;\n   if (last_value && rtx_equal_p (last_value, pool_vector[pool_size - 1].value))\n-    lab = 0;\n+    {\n+      lab = 0;\n+      pool_vector[pool_size - 1].part_of_sequence_p = true;\n+    }\n   else\n     lab = gen_label_rtx ();\n   pool_vector[pool_size].mode = mode;\n   pool_vector[pool_size].label = lab;\n   pool_vector[pool_size].wend = NULL_RTX;\n+  pool_vector[pool_size].part_of_sequence_p = (lab == 0);\n   if (lab && pool_window_label)\n     {\n       newref = gen_rtx_LABEL_REF (VOIDmode, pool_window_label);\n@@ -2409,7 +2417,7 @@ dump_table (scan)\n \t      break;\n \t    case SImode:\n \t    case SFmode:\n-\t      if (align_insn)\n+\t      if (align_insn && !p->part_of_sequence_p)\n \t\t{\n \t\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n \t\t    emit_label_before (lab, align_insn);\n@@ -3732,7 +3740,6 @@ machine_dependent_reorg (first)\n \t     behind.  */\n \t  rtx barrier = find_barrier (num_mova, mova, insn);\n \t  rtx last_float_move, last_float = 0, *last_float_addr;\n-\t  int may_need_align = 1;\n \n \t  if (num_mova && ! mova_p (mova))\n \t    {\n@@ -3790,27 +3797,11 @@ machine_dependent_reorg (first)\n \t\t      if (last_float\n \t\t\t  && reg_set_between_p (r0_rtx, last_float_move, scan))\n \t\t\tlast_float = 0;\n-\t\t      if (TARGET_SHCOMPACT)\n-\t\t\t{\n-\t\t\t  /* The first SFmode constant after a DFmode\n-\t\t\t     constant may be pulled before a sequence\n-\t\t\t     of DFmode constants, so the second SFmode\n-\t\t\t     needs a label, just in case.  */\n-\t\t\t  if (GET_MODE_SIZE (mode) == 4)\n-\t\t\t    {\n-\t\t\t      if (last_float && may_need_align)\n-\t\t\t\tlast_float = 0;\n-\t\t\t      may_need_align = 0;\n-\t\t\t    }\n-\t\t\t  if (last_float\n-\t\t\t      && (GET_MODE_SIZE (GET_MODE (last_float))\n-\t\t\t\t  != GET_MODE_SIZE (mode)))\n-\t\t\t    {\n-\t\t\t      last_float = 0;\n-\t\t\t      if (GET_MODE_SIZE (mode) == 4)\n-\t\t\t\tmay_need_align = 1;\n-\t\t\t    }\n-\t\t\t}\n+\t\t      if (last_float\n+\t\t\t  && TARGET_SHCOMPACT\n+\t\t\t  && GET_MODE_SIZE (mode) != 4\n+\t\t\t  && GET_MODE_SIZE (GET_MODE (last_float)) == 4)\n+\t\t\tlast_float = 0;\n \t\t      lab = add_constant (src, mode, last_float);\n \t\t      if (lab)\n \t\t\temit_insn_before (gen_mova (lab), scan);"}, {"sha": "481a5f71fdae839acea1dd4e15d9a098ed1d818c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "patch": "@@ -1,3 +1,7 @@\n+2002-11-18  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* gcc.c-torture/execute/20021118-2.c: New test.\n+\n 2002-11-18  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* gcc.c-torture/execute/20021118-1.c: New test."}, {"sha": "5c8c5484f81072b037767c8279dc7b0db2df089c", "filename": "gcc/testsuite/gcc.c-torture/execute/20021118-2.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-2.c?ref=3503150c4c5f3f6b5e7ba5d6430a419ff8d38fe2", "patch": "@@ -0,0 +1,50 @@\n+/* Originally added to test SH constant pool layout.  t1() failed for\n+   non-PIC and t2() failed for PIC.  */\n+\n+int t1 (float *f, int i,\n+\tvoid (*f1) (double),\n+\tvoid (*f2) (float, float))\n+{\n+  f1 (3.0);\n+  f[i] = f[i + 1];\n+  f2 (2.5f, 3.5f);\n+}\n+\n+int t2 (float *f, int i,\n+\tvoid (*f1) (double),\n+\tvoid (*f2) (float, float),\n+\tvoid (*f3) (float))\n+{\n+  f3 (6.0f);\n+  f1 (3.0);\n+  f[i] = f[i + 1];\n+  f2 (2.5f, 3.5f);\n+}\n+\n+void f1 (double d)\n+{\n+  if (d != 3.0)\n+    abort ();\n+}\n+\n+void f2 (float f1, float f2)\n+{\n+  if (f1 != 2.5f || f2 != 3.5f)\n+    abort ();\n+}\n+\n+void f3 (float f)\n+{\n+  if (f != 6.0f)\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  float f[3] = { 2.0f, 3.0f, 4.0f };\n+  t1 (f, 0, f1, f2);\n+  t2 (f, 1, f1, f2, f3);\n+  if (f[0] != 3.0f && f[1] != 4.0f)\n+    abort ();\n+  exit (0);\n+}"}]}