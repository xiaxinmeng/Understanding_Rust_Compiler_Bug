{"sha": "4ea6bfedc8759cef739ae42eee162989112bd85a", "node_id": "C_kwDOANBUbNoAKDRlYTZiZmVkYzg3NTljZWY3MzlhZTQyZWVlMTYyOTg5MTEyYmQ4NWE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-03-01T17:55:27Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-02T01:16:20Z"}, "message": "testsuite: Fix g++.dg/ext/attr-copy-2.C for default_packed targets\n\nFor targets where the byte-wise structure element layout is\nthe same as for attribute-packed, you get a warning when\nthat's specified.  Thus, expect a warning for such targets.\nNote the exclusion of bitfields.\n\n\t* g++.dg/ext/attr-copy-2.C: Fix for default_packed targets.", "tree": {"sha": "e3032dbd91b1bb5cf2cdf9d65350bfb2b5213228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3032dbd91b1bb5cf2cdf9d65350bfb2b5213228"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ea6bfedc8759cef739ae42eee162989112bd85a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea6bfedc8759cef739ae42eee162989112bd85a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ea6bfedc8759cef739ae42eee162989112bd85a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ea6bfedc8759cef739ae42eee162989112bd85a/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "ffd6f22ef56db1123c1138b8a4a1211dfae77ff2", "filename": "gcc/testsuite/g++.dg/ext/attr-copy-2.C", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ea6bfedc8759cef739ae42eee162989112bd85a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ea6bfedc8759cef739ae42eee162989112bd85a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattr-copy-2.C?ref=4ea6bfedc8759cef739ae42eee162989112bd85a", "patch": "@@ -27,51 +27,51 @@ extern B &rb;\n \n typedef struct C\n {\n-  ATTR (copy ((struct A *)0)) short m_pa_0;\n-  ATTR (copy ((struct A *)(1, 0))) int m_pa_1_0;\n-  ATTR (copy ((struct A *)(0, 1))) long m_pa_0_1;\n+  ATTR (copy ((struct A *)0)) short m_pa_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy ((struct A *)(1, 0))) int m_pa_1_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy ((struct A *)(0, 1))) long m_pa_0_1; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (*(struct A *)0)) short m_xpa_0;\n-  ATTR (copy (*(struct A *)(1, 0))) int m_xpa_1_0;\n-  ATTR (copy (*(struct A *)(0, 1))) long m_xpa_0_1;\n+  ATTR (copy (*(struct A *)0)) short m_xpa_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*(struct A *)(1, 0))) int m_xpa_1_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*(struct A *)(0, 1))) long m_xpa_0_1; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (((struct A *)0)[0])) short m_arpa_0;\n-  ATTR (copy (((struct A *)(1, 0))[0])) int m_arpa_1_0;\n-  ATTR (copy (((struct A *)(0, 1))[0])) long m_arpa_0_1;\n+  ATTR (copy (((struct A *)0)[0])) short m_arpa_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (((struct A *)(1, 0))[0])) int m_arpa_1_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (((struct A *)(0, 1))[0])) long m_arpa_0_1; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (a)) short m_a;\n-  ATTR (copy (b.a)) int m_b_a;\n-  ATTR (copy (b.pa)) long m_b_pa;\n-  ATTR (copy (b.ra)) long m_b_ra;\n+  ATTR (copy (a)) short m_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (b.a)) int m_b_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (b.pa)) long m_b_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (b.ra)) long m_b_ra; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (&a)) short m_ara;\n-  ATTR (copy (&b.a)) int m_arb_a;\n-  ATTR (copy (*b.pa)) long m_xb_pa;\n-  ATTR (copy (b.pa[0])) long m_arb_pa;\n+  ATTR (copy (&a)) short m_ara; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (&b.a)) int m_arb_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*b.pa)) long m_xb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (b.pa[0])) long m_arb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (*pa)) short m_xpa;\n-  ATTR (copy (pa[0])) short m_arpa;\n+  ATTR (copy (*pa)) short m_xpa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (pa[0])) short m_arpa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (ra)) short m_ra;\n+  ATTR (copy (ra)) short m_ra; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n \n-  ATTR (copy (ab[0].a)) int m_arab_a;\n-  ATTR (copy (ab[1].pa)) long m_arab_pa;\n-  ATTR (copy (*ab[2].pa)) int m_xarab_pa;\n+  ATTR (copy (ab[0].a)) int m_arab_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (ab[1].pa)) long m_arab_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*ab[2].pa)) int m_xarab_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n   ATTR (copy (ab[3].pa->bf)) unsigned int m_arab_pa_bf: 1;\n   ATTR (copy (ab[4].ra.bf)) unsigned int m_arab_ra_bf: 1;\n \n-  ATTR (copy (pb->a)) int m_pb_a;\n-  ATTR (copy (pb->pa)) long m_pb_pa;\n-  ATTR (copy (*pb->pa)) int m_xpb_pa;\n+  ATTR (copy (pb->a)) int m_pb_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (pb->pa)) long m_pb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*pb->pa)) int m_xpb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n   ATTR (copy (pb->pa->bf)) unsigned int m_pb_pa_bf: 1;\n   ATTR (copy (pb->ra.bf)) unsigned int m_pb_ra_bf: 1;\n \n-  ATTR (copy (rb.a)) int m_rb_a;\n-  ATTR (copy (rb.pa)) long m_rb_pa;\n-  ATTR (copy (*rb.pa)) int m_xrb_pa;\n+  ATTR (copy (rb.a)) int m_rb_a; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (rb.pa)) long m_rb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n+  ATTR (copy (*rb.pa)) int m_xrb_pa; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n   ATTR (copy (rb.pa->bf)) unsigned int m_rb_pa_bf: 1;\n \n-  ATTR (aligned (4), copy ((struct A *)(0))) short m_a4_pa_0;\n+  ATTR (aligned (4), copy ((struct A *)(0))) short m_a4_pa_0; // { dg-warning \"attribute ignored\" \"\" { target default_packed } }\n } C;\n \n "}]}