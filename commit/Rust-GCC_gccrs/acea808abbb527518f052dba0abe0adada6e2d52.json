{"sha": "acea808abbb527518f052dba0abe0adada6e2d52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNlYTgwOGFiYmI1Mjc1MThmMDUyZGJhMGFiZTBhZGFkYTZlMmQ1Mg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-27T19:39:05Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-27T19:39:05Z"}, "message": "pt.c (tsubst_decl <FUNCTION_DECL>): Move var decls to initialization point.\n\n\t* pt.c (tsubst_decl <FUNCTION_DECL>): Move var decls to\n\tinitialization point.  Don't unnecessarily check for ctor name.\n\nFrom-SVN: r249709", "tree": {"sha": "9d5ba83f8740fcb836e8a5b32f4f7e0b745a204c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d5ba83f8740fcb836e8a5b32f4f7e0b745a204c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acea808abbb527518f052dba0abe0adada6e2d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acea808abbb527518f052dba0abe0adada6e2d52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acea808abbb527518f052dba0abe0adada6e2d52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acea808abbb527518f052dba0abe0adada6e2d52/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "705037247447f44826bd6fc2c777c69237fcef39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705037247447f44826bd6fc2c777c69237fcef39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705037247447f44826bd6fc2c777c69237fcef39"}], "stats": {"total": 58, "additions": 22, "deletions": 36}, "files": [{"sha": "b5c09ac57662f1c9ecf80db4c22832dd217f9a52", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acea808abbb527518f052dba0abe0adada6e2d52/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acea808abbb527518f052dba0abe0adada6e2d52/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acea808abbb527518f052dba0abe0adada6e2d52", "patch": "@@ -1,5 +1,8 @@\n 2017-06-27  Nathan Sidwell  <nathan@acm.org>\n \n+\t* pt.c (tsubst_decl <FUNCTION_DECL>): Move var decls to\n+\tinitialization point.  Don't unnecessarily check for ctor name.\n+\n \t* cp-tree.h (CLASSTYPE_DESTRUCTORS): Rename to ...\n \t(CLASSTYPE_DESTRUCTOR): ... this.\n \t* class.c (accessible_nvdtor_p,"}, {"sha": "957d22922d553d08f15f3ee560f4d8677dfc196b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acea808abbb527518f052dba0abe0adada6e2d52/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acea808abbb527518f052dba0abe0adada6e2d52/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=acea808abbb527518f052dba0abe0adada6e2d52", "patch": "@@ -12277,22 +12277,13 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n     case FUNCTION_DECL:\n       {\n-\ttree ctx;\n-\ttree argvec = NULL_TREE;\n-\ttree *friends;\n-\ttree gen_tmpl;\n-\ttree type;\n-\tint member;\n-\tint args_depth;\n-\tint parms_depth;\n+\ttree gen_tmpl, argvec;\n \n \t/* Nobody should be tsubst'ing into non-template functions.  */\n \tgcc_assert (DECL_TEMPLATE_INFO (t) != NULL_TREE);\n \n \tif (TREE_CODE (DECL_TI_TEMPLATE (t)) == TEMPLATE_DECL)\n \t  {\n-\t    tree spec;\n-\n \t    /* If T is not dependent, just return it.  */\n \t    if (!uses_template_parms (DECL_TI_ARGS (t)))\n \t      RETURN (t);\n@@ -12310,9 +12301,7 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \t    /* Check to see if we already have this specialization.  */\n \t    hash = hash_tmpl_and_args (gen_tmpl, argvec);\n-\t    spec = retrieve_specialization (gen_tmpl, argvec, hash);\n-\n-\t    if (spec)\n+\t    if (tree spec = retrieve_specialization (gen_tmpl, argvec, hash))\n \t      {\n \t\tr = spec;\n \t\tbreak;\n@@ -12350,11 +12339,11 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \n \t       which we can spot because the pattern will be a\n \t       specialization in this case.  */\n-\t    args_depth = TMPL_ARGS_DEPTH (args);\n-\t    parms_depth =\n+\t    int args_depth = TMPL_ARGS_DEPTH (args);\n+\t    int parms_depth =\n \t      TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (DECL_TI_TEMPLATE (t)));\n-\t    if (args_depth > parms_depth\n-\t\t&& !DECL_TEMPLATE_SPECIALIZATION (t))\n+\n+\t    if (args_depth > parms_depth && !DECL_TEMPLATE_SPECIALIZATION (t))\n \t      args = get_innermost_template_args (args, parms_depth);\n \t  }\n \telse\n@@ -12371,23 +12360,18 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t       new decl (R) with appropriate types so that we can call\n \t       determine_specialization.  */\n \t    gen_tmpl = NULL_TREE;\n+\t    argvec = NULL_TREE;\n \t  }\n \n-\tif (DECL_CLASS_SCOPE_P (t))\n-\t  {\n-\t    if (DECL_NAME (t) == constructor_name (DECL_CONTEXT (t)))\n-\t      member = 2;\n-\t    else\n-\t      member = 1;\n-\t    ctx = tsubst_aggr_type (DECL_CONTEXT (t), args,\n-\t\t\t\t    complain, t, /*entering_scope=*/1);\n-\t  }\n-\telse\n-\t  {\n-\t    member = 0;\n-\t    ctx = DECL_CONTEXT (t);\n-\t  }\n-\ttype = tsubst (TREE_TYPE (t), args, complain|tf_fndecl_type, in_decl);\n+\ttree ctx = DECL_CONTEXT (t);\n+\tbool member = ctx && TYPE_P (ctx);\n+\n+\tif (member)\n+\t  ctx = tsubst_aggr_type (ctx, args,\n+\t\t\t\t  complain, t, /*entering_scope=*/1);\n+\n+\ttree type = tsubst (TREE_TYPE (t), args,\n+\t\t\t    complain | tf_fndecl_type, in_decl);\n \tif (type == error_mark_node)\n \t  RETURN (error_mark_node);\n \n@@ -12507,14 +12491,13 @@ tsubst_decl (tree t, tree args, tsubst_flags_t complain)\n \t  DECL_TEMPLATE_INFO (r) = NULL_TREE;\n \n \t/* Copy the list of befriending classes.  */\n-\tfor (friends = &DECL_BEFRIENDING_CLASSES (r);\n+\tfor (tree *friends = &DECL_BEFRIENDING_CLASSES (r);\n \t     *friends;\n \t     friends = &TREE_CHAIN (*friends))\n \t  {\n \t    *friends = copy_node (*friends);\n-\t    TREE_VALUE (*friends) = tsubst (TREE_VALUE (*friends),\n-\t\t\t\t\t    args, complain,\n-\t\t\t\t\t    in_decl);\n+\t    TREE_VALUE (*friends)\n+\t      = tsubst (TREE_VALUE (*friends), args, complain, in_decl);\n \t  }\n \n \tif (DECL_CONSTRUCTOR_P (r) || DECL_DESTRUCTOR_P (r))"}]}