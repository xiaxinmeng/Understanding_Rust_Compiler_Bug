{"sha": "2e1df0f00b8625beab3858201673d470cae65687", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxZGYwZjAwYjg2MjViZWFiMzg1ODIwMTY3M2Q0NzBjYWU2NTY4Nw==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-04-30T15:20:58Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2011-04-30T15:20:58Z"}, "message": "cp-tree.h (LOOKUP_EXPLICIT_TMPL_ARGS): Define.\n\ncp/ChangeLog\n2011-04-29  Le-Chun Wu  <lcwu@google.com>\n\n\t* cp-tree.h (LOOKUP_EXPLICIT_TMPL_ARGS): Define.\n\t* call.c (build_new_function_call): Set it for TEMPLATE_ID_EXPRs.\n\t(build_over_call): Use it to determine whether to emit a NULL\n\twarning for template function instantiations.\n\t(build_new_method_call): Set LOOKUP_EXPLICIT_TMPL_ARGS if\n\tEXPLICIT_TARGS is set.\n\n2011-04-29  Diego Novillo  <dnovillo@google.com>\n\t    Le-Chun Wu  <lcwu@google.com>\n\n\t* call.c (conversion_null_warnings): Also handle assignments\n\twhen warning about NULL conversions.\n\ntestsuite/ChangeLog\n2011-04-29  Le-Chun Wu  <lcwu@google.com>\n\n\t* g++.dg/warn/Wnull-conversion-1.C: New.\n\t* g++.dg/warn/Wnull-conversion-2.C: New.\n\n2011-04-29  Le-Chun Wu  <lcwu@google.com>\n\n\t* g++.dg/warn/Wconversion-null-2.C: Do not expect a NULL\n\t  warning in implicitly instantiated templates.\n\n2011-04-29  Diego Novillo  <dnovillo@google.com>\n\n\t* g++.old-deja/g++.other/null3.C: Expect warning about converting\n\tboolean to a pointer.\n\nFrom-SVN: r173217", "tree": {"sha": "7aa7eeac01aeca9f7cfb044e6a3a9c7bfb45882c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7aa7eeac01aeca9f7cfb044e6a3a9c7bfb45882c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e1df0f00b8625beab3858201673d470cae65687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1df0f00b8625beab3858201673d470cae65687", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e1df0f00b8625beab3858201673d470cae65687", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e1df0f00b8625beab3858201673d470cae65687/comments", "author": null, "committer": null, "parents": [{"sha": "9a4ac625f18628b863f6e58c0effd749039ff7a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a4ac625f18628b863f6e58c0effd749039ff7a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a4ac625f18628b863f6e58c0effd749039ff7a5"}], "stats": {"total": 155, "additions": 147, "deletions": 8}, "files": [{"sha": "a62cce9720ea4e501be7f3e49866a57f6720a65a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -4,6 +4,21 @@\n \t* init.c (perform_member_init): Check build_value_init return\n \tvalue for error_mark_node.\n \n+2011-04-29  Diego Novillo  <dnovillo@google.com>\n+\t    Le-Chun Wu  <lcwu@google.com>\n+\n+\t* call.c (conversion_null_warnings): Also handle assignments\n+\twhen warning about NULL conversions.\n+\n+2011-04-29  Le-Chun Wu  <lcwu@google.com>\n+\n+\t* cp-tree.h (LOOKUP_EXPLICIT_TMPL_ARGS): Define.\n+\t* call.c (build_new_function_call): Set it for TEMPLATE_ID_EXPRs.\n+\t(build_over_call): Use it to determine whether to emit a NULL\n+\twarning for template function instantiations.\n+\t(build_new_method_call): Set LOOKUP_EXPLICIT_TMPL_ARGS if\n+\tEXPLICIT_TARGS is set.\n+\n 2011-04-29  Nicola Pero  <nicola.pero@meta-innovation.com>,\n \t    Mike Stump <mikestump@comcast.net>\n "}, {"sha": "b759c89ca5ce5148e32264567edae0f5514f8ba1", "filename": "gcc/cp/call.c", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -3734,7 +3734,16 @@ build_new_function_call (tree fn, VEC(tree,gc) **args, bool koenig_p,\n       result = error_mark_node;\n     }\n   else\n-    result = build_over_call (cand, LOOKUP_NORMAL, complain);\n+    {\n+      int flags = LOOKUP_NORMAL;\n+      /* If fn is template_id_expr, the call has explicit template arguments\n+         (e.g. func<int>(5)), communicate this info to build_over_call\n+         through flags so that later we can use it to decide whether to warn\n+         about peculiar null pointer conversion.  */\n+      if (TREE_CODE (fn) == TEMPLATE_ID_EXPR)\n+        flags |= LOOKUP_EXPLICIT_TMPL_ARGS;\n+      result = build_over_call (cand, flags, complain);\n+    }\n \n   /* Free all the conversions we allocated.  */\n   obstack_free (&conversion_obstack, p);\n@@ -5369,10 +5378,16 @@ conversion_null_warnings (tree totype, tree expr, tree fn, int argnum)\n     }\n \n   /* Issue warnings if \"false\" is converted to a NULL pointer */\n-  else if (expr == boolean_false_node && fn && POINTER_TYPE_P (t))\n-    warning_at (input_location, OPT_Wconversion_null,\n-\t\t\"converting %<false%> to pointer type for argument %P of %qD\",\n-\t\targnum, fn);\n+  else if (expr == boolean_false_node && POINTER_TYPE_P (t))\n+    {\n+      if (fn)\n+\twarning_at (input_location, OPT_Wconversion_null,\n+\t\t    \"converting %<false%> to pointer type for argument %P \"\n+\t\t    \"of %qD\", argnum, fn);\n+      else\n+\twarning_at (input_location, OPT_Wconversion_null,\n+\t\t    \"converting %<false%> to pointer type %qT\", t);\n+    }\n }\n \n /* Perform the conversions in CONVS on the expression EXPR.  FN and\n@@ -6293,9 +6308,36 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     {\n       tree type = TREE_VALUE (parm);\n       tree arg = VEC_index (tree, args, arg_index);\n+      bool conversion_warning = true;\n \n       conv = convs[i];\n \n+      /* If the argument is NULL and used to (implicitly) instantiate a\n+         template function (and bind one of the template arguments to\n+         the type of 'long int'), we don't want to warn about passing NULL\n+         to non-pointer argument.\n+         For example, if we have this template function:\n+\n+           template<typename T> void func(T x) {}\n+\n+         we want to warn (when -Wconversion is enabled) in this case:\n+\n+           void foo() {\n+             func<int>(NULL);\n+           }\n+\n+         but not in this case:\n+\n+           void foo() {\n+             func(NULL);\n+           }\n+      */\n+      if (arg == null_node\n+          && DECL_TEMPLATE_INFO (fn)\n+          && cand->template_decl\n+          && !(flags & LOOKUP_EXPLICIT_TMPL_ARGS))\n+        conversion_warning = false;\n+\n       /* Warn about initializer_list deduction that isn't currently in the\n \t working draft.  */\n       if (cxx_dialect > cxx98\n@@ -6326,7 +6368,10 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \t    }\n \t}\n \n-      val = convert_like_with_context (conv, arg, fn, i-is_method, complain);\n+      val = convert_like_with_context (conv, arg, fn, i-is_method,\n+\t                               conversion_warning\n+\t\t\t\t       ? complain\n+\t\t\t\t       : complain & (~tf_warning));\n \n       val = convert_for_arg_passing (type, val);\n       if (val == error_mark_node)\n@@ -7061,6 +7106,8 @@ build_new_method_call (tree instance, tree fns, VEC(tree,gc) **args,\n \t      if (DECL_VINDEX (fn) && ! (flags & LOOKUP_NONVIRTUAL)\n \t\t  && resolves_to_fixed_type_p (instance, 0))\n \t\tflags |= LOOKUP_NONVIRTUAL;\n+              if (explicit_targs)\n+                flags |= LOOKUP_EXPLICIT_TMPL_ARGS;\n \t      /* Now we know what function is being called.  */\n \t      if (fn_p)\n \t\t*fn_p = fn;"}, {"sha": "40a200802dceba534a2e4fab7418a5450b5c89c8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -4242,6 +4242,8 @@ enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };\n /* Used in calls to store_init_value to suppress its usual call to\n    digest_init.  */\n #define LOOKUP_ALREADY_DIGESTED (LOOKUP_DEFAULTED << 1)\n+/* An instantiation with explicit template arguments.  */\n+#define LOOKUP_EXPLICIT_TMPL_ARGS (LOOKUP_ALREADY_DIGESTED << 1)\n \n #define LOOKUP_NAMESPACES_ONLY(F)  \\\n   (((F) & LOOKUP_PREFER_NAMESPACES) && !((F) & LOOKUP_PREFER_TYPES))"}, {"sha": "6f72b8a0f2f9b972fffd34d13897311b1c50cb79", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -17,6 +17,21 @@\n \tPR c++/48606\n \t* g++.dg/init/ctor10.C: New.\n \n+2011-04-29  Le-Chun Wu  <lcwu@google.com>\n+\n+\t* g++.dg/warn/Wconversion-null-2.C: Do not expect a NULL\n+\t  warning in implicitly instantiated templates.\n+\n+2011-04-29  Le-Chun Wu  <lcwu@google.com>\n+\n+\t* g++.dg/warn/Wnull-conversion-1.C: New.\n+\t* g++.dg/warn/Wnull-conversion-2.C: New.\n+\n+2011-04-29  Diego Novillo  <dnovillo@google.com>\n+\n+\t* g++.old-deja/g++.other/null3.C: Expect warning about\n+\tconverting boolean to a pointer.\n+\n 2011-04-29  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/48462"}, {"sha": "dd498c199d9b3495c3ee41ca3d8ba07371a40970", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-null-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-null-2.C?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -44,6 +44,6 @@ int main()\n   k(NULL);   // { dg-warning \"\" } converting NULL to int\n   g(NULL);   // { dg-warning \"\" } converting NULL to int\n   h<NULL>(); // No warning: NULL bound to integer template parameter\n-  l(NULL);   // { dg-warning \"\" } converting NULL to int\n+  l(NULL);   // No warning: NULL is used to implicitly instantiate the template\n   NULL && NULL; // No warning: converting NULL to bool is OK\n }"}, {"sha": "511f091f2cfe3e799ab1b29d792a1174e098dc1b", "filename": "gcc/testsuite/g++.dg/warn/Wnull-conversion-1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-1.C?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-Wconversion-null\" }\n+\n+#include <stddef.h>\n+\n+void func1(int* ptr);\n+\n+void func2() {\n+  int* t = false;             // { dg-warning \"converting 'false' to pointer\" }\n+  int* p;\n+  p = false;                  // { dg-warning \"converting 'false' to pointer\" }\n+  int* r = sizeof(char) / 2;\n+  func1(false);               // { dg-warning \"converting 'false' to pointer\" }\n+  int i = NULL;               // { dg-warning \"converting to non-pointer\" }\n+}"}, {"sha": "92a87d1e76c23460757ac1cc823a5a23146253d9", "filename": "gcc/testsuite/g++.dg/warn/Wnull-conversion-2.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWnull-conversion-2.C?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -0,0 +1,45 @@\n+// { dg-do compile }\n+// { dg-options \"-Wconversion-null\" }\n+\n+#include <stddef.h>\n+\n+class Foo {\n+ public:\n+  template <typename T1, typename T2>\n+  static void Compare(const T1& expected, const T2& actual) { }\n+\n+  template <typename T1, typename T2>\n+  static void Compare(const T1& expected, T2* actual) { }\n+\n+};\n+\n+template<typename T1>\n+class Foo2 {\n+ public:\n+  Foo2(int x);\n+  template<typename T2> void Bar(T2 y);\n+};\n+\n+template<typename T3> void func(T3 x) { }\n+\n+typedef Foo2<int> MyFooType;\n+\n+void func1(long int a) {\n+  MyFooType *foo2 = new MyFooType(NULL); // { dg-warning \"passing NULL to\" }\n+  foo2->Bar(a);\n+  func(NULL);\n+  func<int>(NULL);                       // { dg-warning \"passing NULL to\" }\n+  func<int *>(NULL);\n+}\n+\n+int x = 1;\n+\n+main()\n+{\n+  int *p = &x;\n+\n+  Foo::Compare(0, *p);\n+  Foo::Compare<long int, int>(NULL, p);  // { dg-warning \"passing NULL to\" }\n+  Foo::Compare(NULL, p);\n+  func1(NULL);                           // { dg-warning \"passing NULL to\" }\n+}"}, {"sha": "01071f9297b107b96d3ebd3936bfc8f22c3d743e", "filename": "gcc/testsuite/g++.old-deja/g++.other/null3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e1df0f00b8625beab3858201673d470cae65687/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull3.C?ref=2e1df0f00b8625beab3858201673d470cae65687", "patch": "@@ -2,5 +2,5 @@\n \n void x()\n {\n- int* p = 1==0;\n+ int* p = 1==0;\t// { dg-warning \"converting 'false' to pointer\" }\n }"}]}