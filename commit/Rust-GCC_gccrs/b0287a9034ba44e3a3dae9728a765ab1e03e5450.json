{"sha": "b0287a9034ba44e3a3dae9728a765ab1e03e5450", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyODdhOTAzNGJhNDRlM2EzZGFlOTcyOGE3NjVhYjFlMDNlNTQ1MA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-12-15T20:31:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-15T20:31:07Z"}, "message": "c-typeck.c, [...]: Use \"built-in\" and \"bit-field\" spellings in messages.\n\n\t* c-typeck.c, config/i386/i386.h, config/mcore/mcore.h,\n\tconfig/ns32k/ns32k.h, config/rs6000/sysv4.h, fold-const.c,\n\ttoplev.c, cppinit.c, cppmacro.c, gcc.c: Use \"built-in\" and\n\t\"bit-field\" spellings in messages.\n\t* po/gcc.pot: Regenerate.\n\nch:\n\t* expr.c: Use \"built-in\" spelling in messages.\n\nFrom-SVN: r48048", "tree": {"sha": "ab93dcb3b3786532d89de4391000c8589809df03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab93dcb3b3786532d89de4391000c8589809df03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0287a9034ba44e3a3dae9728a765ab1e03e5450", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0287a9034ba44e3a3dae9728a765ab1e03e5450", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0287a9034ba44e3a3dae9728a765ab1e03e5450", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0287a9034ba44e3a3dae9728a765ab1e03e5450/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1737c953d5d6b65078435519a6dbd5e425ad47e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1737c953d5d6b65078435519a6dbd5e425ad47e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1737c953d5d6b65078435519a6dbd5e425ad47e6"}], "stats": {"total": 112, "additions": 62, "deletions": 50}, "files": [{"sha": "abed16bef5902f26e1d7d94290d0f9fc1c5b5c4e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1,3 +1,11 @@\n+2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-typeck.c, config/i386/i386.h, config/mcore/mcore.h,\n+\tconfig/ns32k/ns32k.h, config/rs6000/sysv4.h, fold-const.c,\n+\ttoplev.c, cppinit.c, cppmacro.c, gcc.c: Use \"built-in\" and\n+\t\"bit-field\" spellings in messages.\n+\t* po/gcc.pot: Regenerate.\n+\n 2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.c, config/fr30/fr30.c, config/v850/v850-c.c, toplev.c: Use"}, {"sha": "1c34502e61a14ad453f6d51b094abf114f922450", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -3393,7 +3393,7 @@ mark_addressable (exp)\n       case COMPONENT_REF:\n \tif (DECL_C_BIT_FIELD (TREE_OPERAND (x, 1)))\n \t  {\n-\t    error (\"cannot take address of bitfield `%s'\",\n+\t    error (\"cannot take address of bit-field `%s'\",\n \t\t   IDENTIFIER_POINTER (DECL_NAME (TREE_OPERAND (x, 1))));\n \t    return 0;\n \t  }"}, {"sha": "d0d4d95c521a66681d29408093093e2c14cff53d", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1,3 +1,7 @@\n+2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* expr.c: Use \"built-in\" spelling in messages.\n+\n 2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl.c, parse.c, typeck.c: Use American spelling in messages."}, {"sha": "da92ab9614bb70af3d2327db0bcc247f7499e9da", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1484,7 +1484,7 @@ build_chill_descr (expr)\n       /* check for expression is referable */\n       if (! CH_REFERABLE (expr))\n \t{\n-\t  error (\"expression for DESCR-builtin must be referable\");\n+\t  error (\"expression for DESCR-built-in must be referable\");\n \t  return error_mark_node;\n \t}\n       \n@@ -2974,11 +2974,11 @@ build_generalized_call (func, args)\n \n \t    case BUILT_IN_EXPIRED:\n \t    case BUILT_IN_WAIT:\n-\t      sorry (\"unimplemented builtin function `%s'\",\n+\t      sorry (\"unimplemented built-in function `%s'\",\n \t\t     IDENTIFIER_POINTER (fnname));\n \t      break;\n \t    default:\n-\t      error (\"internal error - bad builtin function `%s'\",\n+\t      error (\"internal error - bad built-in function `%s'\",\n \t\t     IDENTIFIER_POINTER (fnname));\n \t    }\n \t}"}, {"sha": "a95a23e77700cdd2c0c78bd70ec85e6f5813ea55", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -353,25 +353,25 @@ extern int x86_prefetch_sse;\n   { \"no-accumulate-outgoing-args\",MASK_ACCUMULATE_OUTGOING_ARGS_SET,\t      \\\n     N_(\"Do not use push instructions to save outgoing arguments\") },\t      \\\n   { \"mmx\",\t\t\t MASK_MMX | MASK_MMX_SET,\t\t      \\\n-    N_(\"Support MMX builtins\") },\t\t\t\t\t      \\\n+    N_(\"Support MMX built-in functions\") },\t\t\t\t      \\\n   { \"no-mmx\",\t\t\t -MASK_MMX,\t\t\t\t      \\\n-    N_(\"Do not support MMX builtins\") },\t\t\t\t      \\\n+    N_(\"Do not support MMX built-in functions\") },\t\t\t      \\\n   { \"no-mmx\",\t\t\t MASK_MMX_SET, N_(\"\") },\t\t      \\\n   { \"3dnow\",                     MASK_3DNOW | MASK_3DNOW_SET,\t\t      \\\n-    N_(\"Support 3DNow! builtins\") },\t\t\t\t\t      \\\n+    N_(\"Support 3DNow! built-in functions\") },\t\t\t\t      \\\n   { \"no-3dnow\",                  -MASK_3DNOW, N_(\"\") },\t\t\t      \\\n   { \"no-3dnow\",                  MASK_3DNOW_SET,\t\t\t      \\\n-    N_(\"Do not support 3DNow! builtins\") },\t\t\t\t      \\\n+    N_(\"Do not support 3DNow! built-in functions\") },\t\t\t      \\\n   { \"sse\",\t\t\t MASK_SSE | MASK_SSE_SET,\t\t      \\\n-    N_(\"Support MMX and SSE builtins and code generation\") },\t\t      \\\n+    N_(\"Support MMX and SSE built-in functions and code generation\") },\t      \\\n   { \"no-sse\",\t\t\t -MASK_SSE, N_(\"\") },\t \t\t      \\\n   { \"no-sse\",\t\t\t MASK_SSE_SET,\t\t\t\t      \\\n-    N_(\"Do not support MMX and SSE builtins and code generation\") },\t      \\\n+    N_(\"Do not support MMX and SSE built-in functions and code generation\") },\\\n   { \"sse2\",\t\t\t MASK_SSE2 | MASK_SSE2_SET,\t\t      \\\n-    N_(\"Support MMX, SSE and SSE2 builtins and code generation\") },\t      \\\n+    N_(\"Support MMX, SSE and SSE2 built-in functions and code generation\") }, \\\n   { \"no-sse2\",\t\t\t -MASK_SSE2, N_(\"\") },\t\t\t      \\\n   { \"no-sse2\",\t\t\t MASK_SSE2_SET,\t\t\t\t      \\\n-    N_(\"Do not support MMX, SSE and SSE2 builtins and code generation\") },    \\\n+    N_(\"Do not support MMX, SSE and SSE2 built-in functions and code generation\") },    \\\n   { \"128bit-long-double\",\t MASK_128BIT_LONG_DOUBLE,\t\t      \\\n     N_(\"sizeof(long double) is 16\") },\t\t\t\t\t      \\\n   { \"96bit-long-double\",\t-MASK_128BIT_LONG_DOUBLE,\t\t      \\"}, {"sha": "7bced8ea8b505360b9967203787b42ed21b867f3", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -139,7 +139,7 @@ extern int target_flags;\n   {\"no-relax-immediates\", - RELAX_IMM_BIT,\t\t\t\t\\\n      N_(\"Do not arbitary sized immediates in bit operations\") },\t\\\n   {\"wide-bitfields\",        W_FIELD_BIT,\t\t\t\t\\\n-     N_(\"Always treat bitfield as int-sized\") },\t\t\t\\\n+     N_(\"Always treat bit-field as int-sized\") },\t\t\t\\\n   {\"no-wide-bitfields\",   - W_FIELD_BIT,\t\t\t\t\\\n      \"\" },\t\t\t\t\t\t\t\t\\\n   {\"4byte-functions\",       OVERALIGN_FUNC_BIT,\t\t\t\t\\"}, {"sha": "f4d52b2fc1bd8c1781de28b85ff0245983ca9a1f", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -113,8 +113,8 @@ extern int target_flags;\n     { \"sb\", -32,\t\t\t\t\t\t\t\\\n       N_(\"Register sb is zero. Use for absolute addressing\")},\t\t\\\n     { \"nosb\", 32, N_(\"Do not use register sb\")},\t\t\t\\\n-    { \"bitfield\", -64, N_(\"Do not use bitfield instructions\")},\t\t\\\n-    { \"nobitfield\", 64, N_(\"Use bitfield instructions\")},\t\t\\\n+    { \"bitfield\", -64, N_(\"Do not use bit-field instructions\")},\t\\\n+    { \"nobitfield\", 64, N_(\"Use bit-field instructions\")},\t\t\\\n     { \"himem\", 128, N_(\"Generate code for high memory\")},\t\t\\\n     { \"nohimem\", -128, N_(\"Generate code for low memory\")},\t\t\\\n     { \"32381\", 256, N_(\"32381 fpu\")},\t\t\t\t\t\\"}, {"sha": "56e16ba7877599ee90852f95b725a843f9402151", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -101,9 +101,9 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n #undef\tSUBTARGET_SWITCHES\n #define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n   { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n-    N_(\"Align to the base type of the bitfield\") },\t\t\t\\\n+    N_(\"Align to the base type of the bit-field\") },\t\t\t\\\n   { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE,\t\t\t\t\\\n-    N_(\"Don't align to the base type of the bitfield\") },\t\t\\\n+    N_(\"Don't align to the base type of the bit-field\") },\t\t\\\n   { \"strict-align\",\t MASK_STRICT_ALIGN,\t\t\t\t\\\n     N_(\"Don't assume that unaligned accesses are handled by the system\") }, \\\n   { \"no-strict-align\",\t-MASK_STRICT_ALIGN,\t\t\t\t\\\n@@ -134,7 +134,7 @@ extern int g_switch_set;\t\t/* Whether -G xx was passed.  */\n   { \"no-eabi\",\t\t-MASK_EABI, N_(\"Don't use EABI\") },\t\t\\\n   { \"bit-word\",\t\t-MASK_NO_BITFIELD_WORD, \"\" },\t\t\t\\\n   { \"no-bit-word\",\t MASK_NO_BITFIELD_WORD,\t\t\t\t\\\n-    N_(\"Do not allow bitfields to cross word boundaries\") },\t\t\\\n+    N_(\"Do not allow bit-fields to cross word boundaries\") },\t\t\\\n   { \"regnames\",\t\t  MASK_REGNAMES,\t\t\t\t\\\n     N_(\"Use alternate register names\") },\t\t\t\t\\\n   { \"no-regnames\",\t -MASK_REGNAMES,\t\t\t\t\\"}, {"sha": "374f5c299f662994144d320c78c597b1bf01c4cc", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1000,7 +1000,7 @@ cpp_finish_options (pfile)\n     {\n       struct pending_option *p;\n \n-      _cpp_do_file_change (pfile, LC_RENAME, _(\"<builtin>\"), 1, 0);\n+      _cpp_do_file_change (pfile, LC_RENAME, _(\"<built-in>\"), 1, 0);\n       init_builtins (pfile);\n       _cpp_do_file_change (pfile, LC_RENAME, _(\"<command line>\"), 1, 0);\n       for (p = CPP_OPTION (pfile, pending)->directive_head; p; p = p->next)"}, {"sha": "8a4a6401b187b4c3536a2be6cd91650560a1737b", "filename": "gcc/cppmacro.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fcppmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fcppmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppmacro.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -145,7 +145,7 @@ builtin_macro (pfile, node)\n   switch (node->value.builtin)\n     {\n     default:\n-      cpp_ice (pfile, \"invalid builtin macro \\\"%s\\\"\", NODE_NAME (node));\n+      cpp_ice (pfile, \"invalid built-in macro \\\"%s\\\"\", NODE_NAME (node));\n       return 0;\n \n     case BT_FILE:"}, {"sha": "8ac7f5107b2556947b2e598caff171e80812d9e7", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -3117,7 +3117,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n \t\t\t\t\tconvert (unsigned_type, rhs),\n \t\t\t\t\tsize_int (lbitsize), 0)))\n \t{\n-\t  warning (\"comparison is always %d due to width of bitfield\",\n+\t  warning (\"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n \t  return convert (compare_type,\n \t\t\t  (code == NE_EXPR\n@@ -3130,7 +3130,7 @@ optimize_bit_field_compare (code, compare_type, lhs, rhs)\n \t\t\t      size_int (lbitsize - 1), 0);\n       if (! integer_zerop (tem) && ! integer_all_onesp (tem))\n \t{\n-\t  warning (\"comparison is always %d due to width of bitfield\",\n+\t  warning (\"comparison is always %d due to width of bit-field\",\n \t\t   code == NE_EXPR);\n \t  return convert (compare_type,\n \t\t\t  (code == NE_EXPR"}, {"sha": "2dc7b72af36c560face18491b6095223f2c062aa", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1463,7 +1463,7 @@ init_spec ()\n     return;\t\t\t/* Already initialized.  */\n \n   if (verbose_flag)\n-    notice (\"Using builtin specs.\\n\");\n+    notice (\"Using built-in specs.\\n\");\n \n #ifdef EXTRA_SPECS\n   extra_specs = (struct spec_list *)\n@@ -3053,7 +3053,7 @@ display_help ()\n   fputs (_(\"  -save-temps              Do not delete intermediate files\\n\"), stdout);\n   fputs (_(\"  -pipe                    Use pipes rather than intermediate files\\n\"), stdout);\n   fputs (_(\"  -time                    Time the execution of each subprocess\\n\"), stdout);\n-  fputs (_(\"  -specs=<file>            Override builtin specs with the contents of <file>\\n\"), stdout);\n+  fputs (_(\"  -specs=<file>            Override built-in specs with the contents of <file>\\n\"), stdout);\n   fputs (_(\"  -std=<standard>          Assume that the input sources are for <standard>\\n\"), stdout);\n   fputs (_(\"  -B <directory>           Add <directory> to the compiler's search paths\\n\"), stdout);\n   fputs (_(\"  -b <machine>             Run gcc for target <machine>, if installed\\n\"), stdout);"}, {"sha": "82bcea958362d0267bcf235515743d2887814a26", "filename": "gcc/po/gcc.pot", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fpo%2Fgcc.pot", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Fpo%2Fgcc.pot", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2Fgcc.pot?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -8,7 +8,7 @@\n msgid \"\"\n msgstr \"\"\n \"Project-Id-Version: PACKAGE VERSION\\n\"\n-\"POT-Creation-Date: 2001-12-15 19:58+0000\\n\"\n+\"POT-Creation-Date: 2001-12-15 20:27+0000\\n\"\n \"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n\"\n \"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n\"\n \"Language-Team: LANGUAGE <LL@li.org>\\n\"\n@@ -2920,7 +2920,7 @@ msgstr \"\"\n \n #: c-typeck.c:3396\n #, c-format\n-msgid \"cannot take address of bitfield `%s'\"\n+msgid \"cannot take address of bit-field `%s'\"\n msgstr \"\"\n \n #: c-typeck.c:3424 ch/typeck.c:3676 ch/xtypeck.c:62\n@@ -4021,7 +4021,7 @@ msgid \"End of search list.\\n\"\n msgstr \"\"\n \n #: cppinit.c:1003\n-msgid \"<builtin>\"\n+msgid \"<built-in>\"\n msgstr \"\"\n \n #: cppinit.c:1005\n@@ -4605,7 +4605,7 @@ msgstr \"\"\n \n #: cppmacro.c:148\n #, c-format\n-msgid \"invalid builtin macro \\\"%s\\\"\"\n+msgid \"invalid built-in macro \\\"%s\\\"\"\n msgstr \"\"\n \n #: cppmacro.c:347\n@@ -4953,7 +4953,7 @@ msgstr \"\"\n \n #: fold-const.c:3120 fold-const.c:3133\n #, c-format\n-msgid \"comparison is always %d due to width of bitfield\"\n+msgid \"comparison is always %d due to width of bit-field\"\n msgstr \"\"\n \n #: fold-const.c:4175 fold-const.c:4192\n@@ -5014,7 +5014,7 @@ msgid \"extraneous argument to `%s' option\"\n msgstr \"\"\n \n #: gcc.c:1466\n-msgid \"Using builtin specs.\\n\"\n+msgid \"Using built-in specs.\\n\"\n msgstr \"\"\n \n #: gcc.c:1640\n@@ -5206,7 +5206,7 @@ msgstr \"\"\n \n #: gcc.c:3056\n msgid \"\"\n-\"  -specs=<file>            Override builtin specs with the contents of \"\n+\"  -specs=<file>            Override built-in specs with the contents of \"\n \"<file>\\n\"\n msgstr \"\"\n \n@@ -6992,7 +6992,7 @@ msgid \"Determine language standard\"\n msgstr \"\"\n \n #: toplev.c:1196\n-msgid \"Make bitfields by unsigned by default\"\n+msgid \"Make bit-fields by unsigned by default\"\n msgstr \"\"\n \n #: toplev.c:1200\n@@ -10102,35 +10102,35 @@ msgid \"Do not use push instructions to save outgoing arguments\"\n msgstr \"\"\n \n #: config/i386/i386.h:356\n-msgid \"Support MMX builtins\"\n+msgid \"Support MMX built-in functions\"\n msgstr \"\"\n \n #: config/i386/i386.h:358\n-msgid \"Do not support MMX builtins\"\n+msgid \"Do not support MMX built-in functions\"\n msgstr \"\"\n \n #: config/i386/i386.h:361\n-msgid \"Support 3DNow! builtins\"\n+msgid \"Support 3DNow! built-in functions\"\n msgstr \"\"\n \n #: config/i386/i386.h:364\n-msgid \"Do not support 3DNow! builtins\"\n+msgid \"Do not support 3DNow! built-in functions\"\n msgstr \"\"\n \n #: config/i386/i386.h:366\n-msgid \"Support MMX and SSE builtins and code generation\"\n+msgid \"Support MMX and SSE built-in functions and code generation\"\n msgstr \"\"\n \n #: config/i386/i386.h:369\n-msgid \"Do not support MMX and SSE builtins and code generation\"\n+msgid \"Do not support MMX and SSE built-in functions and code generation\"\n msgstr \"\"\n \n #: config/i386/i386.h:371\n-msgid \"Support MMX, SSE and SSE2 builtins and code generation\"\n+msgid \"Support MMX, SSE and SSE2 built-in functions and code generation\"\n msgstr \"\"\n \n #: config/i386/i386.h:374\n-msgid \"Do not support MMX, SSE and SSE2 builtins and code generation\"\n+msgid \"Do not support MMX, SSE and SSE2 built-in functions and code generation\"\n msgstr \"\"\n \n #: config/i386/i386.h:376\n@@ -11038,7 +11038,7 @@ msgid \"Do not arbitary sized immediates in bit operations\"\n msgstr \"\"\n \n #: config/mcore/mcore.h:142\n-msgid \"Always treat bitfield as int-sized\"\n+msgid \"Always treat bit-field as int-sized\"\n msgstr \"\"\n \n #: config/mcore/mcore.h:146\n@@ -11689,11 +11689,11 @@ msgid \"Do not use register sb\"\n msgstr \"\"\n \n #: config/ns32k/ns32k.h:116\n-msgid \"Do not use bitfield instructions\"\n+msgid \"Do not use bit-field instructions\"\n msgstr \"\"\n \n #: config/ns32k/ns32k.h:117\n-msgid \"Use bitfield instructions\"\n+msgid \"Use bit-field instructions\"\n msgstr \"\"\n \n #: config/ns32k/ns32k.h:118\n@@ -12221,11 +12221,11 @@ msgid \"Select method for sdata handling\"\n msgstr \"\"\n \n #: config/rs6000/sysv4.h:104\n-msgid \"Align to the base type of the bitfield\"\n+msgid \"Align to the base type of the bit-field\"\n msgstr \"\"\n \n #: config/rs6000/sysv4.h:106\n-msgid \"Don't align to the base type of the bitfield\"\n+msgid \"Don't align to the base type of the bit-field\"\n msgstr \"\"\n \n #: config/rs6000/sysv4.h:108\n@@ -12270,7 +12270,7 @@ msgid \"Don't use EABI\"\n msgstr \"\"\n \n #: config/rs6000/sysv4.h:137\n-msgid \"Do not allow bitfields to cross word boundaries\"\n+msgid \"Do not allow bit-fields to cross word boundaries\"\n msgstr \"\"\n \n #: config/rs6000/sysv4.h:139\n@@ -13482,7 +13482,7 @@ msgid \"CARD argument must be powerset mode\"\n msgstr \"\"\n \n #: ch/expr.c:1487\n-msgid \"expression for DESCR-builtin must be referable\"\n+msgid \"expression for DESCR-built-in must be referable\"\n msgstr \"\"\n \n #: ch/expr.c:1535\n@@ -13650,12 +13650,12 @@ msgstr \"\"\n \n #: ch/expr.c:2977\n #, c-format\n-msgid \"unimplemented builtin function `%s'\"\n+msgid \"unimplemented built-in function `%s'\"\n msgstr \"\"\n \n #: ch/expr.c:2981\n #, c-format\n-msgid \"internal error - bad builtin function `%s'\"\n+msgid \"internal error - bad built-in function `%s'\"\n msgstr \"\"\n \n #: ch/expr.c:2995"}, {"sha": "342c6cc1467956b23baa9395ae615f86d474a933", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0287a9034ba44e3a3dae9728a765ab1e03e5450/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=b0287a9034ba44e3a3dae9728a765ab1e03e5450", "patch": "@@ -1193,7 +1193,7 @@ documented_lang_options[] =\n \n   { \"-fsigned-bitfields\", \"\" },\n   { \"-funsigned-bitfields\",\n-    N_(\"Make bitfields by unsigned by default\") },\n+    N_(\"Make bit-fields by unsigned by default\") },\n   { \"-fno-signed-bitfields\", \"\" },\n   { \"-fno-unsigned-bitfields\",\"\" },\n   { \"-fsigned-char\", "}]}