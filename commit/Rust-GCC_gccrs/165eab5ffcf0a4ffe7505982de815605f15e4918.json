{"sha": "165eab5ffcf0a4ffe7505982de815605f15e4918", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY1ZWFiNWZmY2YwYTRmZmU3NTA1OTgyZGU4MTU2MDVmMTVlNDkxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:33:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:33:59Z"}, "message": "atree.adb: Add a fifth component to entities This allows us to add 32 flags and four new fields\n\n\t* atree.adb: Add a fifth component to entities\n\tThis allows us to add 32 flags and four new fields\n\n\t* atree.ads: Add a fifth component to entities\n\tThis allows us to add 32 flags and four new fields\n\n\t* einfo.ads, einfo.adb: Document new fields and new flags now available\n\tAdd routines for printing new fields\n\n\t* treepr.adb: Call routines to print out additional fields if present\n\nFrom-SVN: r92830", "tree": {"sha": "557f21681ba00d33a252d030b4b7124351eb028e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/557f21681ba00d33a252d030b4b7124351eb028e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/165eab5ffcf0a4ffe7505982de815605f15e4918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165eab5ffcf0a4ffe7505982de815605f15e4918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165eab5ffcf0a4ffe7505982de815605f15e4918", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165eab5ffcf0a4ffe7505982de815605f15e4918/comments", "author": null, "committer": null, "parents": [{"sha": "5f3ab6fbf007f309b823cd77f1d3eed52ee0d0a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f3ab6fbf007f309b823cd77f1d3eed52ee0d0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f3ab6fbf007f309b823cd77f1d3eed52ee0d0a7"}], "stats": {"total": 1097, "additions": 1047, "deletions": 50}, "files": [{"sha": "149203a5ca83208f6a1877a3015124910c2d8783", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 658, "deletions": 37, "changes": 695, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -89,8 +89,9 @@ package body Atree is\n    function To_Flag_Byte_Ptr is new\n      Unchecked_Conversion (Node_Kind_Ptr, Flag_Byte_Ptr);\n \n-   --  The following declarations are used to store flags 73-96 in the\n-   --  Field12 field of the third component of an extended (entity) node.\n+   --  The following declarations are used to store flags 73-96 and the\n+   --  Convention field in the Field12 field of the third component of an\n+   --  extended (Entity) node.\n \n    type Flag_Word is record\n       Flag73 : Boolean;\n@@ -189,11 +190,11 @@ package body Atree is\n    function To_Flag_Word2_Ptr is new\n      Unchecked_Conversion (Union_Id_Ptr, Flag_Word2_Ptr);\n \n-   --  The following declarations are used to store flags 97-120 in the\n+   --  The following declarations are used to store flags 152-183 in the\n    --  Field12 field of the fourth component of an extended (entity) node.\n \n    type Flag_Word3 is record\n-      Flag152  : Boolean;\n+      Flag152 : Boolean;\n       Flag153 : Boolean;\n       Flag154 : Boolean;\n       Flag155 : Boolean;\n@@ -242,6 +243,59 @@ package body Atree is\n    function To_Flag_Word3_Ptr is new\n      Unchecked_Conversion (Union_Id_Ptr, Flag_Word3_Ptr);\n \n+   --  The following declarations are used to store flags 184-215 in the\n+   --  Field11 field of the fifth component of an extended (entity) node.\n+\n+   type Flag_Word4 is record\n+      Flag184 : Boolean;\n+      Flag185 : Boolean;\n+      Flag186 : Boolean;\n+      Flag187 : Boolean;\n+      Flag188 : Boolean;\n+      Flag189 : Boolean;\n+      Flag190 : Boolean;\n+      Flag191 : Boolean;\n+\n+      Flag192 : Boolean;\n+      Flag193 : Boolean;\n+      Flag194 : Boolean;\n+      Flag195 : Boolean;\n+      Flag196 : Boolean;\n+      Flag197 : Boolean;\n+      Flag198 : Boolean;\n+      Flag199 : Boolean;\n+\n+      Flag200 : Boolean;\n+      Flag201 : Boolean;\n+      Flag202 : Boolean;\n+      Flag203 : Boolean;\n+      Flag204 : Boolean;\n+      Flag205 : Boolean;\n+      Flag206 : Boolean;\n+      Flag207 : Boolean;\n+\n+      Flag208 : Boolean;\n+      Flag209 : Boolean;\n+      Flag210 : Boolean;\n+      Flag211 : Boolean;\n+      Flag212 : Boolean;\n+      Flag213 : Boolean;\n+      Flag214 : Boolean;\n+      Flag215 : Boolean;\n+   end record;\n+\n+   pragma Pack (Flag_Word4);\n+   for Flag_Word4'Size use 32;\n+   for Flag_Word4'Alignment use 4;\n+\n+   type Flag_Word4_Ptr is access all Flag_Word4;\n+\n+   function To_Flag_Word4 is new\n+     Unchecked_Conversion (Union_Id, Flag_Word4);\n+\n+   function To_Flag_Word4_Ptr is new\n+     Unchecked_Conversion (Union_Id_Ptr, Flag_Word4_Ptr);\n+\n    --  Default value used to initialize default nodes. Note that some of the\n    --  fields get overwritten, and in particular, Nkind always gets reset.\n \n@@ -404,6 +458,8 @@ package body Atree is\n       Ext1   : Node_Record := Default_Node_Extension;\n       Ext2   : Node_Record := Default_Node_Extension;\n       Ext3   : Node_Record := Default_Node_Extension;\n+      Ext4   : Node_Record := Default_Node_Extension;\n+\n    begin\n       if Present (Src) then\n          Nod := Nodes.Table (Src);\n@@ -412,6 +468,7 @@ package body Atree is\n             Ext1 := Nodes.Table (Src + 1);\n             Ext2 := Nodes.Table (Src + 2);\n             Ext3 := Nodes.Table (Src + 3);\n+            Ext4 := Nodes.Table (Src + 4);\n          end if;\n       end if;\n \n@@ -433,6 +490,7 @@ package body Atree is\n          Nodes.Append (Ext1);\n          Nodes.Append (Ext2);\n          Nodes.Append (Ext3);\n+         Nodes.Append (Ext4);\n       end if;\n \n       Orig_Nodes.Set_Last (Nodes.Last);\n@@ -518,6 +576,7 @@ package body Atree is\n          Nodes.Table (Destination + 1) := Nodes.Table (Source + 1);\n          Nodes.Table (Destination + 2) := Nodes.Table (Source + 2);\n          Nodes.Table (Destination + 3) := Nodes.Table (Source + 3);\n+         Nodes.Table (Destination + 4) := Nodes.Table (Source + 4);\n \n       else\n          pragma Assert (not Has_Extension (Source));\n@@ -579,10 +638,9 @@ package body Atree is\n \n          else\n             NL := New_List;\n-            E := First (List);\n \n+            E := First (List);\n             while Present (E) loop\n-\n                if Has_Extension (E) then\n                   Append (Copy_Entity (E), NL);\n                else\n@@ -605,7 +663,6 @@ package body Atree is\n \n       begin\n          if Field in Node_Range then\n-\n             New_N := Union_Id (Copy_Separate_Tree (Node_Id (Field)));\n \n             if Parent (Node_Id (Field)) = Source then\n@@ -697,6 +754,10 @@ package body Atree is\n       procedure Delete_List (L : List_Id);\n       --  Delete all elements on the given list\n \n+      ------------------\n+      -- Delete_Field --\n+      ------------------\n+\n       procedure Delete_Field (F : Union_Id) is\n       begin\n          if F = Union_Id (Empty) then\n@@ -719,6 +780,10 @@ package body Atree is\n          end if;\n       end Delete_Field;\n \n+      -----------------\n+      -- Delete_List --\n+      -----------------\n+\n       procedure Delete_List (L : List_Id) is\n       begin\n          while Is_Non_Empty_List (L) loop\n@@ -785,6 +850,9 @@ package body Atree is\n       Temp_Ent := Nodes.Table (E1 + 3);\n       Nodes.Table (E1 + 3) := Nodes.Table (E2 + 3);\n       Nodes.Table (E2 + 3) := Temp_Ent;\n+      Temp_Ent := Nodes.Table (E1 + 4);\n+      Nodes.Table (E1 + 4) := Nodes.Table (E2 + 4);\n+      Nodes.Table (E2 + 4) := Temp_Ent;\n \n       --  That exchange exchanged the parent pointers as well, which is what\n       --  we want, but we need to patch up the defining identifier pointers\n@@ -809,8 +877,12 @@ package body Atree is\n       Result : Entity_Id;\n \n       procedure Debug_Extend_Node;\n-      --  Debug routine for debug flag N\n       pragma Inline (Debug_Extend_Node);\n+      --  Debug routine for debug flag N\n+\n+      -----------------------\n+      -- Debug_Extend_Node --\n+      -----------------------\n \n       procedure Debug_Extend_Node is\n       begin\n@@ -829,6 +901,8 @@ package body Atree is\n          end if;\n       end Debug_Extend_Node;\n \n+   --  Start of processing for Extend_Node\n+\n    begin\n       pragma Assert (not (Has_Extension (Node)));\n       Result := Allocate_Initialize_Node (Node, With_Extension => True);\n@@ -847,6 +921,10 @@ package body Atree is\n       --  points to a node, list, or element list that has a parent that\n       --  points to Old_Node. If so, the parent is reset to point to New_Node.\n \n+      ----------------\n+      -- Fix_Parent --\n+      ----------------\n+\n       procedure Fix_Parent (Field : Union_Id; Old_Node, New_Node : Node_Id) is\n       begin\n          --  Fix parent of node that is referenced by Field. Note that we must\n@@ -870,6 +948,8 @@ package body Atree is\n          end if;\n       end Fix_Parent;\n \n+   --  Start of processing for Fix_Parents\n+\n    begin\n       Fix_Parent (Field1 (New_Node), Old_Node, New_Node);\n       Fix_Parent (Field2 (New_Node), Old_Node, New_Node);\n@@ -921,7 +1001,8 @@ package body Atree is\n       Set_Name1 (Error, Error_Name);\n       Set_Error_Posted (Error, True);\n \n-      --  Set global variables for New_Copy_Tree:\n+      --  Set global variables for New_Copy_Tree\n+\n       NCT_Hash_Tables_Used := False;\n       NCT_Table_Entries    := 0;\n       NCT_Hash_Table_Setup := False;\n@@ -1019,11 +1100,19 @@ package body Atree is\n    function New_Copy_Hash (E : Entity_Id) return NCT_Header_Num;\n    --  Hash function used for hash operations\n \n+   -------------------\n+   -- New_Copy_Hash --\n+   -------------------\n+\n    function New_Copy_Hash (E : Entity_Id) return NCT_Header_Num is\n    begin\n       return Nat (E) mod (NCT_Header_Num'Last + 1);\n    end New_Copy_Hash;\n \n+   ---------------\n+   -- NCT_Assoc --\n+   ---------------\n+\n    --  The hash table NCT_Assoc associates old entities in the table\n    --  with their corresponding new entities (i.e. the pairs of entries\n    --  presented in the original Map argument are Key-Element pairs).\n@@ -1036,6 +1125,10 @@ package body Atree is\n      Hash       => New_Copy_Hash,\n      Equal      => Types.\"=\");\n \n+   ---------------------\n+   -- NCT_Itype_Assoc --\n+   ---------------------\n+\n    --  The hash table NCT_Itype_Assoc contains entries only for those\n    --  old nodes which have a non-empty Associated_Node_For_Itype set.\n    --  The key is the associated node, and the element is the new node\n@@ -1049,7 +1142,7 @@ package body Atree is\n      Hash       => New_Copy_Hash,\n      Equal      => Types.\"=\");\n \n-   --  Start of New_Copy_Tree function\n+   --  Start of processing for New_Copy_Tree function\n \n    function New_Copy_Tree\n      (Source    : Node_Id;\n@@ -1199,8 +1292,8 @@ package body Atree is\n \n          else\n             New_Elist := New_Elmt_List;\n-            M := First_Elmt (Old_Elist);\n \n+            M := First_Elmt (Old_Elist);\n             while Present (M) loop\n                Append_Elmt (Copy_Node_With_Replacement (Node (M)), New_Elist);\n                Next_Elmt (M);\n@@ -1274,6 +1367,7 @@ package body Atree is\n \n          else\n             New_List := Empty_List;\n+\n             E := First (Old_List);\n             while Present (E) loop\n                Append (Copy_Node_With_Replacement (E), New_List);\n@@ -1479,7 +1573,6 @@ package body Atree is\n \n       procedure Visit_Elist (E : Elist_Id) is\n          Elmt : Elmt_Id;\n-\n       begin\n          if Present (E) then\n             Elmt := First_Elmt (E);\n@@ -1705,7 +1798,6 @@ package body Atree is\n \n       procedure Visit_List (L : List_Id) is\n          N : Node_Id;\n-\n       begin\n          if L /= No_List then\n             N := First (L);\n@@ -1747,7 +1839,6 @@ package body Atree is\n             else\n                declare\n                   E : Elmt_Id;\n-\n                begin\n                   if Present (Actual_Map) then\n                      E := First_Elmt (Actual_Map);\n@@ -1790,6 +1881,7 @@ package body Atree is\n \n          begin\n             NCT_Table_Entries := 0;\n+\n             Elmt := First_Elmt (Actual_Map);\n             while Present (Elmt) loop\n                NCT_Table_Entries := NCT_Table_Entries + 1;\n@@ -1817,7 +1909,6 @@ package body Atree is\n          declare\n             Elmt      : Elmt_Id;\n             New_Itype : Entity_Id;\n-\n          begin\n             Elmt := First_Elmt (Actual_Map);\n             while Present (Elmt) loop\n@@ -1845,8 +1936,8 @@ package body Atree is\n       Ent : Entity_Id;\n \n       procedure New_Entity_Debugging_Output;\n-      --  Debugging routine for debug flag N\n       pragma Inline (New_Entity_Debugging_Output);\n+      --  Debugging routine for debug flag N\n \n       ---------------------------------\n       -- New_Entity_Debugging_Output --\n@@ -1898,8 +1989,8 @@ package body Atree is\n       Nod : Node_Id;\n \n       procedure New_Node_Debugging_Output;\n-      --  Debugging routine for debug flag N\n       pragma Inline (New_Node_Debugging_Output);\n+      --  Debugging routine for debug flag N\n \n       --------------------------\n       -- New_Debugging_Output --\n@@ -2396,7 +2487,6 @@ package body Atree is\n       function Traverse is new Traverse_Func (Process);\n       Discard : Traverse_Result;\n       pragma Warnings (Off, Discard);\n-\n    begin\n       Discard := Traverse (Node);\n    end Traverse_Proc;\n@@ -2567,6 +2657,30 @@ package body Atree is\n          return Nodes.Table (N + 3).Field10;\n       end Field23;\n \n+      function Field24 (N : Node_Id) return Union_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Nodes.Table (N + 4).Field6;\n+      end Field24;\n+\n+      function Field25 (N : Node_Id) return Union_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Nodes.Table (N + 4).Field7;\n+      end Field25;\n+\n+      function Field26 (N : Node_Id) return Union_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Nodes.Table (N + 4).Field8;\n+      end Field26;\n+\n+      function Field27 (N : Node_Id) return Union_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Nodes.Table (N + 4).Field9;\n+      end Field27;\n+\n       function Node1 (N : Node_Id) return Node_Id is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n@@ -2705,6 +2819,30 @@ package body Atree is\n          return Node_Id (Nodes.Table (N + 3).Field10);\n       end Node23;\n \n+      function Node24 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 4).Field6);\n+      end Node24;\n+\n+      function Node25 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 4).Field7);\n+      end Node25;\n+\n+      function Node26 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 4).Field8);\n+      end Node26;\n+\n+      function Node27 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 4).Field9);\n+      end Node27;\n+\n       function List1 (N : Node_Id) return List_Id is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n@@ -2831,7 +2969,6 @@ package body Atree is\n       function Uint3 (N : Node_Id) return Uint is\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n          U : constant Union_Id := Nodes.Table (N).Field3;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2843,7 +2980,6 @@ package body Atree is\n       function Uint4 (N : Node_Id) return Uint is\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n          U : constant Union_Id := Nodes.Table (N).Field4;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2855,7 +2991,6 @@ package body Atree is\n       function Uint5 (N : Node_Id) return Uint is\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n          U : constant Union_Id := Nodes.Table (N).Field5;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2879,7 +3014,6 @@ package body Atree is\n       function Uint9 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 1).Field9;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2888,34 +3022,31 @@ package body Atree is\n          end if;\n       end Uint9;\n \n-      function Uint11 (N : Node_Id) return Uint is\n+      function Uint10 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n-         U : constant Union_Id := Nodes.Table (N + 1).Field11;\n-\n+         U : constant Union_Id := Nodes.Table (N + 1).Field10;\n       begin\n          if U = 0 then\n             return Uint_0;\n          else\n             return From_Union (U);\n          end if;\n-      end Uint11;\n+      end Uint10;\n \n-      function Uint10 (N : Node_Id) return Uint is\n+      function Uint11 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n-         U : constant Union_Id := Nodes.Table (N + 1).Field10;\n-\n+         U : constant Union_Id := Nodes.Table (N + 1).Field11;\n       begin\n          if U = 0 then\n             return Uint_0;\n          else\n             return From_Union (U);\n          end if;\n-      end Uint10;\n+      end Uint11;\n \n       function Uint12 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 1).Field12;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2927,7 +3058,6 @@ package body Atree is\n       function Uint13 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 2).Field6;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2939,7 +3069,6 @@ package body Atree is\n       function Uint14 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 2).Field7;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2951,7 +3080,6 @@ package body Atree is\n       function Uint15 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 2).Field8;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2963,7 +3091,6 @@ package body Atree is\n       function Uint16 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 2).Field9;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2975,7 +3102,6 @@ package body Atree is\n       function Uint17 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 2).Field10;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -2987,7 +3113,6 @@ package body Atree is\n       function Uint22 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 3).Field9;\n-\n       begin\n          if U = 0 then\n             return Uint_0;\n@@ -4094,6 +4219,198 @@ package body Atree is\n          return To_Flag_Word3 (Nodes.Table (N + 3).Field11).Flag183;\n       end Flag183;\n \n+      function Flag184 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag184;\n+      end Flag184;\n+\n+      function Flag185 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag185;\n+      end Flag185;\n+\n+      function Flag186 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag186;\n+      end Flag186;\n+\n+      function Flag187 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag187;\n+      end Flag187;\n+\n+      function Flag188 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag188;\n+      end Flag188;\n+\n+      function Flag189 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag189;\n+      end Flag189;\n+\n+      function Flag190 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag190;\n+      end Flag190;\n+\n+      function Flag191 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag191;\n+      end Flag191;\n+\n+      function Flag192 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag192;\n+      end Flag192;\n+\n+      function Flag193 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag193;\n+      end Flag193;\n+\n+      function Flag194 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag194;\n+      end Flag194;\n+\n+      function Flag195 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag195;\n+      end Flag195;\n+\n+      function Flag196 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag196;\n+      end Flag196;\n+\n+      function Flag197 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag197;\n+      end Flag197;\n+\n+      function Flag198 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag198;\n+      end Flag198;\n+\n+      function Flag199 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag199;\n+      end Flag199;\n+\n+      function Flag200 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag200;\n+      end Flag200;\n+\n+      function Flag201 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag201;\n+      end Flag201;\n+\n+      function Flag202 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag202;\n+      end Flag202;\n+\n+      function Flag203 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag203;\n+      end Flag203;\n+\n+      function Flag204 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag204;\n+      end Flag204;\n+\n+      function Flag205 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag205;\n+      end Flag205;\n+\n+      function Flag206 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag206;\n+      end Flag206;\n+\n+      function Flag207 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag207;\n+      end Flag207;\n+\n+      function Flag208 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag208;\n+      end Flag208;\n+\n+      function Flag209 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag209;\n+      end Flag209;\n+\n+      function Flag210 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag210;\n+      end Flag210;\n+\n+      function Flag211 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag211;\n+      end Flag211;\n+\n+      function Flag212 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag212;\n+      end Flag212;\n+\n+      function Flag213 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag213;\n+      end Flag213;\n+\n+      function Flag214 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag214;\n+      end Flag214;\n+\n+      function Flag215 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag215;\n+      end Flag215;\n+\n       procedure Set_Nkind (N : Node_Id; Val : Node_Kind) is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n@@ -4238,6 +4555,30 @@ package body Atree is\n          Nodes.Table (N + 3).Field10 := Val;\n       end Set_Field23;\n \n+      procedure Set_Field24 (N : Node_Id; Val : Union_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field6 := Val;\n+      end Set_Field24;\n+\n+      procedure Set_Field25 (N : Node_Id; Val : Union_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field7 := Val;\n+      end Set_Field25;\n+\n+      procedure Set_Field26 (N : Node_Id; Val : Union_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field8 := Val;\n+      end Set_Field26;\n+\n+      procedure Set_Field27 (N : Node_Id; Val : Union_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field9 := Val;\n+      end Set_Field27;\n+\n       procedure Set_Node1 (N : Node_Id; Val : Node_Id) is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n@@ -4376,6 +4717,30 @@ package body Atree is\n          Nodes.Table (N + 3).Field10 := Union_Id (Val);\n       end Set_Node23;\n \n+      procedure Set_Node24 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field6 := Union_Id (Val);\n+      end Set_Node24;\n+\n+      procedure Set_Node25 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field7 := Union_Id (Val);\n+      end Set_Node25;\n+\n+      procedure Set_Node26 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field8 := Union_Id (Val);\n+      end Set_Node26;\n+\n+      procedure Set_Node27 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field9 := Union_Id (Val);\n+      end Set_Node27;\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id) is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);\n@@ -5873,6 +6238,262 @@ package body Atree is\n              (Nodes.Table (N + 3).Field11'Unrestricted_Access)).Flag183 := Val;\n       end Set_Flag183;\n \n+      procedure Set_Flag184 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag184 := Val;\n+      end Set_Flag184;\n+\n+      procedure Set_Flag185 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag185 := Val;\n+      end Set_Flag185;\n+\n+      procedure Set_Flag186 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag186 := Val;\n+      end Set_Flag186;\n+\n+      procedure Set_Flag187 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag187 := Val;\n+      end Set_Flag187;\n+\n+      procedure Set_Flag188 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag188 := Val;\n+      end Set_Flag188;\n+\n+      procedure Set_Flag189 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag189 := Val;\n+      end Set_Flag189;\n+\n+      procedure Set_Flag190 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag190 := Val;\n+      end Set_Flag190;\n+\n+      procedure Set_Flag191 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag191 := Val;\n+      end Set_Flag191;\n+\n+      procedure Set_Flag192 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag192 := Val;\n+      end Set_Flag192;\n+\n+      procedure Set_Flag193 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag193 := Val;\n+      end Set_Flag193;\n+\n+      procedure Set_Flag194 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag194 := Val;\n+      end Set_Flag194;\n+\n+      procedure Set_Flag195 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag195 := Val;\n+      end Set_Flag195;\n+\n+      procedure Set_Flag196 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag196 := Val;\n+      end Set_Flag196;\n+\n+      procedure Set_Flag197 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag197 := Val;\n+      end Set_Flag197;\n+\n+      procedure Set_Flag198 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag198 := Val;\n+      end Set_Flag198;\n+\n+      procedure Set_Flag199 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag199 := Val;\n+      end Set_Flag199;\n+\n+      procedure Set_Flag200 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag200 := Val;\n+      end Set_Flag200;\n+\n+      procedure Set_Flag201 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag201 := Val;\n+      end Set_Flag201;\n+\n+      procedure Set_Flag202 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag202 := Val;\n+      end Set_Flag202;\n+\n+      procedure Set_Flag203 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag203 := Val;\n+      end Set_Flag203;\n+\n+      procedure Set_Flag204 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag204 := Val;\n+      end Set_Flag204;\n+\n+      procedure Set_Flag205 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag205 := Val;\n+      end Set_Flag205;\n+\n+      procedure Set_Flag206 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag206 := Val;\n+      end Set_Flag206;\n+\n+      procedure Set_Flag207 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag207 := Val;\n+      end Set_Flag207;\n+\n+      procedure Set_Flag208 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag208 := Val;\n+      end Set_Flag208;\n+\n+      procedure Set_Flag209 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag209 := Val;\n+      end Set_Flag209;\n+\n+      procedure Set_Flag210 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag210 := Val;\n+      end Set_Flag210;\n+\n+      procedure Set_Flag211 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag211 := Val;\n+      end Set_Flag211;\n+\n+      procedure Set_Flag212 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag212 := Val;\n+      end Set_Flag212;\n+\n+      procedure Set_Flag213 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag213 := Val;\n+      end Set_Flag213;\n+\n+      procedure Set_Flag214 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag214 := Val;\n+      end Set_Flag214;\n+\n+      procedure Set_Flag215 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Word4_Ptr\n+           (Union_Id_Ptr'\n+             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag215 := Val;\n+      end Set_Flag215;\n+\n       procedure Set_Node1_With_Parent (N : Node_Id; Val : Node_Id) is\n       begin\n          pragma Assert (N in Nodes.First .. Nodes.Last);"}, {"sha": "aeee0f5ec6eb986e037dfa7c50580cec7693eb16", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 263, "deletions": 11, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -176,9 +176,9 @@ package Atree is\n    --                    entity, it is of type Entity_Kind which is defined\n    --                    in package Einfo.\n \n-   --   Flag19           133 additional flags\n+   --   Flag19           197 additional flags\n    --   ...\n-   --   Flag151\n+   --   Flag215\n \n    --   Convention       Entity convention (Convention_Id value)\n \n@@ -188,8 +188,8 @@ package Atree is\n    --   Elist6           Synonym for Field6 typed as Elist_Id\n    --   Uint6            Synonym for Field6 typed as Uint (Empty = Uint_0)\n \n-   --   Similar definitions for Field7 to Field23 (and Node7-Node23,\n-   --   Elist7-Elist23, Uint7-Uint23, Ureal7-Ureal23). Note that not all\n+   --   Similar definitions for Field7 to Field27 (and Node7-Node27,\n+   --   Elist7-Elist27, Uint7-Uint27, Ureal7-Ureal27). Note that not all\n    --   these functions are defined, only the ones that are actually used.\n \n    type Paren_Count_Type is mod 4;\n@@ -292,7 +292,7 @@ package Atree is\n    -------------------------------------\n \n    --  A subpackage Atree.Unchecked_Access provides routines for reading and\n-   --  writing the fields defined above (Field1-17, Node1-17, Flag1-88 etc).\n+   --  writing the fields defined above (Field1-27, Node1-27, Flag1-215 etc).\n    --  These unchecked access routines can be used for untyped traversals.\n    --  In addition they are used in the implementations of the Sinfo and\n    --  Einfo packages. These packages both provide logical synonyms for\n@@ -323,12 +323,13 @@ package Atree is\n    --  Called before the backend is invoked to lock the nodes table\n \n    procedure Tree_Read;\n-   --  Initializes internal tables from current tree file using Tree_Read.\n-   --  Note that Initialize should not be called if Tree_Read is used.\n-   --  Tree_Read includes all necessary initialization.\n+   --  Initializes internal tables from current tree file using the relevant\n+   --  Table.Tree_Read routines. Note that Initialize should not be called if\n+   --  Tree_Read is used. Tree_Read includes all necessary initialization.\n \n    procedure Tree_Write;\n-   --  Writes out internal tables to current tree file using Tree_Write\n+   --  Writes out internal tables to current tree file using the relevant\n+   --  Table.Tree_Write routines.\n \n    function New_Node\n      (New_Node_Kind : Node_Kind;\n@@ -837,6 +838,18 @@ package Atree is\n       function Field23 (N : Node_Id) return Union_Id;\n       pragma Inline (Field23);\n \n+      function Field24 (N : Node_Id) return Union_Id;\n+      pragma Inline (Field24);\n+\n+      function Field25 (N : Node_Id) return Union_Id;\n+      pragma Inline (Field25);\n+\n+      function Field26 (N : Node_Id) return Union_Id;\n+      pragma Inline (Field26);\n+\n+      function Field27 (N : Node_Id) return Union_Id;\n+      pragma Inline (Field27);\n+\n       function Node1 (N : Node_Id) return Node_Id;\n       pragma Inline (Node1);\n \n@@ -906,6 +919,18 @@ package Atree is\n       function Node23 (N : Node_Id) return Node_Id;\n       pragma Inline (Node23);\n \n+      function Node24 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node24);\n+\n+      function Node25 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node25);\n+\n+      function Node26 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node26);\n+\n+      function Node27 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node27);\n+\n       function List1 (N : Node_Id) return List_Id;\n       pragma Inline (List1);\n \n@@ -1565,6 +1590,102 @@ package Atree is\n       function Flag183 (N : Node_Id) return Boolean;\n       pragma Inline (Flag183);\n \n+      function Flag184 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag184);\n+\n+      function Flag185 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag185);\n+\n+      function Flag186 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag186);\n+\n+      function Flag187 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag187);\n+\n+      function Flag188 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag188);\n+\n+      function Flag189 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag189);\n+\n+      function Flag190 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag190);\n+\n+      function Flag191 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag191);\n+\n+      function Flag192 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag192);\n+\n+      function Flag193 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag193);\n+\n+      function Flag194 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag194);\n+\n+      function Flag195 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag195);\n+\n+      function Flag196 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag196);\n+\n+      function Flag197 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag197);\n+\n+      function Flag198 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag198);\n+\n+      function Flag199 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag199);\n+\n+      function Flag200 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag200);\n+\n+      function Flag201 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag201);\n+\n+      function Flag202 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag202);\n+\n+      function Flag203 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag203);\n+\n+      function Flag204 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag204);\n+\n+      function Flag205 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag205);\n+\n+      function Flag206 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag206);\n+\n+      function Flag207 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag207);\n+\n+      function Flag208 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag208);\n+\n+      function Flag209 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag209);\n+\n+      function Flag210 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag210);\n+\n+      function Flag211 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag211);\n+\n+      function Flag212 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag212);\n+\n+      function Flag213 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag213);\n+\n+      function Flag214 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag214);\n+\n+      function Flag215 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag215);\n+\n       --  Procedures to set value of indicated field\n \n       procedure Set_Nkind (N : Node_Id; Val : Node_Kind);\n@@ -1639,6 +1760,18 @@ package Atree is\n       procedure Set_Field23 (N : Node_Id; Val : Union_Id);\n       pragma Inline (Set_Field23);\n \n+      procedure Set_Field24 (N : Node_Id; Val : Union_Id);\n+      pragma Inline (Set_Field24);\n+\n+      procedure Set_Field25 (N : Node_Id; Val : Union_Id);\n+      pragma Inline (Set_Field25);\n+\n+      procedure Set_Field26 (N : Node_Id; Val : Union_Id);\n+      pragma Inline (Set_Field26);\n+\n+      procedure Set_Field27 (N : Node_Id; Val : Union_Id);\n+      pragma Inline (Set_Field27);\n+\n       procedure Set_Node1 (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node1);\n \n@@ -1708,6 +1841,18 @@ package Atree is\n       procedure Set_Node23 (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node23);\n \n+      procedure Set_Node24 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node24);\n+\n+      procedure Set_Node25 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node25);\n+\n+      procedure Set_Node26 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node26);\n+\n+      procedure Set_Node27 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node27);\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id);\n       pragma Inline (Set_List1);\n \n@@ -2362,6 +2507,103 @@ package Atree is\n       procedure Set_Flag183 (N : Node_Id; Val : Boolean);\n       pragma Inline (Set_Flag183);\n \n+      procedure Set_Flag184 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag184);\n+\n+      procedure Set_Flag185 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag185);\n+\n+      procedure Set_Flag186 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag186);\n+\n+      procedure Set_Flag187 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag187);\n+\n+      procedure Set_Flag188 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag188);\n+\n+      procedure Set_Flag189 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag189);\n+\n+      procedure Set_Flag190 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag190);\n+\n+      procedure Set_Flag191 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag191);\n+\n+      procedure Set_Flag192 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag192);\n+\n+      procedure Set_Flag193 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag193);\n+\n+      procedure Set_Flag194 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag194);\n+\n+      procedure Set_Flag195 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag195);\n+\n+      procedure Set_Flag196 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag196);\n+\n+      procedure Set_Flag197 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag197);\n+\n+      procedure Set_Flag198 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag198);\n+\n+      procedure Set_Flag199 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag199);\n+\n+      procedure Set_Flag200 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag200);\n+\n+      procedure Set_Flag201 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag201);\n+\n+      procedure Set_Flag202 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag202);\n+\n+      procedure Set_Flag203 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag203);\n+\n+      procedure Set_Flag204 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag204);\n+\n+      procedure Set_Flag205 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag205);\n+\n+      procedure Set_Flag206 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag206);\n+\n+      procedure Set_Flag207 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag207);\n+\n+      procedure Set_Flag208 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag208);\n+\n+      procedure Set_Flag209 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag209);\n+\n+      procedure Set_Flag210 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag210);\n+\n+      procedure Set_Flag211 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag211);\n+\n+      procedure Set_Flag212 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag212);\n+\n+      procedure Set_Flag213 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag213);\n+\n+      procedure Set_Flag214 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag214);\n+\n+      procedure Set_Flag215 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag215);\n+\n+\n       --  The following versions of Set_Noden also set the parent\n       --  pointer of the referenced node if it is non_Empty\n \n@@ -2479,7 +2721,8 @@ package Atree is\n          --  The eighteen flags for a normal node\n \n          --  The above fields are used as follows in components 2-4 of\n-         --  an extended node entry.\n+         --  an extended node entry. These fields are not currently\n+         --  used in component 5 (where we still have lots of room!)\n \n          --    In_List            used as  Flag19, Flag40, Flag129\n          --    Unused_1           used as  Flag20, Flag41, Flag130\n@@ -2567,9 +2810,18 @@ package Atree is\n             --  as follows:\n \n             --    Field6-10      Holds Field19-Field23\n-            --    Field11        Holds Flag152-Flag167 (16 bits unused)\n+            --    Field11        Holds Flag152-Flag183\n             --    Field12        Holds Flag97-Flag128\n \n+            --  In the fifth component, the extension format as described\n+            --  above is used to hold additional general fields and flags\n+            --  as follows:\n+\n+            --    Field6-9       Holds Field24-Field27\n+            --    Field10        currently unused, reserved for expansion\n+            --    Field11        Holds Flag184-Flag215\n+            --    Field12        currently unused, reserved for expansion\n+\n          end case;\n       end record;\n "}, {"sha": "39ab9634e754546dc79f4326671268f6feef15a7", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -209,6 +209,11 @@ package body Einfo is\n    --    Privals_Chain                   Elist23\n    --    Protected_Operation             Node23\n \n+   --    (unused)                        Node24\n+   --    (unused)                        Node25\n+   --    (unused)                        Node26\n+   --    (unused)                        Node27\n+\n    ---------------------------------------------\n    -- Usage of Flags in Defining Entity Nodes --\n    ---------------------------------------------\n@@ -421,6 +426,38 @@ package body Einfo is\n    --    Must_Be_On_Byte_Boundary       Flag183\n \n    --    (unused)                       Flag153\n+   --    (unused)                       Flag184\n+   --    (unused)                       Flag185\n+   --    (unused)                       Flag186\n+   --    (unused)                       Flag187\n+   --    (unused)                       Flag188\n+   --    (unused)                       Flag189\n+   --    (unused)                       Flag190\n+   --    (unused)                       Flag191\n+   --    (unused)                       Flag192\n+   --    (unused)                       Flag193\n+   --    (unused)                       Flag194\n+   --    (unused)                       Flag195\n+   --    (unused)                       Flag196\n+   --    (unused)                       Flag197\n+   --    (unused)                       Flag198\n+   --    (unused)                       Flag199\n+   --    (unused)                       Flag200\n+   --    (unused)                       Flag201\n+   --    (unused)                       Flag202\n+   --    (unused)                       Flag203\n+   --    (unused)                       Flag204\n+   --    (unused)                       Flag205\n+   --    (unused)                       Flag206\n+   --    (unused)                       Flag207\n+   --    (unused)                       Flag208\n+   --    (unused)                       Flag209\n+   --    (unused)                       Flag210\n+   --    (unused)                       Flag211\n+   --    (unused)                       Flag212\n+   --    (unused)                       Flag213\n+   --    (unused)                       Flag214\n+   --    (unused)                       Flag215\n \n    --------------------------------\n    -- Attribute Access Functions --\n@@ -6078,6 +6115,10 @@ package body Einfo is\n       procedure W (Flag_Name : String; Flag : Boolean);\n       --  Write out given flag if it is set\n \n+      -------\n+      -- W --\n+      -------\n+\n       procedure W (Flag_Name : String; Flag : Boolean) is\n       begin\n          if Flag then\n@@ -7159,6 +7200,54 @@ package body Einfo is\n       end case;\n    end Write_Field23_Name;\n \n+   ------------------------\n+   -- Write_Field24_Name --\n+   ------------------------\n+\n+   procedure Write_Field24_Name (Id : Entity_Id) is\n+   begin\n+      case Ekind (Id) is\n+         when others                                     =>\n+            Write_Str (\"Field24??\");\n+      end case;\n+   end Write_Field24_Name;\n+\n+   ------------------------\n+   -- Write_Field25_Name --\n+   ------------------------\n+\n+   procedure Write_Field25_Name (Id : Entity_Id) is\n+   begin\n+      case Ekind (Id) is\n+         when others                                     =>\n+            Write_Str (\"Field25??\");\n+      end case;\n+   end Write_Field25_Name;\n+\n+   ------------------------\n+   -- Write_Field26_Name --\n+   ------------------------\n+\n+   procedure Write_Field26_Name (Id : Entity_Id) is\n+   begin\n+      case Ekind (Id) is\n+         when others                                     =>\n+            Write_Str (\"Field26??\");\n+      end case;\n+   end Write_Field26_Name;\n+\n+   ------------------------\n+   -- Write_Field27_Name --\n+   ------------------------\n+\n+   procedure Write_Field27_Name (Id : Entity_Id) is\n+   begin\n+      case Ekind (Id) is\n+         when others                                     =>\n+            Write_Str (\"Field27??\");\n+      end case;\n+   end Write_Field27_Name;\n+\n    -------------------------\n    -- Iterator Procedures --\n    -------------------------"}, {"sha": "c61ce663a28c57eb095538f88150c1b50f49ce72", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -5960,6 +5960,10 @@ package Einfo is\n    procedure Write_Field21_Name (Id : Entity_Id);\n    procedure Write_Field22_Name (Id : Entity_Id);\n    procedure Write_Field23_Name (Id : Entity_Id);\n+   procedure Write_Field24_Name (Id : Entity_Id);\n+   procedure Write_Field25_Name (Id : Entity_Id);\n+   procedure Write_Field26_Name (Id : Entity_Id);\n+   procedure Write_Field27_Name (Id : Entity_Id);\n    --  These routines are used to output a nice symbolic name for the given\n    --  field, depending on the Ekind. No blanks or end of lines are output,\n    --  just the characters of the field name."}, {"sha": "2c52b5c98cc3804f511e81b295b1325bc8b1caa4", "filename": "gcc/ada/treepr.adb", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Ftreepr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Ftreepr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftreepr.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2002 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -539,8 +539,39 @@ package body Treepr is\n          Print_Eol;\n       end if;\n \n-      Write_Entity_Flags (Ent, Prefix);\n+      if Field_Present (Field24 (Ent)) then\n+         Print_Str (Prefix);\n+         Write_Field24_Name (Ent);\n+         Write_Str (\" = \");\n+         Print_Field (Field24 (Ent));\n+         Print_Eol;\n+      end if;\n \n+      if Field_Present (Field25 (Ent)) then\n+         Print_Str (Prefix);\n+         Write_Field25_Name (Ent);\n+         Write_Str (\" = \");\n+         Print_Field (Field25 (Ent));\n+         Print_Eol;\n+      end if;\n+\n+      if Field_Present (Field26 (Ent)) then\n+         Print_Str (Prefix);\n+         Write_Field26_Name (Ent);\n+         Write_Str (\" = \");\n+         Print_Field (Field26 (Ent));\n+         Print_Eol;\n+      end if;\n+\n+      if Field_Present (Field27 (Ent)) then\n+         Print_Str (Prefix);\n+         Write_Field27_Name (Ent);\n+         Write_Str (\" = \");\n+         Print_Field (Field27 (Ent));\n+         Print_Eol;\n+      end if;\n+\n+      Write_Entity_Flags (Ent, Prefix);\n    end Print_Entity_Info;\n \n    ---------------"}]}