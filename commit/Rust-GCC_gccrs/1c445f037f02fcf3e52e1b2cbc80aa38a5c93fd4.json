{"sha": "1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0NDVmMDM3ZjAyZmNmM2U1MmUxYjJjYmM4MGFhMzhhNWM5M2ZkNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2007-08-28T13:51:20Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-08-28T13:51:20Z"}, "message": "* gcc/config/m68k/linux.h\n\t(M68K_HONOR_TARGET_STRICT_ALIGNMENT): Redefine as 0.\n\t* config/m68k/m68k.c (TARGET_RETURN_IN_MEMORY): New.\n\t(m68k_return_in_memory): New.\n\t* gcc/config/m68k/m68k.h (M68K_HONOR_TARGET_STRICT_ALIGNMENT):\n\tNew.\n\nCo-Authored-By: Kazu Hirata <kazu@codesourcery.com>\n\nFrom-SVN: r127858", "tree": {"sha": "72aca8403d903709427f44647431177f499ac55c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72aca8403d903709427f44647431177f499ac55c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/comments", "author": null, "committer": null, "parents": [{"sha": "7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f97f938a70df00a44ad2cadc2bc5381e7ea27fa"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "fa17fc020ebec0a4d0f5f8c73dd24c2bab6c23db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "patch": "@@ -1,3 +1,13 @@\n+2007-08-28  Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* gcc/config/m68k/linux.h\n+\t(M68K_HONOR_TARGET_STRICT_ALIGNMENT): Redefine as 0.\n+\t* config/m68k/m68k.c (TARGET_RETURN_IN_MEMORY): New.\n+\t(m68k_return_in_memory): New.\n+\t* gcc/config/m68k/m68k.h (M68K_HONOR_TARGET_STRICT_ALIGNMENT):\n+\tNew.\n+\n 2007-08-28  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32661"}, {"sha": "cdd510b2988de77beeb81ab77a33d7108032ad82", "filename": "gcc/config/m68k/linux.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Flinux.h?ref=1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "patch": "@@ -31,6 +31,8 @@ along with GCC; see the file COPYING3.  If not see\n \n #undef STRICT_ALIGNMENT\n #define STRICT_ALIGNMENT 0\n+#undef M68K_HONOR_TARGET_STRICT_ALIGNMENT\n+#define M68K_HONOR_TARGET_STRICT_ALIGNMENT 0\n \n /* Here are four prefixes that are used by asm_fprintf to\n    facilitate customization for alternate assembler syntaxes."}, {"sha": "2b06b6c01d9919fa3846506fe73a44378e2d1129", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "patch": "@@ -134,6 +134,9 @@ static void m68k_compute_frame_layout (void);\n static bool m68k_save_reg (unsigned int regno, bool interrupt_handler);\n static bool m68k_ok_for_sibcall_p (tree, tree);\n static bool m68k_rtx_costs (rtx, int, int, int *);\n+#if M68K_HONOR_TARGET_STRICT_ALIGNMENT\n+static bool m68k_return_in_memory (tree, tree);\n+#endif\n \f\n \n /* Specify the identification number of the library being built */\n@@ -205,6 +208,11 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL m68k_ok_for_sibcall_p\n \n+#if M68K_HONOR_TARGET_STRICT_ALIGNMENT\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY m68k_return_in_memory\n+#endif\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n@@ -4386,3 +4394,25 @@ m68k_function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED)\n   else\n     return gen_rtx_REG (mode, D0_REG);\n }\n+\n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+#if M68K_HONOR_TARGET_STRICT_ALIGNMENT\n+static bool\n+m68k_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  enum machine_mode mode = TYPE_MODE (type);\n+\n+  if (mode == BLKmode)\n+    return true;\n+\n+  /* If TYPE's known alignment is less than the alignment of MODE that\n+     would contain the structure, then return in memory.  We need to\n+     do so to maintain the compatibility between code compiled with\n+     -mstrict-align and that compiled with -mno-strict-align.  */\n+  if (AGGREGATE_TYPE_P (type)\n+      && TYPE_ALIGN (type) < GET_MODE_ALIGNMENT (mode))\n+    return true;\n+\n+  return false;\n+}\n+#endif"}, {"sha": "a5f6eedf07057a8c6400df6d0bf2e8231941bce1", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=1c445f037f02fcf3e52e1b2cbc80aa38a5c93fd4", "patch": "@@ -310,6 +310,7 @@ along with GCC; see the file COPYING3.  If not see\n #define BIGGEST_ALIGNMENT (TARGET_ALIGN_INT ? 32 : 16)\n \n #define STRICT_ALIGNMENT (TARGET_STRICT_ALIGNMENT)\n+#define M68K_HONOR_TARGET_STRICT_ALIGNMENT 1\n \n #define INT_TYPE_SIZE (TARGET_SHORT ? 16 : 32)\n "}]}