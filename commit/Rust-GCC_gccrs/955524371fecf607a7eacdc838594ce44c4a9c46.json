{"sha": "955524371fecf607a7eacdc838594ce44c4a9c46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU1NTI0MzcxZmVjZjYwN2E3ZWFjZGM4Mzg1OTRjZTQ0YzRhOWM0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-10T17:58:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-10T17:58:46Z"}, "message": "re PR c++/48930 ([C++0x] Invalid implicitly declared default c'tor)\n\n\tPR c++/48930\n\t* class.c (type_build_ctor_call): New.\n\t* cp-tree.h: Declare it.\n\t* decl.c (check_initializer): Use it instead of\n\tTYPE_NEEDS_CONSTRUCTING.\n\t* init.c (build_value_init, build_value_init_noctor): Likewise.\n\t(perform_member_init, expand_aggr_init_1, build_new_1): Likewise.\n\t(build_vec_init): Likewise.\n\t* typeck2.c (process_init_constructor_array): Likewise.\n\t(process_init_constructor_record): Likewise.\n\nFrom-SVN: r173628", "tree": {"sha": "d6b97fffd003379dcbb4cc87d3424a063bd83702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b97fffd003379dcbb4cc87d3424a063bd83702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/955524371fecf607a7eacdc838594ce44c4a9c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955524371fecf607a7eacdc838594ce44c4a9c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/955524371fecf607a7eacdc838594ce44c4a9c46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/955524371fecf607a7eacdc838594ce44c4a9c46/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4359e45b9d1bdb218cac9d5bd311fedf1568d32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4359e45b9d1bdb218cac9d5bd311fedf1568d32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4359e45b9d1bdb218cac9d5bd311fedf1568d32"}], "stats": {"total": 86, "additions": 65, "deletions": 21}, "files": [{"sha": "580a3fc01cbae2d09db898cdd40b7d5706ba9f74", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -1,5 +1,16 @@\n 2011-05-10  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48930\n+\t* class.c (type_build_ctor_call): New.\n+\t* cp-tree.h: Declare it.\n+\t* decl.c (check_initializer): Use it instead of\n+\tTYPE_NEEDS_CONSTRUCTING.\n+\t* init.c (build_value_init, build_value_init_noctor): Likewise.\n+\t(perform_member_init, expand_aggr_init_1, build_new_1): Likewise.\n+\t(build_vec_init): Likewise.\n+\t* typeck2.c (process_init_constructor_array): Likewise.\n+\t(process_init_constructor_record): Likewise.\n+\n \tPR c++/48736\n \t* pt.c (tsubst_copy_and_build): Handle substitution of a pack\n \texpansion producing another expansion."}, {"sha": "293dd1c0bd511446c44461cb69798b75d3b87824", "filename": "gcc/cp/class.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -4466,6 +4466,27 @@ type_has_move_assign (tree t)\n   return false;\n }\n \n+/* Nonzero if we need to build up a constructor call when initializing an\n+   object of this class, either because it has a user-provided constructor\n+   or because it doesn't have a default constructor (so we need to give an\n+   error if no initializer is provided).  Use TYPE_NEEDS_CONSTRUCTING when\n+   what you care about is whether or not an object can be produced by a\n+   constructor (e.g. so we don't set TREE_READONLY on const variables of\n+   such type); use this function when what you care about is whether or not\n+   to try to call a constructor to create an object.  The latter case is\n+   the former plus some cases of constructors that cannot be called.  */\n+\n+bool\n+type_build_ctor_call (tree t)\n+{\n+  tree inner;\n+  if (TYPE_NEEDS_CONSTRUCTING (t))\n+    return true;\n+  inner = strip_array_types (t);\n+  return (CLASS_TYPE_P (inner) && !TYPE_HAS_DEFAULT_CONSTRUCTOR (inner)\n+\t  && !ANON_AGGR_TYPE_P (inner));\n+}\n+\n /* Remove all zero-width bit-fields from T.  */\n \n static void"}, {"sha": "1705232b9c8451f94942ce94b4fa4a8e6ca9f82e", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -4787,6 +4787,7 @@ extern bool type_has_constexpr_default_constructor (tree);\n extern bool type_has_virtual_destructor\t\t(tree);\n extern bool type_has_move_constructor\t\t(tree);\n extern bool type_has_move_assign\t\t(tree);\n+extern bool type_build_ctor_call\t\t(tree);\n extern void defaulted_late_check\t\t(tree);\n extern bool defaultable_fn_check\t\t(tree);\n extern void fixup_type_variants\t\t\t(tree);"}, {"sha": "eff23608b6afba8ebb9f4b3bcedd0b1dc30f3a02", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -5410,7 +5410,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n     ;\n   else if (TREE_CODE (type) == REFERENCE_TYPE)\n     init = grok_reference_init (decl, type, init, cleanup);\n-  else if (init || TYPE_NEEDS_CONSTRUCTING (type))\n+  else if (init || type_build_ctor_call (type))\n     {\n       if (!init)\n \tcheck_for_uninitialized_const_var (decl);\n@@ -5445,7 +5445,7 @@ check_initializer (tree decl, tree init, int flags, tree *cleanup)\n       if (type == error_mark_node)\n \treturn NULL_TREE;\n \n-      if (TYPE_NEEDS_CONSTRUCTING (type)\n+      if (type_build_ctor_call (type)\n \t  || (CLASS_TYPE_P (type)\n \t      && !(init && BRACE_ENCLOSED_INITIALIZER_P (init))))\n \t{"}, {"sha": "7d7adbe04050f310c74790a52ddf50803f868e6b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -341,7 +341,7 @@ build_value_init (tree type, tsubst_flags_t complain)\n \t\t\t\t      NULL, type, LOOKUP_NORMAL,\n \t\t\t\t      complain),\n \t   complain);\n-      else if (TYPE_NEEDS_CONSTRUCTING (type))\n+      else if (type_build_ctor_call (type))\n \t{\n \t  /* This is a class that needs constructing, but doesn't have\n \t     a user-provided constructor.  So we need to zero-initialize\n@@ -371,7 +371,7 @@ build_value_init_noctor (tree type, tsubst_flags_t complain)\n      SFINAE-enabled.  */\n   if (CLASS_TYPE_P (type))\n     {\n-      gcc_assert (!TYPE_NEEDS_CONSTRUCTING (type));\n+      gcc_assert (!type_build_ctor_call (type));\n \t\n       if (TREE_CODE (type) != UNION_TYPE)\n \t{\n@@ -530,7 +530,7 @@ perform_member_init (tree member, tree init)\n \t  finish_expr_stmt (init);\n \t}\n     }\n-  else if (TYPE_NEEDS_CONSTRUCTING (type))\n+  else if (type_build_ctor_call (type))\n     {\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \t{\n@@ -1568,7 +1568,7 @@ expand_aggr_init_1 (tree binfo, tree true_exp, tree exp, tree init, int flags,\n \t/* Fall through.  */;\n       /* If there isn't, but we still need to call the constructor,\n \t zero out the object first.  */\n-      else if (TYPE_NEEDS_CONSTRUCTING (type))\n+      else if (type_build_ctor_call (type))\n \t{\n \t  init = build_zero_init (type, NULL_TREE, /*static_storage_p=*/false);\n \t  init = build2 (INIT_EXPR, type, exp, init);\n@@ -2046,7 +2046,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n   if (abstract_virtuals_error_sfinae (NULL_TREE, elt_type, complain))\n     return error_mark_node;\n \n-  is_initialized = (TYPE_NEEDS_CONSTRUCTING (elt_type) || *init != NULL);\n+  is_initialized = (type_build_ctor_call (elt_type) || *init != NULL);\n \n   if (*init == NULL)\n     {\n@@ -2351,7 +2351,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t     rebuild it at instantiation time, so just build up a single\n \t     constructor call to get any appropriate diagnostics.  */\n \t  init_expr = cp_build_indirect_ref (data_addr, RO_NULL, complain);\n-\t  if (TYPE_NEEDS_CONSTRUCTING (elt_type))\n+\t  if (type_build_ctor_call (elt_type))\n \t    init_expr = build_special_member_call (init_expr,\n \t\t\t\t\t\t   complete_ctor_identifier,\n \t\t\t\t\t\t   init, elt_type,\n@@ -2408,7 +2408,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t{\n \t  init_expr = cp_build_indirect_ref (data_addr, RO_NULL, complain);\n \n-\t  if (TYPE_NEEDS_CONSTRUCTING (type) && !explicit_value_init_p)\n+\t  if (type_build_ctor_call (type) && !explicit_value_init_p)\n \t    {\n \t      init_expr = build_special_member_call (init_expr,\n \t\t\t\t\t\t     complete_ctor_identifier,\n@@ -3164,8 +3164,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n     {\n       if (init)\n \t/* OK, we set base2 above.  */;\n-      else if (TYPE_LANG_SPECIFIC (type)\n-\t       && TYPE_NEEDS_CONSTRUCTING (type)\n+      else if (CLASS_TYPE_P (type)\n \t       && ! TYPE_HAS_DEFAULT_CONSTRUCTOR (type))\n \t{\n           if (complain & tf_error)\n@@ -3181,7 +3180,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n      We do need to keep going if we're copying an array.  */\n \n   if (from_array\n-      || ((TYPE_NEEDS_CONSTRUCTING (type) || explicit_value_init_p)\n+      || ((type_build_ctor_call (type) || explicit_value_init_p)\n \t  && ! (host_integerp (maxindex, 0)\n \t\t&& (num_initialized_elts\n \t\t    == tree_low_cst (maxindex, 0) + 1))))\n@@ -3221,7 +3220,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t  if (from_array == 2)\n \t    elt_init = cp_build_modify_expr (to, NOP_EXPR, from, \n \t\t\t\t\t     complain);\n-\t  else if (TYPE_NEEDS_CONSTRUCTING (type))\n+\t  else if (type_build_ctor_call (type))\n \t    elt_init = build_aggr_init (to, from, 0, complain);\n \t  else if (from)\n \t    elt_init = cp_build_modify_expr (to, NOP_EXPR, from,\n@@ -3247,7 +3246,7 @@ build_vec_init (tree base, tree maxindex, tree init,\n \t}\n       else\n \t{\n-\t  gcc_assert (TYPE_NEEDS_CONSTRUCTING (type));\n+\t  gcc_assert (type_build_ctor_call (type));\n \t  elt_init = build_aggr_init (to, init, 0, complain);\n \t}\n "}, {"sha": "26b9816d54807a2df43e9cb977a9c1fd5b42cc1b", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -1048,7 +1048,7 @@ process_init_constructor_array (tree type, tree init,\n       {\n \ttree next;\n \n-\tif (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (type)))\n+\tif (type_build_ctor_call (TREE_TYPE (type)))\n \t  {\n \t    /* If this type needs constructors run for default-initialization,\n \t      we can't rely on the back end to do it for us, so build up\n@@ -1144,7 +1144,7 @@ process_init_constructor_record (tree type, tree init,\n \t\t\t\tLOOKUP_IMPLICIT, complain);\n \t  ++idx;\n \t}\n-      else if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (field)))\n+      else if (type_build_ctor_call (TREE_TYPE (field)))\n \t{\n \t  /* If this type needs constructors run for\n \t     default-initialization, we can't rely on the back end to do it"}, {"sha": "45739d01bfa18d14dca53691606d476289b9fb20", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -1,5 +1,8 @@\n 2011-05-10  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/defaulted25.C: New.\n+\t* g++.dg/template/crash7.C: Adjust.\n+\n \t* g++.dg/cpp0x/variadic108.C: New.\n \n 2011-05-10  Ville Voutilainen  <ville.voutilainen@gmail.com>"}, {"sha": "2a38fedb24875ddb7436881c578d48a2dc36bc7e", "filename": "gcc/testsuite/g++.dg/cpp0x/defaulted25.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdefaulted25.C?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/48930\n+// { dg-options -std=c++0x }\n+// { dg-prune-output \"note\" }\n+\n+struct A\n+{\n+  A(const A&) = default;\n+};\n+\n+A a;\t\t\t\t// { dg-error \"no match\" }"}, {"sha": "7fda9a9ba19657d596be89e98f529fdeaaa33d2d", "filename": "gcc/testsuite/g++.dg/template/crash7.C", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/955524371fecf607a7eacdc838594ce44c4a9c46/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash7.C?ref=955524371fecf607a7eacdc838594ce44c4a9c46", "patch": "@@ -5,11 +5,10 @@\n // PR c++/10108: ICE in tsubst_decl for error due to non-existence\n // nested type.\n \n-template <typename> struct A\n-{\t\t\t\t\t// { not-dg-error \"candidates\" }\n+template <typename> struct A\t// { dg-message \"A.void.::A.const A\" }\n+{\n     template <typename> A(typename A::X) {} // { dg-error \"no type\" }\n };\n \n-A<void> a;\t// { not-dg-error \"instantiated|no match\" }\n-// We currently don't give the \"no match\" error because we don't add the\n-// invalid constructor template to TYPE_METHODS.\n+A<void> a;\t// { dg-error \"instantiated|no match\" }\n+// { dg-prune-output \"note\" }"}]}