{"sha": "f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJlYzgzNmFhMWQ2ZTJlZDRmZTI4NmZmYTY2MTA1MDg4OGY2NTJkMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-03T08:30:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-08-03T10:56:34Z"}, "message": "mark match.pd ! not implemented on GENERIC\n\nThis makes us error when the ! operator modifier is encountered\nwhen not targeting GIMPLE.\n\n2020-08-03  Richard Biener  <rguenther@suse.de>\n\n\t* genmatch.c (parser::gimple): New.\n\t(parser::parser): Initialize gimple flag member.\n\t(parser::parse_expr): Error on ! operator modifier when\n\tnot targeting GIMPLE.\n\t(main): Pass down gimple flag to parser ctor.\n\n\t* doc/match-and-simplify.texi: Amend accordingly.", "tree": {"sha": "ce4297a0fb73ecf105ea9ebc714671719cdc7a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce4297a0fb73ecf105ea9ebc714671719cdc7a59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2ec836aa1d6e2ed4fe286ffa661050888f652d1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b1c2a4bd9fb555dccde5d67d6da64547064e0e6"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "8752bd2afe1dbe2efab2fff0f7e1142278f33d3f", "filename": "gcc/doc/match-and-simplify.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ec836aa1d6e2ed4fe286ffa661050888f652d1/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ec836aa1d6e2ed4fe286ffa661050888f652d1/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "patch": "@@ -374,7 +374,8 @@ for example\n \n which moves the outer @code{plus} operation to the inner arms\n of the @code{vec_cond} expression but only if the actual plus\n-operations both simplify.\n+operations both simplify.  Note this is currently only supported\n+for code generation targeting @code{GIMPLE}.\n \n As intermediate conversions are often optional there is a way to\n avoid the need to repeat patterns both with and without such"}, {"sha": "109dce2d4699030108c293f95944bccf83e78fac", "filename": "gcc/genmatch.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2ec836aa1d6e2ed4fe286ffa661050888f652d1/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2ec836aa1d6e2ed4fe286ffa661050888f652d1/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=f2ec836aa1d6e2ed4fe286ffa661050888f652d1", "patch": "@@ -3946,7 +3946,7 @@ write_header (FILE *f, const char *head)\n class parser\n {\n public:\n-  parser (cpp_reader *);\n+  parser (cpp_reader *, bool gimple);\n \n private:\n   const cpp_token *next ();\n@@ -3983,6 +3983,7 @@ class parser\n   void finish_match_operand (operand *);\n \n   cpp_reader *r;\n+  bool gimple;\n   vec<c_expr *> active_ifs;\n   vec<vec<user_id *> > active_fors;\n   hash_set<user_id *> *oper_lists_set;\n@@ -4249,6 +4250,9 @@ parser::parse_expr ()\n       && token->type == CPP_NOT\n       && !(token->flags & PREV_WHITE))\n     {\n+      if (!gimple)\n+\tfatal_at (token, \"forcing simplification to a leaf is not supported \"\n+\t\t  \"for GENERIC\");\n       eat_token (CPP_NOT);\n       e->force_leaf = true;\n     }\n@@ -5042,9 +5046,10 @@ parser::finish_match_operand (operand *op)\n \n /* Main entry of the parser.  Repeatedly parse outer control structures.  */\n \n-parser::parser (cpp_reader *r_)\n+parser::parser (cpp_reader *r_, bool gimple_)\n {\n   r = r_;\n+  gimple = gimple_;\n   active_ifs = vNULL;\n   active_fors = vNULL;\n   simplifiers = vNULL;\n@@ -5151,7 +5156,7 @@ main (int argc, char **argv)\n #include \"internal-fn.def\"\n \n   /* Parse ahead!  */\n-  parser p (r);\n+  parser p (r, gimple);\n \n   if (gimple)\n     write_header (stdout, \"gimple-match-head.c\");"}]}