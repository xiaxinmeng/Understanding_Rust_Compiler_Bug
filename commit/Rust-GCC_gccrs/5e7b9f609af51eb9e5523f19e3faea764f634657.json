{"sha": "5e7b9f609af51eb9e5523f19e3faea764f634657", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3YjlmNjA5YWY1MWViOWU1NTIzZjE5ZTNmYWVhNzY0ZjYzNDY1Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-25T14:56:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-25T14:56:50Z"}, "message": "cp-tree.h (tsubst_flags): Remove tf_no_access_control.\n\n\t* cp-tree.h (tsubst_flags): Remove tf_no_access_control.\n\t* call.c (standard_conversion): Don't set it.\n\t* class.c (resolve_address_of_overloaded_function): Don't check it.\n\t* decl.c (check_default_argument): Call\n\tperform_implicit_conversion_flags.\n\nFrom-SVN: r189850", "tree": {"sha": "e9ed253664d23e4d70e616c3bceeb87407e461bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9ed253664d23e4d70e616c3bceeb87407e461bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e7b9f609af51eb9e5523f19e3faea764f634657", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7b9f609af51eb9e5523f19e3faea764f634657", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e7b9f609af51eb9e5523f19e3faea764f634657", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e7b9f609af51eb9e5523f19e3faea764f634657/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25a92d2f912c6b5a486bd7625d7e363617e20627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a92d2f912c6b5a486bd7625d7e363617e20627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a92d2f912c6b5a486bd7625d7e363617e20627"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "e7b47111e264474f7971b8262969803c266bf098", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -1,5 +1,11 @@\n 2012-07-25  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (tsubst_flags): Remove tf_no_access_control.\n+\t* call.c (standard_conversion): Don't set it.\n+\t* class.c (resolve_address_of_overloaded_function): Don't check it.\n+\t* decl.c (check_default_argument): Call\n+\tperform_implicit_conversion_flags.\n+\n \t* pt.c (print_candidates_1): Use inform instead of error.\n \n 2012-07-24  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "5345f2bc9cc4e26457872309e736f87ce317520c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -1095,8 +1095,6 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       && expr && type_unknown_p (expr))\n     {\n       tsubst_flags_t tflags = tf_conv;\n-      if (!(flags & LOOKUP_PROTECT))\n-\ttflags |= tf_no_access_control;\n       expr = instantiate_type (to, expr, tflags);\n       if (expr == error_mark_node)\n \treturn NULL;"}, {"sha": "2f377c8fd589c27a0ee460c57f1e32c0e3f67ed7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -6878,9 +6878,8 @@ pop_lang_context (void)\n \n    If OVERLOAD is for one or more member functions, then ACCESS_PATH\n    is the base path used to reference those member functions.  If\n-   TF_NO_ACCESS_CONTROL is not set in FLAGS, and the address is\n-   resolved to a member function, access checks will be performed and\n-   errors issued if appropriate.  */\n+   the address is resolved to a member function, access checks will be\n+   performed and errors issued if appropriate.  */\n \n static tree\n resolve_address_of_overloaded_function (tree target_type,\n@@ -7143,12 +7142,10 @@ resolve_address_of_overloaded_function (tree target_type,\n   /* We could not check access to member functions when this\n      expression was originally created since we did not know at that\n      time to which function the expression referred.  */\n-  if (!(flags & tf_no_access_control) \n-      && DECL_FUNCTION_MEMBER_P (fn))\n+  if (DECL_FUNCTION_MEMBER_P (fn))\n     {\n       gcc_assert (access_path);\n-      perform_or_defer_access_check (access_path, fn, fn,\n-\t\t\t\t     tf_warning_or_error);\n+      perform_or_defer_access_check (access_path, fn, fn, flags);\n     }\n \n   if (TYPE_PTRFN_P (target_type) || TYPE_PTRMEMFUNC_P (target_type))"}, {"sha": "3c1a7bf255a1f9f9ecee5c7d8e018ec88714f67b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -4170,8 +4170,6 @@ enum tsubst_flags {\n \t\t\t\t    conversion might be permissible,\n \t\t\t\t    not actually performing the\n \t\t\t\t    conversion.  */\n-  tf_no_access_control = 1 << 7, /* Do not perform access checks, even\n-\t\t\t\t    when issuing other errors.   */\n   tf_partial = 1 << 8,\t\t /* Doing initial explicit argument\n \t\t\t\t    substitution in fn_type_unification.  */\n   /* Convenient substitution flags combinations.  */"}, {"sha": "c37787bf9290cb9439bea4d88594e795c092c722", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -10602,19 +10602,8 @@ check_default_argument (tree decl, tree arg)\n \n      A default argument expression is implicitly converted to the\n      parameter type.  */\n-  if (!TREE_TYPE (arg)\n-      || !can_convert_arg (decl_type, TREE_TYPE (arg), arg, LOOKUP_NORMAL,\n-\t\t\t   tf_warning_or_error))\n-    {\n-      if (decl)\n-\terror (\"default argument for %q#D has type %qT\",\n-\t       decl, TREE_TYPE (arg));\n-      else\n-\terror (\"default argument for parameter of type %qT has type %qT\",\n-\t       decl_type, TREE_TYPE (arg));\n-\n-      return error_mark_node;\n-    }\n+  perform_implicit_conversion_flags (decl_type, arg, tf_warning_or_error,\n+\t\t\t\t     LOOKUP_NORMAL);\n \n   if (warn_zero_as_null_pointer_constant\n       && c_inhibit_evaluation_warnings == 0"}, {"sha": "f75abd281a6b169f2fe775df3fc54484e1c5c3a1", "filename": "gcc/testsuite/g++.dg/lto/pr51992_0.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51992_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51992_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr51992_0.C?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -5,6 +5,7 @@ template<typename Enum>\n class QFlags\n {\n     int i;\n+public:\n     inline QFlags(Enum f) : i(f) {}\n };\n class QString {};"}, {"sha": "b750184c376c5f2b8b2e0fb072d30b97b4d594c0", "filename": "gcc/testsuite/g++.dg/overload/defarg6.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fdefarg6.C?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -0,0 +1,7 @@\n+class A\n+{\n+  int i;\n+  A(int i): i(i) {}\t\t// { dg-error \"private\" }\n+};\n+\n+void f (A = 1) { }\t\t// { dg-error \"context\" }"}, {"sha": "15848a13694a8e49277b1e03ecb34a247444bc00", "filename": "gcc/testsuite/g++.dg/template/defarg6.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdefarg6.C?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -8,7 +8,7 @@ enum X{ a, b, c };\n \n struct C\n {\n-  static void func (X &ref = a); // { dg-error \"default argument\" \"\" }\n+  static void func (X &ref = a); // { dg-error \"\" }\n };\n \n template <typename T>\n@@ -21,5 +21,7 @@ void Foo (X & obj)\n {\n   D<int>::func (obj);\n \n-  D<int>::func (); // { dg-error \"default argument\" \"\" }\n+  D<int>::func (); // { dg-error \"\" }\n }\n+\n+// { dg-prune-output \"passing argument\" }"}, {"sha": "fa31867654e44d0ae4f0431c72a4230595e9a23e", "filename": "gcc/testsuite/g++.old-deja/g++.martin/typedef2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Ftypedef2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Ftypedef2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Ftypedef2.C?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -3,5 +3,5 @@\n // Check implicit conversion from string constants into typedefs\n \n typedef char CHAR;\n-void f2(CHAR *s=\"\");\n+void f2(CHAR *s=\"\");\t\t// { dg-warning \"deprecated\" }\n "}, {"sha": "7ccc73d1fdb1911b601aae461d3e029706644783", "filename": "gcc/testsuite/g++.old-deja/g++.warn/impint.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e7b9f609af51eb9e5523f19e3faea764f634657/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.warn%2Fimpint.C?ref=5e7b9f609af51eb9e5523f19e3faea764f634657", "patch": "@@ -16,9 +16,9 @@ struct X\n void foo (int);\n void wibble (int);\n void wibble (int, int);\n-void punk (int = 3.5);\n+void punk (int = 3.5);\t\t// { dg-warning \"\" } double to int\n void rock ();\n-void rock (int, int = 3.5);\n+void rock (int, int = 3.5);\t// { dg-warning \"\" } double to int\n \n void fn ()\n {"}]}