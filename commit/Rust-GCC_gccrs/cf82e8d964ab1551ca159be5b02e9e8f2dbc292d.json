{"sha": "cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "node_id": "C_kwDOANBUbNoAKGNmODJlOGQ5NjRhYjE1NTFjYTE1OWJlNWIwMmU5ZThmMmRiYzI5MmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-02T00:16:32Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-11-02T00:16:32Z"}, "message": "Daily bump.", "tree": {"sha": "4015ae01f853cc3b4afe60034e0c8dcac024d35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4015ae01f853cc3b4afe60034e0c8dcac024d35e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/comments", "author": null, "committer": null, "parents": [{"sha": "6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f34b9e4f1eb7aa3398aaf135cbb24680eaad1b1"}], "stats": {"total": 333, "additions": 332, "deletions": 1}, "files": [{"sha": "3cdedff6270b1491a3cb4551256d95e109d7cd68", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,7 @@\n+2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* unicode/utf8-dump.py: New file.\n+\n 2021-10-20  H.J. Lu  <hjl.tools@gmail.com>\n \n \t* gcc-changelog/git_commit.py (ignored_prefixes): Add libffi/."}, {"sha": "11d799c1e2f66ad5222792342d39e1048e111337", "filename": "gcc/ChangeLog", "status": "modified", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,203 @@\n+2021-11-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* opt-functions.awk: Add new sanity checking.\n+\t* optc-gen.awk: Add new argument to integer_range_info.\n+\t* params.opt: Update 2 params which have negative IntegerRange.\n+\n+2021-11-01  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* gimplify.c (gimplify_decl_expr): Do not add call to\n+\t__builtin_clear_padding when a variable is a gimple register\n+\tor it might not have padding.\n+\t(gimplify_init_constructor): Likewise.\n+\n+2021-11-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/arm/aarch-common-protos.h (struct vector_cost_table): Add\n+\tmovi, dup and extract costing fields.\n+\t* config/aarch64/aarch64-cost-tables.h (qdf24xx_extra_costs,\n+\tthunderx_extra_costs, thunderx2t99_extra_costs,\n+\tthunderx3t110_extra_costs, tsv110_extra_costs, a64fx_extra_costs): Use\n+\tthem.\n+\t* config/arm/aarch-cost-tables.h (generic_extra_costs,\n+\tcortexa53_extra_costs, cortexa57_extra_costs, cortexa76_extra_costs,\n+\texynosm1_extra_costs, xgene1_extra_costs): Likewise\n+\t* config/aarch64/aarch64-simd.md (aarch64_simd_dup<mode>): Add r->w dup.\n+\t* config/aarch64/aarch64.c (aarch64_rtx_costs): Add extra costs.\n+\n+2021-11-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* cse.c (add_to_set): New.\n+\t(find_sets_in_insn): Register constants in sets.\n+\t(canonicalize_insn): Use auto_vec instead.\n+\t(cse_insn): Try materializing using vec_dup.\n+\t* rtl.h (simplify_context::simplify_gen_vec_select,\n+\tsimplify_gen_vec_select): New.\n+\t* simplify-rtx.c (simplify_context::simplify_gen_vec_select): New.\n+\n+2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* common.opt (fdiagnostics-escape-format=): New.\n+\t(diagnostics_escape_format): New enum.\n+\t(DIAGNOSTICS_ESCAPE_FORMAT_UNICODE): New enum value.\n+\t(DIAGNOSTICS_ESCAPE_FORMAT_BYTES): Likewise.\n+\t* diagnostic-format-json.cc (json_end_diagnostic): Add\n+\t\"escape-source\" attribute.\n+\t* diagnostic-show-locus.c\n+\t(exploc_with_display_col::exploc_with_display_col): Replace\n+\t\"tabstop\" param with a cpp_char_column_policy and add an \"aspect\"\n+\tparam.  Use these to compute m_display_col accordingly.\n+\t(struct char_display_policy): New struct.\n+\t(layout::m_policy): New field.\n+\t(layout::m_escape_on_output): New field.\n+\t(def_policy): New function.\n+\t(make_range): Update for changes to exploc_with_display_col ctor.\n+\t(default_print_decoded_ch): New.\n+\t(width_per_escaped_byte): New.\n+\t(escape_as_bytes_width): New.\n+\t(escape_as_bytes_print): New.\n+\t(escape_as_unicode_width): New.\n+\t(escape_as_unicode_print): New.\n+\t(make_policy): New.\n+\t(layout::layout): Initialize new fields.  Update m_exploc ctor\n+\tcall for above change to ctor.\n+\t(layout::maybe_add_location_range): Update for changes to\n+\texploc_with_display_col ctor.\n+\t(layout::calculate_x_offset_display): Update for change to\n+\tcpp_display_width.\n+\t(layout::print_source_line): Pass policy\n+\tto cpp_display_width_computation. Capture cpp_decoded_char when\n+\tcalling process_next_codepoint.  Move printing of source code to\n+\tm_policy.m_print_cb.\n+\t(line_label::line_label): Pass in policy rather than context.\n+\t(layout::print_any_labels): Update for change to line_label ctor.\n+\t(get_affected_range): Pass in policy rather than context, updating\n+\tcalls to location_compute_display_column accordingly.\n+\t(get_printed_columns): Likewise, also for cpp_display_width.\n+\t(correction::correction): Pass in policy rather than tabstop.\n+\t(correction::compute_display_cols): Pass m_policy rather than\n+\tm_tabstop to cpp_display_width.\n+\t(correction::m_tabstop): Replace with...\n+\t(correction::m_policy): ...this.\n+\t(line_corrections::line_corrections): Pass in policy rather than\n+\tcontext.\n+\t(line_corrections::m_context): Replace with...\n+\t(line_corrections::m_policy): ...this.\n+\t(line_corrections::add_hint): Update to use m_policy rather than\n+\tm_context.\n+\t(line_corrections::add_hint): Likewise.\n+\t(layout::print_trailing_fixits): Likewise.\n+\t(selftest::test_display_widths): New.\n+\t(selftest::test_layout_x_offset_display_utf8): Update to use\n+\tpolicy rather than tabstop.\n+\t(selftest::test_one_liner_labels_utf8): Add test of escaping\n+\tsource lines.\n+\t(selftest::test_diagnostic_show_locus_one_liner_utf8): Update to\n+\tuse policy rather than tabstop.\n+\t(selftest::test_overlapped_fixit_printing): Likewise.\n+\t(selftest::test_overlapped_fixit_printing_utf8): Likewise.\n+\t(selftest::test_overlapped_fixit_printing_2): Likewise.\n+\t(selftest::test_tab_expansion): Likewise.\n+\t(selftest::test_escaping_bytes_1): New.\n+\t(selftest::test_escaping_bytes_2): New.\n+\t(selftest::diagnostic_show_locus_c_tests): Call the new tests.\n+\t* diagnostic.c (diagnostic_initialize): Initialize\n+\tcontext->escape_format.\n+\t(convert_column_unit): Update to use default character width policy.\n+\t(selftest::test_diagnostic_get_location_text): Likewise.\n+\t* diagnostic.h (enum diagnostics_escape_format): New enum.\n+\t(diagnostic_context::escape_format): New field.\n+\t* doc/invoke.texi (-fdiagnostics-escape-format=): New option.\n+\t(-fdiagnostics-format=): Add \"escape-source\" attribute to examples\n+\tof JSON output, and document it.\n+\t* input.c (location_compute_display_column): Pass in \"policy\"\n+\trather than \"tabstop\", passing to\n+\tcpp_byte_column_to_display_column.\n+\t(selftest::test_cpp_utf8): Update to use cpp_char_column_policy.\n+\t* input.h (class cpp_char_column_policy): New forward decl.\n+\t(location_compute_display_column): Pass in \"policy\" rather than\n+\t\"tabstop\".\n+\t* opts.c (common_handle_option): Handle\n+\tOPT_fdiagnostics_escape_format_.\n+\t* selftest.c (temp_source_file::temp_source_file): New ctor\n+\toverload taking a size_t.\n+\t* selftest.h (temp_source_file::temp_source_file): Likewise.\n+\n+2021-11-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* dbgcnt.def: Add debug counter for back_thread[12] and\n+\tback_threadfull[12].\n+\t* passes.def: Pass \"first\" argument to each back threading pass.\n+\t* tree-ssa-threadbackward.c (back_threader::back_threader): Add\n+\tfirst argument.\n+\t(back_threader::debug_counter): New.\n+\t(back_threader::maybe_register_path): Call debug_counter.\n+\n+2021-11-01  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* tree-ssa-threadbackward.c (BT_NONE): New.\n+\t(BT_SPEED): New.\n+\t(BT_RESOLVE): New.\n+\t(back_threader::back_threader): Add flags.\n+\tMove loop initialization here.\n+\t(back_threader::~back_threader): New.\n+\t(back_threader::find_taken_edge_switch): Change solver and ranger\n+\tto pointers.\n+\t(back_threader::find_taken_edge_cond): Same.\n+\t(back_threader::find_paths_to_names): Same.\n+\t(back_threader::find_paths): Same.\n+\t(back_threader::dump): Same.\n+\t(try_thread_blocks): Merge into thread_blocks.\n+\t(back_threader::thread_blocks): New.\n+\t(do_early_thread_jumps): Merge into thread_blocks.\n+\t(do_thread_jumps): Merge into thread_blocks.\n+\t(back_threader::thread_through_all_blocks): Remove.\n+\n+2021-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/103003\n+\t* value-relation.cc (dom_oracle::register_relation): If the 2\n+\tssa names are the same, don't register any relation.\n+\n+2021-11-01  Dan Li  <ashimida@linux.alibaba.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_expand_epilogue): Remove\n+\tredundant check for calls_eh_return.\n+\t* config/aarch64/aarch64.md (*do_return): Likewise.\n+\n+2021-11-01  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* cfghooks.c (cfg_hook_duplicate_loop_to_header_edge): Rename\n+\tduplicate_loop_to_header_edge to\n+\tduplicate_loop_body_to_header_edge.\n+\t(cfg_hook_duplicate_loop_body_to_header_edge): Likewise.\n+\t* cfghooks.h (struct cfg_hooks): Likewise.\n+\t(cfg_hook_duplicate_loop_body_to_header_edge): Likewise.\n+\t* cfgloopmanip.c (duplicate_loop_body_to_header_edge): Likewise.\n+\t(clone_loop_to_header_edge): Likewise.\n+\t* cfgloopmanip.h (duplicate_loop_body_to_header_edge): Likewise.\n+\t* cfgrtl.c (struct cfg_hooks): Likewise.\n+\t* doc/loop.texi: Likewise.\n+\t* loop-unroll.c (unroll_loop_constant_iterations): Likewise.\n+\t(unroll_loop_runtime_iterations): Likewise.\n+\t(unroll_loop_stupid): Likewise.\n+\t(apply_opt_in_copies): Likewise.\n+\t* tree-cfg.c (struct cfg_hooks): Likewise.\n+\t* tree-ssa-loop-ivcanon.c (try_unroll_loop_completely): Likewise.\n+\t(try_peel_loop): Likewise.\n+\t* tree-ssa-loop-manip.c (copy_phi_node_args): Likewise.\n+\t(gimple_duplicate_loop_body_to_header_edge): Likewise.\n+\t(tree_transform_and_unroll_loop): Likewise.\n+\t* tree-ssa-loop-manip.h (gimple_duplicate_loop_body_to_header_edge):\n+\tLikewise.\n+\n+2021-11-01  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\t* cfgloopmanip.c (loop_version): Refactor loopify to\n+\tloop_version.  Move condition generation after loopify.\n+\t(loopify): Delete.\n+\t* cfgloopmanip.h (loopify): Delete.\n+\n 2021-10-31  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-fnsummary.c: Include tree-dfa.h."}, {"sha": "f8892a4f3f73dba9513b392a51f0429f3958a2b2", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1 +1 @@\n-20211101\n+20211102"}, {"sha": "22e3847b29118ab1e7bcb74dea76c7baa117e637", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,8 @@\n+2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-lex.c (c_lex_with_flags): When complaining about non-printable\n+\tCPP_OTHER tokens, set the \"escape on output\" flag.\n+\n 2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-omp.c (c_omp_check_loop_iv_r): Don't clear 3rd bit for"}, {"sha": "148118e2fb175d5a24fd4b7866ff8ea8225d36af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,51 @@\n+2021-11-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/ipa/modref-1.C: Fix test-suite pattern scanning.\n+\n+2021-11-01  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* c-c++-common/pr102281.c: New test.\n+\t* gcc.target/i386/auto-init-2.c: Adjust testing case.\n+\t* gcc.target/i386/auto-init-4.c: Likewise.\n+\t* gcc.target/i386/auto-init-6.c: Likewise.\n+\t* gcc.target/aarch64/auto-init-6.c: Likewise.\n+\n+2021-11-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/vect-cse-codegen.c: New test.\n+\n+2021-11-01  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR testsuite/103000\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-double.c:\n+\tForce unroll.\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-float.c: likewise\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-float.c:\n+\tLikewise\n+\t* gcc.dg/vect/complex/fast-math-bb-slp-complex-add-pattern-half-float.c:\n+\tLikewise.\n+\n+2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-c++-common/diagnostic-format-json-1.c: Add regexp to consume\n+\t\"escape-source\" attribute.\n+\t* c-c++-common/diagnostic-format-json-2.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-4.c: Likewise, twice.\n+\t* c-c++-common/diagnostic-format-json-5.c: Likewise.\n+\t* gcc.dg/cpp/warn-normalized-4-bytes.c: New test.\n+\t* gcc.dg/cpp/warn-normalized-4-unicode.c: New test.\n+\t* gcc.dg/encoding-issues-bytes.c: New test.\n+\t* gcc.dg/encoding-issues-unicode.c: New test.\n+\t* gfortran.dg/diagnostic-format-json-1.F90: Add regexp to consume\n+\t\"escape-source\" attribute.\n+\t* gfortran.dg/diagnostic-format-json-2.F90: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-3.F90: Likewise.\n+\n+2021-11-01  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr103003.c: New.\n+\n 2021-10-31  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/ipa/modref-1.C: New test."}, {"sha": "3fec73f33cce761e075a81fc94a3d36df46cbf37", "filename": "libcody/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libcody%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libcody%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,8 @@\n+2021-11-01  Martin Liska  <mliska@suse.cz>\n+\n+\tPR other/102657\n+\t* Makefile.in: Add mostlyclean Makefile target.\n+\n 2021-10-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* netserver.cc (ListenInet6): Set pointer to null after"}, {"sha": "e0e71a40e055cebf55a630251492ba6562708ca0", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,50 @@\n+2021-11-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* charset.c (convert_escape): Use encoding_rich_location when\n+\tcomplaining about nonprintable unknown escape sequences.\n+\t(cpp_display_width_computation::::cpp_display_width_computation):\n+\tPass in policy rather than tabstop.\n+\t(cpp_display_width_computation::process_next_codepoint): Add \"out\"\n+\tparam and populate *out if non-NULL.\n+\t(cpp_display_width_computation::advance_display_cols): Pass NULL\n+\tto process_next_codepoint.\n+\t(cpp_byte_column_to_display_column): Pass in policy rather than\n+\ttabstop.  Pass NULL to process_next_codepoint.\n+\t(cpp_display_column_to_byte_column): Pass in policy rather than\n+\ttabstop.\n+\t* errors.c (cpp_diagnostic_get_current_location): New function,\n+\tsplitting out the logic from...\n+\t(cpp_diagnostic): ...here.\n+\t(cpp_warning_at): New function.\n+\t(cpp_pedwarning_at): New function.\n+\t* include/cpplib.h (cpp_warning_at): New decl for rich_location.\n+\t(cpp_pedwarning_at): Likewise.\n+\t(struct cpp_decoded_char): New.\n+\t(struct cpp_char_column_policy): New.\n+\t(cpp_display_width_computation::cpp_display_width_computation):\n+\tReplace \"tabstop\" param with \"policy\".\n+\t(cpp_display_width_computation::process_next_codepoint): Add \"out\"\n+\tparam.\n+\t(cpp_display_width_computation::m_tabstop): Replace with...\n+\t(cpp_display_width_computation::m_policy): ...this.\n+\t(cpp_byte_column_to_display_column): Replace \"tabstop\" param with\n+\t\"policy\".\n+\t(cpp_display_width): Likewise.\n+\t(cpp_display_column_to_byte_column): Likewise.\n+\t* include/line-map.h (rich_location::escape_on_output_p): New.\n+\t(rich_location::set_escape_on_output): New.\n+\t(rich_location::m_escape_on_output): New.\n+\t* internal.h (cpp_diagnostic_get_current_location): New decl.\n+\t(class encoding_rich_location): New.\n+\t* lex.c (skip_whitespace): Use encoding_rich_location when\n+\tcomplaining about null characters.\n+\t(warn_about_normalization): Generate a source range when\n+\tcomplaining about improperly normalized tokens, rather than just a\n+\tpoint, and use encoding_rich_location so that the source code\n+\tis escaped on printing.\n+\t* line-map.c (rich_location::rich_location): Initialize\n+\tm_escape_on_output.\n+\n 2021-10-29  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR c++/102409"}, {"sha": "fc7da180035015bf59a4eda4dbe87437111583b8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf82e8d964ab1551ca159be5b02e9e8f2dbc292d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cf82e8d964ab1551ca159be5b02e9e8f2dbc292d", "patch": "@@ -1,3 +1,25 @@\n+2021-11-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/debug/stl_iterator.h (__valid_range): Add constexpr\n+\tfor C++20. Qualify call to avoid ADL.\n+\t(__get_distance, __can_advance, __unsafe, __base): Likewise.\n+\t* testsuite/25_algorithms/move/constexpr.cc: Also check with\n+\tstd::reverse_iterator arguments.\n+\n+2021-11-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/span (span(Range&&)): Reorder constraints.\n+\n+2021-11-01  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/103022\n+\t* include/std/valarray (begin, end): Do not dereference an empty\n+\tvalarray. Add noexcept and [[nodiscard]].\n+\t* testsuite/26_numerics/valarray/range_access.cc: Check empty\n+\tvalarray. Check iterator properties. Run as well as compiling.\n+\t* testsuite/26_numerics/valarray/range_access2.cc: Likewise.\n+\t* testsuite/26_numerics/valarray/103022.cc: New test.\n+\n 2021-10-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/23_containers/stack/deduction.cc: Fix typo."}]}