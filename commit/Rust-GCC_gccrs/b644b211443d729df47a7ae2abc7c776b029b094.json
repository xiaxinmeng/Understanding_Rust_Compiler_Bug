{"sha": "b644b211443d729df47a7ae2abc7c776b029b094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0NGIyMTE0NDNkNzI5ZGY0N2E3YWUyYWJjN2M3NzZiMDI5YjA5NA==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-11-12T00:09:48Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-11-12T00:09:48Z"}, "message": "loop-invariant.c (move_loop_invariants): Fix a thinko in the previous checkin.\n\n\t* loop-invariant.c (move_loop_invariants): Fix a thinko in the\n\tprevious checkin.\n\nFrom-SVN: r106809", "tree": {"sha": "b4896826fd17ca2498002a932d89a1fcdaf6e28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4896826fd17ca2498002a932d89a1fcdaf6e28f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b644b211443d729df47a7ae2abc7c776b029b094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b644b211443d729df47a7ae2abc7c776b029b094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b644b211443d729df47a7ae2abc7c776b029b094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b644b211443d729df47a7ae2abc7c776b029b094/comments", "author": null, "committer": null, "parents": [{"sha": "6c14b137a907a5eda102567d6fac239aec447c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c14b137a907a5eda102567d6fac239aec447c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c14b137a907a5eda102567d6fac239aec447c8c"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "285101584b67018e2289b10bfb10e2150a73a2f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b644b211443d729df47a7ae2abc7c776b029b094/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b644b211443d729df47a7ae2abc7c776b029b094/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b644b211443d729df47a7ae2abc7c776b029b094", "patch": "@@ -1,3 +1,8 @@\n+2005-11-11  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* loop-invariant.c (move_loop_invariants): Fix a thinko in the\n+\tprevious checkin.\n+\n 2005-11-11  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* tree-ssa-dse.c (struct address_walk_data, memory_ssa_name_same)"}, {"sha": "a909e64989d812fb81f6f5e69d60247afd081c2a", "filename": "gcc/loop-invariant.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b644b211443d729df47a7ae2abc7c776b029b094/gcc%2Floop-invariant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b644b211443d729df47a7ae2abc7c776b029b094/gcc%2Floop-invariant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-invariant.c?ref=b644b211443d729df47a7ae2abc7c776b029b094", "patch": "@@ -796,9 +796,22 @@ move_invariant_reg (struct loop *loop, unsigned invno, struct df *df)\n   reg = gen_reg_rtx (GET_MODE (SET_DEST (set)));\n   df_pattern_emit_after (df, gen_move_insn (SET_DEST (set), reg),\n \t\t\t BLOCK_FOR_INSN (inv->insn), inv->insn);\n-  df_pattern_emit_after (df, gen_move_insn (reg, SET_SRC (set)),\n-\t\t\t preheader, BB_END (preheader));\n-  df_insn_delete (df, BLOCK_FOR_INSN (inv->insn), inv->insn);\n+\n+  /* If the SET_DEST of the invariant insn is a reg, we can just move\n+     the insn out of the loop.  Otherwise, we have to use gen_move_insn\n+     to let emit_move_insn produce a valid instruction stream.  */\n+  if (REG_P (SET_DEST (set)))\n+    {\n+      SET_DEST (set) = reg;\n+      reorder_insns (inv->insn, inv->insn, BB_END (preheader));\n+      df_insn_modify (df, preheader, inv->insn);\n+    }\n+  else\n+    {\n+      df_pattern_emit_after (df, gen_move_insn (reg, SET_SRC (set)),\n+\t\t\t     preheader, BB_END (preheader));\n+      df_insn_delete (df, BLOCK_FOR_INSN (inv->insn), inv->insn);\n+    }\n \n   /* Replace the uses we know to be dominated.  It saves work for copy\n      propagation, and also it is necessary so that dependent invariants"}]}