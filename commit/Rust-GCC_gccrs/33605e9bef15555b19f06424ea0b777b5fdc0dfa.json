{"sha": "33605e9bef15555b19f06424ea0b777b5fdc0dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM2MDVlOWJlZjE1NTU1YjE5ZjA2NDI0ZWEwYjc3N2I1ZmRjMGRmYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-21T15:55:15Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-09-21T18:53:14Z"}, "message": "c++: ts_lambda is not needed\n\nWe don't need ts_lambda, as IDENTIFIER_LAMBDA_P is sufficient.  Killed thusly.\n\n\tgcc/cp/\n\t* decl.c (xref_tag_1): Use IDENTIFIER_LAMBDA_P to detect lambdas.\n\t* lambda.c (begin_lambda_type): Use ts_current to push the tag.\n\t* name-lookup.h (enum tag_scope): Drop ts_lambda.", "tree": {"sha": "4dfd124ac2f9b0f3e404605ac5223cb8eea2f061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dfd124ac2f9b0f3e404605ac5223cb8eea2f061"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33605e9bef15555b19f06424ea0b777b5fdc0dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33605e9bef15555b19f06424ea0b777b5fdc0dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33605e9bef15555b19f06424ea0b777b5fdc0dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33605e9bef15555b19f06424ea0b777b5fdc0dfa/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5a297f7520cf5ba10a3a16f32ea0e1655b203f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5a297f7520cf5ba10a3a16f32ea0e1655b203f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5a297f7520cf5ba10a3a16f32ea0e1655b203f"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "bbecebe7a62de702bfc3b0c7bba5643e073ee0a6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=33605e9bef15555b19f06424ea0b777b5fdc0dfa", "patch": "@@ -14857,10 +14857,10 @@ check_elaborated_type_specifier (enum tag_types tag_code,\n   return type;\n }\n \n-/* Lookup NAME in elaborate type specifier in scope according to\n-   SCOPE and issue diagnostics if necessary.\n-   Return *_TYPE node upon success, NULL_TREE when the NAME is not\n-   found, and ERROR_MARK_NODE for type error.  */\n+/* Lookup NAME of an elaborated type specifier according to SCOPE and\n+   issue diagnostics if necessary.  Return *_TYPE node upon success,\n+   NULL_TREE when the NAME is not found, and ERROR_MARK_NODE for type\n+   error.  */\n \n static tree\n lookup_and_check_tag (enum tag_types tag_code, tree name,\n@@ -14997,9 +14997,9 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n   /* In case of anonymous name, xref_tag is only called to\n      make type node and push name.  Name lookup is not required.  */\n   tree t = NULL_TREE;\n-  if (scope != ts_lambda && !IDENTIFIER_ANON_P (name))\n+  if (!IDENTIFIER_ANON_P (name))\n     t = lookup_and_check_tag  (tag_code, name, scope, template_header_p);\n-  \n+\n   if (t == error_mark_node)\n     return error_mark_node;\n \n@@ -15052,19 +15052,14 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t  error (\"use of enum %q#D without previous declaration\", name);\n \t  return error_mark_node;\n \t}\n-      else\n-\t{\n-\t  t = make_class_type (code);\n-\t  TYPE_CONTEXT (t) = context;\n-\t  if (scope == ts_lambda)\n-\t    {\n-\t      /* Mark it as a lambda type.  */\n-\t      CLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n-\t      /* And push it into current scope.  */\n-\t      scope = ts_current;\n-\t    }\n-\t  t = pushtag (name, t, scope);\n-\t}\n+\n+      t = make_class_type (code);\n+      TYPE_CONTEXT (t) = context;\n+      if (IDENTIFIER_LAMBDA_P (name))\n+\t/* Mark it as a lambda type right now.  Our caller will\n+\t   correct the value.  */\n+\tCLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n+      t = pushtag (name, t, scope);\n     }\n   else\n     {"}, {"sha": "364a3e9f6b9e7056c999a86ba47e7f98911a83c3", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=33605e9bef15555b19f06424ea0b777b5fdc0dfa", "patch": "@@ -135,7 +135,7 @@ begin_lambda_type (tree lambda)\n \n   /* Create the new RECORD_TYPE for this lambda.  */\n   tree type = xref_tag (/*tag_code=*/record_type, name,\n-\t\t\t/*scope=*/ts_lambda, /*template_header_p=*/false);\n+\t\t\t/*scope=*/ts_current, /*template_header_p=*/false);\n   if (type == error_mark_node)\n     return error_mark_node;\n "}, {"sha": "a0815e1a0ac6b8d0340ac0590b49c01f687e59f9", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33605e9bef15555b19f06424ea0b777b5fdc0dfa/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=33605e9bef15555b19f06424ea0b777b5fdc0dfa", "patch": "@@ -139,7 +139,6 @@ enum tag_scope {\n \t\t\t\t\t   only, for friend class lookup\n \t\t\t\t\t   according to [namespace.memdef]/3\n \t\t\t\t\t   and [class.friend]/9.  */\n-  ts_lambda = 3\t\t\t/* Declaring a lambda closure.  */\n };\n \n struct GTY(()) cp_class_binding {"}]}