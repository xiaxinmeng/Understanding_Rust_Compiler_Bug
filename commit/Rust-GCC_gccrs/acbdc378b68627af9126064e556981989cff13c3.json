{"sha": "acbdc378b68627af9126064e556981989cff13c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiZGMzNzhiNjg2MjdhZjkxMjYwNjRlNTU2OTgxOTg5Y2ZmMTNjMw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-13T13:41:37Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2009-07-13T13:41:37Z"}, "message": "re PR fortran/40646 ([F03] array-valued procedure pointer components)\n\n2009-07-13  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40646\n\t* module.c (mio_symbol): If the symbol has formal arguments,\n\tthe formal namespace will be present.\n\t* resolve.c (resolve_actual_arglist): Correctly handle 'called'\n\tprocedure pointer components as actual arguments.\n\t(resolve_fl_derived,resolve_symbol): Make sure the formal namespace\n\tis present.\n\t* trans-expr.c (gfc_conv_procedure_call): Correctly handle the formal\n\targuments of procedure pointer components.\n\n\n2009-07-13  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/40646\n\t* gfortran.dg/proc_ptr_22.f90: Extended.\n\t* gfortran.dg/proc_ptr_comp_12.f90: Extended.\n\nFrom-SVN: r149586", "tree": {"sha": "5a7bba20ef265a3d6d5893b9a44c4302063875a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a7bba20ef265a3d6d5893b9a44c4302063875a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acbdc378b68627af9126064e556981989cff13c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbdc378b68627af9126064e556981989cff13c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acbdc378b68627af9126064e556981989cff13c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acbdc378b68627af9126064e556981989cff13c3/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae525aa88f6af6131501a6171e3ee62e6b981b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae525aa88f6af6131501a6171e3ee62e6b981b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae525aa88f6af6131501a6171e3ee62e6b981b51"}], "stats": {"total": 70, "additions": 56, "deletions": 14}, "files": [{"sha": "6eabe0da1405bf4f14e8bfa259691c26f1bd5792", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -1,3 +1,15 @@\n+2009-07-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40646\n+\t* module.c (mio_symbol): If the symbol has formal arguments,\n+\tthe formal namespace will be present.\n+\t* resolve.c (resolve_actual_arglist): Correctly handle 'called'\n+\tprocedure pointer components as actual arguments.\n+\t(resolve_fl_derived,resolve_symbol): Make sure the formal namespace\n+\tis present.\n+\t* trans-expr.c (gfc_conv_procedure_call): Correctly handle the formal\n+\targuments of procedure pointer components.\n+\n 2009-07-12  Tobias Burnus  <burnus@net-b.de>\n \t    Philippe Marguinaud <philippe.marguinaud@meteo.fr>\n "}, {"sha": "aa08c2c67b6608c64e56302683d9492f2d1c3c6e", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -3439,19 +3439,8 @@ mio_symbol (gfc_symbol *sym)\n   mio_symbol_attribute (&sym->attr);\n   mio_typespec (&sym->ts);\n \n-  /* Contained procedures don't have formal namespaces.  Instead we output the\n-     procedure namespace.  The will contain the formal arguments.  */\n   if (iomode == IO_OUTPUT)\n-    {\n-      formal = sym->formal;\n-      while (formal && !formal->sym)\n-\tformal = formal->next;\n-\n-      if (formal)\n-\tmio_namespace_ref (&formal->sym->ns);\n-      else\n-\tmio_namespace_ref (&sym->formal_ns);\n-    }\n+    mio_namespace_ref (&sym->formal_ns);\n   else\n     {\n       mio_namespace_ref (&sym->formal_ns);"}, {"sha": "880dfd0e886c13455f0435fe93365dab2b603b70", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -1239,7 +1239,14 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n       if (gfc_is_proc_ptr_comp (e, &comp))\n \t{\n \t  e->ts = comp->ts;\n-\t  e->expr_type = EXPR_VARIABLE;\n+\t  if (e->value.compcall.actual == NULL)\n+\t    e->expr_type = EXPR_VARIABLE;\n+\t  else\n+\t    {\n+\t      if (comp->as != NULL)\n+\t\te->rank = comp->as->rank;\n+\t      e->expr_type = EXPR_FUNCTION;\n+\t    }\n \t  goto argument_list;\n \t}\n \n@@ -8993,6 +9000,9 @@ ensure_not_abstract (gfc_symbol* sub, gfc_symbol* ancestor)\n }\n \n \n+static void resolve_symbol (gfc_symbol *sym);\n+\n+\n /* Resolve the components of a derived type.  */\n \n static gfc_try\n@@ -9031,6 +9041,9 @@ resolve_fl_derived (gfc_symbol *sym)\n \t    {\n \t      gfc_symbol *ifc = c->ts.interface;\n \n+\t      if (ifc->formal && !ifc->formal_ns)\n+\t\tresolve_symbol (ifc);\n+\n \t      if (ifc->attr.intrinsic)\n \t\tresolve_intrinsic (ifc, &ifc->declared_at);\n \n@@ -9832,6 +9845,20 @@ resolve_symbol (gfc_symbol *sym)\n   if (sym->formal_ns && sym->formal_ns != gfc_current_ns)\n     gfc_resolve (sym->formal_ns);\n \n+  /* Make sure the formal namespace is present.  */\n+  if (sym->formal && !sym->formal_ns)\n+    {\n+      gfc_formal_arglist *formal = sym->formal;\n+      while (formal && !formal->sym)\n+\tformal = formal->next;\n+\n+      if (formal)\n+\t{\n+\t  sym->formal_ns = formal->sym->ns;\n+\t  sym->formal_ns->refs++;\n+\t}\n+    }\n+\n   /* Check threadprivate restrictions.  */\n   if (sym->attr.threadprivate && !sym->attr.save && !sym->ns->save_all\n       && (!sym->attr.in_common"}, {"sha": "787251d7627943694c42a0b44f3d5d274d53005a", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -2560,7 +2560,10 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t\t\t\t!= EXPR_CONSTANT)\n \t\t\t      || (comp && comp->attr.dimension)\n \t\t\t      || (!comp && sym->attr.dimension));\n-  formal = sym->formal;\n+  if (comp)\n+    formal = comp->formal;\n+  else\n+    formal = sym->formal;\n   /* Evaluate the arguments.  */\n   for (; arg != NULL; arg = arg->next, formal = formal ? formal->next : NULL)\n     {"}, {"sha": "c97a8d74409f39b275d508e3e5a910ae6dc88047", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -1,3 +1,9 @@\n+2009-07-13  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/40646\n+\t* gfortran.dg/proc_ptr_22.f90: Extended.\n+\t* gfortran.dg/proc_ptr_comp_12.f90: Extended.\n+\n 2009-07-13  Ira Rosen  <irar@il.ibm.com>\n \n \t* gfortran.dg/vect/vect-6.f: New test."}, {"sha": "3b1f5c64e8bb4b1030be2b06fb6de0fb173989f2", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_22.f90", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_22.f90?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -7,6 +7,7 @@\n \n module bugTestMod\n   implicit none\n+  procedure(returnMat), pointer :: pp2\n contains\n   function returnMat( a, b ) result( mat )\n     integer:: a, b\n@@ -21,6 +22,8 @@ program bugTest\n   procedure(returnMat), pointer :: pp\n   pp => returnMat\n   if (sum(pp(2,2))/=4) call abort()\n+  pp2 => returnMat\n+  if (sum(pp2(3,2))/=6) call abort()\n end program bugTest\n \n ! { dg-final { cleanup-modules \"bugTestMod\" } }"}, {"sha": "5f26a782ed9acffc6ad5f4abebee783ff32c9e05", "filename": "gcc/testsuite/gfortran.dg/proc_ptr_comp_12.f90", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acbdc378b68627af9126064e556981989cff13c3/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fproc_ptr_comp_12.f90?ref=acbdc378b68627af9126064e556981989cff13c3", "patch": "@@ -27,6 +27,8 @@ program bugTest\n   testCatch = testObj%test(2,2)\n   print *,testCatch\n   if (sum(testCatch)/=4) call abort()\n+  print *,testObj%test(3,3)\n+  if (sum(testObj%test(3,3))/=9) call abort()\n end program bugTest\n \n ! { dg-final { cleanup-modules \"bugTestMod\" } }"}]}