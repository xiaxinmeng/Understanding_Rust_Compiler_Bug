{"sha": "9cedbaab8e048b90ceb9ceef0d851385fae67cde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNlZGJhYWI4ZTA0OGI5MGNlYjljZWVmMGQ4NTEzODVmYWU2N2NkZQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-06-21T07:54:50Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-06-21T07:54:50Z"}, "message": "PR target/11877: Use xor to write zero to memory with -Os\n\nThe following patch attempts to resolve PR target/11877 (without\ntriggering PR/23102).  On x86_64, writing an SImode or DImode zero\nto memory uses an instruction encoding that is larger than first\nclearing a register (using xor) then writing that to memory.  Hence,\nafter reload, the peephole2 pass can determine if there's a suitable\nfree register, and if so, use that to shrink the code size with -Os.\n\nTo improve code size, and avoid inserting a large number of xor\ninstructions (PR target/23102), this patch makes use of peephole2's\nefficient pattern matching to use a single temporary for a run of\nconsecutive writes.  In theory, one could do better still with a\nnew target-specific pass, gated on -Os, to shrink these instructions\n(like stv), but that's probably overkill for the little remaining\nspace savings.\n\nEvaluating this patch on the CSiBE benchmark (v2.1.1) results in a\n0.26% code size improvement (3715273 bytes down to 3705477) on x86_64\nwith -Os [saving 1 byte every 400].  549 of 894 tests improve, two\ntests grow larger.  Analysis of these 2 pathological cases reveals\nthat although peephole2's match_scratch prefers to use a call-clobbered\nregister (to avoid requiring a new stack frame), very rarely this\ninteracts with GCC's shrink wrapping optimization, which may previously\nhave avoided saving/restoring a call clobbered register, such as %eax,\nin the calling function.\n\n2021-06-21  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR target/11877\n\t* config/i386/i386.md: New define_peephole2s to shrink writing\n\t1, 2 or 4 consecutive zeros to memory when optimizing for size.\n\ngcc/testsuite/ChangeLog\n\tPR target/11877\n\t* gcc.target/i386/pr11877.c: New test case.", "tree": {"sha": "2b032888b009d0676c79cc59a2833b8789e68c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b032888b009d0676c79cc59a2833b8789e68c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cedbaab8e048b90ceb9ceef0d851385fae67cde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cedbaab8e048b90ceb9ceef0d851385fae67cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cedbaab8e048b90ceb9ceef0d851385fae67cde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cedbaab8e048b90ceb9ceef0d851385fae67cde/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24379c789800188281514235d4a37ff98ad7826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24379c789800188281514235d4a37ff98ad7826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24379c789800188281514235d4a37ff98ad7826"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "2333261a894b753c635e58129328c2195691fa01", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cedbaab8e048b90ceb9ceef0d851385fae67cde/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cedbaab8e048b90ceb9ceef0d851385fae67cde/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9cedbaab8e048b90ceb9ceef0d851385fae67cde", "patch": "@@ -19357,6 +19357,42 @@\n   ix86_expand_clear (operands[1]);\n })\n \n+;; When optimizing for size, zeroing memory should use a register.\n+(define_peephole2\n+  [(match_scratch:SWI48 0 \"r\")\n+   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\" \"\") (const_int 0))\n+   (set (match_operand:SWI48 3 \"memory_operand\" \"\") (const_int 0))\n+   (set (match_operand:SWI48 4 \"memory_operand\" \"\") (const_int 0))]\n+  \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(set (match_dup 1) (match_dup 0))\n+   (set (match_dup 2) (match_dup 0))\n+   (set (match_dup 3) (match_dup 0))\n+   (set (match_dup 4) (match_dup 0))]\n+{\n+  ix86_expand_clear (operands[0]);\n+})\n+\n+(define_peephole2\n+  [(match_scratch:SWI48 0 \"r\")\n+   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))\n+   (set (match_operand:SWI48 2 \"memory_operand\" \"\") (const_int 0))]\n+  \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(set (match_dup 1) (match_dup 0))\n+   (set (match_dup 2) (match_dup 0))]\n+{\n+  ix86_expand_clear (operands[0]);\n+})\n+\n+(define_peephole2\n+  [(match_scratch:SWI48 0 \"r\")\n+   (set (match_operand:SWI48 1 \"memory_operand\" \"\") (const_int 0))]\n+  \"optimize_insn_for_size_p () && peep2_regno_dead_p (0, FLAGS_REG)\"\n+  [(set (match_dup 1) (match_dup 0))]\n+{\n+  ix86_expand_clear (operands[0]);\n+})\n+\n ;; Reload dislikes loading constants directly into class_likely_spilled\n ;; hard registers.  Try to tidy things up here.\n (define_peephole2"}, {"sha": "5a488cccf7765b27b2e95a3e44b41eef4850e4d5", "filename": "gcc/testsuite/gcc.target/i386/pr11877.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cedbaab8e048b90ceb9ceef0d851385fae67cde/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cedbaab8e048b90ceb9ceef0d851385fae67cde/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr11877.c?ref=9cedbaab8e048b90ceb9ceef0d851385fae67cde", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/11877 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Os\" } */\n+\n+void foo (long long *p)\n+{\n+  *p = 0;\n+}\n+\n+void bar (int *p)\n+{\n+  *p = 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"xorl\\[ \\t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-not \"\\\\\\$0,\" } } */"}]}