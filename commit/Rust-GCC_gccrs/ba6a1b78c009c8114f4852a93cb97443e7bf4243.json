{"sha": "ba6a1b78c009c8114f4852a93cb97443e7bf4243", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE2YTFiNzhjMDA5YzgxMTRmNDg1MmE5M2NiOTc0NDNlN2JmNDI0Mw==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2008-01-26T16:26:27Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2008-01-26T16:26:27Z"}, "message": "re PR target/34794 (build of gcc 4.2.2 fails on AIX 6.1 /  libstdc++-v3/libmath/stubs.c:47)\n\n        PR target/34794\n        * config.gcc: Separate AIX 5.3 from AIX 6.1.\n        * config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n        __LONGDOUBLE128 too.\n        * config/rs6000/aix61.h: New file.\n\nFrom-SVN: r131865", "tree": {"sha": "2dd301d6c8a08fb10c9de21f76334e1d9408e7b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd301d6c8a08fb10c9de21f76334e1d9408e7b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba6a1b78c009c8114f4852a93cb97443e7bf4243", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6a1b78c009c8114f4852a93cb97443e7bf4243", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6a1b78c009c8114f4852a93cb97443e7bf4243", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6a1b78c009c8114f4852a93cb97443e7bf4243/comments", "author": null, "committer": null, "parents": [{"sha": "6cac36304e7153206248af3511287d44bacd3ae2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cac36304e7153206248af3511287d44bacd3ae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cac36304e7153206248af3511287d44bacd3ae2"}], "stats": {"total": 222, "additions": 219, "deletions": 3}, "files": [{"sha": "ceae4b6d0511c56557d43c08d00609e4249620f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba6a1b78c009c8114f4852a93cb97443e7bf4243", "patch": "@@ -1,3 +1,11 @@\n+2008-01-26  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/34794\n+\t* config.gcc: Separate AIX 5.3 from AIX 6.1.\n+\t* config/rs6000/rs6000-c.c (rs6000_cpu_cpp_builtins): Define\n+\t__LONGDOUBLE128 too.\n+\t* config/rs6000/aix61.h: New file.\n+\n 2008-01-26  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \tPR rtl-optimization/34959"}, {"sha": "17fcbe53dd7cb6740750125ce3756cea72d4dc0b", "filename": "gcc/config.gcc", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=ba6a1b78c009c8114f4852a93cb97443e7bf4243", "patch": "@@ -2072,14 +2072,22 @@ rs6000-ibm-aix5.2.* | powerpc-ibm-aix5.2.*)\n \tthread_file='aix'\n \textra_headers=\n \t;;\n-rs6000-ibm-aix[56789].* | powerpc-ibm-aix[56789].*)\n+rs6000-ibm-aix5.3.* | powerpc-ibm-aix5.3.*)\n \ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix53.h rs6000/xcoff.h\"\n \ttmake_file=rs6000/t-aix52\n \textra_options=\"${extra_options} rs6000/aix64.opt\"\n \tuse_collect2=yes\n \tthread_file='aix'\n \textra_headers=altivec.h\n \t;;\n+rs6000-ibm-aix[6789].* | powerpc-ibm-aix[6789].*)\n+\ttm_file=\"${tm_file} rs6000/aix.h rs6000/aix61.h rs6000/xcoff.h\"\n+\ttmake_file=rs6000/t-aix52\n+\textra_options=\"${extra_options} rs6000/aix64.opt\"\n+\tuse_collect2=yes\n+\tthread_file='aix'\n+\textra_headers=altivec.h\n+\t;;\n s390-*-linux*)\n \ttm_file=\"s390/s390.h dbxelf.h elfos.h svr4.h linux.h s390/linux.h\"\n \ttmake_file=\"${tmake_file} t-dfprules s390/t-crtstuff s390/t-linux\""}, {"sha": "aa53b12beb84d86170c73ad100d20710b3311857", "filename": "gcc/config/rs6000/aix61.h", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=ba6a1b78c009c8114f4852a93cb97443e7bf4243", "patch": "@@ -0,0 +1,197 @@\n+/* Definitions of target machine for GNU compiler,\n+   for IBM RS/6000 POWER running AIX V5.3.\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Free Software Foundation, Inc.\n+   Contributed by David Edelsohn (edelsohn@gnu.org).\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Sometimes certain combinations of command options do not make sense\n+   on a particular target machine.  You can define a macro\n+   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n+   defined, is executed once just after all the command options have\n+   been parsed.\n+\n+   The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n+   get control.  */\n+\n+#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n+#define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n+      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n+      warning (0, \"-maix64 requires PowerPC64 architecture remain enabled\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      rs6000_long_double_type_size = 64;\t\t\t\t\\\n+      if (rs6000_explicit_options.long_double)\t\t\t\t\\\n+\twarning (0, \"soft-float and long-double-128 are incompatible\");\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_POWERPC64 && ! TARGET_64BIT)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      error (\"-maix64 required: 64-bit computation with 32-bit addressing not yet supported\"); \\\n+    }\t\t\t\t\t\t\t\t\t\\\n+} while (0);\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \"-u %{maix64:-a64 %{!mcpu*:-mppc64}} %(asm_cpu)\"\n+\n+/* Common ASM definitions used by ASM_SPEC amongst the various targets\n+   for handling -mcpu=xxx switches.  */\n+#undef ASM_CPU_SPEC\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: %{!maix64: \\\n+  %{mpowerpc64: -mppc64} \\\n+  %{maltivec: -m970} \\\n+  %{!maltivec: %{!mpower64: %(asm_default)}}}} \\\n+%{mcpu=power3: -m620} \\\n+%{mcpu=power4: -mpwr4} \\\n+%{mcpu=power5: -mpwr5} \\\n+%{mcpu=power5+: -mpwr5x} \\\n+%{mcpu=power6: -mpwr6} \\\n+%{mcpu=power6x: -mpwr6} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rs64a: -mppc} \\\n+%{mcpu=603: -m603} \\\n+%{mcpu=603e: -m603} \\\n+%{mcpu=604: -m604} \\\n+%{mcpu=604e: -m604} \\\n+%{mcpu=620: -m620} \\\n+%{mcpu=630: -m620} \\\n+%{mcpu=970: -m970} \\\n+%{mcpu=G5: -m970}\"\n+\n+#undef\tASM_DEFAULT_SPEC\n+#define ASM_DEFAULT_SPEC \"-mppc\"\n+\n+#undef TARGET_OS_CPP_BUILTINS\n+#define TARGET_OS_CPP_BUILTINS()     \\\n+  do                                 \\\n+    {                                \\\n+      builtin_define (\"_AIX43\");     \\\n+      builtin_define (\"_AIX51\");     \\\n+      builtin_define (\"_AIX52\");     \\\n+      builtin_define (\"_AIX53\");     \\\n+      builtin_define (\"_AIX61\");     \\\n+      TARGET_OS_AIX_CPP_BUILTINS (); \\\n+    }                                \\\n+  while (0)\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\t\\\n+  %{ansi: -D_ANSI_C_SOURCE}\t\t\t\\\n+  %{maix64: -D__64BIT__}\t\t\t\\\n+  %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n+  %{pthread: -D_THREAD_SAFE}\"\n+\n+/* The GNU C++ standard library requires that these macros be \n+   defined.  Synchronize with libstdc++ os_defines.h.  */\n+#undef CPLUSPLUS_CPP_SPEC                       \n+#define CPLUSPLUS_CPP_SPEC\t\t\t\\\n+  \"-D_ALL_SOURCE -D__COMPATMATH__\t\t\\\n+   %{maix64: -D__64BIT__}\t\t\t\\\n+   %{mpe: -I/usr/lpp/ppe.poe/include}\t\t\\\n+   %{pthread: -D_THREAD_SAFE}\"\n+\n+#undef  TARGET_DEFAULT\n+#define TARGET_DEFAULT (MASK_POWERPC | MASK_NEW_MNEMONICS)\n+\n+#undef  PROCESSOR_DEFAULT\n+#define PROCESSOR_DEFAULT PROCESSOR_POWER5\n+#undef  PROCESSOR_DEFAULT64\n+#define PROCESSOR_DEFAULT64 PROCESSOR_POWER5\n+\n+#undef  TARGET_POWER\n+#define TARGET_POWER 0\n+\n+/* Define this macro as a C expression for the initializer of an\n+   array of string to tell the driver program which options are\n+   defaults for this target and thus do not need to be handled\n+   specially when using `MULTILIB_OPTIONS'.\n+\n+   Do not define this macro if `MULTILIB_OPTIONS' is not defined in\n+   the target makefile fragment or if none of the options listed in\n+   `MULTILIB_OPTIONS' are set by default.  *Note Target Fragment::.  */\n+\n+#undef\tMULTILIB_DEFAULTS\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{pg:-L/lib/profiled -L/usr/lib/profiled}\\\n+   %{p:-L/lib/profiled -L/usr/lib/profiled}\\\n+   %{!maix64:%{!shared:%{g*:-lg}}}\\\n+   %{mpe:-L/usr/lpp/ppe.poe/lib -lmpi -lvtd}\\\n+   %{pthread:-lpthreads} -lc\"\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \"-bpT:0x10000000 -bpD:0x20000000 %{!r:-btextro} -bnodelcsect\\\n+   %{static:-bnso %(link_syscalls) } %{shared:-bM:SRE %{!e:-bnoentry}}\\\n+   %{!maix64:%{!shared:%{g*: %(link_libg) }}} %{maix64:-b64}\\\n+   %{mpe:-binitfini:poe_remote_main}\"\n+\n+#undef STARTFILE_SPEC\n+#define STARTFILE_SPEC \"%{!shared:\\\n+   %{maix64:%{pg:gcrt0_64%O%s}%{!pg:%{p:mcrt0_64%O%s}%{!p:crt0_64%O%s}}}\\\n+   %{!maix64:\\\n+     %{pthread:%{pg:gcrt0_r%O%s}%{!pg:%{p:mcrt0_r%O%s}%{!p:crt0_r%O%s}}}\\\n+     %{!pthread:%{pg:gcrt0%O%s}%{!pg:%{p:mcrt0%O%s}%{!p:crt0%O%s}}}}}\"\n+\n+/* AIX V5 typedefs ptrdiff_t as \"long\" while earlier releases used \"int\".  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"long int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef  WCHAR_TYPE\n+#define WCHAR_TYPE (!TARGET_64BIT ? \"short unsigned int\" : \"unsigned int\")\n+\n+/* Width of wchar_t in bits.  */\n+#undef  WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE (!TARGET_64BIT ? 16 : 32)\n+\n+/* AIX V5 uses PowerPC nop (ori 0,0,0) instruction as call glue for PowerPC\n+   and \"cror 31,31,31\" for POWER architecture.  */\n+\n+#undef RS6000_CALL_GLUE\n+#define RS6000_CALL_GLUE \"{cror 31,31,31|nop}\"\n+\n+/* AIX 4.2 and above provides initialization and finalization function\n+   support from linker command line.  */\n+#undef HAS_INIT_SECTION\n+#define HAS_INIT_SECTION\n+\n+#undef LD_INIT_SWITCH\n+#define LD_INIT_SWITCH \"-binitfini\"\n+\n+/* AIX 5.2 has the float and long double forms of math functions.  */\n+#undef TARGET_C99_FUNCTIONS\n+#define TARGET_C99_FUNCTIONS  1\n+\n+#ifndef _AIX52\n+extern long long int    atoll(const char *);  \n+#endif\n+\n+/* This target uses the aix64.opt file.  */\n+#define TARGET_USES_AIX64_OPT 1\n+\n+#define RS6000_DEFAULT_LONG_DOUBLE_SIZE 128"}, {"sha": "08537117628686493eaa7d81e2ae33744c464da8", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba6a1b78c009c8114f4852a93cb97443e7bf4243/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=ba6a1b78c009c8114f4852a93cb97443e7bf4243", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for the C front end on the POWER and PowerPC architectures.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007\n+   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008\n    Free Software Foundation, Inc.\n \n    Contributed by Zack Weinberg <zack@codesourcery.com>\n@@ -140,7 +140,10 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n   RS6000_CPU_CPP_ENDIAN_BUILTINS();\n \n   if (TARGET_LONG_DOUBLE_128)\n-    builtin_define (\"__LONG_DOUBLE_128__\");\n+    {\n+      builtin_define (\"__LONG_DOUBLE_128__\");\n+      builtin_define (\"__LONGDOUBLE128\");\n+    }\n \n   switch (rs6000_current_abi)\n     {"}]}