{"sha": "aedff010f0b3fef486319a887b71bc625a4a2b78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWVkZmYwMTBmMGIzZmVmNDg2MzE5YTg4N2I3MWJjNjI1YTRhMmI3OA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-12-07T22:22:45Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-12-07T22:22:45Z"}, "message": "Remove XOP splitters.\n\n\t* config/i386/i386-protos.h (ix86_expand_fma4_multiple_memory):\n\tRemoved.\n\t* config/i386/i386.c (ix86_expand_fma4_multiple_memory): Removed.\n\t* config/i386/sse.md: Remove all XOP splitters.\n\tAllow the second and fourth operands of XOP multiply-add insns\n\tto be nonimmediate.\n\nFrom-SVN: r155057", "tree": {"sha": "5346825fb666f4392ceae42275b43e1fa2dd8ff7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5346825fb666f4392ceae42275b43e1fa2dd8ff7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aedff010f0b3fef486319a887b71bc625a4a2b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedff010f0b3fef486319a887b71bc625a4a2b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aedff010f0b3fef486319a887b71bc625a4a2b78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aedff010f0b3fef486319a887b71bc625a4a2b78/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b4d9488abb73f0fb148e1ccb94a2e61b1682bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b4d9488abb73f0fb148e1ccb94a2e61b1682bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b4d9488abb73f0fb148e1ccb94a2e61b1682bc"}], "stats": {"total": 204, "additions": 36, "deletions": 168}, "files": [{"sha": "a7694cba329e3e079dd9ae9a2000ca954600c9e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aedff010f0b3fef486319a887b71bc625a4a2b78", "patch": "@@ -1,3 +1,12 @@\n+2009-12-07  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* config/i386/i386-protos.h (ix86_expand_fma4_multiple_memory):\n+\tRemoved.\n+\t* config/i386/i386.c (ix86_expand_fma4_multiple_memory): Removed.\n+\t* config/i386/sse.md: Remove all XOP splitters.\n+\tAllow the second and fourth operands of XOP multiply-add insns\n+\tto be nonimmediate.\n+\n 2009-12-07  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* config/i386/sse.md: Remove all FMA4 splitters."}, {"sha": "aa2ccd7874610760cdd7bb1ea0ed32a0ccd6582a", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=aedff010f0b3fef486319a887b71bc625a4a2b78", "patch": "@@ -218,8 +218,6 @@ extern void ix86_expand_vector_set (bool, rtx, rtx, int);\n extern void ix86_expand_vector_extract (bool, rtx, rtx, int);\n extern void ix86_expand_reduc_v4sf (rtx (*)(rtx, rtx, rtx), rtx, rtx);\n \n-extern bool ix86_expand_fma4_multiple_memory (rtx [], enum machine_mode);\n-\n extern void ix86_expand_vec_extract_even_odd (rtx, rtx, rtx, unsigned);\n \n /* In i386-c.c  */"}, {"sha": "7cafdf6be291fd8927ae67b7a10a81639f3890de", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=aedff010f0b3fef486319a887b71bc625a4a2b78", "patch": "@@ -28808,36 +28808,6 @@ ix86_expand_round (rtx operand0, rtx operand1)\n }\n \f\n \n-/* Fixup an FMA4 or XOP instruction that has 2 memory input references\n-   into a form the hardware will allow by using the destination\n-   register to load one of the memory operations.  Presently this is\n-   used by the multiply/add routines to allow 2 memory references.  */\n-\n-bool\n-ix86_expand_fma4_multiple_memory (rtx operands[],\n-\t\t\t\t  enum machine_mode mode)\n-{\n-  rtx scratch = operands[0];\n-\n-  gcc_assert (register_operand (operands[0], mode));\n-  gcc_assert (register_operand (operands[1], mode));\n-  gcc_assert (MEM_P (operands[2]) && MEM_P (operands[3]));\n-\n-  if (reg_mentioned_p (scratch, operands[1]))\n-    {\n-      if (!can_create_pseudo_p ())\n-\treturn false;\n-      scratch = gen_reg_rtx (mode);\n-    }\n-\n-  emit_move_insn (scratch, operands[3]);\n-  if (rtx_equal_p (operands[2], operands[3]))\n-    operands[2] = operands[3] = scratch;\n-  else\n-    operands[3] = scratch;\n-  return true;\n-}\n-\n /* Table of valid machine attributes.  */\n static const struct attribute_spec ix86_attribute_table[] =\n {"}, {"sha": "24d66357be80a5a1cea2656b3785e9ed5a013e74", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 27, "deletions": 136, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aedff010f0b3fef486319a887b71bc625a4a2b78/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=aedff010f0b3fef486319a887b71bc625a4a2b78", "patch": "@@ -10132,89 +10132,50 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n ;; XOP parallel integer multiply/add instructions.\n-;; Note the instruction does not allow the value being added to be a memory\n-;; operation.  However by pretending via the nonimmediate_operand predicate\n-;; that it does and splitting it later allows the following to be recognized:\n-;;\ta[i] = b[i] * c[i] + d[i];\n+;; Note the XOP multiply/add instructions\n+;;     a[i] = b[i] * c[i] + d[i];\n+;; do not allow the value being added to be a memory operation.\n (define_insn \"xop_pmacsww\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (plus:V8HI\n \t (mult:V8HI\n-\t  (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t  (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V8HI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacsww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; Split pmacsww with two memory operands into a load and the pmacsww.\n-(define_split\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"\")\n-\t(plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"register_operand\" \"\")\n-\t\t    (match_operand:V8HI 2 \"memory_operand\" \"\"))\n-\t (match_operand:V8HI 3 \"memory_operand\" \"\")))]\n-  \"TARGET_XOP\"\n-  [(set (match_dup 0)\n-        (plus:V8HI\n-         (mult:V8HI (match_dup 1) (match_dup 2))\n-         (match_dup 3)))]\n-{\n-  if (!ix86_expand_fma4_multiple_memory (operands, V8HImode))\n-    FAIL;\n-})\n-\n (define_insn \"xop_pmacssww\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n         (ss_plus:V8HI\n-\t (mult:V8HI (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t (mult:V8HI (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t\t    (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm\"))\n-\t (match_operand:V8HI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V8HI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacssww\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; Note the instruction does not allow the value being added to be a memory\n-;; operation.  However by pretending via the nonimmediate_operand predicate\n-;; that it does and splitting it later allows the following to be recognized:\n-;;\ta[i] = b[i] * c[i] + d[i];\n (define_insn \"xop_pmacsdd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (plus:V4SI\n \t (mult:V4SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t  (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t  (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacsdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-;; Split pmacsdd with two memory operands into a load and the pmacsdd.\n-(define_split\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"\")\n-\t(plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"\")\n-\t\t    (match_operand:V4SI 2 \"memory_operand\" \"\"))\n-\t (match_operand:V4SI 3 \"memory_operand\" \"\")))]\n-  \"TARGET_XOP\"\n-  [(set (match_dup 0)\n-        (plus:V4SI\n-         (mult:V4SI (match_dup 1) (match_dup 2))\n-         (match_dup 3)))]\n-{\n-  if (!ix86_expand_fma4_multiple_memory (operands, V4SImode))\n-    FAIL;\n-})\n-\n (define_insn \"xop_pmacssdd\"\n   [(set (match_operand:V4SI 0 \"register_operand\" \"=x\")\n         (ss_plus:V4SI\n-\t (mult:V4SI (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t (mult:V4SI (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\"))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacssdd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10226,14 +10187,14 @@\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)])))\n \t  (vec_select:V2SI\n \t   (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t   (parallel [(const_int 1)\n \t\t      (const_int 3)])))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacssdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10245,15 +10206,15 @@\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacssdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10265,55 +10226,20 @@\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacsdql\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn_and_split \"*xop_pmacsdql_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m\")))]\n-  \"TARGET_XOP\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 1)\n-\t\t       (const_int 3)]))))\n-\t (match_dup 0)))])\n-\n ;; We don't have a straight 32-bit parallel multiply and extend on XOP, so\n ;; fake it with a multiply/add.  In general, we expect the define_split to\n ;; occur before register allocation, so we have to handle the corner case where\n@@ -10362,55 +10288,20 @@\n \t (mult:V2DI\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)])))\n \t  (sign_extend:V2DI\n \t   (vec_select:V2SI\n \t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n \t    (parallel [(const_int 0)\n \t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V2DI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacsdqh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn_and_split \"*xop_pmacsdqh_mem\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=&x\")\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"register_operand\" \"%x\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm\")\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_operand:V2DI 3 \"memory_operand\" \"m\")))]\n-  \"TARGET_XOP\"\n-  \"#\"\n-  \"&& reload_completed\"\n-  [(set (match_dup 0)\n-\t(match_dup 3))\n-   (set (match_dup 0)\n-\t(plus:V2DI\n-\t (mult:V2DI\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 1)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)])))\n-\t  (sign_extend:V2DI\n-\t   (vec_select:V2SI\n-\t    (match_dup 2)\n-\t    (parallel [(const_int 0)\n-\t\t       (const_int 2)]))))\n-\t (match_dup 0)))])\n-\n ;; We don't have a straight 32-bit parallel multiply and extend on XOP, so\n ;; fake it with a multiply/add.  In general, we expect the define_split to\n ;; occur before register allocation, so we have to handle the corner case where\n@@ -10460,7 +10351,7 @@\n \t (mult:V4SI\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n@@ -10472,7 +10363,7 @@\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10484,7 +10375,7 @@\n \t (mult:V4SI\n \t  (sign_extend:V4SI\n \t   (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t    (parallel [(const_int 1)\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n@@ -10496,7 +10387,7 @@\n \t\t       (const_int 3)\n \t\t       (const_int 5)\n \t\t       (const_int 7)]))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmacswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10509,7 +10400,7 @@\n \t  (mult:V4SI\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n@@ -10536,7 +10427,7 @@\n \t\t\t(const_int 3)\n \t\t\t(const_int 5)\n \t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmadcsswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")\n@@ -10549,7 +10440,7 @@\n \t  (mult:V4SI\n \t   (sign_extend:V4SI\n \t    (vec_select:V4HI\n-\t     (match_operand:V8HI 1 \"register_operand\" \"%x\")\n+\t     (match_operand:V8HI 1 \"nonimmediate_operand\" \"%x\")\n \t     (parallel [(const_int 0)\n \t\t\t(const_int 2)\n \t\t\t(const_int 4)\n@@ -10576,7 +10467,7 @@\n \t\t\t(const_int 3)\n \t\t\t(const_int 5)\n \t\t\t(const_int 7)])))))\n-\t (match_operand:V4SI 3 \"register_operand\" \"x\")))]\n+\t (match_operand:V4SI 3 \"nonimmediate_operand\" \"x\")))]\n   \"TARGET_XOP\"\n   \"vpmadcswd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemuladd\")"}]}