{"sha": "2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "node_id": "C_kwDOANBUbNoAKDI3MDI4ODJmZGJkMTRhZDY0N2VhMmE4OGM3ZjllYTJjZDYyZmEyM2U", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-10-17T15:56:27Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-07T08:36:35Z"}, "message": "ada: New warning about noncomposing user-defined \"=\"\n\nPrint warning for a user-defined \"=\" that does not compose\nas might be expected (i.e. is ignored for predefined \"=\" of\na containing record or array type). This warning is enabled by\n-gnatw_q; we don't enable it by default because it generates\ntoo many false positives. We also don't enable it via -gnatwa.\n\ngcc/ada/\n\n\t* exp_ch4.adb\n\t(Expand_Array_Equality): Do not test Ltyp = Rtyp here, because\n\tthat is necessarily true. Move assertion thereof to more general\n\tplace.\n\t(Expand_Composite_Equality): Pass in Outer_Type, for use in\n\twarnings. Rename Typ to be Comp_Type, to more clearly distinguish\n\tit from Outer_Type. Print warning when appropriate.\n\t* exp_ch4.ads: Minor comment fix.\n\t* errout.ads: There is no such pragma as Warning_As_Pragma --\n\tWarning_As_Error must have been intended. Improve comment for ?x?.\n\t* exp_ch3.adb\n\t(Build_Untagged_Equality): Update comment to be accurate for more\n\trecent versions of Ada.\n\t* sem_case.adb\n\t(Choice_Analysis): Declare user-defined \"=\" functions as abstract.\n\t* sem_util.ads\n\t(Is_Bounded_String): Give RM reference in comment.\n\t* warnsw.ads, warnsw.adb\n\t(Warn_On_Ignored_Equality): Implement new warning switch -gnatw_q.\n\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n\tDocument new warning switch.\n\t* gnat_ugn.texi: Regenerate.", "tree": {"sha": "6f87bf0c0fb3ca2e3f67ad5d6c54f7fef7d6e2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f87bf0c0fb3ca2e3f67ad5d6c54f7fef7d6e2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b07c1752b9bf49143a41c810e2db86f633fdb1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b07c1752b9bf49143a41c810e2db86f633fdb1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b07c1752b9bf49143a41c810e2db86f633fdb1c"}], "stats": {"total": 179, "additions": 145, "deletions": 34}, "files": [{"sha": "31e2e31421e3ce715b613a3b8eaae7807d4d22a7", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -2795,6 +2795,8 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n \n   * :switch:`-gnatw.q` (questionable layout of record types)\n \n+  * :switch:`-gnatw_q` (ignored equality)\n+\n   * :switch:`-gnatw_r` (out-of-order record representation clauses)\n \n   * :switch:`-gnatw.s` (overridden size clause)\n@@ -3687,6 +3689,25 @@ of the pragma in the :title:`GNAT_Reference_manual`).\n   a record type would very likely cause inefficiencies.\n \n \n+.. index:: -gnatw_q  (gcc)\n+\n+:switch:`-gnatw_q`\n+  *Activate warnings for ignored equality operators.*\n+\n+  This switch activates warnings for a user-defined \"=\" function that does\n+  not compose (i.e. is ignored for a predefined \"=\" for a composite type\n+  containing a component whose type has the user-defined \"=\" as\n+  primitive). Note that the user-defined \"=\" must be a primitive operator\n+  in order to trigger the warning.\n+\n+  The default is that these warnings are not given.\n+\n+.. index:: -gnatw_Q  (gcc)\n+\n+:switch:`-gnatw_Q`\n+  *Suppress warnings for ignored equality operators.*\n+\n+\n .. index:: -gnatwr  (gcc)\n \n :switch:`-gnatwr`"}, {"sha": "846a4a6c07bef1e84b9ac1c70ea1a480922538a1", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -64,7 +64,7 @@ package Errout is\n    --  sequences in error messages generate appropriate tags for the output\n    --  error messages. If this switch is False, then these sequences are still\n    --  recognized (for the purposes of implementing the pattern matching in\n-   --  pragmas Warnings (Off,..) and Warning_As_Pragma(...) but do not result\n+   --  pragmas Warnings (Off,..) and Warning_As_Error(...) but do not result\n    --  in adding the error message tag. The -gnatw.d switch sets this flag\n    --  True, -gnatw.D sets this flag False.\n \n@@ -314,10 +314,11 @@ package Errout is\n    --      continuations, use this in each continuation message.\n \n    --    Insertion character ?x? ?.x? ?_x? (warning with switch)\n-   --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string\n+   --      \"x\" is a (lower-case) warning switch character.\n+   --      Like ??, but if the flag Warn_Doc_Switch is True, adds the string\n    --      \"[-gnatwx]\", \"[-gnatw.x]\", or \"[-gnatw_x]\", at the end of the\n-   --      warning message. x must be lower case. For continuations, use this\n-   --      on each continuation message.\n+   --      warning message. For continuations, use this on each continuation\n+   --      message.\n \n    --    Insertion character ?*? (restriction warning)\n    --      Like ?, but if the flag Warn_Doc_Switch is True, adds the string"}, {"sha": "1e70b584f22983e93da33efc6d70aa6f5186a5a2", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -4599,7 +4599,8 @@ package body Exp_Ch3 is\n       end if;\n \n       --  If not inherited and not user-defined, build body as for a type with\n-      --  tagged components.\n+      --  components of record type (i.e. a type for which \"=\" composes when\n+      --  used as a component in an outer composite type).\n \n       if Build_Eq then\n          Decl :="}, {"sha": "4a60ff596011cca6d1d97e66a8eff2ed5041e72c", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 59, "deletions": 26, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -151,14 +151,17 @@ package body Exp_Ch4 is\n    --  where we allow comparison of \"out of range\" values.\n \n    function Expand_Composite_Equality\n-     (Nod : Node_Id;\n-      Typ : Entity_Id;\n-      Lhs : Node_Id;\n-      Rhs : Node_Id) return Node_Id;\n+     (Outer_Type : Entity_Id;\n+      Nod        : Node_Id;\n+      Comp_Type  : Entity_Id;\n+      Lhs        : Node_Id;\n+      Rhs        : Node_Id) return Node_Id;\n    --  Local recursive function used to expand equality for nested composite\n    --  types. Used by Expand_Record/Array_Equality. Nod provides the Sloc value\n    --  for generated code. Lhs and Rhs are the left and right sides for the\n-   --  comparison, and Typ is the type of the objects to compare.\n+   --  comparison, and Comp_Typ is the type of the objects to compare.\n+   --  Outer_Type is the composite type containing a component of type\n+   --  Comp_Type -- used for printing messages.\n \n    procedure Expand_Concatenate (Cnode : Node_Id; Opnds : List_Id);\n    --  Routine to expand concatenation of a sequence of two or more operands\n@@ -1721,7 +1724,8 @@ package body Exp_Ch4 is\n              Prefix      => Make_Identifier (Loc, Chars (B)),\n              Expressions => Index_List2);\n \n-         Test := Expand_Composite_Equality (Nod, Component_Type (Typ), L, R);\n+         Test := Expand_Composite_Equality\n+           (Typ, Nod, Component_Type (Typ), L, R);\n \n          --  If some (sub)component is an unchecked_union, the whole operation\n          --  will raise program error.\n@@ -1953,7 +1957,6 @@ package body Exp_Ch4 is\n       if Ltyp /= Rtyp then\n          Ltyp := Base_Type (Ltyp);\n          Rtyp := Base_Type (Rtyp);\n-         pragma Assert (Ltyp = Rtyp);\n       end if;\n \n       --  If the array type is distinct from the type of the arguments, it\n@@ -1976,14 +1979,14 @@ package body Exp_Ch4 is\n          New_Rhs := Rhs;\n       end if;\n \n+      pragma Assert (Ltyp = Rtyp);\n       First_Idx := First_Index (Ltyp);\n \n       --  If optimization is enabled and the array boils down to a couple of\n       --  consecutive elements, generate a simple conjunction of comparisons\n       --  which should be easier to optimize by the code generator.\n \n       if Optimization_Level > 0\n-        and then Ltyp = Rtyp\n         and then Is_Constrained (Ltyp)\n         and then Number_Dimensions (Ltyp) = 1\n         and then Compile_Time_Known_Bounds (Ltyp)\n@@ -2010,7 +2013,7 @@ package body Exp_Ch4 is\n                 Prefix      => New_Copy_Tree (New_Rhs),\n                 Expressions => New_List (New_Copy_Tree (Low_B)));\n \n-            TestL := Expand_Composite_Equality (Nod, Ctyp, L, R);\n+            TestL := Expand_Composite_Equality (Ltyp, Nod, Ctyp, L, R);\n \n             L :=\n               Make_Indexed_Component (Loc,\n@@ -2022,7 +2025,7 @@ package body Exp_Ch4 is\n                 Prefix      => New_Rhs,\n                 Expressions => New_List (New_Copy_Tree (High_B)));\n \n-            TestH := Expand_Composite_Equality (Nod, Ctyp, L, R);\n+            TestH := Expand_Composite_Equality (Ltyp, Nod, Ctyp, L, R);\n \n             return\n               Make_And_Then (Loc, Left_Opnd => TestL, Right_Opnd => TestH);\n@@ -2435,20 +2438,21 @@ package body Exp_Ch4 is\n    --  case because it is not possible to respect normal Ada visibility rules.\n \n    function Expand_Composite_Equality\n-     (Nod : Node_Id;\n-      Typ : Entity_Id;\n-      Lhs : Node_Id;\n-      Rhs : Node_Id) return Node_Id\n+     (Outer_Type : Entity_Id;\n+      Nod        : Node_Id;\n+      Comp_Type  : Entity_Id;\n+      Lhs        : Node_Id;\n+      Rhs        : Node_Id) return Node_Id\n    is\n       Loc       : constant Source_Ptr := Sloc (Nod);\n       Full_Type : Entity_Id;\n       Eq_Op     : Entity_Id;\n \n    begin\n-      if Is_Private_Type (Typ) then\n-         Full_Type := Underlying_Type (Typ);\n+      if Is_Private_Type (Comp_Type) then\n+         Full_Type := Underlying_Type (Comp_Type);\n       else\n-         Full_Type := Typ;\n+         Full_Type := Comp_Type;\n       end if;\n \n       --  If the private type has no completion the context may be the\n@@ -2473,7 +2477,7 @@ package body Exp_Ch4 is\n       --  Case of tagged record types\n \n       if Is_Tagged_Type (Full_Type) then\n-         Eq_Op := Find_Primitive_Eq (Typ);\n+         Eq_Op := Find_Primitive_Eq (Comp_Type);\n          pragma Assert (Present (Eq_Op));\n \n          return\n@@ -2635,18 +2639,20 @@ package body Exp_Ch4 is\n \n          --  Equality composes in Ada 2012 for untagged record types. It also\n          --  composes for bounded strings, because they are part of the\n-         --  predefined environment. We could make it compose for bounded\n-         --  strings by making them tagged, or by making sure all subcomponents\n-         --  are set to the same value, even when not used. Instead, we have\n-         --  this special case in the compiler, because it's more efficient.\n-\n-         elsif Ada_Version >= Ada_2012 or else Is_Bounded_String (Typ) then\n+         --  predefined environment (see 4.5.2(32.1/1)). We could make it\n+         --  compose for bounded strings by making them tagged, or by making\n+         --  sure all subcomponents are set to the same value, even when not\n+         --  used. Instead, we have this special case in the compiler, because\n+         --  it's more efficient.\n \n+         elsif Ada_Version >= Ada_2012 or else Is_Bounded_String (Comp_Type)\n+         then\n             --  If no TSS has been created for the type, check whether there is\n             --  a primitive equality declared for it.\n \n             declare\n-               Op : constant Node_Id := Build_Eq_Call (Typ, Loc, Lhs, Rhs);\n+               Op : constant Node_Id :=\n+                 Build_Eq_Call (Comp_Type, Loc, Lhs, Rhs);\n \n             begin\n                --  Use user-defined primitive if it exists, otherwise use\n@@ -2666,6 +2672,33 @@ package body Exp_Ch4 is\n       --  Case of non-record types (always use predefined equality)\n \n       else\n+         --  Print a warning if there is a user-defined \"=\", because it can be\n+         --  surprising that the predefined \"=\" takes precedence over it.\n+\n+         --  Suppress the warning if the \"user-defined\" one is in the\n+         --  predefined library, because those are defined to compose\n+         --  properly by RM-4.5.2(32.1/1). Intrinsics also compose.\n+\n+         declare\n+            Op : constant Entity_Id := Find_Primitive_Eq (Comp_Type);\n+         begin\n+            if Warn_On_Ignored_Equality\n+              and then Present (Op)\n+              and then not In_Predefined_Unit (Base_Type (Comp_Type))\n+              and then not Is_Intrinsic_Subprogram (Op)\n+            then\n+               pragma Assert\n+                 (Is_First_Subtype (Outer_Type)\n+                   or else Is_Generic_Actual_Type (Outer_Type));\n+               Error_Msg_Node_1 := Outer_Type;\n+               Error_Msg_Node_2 := Comp_Type;\n+               Error_Msg\n+                 (\"?_q?\"\"=\"\" for type & uses predefined \"\"=\"\" for }\", Loc);\n+               Error_Msg_Sloc := Sloc (Op);\n+               Error_Msg (\"\\?_q?\"\"=\"\" # is ignored here\", Loc);\n+            end if;\n+         end;\n+\n          return Make_Op_Eq (Loc, Left_Opnd => Lhs, Right_Opnd => Rhs);\n       end if;\n    end Expand_Composite_Equality;\n@@ -13347,7 +13380,7 @@ package body Exp_Ch4 is\n             end if;\n \n             Check :=\n-              Expand_Composite_Equality (Nod, Etype (C),\n+              Expand_Composite_Equality (Typ, Nod, Etype (C),\n                Lhs =>\n                  Make_Selected_Component (Loc,\n                    Prefix        => New_Lhs,"}, {"sha": "7efd1058afa7fc530b9c3ded55a6b9482c16a0db", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -97,7 +97,7 @@ package Exp_Ch4 is\n    --  individually to yield the required Boolean result. Loc is the\n    --  location for the generated nodes. Typ is the type of the record, and\n    --  Lhs, Rhs are the record expressions to be compared, these\n-   --  expressions need not to be analyzed but have to be side-effect free.\n+   --  expressions need not be analyzed but have to be side-effect free.\n    --  Nod provides the Sloc value for generated code.\n \n    procedure Expand_Set_Membership (N : Node_Id);"}, {"sha": "ff5cfa9dbce90a7851c725b5bad64fd30f7f36c4", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -10732,6 +10732,9 @@ switch are:\n @item \n @code{-gnatw.q} (questionable layout of record types)\n \n+@item \n+@code{-gnatw_q} (ignored equality)\n+\n @item \n @code{-gnatw_r} (out-of-order record representation clauses)\n \n@@ -11948,6 +11951,34 @@ This switch suppresses warnings for cases where the default layout of\n a record type would very likely cause inefficiencies.\n @end table\n \n+@geindex -gnatw_q (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_q}\n+\n+`Activate warnings for ignored equality operators.'\n+\n+This switch activates warnings for a user-defined \u201c=\u201d function that does\n+not compose (i.e. is ignored for a predefined \u201c=\u201d for a composite type\n+containing a component whose type has the user-defined \u201c=\u201d as\n+primitive). Note that the user-defined \u201c=\u201d must be a primitive operator\n+in order to trigger the warning.\n+\n+The default is that these warnings are not given.\n+@end table\n+\n+@geindex -gnatw_Q (gcc)\n+\n+\n+@table @asis\n+\n+@item @code{-gnatw_Q}\n+\n+`Suppress warnings for ignored equality operators.'\n+@end table\n+\n @geindex -gnatwr (gcc)\n \n "}, {"sha": "244e53f57528e278054db44e8700db6c1d47a744", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -192,8 +192,13 @@ package body Sem_Case is\n            record\n               Low, High : Uint;\n            end record;\n+         function \"=\" (X, Y : Discrete_Range_Info) return Boolean is abstract;\n+         --  Here (and below), we don't use \"=\", which is a good thing,\n+         --  because it wouldn't work, because the user-defined \"=\" on\n+         --  Uint does not compose according to Ada rules.\n \n          type Composite_Range_Info is array (Part_Id) of Discrete_Range_Info;\n+         function \"=\" (X, Y : Composite_Range_Info) return Boolean is abstract;\n \n          type Choice_Range_Info (Is_Others : Boolean := False) is\n            record\n@@ -204,6 +209,7 @@ package body Sem_Case is\n                     null;\n               end case;\n            end record;\n+         function \"=\" (X, Y : Choice_Range_Info) return Boolean is abstract;\n \n          type Choices_Range_Info is array (Choice_Id) of Choice_Range_Info;\n "}, {"sha": "e651b205be22405ed431354bbbfb58877f5ec875", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -1887,7 +1887,7 @@ package Sem_Util is\n \n    function Is_Bounded_String (T : Entity_Id) return Boolean;\n    --  True if T is a bounded string type. Used to make sure \"=\" composes\n-   --  properly for bounded string types.\n+   --  properly for bounded string types (see 4.5.2(32.1/1)).\n \n    function Is_By_Protected_Procedure (Id : Entity_Id) return Boolean;\n    --  Determine whether entity Id denotes a procedure with synchronization"}, {"sha": "733c96206316df6f38872ccb8a98b63b91d2c181", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -80,6 +80,7 @@ package body Warnsw is\n       Warn_On_Questionable_Layout          := Setting;\n       Warn_On_Questionable_Missing_Parens  := Setting;\n       Warn_On_Record_Holes                 := Setting;\n+      Warn_On_Ignored_Equality             := Setting;\n       Warn_On_Component_Order              := Setting;\n       Warn_On_Redundant_Constructs         := Setting;\n       Warn_On_Reverse_Bit_Order            := Setting;\n@@ -181,6 +182,8 @@ package body Warnsw is\n         W.Warn_On_Questionable_Missing_Parens;\n       Warn_On_Record_Holes                 :=\n         W.Warn_On_Record_Holes;\n+      Warn_On_Ignored_Equality              :=\n+        W.Warn_On_Ignored_Equality;\n       Warn_On_Component_Order              :=\n         W.Warn_On_Component_Order;\n       Warn_On_Redundant_Constructs         :=\n@@ -295,6 +298,8 @@ package body Warnsw is\n         Warn_On_Questionable_Missing_Parens;\n       W.Warn_On_Record_Holes                 :=\n         Warn_On_Record_Holes;\n+      W.Warn_On_Ignored_Equality             :=\n+        Warn_On_Ignored_Equality;\n       W.Warn_On_Component_Order              :=\n         Warn_On_Component_Order;\n       W.Warn_On_Redundant_Constructs         :=\n@@ -516,6 +521,12 @@ package body Warnsw is\n          when 'P' =>\n             Warn_On_Pedantic_Checks := False;\n \n+         when 'q' =>\n+            Warn_On_Ignored_Equality := True;\n+\n+         when 'Q' =>\n+            Warn_On_Ignored_Equality := False;\n+\n          when 'r' =>\n             Warn_On_Component_Order := True;\n "}, {"sha": "9edd6bea37ef383f65ef0ab369e953112de3bb81", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=2702882fdbd14ad647ea2a88c7f9ea2cd62fa23e", "patch": "@@ -77,6 +77,12 @@ package Warnsw is\n    --  Warn when explicit record component clauses leave uncovered holes (gaps)\n    --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n \n+   Warn_On_Ignored_Equality : Boolean := False;\n+   --  Warn when a user-defined \"=\" function does not compose (i.e. is ignored\n+   --  for a predefined \"=\" for a composite type containing a component of\n+   --  whose type has the user-defined \"=\" as primitive). Off by default, and\n+   --  set by -gnatw_q (but not -gnatwa).\n+\n    Warn_On_Component_Order : Boolean := False;\n    --  Warn when record component clauses are out of order with respect to the\n    --  component declarations, or if the memory layout is out of order with\n@@ -140,6 +146,7 @@ package Warnsw is\n       Warn_On_Questionable_Layout          : Boolean;\n       Warn_On_Questionable_Missing_Parens  : Boolean;\n       Warn_On_Record_Holes                 : Boolean;\n+      Warn_On_Ignored_Equality             : Boolean;\n       Warn_On_Component_Order              : Boolean;\n       Warn_On_Redundant_Constructs         : Boolean;\n       Warn_On_Reverse_Bit_Order            : Boolean;\n@@ -156,7 +163,7 @@ package Warnsw is\n    end record;\n \n    function Save_Warnings return Warning_Record;\n-   --  Returns current settingh of warnings\n+   --  Returns current settings of warnings\n \n    procedure Restore_Warnings (W : Warning_Record);\n    --  Restores current settings of warning flags from W"}]}