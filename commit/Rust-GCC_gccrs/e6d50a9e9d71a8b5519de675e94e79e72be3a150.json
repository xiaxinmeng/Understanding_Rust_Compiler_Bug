{"sha": "e6d50a9e9d71a8b5519de675e94e79e72be3a150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkNTBhOWU5ZDcxYThiNTUxOWRlNjc1ZTk0ZTc5ZTcyYmUzYTE1MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:34:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-01-03T15:34:18Z"}, "message": "bld.ads, [...]: Remove gpr2make, replaced by gprmake.\n\n\t* bld.ads, bld.adb, bld-io.ads, bld-io.adb, gprcmd.adb,\n\tgpr2make.ads, gpr2make.adb: Remove gpr2make, replaced by gprmake.\n\n\t* Makefile.in: Add support to build shared Ada libraries on solaris x86\n\tRemove gpr2make, replaced by gprmake.\n\tRemove references to gnatmem and libaddr2line.\n\tAdd indepsw.adb<indepsw-linux.adb to TOOLS_TARGET_PAIRS for IA64 linux.\n\t(gnatlib-shared-darwin): Add \"-fno-common\" to GNATLIBCFLAGS.\n\tAdd support for specialized version of Ada.Numerics.Aux for Darwin: use\n\ta-numaux-darwin.ads and a-numaux-darwin.adb\n\tEnable mlib-tgt-lynxos.adb on lynxos.\n\n\t* Make-lang.in: Remove rules for gpr2make.\n\tWhen generating sdefault.adb, do not call Relocate_Path\n\ton S3 for function Target_Name, as it is not a path.\n\tRemove references to gnatmem and libaddr2line.\n\n\t* a-numaux-darwin.ads, a-numaux-darwin.adb, g-soccon-darwin.ads: New\n\tfiles.\n\nFrom-SVN: r92831", "tree": {"sha": "163dcbd1c122008f040766e9e59e37cdd5307c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/163dcbd1c122008f040766e9e59e37cdd5307c1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d50a9e9d71a8b5519de675e94e79e72be3a150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d50a9e9d71a8b5519de675e94e79e72be3a150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d50a9e9d71a8b5519de675e94e79e72be3a150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d50a9e9d71a8b5519de675e94e79e72be3a150/comments", "author": null, "committer": null, "parents": [{"sha": "165eab5ffcf0a4ffe7505982de815605f15e4918", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/165eab5ffcf0a4ffe7505982de815605f15e4918", "html_url": "https://github.com/Rust-GCC/gccrs/commit/165eab5ffcf0a4ffe7505982de815605f15e4918"}], "stats": {"total": 5265, "additions": 481, "deletions": 4784}, "files": [{"sha": "9a03fafa6d73b8752551eb04c6f87a9536d3cb74", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 2, "deletions": 46, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=e6d50a9e9d71a8b5519de675e94e79e72be3a150", "patch": "@@ -321,10 +321,6 @@ ada.all.cross:\n \tthen \\\n \t   $(MV) gnatmake$(exeext)  gnatmake-cross$(exeext); \\\n \tfi\n-\t-if [ -f gnatmem$(exeext) ] ; \\\n-\tthen \\\n-\t   $(MV) gnatmem$(exeext)  gnatmem-cross$(exeext); \\\n-\tfi\n \t-if [ -f gnatname$(exeext) ] ; \\\n \tthen \\\n \t   $(MV) gnatname$(exeext)  gnatname-cross$(exeext); \\\n@@ -353,14 +349,6 @@ ada.all.cross:\n \tthen \\\n \t   $(MV) gprmake$(exeext)  gprmake-cross$(exeext); \\\n \tfi\n-\t-if [ -f gpr2make$(exeext) ] ; \\\n-\tthen \\\n-\t   $(MV) gpr2make$(exeext)  gpr2make-cross$(exeext); \\\n-\tfi\n-\t-if [ -f gprcmd$(exeext) ] ; \\\n-\tthen \\\n-\t   $(MV) gprcmd$(exeext)  gprcmd-cross$(exeext); \\\n-\tfi\n \n ada.start.encap:\n ada.rest.encap:\n@@ -447,7 +435,7 @@ ada.install-normal:\n # and also as either gnatbind (if native) or $(tooldir)/bin/gnatbind\n # likewise for gnatf, gnatchop, and gnatlink, gnatkr, gnatmake, gnat,\n # gnatprep, gnatbl, gnatls, gnatxref, gnatfind, gnatname, gnatclean,\n-# gnatsym, gprmake, gpr2make, gprcmd\n+# gnatsym, gprmake\n ada.install-common:\n \t$(MKDIR) $(DESTDIR)$(bindir)\n \t-if [ -f gnat1$(exeext) ] ; \\\n@@ -571,17 +559,6 @@ ada.install-common:\n \t  fi ; \\\n \tfi\n \t-if [ -f gnat1$(exeext) ] ; \\\n-\tthen \\\n-\t  if [ -f gnatmem-cross$(exeext) ] ; \\\n-\t  then \\\n-\t    $(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatmem$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gnatmem-cross$(exeext) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatmem$(exeext); \\\n-\t  else \\\n-\t    $(RM) $(DESTDIR)$(bindir)/gnatmem$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gnatmem$(exeext) $(DESTDIR)$(bindir)/gnatmem$(exeext); \\\n-\t  fi ; \\\n-\tfi\n-\t-if [ -f gnat1$(exeext) ] ; \\\n \tthen \\\n \t  if [ -f gnatname-cross$(exeext) ] ; \\\n \t  then \\\n@@ -651,22 +628,6 @@ ada.install-common:\n \t    $(INSTALL_PROGRAM) gprmake$(exeext) $(DESTDIR)$(bindir)/gprmake$(exeext); \\\n \t  fi ; \\\n \tfi\n-\t-if [ -f gnat1$(exeext) ] ; \\\n-\tthen \\\n-\t  if [ -f gpr2make$(exeext) ] ; \\\n-\t  then \\\n-\t    $(RM) $(DESTDIR)$(bindir)/gpr2make$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gpr2make$(exeext) $(DESTDIR)$(bindir)/gpr2make$(exeext); \\\n-\t  fi ; \\\n-\tfi\n-\t-if [ -f gnat1$(exeext) ] ; \\\n-\tthen \\\n-\t  if [ -f gprcmd$(exeext) ] ; \\\n-\t  then \\\n-\t    $(RM) $(DESTDIR)$(bindir)/gprcmd$(exeext); \\\n-\t    $(INSTALL_PROGRAM) gprcmd$(exeext) $(DESTDIR)$(bindir)/gprcmd$(exeext); \\\n-\t  fi ; \\\n-\tfi\n #\n # Gnatsym is only built on some platforms, including VMS\n #\n@@ -738,7 +699,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(bindir)/gnatlink$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatls$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatmake$(exeext)\n-\t-$(RM) $(DESTDIR)$(bindir)/gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatprep$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/gnatxref$(exeext)\n@@ -755,7 +715,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatlink$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatls$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatmake$(exeext)\n-\t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatprep$(exeext)\n \t-$(RM) $(DESTDIR)$(bindir)/$(target_noncanonical)-gnatxref$(exeext)\n@@ -772,7 +731,6 @@ ada.uninstall:\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatlink$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatls$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatmake$(exeext)\n-\t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatmem$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatname$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatprep$(exeext)\n \t-$(RM) $(DESTDIR)$(tooldir)/bin/gnatxref$(exeext)\n@@ -801,14 +759,12 @@ ada.distclean:\n \t-$(RM) gnatlink$(exeext)\n \t-$(RM) gnatls$(exeext)\n \t-$(RM) gnatmake$(exeext)\n-\t-$(RM) gnatmem$(exeext)\n \t-$(RM) gnatname$(exeext)\n \t-$(RM) gnatprep$(exeext)\n \t-$(RM) gnatfind$(exeext)\n \t-$(RM) gnatxref$(exeext)\n \t-$(RM) gnatclean$(exeext)\n \t-$(RM) gnatsym$(exeext)\n-\t-$(RM) gpr2make$(exeext)\n \t-$(RM) gprmake$(exeext)\n # Gnatlbr is only used on VMS\n \t-$(RM) gnatlbr$(exeext)\n@@ -969,7 +925,7 @@ ada/stamp-sdefault : $(srcdir)/version.c Makefile\n \t$(ECHO) \"   end Object_Dir_Default_Name;\" >>tmp-sdefault.adb\n \t$(ECHO) \"   function Target_Name return String_Ptr is\" >>tmp-sdefault.adb\n \t$(ECHO) \"   begin\" >>tmp-sdefault.adb\n-\t$(ECHO) \"      return Relocate_Path (S0, S3);\" >>tmp-sdefault.adb\n+\t$(ECHO) \"      return new String'(S3);\" >>tmp-sdefault.adb\n \t$(ECHO) \"   end Target_Name;\" >>tmp-sdefault.adb\n \t$(ECHO) \"   function Search_Dir_Prefix return String_Ptr is\" >>tmp-sdefault.adb\n \t$(ECHO) \"   begin\" >>tmp-sdefault.adb"}, {"sha": "43809186177ae59beb9c225cfde5b9ae2544045f", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 21, "deletions": 44, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=e6d50a9e9d71a8b5519de675e94e79e72be3a150", "patch": "@@ -133,8 +133,6 @@ THREAD_KIND = native\n THREADSLIB =\n GMEM_LIB =\n MISCLIB =\n-SYMLIB =\n-ADDR2LINE_SYMLIB = -laddr2line -lbfd -liberty $(LIBINTL)\n SYMDEPS = $(LIBINTL_DEP)\n OUTPUT_OPTION = @OUTPUT_OPTION@\n \n@@ -716,7 +714,6 @@ ifeq ($(strip $(filter-out sparc sun solaris%,$(targ))),)\n \n   THREADSLIB = -lposix4 -lthread\n   MISCLIB = -lposix4 -lnsl -lsocket\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   SO_OPTS = -Wl,-h,\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n@@ -800,10 +797,13 @@ ifeq ($(strip $(filter-out %86 solaris2%,$(arch) $(osys))),)\n   g-soliop.ads<g-soliop-solaris.ads \\\n   system.ads<system-solaris-x86.ads\n \n+  TOOLS_TARGET_PAIRS=mlib-tgt.adb<mlib-tgt-solaris.adb\n+\n   THREADSLIB = -lposix4 -lthread\n   MISCLIB = -lposix4 -lnsl -lsocket\n   SO_OPTS = -Wl,-h,\n   GNATLIB_SHARED = gnatlib-shared-dual\n+  GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   LIBRARY_VERSION := $(LIB_VERSION)\n endif\n@@ -829,7 +829,6 @@ ifeq ($(strip $(filter-out %86 linux%,$(arch) $(osys))),)\n     mlib-tgt.adb<mlib-tgt-linux.adb \\\n     indepsw.adb<indepsw-linux.adb\n \n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   THREADSLIB = -lpthread\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n@@ -877,7 +876,6 @@ ifeq ($(strip $(filter-out %86 freebsd%,$(arch) $(osys))),)\n   mlib-tgt.adb<mlib-tgt-linux.adb\n   GNATLIB_SHARED = gnatlib-shared-dual\n \n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   THREADSLIB= -lc_r\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n@@ -1012,7 +1010,6 @@ ifeq ($(strip $(filter-out hppa% hp hpux11%,$(targ))),)\n   TOOLS_TARGET_PAIRS = mlib-tgt.adb<mlib-tgt-hpux.adb\n   TGT_LIB = /usr/lib/libcl.a\n   THREADSLIB = -lpthread\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   GMEM_LIB = gmemlib\n   soext = .sl\n   SO_OPTS = -Wl,+h,\n@@ -1081,11 +1078,11 @@ ifeq ($(strip $(filter-out ibm aix%,$(manu) $(osys))),)\n   indepsw.adb<indepsw-aix.adb\n \n   GMEM_LIB = gmemlib\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n-\n endif\n \n ifeq ($(strip $(filter-out lynxos,$(osys))),)\n+  TOOLS_TARGET_PAIRS=mlib-tgt.adb<mlib-tgt-lynxos.adb \n+\n   ifeq ($(strip $(filter-out %86 lynxos,$(arch) $(osys))),)\n     LIBGNAT_TARGET_PAIRS = \\\n     a-numaux.adb<a-numaux-x86.adb \\\n@@ -1130,7 +1127,6 @@ ifeq ($(strip $(filter-out lynxos,$(osys))),)\n       s-tpopsp.adb<s-tpopsp-lynxos.adb \\\n       system.ads<system-lynxos-ppc.ads\n     endif\n-\n   endif\n endif\n \n@@ -1168,7 +1164,6 @@ ifeq ($(strip $(filter-out alpha% dec osf%,$(targ))),)\n   TOOLS_TARGET_PAIRS=mlib-tgt.adb<mlib-tgt-tru64.adb\n \n   GMEM_LIB=gmemlib\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   THREADSLIB = -lpthread -lmach -lexc -lrt\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   GNATLIB_SHARED = gnatlib-shared-default\n@@ -1304,7 +1299,6 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n   indepsw.adb<indepsw-mingw.adb\n \n   MISCLIB = -lwsock32\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   EXTRA_GNATTOOLS = ../../gnatdll$(exeext)\n@@ -1335,7 +1329,6 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(arch) $(osys))),)\n     mlib-tgt.adb<mlib-tgt-linux.adb \\\n     indepsw.adb<indepsw-linux.adb\n \n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   THREADSLIB = -lpthread\n   GNATLIB_SHARED = gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n@@ -1358,7 +1351,10 @@ ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n   s-taspri.ads<s-taspri-linux.ads \\\n   system.ads<system-linux-ia64.ads\n \n-  TOOLS_TARGET_PAIRS=mlib-tgt.adb<mlib-tgt-linux.adb\n+  TOOLS_TARGET_PAIRS =  \\\n+    mlib-tgt.adb<mlib-tgt-linux.adb \\\n+    indepsw.adb<indepsw-linux.adb\n+\n   MISCLIB=\n   THREADSLIB=-lpthread\n   GNATLIB_SHARED=gnatlib-shared-dual\n@@ -1382,7 +1378,6 @@ ifeq ($(strip $(filter-out %x86_64 linux%,$(arch) $(osys))),)\n   system.ads<system-linux-x86_64.ads\n \n   TOOLS_TARGET_PAIRS=mlib-tgt.adb<mlib-tgt-linux.adb\n-  SYMLIB = $(ADDR2LINE_SYMLIB)\n   THREADSLIB=-lpthread\n   GNATLIB_SHARED=gnatlib-shared-dual\n   GMEM_LIB = gmemlib\n@@ -1401,7 +1396,9 @@ ifeq ($(strip $(filter-out powerpc darwin%,$(arch) $(osys))),)\n   s-taprop.adb<s-taprop-posix.adb \\\n   s-taspri.ads<s-taspri-posix.ads \\\n   s-tpopsp.adb<s-tpopsp-posix-foreign.adb \\\n-  g-soccon.ads<g-soccon-aix.ads \\\n+  g-soccon.ads<g-soccon-darwin.ads \\\n+  a-numaux.ads<a-numaux-darwin.ads \\\n+  a-numaux.adb<a-numaux-darwin.adb \\\n   system.ads<system-darwin-ppc.ads\n \n   TOOLS_TARGET_PAIRS =  \\\n@@ -1413,9 +1410,7 @@ ifeq ($(strip $(filter-out powerpc darwin%,$(arch) $(osys))),)\n   GMEM_LIB = gmemlib\n \n   LIBRARY_VERSION := $(LIB_VERSION)\n-\n   soext = .dylib\n-\n endif\n \n # The runtime library for gnat comprises two directories.  One contains the\n@@ -1430,7 +1425,7 @@ endif\n LIBGNAT_SRCS = ada.h adaint.c adaint.h argv.c cio.c cstreams.c \\\n   errno.c exit.c cal.c ctrl_c.c \\\n   raise.h raise.c sysdep.c aux-io.c init.c \\\n-  final.c tracebak.c tb-alvms.c tb-alvxw.c expect.c mkdir.c socket.c \\\n+  final.c tracebak.c tb-alvms.c tb-alvxw.c expect.c mkdir.c socket.c gsocket.h \\\n   $(EXTRA_LIBGNAT_SRCS)\n \n LIBGNAT_OBJS = adaint.o argv.o cio.o cstreams.o ctrl_c.o errno.o exit.o \\\n@@ -1537,14 +1532,14 @@ gnattools2: ../stamp-tools\n \t  ../../gnatls$(exeext) ../../gnatprep$(exeext) \\\n \t  ../../gnatxref$(exeext) \\\n \t  ../../gnatfind$(exeext) ../../gnatname$(exeext) \\\n-\t  ../../gnatclean$(exeext) ../../gprmake$(exeext) \\\n-\t  ../../gprcmd$(exeext)   ../../gpr2make$(exeext)\n+\t  ../../gnatclean$(exeext) ../../gprmake$(exeext)\n \n # These tools are only built for the native version.\n gnattools3: ../stamp-tools\n-#\t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n-#\t  TOOLSCASE=native top_builddir=../../.. \\\n-#\t  ../../gnatmem$(exeext) $(EXTRA_GNATTOOLS)\n+ifneq ($(EXTRA_GNATTOOLS),)\n+\t$(MAKE) -C tools -f ../Makefile $(TOOLS_FLAGS_TO_PASS) \\\n+\t  TOOLSCASE=native top_builddir=../../.. $(EXTRA_GNATTOOLS)\n+endif\n \n # those tools are only built for the cross version\n gnattools4: ../stamp-tools\n@@ -1585,12 +1580,6 @@ gnattools4: ../stamp-tools\n \t$(GNATLINK) -v gprmake -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n \t\t    $(TOOLS_LIBS)\n \n-../../gpr2make$(exeext): ../stamp-tools\n-\t$(GNATMAKE) -c $(ADA_INCLUDES) gpr2make --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gpr2make \n-\t$(GNATLINK) -v gpr2make -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n-\n ../../gnatprep$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatprep --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatprep \n@@ -1621,25 +1610,12 @@ gnattools4: ../stamp-tools\n \t$(GNATLINK) -v gnatsym -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n                     $(TOOLS_LIBS)\n \n-../../gnatmem$(exeext): ../stamp-tools gmem.o $(SYMDEPS)\n-ifeq ($(GMEM_LIB),gmemlib)\n-\t   $(GNATMAKE) -c $(ADA_INCLUDES) gnatmem --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t   $(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatmem \n-\t   $(GNATLINK) -v gnatmem -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t            gmem.o $(SYMLIB) $(TOOLS_LIBS)\n-endif \n-\n ../../gnatdll$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatdll --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) $(GNATBIND_FLAGS) gnatdll\n \t$(GNATLINK) -v gnatdll -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n \t\t$(TOOLS_LIBS)\n \n-../../gprcmd$(exeext): ../stamp-tools\n-\t$(GNATMAKE) -c $(ADA_INCLUDES) gprcmd --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n-\t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gprcmd \n-\t$(GNATLINK) -v gprcmd -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n-\n ../../vxaddr2line$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c  $(ADA_INCLUDES) vxaddr2line --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxaddr2line \n@@ -1890,7 +1866,8 @@ gnatlib-shared-win32:\n gnatlib-shared-darwin:\n \t$(MAKE) $(FLAGS_TO_PASS) \\\n \t     GNATLIBFLAGS=\"$(GNATLIBFLAGS)\" \\\n-\t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS)\" \\\n+\t     GNATLIBCFLAGS=\"$(GNATLIBCFLAGS) $(TARGET_LIBGCC2_CFLAGS) \\\n+\t                    -fno-common\" \\\n \t     THREAD_KIND=\"$(THREAD_KIND)\" \\\n \t     gnatlib\n \t$(RM) rts/libgnat$(soext) rts/libgnarl$(soext)\n@@ -2039,7 +2016,7 @@ final.o   : raise.h final.c\n gmem.o    : gmem.c\n link.o    : link.c\n mkdir.o   : mkdir.c\n-socket.o  : socket.c\n+socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n \n cio.o     : cio.c "}, {"sha": "19d8881a9f485dc254ff9da5adc480b81b83a227", "filename": "gcc/ada/a-numaux-darwin.adb", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fa-numaux-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fa-numaux-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.adb?ref=e6d50a9e9d71a8b5519de675e94e79e72be3a150", "patch": "@@ -0,0 +1,186 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     A D A . N U M E R I C S . A U X                      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                          (Apple OS X Version)                            --\n+--                                                                          --\n+--          Copyright (C) 1998-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  File a-numaux.adb <- a-numaux-darwin.adb\n+\n+package body Ada.Numerics.Aux is\n+\n+   -----------------------\n+   -- Local subprograms --\n+   -----------------------\n+\n+   procedure Reduce (X : in out Double; Q : out Natural);\n+   --  Implements reduction of X by Pi/2. Q is the quadrant of the final\n+   --  result in the range 0 .. 3. The absolute value of X is at most Pi/4.\n+\n+   --  The following three functions implement Chebishev approximations\n+   --  of the trigoniometric functions in their reduced domain.\n+   --  These approximations have been computed using Maple.\n+\n+   function Sine_Approx (X : Double) return Double;\n+   function Cosine_Approx (X : Double) return Double;\n+\n+   pragma Inline (Reduce);\n+   pragma Inline (Sine_Approx);\n+   pragma Inline (Cosine_Approx);\n+\n+   function Cosine_Approx (X : Double) return Double is\n+      XX : constant Double := X * X;\n+   begin\n+      return (((((16#8.DC57FBD05F640#E-08 * XX\n+              - 16#4.9F7D00BF25D80#E-06) * XX\n+              + 16#1.A019F7FDEFCC2#E-04) * XX\n+              - 16#5.B05B058F18B20#E-03) * XX\n+              + 16#A.AAAAAAAA73FA8#E-02) * XX\n+              - 16#7.FFFFFFFFFFDE4#E-01) * XX\n+              - 16#3.655E64869ECCE#E-14 + 1.0;\n+   end Cosine_Approx;\n+\n+   function Sine_Approx (X : Double) return Double is\n+      XX : constant Double := X * X;\n+   begin\n+      return (((((16#A.EA2D4ABE41808#E-09 * XX\n+              - 16#6.B974C10F9D078#E-07) * XX\n+              + 16#2.E3BC673425B0E#E-05) * XX\n+              - 16#D.00D00CCA7AF00#E-04) * XX\n+              + 16#2.222222221B190#E-02) * XX\n+              - 16#2.AAAAAAAAAAA44#E-01) * (XX * X) + X;\n+   end Sine_Approx;\n+\n+   ------------\n+   -- Reduce --\n+   ------------\n+\n+   procedure Reduce (X : in out Double; Q : out Natural) is\n+      Half_Pi     : constant := Pi / 2.0;\n+      Two_Over_Pi : constant := 2.0 / Pi;\n+\n+      HM : constant := Integer'Min (Double'Machine_Mantissa / 2, Natural'Size);\n+      M  : constant Double := 0.5 + 2.0**(1 - HM); -- Splitting constant\n+      P1 : constant Double := Double'Leading_Part (Half_Pi, HM);\n+      P2 : constant Double := Double'Leading_Part (Half_Pi - P1, HM);\n+      P3 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2, HM);\n+      P4 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2 - P3, HM);\n+      P5 : constant Double := Double'Leading_Part (Half_Pi - P1 - P2 - P3\n+                                                                 - P4, HM);\n+      P6 : constant Double := Double'Model (Half_Pi - P1 - P2 - P3 - P4 - P5);\n+      K  : Double := X * Two_Over_Pi;\n+   begin\n+      --  For X < 2.0**HM, all products below are computed exactly.\n+      --  Due to cancellation effects all subtractions are exact as well.\n+      --  As no double extended floating-point number has more than 75\n+      --  zeros after the binary point, the result will be the correctly\n+      --  rounded result of X - K * (Pi / 2.0).\n+\n+      while abs K >= 2.0**HM loop\n+         K := K * M - (K * M - K);\n+         X := (((((X - K * P1) - K * P2) - K * P3)\n+                     - K * P4) - K * P5) - K * P6;\n+         K := X * Two_Over_Pi;\n+      end loop;\n+\n+      if K /= K then\n+\n+         --  K is not a number, because X was not finite\n+\n+         raise Constraint_Error;\n+      end if;\n+\n+      K := Double'Rounding (K);\n+      Q := Integer (K) mod 4;\n+      X := (((((X - K * P1) - K * P2) - K * P3)\n+                  - K * P4) - K * P5) - K * P6;\n+   end Reduce;\n+\n+   ---------\n+   -- Cos --\n+   ---------\n+\n+   function Cos (X : Double) return Double is\n+      Reduced_X : Double := abs X;\n+      Quadrant  : Natural range 0 .. 3;\n+\n+   begin\n+      if Reduced_X > Pi / 4.0 then\n+         Reduce (Reduced_X, Quadrant);\n+\n+         case Quadrant is\n+            when 0 =>\n+               return Cosine_Approx (Reduced_X);\n+\n+            when 1 =>\n+               return Sine_Approx (-Reduced_X);\n+\n+            when 2 =>\n+               return -Cosine_Approx (Reduced_X);\n+\n+            when 3 =>\n+               return Sine_Approx (Reduced_X);\n+         end case;\n+      end if;\n+\n+      return Cosine_Approx (Reduced_X);\n+   end Cos;\n+\n+   ---------\n+   -- Sin --\n+   ---------\n+\n+   function Sin (X : Double) return Double is\n+      Reduced_X : Double := X;\n+      Quadrant  : Natural range 0 .. 3;\n+\n+   begin\n+      if abs X > Pi / 4.0 then\n+         Reduce (Reduced_X, Quadrant);\n+\n+         case Quadrant is\n+            when 0 =>\n+               return Sine_Approx (Reduced_X);\n+\n+            when 1 =>\n+               return Cosine_Approx (Reduced_X);\n+\n+            when 2 =>\n+               return Sine_Approx (-Reduced_X);\n+\n+            when 3 =>\n+               return -Cosine_Approx (Reduced_X);\n+         end case;\n+      end if;\n+\n+      return Sine_Approx (Reduced_X);\n+   end Sin;\n+\n+end Ada.Numerics.Aux;"}, {"sha": "6ca8c3c300ae6e4c74763dc2b7f9668e66aede00", "filename": "gcc/ada/a-numaux-darwin.ads", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fa-numaux-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fa-numaux-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.ads?ref=e6d50a9e9d71a8b5519de675e94e79e72be3a150", "patch": "@@ -0,0 +1,109 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT RUNTIME COMPONENTS                          --\n+--                                                                          --\n+--                     A D A . N U M E R I C S . A U X                      --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                          (Apple OS X Version)                            --\n+--                                                                          --\n+--          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This version is for use with normal Unix math functions, except for\n+--  sine/cosine which have been implemented directly in Ada to get\n+--  the required accuracy in OS X.  Alternative packages are used\n+--  on OpenVMS (different import names), VxWorks (no need for the\n+--  -lm Linker_Options), and on the x86 (where we have two\n+--  versions one using inline ASM, and one importing from the C long\n+--  routines that take 80-bit arguments).\n+\n+package Ada.Numerics.Aux is\n+pragma Pure (Aux);\n+\n+   pragma Linker_Options (\"-lm\");\n+\n+   type Double is digits 15;\n+   --  Type Double is the type used to call the C routines\n+\n+   --  The following functions have been implemented in Ada, since\n+   --  the OS X math library didn't meet accuracy requirements for\n+   --  argument reduction. The implementation here has been tailored\n+   --  to match Ada strict mode Numerics requirements while maintaining\n+   --  maximum efficiency.\n+   function Sin (X : Double) return Double;\n+   pragma Inline (Sin);\n+\n+   function Cos (X : Double) return Double;\n+   pragma Inline (Cos);\n+\n+   --  We import these functions directly from C. Note that we label them\n+   --  all as pure functions, because indeed all of them are in fact pure!\n+\n+   function Tan (X : Double) return Double;\n+   pragma Import (C, Tan, \"tan\");\n+   pragma Pure_Function (Tan);\n+\n+   function Exp (X : Double) return Double;\n+   pragma Import (C, Exp, \"exp\");\n+   pragma Pure_Function (Exp);\n+\n+   function Sqrt (X : Double) return Double;\n+   pragma Import (C, Sqrt, \"sqrt\");\n+   pragma Pure_Function (Sqrt);\n+\n+   function Log (X : Double) return Double;\n+   pragma Import (C, Log, \"log\");\n+   pragma Pure_Function (Log);\n+\n+   function Acos (X : Double) return Double;\n+   pragma Import (C, Acos, \"acos\");\n+   pragma Pure_Function (Acos);\n+\n+   function Asin (X : Double) return Double;\n+   pragma Import (C, Asin, \"asin\");\n+   pragma Pure_Function (Asin);\n+\n+   function Atan (X : Double) return Double;\n+   pragma Import (C, Atan, \"atan\");\n+   pragma Pure_Function (Atan);\n+\n+   function Sinh (X : Double) return Double;\n+   pragma Import (C, Sinh, \"sinh\");\n+   pragma Pure_Function (Sinh);\n+\n+   function Cosh (X : Double) return Double;\n+   pragma Import (C, Cosh, \"cosh\");\n+   pragma Pure_Function (Cosh);\n+\n+   function Tanh (X : Double) return Double;\n+   pragma Import (C, Tanh, \"tanh\");\n+   pragma Pure_Function (Tanh);\n+\n+   function Pow (X, Y : Double) return Double;\n+   pragma Import (C, Pow, \"pow\");\n+   pragma Pure_Function (Pow);\n+\n+end Ada.Numerics.Aux;"}, {"sha": "7bd01e6ac6d7b042b9ab21c838639f20538cc417", "filename": "gcc/ada/bld-io.adb", "status": "removed", "additions": 0, "deletions": 285, "changes": 285, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld-io.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld-io.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld-io.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,285 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               B L D - I O                                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---        Copyright (C) 2002-2003 Free Software Foundation, Inc.            --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Ada.Exceptions;\n-with Ada.Text_IO;\n-with Ada.Unchecked_Deallocation;\n-\n-with GNAT.OS_Lib; use GNAT.OS_Lib;\n-with Osint;\n-\n-package body Bld.IO is\n-\n-   use Ada;\n-\n-   Initial_Number_Of_Lines : constant := 100;\n-   Initial_Length_Of_Line  : constant := 50;\n-\n-   type Line is record\n-      Length     : Natural := 0;\n-      Value      : String_Access;\n-      Suppressed : Boolean := False;\n-   end record;\n-   --  One line of a Makefile.\n-   --  Length is the position of the last column in the line.\n-   --  Suppressed is set to True by procedure Suppress.\n-\n-   type Line_Array is array (Positive range <>) of Line;\n-\n-   type Buffer is access Line_Array;\n-\n-   procedure Free is new Ada.Unchecked_Deallocation (Line_Array, Buffer);\n-\n-   Lines : Buffer := new Line_Array (1 .. Initial_Number_Of_Lines);\n-   --  The lines of a Makefile\n-\n-   Current : Positive := 1;\n-   --  Position of the last line in the Makefile\n-\n-   File : Text_IO.File_Type;\n-   --  The current Makefile\n-\n-   type File_Name_Data;\n-   type File_Name_Ref is access File_Name_Data;\n-\n-   type File_Name_Data is record\n-      Value : String_Access;\n-      Next : File_Name_Ref;\n-   end record;\n-   --  Used to record the names of all Makefiles created, so that we may delete\n-   --  them if necessary.\n-\n-   File_Names : File_Name_Ref;\n-   --  List of all the Makefiles created so far.\n-\n-   -----------\n-   -- Close --\n-   -----------\n-\n-   procedure Close is\n-   begin\n-      Flush;\n-      Text_IO.Close (File);\n-\n-   exception\n-      when X : others =>\n-         Text_IO.Put_Line (Exceptions.Exception_Message (X));\n-         Osint.Fail (\"cannot close a Makefile\");\n-   end Close;\n-\n-   ------------\n-   -- Create --\n-   ------------\n-\n-   procedure Create (File_Name : String) is\n-   begin\n-      Text_IO.Create (File, Text_IO.Out_File, File_Name);\n-      Current := 1;\n-      Lines (1).Length := 0;\n-      Lines (1).Suppressed := False;\n-      File_Names :=\n-        new File_Name_Data'(Value => new String'(File_Name),\n-                            Next  => File_Names);\n-   exception\n-      when X : others =>\n-         Text_IO.Put_Line (Exceptions.Exception_Message (X));\n-         Osint.Fail (\"cannot create \"\"\" & File_Name & '\"');\n-   end Create;\n-\n-   ----------------\n-   -- Delete_All --\n-   ----------------\n-\n-   procedure Delete_All is\n-      Success : Boolean;\n-   begin\n-      if Text_IO.Is_Open (File) then\n-         Text_IO.Delete (File);\n-         File_Names := File_Names.Next;\n-      end if;\n-\n-      while File_Names /= null loop\n-         Delete_File (File_Names.Value.all, Success);\n-         File_Names := File_Names.Next;\n-      end loop;\n-   end Delete_All;\n-\n-   -----------\n-   -- Flush --\n-   -----------\n-\n-   procedure Flush is\n-      Last : Natural;\n-   begin\n-      if Lines (Current).Length /= 0 then\n-         Osint.Fail (\"INTERNAL ERROR: flushing before end of line: \"\"\" &\n-                 Lines (Current).Value\n-                   (1 .. Lines (Current).Length));\n-      end if;\n-\n-      for J in 1 .. Current - 1 loop\n-         if not Lines (J).Suppressed then\n-            Last := Lines (J).Length;\n-\n-            --  The last character of a line cannot be a back slash ('\\'),\n-            --  otherwise make has a problem. The only real place were it\n-            --  should happen is for directory names on Windows, and then\n-            --  this terminal back slash is not needed.\n-\n-            if Last > 0 and then Lines (J).Value (Last) = '\\' then\n-               Last := Last - 1;\n-            end if;\n-\n-            Text_IO.Put_Line (File, Lines (J).Value (1 .. Last));\n-         end if;\n-      end loop;\n-\n-      Current := 1;\n-      Lines (1).Length := 0;\n-      Lines (1).Suppressed := False;\n-   end Flush;\n-\n-   ----------\n-   -- Mark --\n-   ----------\n-\n-   procedure Mark (Pos : out Position) is\n-   begin\n-      if Lines (Current).Length /= 0 then\n-         Osint.Fail (\"INTERNAL ERROR: marking before end of line: \"\"\" &\n-                 Lines (Current).Value\n-                   (1 .. Lines (Current).Length));\n-      end if;\n-\n-      Pos := (Value => Current);\n-   end Mark;\n-\n-   ------------------\n-   -- Name_Of_File --\n-   ------------------\n-\n-   function Name_Of_File return String is\n-   begin\n-      return Text_IO.Name (File);\n-   end Name_Of_File;\n-\n-   --------------\n-   -- New_Line --\n-   --------------\n-\n-   procedure New_Line is\n-   begin\n-      Current := Current + 1;\n-\n-      if Current > Lines'Last then\n-         declare\n-            New_Lines : constant Buffer :=\n-                          new Line_Array (1 .. 2 * Lines'Last);\n-\n-         begin\n-            New_Lines (1 .. Lines'Last) := Lines.all;\n-            Free (Lines);\n-            Lines := New_Lines;\n-         end;\n-      end if;\n-\n-      Lines (Current).Length := 0;\n-      Lines (Current).Suppressed := False;\n-\n-      --  Allocate a new line, if necessary\n-\n-      if Lines (Current).Value = null then\n-         Lines (Current).Value := new String (1 .. Initial_Length_Of_Line);\n-      end if;\n-   end New_Line;\n-\n-   ---------\n-   -- Put --\n-   ---------\n-\n-   procedure Put (S : String) is\n-      Length : constant Natural := Lines (Current).Length;\n-\n-   begin\n-      if Length + S'Length > Lines (Current).Value'Length then\n-         declare\n-            New_Line   : String_Access;\n-            New_Length : Positive := 2 * Lines (Current).Value'Length;\n-         begin\n-            while Length + S'Length > New_Length loop\n-               New_Length := 2 * New_Length;\n-            end loop;\n-\n-            New_Line := new String (1 .. New_Length);\n-            New_Line (1 .. Length) := Lines (Current).Value (1 .. Length);\n-            Free (Lines (Current).Value);\n-            Lines (Current).Value := New_Line;\n-         end;\n-      end if;\n-\n-      Lines (Current).Value (Length + 1 .. Length + S'Length) := S;\n-      Lines (Current).Length := Length + S'Length;\n-   end Put;\n-\n-   -------------\n-   -- Release --\n-   -------------\n-\n-   procedure Release (Pos : Position) is\n-   begin\n-      if Lines (Current).Length /= 0 then\n-         Osint.Fail (\"INTERNAL ERROR: releasing before end of line: \"\"\" &\n-                 Lines (Current).Value\n-                   (1 .. Lines (Current).Length));\n-      end if;\n-\n-      if Pos.Value > Current then\n-         Osint.Fail (\"INTERNAL ERROR: releasing ahead of current position\");\n-      end if;\n-\n-      Current := Pos.Value;\n-      Lines (Current).Length := 0;\n-   end Release;\n-\n-   --------------\n-   -- Suppress --\n-   --------------\n-\n-   procedure Suppress (Pos : Position) is\n-   begin\n-      if Pos.Value >= Current then\n-         Osint.Fail (\"INTERNAL ERROR: suppressing ahead of current position\");\n-      end if;\n-\n-      Lines (Pos.Value).Suppressed := True;\n-   end Suppress;\n-\n-begin\n-   --  Allocate the first line.\n-   --  The other ones are allocated by New_Line.\n-\n-   Lines (1).Value := new String (1 .. Initial_Length_Of_Line);\n-end Bld.IO;"}, {"sha": "c5df6274ad1301ae6a1a63e65702946869933024", "filename": "gcc/ada/bld-io.ads", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld-io.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld-io.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld-io.ads?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,73 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               B L D - I O                                --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---        Copyright (C) 2002 Free Software Foundation, Inc.                 --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  The following private package allows the ouput of text to Makefiles\n---  though buffers. It is possible to remove some lines from the buffers\n---  without putting them effectively in the Makefile.\n-\n-private package Bld.IO is\n-\n-   procedure Create (File_Name : String);\n-   --  Create a new Makefile\n-\n-   procedure Flush;\n-   --  Output all not suppressed lines to the Makefile\n-\n-   procedure Close;\n-   --  Close the current Makefile\n-\n-   procedure Delete_All;\n-   --  Delete all the Makefiles that have been created\n-\n-   function Name_Of_File return String;\n-   --  Return the path name of the current Makefile\n-\n-   type Position is private;\n-   --  Identification of a line in the Makefile\n-\n-   procedure Mark (Pos : out Position);\n-   --  Record the current line.\n-   --  No characters should have been already put on this line.\n-\n-   procedure Release (Pos : Position);\n-   --  Suppress all line after this one, including this one.\n-\n-   procedure Suppress (Pos : Position);\n-   --  Suppress a particular line\n-\n-   procedure Put (S : String);\n-   --  Append a string to the current line\n-\n-   procedure New_Line;\n-   --  End a line. Go to the next one (initially empty).\n-\n-private\n-\n-   type Position is record\n-      Value : Positive := 1;\n-   end record;\n-\n-end Bld.IO;"}, {"sha": "e8b5c89eb82d633f28ed34ff46c75259d4db495a", "filename": "gcc/ada/bld.adb", "status": "removed", "additions": 0, "deletions": 3622, "changes": 3622, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918"}, {"sha": "1389dc582c8e54941b8827dee6b9a5540ad1b026", "filename": "gcc/ada/bld.ads", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fbld.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbld.ads?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,38 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                                  B L D                                   --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---        Copyright (C) 2002 Free Software Foundation, Inc.                 --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  The following package implements the facilities to build Makefiles\n---  for multi-language GNAT project files, so that building a complete\n---  multi-language system can be done easily, using GNU make.\n-\n-package Bld is\n-\n-   procedure Gpr2make;\n-   --  Parse a project file and all the other project files it depends on\n-   --  into a project tree; then from the project tree, produce one Makefile\n-   --  for each project file in the project tree.\n-\n-end Bld;"}, {"sha": "7010c8b4a2c9f439a3bdad84548bf21b76da7c3b", "filename": "gcc/ada/g-soccon-darwin.ads", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fg-soccon-darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d50a9e9d71a8b5519de675e94e79e72be3a150/gcc%2Fada%2Fg-soccon-darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-soccon-darwin.ads?ref=e6d50a9e9d71a8b5519de675e94e79e72be3a150", "patch": "@@ -0,0 +1,163 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--               G N A T . S O C K E T S . C O N S T A N T S                --\n+--                                                                          --\n+--                                 S p e c                                  --\n+--                                                                          --\n+--          Copyright (C) 2000-2004 Free Software Foundation, Inc.          --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides target dependent definitions of constant for use\n+--  by the GNAT.Sockets package (g-socket.ads). This package should not be\n+--  directly with'ed by an applications program.\n+\n+--  This is the version for powerpc-apple-darwin7.4.1\n+--  This file is generated automatically, do not modify it by hand! Instead,\n+--  make changes to gen-soccon.c and re-run it on each target.\n+\n+package GNAT.Sockets.Constants is\n+\n+   --------------\n+   -- Families --\n+   --------------\n+\n+   AF_INET            : constant :=           2; --  IPv4 address family\n+   AF_INET6           : constant :=          30; --  IPv6 address family\n+\n+   -----------\n+   -- Modes --\n+   -----------\n+\n+   SOCK_STREAM        : constant :=           1; --  Stream socket\n+   SOCK_DGRAM         : constant :=           2; --  Datagram socket\n+\n+   -------------------\n+   -- Socket errors --\n+   -------------------\n+\n+   EACCES             : constant :=          13; --  Permission denied\n+   EADDRINUSE         : constant :=          48; --  Address already in use\n+   EADDRNOTAVAIL      : constant :=          49; --  Cannot assign address\n+   EAFNOSUPPORT       : constant :=          47; --  Addr family not supported\n+   EALREADY           : constant :=          37; --  Operation in progress\n+   EBADF              : constant :=           9; --  Bad file descriptor\n+   ECONNABORTED       : constant :=          53; --  Connection aborted\n+   ECONNREFUSED       : constant :=          61; --  Connection refused\n+   ECONNRESET         : constant :=          54; --  Connection reset by peer\n+   EDESTADDRREQ       : constant :=          39; --  Destination addr required\n+   EFAULT             : constant :=          14; --  Bad address\n+   EHOSTDOWN          : constant :=          64; --  Host is down\n+   EHOSTUNREACH       : constant :=          65; --  No route to host\n+   EINPROGRESS        : constant :=          36; --  Operation now in progress\n+   EINTR              : constant :=           4; --  Interrupted system call\n+   EINVAL             : constant :=          22; --  Invalid argument\n+   EIO                : constant :=           5; --  Input output error\n+   EISCONN            : constant :=          56; --  Socket already connected\n+   ELOOP              : constant :=          62; --  Too many symbolic lynks\n+   EMFILE             : constant :=          24; --  Too many open files\n+   EMSGSIZE           : constant :=          40; --  Message too long\n+   ENAMETOOLONG       : constant :=          63; --  Name too long\n+   ENETDOWN           : constant :=          50; --  Network is down\n+   ENETRESET          : constant :=          52; --  Disconn. on network reset\n+   ENETUNREACH        : constant :=          51; --  Network is unreachable\n+   ENOBUFS            : constant :=          55; --  No buffer space available\n+   ENOPROTOOPT        : constant :=          42; --  Protocol not available\n+   ENOTCONN           : constant :=          57; --  Socket not connected\n+   ENOTSOCK           : constant :=          38; --  Operation on non socket\n+   EOPNOTSUPP         : constant :=          45; --  Operation not supported\n+   EPFNOSUPPORT       : constant :=          46; --  Unknown protocol family\n+   EPROTONOSUPPORT    : constant :=          43; --  Unknown protocol\n+   EPROTOTYPE         : constant :=          41; --  Unknown protocol type\n+   ESHUTDOWN          : constant :=          58; --  Cannot send once shutdown\n+   ESOCKTNOSUPPORT    : constant :=          44; --  Socket type not supported\n+   ETIMEDOUT          : constant :=          60; --  Connection timed out\n+   ETOOMANYREFS       : constant :=          59; --  Too many references\n+   EWOULDBLOCK        : constant :=          35; --  Operation would block\n+\n+   -----------------\n+   -- Host errors --\n+   -----------------\n+\n+   HOST_NOT_FOUND     : constant :=           1; --  Unknown host\n+   TRY_AGAIN          : constant :=           2; --  Host name lookup failure\n+   NO_DATA            : constant :=           4; --  No data record for name\n+   NO_RECOVERY        : constant :=           3; --  Non recoverable errors\n+\n+   -------------------\n+   -- Control flags --\n+   -------------------\n+\n+   FIONBIO            : constant := -2147195266; --  Set/clear non-blocking io\n+   FIONREAD           : constant :=  1074030207; --  How many bytes to read\n+\n+   --------------------\n+   -- Shutdown modes --\n+   --------------------\n+\n+   SHUT_RD            : constant :=           0; --  No more recv\n+   SHUT_WR            : constant :=           1; --  No more send\n+   SHUT_RDWR          : constant :=           2; --  No more recv/send\n+\n+   ---------------------\n+   -- Protocol levels --\n+   ---------------------\n+\n+   SOL_SOCKET         : constant :=       65535; --  Options for socket level\n+   IPPROTO_IP         : constant :=           0; --  Dummy protocol for IP\n+   IPPROTO_UDP        : constant :=          17; --  UDP\n+   IPPROTO_TCP        : constant :=           6; --  TCP\n+\n+   -------------------\n+   -- Request flags --\n+   -------------------\n+\n+   MSG_OOB            : constant :=           1; --  Process out-of-band data\n+   MSG_PEEK           : constant :=           2; --  Peek at incoming data\n+   MSG_EOR            : constant :=           8; --  Send end of record\n+   MSG_WAITALL        : constant :=          64; --  Wait for full reception\n+   MSG_NOSIGNAL       : constant :=          -1; --  No SIGPIPE on send\n+   MSG_Forced_Flags   : constant :=           0;\n+   --  Flags set on all send(2) calls\n+\n+   --------------------\n+   -- Socket options --\n+   --------------------\n+\n+   TCP_NODELAY        : constant :=           1; --  Do not coalesce packets\n+   SO_SNDBUF          : constant :=        4097; --  Set/get send buffer size\n+   SO_RCVBUF          : constant :=        4098; --  Set/get recv buffer size\n+   SO_REUSEADDR       : constant :=           4; --  Bind reuse local address\n+   SO_KEEPALIVE       : constant :=           8; --  Enable keep-alive msgs\n+   SO_LINGER          : constant :=         128; --  Defer close to flush data\n+   SO_ERROR           : constant :=        4103; --  Get/clear error status\n+   SO_BROADCAST       : constant :=          32; --  Can send broadcast msgs\n+   IP_ADD_MEMBERSHIP  : constant :=          12; --  Join a multicast group\n+   IP_DROP_MEMBERSHIP : constant :=          13; --  Leave a multicast group\n+   IP_MULTICAST_TTL   : constant :=          10; --  Set/get multicast TTL\n+   IP_MULTICAST_LOOP  : constant :=          11; --  Set/get mcast loopback\n+\n+end GNAT.Sockets.Constants;"}, {"sha": "eb93f345fc39750b181a7c816e2a004a712b48a2", "filename": "gcc/ada/gpr2make.adb", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgpr2make.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgpr2make.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgpr2make.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,34 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              G P R 2 M A K E                             --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---        Copyright (C) 2002-2003 Free Software Foundation, Inc.            --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-with Bld;\n-\n-procedure Gpr2make is\n-begin\n-   --  The real work is done in package Bld.\n-\n-   Bld.Gpr2make;\n-end Gpr2make;"}, {"sha": "0f05e9046d733f6c94cf4b353f515d87509e11c2", "filename": "gcc/ada/gpr2make.ads", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgpr2make.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgpr2make.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgpr2make.ads?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,30 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                              G P R 2 M A K E                             --\n---                                                                          --\n---                                 S p e c                                  --\n---                                                                          --\n---        Copyright (C) 2002 Free Software Foundation, Inc.                 --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-procedure Gpr2make;\n---  The driver for the gpr2make tool. This utility is a Makefile generator\n---  to help building multi-language applications, using multi-language\n---  GNAT project files."}, {"sha": "143b62b1deaeb85a6f7a1bca2b7cf31e909fcb83", "filename": "gcc/ada/gprcmd.adb", "status": "removed", "additions": 0, "deletions": 612, "changes": 612, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgprcmd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/165eab5ffcf0a4ffe7505982de815605f15e4918/gcc%2Fada%2Fgprcmd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgprcmd.adb?ref=165eab5ffcf0a4ffe7505982de815605f15e4918", "patch": "@@ -1,612 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                               G P R C M D                                --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---         Copyright (C) 2002-2004 Free Software Foundation, Inc.           --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n---  A utility used by Makefile.generic to handle multi-language builds.\n---  gprcmd provides a set of commands so that the makefiles do not need\n---  to depend on unix utilities not available on all targets.\n-\n---  The list of commands recognized by gprcmd are:\n-\n---    pwd          display current directory\n---    to_lower     display next argument in lower case\n---    to_absolute  convert pathnames to absolute directories when needed\n---    cat          dump contents of a given file\n---    extend       handle recursive directories (\"/**\" notation)\n---    deps         post process dependency makefiles\n---    stamp        copy file time stamp from file1 to file2\n---    prefix       get the prefix of the GNAT installation\n---    path         convert a list of directories to a path list, inserting a\n---                 path separator after each directory, including the last one\n---    ignore       do nothing\n-\n-with Gnatvsn;\n-with Osint;   use Osint;\n-with Namet;   use Namet;\n-\n-with Ada.Characters.Handling;   use Ada.Characters.Handling;\n-with Ada.Command_Line;          use Ada.Command_Line;\n-with Ada.Text_IO;               use Ada.Text_IO;\n-with GNAT.OS_Lib;               use GNAT.OS_Lib;\n-with GNAT.Directory_Operations; use GNAT.Directory_Operations;\n-with GNAT.Regpat;               use GNAT.Regpat;\n-\n-procedure Gprcmd is\n-\n-   --  ??? comments are thin throughout this unit\n-\n-   Gprdebug : constant String  := To_Lower (Getenv (\"GPRDEBUG\").all);\n-   Debug    : constant Boolean := Gprdebug = \"true\";\n-   --  When Debug is True, gprcmd displays its arguments to Standard_Error.\n-   --  This is to help to debug.\n-\n-   procedure Cat (File : String);\n-   --  Print the contents of file on standard output.\n-   --  If the file cannot be read, exit the process with an error code.\n-\n-   procedure Check_Args (Condition : Boolean);\n-   --  If Condition is false, print command invoked, then the usage,\n-   --  and exit the process.\n-\n-   procedure Deps (Objext : String; File : String; GCC : Boolean);\n-   --  Process $(CC) dependency file. If GCC is True, add a rule so that make\n-   --  will not complain when a file is removed/added. If GCC is False, add a\n-   --  rule to recompute the dependency file when needed\n-\n-   procedure Extend (Dir : String);\n-   --  If Dir ends with /**, Put all subdirs recursively on standard output,\n-   --  otherwise put Dir.\n-\n-   procedure Usage;\n-   --  Display the command line options and exit the process.\n-\n-   procedure Copy_Time_Stamp (From, To : String);\n-   --  Copy file time stamp from file From to file To.\n-\n-   procedure Display_Command;\n-   --  Display the invoked command to Standard_Error\n-\n-   ---------\n-   -- Cat --\n-   ---------\n-\n-   procedure Cat (File : String) is\n-      FD     : File_Descriptor;\n-      Buffer : String_Access;\n-      Length : Integer;\n-\n-   begin\n-      FD := Open_Read (File, Fmode => Binary);\n-\n-      if FD = Invalid_FD then\n-         OS_Exit (2);\n-      end if;\n-\n-      Length := Integer (File_Length (FD));\n-      Buffer := new String (1 .. Length);\n-      Length := Read (FD, Buffer.all'Address, Length);\n-      Close (FD);\n-      Put (Buffer.all);\n-      Free (Buffer);\n-   end Cat;\n-\n-   ----------------\n-   -- Check_Args --\n-   ----------------\n-\n-   procedure Check_Args (Condition : Boolean) is\n-   begin\n-      if not Condition then\n-         Put_Line\n-           (Standard_Error,\n-            \"bad call to gprcmd with\" & Argument_Count'Img & \" arguments.\");\n-\n-         for J in 0 .. Argument_Count loop\n-            Put (Standard_Error, Argument (J) & \" \");\n-         end loop;\n-\n-         New_Line (Standard_Error);\n-\n-         Usage;\n-      end if;\n-   end Check_Args;\n-\n-   ---------------------\n-   -- Copy_Time_Stamp --\n-   ---------------------\n-\n-   procedure Copy_Time_Stamp (From, To : String) is\n-      function Copy_Attributes\n-        (From, To : String;\n-         Mode     : Integer) return Integer;\n-      pragma Import (C, Copy_Attributes, \"__gnat_copy_attribs\");\n-      --  Mode = 0 - copy only time stamps.\n-      --  Mode = 1 - copy time stamps and read/write/execute attributes\n-\n-      FD : File_Descriptor;\n-\n-   begin\n-      if not Is_Regular_File (From) then\n-         return;\n-      end if;\n-\n-      FD := Create_File (To, Fmode => Binary);\n-\n-      if FD = Invalid_FD then\n-         OS_Exit (2);\n-      end if;\n-\n-      Close (FD);\n-\n-      if Copy_Attributes (From & ASCII.NUL, To & ASCII.NUL, 0) /= 0 then\n-         OS_Exit (2);\n-      end if;\n-   end Copy_Time_Stamp;\n-\n-   ----------\n-   -- Deps --\n-   ----------\n-\n-   procedure Deps (Objext : String; File : String; GCC : Boolean) is\n-      Colon      : constant String := ':' & ASCII.LF;\n-      NL         : constant String := (1 => ASCII.LF);\n-      Base       : constant String := ' ' & Base_Name (File) & \": \";\n-      FD         : File_Descriptor;\n-      Buffer     : String_Access;\n-      Length     : Integer;\n-      Obj_Regexp : constant Pattern_Matcher :=\n-                     Compile (\"^.*\\\" & Objext & \": \");\n-      Matched    : Match_Array (0 .. 0);\n-      Start      : Natural;\n-      First      : Natural;\n-      Last       : Natural;\n-\n-   begin\n-      FD := Open_Read_Write (File, Fmode => Binary);\n-\n-      if FD = Invalid_FD then\n-         return;\n-      end if;\n-\n-      Length := Integer (File_Length (FD));\n-      Buffer := new String (1 .. Length);\n-      Length := Read (FD, Buffer.all'Address, Length);\n-\n-      if GCC then\n-         Lseek (FD, 0, Seek_End);\n-      else\n-         Close (FD);\n-         FD := Create_File (File, Fmode => Binary);\n-      end if;\n-\n-      Start := Buffer'First;\n-\n-      while Start <= Buffer'Last loop\n-\n-         --  Parse Buffer line by line\n-\n-         while Start < Buffer'Last\n-           and then (Buffer (Start) = ASCII.CR\n-                     or else Buffer (Start) = ASCII.LF)\n-         loop\n-            Start := Start + 1;\n-         end loop;\n-\n-         Last := Start;\n-\n-         while Last < Buffer'Last\n-           and then Buffer (Last + 1) /= ASCII.CR\n-           and then Buffer (Last + 1) /= ASCII.LF\n-         loop\n-            Last := Last + 1;\n-         end loop;\n-\n-         Match (Obj_Regexp, Buffer (Start .. Last), Matched);\n-\n-         if GCC then\n-            if Matched (0) = No_Match then\n-               First := Start;\n-            else\n-               First := Matched (0).Last + 1;\n-            end if;\n-\n-            Length := Write (FD, Buffer (First)'Address, Last - First + 1);\n-\n-            if Start = Last or else Buffer (Last) = '\\' then\n-               Length := Write (FD, NL (1)'Address, NL'Length);\n-            else\n-               Length := Write (FD, Colon (1)'Address, Colon'Length);\n-            end if;\n-\n-         else\n-            if Matched (0) = No_Match then\n-               First := Start;\n-            else\n-               Length :=\n-                 Write (FD, Buffer (Start)'Address,\n-                        Matched (0).Last - Start - 1);\n-               Length := Write (FD, Base (Base'First)'Address, Base'Length);\n-               First := Matched (0).Last + 1;\n-            end if;\n-\n-            Length := Write (FD, Buffer (First)'Address, Last - First + 1);\n-            Length := Write (FD, NL (1)'Address, NL'Length);\n-         end if;\n-\n-         Start := Last + 1;\n-      end loop;\n-\n-      Close (FD);\n-      Free (Buffer);\n-   end Deps;\n-\n-   ---------------------\n-   -- Display_Command --\n-   ---------------------\n-\n-   procedure Display_Command is\n-   begin\n-      for J in 0 .. Argument_Count loop\n-         Put (Standard_Error, Argument (J) & ' ');\n-      end loop;\n-\n-      New_Line (Standard_Error);\n-   end Display_Command;\n-\n-   ------------\n-   -- Extend --\n-   ------------\n-\n-   procedure Extend (Dir : String) is\n-\n-      procedure Recursive_Extend (D : String);\n-      --  Recursively display all subdirectories of D\n-\n-      ----------------------\n-      -- Recursive_Extend --\n-      ----------------------\n-\n-      procedure Recursive_Extend (D : String) is\n-         Iter   : Dir_Type;\n-         Buffer : String (1 .. 8192);\n-         Last   : Natural;\n-\n-      begin\n-         Open (Iter, D);\n-\n-         loop\n-            Read (Iter, Buffer, Last);\n-            exit when Last = 0;\n-\n-            if Buffer (1 .. Last) /= \".\"\n-              and then Buffer (1 .. Last) /= \"..\"\n-            then\n-               declare\n-                  Abs_Dir : constant String := D & \"/\" & Buffer (1 .. Last);\n-               begin\n-                  if Is_Directory (Abs_Dir)\n-                    and then not Is_Symbolic_Link (Abs_Dir)\n-                  then\n-                     Put (' ' & Abs_Dir);\n-                     Recursive_Extend (Abs_Dir);\n-                  end if;\n-               end;\n-            end if;\n-         end loop;\n-\n-         Close (Iter);\n-\n-      exception\n-         when Directory_Error =>\n-            null;\n-      end Recursive_Extend;\n-\n-   --  Start of processing for Extend\n-\n-   begin\n-      if Dir'Length < 3\n-        or else (Dir (Dir'Last - 2) /= '/'\n-                 and then Dir (Dir'Last - 2) /= Directory_Separator)\n-        or else Dir (Dir'Last - 1 .. Dir'Last) /= \"**\"\n-      then\n-         Put (Dir);\n-         return;\n-      end if;\n-\n-      declare\n-         D : constant String := Dir (Dir'First .. Dir'Last - 3);\n-      begin\n-         Put (D);\n-         Recursive_Extend (D);\n-      end;\n-   end Extend;\n-\n-   -----------\n-   -- Usage --\n-   -----------\n-\n-   procedure Usage is\n-   begin\n-      Put_Line (Standard_Error, \"usage: gprcmd cmd [arguments]\");\n-      Put_Line (Standard_Error, \"where cmd is one of the following commands:\");\n-      Put_Line (Standard_Error, \"  pwd         \" &\n-                                \"display current directory\");\n-      Put_Line (Standard_Error, \"  to_lower    \" &\n-                                \"display next argument in lower case\");\n-      Put_Line (Standard_Error, \"  to_absolute \" &\n-                                \"convert pathnames to absolute \" &\n-                                \"directories when needed\");\n-      Put_Line (Standard_Error, \"  cat         \" &\n-                                \"dump contents of a given file\");\n-      Put_Line (Standard_Error, \"  extend      \" &\n-                                \"handle recursive directories \" &\n-                                \"(\"\"/**\"\" notation)\");\n-      Put_Line (Standard_Error, \"  deps        \" &\n-                                \"post process dependency makefiles\");\n-      Put_Line (Standard_Error, \"  stamp       \" &\n-                                \"copy file time stamp from file1 to file2\");\n-      Put_Line (Standard_Error, \"  prefix      \" &\n-                                \"get the prefix of the GNAT installation\");\n-      Put_Line (Standard_Error, \"  path_sep    \" &\n-                                \"returns the path separator\");\n-      Put_Line (Standard_Error, \"  linkopts      \" &\n-                                \"process attribute Linker'Linker_Options\");\n-      Put_Line (Standard_Error, \"  ignore      \" &\n-                                \"do nothing\");\n-      OS_Exit (1);\n-   end Usage;\n-\n---  Start of processing for Gprcmd\n-\n-begin\n-   if Debug then\n-      Display_Command;\n-   end if;\n-\n-   Check_Args (Argument_Count > 0);\n-\n-   declare\n-      Cmd : constant String := Argument (1);\n-\n-   begin\n-      if Cmd = \"-v\" then\n-\n-         --  Output on standard error, because only returned values should\n-         --  go to standard output.\n-\n-         Put (Standard_Error, \"GPRCMD \");\n-         Put_Line (Standard_Error, Gnatvsn.Gnat_Version_String);\n-         Put_Line (Standard_Error,\n-                   \"Copyright 2002-2004, Free Software Fundation, Inc.\");\n-         Usage;\n-\n-      elsif Cmd = \"pwd\" then\n-         declare\n-            CD : constant String := Get_Current_Dir;\n-         begin\n-            Put (Format_Pathname (CD (CD'First .. CD'Last - 1), UNIX));\n-         end;\n-\n-      elsif Cmd = \"cat\" then\n-         Check_Args (Argument_Count = 2);\n-         Cat (Argument (2));\n-\n-      elsif Cmd = \"to_lower\" then\n-         Check_Args (Argument_Count >= 2);\n-\n-         for J in 2 .. Argument_Count loop\n-            Put (To_Lower (Argument (J)));\n-\n-            if J < Argument_Count then\n-               Put (' ');\n-            end if;\n-         end loop;\n-\n-      elsif Cmd = \"to_absolute\" then\n-         Check_Args (Argument_Count > 2);\n-\n-         declare\n-            Dir : constant String := Argument (2);\n-\n-         begin\n-            for J in 3 .. Argument_Count loop\n-               if Is_Absolute_Path (Argument (J)) then\n-                  Put (Format_Pathname (Argument (J), UNIX));\n-               else\n-                  Put (Format_Pathname\n-                         (Normalize_Pathname\n-                            (Format_Pathname (Argument (J)),\n-                             Format_Pathname (Dir)),\n-                          UNIX));\n-               end if;\n-\n-               if J < Argument_Count then\n-                  Put (' ');\n-               end if;\n-            end loop;\n-         end;\n-\n-      elsif Cmd = \"extend\" then\n-         Check_Args (Argument_Count >= 2);\n-\n-         declare\n-            Dir : constant String := Argument (2);\n-\n-         begin\n-            --  Loop to remove quotes that may have been added around arguments\n-\n-            for J in 3 .. Argument_Count loop\n-               declare\n-                  Arg   : constant String := Argument (J);\n-                  First : Natural := Arg'First;\n-                  Last  : Natural := Arg'Last;\n-\n-               begin\n-                  if Arg (First) = '\"' and then Arg (Last) = '\"' then\n-                     First := First + 1;\n-                     Last  := Last - 1;\n-                  end if;\n-\n-                  if Is_Absolute_Path (Arg (First .. Last)) then\n-                     Extend (Format_Pathname (Arg (First .. Last), UNIX));\n-                  else\n-                     Extend\n-                       (Format_Pathname\n-                          (Normalize_Pathname\n-                             (Format_Pathname (Arg (First .. Last)),\n-                              Format_Pathname (Dir)),\n-                           UNIX));\n-                  end if;\n-\n-                  if J < Argument_Count then\n-                     Put (' ');\n-                  end if;\n-               end;\n-            end loop;\n-         end;\n-\n-      elsif Cmd = \"deps\" then\n-         Check_Args (Argument_Count in 3 .. 4);\n-         Deps (Argument (2), Argument (3), GCC => Argument_Count = 4);\n-\n-      elsif Cmd = \"stamp\" then\n-         Check_Args (Argument_Count = 3);\n-         Copy_Time_Stamp (Argument (2), Argument (3));\n-\n-      elsif Cmd = \"prefix\" then\n-\n-         --  Find the GNAT prefix. gprcmd is found in <prefix>/bin.\n-         --  So we find the full path of gprcmd, verify that it is in a\n-         --  subdirectory \"bin\", and return the <prefix> if it is the case.\n-         --  Otherwise, nothing is returned.\n-\n-         Find_Program_Name;\n-\n-         declare\n-            Path  : constant String_Access :=\n-                      Locate_Exec_On_Path (Name_Buffer (1 .. Name_Len));\n-            Index : Natural;\n-\n-         begin\n-            if Path /= null then\n-               Index := Path'Last;\n-\n-               while Index >= Path'First + 4 loop\n-                  exit when Path (Index) = Directory_Separator;\n-                  Index := Index - 1;\n-               end loop;\n-\n-               if Index > Path'First + 5\n-                 and then Path (Index - 3 .. Index - 1) = \"bin\"\n-                 and then Path (Index - 4) = Directory_Separator\n-               then\n-                  --  We have found the <prefix>, return it\n-\n-                  Put (Path (Path'First .. Index - 5));\n-               end if;\n-            end if;\n-         end;\n-\n-      --  For \"path\" just add path separator after each directory argument\n-\n-      elsif Cmd = \"path_sep\" then\n-         Put (Path_Separator);\n-\n-      --  Check the linker options for relative paths. Insert the project\n-      --  base dir before relative paths.\n-\n-      elsif Cmd = \"linkopts\" then\n-         Check_Args (Argument_Count >= 2);\n-\n-         --  First argument is the base directory of the project file\n-\n-         declare\n-            Base_Dir : constant String := Argument (2) & '/';\n-         begin\n-            --  process the remainder of the arguments\n-\n-            for J in 3 .. Argument_Count loop\n-               declare\n-                  Arg : constant String := Argument (J);\n-               begin\n-                  --  If it is a switch other than a -L switch, just send back\n-                  --  the argument.\n-\n-                  if Arg (Arg'First) = '-' and then\n-                    (Arg'Length <= 2 or else Arg (Arg'First + 1) /= 'L')\n-                  then\n-                     Put (Arg);\n-\n-                  else\n-                     --  If it is a file, check if its path is relative, and\n-                     --  if it is relative, add <project base dir>/ in front.\n-                     --  Otherwise just send back the argument.\n-\n-                     if Arg'Length <= 2\n-                       or else Arg (Arg'First .. Arg'First + 1) /= \"-L\"\n-                     then\n-                        if not Is_Absolute_Path (Arg) then\n-                           Put (Base_Dir);\n-                        end if;\n-\n-                        Put (Arg);\n-\n-                     --  For -L switches, check if the path is relative and\n-                     --  proceed similarly.\n-\n-                     else\n-                        Put (\"-L\");\n-\n-                        if\n-                         not Is_Absolute_Path (Arg (Arg'First + 2 .. Arg'Last))\n-                        then\n-                           Put (Base_Dir);\n-                        end if;\n-\n-                        Put (Arg (Arg'First + 2 .. Arg'Last));\n-                     end if;\n-                  end if;\n-               end;\n-\n-               --  Insert a space between each processed argument\n-\n-               if J /= Argument_Count then\n-                  Put (' ');\n-               end if;\n-            end loop;\n-         end;\n-\n-      --  For \"ignore\" do nothing\n-\n-      elsif Cmd = \"ignore\" then\n-         null;\n-\n-      --  Unknown command\n-\n-      else\n-         Check_Args (False);\n-      end if;\n-   end;\n-end Gprcmd;"}]}