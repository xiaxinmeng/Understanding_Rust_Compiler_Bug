{"sha": "3148ad6d93bbe2414b3c973adc501337a9de91d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE0OGFkNmQ5M2JiZTI0MTRiM2M5NzNhZGM1MDEzMzdhOWRlOTFkMw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-04-16T15:25:30Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-04-16T15:25:30Z"}, "message": "rs6000.c (rs6000_emit_cmove): Fail if modes of comparison operands do not match each other or if...\n\n2002-04-16  Dale Johannesen <dalej@apple.com>\n\n        * config/rs6000/rs6000.c (rs6000_emit_cmove): Fail if modes of\n        comparison operands do not match each other or if modes of\n        conditions do not match result.\n\nFrom-SVN: r52367", "tree": {"sha": "6747164f5f77d7c53323a1b5cbc4ed843a78dd76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6747164f5f77d7c53323a1b5cbc4ed843a78dd76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3148ad6d93bbe2414b3c973adc501337a9de91d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3148ad6d93bbe2414b3c973adc501337a9de91d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3148ad6d93bbe2414b3c973adc501337a9de91d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3148ad6d93bbe2414b3c973adc501337a9de91d3/comments", "author": null, "committer": null, "parents": [{"sha": "014cb9b62a7b5fa7ae2cf83baca43951e5a5f94f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014cb9b62a7b5fa7ae2cf83baca43951e5a5f94f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014cb9b62a7b5fa7ae2cf83baca43951e5a5f94f"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "0ff5bff7d7f4891bef769af98b2393657cb7cb34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3148ad6d93bbe2414b3c973adc501337a9de91d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3148ad6d93bbe2414b3c973adc501337a9de91d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3148ad6d93bbe2414b3c973adc501337a9de91d3", "patch": "@@ -1,3 +1,9 @@\n+2002-04-16  Dale Johannesen <dalej@apple.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_cmove): Fail if modes of\n+\tcomparison operands do not match each other or if modes of\n+\tconditions do not match result.\n+\n 2002-04-16  Hartmut Penner <hpenner@de.ibm.com>\n \n \tPR target/6305"}, {"sha": "efd3a0b837c0da4663a7bce3bf552a020ff39f85", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3148ad6d93bbe2414b3c973adc501337a9de91d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3148ad6d93bbe2414b3c973adc501337a9de91d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3148ad6d93bbe2414b3c973adc501337a9de91d3", "patch": "@@ -7245,9 +7245,18 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n   rtx op0 = rs6000_compare_op0;\n   rtx op1 = rs6000_compare_op1;\n   REAL_VALUE_TYPE c1;\n-  enum machine_mode mode = GET_MODE (op0);\n+  enum machine_mode compare_mode = GET_MODE (op0);\n+  enum machine_mode result_mode = GET_MODE (dest);\n   rtx temp;\n \n+  /* These modes should always match. */\n+  if ( GET_MODE (op1) != compare_mode )\n+    return 0;\n+  if ( GET_MODE (true_cond) != result_mode )\n+    return 0;\n+  if ( GET_MODE (false_cond) != result_mode )\n+    return 0;\n+\n   /* First, work out if the hardware can do this at all, or\n      if it's too slow...  */\n   /* If the comparison is an integer one, since we only have fsel\n@@ -7290,11 +7299,11 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n   /* At this point we know we can use fsel.  */\n \n   /* Reduce the comparison to a comparison against zero.  */\n-  temp = gen_reg_rtx (mode);\n+  temp = gen_reg_rtx (compare_mode);\n   emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t  gen_rtx_MINUS (mode, op0, op1)));\n+\t\t\t  gen_rtx_MINUS (compare_mode, op0, op1)));\n   op0 = temp;\n-  op1 = CONST0_RTX (mode);\n+  op1 = CONST0_RTX (compare_mode);\n \n   /* If we don't care about NaNs we can reduce some of the comparisons\n      down to faster ones.  */\n@@ -7324,52 +7333,52 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n       break;\n \n     case LE:\n-      temp = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (mode, op0)));\n+      temp = gen_reg_rtx (compare_mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case ORDERED:\n-      temp = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_ABS (mode, op0)));\n+      temp = gen_reg_rtx (compare_mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_ABS (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case EQ:\n-      temp = gen_reg_rtx (mode);\n+      temp = gen_reg_rtx (compare_mode);\n       emit_insn (gen_rtx_SET (VOIDmode, temp, \n-\t\t\t      gen_rtx_NEG (mode,\n-\t\t\t\t\t   gen_rtx_ABS (mode, op0))));\n+\t\t\t      gen_rtx_NEG (compare_mode,\n+\t\t\t\t\t   gen_rtx_ABS (compare_mode, op0))));\n       op0 = temp;\n       break;\n \n     case UNGE:\n-      temp = gen_reg_rtx (mode);\n+      temp = gen_reg_rtx (result_mode);\n       emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t      gen_rtx_IF_THEN_ELSE (mode, \n+\t\t\t      gen_rtx_IF_THEN_ELSE (result_mode,\n \t\t\t\t\t\t    gen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t\top0, op1),\n \t\t\t\t\t\t    true_cond, false_cond)));\n       false_cond = temp;\n       true_cond = false_cond;\n \n-      temp = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (mode, op0)));\n+      temp = gen_reg_rtx (compare_mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case GT:\n-      temp = gen_reg_rtx (mode);\n+      temp = gen_reg_rtx (result_mode);\n       emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t      gen_rtx_IF_THEN_ELSE (mode, \n+\t\t\t      gen_rtx_IF_THEN_ELSE (result_mode, \n \t\t\t\t\t\t    gen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t\top0, op1),\n \t\t\t\t\t\t    true_cond, false_cond)));\n       true_cond = temp;\n       false_cond = true_cond;\n \n-      temp = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (mode, op0)));\n+      temp = gen_reg_rtx (compare_mode);\n+      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n@@ -7378,7 +7387,7 @@ rs6000_emit_cmove (dest, op, true_cond, false_cond)\n     }\n \n   emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t  gen_rtx_IF_THEN_ELSE (GET_MODE (dest),\n+\t\t\t  gen_rtx_IF_THEN_ELSE (result_mode,\n \t\t\t\t\t\tgen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t    op0, op1),\n \t\t\t\t\t\ttrue_cond, false_cond)));"}]}