{"sha": "69bd3423f6e99d77e58a973978b8573a80705f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliZDM0MjNmNmU5OWQ3N2U1OGE5NzM5NzhiODU3M2E4MDcwNWY3Zg==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-03-04T16:23:31Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-03-04T16:23:31Z"}, "message": "tree-ssa-address.c (create_mem_ref): Do not put an expression containing a cast to the base of TARGET_MEM_REF.\n\n\t* tree-ssa-address.c (create_mem_ref): Do not put an expression\n\tcontaining a cast to the base of TARGET_MEM_REF.\n\nFrom-SVN: r122528", "tree": {"sha": "ef85c1f9a81e50a21250d23bbebb2cfb228be0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef85c1f9a81e50a21250d23bbebb2cfb228be0f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69bd3423f6e99d77e58a973978b8573a80705f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bd3423f6e99d77e58a973978b8573a80705f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bd3423f6e99d77e58a973978b8573a80705f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bd3423f6e99d77e58a973978b8573a80705f7f/comments", "author": null, "committer": null, "parents": [{"sha": "232044287b23ecd04a6e7e6964bf4030f673b7b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/232044287b23ecd04a6e7e6964bf4030f673b7b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/232044287b23ecd04a6e7e6964bf4030f673b7b6"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "6b5605ec64a98f136e5c09b4b3fa6e9005826c31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bd3423f6e99d77e58a973978b8573a80705f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bd3423f6e99d77e58a973978b8573a80705f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69bd3423f6e99d77e58a973978b8573a80705f7f", "patch": "@@ -1,3 +1,8 @@\n+2007-03-04  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\t* tree-ssa-address.c (create_mem_ref): Do not put an expression\n+\tcontaining a cast to the base of TARGET_MEM_REF.\n+\n 2007-03-04  Martin Michlmayr  <tbm@cyrius.com>\n \n \t* tree.c (tree_contains_struct_check_failed): Remove spurious\n@@ -10,7 +15,7 @@\n \tinstead of precision.\n \n 2007-03-04  Roman Zippel <zippel@linux-m68k.org>\n-            Nathan Sidwell  <nathan@codesourcery.com>\n+\t    Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* emit-rtl.c (find_auto_inc): New.\n \t(try_split): recreate REG_INC notes,"}, {"sha": "44a08b9a8b0ff6d86dd7eed3b2ad1d40987b0e16", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bd3423f6e99d77e58a973978b8573a80705f7f/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bd3423f6e99d77e58a973978b8573a80705f7f/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=69bd3423f6e99d77e58a973978b8573a80705f7f", "patch": "@@ -569,7 +569,7 @@ tree\n create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n {\n   tree mem_ref, tmp;\n-  tree addr_type = build_pointer_type (type), atype;\n+  tree atype;\n   struct mem_address parts;\n \n   addr_to_parts (addr, &parts);\n@@ -597,18 +597,23 @@ create_mem_ref (block_stmt_iterator *bsi, tree type, aff_tree *addr)\n \n   if (parts.symbol)\n     {\n-      tmp = fold_convert (addr_type,\n-\t\t\t  build_addr (parts.symbol, current_function_decl));\n+      tmp = build_addr (parts.symbol, current_function_decl);\n+      gcc_assert (is_gimple_val (tmp));\n     \n       /* Add the symbol to base, eventually forcing it to register.  */\n       if (parts.base)\n \t{\n+\t  gcc_assert (TREE_TYPE (parts.base) == sizetype);\n+\n \t  if (parts.index)\n-\t    parts.base = force_gimple_operand_bsi (bsi,\n-\t\t\tfold_build2 (PLUS_EXPR, addr_type,\n-\t\t\t\t     fold_convert (addr_type, parts.base),\n+\t    {\n+\t      atype = TREE_TYPE (tmp);\n+\t      parts.base = force_gimple_operand_bsi (bsi,\n+\t\t\tfold_build2 (PLUS_EXPR, atype,\n+\t\t\t\t     fold_convert (atype, parts.base),\n \t\t\t\t     tmp),\n \t\t\ttrue, NULL_TREE);\n+\t    }\n \t  else\n \t    {\n \t      parts.index = parts.base;"}]}