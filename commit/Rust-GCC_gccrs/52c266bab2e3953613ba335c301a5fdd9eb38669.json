{"sha": "52c266bab2e3953613ba335c301a5fdd9eb38669", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjMjY2YmFiMmUzOTUzNjEzYmEzMzVjMzAxYTVmZGQ5ZWIzODY2OQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2015-05-12T16:39:19Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2015-05-12T16:39:19Z"}, "message": "arm-protos.h (arm_sched_autopref): Delete.\n\n\t* arm-protos.h (arm_sched_autopref): Delete.\n\t(tune_params): Re-organize, use enums for flag values.\n\t(FUSE_OPS): New macro.\n\t* arm.c (ARM_PREFETCH_NOT_BENEFICIAL): Update.\n\t(ARM_PREFETCH_BENEFICIAL): Likewise.\n\t(ARM_FUSE_NOTHING, ARM_FUSE_MOVW_MOVT): Delete.\n\t(arm_slowmul_tune, arm_fastmul_tune, arm_strongarm_tune)\n\t(arm_xscale_tune, arm_9e_tune, arm_marvell_pj4_tune)\n\t(arm_v6t2_tune, arm_cortex_tune, arm_cortex_a8_tune)\n\t(arm_cortex_a7_tune, arm_cortex_a15_tune, arm_cortex_a53_tune)\n\t(arm_cortex_a57_tune,  arm_xgene1_tune, arm_cortex_a5_tune)\n\t(arm_cortex_a9_tune, arm_cortex_a12_tune, arm_v7m_tune)\n\t(arm_cortex_m7_tune, arm_v6m_tune, arm_fa726te_tune): Use new\n\tformat.\n\t(arm_option_override, thumb2_reorg, arm_print_tune_info)\n\t(aarch_macro_fusion_pair_p): Update uses of current_tune.\n\t* arm.h (LOGCIAL_OP_NON_SHORT_CIRCUIT): Likewise.\n\nFrom-SVN: r223090", "tree": {"sha": "392b142f14fcf35e70b65724a20f5207421b8aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/392b142f14fcf35e70b65724a20f5207421b8aa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52c266bab2e3953613ba335c301a5fdd9eb38669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c266bab2e3953613ba335c301a5fdd9eb38669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c266bab2e3953613ba335c301a5fdd9eb38669", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c266bab2e3953613ba335c301a5fdd9eb38669/comments", "author": null, "committer": null, "parents": [{"sha": "cc1e0483ae354533c559a3b542351f0024e5ba41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e0483ae354533c559a3b542351f0024e5ba41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e0483ae354533c559a3b542351f0024e5ba41"}], "stats": {"total": 855, "additions": 458, "deletions": 397}, "files": [{"sha": "80e9033c2200cddbefd36e9103bc34a30b5b6706", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52c266bab2e3953613ba335c301a5fdd9eb38669", "patch": "@@ -1,3 +1,23 @@\n+2015-05-12  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm-protos.h (arm_sched_autopref): Delete.\n+\t(tune_params): Re-organize, use enums for flag values.\n+\t(FUSE_OPS): New macro.\n+\t* arm.c (ARM_PREFETCH_NOT_BENEFICIAL): Update.\n+\t(ARM_PREFETCH_BENEFICIAL): Likewise.\n+\t(ARM_FUSE_NOTHING, ARM_FUSE_MOVW_MOVT): Delete.\n+\t(arm_slowmul_tune, arm_fastmul_tune, arm_strongarm_tune)\n+\t(arm_xscale_tune, arm_9e_tune, arm_marvell_pj4_tune)\n+\t(arm_v6t2_tune, arm_cortex_tune, arm_cortex_a8_tune)\n+\t(arm_cortex_a7_tune, arm_cortex_a15_tune, arm_cortex_a53_tune)\n+\t(arm_cortex_a57_tune,  arm_xgene1_tune, arm_cortex_a5_tune)\n+\t(arm_cortex_a9_tune, arm_cortex_a12_tune, arm_v7m_tune)\n+\t(arm_cortex_m7_tune, arm_v6m_tune, arm_fa726te_tune): Use new\n+\tformat.\n+\t(arm_option_override, thumb2_reorg, arm_print_tune_info)\n+\t(aarch_macro_fusion_pair_p): Update uses of current_tune.\n+\t* arm.h (LOGCIAL_OP_NON_SHORT_CIRCUIT): Likewise.\n+\n 2015-05-12 Sandra Loosemore <sandra@codesourcery.com>\n \n \t* config/nios2/nios2.md (trap, ctrapsi4): Use \"trap\" instead of"}, {"sha": "3eafa5d1c6aedc829788b05304ef4d7226d18683", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=52c266bab2e3953613ba335c301a5fdd9eb38669", "patch": "@@ -251,13 +251,6 @@ struct cpu_vec_costs {\n \n struct cpu_cost_table;\n \n-enum arm_sched_autopref\n-  {\n-    ARM_SCHED_AUTOPREF_OFF,\n-    ARM_SCHED_AUTOPREF_RANK,\n-    ARM_SCHED_AUTOPREF_FULL\n-  };\n-\n /* Dump function ARM_PRINT_TUNE_INFO should be updated whenever this\n    structure is modified.  */\n \n@@ -266,41 +259,57 @@ struct tune_params\n   bool (*rtx_costs) (rtx, RTX_CODE, RTX_CODE, int *, bool);\n   const struct cpu_cost_table *insn_extra_cost;\n   bool (*sched_adjust_cost) (rtx_insn *, rtx, rtx_insn *, int *);\n+  int (*branch_cost) (bool, bool);\n+  /* Vectorizer costs.  */\n+  const struct cpu_vec_costs* vec_costs;\n   int constant_limit;\n   /* Maximum number of instructions to conditionalise.  */\n   int max_insns_skipped;\n-  int num_prefetch_slots;\n-  int l1_cache_size;\n-  int l1_cache_line_size;\n-  bool prefer_constant_pool;\n-  int (*branch_cost) (bool, bool);\n+  /* Maximum number of instructions to inline calls to memset.  */\n+  int max_insns_inline_memset;\n+  /* Issue rate of the processor.  */\n+  unsigned int issue_rate;\n+  /* Explicit prefetch data.  */\n+  struct\n+    {\n+      int num_slots;\n+      int l1_cache_size;\n+      int l1_cache_line_size;\n+    } prefetch;\n+  enum {PREF_CONST_POOL_FALSE, PREF_CONST_POOL_TRUE}\n+    prefer_constant_pool: 1;\n   /* Prefer STRD/LDRD instructions over PUSH/POP/LDM/STM.  */\n-  bool prefer_ldrd_strd;\n+  enum {PREF_LDRD_FALSE, PREF_LDRD_TRUE} prefer_ldrd_strd: 1;\n   /* The preference for non short cirtcuit operation when optimizing for\n      performance. The first element covers Thumb state and the second one\n      is for ARM state.  */\n-  bool logical_op_non_short_circuit[2];\n-  /* Vectorizer costs.  */\n-  const struct cpu_vec_costs* vec_costs;\n-  /* Prefer Neon for 64-bit bitops.  */\n-  bool prefer_neon_for_64bits;\n+  enum log_op_non_sc {LOG_OP_NON_SC_FALSE, LOG_OP_NON_SC_TRUE};\n+  log_op_non_sc logical_op_non_short_circuit_thumb: 1;\n+  log_op_non_sc logical_op_non_short_circuit_arm: 1;\n   /* Prefer 32-bit encoding instead of flag-setting 16-bit encoding.  */\n-  bool disparage_flag_setting_t16_encodings;\n-  /* Prefer 32-bit encoding instead of 16-bit encoding where subset of flags\n-     would be set.  */\n-  bool disparage_partial_flag_setting_t16_encodings;\n+  enum {DISPARAGE_FLAGS_NEITHER, DISPARAGE_FLAGS_PARTIAL, DISPARAGE_FLAGS_ALL}\n+    disparage_flag_setting_t16_encodings: 2;\n+  enum {PREF_NEON_64_FALSE, PREF_NEON_64_TRUE} prefer_neon_for_64bits: 1;\n   /* Prefer to inline string operations like memset by using Neon.  */\n-  bool string_ops_prefer_neon;\n-  /* Maximum number of instructions to inline calls to memset.  */\n-  int max_insns_inline_memset;\n-  /* Bitfield encoding the fuseable pairs of instructions.  */\n-  unsigned int fuseable_ops;\n+  enum {PREF_NEON_STRINGOPS_FALSE, PREF_NEON_STRINGOPS_TRUE}\n+    string_ops_prefer_neon: 1;\n+  /* Bitfield encoding the fuseable pairs of instructions.  Use FUSE_OPS\n+     in an initializer if multiple fusion operations are supported on a\n+     target.  */\n+  enum fuse_ops\n+  {\n+    FUSE_NOTHING   = 0,\n+    FUSE_MOVW_MOVT = 1 << 0\n+  } fuseable_ops: 1;\n   /* Depth of scheduling queue to check for L2 autoprefetcher.  */\n-  enum arm_sched_autopref sched_autopref;\n-  /* Issue rate of the processor.  */\n-  unsigned int issue_rate;\n+  enum {SCHED_AUTOPREF_OFF, SCHED_AUTOPREF_RANK, SCHED_AUTOPREF_FULL}\n+    sched_autopref: 2;\n };\n \n+/* Smash multiple fusion operations into a type that can be used for an\n+   initializer.  */\n+#define FUSE_OPS(x) ((tune_params::fuse_ops) (x))\n+\n extern const struct tune_params *current_tune;\n extern int vfp3_const_double_for_fract_bits (rtx);\n /* return power of two from operand, otherwise 0.  */"}, {"sha": "e26f40c60a1d0d45afb430d10dfccec82e18f196", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 394, "deletions": 363, "changes": 757, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=52c266bab2e3953613ba335c301a5fdd9eb38669", "patch": "@@ -935,11 +935,13 @@ struct processors\n };\n \n \n-#define ARM_PREFETCH_NOT_BENEFICIAL 0, -1, -1\n-#define ARM_PREFETCH_BENEFICIAL(prefetch_slots,l1_size,l1_line_size) \\\n-  prefetch_slots, \\\n-  l1_size, \\\n-  l1_line_size\n+#define ARM_PREFETCH_NOT_BENEFICIAL { 0, -1, -1 }\n+#define ARM_PREFETCH_BENEFICIAL(num_slots,l1_size,l1_line_size) \\\n+  {\t\t\t\t\t\t\t\t\\\n+    num_slots,\t\t\t\t\t\t\t\\\n+    l1_size,\t\t\t\t\t\t\t\\\n+    l1_line_size\t\t\t\t\t\t\\\n+  }\n \n /* arm generic vectorizer costs.  */\n static const\n@@ -1673,51 +1675,50 @@ const struct cpu_cost_table v7m_extra_costs =\n   }\n };\n \n-#define ARM_FUSE_NOTHING\t(0)\n-#define ARM_FUSE_MOVW_MOVT\t(1 << 0)\n-\n const struct tune_params arm_slowmul_tune =\n {\n   arm_slowmul_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   3,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_fastmul_tune =\n {\n   arm_fastmul_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n /* StrongARM has early execution of branches, so a sequence that is worth\n@@ -1726,111 +1727,116 @@ const struct tune_params arm_fastmul_tune =\n const struct tune_params arm_strongarm_tune =\n {\n   arm_fastmul_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   3,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_xscale_tune =\n {\n   arm_xscale_rtx_costs,\n-  NULL,\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n   xscale_sched_adjust_cost,\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   2,\t\t\t\t\t\t/* Constant limit.  */\n   3,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_9e_tune =\n {\n   arm_9e_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_marvell_pj4_tune =\n {\n   arm_9e_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n-  false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n-  false, false,\t\t\t\t\t/* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_v6t2_tune =\n {\n   arm_9e_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n \n@@ -1839,154 +1845,161 @@ const struct tune_params arm_cortex_tune =\n {\n   arm_9e_rtx_costs,\n   &generic_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a8_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa8_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-   2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a7_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa7_extra_costs,\n-  NULL,\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n-  false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a15_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa15_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  3,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  true,\t\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  true, true,                                   /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_FULL,\t\t\t/* Sched L2 autopref.  */\n-  3\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_FULL\n };\n \n const struct tune_params arm_cortex_a53_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa53_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Scheduler cost adjustment.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,\t\t\t/* Vectorizer costs.  */\n-  false,\t\t\t\t\t/* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_MOVW_MOVT,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a57_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa57_extra_costs,\n-  NULL,                                         /* Scheduler cost adjustment.  */\n-  1,                                           /* Constant limit.  */\n-  2,                                           /* Max cond insns.  */\n-  ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,                                       /* Prefer constant pool.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n-  true,                                       /* Prefer LDRD/STRD.  */\n-  {true, true},                                /* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                       /* Vectorizer costs.  */\n-  false,                                       /* Prefer Neon for 64-bits bitops.  */\n-  true, true,                                  /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_MOVW_MOVT,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_FULL,\t\t\t/* Sched L2 autopref.  */\n-  3\t\t\t\t\t\t/* Issue rate.  */\n+  &arm_default_vec_cost,\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  3,\t\t\t\t\t\t/* Issue rate.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n+  tune_params::SCHED_AUTOPREF_FULL\n };\n \n const struct tune_params arm_xgene1_tune =\n {\n   arm_9e_rtx_costs,\n   &xgene1_extra_costs,\n-  NULL,                                        /* Scheduler cost adjustment.  */\n-  1,                                           /* Constant limit.  */\n-  2,                                           /* Max cond insns.  */\n-  ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,                                       /* Prefer constant pool.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n   arm_default_branch_cost,\n-  true,                                        /* Prefer LDRD/STRD.  */\n-  {true, true},                                /* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                       /* Vectorizer costs.  */\n-  false,                                       /* Prefer Neon for 64-bits bitops.  */\n-  true, true,                                  /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t       /* Prefer Neon for stringops.  */\n-  32,\t\t\t\t\t       /* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  4\t\t\t\t\t\t/* Issue rate.  */\n+  &arm_default_vec_cost,\n+  1,\t\t\t\t\t\t/* Constant limit.  */\n+  2,\t\t\t\t\t\t/* Max cond insns.  */\n+  32,\t\t\t\t\t\t/* Memset max inline.  */\n+  4,\t\t\t\t\t\t/* Issue rate.  */\n+  ARM_PREFETCH_NOT_BENEFICIAL,\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n /* Branches can be dual-issued on Cortex-A5, so conditional execution is\n@@ -1996,66 +2009,69 @@ const struct tune_params arm_cortex_a5_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa5_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_cortex_a5_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   1,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_cortex_a5_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a9_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa9_extra_costs,\n   cortex_a9_sched_adjust_cost,\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_BENEFICIAL(4,32,32),\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_cortex_a12_tune =\n {\n   arm_9e_rtx_costs,\n   &cortexa12_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  true,\t\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  true, true,                                   /* Prefer 32-bit encodings.  */\n-  true,\t\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_MOVW_MOVT,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_TRUE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_ALL,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_TRUE,\n+  FUSE_OPS (tune_params::FUSE_MOVW_MOVT),\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n /* armv7m tuning.  On Cortex-M4 cores for example, MOVW/MOVT take a single\n@@ -2069,22 +2085,23 @@ const struct tune_params arm_v7m_tune =\n {\n   arm_9e_rtx_costs,\n   &v7m_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_cortex_m_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   2,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_cortex_m_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n /* Cortex-M7 tuning.  */\n@@ -2093,68 +2110,71 @@ const struct tune_params arm_cortex_m7_tune =\n {\n   arm_9e_rtx_costs,\n   &v7m_extra_costs,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_cortex_m7_branch_cost,\n+  &arm_default_vec_cost,\n   0,\t\t\t\t\t\t/* Constant limit.  */\n   1,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_cortex_m7_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n /* The arm_v6m_tune is duplicated from arm_cortex_tune, rather than\n    arm_v6t2_tune. It is used for cortex-m0, cortex-m1 and cortex-m0plus.  */\n const struct tune_params arm_v6m_tune =\n {\n   arm_9e_rtx_costs,\n-  NULL,\n-  NULL,\t\t\t\t\t\t/* Sched adj cost.  */\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n+  NULL,\t\t\t\t\t/* Sched adj cost.  */\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  1,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  false,\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {false, false},\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  1\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_FALSE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_FALSE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n const struct tune_params arm_fa726te_tune =\n {\n   arm_9e_rtx_costs,\n-  NULL,\n+  NULL,\t\t\t\t\t/* Insn extra costs.  */\n   fa726te_sched_adjust_cost,\n+  arm_default_branch_cost,\n+  &arm_default_vec_cost,\n   1,\t\t\t\t\t\t/* Constant limit.  */\n   5,\t\t\t\t\t\t/* Max cond insns.  */\n+  8,\t\t\t\t\t\t/* Memset max inline.  */\n+  2,\t\t\t\t\t\t/* Issue rate.  */\n   ARM_PREFETCH_NOT_BENEFICIAL,\n-  true,\t\t\t\t\t\t/* Prefer constant pool.  */\n-  arm_default_branch_cost,\n-  false,\t\t\t\t\t/* Prefer LDRD/STRD.  */\n-  {true, true},\t\t\t\t\t/* Prefer non short circuit.  */\n-  &arm_default_vec_cost,                        /* Vectorizer costs.  */\n-  false,                                        /* Prefer Neon for 64-bits bitops.  */\n-  false, false,                                 /* Prefer 32-bit encodings.  */\n-  false,\t\t\t\t\t/* Prefer Neon for stringops.  */\n-  8,\t\t\t\t\t\t/* Maximum insns to inline memset.  */\n-  ARM_FUSE_NOTHING,\t\t\t\t/* Fuseable pairs of instructions.  */\n-  ARM_SCHED_AUTOPREF_OFF,\t\t\t/* Sched L2 autopref.  */\n-  2\t\t\t\t\t\t/* Issue rate.  */\n+  tune_params::PREF_CONST_POOL_TRUE,\n+  tune_params::PREF_LDRD_FALSE,\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* Thumb.  */\n+  tune_params::LOG_OP_NON_SC_TRUE,\t\t/* ARM.  */\n+  tune_params::DISPARAGE_FLAGS_NEITHER,\n+  tune_params::PREF_NEON_64_FALSE,\n+  tune_params::PREF_NEON_STRINGOPS_FALSE,\n+  tune_params::FUSE_NOTHING,\n+  tune_params::SCHED_AUTOPREF_OFF\n };\n \n \n@@ -3228,31 +3248,33 @@ arm_option_override (void)\n       && abi_version_at_least(2))\n     flag_strict_volatile_bitfields = 1;\n \n-  /* Enable sw prefetching at -O3 for CPUS that have prefetch, and we have deemed\n-     it beneficial (signified by setting num_prefetch_slots to 1 or more.)  */\n+  /* Enable sw prefetching at -O3 for CPUS that have prefetch, and we\n+     have deemed it beneficial (signified by setting\n+     prefetch.num_slots to 1 or more).  */\n   if (flag_prefetch_loop_arrays < 0\n       && HAVE_prefetch\n       && optimize >= 3\n-      && current_tune->num_prefetch_slots > 0)\n+      && current_tune->prefetch.num_slots > 0)\n     flag_prefetch_loop_arrays = 1;\n \n-  /* Set up parameters to be used in prefetching algorithm.  Do not override the\n-     defaults unless we are tuning for a core we have researched values for.  */\n-  if (current_tune->num_prefetch_slots > 0)\n+  /* Set up parameters to be used in prefetching algorithm.  Do not\n+     override the defaults unless we are tuning for a core we have\n+     researched values for.  */\n+  if (current_tune->prefetch.num_slots > 0)\n     maybe_set_param_value (PARAM_SIMULTANEOUS_PREFETCHES,\n-                           current_tune->num_prefetch_slots,\n-                           global_options.x_param_values,\n-                           global_options_set.x_param_values);\n-  if (current_tune->l1_cache_line_size >= 0)\n+\t\t\t   current_tune->prefetch.num_slots,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (current_tune->prefetch.l1_cache_line_size >= 0)\n     maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n-                           current_tune->l1_cache_line_size,\n-                           global_options.x_param_values,\n-                           global_options_set.x_param_values);\n-  if (current_tune->l1_cache_size >= 0)\n+\t\t\t   current_tune->prefetch.l1_cache_line_size,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+  if (current_tune->prefetch.l1_cache_size >= 0)\n     maybe_set_param_value (PARAM_L1_CACHE_SIZE,\n-                           current_tune->l1_cache_size,\n-                           global_options.x_param_values,\n-                           global_options_set.x_param_values);\n+\t\t\t   current_tune->prefetch.l1_cache_size,\n+\t\t\t   global_options.x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n \n   /* Use Neon to perform 64-bits operations rather than core\n      registers.  */\n@@ -3262,24 +3284,35 @@ arm_option_override (void)\n \n   /* Use the alternative scheduling-pressure algorithm by default.  */\n   maybe_set_param_value (PARAM_SCHED_PRESSURE_ALGORITHM, SCHED_PRESSURE_MODEL,\n-                         global_options.x_param_values,\n-                         global_options_set.x_param_values);\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n \n   /* Look through ready list and all of queue for instructions\n      relevant for L2 auto-prefetcher.  */\n   int param_sched_autopref_queue_depth;\n-  if (current_tune->sched_autopref == ARM_SCHED_AUTOPREF_OFF)\n-    param_sched_autopref_queue_depth = -1;\n-  else if (current_tune->sched_autopref == ARM_SCHED_AUTOPREF_RANK)\n-    param_sched_autopref_queue_depth = 0;\n-  else if (current_tune->sched_autopref == ARM_SCHED_AUTOPREF_FULL)\n-    param_sched_autopref_queue_depth = max_insn_queue_index + 1;\n-  else\n-    gcc_unreachable ();\n+\n+  switch (current_tune->sched_autopref)\n+    {\n+    case tune_params::SCHED_AUTOPREF_OFF:\n+      param_sched_autopref_queue_depth = -1;\n+      break;\n+\n+    case tune_params::SCHED_AUTOPREF_RANK:\n+      param_sched_autopref_queue_depth = 0;\n+      break;\n+\n+    case tune_params::SCHED_AUTOPREF_FULL:\n+      param_sched_autopref_queue_depth = max_insn_queue_index + 1;\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n   maybe_set_param_value (PARAM_SCHED_AUTOPREF_QUEUE_DEPTH,\n \t\t\t param_sched_autopref_queue_depth,\n-                         global_options.x_param_values,\n-                         global_options_set.x_param_values);\n+\t\t\t global_options.x_param_values,\n+\t\t\t global_options_set.x_param_values);\n \n   /* Currently, for slow flash data, we just disable literal pools.  */\n   if (target_slow_flash_data)\n@@ -17084,14 +17117,16 @@ thumb2_reorg (void)\n \n   FOR_EACH_BB_FN (bb, cfun)\n     {\n-      if (current_tune->disparage_flag_setting_t16_encodings\n+      if ((current_tune->disparage_flag_setting_t16_encodings\n+\t   == tune_params::DISPARAGE_FLAGS_ALL)\n \t  && optimize_bb_for_speed_p (bb))\n \tcontinue;\n \n       rtx_insn *insn;\n       Convert_Action action = SKIP;\n       Convert_Action action_for_partial_flag_setting\n-\t= (current_tune->disparage_partial_flag_setting_t16_encodings\n+\t= ((current_tune->disparage_flag_setting_t16_encodings\n+\t    != tune_params::DISPARAGE_FLAGS_NEITHER)\n \t   && optimize_bb_for_speed_p (bb))\n \t  ? SKIP : CONV;\n \n@@ -25434,12 +25469,12 @@ arm_print_tune_info (void)\n \t       current_tune->constant_limit);\n   asm_fprintf (asm_out_file, \"\\t\\t@max_insns_skipped:\\t%d\\n\",\n \t       current_tune->max_insns_skipped);\n-  asm_fprintf (asm_out_file, \"\\t\\t@num_prefetch_slots:\\t%d\\n\",\n-\t       current_tune->num_prefetch_slots);\n-  asm_fprintf (asm_out_file, \"\\t\\t@l1_cache_size:\\t%d\\n\",\n-\t       current_tune->l1_cache_size);\n-  asm_fprintf (asm_out_file, \"\\t\\t@l1_cache_line_size:\\t%d\\n\",\n-\t       current_tune->l1_cache_line_size);\n+  asm_fprintf (asm_out_file, \"\\t\\t@prefetch.num_slots:\\t%d\\n\",\n+\t       current_tune->prefetch.num_slots);\n+  asm_fprintf (asm_out_file, \"\\t\\t@prefetch.l1_cache_size:\\t%d\\n\",\n+\t       current_tune->prefetch.l1_cache_size);\n+  asm_fprintf (asm_out_file, \"\\t\\t@prefetch.l1_cache_line_size:\\t%d\\n\",\n+\t       current_tune->prefetch.l1_cache_line_size);\n   asm_fprintf (asm_out_file, \"\\t\\t@prefer_constant_pool:\\t%d\\n\",\n \t       (int) current_tune->prefer_constant_pool);\n   asm_fprintf (asm_out_file, \"\\t\\t@branch_cost:\\t(s:speed, p:predictable)\\n\");\n@@ -25455,17 +25490,13 @@ arm_print_tune_info (void)\n   asm_fprintf (asm_out_file, \"\\t\\t@prefer_ldrd_strd:\\t%d\\n\",\n \t       (int) current_tune->prefer_ldrd_strd);\n   asm_fprintf (asm_out_file, \"\\t\\t@logical_op_non_short_circuit:\\t[%d,%d]\\n\",\n-\t       (int) current_tune->logical_op_non_short_circuit[0],\n-\t       (int) current_tune->logical_op_non_short_circuit[1]);\n+\t       (int) current_tune->logical_op_non_short_circuit_thumb,\n+\t       (int) current_tune->logical_op_non_short_circuit_arm);\n   asm_fprintf (asm_out_file, \"\\t\\t@prefer_neon_for_64bits:\\t%d\\n\",\n \t       (int) current_tune->prefer_neon_for_64bits);\n   asm_fprintf (asm_out_file,\n \t       \"\\t\\t@disparage_flag_setting_t16_encodings:\\t%d\\n\",\n \t       (int) current_tune->disparage_flag_setting_t16_encodings);\n-  asm_fprintf (asm_out_file,\n-\t       \"\\t\\t@disparage_partial_flag_setting_t16_encodings:\\t%d\\n\",\n-\t       (int) current_tune\n-\t               ->disparage_partial_flag_setting_t16_encodings);\n   asm_fprintf (asm_out_file, \"\\t\\t@string_ops_prefer_neon:\\t%d\\n\",\n \t       (int) current_tune->string_ops_prefer_neon);\n   asm_fprintf (asm_out_file, \"\\t\\t@max_insns_inline_memset:\\t%d\\n\",\n@@ -29112,7 +29143,7 @@ arm_gen_setmem (rtx *operands)\n static bool\n arm_macro_fusion_p (void)\n {\n-  return current_tune->fuseable_ops != ARM_FUSE_NOTHING;\n+  return current_tune->fuseable_ops != tune_params::FUSE_NOTHING;\n }\n \n \n@@ -29133,44 +29164,44 @@ aarch_macro_fusion_pair_p (rtx_insn* prev, rtx_insn* curr)\n   if (!arm_macro_fusion_p ())\n     return false;\n \n-  if (current_tune->fuseable_ops & ARM_FUSE_MOVW_MOVT)\n+  if (current_tune->fuseable_ops & tune_params::FUSE_MOVW_MOVT)\n     {\n       /* We are trying to fuse\n-         movw imm / movt imm\n-         instructions as a group that gets scheduled together.  */\n+\t movw imm / movt imm\n+\t instructions as a group that gets scheduled together.  */\n \n       set_dest = SET_DEST (curr_set);\n \n       if (GET_MODE (set_dest) != SImode)\n-        return false;\n+\treturn false;\n \n       /* We are trying to match:\n-         prev (movw)  == (set (reg r0) (const_int imm16))\n-         curr (movt) == (set (zero_extract (reg r0)\n-                                           (const_int 16)\n-                                           (const_int 16))\n-                             (const_int imm16_1))\n-         or\n-         prev (movw) == (set (reg r1)\n-                              (high (symbol_ref (\"SYM\"))))\n-         curr (movt) == (set (reg r0)\n-                             (lo_sum (reg r1)\n-                                     (symbol_ref (\"SYM\"))))  */\n+\t prev (movw)  == (set (reg r0) (const_int imm16))\n+\t curr (movt) == (set (zero_extract (reg r0)\n+\t\t\t\t\t  (const_int 16)\n+\t\t\t\t\t   (const_int 16))\n+\t\t\t     (const_int imm16_1))\n+\t or\n+\t prev (movw) == (set (reg r1)\n+\t\t\t      (high (symbol_ref (\"SYM\"))))\n+\t curr (movt) == (set (reg r0)\n+\t\t\t     (lo_sum (reg r1)\n+\t\t\t\t     (symbol_ref (\"SYM\"))))  */\n       if (GET_CODE (set_dest) == ZERO_EXTRACT)\n-        {\n-          if (CONST_INT_P (SET_SRC (curr_set))\n-              && CONST_INT_P (SET_SRC (prev_set))\n-              && REG_P (XEXP (set_dest, 0))\n-              && REG_P (SET_DEST (prev_set))\n-              && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n-            return true;\n-        }\n+\t{\n+\t  if (CONST_INT_P (SET_SRC (curr_set))\n+\t      && CONST_INT_P (SET_SRC (prev_set))\n+\t      && REG_P (XEXP (set_dest, 0))\n+\t      && REG_P (SET_DEST (prev_set))\n+\t      && REGNO (XEXP (set_dest, 0)) == REGNO (SET_DEST (prev_set)))\n+\t    return true;\n+\t}\n       else if (GET_CODE (SET_SRC (curr_set)) == LO_SUM\n-               && REG_P (SET_DEST (curr_set))\n-               && REG_P (SET_DEST (prev_set))\n-               && GET_CODE (SET_SRC (prev_set)) == HIGH\n-               && REGNO (SET_DEST (curr_set)) == REGNO (SET_DEST (prev_set)))\n-             return true;\n+\t       && REG_P (SET_DEST (curr_set))\n+\t       && REG_P (SET_DEST (prev_set))\n+\t       && GET_CODE (SET_SRC (prev_set)) == HIGH\n+\t       && REGNO (SET_DEST (curr_set)) == REGNO (SET_DEST (prev_set)))\n+\t     return true;\n     }\n   return false;\n }"}, {"sha": "85743889d28848c734ace13cd136bc9ebe5dc714", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52c266bab2e3953613ba335c301a5fdd9eb38669/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=52c266bab2e3953613ba335c301a5fdd9eb38669", "patch": "@@ -2057,10 +2057,11 @@ enum arm_auto_incmodes\n   (current_tune->branch_cost (speed_p, predictable_p))\n \n /* False if short circuit operation is preferred.  */\n-#define LOGICAL_OP_NON_SHORT_CIRCUIT\t\t\t\t\\\n-  ((optimize_size)\t\t\t\t\t\t\\\n-   ? (TARGET_THUMB ? false : true)\t\t\t\t\\\n-   : (current_tune->logical_op_non_short_circuit[TARGET_ARM]))\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT\t\t\t\t\t\\\n+  ((optimize_size)\t\t\t\t\t\t\t\\\n+   ? (TARGET_THUMB ? false : true)\t\t\t\t\t\\\n+   : TARGET_THUMB ? current_tune->logical_op_non_short_circuit_thumb\t\\\n+   : current_tune->logical_op_non_short_circuit_arm)\n \n \f\n /* Position Independent Code.  */"}]}