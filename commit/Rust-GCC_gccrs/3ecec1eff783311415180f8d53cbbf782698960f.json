{"sha": "3ecec1eff783311415180f8d53cbbf782698960f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VjZWMxZWZmNzgzMzExNDE1MTgwZjhkNTNjYmJmNzgyNjk4OTYwZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-17T00:21:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-17T00:21:41Z"}, "message": "re PR libstdc++/56785 (std::tuple of two elements does not apply empty base class optimization when one of its elements is a std::tuple with two elements)\n\n\tPR libstdc++/56785\n\t* include/std/tuple (_Tuple_impl): Remove zero-element specialization\n\tand define one-element specialization.\n\t* testsuite/20_util/tuple/56785.cc: New.\n\nFrom-SVN: r219785", "tree": {"sha": "77b157ad944f44ae17066eee6e3029272fa6a44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77b157ad944f44ae17066eee6e3029272fa6a44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ecec1eff783311415180f8d53cbbf782698960f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ecec1eff783311415180f8d53cbbf782698960f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ecec1eff783311415180f8d53cbbf782698960f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ecec1eff783311415180f8d53cbbf782698960f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c16c4238bc17a160c9fc9b05fb8a91b8fcda5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c16c4238bc17a160c9fc9b05fb8a91b8fcda5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c16c4238bc17a160c9fc9b05fb8a91b8fcda5da"}], "stats": {"total": 187, "additions": 163, "deletions": 24}, "files": [{"sha": "ae4f3cc8e1a5cc9f74b7242580a564425ef86559", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3ecec1eff783311415180f8d53cbbf782698960f", "patch": "@@ -1,3 +1,10 @@\n+2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/56785\n+\t* include/std/tuple (_Tuple_impl): Remove zero-element specialization\n+\tand define one-element specialization.\n+\t* testsuite/20_util/tuple/56785.cc: New.\n+\n 2015-01-17  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/22_locale/codecvt/codecvt_utf8/requirements/1.cc:"}, {"sha": "e500a762d876f6d3c0e9b25c28de4c050caf67cb", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 124, "deletions": 24, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=3ecec1eff783311415180f8d53cbbf782698960f", "patch": "@@ -158,30 +158,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<std::size_t _Idx, typename... _Elements>\n     struct _Tuple_impl; \n \n-  /**\n-   * Zero-element tuple implementation. This is the basis case for the \n-   * inheritance recursion.\n-   */\n-  template<std::size_t _Idx>\n-    struct _Tuple_impl<_Idx>\n-    {\n-      template<std::size_t, typename...> friend class _Tuple_impl;\n-\n-      _Tuple_impl() = default;\n-\n-      template<typename _Alloc>\n-        _Tuple_impl(allocator_arg_t, const _Alloc&) { }\n-\n-      template<typename _Alloc>\n-        _Tuple_impl(allocator_arg_t, const _Alloc&, const _Tuple_impl&) { }\n-\n-      template<typename _Alloc>\n-        _Tuple_impl(allocator_arg_t, const _Alloc&, _Tuple_impl&&) { }\n-\n-    protected:\n-      void _M_swap(_Tuple_impl&) noexcept { /* no-op */ }\n-    };\n-\n   template<typename _Tp>\n     struct __is_empty_non_tuple : is_empty<_Tp> { };\n \n@@ -358,6 +334,130 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n+  // Basis case of inheritance recursion.\n+  template<std::size_t _Idx, typename _Head>\n+    struct _Tuple_impl<_Idx, _Head>\n+    : private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>\n+    {\n+      template<std::size_t, typename...> friend class _Tuple_impl;\n+\n+      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;\n+\n+      static constexpr _Head&\n+      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n+\n+      static constexpr const _Head&\n+      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }\n+\n+      constexpr _Tuple_impl()\n+      : _Base() { }\n+\n+      explicit\n+      constexpr _Tuple_impl(const _Head& __head)\n+      : _Base(__head) { }\n+\n+      template<typename _UHead>\n+        explicit\n+        constexpr _Tuple_impl(_UHead&& __head)\n+\t: _Base(std::forward<_UHead>(__head)) { }\n+\n+      constexpr _Tuple_impl(const _Tuple_impl&) = default;\n+\n+      constexpr\n+      _Tuple_impl(_Tuple_impl&& __in)\n+      noexcept(is_nothrow_move_constructible<_Head>::value)\n+      : _Base(std::forward<_Head>(_M_head(__in))) { }\n+\n+      template<typename _UHead>\n+        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)\n+\t: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }\n+\n+      template<typename _UHead>\n+        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)\n+\t: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n+\t{ }\n+\n+      template<typename _Alloc>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)\n+\t: _Base(__tag, __use_alloc<_Head>(__a)) { }\n+\n+      template<typename _Alloc>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t\t    const _Head& __head)\n+\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }\n+\n+      template<typename _Alloc, typename _UHead>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t            _UHead&& __head)\n+\t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n+\t        std::forward<_UHead>(__head)) { }\n+\n+      template<typename _Alloc>\n+        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t            const _Tuple_impl& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }\n+\n+      template<typename _Alloc>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t            _Tuple_impl&& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n+\t        std::forward<_Head>(_M_head(__in))) { }\n+\n+      template<typename _Alloc, typename _UHead>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t            const _Tuple_impl<_Idx, _UHead>& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),\n+\t\t_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }\n+\n+      template<typename _Alloc, typename _UHead>\n+\t_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,\n+\t            _Tuple_impl<_Idx, _UHead>&& __in)\n+\t: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n+                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))\n+\t{ }\n+\n+      _Tuple_impl&\n+      operator=(const _Tuple_impl& __in)\n+      {\n+\t_M_head(*this) = _M_head(__in);\n+\treturn *this;\n+      }\n+\n+      _Tuple_impl&\n+      operator=(_Tuple_impl&& __in)\n+      noexcept(is_nothrow_move_assignable<_Head>::value)\n+      {\n+\t_M_head(*this) = std::forward<_Head>(_M_head(__in));\n+\treturn *this;\n+      }\n+\n+      template<typename _UHead>\n+        _Tuple_impl&\n+        operator=(const _Tuple_impl<_Idx, _UHead>& __in)\n+        {\n+\t  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);\n+\t  return *this;\n+\t}\n+\n+      template<typename _UHead>\n+        _Tuple_impl&\n+        operator=(_Tuple_impl<_Idx, _UHead>&& __in)\n+        {\n+\t  _M_head(*this)\n+\t    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));\n+\t  return *this;\n+\t}\n+\n+    protected:\n+      void\n+      _M_swap(_Tuple_impl& __in)\n+      noexcept(noexcept(swap(std::declval<_Head&>(), std::declval<_Head&>())))\n+      {\n+\tusing std::swap;\n+\tswap(_M_head(*this), _M_head(__in));\n+      }\n+    };\n+\n   /// Primary class template, tuple\n   template<typename... _Elements> \n     class tuple : public _Tuple_impl<0, _Elements...>"}, {"sha": "504ab0aef18d092a75263c9d51879bb4a8a58321", "filename": "libstdc++-v3/testsuite/20_util/tuple/56785.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F56785.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ecec1eff783311415180f8d53cbbf782698960f/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F56785.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2F56785.cc?ref=3ecec1eff783311415180f8d53cbbf782698960f", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <tuple>\n+\n+class Empty { };\n+\n+using std::tuple;\n+using char_pair = tuple<char, char>;\n+\n+static_assert( sizeof(tuple<Empty, char_pair>) == sizeof(char_pair),\n+               \"Nested tuple tuple<Empty, tuple<T,T>> is too big\");\n+\n+static_assert( sizeof(tuple<char_pair, char_pair>) == (2 * sizeof(char_pair)),\n+               \"Nested tuple<tuple<T,T, tuple<T,T>> is too big\" );"}]}