{"sha": "98e8112376654ff5eae902ecd41a61bf0508ff73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThlODExMjM3NjY1NGZmNWVhZTkwMmVjZDQxYTYxYmYwNTA4ZmY3Mw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:33:50Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:33:50Z"}, "message": "re PR debug/49090 (provide a way to recognize defaulted template parameters)\n\n\tPR debug/49090\n\t* dwarf2out.c (gen_generic_params_dies): Indicate default arguments\n\twith DW_AT_default_value.\n\nFrom-SVN: r196723", "tree": {"sha": "bdbb93e0e0179f8a7b68019a9725114d134f69e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdbb93e0e0179f8a7b68019a9725114d134f69e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98e8112376654ff5eae902ecd41a61bf0508ff73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e8112376654ff5eae902ecd41a61bf0508ff73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98e8112376654ff5eae902ecd41a61bf0508ff73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98e8112376654ff5eae902ecd41a61bf0508ff73/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6721db5d154364ab7f9bf7af62bc1a2f30313a39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6721db5d154364ab7f9bf7af62bc1a2f30313a39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6721db5d154364ab7f9bf7af62bc1a2f30313a39"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "c9389843271d341ae9837ce1c1e97618004bff9b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98e8112376654ff5eae902ecd41a61bf0508ff73", "patch": "@@ -1,3 +1,9 @@\n+2013-03-16  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/49090\n+\t* dwarf2out.c (gen_generic_params_dies): Indicate default arguments\n+\twith DW_AT_default_value.\n+\n 2013-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* BASE-VER: Set to 4.9.0."}, {"sha": "51e57378dad7127fc5ddce52f07ebd66cd7d0565", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=98e8112376654ff5eae902ecd41a61bf0508ff73", "patch": "@@ -10238,6 +10238,7 @@ gen_generic_params_dies (tree t)\n   tree parms, args;\n   int parms_num, i;\n   dw_die_ref die = NULL;\n+  int non_default;\n \n   if (!t || (TYPE_P (t) && !COMPLETE_TYPE_P (t)))\n     return;\n@@ -10257,9 +10258,14 @@ gen_generic_params_dies (tree t)\n \n   parms_num = TREE_VEC_LENGTH (parms);\n   args = lang_hooks.get_innermost_generic_args (t);\n+  if (TREE_CHAIN (args) && TREE_CODE (TREE_CHAIN (args)) == INTEGER_CST)\n+    non_default = int_cst_value (TREE_CHAIN (args));\n+  else\n+    non_default = TREE_VEC_LENGTH (args);\n   for (i = 0; i < parms_num; i++)\n     {\n       tree parm, arg, arg_pack_elems;\n+      dw_die_ref parm_die;\n \n       parm = TREE_VEC_ELT (parms, i);\n       arg = TREE_VEC_ELT (args, i);\n@@ -10274,12 +10280,14 @@ gen_generic_params_dies (tree t)\n \t     pack elements of ARG. Note that ARG would then be\n \t     an argument pack.  */\n \t  if (arg_pack_elems)\n-\t    template_parameter_pack_die (TREE_VALUE (parm),\n-\t\t\t\t\t arg_pack_elems,\n-\t\t\t\t\t die);\n+\t    parm_die = template_parameter_pack_die (TREE_VALUE (parm),\n+\t\t\t\t\t\t    arg_pack_elems,\n+\t\t\t\t\t\t    die);\n \t  else\n-\t    generic_parameter_die (TREE_VALUE (parm), arg,\n-\t\t\t\t   true /* Emit DW_AT_name */, die);\n+\t    parm_die = generic_parameter_die (TREE_VALUE (parm), arg,\n+\t\t\t\t\t      true /* emit name */, die);\n+\t  if (i >= non_default)\n+\t    add_AT_flag (parm_die, DW_AT_default_value, 1);\n \t}\n     }\n }"}, {"sha": "80d4ef3b8a68060c3f5ef82cce5d94f9d85ed1b7", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98e8112376654ff5eae902ecd41a61bf0508ff73/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=98e8112376654ff5eae902ecd41a61bf0508ff73", "patch": "@@ -407,8 +407,10 @@ struct lang_hooks\n \n   struct lang_hooks_for_lto lto;\n \n-  /* Returns the generic parameters of an instantiation of\n-     a generic type or decl, e.g. C++ template instantiation.  */\n+  /* Returns a TREE_VEC of the generic parameters of an instantiation of\n+     a generic type or decl, e.g. C++ template instantiation.  If\n+     TREE_CHAIN of the return value is set, it is an INTEGER_CST\n+     indicating how many of the elements are non-default.  */\n   tree (*get_innermost_generic_parms) (const_tree);\n \n   /* Returns the TREE_VEC of arguments of an instantiation"}]}