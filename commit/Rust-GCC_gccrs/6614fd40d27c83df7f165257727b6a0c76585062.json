{"sha": "6614fd40d27c83df7f165257727b6a0c76585062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYxNGZkNDBkMjdjODNkZjdmMTY1MjU3NzI3YjZhMGM3NjU4NTA2Mg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-21T14:08:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-21T14:08:35Z"}, "message": "alias.c: Fix comment formatting.\n\n\t* alias.c: Fix comment formatting.\n\t* alloc-pool.c: Likewise.\n\t* bitmap.c: Likewise.\n\t* bitmap.h: Likewise.\n\t* bt-load.c: Likewise.\n\t* c-common.c: Likewise.\n\t* c-common.h: Likewise.\n\t* c-decl.c: Likewise.\n\t* c-opts.c: Likewise.\n\t* c-pretty-print.c: Likewise.\n\t* caller-save.c: Likewise.\n\t* cfghooks.h: Likewise.\n\t* cgraph.c: Likewise.\n\t* collect2.c: Likewise.\n\t* cppfiles.c: Likewise.\n\t* cpplib.h: Likewise.\n\t* dwarf2out.c: Likewise.\n\t* dwarfout.c: Likewise.\n\t* emit-rtl.c: Likewise.\n\t* final.c: Likewise.\n\t* function.c: Likewise.\n\t* gcov.c: Likewise.\n\t* gcse.c: Likewise.\n\t* genemit.c: Likewise.\n\t* ggc.h: Likewise.\n\t* haifa-sched.c: Likewise.\n\t* ifcvt.c: Likewise.\n\t* libgcc2.h: Likewise.\n\t* loop.c: Likewise.\n\t* predict.h: Likewise.\n\t* unwind-libunwind.c: Likewise.\n\t* varasm.c: Likewise.\n\nFrom-SVN: r74907", "tree": {"sha": "819bfe4ccccb4c15796f3fe13761a4d89bd5599e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819bfe4ccccb4c15796f3fe13761a4d89bd5599e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6614fd40d27c83df7f165257727b6a0c76585062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6614fd40d27c83df7f165257727b6a0c76585062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6614fd40d27c83df7f165257727b6a0c76585062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6614fd40d27c83df7f165257727b6a0c76585062/comments", "author": null, "committer": null, "parents": [{"sha": "5b24813d3ea6e4bde2e339293cca352a13947d2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b24813d3ea6e4bde2e339293cca352a13947d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b24813d3ea6e4bde2e339293cca352a13947d2b"}], "stats": {"total": 158, "additions": 97, "deletions": 61}, "files": [{"sha": "848d486c152c8d2428d8f08fc6f48126788c88b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1,3 +1,38 @@\n+2003-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* alias.c: Fix comment formatting.\n+\t* alloc-pool.c: Likewise.\n+\t* bitmap.c: Likewise.\n+\t* bitmap.h: Likewise.\n+\t* bt-load.c: Likewise.\n+\t* c-common.c: Likewise.\n+\t* c-common.h: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-opts.c: Likewise.\n+\t* c-pretty-print.c: Likewise.\n+\t* caller-save.c: Likewise.\n+\t* cfghooks.h: Likewise.\n+\t* cgraph.c: Likewise.\n+\t* collect2.c: Likewise.\n+\t* cppfiles.c: Likewise.\n+\t* cpplib.h: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* dwarfout.c: Likewise.\n+\t* emit-rtl.c: Likewise.\n+\t* final.c: Likewise.\n+\t* function.c: Likewise.\n+\t* gcov.c: Likewise.\n+\t* gcse.c: Likewise.\n+\t* genemit.c: Likewise.\n+\t* ggc.h: Likewise.\n+\t* haifa-sched.c: Likewise.\n+\t* ifcvt.c: Likewise.\n+\t* libgcc2.h: Likewise.\n+\t* loop.c: Likewise.\n+\t* predict.h: Likewise.\n+\t* unwind-libunwind.c: Likewise.\n+\t* varasm.c: Likewise.\n+\n 2003-12-21  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/mn10300/mn10300.c (mn10300_encode_section_info): Fix"}, {"sha": "e4485375975bf03b1b0567a4f65c29402f8fff13", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -692,7 +692,7 @@ record_component_aliases (tree type)\n     case RECORD_TYPE:\n     case UNION_TYPE:\n     case QUAL_UNION_TYPE:\n-      /* Recursively record aliases for the base classes, if there are any */\n+      /* Recursively record aliases for the base classes, if there are any.  */\n       if (TYPE_BINFO (type) != NULL && TYPE_BINFO_BASETYPES (type) != NULL)\n \t{\n \t  int i;"}, {"sha": "c21cfe4c7074465fc4fe98a57477112c78ffec43", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -112,7 +112,7 @@ create_alloc_pool (const char *name, size_t size, size_t num)\n   pool->elt_size = size;\n   pool->elts_per_block = num;\n \n-  /* List header size should be a multiple of 8 */\n+  /* List header size should be a multiple of 8.  */\n   header_size = align_eight (sizeof (struct alloc_pool_list_def));\n \n   pool->block_size = (size * num) + header_size;"}, {"sha": "bffd9154aee374577be7c5fecb61c5a12424b5b2", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -348,7 +348,7 @@ bitmap_clear_bit (bitmap head, int bit)\n       unsigned word_num = bit / BITMAP_WORD_BITS % BITMAP_ELEMENT_WORDS;\n       ptr->bits[word_num] &= ~ (((BITMAP_WORD) 1) << bit_num);\n \n-      /* If we cleared the entire word, free up the element */\n+      /* If we cleared the entire word, free up the element.  */\n       if (bitmap_element_zerop (ptr))\n \tbitmap_element_free (head, ptr);\n     }"}, {"sha": "4191542d3ac5fc9ff0b237f77d757a5a45e6a0af", "filename": "gcc/bitmap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -305,7 +305,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   for (; ptr1_ != 0 ; ptr1_ = ptr1_->next)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      /* Advance BITMAP2 to the equivalent link */\t\t\t\\\n+      /* Advance BITMAP2 to the equivalent link.  */\t\t\t\\\n       while (ptr2_ != 0 && ptr2_->indx < ptr1_->indx)\t\t\t\\\n \tptr2_ = ptr2_->next;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "6f77a203202d6cf71667382d21c934db86e9faa3", "filename": "gcc/bt-load.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -155,7 +155,7 @@ static void note_btr_set (rtx, rtx, void *);\n    migrating branch target load instructions.  */\n static struct obstack migrate_btrl_obstack;\n \n-/* Basic block dominator information used when migrating PT instructions */\n+/* Basic block dominator information used when migrating PT instructions.  */\n static dominance_info dom;\n \n /* Array indexed by basic block number, giving the set of registers"}, {"sha": "a52a3cbfe2b988d197c4d223f1e13e6fe6edec01", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -386,7 +386,7 @@ int flag_isoc94;\n \n int flag_isoc99;\n \n-/* Nonzero means that we have builtin functions, and main is an int */\n+/* Nonzero means that we have builtin functions, and main is an int.  */\n \n int flag_hosted = 1;\n "}, {"sha": "a5b8fa11ea6ede95bf3993852ca27efd8452896f", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -553,7 +553,7 @@ extern int flag_isoc94;\n \n extern int flag_isoc99;\n \n-/* Nonzero means that we have builtin functions, and main is an int */\n+/* Nonzero means that we have builtin functions, and main is an int.  */\n \n extern int flag_hosted;\n "}, {"sha": "7e426abf6ad9752fdd8d89d68e550ce3610a4942", "filename": "gcc/c-decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -125,7 +125,7 @@ static GTY(()) struct stmt_tree_s c_stmt_tree;\n \n static GTY(()) tree c_scope_stmt_stack;\n \n-/* State saving variables. */\n+/* State saving variables.  */\n int c_in_iteration_stmt;\n int c_in_case_stmt;\n \n@@ -541,7 +541,7 @@ poplevel (int keep, int dummy ATTRIBUTE_UNUSED, int functionbody)\n   tree decl;\n   tree p;\n \n-  /* The following line does not use |= due to a bug in HP's C compiler */\n+  /* The following line does not use |= due to a bug in HP's C compiler.  */\n   scope->function_body = scope->function_body | functionbody;\n \n   if (keep == KEEP_MAYBE)\n@@ -1335,7 +1335,7 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t Currently, it can only be defined in the prototype.  */\n       COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n \n-      /* If either declaration has a nondefault visibility, use it. */\n+      /* If either declaration has a nondefault visibility, use it.  */\n       if (DECL_VISIBILITY (olddecl) != VISIBILITY_DEFAULT)\n \t{\n \t  if (DECL_VISIBILITY (newdecl) != VISIBILITY_DEFAULT\n@@ -1425,7 +1425,7 @@ duplicate_decls (tree newdecl, tree olddecl, int different_binding_level,\n \t{\n \t  if (TREE_USED (olddecl)\n \t      /* In unit-at-a-time mode we never inline re-defined extern\n-\t         inline functions. */\n+\t         inline functions.  */\n \t      && !flag_unit_at_a_time)\n \t    (*debug_hooks->outlining_inline_function) (olddecl);\n \n@@ -2775,7 +2775,7 @@ finish_decl (tree decl, tree init, tree asmspec_tree)\n \t\t    || TREE_CODE (decl) == FIELD_DECL))\n     objc_check_decl (decl);\n \n-  /* Deduce size of array from initialization, if not already known */\n+  /* Deduce size of array from initialization, if not already known.  */\n   if (TREE_CODE (type) == ARRAY_TYPE\n       && TYPE_DOMAIN (type) == 0\n       && TREE_CODE (decl) != TYPE_DECL)\n@@ -5089,7 +5089,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \n   layout_type (t);\n \n-  /* Delete all zero-width bit-fields from the fieldlist */\n+  /* Delete all zero-width bit-fields from the fieldlist.  */\n   {\n     tree *fieldlistp = &fieldlist;\n     while (*fieldlistp)\n@@ -5105,7 +5105,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n   TYPE_FIELDS (t) = fieldlist;\n \n   /* If there are lots of fields, sort so we can look through them fast.\n-    We arbitrarily consider 16 or more elts to be \"a lot\".  */\n+     We arbitrarily consider 16 or more elts to be \"a lot\".  */\n \n   {\n     int len = 0;"}, {"sha": "3f89f9d1c9eab95830775aa41e7f26006e01a945", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1441,7 +1441,7 @@ finish_options (const char *tif)\n \t  if (opt->code == OPT_imacros\n \t      && cpp_push_include (parse_in, opt->arg))\n \t    {\n-\t      /* Disable push_command_line_include callback for now. */\n+\t      /* Disable push_command_line_include callback for now.  */\n \t      include_cursor = deferred_count + 1;\n \t      cpp_scan_nooutput (parse_in);\n \t    }"}, {"sha": "1c1f77bcd749b639ab59690d88bbd98325c6addc", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1106,7 +1106,7 @@ pp_c_initializer_list (c_pretty_printer *pp, tree e)\n     }\n }\n \n-/* Pretty-print a brace-enclosed initializer-list.   */\n+/* Pretty-print a brace-enclosed initializer-list.  */\n \n static void\n pp_c_brace_enclosed_initializer_list (c_pretty_printer *pp, tree l)\n@@ -1246,7 +1246,7 @@ pp_c_postfix_expression (c_pretty_printer *pp, tree e)\n     }\n }\n \n-/* Print out an expression-list; E is expected to be a TREE_LIST  */\n+/* Print out an expression-list; E is expected to be a TREE_LIST.  */\n \n void\n pp_c_expression_list (c_pretty_printer *pp, tree e)\n@@ -1259,7 +1259,7 @@ pp_c_expression_list (c_pretty_printer *pp, tree e)\n     }\n }\n \n-/* Print out an expression-list in parens, as in a function call.   */\n+/* Print out an expression-list in parens, as in a function call.  */\n \n void\n pp_c_call_argument_list (c_pretty_printer *pp, tree t)"}, {"sha": "7133fe393abd0becc412179915fa70c2c0307ca7", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -699,7 +699,7 @@ insert_restore (struct insn_chain *chain, int before_p, int regno,\n       n_regs_saved--;\n     }\n \n-  /* Tell our callers how many extra registers we saved/restored */\n+  /* Tell our callers how many extra registers we saved/restored.  */\n   return numregs - 1;\n }\n \n@@ -771,7 +771,7 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n       n_regs_saved++;\n     }\n \n-  /* Tell our callers how many extra registers we saved/restored */\n+  /* Tell our callers how many extra registers we saved/restored.  */\n   return numregs - 1;\n }\n "}, {"sha": "5ef3b1f5480feeb1a2f19a16e17208dc38ab5c7d", "filename": "gcc/cfghooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcfghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcfghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -31,7 +31,7 @@ struct cfg_hooks\n \n   /* Basic CFG manipulation.  */\n \n-  /* Return new basic block */\n+  /* Return new basic block.  */\n   basic_block (*create_basic_block) (void *head, void *end, basic_block after);\n \n   /* Redirect edge E to the given basic block B and update underlying program"}, {"sha": "91b08a65c69590dd42fdb3b587853db2475dafda", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -268,7 +268,7 @@ cgraph_mark_needed_node (struct cgraph_node *node)\n   cgraph_mark_reachable_node (node);\n }\n \n-/* Record call from CALLER to CALLEE  */\n+/* Record call from CALLER to CALLEE.  */\n \n struct cgraph_edge *\n cgraph_record_call (tree caller, tree callee)"}, {"sha": "a249e4c70b2cab27ee4cb248d4f77824b94c4364", "filename": "gcc/collect2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1432,10 +1432,10 @@ main (int argc, char **argv)\n \n   fork_execute (\"gcc\",  c_argv);\n #ifdef COLLECT_EXPORT_LIST\n-  /* On AIX we must call tlink because of possible templates resolution */\n+  /* On AIX we must call tlink because of possible templates resolution.  */\n   do_tlink (ld2_argv, object_lst);\n #else\n-  /* Otherwise, simply call ld because tlink is already done */\n+  /* Otherwise, simply call ld because tlink is already done.  */\n   fork_execute (\"ld\", ld2_argv);\n \n   /* Let scan_prog_file do any final mods (OSF/rose needs this for"}, {"sha": "b5b5461b9eed70895f5ea2ed3b98b318ff43bd2b", "filename": "gcc/cppfiles.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcppfiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcppfiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppfiles.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -862,7 +862,7 @@ cpp_included (cpp_reader *pfile, const char *fname)\n   return entry != NULL;\n }\n \n-/* Calculate the hash value of a file hash entry P. */\n+/* Calculate the hash value of a file hash entry P.  */\n \n static hashval_t\n file_hash_hash (const void *p)"}, {"sha": "5f189245eb58e7799c5731d5d15d68c7e17b6f06", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -219,7 +219,7 @@ struct cpp_options\n   /* Nonzero means use extra default include directories for C++.  */\n   unsigned char cplusplus;\n \n-  /* Nonzero means handle cplusplus style comments */\n+  /* Nonzero means handle cplusplus style comments.  */\n   unsigned char cplusplus_comments;\n \n   /* Nonzero means define __OBJC__, treat @ as a special token, and"}, {"sha": "8ecc5d1b5f10013fb395cb842753b94096b31937", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -4673,7 +4673,7 @@ add_AT_die_ref (dw_die_ref die, enum dwarf_attribute attr_kind, dw_die_ref targ_\n }\n \n /* Add an AT_specification attribute to a DIE, and also make the back\n-   pointer from the specification to the definition. */\n+   pointer from the specification to the definition.  */\n \n static inline void\n add_AT_specification (dw_die_ref die, dw_die_ref targ_die)\n@@ -11848,7 +11848,7 @@ setup_namespace_context (tree thing, dw_die_ref context_die)\n {\n   tree context = DECL_P (thing) ? DECL_CONTEXT (thing) : TYPE_CONTEXT (thing);\n   if (context && TREE_CODE (context) == NAMESPACE_DECL)\n-    /* Force out the namespace. */\n+    /* Force out the namespace.  */\n     context_die = force_namespace_die (context);\n \n   return context_die;\n@@ -11879,32 +11879,32 @@ declare_in_namespace (tree thing, dw_die_ref context_die)\n     }\n }\n \n-/* Generate a DIE for a namespace or namespace alias */\n+/* Generate a DIE for a namespace or namespace alias.  */\n \n static void\n gen_namespace_die (tree decl)\n {\n   dw_die_ref context_die = setup_namespace_context (decl, comp_unit_die);\n \n   /* Namespace aliases have a DECL_ABSTRACT_ORIGIN of the namespace\n-     they are an alias of.*/\n+     they are an alias of. */\n   if (DECL_ABSTRACT_ORIGIN (decl) == NULL)\n     {\n-      /* Output a real namespace */\n+      /* Output a real namespace.  */\n       dw_die_ref namespace_die\n \t= new_die (DW_TAG_namespace, context_die, decl);\n       add_name_and_src_coords_attributes (namespace_die, decl);\n       equate_decl_number_to_die (decl, namespace_die);\n     }\n   else\n     {\n-      /* Output a namespace alias */\n+      /* Output a namespace alias.  */\n \n-      /* Force out the namespace we are an alias of, if necessary */\n+      /* Force out the namespace we are an alias of, if necessary.  */\n       dw_die_ref origin_die\n \t= force_namespace_die (DECL_ABSTRACT_ORIGIN (decl));\n \n-      /* Now create the namespace alias DIE. */\n+      /* Now create the namespace alias DIE.  */\n       dw_die_ref namespace_die\n \t= new_die (DW_TAG_imported_declaration, context_die, decl);\n       add_name_and_src_coords_attributes (namespace_die, decl);\n@@ -12670,7 +12670,7 @@ prune_unused_types_mark (dw_die_ref die, int dokids)\n       prune_unused_types_walk_attribs (die);\n \n       /* If this node is a specification,\n-         also mark the definition, if it exists. */\n+         also mark the definition, if it exists.  */\n       if (get_AT_flag (die, DW_AT_declaration) && die->die_definition)\n         prune_unused_types_mark (die->die_definition, 1);\n     }"}, {"sha": "b90bb6bd7fa5687c6ad2138721859c8ef4bf8802", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -2956,7 +2956,7 @@ subscript_data_attribute (tree type)\n \t\t  FMT_CODE (1, TREE_CODE (lower) == INTEGER_CST,\n \t\t\t    upper && TREE_CODE (upper) == INTEGER_CST));\n \n-\t  /* Output the index type for this dimension.\t*/\n+\t  /* Output the index type for this dimension.  */\n \t  ASM_OUTPUT_DWARF_FUND_TYPE (asm_out_file,\n \t\t\t\t      fundamental_type_code (domain));\n \n@@ -2985,7 +2985,7 @@ subscript_data_attribute (tree type)\n \n \t  ASM_OUTPUT_DWARF_FUND_TYPE (asm_out_file, FT_integer);\n \n-\t  /* Output the (assumed) lower bound (constant) value.\t */\n+\t  /* Output the (assumed) lower bound (constant) value.  */\n \n \t  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, 0);\n \n@@ -4282,7 +4282,7 @@ output_die (void (*die_specific_output_function) (void *), void *param)\n \n   ASM_OUTPUT_LABEL (asm_out_file, begin_label);\n \n-  /* Write the DIE-length word.\t */\n+  /* Write the DIE-length word.  */\n \n   ASM_OUTPUT_DWARF_DELTA4 (asm_out_file, end_label, begin_label);\n \n@@ -4291,7 +4291,7 @@ output_die (void (*die_specific_output_function) (void *), void *param)\n   next_unused_dienum++;\n   die_specific_output_function (param);\n \n-  /* Write a label which will act as the name for the end of this DIE.\t*/\n+  /* Write a label which will act as the name for the end of this DIE.  */\n \n   ASM_OUTPUT_LABEL (asm_out_file, end_label);\n }\n@@ -4310,7 +4310,7 @@ end_sibling_chain (void)\n \n   ASM_OUTPUT_LABEL (asm_out_file, begin_label);\n \n-  /* Write the DIE-length word.\t */\n+  /* Write the DIE-length word.  */\n \n   ASM_OUTPUT_DWARF_DATA4 (asm_out_file, 4);\n "}, {"sha": "f42df2f0ba2011c7dc6efa36a07dab5607941799", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -971,7 +971,7 @@ mark_reg_pointer (rtx reg, int align)\n \tREGNO_POINTER_ALIGN (REGNO (reg)) = align;\n     }\n   else if (align && align < REGNO_POINTER_ALIGN (REGNO (reg)))\n-    /* We can no-longer be sure just how aligned this pointer is */\n+    /* We can no-longer be sure just how aligned this pointer is.  */\n     REGNO_POINTER_ALIGN (REGNO (reg)) = align;\n }\n \n@@ -2551,7 +2551,7 @@ verify_rtx_sharing (rtx orig, rtx insn)\n     }\n   RTX_FLAG (x, used) = 1;\n \n-  /* Now scan the subexpressions recursively. */\n+  /* Now scan the subexpressions recursively.  */\n \n   format_ptr = GET_RTX_FORMAT (code);\n \n@@ -2867,11 +2867,12 @@ copy_rtx_if_shared_1 (rtx *orig1)\n \t      int j;\n \t      int len = XVECLEN (x, i);\n               \n-              /* Copy the vector iff I copied the rtx and the length is nonzero. */\n+              /* Copy the vector iff I copied the rtx and the length\n+\t\t is nonzero.  */\n \t      if (copied && len > 0)\n \t\tXVEC (x, i) = gen_rtvec_v (len, XVEC (x, i)->elem);\n               \n-              /* Call recsusively on all inside the vector. */\n+              /* Call recsusively on all inside the vector.  */\n \t      for (j = 0; j < len; j++)\n                 {\n \t\t  if (last_ptr)"}, {"sha": "3310a40d6911389dfb22c89292ae4a0dc5b711ad", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1907,7 +1907,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t/* An INSN, JUMP_INSN or CALL_INSN.\n \t   First check for special kinds that recog doesn't recognize.  */\n \n-\tif (GET_CODE (body) == USE /* These are just declarations */\n+\tif (GET_CODE (body) == USE /* These are just declarations.  */\n \t    || GET_CODE (body) == CLOBBER)\n \t  break;\n "}, {"sha": "6eb44aeec3481cc5268e8843988e62afa7bca3df", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -4844,7 +4844,7 @@ assign_parms (tree fndecl)\n \t\t\t\t     size_stored / UNITS_PER_WORD);\n \t    }\n \t  /* If parm is already bound to register pair, don't change \n-\t     this binding. */\n+\t     this binding.  */\n \t  if (! DECL_RTL_SET_P (parm))\n \t    SET_DECL_RTL (parm, stack_parm);\n \t}"}, {"sha": "f95334a4319fcc2a287b80d6febad360794d344e", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -906,7 +906,7 @@ read_graph_file (void)\n     }\n   gcov_close ();\n \n-  /* We built everything backwards, so nreverse them all */\n+  /* We built everything backwards, so nreverse them all.  */\n \n   /* Reverse sources. Not strictly necessary, but we'll then process\n      them in the 'expected' order.  */"}, {"sha": "b52a083d417dbb9c57f089cefd121ae67b21ffd7", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -7990,7 +7990,7 @@ bypass_jumps (FILE *file)\n   if (file)\n     dump_flow_info (file);\n \n-  /* Return if there's nothing to do, or it is too expensive  */\n+  /* Return if there's nothing to do, or it is too expensive.  */\n   if (n_basic_blocks <= 1 || is_too_expensive (_ (\"jump bypassing disabled\")))\n     return 0;\n "}, {"sha": "0e695d2729c3badf22dda3ed502d2b2c26fa0453", "filename": "gcc/genemit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -389,7 +389,7 @@ gen_insn (rtx insn, int lineno)\n   printf (\")\\n\");\n   printf (\"{\\n\");\n \n-  /* Output code to construct and return the rtl for the instruction body */\n+  /* Output code to construct and return the rtl for the instruction body.  */\n \n   if (XVECLEN (insn, 1) == 1)\n     {"}, {"sha": "8add2da33baa319f05d3495d01424103d9f597c3", "filename": "gcc/ggc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fggc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fggc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -213,7 +213,7 @@ extern struct alloc_zone *tree_zone;\n extern void *ggc_alloc (size_t);\n /* Allocate an object into the specified allocation zone.  */\n extern void *ggc_alloc_zone (size_t, struct alloc_zone *);\n-/* Allocate an object of the specified type and size. */\n+/* Allocate an object of the specified type and size.  */\n extern void *ggc_alloc_typed (enum gt_types_enum, size_t);\n /* Like ggc_alloc, but allocates cleared memory.  */\n extern void *ggc_alloc_cleared (size_t);"}, {"sha": "5e11b39d507781aea97740269b1050da8fce7173", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1871,7 +1871,7 @@ ok_for_early_queue_removal (rtx insn)\n \n \n /* Remove insns from the queue, before they become \"ready\" with respect\n-   to FU latency considerations.   */\n+   to FU latency considerations.  */\n \n static int \n early_queue_to_ready (state_t state, struct ready_list *ready)"}, {"sha": "24c8fd8ef73beaae5f7a67b5a3aa6aebe94437ca", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -452,7 +452,7 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n      conditional execution register from a comparison, it can do so here.  */\n   IFCVT_MODIFY_TESTS (ce_info, true_expr, false_expr);\n \n-  /* See if the conversion failed */\n+  /* See if the conversion failed.  */\n   if (!true_expr || !false_expr)\n     goto fail;\n #endif\n@@ -521,7 +521,7 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n #ifdef IFCVT_MODIFY_MULTIPLE_TESTS\n \t  IFCVT_MODIFY_MULTIPLE_TESTS (ce_info, bb, t, f);\n \n-\t  /* See if the conversion failed */\n+\t  /* See if the conversion failed.  */\n \t  if (!t || !f)\n \t    goto fail;\n #endif\n@@ -563,7 +563,7 @@ cond_exec_process_if_block (ce_if_block_t * ce_info,\n     }\n \n #ifdef IFCVT_MODIFY_FINAL\n-  /* Do any machine dependent final modifications */\n+  /* Do any machine dependent final modifications.  */\n   IFCVT_MODIFY_FINAL (ce_info);\n #endif\n "}, {"sha": "0bd6d2eac6d1e70f72c5d16212710caa1958726b", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -69,15 +69,15 @@ typedef unsigned int UQItype\t__attribute__ ((mode (QI)));\n typedef\t\t int HItype\t__attribute__ ((mode (HI)));\n typedef unsigned int UHItype\t__attribute__ ((mode (HI)));\n #if MIN_UNITS_PER_WORD > 1\n-/* These typedefs are usually forbidden on dsp's with UNITS_PER_WORD 1 */\n+/* These typedefs are usually forbidden on dsp's with UNITS_PER_WORD 1.  */\n typedef \t int SItype\t__attribute__ ((mode (SI)));\n typedef unsigned int USItype\t__attribute__ ((mode (SI)));\n #if LONG_LONG_TYPE_SIZE > 32\n-/* These typedefs are usually forbidden on archs with UNITS_PER_WORD 2 */\n+/* These typedefs are usually forbidden on archs with UNITS_PER_WORD 2.  */\n typedef\t\t int DItype\t__attribute__ ((mode (DI)));\n typedef unsigned int UDItype\t__attribute__ ((mode (DI)));\n #if MIN_UNITS_PER_WORD > 4\n-/* These typedefs are usually forbidden on archs with UNITS_PER_WORD 4 */\n+/* These typedefs are usually forbidden on archs with UNITS_PER_WORD 4.  */\n typedef\t\t int TItype\t__attribute__ ((mode (TI)));\n typedef unsigned int UTItype\t__attribute__ ((mode (TI)));\n #endif"}, {"sha": "58fc1a0ac4eaf21b898382334f73a3be0e234507", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -5654,7 +5654,7 @@ record_biv (struct loop *loop, struct induction *v, rtx insn, rtx dest_reg,\n       /* Set initial value to the reg itself.  */\n       bl->initial_value = dest_reg;\n       bl->final_value = 0;\n-      /* We haven't seen the initializing insn yet */\n+      /* We haven't seen the initializing insn yet.  */\n       bl->init_insn = 0;\n       bl->init_set = 0;\n       bl->initial_test = 0;"}, {"sha": "d0741dc704dc8b5b948b56e0d0361431a3edaada", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -39,7 +39,7 @@ enum prediction\n extern void predict_insn_def (rtx, enum br_predictor, enum prediction);\n extern void predict_insn (rtx, enum br_predictor, int);\n \n-/* Avoid unneeded dependency on basic_block.h  */\n+/* Avoid unneeded dependency on basic_block.h.  */\n #ifdef BASIC_BLOCK\n extern void predict_edge (edge, enum br_predictor, int);\n extern void predict_edge_def (edge, enum br_predictor, enum prediction);"}, {"sha": "054f9838c1e343da08132739e02c7653d650b322", "filename": "gcc/unwind-libunwind.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Funwind-libunwind.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Funwind-libunwind.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-libunwind.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -126,7 +126,7 @@ _Unwind_SetGR (struct _Unwind_Context *context, int index, _Unwind_Word val)\n   unw_set_reg (&context->cursor, index, val);\n #ifdef UNW_TARGET_IA64\n   if (index >= UNW_IA64_GR && index <= UNW_IA64_GR + 127)\n-    /* Clear the NaT bit. */\n+    /* Clear the NaT bit.  */\n     unw_set_reg (&context->cursor, UNW_IA64_NAT + (index - UNW_IA64_GR), 0);\n #endif\n }"}, {"sha": "70c13bb6bd1a199433ed8fc40515c90895dd1440", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6614fd40d27c83df7f165257727b6a0c76585062/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6614fd40d27c83df7f165257727b6a0c76585062", "patch": "@@ -1135,7 +1135,7 @@ assemble_start_function (tree decl, const char *fnname)\n       maybe_assemble_visibility (decl);\n     }\n \n-  /* Do any machine/system dependent processing of the function name */\n+  /* Do any machine/system dependent processing of the function name.  */\n #ifdef ASM_DECLARE_FUNCTION_NAME\n   ASM_DECLARE_FUNCTION_NAME (asm_out_file, fnname, current_function_decl);\n #else"}]}