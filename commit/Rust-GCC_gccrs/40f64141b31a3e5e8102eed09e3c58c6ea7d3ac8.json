{"sha": "40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmNjQxNDFiMzFhM2U1ZTgxMDJlZWQwOWUzYzU4YzZlYTdkM2FjOA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-11-02T15:26:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-11-02T15:26:04Z"}, "message": "re PR tree-optimization/37542 (PRE doesn't simplify during phi-translation)\n\n2008-11-02  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37542\n\t* tree-ssa-pre.c (fully_constant_expression): Handle more cases.\n\t* tree-ssa-sccvn.c (vn_get_expr_for): Fix typo.\n\t(vn_nary_op_lookup_stmt): Adjust for unary reference trees.\n\t(vn_nary_op_insert_stmt): Likewise.\n\t(visit_use): Likewise.\n\n\t* gcc.dg/tree-ssa/ssa-pre-22.c: New testcase.\n\t* gcc.c-torture/compile/20081101-1.c: Likewise.\n\nFrom-SVN: r141534", "tree": {"sha": "7d774c5ca44289be14a3e90d232870e60aa071e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d774c5ca44289be14a3e90d232870e60aa071e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "15fe850fe4e170adc06c9231173a55fd10b12b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15fe850fe4e170adc06c9231173a55fd10b12b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15fe850fe4e170adc06c9231173a55fd10b12b2d"}], "stats": {"total": 119, "additions": 94, "deletions": 25}, "files": [{"sha": "90c40cac6659bd2660fc4440c9a5bbd10466d2e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -1,3 +1,12 @@\n+2008-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37542\n+\t* tree-ssa-pre.c (fully_constant_expression): Handle more cases.\n+\t* tree-ssa-sccvn.c (vn_get_expr_for): Fix typo.\n+\t(vn_nary_op_lookup_stmt): Adjust for unary reference trees.\n+\t(vn_nary_op_insert_stmt): Likewise.\n+\t(visit_use): Likewise.\n+\n 2008-11-02  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.md (UNSPEC_SWAP): Remove constants."}, {"sha": "e7c346467c455a03b582c7e3f34d48ed487f11d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -1,3 +1,9 @@\n+2008-11-02  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37542\n+\t* gcc.dg/tree-ssa/ssa-pre-22.c: New testcase.\n+\t* gcc.c-torture/compile/20081101-1.c: Likewise.\n+\n 2008-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37991"}, {"sha": "0e484d0624fa6ec261a0e81d9b1d84e2f3c07560", "filename": "gcc/testsuite/gcc.c-torture/compile/20081101-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20081101-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20081101-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20081101-1.c?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -0,0 +1,12 @@\n+int foo (int i, int b)\n+{\n+  int mask;\n+  int result;\n+  if (b)\n+    mask = -1;\n+  else\n+    mask = 0;\n+  result = i + 1;\n+  result = result & mask;\n+  return result;\n+}"}, {"sha": "3a1697e6c76dcfac2d88c332f384875a22854f2e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-22.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-22.c?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-stats\" } */\n+\n+int foo (int i, int b)\n+{\n+  int j = 1;\n+  if (b)\n+    j = i;\n+  return j - i;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Eliminated: 1\" \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "d881bf3961c2f47a30c067cb45b4c05f719f07b2", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -1088,47 +1088,59 @@ fully_constant_expression (pre_expr e)\n \tvn_nary_op_t nary = PRE_EXPR_NARY (e);\n \tswitch (TREE_CODE_CLASS (nary->opcode))\n \t  {\n+\t  case tcc_expression:\n+\t    if (nary->opcode == TRUTH_NOT_EXPR)\n+\t      goto do_unary;\n+\t    if (nary->opcode != TRUTH_AND_EXPR\n+\t\t&& nary->opcode != TRUTH_OR_EXPR\n+\t\t&& nary->opcode != TRUTH_XOR_EXPR)\n+\t      return e;\n+\t    /* Fallthrough.  */\n \t  case tcc_binary:\n+\t  case tcc_comparison:\n \t    {\n \t      /* We have to go from trees to pre exprs to value ids to\n \t\t constants.  */\n \t      tree naryop0 = nary->op[0];\n \t      tree naryop1 = nary->op[1];\n-\t      tree const0, const1, result;\n-\t      if (is_gimple_min_invariant (naryop0))\n-\t\tconst0 = naryop0;\n-\t      else\n+\t      tree result;\n+\t      if (!is_gimple_min_invariant (naryop0))\n \t\t{\n \t\t  pre_expr rep0 = get_or_alloc_expr_for (naryop0);\n \t\t  unsigned int vrep0 = get_expr_value_id (rep0);\n-\t\t  const0 = get_constant_for_value_id (vrep0);\n+\t\t  tree const0 = get_constant_for_value_id (vrep0);\n+\t\t  if (const0)\n+\t\t    naryop0 = fold_convert (TREE_TYPE (naryop0), const0);\n \t\t}\n-\t      if (is_gimple_min_invariant (naryop1))\n-\t\tconst1 = naryop1;\n-\t      else\n+\t      if (!is_gimple_min_invariant (naryop1))\n \t\t{\n \t\t  pre_expr rep1 = get_or_alloc_expr_for (naryop1);\n \t\t  unsigned int vrep1 = get_expr_value_id (rep1);\n-\t\t  const1 = get_constant_for_value_id (vrep1);\n-\t\t}\n-\t      result = NULL;\n-\t      if (const0 && const1)\n-\t\t{\n-\t\t  tree type1 = TREE_TYPE (nary->op[0]);\n-\t\t  tree type2 = TREE_TYPE (nary->op[1]);\n-\t\t  const0 = fold_convert (type1, const0);\n-\t\t  const1 = fold_convert (type2, const1);\n-\t\t  result = fold_binary (nary->opcode, nary->type, const0,\n-\t\t\t\t\tconst1);\n+\t\t  tree const1 = get_constant_for_value_id (vrep1);\n+\t\t  if (const1)\n+\t\t    naryop1 = fold_convert (TREE_TYPE (naryop1), const1);\n \t\t}\n+\t      result = fold_binary (nary->opcode, nary->type,\n+\t\t\t\t    naryop0, naryop1);\n \t      if (result && is_gimple_min_invariant (result))\n \t\treturn get_or_alloc_expr_for_constant (result);\n+\t      /* We might have simplified the expression to a\n+\t\t SSA_NAME for example from x_1 * 1.  But we cannot\n+\t\t insert a PHI for x_1 unconditionally as x_1 might\n+\t\t not be available readily.  */\n \t      return e;\n \t    }\n+\t  case tcc_reference:\n+\t    if (nary->opcode != REALPART_EXPR\n+\t\t&& nary->opcode != IMAGPART_EXPR \n+\t\t&& nary->opcode != VIEW_CONVERT_EXPR)\n+\t      return e;\n+\t    /* Fallthrough.  */\n \t  case tcc_unary:\n+do_unary:\n \t    {\n-\t    /* We have to go from trees to pre exprs to value ids to\n-\t       constants.  */\n+\t      /* We have to go from trees to pre exprs to value ids to\n+\t\t constants.  */\n \t      tree naryop0 = nary->op[0];\n \t      tree const0, result;\n \t      if (is_gimple_min_invariant (naryop0))\n@@ -1146,7 +1158,6 @@ fully_constant_expression (pre_expr e)\n \t\t  const0 = fold_convert (type1, const0);\n \t\t  result = fold_unary (nary->opcode, nary->type, const0);\n \t\t}\n-\t      \n \t      if (result && is_gimple_min_invariant (result))\n \t\treturn get_or_alloc_expr_for_constant (result);\n \t      return e;"}, {"sha": "80f7a92c3dcef625546c1a43885f518f395353bc", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=40f64141b31a3e5e8102eed09e3c58c6ea7d3ac8", "patch": "@@ -258,8 +258,8 @@ vn_get_expr_for (tree name)\n     {\n     case tcc_reference:\n       if (gimple_assign_rhs_code (def_stmt) == VIEW_CONVERT_EXPR\n-\t  && gimple_assign_rhs_code (def_stmt) == REALPART_EXPR\n-\t  && gimple_assign_rhs_code (def_stmt) == IMAGPART_EXPR)\n+\t  || gimple_assign_rhs_code (def_stmt) == REALPART_EXPR\n+\t  || gimple_assign_rhs_code (def_stmt) == IMAGPART_EXPR)\n \texpr = fold_build1 (gimple_assign_rhs_code (def_stmt),\n \t\t\t    gimple_expr_type (def_stmt),\n \t\t\t    TREE_OPERAND (gimple_assign_rhs1 (def_stmt), 0));\n@@ -1281,6 +1281,10 @@ vn_nary_op_lookup_stmt (gimple stmt, vn_nary_op_t *vnresult)\n   vno1.type = TREE_TYPE (gimple_assign_lhs (stmt));\n   for (i = 0; i < vno1.length; ++i)\n     vno1.op[i] = gimple_op (stmt, i + 1);\n+  if (vno1.opcode == REALPART_EXPR\n+      || vno1.opcode == IMAGPART_EXPR\n+      || vno1.opcode == VIEW_CONVERT_EXPR)\n+    vno1.op[0] = TREE_OPERAND (vno1.op[0], 0);\n   vno1.hashcode = vn_nary_op_compute_hash (&vno1);\n   slot = htab_find_slot_with_hash (current_info->nary, &vno1, vno1.hashcode,\n \t\t\t\t   NO_INSERT);\n@@ -1385,6 +1389,10 @@ vn_nary_op_insert_stmt (gimple stmt, tree result)\n   vno1->type = TREE_TYPE (gimple_assign_lhs (stmt));\n   for (i = 0; i < vno1->length; ++i)\n     vno1->op[i] = gimple_op (stmt, i + 1);\n+  if (vno1->opcode == REALPART_EXPR\n+      || vno1->opcode == IMAGPART_EXPR\n+      || vno1->opcode == VIEW_CONVERT_EXPR)\n+    vno1->op[0] = TREE_OPERAND (vno1->op[0], 0);\n   vno1->result = result;\n   vno1->hashcode = vn_nary_op_compute_hash (vno1);\n   slot = htab_find_slot_with_hash (current_info->nary, vno1, vno1->hashcode,\n@@ -2380,8 +2388,18 @@ visit_use (tree use)\n \t\t    case GIMPLE_SINGLE_RHS:\n \t\t      switch (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)))\n \t\t\t{\n-\t\t\tcase tcc_declaration:\n \t\t\tcase tcc_reference:\n+\t\t\t  /* VOP-less references can go through unary case.  */\n+\t\t\t  if ((gimple_assign_rhs_code (stmt) == REALPART_EXPR\n+\t\t\t       || gimple_assign_rhs_code (stmt) == IMAGPART_EXPR\n+\t\t\t       || gimple_assign_rhs_code (stmt) == VIEW_CONVERT_EXPR )\n+\t\t\t      && TREE_CODE (TREE_OPERAND (gimple_assign_rhs1 (stmt), 0)) == SSA_NAME)\n+\t\t\t    {\n+\t\t\t      changed = visit_unary_op (lhs, stmt);\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  /* Fallthrough.  */\n+\t\t\tcase tcc_declaration:\n \t\t\t  changed = visit_reference_op_load\n \t\t\t      (lhs, gimple_assign_rhs1 (stmt), stmt);\n \t\t\t  break;"}]}