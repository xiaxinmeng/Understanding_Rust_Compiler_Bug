{"sha": "2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEwMjI1ZTQ3ODY4ZmJmY2VhZWNhYTVlMmRlOTZjMWM1YTIyNTFlYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-12T20:33:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-12T20:40:29Z"}, "message": "preprocessor: EOF location is at end of file [PR95013]\n\nMy recent C++ parser change to pay attention to EOF location uncovered\na separate bug.  The preprocesor's EOF logic would set the EOF\nlocation to be the beginning of the last line of text in the file --\nnot the 'line' after that, which contains no characters.  Mostly.\nThis fixes things so that when we attempt to read the last line of the\nmain file, we don't pop the buffer until the tokenizer has a chance to\ncreate an EOF token with the correct location information.  It is then\nresponsible for popping the buffer.  As it happens, raw string literal\ntokenizing contained a bug -- it would increment the line number\nprematurely, because it cached buffer->cur in a local variable, but\nchecked buffer->cur before updating it to figure out if it was at end\nof file.   We fix up that too.\n\nThe EOF token intentionally doesn't have a column number -- it's not a\nposition on a line, it's a non-existant line.\n\nThe testsuite churn is just correcting the EOF location diagnostics.\n\n\tlibcpp/\n\tPR preprocessor/95013\n\t* lex.c (lex_raw_string): Process line notes before incrementing.\n\tCorrect incrementing condition.  Adjust for new\n\t_cpp_get_fresh_line EOF behaviour.\n\t(_cpp_get_fresh_line): Do not pop buffer at EOF, increment line\n\tinstead.\n\t(_cpp_lex_direct): Adjust for new _cpp_get_fresh_line behaviour.\n\t(cpp_directive_only_process): Assert we got a fresh line.\n\t* traditional.c (_cpp_read_logical_line_trad): Adjust for new\n\t_cpp_get_fresh_line behaviour.\n\n\tgcc/testsuite/\n\t* c-c++-common/goacc/pr79428-1.c: Adjust EOF diagnostic location.\n\t* c-c++-common/gomp/pr79428-2.c: Likewise.\n\t* g++.dg/cpp0x/decltype63.C: Likewise.\n\t* g++.dg/cpp0x/gen-attrs-64.C: Likewise.\n\t* g++.dg/cpp0x/pr68726.C: Likewise.\n\t* g++.dg/cpp0x/pr78341.C: Likewise.\n\t* g++.dg/cpp1y/pr65202.C: Likewise.\n\t* g++.dg/cpp1y/pr65340.C: Likewise.\n\t* g++.dg/cpp1y/pr68578.C: Likewise.\n\t* g++.dg/cpp1z/class-deduction44.C: Likewise.\n\t* g++.dg/diagnostic/unclosed-extern-c.C: Likewise.\n\t* g++.dg/diagnostic/unclosed-function.C: Likewise.\n\t* g++.dg/diagnostic/unclosed-namespace.C: Likewise.\n\t* g++.dg/diagnostic/unclosed-struct.C: Likewise.\n\t* g++.dg/ext/pr84598.C: Likewise.\n\t* g++.dg/other/switch4.C: Likewise.\n\t* g++.dg/parse/attr4.C: Likewise.\n\t* g++.dg/parse/cond4.C: Likewise.\n\t* g++.dg/parse/crash10.C: Likewise.\n\t* g++.dg/parse/crash18.C: Likewise.\n\t* g++.dg/parse/crash27.C: Likewise.\n\t* g++.dg/parse/crash34.C: Likewise.\n\t* g++.dg/parse/crash35.C: Likewise.\n\t* g++.dg/parse/crash52.C: Likewise.\n\t* g++.dg/parse/crash59.C: Likewise.\n\t* g++.dg/parse/crash61.C: Likewise.\n\t* g++.dg/parse/crash67.C: Likewise.\n\t* g++.dg/parse/error14.C: Likewise.\n\t* g++.dg/parse/error56.C: Likewise.\n\t* g++.dg/parse/invalid1.C: Likewise.\n\t* g++.dg/parse/parameter-declaration-1.C: Likewise.\n\t* g++.dg/parse/parser-pr28152-2.C: Likewise.\n\t* g++.dg/parse/parser-pr28152.C: Likewise.\n\t* g++.dg/parse/pr68722.C: Likewise.\n\t* g++.dg/pr46852.C: Likewise.\n\t* g++.dg/pr46868.C: Likewise.\n\t* g++.dg/template/crash115.C: Likewise.\n\t* g++.dg/template/crash43.C: Likewise.\n\t* g++.dg/template/crash90.C: Likewise.\n\t* g++.dg/template/error-recovery1.C: Likewise.\n\t* g++.dg/template/error57.C: Likewise.\n\t* g++.old-deja/g++.other/crash31.C: Likewise.\n\t* gcc.dg/empty-source-2.c: Likewise.\n\t* gcc.dg/empty-source-3.c: Likewise.\n\t* gcc.dg/noncompile/pr30552-3.c: Likewise.\n\t* gcc.dg/noncompile/pr35447-1.c: Likewise.\n\t* gcc.dg/pr20245-1.c: Likewise.\n\t* gcc.dg/pr28419.c: Likewise.\n\t* gcc.dg/rtl/truncated-rtl-file.c: Likewise.\n\t* gcc.dg/unclosed-init.c: Likewise.\n\t* obj-c++.dg/property/property-neg-6.mm: Likewise.\n\t* obj-c++.dg/syntax-error-10.mm: Likewise.\n\t* obj-c++.dg/syntax-error-8.mm: Likewise.\n\t* obj-c++.dg/syntax-error-9.mm: Likewise.", "tree": {"sha": "a6162228bf200d85b53bfdc040fc95623a967794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6162228bf200d85b53bfdc040fc95623a967794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c3d986c4e704336c17155c558911beff1e1385", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c3d986c4e704336c17155c558911beff1e1385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c3d986c4e704336c17155c558911beff1e1385"}], "stats": {"total": 232, "additions": 168, "deletions": 64}, "files": [{"sha": "b84acda5a67f104d9f26b215ddce65cf03bbe1fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,61 @@\n+2020-05-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/95013\n+\t* c-c++-common/goacc/pr79428-1.c: Adjust EOF diagnostic location.\n+\t* c-c++-common/gomp/pr79428-2.c: Likewise.\n+\t* g++.dg/cpp0x/decltype63.C: Likewise.\n+\t* g++.dg/cpp0x/gen-attrs-64.C: Likewise.\n+\t* g++.dg/cpp0x/pr68726.C: Likewise.\n+\t* g++.dg/cpp0x/pr78341.C: Likewise.\n+\t* g++.dg/cpp1y/pr65202.C: Likewise.\n+\t* g++.dg/cpp1y/pr65340.C: Likewise.\n+\t* g++.dg/cpp1y/pr68578.C: Likewise.\n+\t* g++.dg/cpp1z/class-deduction44.C: Likewise.\n+\t* g++.dg/diagnostic/unclosed-extern-c.C: Likewise.\n+\t* g++.dg/diagnostic/unclosed-function.C: Likewise.\n+\t* g++.dg/diagnostic/unclosed-namespace.C: Likewise.\n+\t* g++.dg/diagnostic/unclosed-struct.C: Likewise.\n+\t* g++.dg/ext/pr84598.C: Likewise.\n+\t* g++.dg/other/switch4.C: Likewise.\n+\t* g++.dg/parse/attr4.C: Likewise.\n+\t* g++.dg/parse/cond4.C: Likewise.\n+\t* g++.dg/parse/crash10.C: Likewise.\n+\t* g++.dg/parse/crash18.C: Likewise.\n+\t* g++.dg/parse/crash27.C: Likewise.\n+\t* g++.dg/parse/crash34.C: Likewise.\n+\t* g++.dg/parse/crash35.C: Likewise.\n+\t* g++.dg/parse/crash52.C: Likewise.\n+\t* g++.dg/parse/crash59.C: Likewise.\n+\t* g++.dg/parse/crash61.C: Likewise.\n+\t* g++.dg/parse/crash67.C: Likewise.\n+\t* g++.dg/parse/error14.C: Likewise.\n+\t* g++.dg/parse/error56.C: Likewise.\n+\t* g++.dg/parse/invalid1.C: Likewise.\n+\t* g++.dg/parse/parameter-declaration-1.C: Likewise.\n+\t* g++.dg/parse/parser-pr28152-2.C: Likewise.\n+\t* g++.dg/parse/parser-pr28152.C: Likewise.\n+\t* g++.dg/parse/pr68722.C: Likewise.\n+\t* g++.dg/pr46852.C: Likewise.\n+\t* g++.dg/pr46868.C: Likewise.\n+\t* g++.dg/template/crash115.C: Likewise.\n+\t* g++.dg/template/crash43.C: Likewise.\n+\t* g++.dg/template/crash90.C: Likewise.\n+\t* g++.dg/template/error-recovery1.C: Likewise.\n+\t* g++.dg/template/error57.C: Likewise.\n+\t* g++.old-deja/g++.other/crash31.C: Likewise.\n+\t* gcc.dg/empty-source-2.c: Likewise.\n+\t* gcc.dg/empty-source-3.c: Likewise.\n+\t* gcc.dg/noncompile/pr30552-3.c: Likewise.\n+\t* gcc.dg/noncompile/pr35447-1.c: Likewise.\n+\t* gcc.dg/pr20245-1.c: Likewise.\n+\t* gcc.dg/pr28419.c: Likewise.\n+\t* gcc.dg/rtl/truncated-rtl-file.c: Likewise.\n+\t* gcc.dg/unclosed-init.c: Likewise.\n+\t* obj-c++.dg/property/property-neg-6.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-10.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-8.mm: Likewise.\n+\t* obj-c++.dg/syntax-error-9.mm: Likewise.\n+\n 2020-05-12  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/95074"}, {"sha": "68dea5b145e8352ce9497fd0339412084b4f074d", "filename": "gcc/testsuite/c-c++-common/goacc/pr79428-1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr79428-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr79428-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr79428-1.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -3,4 +3,6 @@\n void\n foo ()\n {\n-#pragma acc routine /* { dg-error \".#pragma acc routine. must be at file scope|expected\" } */\n+#pragma acc routine /* { dg-error \".#pragma acc routine. must be at file scope\" } */\n+// { dg-error \"expected\" \"end\" { target c } .-1 }\n+// { dg-error \"-:expected\" \"end\" { target c++ } .+1 }"}, {"sha": "0914963b8f9b18d19c7fbdb7c2e9e0a07df0c7ae", "filename": "gcc/testsuite/c-c++-common/gomp/pr79428-2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr79428-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr79428-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr79428-2.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,6 @@ void\n foo ()\n {\n #pragma omp sections\n-#pragma omp section /* { dg-error \"'#pragma omp section' may only be used in '#pragma omp sections' construct|not allowed|expected\" } */\n+#pragma omp section /* { dg-error \"'#pragma omp section' may only be used in '#pragma omp sections' construct|not allowed\" } */\n+// { dg-error \"expected\" \"end\" { target c } .-1 }\n+// { dg-error \"-:expected\" \"end\" { target c++ } .+1 }"}, {"sha": "b588bc3e5ef5185970ad53aa4518c67c5cd2818e", "filename": "gcc/testsuite/g++.dg/cpp0x/decltype63.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype63.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype63.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fdecltype63.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -5,4 +5,4 @@ template<typename T>\n class C{\n  T t;\n   decltype(t)::a:: // { dg-error \"expected\" }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "822b64ea460eefaa20f378f43e58ad776af9f353", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-64.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-64.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n namespace alignas() N  {} // { dg-error \"expected\"  }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "636a20c83be4954cdc4ed7380f00358209db3c1d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr68726.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68726.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68726.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68726.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -5,4 +5,4 @@ template <typename> struct A {\n   template <typename... _Args>\n   using __has_construct typename __construct_helper<_Args...>::type;  // { dg-error \"expected\" }\n } struct : A<int> {   // { dg-error \"expected\" }\n-  // { dg-error \"-:expected\" }\n+  // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "8573f9f0824d23e8641b940cc8b99d79c1bb2bca", "filename": "gcc/testsuite/g++.dg/cpp0x/pr78341.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78341.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78341.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr78341.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile { target c++11 } }\n \n alignas (alignas double // { dg-error \"expected\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "a76f8da689cba761e8d412b8a6134f550745aee0", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65202.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65202.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -25,4 +25,4 @@ int main()\n     foo<ns::bar> f;\n     adl::swap(f, f) // { dg-error \"expected ';'\" }\n }\n-// { dg-error \"-:expected '.'\" \"expected end of namespace\" }\n+// { dg-error \"-:expected '.'\" \"expected end of namespace\" { target *-*-* } .+1 }"}, {"sha": "d3e03f75df33647ef2cdc4a556083458a6426cbc", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65340.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -16,4 +16,5 @@ struct traverse {\n };\n }\n auto &traverse = constant < functors :: traverse > ;\n-operator()()->decltype(traverse(0, 0)) // { dg-error \"no match|expected\" }\n+operator()()->decltype(traverse(0, 0))// { dg-error \"no match\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "18edd83cd7f3c83a7e6f3fdb4c6249f3f0ff3adf", "filename": "gcc/testsuite/g++.dg/cpp1y/pr68578.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr68578.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,4 @@\n // { dg-do compile { target c++14 } }\n \n-template <typename> struct bar foo; template <> struct foo<>:  // { dg-error \"class template|expected\" }\n+template <typename> struct bar foo; template <> struct foo<>:  // { dg-error \"class template\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "95caa992a21ab692f47b37acc9ab5122890ccf1a", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction44.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction44.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -3,4 +3,4 @@\n \n template <typename> struct A;\n template <typename> struct B : A < B { , // { dg-error \"\"  }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "f905e4f3cc915f8747e2f33b791d75c8cecbd995", "filename": "gcc/testsuite/g++.dg/diagnostic/unclosed-extern-c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-extern-c.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -10,4 +10,4 @@ void bar (void);\n \n void test (void);\n // { message \"12: to match this '.'\" \"\" { target *-*-* } open_extern_c }\n-/* { dg-error \"-:expected '.' at end of input\"  } */\n+/* { dg-error \"-:expected '.' at end of input\" \"\" { target *-*-* } .+1 } */"}, {"sha": "4d841d5c6f4bb1c2d2d7f834e80a067b579be335", "filename": "gcc/testsuite/g++.dg/diagnostic/unclosed-function.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-function.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-function.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-function.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,4 @@\n void test (void)\n { /* { dg-message \"1: to match this '.'\" } */\n   int filler;\n-  /* { dg-error \"-:expected '.' at end of input\" } */\n+  /* { dg-error \"-:expected '.' at end of input\" \"\" { target *-*-* } .+1 } */"}, {"sha": "0887bc1e81366c47be07a6ca4a02c7d2da34693d", "filename": "gcc/testsuite/g++.dg/diagnostic/unclosed-namespace.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-namespace.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-namespace.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-namespace.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,3 @@\n namespace unclosed { /* { dg-message \"20: to match this '.'\" } */\n int filler;\n-/* { dg-error \"-:expected '.' at end of input\" } */\n+/* { dg-error \"-:expected '.' at end of input\" \"\" { target *-*-* } .+1 } */"}, {"sha": "e68e599620418759bf66cc4846adc6f1c37d9611", "filename": "gcc/testsuite/g++.dg/diagnostic/unclosed-struct.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-struct.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-struct.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Funclosed-struct.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,3 @@\n struct unclosed { /* { dg-message \"17: to match this '.'\" } */\n   int dummy;\n-  // { dg-error \"-:expected\"  }\n+  // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "8b78e0fddeab4cea042ebe74e434227175170db6", "filename": "gcc/testsuite/g++.dg/ext/pr84598.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr84598.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr84598.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpr84598.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,4 @@\n // { dg-options \"-fpermissive -w\" }\n \n template<int b> __attribute__ a([] { class c, __attribute__(vector_size(operator+()))) d; // { dg-error \"\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "5d0047b89c8d99cffac2d756bb75e864d39b46ed", "filename": "gcc/testsuite/g++.dg/other/switch4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fswitch4.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@ class a b;  // { dg-error \"aggregate\" }\n void c() {\n   switch ()  // { dg-error \"expected\" }\n   case b  // { dg-error \"expected\" }\n-    // { dg-error \"-:expected\" }\n+    // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "160c33e2625ce237ecf7109ab3e5a3cd4da98c8d", "filename": "gcc/testsuite/g++.dg/parse/attr4.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fattr4.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,4 @@\n // PR c++/93684 - ICE-on-invalid with broken attribute.\n \n-[[a:: // { dg-error \"expected|expected\" }\n+[[a:: // { dg-error \"expected\" }\n+  // { dg-error \"-:expected\" \"\" { target c++14 } .+1 }"}, {"sha": "893caeaa571729e38ff13163c0c6ff3676b95843", "filename": "gcc/testsuite/g++.dg/parse/cond4.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcond4.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,3 +4,4 @@\n void foo()                                                                                                                              \n {                                                                                                                                       \n   if (struct A{}// { dg-error \"types may not be defined|expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "7e2dec6bcb39ccaefbc0df1ffe58375f3809cc9a", "filename": "gcc/testsuite/g++.dg/parse/crash10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash10.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -9,4 +9,4 @@ class\n {\n   typename::\n ; // { dg-error \"expected\" }\n- // { dg-error \"-:expected\" }\n+ // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "596d3109ccccbd49ceae972aa2cca624d9d6e382", "filename": "gcc/testsuite/g++.dg/parse/crash18.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash18.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@\n // PR 18095: ICE\n // Origin: Volker Reichelt <reichelt@gcc.gnu.org>\n \n-struct A // { dg-error \"-:expected\" }\n+struct A // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "08977b2a4a8e917c8477cc89c196737f42bbcc41", "filename": "gcc/testsuite/g++.dg/parse/crash27.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash27.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,5 @@\n // Bug: 23225\n \n void Dispatcher()\n-\t (__builtin_offsetof (ArgsType, largeMsgLen)) // { dg-error \"initialize|end of input\" }\n+\t (__builtin_offsetof (ArgsType, largeMsgLen)) // { dg-error \"initialize\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "86f79cc4aef7f44ac327fa6f21a13c4833aeddfd", "filename": "gcc/testsuite/g++.dg/parse/crash34.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash34.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash34.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash34.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -3,4 +3,5 @@\n \n void foo()\n {\n-  namespace N { /* { dg-error \"is not allowed|at end of input\" } */\n+  namespace N { /* { dg-error \"is not allowed\" } */\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "05f0a631a31365dd01f57cac1c9224e319bf715e", "filename": "gcc/testsuite/g++.dg/parse/crash35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash35.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@\n struct a {};\n \n class foo : public a, a\t\t// { dg-error \"duplicate base\" }\n-{ // { dg-error \"-:at end of input\" } \n+{ // { dg-error \"-:at end of input\" \"\" { target *-*-* } .+1 } "}, {"sha": "5dfb69c41d633fe0eb6fbc04b8445b20f1961415", "filename": "gcc/testsuite/g++.dg/parse/crash52.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash52.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,4 @@\n // PR c++/39053\n \n-void foo() = // { dg-error \"initialized|expected\" }\n+void foo() = // { dg-error \"initialized\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "7526b08e1053d05db4fe1f85dfb15d6a4e631822", "filename": "gcc/testsuite/g++.dg/parse/crash59.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash59.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,4 @@\n // PR c++/53003\n \n struct A{ void a{} return b  // { dg-error \"16:function definition\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "713fe9f15e1897c1ecf82484b61a2f5edbd691c6", "filename": "gcc/testsuite/g++.dg/parse/crash61.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash61.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -5,4 +5,4 @@\n struct pair { constexpr pair (const) : }; // { dg-error \"\" }\n template <0> make_pair () {}\t\t  // { dg-error \"\" }\n pair prefix[] = { 0, make_pair }\t  // { dg-error \"\" }\n-// { dg-error \"-:expected\" \"\" { target c++11 } }\n+// { dg-error \"-:expected\" \"\" { target c++11 } .+1 }"}, {"sha": "2a5bb3f1d917c93b22222651331b1e0d1ea44197", "filename": "gcc/testsuite/g++.dg/parse/crash67.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash67.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@\n class x0;\n template <x1> x2() {  // { dg-error \"declared|type\" }\n x0 x3 = x3. // { dg-error \"incomplete type\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "fd6541800071abc8812538a321dd1283857ecda0", "filename": "gcc/testsuite/g++.dg/parse/error14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror14.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -20,4 +20,4 @@ struct X\n \t\t  //    }\n \n };   // { dg-error \"1:expected primary-expression before '.' token\" \"primary\"  }\n-// { dg-error \"-:expected\" \"at end of input\" }\n+// { dg-error \"-:expected\" \"at end of input\" { target *-*-* } .+1 }"}, {"sha": "11d319731386ea92f3270e2fa9b825967f377c76", "filename": "gcc/testsuite/g++.dg/parse/error56.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror56.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@ template <0> int __copy_streambufs_eof; // { dg-error \"\" }\n class {\n // { dg-error \"forbids\" \"\" { target *-*-* } .+1 }\n     friend __copy_streambufs_eof <> ( // { dg-error \"\" }\n- // { dg-error \"-:expected\" }\n+ // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "cb4ef1a69023678239fed32a5b37ea15c7aa21ff", "filename": "gcc/testsuite/g++.dg/parse/invalid1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Finvalid1.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -3,4 +3,4 @@\n // { dg-options \"-w\" }\n \n int foo ( foo += *[ // { dg-error \"expected\" }\n-// { dg-error \"-:invalid|expected\" }\n+// { dg-error \"-:invalid|expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "c6106d5206e3999c07f89deecac3595f96bbac23", "filename": "gcc/testsuite/g++.dg/parse/parameter-declaration-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparameter-declaration-1.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@\n \n struct {\n   a(void = 0; a(0), a(0) // { dg-error \"\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "28048bd1a9a52b4a6157e61ade57c38f4040b807", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152-2.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -8,4 +8,4 @@ main (void)\n \n   z = __complex__ (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '__complex__'\" \"primary-expression\" } \n   z = __complex__ (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '__complex__'\" \"primaty-expression\" } \n-  // { dg-error \"-:at end of input\" \"end\" }\n+  // { dg-error \"-:at end of input\" \"end\" { target *-*-* } .+1 }"}, {"sha": "34617340fabcc8c17aab4ac61f100edff1ab41bb", "filename": "gcc/testsuite/g++.dg/parse/parser-pr28152.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fparser-pr28152.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -8,4 +8,4 @@ main (void)\n \n   z = _Complex (1.90000007326203904e+19, 0.0);   // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n   z = _Complex (1.0e+0, 0.0) / z;    // { dg-error \"expected primary-expression before '_Complex'\" \"primary-expression\" } \n-  // { dg-error \"-:at end of input\" \"end\" }\n+  // { dg-error \"-:at end of input\" \"end\" { target *-*-* } .+1 }"}, {"sha": "26f6d11cfe18756509d24a56bdf0dcd816714a0b", "filename": "gcc/testsuite/g++.dg/parse/pr68722.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr68722.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr68722.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpr68722.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -6,4 +6,4 @@ class A {\n   A _M_ios_locale ios_base(ios_base &) template <_Traits> class basic_ios {  // { dg-error \"\" }\n     basic_ios basic_ios = operator= // { dg-error \"\" }\n // { dg-prune-output \"file ends in default argument\" }\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "5cfeaf96e19ee4e4eb09e02c74e5e06d2387af67", "filename": "gcc/testsuite/g++.dg/pr46852.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46852.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46852.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46852.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -5,4 +5,4 @@ template\n <\n class\n { // { dg-error \"\" }\n-// { dg-error \"-:\"  }\n+// { dg-error \"-:\" \"\" { target *-*-* } .+1 }"}, {"sha": "25b8c966f4d43edfcfa4ebdd9c920b2b419a37a3", "filename": "gcc/testsuite/g++.dg/pr46868.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46868.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46868.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr46868.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -2,4 +2,4 @@\n // { dg-do compile }\n \n template < int > struct S { S < // { dg-error \"\" }\n-  // { dg-error \"-:expected\" }\n+  // { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "c1a72352714db4095005e6de9bd7332785825c9c", "filename": "gcc/testsuite/g++.dg/template/crash115.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash115.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash115.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash115.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,4 @@\n // PR c++/56534\n \n template < struct template rebind < > // { dg-error \"expected|must follow\" }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "3647a17cad83e18015efeff9a39db2dadb0b4645", "filename": "gcc/testsuite/g++.dg/template/crash43.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -5,4 +5,4 @@ extern \"C\" {\n   struct ___is_pod {\n     enum {\n       __value = (sizeof(__gnu_internal::__test_type<_Tp>(0)))}; // { dg-error \"expected|declared\"  }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "e2a58e31819b252094729b8f52ef205d78032c74", "filename": "gcc/testsuite/g++.dg/template/crash90.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash90.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,6 @@ template < unsigned >\n struct A ;\n template < typename >\n struct B ;\n-template < typename T , A < B < T > {}// { dg-error \"initializer|parse error|type|expected\" }\n+template < typename T , A < B < T > {} // { dg-error \"parse error|non-type|initializer\" }\n+\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "6f9ce6d6bc2bb9dbc255ae53955dc67dca1546d3", "filename": "gcc/testsuite/g++.dg/template/error-recovery1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror-recovery1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror-recovery1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror-recovery1.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -7,4 +7,4 @@ template < typename > struct T\n   template < bool > struct T < S > // { dg-error \"\" }\n   {\n     void f () { // { dg-error \"expected\" }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "121fbb1d523c134d4587f6bad9eee89127992242", "filename": "gcc/testsuite/g++.dg/template/error57.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror57.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -2,4 +2,4 @@\n \n template <int()> struct a;\n template <int(b)> a < b\t\t// { dg-error \"int\" }\n-// { dg-error \"-:expected\"  }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "610dfe11270bb4ed526610eb786d09663df5d68d", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash31.C?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -7,4 +7,4 @@ struct foo\n {\n   foo();\n };\n-// { dg-error \"-:expected\" }\n+// { dg-error \"-:expected\" \"\" { target *-*-* } .+1 }"}, {"sha": "67906f9e8dd7807fde890d7ab253bc400eaa3305", "filename": "gcc/testsuite/gcc.dg/empty-source-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-2.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -3,4 +3,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n \n-/* { dg-warning \"-:ISO C forbids an empty translation unit\" \"empty\" } */\n+/* { dg-warning \"-:ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } .+1 } */"}, {"sha": "f2877159fe4ae5184c5f215e041009cb58970264", "filename": "gcc/testsuite/gcc.dg/empty-source-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fempty-source-3.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n \n-/* { dg-error \"-:ISO C forbids an empty translation unit\" \"empty\" } */\n+/* { dg-error \"-:ISO C forbids an empty translation unit\" \"empty\" { target *-*-* } .+1 } */"}, {"sha": "23cc7e6b253451e1c2d43943e675e6387a9b861a", "filename": "gcc/testsuite/gcc.dg/noncompile/pr30552-3.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr30552-3.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -12,4 +12,5 @@ int main()\n   int g()\n     int a[( {int b} )]; /* { dg-error \"braced-group within expression allowed only inside a function|declaration for parameter\" } */\n   return 0; /* { dg-error \"expected declaration specifiers before\" } */\n-} /* { dg-error \"expected declaration specifiers before|end of input|expected declaration or statement at end of input\" } */\n+} /* { dg-error \"expected declaration\" } */\n+/* { dg-error \"-:expected\" \"\" { target *-*-* } .+1 } */"}, {"sha": "499b9595f3c42a76cce213d0e4a7bbe4d4a4b6f5", "filename": "gcc/testsuite/gcc.dg/noncompile/pr35447-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr35447-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr35447-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2Fpr35447-1.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -4,4 +4,5 @@\n void foo()\n {\n   ({ int i().; }); /* { dg-error \"expected\" } */\n-} /* { dg-error \"-:expected\" } */\n+} /* { dg-error \"expected declaration\" }\n+/* { dg-error \"-:expected\" \"\" { target *-*-* } .+1 } */"}, {"sha": "ac88074066269adea9eaf33cac524402eccaefda", "filename": "gcc/testsuite/gcc.dg/pr20245-1.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20245-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20245-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr20245-1.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -2,4 +2,5 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void foo() x; /* { dg-error \"-:expected\" } */\n+void foo() x; /* { dg-error \"expected\" } */\n+/* { dg-error \"-:expected\" \"\" { target *-*-* } .+1 } */"}, {"sha": "d418a165b1e8d5c34b8b13e3e063f7030417bcdd", "filename": "gcc/testsuite/gcc.dg/pr28419.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28419.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,4 +1,4 @@\n /* { dg-do compile } */\n void foo() \n const char* p = __FUNCTION__; /* { dg-error \"\" } */\n-/* { dg-error \"-:expected\" \"\" } */\n+/* { dg-error \"-:expected\" \"\" { target *-*-* } .+1 } */"}, {"sha": "28d898bba9228436418f8048e5a966b2cc99567b", "filename": "gcc/testsuite/gcc.dg/rtl/truncated-rtl-file.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Frtl%2Ftruncated-rtl-file.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,2 +1,2 @@\n void __RTL test (void)\n-{ /* { dg-error \"-:no closing brace\" } */\n+{ /* { dg-error \"-:no closing brace\" \"\" { target *-*-* } .+1 } */"}, {"sha": "16c42c43e55cc8d4032842f938f08607374d7d1a", "filename": "gcc/testsuite/gcc.dg/unclosed-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Funclosed-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fgcc.dg%2Funclosed-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funclosed-init.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,3 @@\n int unclosed[] = { /* { dg-message \"18: to match this '.'\" } */\n   42\n- /* { dg-error \"-: expected '.' at end of input\" } */\n+ /* { dg-error \"-: expected '.' at end of input\" { target *-*-* } .+1 } */"}, {"sha": "1db6f0ba1b89d070eb6a0c7fb94063381ff56186", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-6.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-6.mm?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -6,4 +6,4 @@ @interface Bar\n   int iVar;\n }\n @property int FooBar /* { dg-error \"expected ';' at end of input\" } */\n-\t\t     /* { dg-error \"expected '@end' at end of input\" \"\" { target *-*-* } .-1 } */\n+\t\t     /* { dg-error \"-:expected '@end' at end of input\" \"\" { target *-*-* } .+1 } */"}, {"sha": "6fcf96f769e53d6c0793ba87f92c10b764449b4d", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-10.mm", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-10.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-10.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-10.mm?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1 +1,2 @@\n-@interface /* { dg-error \"expected identifier\" } */\n+@interface\n+/* { dg-error \"-:expected identifier\" \"\" { target *-*-* } .+1 } */"}, {"sha": "f7cfe0e0895a6fb738b42ad7d20ce39bb575958f", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-8.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-8.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-8.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-8.mm?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1 +1 @@\n-@interface A /* { dg-error \"expected ..end.\" } */\n\\ No newline at end of file\n+@interface A /* { dg-error \"-:expected ..end.\" \"\" { target *-*-* } .+1 } */"}, {"sha": "ae104e5c140e0aed58200e89c275211f8b1025a1", "filename": "gcc/testsuite/obj-c++.dg/syntax-error-9.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fsyntax-error-9.mm?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,3 @@\n @implementation SaturnDoc /* { dg-warning \"cannot find interface declaration\" } */\n - read: (void*)aStream ggg /* { dg-error \"expected .:. at end of input\" } */\n-/* { dg-error \"expected ..end. at end of input\" \"\" { target *-*-* } .-1 } */\n\\ No newline at end of file\n+/* { dg-error \"-:expected ..end. at end of input\" \"\" { target *-*-* } .+1 } */"}, {"sha": "7c41c4e15392d1e016ec356f1cdf8993fedd4307", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1,3 +1,17 @@\n+2020-05-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\tEOF location is at end of file\n+\tPR preprocessor/95013\n+\t* lex.c (lex_raw_string): Process line notes before incrementing.\n+\tCorrect incrementing condition.  Adjust for new\n+\t_cpp_get_fresh_line EOF behaviour.\n+\t(_cpp_get_fresh_line): Do not pop buffer at EOF, increment line\n+\tinstead.\n+\t(_cpp_lex_direct): Adjust for new _cpp_get_fresh_line behaviour.\n+\t(cpp_directive_only_process): Assert we got a fresh line.\n+\t* traditional.c (_cpp_read_logical_line_trad): Adjust for new\n+\t_cpp_get_fresh_line behaviour.\n+\n 2020-05-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* Makefile.in (CET_HOST_FLAGS): New."}, {"sha": "043852d14e2062759d3e99c51f1dd22f6c21e731", "filename": "libcpp/lex.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -1897,12 +1897,13 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \n \t  BUF_APPEND (base, cur - base);\n \n-\t  if (pfile->buffer->cur < pfile->buffer->rlimit)\n+\t  pfile->buffer->cur = cur-1;\n+\t  _cpp_process_line_notes (pfile, false);\n+\n+\t  if (pfile->buffer->next_line < pfile->buffer->rlimit)\n \t    CPP_INCREMENT_LINE (pfile, 0);\n \t  pfile->buffer->need_line = true;\n \n-\t  pfile->buffer->cur = cur-1;\n-\t  _cpp_process_line_notes (pfile, false);\n \t  if (!_cpp_get_fresh_line (pfile))\n \t    {\n \t      location_t src_loc = token->src_loc;\n@@ -1914,6 +1915,8 @@ lex_raw_string (cpp_reader *pfile, cpp_token *token, const uchar *base,\n \t\t_cpp_release_buff (pfile, first_buff);\n \t      cpp_error_with_line (pfile, CPP_DL_ERROR, src_loc, 0,\n \t\t\t\t   \"unterminated raw string\");\n+\t      /* Now pop the buffer that _cpp_get_fresh_line did not.  */\n+\t      _cpp_pop_buffer (pfile);\n \t      return;\n \t    }\n \n@@ -2651,8 +2654,6 @@ _cpp_lex_token (cpp_reader *pfile)\n bool\n _cpp_get_fresh_line (cpp_reader *pfile)\n {\n-  int return_at_eof;\n-\n   /* We can't get a new line until we leave the current directive.  */\n   if (pfile->state.in_directive)\n     return false;\n@@ -2683,10 +2684,17 @@ _cpp_get_fresh_line (cpp_reader *pfile)\n \t  buffer->next_line = buffer->rlimit;\n \t}\n \n-      return_at_eof = buffer->return_at_eof;\n-      _cpp_pop_buffer (pfile);\n-      if (pfile->buffer == NULL || return_at_eof)\n-\treturn false;\n+      if (buffer->prev && !buffer->return_at_eof)\n+\t_cpp_pop_buffer (pfile);\n+      else\n+\t{\n+\t  /* End of translation.  Do not pop the buffer yet. Increment\n+\t     line number so that the EOF token is on a line of its own\n+\t     (_cpp_lex_direct doesn't increment in that case, because\n+\t     it's hard for it to distinguish this special case). */\n+\t  CPP_INCREMENT_LINE (pfile, 0);\n+\t  return false;\n+\t}\n     }\n }\n \n@@ -2740,6 +2748,8 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t      /* Tell the compiler the line number of the EOF token.  */\n \t      result->src_loc = pfile->line_table->highest_line;\n \t      result->flags = BOL;\n+\t      /* Now pop the buffer that _cpp_get_fresh_line did not.  */\n+\t      _cpp_pop_buffer (pfile);\n \t    }\n \t  return result;\n \t}\n@@ -3975,7 +3985,8 @@ cpp_directive_only_process (cpp_reader *pfile,\n \t\t  /* Prep things for directive handling. */\n \t\t  buffer->next_line = pos;\n \t\t  buffer->need_line = true;\n-\t\t  _cpp_get_fresh_line (pfile);\n+\t\t  bool ok = _cpp_get_fresh_line (pfile);\n+\t\t  gcc_checking_assert (ok);\n \n \t\t  /* Ensure proper column numbering for generated\n \t\t     error messages. */"}, {"sha": "77adb3bf595fe5f358528b192f8e8ca5d78ee5b2", "filename": "libcpp/traditional.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2Ftraditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a0225e47868fbfceaecaa5e2de96c1c5a2251ea/libcpp%2Ftraditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ftraditional.c?ref=2a0225e47868fbfceaecaa5e2de96c1c5a2251ea", "patch": "@@ -312,7 +312,11 @@ _cpp_read_logical_line_trad (cpp_reader *pfile)\n   do\n     {\n       if (pfile->buffer->need_line && !_cpp_get_fresh_line (pfile))\n-\treturn false;\n+\t{\n+\t  /* Now pop the buffer that _cpp_get_fresh_line did not.  */\n+\t  _cpp_pop_buffer (pfile);\n+\t  return false;\n+\t}\n     }\n   while (!_cpp_scan_out_logical_line (pfile, NULL, false)\n \t || pfile->state.skipping);"}]}