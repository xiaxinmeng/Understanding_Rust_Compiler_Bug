{"sha": "148e4216a47b822512444dbd3ca5e2670aef431c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ4ZTQyMTZhNDdiODIyNTEyNDQ0ZGJkM2NhNWUyNjcwYWVmNDMxYw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-03-29T22:56:07Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-03-29T22:56:07Z"}, "message": "re PR preprocessor/34695 (Preprocessor warning->error conversion from -Werror is silent)\n\n\tPR preprocessor/34695\n\ngcc:\n\t* Makefile.in (c-opts.o): Depend on c-tree.h.\n\t* c-common.c: Move down include of diagnostic.h.\n\t(done_lexing, c_cpp_error): New.\n\t* c-common.h (done_lexing): Declare.\n\t* c-decl.c (c_write_global_declarations): Don't check cpp_errors\n\t(parse_in).\n\t* c-opts.c: Include c-tree.h.\n\t(c_common_init_options): Set preprocessor error callback.\n\t(c_common_handle_option): Do not set preprocessor\n\tinhibit_warnings, warnings_are_errors, warn_system_headers,\n\tpedantic_errors or inhibit_warnings flags.\n\t(c_common_post_options): Do not check cpp_errors (parse_in).\n\t(c_common_finish): Do not output dependencies if there were\n\terrors.  Do not check return value of cpp_finish.\n\t* c-ppoutput.c (pp_file_change): Set input_location.\n\t* c-tree.h (c_cpp_error): Declare.\n\t* diagnostic.c (diagnostic_set_info_translated): Also initialize\n\toverride_column.\n\t(diagnostic_build_prefix): Check override_column.\n\t* diagnostic.h (diagnostic_info): Add override_column field.\n\t(diagnostic_override_column): Define.\n\ngcc/cp:\n\t* cp-tree.h (cp_cpp_error): Remove.\n\t* error.c (cp_cpp_error): Remove.\n\t* parser.c (cp_lexer_new_main): Set done_lexing instead of\n\tclient_diagnostic and error callback.\n\ngcc/fortran:\n\t* cpp.c (cb_cpp_error): New.\n\t(gfc_cpp_post_options): Don't set cpp_option->inhibit_warnings.\n\tDon't check cpp_errors (cpp_in).\n\t(gfc_cpp_init_0): Set cb->error.\n\ngcc/testsuite:\n\t* gcc.dg/builtin-redefine.c, gcc.dg/cpp/redef2.c,\n\tgcc.dg/cpp/redef3.c, gcc.dg/cpp/trad/redef2.c: Use dg-message\n\tinstead of dg-warning for \"previous definition\" messages.\n\t* gcc.dg/cpp/Wvariadic-1.c, gcc.dg/cpp/Wvariadic-3.c: Expect\n\t\"warnings being treated as errors\" message.\n\t* gcc.dg/fltconst-1.c: Use -fshow-column.\n\nlibcpp:\n\t* makedepend.c: Remove.\n\t* Makefile.in (makedepend_OBJS, makedepend$(EXEEXT)): Remove.\n\t(all, clean, TAGS_SOURCES, include): Remove makedepend handling.\n\t* directives.c (cpp_errors): Remove.\n\t* errors.c (print_location, _cpp_begin_message, v_message):\n\tRemove.\n\t(cpp_error, cpp_error_with_line): Always use error callback.\n\t(cpp_error, cpp_error_with_line, cpp_errno): Return bool.\n\t* include/cpplib.h (cpp_options): Remove pedantic_errors,\n\tinhibit_warnings, warn_system_headers, inhibit_errors,\n\twarnings_are_errors, client_diagnostic.\n\t(cpp_callbacks): Add extra arguments to error callback; make it\n\treturn bool.\n\t(cpp_finish): Return void.\n\t(cpp_destroy): Remove inaccurate comment about return value.\n\t(cpp_errors, CPP_DL_EXTRACT, CPP_DL_WARNING_P): Remove.\n\t(CPP_DL_NOTE): Define.\n\t* include/line-map.h (linemap_print_containing_files): Remove.\n\t* init.c (cpp_finish): Do not check for or return number of\n\terrors.\n\t* internal.h (cpp_reader): Remove errors field.\n\t* line-map.c (linemap_print_containing_files): Remove.\n\t* macro.c (_cpp_create_definition): Use CPP_DL_NOTE for message\n\tabout previous definition.  Only emit it if previous diagnostic\n\twas emitted.\n\nFrom-SVN: r145263", "tree": {"sha": "e75993fadfb11c86fc56a516f41f7aafb3fee001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e75993fadfb11c86fc56a516f41f7aafb3fee001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/148e4216a47b822512444dbd3ca5e2670aef431c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148e4216a47b822512444dbd3ca5e2670aef431c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148e4216a47b822512444dbd3ca5e2670aef431c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148e4216a47b822512444dbd3ca5e2670aef431c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba20e30910df3945603374d426730d6da5350572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba20e30910df3945603374d426730d6da5350572", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba20e30910df3945603374d426730d6da5350572"}], "stats": {"total": 877, "additions": 321, "deletions": 556}, "files": [{"sha": "5f2d8ee7727848b95d37144825b37f9d5ba1ea7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,3 +1,28 @@\n+2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/34695\n+\t* Makefile.in (c-opts.o): Depend on c-tree.h.\n+\t* c-common.c: Move down include of diagnostic.h.\n+\t(done_lexing, c_cpp_error): New.\n+\t* c-common.h (done_lexing): Declare.\n+\t* c-decl.c (c_write_global_declarations): Don't check cpp_errors\n+\t(parse_in).\n+\t* c-opts.c: Include c-tree.h.\n+\t(c_common_init_options): Set preprocessor error callback.\n+\t(c_common_handle_option): Do not set preprocessor\n+\tinhibit_warnings, warnings_are_errors, warn_system_headers,\n+\tpedantic_errors or inhibit_warnings flags.\n+\t(c_common_post_options): Do not check cpp_errors (parse_in).\n+\t(c_common_finish): Do not output dependencies if there were\n+\terrors.  Do not check return value of cpp_finish.\n+\t* c-ppoutput.c (pp_file_change): Set input_location.\n+\t* c-tree.h (c_cpp_error): Declare.\n+\t* diagnostic.c (diagnostic_set_info_translated): Also initialize\n+\toverride_column.\n+\t(diagnostic_build_prefix): Check override_column.\n+\t* diagnostic.h (diagnostic_info): Add override_column field.\n+\t(diagnostic_override_column): Define.\n+\n 2009-03-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* c-common.c (c_expand_expr, c_staticp): Remove."}, {"sha": "d01fa3a1d5e651b802d841b7aa88dd09f65cf269", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1889,7 +1889,7 @@ c-opts.o : c-opts.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t\t\\\n         $(TREE_H) $(C_PRAGMA_H) $(FLAGS_H) $(TOPLEV_H) langhooks.h\t\t\\\n         $(TREE_INLINE_H) $(DIAGNOSTIC_H) intl.h debug.h $(C_COMMON_H)\t\\\n         opts.h options.h $(MKDEPS_H) incpath.h cppdefault.h $(TARGET_H) \\\n-\t$(TM_P_H) $(VARRAY_H)\n+\t$(TM_P_H) $(VARRAY_H) $(C_TREE_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n \t\t$< $(OUTPUT_OPTION) @TARGET_SYSTEM_ROOT_DEFINE@\n "}, {"sha": "9abd006baa55bf827c67de26eb2e34b1c7807471", "filename": "gcc/c-common.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -33,7 +33,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varray.h\"\n #include \"expr.h\"\n #include \"c-common.h\"\n-#include \"diagnostic.h\"\n #include \"tm_p.h\"\n #include \"obstack.h\"\n #include \"cpplib.h\"\n@@ -42,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-inline.h\"\n #include \"c-tree.h\"\n #include \"toplev.h\"\n+#include \"diagnostic.h\"\n #include \"tree-iterator.h\"\n #include \"hashtab.h\"\n #include \"tree-mudflap.h\"\n@@ -497,6 +497,10 @@ tree (*make_fname_decl) (tree, int);\n    This is a count, since unevaluated expressions can nest.  */\n int skip_evaluation;\n \n+/* Whether lexing has been completed, so subsequent preprocessor\n+   errors should use the compiler's input_location.  */\n+bool done_lexing = false;\n+\n /* Information about how a function name is generated.  */\n struct fname_var_t\n {\n@@ -7928,6 +7932,65 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token, tree value)\n #undef catenate_messages\n }\n \n+/* Callback from cpp_error for PFILE to print diagnostics from the\n+   preprocessor.  The diagnostic is of type LEVEL, at location\n+   LOCATION unless this is after lexing and the compiler's location\n+   should be used instead, with column number possibly overridden by\n+   COLUMN_OVERRIDE if not zero; MSG is the translated message and AP\n+   the arguments.  Returns true if a diagnostic was emitted, false\n+   otherwise.  */\n+\n+bool\n+c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n+\t     location_t location, unsigned int column_override,\n+\t     const char *msg, va_list *ap)\n+{\n+  diagnostic_info diagnostic;\n+  diagnostic_t dlevel;\n+  int save_warn_system_headers = warn_system_headers;\n+  bool ret;\n+\n+  switch (level)\n+    {\n+    case CPP_DL_WARNING_SYSHDR:\n+      if (flag_no_output)\n+\treturn false;\n+      warn_system_headers = 1;\n+      /* Fall through.  */\n+    case CPP_DL_WARNING:\n+      if (flag_no_output)\n+\treturn false;\n+      dlevel = DK_WARNING;\n+      break;\n+    case CPP_DL_PEDWARN:\n+      if (flag_no_output && !flag_pedantic_errors)\n+\treturn false;\n+      dlevel = DK_PEDWARN;\n+      break;\n+    case CPP_DL_ERROR:\n+      dlevel = DK_ERROR;\n+      break;\n+    case CPP_DL_ICE:\n+      dlevel = DK_ICE;\n+      break;\n+    case CPP_DL_NOTE:\n+      dlevel = DK_NOTE;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  if (done_lexing)\n+    location = input_location;\n+  diagnostic_set_info_translated (&diagnostic, msg, ap,\n+\t\t\t\t  location, dlevel);\n+  if (column_override)\n+    diagnostic_override_column (&diagnostic, column_override);\n+  ret = report_diagnostic (&diagnostic);\n+  if (level == CPP_DL_WARNING_SYSHDR)\n+    warn_system_headers = save_warn_system_headers;\n+  return ret;\n+}\n+\n /* Walk a gimplified function and warn for functions whose return value is\n    ignored and attribute((warn_unused_result)) is set.  This is done before\n    inlining, so we don't have to worry about that.  */"}, {"sha": "642769d8b337f47d7b21e69262fbab149a09e604", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -660,6 +660,11 @@ extern int max_tinst_depth;\n \n extern int skip_evaluation;\n \n+/* Whether lexing has been completed, so subsequent preprocessor\n+   errors should use the compiler's input_location.  */\n+\n+extern bool done_lexing;\n+\n /* C types are partitioned into three subsets: object, function, and\n    incomplete types.  */\n #define C_TYPE_OBJECT_P(type) \\"}, {"sha": "97d95b858d1ad1123c947f84c46c25a325917e2d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -8148,7 +8148,7 @@ c_write_global_declarations (void)\n \n   /* Don't waste time on further processing if -fsyntax-only or we've\n      encountered errors.  */\n-  if (flag_syntax_only || errorcount || sorrycount || cpp_errors (parse_in))\n+  if (flag_syntax_only || errorcount || sorrycount)\n     return;\n \n   /* Close the external scope.  */"}, {"sha": "334577aea58ed09ed3c81c941361d28368dc4943", "filename": "gcc/c-opts.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"mkdeps.h\"\n #include \"target.h\"\n #include \"tm_p.h\"\n+#include \"c-tree.h\"\t\t/* For c_cpp_error.  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -201,6 +202,7 @@ c_common_init_options (unsigned int argc, const char **argv)\n {\n   static const unsigned int lang_flags[] = {CL_C, CL_ObjC, CL_CXX, CL_ObjCXX};\n   unsigned int i, result;\n+  struct cpp_callbacks *cb;\n \n   /* This is conditionalized only because that is the way the front\n      ends used to do it.  Maybe this should be unconditional?  */\n@@ -216,6 +218,8 @@ c_common_init_options (unsigned int argc, const char **argv)\n \n   parse_in = cpp_create_reader (c_dialect_cxx () ? CLK_GNUCXX: CLK_GNUC89,\n \t\t\t\tident_hash, line_table);\n+  cb = cpp_get_callbacks (parse_in);\n+  cb->error = c_cpp_error;\n \n   cpp_opts = cpp_get_options (parse_in);\n   cpp_opts->dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n@@ -333,7 +337,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t or environment var dependency generation is used.  */\n       cpp_opts->deps.style = (code == OPT_M ? DEPS_SYSTEM: DEPS_USER);\n       flag_no_output = 1;\n-      cpp_opts->inhibit_warnings = 1;\n       break;\n \n     case OPT_MD:\n@@ -444,7 +447,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       break;\n \n     case OPT_Werror:\n-      cpp_opts->warnings_are_errors = value;\n       global_dc->warning_as_error_requested = value;\n       break;\n \n@@ -503,10 +505,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       warn_strict_null_sentinel = value;\n       break;\n \n-    case OPT_Wsystem_headers:\n-      cpp_opts->warn_system_headers = value;\n-      break;\n-\n     case OPT_Wtraditional:\n       cpp_opts->warn_traditional = value;\n       break;\n@@ -895,8 +893,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n \t c_common_post_options, so that a subsequent -Wno-endif-labels\n \t is not overridden.  */\n     case OPT_pedantic_errors:\n-      cpp_opts->pedantic_errors = 1;\n-      /* Fall through.  */\n     case OPT_pedantic:\n       cpp_opts->pedantic = 1;\n       cpp_opts->warn_endif_labels = 1;\n@@ -971,10 +967,6 @@ c_common_handle_option (size_t scode, const char *arg, int value)\n       flag_undef = 1;\n       break;\n \n-    case OPT_w:\n-      cpp_opts->inhibit_warnings = 1;\n-      break;\n-\n     case OPT_v:\n       verbose = true;\n       break;\n@@ -1159,10 +1151,6 @@ c_common_post_options (const char **pfilename)\n \n   input_location = UNKNOWN_LOCATION;\n \n-  /* If an error has occurred in cpplib, note it so we fail\n-     immediately.  */\n-  errorcount += cpp_errors (parse_in);\n-\n   *pfilename = this_input_filename\n     = cpp_read_main_file (parse_in, in_fnames[0]);\n   /* Don't do any compilation or preprocessing if there is no input file.  */\n@@ -1274,7 +1262,8 @@ c_common_finish (void)\n {\n   FILE *deps_stream = NULL;\n \n-  if (cpp_opts->deps.style != DEPS_NONE)\n+  /* Don't write the deps file if there are errors.  */\n+  if (cpp_opts->deps.style != DEPS_NONE && errorcount == 0)\n     {\n       /* If -M or -MM was seen without -MF, default output to the\n \t output stream.  */\n@@ -1290,7 +1279,7 @@ c_common_finish (void)\n \n   /* For performance, avoid tearing down cpplib's internal structures\n      with cpp_destroy ().  */\n-  errorcount += cpp_finish (parse_in, deps_stream);\n+  cpp_finish (parse_in, deps_stream);\n \n   if (deps_stream && deps_stream != out_stream\n       && (ferror (deps_stream) || fclose (deps_stream)))"}, {"sha": "ff3e6b6c8431037d46ec0a57f00e01462ae24e24", "filename": "gcc/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-ppoutput.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,6 +1,6 @@\n /* Preprocess only, using cpplib.\n    Copyright (C) 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007,\n-   2008 Free Software Foundation, Inc.\n+   2008, 2009 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994-95.\n \n    This program is free software; you can redistribute it and/or modify it\n@@ -521,6 +521,7 @@ pp_file_change (const struct line_map *map)\n \n   if (map != NULL)\n     {\n+      input_location = map->start_location;\n       if (print.first_time)\n \t{\n \t  /* Avoid printing foo.i when the main file is foo.c.  */"}, {"sha": "ac9586b824362ddc3606fcb8e42800ce85bdbf7c", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -672,4 +672,8 @@ extern void c_write_global_declarations (void);\n extern void pedwarn_c90 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n extern void pedwarn_c99 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n \n+extern bool c_cpp_error (cpp_reader *, int, location_t, unsigned int,\n+\t\t\t const char *, va_list *)\n+     ATTRIBUTE_GCC_CDIAG(5,0);\n+\n #endif /* ! GCC_C_TREE_H */"}, {"sha": "540114171608fc905dc9275731266c7f36614b62", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,3 +1,11 @@\n+2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/34695\n+\t* cp-tree.h (cp_cpp_error): Remove.\n+\t* error.c (cp_cpp_error): Remove.\n+\t* parser.c (cp_lexer_new_main): Set done_lexing instead of\n+\tclient_diagnostic and error callback.\n+\n 2009-03-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* cp/cp-objcp-common.h (LANG_HOOKS_STATICP): Remove."}, {"sha": "ca198561e9353b0042d1f904adb603d769f6d12f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -43,9 +43,6 @@ along with GCC; see the file COPYING3.  If not see\n #else\n #define ATTRIBUTE_GCC_CXXDIAG(m, n) ATTRIBUTE_NONNULL(m)\n #endif\n-extern void cp_cpp_error\t\t\t(cpp_reader *, int,\n-\t\t\t\t\t\t const char *, va_list *)\n-     ATTRIBUTE_GCC_CXXDIAG(3,0);\n #ifdef GCC_TOPLEV_H\n #error \\\n In order for the format checking to accept the C++ front end diagnostic \\"}, {"sha": "161fa55a17fba3cf057614066d3d501581c747b8", "filename": "gcc/cp/error.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -2666,39 +2666,6 @@ cp_printer (pretty_printer *pp, text_info *text, const char *spec,\n #undef next_int\n }\n \f\n-/* Callback from cpp_error for PFILE to print diagnostics arising from\n-   interpreting strings.  The diagnostic is of type LEVEL; MSG is the\n-   translated message and AP the arguments.  */\n-\n-void\n-cp_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n-\t      const char *msg, va_list *ap)\n-{\n-  diagnostic_info diagnostic;\n-  diagnostic_t dlevel;\n-  switch (level)\n-    {\n-    case CPP_DL_WARNING:\n-    case CPP_DL_WARNING_SYSHDR:\n-      dlevel = DK_WARNING;\n-      break;\n-    case CPP_DL_PEDWARN:\n-      dlevel = DK_PEDWARN;\n-      break;\n-    case CPP_DL_ERROR:\n-      dlevel = DK_ERROR;\n-      break;\n-    case CPP_DL_ICE:\n-      dlevel = DK_ICE;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-  diagnostic_set_info_translated (&diagnostic, msg, ap,\n-\t\t\t\t  input_location, dlevel);\n-  report_diagnostic (&diagnostic);\n-}\n-\n /* Warn about the use of C++0x features when appropriate.  */\n void\n maybe_warn_cpp0x (const char* str)"}, {"sha": "09e19a23a5fbaf679b4ca2adce362a659e72479f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -309,8 +309,7 @@ cp_lexer_new_main (void)\n \n   /* Subsequent preprocessor diagnostics should use compiler\n      diagnostic functions to get the compiler source location.  */\n-  cpp_get_options (parse_in)->client_diagnostic = true;\n-  cpp_get_callbacks (parse_in)->error = cp_cpp_error;\n+  done_lexing = true;\n \n   gcc_assert (lexer->next_token->type != CPP_PURGED);\n   return lexer;"}, {"sha": "8d012491577ebd38c55c4919d9e35e886ae34868", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,6 +1,6 @@\n /* Language-independent diagnostic subroutines for the GNU Compiler Collection\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n This file is part of GCC.\n@@ -126,6 +126,7 @@ diagnostic_set_info_translated (diagnostic_info *diagnostic, const char *msg,\n   diagnostic->message.args_ptr = args;\n   diagnostic->message.format_spec = msg;\n   diagnostic->location = location;\n+  diagnostic->override_column = 0;\n   diagnostic->kind = kind;\n   diagnostic->option_index = 0;\n }\n@@ -153,6 +154,8 @@ diagnostic_build_prefix (diagnostic_info *diagnostic)\n   };\n   const char *text = _(diagnostic_kind_text[diagnostic->kind]);\n   expanded_location s = expand_location (diagnostic->location);\n+  if (diagnostic->override_column)\n+    s.column = diagnostic->override_column;\n   gcc_assert (diagnostic->kind < DK_LAST_DIAGNOSTIC_KIND);\n \n   return"}, {"sha": "998c11ec1f6a5bbc349f9a3e4be1fb2db6b829c5", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,5 +1,5 @@\n /* Various declarations for language-independent diagnostics subroutines.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n@@ -41,6 +41,7 @@ typedef struct diagnostic_info\n {\n   text_info message;\n   location_t location;\n+  unsigned int override_column;\n   /* TREE_BLOCK if the diagnostic is to be reported in some inline\n      function inlined into other function, otherwise NULL.  */\n   tree abstract_origin;\n@@ -185,6 +186,10 @@ extern diagnostic_context *global_dc;\n \n #define report_diagnostic(D) diagnostic_report_diagnostic (global_dc, D)\n \n+/* Override the column number to be used for reporting a\n+   diagnostic.  */\n+#define diagnostic_override_column(DI, COL) (DI)->override_column = (COL)\n+\n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *);"}, {"sha": "34d31ff7cdc4eb2c38c8624b213064b555bdcc1e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,3 +1,11 @@\n+2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/34695\n+\t* cpp.c (cb_cpp_error): New.\n+\t(gfc_cpp_post_options): Don't set cpp_option->inhibit_warnings.\n+\tDon't check cpp_errors (cpp_in).\n+\t(gfc_cpp_init_0): Set cb->error.\n+\n 2009-03-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/38823"}, {"sha": "fc78f9826a2d7b45b20c38418d7080f839e971c9", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 53, "deletions": 5, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2008 Free Software Foundation, Inc.\n+/* Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -137,6 +137,9 @@ static void cb_include (cpp_reader *, source_location, const unsigned char *,\n static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n static void cb_used_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_used_undef (cpp_reader *, source_location, cpp_hashnode *);\n+static bool cb_cpp_error (cpp_reader *, int, location_t, unsigned int,\n+\t\t\t  const char *, va_list *)\n+     ATTRIBUTE_GCC_DIAG(5,0);\n void pp_dir_change (cpp_reader *, const char *);\n \n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n@@ -452,7 +455,6 @@ gfc_cpp_post_options (void)\n   cpp_option->cplusplus_comments = 0;\n \n   cpp_option->pedantic = pedantic;\n-  cpp_option->inhibit_warnings = inhibit_warnings;\n \n   cpp_option->dollars_in_ident = gfc_option.flag_dollar_ok;\n   cpp_option->discard_comments = gfc_cpp_option.discard_comments;\n@@ -465,9 +467,6 @@ gfc_cpp_post_options (void)\n \n   cpp_post_options (cpp_in);\n \n-  /* If an error has occurred in cpplib, note it so we fail immediately.  */\n-  errorcount += cpp_errors (cpp_in);\n-\n   gfc_cpp_register_include_paths ();\n }\n \n@@ -482,6 +481,7 @@ gfc_cpp_init_0 (void)\n   cb->line_change = cb_line_change;\n   cb->ident = cb_ident;\n   cb->def_pragma = cb_def_pragma;\n+  cb->error = cb_cpp_error;\n \n   if (gfc_cpp_option.dump_includes)\n     cb->include = cb_include;\n@@ -961,6 +961,54 @@ cb_used_define (cpp_reader *pfile, source_location line ATTRIBUTE_UNUSED,\n   cpp_define_queue = q;\n }\n \n+/* Callback from cpp_error for PFILE to print diagnostics from the\n+   preprocessor.  The diagnostic is of type LEVEL, at location\n+   LOCATION, with column number possibly overridden by COLUMN_OVERRIDE\n+   if not zero; MSG is the translated message and AP the arguments.\n+   Returns true if a diagnostic was emitted, false otherwise.  */\n+\n+static bool\n+cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n+\t      location_t location, unsigned int column_override,\n+\t      const char *msg, va_list *ap)\n+{\n+  diagnostic_info diagnostic;\n+  diagnostic_t dlevel;\n+  int save_warn_system_headers = warn_system_headers;\n+  bool ret;\n+\n+  switch (level)\n+    {\n+    case CPP_DL_WARNING_SYSHDR:\n+      warn_system_headers = 1;\n+      /* Fall through.  */\n+    case CPP_DL_WARNING:\n+      dlevel = DK_WARNING;\n+      break;\n+    case CPP_DL_PEDWARN:\n+      dlevel = DK_PEDWARN;\n+      break;\n+    case CPP_DL_ERROR:\n+      dlevel = DK_ERROR;\n+      break;\n+    case CPP_DL_ICE:\n+      dlevel = DK_ICE;\n+      break;\n+    case CPP_DL_NOTE:\n+      dlevel = DK_NOTE;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+  diagnostic_set_info_translated (&diagnostic, msg, ap,\n+\t\t\t\t  location, dlevel);\n+  if (column_override)\n+    diagnostic_override_column (&diagnostic, column_override);\n+  ret = report_diagnostic (&diagnostic);\n+  if (level == CPP_DL_WARNING_SYSHDR)\n+    warn_system_headers = save_warn_system_headers;\n+  return ret;\n+}\n \n /* Callback called when -fworking-director and -E to emit working\n    directory in cpp output file.  */"}, {"sha": "2b3a2165a57731d2ae7c2fda897342be05386c8b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,3 +1,13 @@\n+2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/34695\n+\t* gcc.dg/builtin-redefine.c, gcc.dg/cpp/redef2.c,\n+\tgcc.dg/cpp/redef3.c, gcc.dg/cpp/trad/redef2.c: Use dg-message\n+\tinstead of dg-warning for \"previous definition\" messages.\n+\t* gcc.dg/cpp/Wvariadic-1.c, gcc.dg/cpp/Wvariadic-3.c: Expect\n+\t\"warnings being treated as errors\" message.\n+\t* gcc.dg/fltconst-1.c: Use -fshow-column.\n+\n 2009-03-29  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/38823"}, {"sha": "1d0f29da8dac4043c661045c7f1bbf92afae1d4e", "filename": "gcc/testsuite/gcc.dg/builtin-redefine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-redefine.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -28,7 +28,7 @@\n #define __TIME__ \"X\"         /* Re-define while defined.  */\n \n #define __TIME__ \"Y\"         /* { dg-warning \"\\\"__TIME__\\\" redefined\" } */\n-/* { dg-warning \"previous definition\" \"\" { target *-*-* } 28 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } 28 } */\n \n #undef __TIME__              /* Undefine while defined.  */\n \n@@ -39,7 +39,7 @@\n #define __DATE__ \"X\"         /* Re-define while defined.  */\n \n #define __DATE__ \"Y\"         /* { dg-warning \"\\\"__DATE__\\\" redefined\" } */\n-/* { dg-warning \"previous definition\" \"\" { target *-*-* } 39 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } 39 } */\n \n #undef __DATE__              /* Undefine while defined.  */\n \n@@ -48,7 +48,7 @@\n #define __TIMESTAMP__ \"X\"    /* Re-define while defined.  */\n \n #define __TIMESTAMP__ \"Y\"    /* { dg-warning \"\\\"__TIMESTAMP__\\\" redefined\" } */\n-/* { dg-warning \"previous definition\" \"\" { target *-*-* } 48 } */\n+/* { dg-message \"previous definition\" \"\" { target *-*-* } 48 } */\n \n #undef __TIMESTAMP__         /* Undefine while defined.  */\n "}, {"sha": "b034aacd2fccc1154aecb7c178e144d2a31a5f73", "filename": "gcc/testsuite/gcc.dg/cpp/Wvariadic-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-1.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -4,3 +4,4 @@\n #define f(x,...)\t/* { dg-error \"variadic\" } */\n #define g(x,y...)\t/* { dg-error \"variadic\" } */\n int not_empty;\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */"}, {"sha": "0317c3c6dff6b7163f7791b2bd2963312cb8ee26", "filename": "gcc/testsuite/gcc.dg/cpp/Wvariadic-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2FWvariadic-3.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -4,3 +4,4 @@\n #define f(x,...)\n #define g(x,y...)\t/* { dg-error \"variadic\" } */\n int not_empty;\n+/* { dg-message \"warnings being treated as errors\" \"\" { target *-*-* } 0 } */"}, {"sha": "57fa3b1930b6d08dbe06cd9d5a4033ffdd635694", "filename": "gcc/testsuite/gcc.dg/cpp/redef2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef2.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -23,9 +23,9 @@\n    { dg-warning \"redefined\" \"redef ro\"      { target *-*-* } 12 }\n    { dg-warning \"redefined\" \"redef va\"      { target *-*-* } 15 }\n \n-   { dg-warning \"previous\"  \"prev def mac\"  { target *-*-* } 6  }\n-   { dg-warning \"previous\"  \"prev def mac\"  { target *-*-* } 7  }\n-   { dg-warning \"previous\"  \"prev def mac\"  { target *-*-* } 8  }\n-   { dg-warning \"previous\"  \"prev def ro\"   { target *-*-* } 11 }\n-   { dg-warning \"previous\"  \"prev def va\"   { target *-*-* } 14 }\n+   { dg-message \"previous\"  \"prev def mac\"  { target *-*-* } 6  }\n+   { dg-message \"previous\"  \"prev def mac\"  { target *-*-* } 7  }\n+   { dg-message \"previous\"  \"prev def mac\"  { target *-*-* } 8  }\n+   { dg-message \"previous\"  \"prev def ro\"   { target *-*-* } 11 }\n+   { dg-message \"previous\"  \"prev def va\"   { target *-*-* } 14 }\n */"}, {"sha": "1c541a45bb186d8dbd4b691067ee1c122d673f64", "filename": "gcc/testsuite/gcc.dg/cpp/redef3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fredef3.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -15,7 +15,7 @@\n    { dg-warning \"redefined\" \"redef B\"      { target *-*-* } 9  }\n    { dg-warning \"redefined\" \"redef D\"      { target *-*-* } 11 }\n    { dg-warning \"redefined\" \"redef E\"      { target *-*-* } 12 }\n-   { dg-warning \"previous\"  \"prev def A\"   { target *-*-* } 6  }\n-   { dg-warning \"previous\"  \"prev def B\"   { target *-*-* } 8  }\n-   { dg-warning \"previous\"  \"prev def D/E\" { target *-*-* } 0  }\n+   { dg-message \"previous\"  \"prev def A\"   { target *-*-* } 6  }\n+   { dg-message \"previous\"  \"prev def B\"   { target *-*-* } 8  }\n+   { dg-message \"previous\"  \"prev def D/E\" { target *-*-* } 0  }\n */"}, {"sha": "5fcd5eb32e8711c5ae9157e83cfeb808fbd949bb", "filename": "gcc/testsuite/gcc.dg/cpp/trad/redef2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftrad%2Fredef2.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -2,31 +2,31 @@\n \n /* { dg-do preprocess } */\n \n-#define foo bar    /* { dg-warning \"previous def\" \"foo prev def\" } */\n+#define foo bar    /* { dg-message \"previous def\" \"foo prev def\" } */\n #define foo barr   /* { dg-warning \"redefined\" \"foo redefined\" } */\n \n #undef foo\n-#define foo bar    /* { dg-warning \"previous def\" \"foo prev def 2\" } */\n+#define foo bar    /* { dg-message \"previous def\" \"foo prev def 2\" } */\n #define foo() bar    /* { dg-warning \"redefined\" \"foo redefined 2\" } */\n \n #undef foo\n-#define foo() bar    /* { dg-warning \"previous def\" \"foo prev def\" } */\n+#define foo() bar    /* { dg-message \"previous def\" \"foo prev def\" } */\n #define foo() barr   /* { dg-warning \"redefined\" \"foo redefined\" } */\n \n-#define quux(thud) a thud b /* { dg-warning \"previous def\" \"quux prev def\" } */\n+#define quux(thud) a thud b /* { dg-message \"previous def\" \"quux prev def\" } */\n #define quux(thu) a thud b   /* { dg-warning \"redefined\" \"quux redefined\" } */\n \n-#define bar(x, y) x+y /* { dg-warning \"previous def\" \"bar prev def\" } */\n+#define bar(x, y) x+y /* { dg-message \"previous def\" \"bar prev def\" } */\n #define bar(x, y) x+x   /* { dg-warning \"redefined\" \"bar redefined\" } */\n \n-#define bat(x, y) x+y  /* { dg-warning \"previous def\" \"bat prev def\" } */\n+#define bat(x, y) x+y  /* { dg-message \"previous def\" \"bat prev def\" } */\n #define bat(x, y) x+ y   /* { dg-warning \"redefined\" \"bat redefined\" } */\n \n-#define baz(x, y) x+y  /* { dg-warning \"previous def\" \"baz prev def\" } */\n+#define baz(x, y) x+y  /* { dg-message \"previous def\" \"baz prev def\" } */\n #define baz(x, y) x +y   /* { dg-warning \"redefined\" \"baz redefined\" } */\n \n-#define f(x, y) \"x y\"  /* { dg-warning \"previous def\" \"f prev def\" } */\n+#define f(x, y) \"x y\"  /* { dg-message \"previous def\" \"f prev def\" } */\n #define f(x, y) \"x  y\"   /* { dg-warning \"redefined\" \"f redefined\" } */\n \n-#define g(x, y) 'x'  /* { dg-warning \"previous def\" \"g prev def\" } */\n+#define g(x, y) 'x'  /* { dg-message \"previous def\" \"g prev def\" } */\n #define g(x, y) ' x'   /* { dg-warning \"redefined\" \"g redefined\" } */"}, {"sha": "1b75210e98131d09aaa8c55428a9a855fc501288", "filename": "gcc/testsuite/gcc.dg/fltconst-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffltconst-1.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n+/* { dg-options \"-std=gnu99 -fshow-column\" } */\n \n double a = 1.ld;\t/* { dg-error \"12:invalid suffix\" } */\n double b = 1.fd;\t/* { dg-error \"12:invalid suffix\" } */"}, {"sha": "a9841c7314d4128ff5c9eb596d0fe46c915f90b6", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,3 +1,32 @@\n+2009-03-29  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/34695\n+\t* makedepend.c: Remove.\n+\t* Makefile.in (makedepend_OBJS, makedepend$(EXEEXT)): Remove.\n+\t(all, clean, TAGS_SOURCES, include): Remove makedepend handling.\n+\t* directives.c (cpp_errors): Remove.\n+\t* errors.c (print_location, _cpp_begin_message, v_message):\n+\tRemove.\n+\t(cpp_error, cpp_error_with_line): Always use error callback.\n+\t(cpp_error, cpp_error_with_line, cpp_errno): Return bool.\n+\t* include/cpplib.h (cpp_options): Remove pedantic_errors,\n+\tinhibit_warnings, warn_system_headers, inhibit_errors,\n+\twarnings_are_errors, client_diagnostic.\n+\t(cpp_callbacks): Add extra arguments to error callback; make it\n+\treturn bool.\n+\t(cpp_finish): Return void.\n+\t(cpp_destroy): Remove inaccurate comment about return value.\n+\t(cpp_errors, CPP_DL_EXTRACT, CPP_DL_WARNING_P): Remove.\n+\t(CPP_DL_NOTE): Define.\n+\t* include/line-map.h (linemap_print_containing_files): Remove.\n+\t* init.c (cpp_finish): Do not check for or return number of\n+\terrors.\n+\t* internal.h (cpp_reader): Remove errors field.\n+\t* line-map.c (linemap_print_containing_files): Remove.\n+\t* macro.c (_cpp_create_definition): Use CPP_DL_NOTE for message\n+\tabout previous definition.  Only emit it if previous diagnostic\n+\twas emitted.\n+\n 2009-03-28  Joseph Myers  <joseph@codesourcery.com>\n \n \t* Makefile.in (po/$(PACKAGE).pot): Use $(mkinstalldirs) not"}, {"sha": "8d99d721a64575614dbaa006677e88adc969d3b3", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,7 +1,7 @@\n # @configure_input@\n # Makefile for libcpp.  Run 'configure' to generate Makefile from Makefile.in\n \n-# Copyright (C) 2004, 2008 Free Software Foundation, Inc.\n+# Copyright (C) 2004, 2008, 2009 Free Software Foundation, Inc.\n \n #This file is part of libcpp.\n \n@@ -73,13 +73,12 @@ ALL_CFLAGS = $(CFLAGS) $(WARN_CFLAGS) $(INCLUDES) $(CPPFLAGS)\n libcpp_a_OBJS = charset.o directives.o directives-only.o errors.o \\\n \texpr.o files.o identifiers.o init.o lex.o line-map.o macro.o \\\n \tmkdeps.o pch.o symtab.o traditional.o\n-makedepend_OBJS = makedepend.o\n \n libcpp_a_SOURCES = charset.c directives.c directives-only.c errors.c \\\n \texpr.c files.c identifiers.c init.c lex.c line-map.c macro.c \\\n \tmkdeps.c pch.c symtab.c traditional.c\n \n-all: libcpp.a makedepend$(EXEEXT) $(USED_CATALOGS)\n+all: libcpp.a $(USED_CATALOGS)\n \n .SUFFIXES:\n .SUFFIXES: .c .gmo .o .obj .po .pox\n@@ -89,12 +88,6 @@ libcpp.a: $(libcpp_a_OBJS)\n \t$(AR) $(ARFLAGS) libcpp.a $(libcpp_a_OBJS)\n \t$(RANLIB) libcpp.a\n \n-makedepend$(EXEEXT): $(makedepend_OBJS) libcpp.a ../libiberty/libiberty.a\n-\t@rm -f makedepend$(EXEEXT)\n-\t$(CC) $(CFLAGS) $(LDFLAGS) -o makedepend$(EXEEXT) \\\n-\t  $(makedepend_OBJS) libcpp.a ../libiberty/libiberty.a \\\n-\t  $(LIBINTL) $(LIBICONV)\n-\n # Rules to rebuild the configuration\n \n Makefile: $(srcdir)/Makefile.in config.status\n@@ -166,7 +159,7 @@ mostlyclean:\n \t-rm -f *.o\n \n clean: mostlyclean\n-\t-rm -rf makedepend$(EXEEXT) libcpp.a $(srcdir)/autom4te.cache\n+\t-rm -rf libcpp.a $(srcdir)/autom4te.cache\n \n distclean: clean\n \t-rm -f config.h stamp-h1 config.status config.cache config.log \\\n@@ -248,7 +241,7 @@ po/$(PACKAGE).pot: $(libcpp_a_SOURCES)\n \tsed 's:$(srcdir)/::g' <po/$(PACKAGE).pot.tmp >po/$(PACKAGE).pot\n \trm po/$(PACKAGE).pot.tmp\n \n-TAGS_SOURCES = $(libcpp_a_SOURCES) makedepend.c internal.h ucnid.h \\\n+TAGS_SOURCES = $(libcpp_a_SOURCES) internal.h ucnid.h \\\n     include/line-map.h include/symtab.h include/cpp-id-data.h \\\n     include/cpplib.h include/mkdeps.h system.h\n \n@@ -260,7 +253,7 @@ TAGS: $(TAGS_SOURCES)\n .NOEXPORT:\n \n # Dependencies\n--include $(patsubst %.o, $(DEPDIR)/%.Po, $(libcpp_a_OBJS) $(makedepend_OBJS))\n+-include $(patsubst %.o, $(DEPDIR)/%.Po, $(libcpp_a_OBJS))\n \n # Dependencies on generated headers have to be explicit.\n init.o: localedir.h"}, {"sha": "f9e0fc2e6bcb26a9e88e524ddaeed2db65435bf1", "filename": "libcpp/directives.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,7 +1,7 @@\n /* CPP Library. (Directive handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2008 Free Software Foundation, Inc.\n+   2007, 2008, 2009 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -2299,13 +2299,6 @@ handle_assertion (cpp_reader *pfile, const char *str, int type)\n   run_directive (pfile, type, str, count);\n }\n \n-/* The number of errors for a given reader.  */\n-unsigned int\n-cpp_errors (cpp_reader *pfile)\n-{\n-  return pfile->errors;\n-}\n-\n /* The options structure.  */\n cpp_options *\n cpp_get_options (cpp_reader *pfile)"}, {"sha": "c053f39355ab3063f31c0ffaf0f7a8aedeb4d159", "filename": "libcpp/errors.c", "status": "modified", "additions": 34, "deletions": 136, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,6 +1,6 @@\n /* Default error handlers for CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1998, 1999, 2000,\n-   2001, 2002, 2004, 2008 Free Software Foundation, Inc.\n+   2001, 2002, 2004, 2008, 2009 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -28,171 +28,69 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #include \"cpplib.h\"\n #include \"internal.h\"\n \n-static void print_location (cpp_reader *, source_location, unsigned int);\n-\n-/* Print the logical file location (LINE, COL) in preparation for a\n-   diagnostic.  Outputs the #include chain if it has changed.  A line\n-   of zero suppresses the include stack, and outputs the program name\n-   instead.  */\n-static void\n-print_location (cpp_reader *pfile, source_location line, unsigned int col)\n-{\n-  if (line == 0)\n-    fprintf (stderr, \"%s: \", progname);\n-  else\n-    {\n-      const struct line_map *map;\n-      linenum_type lin;\n-\n-      map = linemap_lookup (pfile->line_table, line);\n-      linemap_print_containing_files (pfile->line_table, map);\n-\n-      lin = SOURCE_LINE (map, line);\n-      if (col == 0)\n-\t{\n-\t  col = SOURCE_COLUMN (map, line);\n-\t  if (col == 0)\n-\t    col = 1;\n-\t}\n-\n-      if (lin == 0)\n-\tfprintf (stderr, \"%s:\", map->to_file);\n-      else if (CPP_OPTION (pfile, show_column) == 0)\n-\tfprintf (stderr, \"%s:%u:\", map->to_file, lin);\n-      else\n-\tfprintf (stderr, \"%s:%u:%u:\", map->to_file, lin, col);\n-\n-      fputc (' ', stderr);\n-    }\n-}\n-\n-/* Set up for a diagnostic: print the file and line, bump the error\n-   counter, etc.  SRC_LOC is the logical line number; zero means to print\n-   at the location of the previously lexed token, which tends to be\n-   the correct place by default.  The column number can be specified either\n-   using COLUMN or (if COLUMN==0) extracting SOURCE_COLUMN from SRC_LOC.\n-   (This may seem redundant, but is useful when pre-scanning (cleaning) a line,\n-   when we haven't yet verified whether the current line_map has a\n-   big enough max_column_hint.)\n-\n-   Returns 0 if the error has been suppressed.  */\n-static int\n-_cpp_begin_message (cpp_reader *pfile, int code,\n-\t\t    source_location src_loc, unsigned int column)\n-{\n-  int level = CPP_DL_EXTRACT (code);\n-\n-  switch (level)\n-    {\n-    case CPP_DL_WARNING:\n-    case CPP_DL_PEDWARN:\n-      if (cpp_in_system_header (pfile)\n-\t  && ! CPP_OPTION (pfile, warn_system_headers))\n-\treturn 0;\n-      /* Fall through.  */\n-\n-    case CPP_DL_WARNING_SYSHDR:\n-      if (CPP_OPTION (pfile, warnings_are_errors)\n-\t  || (level == CPP_DL_PEDWARN && CPP_OPTION (pfile, pedantic_errors)))\n-\t{\n-\t  if (CPP_OPTION (pfile, inhibit_errors))\n-\t    return 0;\n-\t  level = CPP_DL_ERROR;\n-\t  pfile->errors++;\n-\t}\n-      else if (CPP_OPTION (pfile, inhibit_warnings))\n-\treturn 0;\n-      break;\n-\n-    case CPP_DL_ERROR:\n-      if (CPP_OPTION (pfile, inhibit_errors))\n-\treturn 0;\n-      /* ICEs cannot be inhibited.  */\n-    case CPP_DL_ICE:\n-      pfile->errors++;\n-      break;\n-    }\n-\n-  print_location (pfile, src_loc, column);\n-  if (CPP_DL_WARNING_P (level))\n-    fputs (_(\"warning: \"), stderr);\n-  else if (level == CPP_DL_ICE)\n-    fputs (_(\"internal error: \"), stderr);\n-  else\n-    fputs (_(\"error: \"), stderr);\n-\n-  return 1;\n-}\n-\n-/* Don't remove the blank before do, as otherwise the exgettext\n-   script will mistake this as a function definition */\n-#define v_message(msgid, ap) \\\n- do { vfprintf (stderr, _(msgid), ap); putc ('\\n', stderr); } while (0)\n-\n-/* Exported interface.  */\n-\n /* Print an error at the location of the previously lexed token.  */\n-void\n+bool\n cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n {\n   source_location src_loc;\n   va_list ap;\n-  \n+  bool ret;\n+\n   va_start (ap, msgid);\n \n-  if (CPP_OPTION (pfile, client_diagnostic))\n-    pfile->cb.error (pfile, level, _(msgid), &ap);\n-  else\n+  if (CPP_OPTION (pfile, traditional))\n     {\n-      if (CPP_OPTION (pfile, traditional))\n-\t{\n-\t  if (pfile->state.in_directive)\n-\t    src_loc = pfile->directive_line;\n-\t  else\n-\t    src_loc = pfile->line_table->highest_line;\n-\t}\n-      /* We don't want to refer to a token before the beginning of the\n-\t current run -- that is invalid.  */\n-      else if (pfile->cur_token == pfile->cur_run->base)\n-\t{\n-\t  if (pfile->cur_run->prev != NULL)\n-\t    src_loc = pfile->cur_run->prev->limit->src_loc;\n-\t  else\n-\t    src_loc = 0;\n-\t}\n+      if (pfile->state.in_directive)\n+\tsrc_loc = pfile->directive_line;\n       else\n-\t{\n-\t  src_loc = pfile->cur_token[-1].src_loc;\n-\t}\n-\n-      if (_cpp_begin_message (pfile, level, src_loc, 0))\n-\tv_message (msgid, ap);\n+\tsrc_loc = pfile->line_table->highest_line;\n+    }\n+  /* We don't want to refer to a token before the beginning of the\n+     current run -- that is invalid.  */\n+  else if (pfile->cur_token == pfile->cur_run->base)\n+    {\n+      if (pfile->cur_run->prev != NULL)\n+\tsrc_loc = pfile->cur_run->prev->limit->src_loc;\n+      else\n+\tsrc_loc = 0;\n     }\n+  else\n+    {\n+      src_loc = pfile->cur_token[-1].src_loc;\n+    }\n+\n+  if (!pfile->cb.error)\n+    abort ();\n+  ret = pfile->cb.error (pfile, level, src_loc, 0, _(msgid), &ap);\n \n   va_end (ap);\n+  return ret;\n }\n \n /* Print an error at a specific location.  */\n-void\n+bool\n cpp_error_with_line (cpp_reader *pfile, int level,\n \t\t     source_location src_loc, unsigned int column,\n \t\t     const char *msgid, ...)\n {\n   va_list ap;\n+  bool ret;\n   \n   va_start (ap, msgid);\n \n-  if (_cpp_begin_message (pfile, level, src_loc, column))\n-    v_message (msgid, ap);\n+  if (!pfile->cb.error)\n+    abort ();\n+  ret = pfile->cb.error (pfile, level, src_loc, column, _(msgid), &ap);\n \n   va_end (ap);\n+  return ret;\n }\n \n-void\n+bool\n cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n {\n   if (msgid[0] == '\\0')\n     msgid = _(\"stdout\");\n \n-  cpp_error (pfile, level, \"%s: %s\", msgid, xstrerror (errno));\n+  return cpp_error (pfile, level, \"%s: %s\", msgid, xstrerror (errno));\n }"}, {"sha": "ffde40eef1a3b10920ee2651c4385d97e8f39f30", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 13, "deletions": 40, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -302,22 +302,9 @@ struct cpp_options\n   /* Nonzero means print names of header files (-H).  */\n   unsigned char print_include_names;\n \n-  /* Nonzero means cpp_pedwarn causes a hard error.  */\n-  unsigned char pedantic_errors;\n-\n-  /* Nonzero means don't print warning messages.  */\n-  unsigned char inhibit_warnings;\n-\n   /* Nonzero means complain about deprecated features.  */\n   unsigned char warn_deprecated;\n \n-  /* Nonzero means don't suppress warnings from system headers.  */\n-  unsigned char warn_system_headers;\n-\n-  /* Nonzero means don't print error messages.  Has no option to\n-     select it, but can be set by a user of cpplib (e.g. fix-header).  */\n-  unsigned char inhibit_errors;\n-\n   /* Nonzero means warn if slash-star appears in a comment.  */\n   unsigned char warn_comments;\n \n@@ -353,9 +340,6 @@ struct cpp_options\n      explicitly undefined.  */\n   unsigned char warn_builtin_macro_redefined;\n \n-  /* Nonzero means turn warnings into errors.  */\n-  unsigned char warnings_are_errors;\n-\n   /* Nonzero means we should look for header.gcc files that remap file\n      names.  */\n   unsigned char remap;\n@@ -450,9 +434,6 @@ struct cpp_options\n   /* Nonzero means __STDC__ should have the value 0 in system headers.  */\n   unsigned char stdc_0_in_system_headers;\n \n-  /* True means error callback should be used for diagnostics.  */\n-  bool client_diagnostic;\n-\n   /* True disables tokenization outside of preprocessing directives. */\n   bool directives_only;\n };\n@@ -492,10 +473,11 @@ struct cpp_callbacks\n      be expanded.  */\n   cpp_hashnode * (*macro_to_expand) (cpp_reader *, const cpp_token *);\n \n-  /* Called to emit a diagnostic if client_diagnostic option is true.\n-     This callback receives the translated message.  */\n-  void (*error) (cpp_reader *, int, const char *, va_list *)\n-       ATTRIBUTE_FPTR_PRINTF(3,0);\n+  /* Called to emit a diagnostic.  This callback receives the\n+     translated message.  */\n+  bool (*error) (cpp_reader *, int, source_location, unsigned int,\n+\t\t const char *, va_list *)\n+       ATTRIBUTE_FPTR_PRINTF(5,0);\n \n   /* Callbacks for when a macro is expanded, or tested (whether\n      defined or not at the time) in #ifdef, #ifndef or \"defined\".  */\n@@ -697,19 +679,13 @@ extern void cpp_init_iconv (cpp_reader *);\n \n /* Call this to finish preprocessing.  If you requested dependency\n    generation, pass an open stream to write the information to,\n-   otherwise NULL.  It is your responsibility to close the stream.\n-\n-   Returns cpp_errors (pfile).  */\n-extern int cpp_finish (cpp_reader *, FILE *deps_stream);\n+   otherwise NULL.  It is your responsibility to close the stream.  */\n+extern void cpp_finish (cpp_reader *, FILE *deps_stream);\n \n /* Call this to release the handle at the end of preprocessing.  Any\n-   use of the handle after this function returns is invalid.  Returns\n-   cpp_errors (pfile).  */\n+   use of the handle after this function returns is invalid.  */\n extern void cpp_destroy (cpp_reader *);\n \n-/* Error count.  */\n-extern unsigned int cpp_errors (cpp_reader *);\n-\n extern unsigned int cpp_token_len (const cpp_token *);\n extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);\n extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,\n@@ -835,24 +811,21 @@ cpp_num cpp_num_sign_extend (cpp_num, size_t);\n /* An internal consistency check failed.  Prints \"internal error: \",\n    otherwise the same as CPP_DL_ERROR.  */\n #define CPP_DL_ICE\t\t0x04\n-/* Extracts a diagnostic level from an int.  */\n-#define CPP_DL_EXTRACT(l)\t(l & 0xf)\n-/* Nonzero if a diagnostic level is one of the warnings.  */\n-#define CPP_DL_WARNING_P(l)\t(CPP_DL_EXTRACT (l) >= CPP_DL_WARNING \\\n-\t\t\t\t && CPP_DL_EXTRACT (l) <= CPP_DL_PEDWARN)\n+/* An informative note following a warning.  */\n+#define CPP_DL_NOTE\t\t0x05\n \n /* Output a diagnostic of some kind.  */\n-extern void cpp_error (cpp_reader *, int, const char *msgid, ...)\n+extern bool cpp_error (cpp_reader *, int, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n \n /* Output a diagnostic with \"MSGID: \" preceding the\n    error string of errno.  No location is printed.  */\n-extern void cpp_errno (cpp_reader *, int, const char *msgid);\n+extern bool cpp_errno (cpp_reader *, int, const char *msgid);\n \n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is\n    zero, then no location is printed.  */\n-extern void cpp_error_with_line (cpp_reader *, int, source_location, unsigned,\n+extern bool cpp_error_with_line (cpp_reader *, int, source_location, unsigned,\n \t\t\t\t const char *msgid, ...) ATTRIBUTE_PRINTF_5;\n \n /* In lex.c */"}, {"sha": "a8ce298064b285c8aab718663d560e82402e8f39", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,5 +1,5 @@\n /* Map logical line numbers to (source file, line number) pairs.\n-   Copyright (C) 2001, 2003, 2004, 2007\n+   Copyright (C) 2001, 2003, 2004, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -144,12 +144,6 @@ extern const struct line_map *linemap_add\n extern const struct line_map *linemap_lookup\n   (struct line_maps *, source_location);\n \n-/* Print the file names and line numbers of the #include commands\n-   which led to the map MAP, if any, to stderr.  Nothing is output if\n-   the most recently listed stack is the same as the current one.  */\n-extern void linemap_print_containing_files (struct line_maps *,\n-\t\t\t\t\t    const struct line_map *);\n-\n /* Converts a map and a source_location to source line.  */\n #define SOURCE_LINE(MAP, LOC) \\\n   ((((LOC) - (MAP)->start_location) >> (MAP)->column_bits) + (MAP)->to_line)"}, {"sha": "ffba852032e38d47fac292880398e2ccecfe96d8", "filename": "libcpp/init.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,6 +1,7 @@\n /* CPP Library.\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008,\n+   2009 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -615,12 +616,11 @@ read_original_directory (cpp_reader *pfile)\n }\n \n /* This is called at the end of preprocessing.  It pops the last\n-   buffer and writes dependency output, and returns the number of\n-   errors.\n+   buffer and writes dependency output.\n \n    Maybe it should also reset state, such that you could call\n    cpp_start_read with a new filename to restart processing.  */\n-int\n+void\n cpp_finish (cpp_reader *pfile, FILE *deps_stream)\n {\n   /* Warn about unused macros before popping the final buffer.  */\n@@ -635,9 +635,8 @@ cpp_finish (cpp_reader *pfile, FILE *deps_stream)\n   while (pfile->buffer)\n     _cpp_pop_buffer (pfile);\n \n-  /* Don't write the deps file if there are errors.  */\n   if (CPP_OPTION (pfile, deps.style) != DEPS_NONE\n-      && deps_stream && pfile->errors == 0)\n+      && deps_stream)\n     {\n       deps_write (pfile->deps, deps_stream, 72);\n \n@@ -648,8 +647,6 @@ cpp_finish (cpp_reader *pfile, FILE *deps_stream)\n   /* Report on headers that could use multiple include guards.  */\n   if (CPP_OPTION (pfile, print_include_names))\n     _cpp_report_missing_guards (pfile);\n-\n-  return pfile->errors;\n }\n \n static void"}, {"sha": "d4eeda4bc61aea6990fddba05645730dde276dc1", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,6 +1,6 @@\n /* Part of CPP library.\n-   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007,\n+   2008, 2009 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -388,9 +388,6 @@ struct cpp_reader\n   /* Nonzero prevents the lexer from re-using the token runs.  */\n   unsigned int keep_tokens;\n \n-  /* Error counter for exit code.  */\n-  unsigned int errors;\n-\n   /* Buffer to hold macro definition string.  */\n   unsigned char *macro_buffer;\n   unsigned int macro_buffer_len;"}, {"sha": "2802c672aaee3b0243987c309d556edee5016c13", "filename": "libcpp/line-map.c", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,5 +1,5 @@\n /* Map logical line numbers to (source file, line number) pairs.\n-   Copyright (C) 2001, 2003, 2004, 2007, 2008\n+   Copyright (C) 2001, 2003, 2004, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n@@ -302,45 +302,6 @@ linemap_lookup (struct line_maps *set, source_location line)\n   return &set->maps[mn];\n }\n \n-/* Print the file names and line numbers of the #include commands\n-   which led to the map MAP, if any, to stderr.  Nothing is output if\n-   the most recently listed stack is the same as the current one.  */\n-\n-void\n-linemap_print_containing_files (struct line_maps *set,\n-\t\t\t\tconst struct line_map *map)\n-{\n-  if (MAIN_FILE_P (map) || set->last_listed == map->included_from)\n-    return;\n-\n-  set->last_listed = map->included_from;\n-  map = INCLUDED_FROM (set, map);\n-\n-  fprintf (stderr,  _(\"In file included from %s:%u\"),\n-\t   map->to_file, LAST_SOURCE_LINE (map));\n-\n-  while (! MAIN_FILE_P (map))\n-    {\n-      map = INCLUDED_FROM (set, map);\n-      /* Translators note: this message is used in conjunction\n-\t with \"In file included from %s:%ld\" and some other\n-\t tricks.  We want something like this:\n-\n-\t | In file included from sys/select.h:123,\n-\t |                  from sys/types.h:234,\n-\t |                  from userfile.c:31:\n-\t | bits/select.h:45: <error message here>\n-\n-\t with all the \"from\"s lined up.\n-\t The trailing comma is at the beginning of this message,\n-\t and the trailing colon is not translated.  */\n-      fprintf (stderr, _(\",\\n                 from %s:%u\"),\n-\t       map->to_file, LAST_SOURCE_LINE (map));\n-    }\n-\n-  fputs (\":\\n\", stderr);\n-}\n-\n /* Print an include trace, for e.g. the -H option of the preprocessor.  */\n \n static void"}, {"sha": "3a20c36ed39ef54a898a7f845da45a9e0a755d1d", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/148e4216a47b822512444dbd3ca5e2670aef431c/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=148e4216a47b822512444dbd3ca5e2670aef431c", "patch": "@@ -1,7 +1,7 @@\n /* Part of CPP library.  (Macro and #define handling.)\n    Copyright (C) 1986, 1987, 1989, 1992, 1993, 1994, 1995, 1996, 1998,\n    1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2006, 2007, 2008 Free Software Foundation, Inc.\n+   2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n    Written by Per Bothner, 1994.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1807,11 +1807,13 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n \n       if (warn_of_redefinition (pfile, node, macro))\n \t{\n-\t  cpp_error_with_line (pfile, CPP_DL_PEDWARN, pfile->directive_line, 0,\n-\t\t\t       \"\\\"%s\\\" redefined\", NODE_NAME (node));\n+\t  bool warned;\n+\t  warned = cpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t\t\t\t\tpfile->directive_line, 0,\n+\t\t\t\t\t\"\\\"%s\\\" redefined\", NODE_NAME (node));\n \n-\t  if (node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n-\t    cpp_error_with_line (pfile, CPP_DL_PEDWARN,\n+\t  if (warned && node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n+\t    cpp_error_with_line (pfile, CPP_DL_NOTE,\n \t\t\t\t node->value.macro->line, 0,\n \t\t\t \"this is the location of the previous definition\");\n \t}"}, {"sha": "c67f64e236ef37172f7b79383f14e9d20b36b882", "filename": "libcpp/makedepend.c", "status": "removed", "additions": 0, "deletions": 206, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba20e30910df3945603374d426730d6da5350572/libcpp%2Fmakedepend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba20e30910df3945603374d426730d6da5350572/libcpp%2Fmakedepend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmakedepend.c?ref=ba20e30910df3945603374d426730d6da5350572", "patch": "@@ -1,206 +0,0 @@\n-/* Dependency generator utility.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n-   Contributed by Zack Weinberg, May 2004\n-\n-This program is free software; you can redistribute it and/or modify it\n-under the terms of the GNU General Public License as published by the\n-Free Software Foundation; either version 2, or (at your option) any\n-later version.\n-\n-This program is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with this program; if not, write to the Free Software\n-Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n-\n- In other words, you are welcome to use, share and improve this program.\n- You are forbidden to forbid anyone else to use, share and improve\n- what you give them.   Help stamp out software-hoarding!  */\n-\n-#include \"config.h\"\n-#include \"system.h\"\n-#include \"line-map.h\"\n-#include \"cpplib.h\"\n-#include \"getopt.h\"\n-#include \"mkdeps.h\"\n-\n-const char *progname;\n-const char *vpath;\n-\n-static const char *output_file;\n-static bool had_errors;\n-\n-/* Option lists, to give to cpplib before each input file.  */\n-struct cmd_line_macro\n-{\n-  struct cmd_line_macro *next;\n-  bool is_undef;\n-  const char *macro;\n-};\n-\n-static struct cmd_line_macro *cmd_line_macros;\n-static cpp_dir *cmd_line_searchpath;\n-\n-static void\n-add_clm (const char *macro, bool is_undef)\n-{\n-  struct cmd_line_macro *clm = XNEW (struct cmd_line_macro);\n-  clm->next = cmd_line_macros;\n-  clm->is_undef = is_undef;\n-  clm->macro = macro;\n-  cmd_line_macros = clm;\n-}\n-\n-static void\n-add_dir (char *name, bool sysp)\n-{\n-  cpp_dir *dir = XNEW (cpp_dir);\n-  dir->next = cmd_line_searchpath;\n-  dir->name = name;\n-  dir->sysp = sysp;\n-  dir->construct = 0;\n-  dir->user_supplied_p = 1;\n-  cmd_line_searchpath = dir;\n-}\n-\n-/* Command line processing.  */\n-\n-static void ATTRIBUTE_NORETURN\n-usage (int errcode)\n-{\n-  fprintf (stderr,\n-\"usage: %s [-vh] [-V vpath] [-Dname[=def]...] [-Uname] [-Idir...] [-o file] sources...\\n\",\n-\t   progname);\n-  exit (errcode);\n-}\n-\n-static int\n-parse_options (int argc, char **argv)\n-{\n-  static const struct option longopts[] = {\n-    { \"--help\", no_argument, 0, 'h' },\n-    { 0, 0, 0, 0 }\n-  };\n-\n-  for (;;)\n-    switch (getopt_long (argc, argv, \"hD:U:I:J:o:V:\", longopts, 0))\n-      {\n-      case 'h': usage (0);\n-      case 'D': add_clm (optarg, false); break;\n-      case 'U': add_clm (optarg, true);  break;\n-      case 'I': add_dir (optarg, false); break;\n-      case 'J': add_dir (optarg, true);  break;\n-      case 'o':\n-\tif (output_file)\n-\t  {\n-\t    fprintf (stderr, \"%s: too many output files\\n\", progname);\n-\t    usage (2);\n-\t  }\n-\toutput_file = optarg;\n-\tbreak;\n-      case 'V':\n-\tif (vpath)\n-\t  {\n-\t    fprintf (stderr, \"%s: too many vpaths\\n\", progname);\n-\t    usage (2);\n-\t  }\n-\tvpath = optarg;\n-\tbreak;\n-      case '?':\n-\tusage (2);  /* getopt has issued the error message.  */\n-\n-      case -1: /* end of options */\n-\tif (optind == argc)\n-\t  {\n-\t    fprintf (stderr, \"%s: no input files\\n\", progname);\n-\t    usage (2);\n-\t  }\n-\treturn optind;\n-\n-      default:\n-\tabort ();\n-      }\n-}\n-\n-/* Set up cpplib from command line options.  */\n-static cpp_reader *\n-reader_init (struct line_maps *line_table)\n-{\n-  cpp_reader *reader;\n-  cpp_options *options;\n-\n-  linemap_init (line_table);\n-  reader = cpp_create_reader (CLK_GNUC89, 0, line_table);\n-\n-  /* Ignore warnings and errors (we don't have access to system\n-     headers).  Request dependency output.  */\n-  options = cpp_get_options (reader);\n-  options->inhibit_warnings = 1;\n-  options->inhibit_errors = 1;\n-  options->deps.style = DEPS_USER;\n-\n-  /* Further initialization.  */\n-  cpp_post_options (reader);\n-  cpp_init_iconv (reader);\n-  cpp_set_include_chains (reader, cmd_line_searchpath, cmd_line_searchpath,\n-\t\t\t  false);\n-  if (vpath)\n-    {\n-      struct deps *deps = cpp_get_deps (reader);\n-      deps_add_vpath (deps, vpath);\n-    }\n-\n-  return reader;\n-}\n-\n-/* Process one input source file.  */\n-static void\n-process_file (const char *file)\n-{\n-  struct line_maps line_table;\n-  cpp_reader *reader = reader_init (&line_table);\n-\n-  if (!cpp_read_main_file (reader, file))\n-    had_errors = true;\n-  else\n-    {\n-      struct cmd_line_macro *clm;\n-\n-      cpp_init_builtins (reader, true);\n-      for (clm = cmd_line_macros; clm; clm = clm->next)\n-\t(clm->is_undef ? cpp_undef : cpp_define) (reader, clm->macro);\n-\n-      cpp_scan_nooutput (reader);\n-      if (cpp_finish (reader, stdout))\n-\thad_errors = true;\n-    }\n-  cpp_destroy (reader);\n-  linemap_free (&line_table);\n-}\n-\n-/* Master control.  */\n-\n-int\n-main(int argc, char **argv)\n-{\n-  int first_input, i;\n-\n-  progname = argv[0];\n-  xmalloc_set_program_name (progname);\n-\n-  first_input = parse_options (argc, argv);\n-  if (output_file)\n-    if (!freopen (output_file, \"w\", stdout))\n-      {\n-\tperror (output_file);\n-\treturn 1;\n-      }\n-\n-  for (i = first_input; i < argc; i++)\n-    process_file (argv[i]);\n-\n-  return had_errors;\n-}"}]}