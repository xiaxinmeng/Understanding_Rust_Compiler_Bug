{"sha": "a0c30fe3b888f20215f3e040d21b62b603804ca9", "node_id": "C_kwDOANBUbNoAKGEwYzMwZmUzYjg4OGYyMDIxNWYzZTA0MGQyMWI2MmI2MDM4MDRjYTk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-21T09:40:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-21T09:40:16Z"}, "message": "ifcvt: Don't introduce trapping or faulting reads in noce_try_sign_mask [PR106032]\n\nnoce_try_sign_mask as documented will optimize\n  if (c < 0)\n    x = t;\n  else\n    x = 0;\ninto x = (c >> bitsm1) & t;\nThe optimization is done if either t is unconditional\n(e.g. for\n  x = t;\n  if (c >= 0)\n    x = 0;\n) or if it is cheap.  We already check that t doesn't have side-effects,\nbut if t is conditional, we need to punt also if it may trap or fault,\nas we make it unconditional.\n\nI've briefly skimmed other noce_try* optimizations and didn't find one that\nwould suffer from the same problem.\n\n2022-06-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/106032\n\t* ifcvt.cc (noce_try_sign_mask): Punt if !t_unconditional, and\n\tt may_trap_or_fault_p, even if it is cheap.\n\n\t* gcc.c-torture/execute/pr106032.c: New test.", "tree": {"sha": "b398354964de91afb6a9b2cd2078b247699c18bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b398354964de91afb6a9b2cd2078b247699c18bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c30fe3b888f20215f3e040d21b62b603804ca9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c30fe3b888f20215f3e040d21b62b603804ca9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c30fe3b888f20215f3e040d21b62b603804ca9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c30fe3b888f20215f3e040d21b62b603804ca9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2df1df945fac85d7b3d084001414a66a2709d8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2df1df945fac85d7b3d084001414a66a2709d8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2df1df945fac85d7b3d084001414a66a2709d8fe"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "e007b17b793e7905b9ad7651e2dabdc867ea8e67", "filename": "gcc/ifcvt.cc", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c30fe3b888f20215f3e040d21b62b603804ca9/gcc%2Fifcvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c30fe3b888f20215f3e040d21b62b603804ca9/gcc%2Fifcvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.cc?ref=a0c30fe3b888f20215f3e040d21b62b603804ca9", "patch": "@@ -2833,18 +2833,19 @@ noce_try_sign_mask (struct noce_if_info *if_info)\n     return FALSE;\n \n   /* This is only profitable if T is unconditionally executed/evaluated in the\n-     original insn sequence or T is cheap.  The former happens if B is the\n-     non-zero (T) value and if INSN_B was taken from TEST_BB, or there was no\n-     INSN_B which can happen for e.g. conditional stores to memory.  For the\n-     cost computation use the block TEST_BB where the evaluation will end up\n-     after the transformation.  */\n+     original insn sequence or T is cheap and can't trap or fault.  The former\n+     happens if B is the non-zero (T) value and if INSN_B was taken from\n+     TEST_BB, or there was no INSN_B which can happen for e.g. conditional\n+     stores to memory.  For the cost computation use the block TEST_BB where\n+     the evaluation will end up after the transformation.  */\n   t_unconditional\n     = (t == if_info->b\n        && (if_info->insn_b == NULL_RTX\n \t   || BLOCK_FOR_INSN (if_info->insn_b) == if_info->test_bb));\n   if (!(t_unconditional\n-\t|| (set_src_cost (t, mode, if_info->speed_p)\n-\t    < COSTS_N_INSNS (2))))\n+\t|| ((set_src_cost (t, mode, if_info->speed_p)\n+\t     < COSTS_N_INSNS (2))\n+\t    && !may_trap_or_fault_p (t))))\n     return FALSE;\n \n   if (!noce_can_force_operand (t))"}, {"sha": "d2ccf6a5b5222e5a17a8dfccefa4ade5dbf5d244", "filename": "gcc/testsuite/gcc.c-torture/execute/pr106032.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c30fe3b888f20215f3e040d21b62b603804ca9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106032.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c30fe3b888f20215f3e040d21b62b603804ca9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106032.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr106032.c?ref=a0c30fe3b888f20215f3e040d21b62b603804ca9", "patch": "@@ -0,0 +1,21 @@\n+/* PR rtl-optimization/106032 */\n+\n+__attribute__((noipa)) int\n+foo (int x, int *y)\n+{\n+  int a = 0;\n+  if (x < 0)\n+    a = *y;\n+  return a;  \n+}\n+\n+int\n+main ()\n+{\n+  int a = 42;\n+  if (foo (0, 0) != 0 || foo (1, 0) != 0)\n+    __builtin_abort ();\n+  if (foo (-1, &a) != 42 || foo (-42, &a) != 42)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}