{"sha": "34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmMGQ4N2FjZGQ3NGM4MDRkOTVhODllMmFkY2QzMWI2YWEzMGRiZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-29T12:11:10Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-29T12:11:10Z"}, "message": "cfgbuild.c (inside_basic_block_p): Use JUMP_TABLE_DATA_P in lieu of tests for JUMP_P and a ADDR_DIFF_VEC or...\n\n\n\t* cfgbuild.c (inside_basic_block_p): Use JUMP_TABLE_DATA_P in lieu\n\tof tests for JUMP_P and a ADDR_DIFF_VEC or ADDR_VEC pattern.\n\t(control_flow_insn_p): Likewise.\n\t* cfgrtl.c (duplicate_insn_chain): Likewise.\n\t* final.c (get_attr_length_1): Likewise.\n\t(shorten_branches): Likewise.\n\t(final_scan_insn): Likewise.\n\t* function.c (instantiate_virtual_regs): Likewise.\n\t* gcse.c (insert_insn_end_basic_block): Likewise.\n\t* ira-costs.c (scan_one_insn): Likewise.\n\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n\t* lra.c (check_rtl): Likewise.\n\t* reload1.c (elimination_costs_in_insn): Likewise.\n\t* reorg.c (follow_jumps): Likewise.\n\n\t* config/arm/arm.c (is_jump_table): Use JUMP_TABLE_DATA_P in lieu\n\tof tests for JUMP_P and a ADDR_DIFF_VEC or ADDR_VEC pattern.\n\t(thumb_far_jump_used_p): Likewise.\n\t* config/bfin/bfin.c (workaround_rts_anomaly): Likewise.\n\t(workaround_speculation): Likewise.\n\t(add_sched_insns_for_speculation): Likewise.\n\t* config/c6x/c6x.c (reorg_emit_nops): Likewise.\n\t* config/frv/frv.c (frv_function_contains_far_jump): Likewise.\n\t(frv_for_each_packet): Likewise.\n\t* config/i386/i386.c (ix86_avoid_jump_mispredicts): Likewise.\n\t* config/ia64/ia64.c (emit_all_insn_group_barriers): Likewise.\n\t(final_emit_insn_group_barriers): Likewise.\n\t* config/m32r/m32r.c (m32r_is_insn): Likewise.\n\t* config/mips/mips.c (USEFUL_INSN_P): Likewise.\n\t(mips16_insn_length): Likewise.\n\t* config/pa/pa.c (pa_reorg): Likewise.\n\t(pa_combine_instructions): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_invalid_within_doloop): Likewise.\n\t* config/sh/sh.c (fixup_addr_diff_vecs): Likewise.\n\t(sh_reorg): Likewise.\n\t(split_branches): Likewise.\n\t* config/spu/spu.c (get_branch_target): Likewise.\n\n\t* config/s390/s390.c (s390_chunkify_start): Simplify logic using\n\tJUMP_TABLE_DATA_P.\n\nFrom-SVN: r197234", "tree": {"sha": "8230af9f599ea90460f26ce09380d6f167c3704d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8230af9f599ea90460f26ce09380d6f167c3704d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/comments", "author": null, "committer": null, "parents": [{"sha": "4ac761b0ba58f8095878de085e4de4ef90b68a3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ac761b0ba58f8095878de085e4de4ef90b68a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ac761b0ba58f8095878de085e4de4ef90b68a3f"}], "stats": {"total": 222, "additions": 116, "deletions": 106}, "files": [{"sha": "e172f414e5e3d4ba22ac8b14e550a2eec64278cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1,3 +1,46 @@\n+2013-03-29  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* cfgbuild.c (inside_basic_block_p): Use JUMP_TABLE_DATA_P in lieu\n+\tof tests for JUMP_P and a ADDR_DIFF_VEC or ADDR_VEC pattern.\n+\t(control_flow_insn_p): Likewise.\n+\t* cfgrtl.c (duplicate_insn_chain): Likewise.\n+\t* final.c (get_attr_length_1): Likewise.\n+\t(shorten_branches): Likewise.\n+\t(final_scan_insn): Likewise.\n+\t* function.c (instantiate_virtual_regs): Likewise.\n+\t* gcse.c (insert_insn_end_basic_block): Likewise.\n+\t* ira-costs.c (scan_one_insn): Likewise.\n+\t* lra-eliminations.c (eliminate_regs_in_insn): Likewise.\n+\t* lra.c (check_rtl): Likewise.\n+\t* reload1.c (elimination_costs_in_insn): Likewise.\n+\t* reorg.c (follow_jumps): Likewise.\n+\n+\t* config/arm/arm.c (is_jump_table): Use JUMP_TABLE_DATA_P in lieu\n+\tof tests for JUMP_P and a ADDR_DIFF_VEC or ADDR_VEC pattern.\n+\t(thumb_far_jump_used_p): Likewise.\n+\t* config/bfin/bfin.c (workaround_rts_anomaly): Likewise.\n+\t(workaround_speculation): Likewise.\n+\t(add_sched_insns_for_speculation): Likewise.\n+\t* config/c6x/c6x.c (reorg_emit_nops): Likewise.\n+\t* config/frv/frv.c (frv_function_contains_far_jump): Likewise.\n+\t(frv_for_each_packet): Likewise.\n+\t* config/i386/i386.c (ix86_avoid_jump_mispredicts): Likewise.\n+\t* config/ia64/ia64.c (emit_all_insn_group_barriers): Likewise.\n+\t(final_emit_insn_group_barriers): Likewise.\n+\t* config/m32r/m32r.c (m32r_is_insn): Likewise.\n+\t* config/mips/mips.c (USEFUL_INSN_P): Likewise.\n+\t(mips16_insn_length): Likewise.\n+\t* config/pa/pa.c (pa_reorg): Likewise.\n+\t(pa_combine_instructions): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_invalid_within_doloop): Likewise.\n+\t* config/sh/sh.c (fixup_addr_diff_vecs): Likewise.\n+\t(sh_reorg): Likewise.\n+\t(split_branches): Likewise.\n+\t* config/spu/spu.c (get_branch_target): Likewise.\n+\n+\t* config/s390/s390.c (s390_chunkify_start): Simplify logic using\n+\tJUMP_TABLE_DATA_P.\n+\n 2013-03-29  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* gcc/config/i386/avx2intrin.h (_mm256_broadcastsi128_si256):"}, {"sha": "34cc29c5685d5c20d60491f9495bd8b2442cb8ab", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -51,13 +51,10 @@ inside_basic_block_p (const_rtx insn)\n     case CODE_LABEL:\n       /* Avoid creating of basic block for jumptables.  */\n       return (NEXT_INSN (insn) == 0\n-\t      || !JUMP_P (NEXT_INSN (insn))\n-\t      || (GET_CODE (PATTERN (NEXT_INSN (insn))) != ADDR_VEC\n-\t\t  && GET_CODE (PATTERN (NEXT_INSN (insn))) != ADDR_DIFF_VEC));\n+\t      || ! JUMP_TABLE_DATA_P (insn));\n \n     case JUMP_INSN:\n-      return (GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t      && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC);\n+      return (! JUMP_TABLE_DATA_P (insn));\n \n     case CALL_INSN:\n     case INSN:\n@@ -88,8 +85,7 @@ control_flow_insn_p (const_rtx insn)\n \n     case JUMP_INSN:\n       /* Jump insn always causes control transfer except for tablejumps.  */\n-      return (GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t      && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC);\n+      return (! JUMP_TABLE_DATA_P (insn));\n \n     case CALL_INSN:\n       /* Noreturn and sibling call instructions terminate the basic blocks"}, {"sha": "56ea2a83a6112160743b7ca93970c7251224f4cd", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -3627,8 +3627,7 @@ duplicate_insn_chain (rtx from, rtx to)\n \t  /* Avoid copying of dispatch tables.  We never duplicate\n \t     tablejumps, so this can hit only in case the table got\n \t     moved far from original jump.  */\n-\t  if (GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t      || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n+\t  if (JUMP_TABLE_DATA_P (insn))\n \t    {\n \t      /* Avoid copying following barrier as well if any\n \t\t (and debug insns in between).  */"}, {"sha": "17a15989c646f76fda277bae1f7ef5bc05aed281", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -12824,9 +12824,7 @@ is_jump_table (rtx insn)\n       && ((table = next_real_insn (JUMP_LABEL (insn)))\n \t  == next_real_insn (insn))\n       && table != NULL\n-      && JUMP_P (table)\n-      && (GET_CODE (PATTERN (table)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (table)) == ADDR_DIFF_VEC))\n+      && JUMP_TABLE_DATA_P (table))\n     return table;\n \n   return NULL_RTX;\n@@ -22658,8 +22656,7 @@ thumb_far_jump_used_p (void)\n     {\n       if (JUMP_P (insn)\n \t  /* Ignore tablejump patterns.  */\n-\t  && GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t  && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n+\t  && ! JUMP_TABLE_DATA_P (insn)\n \t  && get_attr_far_jump (insn) == FAR_JUMP_YES\n \t  )\n \t{"}, {"sha": "7fab975a6733685c6320d978e9d2639efc588036", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -4084,12 +4084,15 @@ workaround_rts_anomaly (void)\n       if (NOTE_P (insn) || LABEL_P (insn))\n \tcontinue;\n \n+      if (JUMP_TABLE_DATA_P (insn))\n+\tcontinue;\n+\n       if (first_insn == NULL_RTX)\n \tfirst_insn = insn;\n       pat = PATTERN (insn);\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER\n-\t  || GET_CODE (pat) == ASM_INPUT || GET_CODE (pat) == ADDR_VEC\n-\t  || GET_CODE (pat) == ADDR_DIFF_VEC || asm_noperands (pat) >= 0)\n+\t  || GET_CODE (pat) == ASM_INPUT\n+\t  || asm_noperands (pat) >= 0)\n \tcontinue;\n \n       if (CALL_P (insn))\n@@ -4277,6 +4280,8 @@ workaround_speculation (void)\n       \n       if (NOTE_P (insn) || BARRIER_P (insn))\n \tcontinue;\n+      if (JUMP_TABLE_DATA_P (insn))\n+\tcontinue;\n \n       if (LABEL_P (insn))\n \t{\n@@ -4285,8 +4290,7 @@ workaround_speculation (void)\n \t}\n \n       pat = PATTERN (insn);\n-      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER\n-\t  || GET_CODE (pat) == ADDR_VEC || GET_CODE (pat) == ADDR_DIFF_VEC)\n+      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n \tcontinue;\n       \n       if (GET_CODE (pat) == ASM_INPUT || asm_noperands (pat) >= 0)\n@@ -4434,10 +4438,13 @@ workaround_speculation (void)\n \t      if (NOTE_P (target) || BARRIER_P (target) || LABEL_P (target))\n \t\tcontinue;\n \n+\t      if (JUMP_TABLE_DATA_P (target))\n+\t\tcontinue;\n+\n \t      pat = PATTERN (target);\n \t      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER\n-\t\t  || GET_CODE (pat) == ASM_INPUT || GET_CODE (pat) == ADDR_VEC\n-\t\t  || GET_CODE (pat) == ADDR_DIFF_VEC || asm_noperands (pat) >= 0)\n+\t\t  || GET_CODE (pat) == ASM_INPUT\n+\t\t  || asm_noperands (pat) >= 0)\n \t\tcontinue;\n \n \t      if (NONDEBUG_INSN_P (target))\n@@ -4510,11 +4517,13 @@ add_sched_insns_for_speculation (void)\n \n       if (NOTE_P (insn) || BARRIER_P (insn) || LABEL_P (insn))\n \tcontinue;\n+      if (JUMP_TABLE_DATA_P (insn))\n+\tcontinue;\n \n       pat = PATTERN (insn);\n       if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER\n-\t  || GET_CODE (pat) == ASM_INPUT || GET_CODE (pat) == ADDR_VEC\n-\t  || GET_CODE (pat) == ADDR_DIFF_VEC || asm_noperands (pat) >= 0)\n+\t  || GET_CODE (pat) == ASM_INPUT\n+\t  || asm_noperands (pat) >= 0)\n \tcontinue;\n \n       if (JUMP_P (insn))"}, {"sha": "a7c36833b45423d4f332eee031d9e7339dfab071", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -5052,9 +5052,7 @@ reorg_emit_nops (rtx *call_labels)\n \t  || GET_CODE (PATTERN (insn)) == USE\n \t  || GET_CODE (PATTERN (insn)) == CLOBBER\n \t  || shadow_or_blockage_p (insn)\n-\t  || (JUMP_P (insn)\n-\t      && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC)))\n+\t  || JUMP_TABLE_DATA_P (insn))\n \tgoto next_insn;\n \n       if (!c6x_flag_schedule_insns2)"}, {"sha": "ab7502e95d915a9a6e4a89c0b8fd43e9ec4d1eff", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1410,8 +1410,7 @@ frv_function_contains_far_jump (void)\n   while (insn != NULL\n \t && !(JUMP_P (insn)\n \t      /* Ignore tablejump patterns.  */\n-\t      && GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t      && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n+\t      && ! JUMP_TABLE_DATA_P (insn)\n \t      && get_attr_far_jump (insn) == FAR_JUMP_YES))\n     insn = NEXT_INSN (insn);\n   return (insn != NULL);\n@@ -7481,13 +7480,11 @@ frv_for_each_packet (void (*handle_packet) (void))\n \t  frv_start_packet_block ();\n \t}\n \n-      if (INSN_P (insn))\n+      if (INSN_P (insn) && ! JUMP_TABLE_DATA_P (insn))\n \tswitch (GET_CODE (PATTERN (insn)))\n \t  {\n \t  case USE:\n \t  case CLOBBER:\n-\t  case ADDR_VEC:\n-\t  case ADDR_DIFF_VEC:\n \t    break;\n \n \t  default:"}, {"sha": "732b2a31e8ae97b097918b4c5b3a1196342c9948", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -35209,8 +35209,7 @@ ix86_avoid_jump_mispredicts (void)\n \t\t{\n \t\t  start = NEXT_INSN (start);\n \t\t  if ((JUMP_P (start)\n-\t\t       && GET_CODE (PATTERN (start)) != ADDR_VEC\n-\t\t       && GET_CODE (PATTERN (start)) != ADDR_DIFF_VEC)\n+\t\t       && ! JUMP_TABLE_DATA_P (start))\n \t\t      || CALL_P (start))\n \t\t    njumps--, isjump = 1;\n \t\t  else\n@@ -35227,8 +35226,7 @@ ix86_avoid_jump_mispredicts (void)\n \tfprintf (dump_file, \"Insn %i estimated to %i bytes\\n\",\n \t\t INSN_UID (insn), min_size);\n       if ((JUMP_P (insn)\n-\t   && GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t   && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC)\n+\t   && ! JUMP_TABLE_DATA_P (insn))\n \t  || CALL_P (insn))\n \tnjumps++;\n       else\n@@ -35238,8 +35236,7 @@ ix86_avoid_jump_mispredicts (void)\n \t{\n \t  start = NEXT_INSN (start);\n \t  if ((JUMP_P (start)\n-\t       && GET_CODE (PATTERN (start)) != ADDR_VEC\n-\t       && GET_CODE (PATTERN (start)) != ADDR_DIFF_VEC)\n+\t       && ! JUMP_TABLE_DATA_P (start))\n \t      || CALL_P (start))\n \t    njumps--, isjump = 1;\n \t  else"}, {"sha": "144cf7ee5eed3a4867267da743a86f43f71e06f7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -6987,8 +6987,7 @@ emit_all_insn_group_barriers (FILE *dump ATTRIBUTE_UNUSED)\n \n \t  if (! last)\n \t    continue;\n-\t  if (JUMP_P (last)\n-\t      && GET_CODE (PATTERN (last)) == ADDR_DIFF_VEC)\n+\t  if (JUMP_TABLE_DATA_P (last))\n \t    last = prev_active_insn (last);\n \t  if (recog_memoized (last) != CODE_FOR_insn_group_barrier)\n \t    emit_insn_after (gen_insn_group_barrier (GEN_INT (3)), last);\n@@ -9376,8 +9375,7 @@ final_emit_insn_group_barriers (FILE *dump ATTRIBUTE_UNUSED)\n \n \t  if (! last)\n \t    continue;\n-\t  if (JUMP_P (last)\n-\t      && GET_CODE (PATTERN (last)) == ADDR_DIFF_VEC)\n+\t  if (JUMP_TABLE_DATA_P (last))\n \t    last = prev_active_insn (last);\n \t  if (recog_memoized (last) != CODE_FOR_insn_group_barrier)\n \t    emit_insn_after (gen_insn_group_barrier (GEN_INT (3)), last);"}, {"sha": "93df52f79eab31d793e1ae566503d77f467b0a2d", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1308,9 +1308,9 @@ static int\n m32r_is_insn (rtx insn)\n {\n   return (NONDEBUG_INSN_P (insn)\n+\t  && ! JUMP_TABLE_DATA_P (insn)\n \t  && GET_CODE (PATTERN (insn)) != USE\n-\t  && GET_CODE (PATTERN (insn)) != CLOBBER\n-\t  && GET_CODE (PATTERN (insn)) != ADDR_VEC);\n+\t  && GET_CODE (PATTERN (insn)) != CLOBBER);\n }\n \n /* Increase the priority of long instructions so that the"}, {"sha": "7a67c45c65ef425e24acd8de16102e3fb583009a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -95,12 +95,13 @@ along with GCC; see the file COPYING3.  If not see\n    : TARGET_64BIT ? 0x100 : 0x400)\n \n /* True if INSN is a mips.md pattern or asm statement.  */\n+/* ???\tThis test exists through the compiler, perhaps it should be\n+\tmoved to rtl.h.  */\n #define USEFUL_INSN_P(INSN)\t\t\t\t\t\t\\\n   (NONDEBUG_INSN_P (INSN)\t\t\t\t\t\t\\\n+   && ! JUMP_TABLE_DATA_P (INSN)\t\t\t\t\t\\\n    && GET_CODE (PATTERN (INSN)) != USE\t\t\t\t\t\\\n-   && GET_CODE (PATTERN (INSN)) != CLOBBER\t\t\t\t\\\n-   && GET_CODE (PATTERN (INSN)) != ADDR_VEC\t\t\t\t\\\n-   && GET_CODE (PATTERN (INSN)) != ADDR_DIFF_VEC)\n+   && GET_CODE (PATTERN (INSN)) != CLOBBER)\n \n /* If INSN is a delayed branch sequence, return the first instruction\n    in the sequence, otherwise return INSN itself.  */\n@@ -14648,7 +14649,7 @@ mips16_emit_constants (struct mips16_constant *constants, rtx insn)\n static int\n mips16_insn_length (rtx insn)\n {\n-  if (JUMP_P (insn))\n+  if (JUMP_TABLE_DATA_P (insn))\n     {\n       rtx body = PATTERN (insn);\n       if (GET_CODE (body) == ADDR_VEC)"}, {"sha": "b969e108b71b46bfce2255361445a87ac5c13f01", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -8997,9 +8997,7 @@ pa_reorg (void)\n \t  unsigned int length, i;\n \n \t  /* Find an ADDR_VEC or ADDR_DIFF_VEC insn to explode.  */\n-\t  if (! JUMP_P (insn)\n-\t      || (GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t\t  && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC))\n+\t  if (! JUMP_TABLE_DATA_P (insn))\n \t    continue;\n \n \t  /* Emit marker for the beginning of the branch table.  */\n@@ -9056,9 +9054,7 @@ pa_reorg (void)\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \t{\n \t  /* Find an ADDR_VEC insn.  */\n-\t  if (! JUMP_P (insn)\n-\t      || (GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t\t  && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC))\n+\t  if (! JUMP_TABLE_DATA_P (insn))\n \t    continue;\n \n \t  /* Now generate markers for the beginning and end of the\n@@ -9138,10 +9134,9 @@ pa_combine_instructions (void)\n       /* We only care about INSNs, JUMP_INSNs, and CALL_INSNs.\n \t Also ignore any special USE insns.  */\n       if ((! NONJUMP_INSN_P (anchor) && ! JUMP_P (anchor) && ! CALL_P (anchor))\n+\t  || JUMP_TABLE_DATA_P (anchor)\n \t  || GET_CODE (PATTERN (anchor)) == USE\n-\t  || GET_CODE (PATTERN (anchor)) == CLOBBER\n-\t  || GET_CODE (PATTERN (anchor)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (anchor)) == ADDR_DIFF_VEC)\n+\t  || GET_CODE (PATTERN (anchor)) == CLOBBER)\n \tcontinue;\n \n       anchor_attr = get_attr_pa_combine_type (anchor);\n@@ -9165,8 +9160,7 @@ pa_combine_instructions (void)\n \n \t      /* Anything except a regular INSN will stop our search.  */\n \t      if (! NONJUMP_INSN_P (floater)\n-\t\t  || GET_CODE (PATTERN (floater)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (floater)) == ADDR_DIFF_VEC)\n+\t\t  || JUMP_TABLE_DATA_P (floater))\n \t\t{\n \t\t  floater = NULL_RTX;\n \t\t  break;\n@@ -9227,8 +9221,7 @@ pa_combine_instructions (void)\n \n \t\t  /* Anything except a regular INSN will stop our search.  */\n \t\t  if (! NONJUMP_INSN_P (floater)\n-\t\t      || GET_CODE (PATTERN (floater)) == ADDR_VEC\n-\t\t      || GET_CODE (PATTERN (floater)) == ADDR_DIFF_VEC)\n+\t\t      || JUMP_TABLE_DATA_P (floater))\n \t\t    {\n \t\t      floater = NULL_RTX;\n \t\t      break;"}, {"sha": "72cf8de83abd8b461856089814a73da6c9d422ee", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -18788,9 +18788,7 @@ rs6000_invalid_within_doloop (const_rtx insn)\n   if (CALL_P (insn))\n     return \"Function call in the loop.\";\n \n-  if (JUMP_P (insn)\n-      && (GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n-\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC))\n+  if (JUMP_TABLE_DATA_P (insn))\n     return \"Computed branch in the loop.\";\n \n   return NULL;"}, {"sha": "ab1e1f50b51964265181391895965b77bd5a9569", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -5739,7 +5739,7 @@ addr_generation_dependency_p (rtx dep_rtx, rtx insn)\n   rtx target, pat;\n \n   if (NONJUMP_INSN_P (dep_rtx))\n-      dep_rtx = PATTERN (dep_rtx);\n+    dep_rtx = PATTERN (dep_rtx);\n \n   if (GET_CODE (dep_rtx) == SET)\n     {\n@@ -7013,11 +7013,7 @@ s390_chunkify_start (void)\n \t  && (LABEL_PRESERVE_P (insn) || LABEL_NAME (insn)))\n \t{\n \t  rtx vec_insn = next_real_insn (insn);\n-\t  rtx vec_pat = vec_insn && JUMP_P (vec_insn) ?\n-\t\t\tPATTERN (vec_insn) : NULL_RTX;\n-\t  if (!vec_pat\n-\t      || !(GET_CODE (vec_pat) == ADDR_VEC\n-\t\t   || GET_CODE (vec_pat) == ADDR_DIFF_VEC))\n+\t  if (! vec_insn || ! JUMP_TABLE_DATA_P (vec_insn))\n \t    bitmap_set_bit (far_labels, CODE_LABEL_NUMBER (insn));\n \t}\n \n@@ -7048,12 +7044,9 @@ s390_chunkify_start (void)\n \t      /* Find the jump table used by this casesi jump.  */\n \t      rtx vec_label = XEXP (XEXP (XVECEXP (pat, 0, 1), 0), 0);\n \t      rtx vec_insn = next_real_insn (vec_label);\n-\t      rtx vec_pat = vec_insn && JUMP_P (vec_insn) ?\n-\t\t\t    PATTERN (vec_insn) : NULL_RTX;\n-\t      if (vec_pat\n-\t\t  && (GET_CODE (vec_pat) == ADDR_VEC\n-\t\t      || GET_CODE (vec_pat) == ADDR_DIFF_VEC))\n+\t      if (vec_insn && JUMP_TABLE_DATA_P (vec_insn))\n \t\t{\n+\t\t  rtx vec_pat = PATTERN (vec_insn);\n \t\t  int i, diff_p = GET_CODE (vec_pat) == ADDR_DIFF_VEC;\n \n \t\t  for (i = 0; i < XVECLEN (vec_pat, diff_p); i++)"}, {"sha": "d13198b025b42f604d9542d2f7845b96d233fadd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -5799,7 +5799,7 @@ fixup_addr_diff_vecs (rtx first)\n     {\n       rtx vec_lab, pat, prev, prevpat, x, braf_label;\n \n-      if (!JUMP_P (insn)\n+      if (! JUMP_TABLE_DATA_P (insn)\n \t  || GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC)\n \tcontinue;\n       pat = PATTERN (insn);\n@@ -6233,7 +6233,7 @@ sh_reorg (void)\n \t      num_mova = 0;\n \t    }\n \t}\n-      else if (JUMP_P (insn)\n+      else if (JUMP_TABLE_DATA_P (insn)\n \t       && GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t       && num_mova\n \t       /* ??? loop invariant motion can also move a mova out of a\n@@ -6496,8 +6496,7 @@ split_branches (rtx first)\n       }\n     else if (JUMP_P (insn)\n \t     /* Don't mess with ADDR_DIFF_VEC */\n-\t     && (GET_CODE (PATTERN (insn)) == SET\n-\t\t || GET_CODE (PATTERN (insn)) == RETURN))\n+\t     && ! JUMP_TABLE_DATA_P (insn))\n       {\n \tenum attr_type type = get_attr_type (insn);\n \tif (type == TYPE_CBRANCH)"}, {"sha": "ec5a987342143df5cace070a9557c15fe6f12415", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -2172,8 +2172,7 @@ get_branch_target (rtx branch)\n \treturn gen_rtx_REG (SImode, LINK_REGISTER_REGNUM);\n \n       /* jump table */\n-      if (GET_CODE (PATTERN (branch)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (branch)) == ADDR_DIFF_VEC)\n+      if (JUMP_TABLE_DATA_P (branch))\n \treturn 0;\n \n      /* ASM GOTOs. */"}, {"sha": "577d5ebdca456ed99eb92d9780915faa0cefdb68", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -396,7 +396,7 @@ get_attr_length_1 (rtx insn, int (*fallback_fn) (rtx))\n \n       case JUMP_INSN:\n \tbody = PATTERN (insn);\n-\tif (GET_CODE (body) == ADDR_VEC || GET_CODE (body) == ADDR_DIFF_VEC)\n+\tif (JUMP_TABLE_DATA_P (insn))\n \t  {\n \t    /* Alignment is machine-dependent and should be handled by\n \t       ADDR_VEC_ALIGN.  */\n@@ -1020,7 +1020,7 @@ shorten_branches (rtx first)\n \t  int min_align;\n \t  addr_diff_vec_flags flags;\n \n-\t  if (!JUMP_P (insn)\n+\t  if (! JUMP_TABLE_DATA_P (insn)\n \t      || GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC)\n \t    continue;\n \t  pat = PATTERN (insn);\n@@ -1094,7 +1094,7 @@ shorten_branches (rtx first)\n \tcontinue;\n \n       body = PATTERN (insn);\n-      if (GET_CODE (body) == ADDR_VEC || GET_CODE (body) == ADDR_DIFF_VEC)\n+      if (JUMP_TABLE_DATA_P (insn))\n \t{\n \t  /* This only takes room if read-only data goes into the text\n \t     section.  */\n@@ -1230,7 +1230,8 @@ shorten_branches (rtx first)\n \t  INSN_ADDRESSES (uid) = insn_current_address;\n \n #ifdef CASE_VECTOR_SHORTEN_MODE\n-\t  if (optimize && JUMP_P (insn)\n+\t  if (optimize\n+\t      && JUMP_TABLE_DATA_P (insn)\n \t      && GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n \t    {\n \t      rtx body = PATTERN (insn);\n@@ -2404,7 +2405,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t/* Detect insns that are really jump-tables\n \t   and output them as such.  */\n \n-\tif (GET_CODE (body) == ADDR_VEC || GET_CODE (body) == ADDR_DIFF_VEC)\n+        if (JUMP_TABLE_DATA_P (insn))\n \t  {\n #if !(defined(ASM_OUTPUT_ADDR_VEC) || defined(ASM_OUTPUT_ADDR_DIFF_VEC))\n \t    int vlen, idx;"}, {"sha": "d3b7ed67f7bb701067084e2eab1987d0001e6025", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1915,10 +1915,9 @@ instantiate_virtual_regs (void)\n       {\n \t/* These patterns in the instruction stream can never be recognized.\n \t   Fortunately, they shouldn't contain virtual registers either.  */\n-\tif (GET_CODE (PATTERN (insn)) == USE\n+        if (JUMP_TABLE_DATA_P (insn)\n+\t    || GET_CODE (PATTERN (insn)) == USE\n \t    || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t    || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t    || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t    || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n \t  continue;\n \telse if (DEBUG_INSN_P (insn))"}, {"sha": "f6bf2fc22a09468bf29091bba810149293bbb917", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -2155,8 +2155,7 @@ insert_insn_end_basic_block (struct expr *expr, basic_block bb)\n       /* If this is a jump table, then we can't insert stuff here.  Since\n \t we know the previous real insn must be the tablejump, we insert\n \t the new instruction just before the tablejump.  */\n-      if (GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n+      if (JUMP_TABLE_DATA_P (insn))\n \tinsn = prev_active_insn (insn);\n \n #ifdef HAVE_cc0"}, {"sha": "562aeb0f1bf5dcf55897b03f15310a125725f19b", "filename": "gcc/ira-costs.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fira-costs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Fira-costs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-costs.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1269,12 +1269,12 @@ scan_one_insn (rtx insn)\n   int i, k;\n   bool counted_mem;\n \n-  if (!NONDEBUG_INSN_P (insn))\n+  if (!NONDEBUG_INSN_P (insn)\n+      || JUMP_TABLE_DATA_P (insn))\n     return insn;\n \n   pat_code = GET_CODE (PATTERN (insn));\n-  if (pat_code == USE || pat_code == CLOBBER || pat_code == ASM_INPUT\n-      || pat_code == ADDR_VEC || pat_code == ADDR_DIFF_VEC)\n+  if (pat_code == USE || pat_code == CLOBBER || pat_code == ASM_INPUT)\n     return insn;\n \n   counted_mem = false;"}, {"sha": "1f88d6bbef7321c2310ca1192dd2729649cd7df5", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -767,10 +767,9 @@ eliminate_regs_in_insn (rtx insn, bool replace_p)\n \n   if (icode < 0 && asm_noperands (PATTERN (insn)) < 0 && ! DEBUG_INSN_P (insn))\n     {\n-      lra_assert (GET_CODE (PATTERN (insn)) == USE\n+      lra_assert (JUMP_TABLE_DATA_P (insn)\n+\t\t  || GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT);\n       return;\n     }"}, {"sha": "5c7b0d6cea1edbef757c4ce3949b4bfc6090bbd9", "filename": "gcc/lra.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -1997,10 +1997,9 @@ check_rtl (bool final_p)\n   FOR_EACH_BB (bb)\n     FOR_BB_INSNS (bb, insn)\n     if (NONDEBUG_INSN_P (insn)\n+\t&& ! JUMP_TABLE_DATA_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER\n-\t&& GET_CODE (PATTERN (insn)) != ADDR_VEC\n-\t&& GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n \t&& GET_CODE (PATTERN (insn)) != ASM_INPUT)\n       {\n \tif (final_p)"}, {"sha": "7d6b5ddce4e87d1c2952738fc83b86e9ca6f9ecd", "filename": "gcc/reload1.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -3234,10 +3234,9 @@ eliminate_regs_in_insn (rtx insn, int replace)\n \n   if (! insn_is_asm && icode < 0)\n     {\n-      gcc_assert (GET_CODE (PATTERN (insn)) == USE\n+      gcc_assert (JUMP_TABLE_DATA_P (insn)\n+\t\t  || GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n \t\t  || DEBUG_INSN_P (insn));\n       if (DEBUG_INSN_P (insn))\n@@ -3645,10 +3644,9 @@ elimination_costs_in_insn (rtx insn)\n \n   if (! insn_is_asm && icode < 0)\n     {\n-      gcc_assert (GET_CODE (PATTERN (insn)) == USE\n+      gcc_assert (JUMP_TABLE_DATA_P (insn)\n+\t\t  || GET_CODE (PATTERN (insn)) == USE\n \t\t  || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC\n \t\t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n \t\t  || DEBUG_INSN_P (insn));\n       return;"}, {"sha": "51a70dc9bfbb315d7f9d43c319d3b465ec62d821", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f0d87acdd74c804d95a89e2adcd31b6aa30dbd/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=34f0d87acdd74c804d95a89e2adcd31b6aa30dbd", "patch": "@@ -2339,9 +2339,7 @@ follow_jumps (rtx label, rtx jump, bool *crossing)\n       if (ANY_RETURN_P (this_label))\n \treturn this_label;\n       tem = next_active_insn (this_label);\n-      if (tem\n-\t  && (GET_CODE (PATTERN (tem)) == ADDR_VEC\n-\t      || GET_CODE (PATTERN (tem)) == ADDR_DIFF_VEC))\n+      if (tem && JUMP_TABLE_DATA_P (tem))\n \tbreak;\n \n       if (!targetm.can_follow_jump (jump, insn))"}]}