{"sha": "b6a7b72c6c91cc0d800a603a59e96fbcb07793ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZhN2I3MmM2YzkxY2MwZDgwMGE2MDNhNTllOTZmYmNiMDc3OTNiYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-27T11:01:25Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-11-27T11:50:32Z"}, "message": "tree-optimization/98024 - fix rnflow regression\n\nThe change to make PRE insertion iterate less had a typo in checking\nsuccessors RPO state.  Fixing this exposes that regular PRE insertion\nwhen facing a value that is the same on all edges inserts an\nassignment in place of a PHI node but fails to set up things so that\nthis insertion is not repeated (it correctly does not return\n'new_stuff').  But with the new iteration scheme this causes us\nto repeatedly insert such assignment and change AVAIL_OUT over to\nthe newly inserted expression.  The fix is to treat this as PHI\nand insert into PHI_GEN, avoiding repetitive insertion.\n\n2020-11-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98024\n\t* tree-ssa-pre.c (insert): Fix successor RPO order check.\n\t(do_pre_regular_insertion): When inserting an assignment\n\tin place of an all-same-value PHI still record that into\n\tPHI_GEN.", "tree": {"sha": "5c547f7ace58e69a97cd90fa1bbe6d299ff760aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c547f7ace58e69a97cd90fa1bbe6d299ff760aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fb9b4c97690c5750e49c32fa2a373a7c66c5d46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fb9b4c97690c5750e49c32fa2a373a7c66c5d46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fb9b4c97690c5750e49c32fa2a373a7c66c5d46"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "a17a09af990d352dcf1bbf2588d85bb4cdd32446", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6a7b72c6c91cc0d800a603a59e96fbcb07793ba/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=b6a7b72c6c91cc0d800a603a59e96fbcb07793ba", "patch": "@@ -3471,6 +3471,7 @@ do_pre_regular_insertion (basic_block block, basic_block dom,\n \t      add_to_value (val, newe);\n \t      bitmap_value_replace_in_set (AVAIL_OUT (block), newe);\n \t      bitmap_insert_into_set (NEW_SETS (block), newe);\n+\t      bitmap_insert_into_set (PHI_GEN (block), newe);\n \t    }\n \t}\n     }\n@@ -3808,13 +3809,14 @@ insert (void)\n \t\t    |= bitmap_value_replace_in_set (AVAIL_OUT (block), expr);\n \t\t}\n \t      /* We need to iterate if AVAIL_OUT of an already processed\n-\t\t block source.  */\n+\t\t block source changed.  */\n \t      if (avail_out_changed && !changed)\n \t\t{\n \t\t  edge_iterator ei;\n \t\t  edge e;\n \t\t  FOR_EACH_EDGE (e, ei, block->succs)\n-\t\t    if (bb_rpo[e->src->index] < idx)\n+\t\t    if (e->dest->index != EXIT_BLOCK\n+\t\t\t&& bb_rpo[e->dest->index] < idx)\n \t\t      changed = true;\n \t\t}\n "}]}