{"sha": "133beb6d0f286b022600682f024d9c3c77705029", "node_id": "C_kwDOANBUbNoAKDEzM2JlYjZkMGYyODZiMDIyNjAwNjgyZjAyNGQ5YzNjNzc3MDUwMjk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-22T09:39:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-22T09:39:25Z"}, "message": "Merge #955\n\n955: matched_fragment: Track and set fragment match amount r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "fb93d10fdaa54592ae8d451dbf7bf352cbd72558", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb93d10fdaa54592ae8d451dbf7bf352cbd72558"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/133beb6d0f286b022600682f024d9c3c77705029", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFK9NCRBK7hj4Ov3rIwAA3HMIAG/8F4ysFWGVmOTZaWIVmYL/\nXcfFSMe1EkMUxT2Rd31X7KDfWXrwuEWAauFV/nBLWxLyHAQ5V3nUj9aLHi0FNtgj\nsnU6RTpJSaYKVbavEflmfeT1NGyvWYLp5Vk1BAY+7lwo3ekS30jc9DmXWsYfHEFM\nNMnWpJoxZ+RGYHpHGfSKKPqNnNvevHBw/4C1ZpxFT8KOHKb03lWtzk70kJ68Ixeo\nTJ+q5oNoqtzHN4UIptbHJWdljM16VAwKdX7z4qpnnQiRQazyCutiv/6TTQJkDtp+\n3ioE+0cT7V+P+UG31ByjPbenh60YxBNqr3puPhEQp1dkfUr9fjkTDAX7+OeerXA=\n=Ynea\n-----END PGP SIGNATURE-----\n", "payload": "tree fb93d10fdaa54592ae8d451dbf7bf352cbd72558\nparent 796465596faa9fa69ffede1c16d944e6a6e24458\nparent 91aca2c19eba35a46d1e3276d71ccdd6e2f752c0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645522765 +0000\ncommitter GitHub <noreply@github.com> 1645522765 +0000\n\nMerge #955\n\n955: matched_fragment: Track and set fragment match amount r=CohenArthur a=CohenArthur\n\n\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133beb6d0f286b022600682f024d9c3c77705029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133beb6d0f286b022600682f024d9c3c77705029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133beb6d0f286b022600682f024d9c3c77705029/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796465596faa9fa69ffede1c16d944e6a6e24458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/796465596faa9fa69ffede1c16d944e6a6e24458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/796465596faa9fa69ffede1c16d944e6a6e24458"}, {"sha": "91aca2c19eba35a46d1e3276d71ccdd6e2f752c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91aca2c19eba35a46d1e3276d71ccdd6e2f752c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91aca2c19eba35a46d1e3276d71ccdd6e2f752c0"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "ff0f169dd028c8bea6017ef688db79a9e113c27b", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133beb6d0f286b022600682f024d9c3c77705029/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133beb6d0f286b022600682f024d9c3c77705029/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=133beb6d0f286b022600682f024d9c3c77705029", "patch": "@@ -3127,6 +3127,10 @@ MacroExpander::expand_decl_macro (Location invoc_locus,\n \n       if (did_match_rule)\n \t{\n+\t  for (auto &frag : matched_fragments)\n+\t    rust_debug (\"matched fragment: %s\",\n+\t\t\tfrag.second.as_string ().c_str ());\n+\n \t  matched_rule = &rule;\n \t  break;\n \t}\n@@ -3533,7 +3537,7 @@ MacroExpander::match_matcher (Parser<MacroInvocLexer> &parser,\n \t    size_t offs_end = source.get_offs ();\n \t    sub_stack.peek ().insert (\n \t      {fragment->get_ident (),\n-\t       {fragment->get_ident (), offs_begin, offs_end}});\n+\t       MatchedFragment (fragment->get_ident (), offs_begin, offs_end)});\n \t  }\n \t  break;\n \n@@ -3607,6 +3611,7 @@ MacroExpander::match_n_matches (\n   match_amount = 0;\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n+  std::vector<std::string> fragment_identifiers;\n   while (true)\n     {\n       // If the current token is a closing macro delimiter, break away.\n@@ -3630,7 +3635,10 @@ MacroExpander::match_n_matches (\n \t\tsize_t offs_end = source.get_offs ();\n \t\tsub_stack.peek ().insert (\n \t\t  {fragment->get_ident (),\n-\t\t   {fragment->get_ident (), offs_begin, offs_end}});\n+\t\t   MatchedFragment (fragment->get_ident (), offs_begin,\n+\t\t\t\t    offs_end)});\n+\n+\t\tfragment_identifiers.emplace_back (fragment->get_ident ());\n \t      }\n \t      break;\n \n@@ -3669,10 +3677,21 @@ MacroExpander::match_n_matches (\n \n   // Check if the amount of matches we got is valid: Is it more than the lower\n   // bound and less than the higher bound?\n-  if (!hi_bound) // infinite amount, no upper bound\n-    return match_amount >= lo_bound;\n-  else\n-    return match_amount >= lo_bound && match_amount <= hi_bound;\n+  auto result = hi_bound ? match_amount >= lo_bound && match_amount <= hi_bound\n+\t\t\t : match_amount >= lo_bound;\n+\n+  // We can now set the amount to each fragment we matched in the substack\n+  auto &stack_map = sub_stack.peek ();\n+  for (auto &fragment_id : fragment_identifiers)\n+    {\n+      auto it = stack_map.find (fragment_id);\n+\n+      rust_assert (it != stack_map.end ());\n+\n+      it->second.set_match_amount (match_amount);\n+    }\n+\n+  return result;\n }\n \n bool"}, {"sha": "94f495c5ff596e2c7c404f8260932d18a1dd9cde", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/133beb6d0f286b022600682f024d9c3c77705029/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/133beb6d0f286b022600682f024d9c3c77705029/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=133beb6d0f286b022600682f024d9c3c77705029", "patch": "@@ -99,12 +99,22 @@ struct MatchedFragment\n   std::string fragment_ident;\n   size_t token_offset_begin;\n   size_t token_offset_end;\n+  size_t match_amount;\n+\n+  MatchedFragment (std::string identifier, size_t token_offset_begin,\n+\t\t   size_t token_offset_end, size_t match_amount = 0)\n+    : fragment_ident (identifier), token_offset_begin (token_offset_begin),\n+      token_offset_end (token_offset_end), match_amount (match_amount)\n+  {}\n \n   std::string as_string () const\n   {\n     return fragment_ident + \"=\" + std::to_string (token_offset_begin) + \":\"\n-\t   + std::to_string (token_offset_end);\n+\t   + std::to_string (token_offset_end) + \" (matched \"\n+\t   + std::to_string (match_amount) + \" times)\";\n   }\n+\n+  void set_match_amount (size_t new_amount) { match_amount = new_amount; }\n };\n \n class SubstitutionScope"}]}