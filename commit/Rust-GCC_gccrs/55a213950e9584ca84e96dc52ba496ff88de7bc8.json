{"sha": "55a213950e9584ca84e96dc52ba496ff88de7bc8", "node_id": "C_kwDOANBUbNoAKDU1YTIxMzk1MGU5NTg0Y2E4NGU5NmRjNTJiYTQ5NmZmODhkZTdiYzg", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-11-03T16:38:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-10T08:57:39Z"}, "message": "[Ada] Fix oversight in latest change to Has_Compatible_Type\n\ngcc/ada/\n\n\t* sem_type.ads (Has_Compatible_Type): Add For_Comparison parameter.\n\t* sem_type.adb (Has_Compatible_Type): Put back the reversed calls\n\tto Covers guarded with For_Comparison.\n\t* sem_ch4.adb (Analyze_Membership_Op) <Try_One_Interp>: Remove new\n\treversed call to Covers and set For_Comparison to true instead.\n\t(Find_Comparison_Types) <Try_One_Interp>: Likewise\n\t(Find_Equality_Types) <Try_One_Interp>: Likewise.", "tree": {"sha": "ad27000347565896828d64c5d5d94ec86afd6043", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad27000347565896828d64c5d5d94ec86afd6043"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55a213950e9584ca84e96dc52ba496ff88de7bc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a213950e9584ca84e96dc52ba496ff88de7bc8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55a213950e9584ca84e96dc52ba496ff88de7bc8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55a213950e9584ca84e96dc52ba496ff88de7bc8/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94396a27bcfbdcb156586688de9a5a2e1bee2d4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94396a27bcfbdcb156586688de9a5a2e1bee2d4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94396a27bcfbdcb156586688de9a5a2e1bee2d4a"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "77c1b97068c482ceac3c388932b938671b53f370", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=55a213950e9584ca84e96dc52ba496ff88de7bc8", "patch": "@@ -3113,7 +3113,7 @@ package body Sem_Ch4 is\n \n       procedure Try_One_Interp (T1 : Entity_Id) is\n       begin\n-         if Has_Compatible_Type (R, T1) or else Covers (Etype (R), T1) then\n+         if Has_Compatible_Type (R, T1, For_Comparison => True) then\n             if Found\n               and then Base_Type (T1) /= Base_Type (T_F)\n             then\n@@ -6607,8 +6607,7 @@ package body Sem_Ch4 is\n          end if;\n \n          if Valid_Comparison_Arg (T1)\n-           and then (Has_Compatible_Type (R, T1)\n-                      or else Covers (Etype (R), T1))\n+           and then Has_Compatible_Type (R, T1, For_Comparison => True)\n          then\n             if Found and then Base_Type (T1) /= Base_Type (T_F) then\n                It := Disambiguate (L, I_F, Index, Any_Type);\n@@ -7105,8 +7104,8 @@ package body Sem_Ch4 is\n \n          if T1 /= Standard_Void_Type\n            and then (Universal_Access\n-                      or else Has_Compatible_Type (R, T1)\n-                      or else Covers (Etype (R), T1))\n+                      or else\n+                     Has_Compatible_Type (R, T1, For_Comparison => True))\n \n            and then\n              ((not Is_Limited_Type (T1)"}, {"sha": "4419fb31bdac192ab6b52460977244a50a8ce603", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=55a213950e9584ca84e96dc52ba496ff88de7bc8", "patch": "@@ -2438,8 +2438,9 @@ package body Sem_Type is\n    -------------------------\n \n    function Has_Compatible_Type\n-     (N   : Node_Id;\n-      Typ : Entity_Id) return Boolean\n+     (N              : Node_Id;\n+      Typ            : Entity_Id;\n+      For_Comparison : Boolean := False) return Boolean\n    is\n       I  : Interp_Index;\n       It : Interp;\n@@ -2479,6 +2480,12 @@ package body Sem_Type is\n            or else\n              (Nkind (N) = N_String_Literal\n                and then Present (Find_Aspect (Typ, Aspect_String_Literal)))\n+\n+           or else\n+             (For_Comparison\n+               and then not Is_Tagged_Type (Typ)\n+               and then Ekind (Typ) /= E_Anonymous_Access_Type\n+               and then Covers (Etype (N), Typ))\n          then\n             return True;\n          end if;\n@@ -2503,6 +2510,11 @@ package body Sem_Type is\n                   and then Covers (Typ, Corresponding_Record_Type\n                                                              (Etype (It.Typ))))\n \n+             or else\n+               (For_Comparison\n+                 and then not Is_Tagged_Type (Typ)\n+                 and then Ekind (Typ) /= E_Anonymous_Access_Type\n+                 and then Covers (It.Typ, Typ))\n             then\n                return True;\n             end if;"}, {"sha": "dfe4c7c5019a9e920dc207147cdf0200521edada", "filename": "gcc/ada/sem_type.ads", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_type.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55a213950e9584ca84e96dc52ba496ff88de7bc8/gcc%2Fada%2Fsem_type.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.ads?ref=55a213950e9584ca84e96dc52ba496ff88de7bc8", "patch": "@@ -186,11 +186,17 @@ package Sem_Type is\n    --  right operand, which has one interpretation compatible with that of L.\n    --  Return the type intersection of the two.\n \n-   function Has_Compatible_Type (N : Node_Id; Typ : Entity_Id) return Boolean;\n+   function Has_Compatible_Type\n+     (N              : Node_Id;\n+      Typ            : Entity_Id;\n+      For_Comparison : Boolean := False) return Boolean;\n    --  Verify that some interpretation of the node N has a type compatible with\n    --  Typ. If N is not overloaded, then its unique type must be compatible\n    --  with Typ. Otherwise iterate through the interpretations of N looking for\n-   --  a compatible one.\n+   --  a compatible one. If For_Comparison is true, the function is invoked for\n+   --  a comparison (or equality) operator and also needs to verify the reverse\n+   --  compatibility, because the implementation of type resolution for these\n+   --  operators is not fully symmetrical.\n \n    function Hides_Op (F : Entity_Id; Op : Entity_Id) return Boolean;\n    --  A user-defined function hides a predefined operator if it matches the"}]}