{"sha": "bae4797704c3d5ea49d10cfe65b19143edd525d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlNDc5NzcwNGMzZDVlYTQ5ZDEwY2ZlNjViMTkxNDNlZGQ1MjVkNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-04-17T06:19:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-04-17T06:19:17Z"}, "message": "re PR target/20375 (C++ ICE in assign_parm_find_entry_rtl)\n\n        PR target/20375\n        * config/alpha/alpha.c (alpha_setup_incoming_varargs): Advance a copy\n        of CUMULATIVE_ARGS past the last named argument.\n        (alpha_va_start): Expect pretend_args_size only if strictly less than\n        6 named arguments.\n\nFrom-SVN: r98257", "tree": {"sha": "0e1c00d807879a77905547b87b45f49a2ad68785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e1c00d807879a77905547b87b45f49a2ad68785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae4797704c3d5ea49d10cfe65b19143edd525d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae4797704c3d5ea49d10cfe65b19143edd525d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae4797704c3d5ea49d10cfe65b19143edd525d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae4797704c3d5ea49d10cfe65b19143edd525d5/comments", "author": null, "committer": null, "parents": [{"sha": "79bb956ed03bd2d6b20414c98dbfc28f7a397436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bb956ed03bd2d6b20414c98dbfc28f7a397436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bb956ed03bd2d6b20414c98dbfc28f7a397436"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "30f54cf81ab58d4f0089550699d5220e33440d36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4797704c3d5ea49d10cfe65b19143edd525d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4797704c3d5ea49d10cfe65b19143edd525d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bae4797704c3d5ea49d10cfe65b19143edd525d5", "patch": "@@ -1,3 +1,11 @@\n+2005-04-17  Richard Henderson  <rth@redhat.com>\n+\n+\tPR target/20375\n+\t* config/alpha/alpha.c (alpha_setup_incoming_varargs): Advance a copy\n+\tof CUMULATIVE_ARGS past the last named argument.\n+\t(alpha_va_start): Expect pretend_args_size only if strictly less than\n+\t6 named arguments.\n+\n 2005-04-17  Kazu Hirata  <kazu@cs.umass.edu>\n \n \tPR middle-end/21024"}, {"sha": "fdcbf1b8a08c104a50b303deb30c7793f32fbbfe", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae4797704c3d5ea49d10cfe65b19143edd525d5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae4797704c3d5ea49d10cfe65b19143edd525d5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=bae4797704c3d5ea49d10cfe65b19143edd525d5", "patch": "@@ -5732,22 +5732,24 @@ alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n    variable number of arguments.  */\n \n static void\n-alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum,\n-\t\t\t      enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t      tree type ATTRIBUTE_UNUSED,\n-\t\t\t      int *pretend_size, int no_rtl)\n+alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n+\t\t\t      tree type, int *pretend_size, int no_rtl)\n {\n+  CUMULATIVE_ARGS cum = *pcum;\n+\n+  /* Skip the current argument.  */\n+  FUNCTION_ARG_ADVANCE (cum, mode, type, 1);\n+\n #if TARGET_ABI_UNICOSMK\n   /* On Unicos/Mk, the standard subroutine __T3E_MISMATCH stores all register\n      arguments on the stack. Unfortunately, it doesn't always store the first\n      one (i.e. the one that arrives in $16 or $f16). This is not a problem\n      with stdargs as we always have at least one named argument there.  */\n-  int num_reg_words = pcum->num_reg_words;\n-  if (num_reg_words < 6)\n+  if (cum.num_reg_words < 6)\n     {\n       if (!no_rtl)\n \t{\n-\t  emit_insn (gen_umk_mismatch_args (GEN_INT (num_reg_words + 1)));\n+\t  emit_insn (gen_umk_mismatch_args (GEN_INT (cum.num_reg_words)));\n \t  emit_insn (gen_arg_home_umk ());\n \t}\n       *pretend_size = 0;\n@@ -5759,7 +5761,7 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum,\n      This is not only because we won't need the space, but because AP\n      includes the current_pretend_args_size and we don't want to mess up\n      any ap-relative addresses already made.  */\n-  if (pcum->num_args < 6)\n+  if (cum.num_args < 6)\n     {\n       if (!no_rtl)\n \t{\n@@ -5780,8 +5782,6 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum,\n      not the most efficient way to implement varargs with just one register\n      class, but it isn't worth doing anything more efficient in this rare\n      case.  */\n-  CUMULATIVE_ARGS cum = *pcum;\n-\n   if (cum >= 6)\n     return;\n \n@@ -5791,18 +5791,17 @@ alpha_setup_incoming_varargs (CUMULATIVE_ARGS *pcum,\n       rtx tmp;\n \n       tmp = gen_rtx_MEM (BLKmode,\n-\t\t         plus_constant (virtual_incoming_args_rtx,\n-\t\t\t\t        (cum + 6) * UNITS_PER_WORD));\n+\t\t\t plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\t(cum + 6) * UNITS_PER_WORD));\n       set_mem_alias_set (tmp, set);\n       move_block_from_reg (16 + cum, tmp, 6 - cum);\n \n       tmp = gen_rtx_MEM (BLKmode,\n-\t\t         plus_constant (virtual_incoming_args_rtx,\n-\t\t\t\t        cum * UNITS_PER_WORD));\n+\t\t\t plus_constant (virtual_incoming_args_rtx,\n+\t\t\t\t\tcum * UNITS_PER_WORD));\n       set_mem_alias_set (tmp, set);\n-      move_block_from_reg (16 + (TARGET_FPREGS ? 32 : 0) + cum, tmp,\n-\t\t\t   6 - cum);\n-     }\n+      move_block_from_reg (16 + cum + TARGET_FPREGS*32, tmp, 6 - cum);\n+    }\n   *pretend_size = 12 * UNITS_PER_WORD;\n #endif\n }\n@@ -5831,7 +5830,7 @@ alpha_va_start (tree valist, rtx nextarg ATTRIBUTE_UNUSED)\n      integer argument register; that futzes with pretend_args_size,\n      which changes the meaning of AP.  */\n \n-  if (NUM_ARGS <= 6)\n+  if (NUM_ARGS < 6)\n     offset = TARGET_ABI_OPEN_VMS ? UNITS_PER_WORD : 6 * UNITS_PER_WORD;\n   else\n     offset = -6 * UNITS_PER_WORD + current_function_pretend_args_size;"}]}