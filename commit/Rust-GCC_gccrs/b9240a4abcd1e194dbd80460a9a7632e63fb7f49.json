{"sha": "b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkyNDBhNGFiY2QxZTE5NGRiZDgwNDYwYTlhNzYzMmU2M2ZiN2Y0OQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:25Z"}, "message": "VAX: Actually produce QImode and HImode `ctz' operations\n\nThe middle end does not refer to `ctzqi2'/`ctzhi2' or `ffsqi2'/`ffshi2'\npatterns by name where `__builtin_ctz' or `__builtin_ffs' respectively\nis invoked for an argument of the QImode or HImode type, and instead it\nextends the data type before passing it to `ctzsi2' or `ffssi2'.\n\nAvoid the redundant operation and use a peephole2 to convert it to the\nright RTL expression that will collapse the two operations into a single\nmachine instruction instead unless we need the extended intermediate\nresult for another purpose.\n\n\tgcc/\n\t* config/vax/builtins.md: Add a peephole2 for QImode and HImode\n\t`ctz' operations.\n\t(any_extend): New code iterator.\n\n\tgcc/testsuite/\n\t* gcc.target/vax/ctzhi.c: New test.\n\t* gcc.target/vax/ctzqi.c: New test.\n\t* gcc.target/vax/ffshi.c: New test.\n\t* gcc.target/vax/ffsqi.c: New test.", "tree": {"sha": "325563920c978c0f1be2eec6fcf273c8d6336810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/325563920c978c0f1be2eec6fcf273c8d6336810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/comments", "author": null, "committer": null, "parents": [{"sha": "273ffa3a6fef82738dd86522374fae69ab0e2651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273ffa3a6fef82738dd86522374fae69ab0e2651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273ffa3a6fef82738dd86522374fae69ab0e2651"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "e96ac3f52abd62f97979a829a448535b4576346b", "filename": "gcc/config/vax/builtins.md", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Fconfig%2Fvax%2Fbuiltins.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fbuiltins.md?ref=b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "patch": "@@ -29,6 +29,8 @@\n (define_int_iterator bit [0 1])\n (define_int_attr ccss [(0 \"cc\") (1 \"ss\")])\n \n+(define_code_iterator any_extend [sign_extend zero_extend])\n+\n (define_expand \"ffs<mode>2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n \t(ffs:SI (match_operand:VAXint 1 \"general_operand\" \"\")))]\n@@ -57,6 +59,26 @@\n   \"\"\n   \"ffs $0,$<width>,%1,%0\")\n \n+;; Our FFS hardware instruction supports any field width,\n+;; so handle narrower inputs directly as well.\n+(define_peephole2\n+  [(set (match_operand:SI 0 \"register_operand\")\n+        (any_extend:SI (match_operand:VAXintQH 1 \"general_operand\")))\n+   (parallel\n+     [(set (match_operand:SI 2 \"nonimmediate_operand\")\n+\t   (ctz:SI (match_dup 0)))\n+      (set (cc0)\n+\t   (compare (match_dup 2)\n+\t\t    (const_int 0)))])]\n+  \"rtx_equal_p (operands[0], operands[2]) || peep2_reg_dead_p (2, operands[0])\"\n+  [(parallel\n+     [(set (match_dup 2)\n+\t   (ctz:SI (match_dup 1)))\n+      (set (cc0)\n+\t   (compare (match_dup 1)\n+\t\t    (const_int 0)))])]\n+  \"\")\n+\n (define_expand \"sync_lock_test_and_set<mode>\"\n   [(match_operand:VAXint 0 \"nonimmediate_operand\" \"=&g\")\n    (match_operand:VAXint 1 \"memory_operand\" \"+m\")"}, {"sha": "fcc9f06f7d2245663a6bfa91d0c40d6263610171", "filename": "gcc/testsuite/gcc.target/vax/ctzhi.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzhi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzhi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzhi.c?ref=b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (HI))) int_t;\n+\n+int\n+ctzhi (int_t *x)\n+{\n+  return __builtin_ctz (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$16,*4(%ap),%r0\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\tffs \\\\\\$0,\\\\\\$16,\" } } */"}, {"sha": "067334b09e218ab7ed9283811a1a5704339ebb9f", "filename": "gcc/testsuite/gcc.target/vax/ctzqi.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fctzqi.c?ref=b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef unsigned int __attribute__ ((mode (QI))) int_t;\n+\n+int\n+ctzqi (int_t *x)\n+{\n+  return __builtin_ctz (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$8,*4(%ap),%r0\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\tffs \\\\\\$0,\\\\\\$8,\" } } */"}, {"sha": "db592fb572457431ab2cc4ffccd4854bd9ee500f", "filename": "gcc/testsuite/gcc.target/vax/ffshi.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffshi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffshi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffshi.c?ref=b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (HI))) int_t;\n+\n+int\n+ffshi (int_t *x)\n+{\n+  return __builtin_ffs (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$16,*4(%ap),%r0\n+\tjneq .L2\n+\tmnegl $1,%r0\n+.L2:\n+\tincl %r0\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\tffs \\\\\\$0,\\\\\\$16,\" } } */"}, {"sha": "ebcd9460754741e732b5d7851b7275f2c5eddd90", "filename": "gcc/testsuite/gcc.target/vax/ffsqi.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffsqi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9240a4abcd1e194dbd80460a9a7632e63fb7f49/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffsqi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fffsqi.c?ref=b9240a4abcd1e194dbd80460a9a7632e63fb7f49", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-rtl-peephole2\" } */\n+/* { dg-skip-if \"code quality test\" { *-*-* } { \"-O0\" \"-O1\" } { \"\" } } */\n+\n+typedef int __attribute__ ((mode (QI))) int_t;\n+\n+int\n+ffsqi (int_t *x)\n+{\n+  return __builtin_ffs (*x);\n+}\n+\n+/* Expect assembly like:\n+\n+\tffs $0,$8,*4(%ap),%r0\n+\tjneq .L2\n+\tmnegl $1,%r0\n+.L2:\n+\tincl %r0\n+\n+ */\n+\n+/* { dg-final { scan-rtl-dump-times \"Splitting with gen_peephole2\" 1 \"peephole2\" } } */\n+/* { dg-final { scan-assembler \"\\tffs \\\\\\$0,\\\\\\$8,\" } } */"}]}