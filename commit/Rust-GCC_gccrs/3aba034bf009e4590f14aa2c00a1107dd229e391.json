{"sha": "3aba034bf009e4590f14aa2c00a1107dd229e391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiYTAzNGJmMDA5ZTQ1OTBmMTRhYTJjMDBhMTEwN2RkMjI5ZTM5MQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-08-14T22:17:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1996-08-14T22:17:25Z"}, "message": "pa.c (override_options): Treat TARGET_FAST_INDIRECT_CALLS just like TARGET_NO_SPACE_REGS.\n\n        * pa/pa.c (override_options): Treat TARGET_FAST_INDIRECT_CALLS\n        just like TARGET_NO_SPACE_REGS.\n        (output_millicode_call): Likewise.\n        * pa/pa.h (TARGET_FAST_INDIRECT_CALLS): Define.\n        (TARGET_SWITCHES): Add \"fast-indirect-calls\".\n        * pa/pa.md: Treat TARGET_FAST_INDIRECT_CALLS just like\n        TARGET_NO_SPACE_REGS in various call/millicode call patterns.\n\nFrom-SVN: r12640", "tree": {"sha": "8347de7769d33b88d05469fce8585eb033de070f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8347de7769d33b88d05469fce8585eb033de070f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aba034bf009e4590f14aa2c00a1107dd229e391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aba034bf009e4590f14aa2c00a1107dd229e391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aba034bf009e4590f14aa2c00a1107dd229e391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aba034bf009e4590f14aa2c00a1107dd229e391/comments", "author": null, "committer": null, "parents": [{"sha": "7cda284aaf3fbe73e4400027adb9bb0c6260d757", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cda284aaf3fbe73e4400027adb9bb0c6260d757", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cda284aaf3fbe73e4400027adb9bb0c6260d757"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "8adf58625f017fccde7f68fbb02cdd47840d62a1", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3aba034bf009e4590f14aa2c00a1107dd229e391", "patch": "@@ -116,7 +116,7 @@ override_options ()\n       warning (\"PIC code generation is not supported in the portable runtime model\\n\");\n     }\n \n-  if (flag_pic && TARGET_NO_SPACE_REGS)\n+  if (flag_pic && (TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS))\n    {\n       warning (\"PIC code generation is not compatable with fast indirect calls\\n\");\n    }\n@@ -4550,7 +4550,7 @@ output_millicode_call (insn, call_dest)\n \n       /* If we're allowed to use be/ble instructions, then this is the\n \t best sequence to use for a long millicode call.  */\n-      if (TARGET_NO_SPACE_REGS\n+      if (TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\n \t  || ! (flag_pic  || TARGET_PORTABLE_RUNTIME))\n \t{\n \t  xoperands[0] = call_dest;"}, {"sha": "f76468eef29aecbe71d1a93352ad47c7bd342970", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3aba034bf009e4590f14aa2c00a1107dd229e391", "patch": "@@ -109,6 +109,9 @@ extern int target_flags;\n    in shared libraries on hpux10.  */\n #define TARGET_LONG_LOAD_STORE (target_flags & 512)\n \n+/* Use a faster sequence for indirect calls.  */\n+#define TARGET_FAST_INDIRECT_CALLS (target_flags & 1024)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -138,6 +141,8 @@ extern int target_flags;\n    {\"no-soft-float\", -256},\t\\\n    {\"long-load-store\", 512},\t\\\n    {\"no-long-load-store\", -512},\\\n+   {\"fast-indirect-calls\", 1024},\\\n+   {\"no-fast-indirect-calls\", -1024},\\\n    {\"linker-opt\", 0},\t\t\\\n    { \"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT}}\n "}, {"sha": "7a2dd8f1655ef6853019ec62db4f2630799b191a", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aba034bf009e4590f14aa2c00a1107dd229e391/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=3aba034bf009e4590f14aa2c00a1107dd229e391", "patch": "@@ -3123,7 +3123,7 @@\n             (const_int 4)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 8)\n \n@@ -3177,7 +3177,7 @@\n             (const_int 4)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 8)\n \n@@ -3230,7 +3230,7 @@\n             (const_int 4)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 8)\n \n@@ -3280,7 +3280,7 @@\n             (const_int 4)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 8)\n \n@@ -3330,7 +3330,7 @@\n             (const_int 4)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 8)\n \n@@ -4145,7 +4145,7 @@\n   rtx xoperands[2];\n \n   /* First the special case for kernels, level 0 systems, etc.  */\n-  if (TARGET_NO_SPACE_REGS)\n+  if (TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS)\n     return \\\"ble 0(%%sr4,%%r22)\\;copy %%r31,%%r2\\\";\n \n   /* Now the normal case -- we can reach $$dyncall directly or\n@@ -4181,7 +4181,7 @@\n    (set (attr \"length\")\n      (cond [\n ;; First NO_SPACE_REGS\n-\t    (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+\t    (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n \t\t(const_int 0))\n \t    (const_int 8)\n \n@@ -4305,7 +4305,7 @@\n   rtx xoperands[2];\n \n   /* First the special case for kernels, level 0 systems, etc.  */\n-  if (TARGET_NO_SPACE_REGS)\n+  if (TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS)\n     return \\\"ble 0(%%sr4,%%r22)\\;copy %%r31,%%r2\\\";\n \n   /* Now the normal case -- we can reach $$dyncall directly or\n@@ -4341,7 +4341,7 @@\n    (set (attr \"length\")\n      (cond [\n ;; First NO_SPACE_REGS\n-\t    (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+\t    (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n \t\t(const_int 0))\n \t    (const_int 8)\n \n@@ -5214,7 +5214,7 @@\n             (const_int 28)\n \n ;; NO_SPACE_REGS\n-            (ne (symbol_ref \"TARGET_NO_SPACE_REGS\")\n+            (ne (symbol_ref \"TARGET_NO_SPACE_REGS || TARGET_FAST_INDIRECT_CALLS\")\n                 (const_int 0))\n             (const_int 32)\n "}]}