{"sha": "705966423ac47536ac254d5752d40914e70ad793", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzA1OTY2NDIzYWM0NzUzNmFjMjU0ZDU3NTJkNDA5MTRlNzBhZDc5Mw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-03-16T16:20:12Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-03-16T16:20:12Z"}, "message": "re PR tree-optimization/20490 (ICE: verify_stmts failed. (with -O -ftree-pre))\n\n2005-03-16  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/20940\n\n\t* tree-ssa-pre.c (create_expression_by_pieces): Use\n\tforce_gimple_operand on result of fold.\n\nFrom-SVN: r96560", "tree": {"sha": "603a984e5a480221db03c600f853bdf7fde01ef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/603a984e5a480221db03c600f853bdf7fde01ef4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/705966423ac47536ac254d5752d40914e70ad793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705966423ac47536ac254d5752d40914e70ad793", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705966423ac47536ac254d5752d40914e70ad793", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705966423ac47536ac254d5752d40914e70ad793/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef6e9bc04fcb3bb4515ca67591177c6c8c04d236", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6e9bc04fcb3bb4515ca67591177c6c8c04d236", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6e9bc04fcb3bb4515ca67591177c6c8c04d236"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "e1fffe15bcff5e52b3714ce6e47af0d73040b74a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705966423ac47536ac254d5752d40914e70ad793/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705966423ac47536ac254d5752d40914e70ad793/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=705966423ac47536ac254d5752d40914e70ad793", "patch": "@@ -1,3 +1,10 @@\n+2005-03-16  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tFix PR tree-optimization/20940\n+\t\n+\t* tree-ssa-pre.c (create_expression_by_pieces): Use\n+\tforce_gimple_operand on result of fold.\n+\n 2005-03-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/i386/emmintrin.h (_mm_extract_epi16): Correct the number"}, {"sha": "8edc35e8a45aa167137214739982c980b654d5fe", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr20940.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705966423ac47536ac254d5752d40914e70ad793/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20940.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705966423ac47536ac254d5752d40914e70ad793/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20940.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr20940.c?ref=705966423ac47536ac254d5752d40914e70ad793", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-pre\" } */\n+static int  a;\n+static int  b;\n+\n+typedef int gint;\n+\n+int blah ()\n+{\n+\tgint x = a;\n+\tgint y = b;\n+\n+\tx *= (x < 0) ? -1 : 0;\n+\ty *= (y < 0) ? -1 : 0;\n+\n+\treturn (y * x);\n+\n+}\n+\n+"}, {"sha": "161d7e5a12c7481b5543ca34bca246ad7037ffad", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/705966423ac47536ac254d5752d40914e70ad793/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/705966423ac47536ac254d5752d40914e70ad793/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=705966423ac47536ac254d5752d40914e70ad793", "patch": "@@ -1317,16 +1317,25 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     case tcc_binary:\n       {\n \ttree_stmt_iterator tsi;\n+\ttree forced_stmts;\n \ttree genop1, genop2;\n \ttree temp;\n+\ttree folded;\n \ttree op1 = TREE_OPERAND (expr, 0);\n \ttree op2 = TREE_OPERAND (expr, 1);\n \tgenop1 = find_or_generate_expression (block, op1, stmts);\n \tgenop2 = find_or_generate_expression (block, op2, stmts);\n \ttemp = create_tmp_var (TREE_TYPE (expr), \"pretmp\");\n \tadd_referenced_tmp_var (temp);\n-\tnewexpr = fold (build (TREE_CODE (expr), TREE_TYPE (expr), \n-\t\t\t       genop1, genop2));\n+\t\n+\tfolded = fold (build (TREE_CODE (expr), TREE_TYPE (expr), \n+\t\t\t      genop1, genop2));\n+\tnewexpr = force_gimple_operand (folded, &forced_stmts, false, NULL);\n+\tif (forced_stmts)\n+\t  {\n+\t    tsi = tsi_last (stmts);\n+\t    tsi_link_after (&tsi, forced_stmts, TSI_CONTINUE_LINKING);\n+\t  }\n \tnewexpr = build (MODIFY_EXPR, TREE_TYPE (expr),\n \t\t\t temp, newexpr);\n \tNECESSARY (newexpr) = 0;\n@@ -1341,14 +1350,22 @@ create_expression_by_pieces (basic_block block, tree expr, tree stmts)\n     case tcc_unary:\n       {\n \ttree_stmt_iterator tsi;\n+\ttree forced_stmts;\n \ttree genop1;\n \ttree temp;\n+\ttree folded;\n \ttree op1 = TREE_OPERAND (expr, 0);\n \tgenop1 = find_or_generate_expression (block, op1, stmts);\n \ttemp = create_tmp_var (TREE_TYPE (expr), \"pretmp\");\n \tadd_referenced_tmp_var (temp);\n-\tnewexpr = fold (build (TREE_CODE (expr), TREE_TYPE (expr), \n-\t\t\t       genop1));\n+\tfolded = fold (build (TREE_CODE (expr), TREE_TYPE (expr), \n+\t\t\t      genop1));\n+\tnewexpr = force_gimple_operand (folded, &forced_stmts, false, NULL);\n+\tif (forced_stmts)\n+\t  {\n+\t    tsi = tsi_last (stmts);\n+\t    tsi_link_after (&tsi, forced_stmts, TSI_CONTINUE_LINKING);\n+\t  }\n \tnewexpr = build (MODIFY_EXPR, TREE_TYPE (expr),\n \t\t\t temp, newexpr);\n \tname = make_ssa_name (temp, newexpr);"}]}