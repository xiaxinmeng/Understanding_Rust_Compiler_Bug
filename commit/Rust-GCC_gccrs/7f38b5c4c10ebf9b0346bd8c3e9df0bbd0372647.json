{"sha": "7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647", "node_id": "C_kwDOANBUbNoAKDdmMzhiNWM0YzEwZWJmOWIwMzQ2YmQ4YzNlOWRmMGJiZDAzNzI2NDc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-30T12:36:30Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-03T14:43:49Z"}, "message": "libstdc++: Enable std::bitset<N>::bitset(const char*) for freestanding\n\nThe std::bitset constructor from a character string is specified in\nterms of std::basic_string and std::char_traits, but doesn't need to be.\nThis makes it available for freestanding.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/bitset (bitset(const C*, size_type n, C, C))\n\t[!_GLIBCXX_HOSTED]: Remove std::basic_string dependency.\n\t(_M_copy_from_ptr) [!_GLIBCXX_HOSTED]: Abort instead of\n\tthrowing.", "tree": {"sha": "0497b7cbb745edd3d86beed2bd84e9b1dd4226b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0497b7cbb745edd3d86beed2bd84e9b1dd4226b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54fd7d81709c5f50537128d3978b4c642b68a711", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fd7d81709c5f50537128d3978b4c642b68a711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fd7d81709c5f50537128d3978b4c642b68a711"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "afabeb4ba019e4092b06d74a73ba8426d3f60497", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 50, "deletions": 12, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=7f38b5c4c10ebf9b0346bd8c3e9df0bbd0372647", "patch": "@@ -697,7 +697,38 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       _S_do_sanitize_val(unsigned long long __val)\n       { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }\n     };\n-#endif\n+\n+  namespace __bitset\n+  {\n+#if _GLIBCXX_HOSTED\n+    template<typename _CharT>\n+      using __string = std::basic_string<_CharT>;\n+#else\n+    template<typename _CharT>\n+      struct __string\n+      {\n+\tusing size_type = size_t;\n+\tstatic constexpr size_type npos = size_type(-1);\n+\n+\tstruct traits_type\n+\t{\n+\t  static _GLIBCXX14_CONSTEXPR size_t\n+\t  length(const _CharT* __s) noexcept\n+\t  {\n+\t    size_t __n = 0;\n+\t    while (__s[__n])\n+\t      __n++;\n+\t    return __n;\n+\t  }\n+\n+\t  static constexpr bool\n+\t  eq(_CharT __l, _CharT __r) noexcept\n+\t  { return __l == __r; }\n+\t};\n+      };\n+#endif // HOSTED\n+  } // namespace __bitset\n+#endif // C++11\n \n   /**\n    *  @brief The %bitset class represents a @e fixed-size sequence of bits.\n@@ -963,6 +994,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_check_initial_position(__s, __position);\n \t  _M_copy_from_string(__s, __position, __n, __zero, __one);\n \t}\n+#endif // HOSTED\n \n #if __cplusplus >= 201103L\n       /**\n@@ -978,23 +1010,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t[[__gnu__::__nonnull__]]\n \t_GLIBCXX23_CONSTEXPR\n         explicit\n-        bitset(const _CharT* __str,\n-\t       typename std::basic_string<_CharT>::size_type __n\n-\t       = std::basic_string<_CharT>::npos,\n+\tbitset(const _CharT* __str,\n+\t       typename __bitset::__string<_CharT>::size_type __n\n+\t\t = __bitset::__string<_CharT>::npos,\n \t       _CharT __zero = _CharT('0'), _CharT __one = _CharT('1'))\n         : _Base()\n         {\n+#if _GLIBCXX_HOSTED\n \t  if (!__str)\n \t    __throw_logic_error(__N(\"bitset::bitset(const _CharT*, ...)\"));\n+#endif\n+\t  using _Traits = typename __bitset::__string<_CharT>::traits_type;\n \n-\t  if (__n == std::basic_string<_CharT>::npos)\n-\t    __n = std::char_traits<_CharT>::length(__str);\n-\t  _M_copy_from_ptr<_CharT, std::char_traits<_CharT>>(__str, __n, 0,\n-\t\t\t\t\t\t\t     __n, __zero,\n-\t\t\t\t\t\t\t     __one);\n+\t  if (__n == __bitset::__string<_CharT>::npos)\n+\t    __n = _Traits::length(__str);\n+\t  _M_copy_from_ptr<_CharT, _Traits>(__str, __n, 0, __n, __zero, __one);\n \t}\n #endif // C++11\n-#endif // HOSTED\n \n       // 23.3.5.2 bitset operations:\n       ///@{\n@@ -1463,7 +1495,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n     };\n \n-#if _GLIBCXX_HOSTED\n   // Definitions of non-inline member functions.\n   template<size_t _Nb>\n     template<class _CharT, class _Traits>\n@@ -1483,10 +1514,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t    else if (_Traits::eq(__c, __one))\n \t      _Unchecked_set(__i - 1);\n \t    else\n-\t      __throw_invalid_argument(__N(\"bitset::_M_copy_from_ptr\"));\n+\t      {\n+#if _GLIBCXX_HOSTED\n+\t\t__throw_invalid_argument(__N(\"bitset::_M_copy_from_ptr\"));\n+#else\n+\t\t__builtin_abort();\n+#endif\n+\t      }\n \t  }\n       }\n \n+#if _GLIBCXX_HOSTED\n   template<size_t _Nb>\n     template<class _CharT, class _Traits, class _Alloc>\n       _GLIBCXX23_CONSTEXPR"}]}