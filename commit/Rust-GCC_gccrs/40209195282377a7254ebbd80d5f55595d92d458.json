{"sha": "40209195282377a7254ebbd80d5f55595d92d458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyMDkxOTUyODIzNzdhNzI1NGViYmQ4MGQ1ZjU1NTk1ZDkyZDQ1OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-08-01T00:37:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-08-01T00:37:40Z"}, "message": "Makefile.in (bubblestrap): Don't require a previous full bootstrap.\n\n        * Makefile.in (bubblestrap): Don't require a previous full\n        bootstrap.\n\n        * expr.c (mostly_zeros_p): No longer static.\n        * tree.h: Declare it.\n        * stmt.c (resolve_asm_operand_names): Don't copy the pattern\n        unless we need to do substitutions.\n\nFrom-SVN: r70031", "tree": {"sha": "79a4e2f422d448416597a92bb623f91759bfe6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79a4e2f422d448416597a92bb623f91759bfe6b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40209195282377a7254ebbd80d5f55595d92d458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40209195282377a7254ebbd80d5f55595d92d458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40209195282377a7254ebbd80d5f55595d92d458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40209195282377a7254ebbd80d5f55595d92d458/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2598550fa6d3583ce066a9aaf5abfa4acd186077", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2598550fa6d3583ce066a9aaf5abfa4acd186077", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2598550fa6d3583ce066a9aaf5abfa4acd186077"}], "stats": {"total": 104, "additions": 72, "deletions": 32}, "files": [{"sha": "a4b2a0252ffea690eaf3f0a3aa8a36b556c47d2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40209195282377a7254ebbd80d5f55595d92d458/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40209195282377a7254ebbd80d5f55595d92d458/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40209195282377a7254ebbd80d5f55595d92d458", "patch": "@@ -1,3 +1,13 @@\n+2003-07-31  Jason Merrill  <jason@redhat.com>\n+\n+\t* Makefile.in (bubblestrap): Don't require a previous full\n+\tbootstrap.\n+\n+\t* expr.c (mostly_zeros_p): No longer static.\n+\t* tree.h: Declare it.\n+\t* stmt.c (resolve_asm_operand_names): Don't copy the pattern\n+\tunless we need to do substitutions.\n+\n 2003-07-31  Roger Sayle  <roger@eyesopen.com>\n \n \t* fold-const.c (fold <MULT_EXPR>): Optimize both x*pow(x,c) and"}, {"sha": "afe1b5ab9e6161041291500aca1f77c3a66b951e", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40209195282377a7254ebbd80d5f55595d92d458/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40209195282377a7254ebbd80d5f55595d92d458/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=40209195282377a7254ebbd80d5f55595d92d458", "patch": "@@ -3647,18 +3647,26 @@ restageprofile: unstageprofile\n restagefeedback: unstagefeedback\n \t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stagefeedback_build\n \n+# Bubble up a bugfix through all the stages.  Primarily useful for fixing\n+# bugs that cause the compiler to crash while building stage 2.\n bubblestrap:\n-\tif test -f stage3_build; then true; else \\\n-\t  echo; echo You must \\\"make bootstrap\\\" first.; \\\n-\t  exit 1; \\\n+\tif test -f stage_last; then \\\n+\t  LAST=`cat stage_last|sed -e 's/_build//'`; \\\n+\t  if test \"$$LAST\" != \"stage1\"; then \\\n+\t    $(MAKE) $$LAST; \\\n+\t    $(STAMP) $${LAST}_copy; \\\n+\t  fi; \\\n+\tfi\n+\tif test -f stage1_copy; then $(MAKE) unstage1; fi\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage1_copy\n+\tif test -f stage2_copy; then $(MAKE) unstage2; fi\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage2_copy\n+\tif test -f stage3_copy; then $(MAKE) unstage3; fi\n+\t$(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage3_build\n+\tif test -f stage4_copy; then \\\n+\t  $(MAKE) stage3_copy; $(MAKE) unstage4; \\\n+\t  $(MAKE) LANGUAGES=\"$(LANGUAGES)\" stage4_build || exit 1; \\\n \tfi\n-\tfor i in stage3 \\\n-\t\tunstage1 stage1_build stage1_copy \\\n-\t\tunstage2 stage2_build stage2_copy \\\n-\t\tunstage3 stage3_build ; \\\n-\tdo \\\n-\t  $(MAKE) LANGUAGES=\"$(LANGUAGES)\" $$i || exit 1 ; \\\n-\tdone\n \n quickstrap:\n \tif test -f stage_last ; then \\"}, {"sha": "47c4f92adac99c21974f84c5e59686973f3c2614", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=40209195282377a7254ebbd80d5f55595d92d458", "patch": "@@ -151,7 +151,6 @@ static tree clear_storage_libcall_fn (int);\n static rtx compress_float_constant (rtx, rtx);\n static rtx get_subtarget (rtx);\n static int is_zeros_p (tree);\n-static int mostly_zeros_p (tree);\n static void store_constructor_field (rtx, unsigned HOST_WIDE_INT,\n \t\t\t\t     HOST_WIDE_INT, enum machine_mode,\n \t\t\t\t     tree, tree, int, int);\n@@ -4766,7 +4765,7 @@ store_expr (tree exp, rtx target, int want_value)\n     return target;\n }\n \f\n-/* Return 1 if EXP just contains zeros.  */\n+/* Return 1 if EXP just contains zeros.  FIXME merge with initializer_zerop.  */\n \n static int\n is_zeros_p (tree exp)\n@@ -4815,7 +4814,7 @@ is_zeros_p (tree exp)\n \n /* Return 1 if EXP contains mostly (3/4)  zeros.  */\n \n-static int\n+int\n mostly_zeros_p (tree exp)\n {\n   if (TREE_CODE (exp) == CONSTRUCTOR)"}, {"sha": "81661873c2c92a6610eed84024728260fa88c900", "filename": "gcc/stmt.c", "status": "modified", "additions": 37, "deletions": 19, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=40209195282377a7254ebbd80d5f55595d92d458", "patch": "@@ -1992,13 +1992,14 @@ resolve_asm_operand_names (tree string, tree outputs, tree inputs)\n {\n   char *buffer;\n   char *p;\n+  const char *c;\n   tree t;\n \n   /* Substitute [<name>] in input constraint strings.  There should be no\n      named operands in output constraints.  */\n   for (t = inputs; t ; t = TREE_CHAIN (t))\n     {\n-      const char *c = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n+      c = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n       if (strchr (c, '[') != NULL)\n \t{\n \t  p = buffer = xstrdup (c);\n@@ -2010,31 +2011,48 @@ resolve_asm_operand_names (tree string, tree outputs, tree inputs)\n \t}\n     }\n \n-  if (strchr (TREE_STRING_POINTER (string), '[') == NULL)\n-    return string;\n-\n-  /* Assume that we will not need extra space to perform the substitution.\n-     This because we get to remove '[' and ']', which means we cannot have\n-     a problem until we have more than 999 operands.  */\n-\n-  p = buffer = xstrdup (TREE_STRING_POINTER (string));\n-  while ((p = strchr (p, '%')) != NULL)\n+  /* Now check for any needed substitutions in the template.  */\n+  c = TREE_STRING_POINTER (string);\n+  while ((c = strchr (c, '%')) != NULL)\n     {\n-      if (p[1] == '[')\n-\tp += 1;\n-      else if (ISALPHA (p[1]) && p[2] == '[')\n-\tp += 2;\n+      if (c[1] == '[')\n+\tbreak;\n+      else if (ISALPHA (c[1]) && c[2] == '[')\n+\tbreak;\n       else\n \t{\n-\t  p += 1;\n+\t  c += 1;\n \t  continue;\n \t}\n-\n-      p = resolve_operand_name_1 (p, outputs, inputs);\n     }\n \n-  string = build_string (strlen (buffer), buffer);\n-  free (buffer);\n+  if (c)\n+    {\n+      /* OK, we need to make a copy so we can perform the substitutions.\n+\t Assume that we will not need extra space--we get to remove '['\n+\t and ']', which means we cannot have a problem until we have more\n+\t than 999 operands.  */\n+      buffer = xstrdup (TREE_STRING_POINTER (string));\n+      p = buffer + (c - TREE_STRING_POINTER (string));\n+      \n+      while ((p = strchr (p, '%')) != NULL)\n+\t{\n+\t  if (p[1] == '[')\n+\t    p += 1;\n+\t  else if (ISALPHA (p[1]) && p[2] == '[')\n+\t    p += 2;\n+\t  else\n+\t    {\n+\t      p += 1;\n+\t      continue;\n+\t    }\n+\n+\t  p = resolve_operand_name_1 (p, outputs, inputs);\n+\t}\n+\n+      string = build_string (strlen (buffer), buffer);\n+      free (buffer);\n+    }\n \n   return string;\n }"}, {"sha": "c8a71e53796d1110b6b07faa551716c71bb80946", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40209195282377a7254ebbd80d5f55595d92d458/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=40209195282377a7254ebbd80d5f55595d92d458", "patch": "@@ -2445,6 +2445,11 @@ extern int fields_length (tree);\n \n extern bool initializer_zerop (tree);\n \n+/* Given an initializer INIT, return TRUE if INIT is at least 3/4 zeros.\n+   Otherwise return FALSE.  */\n+\n+extern int mostly_zeros_p (tree);\n+\n /* integer_zerop (tree x) is nonzero if X is an integer constant of value 0 */\n \n extern int integer_zerop (tree);"}]}