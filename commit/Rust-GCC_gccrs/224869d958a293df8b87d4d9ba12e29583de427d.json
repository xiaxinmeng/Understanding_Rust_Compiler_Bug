{"sha": "224869d958a293df8b87d4d9ba12e29583de427d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0ODY5ZDk1OGEyOTNkZjhiODdkNGQ5YmExMmUyOTU4M2RlNDI3ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2006-10-03T16:25:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-10-03T16:25:00Z"}, "message": "builtins.c (expand_builtin_return_addr): Deal with FRAME_ADDR_RTX.\n\n\t* builtins.c (expand_builtin_return_addr): Deal with FRAME_ADDR_RTX.\n\t* doc/tm.texi (Basic Stack Layout): Document FRAME_ADDR_RTX.\n\t* config/sparc/sparc.h (FRAME_ADDR_RTX): Define.\n\nFrom-SVN: r117403", "tree": {"sha": "7524af2493029b414c53a5f841468ff3297a46a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7524af2493029b414c53a5f841468ff3297a46a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/224869d958a293df8b87d4d9ba12e29583de427d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224869d958a293df8b87d4d9ba12e29583de427d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224869d958a293df8b87d4d9ba12e29583de427d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224869d958a293df8b87d4d9ba12e29583de427d/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0d1d9711d0186439c7c5491b3d9f90d8f4816fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0d1d9711d0186439c7c5491b3d9f90d8f4816fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0d1d9711d0186439c7c5491b3d9f90d8f4816fc"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "260fc34977803c1cc2ca9e8c39e9ff11d82780f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=224869d958a293df8b87d4d9ba12e29583de427d", "patch": "@@ -1,3 +1,9 @@\n+2006-10-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* builtins.c (expand_builtin_return_addr): Deal with FRAME_ADDR_RTX.\n+\t* doc/tm.texi (Basic Stack Layout): Document FRAME_ADDR_RTX.\n+\t* config/sparc/sparc.h (FRAME_ADDR_RTX): Define.\n+\n 2006-10-02  Jack Howarth  <howarth@bromo.med.uc.edu>\n \n \t* unwind-dw2-fde-darwin.c (getsectdatafromheader_64): Fix first"}, {"sha": "2c81983f3d31572d7cbd89e2ce08a473fc4933e3", "filename": "gcc/builtins.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=224869d958a293df8b87d4d9ba12e29583de427d", "patch": "@@ -558,14 +558,14 @@ expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n #endif\n \n   /* Some machines need special handling before we can access\n-     arbitrary frames.  For example, on the sparc, we must first flush\n+     arbitrary frames.  For example, on the SPARC, we must first flush\n      all register windows to the stack.  */\n #ifdef SETUP_FRAME_ADDRESSES\n   if (count > 0)\n     SETUP_FRAME_ADDRESSES ();\n #endif\n \n-  /* On the sparc, the return address is not in the frame, it is in a\n+  /* On the SPARC, the return address is not in the frame, it is in a\n      register.  There is no way to access it off of the current frame\n      pointer, but it can be accessed off the previous frame pointer by\n      reading the value from the register window save area.  */\n@@ -587,12 +587,16 @@ expand_builtin_return_addr (enum built_in_function fndecl_code, int count)\n       tem = copy_to_reg (tem);\n     }\n \n-  /* For __builtin_frame_address, return what we've got.  */\n+  /* For __builtin_frame_address, return what we've got.  But, on\n+     the SPARC for example, we may have to add a bias.  */\n   if (fndecl_code == BUILT_IN_FRAME_ADDRESS)\n+#ifdef FRAME_ADDR_RTX\n+    return FRAME_ADDR_RTX (tem);\n+#else\n     return tem;\n+#endif\n \n-  /* For __builtin_return_address, Get the return address from that\n-     frame.  */\n+  /* For __builtin_return_address, get the return address from that frame.  */\n #ifdef RETURN_ADDR_RTX\n   tem = RETURN_ADDR_RTX (count, tem);\n #else"}, {"sha": "8a2121cf27c42dcbd86712b29c56032b23a90676", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=224869d958a293df8b87d4d9ba12e29583de427d", "patch": "@@ -1701,6 +1701,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define DYNAMIC_CHAIN_ADDRESS(frame)\t\\\n   plus_constant (frame, 14 * UNITS_PER_WORD + SPARC_STACK_BIAS)\n \n+/* Given an rtx for the frame pointer,\n+   return an rtx for the address of the frame.  */\n+#define FRAME_ADDR_RTX(frame) plus_constant (frame, SPARC_STACK_BIAS)\n+\n /* The return address isn't on the stack, it is in a register, so we can't\n    access it from the current frame pointer.  We can access it from the\n    previous frame pointer though by reading a value from the register window"}, {"sha": "cc448bcc687a05b344b487549fe92945e372f043", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/224869d958a293df8b87d4d9ba12e29583de427d/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=224869d958a293df8b87d4d9ba12e29583de427d", "patch": "@@ -2995,6 +2995,14 @@ machines.  One reason you may need to define this target hook is if\n @code{hard_frame_pointer_rtx} is the appropriate value on your machine.\n @end deftypefn\n \n+@defmac FRAME_ADDR_RTX (@var{frameaddr})\n+A C expression whose value is RTL representing the value of the frame\n+address for the current frame.  @var{frameaddr} is the frame pointer\n+of the current frame.  This is used for __builtin_frame_address.\n+You need only define this macro if the frame address is not the same\n+as the frame pointer.  Most machines do not need to define it.\n+@end defmac\n+\n @defmac RETURN_ADDR_RTX (@var{count}, @var{frameaddr})\n A C expression whose value is RTL representing the value of the return\n address for the frame @var{count} steps up from the current frame, after"}]}