{"sha": "e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhNjY2MWI3OTI5NDdjMGYwOWQ2YmRiM2I5ZWU5ODcyM2IyOTkzZg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-17T14:15:24Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-05-17T14:15:24Z"}, "message": "iso-fortran-env.def: Define INT8, INT16, INT32, INT64, REAL32, REAL64 and REAL128.\n\n\t* iso-fortran-env.def: Define INT8, INT16, INT32, INT64, REAL32,\n\tREAL64 and REAL128.\n\t* gfortran.h (gfc_get_int_kind_from_width_isofortranenv,\n\tgfc_get_real_kind_from_width_isofortranenv): New prototypes.\n\t* iso-c-binding.def: Update definitions for the INT*_T,\n\tINT_LEAST*_T and INT_FAST*_T named parameters.\n\t* trans-types.c (get_typenode_from_name, get_int_kind_from_name,\n\tgfc_get_real_kind_from_width_isofortranenv): New functions.\n\n\t* gfortran.dg/c_kind_int128_test1.f03: Also test C_INT_FAST128_T.\n\t* gfortran.dg/c_kind_int128_test2.f03: Update comment.\n\t* gfortran.dg/c_kind_params.f90: Also test int_fast*_t.\n\t* gfortran.dg/c_kinds.c: Add int_fast*_t arguments.\n\nFrom-SVN: r147635", "tree": {"sha": "c7f85acefa293bc83adb36c5df2e6e8a165c5eb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f85acefa293bc83adb36c5df2e6e8a165c5eb0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "965cc3c3aad4e7b106debe7c3870ef1d537aad8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/965cc3c3aad4e7b106debe7c3870ef1d537aad8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/965cc3c3aad4e7b106debe7c3870ef1d537aad8f"}], "stats": {"total": 221, "additions": 174, "deletions": 47}, "files": [{"sha": "a9409f3640f7bbc5a15d4f2c0a8124879fb4755e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -1,3 +1,14 @@\n+2009-05-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* iso-fortran-env.def: Define INT8, INT16, INT32, INT64, REAL32,\n+\tREAL64 and REAL128.\n+\t* gfortran.h (gfc_get_int_kind_from_width_isofortranenv,\n+\tgfc_get_real_kind_from_width_isofortranenv): New prototypes.\n+\t* iso-c-binding.def: Update definitions for the INT*_T,\n+\tINT_LEAST*_T and INT_FAST*_T named parameters.\n+\t* trans-types.c (get_typenode_from_name, get_int_kind_from_name,\n+\tgfc_get_real_kind_from_width_isofortranenv): New functions.\n+\n 2009-05-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36260"}, {"sha": "abde778a6b88a5a3e6023dc7b5c6954743dcdaa0", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -2254,6 +2254,8 @@ bool gfc_check_character_range (gfc_char_t, int);\n /* trans-types.c */\n gfc_try gfc_check_any_c_kind (gfc_typespec *);\n int gfc_validate_kind (bt, int, bool);\n+int gfc_get_int_kind_from_width_isofortranenv (int size);\n+int gfc_get_real_kind_from_width_isofortranenv (int size);\n extern int gfc_index_integer_kind;\n extern int gfc_default_integer_kind;\n extern int gfc_max_integer_kind;"}, {"sha": "94c12fd09af6ef42e9dda5b8e16c7f57d4e578cf", "filename": "gcc/fortran/iso-c-binding.def", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fiso-c-binding.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fiso-c-binding.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-c-binding.def?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -56,41 +56,44 @@ NAMED_INTCST (ISOCBINDING_LONG_LONG, \"c_long_long\", \\\n NAMED_INTCST (ISOCBINDING_INTMAX_T, \"c_intmax_t\", \\\n               get_int_kind_from_node (intmax_type_node), GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_INTPTR_T, \"c_intptr_t\", \\\n-              get_int_kind_from_node (ptr_type_node), GFC_STD_F2003)\n+              get_int_kind_from_name (INTPTR_TYPE), GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_SIZE_T, \"c_size_t\", \\\n               gfc_index_integer_kind, GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_SIGNED_CHAR, \"c_signed_char\", \\\n               get_int_kind_from_node (signed_char_type_node), GFC_STD_F2003)\n \n-NAMED_INTCST (ISOCBINDING_INT8_T, \"c_int8_t\", get_int_kind_from_width (8), \\\n-              GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT16_T, \"c_int16_t\", get_int_kind_from_width (16), \\\n-              GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT32_T, \"c_int32_t\", get_int_kind_from_width (32), \\\n-              GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT64_T, \"c_int64_t\", get_int_kind_from_width (64), \\\n-              GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT8_T, \"c_int8_t\", \\\n+              get_int_kind_from_name (INT8_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT16_T, \"c_int16_t\", \\\n+              get_int_kind_from_name (INT16_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT32_T, \"c_int32_t\", \\\n+              get_int_kind_from_name (INT32_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT64_T, \"c_int64_t\", \\\n+              get_int_kind_from_name (INT64_TYPE), GFC_STD_F2003)\n /* GNU Extension.  */\n-NAMED_INTCST (ISOCBINDING_INT128_T, \"c_int128_t\", get_int_kind_from_width (128), \\\n-              GFC_STD_GNU)\n+NAMED_INTCST (ISOCBINDING_INT128_T, \"c_int128_t\", \\\n+              get_int_kind_from_width (128), GFC_STD_GNU)\n \n NAMED_INTCST (ISOCBINDING_INT_LEAST8_T, \"c_int_least8_t\", \\\n-              get_int_kind_from_minimal_width (8), GFC_STD_F2003)\n+              get_int_kind_from_name (INT_LEAST8_TYPE), GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_INT_LEAST16_T, \"c_int_least16_t\", \\\n-              get_int_kind_from_minimal_width (16), GFC_STD_F2003)\n+              get_int_kind_from_name (INT_LEAST16_TYPE), GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_INT_LEAST32_T, \"c_int_least32_t\", \\\n-              get_int_kind_from_minimal_width (32), GFC_STD_F2003)\n+              get_int_kind_from_name (INT_LEAST32_TYPE), GFC_STD_F2003)\n NAMED_INTCST (ISOCBINDING_INT_LEAST64_T, \"c_int_least64_t\", \\\n-              get_int_kind_from_minimal_width (64), GFC_STD_F2003)\n+              get_int_kind_from_name (INT_LEAST64_TYPE), GFC_STD_F2003)\n /* GNU Extension.  */\n NAMED_INTCST (ISOCBINDING_INT_LEAST128_T, \"c_int_least128_t\", \\\n               get_int_kind_from_minimal_width (128), GFC_STD_GNU)\n \n-/* TODO: Implement c_int_fast*_t. Depends on PR 448.  */ \n-NAMED_INTCST (ISOCBINDING_INT_FAST8_T, \"c_int_fast8_t\", -2, GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT_FAST16_T, \"c_int_fast16_t\", -2, GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT_FAST32_T, \"c_int_fast32_t\", -2, GFC_STD_F2003)\n-NAMED_INTCST (ISOCBINDING_INT_FAST64_T, \"c_int_fast64_t\", -2, GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT_FAST8_T, \"c_int_fast8_t\", \\\n+              get_int_kind_from_name (INT_FAST8_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT_FAST16_T, \"c_int_fast16_t\", \\\n+              get_int_kind_from_name (INT_FAST16_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT_FAST32_T, \"c_int_fast32_t\", \\\n+              get_int_kind_from_name (INT_FAST32_TYPE), GFC_STD_F2003)\n+NAMED_INTCST (ISOCBINDING_INT_FAST64_T, \"c_int_fast64_t\", \\\n+              get_int_kind_from_name (INT_FAST64_TYPE), GFC_STD_F2003)\n /* GNU Extension.  */\n NAMED_INTCST (ISOCBINDING_INT_FAST128_T, \"c_int_fast128_t\", -2, GFC_STD_GNU)\n "}, {"sha": "fa6071f45b2f01e7e8e13552f4bccca5e16b86d3", "filename": "gcc/fortran/iso-fortran-env.def", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fiso-fortran-env.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Fiso-fortran-env.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fiso-fortran-env.def?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -33,6 +33,14 @@ NAMED_INTCST (ISOFORTRANENV_FILE_STORAGE_SIZE, \"file_storage_size\", 8, \\\n               GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_INPUT_UNIT, \"input_unit\", GFC_STDIN_UNIT_NUMBER, \\\n               GFC_STD_F2003)\n+NAMED_INTCST (ISOFORTRANENV_INT8, \"int8\", \\\n+              gfc_get_int_kind_from_width_isofortranenv (8), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_INT16, \"int16\", \\\n+              gfc_get_int_kind_from_width_isofortranenv (16), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_INT32, \"int32\", \\\n+              gfc_get_int_kind_from_width_isofortranenv (32), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_INT64, \"int64\", \\\n+              gfc_get_int_kind_from_width_isofortranenv (64), GFC_STD_F2008)\n NAMED_INTCST (ISOFORTRANENV_IOSTAT_END, \"iostat_end\", LIBERROR_END, \\\n               GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_IOSTAT_EOR, \"iostat_eor\", LIBERROR_EOR, \\\n@@ -41,3 +49,9 @@ NAMED_INTCST (ISOFORTRANENV_NUMERIC_STORAGE_SIZE, \"numeric_storage_size\", \\\n               gfc_numeric_storage_size, GFC_STD_F2003)\n NAMED_INTCST (ISOFORTRANENV_OUTPUT_UNIT, \"output_unit\", GFC_STDOUT_UNIT_NUMBER, \\\n               GFC_STD_F2003)\n+NAMED_INTCST (ISOFORTRANENV_REAL32, \"real32\", \\\n+              gfc_get_real_kind_from_width_isofortranenv (32), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_REAL64, \"real64\", \\\n+              gfc_get_real_kind_from_width_isofortranenv (64), GFC_STD_F2008)\n+NAMED_INTCST (ISOFORTRANENV_REAL128, \"real128\", \\\n+              gfc_get_real_kind_from_width_isofortranenv (128), GFC_STD_F2008)"}, {"sha": "b40af4111363ef567b2b2149ee566606a38aaf7d", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -163,6 +163,96 @@ get_int_kind_from_node (tree type)\n   return -1;\n }\n \n+/* Return a typenode for the \"standard\" C type with a given name.  */\n+static tree\n+get_typenode_from_name (const char *name)\n+{\n+  if (name == NULL || *name == '\\0')\n+    return NULL_TREE;\n+\n+  if (strcmp (name, \"char\") == 0)\n+    return char_type_node;\n+  if (strcmp (name, \"unsigned char\") == 0)\n+    return unsigned_char_type_node;\n+  if (strcmp (name, \"signed char\") == 0)\n+    return signed_char_type_node;\n+\n+  if (strcmp (name, \"short int\") == 0)\n+    return short_integer_type_node;\n+  if (strcmp (name, \"short unsigned int\") == 0)\n+    return short_unsigned_type_node;\n+\n+  if (strcmp (name, \"int\") == 0)\n+    return integer_type_node;\n+  if (strcmp (name, \"unsigned int\") == 0)\n+    return unsigned_type_node;\n+\n+  if (strcmp (name, \"long int\") == 0)\n+    return long_integer_type_node;\n+  if (strcmp (name, \"long unsigned int\") == 0)\n+    return long_unsigned_type_node;\n+\n+  if (strcmp (name, \"long long int\") == 0)\n+    return long_long_integer_type_node;\n+  if (strcmp (name, \"long long unsigned int\") == 0)\n+    return long_long_unsigned_type_node;\n+\n+  gcc_unreachable ();\n+}\n+\n+static int\n+get_int_kind_from_name (const char *name)\n+{\n+  return get_int_kind_from_node (get_typenode_from_name (name));\n+}\n+\n+\n+/* Get the kind number corresponding to an integer of given size,\n+   following the required return values for ISO_FORTRAN_ENV INT* constants:\n+   -2 is returned if we support a kind of larger size, -1 otherwise.  */\n+int\n+gfc_get_int_kind_from_width_isofortranenv (int size)\n+{\n+  int i;\n+\n+  /* Look for a kind with matching storage size.  */\n+  for (i = 0; gfc_integer_kinds[i].kind != 0; i++)\n+    if (gfc_integer_kinds[i].bit_size == size)\n+      return gfc_integer_kinds[i].kind;\n+\n+  /* Look for a kind with larger storage size.  */\n+  for (i = 0; gfc_integer_kinds[i].kind != 0; i++)\n+    if (gfc_integer_kinds[i].bit_size > size)\n+      return -2;\n+\n+  return -1;\n+}\n+\n+/* Get the kind number corresponding to a real of given storage size,\n+   following the required return values for ISO_FORTRAN_ENV REAL* constants:\n+   -2 is returned if we support a kind of larger size, -1 otherwise.  */\n+int\n+gfc_get_real_kind_from_width_isofortranenv (int size)\n+{\n+  int i;\n+\n+  size /= 8;\n+\n+  /* Look for a kind with matching storage size.  */\n+  for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n+    if (int_size_in_bytes (gfc_get_real_type (gfc_real_kinds[i].kind)) == size)\n+      return gfc_real_kinds[i].kind;\n+\n+  /* Look for a kind with larger storage size.  */\n+  for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n+    if (int_size_in_bytes (gfc_get_real_type (gfc_real_kinds[i].kind)) > size)\n+      return -2;\n+\n+  return -1;\n+}\n+\n+\n+\n static int\n get_int_kind_from_width (int size)\n {\n@@ -680,6 +770,7 @@ gfc_build_logical_type (gfc_logical_info *info)\n   return new_type;\n }\n \n+\n #if 0\n /* Return the bit size of the C \"size_t\".  */\n "}, {"sha": "7007901e075aca481159e559b93f122d31cc1b50", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -1,3 +1,10 @@\n+2009-05-17  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* gfortran.dg/c_kind_int128_test1.f03: Also test C_INT_FAST128_T.\n+\t* gfortran.dg/c_kind_int128_test2.f03: Update comment.\n+\t* gfortran.dg/c_kind_params.f90: Also test int_fast*_t.\n+\t* gfortran.dg/c_kinds.c: Add int_fast*_t arguments.\n+\n 2009-05-16  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/33197"}, {"sha": "b1919614b2e20c3d2813f6aef37a6d469244802e", "filename": "gcc/testsuite/gfortran.dg/c_kind_int128_test1.f03", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test1.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test1.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test1.f03?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -2,23 +2,23 @@\n ! { dg-options \"-std=f2003\" }\n ! { dg-require-effective-target fortran_integer_16 }\n !\n-! Note: int_fast*_t currently not supported.\n \n subroutine c_kind_int128_1\n   use, intrinsic :: iso_c_binding\n   implicit none\n \n   integer(c_int128_t) :: a   ! { dg-error \"has no IMPLICIT type\" }\n   integer(c_int_least128_t) :: b   ! { dg-error \"has no IMPLICIT type\" }\n-! integer(c_int_fast128_t) :: c   \n-   \n+  integer(c_int_fast128_t) :: c   ! { dg-error \"has no IMPLICIT type\" }\n+\n end subroutine c_kind_int128_1\n \n+\n subroutine c_kind_int128_2\n   use, intrinsic :: iso_c_binding\n \n   integer(c_int128_t) :: a   ! { dg-error \"has not been declared or is a variable\" }\n   integer(c_int_least128_t) :: b   ! { dg-error \"has not been declared or is a variable\" }\n-! integer(c_int_fast128_t) :: c   \n-   \n+  integer(c_int_fast128_t) :: c   ! { dg-error \"has not been declared or is a variable\" }\n+\n end subroutine c_kind_int128_2"}, {"sha": "4fe2dac29136fcc24c4fe4c34955a05d442c2d08", "filename": "gcc/testsuite/gfortran.dg/c_kind_int128_test2.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test2.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test2.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_int128_test2.f03?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -2,7 +2,7 @@\n ! { dg-options \"-std=gnu\" }\n ! { dg-require-effective-target fortran_integer_16 }\n !\n-! Note: int_fast*_t currently not supported.\n+! Note: int_fast128_t currently not supported.\n \n program c_kind_int128\n   use, intrinsic :: iso_c_binding"}, {"sha": "4176157887a1c547bd69ed3fd7b2aaca59b32b1d", "filename": "gcc/testsuite/gfortran.dg/c_kind_params.f90", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_params.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_params.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kind_params.f90?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -5,16 +5,16 @@\n ! the -w option is needed to make f951 not report a warning for \n ! the -std=c99 option that the C file needs.\n !\n-! Note: int_fast*_t currently not supported, cf. PR 448.\n module c_kind_params\n   use, intrinsic :: iso_c_binding\n   implicit none\n \n contains\n   subroutine param_test(my_short, my_int, my_long, my_long_long, &\n-       my_int8_t, my_int_least8_t, my_int16_t, &\n-       my_int_least16_t, my_int32_t, my_int_least32_t, &\n-       my_int64_t, my_int_least64_t, &\n+       my_int8_t, my_int_least8_t, my_int_fast8_t, &\n+       my_int16_t, my_int_least16_t, my_int_fast16_t, &\n+       my_int32_t, my_int_least32_t, my_int_fast32_t, &\n+       my_int64_t, my_int_least64_t, my_int_fast64_t, &\n        my_intmax_t, my_intptr_t, my_float, my_double, my_long_double, &\n        my_char, my_bool) bind(c)\n     integer(c_short), value :: my_short\n@@ -23,16 +23,16 @@ subroutine param_test(my_short, my_int, my_long, my_long_long, &\n     integer(c_long_long), value :: my_long_long\n     integer(c_int8_t), value :: my_int8_t\n     integer(c_int_least8_t), value :: my_int_least8_t\n-!   integer(c_int_fast8_t), value :: my_int_fast8_t\n+    integer(c_int_fast8_t), value :: my_int_fast8_t\n     integer(c_int16_t), value :: my_int16_t\n     integer(c_int_least16_t), value :: my_int_least16_t\n-!   integer(c_int_fast16_t), value :: my_int_fast16_t\n+    integer(c_int_fast16_t), value :: my_int_fast16_t\n     integer(c_int32_t), value :: my_int32_t\n     integer(c_int_least32_t), value :: my_int_least32_t\n-!   integer(c_int_fast32_t), value :: my_int_fast32_t\n+    integer(c_int_fast32_t), value :: my_int_fast32_t\n     integer(c_int64_t), value :: my_int64_t\n     integer(c_int_least64_t), value :: my_int_least64_t\n-!   integer(c_int_fast64_t), value :: my_int_fast64_t\n+    integer(c_int_fast64_t), value :: my_int_fast64_t\n     integer(c_intmax_t), value :: my_intmax_t\n     integer(c_intptr_t), value :: my_intptr_t\n     real(c_float), value :: my_float\n@@ -48,19 +48,19 @@ subroutine param_test(my_short, my_int, my_long, my_long_long, &\n \n     if(my_int8_t      /= 1_c_int8_t)        call abort()\n     if(my_int_least8_t  /= 2_c_int_least8_t ) call abort()\n-    print *, 'c_int_fast8_t is:        ', c_int_fast8_t\n+    if(my_int_fast8_t  /= 3_c_int_fast8_t ) call abort()\n \n     if(my_int16_t     /= 1_c_int16_t)       call abort()\n     if(my_int_least16_t /= 2_c_int_least16_t) call abort()\n-    print *, 'c_int_fast16_t is:       ', c_int_fast16_t\n+    if(my_int_fast16_t  /= 3_c_int_fast16_t ) call abort()\n \n     if(my_int32_t     /= 1_c_int32_t)       call abort()\n     if(my_int_least32_t /= 2_c_int_least32_t) call abort()\n-    print *, 'c_int_fast32_t is:       ', c_int_fast32_t\n+    if(my_int_fast32_t  /= 3_c_int_fast32_t ) call abort()\n \n     if(my_int64_t     /= 1_c_int64_t)       call abort()\n     if(my_int_least64_t /= 2_c_int_least64_t) call abort()\n-    print *, 'c_int_fast64_t is:       ', c_int_fast64_t\n+    if(my_int_fast64_t  /= 3_c_int_fast64_t ) call abort()\n \n     if(my_intmax_t /= 1_c_intmax_t) call abort()\n     if(my_intptr_t /= 0_c_intptr_t) call abort()"}, {"sha": "8fb658a98e8dc19c7ab28a83ed04cb310df0c0a3", "filename": "gcc/testsuite/gfortran.dg/c_kinds.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kinds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0a6661b792947c0f09d6bdb3b9ee98723b2993f/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kinds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc_kinds.c?ref=e0a6661b792947c0f09d6bdb3b9ee98723b2993f", "patch": "@@ -3,15 +3,14 @@\n \n #include <stdint.h>\n \n-/* Note: int_fast*_t is currently not supported, cf. PR 448 */\n void param_test(short int my_short, int my_int, long int my_long,\n                 long long int my_long_long, int8_t my_int8_t,\n-                int_least8_t my_int_least8_t, /*int_fast8_t my_int_fast8_t,*/\n+                int_least8_t my_int_least8_t, int_fast8_t my_int_fast8_t,\n                 int16_t my_int16_t, int_least16_t my_int_least16_t,\n-                /*int_fast16_t my_int_fast16_t,*/ int32_t my_int32_t,\n-                int_least32_t my_int_least32_t, /*int_fast32_t my_int_fast32_t,*/\n+                int_fast16_t my_int_fast16_t, int32_t my_int32_t,\n+                int_least32_t my_int_least32_t, int_fast32_t my_int_fast32_t,\n                 int64_t my_int64_t, int_least64_t my_int_least64_t,\n-                /*int_fast64_t my_int_fast64_t,*/ intmax_t my_intmax_t,\n+                int_fast64_t my_int_fast64_t, intmax_t my_intmax_t,\n                 intptr_t my_intptr_t, float my_float, double my_double,\n                 long double my_long_double, char my_char, _Bool my_bool);\n    \n@@ -43,10 +42,10 @@ int main(int argc, char **argv)\n    _Bool my_bool = 1;\n \n    param_test(my_short, my_int, my_long, my_long_long, my_int8_t,\n-              my_int_least8_t, /*my_int_fast8_t,  */ my_int16_t,\n-              my_int_least16_t,/* my_int_fast16_t,*/ my_int32_t,\n-              my_int_least32_t,/* my_int_fast32_t,*/ my_int64_t,\n-              my_int_least64_t,/* my_int_fast64_t,*/ my_intmax_t,\n+              my_int_least8_t, my_int_fast8_t, my_int16_t,\n+              my_int_least16_t, my_int_fast16_t, my_int32_t,\n+              my_int_least32_t, my_int_fast32_t, my_int64_t,\n+              my_int_least64_t, my_int_fast64_t, my_intmax_t,\n               my_intptr_t, my_float, my_double, my_long_double, my_char,\n               my_bool);\n "}]}