{"sha": "b434fc81908780cb0a606d8ab257b1c169ce12e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQzNGZjODE5MDg3ODBjYjBhNjA2ZDhhYjI1N2IxYzE2OWNlMTJlMg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T16:25:57Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-04-18T16:25:57Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r776", "tree": {"sha": "d1381d76be4ee0a3ee451a0003a44e96255d82c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1381d76be4ee0a3ee451a0003a44e96255d82c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b434fc81908780cb0a606d8ab257b1c169ce12e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434fc81908780cb0a606d8ab257b1c169ce12e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b434fc81908780cb0a606d8ab257b1c169ce12e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b434fc81908780cb0a606d8ab257b1c169ce12e2/comments", "author": null, "committer": null, "parents": [{"sha": "46a48c7fa9c7dbd7a67ef7cfb491ea5ad1f453c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46a48c7fa9c7dbd7a67ef7cfb491ea5ad1f453c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46a48c7fa9c7dbd7a67ef7cfb491ea5ad1f453c1"}], "stats": {"total": 36, "additions": 0, "deletions": 36}, "files": [{"sha": "b1c9ad3441eba84b0a80e29a68f11b92fcf11c87", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b434fc81908780cb0a606d8ab257b1c169ce12e2/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b434fc81908780cb0a606d8ab257b1c169ce12e2/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=b434fc81908780cb0a606d8ab257b1c169ce12e2", "patch": "@@ -54,22 +54,6 @@ static char * gen_formal_list_for_func_def ();\n static char * gen_type ();\n static char * gen_decl ();\n void   gen_aux_info_record ();\n-\n-#if 0\n-/* Virtually every UN*X system now in common use (except for pre-4.3-tahoe\n-   BSD systems) now provides getcwd as called for by POSIX.  Allow for\n-   the few exceptions to the general rule here.  */\n-\n-#if !(defined (USG) || defined (VMS))\n-extern char *getwd ();\n-#define getcwd(buf,len) getwd(buf)\n-#define GUESSPATHLEN (MAXPATHLEN + 1)\n-#else /* (defined (USG) || defined (VMS)) */\n-extern char *getcwd ();\n-/* We actually use this as a starting point, not a limit.  */\n-#define GUESSPATHLEN 100\n-#endif /* (defined (USG) || defined (VMS)) */\n-#endif /* 0 */\n \f\n /*  Take two strings and mash them together into a newly allocated area.  */\n \n@@ -622,26 +606,6 @@ gen_aux_info_record (fndecl, is_definition, is_implicit, is_prototyped)\n \n       if (! compiled_from_record++)\n \t{\n-#if 0\n-\t  int size;\n-\t  char *wd;\n-\t  char *value;\n-\n-\t  /* Read the working directory, avoiding arbitrary limit.  */\n-\t  size = GUESSPATHLEN;\n-\t  while (1)\n-\t    {\n-\t      wd = (char *) xmalloc (size);\n-\t      value = getcwd (wd, size);\n-\t      if (value != 0 || errno != ERANGE)\n-\t\tbreak;\n-\t      free (wd);\n-\t      size *= 2;\n-\t    }\n-\n-\t  if (value != 0)\n-\t    fprintf (aux_info_file, \"/* compiled from: %s */\\n\", wd);\n-#endif\n \t  /* The first line tells which directory file names are relative to.\n \t     Currently, -fgen-aux-info works only for files in the working\n \t     directory, so just use a `.' as a placeholder for now.  */"}]}