{"sha": "7402683f40d4b3448c61fdd23af7392fa57656df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwMjY4M2Y0MGQ0YjM0NDhjNjFmZGQyM2FmNzM5MmZhNTc2NTZkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-15T19:08:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1997-01-15T19:08:54Z"}, "message": "Initialize reload_address_{base,index}_reg_class\n\nFrom-SVN: r13495", "tree": {"sha": "d42835ee99e2744bc4950fd6746f1b6f82f4b683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d42835ee99e2744bc4950fd6746f1b6f82f4b683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7402683f40d4b3448c61fdd23af7392fa57656df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7402683f40d4b3448c61fdd23af7392fa57656df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7402683f40d4b3448c61fdd23af7392fa57656df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7402683f40d4b3448c61fdd23af7392fa57656df/comments", "author": null, "committer": null, "parents": [{"sha": "1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba61f4eb273fdb544fa0653ebf64e2a30d50a03"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "b5e9394550e57c190d017d707c90f9e6380b9502", "filename": "gcc/reload1.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7402683f40d4b3448c61fdd23af7392fa57656df/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7402683f40d4b3448c61fdd23af7392fa57656df/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=7402683f40d4b3448c61fdd23af7392fa57656df", "patch": "@@ -253,6 +253,18 @@ int reload_first_uid;\n \n int caller_save_needed;\n \n+/* The register class to use for a base register when reloading an\n+   address.  This is normally BASE_REG_CLASS, but it may be different\n+   when using SMALL_REGISTER_CLASSES and passing parameters in\n+   registers.  */\n+enum reg_class reload_address_base_reg_class;\n+\n+/* The register class to use for an index register when reloading an\n+   address.  This is normally INDEX_REG_CLASS, but it may be different\n+   when using SMALL_REGISTER_CLASSES and passing parameters in\n+   registers.  */\n+enum reg_class reload_address_index_reg_class;\n+\n /* Set to 1 while reload_as_needed is operating.\n    Required by some machines to handle any generated moves differently.  */\n \n@@ -431,6 +443,66 @@ init_reload ()\n   /* Initialize obstack for our rtl allocation.  */\n   gcc_obstack_init (&reload_obstack);\n   reload_firstobj = (char *) obstack_alloc (&reload_obstack, 0);\n+\n+  /* Decide which register class should be used when reloading\n+     addresses.  If we are using SMALL_REGISTER_CLASSES, and any\n+     parameters are passed in registers, then we do not want to use\n+     those registers when reloading an address.  Otherwise, if a\n+     function argument needs a reload, we may wind up clobbering\n+     another argument to the function which was already computed.  If\n+     we find a subset class which simply avoids those registers, we\n+     use it instead.  ??? It would be better to only use the\n+     restricted class when we actually are loading function arguments,\n+     but that is hard to determine.  */\n+  reload_address_base_reg_class = BASE_REG_CLASS;\n+  reload_address_index_reg_class = INDEX_REG_CLASS;\n+#ifdef SMALL_REGISTER_CLASSES\n+  if (SMALL_REGISTER_CLASSES)\n+    {\n+      int regno;\n+      HARD_REG_SET base, index;\n+      enum reg_class *p;\n+\n+      COPY_HARD_REG_SET (base, reg_class_contents[BASE_REG_CLASS]);\n+      COPY_HARD_REG_SET (index, reg_class_contents[INDEX_REG_CLASS]);\n+      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+\t{\n+\t  if (FUNCTION_ARG_REGNO_P (regno))\n+\t    {\n+\t      CLEAR_HARD_REG_BIT (base, regno);\n+\t      CLEAR_HARD_REG_BIT (index, regno);\n+\t    }\n+\t}\n+      \n+      GO_IF_HARD_REG_EQUAL (base, reg_class_contents[BASE_REG_CLASS],\n+\t\t\t    baseok);\n+      for (p = reg_class_subclasses[BASE_REG_CLASS];\n+\t   *p != LIM_REG_CLASSES;\n+\t   p++)\n+\t{\n+\t  GO_IF_HARD_REG_EQUAL (base, reg_class_contents[*p], usebase);\n+\t  continue;\n+\tusebase:\n+\t  reload_address_base_reg_class = *p;\n+\t  break;\n+\t}\n+    baseok:;\n+\n+      GO_IF_HARD_REG_EQUAL (index, reg_class_contents[INDEX_REG_CLASS],\n+\t\t\t    indexok);\n+      for (p = reg_class_subclasses[INDEX_REG_CLASS];\n+\t   *p != LIM_REG_CLASSES;\n+\t   p++)\n+\t{\n+\t  GO_IF_HARD_REG_EQUAL (index, reg_class_contents[*p], useindex);\n+\t  continue;\n+\tuseindex:\n+\t  reload_address_index_reg_class = *p;\n+\t  break;\n+\t}\n+    indexok:;\n+    }\n+#endif /* SMALL_REGISTER_CLASSES */\n }\n \n /* Main entry point for the reload pass."}]}