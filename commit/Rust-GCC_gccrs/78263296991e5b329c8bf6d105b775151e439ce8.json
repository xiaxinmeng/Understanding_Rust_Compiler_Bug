{"sha": "78263296991e5b329c8bf6d105b775151e439ce8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyNjMyOTY5OTFlNWIzMjljOGJmNmQxMDViNzc1MTUxZTQzOWNlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-04-11T17:31:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-04-11T17:31:57Z"}, "message": "forward_list.h (splice_after(const_iterator, forward_list&), [...]): Add per C++11 as published (and LWG 1310).\n\n2012-04-11  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (splice_after(const_iterator,\n\tforward_list&), splice_after(const_iterator, forward_list&,\n\tconsst_iterator), splice_after(const_iterator, forward_list&,\n\tconst_iterator, const_iterator), merge(forward_list&),\n\tmerge(forward_list&, _Comp)): Add per C++11 as published (and\n\tLWG 1310).\n\t* include/debug/forward_list: Adjust.\n\n\t* include/bits/forward_list.h (splice_after(const_iterator,\n\tforward_list&&, const_iterator)): Only declare.\n\t(_M_transfer_after): Remove.\n\t(_M_splice_after(const_iterator, forward_list&&)): Change signature.\n\t(splice_after(const_iterator, forward_list&&, const_iterator,\n\tconst_iterator)): Use the latter.\n\t* include/bits/forward_list.tcc (splice_after(const_iterator,\n\tforward_list&&, const_iterator)): Define here.\n\t(_M_splice_after): Define, use throughout.\n\n\t* include/bits/forward_list.h (insert_after(const_iterator,\n\tstd::initializer_list<_Tp>)): Forward to insert_after(const_iterator,\n\t_InputIterator, _InputIterator).\n\t* include/bits/forward_list.tcc: Remove definition.\n\n\t* testsuite/23_containers/forward_list/modifiers/6.cc: New.\n\t* testsuite/23_containers/forward_list/operations/1.cc: Adjust.\n\nFrom-SVN: r186338", "tree": {"sha": "6069e1ef9c5c8fae0622a3c0332faa4829c240ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6069e1ef9c5c8fae0622a3c0332faa4829c240ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78263296991e5b329c8bf6d105b775151e439ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78263296991e5b329c8bf6d105b775151e439ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78263296991e5b329c8bf6d105b775151e439ce8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78263296991e5b329c8bf6d105b775151e439ce8/comments", "author": null, "committer": null, "parents": [{"sha": "3dee490545274e447ad6b8cb83cf7eb10a37604c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dee490545274e447ad6b8cb83cf7eb10a37604c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dee490545274e447ad6b8cb83cf7eb10a37604c"}], "stats": {"total": 253, "additions": 204, "deletions": 49}, "files": [{"sha": "6e47c8cc479d580ebd8de5b5eaa72e46af83d667", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -1,3 +1,31 @@\n+2012-04-11  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (splice_after(const_iterator,\n+\tforward_list&), splice_after(const_iterator, forward_list&,\n+\tconsst_iterator), splice_after(const_iterator, forward_list&,\n+\tconst_iterator, const_iterator), merge(forward_list&),\n+\tmerge(forward_list&, _Comp)): Add per C++11 as published (and\n+\tLWG 1310).\n+\t* include/debug/forward_list: Adjust.\n+\n+\t* include/bits/forward_list.h (splice_after(const_iterator,\n+\tforward_list&&, const_iterator)): Only declare.\n+\t(_M_transfer_after): Remove.\n+\t(_M_splice_after(const_iterator, forward_list&&)): Change signature.\n+\t(splice_after(const_iterator, forward_list&&, const_iterator,\n+\tconst_iterator)): Use the latter.\n+\t* include/bits/forward_list.tcc (splice_after(const_iterator,\n+\tforward_list&&, const_iterator)): Define here.\n+\t(_M_splice_after): Define, use throughout.\n+\n+\t* include/bits/forward_list.h (insert_after(const_iterator,\n+\tstd::initializer_list<_Tp>)): Forward to insert_after(const_iterator,\n+\t_InputIterator, _InputIterator).\n+\t* include/bits/forward_list.tcc: Remove definition.\n+\n+\t* testsuite/23_containers/forward_list/modifiers/6.cc: New.\n+\t* testsuite/23_containers/forward_list/operations/1.cc: Adjust.\n+\n 2012-04-11  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/52931"}, {"sha": "76c3e3303cc6d64322cda604365b18cbec11f2f4", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -52,15 +52,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     _Fwd_list_node_base* _M_next;\n \n-    _Fwd_list_node_base*\n-    _M_transfer_after(_Fwd_list_node_base* __begin)\n-    {\n-      _Fwd_list_node_base* __end = __begin;\n-      while (__end && __end->_M_next)\n-\t__end = __end->_M_next;\n-      return _M_transfer_after(__begin, __end);\n-    }\n-\n     _Fwd_list_node_base*\n     _M_transfer_after(_Fwd_list_node_base* __begin,\n \t\t      _Fwd_list_node_base* __end)\n@@ -925,7 +916,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  does not invalidate iterators and references.\n        */\n       iterator\n-      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il);\n+      insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n+      { return insert_after(__pos, __il.begin(), __il.end()); }\n \n       /**\n        *  @brief  Removes the element pointed to by the iterator following\n@@ -1047,9 +1039,13 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       splice_after(const_iterator __pos, forward_list&& __list)\n       {\n \tif (!__list.empty())\n-\t  _M_splice_after(__pos, std::move(__list));\n+\t  _M_splice_after(__pos, __list.before_begin(), __list.end());\n       }\n \n+      void\n+      splice_after(const_iterator __pos, forward_list& __list)\n+      { splice_after(__pos, std::move(__list)); }\n+\n       /**\n        *  @brief  Insert element from another %forward_list.\n        *  @param  __pos  Iterator referencing the element to insert after.\n@@ -1062,15 +1058,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       splice_after(const_iterator __pos, forward_list&& __list,\n-                   const_iterator __i)\n-      {\n-\tconst_iterator __j = __i;\n-\t++__j;\n-\tif (__pos == __i || __pos == __j)\n-\t  return;\n+                   const_iterator __i);\n \n-\tsplice_after(__pos, std::move(__list), __i, __j);\n-      }\n+      void\n+      splice_after(const_iterator __pos, forward_list& __list,\n+                   const_iterator __i)\n+      { splice_after(__pos, std::move(__list), __i); }\n \n       /**\n        *  @brief  Insert range from another %forward_list.\n@@ -1086,8 +1079,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  Undefined if @a __pos is in (__before,__last).\n        */\n       void\n-      splice_after(const_iterator __pos, forward_list&& __list,\n-                   const_iterator __before, const_iterator __last);\n+      splice_after(const_iterator __pos, forward_list&&,\n+                   const_iterator __before, const_iterator __last)\n+      { _M_splice_after(__pos, __before, __last); }\n+\n+      void\n+      splice_after(const_iterator __pos, forward_list&,\n+                   const_iterator __before, const_iterator __last)\n+      { _M_splice_after(__pos, __before, __last); }\n \n       /**\n        *  @brief  Remove all elements equal to value.\n@@ -1130,7 +1129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       unique()\n-      { this->unique(std::equal_to<_Tp>()); }\n+      { unique(std::equal_to<_Tp>()); }\n \n       /**\n        *  @brief  Remove consecutive elements satisfying a predicate.\n@@ -1159,7 +1158,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       merge(forward_list&& __list)\n-      { this->merge(std::move(__list), std::less<_Tp>()); }\n+      { merge(std::move(__list), std::less<_Tp>()); }\n+\n+      void\n+      merge(forward_list& __list)\n+      { merge(std::move(__list)); }\n \n       /**\n        *  @brief  Merge sorted lists according to comparison function.\n@@ -1176,6 +1179,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n         void\n         merge(forward_list&& __list, _Comp __comp);\n \n+      template<typename _Comp>\n+        void\n+        merge(forward_list& __list, _Comp __comp)\n+        { merge(std::move(__list), __comp); }\n+\n       /**\n        *  @brief  Sort the elements of the list.\n        *\n@@ -1184,7 +1192,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        */\n       void\n       sort()\n-      { this->sort(std::less<_Tp>()); }\n+      { sort(std::less<_Tp>()); }\n \n       /**\n        *  @brief  Sort the forward_list using a comparison function.\n@@ -1218,7 +1226,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // Called by splice_after and insert_after.\n       iterator\n-      _M_splice_after(const_iterator __pos, forward_list&& __list);\n+      _M_splice_after(const_iterator __pos, const_iterator __before,\n+\t\t      const_iterator __last);\n \n       // Called by forward_list(n).\n       void"}, {"sha": "3c9f2380b272edb61723b3ed6ee257f3d5f4d44f", "filename": "libstdc++-v3/include/bits/forward_list.tcc", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.tcc?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -223,22 +223,37 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   template<typename _Tp, typename _Alloc>\n     typename forward_list<_Tp, _Alloc>::iterator\n     forward_list<_Tp, _Alloc>::\n-    _M_splice_after(const_iterator __pos, forward_list&& __list)\n+    _M_splice_after(const_iterator __pos,\n+\t\t    const_iterator __before, const_iterator __last)\n     {\n       _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n-      iterator __before = __list.before_begin();\n-      return iterator(__tmp->_M_transfer_after(__before._M_node));\n+      _Node_base* __b = const_cast<_Node_base*>(__before._M_node);\n+      _Node_base* __end = __b;\n+\n+      while (__end && __end->_M_next != __last._M_node)\n+\t__end = __end->_M_next;\n+\n+      if (__b != __end)\n+\treturn iterator(__tmp->_M_transfer_after(__b, __end));      \n+      else\n+\treturn iterator(__tmp);\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::\n     splice_after(const_iterator __pos, forward_list&&,\n-                 const_iterator __before, const_iterator __last)\n+\t\t const_iterator __i)\n     {\n+      const_iterator __j = __i;\n+      ++__j;\n+\n+      if (__pos == __i || __pos == __j)\n+\treturn;\n+\n       _Node_base* __tmp = const_cast<_Node_base*>(__pos._M_node);\n-      __tmp->_M_transfer_after(const_cast<_Node_base*>(__before._M_node),\n-                               const_cast<_Node_base*>(__last._M_node));\n+      __tmp->_M_transfer_after(const_cast<_Node_base*>(__i._M_node),\n+\t\t\t       const_cast<_Node_base*>(__j._M_node));\n     }\n \n   template<typename _Tp, typename _Alloc>\n@@ -249,7 +264,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       if (__n)\n \t{\n \t  forward_list __tmp(__n, __val, get_allocator());\n-\t  return _M_splice_after(__pos, std::move(__tmp));\n+\t  return _M_splice_after(__pos, __tmp.before_begin(), __tmp.end());\n \t}\n       else\n \treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n@@ -264,25 +279,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       {\n \tforward_list __tmp(__first, __last, get_allocator());\n \tif (!__tmp.empty())\n-\t  return _M_splice_after(__pos, std::move(__tmp));\n+\t  return _M_splice_after(__pos, __tmp.before_begin(), __tmp.end());\n \telse\n \t  return iterator(const_cast<_Node_base*>(__pos._M_node));\n       }\n \n-  template<typename _Tp, typename _Alloc>\n-    typename forward_list<_Tp, _Alloc>::iterator\n-    forward_list<_Tp, _Alloc>::\n-    insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n-    {\n-      if (__il.size())\n-\t{\n-\t  forward_list __tmp(__il, get_allocator());\n-\t  return _M_splice_after(__pos, std::move(__tmp));\n-\t}\n-      else\n-\treturn iterator(const_cast<_Node_base*>(__pos._M_node));\n-    }\n-\n   template<typename _Tp, typename _Alloc>\n     void\n     forward_list<_Tp, _Alloc>::"}, {"sha": "e21eb4a703afa1418485534f78b57484b51c8efa", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -417,6 +417,10 @@ namespace __debug\n \t_Base::splice_after(__pos.base(), std::move(__list._M_base()));\n       }\n \n+      void\n+      splice_after(const_iterator __pos, forward_list& __list)\n+      { splice_after(__pos, std::move(__list)); }\n+\n       void\n       splice_after(const_iterator __pos, forward_list&& __list,\n \t\t   const_iterator __i)\n@@ -439,6 +443,11 @@ namespace __debug\n \t\t\t    __i.base());\n       }\n \n+      void\n+      splice_after(const_iterator __pos, forward_list& __list,\n+\t\t   const_iterator __i)\n+      { splice_after(__pos, std::move(__list), __i); }\n+\n       void\n       splice_after(const_iterator __pos, forward_list&& __list,\n \t\t   const_iterator __before, const_iterator __last)\n@@ -484,6 +493,11 @@ namespace __debug\n \t\t\t    __before.base(), __last.base());\n       }\n \n+      void\n+      splice_after(const_iterator __pos, forward_list& __list,\n+\t\t   const_iterator __before, const_iterator __last)\n+      { splice_after(__pos, std::move(__list), __before, __last); }\n+\n       void\n       remove(const _Tp& __val)\n       {\n@@ -565,6 +579,10 @@ namespace __debug\n \t}\n       }\n \n+      void\n+      merge(forward_list& __list)\n+      { merge(std::move(__list)); }\n+\n       template<typename _Comp>\n         void\n         merge(forward_list&& __list, _Comp __comp)\n@@ -584,6 +602,11 @@ namespace __debug\n \t  }\n \t}\n \n+      template<typename _Comp>\n+        void\n+        merge(forward_list& __list, _Comp __comp)\n+        { merge(std::move(__list), __comp); }\n+\n       using _Base::sort;\n       using _Base::reverse;\n "}, {"sha": "e160381a776a93dbeb47427685877e7b7f434ddb", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/6.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F6.cc?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -0,0 +1,94 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without Pred the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  std::forward_list<int> fl1(1, 5), fl2(1, 4), fl3(1, 3),\n+                         fl4(1, 2), fl5(1, 1), fl6(1, 0);\n+\n+  fl1.splice_after(fl1.before_begin(), fl2);\n+\n+  auto it = fl1.begin();\n+\n+  VERIFY( *it == 4 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 5 );\n+\n+  fl3.splice_after(fl3.before_begin(), fl4, fl4.before_begin());\n+\n+  it = fl3.begin();\n+\n+  VERIFY( *it == 2 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 3 );\n+\n+  fl5.splice_after(fl5.before_begin(), fl6, fl6.before_begin(), fl6.end());\n+\n+  it = fl5.begin();\n+\n+  VERIFY( *it == 0 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 1 );\n+\n+  fl1.merge(fl2);\n+\n+  it = fl1.begin();\n+\n+  VERIFY( *it == 4 );\n+\n+  ++it;\n+\n+  VERIFY( *it == 5 );\n+\n+  fl1.merge(fl3, std::less<int>());\n+\n+  it = fl1.begin();\n+\n+  VERIFY( *it == 2 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 3 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 4 );\n+\n+  ++it;\n+  \n+  VERIFY( *it == 5 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "4a9e364452787a207365cd3215ce1cebadc4495b", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/operations/1.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78263296991e5b329c8bf6d105b775151e439ce8/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Foperations%2F1.cc?ref=78263296991e5b329c8bf6d105b775151e439ce8", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +68,7 @@ test02()\n \n   VERIFY(*befy == 10.0);\n   ++befy;\n-  VERIFY(*befy == 15.0);\n+  VERIFY(*befy == 14.0);\n }\n \n // This test verifies the following:"}]}