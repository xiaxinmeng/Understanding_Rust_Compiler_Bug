{"sha": "8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641", "node_id": "C_kwDOANBUbNoAKDhiNmMzOGVmNmE3YThjYzFmN2NjMmZmODZhNjg2ZTA3Y2VhYjE2NDE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-03-14T09:39:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2023-03-14T10:29:48Z"}, "message": "Revert latest change to emit_group_store\n\nThis pessimizes on targets with insv instructions.\n\ngcc/\n\tPR rtl-optimization/107762\n\t* expr.cc (emit_group_store): Revert latest change.", "tree": {"sha": "3bb1d5897c69cdbb43f85b5577925c60a0668ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bb1d5897c69cdbb43f85b5577925c60a0668ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641/comments", "author": null, "committer": null, "parents": [{"sha": "4d771291f70dab571e7c18f9f5f8af4f27737244", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d771291f70dab571e7c18f9f5f8af4f27737244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d771291f70dab571e7c18f9f5f8af4f27737244"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "f8f5cc5a6ca67f291b3c8b7246d593c0be80272f", "filename": "gcc/expr.cc", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641/gcc%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641/gcc%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.cc?ref=8b6c38ef6a7a8cc1f7cc2ff86a686e07ceab1641", "patch": "@@ -2902,16 +2902,14 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED,\n \tdst = gen_reg_rtx (outer);\n \n       /* Make life a bit easier for combine: if the first element of the\n-\t vector is the word (or larger) low part of the destination mode,\n-\t use a paradoxical subreg to initialize the destination.  */\n+\t vector is the low part of the destination mode, use a paradoxical\n+\t subreg to initialize the destination.  */\n       if (start < finish)\n \t{\n \t  inner = GET_MODE (tmps[start]);\n \t  bytepos = subreg_lowpart_offset (inner, outer);\n-\t  if (known_ge (GET_MODE_BITSIZE (inner), BITS_PER_WORD)\n-\t      && known_eq (rtx_to_poly_int64 (XEXP (XVECEXP (src, 0,\n-\t\t\t\t\t\t\t     start), 1)),\n-\t\t\t   bytepos))\n+\t  if (known_eq (rtx_to_poly_int64 (XEXP (XVECEXP (src, 0, start), 1)),\n+\t\t\tbytepos))\n \t    {\n \t      temp = simplify_gen_subreg (outer, tmps[start], inner, 0);\n \t      if (temp)\n@@ -2929,10 +2927,9 @@ emit_group_store (rtx orig_dst, rtx src, tree type ATTRIBUTE_UNUSED,\n \t{\n \t  inner = GET_MODE (tmps[finish - 1]);\n \t  bytepos = subreg_lowpart_offset (inner, outer);\n-\t  if (known_ge (GET_MODE_BITSIZE (inner), BITS_PER_WORD)\n-\t      && known_eq (rtx_to_poly_int64 (XEXP (XVECEXP (src, 0,\n-\t\t\t\t\t\t\t     finish - 1), 1)),\n-\t\t\t   bytepos))\n+\t  if (known_eq (rtx_to_poly_int64 (XEXP (XVECEXP (src, 0,\n+\t\t\t\t\t\t\t  finish - 1), 1)),\n+\t\t\tbytepos))\n \t    {\n \t      temp = simplify_gen_subreg (outer, tmps[finish - 1], inner, 0);\n \t      if (temp)"}]}