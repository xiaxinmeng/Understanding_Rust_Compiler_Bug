{"sha": "1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRiYjYwMjNjNzNjZmIzNDBiMjRkOGM4MWNmMzFmNDFmOGYxODA1Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-08-02T10:51:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-08-02T10:51:17Z"}, "message": "Kill -fhonor-std.\n\n.:\tKill -fhonor-std.\n\t* doc/c-tree.texi (Namespaces): Remove std & -fhonor-std\n\tinteraction.\n\t* doc/invoke.texi (C++ Dialect Options): Remove -fno-honor-std.\ncp:\n\tKill -fhonor-std.\n\t* NEWS: Document.\n\t* cp-tree.h (flag_honor_std): Remove.\n\t(CPTI_FAKE_STD): Remove.\n\t(std_node): Remove comment about it being NULL.\n\t(fake_std_node): Remove.\n\t* decl.c (in_fake_std): Remove.\n\t(walk_namespaces_r): Remove fake_std_node check.\n\t(push_namespace): Remove in_fake_std code.\n\t(pop_namespace): Likewise.\n\t(lookup_name_real): Remove fake_std_node check.\n\t(init_decl_processing): Always create std_node. Always add\n\tstd:: things there.\n\t(builtin_function): Always put non '_' fns in std.\n\t* decl2.c (flag_honor_std): Remove.\n\t(lang_f_options): Remove honor-std.\n\t(unsupported_options): Add honor-std.\n\t(set_decl_namespace): Remove fake_std_node check.\n\t(validate_nonmember_using_decl): Likewise.\n\t(do_using_directive): Likewise.\n\t(handle_class_head): Likewise.\n\t* dump.c (cp_dump_tree): Likewise.\n\t* except.c (init_exception_processing): Adjust.\n\t* init.c (build_member_call): Remove fake_std_node check.\n\t(build_offset_ref): Likewise.\n\t* lang-options.h: Remove -fhonor-std, -fno-honor-std.\n\t* rtti.c (init_rtti_processing): Adjust.\ntestsuite:\n\tKill -fhonor-std.\n\t* g++.old-deja/g++.ns/ns14.C: Remove special options.\n\t* g++.old-deja/g++.other/std1.C: Likewise.\n\t* g++.old-deja/g++.robertl/eb133.C: Likewise. Add using directive.\n\nFrom-SVN: r44569", "tree": {"sha": "500db6a75f62007cc54fa831988ec84ee2018489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500db6a75f62007cc54fa831988ec84ee2018489"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/comments", "author": null, "committer": null, "parents": [{"sha": "d6b6ba29213242c1e0ce9cc9a63a4632e1f01ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b6ba29213242c1e0ce9cc9a63a4632e1f01ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b6ba29213242c1e0ce9cc9a63a4632e1f01ca2"}], "stats": {"total": 200, "additions": 67, "deletions": 133}, "files": [{"sha": "ee75869dfa7b7da34eacd05ed70d33d8000328ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,3 +1,10 @@\n+2001-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tKill -fhonor-std.\n+\t* doc/c-tree.texi (Namespaces): Remove std & -fhonor-std\n+\tinteraction.\n+\t* doc/invoke.texi (C++ Dialect Options): Remove -fno-honor-std.\n+\n 2001-08-02  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* mips.md (movdicc): Make conditional on TARGET_64BIT.  Likewise"}, {"sha": "7474c83f264f7772d8e4c7b9d31db336ce01c756", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,3 +1,33 @@\n+2001-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tKill -fhonor-std.\n+\t* NEWS: Document.\n+\t* cp-tree.h (flag_honor_std): Remove.\n+\t(CPTI_FAKE_STD): Remove.\n+\t(std_node): Remove comment about it being NULL.\n+\t(fake_std_node): Remove.\n+\t* decl.c (in_fake_std): Remove.\n+\t(walk_namespaces_r): Remove fake_std_node check.\n+\t(push_namespace): Remove in_fake_std code.\n+\t(pop_namespace): Likewise.\n+\t(lookup_name_real): Remove fake_std_node check.\n+\t(init_decl_processing): Always create std_node. Always add\n+\tstd:: things there.\n+\t(builtin_function): Always put non '_' fns in std.\n+\t* decl2.c (flag_honor_std): Remove.\n+\t(lang_f_options): Remove honor-std.\n+\t(unsupported_options): Add honor-std.\n+\t(set_decl_namespace): Remove fake_std_node check.\n+\t(validate_nonmember_using_decl): Likewise.\n+\t(do_using_directive): Likewise.\n+\t(handle_class_head): Likewise.\n+\t* dump.c (cp_dump_tree): Likewise.\n+\t* except.c (init_exception_processing): Adjust.\n+\t* init.c (build_member_call): Remove fake_std_node check.\n+\t(build_offset_ref): Likewise.\n+\t* lang-options.h: Remove -fhonor-std, -fno-honor-std.\n+\t* rtti.c (init_rtti_processing): Adjust.\n+\n 2001-07-31  Alexandre Petit-Bianco  <apbianco@redhat.com>\n \n \t* tree.c (cp_tree_equal): WITH_CLEANUP_EXPR node to use its second"}, {"sha": "2d3632cdf015957b32c3f886c97434dfe84cf1b0", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,5 +1,9 @@\n *** Changes in GCC 3.1:\n \n+* -fhonor-std and -fno-honor-std have been removed. -fno-honor-std was\n+  a workaround to allow std compliant code to work with the non-std\n+  compliant libstdc++-v2. libstdc++-v3 is std compliant.\n+\n * The C++ ABI has been changed to correctly handle this code:\n \t\n     struct A {"}, {"sha": "4980cf4bf6763a13c7a9981af6eb8d84f57bc791", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -209,10 +209,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern int flag_use_cxa_atexit;\n \n-/* Nonzero to not ignore namespace std. */\n-\n-extern int flag_honor_std;\n-\n /* Nonzero means generate 'rtti' that give run-time type information.  */\n \n extern int flag_rtti;\n@@ -526,7 +522,6 @@ enum cp_tree_index\n     CPTI_VTBL_TYPE,\n     CPTI_VTBL_PTR_TYPE,\n     CPTI_STD,\n-    CPTI_FAKE_STD,\n     CPTI_ABI,\n     CPTI_TYPE_INFO_TYPE,\n     CPTI_TINFO_DECL_TYPE,\n@@ -613,14 +608,7 @@ extern tree cp_global_trees[CPTI_MAX];\n #define unknown_type_node\t\tcp_global_trees[CPTI_UNKNOWN_TYPE]\n #define vtbl_type_node\t\t\tcp_global_trees[CPTI_VTBL_TYPE]\n #define vtbl_ptr_type_node\t\tcp_global_trees[CPTI_VTBL_PTR_TYPE]\n-/* When the `std' namespace is a real namespace, this is the\n-   corresponding NAMESPACE_DECL.  When the `std' namespace is an alias\n-   for the global namespace, this is NULL_TREE.  */\n #define std_node\t\t\tcp_global_trees[CPTI_STD]\n-/* When the `std' namespace is a real namespace, this is the\n-   ERROR_MARK_NODE.  Otherwise, this is a dummy NAMESPACE_DECL that\n-   should be treated like the global namespace.  */\n-#define fake_std_node                   cp_global_trees[CPTI_FAKE_STD]\n #define abi_node                        cp_global_trees[CPTI_ABI]\n #define type_info_type_node\t\tcp_global_trees[CPTI_TYPE_INFO_TYPE]\n #define tinfo_decl_type\t\t\tcp_global_trees[CPTI_TINFO_DECL_TYPE]"}, {"sha": "1a34bb9ed614aa9967a443edcfc6f35207039cb7", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 48, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -206,11 +206,6 @@ tree cp_global_trees[CPTI_MAX];\n \n static tree global_type_node;\n \n-/* If non-zero, this is the number of times we have entered the `std'\n-   namespace when we are treating that namespace as an alias for the\n-   global namespace.  */\n-static int in_fake_std;\n-\n /* Expect only namespace names now. */\n static int only_namespace_names;\n \n@@ -1794,12 +1789,6 @@ walk_namespaces_r (namespace, f, data)\n       if (TREE_CODE (current) != NAMESPACE_DECL\n \t  || DECL_NAMESPACE_ALIAS (current))\n \tcontinue;\n-      if (!DECL_LANG_SPECIFIC (current))\n-\t{\n-\t  /* Hmm. std. */\n-\t  my_friendly_assert (current == fake_std_node, 393);\n-\t  continue;\n-\t}\n \n       /* We found a namespace.  */\n       result |= walk_namespaces_r (current, f, data);\n@@ -2279,13 +2268,6 @@ push_namespace (name)\n         need_new = 0;\n       implicit_use = 1;\n     }\n-  else if (current_namespace == global_namespace\n-\t   && !flag_honor_std\n-\t   && name == std_identifier)\n-    {\n-      in_fake_std++;\n-      return;\n-    }\n   else\n     {\n       /* Check whether this is an extended namespace definition. */\n@@ -2331,12 +2313,7 @@ push_namespace (name)\n void\n pop_namespace ()\n {\n-  if (current_namespace == global_namespace)\n-    {\n-      my_friendly_assert (in_fake_std > 0, 980421);\n-      in_fake_std--;\n-      return;\n-    }\n+  my_friendly_assert (current_namespace != global_namespace, 20010801);\n   current_namespace = CP_DECL_CONTEXT (current_namespace);\n   /* The binding level is not popped, as it might be re-opened later.  */\n   suspend_binding_level ();\n@@ -5892,10 +5869,6 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n       if (looking_for_template)\n         flags |= LOOKUP_TEMPLATES_EXPECTED;\n \n-      /* std:: becomes :: for now.  */\n-      if (got_scope && got_scope == fake_std_node)\n-\tgot_scope = void_type_node;\n-\n       if (got_scope)\n \ttype = got_scope;\n       else if (got_object != error_mark_node)\n@@ -6377,20 +6350,9 @@ init_decl_processing ()\n   declare_namespace_level ();\n \n   /* Create the `std' namespace.  */\n-  if (flag_honor_std)\n-    {\n-      push_namespace (std_identifier);\n-      std_node = current_namespace;\n-      pop_namespace ();\n-      fake_std_node = error_mark_node;\n-    }\n-  else\n-    {\n-      fake_std_node = build_decl (NAMESPACE_DECL,\n-\t\t\t\t  std_identifier,\n-\t\t\t\t  void_type_node);\n-      pushdecl (fake_std_node);\n-    }\n+  push_namespace (std_identifier);\n+  std_node = current_namespace;\n+  pop_namespace ();\n \n   c_common_nodes_and_builtins ();\n \n@@ -6492,12 +6454,10 @@ init_decl_processing ()\n     tree bad_alloc_type_node, newtype, deltype;\n     tree ptr_ftype_sizetype;\n \n-    if (flag_honor_std)\n-      push_namespace (std_identifier);\n+    push_namespace (std_identifier);\n     bad_alloc_type_node = xref_tag\n       (class_type_node, get_identifier (\"bad_alloc\"), 1);\n-    if (flag_honor_std)\n-      pop_namespace ();\n+    pop_namespace ();\n     ptr_ftype_sizetype \n       = build_function_type (ptr_type_node,\n \t\t\t     tree_cons (NULL_TREE,\n@@ -6666,13 +6626,13 @@ builtin_function (name, type, code, class, libname)\n \n   /* All builtins that don't begin with an `_' should go in the `std'\n      namespace.  */\n-  if (flag_honor_std && name[0] != '_')\n+  if (name[0] != '_')\n     {\n       push_namespace (std_identifier);\n       DECL_CONTEXT (decl) = std_node;\n     }\n   pushdecl (decl);\n-  if (flag_honor_std && name[0] != '_')\n+  if (name[0] != '_')\n     pop_namespace ();\n \n   /* Since `pushdecl' relies on DECL_ASSEMBLER_NAME instead of DECL_NAME,"}, {"sha": "1b7be185116df5dc3a5b8fe5ddb0be6ecb81445a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -378,10 +378,6 @@ int flag_weak = 1;\n \n int flag_use_cxa_atexit;\n \n-/* Nonzero to not ignore namespace std. */\n-\n-int flag_honor_std = 1;\n-\n /* 0 if we should not perform inlining.\n    1 if we should expand functions calls inline at the tree level.  \n    2 if we should consider *all* functions to be inline \n@@ -448,7 +444,6 @@ lang_f_options[] =\n   {\"for-scope\", &flag_new_for_scope, 2},\n   {\"gnu-keywords\", &flag_no_gnu_keywords, 0},\n   {\"handle-exceptions\", &flag_exceptions, 1},\n-  {\"honor-std\", &flag_honor_std, 1},\n   {\"implement-inlines\", &flag_implement_inlines, 1},\n   {\"implicit-inline-templates\", &flag_implicit_inline_templates, 1},\n   {\"implicit-templates\", &flag_implicit_templates, 1},\n@@ -473,6 +468,7 @@ static const char * const unsupported_options[] = {\n   \"cond-mismatch\",\n   \"enum-int-equiv\",\n   \"guiding-decls\",\n+  \"honor-std\",\n   \"huge-objects\",\n   \"labels-ok\",\n   \"new-abi\",\n@@ -4403,8 +4399,7 @@ set_decl_namespace (decl, scope, friendp)\n      int friendp;\n {\n   tree old;\n-  if (scope == fake_std_node)\n-    scope = global_namespace;\n+  \n   /* Get rid of namespace aliases. */\n   scope = ORIGINAL_NAMESPACE (scope);\n   \n@@ -4913,13 +4908,7 @@ validate_nonmember_using_decl (decl, scope, name)\n      tree *scope;\n      tree *name;\n {\n-  if (TREE_CODE (decl) == SCOPE_REF\n-      && TREE_OPERAND (decl, 0) == fake_std_node)\n-    {\n-      *scope = global_namespace;\n-      *name = TREE_OPERAND (decl, 1);\n-    }\n-  else if (TREE_CODE (decl) == SCOPE_REF)\n+  if (TREE_CODE (decl) == SCOPE_REF)\n     {\n       *scope = TREE_OPERAND (decl, 0);\n       *name = TREE_OPERAND (decl, 1);\n@@ -5156,8 +5145,6 @@ void\n do_using_directive (namespace)\n      tree namespace;\n {\n-  if (namespace == fake_std_node)\n-    return;\n   if (building_stmt_tree ())\n     add_stmt (build_stmt (USING_STMT, namespace));\n   \n@@ -5260,8 +5247,6 @@ handle_class_head (aggr, scope, id)\n   \n       if (current == NULL_TREE)\n         current = current_namespace;\n-      if (scope == fake_std_node)\n-        scope = global_namespace;\n       if (scope == NULL_TREE)\n         scope = global_namespace;\n "}, {"sha": "17a6b30b7058cd472a599f2914b409b6d5eaeec2", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -158,10 +158,6 @@ cp_dump_tree (di, t)\n       break;\n \n     case NAMESPACE_DECL:\n-      /* The fake `::std' namespace does not have DECL_LANG_SPECIFIC,\n-\t and therefore many other macros do not work on it.  */\n-      if (t == fake_std_node)\n-\tbreak;\n       if (DECL_NAMESPACE_ALIAS (t))\n \tdump_child (\"alis\", DECL_NAMESPACE_ALIAS (t));\n       else if (!dump_flag (di, TDF_SLIM, t))"}, {"sha": "fef5b53ec62f3dc2cd768b045c2764687d39a4af", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -62,16 +62,13 @@ init_exception_processing ()\n {\n   tree tmp;\n \n-  if (flag_honor_std)\n-    push_namespace (std_identifier);\n-\n   /* void std::terminate (); */\n+  push_namespace (std_identifier);\n   tmp = build_function_type (void_type_node, void_list_node);\n   terminate_node = build_cp_library_fn_ptr (\"terminate\", tmp);\n   TREE_THIS_VOLATILE (terminate_node) = 1;\n   TREE_NOTHROW (terminate_node) = 1;\n-  if (flag_honor_std)\n-    pop_namespace ();\n+  pop_namespace ();\n \n   /* void __cxa_call_unexpected(void *); */\n   tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);"}, {"sha": "487543e6386c9671ac1ecc9cec07c888dd2b5149", "filename": "gcc/cp/init.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1503,9 +1503,6 @@ build_member_call (type, name, parmlist)\n   if (DECL_P (name))\n     name = DECL_NAME (name);\n \n-  if (type == fake_std_node)\n-    return build_x_function_call (do_scoped_id (name, 0), parmlist,\n-\t\t\t\t  current_class_ref);\n   if (TREE_CODE (type) == NAMESPACE_DECL)\n     return build_x_function_call (lookup_namespace_name (type, name),\n \t\t\t\t  parmlist, current_class_ref);\n@@ -1638,9 +1635,6 @@ build_offset_ref (type, name)\n   if (TREE_CODE (name) == TEMPLATE_DECL)\n     return name;\n \n-  if (type == fake_std_node)\n-    return do_scoped_id (name, 0);\n-\n   if (processing_template_decl || uses_template_parms (type))\n     return build_min_nt (SCOPE_REF, type, name);\n "}, {"sha": "5a3f94a4d408c2e48d1a6db545f965fafd89c8ab", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -64,9 +64,6 @@ DEFINE_LANG_NAME (\"C++\")\n     N_(\"Do not recognise GNU defined keywords\") },\n   { \"-fhandle-exceptions\", \"\" },\n   { \"-fno-handle-exceptions\", \"\" },\n-  { \"-fhonor-std\", \"\" },\n-  { \"-fno-honor-std\", \n-    N_(\"Do not treat the namespace `std' as a normal namespace\") },\n   { \"-fhuge-objects\", \n     N_(\"Enable support for huge objects\") },\n   { \"-fno-huge-objects\", \"\" },"}, {"sha": "f8c6031e45eac5cf4ed927cfb518fba18aa7b56d", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -71,12 +71,10 @@ static int doing_runtime = 0;\n void\n init_rtti_processing ()\n {\n-  if (flag_honor_std)\n-    push_namespace (std_identifier);\n+  push_namespace (std_identifier);\n   type_info_type_node = xref_tag\n     (class_type_node, get_identifier (\"type_info\"), 1);\n-  if (flag_honor_std)\n-    pop_namespace ();\n+  pop_namespace ();\n   tinfo_decl_type = \n     build_qualified_type (type_info_type_node, TYPE_QUAL_CONST);\n }"}, {"sha": "7d926c7538868a297295e3865edc947db1c78084", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -620,22 +620,6 @@ representation, the global namespace is no different from any other\n namespace.  Thus, in what follows, we describe namespaces generally,\n rather than the global namespace in particular.\n \n-The @code{::std} namespace, however, @emph{is} special when\n-@code{flag_honor_std} is not set.  When @code{flag_honor_std} is set,\n-the @code{std} namespace is just like any other namespace.  When\n-@code{flag_honor_std} is not set, however, the @code{::std} namespace is\n-treated as a synonym for the global namespace, thereby allowing users to\n-write code that will work with compilers that put the standard library\n-in the @code{::std} namespace.  The @code{std} namespace is represented\n-by the variable @code{std_node}.  Although @code{std_node} is a\n-@code{NAMESPACE_DECL}, it does not have all the fields required of a\n-real namespace, and the macros and functions described here do not work,\n-in general.  It is safest simply to ignore @code{std_node} should you\n-encounter it while examining the internal representation.  In\n-particular, you will encounter @code{std_node} while looking at the\n-members of the global namespace.  Just skip it without attempting to\n-examine its members.\n-\n The following macros and functions can be used on a @code{NAMESPACE_DECL}:\n \n @ftable @code"}, {"sha": "7f1a79c2b20bc19956c8ec999d517e404b124b68", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -174,7 +174,7 @@ in the following sections.\n -fno-elide-constructors @gol\n -fno-enforce-eh-specs  -fexternal-templates @gol\n -falt-external-templates @gol\n--ffor-scope  -fno-for-scope  -fno-gnu-keywords  -fno-honor-std @gol\n+-ffor-scope  -fno-for-scope  -fno-gnu-keywords @gol\n -fno-implicit-templates @gol\n -fno-implicit-inline-templates @gol\n -fno-implement-inlines  -fms-extensions @gol\n@@ -1356,19 +1356,6 @@ Do not recognize @code{typeof} as a keyword, so that code can use this\n word as an identifier.  You can use the keyword @code{__typeof__} instead.\n @option{-ansi} implies @option{-fno-gnu-keywords}.\n \n-@item -fno-honor-std\n-@opindex fno-honor-std\n-Ignore @code{namespace std}, instead of treating it as a real namespace.\n-With this switch, the compiler will ignore\n-@code{namespace-declarations}, @code{using-declarations},\n-@code{using-directives}, and @code{namespace-names}, if they involve\n-@code{std}.\n-\n-This option is only useful if you have manually compiled the C++\n-run-time library with the same switch.  Otherwise, your programs will\n-not link.  The use of this option is not recommended, and the option may\n-be removed from a future version of G++.\n-\n @item -fno-implicit-templates\n @opindex fno-implicit-templates\n Never emit code for non-inline templates which are instantiated"}, {"sha": "d5ae377b1b03550d9b5669ac2bf5c18d6daab441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,3 +1,10 @@\n+2001-08-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tKill -fhonor-std.\n+\t* g++.old-deja/g++.ns/ns14.C: Remove special options.\n+\t* g++.old-deja/g++.other/std1.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb133.C: Likewise. Add using directive.\n+\n 2001-08-01  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* lib/g77.exp:  Load gcc-defs.exp for common procedures"}, {"sha": "4049139eae9feede389f9ea5fa81c12645f3d248", "filename": "gcc/testsuite/g++.old-deja/g++.ns/ns14.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.ns%2Fns14.C?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,4 +1,4 @@\n-//Special g++ Options: -fhonor-std\n+\n namespace std{ \n   int f(){\n     return 0;"}, {"sha": "dc36519d0506c12770291c4e99713d052290c53d", "filename": "gcc/testsuite/g++.old-deja/g++.other/std1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstd1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstd1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstd1.C?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,5 +1,4 @@\n // Build don't link:\n-// Special g++ Options: -fhonor-std\n // Origin: Mark Mitchell <mark@codesourcery.com>\n \n extern \"C\" int memcmp (const void * __s1,"}, {"sha": "e2b25f6ef08cf473e5727d1dd6ef481214771ccd", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb133.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb133.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dbb6023c73cfb340b24d8c81cf31f41f8f1805b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb133.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb133.C?ref=1dbb6023c73cfb340b24d8c81cf31f41f8f1805b", "patch": "@@ -1,9 +1,10 @@\n // Build don't link:\n-// Special g++ Options: -fno-honor-std\n // Gives ICE 109\n // From: Klaus-Georg Adams <Klaus-Georg.Adams@chemie.uni-karlsruhe.de> \n // Reported against EGCS snaps 98/06/28.\n \n+using namespace std;\n+\n int main()\n {\n \ttry {"}]}