{"sha": "a1a28bb5826211ea2253231186417fb3cb6de6dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFhMjhiYjU4MjYyMTFlYTIyNTMyMzExODY0MTdmYjNjYjZkZTZkZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-24T13:55:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-24T13:55:44Z"}, "message": "2832.cc: New.\n\n2004-08-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc: New.\n\t* testsuite/27_io/basic_istringstream/str/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/cons/wchar_t/3.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/str/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/str/wchar_t/2.cc: Likewise.\n\n\t* testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc: Trim excess\n\tnewlines.\n\t* testsuite/27_io/basic_istringstream/str/char/1.cc: Likewise.\n\nFrom-SVN: r86481", "tree": {"sha": "e876538af6b9729f74495c59da19f7d7a63a721a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e876538af6b9729f74495c59da19f7d7a63a721a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1a28bb5826211ea2253231186417fb3cb6de6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a28bb5826211ea2253231186417fb3cb6de6dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1a28bb5826211ea2253231186417fb3cb6de6dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1a28bb5826211ea2253231186417fb3cb6de6dd/comments", "author": null, "committer": null, "parents": [{"sha": "72cdc5438dbf7b9531d3b9e5a34714b9c7a20806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72cdc5438dbf7b9531d3b9e5a34714b9c7a20806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72cdc5438dbf7b9531d3b9e5a34714b9c7a20806"}], "stats": {"total": 406, "additions": 395, "deletions": 11}, "files": [{"sha": "94abb59bd56c7fd8dbd38f7f0cfdc5627a7b511c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -1,7 +1,20 @@\n+2004-08-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc: New.\n+\t* testsuite/27_io/basic_istringstream/str/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/cons/wchar_t/3.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/str/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_ostringstream/str/wchar_t/2.cc: Likewise.\n+\n+\t* testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc: Trim excess\n+\tnewlines.\n+\t* testsuite/27_io/basic_istringstream/str/char/1.cc: Likewise.\n+\n 2004-08-22  Matthias Klose  <doko@debian.org>\n \n-        * config/abi/m68k-linux-gnu/baseline_symbols.txt: New.\n-        * config/abi/sparc-linux-gnu/baseline_symbols.txt: Update to 3.4.0.\n+\t* config/abi/m68k-linux-gnu/baseline_symbols.txt: New.\n+\t* config/abi/sparc-linux-gnu/baseline_symbols.txt: Update to 3.4.0.\n \n 2004-08-23  Paolo Carlini  <pcarlini@suse.de>\n \n@@ -1399,8 +1412,8 @@\n 2004-05-18  Jan Beulich  <jbeulich@novell.com>\n  \n         PR libstdc++/15489\n-        * scripts/create_testsuite_files: Also find source files through\n-          symbolic links.\n+\t* scripts/create_testsuite_files: Also find source files through\n+\tsymbolic links.\n \n 2004-05-18  Jan Beulich  <jbeulich@novell.com>\n "}, {"sha": "445ede3d43baff9f1ced1f62a8e66f5619b0d6b9", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/rdbuf/char/2832.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fchar%2F2832.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -1,6 +1,6 @@\n // 2000-01-10 bkoz\n \n-// Copyright (C) 2000, 2001, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -73,6 +73,3 @@ int main()\n   test02();\n   return 0;\n }\n-\n-\n-"}, {"sha": "7f6d8e38a7989b289096d631a81d5f50fa6a96e1", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/rdbuf/wchar_t/2832.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Frdbuf%2Fwchar_t%2F2832.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.2.2 member functions (istringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::wstreambuf*\n+active_buffer(std::wios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t* strlit01 = L\"fuck war\";\n+  const std::wstring str00;\n+  const std::wstring str01(strlit01);\n+  std::wstring str02;\n+  std::wstringbuf sbuf(str01);\n+  std::wstreambuf* pbasebuf0 = &sbuf;\n+\n+  std::wistringstream sstrm1;\n+  VERIFY( sstrm1.str() == str00 );\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::wstringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::wstreambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::wstringbuf* const buf2 = sstrm1.rdbuf();\n+  std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // derived rdbuf() returns the original buf, so str() doesn't change.\n+  VERIFY( sstrm1.str() != str01 );\n+  VERIFY( sstrm1.str() == str00 );\n+  // however, casting the active streambuf to a stringbuf shows what's up:\n+  std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+  str02 = psbuf->str();\n+  VERIFY( str02 == str01 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "f95b4a2bd7a8cf55c784e72be3a34b10ea8ffd96", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/str/char/1.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fchar%2F1.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -75,6 +75,3 @@ int main()\n   test01();\n   return 0;\n }\n-\n-\n-"}, {"sha": "d64bf12888992553c98278d0b9e7d5d19c46fd4e", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/str/wchar_t/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fstr%2Fwchar_t%2F1.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.2.2 member functions (istringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wistringstream is01;\n+  const std::wstring str00; \n+  const std::wstring str01 = L\"123\";\n+  std::wstring str02;\n+  const int i01 = 123;\n+  int a, b;\n+\n+  std::ios_base::iostate state1, state2, statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = is01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  is01.str(str01);\n+  str02 = is01.str();\n+  VERIFY( str01 == str02 );\n+  state1 = is01.rdstate();\n+  is01 >> a;\n+  state2 = is01.rdstate();\n+  VERIFY( a == i01 );\n+  // 22.2.2.1.2 num_get virtual functions\n+  // p 13\n+  // in any case, if stage 2 processing was terminated by the test for\n+  // in == end then err != ios_base::eofbit is performed.\n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+\n+  is01.str(str01);\n+  is01 >> b;\n+  VERIFY( b != a ); \n+  // as is01.good() is false, istream::sentry blocks extraction.\n+\n+  is01.clear();\n+  state1 = is01.rdstate();\n+  is01 >> b;\n+  state2 = is01.rdstate();\n+  VERIFY( b == a ); \n+  VERIFY( state1 != state2 );\n+  VERIFY( state2 == stateeof ); \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c763275b1efd041989486658d980f2d227e12c68", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/wchar_t/3.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F3.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,62 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 03: sanity checks for strings, stringbufs\n+void\n+test03()\n+{\n+  bool test __attribute__((unused)) = false;\n+\n+  // Empty string sanity check.\n+  std::wstring str01;\n+  std::wstring::iterator __i_start = str01.begin();\n+  std::wstring::iterator __i_end = str01.end();\n+  std::wstring::size_type len = str01.size();\n+  test = __i_start == __i_end;\n+  VERIFY( len == 0 );\n+\n+  // Full string sanity check.\n+  std::wstring str02(L\"these golden days, i spend waiting for you:\\n\"\n+\t\t     L\"Betty Carter on Verve with I'm Yours and You're Mine.\");\n+  __i_start = str02.begin();\n+  __i_end = str02.end();\n+  len = str02.size();\n+  VERIFY( __i_start != __i_end );\n+  VERIFY( len != 0 );\n+ \n+  // Test an empty ostringstream for sanity.\n+  std::wostringstream ostrstream0;\n+  std::wstring str03 = ostrstream0.str();\n+  __i_start = str03.begin();\n+  __i_end = str03.end();\n+  len = str03.size();\n+  VERIFY( __i_start == __i_end );\n+  VERIFY( len == 0 );\n+  VERIFY( str01 == str03 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "b0d7456430521b7815140bc5ffc629f0a410f89b", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/rdbuf/wchar_t/2832.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Frdbuf%2Fwchar_t%2F2832.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void \n+redirect_buffer(std::wios& stream, std::wstreambuf* new_buf) \n+{ stream.rdbuf(new_buf); }\n+\n+std::wstreambuf*\n+active_buffer(std::wios& stream)\n+{ return stream.rdbuf(); }\n+\n+// libstdc++/2832\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  const wchar_t* strlit01 = L\"fuck war\";\n+  const std::wstring str00;\n+  const std::wstring str01(strlit01);\n+  std::wstring str02;\n+  std::wstringbuf sbuf(str01);\n+  std::wstreambuf* pbasebuf0 = &sbuf;\n+\n+  std::wostringstream sstrm1;\n+  VERIFY( sstrm1.str() == str00 );\n+  // derived rdbuf() always returns original streambuf, even though\n+  // it's no longer associated with the stream.\n+  std::wstringbuf* const buf1 = sstrm1.rdbuf();\n+  // base rdbuf() returns the currently associated streambuf\n+  std::wstreambuf* pbasebuf1 = active_buffer(sstrm1);\n+  redirect_buffer(sstrm1, &sbuf);\n+  std::wstringbuf* const buf2 = sstrm1.rdbuf();\n+  std::wstreambuf* pbasebuf2 = active_buffer(sstrm1);\n+  VERIFY( buf1 == buf2 ); \n+  VERIFY( pbasebuf1 != pbasebuf2 );\n+  VERIFY( pbasebuf2 == pbasebuf0 );\n+\n+  // derived rdbuf() returns the original buf, so str() doesn't change.\n+  VERIFY( sstrm1.str() != str01 );\n+  VERIFY( sstrm1.str() == str00 );\n+  // however, casting the active streambuf to a stringbuf shows what's up:\n+  std::wstringbuf* psbuf = dynamic_cast<std::wstringbuf*>(pbasebuf2);\n+  str02 = psbuf->str();\n+  VERIFY( str02 == str01 );\n+\n+  // How confusing and non-intuitive is this?\n+  // These semantics are a joke, a serious defect, and incredibly lame.\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "b89f07f4181ef78bb4c0e1760b5f88c819cb0968", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/wchar_t/1.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F1.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wostringstream os01;\n+  const std::wstring str00; \n+  const std::wstring str01 = L\"123\";\n+  std::wstring str02;\n+\n+  std::ios_base::iostate statefail, stateeof;\n+  statefail = std::ios_base::failbit;\n+  stateeof = std::ios_base::eofbit;\n+\n+  // string str() const\n+  str02 = os01.str();\n+  VERIFY( str00 == str02 );\n+\n+  // void str(const basic_string&)\n+  os01.str(str01);\n+  str02 = os01.str();\n+  VERIFY( str01 == str02 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5856302bf9cec751d240999818e4a584d7d8ce72", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/str/wchar_t/2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1a28bb5826211ea2253231186417fb3cb6de6dd/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fstr%2Fwchar_t%2F2.cc?ref=a1a28bb5826211ea2253231186417fb3cb6de6dd", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.3.2 member functions (ostringstream_members)\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// user-reported error\n+class derived_oss: public std::wostringstream \n+{\n+public:\n+  derived_oss() : std::wostringstream() { }\n+};\n+\n+void\n+test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  derived_oss yy;\n+  yy << L\"buena vista social club\\n\";\n+  VERIFY( yy.str() == std::wstring(L\"buena vista social club\\n\") );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}]}