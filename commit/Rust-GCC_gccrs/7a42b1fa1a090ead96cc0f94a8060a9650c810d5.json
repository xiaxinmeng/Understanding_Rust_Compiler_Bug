{"sha": "7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "node_id": "C_kwDOANBUbNoAKDdhNDJiMWZhMWEwOTBlYWQ5NmNjMGY5NGE4MDYwYTk2NTBjODEwZDU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-18T13:10:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-18T15:40:03Z"}, "message": "libstdc++: Simplify constraints for std::any construction [PR104242]\n\nPartially revert r12-4190-g6da36b7d0e43b6f9281c65c19a025d4888a25b2d\nbecause using __and_<..., is_copy_constructible<T>> when T is incomplete\nresults in an error about deriving from is_copy_constructible<T> when\nthat is incomplete. I don't know how to fix that, so this simply\nrestores the previous constraint which worked in this case (even though\nI think it's technically undefined to use is_copy_constructible<T> with\nincomplete T). This doesn't restore exactly what we had before, but uses\nthe is_copy_constructible_v and __is_in_place_type_v variable templates\ninstead of the ::value member.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104242\n\t* include/std/any (any(T&&)): Revert change to constraints.\n\t* testsuite/20_util/any/cons/104242.cc: New test.", "tree": {"sha": "a577fe38755c4497eb089140b70bf3c54fcd4c28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a577fe38755c4497eb089140b70bf3c54fcd4c28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a42b1fa1a090ead96cc0f94a8060a9650c810d5/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5086228cd79f7baa7d8d3c4bba04a69ab756253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5086228cd79f7baa7d8d3c4bba04a69ab756253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5086228cd79f7baa7d8d3c4bba04a69ab756253"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "a6770e8f2358178299a8e1c9c6043751109d77e5", "filename": "libstdc++-v3/include/std/any", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a42b1fa1a090ead96cc0f94a8060a9650c810d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a42b1fa1a090ead96cc0f94a8060a9650c810d5/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fany?ref=7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "patch": "@@ -185,8 +185,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     /// Construct with a copy of @p __value as the contained object.\n     template <typename _Tp, typename _VTp = _Decay_if_not_any<_Tp>,\n \t      typename _Mgr = _Manager<_VTp>,\n-\t      typename = _Require<__not_<__is_in_place_type<_VTp>>,\n-\t\t\t\t  is_copy_constructible<_VTp>>>\n+\t      enable_if_t<is_copy_constructible_v<_VTp>\n+\t\t\t  && !__is_in_place_type_v<_VTp>, bool> = true>\n       any(_Tp&& __value)\n       : _M_manager(&_Mgr::_S_manage)\n       {"}, {"sha": "8d5868b7ff92e2f6f93d41bf7e9c99615f00c05d", "filename": "libstdc++-v3/testsuite/20_util/any/cons/104242.cc", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a42b1fa1a090ead96cc0f94a8060a9650c810d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F104242.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a42b1fa1a090ead96cc0f94a8060a9650c810d5/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F104242.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F104242.cc?ref=7a42b1fa1a090ead96cc0f94a8060a9650c810d5", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++17 } }\n+\n+// PR libstdc++/104242 - Class with constructor from std::any is not copyable\n+\n+#include <any>\n+#include <type_traits>\n+\n+struct A {\n+    A(const A&) = default;\n+    explicit A(std::any value);\n+};\n+static_assert(std::is_copy_constructible_v<A>);"}]}