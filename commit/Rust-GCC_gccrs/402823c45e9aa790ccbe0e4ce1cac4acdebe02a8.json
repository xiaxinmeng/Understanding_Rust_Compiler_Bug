{"sha": "402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAyODIzYzQ1ZTlhYTc5MGNjYmUwZTRjZTFjYWM0YWNkZWJlMDJhOA==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@albatross.co.nz", "date": "2000-05-10T21:59:16Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2000-05-10T21:59:16Z"}, "message": "Imported 5.0 release version.\n\n2000-05-11  Bryce McKinlay  <bryce@albatross.co.nz>\n\n        Imported 5.0 release version.\n        * acinclude.m4: Increment version to 5.0.\n\nFrom-SVN: r33832", "tree": {"sha": "acd5ad4441f2b173be71279a47ebb3ad91ab054b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd5ad4441f2b173be71279a47ebb3ad91ab054b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/comments", "author": null, "committer": null, "parents": [{"sha": "f035fae1edefcf14efe3ad5404ae14807f17acc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f035fae1edefcf14efe3ad5404ae14807f17acc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f035fae1edefcf14efe3ad5404ae14807f17acc7"}], "stats": {"total": 63, "additions": 50, "deletions": 13}, "files": [{"sha": "628559087a04a40695a8da3f09d7ef200d607e1d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -1,3 +1,8 @@\n+2000-05-11  Bryce McKinlay  <bryce@albatross.co.nz>\n+\n+\tImported 5.0 release version.\n+\t* acinclude.m4: Increment version to 5.0.\n+\n 2000-05-07  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tImported version 5.0alpha7."}, {"sha": "083c7a7259dc59d67d619be1f14f5c8306b32236", "filename": "boehm-gc/README", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FREADME?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -3,7 +3,7 @@ Copyright (c) 1991-1996 by Xerox Corporation.  All rights reserved.\n Copyright (c) 1996-1999 by Silicon Graphics.  All rights reserved.\n Copyright (c) 1999 by Hewlett-Packard Company. All rights reserved.\n \n-  [ This version of the collector modified by Cygnus Solutions.\n+  [ This version of the collector modified for use in libgcj.\n     See the file ChangeLog for details ]\n \n THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n@@ -15,7 +15,7 @@ Permission to modify the code and to distribute modified code is granted,\n provided the above notices are retained, and a notice that the code was\n modified is included with the above copyright notice.\n \n-This is version 5.0alpha7 of a conservative garbage collector for C and C++.\n+This is version 5.0 of a conservative garbage collector for C and C++.\n \n You might find a more recent version of this at\n \n@@ -1602,7 +1602,17 @@ Since 5.0alpha6:\n    be done on other platforms, too.  Since I can't test those, that'll\n    wait until after 5.0.\n \n+Since 5.0alpha7:\n+ - Fixed threadlibs.c for linux threads.  -DUSE_LD_WRAP was broken and\n+   -ldl was omitted.  Fixed Linux stack finding code to handle\n+   -DUSE_LD_WRAP correctly.\n+ - Added MSWIN32 exception handler around marker, so that the collector\n+   can recover from root segments that are unmapped during the collection.\n+   This caused occasional failures under Windows 98, and may also be\n+   an issue under Windows NT/2000.\n+\n To do:\n+ - Integrate Linux/SPARC fixes.\n  - Very large root set sizes (> 16 MB or so) could cause the collector\n    to abort with an unexpected mark stack overflow.  (Thanks again to\n    Peter Chubb.)  NOT YET FIXED.  Workaround is to increase the initial"}, {"sha": "27478584e6d282c79becef8f1b5fd75e895ab2da", "filename": "boehm-gc/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Facinclude.m4?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -31,7 +31,7 @@ AC_SUBST(boehm_gc_basedir)\n \n AC_CANONICAL_HOST\n \n-AM_INIT_AUTOMAKE(boehm-gc, 5.0a7, no-define)\n+AM_INIT_AUTOMAKE(boehm-gc, 5.0, no-define)\n \n # FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n # copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We"}, {"sha": "797bddc166573b23f71fee8665a2a0a9d5dae48a", "filename": "boehm-gc/aclocal.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Faclocal.m4?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -43,7 +43,7 @@ AC_SUBST(boehm_gc_basedir)\n \n AC_CANONICAL_HOST\n \n-AM_INIT_AUTOMAKE(boehm-gc, 5.0a6, no-define)\n+AM_INIT_AUTOMAKE(boehm-gc, 5.0, no-define)\n \n # FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n # copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We"}, {"sha": "461d98979571b27e5eba840f929b6b74c5478283", "filename": "boehm-gc/mark.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fmark.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fmark.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fmark.c?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -252,6 +252,17 @@ static void alloc_mark_stack();\n GC_bool GC_mark_some(cold_gc_frame)\n ptr_t cold_gc_frame;\n {\n+#ifdef MSWIN32\n+  /* Windows 98 appears to asynchronously create and remove writable\t*/\n+  /* memory mappings, for reasons we haven't yet understood.  Since\t*/\n+  /* we look for writable regions to determine the root set, we may\t*/\n+  /* try to mark from an address range that disappeared since we \t*/\n+  /* started the collection.  Thus we have to recover from faults here. */\n+  /* This code does not appear to be necessary for Windows 95/NT/2000.\t*/ \n+  /* Note that this code should never generate an incremental GC write\t*/\n+  /* fault.\t\t\t\t\t\t\t\t*/\n+  __try {\n+#endif\n     switch(GC_mark_state) {\n     \tcase MS_NONE:\n     \t    return(FALSE);\n@@ -342,6 +353,20 @@ ptr_t cold_gc_frame;\n     \t    ABORT(\"GC_mark_some: bad state\");\n     \t    return(FALSE);\n     }\n+#ifdef MSWIN32\n+  } __except (GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?\n+\t    EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {\n+#   ifdef PRINTSTATS\n+\tGC_printf0(\"Caught ACCESS_VIOLATION in marker. \"\n+\t\t   \"Memory mapping disappeared.\\n\");\n+#   endif /* PRINTSTATS */\n+    /* We have bad roots on the stack.  Discard mark stack.  \t*/\n+    /* Rescan from marked objects.  Redetermine roots.\t\t*/\n+    GC_invalidate_mark_state();\t\n+    scan_ptr = 0;\n+    return FALSE;\n+  }\n+#endif /* MSWIN32 */\n }\n \n "}, {"sha": "b169eebcbcf88798190fb78ba6ba39b1cbb0b666", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -667,7 +667,7 @@ ptr_t GC_get_stack_base()\n     size_t i, buf_offset = 0;\n \n     f = open(\"/proc/self/stat\", O_RDONLY);\n-    if (f < 0 || read(f, stat_buf, STAT_BUF_SIZE) < 2 * STAT_SKIP) {\n+    if (f < 0 || STAT_READ(f, stat_buf, STAT_BUF_SIZE) < 2 * STAT_SKIP) {\n \tABORT(\"Couldn't read /proc/self/stat\");\n     }\n     c = stat_buf[buf_offset++];"}, {"sha": "7379454c420ce5501c4093844bd58a9e93fdbe32", "filename": "boehm-gc/threadlibs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fthreadlibs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fthreadlibs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fthreadlibs.c?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -5,11 +5,11 @@ int main()\n {\n #   if defined(LINUX_THREADS)\n #     ifdef USE_LD_WRAP\n-\tprintf(\"-Wl,\\\"--wrap read\\\" -Wl,\\\"--wrap dlopen\\\" \"\n-\t       \"-Wl,\\\"--wrap pthread_create\\\" -Wl,\\\"--wrap pthread_join\\\" \"\n-\t       \"-Wl,\\\"--wrap pthread_sigmask\\\" -lpthread\\n\");\n+\tprintf(\"-Wl,--wrap -Wl,read -Wl,--wrap -Wl,dlopen \"\n+\t       \"-Wl,--wrap -Wl,pthread_create -Wl,--wrap -Wl,pthread_join \"\n+\t       \"-Wl,--wrap -Wl,pthread_sigmask -lpthread -ldl\\n\");\n #     else\n-\tprintf(\"-lpthread\\n\");\n+\tprintf(\"-lpthread -ldl\\n\");\n #     endif\n #   endif\n #   if defined(IRIX_THREADS)"}, {"sha": "2c69e44dd31d4a3fab047ac4fe3a20454cfd02fb", "filename": "boehm-gc/version.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/402823c45e9aa790ccbe0e4ce1cac4acdebe02a8/boehm-gc%2Fversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fversion.h?ref=402823c45e9aa790ccbe0e4ce1cac4acdebe02a8", "patch": "@@ -1,12 +1,9 @@\n #define GC_VERSION_MAJOR 5\n #define GC_VERSION_MINOR 0\n-#define GC_ALPHA_VERSION 7\n+#define GC_ALPHA_VERSION GC_NOT_ALPHA\n \n #   define GC_NOT_ALPHA 0xff\n \n-/* This is really an unreleased version which doesn't have a real version */\n-/* number.\t\t\t\t\t\t\t\t  */\n-\n #ifndef GC_NO_VERSION_VAR\n \n unsigned GC_version = ((GC_VERSION_MAJOR << 16) | (GC_VERSION_MINOR << 8) | GC_ALPHA_VERSION);"}]}