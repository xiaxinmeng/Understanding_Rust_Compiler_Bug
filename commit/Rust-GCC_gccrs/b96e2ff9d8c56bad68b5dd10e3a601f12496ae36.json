{"sha": "b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "node_id": "C_kwDOANBUbNoAKGI5NmUyZmY5ZDhjNTZiYWQ2OGI1ZGQxMGUzYTYwMWYxMjQ5NmFlMzY", "commit": {"author": {"name": "Michael de Lang", "email": "kingoipo@gmail.com", "date": "2020-02-26T22:43:45Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-11-16T16:43:20Z"}, "message": "libstdc++: Implement constexpr std::basic_string for C++20\n\nThis is only supported for the cxx11 ABI, not for COW strings.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/basic_string.h (basic_string, operator\"\"s): Add\n\tconstexpr for C++20.\n\t(basic_string::basic_string(basic_string&&)): Only copy\n\tinitialized portion of the buffer.\n\t(basic_string::basic_string(basic_string&&, const Alloc&)):\n\tLikewise.\n\t* include/bits/basic_string.tcc (basic_string): Add constexpr\n\tfor C++20.\n\t(basic_string::swap(basic_string&)): Only copy initialized\n\tportions of the buffers.\n\t(basic_string::_M_replace): Add constexpr implementation that\n\tdoesn't depend on pointer comparisons.\n\t* include/bits/cow_string.h: Adjust comment.\n\t* include/ext/type_traits.h (__is_null_pointer): Add constexpr.\n\t* include/std/string (erase, erase_if): Add constexpr.\n\t* include/std/version (__cpp_lib_constexpr_string): Update\n\tvalue.\n\t* testsuite/21_strings/basic_string/cons/char/constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string/cons/wchar_t/constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string/literals/constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string/modifiers/constexpr.cc: New test.\n\t* testsuite/21_strings/basic_string/modifiers/swap/char/constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string/modifiers/swap/wchar_t/constexpr.cc:\n\tNew test.\n\t* testsuite/21_strings/basic_string/version.cc: New test.", "tree": {"sha": "bb97dfa04d0f580e96565e79ce5b705aa9c47814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb97dfa04d0f580e96565e79ce5b705aa9c47814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/comments", "author": {"login": "Oipo", "id": 212134, "node_id": "MDQ6VXNlcjIxMjEzNA==", "avatar_url": "https://avatars.githubusercontent.com/u/212134?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Oipo", "html_url": "https://github.com/Oipo", "followers_url": "https://api.github.com/users/Oipo/followers", "following_url": "https://api.github.com/users/Oipo/following{/other_user}", "gists_url": "https://api.github.com/users/Oipo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Oipo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Oipo/subscriptions", "organizations_url": "https://api.github.com/users/Oipo/orgs", "repos_url": "https://api.github.com/users/Oipo/repos", "events_url": "https://api.github.com/users/Oipo/events{/privacy}", "received_events_url": "https://api.github.com/users/Oipo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59434931fb658f0a180ce3f3305cb3987ed2b56d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59434931fb658f0a180ce3f3305cb3987ed2b56d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59434931fb658f0a180ce3f3305cb3987ed2b56d"}], "stats": {"total": 902, "additions": 869, "deletions": 33}, "files": [{"sha": "b6945f1cdfbec14943cecc5f77a8784dc8af0c13", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 252, "deletions": 22, "changes": 274, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -57,12 +57,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n #ifdef __cpp_lib_is_constant_evaluated\n-// Support P1032R1 in C++20 (but not P0980R1 yet).\n-# define __cpp_lib_constexpr_string 201811L\n+// Support P0980R1 in C++20.\n+# define __cpp_lib_constexpr_string 201907L\n #elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n // Support P0426R1 changes to char_traits in C++17.\n # define __cpp_lib_constexpr_string 201611L\n-#elif __cplusplus > 201703L\n #endif\n \n   /**\n@@ -131,6 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  _Res>;\n \n       // Allows an implicit conversion to __sv_type.\n+      _GLIBCXX20_CONSTEXPR\n       static __sv_type\n       _S_to_string_view(__sv_type __svt) noexcept\n       { return __svt; }\n@@ -141,7 +141,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // is provided.\n       struct __sv_wrapper\n       {\n-\texplicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n+\t_GLIBCXX20_CONSTEXPR explicit\n+\t__sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }\n+\n \t__sv_type _M_sv;\n       };\n \n@@ -151,6 +153,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __svw  string view wrapper.\n        *  @param  __a  Allocator to use.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       basic_string(__sv_wrapper __svw, const _Alloc& __a)\n       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }\n@@ -163,9 +166,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())\n \t: allocator_type(__a), _M_p(__dat) { }\n #else\n+\t_GLIBCXX20_CONSTEXPR\n \t_Alloc_hider(pointer __dat, const _Alloc& __a)\n \t: allocator_type(__a), _M_p(__dat) { }\n \n+\t_GLIBCXX20_CONSTEXPR\n \t_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())\n \t: allocator_type(std::move(__a)), _M_p(__dat) { }\n #endif\n@@ -184,18 +189,22 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tsize_type        _M_allocated_capacity;\n       };\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_data(pointer __p)\n       { _M_dataplus._M_p = __p; }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_length(size_type __length)\n       { _M_string_length = __length; }\n \n+      _GLIBCXX20_CONSTEXPR\n       pointer\n       _M_data() const\n       { return _M_dataplus._M_p; }\n \n+      _GLIBCXX20_CONSTEXPR\n       pointer\n       _M_local_data()\n       {\n@@ -206,6 +215,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       const_pointer\n       _M_local_data() const\n       {\n@@ -216,39 +226,46 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #endif\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_capacity(size_type __capacity)\n       { _M_allocated_capacity = __capacity; }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_set_length(size_type __n)\n       {\n \t_M_length(__n);\n \ttraits_type::assign(_M_data()[__n], _CharT());\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       bool\n       _M_is_local() const\n       { return _M_data() == _M_local_data(); }\n \n       // Create & Destroy\n+      _GLIBCXX20_CONSTEXPR\n       pointer\n       _M_create(size_type&, size_type);\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_dispose()\n       {\n \tif (!_M_is_local())\n \t  _M_destroy(_M_allocated_capacity);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_destroy(size_type __size) throw()\n       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }\n \n       // _M_construct_aux is used to implement the 21.3.1 para 15 which\n       // requires special behaviour if _InIterator is an integral type\n       template<typename _InIterator>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct_aux(_InIterator __beg, _InIterator __end,\n \t\t\t std::__false_type)\n@@ -260,15 +277,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 438. Ambiguity in the \"do the right thing\" clause\n       template<typename _Integer>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)\n \t{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_construct_aux_2(size_type __req, _CharT __c)\n       { _M_construct(__req, __c); }\n \n       template<typename _InIterator>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct(_InIterator __beg, _InIterator __end)\n \t{\n@@ -278,24 +298,29 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       // For Input Iterators, used in istreambuf_iterators, etc.\n       template<typename _InIterator>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct(_InIterator __beg, _InIterator __end,\n \t\t     std::input_iterator_tag);\n \n       // For forward_iterators up to random_access_iterators, used for\n       // string::iterator, _CharT*, etc.\n       template<typename _FwdIterator>\n+\t_GLIBCXX20_CONSTEXPR\n         void\n         _M_construct(_FwdIterator __beg, _FwdIterator __end,\n \t\t     std::forward_iterator_tag);\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_construct(size_type __req, _CharT __c);\n \n+      _GLIBCXX20_CONSTEXPR\n       allocator_type&\n       _M_get_allocator()\n       { return _M_dataplus; }\n \n+      _GLIBCXX20_CONSTEXPR\n       const allocator_type&\n       _M_get_allocator() const\n       { return _M_dataplus; }\n@@ -316,6 +341,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \tstruct __enable_if_not_native_iterator<_Tp, false> { };\n #endif\n \n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       _M_check(size_type __pos, const char* __s) const\n       {\n@@ -326,6 +352,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \treturn __pos;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_check_length(size_type __n1, size_type __n2, const char* __s) const\n       {\n@@ -335,6 +362,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n \n       // NB: _M_limit doesn't check for a bad __pos value.\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT\n       {\n@@ -352,6 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       // When __n = 1 way faster than the general multichar\n       // traits_type::copy/move/assign.\n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)\n       {\n@@ -361,6 +390,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  traits_type::copy(__d, __s, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_move(_CharT* __d, const _CharT* __s, size_type __n)\n       {\n@@ -370,6 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  traits_type::move(__d, __s, __n);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_assign(_CharT* __d, size_type __n, _CharT __c)\n       {\n@@ -382,31 +413,37 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // _S_copy_chars is a separate template to permit specialization\n       // to optimize for the common case of pointers as iterators.\n       template<class _Iterator>\n+\t_GLIBCXX20_CONSTEXPR\n         static void\n         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)\n         {\n \t  for (; __k1 != __k2; ++__k1, (void)++__p)\n \t    traits_type::assign(*__p, *__k1); // These types are off.\n \t}\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT\n       { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)\n       _GLIBCXX_NOEXCEPT\n       { _S_copy_chars(__p, __k1.base(), __k2.base()); }\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT\n       { _S_copy(__p, __k1, __k2 - __k1); }\n \n+      _GLIBCXX20_CONSTEXPR\n       static void\n       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)\n       _GLIBCXX_NOEXCEPT\n       { _S_copy(__p, __k1, __k2 - __k1); }\n \n+      _GLIBCXX20_CONSTEXPR\n       static int\n       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT\n       {\n@@ -420,13 +457,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t  return int(__d);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_assign(const basic_string&);\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n \t\tsize_type __len2);\n \n+      _GLIBCXX20_CONSTEXPR\n       void\n       _M_erase(size_type __pos, size_type __n);\n \n@@ -438,6 +478,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Default constructor creates an empty string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string()\n       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)\n       : _M_dataplus(_M_local_data())\n@@ -446,6 +487,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Construct an empty string using allocator @a a.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       explicit\n       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT\n       : _M_dataplus(_M_local_data(), __a)\n@@ -455,6 +497,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Construct string with copy of value of @a __str.\n        *  @param  __str  Source string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str)\n       : _M_dataplus(_M_local_data(),\n \t\t    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))\n@@ -468,6 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __pos  Index of first character to copy from.\n        *  @param  __a  Allocator to use.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str, size_type __pos,\n \t\t   const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n@@ -483,6 +527,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __pos  Index of first character to copy from.\n        *  @param  __n  Number of characters to copy.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str, size_type __pos,\n \t\t   size_type __n)\n       : _M_dataplus(_M_local_data())\n@@ -499,6 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __n  Number of characters to copy.\n        *  @param  __a  Allocator to use.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str, size_type __pos,\n \t\t   size_type __n, const _Alloc& __a)\n       : _M_dataplus(_M_local_data(), __a)\n@@ -517,6 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  NB: @a __s must have at least @a __n characters, &apos;\\\\0&apos;\n        *  has no special meaning.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const _CharT* __s, size_type __n,\n \t\t   const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n@@ -532,6 +579,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // 3076. basic_string CTAD ambiguity\n       template<typename = _RequireAllocator<_Alloc>>\n #endif\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       {\n@@ -552,6 +600,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // 3076. basic_string CTAD ambiguity\n       template<typename = _RequireAllocator<_Alloc>>\n #endif\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_construct(__n, __c); }\n@@ -564,13 +613,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  The newly-created string contains the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(basic_string&& __str) noexcept\n       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))\n       {\n \tif (__str._M_is_local())\n \t  {\n \t    traits_type::copy(_M_local_buf, __str._M_local_buf,\n-\t\t\t      _S_local_capacity + 1);\n+\t\t\t      __str.length() + 1);\n \t  }\n \telse\n \t  {\n@@ -591,22 +641,25 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __l  std::initializer_list of characters.\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_construct(__l.begin(), __l.end()); }\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string(const basic_string& __str, const _Alloc& __a)\n       : _M_dataplus(_M_local_data(), __a)\n       { _M_construct(__str.begin(), __str.end()); }\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string(basic_string&& __str, const _Alloc& __a)\n       noexcept(_Alloc_traits::_S_always_equal())\n       : _M_dataplus(_M_local_data(), __a)\n       {\n \tif (__str._M_is_local())\n \t  {\n \t    traits_type::copy(_M_local_buf, __str._M_local_buf,\n-\t\t\t      _S_local_capacity + 1);\n+\t\t\t      __str.length() + 1);\n \t    _M_length(__str.length());\n \t    __str._M_set_length(0);\n \t  }\n@@ -639,6 +692,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #else\n       template<typename _InputIterator>\n #endif\n+\t_GLIBCXX20_CONSTEXPR\n         basic_string(_InputIterator __beg, _InputIterator __end,\n \t\t     const _Alloc& __a = _Alloc())\n \t: _M_dataplus(_M_local_data(), __a)\n@@ -653,6 +707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __a   Allocator to use.\n        */\n       template<typename _Tp, typename = _If_sv<_Tp, void>>\n+\t_GLIBCXX20_CONSTEXPR\n \tbasic_string(const _Tp& __t, size_type __pos, size_type __n,\n \t\t     const _Alloc& __a = _Alloc())\n \t: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }\n@@ -663,6 +718,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __a  Allocator to use (default is default allocator).\n        */\n       template<typename _Tp, typename = _If_sv<_Tp, void>>\n+\t_GLIBCXX20_CONSTEXPR\n \texplicit\n \tbasic_string(const _Tp& __t, const _Alloc& __a = _Alloc())\n \t: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }\n@@ -671,13 +727,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Destroy the string instance.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       ~basic_string()\n       { _M_dispose(); }\n \n       /**\n        *  @brief  Assign the value of @a str to this string.\n        *  @param  __str  Source string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator=(const basic_string& __str)\n       {\n@@ -688,6 +746,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Copy contents of @a s into this string.\n        *  @param  __s  Source null-terminated string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator=(const _CharT* __s)\n       { return this->assign(__s); }\n@@ -699,6 +758,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Assigning to a character makes this string length 1 and\n        *  (*this)[0] == @a c.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator=(_CharT __c)\n       {\n@@ -716,6 +776,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 2063. Contradictory requirements for string move assignment\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator=(basic_string&& __str)\n       noexcept(_Alloc_traits::_S_nothrow_move())\n@@ -784,6 +845,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Set value to string constructed from initializer %list.\n        *  @param  __l  std::initializer_list.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator=(initializer_list<_CharT> __l)\n       {\n@@ -798,6 +860,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __svt  An object convertible to string_view.\n        */\n      template<typename _Tp>\n+       _GLIBCXX20_CONSTEXPR\n        _If_sv<_Tp, basic_string&>\n        operator=(const _Tp& __svt)\n        { return this->assign(__svt); }\n@@ -806,6 +869,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Convert to a string_view.\n        *  @return A string_view.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       operator __sv_type() const noexcept\n       { return __sv_type(data(), size()); }\n #endif // C++17\n@@ -815,6 +879,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write iterator that points to the first character in\n        *  the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       begin() _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data()); }\n@@ -823,6 +888,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_iterator\n       begin() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data()); }\n@@ -831,6 +897,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write iterator that points one past the last\n        *  character in the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       end() _GLIBCXX_NOEXCEPT\n       { return iterator(_M_data() + this->size()); }\n@@ -839,6 +906,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_iterator\n       end() const _GLIBCXX_NOEXCEPT\n       { return const_iterator(_M_data() + this->size()); }\n@@ -848,6 +916,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  character in the %string.  Iteration is done in reverse element\n        *  order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reverse_iterator\n       rbegin() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->end()); }\n@@ -857,6 +926,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to the last character in the %string.  Iteration is done in\n        *  reverse element order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       rbegin() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->end()); }\n@@ -866,6 +936,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first character in the %string.  Iteration is done in reverse\n        *  element order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reverse_iterator\n       rend() _GLIBCXX_NOEXCEPT\n       { return reverse_iterator(this->begin()); }\n@@ -875,6 +946,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to one before the first character in the %string.  Iteration\n        *  is done in reverse element order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       rend() const _GLIBCXX_NOEXCEPT\n       { return const_reverse_iterator(this->begin()); }\n@@ -884,6 +956,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points to the first\n        *  character in the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_iterator\n       cbegin() const noexcept\n       { return const_iterator(this->_M_data()); }\n@@ -892,6 +965,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) iterator that points one past the\n        *  last character in the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_iterator\n       cend() const noexcept\n       { return const_iterator(this->_M_data() + this->size()); }\n@@ -901,6 +975,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to the last character in the %string.  Iteration is done in\n        *  reverse element order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(this->end()); }\n@@ -910,6 +985,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  to one before the first character in the %string.  Iteration\n        *  is done in reverse element order.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(this->begin()); }\n@@ -919,17 +995,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       // Capacity:\n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       size() const _GLIBCXX_NOEXCEPT\n       { return _M_string_length; }\n \n       ///  Returns the number of characters in the string, not including any\n       ///  null-termination.\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       length() const _GLIBCXX_NOEXCEPT\n       { return _M_string_length; }\n \n       ///  Returns the size() of the largest possible %string.\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       max_size() const _GLIBCXX_NOEXCEPT\n       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }\n@@ -944,6 +1023,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  %string's current size the %string is truncated, otherwise\n        *  the %string is extended and new elements are %set to @a __c.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       resize(size_type __n, _CharT __c);\n \n@@ -957,6 +1037,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  are default-constructed.  For basic types such as char, this means\n        *  setting them to 0.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       resize(size_type __n)\n       { this->resize(__n, _CharT()); }\n@@ -965,6 +1046,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n       ///  A non-binding request to reduce capacity() to size().\n+      _GLIBCXX20_CONSTEXPR\n       void\n       shrink_to_fit() noexcept\n       { reserve(); }\n@@ -982,6 +1064,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns the total number of characters that the %string can hold\n        *  before needing to allocate more memory.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       capacity() const _GLIBCXX_NOEXCEPT\n       {\n@@ -1006,6 +1089,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  prevent a possible reallocation of memory and copying of %string\n        *  data.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       reserve(size_type __res_arg);\n \n@@ -1015,12 +1099,14 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus > 201703L\n       [[deprecated(\"use shrink_to_fit() instead\")]]\n #endif\n+      _GLIBCXX20_CONSTEXPR\n       void\n       reserve();\n \n       /**\n        *  Erases the string, making it empty.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       clear() _GLIBCXX_NOEXCEPT\n       { _M_set_length(0); }\n@@ -1029,7 +1115,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns true if the %string is empty.  Equivalent to \n        *  <code>*this == \"\"</code>.\n        */\n-      _GLIBCXX_NODISCARD bool\n+      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR\n+      bool\n       empty() const _GLIBCXX_NOEXCEPT\n       { return this->size() == 0; }\n \n@@ -1044,6 +1131,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reference\n       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n@@ -1061,6 +1149,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range lookups are not defined. (For checked lookups\n        *  see at().)\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reference\n       operator[](size_type __pos)\n       {\n@@ -1082,6 +1171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first checked that it is in the range of the string.  The function\n        *  throws out_of_range if the check fails.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reference\n       at(size_type __n) const\n       {\n@@ -1103,6 +1193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  first checked that it is in the range of the string.  The function\n        *  throws out_of_range if the check fails.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reference\n       at(size_type __n)\n       {\n@@ -1119,6 +1210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the first\n        *  element of the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reference\n       front() noexcept\n       {\n@@ -1130,6 +1222,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the first\n        *  element of the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reference\n       front() const noexcept\n       {\n@@ -1141,6 +1234,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read/write reference to the data at the last\n        *  element of the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       reference\n       back() noexcept\n       {\n@@ -1152,6 +1246,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Returns a read-only (constant) reference to the data at the\n        *  last element of the %string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       const_reference\n       back() const noexcept\n       {\n@@ -1166,6 +1261,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __str  The string to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator+=(const basic_string& __str)\n       { return this->append(__str); }\n@@ -1175,6 +1271,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __s  The C string to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator+=(const _CharT* __s)\n       { return this->append(__s); }\n@@ -1184,6 +1281,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __c  The character to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator+=(_CharT __c)\n       {\n@@ -1197,6 +1295,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __l  The initializer_list of characters to be appended.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       operator+=(initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.size()); }\n@@ -1209,6 +1308,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \toperator+=(const _Tp& __svt)\n \t{ return this->append(__svt); }\n@@ -1219,6 +1319,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __str  The string to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const basic_string& __str)\n       { return _M_append(__str._M_data(), __str.size()); }\n@@ -1236,6 +1337,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  than the number of available characters in @a __str, the\n        *  remainder of @a __str is appended.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const basic_string& __str, size_type __pos, size_type __n = npos)\n       { return _M_append(__str._M_data()\n@@ -1248,6 +1350,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __n  The number of characters to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const _CharT* __s, size_type __n)\n       {\n@@ -1261,6 +1364,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __s  The C string to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(const _CharT* __s)\n       {\n@@ -1278,6 +1382,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Appends __n copies of __c to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(size_type __n, _CharT __c)\n       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }\n@@ -1288,6 +1393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __l  The initializer_list of characters to append.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       append(initializer_list<_CharT> __l)\n       { return this->append(__l.begin(), __l.size()); }\n@@ -1304,6 +1410,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\t_GLIBCXX20_CONSTEXPR\n #else\n       template<class _InputIterator>\n #endif\n@@ -1318,6 +1425,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n         _If_sv<_Tp, basic_string&>\n         append(const _Tp& __svt)\n         {\n@@ -1333,6 +1441,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n         _If_sv<_Tp, basic_string&>\n \tappend(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n@@ -1347,6 +1456,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @brief  Append a single character.\n        *  @param __c  Character to append.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       push_back(_CharT __c)\n       {\n@@ -1362,6 +1472,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param  __str  Source string to use.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(const basic_string& __str)\n       {\n@@ -1407,6 +1518,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This function sets this string to the exact contents of @a __str.\n        *  @a __str is a valid, but unspecified string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(basic_string&& __str)\n       noexcept(_Alloc_traits::_S_nothrow_move())\n@@ -1430,6 +1542,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  is larger than the number of available characters in @a\n        *  __str, the remainder of @a __str is used.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(const basic_string& __str, size_type __pos, size_type __n = npos)\n       { return _M_replace(size_type(0), this->size(), __str._M_data()\n@@ -1446,6 +1559,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  characters of @a __s.  If @a __n is is larger than the number of\n        *  available characters in @a __s, the remainder of @a __s is used.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(const _CharT* __s, size_type __n)\n       {\n@@ -1462,6 +1576,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  The data is copied, so there is no dependence on @a __s once the\n        *  function returns.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(const _CharT* __s)\n       {\n@@ -1479,6 +1594,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This function sets the value of this string to @a __n copies of\n        *  character @a __c.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(size_type __n, _CharT __c)\n       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }\n@@ -1494,6 +1610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\t_GLIBCXX20_CONSTEXPR\n #else\n       template<class _InputIterator>\n #endif\n@@ -1507,6 +1624,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __l  The initializer_list of characters to assign.\n        *  @return  Reference to this string.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       assign(initializer_list<_CharT> __l)\n       { return this->assign(__l.begin(), __l.size()); }\n@@ -1519,6 +1637,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \tassign(const _Tp& __svt)\n \t{\n@@ -1534,6 +1653,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \tassign(const _Tp& __svt, size_type __pos, size_type __n = npos)\n \t{\n@@ -1561,6 +1681,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  length_error is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       insert(const_iterator __p, size_type __n, _CharT __c)\n       {\n@@ -1605,6 +1726,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       */\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\t_GLIBCXX20_CONSTEXPR\n \titerator\n         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)\n         {\n@@ -1639,6 +1761,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __l  The initializer_list of characters to insert.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n        */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       insert(const_iterator __p, initializer_list<_CharT> __l)\n       { return this->insert(__p, __l.begin(), __l.end()); }\n@@ -1666,6 +1789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  length_error is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str)\n       { return this->replace(__pos1, size_type(0),\n@@ -1689,6 +1813,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  beyond the end of @a __str, out_of_range is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       insert(size_type __pos1, const basic_string& __str,\n \t     size_type __pos2, size_type __n = npos)\n@@ -1712,6 +1837,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  end(), out_of_range is thrown.  The value of the string\n        *  doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       insert(size_type __pos, const _CharT* __s, size_type __n)\n       { return this->replace(__pos, size_type(0), __s, __n); }\n@@ -1731,6 +1857,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  thrown.  The value of the string doesn't change if an error is\n        *  thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       insert(size_type __pos, const _CharT* __s)\n       {\n@@ -1755,6 +1882,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       insert(size_type __pos, size_type __n, _CharT __c)\n       { return _M_replace_aux(_M_check(__pos, \"basic_string::insert\"),\n@@ -1773,6 +1901,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       insert(__const_iterator __p, _CharT __c)\n       {\n@@ -1790,6 +1919,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \tinsert(size_type __pos, const _Tp& __svt)\n \t{\n@@ -1806,6 +1936,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \tinsert(size_type __pos1, const _Tp& __svt,\n \t       size_type __pos2, size_type __n = npos)\n@@ -1833,6 +1964,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  out_of_range is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       erase(size_type __pos = 0, size_type __n = npos)\n       {\n@@ -1852,6 +1984,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Removes the character at @a __position from this string. The value\n        *  of the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       erase(__const_iterator __position)\n       {\n@@ -1871,6 +2004,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Removes the characters in the range [first,last) from this string.\n        *  The value of the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       iterator\n       erase(__const_iterator __first, __const_iterator __last)\n       {\n@@ -1890,6 +2024,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  The string must be non-empty.\n        */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       pop_back() noexcept\n       {\n@@ -1915,6 +2050,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  is thrown.  The value of the string doesn't change if an\n        *  error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(size_type __pos, size_type __n, const basic_string& __str)\n       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }\n@@ -1937,6 +2073,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  result exceeds max_size(), length_error is thrown.  The value of the\n        *  string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2 = npos)\n@@ -1962,6 +2099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  thrown.  The value of the string doesn't change if an error\n        *  is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2)\n@@ -1987,6 +2125,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  length_error is thrown.  The value of the string doesn't\n        *  change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(size_type __pos, size_type __n1, const _CharT* __s)\n       {\n@@ -2011,6 +2150,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  thrown.  The value of the string doesn't change if an error\n        *  is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)\n       { return _M_replace_aux(_M_check(__pos, \"basic_string::replace\"),\n@@ -2029,6 +2169,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  exceeds max_size(), length_error is thrown.  The value of\n        *  the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const basic_string& __str)\n@@ -2049,6 +2190,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  The value of the string doesn't change if an error is\n        *  thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const _CharT* __s, size_type __n)\n@@ -2071,6 +2213,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  result exceeds max_size(), length_error is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)\n       {\n@@ -2092,6 +2235,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  result exceeds max_size(), length_error is thrown.  The\n        *  value of the string doesn't change if an error is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,\n \t      _CharT __c)\n@@ -2119,6 +2263,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n #if __cplusplus >= 201103L\n       template<class _InputIterator,\n \t       typename = std::_RequireInputIter<_InputIterator>>\n+\t_GLIBCXX20_CONSTEXPR\n         basic_string&\n         replace(const_iterator __i1, const_iterator __i2,\n \t\t_InputIterator __k1, _InputIterator __k2)\n@@ -2149,6 +2294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       // Specializations for the common case of pointer and iterator:\n       // useful to avoid the overhead of temporary buffering in _M_replace.\n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      _CharT* __k1, _CharT* __k2)\n@@ -2160,6 +2306,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t     __k1, __k2 - __k1);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const _CharT* __k1, const _CharT* __k2)\n@@ -2171,6 +2318,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t     __k1, __k2 - __k1);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      iterator __k1, iterator __k2)\n@@ -2182,6 +2330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t     __k1.base(), __k2 - __k1);\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       replace(__const_iterator __i1, __const_iterator __i2,\n \t      const_iterator __k1, const_iterator __k2)\n@@ -2208,6 +2357,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  The value of the string doesn't change if an error is\n        *  thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string& replace(const_iterator __i1, const_iterator __i2,\n \t\t\t    initializer_list<_CharT> __l)\n       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }\n@@ -2222,6 +2372,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \treplace(size_type __pos, size_type __n, const _Tp& __svt)\n \t{\n@@ -2239,6 +2390,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \treplace(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos)\n@@ -2260,6 +2412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Reference to this string.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, basic_string&>\n \treplace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)\n \t{\n@@ -2270,25 +2423,30 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     private:\n       template<class _Integer>\n+\t_GLIBCXX20_CONSTEXPR\n \tbasic_string&\n \t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n \t\t\t    _Integer __n, _Integer __val, __true_type)\n         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }\n \n       template<class _InputIterator>\n+\t_GLIBCXX20_CONSTEXPR\n \tbasic_string&\n \t_M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n \t\t\t    _InputIterator __k1, _InputIterator __k2,\n \t\t\t    __false_type);\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n \t\t     _CharT __c);\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n \t\t const size_type __len2);\n \n+      _GLIBCXX20_CONSTEXPR\n       basic_string&\n       _M_append(const _CharT* __s, size_type __n);\n \n@@ -2306,6 +2464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  C string @a __s.  If @a __pos is %greater than size(),\n        *  out_of_range is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;\n \n@@ -2316,6 +2475,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  Exchanges the contents of this string with that of @a __s in constant\n        *  time.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       void\n       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;\n \n@@ -2326,6 +2486,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This is a handle to internal data.  Do not modify or dire things may\n        *  happen.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       const _CharT*\n       c_str() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n@@ -2338,6 +2499,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  allows modifying the contents use @c &str[0] instead,\n        *  (or in C++17 the non-const @c str.data() overload).\n       */\n+      _GLIBCXX20_CONSTEXPR\n       const _CharT*\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data(); }\n@@ -2349,6 +2511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  This is a pointer to the character sequence held by the string.\n        *  Modifying the characters in the sequence is allowed.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       _CharT*\n       data() noexcept\n       { return _M_data(); }\n@@ -2357,6 +2520,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       /**\n        *  @brief  Return copy of allocator used to construct this string.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       allocator_type\n       get_allocator() const _GLIBCXX_NOEXCEPT\n       { return _M_get_allocator(); }\n@@ -2373,6 +2537,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it begins.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2387,6 +2552,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it begins.  If not\n        *  found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2400,6 +2566,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of first occurrence.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2419,6 +2586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  __s within this string.  If found, returns the index where\n        *  it begins.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       {\n@@ -2436,6 +2604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;\n \n@@ -2449,6 +2618,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  __str within this string.  If found, returns the index where\n        *  it begins.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2462,6 +2632,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of start of last occurrence.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \trfind(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2483,6 +2654,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it begins.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2497,6 +2669,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @a __s within this string.  If found, returns the index\n        *  where it begins.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(const _CharT* __s, size_type __pos = npos) const\n       {\n@@ -2514,6 +2687,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;\n \n@@ -2528,6 +2702,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2542,6 +2717,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of first occurrence.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_first_of(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2563,6 +2739,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2577,6 +2754,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  characters of @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(const _CharT* __s, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2597,6 +2775,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Note: equivalent to find(__c, __pos).\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT\n       { return this->find(__c, __pos); }\n@@ -2612,6 +2791,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2626,6 +2806,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of last occurrence.\n       */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_last_of(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2647,6 +2828,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2661,6 +2843,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  characters of @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(const _CharT* __s, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2681,6 +2864,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *\n        *  Note: equivalent to rfind(__c, __pos).\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT\n       { return this->rfind(__c, __pos); }\n@@ -2695,6 +2879,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  in @a __str within this string.  If found, returns the index where it\n        *  was found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const basic_string& __str, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2710,6 +2895,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        */\n       template<typename _Tp>\n \t_If_sv<_Tp, size_type>\n+\t_GLIBCXX20_CONSTEXPR\n \tfind_first_not_of(const _Tp& __svt, size_type __pos = 0) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n \t{\n@@ -2730,6 +2916,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos,\n \t\t\tsize_type __n) const _GLIBCXX_NOEXCEPT;\n@@ -2744,6 +2931,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  contained in @a __s within this string.  If found, returns\n        *  the index where it was found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(const _CharT* __s, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT\n@@ -2762,6 +2950,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  other than @a __c within this string.  If found, returns the\n        *  index where it was found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_first_not_of(_CharT __c, size_type __pos = 0) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2777,6 +2966,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const basic_string& __str, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2791,6 +2981,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Index of last occurrence.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, size_type>\n \tfind_last_not_of(const _Tp& __svt, size_type __pos = npos) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2812,6 +3003,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If found, returns the index where it was found.  If not found,\n        *  returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos,\n \t\t       size_type __n) const _GLIBCXX_NOEXCEPT;\n@@ -2826,6 +3018,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  returns the index where it was found.  If not found, returns\n        *  npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(const _CharT* __s, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT\n@@ -2844,6 +3037,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @a __c within this string.  If found, returns the index where it was\n        *  found.  If not found, returns npos.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       size_type\n       find_last_not_of(_CharT __c, size_type __pos = npos) const\n       _GLIBCXX_NOEXCEPT;\n@@ -2860,6 +3054,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  short, use the remainder of the characters.  If @a __pos is\n        *  beyond the end of the string, out_of_range is thrown.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       basic_string\n       substr(size_type __pos = 0, size_type __n = npos) const\n       { return basic_string(*this,\n@@ -2879,6 +3074,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If the result of the comparison is nonzero returns it,\n        *  otherwise the shorter one is ordered first.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(const basic_string& __str) const\n       {\n@@ -2899,6 +3095,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(const _Tp& __svt) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2923,6 +3120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos, size_type __n, const _Tp& __svt) const\n \tnoexcept(is_same<_Tp, __sv_type>::value)\n@@ -2942,6 +3140,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @return  Integer < 0, 0, or > 0.\n        */\n       template<typename _Tp>\n+\t_GLIBCXX20_CONSTEXPR\n \t_If_sv<_Tp, int>\n \tcompare(size_type __pos1, size_type __n1, const _Tp& __svt,\n \t\tsize_type __pos2, size_type __n2 = npos) const\n@@ -2972,6 +3171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  result of the comparison is nonzero returns it, otherwise\n        *  the shorter one is ordered first.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n, const basic_string& __str) const;\n \n@@ -2998,6 +3198,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  If the result of the comparison is nonzero returns it,\n        *  otherwise the shorter one is ordered first.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos1, size_type __n1, const basic_string& __str,\n \t      size_type __pos2, size_type __n2 = npos) const;\n@@ -3016,6 +3217,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  comparison is nonzero returns it, otherwise the shorter one is\n        *  ordered first.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;\n \n@@ -3040,6 +3242,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  the comparison is nonzero returns it, otherwise the shorter\n        *  one is ordered first.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s) const;\n \n@@ -3067,46 +3270,47 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  NB: s must have at least n2 characters, &apos;\\\\0&apos; has\n        *  no special meaning.\n       */\n+      _GLIBCXX20_CONSTEXPR\n       int\n       compare(size_type __pos, size_type __n1, const _CharT* __s,\n \t      size_type __n2) const;\n \n-#if __cplusplus > 201703L\n-      bool\n+#if __cplusplus >= 202002L\n+      constexpr bool\n       starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n-      bool\n+      constexpr bool\n       starts_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n-      bool\n+      constexpr bool\n       starts_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).starts_with(__x); }\n \n-      bool\n+      constexpr bool\n       ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n-      bool\n+      constexpr bool\n       ends_with(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n \n-      bool\n+      constexpr bool\n       ends_with(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).ends_with(__x); }\n #endif // C++20\n \n #if __cplusplus > 202002L\n-      bool\n+      constexpr bool\n       contains(basic_string_view<_CharT, _Traits> __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n-      bool\n+      constexpr bool\n       contains(_CharT __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n \n-      bool\n+      constexpr bool\n       contains(const _CharT* __x) const noexcept\n       { return __sv_type(this->data(), this->size()).contains(__x); }\n #endif // C++23\n@@ -3160,6 +3364,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with value of @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -3176,6 +3381,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with value of @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT,_Traits,_Alloc>\n     operator+(const _CharT* __lhs,\n \t      const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n@@ -3187,6 +3393,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT,_Traits,_Alloc>\n     operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);\n \n@@ -3197,6 +3404,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      const _CharT* __rhs)\n@@ -3213,6 +3421,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  New string with @a __lhs followed by @a __rhs.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)\n     {\n@@ -3225,18 +3434,21 @@ _GLIBCXX_END_NAMESPACE_CXX11\n \n #if __cplusplus >= 201103L\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     { return std::move(__lhs.append(__rhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     { return std::move(__rhs.insert(0, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n@@ -3259,24 +3471,28 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     { return std::move(__rhs.insert(0, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(_CharT __lhs,\n \t      basic_string<_CharT, _Traits, _Alloc>&& __rhs)\n     { return std::move(__rhs.insert(0, 1, __lhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      const _CharT* __rhs)\n     { return std::move(__lhs.append(__rhs)); }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline basic_string<_CharT, _Traits, _Alloc>\n     operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,\n \t      _CharT __rhs)\n@@ -3291,13 +3507,15 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     _GLIBCXX_NOEXCEPT\n     { return __lhs.compare(__rhs) == 0; }\n \n   template<typename _CharT>\n+    _GLIBCXX20_CONSTEXPR\n     inline\n     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type\n     operator==(const basic_string<_CharT>& __lhs,\n@@ -3313,6 +3531,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n@@ -3327,6 +3546,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept\n@@ -3341,6 +3561,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *\t       greater than, or incomparable with `__rhs`.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline auto\n     operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t\tconst _CharT* __rhs) noexcept\n@@ -3558,6 +3779,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n    *  Exchanges the contents of @a __lhs and @a __rhs in constant time.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     inline void\n     swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -4034,33 +4256,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   {\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wliteral-suffix\"\n-    _GLIBCXX_DEFAULT_ABI_TAG\n+\n+#if __cpp_lib_constexpr_string >= 201907L\n+# define _GLIBCXX_STRING_CONSTEXPR constexpr\n+#else\n+# define _GLIBCXX_STRING_CONSTEXPR\n+#endif\n+\n+    _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR\n     inline basic_string<char>\n     operator\"\"s(const char* __str, size_t __len)\n     { return basic_string<char>{__str, __len}; }\n \n-    _GLIBCXX_DEFAULT_ABI_TAG\n+    _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR\n     inline basic_string<wchar_t>\n     operator\"\"s(const wchar_t* __str, size_t __len)\n     { return basic_string<wchar_t>{__str, __len}; }\n \n #ifdef _GLIBCXX_USE_CHAR8_T\n-    _GLIBCXX_DEFAULT_ABI_TAG\n+    _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR\n     inline basic_string<char8_t>\n     operator\"\"s(const char8_t* __str, size_t __len)\n     { return basic_string<char8_t>{__str, __len}; }\n #endif\n \n-    _GLIBCXX_DEFAULT_ABI_TAG\n+    _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR\n     inline basic_string<char16_t>\n     operator\"\"s(const char16_t* __str, size_t __len)\n     { return basic_string<char16_t>{__str, __len}; }\n \n-    _GLIBCXX_DEFAULT_ABI_TAG\n+    _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR\n     inline basic_string<char32_t>\n     operator\"\"s(const char32_t* __str, size_t __len)\n     { return basic_string<char32_t>{__str, __len}; }\n \n+#undef _GLIBCXX_STRING_CONSTEXPR\n #pragma GCC diagnostic pop\n   } // inline namespace string_literals\n   } // inline namespace literals"}, {"sha": "5743770b42a8db2980f18094534366d1091eaa3d", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -54,6 +54,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     basic_string<_CharT, _Traits, _Alloc>::npos;\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     swap(basic_string& __s) _GLIBCXX_NOEXCEPT\n@@ -70,24 +71,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      {\n \t\t_CharT __tmp_data[_S_local_capacity + 1];\n \t\ttraits_type::copy(__tmp_data, __s._M_local_buf,\n-\t\t\t\t  _S_local_capacity + 1);\n+\t\t\t\t  __s.length() + 1);\n \t\ttraits_type::copy(__s._M_local_buf, _M_local_buf,\n-\t\t\t\t  _S_local_capacity + 1);\n+\t\t\t\t  length() + 1);\n \t\ttraits_type::copy(_M_local_buf, __tmp_data,\n-\t\t\t\t  _S_local_capacity + 1);\n+\t\t\t\t  __s.length() + 1);\n \t      }\n \t    else if (__s.length())\n \t      {\n \t\ttraits_type::copy(_M_local_buf, __s._M_local_buf,\n-\t\t\t\t  _S_local_capacity + 1);\n+\t\t\t\t  __s.length() + 1);\n \t\t_M_length(__s.length());\n \t\t__s._M_set_length(0);\n \t\treturn;\n \t      }\n \t    else if (length())\n \t      {\n \t\ttraits_type::copy(__s._M_local_buf, _M_local_buf,\n-\t\t\t\t  _S_local_capacity + 1);\n+\t\t\t\t  length() + 1);\n \t\t__s._M_length(length());\n \t\t_M_set_length(0);\n \t\treturn;\n@@ -97,7 +98,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  {\n \t    const size_type __tmp_capacity = __s._M_allocated_capacity;\n \t    traits_type::copy(__s._M_local_buf, _M_local_buf,\n-\t\t\t      _S_local_capacity + 1);\n+\t\t\t      length() + 1);\n \t    _M_data(__s._M_data());\n \t    __s._M_data(__s._M_local_buf);\n \t    _M_capacity(__tmp_capacity);\n@@ -108,7 +109,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  if (__s._M_is_local())\n \t    {\n \t      traits_type::copy(_M_local_buf, __s._M_local_buf,\n-\t\t\t\t_S_local_capacity + 1);\n+\t\t\t\t__s.length() + 1);\n \t      __s._M_data(_M_data());\n \t      _M_data(_M_local_buf);\n \t    }\n@@ -128,6 +129,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::pointer\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_create(size_type& __capacity, size_type __old_capacity)\n@@ -159,6 +161,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // pointers, calling for a different coding style.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InIterator>\n+      _GLIBCXX20_CONSTEXPR\n       void\n       basic_string<_CharT, _Traits, _Alloc>::\n       _M_construct(_InIterator __beg, _InIterator __end,\n@@ -202,6 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InIterator>\n+      _GLIBCXX20_CONSTEXPR\n       void\n       basic_string<_CharT, _Traits, _Alloc>::\n       _M_construct(_InIterator __beg, _InIterator __end,\n@@ -233,6 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_construct(size_type __n, _CharT __c)\n@@ -250,6 +255,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_assign(const basic_string& __str)\n@@ -276,6 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     reserve(size_type __res)\n@@ -296,6 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,\n@@ -320,6 +328,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_erase(size_type __pos, size_type __n)\n@@ -333,6 +342,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     reserve()\n@@ -368,6 +378,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     void\n     basic_string<_CharT, _Traits, _Alloc>::\n     resize(size_type __n, _CharT __c)\n@@ -380,6 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_append(const _CharT* __s, size_type __n)\n@@ -400,6 +412,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIterator>\n+      _GLIBCXX20_CONSTEXPR\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n       _M_replace_dispatch(const_iterator __i1, const_iterator __i2,\n@@ -415,6 +428,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n@@ -444,6 +458,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n     _M_replace(size_type __pos, size_type __len1, const _CharT* __s,\n@@ -459,6 +474,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  pointer __p = this->_M_data() + __pos;\n \n \t  const size_type __how_much = __old_size - __pos - __len1;\n+#if __cpp_lib_is_constant_evaluated\n+\t  if (__builtin_is_constant_evaluated())\n+\t    {\n+\t      auto __newp = this->_M_get_allocator().allocate(__new_size);\n+\t      _S_copy(__newp, this->_M_data(), __pos);\n+\t      _S_copy(__newp + __pos, __s, __len2);\n+\t      _S_copy(__newp + __pos + __len2, __p + __len1, __how_much);\n+\t      _S_copy(this->_M_data(), __newp, __new_size);\n+\t      this->_M_get_allocator().deallocate(__newp, __new_size);\n+\t    }\n+\t  else\n+#endif\n \t  if (_M_disjunct(__s))\n \t    {\n \t      if (__how_much && __len1 != __len2)\n@@ -502,6 +529,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     copy(_CharT* __s, size_type __n, size_type __pos) const\n@@ -535,7 +563,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else\n \t__p = _M_data();\n       struct _Terminator {\n-\t~_Terminator() { _M_this->_M_set_length(_M_r); }\n+\tconstexpr ~_Terminator() { _M_this->_M_set_length(_M_r); }\n \tbasic_string* _M_this;\n \tsize_type _M_r;\n       };\n@@ -548,7 +576,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #endif  // _GLIBCXX_USE_CXX11_ABI\n    \n+#if __cpp_lib_constexpr_string >= 201907L\n+# define _GLIBCXX_STRING_CONSTEXPR constexpr\n+#else\n+# define _GLIBCXX_STRING_CONSTEXPR\n+#endif\n+\n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(const _CharT* __lhs,\n \t      const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n@@ -569,6 +604,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX20_CONSTEXPR\n     basic_string<_CharT, _Traits, _Alloc>\n     operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     {\n@@ -587,6 +623,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -623,6 +660,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n@@ -641,6 +679,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -663,6 +702,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     rfind(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n@@ -680,6 +720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -696,6 +737,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -718,6 +760,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -731,6 +774,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n@@ -742,6 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n@@ -764,6 +809,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(_CharT __c, size_type __pos) const _GLIBCXX_NOEXCEPT\n@@ -784,6 +830,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     int\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n, const basic_string& __str) const\n@@ -799,6 +846,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     int\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(size_type __pos1, size_type __n1, const basic_string& __str,\n@@ -817,6 +865,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     int\n     basic_string<_CharT, _Traits, _Alloc>::\n     compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT\n@@ -832,6 +881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     int\n     basic_string <_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n1, const _CharT* __s) const\n@@ -848,6 +898,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n+    _GLIBCXX_STRING_CONSTEXPR\n     int\n     basic_string <_CharT, _Traits, _Alloc>::\n     compare(size_type __pos, size_type __n1, const _CharT* __s,\n@@ -863,6 +914,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __r;\n     }\n \n+#undef _GLIBCXX_STRING_CONSTEXPR\n+\n   // 21.3.7.9 basic_string::getline and operators\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_istream<_CharT, _Traits>&"}, {"sha": "bafca7bb31386d9e949211d6d660fa93b8283c2a", "filename": "libstdc++-v3/include/bits/cow_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcow_string.h?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -35,7 +35,7 @@\n #if ! _GLIBCXX_USE_CXX11_ABI\n \n #ifdef __cpp_lib_is_constant_evaluated\n-// Support P1032R1 in C++20 (but not P0980R1 yet).\n+// Support P1032R1 in C++20 (but not P0980R1 for COW strings).\n # define __cpp_lib_constexpr_string 201811L\n #elif __cplusplus >= 201703L && _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED\n // Support P0426R1 changes to char_traits in C++17."}, {"sha": "3b41cf307a4c983f6a94aa24d621109a0e2ad45b", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -148,17 +148,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // For use in string and vstring.\n   template<typename _Type>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __is_null_pointer(_Type* __ptr)\n     { return __ptr == 0; }\n \n   template<typename _Type>\n+    _GLIBCXX_CONSTEXPR\n     inline bool\n     __is_null_pointer(_Type)\n     { return false; }\n \n #if __cplusplus >= 201103L\n-  inline bool\n+  constexpr bool\n   __is_null_pointer(std::nullptr_t)\n   { return true; }\n #endif"}, {"sha": "1c5d1800c1533d33e3c0da512c29a8a11d7dba8d", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -116,6 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _CharT, typename _Traits, typename _Alloc,\n \t   typename _Predicate>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase_if(basic_string<_CharT, _Traits, _Alloc>& __cont, _Predicate __pred)\n     {\n@@ -129,6 +130,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc, typename _Up>\n+    _GLIBCXX20_CONSTEXPR\n     inline typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     erase(basic_string<_CharT, _Traits, _Alloc>& __cont, const _Up& __value)\n     {"}, {"sha": "fd7e12585439c0a5a3eb4be48148d43e4daa3bb7", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -232,7 +232,11 @@\n #define __cpp_lib_constexpr_memory 201811L\n #define __cpp_lib_constexpr_numeric 201911L\n #ifdef __cpp_lib_is_constant_evaluated\n-# define __cpp_lib_constexpr_string 201811L\n+# if _GLIBCXX_USE_CXX11_ABI\n+#  define __cpp_lib_constexpr_string 201907L\n+# else\n+#  define __cpp_lib_constexpr_string 201811L\n+# endif\n #endif\n #define __cpp_lib_constexpr_string_view 201811L\n #define __cpp_lib_constexpr_tuple 201811L"}, {"sha": "191ff1cb3799f55e2dacf4c9ccb0ba56c2e90ea2", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/char/constexpr.cc", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fchar%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,174 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+\n+#ifndef __cpp_lib_constexpr_string\n+# error \"Feature-test macro for constexpr std::string missing in <string>\"\n+#elif __cpp_lib_constexpr_string != 201907L\n+# error \"Feature-test macro for constexpr std::string has wrong value in <string>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+using C = char;\n+using T = std::char_traits<C>;\n+\n+template<typename T>\n+struct Alloc : std::allocator<T>\n+{\n+  using std::allocator<T>::allocator;\n+\n+  constexpr explicit Alloc(int p) : personality(p) { }\n+\n+  template<typename U>\n+    constexpr Alloc(const Alloc<U>& a) : personality(a.personality) { }\n+\n+  int personality = 0;\n+\n+  constexpr Alloc select_on_container_copy_construction() const\n+  { return Alloc(-1); }\n+\n+  constexpr bool operator==(const Alloc& a) const noexcept\n+  { return personality == a.personality; }\n+};\n+\n+constexpr bool\n+test_default_ctor()\n+{\n+  std::basic_string<C> s0;\n+  VERIFY( s0.empty() );\n+\n+  std::basic_string<C> s1(std::allocator<C>{});\n+  VERIFY( s1.empty() );\n+\n+  std::basic_string<C, T, Alloc<C>> s2;\n+  VERIFY( s2.empty() );\n+\n+  std::basic_string<C, T, Alloc<C>> s3(Alloc<C>(3));\n+  VERIFY( s3.empty() );\n+  VERIFY( s3.get_allocator().personality == 3 );\n+\n+  return true;\n+}\n+\n+static_assert( test_default_ctor() );\n+\n+constexpr bool\n+test_cstr()\n+{\n+  const C cs[] = \"This has an embedded \\0 null\";\n+  const auto len = (sizeof(cs) - 1)/sizeof(C);\n+\n+  std::basic_string<C> s1(cs);\n+  VERIFY( s1.length() == 21 );\n+  std::basic_string<C> s2(cs, std::allocator<C>{});\n+  VERIFY( s2 == s1 );\n+\n+  std::basic_string<C> s3(cs, len);\n+  VERIFY( s3.length() == len );\n+  VERIFY( s3[len] == '\\0' );\n+  std::basic_string<C> s4(cs, len, std::allocator<C>{});\n+  VERIFY( s4 == s3 );\n+\n+  std::basic_string<C, T, Alloc<C>> s5(cs);\n+  VERIFY( s5 == std::basic_string_view<C>(s1) );\n+\n+  std::basic_string<C, T, Alloc<C>> s6(cs, Alloc<C>(6));\n+  VERIFY( s6 == std::basic_string_view<C>(s1) );\n+  VERIFY( s6.get_allocator().personality == 6 );\n+\n+  std::basic_string<C, T, Alloc<C>> s7(cs, len, Alloc<C>(7));\n+  VERIFY( s7 == std::basic_string_view<C>(s3) );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  return true;\n+}\n+\n+static_assert( test_cstr() );\n+\n+constexpr bool\n+test_copy()\n+{\n+  const std::basic_string<C> short_string = \"sh\";\n+  const std::basic_string<C> long_string = \"string longer than the SSO buffer\";\n+\n+  std::basic_string<C> s1 = short_string;\n+  VERIFY( s1 == short_string );\n+  std::basic_string<C> s2(short_string, s1.get_allocator());\n+  VERIFY( s2 == short_string );\n+\n+  std::basic_string<C> s3 = long_string;\n+  VERIFY( s3 == long_string );\n+  std::basic_string<C> s4(long_string, s1.get_allocator());\n+  VERIFY( s4 == long_string );\n+\n+  std::basic_string<C, T, Alloc<C>> a_short_string = short_string.c_str();\n+  std::basic_string<C, T, Alloc<C>> a_long_string = long_string.c_str();\n+\n+  std::basic_string<C, T, Alloc<C>> s5(a_short_string);\n+  VERIFY( s5 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s6(a_short_string, s5.get_allocator());\n+  VERIFY( s6 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s7(a_short_string, Alloc<C>(7));\n+  VERIFY( s7 == a_short_string );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  std::basic_string<C, T, Alloc<C>> s8 = a_long_string;\n+  VERIFY( s8 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s9(a_long_string, s5.get_allocator());\n+  VERIFY( s9 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s10(a_long_string, Alloc<C>(10));\n+  VERIFY( s10 == a_long_string );\n+  VERIFY( s10.get_allocator().personality == 10 );\n+\n+  return true;\n+}\n+\n+static_assert( test_copy() );\n+\n+constexpr bool\n+test_move()\n+{\n+  const std::basic_string<C> short_string = \"sh\";\n+  const std::basic_string<C> long_string = \"string longer than the SSO buffer\";\n+\n+  std::basic_string<C> s0 = short_string;\n+\n+  std::basic_string<C> s1 = std::move(s0);\n+  VERIFY( s1 == short_string );\n+  std::basic_string<C> s2(std::move(s1), std::allocator<C>());\n+  VERIFY( s2 == short_string );\n+\n+  s0 = long_string;\n+  std::basic_string<C> s3 = std::move(s0);\n+  VERIFY( s3 == long_string );\n+  std::basic_string<C> s4(std::move(s3), s1.get_allocator());\n+  VERIFY( s4 == long_string );\n+\n+  std::basic_string<C, T, Alloc<C>> a_short_string = short_string.c_str();\n+  std::basic_string<C, T, Alloc<C>> a_long_string = long_string.c_str();\n+\n+  auto sa0 = a_short_string;\n+  std::basic_string<C, T, Alloc<C>> s5 = std::move(sa0);\n+  VERIFY( s5 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s6(std::move(s5), sa0.get_allocator());\n+  VERIFY( s6 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s7(std::move(s6), Alloc<C>(7));\n+  VERIFY( s7 == a_short_string );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  sa0 = a_long_string;\n+  std::basic_string<C, T, Alloc<C>> s8 = std::move(sa0);\n+  VERIFY( s8 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s9(std::move(s8), s5.get_allocator());\n+  VERIFY( s9 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s10(std::move(s9), Alloc<C>(10));\n+  VERIFY( s10 == a_long_string );\n+  VERIFY( s10.get_allocator().personality == 10 );\n+\n+  return true;\n+}\n+\n+static_assert( test_move() );"}, {"sha": "3ef9862e613324d1cd3e4cdebcd6663a5a07c961", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/cons/wchar_t/constexpr.cc", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fcons%2Fwchar_t%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,174 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+\n+#ifndef __cpp_lib_constexpr_string\n+# error \"Feature-test macro for constexpr std::string missing in <string>\"\n+#elif __cpp_lib_constexpr_string != 201907L\n+# error \"Feature-test macro for constexpr std::string has wrong value in <string>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+using C = wchar_t;\n+using T = std::char_traits<C>;\n+\n+template<typename T>\n+struct Alloc : std::allocator<T>\n+{\n+  using std::allocator<T>::allocator;\n+\n+  constexpr explicit Alloc(int p) : personality(p) { }\n+\n+  template<typename U>\n+    constexpr Alloc(const Alloc<U>& a) : personality(a.personality) { }\n+\n+  int personality = 0;\n+\n+  constexpr Alloc select_on_container_copy_construction() const\n+  { return Alloc(-1); }\n+\n+  constexpr bool operator==(const Alloc& a) const noexcept\n+  { return personality == a.personality; }\n+};\n+\n+constexpr bool\n+test_default_ctor()\n+{\n+  std::basic_string<C> s0;\n+  VERIFY( s0.empty() );\n+\n+  std::basic_string<C> s1(std::allocator<C>{});\n+  VERIFY( s1.empty() );\n+\n+  std::basic_string<C, T, Alloc<C>> s2;\n+  VERIFY( s2.empty() );\n+\n+  std::basic_string<C, T, Alloc<C>> s3(Alloc<C>(3));\n+  VERIFY( s3.empty() );\n+  VERIFY( s3.get_allocator().personality == 3 );\n+\n+  return true;\n+}\n+\n+static_assert( test_default_ctor() );\n+\n+constexpr bool\n+test_cstr()\n+{\n+  const C cs[] = L\"This has an embedded \\0 null\";\n+  const auto len = (sizeof(cs) - 1)/sizeof(C);\n+\n+  std::basic_string<C> s1(cs);\n+  VERIFY( s1.length() == 21 );\n+  std::basic_string<C> s2(cs, std::allocator<C>{});\n+  VERIFY( s2 == s1 );\n+\n+  std::basic_string<C> s3(cs, len);\n+  VERIFY( s3.length() == len );\n+  VERIFY( s3[len] == L'\\0' );\n+  std::basic_string<C> s4(cs, len, std::allocator<C>{});\n+  VERIFY( s4 == s3 );\n+\n+  std::basic_string<C, T, Alloc<C>> s5(cs);\n+  VERIFY( s5 == std::basic_string_view<C>(s1) );\n+\n+  std::basic_string<C, T, Alloc<C>> s6(cs, Alloc<C>(6));\n+  VERIFY( s6 == std::basic_string_view<C>(s1) );\n+  VERIFY( s6.get_allocator().personality == 6 );\n+\n+  std::basic_string<C, T, Alloc<C>> s7(cs, len, Alloc<C>(7));\n+  VERIFY( s7 == std::basic_string_view<C>(s3) );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  return true;\n+}\n+\n+static_assert( test_cstr() );\n+\n+constexpr bool\n+test_copy()\n+{\n+  const std::basic_string<C> short_string = L\"sh\";\n+  const std::basic_string<C> long_string = L\"string longer than the SSO buffer\";\n+\n+  std::basic_string<C> s1 = short_string;\n+  VERIFY( s1 == short_string );\n+  std::basic_string<C> s2(short_string, s1.get_allocator());\n+  VERIFY( s2 == short_string );\n+\n+  std::basic_string<C> s3 = long_string;\n+  VERIFY( s3 == long_string );\n+  std::basic_string<C> s4(long_string, s1.get_allocator());\n+  VERIFY( s4 == long_string );\n+\n+  std::basic_string<C, T, Alloc<C>> a_short_string = short_string.c_str();\n+  std::basic_string<C, T, Alloc<C>> a_long_string = long_string.c_str();\n+\n+  std::basic_string<C, T, Alloc<C>> s5(a_short_string);\n+  VERIFY( s5 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s6(a_short_string, s5.get_allocator());\n+  VERIFY( s6 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s7(a_short_string, Alloc<C>(7));\n+  VERIFY( s7 == a_short_string );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  std::basic_string<C, T, Alloc<C>> s8 = a_long_string;\n+  VERIFY( s8 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s9(a_long_string, s5.get_allocator());\n+  VERIFY( s9 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s10(a_long_string, Alloc<C>(10));\n+  VERIFY( s10 == a_long_string );\n+  VERIFY( s10.get_allocator().personality == 10 );\n+\n+  return true;\n+}\n+\n+static_assert( test_copy() );\n+\n+constexpr bool\n+test_move()\n+{\n+  const std::basic_string<C> short_string = L\"sh\";\n+  const std::basic_string<C> long_string = L\"string longer than the SSO buffer\";\n+\n+  std::basic_string<C> s0 = short_string;\n+\n+  std::basic_string<C> s1 = std::move(s0);\n+  VERIFY( s1 == short_string );\n+  std::basic_string<C> s2(std::move(s1), std::allocator<C>());\n+  VERIFY( s2 == short_string );\n+\n+  s0 = long_string;\n+  std::basic_string<C> s3 = std::move(s0);\n+  VERIFY( s3 == long_string );\n+  std::basic_string<C> s4(std::move(s3), s1.get_allocator());\n+  VERIFY( s4 == long_string );\n+\n+  std::basic_string<C, T, Alloc<C>> a_short_string = short_string.c_str();\n+  std::basic_string<C, T, Alloc<C>> a_long_string = long_string.c_str();\n+\n+  auto sa0 = a_short_string;\n+  std::basic_string<C, T, Alloc<C>> s5 = std::move(sa0);\n+  VERIFY( s5 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s6(std::move(s5), sa0.get_allocator());\n+  VERIFY( s6 == a_short_string );\n+  std::basic_string<C, T, Alloc<C>> s7(std::move(s6), Alloc<C>(7));\n+  VERIFY( s7 == a_short_string );\n+  VERIFY( s7.get_allocator().personality == 7 );\n+\n+  sa0 = a_long_string;\n+  std::basic_string<C, T, Alloc<C>> s8 = std::move(sa0);\n+  VERIFY( s8 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s9(std::move(s8), s5.get_allocator());\n+  VERIFY( s9 == a_long_string );\n+  std::basic_string<C, T, Alloc<C>> s10(std::move(s9), Alloc<C>(10));\n+  VERIFY( s10 == a_long_string );\n+  VERIFY( s10.get_allocator().personality == 10 );\n+\n+  return true;\n+}\n+\n+static_assert( test_move() );"}, {"sha": "27d286c85ebbe3df47ff3a04734b1868e4d39773", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/literals/constexpr.cc", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fliterals%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,22 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_literals()\n+{\n+  using namespace std::literals;\n+\n+  auto s = \"narrow string\"s;\n+  auto sw = L\"wide string\"s;\n+  auto s8 = u8\"UTF-8 string\"s;\n+  auto su = u\"UTF-16 string\"s;\n+  auto sU = U\"UTF-32 string\"s;\n+\n+  return !s.empty() && !sw.empty() && !s8.empty() && !su.empty() && !sU.empty();\n+}\n+\n+static_assert( test_literals() );"}, {"sha": "c875a3a19ad317797a4703ae681958a0725debde", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/constexpr.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_insert()\n+{\n+  std::string s;\n+  s.insert(0, \"one\");\n+  VERIFY( s == \"one\" );\n+  s.insert(0, \"eleventy-\");\n+  VERIFY( s == \"eleventy-one\" );\n+  s.insert(6, \"ses at ten thirteen\", 15);\n+  VERIFY( s == \"elevenses at ten thirty-one\" );\n+\n+  return true;\n+}\n+\n+static_assert( test_insert() );\n+\n+constexpr bool\n+test_replace()\n+{\n+  std::string s = \"abcdef\";\n+  s.replace(2, 1, s.c_str(), 3);\n+  VERIFY( s == \"ababcdef\" );\n+  s.replace(0, 2, \"\", 0);\n+  VERIFY( s == \"abcdef\" );\n+  s.replace(1, 4, \"ardwol\", 6);\n+  VERIFY( s == \"aardwolf\" );\n+  s.replace(4, 0, \"vark not wolf\");\n+\n+  return true;\n+}\n+\n+static_assert( test_replace() );\n+\n+constexpr bool\n+test_erasure()\n+{\n+  std::string s = \"Spiritualized Electric Mainline\";\n+  std::erase(s, 'i');\n+  VERIFY( s == \"Sprtualzed Electrc Manlne\" );\n+  std::erase_if(s, [](char c) { return c == 'l'; });\n+  VERIFY( s == \"Sprtuazed Eectrc Manne\" );\n+\n+  return true;\n+}\n+\n+static_assert( test_erasure() );"}, {"sha": "9fd05c9b880847aeda4cc5dcf319fb730aa035ad", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/swap/char/constexpr.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fchar%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fchar%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fchar%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = char;\n+using T = std::char_traits<C>;\n+\n+constexpr bool\n+test_swap()\n+{\n+  std::basic_string<C> s0;\n+  s0.swap(s0);\n+  VERIFY( s0.empty() );\n+  std::basic_string<C> s00;\n+  s0.swap(s00);\n+  VERIFY( s0.empty() );\n+  VERIFY( s00.empty() );\n+\n+  std::basic_string<C> s1 = \"s1\";\n+  s1.swap(s0);\n+  VERIFY( s1.empty() );\n+  VERIFY( ! s0.empty() );\n+  s1.swap(s0);\n+  VERIFY( s0.empty() );\n+  VERIFY( ! s1.empty() );\n+\n+  std::basic_string<C> s2 = \"quite a long string, but not very long\";\n+  s2.swap(s1);\n+  VERIFY( s2.length() == 2 );\n+  VERIFY( s1.length() == 38 );\n+  s2.swap(s1);\n+  VERIFY( s1.length() == 2 );\n+  VERIFY( s2.length() == 38 );\n+\n+  swap(s2, s0);\n+  VERIFY( s2.empty() );\n+  VERIFY( s0.length() == 38 );\n+\n+  auto s3 = s0;\n+  swap(s3, s0);\n+  VERIFY( s3 == s0 );\n+\n+  return true;\n+}\n+\n+static_assert( test_swap() );"}, {"sha": "4d3f188f1d67a9962414f00f38e49914083e28d5", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/swap/wchar_t/constexpr.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fwchar_t%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fwchar_t%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Fswap%2Fwchar_t%2Fconstexpr.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+using C = wchar_t;\n+using T = std::char_traits<C>;\n+\n+constexpr bool\n+test_swap()\n+{\n+  std::basic_string<C> s0;\n+  s0.swap(s0);\n+  VERIFY( s0.empty() );\n+  std::basic_string<C> s00;\n+  s0.swap(s00);\n+  VERIFY( s0.empty() );\n+  VERIFY( s00.empty() );\n+\n+  std::basic_string<C> s1 = L\"s1\";\n+  s1.swap(s0);\n+  VERIFY( s1.empty() );\n+  VERIFY( ! s0.empty() );\n+  s1.swap(s0);\n+  VERIFY( s0.empty() );\n+  VERIFY( ! s1.empty() );\n+\n+  std::basic_string<C> s2 = L\"quite a long string, but not very long\";\n+  s2.swap(s1);\n+  VERIFY( s2.length() == 2 );\n+  VERIFY( s1.length() == 38 );\n+  s2.swap(s1);\n+  VERIFY( s1.length() == 2 );\n+  VERIFY( s2.length() == 38 );\n+\n+  swap(s2, s0);\n+  VERIFY( s2.empty() );\n+  VERIFY( s0.length() == 38 );\n+\n+  auto s3 = s0;\n+  swap(s3, s0);\n+  VERIFY( s3 == s0 );\n+\n+  return true;\n+}\n+\n+static_assert( test_swap() );"}, {"sha": "a99bb179a93aa005455b43590f468cbec4633332", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/version.cc", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b96e2ff9d8c56bad68b5dd10e3a601f12496ae36/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fversion.cc?ref=b96e2ff9d8c56bad68b5dd10e3a601f12496ae36", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_constexpr_string\n+# error \"Feature-test macro for constexpr std::string missing in <version>\"\n+#endif\n+\n+#if __cplusplus == 201703L\n+# if __cpp_lib_constexpr_string != 201611L\n+#  error \"Feature-test macro for constexpr std::string has wrong value for C++17 in <version>\"\n+# endif\n+#endif\n+\n+#if __cplusplus == 202002L\n+# if _GLIBCXX_USE_CXX11_ABI\n+#  if __cpp_lib_constexpr_string != 201907L\n+#   error \"Feature-test macro for constexpr std::string has wrong value for C++20 in <version>\"\n+#  endif\n+# else // COW strings\n+#  if __cpp_lib_constexpr_string != 201811L\n+#   error \"Feature-test macro for constexpr std::string has wrong value for C++20 in <version>\"\n+#  endif\n+# endif\n+#endif"}]}