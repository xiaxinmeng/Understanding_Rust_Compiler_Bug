{"sha": "ae2aa109334c425eaab120a239b6807f211f84ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyYWExMDkzMzRjNDI1ZWFhYjEyMGEyMzliNjgwN2YyMTFmODRmZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T12:18:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-09T12:18:17Z"}, "message": "[multiple changes]\n\n2010-09-09  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Resolve_Type_Conversion): Catch more cases of redundant\n\tconversions.\n\n2010-09-09  Vincent Celier  <celier@adacore.com>\n\n\t* gnatlbr.adb: Remove redundant conversions.\n\nFrom-SVN: r164079", "tree": {"sha": "ccf379388cd1d4094135bf25b8d7d760db1c8e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf379388cd1d4094135bf25b8d7d760db1c8e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae2aa109334c425eaab120a239b6807f211f84ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2aa109334c425eaab120a239b6807f211f84ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2aa109334c425eaab120a239b6807f211f84ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2aa109334c425eaab120a239b6807f211f84ff/comments", "author": null, "committer": null, "parents": [{"sha": "45e5214c6f9314d8b176cc284861e6fb4c087a50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e5214c6f9314d8b176cc284861e6fb4c087a50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e5214c6f9314d8b176cc284861e6fb4c087a50"}], "stats": {"total": 94, "additions": 68, "deletions": 26}, "files": [{"sha": "1427747902c64a31479bde150b305ae92e986f7a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ae2aa109334c425eaab120a239b6807f211f84ff", "patch": "@@ -1,3 +1,12 @@\n+2010-09-09  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Type_Conversion): Catch more cases of redundant\n+\tconversions.\n+\n+2010-09-09  Vincent Celier  <celier@adacore.com>\n+\n+\t* gnatlbr.adb: Remove redundant conversions.\n+\n 2010-09-09  Vincent Celier  <celier@adacore.com>\n \n \t* prj-proc.adb: Minor comment spelling error fix."}, {"sha": "27962a4903412e86130237f96589aa15301f5d71", "filename": "gcc/ada/gnatlbr.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2Fgnatlbr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2Fgnatlbr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlbr.adb?ref=ae2aa109334c425eaab120a239b6807f211f84ff", "patch": "@@ -194,8 +194,8 @@ begin\n \n             loop\n                declare\n-                  Dir : constant String_Access := String_Access\n-                    (Get_Next_Dir_In_Path (Include_Dir_Name));\n+                  Dir : constant String_Access :=\n+                          Get_Next_Dir_In_Path (Include_Dir_Name);\n                begin\n                   exit when Dir = null;\n                   Include_Dirs := Include_Dirs + 1;\n@@ -211,8 +211,7 @@ begin\n             loop\n                declare\n                   Dir : constant String_Access :=\n-                          String_Access\n-                            (Get_Next_Dir_In_Path (Object_Dir_Name));\n+                          Get_Next_Dir_In_Path (Object_Dir_Name);\n                begin\n                   exit when Dir = null;\n                   Object_Dirs := Object_Dirs + 1;"}, {"sha": "cc59f4d7d3d5535783ae82b2fccc381031eb0866", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 56, "deletions": 22, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae2aa109334c425eaab120a239b6807f211f84ff/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ae2aa109334c425eaab120a239b6807f211f84ff", "patch": "@@ -6505,13 +6505,10 @@ package body Sem_Res is\n          --  be anonymous access types.\n \n          elsif Ada_Version >= Ada_2012\n-           and then Ekind_In (Etype (L),\n-             E_Anonymous_Access_Type,\n-               E_Anonymous_Access_Subprogram_Type)\n-\n-           and then Ekind_In (Etype (R),\n-             E_Anonymous_Access_Type,\n-               E_Anonymous_Access_Subprogram_Type)\n+           and then Ekind_In (Etype (L), E_Anonymous_Access_Type,\n+                                         E_Anonymous_Access_Subprogram_Type)\n+           and then Ekind_In (Etype (R), E_Anonymous_Access_Type,\n+                                         E_Anonymous_Access_Subprogram_Type)\n          then\n             Check_Conditional_Expression (L);\n             Check_Conditional_Expression (R);\n@@ -8655,14 +8652,31 @@ package body Sem_Res is\n       Orig_N      : Node_Id;\n       Orig_T      : Node_Id;\n \n+      Test_Redundant : Boolean := Warn_On_Redundant_Constructs;\n+      --  Set to False to suppress cases where we want to suppress the test\n+      --  for redundancy to avoid possible false positives on this warning.\n+\n    begin\n       if not Conv_OK\n         and then not Valid_Conversion (N, Target_Typ, Operand)\n       then\n          return;\n       end if;\n \n-      if Etype (Operand) = Any_Fixed then\n+      --  If the Operand Etype is Universal_Fixed, then the conversion is\n+      --  never redundant. We need this check because by the time we have\n+      --  finished the rather complex transformation, the conversion looks\n+      --  redundant when it is not.\n+\n+      if Operand_Typ = Universal_Fixed then\n+         Test_Redundant := False;\n+\n+      --  If the operand is marked as Any_Fixed, then special processing is\n+      --  required. This is also a case where we suppress the test for a\n+      --  redundant conversion, since most certainly it is not redundant.\n+\n+      elsif Operand_Typ = Any_Fixed then\n+         Test_Redundant := False;\n \n          --  Mixed-mode operation involving a literal. Context must be a fixed\n          --  type which is applied to the literal subsequently.\n@@ -8768,9 +8782,13 @@ package body Sem_Res is\n \n       Orig_N := Original_Node (N);\n \n-      if Warn_On_Redundant_Constructs\n-        and then Comes_From_Source (Orig_N)\n+      --  Here we test for a redundant conversion if the warning mode is\n+      --  active (and was not locally reset), and we have a type conversion\n+      --  from source not appearing in a generic instance.\n+\n+      if Test_Redundant\n         and then Nkind (Orig_N) = N_Type_Conversion\n+        and then Comes_From_Source (Orig_N)\n         and then not In_Instance\n       then\n          Orig_N := Original_Node (Expression (Orig_N));\n@@ -8786,12 +8804,21 @@ package body Sem_Res is\n             Orig_T := Etype (Parent (N));\n          end if;\n \n-         if Is_Entity_Name (Orig_N)\n-           and then\n-             (Etype (Entity (Orig_N)) = Orig_T\n-                or else\n-                  (Ekind (Entity (Orig_N)) = E_Loop_Parameter\n-                    and then Covers (Orig_T, Etype (Entity (Orig_N)))))\n+         --  if we have an entity name, then give the warning if the entity\n+         --  is the right type, or if it is a loop parameter covered by the\n+         --  original type (that's needed because loop parameters have an\n+         --  odd subtype coming from the bounds).\n+\n+         if (Is_Entity_Name (Orig_N)\n+               and then\n+                 (Etype (Entity (Orig_N)) = Orig_T\n+                   or else\n+                     (Ekind (Entity (Orig_N)) = E_Loop_Parameter\n+                      and then Covers (Orig_T, Etype (Entity (Orig_N))))))\n+\n+         --  If not an entity, then type of expression must match\n+\n+           or else Etype (Orig_N) = Orig_T\n          then\n             --  One more check, do not give warning if the analyzed conversion\n             --  has an expression with non-static bounds, and the bounds of the\n@@ -8804,13 +8831,21 @@ package body Sem_Res is\n             then\n                null;\n \n-            --  Here we give the redundant conversion warning\n+            --  Here we give the redundant conversion warning. If it is an\n+            --  entity, give the name of the entity in the message. If not,\n+            --  just mention the expression.\n \n             else\n-               Error_Msg_Node_2 := Orig_T;\n-               Error_Msg_NE -- CODEFIX\n-                 (\"?redundant conversion, & is of type &!\",\n-                  N, Entity (Orig_N));\n+               if Is_Entity_Name (Orig_N) then\n+                  Error_Msg_Node_2 := Orig_T;\n+                  Error_Msg_NE -- CODEFIX\n+                    (\"?redundant conversion, & is of type &!\",\n+                     N, Entity (Orig_N));\n+               else\n+                  Error_Msg_NE\n+                    (\"?redundant conversion, expression is of type&!\",\n+                     N, Orig_T);\n+               end if;\n             end if;\n          end if;\n       end if;\n@@ -9129,7 +9164,6 @@ package body Sem_Res is\n \n       Resolve (Operand, Opnd_Type);\n       Eval_Unchecked_Conversion (N);\n-\n    end Resolve_Unchecked_Type_Conversion;\n \n    ------------------------------"}]}