{"sha": "13c61421ff315b27bb41e6ac8ccacdebab9d8247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNjNjE0MjFmZjMxNWIyN2JiNDFlNmFjOGNjYWNkZWJhYjlkODI0Nw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-09T10:54:01Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-09T10:54:01Z"}, "message": "c-lang.c (lang_hooks): Update.\n\n        * c-lang.c (lang_hooks): Update.\n        (lang_init): Rename c_init.\n        (lang_finish): Remove.\n        * toplev.c (compile_file): Use lang_hooks for lang_init ()\n        and lang_finish ().\n        * toplev.h (lang_hooks): Add init () and finish ().\n        * tree.h (lang_init, lang_finish): Remove.\n        * cp/tree.h (lang_init, lang_finish): Remove.\n        * cp/decl2.c (cxx_post_options, lang_hooks): Move to cp/lex.c.\n        * cp/lex.c (cxx_init, cxx_finish, cxx_post_options,\n        lang_hooks): New.\n        (lang_init, lang_finish): Remove.\n        * f/com.c (lang_init, lang_finish): Rename f_init, f_finish.\n        (lang_hooks): Update.\n        * java/lang.c (lang_init): Rename java_init.\n        (lang_finish): Remove.\n        (lang_hooks): Update.\n        * objc/objc-act.c (lang_init): Rename objc_init.\n        (lang_finish): Remove.\n        (lang_hoooks): Update.\n\nFrom-SVN: r38828", "tree": {"sha": "5175214bd3273e1990f7d1c7e0d43f3853a1fc53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5175214bd3273e1990f7d1c7e0d43f3853a1fc53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13c61421ff315b27bb41e6ac8ccacdebab9d8247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c61421ff315b27bb41e6ac8ccacdebab9d8247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13c61421ff315b27bb41e6ac8ccacdebab9d8247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13c61421ff315b27bb41e6ac8ccacdebab9d8247/comments", "author": null, "committer": null, "parents": [{"sha": "fb83deef1a1438c21b65535483a4726f31862b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb83deef1a1438c21b65535483a4726f31862b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb83deef1a1438c21b65535483a4726f31862b20"}], "stats": {"total": 114, "additions": 58, "deletions": 56}, "files": [{"sha": "f8cefb36490b148180d0cce4331702a151b0983d", "filename": "gcc/c-lang.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -38,10 +38,13 @@ Boston, MA 02111-1307, USA.  */\n \n static int c_tree_printer PARAMS ((output_buffer *));\n static int c_missing_noreturn_ok_p PARAMS ((tree));\n+static void c_init PARAMS ((void));\n static void c_post_options PARAMS ((void));\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = {c_post_options};\n+struct lang_hooks lang_hooks = {c_init,\n+\t\t\t\tNULL, /* c_finish */\n+\t\t\t\tc_post_options};\n \n /* Post-switch processing.  */\n static void\n@@ -69,8 +72,8 @@ lang_init_options ()\n   flag_bounds_check = -1;\n }\n \n-void\n-lang_init ()\n+static void\n+c_init ()\n {\n   c_common_lang_init ();\n \n@@ -95,11 +98,6 @@ lang_init ()\n   c_parse_init ();\n }\n \n-void\n-lang_finish ()\n-{\n-}\n-\n const char *\n lang_identify ()\n {"}, {"sha": "e2309e910f56ff54740a5ecc43a5df345f66dabe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -4062,8 +4062,6 @@ extern tree make_pointer_declarator\t\tPARAMS ((tree, tree));\n extern tree make_reference_declarator\t\tPARAMS ((tree, tree));\n extern tree make_call_declarator\t\tPARAMS ((tree, tree, tree, tree));\n extern void set_quals_and_spec\t\t\tPARAMS ((tree, tree, tree));\n-extern void lang_init\t\t\t\tPARAMS ((void));\n-extern void lang_finish\t\t\t\tPARAMS ((void));\n extern void print_parse_statistics\t\tPARAMS ((void));\n extern void do_pending_inlines\t\t\tPARAMS ((void));\n extern void process_next_inline\t\t\tPARAMS ((struct unparsed_text *));"}, {"sha": "8bdd43e39f4508f3da11a03148251c8f43692f92", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -59,7 +59,6 @@ typedef struct priority_info_s {\n   int destructions_p;\n } *priority_info;\n \n-static void cxx_post_options PARAMS ((void));\n static void mark_vtable_entries PARAMS ((tree));\n static void grok_function_init PARAMS ((tree, tree));\n static int finish_vtable_vardecl PARAMS ((tree *, void *));\n@@ -544,16 +543,6 @@ static const char * const unsupported_options[] = {\n   \"strict-prototype\",\n };\n \n-/* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = {cxx_post_options};\n-\n-/* Post-switch processing.  */\n-static void\n-cxx_post_options ()\n-{\n-  cpp_post_options (parse_in);\n-}\n-\n /* Compare two option strings, pointed two by P1 and P2, for use with\n    bsearch.  */\n "}, {"sha": "3203b4cec2c92534ebc4f00e3cab2637cfcebb50", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -61,6 +61,9 @@ static void handle_pragma_vtable PARAMS ((cpp_reader *));\n static void handle_pragma_unit PARAMS ((cpp_reader *));\n static void handle_pragma_interface PARAMS ((cpp_reader *));\n static void handle_pragma_implementation PARAMS ((cpp_reader *));\n+static void cxx_init PARAMS ((void));\n+static void cxx_finish PARAMS ((void));\n+static void cxx_post_options PARAMS ((void));\n \n #ifdef GATHER_STATISTICS\n #ifdef REDUCE_LENGTH\n@@ -240,7 +243,17 @@ static const char *cplus_tree_code_name[] = {\n };\n #undef DEFTREECODE\n \f\n-/* toplev.c needs to call these.  */\n+/* Each front end provides its own hooks, for toplev.c.  */\n+struct lang_hooks lang_hooks = {cxx_init,\n+\t\t\t\tcxx_finish,\n+\t\t\t\tcxx_post_options};\n+\n+/* Post-switch processing.  */\n+static void\n+cxx_post_options ()\n+{\n+  cpp_post_options (parse_in);\n+}\n \n void\n lang_init_options ()\n@@ -259,17 +272,17 @@ lang_init_options ()\n   set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n }\n \n-void\n-lang_init ()\n+static void\n+cxx_init ()\n {\n   c_common_lang_init ();\n \n   if (flag_gnu_xref) GNU_xref_begin (input_filename);\n   init_repo (input_filename);\n }\n \n-void\n-lang_finish ()\n+static void\n+cxx_finish ()\n {\n   if (flag_gnu_xref) GNU_xref_end (errorcount+sorrycount);\n }"}, {"sha": "cdd48bf60492e43fef78c57d020d99d0ad60dfec", "filename": "gcc/f/com.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -14677,7 +14677,12 @@ insert_block (block)\n }\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = {NULL /* post_options */};\n+static void f_init PARAMS ((void));\n+static void f_finish PARAMS ((void));\n+\n+struct lang_hooks lang_hooks = {f_init,\n+\t\t\t\tf_finish,\n+\t\t\t\tNULL /* post_options */};\n \n int\n lang_decode_option (argc, argv)\n@@ -14697,8 +14702,8 @@ lang_print_xnode (file, node, indent)\n {\n }\n \n-void\n-lang_finish ()\n+static void\n+f_finish ()\n {\n   ffe_terminate_0 ();\n \n@@ -14738,8 +14743,8 @@ lang_init_options ()\n   flag_complex_divide_method = 1;\n }\n \n-void\n-lang_init ()\n+static void\n+f_init ()\n {\n   /* If the file is output from cpp, it should contain a first line\n      `# 1 \"real-filename\"', and the current design of gcc (toplev.c"}, {"sha": "9b299b2504746cb8e48c339c07a7474d0149cec8", "filename": "gcc/java/lang.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -45,6 +45,7 @@ struct string_option\n   int on_value;\n };\n \n+static void java_init PARAMS ((void));\n static void put_decl_string PARAMS ((const char *, int));\n static void put_decl_node PARAMS ((tree));\n static void java_dummy_print PARAMS ((const char *));\n@@ -187,7 +188,9 @@ static int dependency_tracking = 0;\n #define DEPEND_FILE_ALREADY_SET 8\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = {NULL /* post_options */};\n+struct lang_hooks lang_hooks = {java_init,\n+\t\t\t\tNULL, /* java_finish */\n+\t\t\t\tNULL /* post_options */};\n \n /* Process an option that can accept a `no-' form.\n    Return 1 if option found, 0 otherwise.  */\n@@ -615,8 +618,8 @@ lang_print_error (file)\n \n }\n \n-void\n-lang_init ()\n+static void\n+java_init ()\n {\n #if 0\n   extern int flag_minimal_debug;\n@@ -682,11 +685,6 @@ lang_init_options ()\n   flag_bounds_check = 1;\n }\n \n-void\n-lang_finish ()\n-{\n-}\n-\n const char *\n lang_identify ()\n {"}, {"sha": "b70c3e6dfd3e334b588e3324c37793ee2b6a6f6a", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -149,6 +149,7 @@ char *util_firstobj;\n static void init_objc\t\t\t\tPARAMS ((void));\n static void finish_objc\t\t\t\tPARAMS ((void));\n static void objc_post_options\t\t\tPARAMS ((void));\n+static void objc_init\t\t\t\tPARAMS ((void));\n \n /* Code generation.  */\n \n@@ -628,7 +629,9 @@ static int generating_instance_variables = 0;\n static int print_struct_values = 0;\n \n /* Each front end provides its own.  */\n-struct lang_hooks lang_hooks = {objc_post_options};\n+struct lang_hooks lang_hooks = {objc_init,\n+\t\t\t\tNULL, /* objc_finish */\n+\t\t\t\tobjc_post_options};\n \n /* Post-switch processing.  */\n static void\n@@ -707,8 +710,8 @@ lang_init_options ()\n   c_language = clk_objective_c;\n }\n \n-void\n-lang_init ()\n+static void\n+objc_init ()\n {\n   /* Force the line number back to 0; check_newline will have\n      raised it to 1, which will make the builtin functions appear\n@@ -765,11 +768,6 @@ finish_file ()\n     fclose (gen_declaration_file);\n }\n \n-void\n-lang_finish ()\n-{\n-}\n-\n const char *\n lang_identify ()\n {"}, {"sha": "32effd4332b20619f1b0f4d03142bd6df9c5b308", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -2248,7 +2248,8 @@ compile_file (name)\n \n   /* Perform language-specific initialization.\n      This may set main_input_filename.  */\n-  lang_init ();\n+  if (lang_hooks.init)\n+    (*lang_hooks.init) ();\n \n   /* If the input doesn't start with a #line, use the input name\n      as the official input file name.  */\n@@ -2480,7 +2481,8 @@ compile_file (name)\n \n   /* Language-specific end of compilation actions.  */\n  finish_syntax:\n-  lang_finish ();\n+  if (lang_hooks.finish)\n+    (*lang_hooks.finish) ();\n \n   /* Close the dump files.  */\n "}, {"sha": "f0c37f8c7531667302426708e74ef043230afc3e", "filename": "gcc/toplev.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -133,10 +133,16 @@ extern int sorrycount;\n \n extern const char *progname;\n \n-/* Language-specific hooks.  */\n+/* Language-specific hooks.  Can be NULL unless otherwise specified.  */\n struct lang_hooks\n {\n-  /* If non-NULL, called when all command line options have been processed.  */\n+  /* Called first, to initialize the front end.  */\n+  void (*init) PARAMS ((void));\n+\n+  /* Called last, as a finalizer.  */\n+  void (*finish) PARAMS ((void));\n+\n+  /* Called when all command line options have been processed.  */\n   void (*post_options) PARAMS ((void));\n };\n "}, {"sha": "b6129fc8f4bb34f296fd7cc7c1a5a08efda54c12", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13c61421ff315b27bb41e6ac8ccacdebab9d8247/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=13c61421ff315b27bb41e6ac8ccacdebab9d8247", "patch": "@@ -2571,11 +2571,6 @@ extern void init_lex\t\t\t\tPARAMS ((void));\n /* Function of no arguments for initializing the symbol table.  */\n extern void init_decl_processing\t\tPARAMS ((void));\n \n-/* Functions called with no arguments at the beginning and end or processing\n-   the input source file.  */\n-extern void lang_init\t\t\t\tPARAMS ((void));\n-extern void lang_finish\t\t\t\tPARAMS ((void));\n-\n /* Function to identify which front-end produced the output file. */\n extern const char *lang_identify\t\t\tPARAMS ((void));\n "}]}