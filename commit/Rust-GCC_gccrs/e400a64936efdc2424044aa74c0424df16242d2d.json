{"sha": "e400a64936efdc2424044aa74c0424df16242d2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwMGE2NDkzNmVmZGMyNDI0MDQ0YWE3NGMwNDI0ZGYxNjI0MmQyZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-13T22:45:22Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-13T22:45:22Z"}, "message": "c: C2x binary constants\n\nC2x adds binary integer constants (approved at the last WG14 meeting,\nthough not yet added to the working draft in git).  Configure libcpp\nto consider these a standard feature in C2x mode, with appropriate\nupdates to diagnostics including support for diagnosing them with\n-std=c2x -Wc11-c2x-compat.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/testsuite/\n2020-11-13  Joseph Myers  <joseph@codesourcery.com>\n\n\t* gcc.dg/binary-constants-2.c, gcc.dg/binary-constants-3.c,\n\tgcc.dg/system-binary-constants-1.c: Update expected diagnostics.\n\t* gcc.dg/c11-binary-constants-1.c,\n\tgcc.dg/c11-binary-constants-2.c, gcc.dg/c2x-binary-constants-1.c,\n\tgcc.dg/c2x-binary-constants-2.c, gcc.dg/c2x-binary-constants-3.c:\n\tNew tests.\n\nlibcpp/\n2020-11-13  Joseph Myers  <joseph@codesourcery.com>\n\n\t* expr.c (cpp_classify_number): Update diagnostic for binary\n\tconstants for C.  Also diagnose binary constants for\n\t-Wc11-c2x-compat.\n\t* init.c (lang_defaults): Enable binary constants for GNUC2X and\n\tSTDC2X.", "tree": {"sha": "5306e5a590540d75f925bd5f41600102ed65039c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5306e5a590540d75f925bd5f41600102ed65039c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e400a64936efdc2424044aa74c0424df16242d2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e400a64936efdc2424044aa74c0424df16242d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e400a64936efdc2424044aa74c0424df16242d2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e400a64936efdc2424044aa74c0424df16242d2d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3dc991fba095b38b15cd667e5cd15b1c418e809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3dc991fba095b38b15cd667e5cd15b1c418e809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3dc991fba095b38b15cd667e5cd15b1c418e809"}], "stats": {"total": 84, "additions": 69, "deletions": 15}, "files": [{"sha": "5339d57b9912d75d409438383d28d693092f9760", "filename": "gcc/testsuite/gcc.dg/binary-constants-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-2.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -9,8 +9,8 @@\n int\n foo (void)\n {\n-#if FOO /* { dg-warning \"binary constants are a GCC extension\" } */\n+#if FOO /* { dg-warning \"binary constants are a C2X feature or GCC extension\" } */\n   return 23;\n #endif\n-  return 0b1101; /* { dg-warning \"binary constants are a GCC extension\" } */\n+  return 0b1101; /* { dg-warning \"binary constants are a C2X feature or GCC extension\" } */\n }"}, {"sha": "5b49cb4efbb4bb398aeb4e5e2d45eadd7629572a", "filename": "gcc/testsuite/gcc.dg/binary-constants-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbinary-constants-3.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -9,8 +9,8 @@\n int\n foo (void)\n {\n-#if FOO /* { dg-error \"binary constants are a GCC extension\" } */\n+#if FOO /* { dg-error \"binary constants are a C2X feature or GCC extension\" } */\n   return 23;\n #endif\n-  return 0b1101; /* { dg-error \"binary constants are a GCC extension\" } */\n+  return 0b1101; /* { dg-error \"binary constants are a C2X feature or GCC extension\" } */\n }"}, {"sha": "fdc7df4bfad4a37721a6724dd8894d9f51137696", "filename": "gcc/testsuite/gcc.dg/c11-binary-constants-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-1.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -0,0 +1,11 @@\n+/* Test that binary constants are diagnosed in C11 mode: -pedantic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic\" } */\n+\n+int a = 0b1; /* { dg-warning \"binary constants\" } */\n+#if 0b101 /* { dg-warning \"binary constants\" } */\n+#endif\n+\n+int b = 0B1; /* { dg-warning \"binary constants\" } */\n+#if 0B101 /* { dg-warning \"binary constants\" } */\n+#endif"}, {"sha": "6b48a5d005baed12f9867c6fe178f6d9b8d8931c", "filename": "gcc/testsuite/gcc.dg/c11-binary-constants-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc11-binary-constants-2.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -0,0 +1,11 @@\n+/* Test that binary constants are diagnosed in C11 mode: -pedantic-errors.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -pedantic-errors\" } */\n+\n+int a = 0b1; /* { dg-error \"binary constants\" } */\n+#if 0b101 /* { dg-error \"binary constants\" } */\n+#endif\n+\n+int b = 0B1; /* { dg-error \"binary constants\" } */\n+#if 0B101 /* { dg-error \"binary constants\" } */\n+#endif"}, {"sha": "bbb2bc842c91dba4fd124b85efd591c1aecd9de0", "filename": "gcc/testsuite/gcc.dg/c2x-binary-constants-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-1.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -0,0 +1,5 @@\n+/* Test C2x binary constants.  Valid syntax and types.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+#include \"binary-constants-1.c\""}, {"sha": "4379427d6cec6132eaab3a1836d87f9f8cc82a05", "filename": "gcc/testsuite/gcc.dg/c2x-binary-constants-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-2.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -0,0 +1,11 @@\n+/* Test that binary constants are accepted in C2X mode: compat warnings.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -Wc11-c2x-compat\" } */\n+\n+int a = 0b1; /* { dg-warning \"C2X feature\" } */\n+#if 0b101 /* { dg-warning \"C2X feature\" } */\n+#endif\n+\n+int b = 0B1; /* { dg-warning \"C2X feature\" } */\n+#if 0B101 /* { dg-warning \"C2X feature\" } */\n+#endif"}, {"sha": "7604791fa85ce51a37880c53cb160d5528b7df14", "filename": "gcc/testsuite/gcc.dg/c2x-binary-constants-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-binary-constants-3.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -0,0 +1,9 @@\n+/* Test C2x binary constants.  Invalid constants.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c2x -pedantic-errors\" } */\n+\n+int a = 0b; /* { dg-error \"invalid suffix\" } */\n+int b = 0B2; /* { dg-error \"invalid suffix\" } */\n+int c = 0B02; /* { dg-error \"invalid digit\" } */\n+int d = 0b1.1; /* { dg-error \"invalid prefix\" } */\n+int e = 0B0p0; /* { dg-error \"invalid suffix\" } */"}, {"sha": "ca162154fbec800eaeca5443f26c47f8d70ed080", "filename": "gcc/testsuite/gcc.dg/system-binary-constants-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fsystem-binary-constants-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/gcc%2Ftestsuite%2Fgcc.dg%2Fsystem-binary-constants-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsystem-binary-constants-1.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -14,5 +14,5 @@ foo (void)\n \t\t\t\t\t    warning.  */\n   return 23;\n #endif\n-  return 0b1101; /* { dg-warning \"binary constants are a GCC extension\" } */\n+  return 0b1101; /* { dg-warning \"binary constants are a C2X feature or GCC extension\" } */\n }"}, {"sha": "b98c0386eb5d797b6627e4f705fed55f3ce343e1", "filename": "libcpp/expr.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -812,14 +812,21 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token,\n   if ((result & CPP_N_IMAGINARY) && CPP_PEDANTIC (pfile))\n     cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n \t\t\t \"imaginary constants are a GCC extension\");\n-  if (radix == 2\n-      && !CPP_OPTION (pfile, binary_constants)\n-      && CPP_PEDANTIC (pfile))\n-    cpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n-\t\t\t CPP_OPTION (pfile, cplusplus)\n-\t\t\t ? N_(\"binary constants are a C++14 feature \"\n-\t\t\t      \"or GCC extension\")\n-\t\t\t : N_(\"binary constants are a GCC extension\"));\n+  if (radix == 2)\n+    {\n+      if (!CPP_OPTION (pfile, binary_constants)\n+\t  && CPP_PEDANTIC (pfile))\n+\tcpp_error_with_line (pfile, CPP_DL_PEDWARN, virtual_location, 0,\n+\t\t\t     CPP_OPTION (pfile, cplusplus)\n+\t\t\t     ? N_(\"binary constants are a C++14 feature \"\n+\t\t\t\t  \"or GCC extension\")\n+\t\t\t     : N_(\"binary constants are a C2X feature \"\n+\t\t\t\t  \"or GCC extension\"));\n+      else if (CPP_OPTION (pfile, cpp_warn_c11_c2x_compat) > 0)\n+\tcpp_warning_with_line (pfile, CPP_W_C11_C2X_COMPAT,\n+\t\t\t       virtual_location, 0,\n+\t\t\t       \"binary constants are a C2X feature\");\n+    }\n \n   if (radix == 10)\n     result |= CPP_N_DECIMAL;"}, {"sha": "76882bc5f1c799365c10159439fa56db810e2d6b", "filename": "libcpp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400a64936efdc2424044aa74c0424df16242d2d/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400a64936efdc2424044aa74c0424df16242d2d/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=e400a64936efdc2424044aa74c0424df16242d2d", "patch": "@@ -102,13 +102,13 @@ static const struct lang_flags lang_defaults[] =\n   /* GNUC99   */  { 1,  0,  1,  1,  0,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* GNUC11   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* GNUC17   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   0,      1,   1,     0 },\n-  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    0,     0,     0,   1,      1,   1,     1 },\n+  /* GNUC2X   */  { 1,  0,  1,  1,  1,  0,  1,   1,   1,   0,    1,     0,     0,   1,      1,   1,     1 },\n   /* STDC89   */  { 0,  0,  0,  0,  0,  1,  0,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC94   */  { 0,  0,  0,  0,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC99   */  { 1,  0,  1,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC11   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n   /* STDC17   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   0,      0,   0,     0 },\n-  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    0,     0,     1,   1,      0,   1,     1 },\n+  /* STDC2X   */  { 1,  0,  1,  1,  1,  1,  1,   1,   0,   0,    1,     0,     1,   1,      0,   1,     1 },\n   /* GNUCXX   */  { 0,  1,  1,  1,  0,  0,  1,   0,   0,   0,    0,     0,     0,   0,      1,   1,     0 },\n   /* CXX98    */  { 0,  1,  0,  1,  0,  1,  1,   0,   0,   0,    0,     0,     1,   0,      0,   1,     0 },\n   /* GNUCXX11 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    0,     0,     0,   0,      1,   1,     0 },"}]}