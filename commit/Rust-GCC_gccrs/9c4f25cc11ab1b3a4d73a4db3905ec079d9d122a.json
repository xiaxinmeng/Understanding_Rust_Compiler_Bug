{"sha": "9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0ZjI1Y2MxMWFiMWIzYTRkNzNhNGRiMzkwNWVjMDc5ZDlkMTIyYQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2015-02-11T10:18:45Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2015-02-11T10:18:45Z"}, "message": "Fix bug 64893: ICE with vget_lane_u32 with C++ front-end\n\n2015-02-11  Andrew Pinski  <apinski@cavium.com>\n\n\tPR target/64893\n\t* config/aarch64/aarch64-builtins.c (aarch64_init_simd_builtins):\n\tChange the first argument type to size_type_node and add another\n\tsize_type_node.\n\t(aarch64_simd_expand_builtin): Handle the new argument to\n\tAARCH64_SIMD_BUILTIN_LANE_CHECK and don't ICE but rather\n\tprint an out when the first two arguments are not\n\tnonzero integer constants.\n\t* config/aarch64/arm_neon.h (__AARCH64_LANE_CHECK):\n\tPass the sizeof directly to __builtin_aarch64_im_lane_boundsi.\n\n2015-02-11  Andrew Pinski  <apinski@cavium.com>\n\n\tPR target/64893\n\t* c-c++-common/torture/aarch64-vect-lane-1.c: New testcase.\n\t* c-c++-common/torture/aarch64-vect-lane-2.c: New testcase.\n\nFrom-SVN: r220610", "tree": {"sha": "1e52b07a173878327939b9215ab71bb326c4e6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e52b07a173878327939b9215ab71bb326c4e6bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/386f7caea73f0d35ed0f7a8ae6e5d52740ab801e"}], "stats": {"total": 46, "additions": 38, "deletions": 8}, "files": [{"sha": "11530bf99358aa9683d3ffc1c20db1dbbd419566", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "patch": "@@ -1,3 +1,16 @@\n+2015-02-11  Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR target/64893\n+\t* config/aarch64/aarch64-builtins.c (aarch64_init_simd_builtins):\n+\tChange the first argument type to size_type_node and add another\n+\tsize_type_node.\n+\t(aarch64_simd_expand_builtin): Handle the new argument to\n+\tAARCH64_SIMD_BUILTIN_LANE_CHECK and don't ICE but rather\n+\tprint an out when the first two arguments are not\n+\tnonzero integer constants.\n+\t* config/aarch64/arm_neon.h (__AARCH64_LANE_CHECK):\n+\tPass the sizeof directly to __builtin_aarch64_im_lane_boundsi.\n+\n 2015-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/61925"}, {"sha": "a9b330591eb6c15fdd90ff475c82d5d56a4d2143", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "patch": "@@ -712,7 +712,8 @@ aarch64_init_simd_builtins (void)\n   aarch64_init_simd_builtin_scalar_types ();\n  \n   tree lane_check_fpr = build_function_type_list (void_type_node,\n-\t\t\t\t\t\t  intSI_type_node,\n+\t\t\t\t\t\t  size_type_node,\n+\t\t\t\t\t\t  size_type_node,\n \t\t\t\t\t\t  intSI_type_node,\n \t\t\t\t\t\t  NULL);\n   aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_LANE_CHECK] =\n@@ -1001,13 +1002,23 @@ aarch64_simd_expand_builtin (int fcode, tree exp, rtx target)\n {\n   if (fcode == AARCH64_SIMD_BUILTIN_LANE_CHECK)\n     {\n-      tree nlanes = CALL_EXPR_ARG (exp, 0);\n-      gcc_assert (TREE_CODE (nlanes) == INTEGER_CST);\n-      rtx lane_idx = expand_normal (CALL_EXPR_ARG (exp, 1));\n-      if (CONST_INT_P (lane_idx))\n-\taarch64_simd_lane_bounds (lane_idx, 0, TREE_INT_CST_LOW (nlanes), exp);\n+      rtx totalsize = expand_normal (CALL_EXPR_ARG (exp, 0));\n+      rtx elementsize = expand_normal (CALL_EXPR_ARG (exp, 1));\n+      if (CONST_INT_P (totalsize) && CONST_INT_P (elementsize)\n+\t  && UINTVAL (elementsize) != 0\n+\t  && UINTVAL (totalsize) != 0)\n+\t{\n+\t  rtx lane_idx = expand_normal (CALL_EXPR_ARG (exp, 2));\n+          if (CONST_INT_P (lane_idx))\n+\t    aarch64_simd_lane_bounds (lane_idx, 0,\n+\t\t\t\t      UINTVAL (totalsize)\n+\t\t\t\t       / UINTVAL (elementsize),\n+\t\t\t\t      exp);\n+          else\n+\t    error (\"%Klane index must be a constant immediate\", exp);\n+\t}\n       else\n-\terror (\"%Klane index must be a constant immediate\", exp);\n+\terror (\"%Ktotal size and element size must be a non-zero constant immediate\", exp);\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }"}, {"sha": "4c1531222c68792dd88cd9f5c919571ed072f0e9", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "patch": "@@ -541,7 +541,7 @@ typedef struct poly16x8x4_t\n \n #define __AARCH64_NUM_LANES(__v) (sizeof (__v) / sizeof (__v[0]))\n #define __AARCH64_LANE_CHECK(__vec, __idx)\t\\\n-\t__builtin_aarch64_im_lane_boundsi (__AARCH64_NUM_LANES (__vec), __idx)\n+\t__builtin_aarch64_im_lane_boundsi (sizeof(__vec), sizeof(__vec[0]), __idx)\n \n /* For big-endian, GCC's vector indices are the opposite way around\n    to the architectural lane indices used by Neon intrinsics.  */"}, {"sha": "d67d814276055cb145f77994c710b038c8bc381c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9c4f25cc11ab1b3a4d73a4db3905ec079d9d122a", "patch": "@@ -1,3 +1,9 @@\n+2015-02-11  Andrew Pinski  <apinski@cavium.com>\n+\n+\tPR target/64893\n+\t* c-c++-common/torture/aarch64-vect-lane-1.c: New testcase.\n+\t* c-c++-common/torture/aarch64-vect-lane-2.c: New testcase.\n+\n 2015-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/61925"}]}