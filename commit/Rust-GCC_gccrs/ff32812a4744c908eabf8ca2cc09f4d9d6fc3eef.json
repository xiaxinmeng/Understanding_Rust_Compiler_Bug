{"sha": "ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzMjgxMmE0NzQ0YzkwOGVhYmY4Y2EyY2MwOWY0ZDlkNmZjM2VlZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-24T19:07:10Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-09-24T19:07:10Z"}, "message": "(eliminate_regs): Specially handle the case where INSN is a note (an EXPR_LIST or INSN_LIST).\n\n(eliminate_regs): Specially handle the case where INSN\nis a note (an EXPR_LIST or INSN_LIST).\n(eliminate_regs_in_insn): Pass the notes as INSN,\nwhen calling eliminate_insn to process the notes.\n\nFrom-SVN: r5445", "tree": {"sha": "40129614c9551eb0acdf07bc93cbebbc10354a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40129614c9551eb0acdf07bc93cbebbc10354a5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef/comments", "author": null, "committer": null, "parents": [{"sha": "7323e99b3650ed8f4bed645cd6aa743444280919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7323e99b3650ed8f4bed645cd6aa743444280919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7323e99b3650ed8f4bed645cd6aa743444280919"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "a6aab02503eb8da12d8c701605e5b207dda75004", "filename": "gcc/reload1.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ff32812a4744c908eabf8ca2cc09f4d9d6fc3eef", "patch": "@@ -2593,11 +2593,16 @@ static struct rtvec_def *old_asm_operands_vec, *new_asm_operands_vec;\n    with the register, which we cannot do outside a MEM.  In addition, we need\n    to record the fact that a register is referenced outside a MEM.\n \n-   If INSN is nonzero, it is the insn containing X.  If we replace a REG\n+   If INSN is an insn, it is the insn containing X.  If we replace a REG\n    in a SET_DEST with an equivalent MEM and INSN is non-zero, write a\n    CLOBBER of the pseudo after INSN so find_equiv_regs will know that\n    that the REG is being modified.\n \n+   Alternatively, INSN may be a note (an EXPR_LIST or INSN_LIST).\n+   That's used when we eliminate in expressions stored in notes.\n+   This means, do not set ref_outside_mem even if the reference\n+   is outside of MEMs.\n+\n    If we see a modification to a register we know about, take the\n    appropriate action (see case SET, below).\n \n@@ -2647,7 +2652,10 @@ eliminate_regs (x, mem_mode, insn)\n \t       ep++)\n \t    if (ep->from_rtx == x && ep->can_eliminate)\n \t      {\n-\t\tif (! mem_mode)\n+\t\tif (! mem_mode\n+\t\t    /* Refs inside notes don't count for this purpose.  */\n+\t\t    && ! (insn == 0 && (GET_CODE (insn) == EXPR_LIST\n+\t\t\t\t\t|| GET_CODE (insn) == INSN_LIST)))\n \t\t  ep->ref_outside_mem = 1;\n \t\treturn plus_constant (ep->to_rtx, ep->previous_offset);\n \t      }\n@@ -3000,10 +3008,10 @@ eliminate_regs (x, mem_mode, insn)\n \trtx new0 = eliminate_regs (SET_DEST (x), 0, NULL_RTX);\n \trtx new1 = eliminate_regs (SET_SRC (x), 0, NULL_RTX);\n \n-\t/* If SET_DEST changed from a REG to a MEM and INSN is non-zero,\n+\t/* If SET_DEST changed from a REG to a MEM and INSN is an insn,\n \t   write a CLOBBER insn.  */\n \tif (GET_CODE (SET_DEST (x)) == REG && GET_CODE (new0) == MEM\n-\t    && insn != 0)\n+\t    && insn != 0 && GET_CODE (insn) != EXPR_LIST)\n \t  emit_insn_after (gen_rtx (CLOBBER, VOIDmode, SET_DEST (x)), insn);\n \n \tif (new0 != SET_DEST (x) || new1 != SET_SRC (x))\n@@ -3243,7 +3251,7 @@ eliminate_regs_in_insn (insn, replace)\n      of spill registers to be needed in the final reload pass than in\n      the pre-passes.  */\n   if (val && REG_NOTES (insn) != 0)\n-    REG_NOTES (insn) = eliminate_regs (REG_NOTES (insn), 0, NULL_RTX);\n+    REG_NOTES (insn) = eliminate_regs (REG_NOTES (insn), 0, REG_NOTES (insn));\n \n   if (! replace)\n     pop_obstacks ();"}]}