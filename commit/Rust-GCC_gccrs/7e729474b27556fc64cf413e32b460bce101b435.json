{"sha": "7e729474b27556fc64cf413e32b460bce101b435", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U3Mjk0NzRiMjc1NTZmYzY0Y2Y0MTNlMzJiNDYwYmNlMTAxYjQzNQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2015-10-20T11:59:51Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2015-10-20T11:59:51Z"}, "message": "Correctly fill up cgraph_node::local.versionable flag.\n\n\t* cgraphclones.c (cgraph_node::create_virtual_clone):\n\tVerify cgraph_node.local.versionable instead of calling\n\ttree_versionable_function_p.\n\t* ipa-cp.c (determine_versionability): Save the information\n\tto ipa_node_params summary.\n\t(ipcp_versionable_function_p): Use it.\n\t(ipcp_propagate_stage): Pass IPA_NODE_REF to a called function.\n\t(ipcp_generate_summary): Do not compute cgraph_node\n\tversionability.\n\t* ipa-inline-analysis.c (inline_generate_summary): Compute\n\tversionability for all cgraph nodes.\n\t* ipa-prop.c (ipa_node_params_t::duplicate): Duplicate\n\tipa_node_params::versionability.\n\t* ipa-prop.h (struct ipa_node_params): Declare it.\n\nFrom-SVN: r229055", "tree": {"sha": "d5b42adfb7238acffc09b8dfa4f33bfe9f65cbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5b42adfb7238acffc09b8dfa4f33bfe9f65cbab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e729474b27556fc64cf413e32b460bce101b435", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e729474b27556fc64cf413e32b460bce101b435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e729474b27556fc64cf413e32b460bce101b435", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e729474b27556fc64cf413e32b460bce101b435/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f0a92e5c46e74b5d5232aab9997f6f3a27d8619"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "45fc66ab95efd4dce38a5827f1ee02773b29c8e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -1,3 +1,20 @@\n+2015-10-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone):\n+\tVerify cgraph_node.local.versionable instead of calling\n+\ttree_versionable_function_p.\n+\t* ipa-cp.c (determine_versionability): Save the information\n+\tto ipa_node_params summary.\n+\t(ipcp_versionable_function_p): Use it.\n+\t(ipcp_propagate_stage): Pass IPA_NODE_REF to a called function.\n+\t(ipcp_generate_summary): Do not compute cgraph_node\n+\tversionability.\n+\t* ipa-inline-analysis.c (inline_generate_summary): Compute\n+\tversionability for all cgraph nodes.\n+\t* ipa-prop.c (ipa_node_params_t::duplicate): Duplicate\n+\tipa_node_params::versionability.\n+\t* ipa-prop.h (struct ipa_node_params): Declare it.\n+\n 2015-10-20  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \tPR other/67868"}, {"sha": "f243f6ffdce5167887aa8a9c9157b44a15ad676e", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -569,9 +569,7 @@ cgraph_node::create_virtual_clone (vec<cgraph_edge *> redirect_callers,\n   ipa_replace_map *map;\n   char *name;\n \n-  if (!in_lto_p)\n-    gcc_checking_assert (tree_versionable_function_p (old_decl));\n-\n+  gcc_checking_assert (local.versionable);\n   gcc_assert (local.can_change_signature || !args_to_skip);\n \n   /* Make a new FUNCTION_DECL tree node */"}, {"sha": "ef93b209dfb445a29a0d92789b56709627cd3baf", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -514,7 +514,8 @@ print_all_lattices (FILE * f, bool dump_sources, bool dump_benefits)\n    with NODE.  */\n \n static void\n-determine_versionability (struct cgraph_node *node)\n+determine_versionability (struct cgraph_node *node,\n+\t\t\t  struct ipa_node_params *info)\n {\n   const char *reason = NULL;\n \n@@ -546,7 +547,7 @@ determine_versionability (struct cgraph_node *node)\n     fprintf (dump_file, \"Function %s/%i is not versionable, reason: %s.\\n\",\n \t     node->name (), node->order, reason);\n \n-  node->local.versionable = (reason == NULL);\n+  info->versionable = (reason == NULL);\n }\n \n /* Return true if it is at all technically possible to create clones of a\n@@ -555,7 +556,7 @@ determine_versionability (struct cgraph_node *node)\n static bool\n ipcp_versionable_function_p (struct cgraph_node *node)\n {\n-  return node->local.versionable;\n+  return IPA_NODE_REF (node)->versionable;\n }\n \n /* Structure holding accumulated information about callers of a node.  */\n@@ -2896,7 +2897,7 @@ ipcp_propagate_stage (struct ipa_topo_info *topo)\n   {\n     struct ipa_node_params *info = IPA_NODE_REF (node);\n \n-    determine_versionability (node);\n+    determine_versionability (node, info);\n     if (node->has_gimple_body_p ())\n       {\n \tinfo->lattices = XCNEWVEC (struct ipcp_param_lattices,\n@@ -4609,11 +4610,7 @@ ipcp_generate_summary (void)\n   ipa_register_cgraph_hooks ();\n \n   FOR_EACH_FUNCTION_WITH_GIMPLE_BODY (node)\n-      {\n-\tnode->local.versionable\n-\t  = tree_versionable_function_p (node->decl);\n-\tipa_analyze_node (node);\n-      }\n+    ipa_analyze_node (node);\n }\n \n /* Write ipcp summary for nodes in SET.  */"}, {"sha": "35322ccae57576e886b48ea41be2e4ef0728eb5b", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -4112,6 +4112,10 @@ inline_generate_summary (void)\n {\n   struct cgraph_node *node;\n \n+  FOR_EACH_DEFINED_FUNCTION (node)\n+    if (DECL_STRUCT_FUNCTION (node->decl))\n+      node->local.versionable = tree_versionable_function_p (node->decl);\n+\n   /* When not optimizing, do not bother to analyze.  Inlining is still done\n      because edge redirection needs to happen there.  */\n   if (!optimize && !flag_generate_lto && !flag_generate_offload && !flag_wpa)"}, {"sha": "19846a8642b29b0e4a7538eb8f38d29d61c21046", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -3507,6 +3507,7 @@ ipa_node_params_t::duplicate(cgraph_node *src, cgraph_node *dst,\n \n   new_info->analysis_done = old_info->analysis_done;\n   new_info->node_enqueued = old_info->node_enqueued;\n+  new_info->versionable = old_info->versionable;\n \n   old_av = ipa_get_agg_replacements_for_node (src);\n   if (old_av)"}, {"sha": "35952dce1ca90e7a4e564d0cd0171af97e53d83a", "filename": "gcc/ipa-prop.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-prop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e729474b27556fc64cf413e32b460bce101b435/gcc%2Fipa-prop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.h?ref=7e729474b27556fc64cf413e32b460bce101b435", "patch": "@@ -334,6 +334,8 @@ struct ipa_node_params\n   unsigned node_within_scc : 1;\n   /* Node is calling a private function called only once.  */\n   unsigned node_calling_single_call : 1;\n+  /* False when there is something makes versioning impossible.  */\n+  unsigned versionable : 1;\n };\n \n /* Intermediate information that we get from alias analysis about a particular"}]}