{"sha": "642124c6357309ef8921518244c03ca7551889fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQyMTI0YzYzNTczMDllZjg5MjE1MTgyNDRjMDNjYTc1NTE4ODlmYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-26T18:07:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-26T18:07:57Z"}, "message": "cp-tree.h (DECL_FIELD_IS_BASE): New.\n\n        * cp-tree.h (DECL_FIELD_IS_BASE): New.\n        * class.c (build_base_field): Set it.\n        (build_simple_base_path): Use it.\n        (fixed_type_or_null): Don't consider base fields definitive.\n\nFrom-SVN: r86630", "tree": {"sha": "4a6cbb2f40bd42b9a901fdcd8597394936704ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a6cbb2f40bd42b9a901fdcd8597394936704ff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/642124c6357309ef8921518244c03ca7551889fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642124c6357309ef8921518244c03ca7551889fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/642124c6357309ef8921518244c03ca7551889fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/642124c6357309ef8921518244c03ca7551889fc/comments", "author": null, "committer": null, "parents": [{"sha": "2e6c96419d34a2921e746e14facbb403e2cf06ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6c96419d34a2921e746e14facbb403e2cf06ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6c96419d34a2921e746e14facbb403e2cf06ee"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "ac5344eddc168f5f09eeb289aeaf74990921507d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=642124c6357309ef8921518244c03ca7551889fc", "patch": "@@ -1,3 +1,10 @@\n+2004-08-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-tree.h (DECL_FIELD_IS_BASE): New.\n+\t* class.c (build_base_field): Set it.\n+\t(build_simple_base_path): Use it.\n+\t(fixed_type_or_null): Don't consider base fields definitive.\n+\n 2004-08-25  Roger Sayle  <roger@eyesopen.com>\n \n \tPR middle-end/16693"}, {"sha": "d6115b4fb28eaa19d21f33f0206e5670e2868fcf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=642124c6357309ef8921518244c03ca7551889fc", "patch": "@@ -438,9 +438,8 @@ build_simple_base_path (tree expr, tree binfo)\n        field; field = TREE_CHAIN (field))\n     /* Is this the base field created by build_base_field?  */\n     if (TREE_CODE (field) == FIELD_DECL\n-\t&& TREE_TYPE (field) == type\n-\t&& DECL_ARTIFICIAL (field)\n-\t&& DECL_IGNORED_P (field))\n+\t&& DECL_FIELD_IS_BASE (field)\n+\t&& TREE_TYPE (field) == type)\n       return build_class_member_access_expr (expr, field,\n \t\t\t\t\t     NULL_TREE, false);\n \n@@ -3642,6 +3641,7 @@ build_base_field (record_layout_info rli, tree binfo,\n       DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n       DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n       DECL_IGNORED_P (decl) = 1;\n+      DECL_FIELD_IS_BASE (decl) = 1;\n \n       /* Try to place the field.  It may take more than one try if we\n \t have a hard time placing the field without putting two\n@@ -5300,6 +5300,10 @@ fixed_type_or_null (tree instance, int* nonnull, int* cdtorp)\n       return fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n \n     case COMPONENT_REF:\n+      /* If this component is really a base class reference, then the field\n+\t itself isn't definitive.  */\n+      if (DECL_FIELD_IS_BASE (TREE_OPERAND (instance, 1)))\n+        return fixed_type_or_null (TREE_OPERAND (instance, 0), nonnull, cdtorp);\n       return fixed_type_or_null (TREE_OPERAND (instance, 1), nonnull, cdtorp);\n \n     case VAR_DECL:"}, {"sha": "4597b45ff81c3aa169466d13fe5765e6639d11b9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/642124c6357309ef8921518244c03ca7551889fc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=642124c6357309ef8921518244c03ca7551889fc", "patch": "@@ -100,6 +100,7 @@ struct diagnostic_context;\n       DECL_INVALID_OVERRIDER_P (in a FUNCTION_DECL)\n    5: DECL_INTERFACE_KNOWN.\n    6: DECL_THIS_STATIC (in VAR_DECL or FUNCTION_DECL).\n+      DECL_FIELD_IS_BASE (in FIELD_DECL)\n    7: DECL_DEAD_FOR_LOCAL (in VAR_DECL).\n       DECL_THUNK_P (in a member FUNCTION_DECL)\n \n@@ -2550,6 +2551,11 @@ struct lang_decl GTY(())\n #define DECL_THIS_STATIC(NODE) \\\n   DECL_LANG_FLAG_6 (VAR_FUNCTION_OR_PARM_DECL_CHECK (NODE))\n \n+/* Nonzero for FIELD_DECL node means that this field is a base class\n+   of the parent object, as opposed to a member field.  */\n+#define DECL_FIELD_IS_BASE(NODE) \\\n+  DECL_LANG_FLAG_6 (FIELD_DECL_CHECK (NODE))\n+\n /* Nonzero if TYPE is an anonymous union or struct type.  We have to use a\n    flag for this because \"A union for which objects or pointers are\n    declared is not an anonymous union\" [class.union].  */"}]}