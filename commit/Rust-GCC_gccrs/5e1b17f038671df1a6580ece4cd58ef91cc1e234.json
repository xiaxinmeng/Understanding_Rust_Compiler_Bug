{"sha": "5e1b17f038671df1a6580ece4cd58ef91cc1e234", "node_id": "C_kwDOANBUbNoAKDVlMWIxN2YwMzg2NzFkZjFhNjU4MGVjZTRjZDU4ZWY5MWNjMWUyMzQ", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-22T14:37:58Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-02-22T14:37:58Z"}, "message": "libstdc++: Implement P2415R2 changes to viewable_range / views::all\n\nThis implements the wording changes in P2415R2 \"What is a view?\", which\nis a DR for C++20.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (__detail::__is_initializer_list):\n\tDefine.\n\t(viewable_range): Adjust as per P2415R2.\n\t* include/bits/ranges_cmp.h (__cpp_lib_ranges): Adjust value.\n\t* include/std/ranges (owning_view): Define as per P2415R2.\n\t(enable_borrowed_range<owning_view>): Likewise.\n\t(views::__detail::__can_subrange): Replace with ...\n\t(views::__detail::__can_owning_view): ... this.\n\t(views::_All::_S_noexcept): Sync with operator().\n\t(views::_All::operator()): Use owning_view instead of subrange\n\tas per P2415R2.\n\t* include/std/version (__cpp_lib_ranges): Adjust value.\n\t* testsuite/std/ranges/adaptors/all.cc (test06): Adjust now that\n\tviews::all uses owning_view instead of subrange.\n\t(test08): New test.\n\t* testsuite/std/ranges/adaptors/lazy_split.cc (test09): Adjust\n\tnow that rvalue non-view non-borrowed ranges are viewable.\n\t* testsuite/std/ranges/adaptors/split.cc (test06): Likewise.", "tree": {"sha": "d2fec60efe254b26c408c5cbb3c166f090bca081", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2fec60efe254b26c408c5cbb3c166f090bca081"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e1b17f038671df1a6580ece4cd58ef91cc1e234", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b17f038671df1a6580ece4cd58ef91cc1e234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e1b17f038671df1a6580ece4cd58ef91cc1e234", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e1b17f038671df1a6580ece4cd58ef91cc1e234/comments", "author": null, "committer": null, "parents": [{"sha": "bc91cb8d8cf1d4abbb74fb69d918071e1801fd77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc91cb8d8cf1d4abbb74fb69d918071e1801fd77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc91cb8d8cf1d4abbb74fb69d918071e1801fd77"}], "stats": {"total": 194, "additions": 159, "deletions": 35}, "files": [{"sha": "38db33fd2ce9ea4c2a2a11035e09f41ba008515c", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -634,7 +634,7 @@ namespace ranges\n     template<typename _Tp>\n       concept __is_derived_from_view_interface\n \t= requires (_Tp __t) { __is_derived_from_view_interface_fn(__t, __t); };\n-  }\n+  } // namespace __detail\n \n   /// [range.view] The ranges::view_base type.\n   struct view_base { };\n@@ -689,11 +689,23 @@ namespace ranges\n     concept common_range\n       = range<_Tp> && same_as<iterator_t<_Tp>, sentinel_t<_Tp>>;\n \n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      inline constexpr bool __is_initializer_list = false;\n+\n+    template<typename _Tp>\n+      inline constexpr bool __is_initializer_list<initializer_list<_Tp>> = true;\n+  } // namespace __detail\n+\n   /// A range which can be safely converted to a view.\n   template<typename _Tp>\n     concept viewable_range = range<_Tp>\n       && ((view<remove_cvref_t<_Tp>> && constructible_from<remove_cvref_t<_Tp>, _Tp>)\n-\t  || (!view<remove_cvref_t<_Tp>> && borrowed_range<_Tp>));\n+\t  || (!view<remove_cvref_t<_Tp>>\n+\t      && (is_lvalue_reference_v<_Tp>\n+\t\t  || (movable<remove_reference_t<_Tp>>\n+\t\t      && !__detail::__is_initializer_list<remove_cvref_t<_Tp>>))));\n \n   // [range.iter.ops] range iterator operations\n "}, {"sha": "6a5ad3de6e71e9b923e98273cc357ab7d9662c35", "filename": "libstdc++-v3/include/bits/ranges_cmp.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_cmp.h?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -57,7 +57,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __cpp_lib_concepts\n // Define this here, included by all the headers that need to define it.\n-#define __cpp_lib_ranges 202106L\n+#define __cpp_lib_ranges 202110L\n \n namespace ranges\n {"}, {"sha": "3e71ecb32b77fcfb8b024a7c427d3014c293fc9a", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 85, "deletions": 4, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -1144,6 +1144,87 @@ namespace views::__adaptor\n   template<typename _Tp>\n     inline constexpr bool enable_borrowed_range<ref_view<_Tp>> = true;\n \n+  template<range _Range>\n+    requires movable<_Range>\n+      && (!__detail::__is_initializer_list<remove_cv_t<_Range>>)\n+    class owning_view : public view_interface<owning_view<_Range>>\n+    {\n+    private:\n+      _Range _M_r = _Range();\n+\n+    public:\n+      owning_view() requires default_initializable<_Range> = default;\n+\n+      constexpr\n+      owning_view(_Range&& __t)\n+      noexcept(is_nothrow_move_constructible_v<_Range>)\n+\t: _M_r(std::move(__t))\n+      { }\n+\n+      owning_view(owning_view&&) = default;\n+      owning_view& operator=(owning_view&&) = default;\n+\n+      constexpr _Range&\n+      base() & noexcept\n+      { return _M_r; }\n+\n+      constexpr const _Range&\n+      base() const& noexcept\n+      { return _M_r; }\n+\n+      constexpr _Range&&\n+      base() && noexcept\n+      { return std::move(_M_r); }\n+\n+      constexpr const _Range&&\n+      base() const&& noexcept\n+      { return std::move(_M_r); }\n+\n+      constexpr iterator_t<_Range>\n+      begin()\n+      { return ranges::begin(_M_r); }\n+\n+      constexpr sentinel_t<_Range>\n+      end()\n+      { return ranges::end(_M_r); }\n+\n+      constexpr auto\n+      begin() const requires range<const _Range>\n+      { return ranges::begin(_M_r); }\n+\n+      constexpr auto\n+      end() const requires range<const _Range>\n+      { return ranges::end(_M_r); }\n+\n+      constexpr bool\n+      empty() requires requires { ranges::empty(_M_r); }\n+      { return ranges::empty(_M_r); }\n+\n+      constexpr bool\n+      empty() const requires requires { ranges::empty(_M_r); }\n+      { return ranges::empty(_M_r); }\n+\n+      constexpr auto\n+      size() requires sized_range<_Range>\n+      { return ranges::size(_M_r); }\n+\n+      constexpr auto\n+      size() const requires sized_range<const _Range>\n+      { return ranges::size(_M_r); }\n+\n+      constexpr auto\n+      data() requires contiguous_range<_Range>\n+      { return ranges::data(_M_r); }\n+\n+      constexpr auto\n+      data() const requires contiguous_range<const _Range>\n+      { return ranges::data(_M_r); }\n+    };\n+\n+  template<typename _Tp>\n+    inline constexpr bool enable_borrowed_range<owning_view<_Tp>>\n+      = enable_borrowed_range<_Tp>;\n+\n   namespace views\n   {\n     namespace __detail\n@@ -1152,7 +1233,7 @@ namespace views::__adaptor\n \tconcept __can_ref_view = requires { ref_view{std::declval<_Range>()}; };\n \n       template<typename _Range>\n-\tconcept __can_subrange = requires { subrange{std::declval<_Range>()}; };\n+\tconcept __can_owning_view = requires { owning_view{std::declval<_Range>()}; };\n     } // namespace __detail\n \n     struct _All : __adaptor::_RangeAdaptorClosure\n@@ -1166,13 +1247,13 @@ namespace views::__adaptor\n \t  else if constexpr (__detail::__can_ref_view<_Range>)\n \t    return true;\n \t  else\n-\t    return noexcept(subrange{std::declval<_Range>()});\n+\t    return noexcept(owning_view{std::declval<_Range>()});\n \t}\n \n       template<viewable_range _Range>\n \trequires view<decay_t<_Range>>\n \t  || __detail::__can_ref_view<_Range>\n-\t  || __detail::__can_subrange<_Range>\n+\t  || __detail::__can_owning_view<_Range>\n \tconstexpr auto\n \toperator() [[nodiscard]] (_Range&& __r) const\n \tnoexcept(_S_noexcept<_Range>())\n@@ -1182,7 +1263,7 @@ namespace views::__adaptor\n \t  else if constexpr (__detail::__can_ref_view<_Range>)\n \t    return ref_view{std::forward<_Range>(__r)};\n \t  else\n-\t    return subrange{std::forward<_Range>(__r)};\n+\t    return owning_view{std::forward<_Range>(__r)};\n \t}\n \n       static constexpr bool _S_has_simple_call_op = true;"}, {"sha": "461e65b5fab6899594a6c83a360da14db93d7b07", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -273,7 +273,7 @@\n #define __cpp_lib_optional 202106L\n #define __cpp_lib_polymorphic_allocator 201902L\n #if __cpp_lib_concepts\n-# define __cpp_lib_ranges 202106L\n+# define __cpp_lib_ranges 202110L\n #endif\n #if __cpp_lib_atomic_wait || _GLIBCXX_HAVE_POSIX_SEMAPHORE\n # define __cpp_lib_semaphore 201907L"}, {"sha": "e457462825d9b606d2bac195bd3d5956593e69e7", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/all.cc", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fall.cc?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -19,7 +19,9 @@\n // { dg-do run { target c++2a } }\n \n #include <algorithm>\n+#include <array>\n #include <ranges>\n+#include <vector>\n #include <testsuite_hooks.h>\n #include <testsuite_iterators.h>\n \n@@ -130,20 +132,6 @@ test05()\n   static_assert(!requires { 0 | all; });\n }\n \n-template<bool B1, bool B2>\n-struct BorrowedRange\n-{\n-  int* ptr = nullptr;\n-\n-  BorrowedRange(int (&arr)[3]) noexcept : ptr(arr) { }\n-\n-  int* begin() const noexcept(B1) { return ptr; }\n-  int* end() const noexcept(B2) { return ptr + 3; }\n-};\n-\n-template<bool B1, bool B2>\n-const bool std::ranges::enable_borrowed_range<BorrowedRange<B1, B2>> = true;\n-\n void\n test06()\n {\n@@ -152,11 +140,11 @@ test06()\n   // Using ref_view:\n   static_assert(noexcept(views::all(x)));\n \n-  // Using subrange:\n-  static_assert(noexcept(views::all(BorrowedRange<true, true>(x))));\n-  static_assert(!noexcept(views::all(BorrowedRange<true, false>(x))));\n-  static_assert(!noexcept(views::all(BorrowedRange<false, true>(x))));\n-  static_assert(!noexcept(views::all(BorrowedRange<false, false>(x))));\n+  // Using owning_view:\n+  static_assert(noexcept(views::all(std::array<int, 3>{})));\n+  struct A { A(); A(const A&); };\n+  static_assert(!std::is_nothrow_move_constructible_v<std::array<A, 3>>);\n+  static_assert(!noexcept(views::all(std::array<A, 3>{})));\n }\n \n void\n@@ -173,6 +161,38 @@ test07()\n   static_assert(!ranges::viewable_range<view_t&>);\n }\n \n+constexpr bool\n+test08()\n+{\n+  // Verify P2415R2 \"What is a view?\" changes.\n+  // In particular, rvalue non-view non-borrowed ranges are now viewable.\n+  static_assert(ranges::viewable_range<std::vector<int>&&>);\n+  static_assert(!ranges::viewable_range<const std::vector<int>&&>);\n+\n+  static_assert(ranges::viewable_range<std::initializer_list<int>&>);\n+  static_assert(ranges::viewable_range<const std::initializer_list<int>&>);\n+  static_assert(!ranges::viewable_range<std::initializer_list<int>&&>);\n+  static_assert(!ranges::viewable_range<const std::initializer_list<int>&&>);\n+\n+  using type = views::all_t<std::vector<int>&&>;\n+  using type = ranges::owning_view<std::vector<int>>;\n+\n+  std::same_as<type> auto v = std::vector<int>{{1,2,3}} | views::all;\n+\n+  VERIFY( ranges::equal(v, (int[]){1,2,3}) );\n+  VERIFY( ranges::size(v) == 3 );\n+  VERIFY( !ranges::empty(v) );\n+  VERIFY( ranges::data(v) == &v[0] );\n+\n+  const auto w = std::move(v);\n+  VERIFY( ranges::equal(w, (int[]){1,2,3}) );\n+  VERIFY( ranges::size(w) == 3 );\n+  VERIFY( !ranges::empty(w) );\n+  VERIFY( ranges::data(w) == &w[0] );\n+\n+  return true;\n+}\n+\n int\n main()\n {\n@@ -183,4 +203,5 @@ main()\n   test05();\n   test06();\n   test07();\n+  static_assert(test08());\n }"}, {"sha": "e46f76d7632e4d1f09ad0a1e6c0d1c2550464ee1", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/lazy_split.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Flazy_split.cc?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -163,10 +163,15 @@ test09()\n   static_assert(!requires { lazy_split(p)(); });\n   static_assert(!requires { s | lazy_split; });\n \n-  static_assert(!requires { s | lazy_split(p); });\n-  static_assert(!requires { lazy_split(p)(s); });\n-  static_assert(!requires { s | (lazy_split(p) | views::all); });\n-  static_assert(!requires { (lazy_split(p) | views::all)(s); });\n+  // Test the case where the closure object is used as an rvalue and therefore\n+  // the copy of p is forwarded as an rvalue.\n+  // This used to be invalid, but is now well-formed after P2415R2 relaxed\n+  // the requirements of viewable_range to admit rvalue non-view non-borrowed\n+  // ranges such as std::string&&.\n+  static_assert(requires { s | lazy_split(p); });\n+  static_assert(requires { lazy_split(p)(s); });\n+  static_assert(requires { s | (lazy_split(p) | views::all); });\n+  static_assert(requires { (lazy_split(p) | views::all)(s); });\n \n   static_assert(requires { s | lazy_split(views::all(p)); });\n   static_assert(requires { lazy_split(views::all(p))(s); });"}, {"sha": "ca10608efb5433cda35d460248548384b1466854", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/split.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e1b17f038671df1a6580ece4cd58ef91cc1e234/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fsplit.cc?ref=5e1b17f038671df1a6580ece4cd58ef91cc1e234", "patch": "@@ -145,10 +145,15 @@ test06()\n   static_assert(!requires { split(p)(); });\n   static_assert(!requires { s | split; });\n \n-  static_assert(!requires { s | split(p); });\n-  static_assert(!requires { split(p)(s); });\n-  static_assert(!requires { s | (split(p) | views::all); });\n-  static_assert(!requires { (split(p) | views::all)(s); });\n+  // Test the case where the closure object is used as an rvalue and therefore\n+  // the copy of p is forwarded as an rvalue.\n+  // This used to be invalid, but is now well-formed after P2415R2 relaxed\n+  // the requirements of viewable_range to admit rvalue non-view non-borrowed\n+  // ranges such as std::string&&.\n+  static_assert(requires { s | split(p); });\n+  static_assert(requires { split(p)(s); });\n+  static_assert(requires { s | (split(p) | views::all); });\n+  static_assert(requires { (split(p) | views::all)(s); });\n \n   static_assert(requires { s | split(views::all(p)); });\n   static_assert(requires { split(views::all(p))(s); });"}]}