{"sha": "5299155bb80e90df822e1eebc9f9a0c8e4505a46", "node_id": "C_kwDOANBUbNoAKDUyOTkxNTViYjgwZTkwZGY4MjJlMWVlYmM5ZjlhMGM4ZTQ1MDVhNDY", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2022-09-25T20:48:55Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-10-01T18:09:08Z"}, "message": "Fortran: Fix ICE and wrong code for assumed-rank arrays [PR100029, PR100040]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/100040\n\tPR fortran/100029\n\t* trans-expr.cc (gfc_conv_class_to_class): Add code to have\n\tassumed-rank arrays recognized as full arrays and fix the type\n\tof the array assignment.\n\t(gfc_conv_procedure_call): Change order of code blocks such that\n\tthe free of ALLOCATABLE dummy arguments with INTENT(OUT) occurs\n\tfirst.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/100029\n\t* gfortran.dg/PR100029.f90: New test.\n\n\tPR fortran/100040\n\t* gfortran.dg/PR100040.f90: New test.", "tree": {"sha": "8a5043229342b4328d80a93424c8463576a4afae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a5043229342b4328d80a93424c8463576a4afae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5299155bb80e90df822e1eebc9f9a0c8e4505a46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5299155bb80e90df822e1eebc9f9a0c8e4505a46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5299155bb80e90df822e1eebc9f9a0c8e4505a46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5299155bb80e90df822e1eebc9f9a0c8e4505a46/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c051060ade8a4392bbd4604a551a8dcb8c937f45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c051060ade8a4392bbd4604a551a8dcb8c937f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c051060ade8a4392bbd4604a551a8dcb8c937f45"}], "stats": {"total": 106, "additions": 85, "deletions": 21}, "files": [{"sha": "1551a2e4df42ca870c1daae5bd1b7d5b57a13357", "filename": "gcc/fortran/trans-expr.cc", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ffortran%2Ftrans-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ffortran%2Ftrans-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.cc?ref=5299155bb80e90df822e1eebc9f9a0c8e4505a46", "patch": "@@ -1178,8 +1178,10 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n     return;\n \n   /* Test for FULL_ARRAY.  */\n-  if (e->rank == 0 && gfc_expr_attr (e).codimension\n-      && gfc_expr_attr (e).dimension)\n+  if (e->rank == 0\n+      && ((gfc_expr_attr (e).codimension && gfc_expr_attr (e).dimension)\n+\t  || (class_ts.u.derived->components->as\n+\t      && class_ts.u.derived->components->as->type == AS_ASSUMED_RANK)))\n     full_array = true;\n   else\n     gfc_is_class_array_ref (e, &full_array);\n@@ -1227,8 +1229,12 @@ gfc_conv_class_to_class (gfc_se *parmse, gfc_expr *e, gfc_typespec class_ts,\n \t  && e->rank != class_ts.u.derived->components->as->rank)\n \t{\n \t  if (e->rank == 0)\n-\t    gfc_add_modify (&parmse->post, gfc_class_data_get (parmse->expr),\n-\t\t\t    gfc_conv_descriptor_data_get (ctree));\n+\t    {\n+\t      tmp = gfc_class_data_get (parmse->expr);\n+\t      gfc_add_modify (&parmse->post, tmp,\n+\t\t\t      fold_convert (TREE_TYPE (tmp),\n+\t\t\t\t\t gfc_conv_descriptor_data_get (ctree)));\n+\t    }\n \t  else\n \t    class_array_data_assign (&parmse->post, parmse->expr, ctree, true);\n \t}\n@@ -6560,23 +6566,6 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t    base_object = build_fold_indirect_ref_loc (input_location,\n \t\t\t\t\t\t\t       parmse.expr);\n \n-\t\t  /* A class array element needs converting back to be a\n-\t\t     class object, if the formal argument is a class object.  */\n-\t\t  if (fsym && fsym->ts.type == BT_CLASS\n-\t\t\t&& e->ts.type == BT_CLASS\n-\t\t\t&& ((CLASS_DATA (fsym)->as\n-\t\t\t     && CLASS_DATA (fsym)->as->type == AS_ASSUMED_RANK)\n-\t\t\t    || CLASS_DATA (e)->attr.dimension))\n-\t\t    gfc_conv_class_to_class (&parmse, e, fsym->ts, false,\n-\t\t\t\t     fsym->attr.intent != INTENT_IN\n-\t\t\t\t     && (CLASS_DATA (fsym)->attr.class_pointer\n-\t\t\t\t\t || CLASS_DATA (fsym)->attr.allocatable),\n-\t\t\t\t     fsym->attr.optional\n-\t\t\t\t     && e->expr_type == EXPR_VARIABLE\n-\t\t\t\t     && e->symtree->n.sym->attr.optional,\n-\t\t\t\t     CLASS_DATA (fsym)->attr.class_pointer\n-\t\t\t\t     || CLASS_DATA (fsym)->attr.allocatable);\n-\n \t\t  /* If an ALLOCATABLE dummy argument has INTENT(OUT) and is\n \t\t     allocated on entry, it must be deallocated.  */\n \t\t  if (fsym && fsym->attr.intent == INTENT_OUT\n@@ -6637,6 +6626,23 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t      gfc_add_expr_to_block (&se->pre, tmp);\n \t\t    }\n \n+\t\t  /* A class array element needs converting back to be a\n+\t\t     class object, if the formal argument is a class object.  */\n+\t\t  if (fsym && fsym->ts.type == BT_CLASS\n+\t\t\t&& e->ts.type == BT_CLASS\n+\t\t\t&& ((CLASS_DATA (fsym)->as\n+\t\t\t     && CLASS_DATA (fsym)->as->type == AS_ASSUMED_RANK)\n+\t\t\t    || CLASS_DATA (e)->attr.dimension))\n+\t\t    gfc_conv_class_to_class (&parmse, e, fsym->ts, false,\n+\t\t\t\t     fsym->attr.intent != INTENT_IN\n+\t\t\t\t     && (CLASS_DATA (fsym)->attr.class_pointer\n+\t\t\t\t\t || CLASS_DATA (fsym)->attr.allocatable),\n+\t\t\t\t     fsym->attr.optional\n+\t\t\t\t     && e->expr_type == EXPR_VARIABLE\n+\t\t\t\t     && e->symtree->n.sym->attr.optional,\n+\t\t\t\t     CLASS_DATA (fsym)->attr.class_pointer\n+\t\t\t\t     || CLASS_DATA (fsym)->attr.allocatable);\n+\n \t\t  if (fsym && (fsym->ts.type == BT_DERIVED\n \t\t\t       || fsym->ts.type == BT_ASSUMED)\n \t\t      && e->ts.type == BT_CLASS"}, {"sha": "fd7e4c46032c1d41ba9ab8764b138c18647c147b", "filename": "gcc/testsuite/gfortran.dg/PR100029.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100029.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100029.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100029.f90?ref=5299155bb80e90df822e1eebc9f9a0c8e4505a46", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR100029\n+!\n+\n+program foo_p\n+  implicit none\n+\n+  type :: foo_t\n+  end type foo_t\n+  \n+  class(foo_t), allocatable :: pout\n+\n+  call foo_s(pout)\n+\n+contains\n+\n+  subroutine foo_s(that)\n+    class(foo_t), allocatable, intent(out) :: that(..)\n+  end subroutine foo_s\n+\n+end program foo_p"}, {"sha": "0a135ff30a3f5af5d7a0c8fbb38a99535d0cf988", "filename": "gcc/testsuite/gfortran.dg/PR100040.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100040.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5299155bb80e90df822e1eebc9f9a0c8e4505a46/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100040.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR100040.f90?ref=5299155bb80e90df822e1eebc9f9a0c8e4505a46", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR100040\n+!\n+\n+program foo_p\n+  implicit none\n+\n+  integer, parameter :: n = 11\n+\n+  type :: foo_t\n+    integer :: i\n+  end type foo_t\n+  \n+  type(foo_t), parameter :: a = foo_t(n)\n+  \n+  class(foo_t), allocatable :: pout\n+\n+  call foo_s(pout)\n+  if(.not.allocated(pout)) stop 1\n+  if(pout%i/=n) stop 2\n+\n+contains\n+\n+  subroutine foo_s(that)\n+    class(foo_t), allocatable, intent(out) :: that(..)\n+\n+    select rank(that)\n+    rank(0)\n+      that = a\n+    rank default\n+      stop 3\n+    end select\n+  end subroutine foo_s\n+\n+end program foo_p"}]}