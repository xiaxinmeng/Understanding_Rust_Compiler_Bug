{"sha": "3c698bf09bbb3c96d568011c7b62a49c9d67f928", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M2OThiZjA5YmJiM2M5NmQ1NjgwMTFjN2I2MmE0OWM5ZDY3ZjkyOA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2014-05-28T11:32:54Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2014-05-28T11:32:54Z"}, "message": "Centralise clearing hardware capabilities with Sun ld\n\n\tgcc:\n\t* configure.ac ($gcc_cv_ld_clearcap): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sol2.opt (mclear-hwcap): New option.\n\t* config/sol2.h (LINK_CLEARCAP_SPEC): Define.\n\t* config/sol2-clearcap.map: Moved here from\n\ttestsuite/gcc.target/i386/clearcap.map.\n\t* config/sol2-clearcapv2.map: Move here from\n\tgcc.target/i386/clearcapv2.map.\n\t* config/t-sol2 (install): Depend on install-clearcap-map.\n\t(install-clearcap-map): New target.\n\t* doc/invoke.texi (Option Summary, Solaris 2 Options): Document\n\t-mclear-hwcap.\n\n\tgcc/testsuite:\n\t* lib/clearcap.exp: New file.\n\t* gcc.dg/vect/vect.exp: Load clearcap.exp.\n\tRemove clearcap_ldflags handling.\n\tCall clearcap-init, clearcap-finish.\n\t* gcc.target/i386/i386.exp: Likewise.\n\t* gcc.target/i386/clearcap.map: Move to ../config/sol2-clearcap.map.\n\t* gcc.target/i386/clearcapv2.map: Move to\n\t../config/sol2-clearcapv2.map.\n\t* gcc.target/x86_64/abi/avx/abi-avx.exp: Likewise.\n\t* gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: Likewise.\n\n\tlibitm:\n\t* acinclude.m4 (LIBITM_CHECK_LINKER_HWCAP): Check for\n\t-mclear-hwcap instead.\n\t* configure: Regenerate.\n\t* clearcap.map: Remove.\n\nFrom-SVN: r211014", "tree": {"sha": "7a94d4d83dba15233aa76c30e53b2b3f9bd8d99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a94d4d83dba15233aa76c30e53b2b3f9bd8d99e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c698bf09bbb3c96d568011c7b62a49c9d67f928", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c698bf09bbb3c96d568011c7b62a49c9d67f928", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c698bf09bbb3c96d568011c7b62a49c9d67f928", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c698bf09bbb3c96d568011c7b62a49c9d67f928/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c8bd90f9f48591980394092c4748678c37049ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c8bd90f9f48591980394092c4748678c37049ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c8bd90f9f48591980394092c4748678c37049ff"}], "stats": {"total": 358, "additions": 243, "deletions": 115}, "files": [{"sha": "2db50c5299691d015f38c0cbf7ae4f1efce196e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -1,3 +1,19 @@\n+2014-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac ($gcc_cv_ld_clearcap): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sol2.opt (mclear-hwcap): New option.\n+\t* config/sol2.h (LINK_CLEARCAP_SPEC): Define.\n+\t* config/sol2-clearcap.map: Moved here from\n+\ttestsuite/gcc.target/i386/clearcap.map.\n+\t* config/sol2-clearcapv2.map: Move here from\n+\tgcc.target/i386/clearcapv2.map.\n+\t* config/t-sol2 (install): Depend on install-clearcap-map.\n+\t(install-clearcap-map): New target.\n+\t* doc/invoke.texi (Option Summary, Solaris 2 Options): Document\n+\t-mclear-hwcap.\n+\n 2014-05-28  Richard Biener  <rguenther@suse.de>\n \n \t* hwint.h (*_HALF_WIDE_INT*): Move to ..."}, {"sha": "2313307117cd09e92c256a70c9d03fbc1df91363", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -1260,6 +1260,13 @@\n #endif\n \n \n+/* Define if the linker supports clearing hardware capabilities via mapfile.\n+   */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_CLEARCAP\n+#endif\n+\n+\n /* Define if your linker supports --demangle option. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_DEMANGLE"}, {"sha": "2d880c983e455963168794661cd8cb04cd8a3586", "filename": "gcc/config/sol2-clearcap.map", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2-clearcap.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2-clearcap.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-clearcap.map?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -0,0 +1,2 @@\n+# Clear all hardware capabilities emitted by Sun as.\n+hwcap_1 = V0x0 OVERRIDE;"}, {"sha": "3c0cacedbf05b40076f6525655ea6bc905d48414", "filename": "gcc/config/sol2-clearcapv2.map", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2-clearcapv2.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2-clearcapv2.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-clearcapv2.map?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -0,0 +1,7 @@\n+# Clear all hardware capabilities emitted by Sun as.\n+#\n+# Uses mapfile v2 syntax which is the only way to clear AT_SUN_CAP_HW2 flags.\n+$mapfile_version 2\n+CAPABILITY {\n+  HW = ;\n+};"}, {"sha": "d41e3c4428a46a7b73b4d2b054692a8b98e4694d", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -268,12 +268,21 @@ along with GCC; see the file COPYING3.  If not see\n #define LINK_LIBGCC_MAPFILE_SPEC \"\"\n #endif\n \n+/* Clear hardware capabilities, either explicitly or with OpenMP:\n+   #pragma openmp declare simd creates clones for SSE2, AVX, and AVX2.  */\n+#ifdef HAVE_LD_CLEARCAP\n+#define LINK_CLEARCAP_SPEC \" %{mclear-hwcap|fopenmp*:-M %sclearcap.map}\"\n+#else\n+#define LINK_CLEARCAP_SPEC \"\"\n+#endif\n+\n #undef  LINK_SPEC\n #define LINK_SPEC \\\n   \"%{h*} %{v:-V} \\\n    %{!shared:%{!static:%{rdynamic: \" RDYNAMIC_SPEC \"}}} \\\n    %{static:-dn -Bstatic} \\\n-   %{shared:-G -dy %{!mimpure-text:-z text}} \" LINK_LIBGCC_MAPFILE_SPEC \" \\\n+   %{shared:-G -dy %{!mimpure-text:-z text}} \" \\\n+   LINK_LIBGCC_MAPFILE_SPEC LINK_CLEARCAP_SPEC \" \\\n    %{symbolic:-Bsymbolic -G -dy -z text} \\\n    %(link_arch) \\\n    %{Qy:} %{!Qn:-Qy}\""}, {"sha": "16a3e5f581b82cb74abff6e7695a035cf8736f2e", "filename": "gcc/config/sol2.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Fsol2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.opt?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -27,6 +27,10 @@ Driver Joined\n Ym,\n Driver Joined\n \n+mclear-hwcap\n+Target Report\n+Clear hardware capabilities when linking\n+\n mimpure-text\n Target Report\n Pass -z text to linker"}, {"sha": "25feb0486fdb54eafd75b055e27753ae435f72cc", "filename": "gcc/config/t-sol2", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Ft-sol2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfig%2Ft-sol2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ft-sol2?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -35,3 +35,10 @@ sol2-stubs.o: $(srcdir)/config/sol2-stubs.c\n sol2.o: $(srcdir)/config/sol2.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n+\n+# Install clearcap.map if present.\n+install: install-clearcap-map\n+\n+# Ignore failures: file only exists if linker supports it.\n+install-clearcap-map:\n+\t-$(INSTALL_DATA) clearcap.map $(DESTDIR)$(libdir)"}, {"sha": "f60d3476a654af1608ae32f887426115cbc1a08f", "filename": "gcc/configure", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -26920,6 +26920,34 @@ _ACEOF\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker mapfile support for clearing hardware capabilities\" >&5\n+$as_echo_n \"checking linker mapfile support for clearing hardware capabilities... \" >&6; }\n+saved_LDFLAGS=\"$LDFLAGS\"\n+for clearcap_map in sol2-clearcapv2.map sol2-clearcap.map; do\n+  LDFLAGS=\"$saved_LDFLAGS -Wl,-M,${srcdir}/config/$clearcap_map\"\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int main(void) {return 0;}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  gcc_cv_ld_clearcap=yes; break\n+else\n+  gcc_cv_ld_clearcap=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+done\n+LDFLAGS=\"$saved_LDFLAGS\"\n+if test \"x$gcc_cv_ld_clearcap\" = xyes; then\n+\n+$as_echo \"#define HAVE_LD_CLEARCAP 1\" >>confdefs.h\n+\n+  ac_config_links=\"$ac_config_links clearcap.map:${srcdir}/config/$clearcap_map\"\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_clearcap\" >&5\n+$as_echo \"$gcc_cv_ld_clearcap\" >&6; }\n+\n case \"$target:$tm_file\" in\n   powerpc64-*-freebsd* | powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n   case \"$target\" in\n@@ -28456,6 +28484,7 @@ cat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n # Files that config.status was made for.\n config_files=\"$ac_config_files\"\n config_headers=\"$ac_config_headers\"\n+config_links=\"$ac_config_links\"\n config_commands=\"$ac_config_commands\"\n \n _ACEOF\n@@ -28485,6 +28514,9 @@ $config_files\n Configuration headers:\n $config_headers\n \n+Configuration links:\n+$config_links\n+\n Configuration commands:\n $config_commands\n \n@@ -28620,6 +28652,7 @@ do\n     \"as\") CONFIG_FILES=\"$CONFIG_FILES as:exec-tool.in\" ;;\n     \"collect-ld\") CONFIG_FILES=\"$CONFIG_FILES collect-ld:exec-tool.in\" ;;\n     \"nm\") CONFIG_FILES=\"$CONFIG_FILES nm:exec-tool.in\" ;;\n+    \"clearcap.map\") CONFIG_LINKS=\"$CONFIG_LINKS clearcap.map:${srcdir}/config/$clearcap_map\" ;;\n     \"$all_outputs\") CONFIG_FILES=\"$CONFIG_FILES $all_outputs\" ;;\n     \"default\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS default\" ;;\n \n@@ -28635,6 +28668,7 @@ done\n if $ac_need_defaults; then\n   test \"${CONFIG_FILES+set}\" = set || CONFIG_FILES=$config_files\n   test \"${CONFIG_HEADERS+set}\" = set || CONFIG_HEADERS=$config_headers\n+  test \"${CONFIG_LINKS+set}\" = set || CONFIG_LINKS=$config_links\n   test \"${CONFIG_COMMANDS+set}\" = set || CONFIG_COMMANDS=$config_commands\n fi\n \n@@ -28956,7 +28990,7 @@ cat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n fi # test -n \"$CONFIG_HEADERS\"\n \n \n-eval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS\"\n+eval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS  :L $CONFIG_LINKS  :C $CONFIG_COMMANDS\"\n shift\n for ac_tag\n do\n@@ -29192,7 +29226,38 @@ $as_echo \"$as_me: $ac_file is unchanged\" >&6;}\n       || as_fn_error \"could not create -\" \"$LINENO\" 5\n   fi\n  ;;\n+  :L)\n+  #\n+  # CONFIG_LINK\n+  #\n+\n+  if test \"$ac_source\" = \"$ac_file\" && test \"$srcdir\" = '.'; then\n+    :\n+  else\n+    # Prefer the file from the source tree if names are identical.\n+    if test \"$ac_source\" = \"$ac_file\" || test ! -r \"$ac_source\"; then\n+      ac_source=$srcdir/$ac_source\n+    fi\n \n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: linking $ac_source to $ac_file\" >&5\n+$as_echo \"$as_me: linking $ac_source to $ac_file\" >&6;}\n+\n+    if test ! -r \"$ac_source\"; then\n+      as_fn_error \"$ac_source: file not found\" \"$LINENO\" 5\n+    fi\n+    rm -f \"$ac_file\"\n+\n+    # Try a relative symlink, then a hard link, then a copy.\n+    case $srcdir in\n+    [\\\\/$]* | ?:[\\\\/]* ) ac_rel_source=$ac_source ;;\n+\t*) ac_rel_source=$ac_top_build_prefix$ac_source ;;\n+    esac\n+    ln -s \"$ac_rel_source\" \"$ac_file\" 2>/dev/null ||\n+      ln \"$ac_source\" \"$ac_file\" 2>/dev/null ||\n+      cp -p \"$ac_source\" \"$ac_file\" ||\n+      as_fn_error \"cannot link or copy $ac_source to $ac_file\" \"$LINENO\" 5\n+  fi\n+ ;;\n   :C)  { $as_echo \"$as_me:${as_lineno-$LINENO}: executing $ac_file commands\" >&5\n $as_echo \"$as_me: executing $ac_file commands\" >&6;}\n  ;;"}, {"sha": "aa697cebce9ac27f710292fc09dc5fdb63591c8e", "filename": "gcc/configure.ac", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -4734,6 +4734,21 @@ if test x\"$gcc_cv_ld_as_needed\" = xyes; then\n [Define to the linker option to keep unused dependencies.])\n fi\n \n+AC_MSG_CHECKING(linker mapfile support for clearing hardware capabilities)\n+saved_LDFLAGS=\"$LDFLAGS\"\n+for clearcap_map in sol2-clearcapv2.map sol2-clearcap.map; do\n+  LDFLAGS=\"$saved_LDFLAGS -Wl,-M,${srcdir}/config/$clearcap_map\"\n+  AC_LINK_IFELSE([int main(void) {return 0;}],\n+    [gcc_cv_ld_clearcap=yes; break], [gcc_cv_ld_clearcap=no])\n+done\n+LDFLAGS=\"$saved_LDFLAGS\"\n+if test \"x$gcc_cv_ld_clearcap\" = xyes; then\n+  AC_DEFINE([HAVE_LD_CLEARCAP], 1,\n+[Define if the linker supports clearing hardware capabilities via mapfile.])\n+  AC_CONFIG_LINKS([clearcap.map:${srcdir}/config/$clearcap_map])\n+fi\n+AC_MSG_RESULT($gcc_cv_ld_clearcap)\n+\n case \"$target:$tm_file\" in\n   powerpc64-*-freebsd* | powerpc64*-*-linux* | powerpc*-*-linux*rs6000/biarch64.h*)\n   case \"$target\" in"}, {"sha": "e39121a4ca64e54b052989b5b92e2c9f45f1e3ce", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -983,7 +983,7 @@ See RS/6000 and PowerPC Options.\n -mpretend-cmove -mtas}\n \n @emph{Solaris 2 Options}\n-@gccoptlist{-mimpure-text  -mno-impure-text @gol\n+@gccoptlist{-mclear-hwcap -mno-clear-hwcap -mimpure-text  -mno-impure-text @gol\n -pthreads -pthread}\n \n @emph{SPARC Options}\n@@ -20940,6 +20940,13 @@ patterns.  This can result in faster code on the SH4 processor.\n These @samp{-m} options are supported on Solaris 2:\n \n @table @gcctabopt\n+@item -mclear-hwcap\n+@opindex mclear-hwcap\n+@option{-mclear-hwcap} tells the compiler to remove the hardware\n+capabilities generated by the Solaris assembler.  This is only necessary\n+when object files use ISA extensions not supported by the current\n+machine, but check at runtime whether or not to use them.\n+\n @item -mimpure-text\n @opindex mimpure-text\n @option{-mimpure-text}, used in addition to @option{-shared}, tells"}, {"sha": "ad6490ab48f3a17f3f7321ba7fae5b38d9650925", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -1,3 +1,16 @@\n+2014-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* lib/clearcap.exp: New file.\n+\t* gcc.dg/vect/vect.exp: Load clearcap.exp.\n+\tRemove clearcap_ldflags handling.\n+\tCall clearcap-init, clearcap-finish.\n+\t* gcc.target/i386/i386.exp: Likewise.\n+\t* gcc.target/i386/clearcap.map: Move to ../config/sol2-clearcap.map.\n+\t* gcc.target/i386/clearcapv2.map: Move to\n+\t../config/sol2-clearcapv2.map.\n+\t* gcc.target/x86_64/abi/avx/abi-avx.exp: Likewise.\n+\t* gcc.target/x86_64/abi/avx512f/abi-avx512f.exp: Likewise.\n+\n 2014-05-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61335"}, {"sha": "e8d866b991c93133c358b93e1b5443874e9c66e3", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -18,6 +18,7 @@\n \n # Load support procs.\n load_lib gcc-dg.exp\n+load_lib clearcap.exp\n \n # Set up flags used for tests that don't specify options.\n global DEFAULT_VECTCFLAGS\n@@ -41,30 +42,9 @@ if ![check_vect_support_and_set_flags] {\n # These flags are used for all targets.\n lappend DEFAULT_VECTCFLAGS \"-ftree-vectorize\" \"-fno-vect-cost-model\" \"-fno-common\"\n \n-# If the linker used understands -M <mapfile>, pass it to clear hardware\n-# capabilities set by the Sun assembler.\n-# Try mapfile syntax v2 first which is the only way to clear hwcap_2 flags.\n-set clearcap_ldflags \"-Wl,-M,$srcdir/gcc.target/i386/clearcapv2.map\"\n-\n-if ![check_no_compiler_messages mapfilev2 executable {\n-    int main (void) { return 0; }\n-} $clearcap_ldflags ] {\n-    # If this doesn't work, fall back to the less capable v1 syntax.\n-    set clearcap_ldflags \"-Wl,-M,$srcdir/gcc.target/i386/clearcap.map\"\n-\n-    if ![check_no_compiler_messages mapfile executable {\n-\tint main (void) { return 0; }\n-    } $clearcap_ldflags ] {\n-\tunset clearcap_ldflags\n-    }\n-}\n-\n-if [info exists clearcap_ldflags] {\n-    lappend DEFAULT_VECTCFLAGS $clearcap_ldflags\n-}\n-\n # Initialize `dg'.\n dg-init\n+clearcap-init\n \n global VEC_FLAGS\n set VEC_FLAGS $DEFAULT_VECTCFLAGS\n@@ -308,4 +288,5 @@ dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-tree-sra-bb-slp-*.\\[cS\\]]\n set dg-do-what-default ${save-dg-do-what-default}\n \n # All done.\n+clearcap-finish\n dg-finish"}, {"sha": "147f922d1e5cac561a9ad290bc9b7728e6cb6d2f", "filename": "gcc/testsuite/gcc.target/i386/clearcap.map", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcap.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcap.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcap.map?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -1,3 +0,0 @@\n-# clear all hardware capabilities emitted by Sun as: the tests here\n-# guard against execution at runtime\n-hwcap_1 = V0x0 OVERRIDE;"}, {"sha": "95cb14cc5d27d12b0689748d15b9ee62631fca69", "filename": "gcc/testsuite/gcc.target/i386/clearcapv2.map", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcapv2.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcapv2.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fclearcapv2.map?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -1,7 +0,0 @@\n-# clear all hardware capabilities emitted by Sun as: the tests here\n-# guard against execution at runtime\n-# uses mapfile v2 syntax which is the only way to clear AT_SUN_CAP_HW2 flags\n-$mapfile_version 2\n-CAPABILITY {\n-  HW = ;\n-};"}, {"sha": "d9b36cd30da31b635c5ee5a2c6358dd119e238d1", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 3, "deletions": 33, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -23,6 +23,7 @@ if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n \n # Load support procs.\n load_lib gcc-dg.exp\n+load_lib clearcap.exp\n \n # Return 1 if attribute ms_hook_prologue is supported.\n proc check_effective_target_ms_hook_prologue { } {\n@@ -307,39 +308,6 @@ proc check_effective_target_sha { } {\n     } \"-O2 -msha\" ]\n }\n \n-# If the linker used understands -M <mapfile>, pass it to clear hardware\n-# capabilities set by the Sun assembler.\n-# Try mapfile syntax v2 first which is the only way to clear hwcap_2 flags.\n-set clearcap_ldflags \"-Wl,-M,$srcdir/$subdir/clearcapv2.map\"\n-\n-if ![check_no_compiler_messages mapfilev2 executable {\n-    int main (void) { return 0; }\n-} $clearcap_ldflags ] {\n-    # If this doesn't work, fall back to the less capable v1 syntax.\n-    set clearcap_ldflags \"-Wl,-M,$srcdir/$subdir/clearcap.map\"\n-\n-    if ![check_no_compiler_messages mapfile executable {\n-\tint main (void) { return 0; }\n-    } $clearcap_ldflags ] {\n-\tunset clearcap_ldflags\n-    }\n-}\n-\n-if [info exists clearcap_ldflags] {\n-  if { [info procs gcc_target_compile] != [list] \\\n-\t&& [info procs saved_gcc_target_compile] == [list] } {\n-    rename gcc_target_compile saved_gcc_target_compile\n-\n-    proc gcc_target_compile { source dest type options } {\n-      global clearcap_ldflags\n-      # Always pass -Wl,-M,<mapfile>, but don't let it show up in gcc.sum.\n-      lappend options \"additional_flags=$clearcap_ldflags\"\n-\n-      return [saved_gcc_target_compile $source $dest $type $options]\n-    }\n-  }\n-}\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {\n@@ -348,6 +316,7 @@ if ![info exists DEFAULT_CFLAGS] then {\n \n # Initialize `dg'.\n dg-init\n+clearcap-init\n \n # Special case compilation of vect-args.c so we don't have to\n # replicate it 10 times.\n@@ -367,4 +336,5 @@ set tests [prune $tests $srcdir/$subdir/vect-args.c]\n dg-runtest $tests \"\" $DEFAULT_CFLAGS\n \n # All done.\n+clearcap-finish\n dg-finish"}, {"sha": "624b7ea75f2f1713933676608e613b34d7422437", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx/abi-avx.exp", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx%2Fabi-avx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx%2Fabi-avx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx%2Fabi-avx.exp?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -20,6 +20,7 @@\n load_lib c-torture.exp\n load_lib target-supports.exp\n load_lib torture-options.exp\n+load_lib clearcap.exp\n \n if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n      || ![is-effective-target lp64]\n@@ -28,20 +29,10 @@ if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n }\n \n \n-# If the linker used understands -M <mapfile>, pass it to clear hardware\n-# capabilities set by the Sun assembler.\n-set flags \"\"\n-set clearcap_ldflags \"-Wl,-M,$srcdir/gcc.target/i386/clearcap.map\"\n-\n-if [check_no_compiler_messages mapfile executable {\n-\tint main (void) { return 0; }\n-  } $clearcap_ldflags ] {\n-  set flags $clearcap_ldflags\n-}\n-\n torture-init\n+clearcap-init\n set-torture-options $C_TORTURE_OPTIONS\n-set additional_flags \"-W -Wall -mavx $flags\"\n+set additional_flags \"-W -Wall -mavx\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n     if {[runtest_file_p $runtests $src]} {\n@@ -58,4 +49,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n     }\n }\n \n+clearcap-finish\n torture-finish"}, {"sha": "f8f991e9276f2af08158af42c1284996c2e85f32", "filename": "gcc/testsuite/gcc.target/x86_64/abi/avx512f/abi-avx512f.exp", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Fabi-avx512f.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Fabi-avx512f.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Favx512f%2Fabi-avx512f.exp?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -20,6 +20,7 @@\n load_lib c-torture.exp\n load_lib target-supports.exp\n load_lib torture-options.exp\n+load_lib clearcap.exp\n \n if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n      || ![is-effective-target lp64]\n@@ -28,20 +29,10 @@ if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n }\n \n \n-# If the linker used understands -M <mapfile>, pass it to clear hardware\n-# capabilities set by the Sun assembler.\n-set flags \"\"\n-set clearcap_ldflags \"-Wl,-M,$srcdir/gcc.target/i386/clearcap.map\"\n-\n-if [check_no_compiler_messages mapfile executable {\n-\tint main (void) { return 0; }\n-  } $clearcap_ldflags ] {\n-  set flags $clearcap_ldflags\n-}\n-\n torture-init\n+clearcap-init\n set-torture-options $C_TORTURE_OPTIONS\n-set additional_flags \"-W -Wall -mavx512f $flags\"\n+set additional_flags \"-W -Wall -mavx512f\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n     if {[runtest_file_p $runtests $src]} {\n@@ -58,4 +49,5 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/test_*.c]] {\n     }\n }\n \n+clearcap-finish\n torture-finish"}, {"sha": "044881fbd3f4d3a6799aad36e8d1ed7f89454fa3", "filename": "gcc/testsuite/lib/clearcap.exp", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Flib%2Fclearcap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/gcc%2Ftestsuite%2Flib%2Fclearcap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fclearcap.exp?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -0,0 +1,58 @@\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Clear hardware capabilities on Solaris.\n+if [istarget *-*-solaris2*] {\n+    set clearcap_ldflags \"-mclear-hwcap\"\n+}\n+\n+#\n+# clearcap-init -- called at the start of each subdir of tests\n+#\n+\n+proc clearcap-init { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global ALWAYS_CXXFLAGS\n+    global clearcap_saved_TEST_ALWAYS_FLAGS\n+    global clearcap_ldflags\n+\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset clearcap_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n+    }\n+    if [info exists clearcap_ldflags] {\n+\tif [info exists ALWAYS_CXXFLAGS] {\n+\t    set ALWAYS_CXXFLAGS [concat \"{ldflags=$clearcap_ldflags}\" $ALWAYS_CXXFLAGS]\n+\t} else {\n+\t    append TEST_ALWAYS_FLAGS \" $clearcap_ldflags\"\n+\t}\n+    }\n+    return 0\n+}\n+\n+#\n+# clearcap-finish -- called at the start of each subdir of tests\n+#\n+\n+proc clearcap-finish { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global clearcap_saved_TEST_ALWAYS_FLAGS\n+\n+    if [info exists clearcap_saved_TEST_ALWAYS_FLAGS] {\n+\tset TEST_ALWAYS_FLAGS $clearcap_saved_TEST_ALWAYS_FLAGS\n+    } else {\n+\tunset TEST_ALWAYS_FLAGS\n+    }\n+}"}, {"sha": "17bb0a66448bc1108694fac8490d85ab28c75b62", "filename": "libitm/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -1,3 +1,10 @@\n+2014-05-28  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (LIBITM_CHECK_LINKER_HWCAP): Check for\n+\t-mclear-hwcap instead.\n+\t* configure: Regenerate.\n+\t* clearcap.map: Remove.\n+\n 2014-05-21  John Marino  <gnugcc@marino.st>\n \n \t* configure.tgt (*-*-dragonfly*): New target."}, {"sha": "a82f6d6179ba20a511eea5044af94fe2892b1a5c", "filename": "libitm/acinclude.m4", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Facinclude.m4?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -301,23 +301,23 @@ AC_DEFUN([LIBITM_CHECK_LINKER_FEATURES], [\n \n dnl\n dnl Check if the linker used supports linker maps to clear hardware\n-dnl capabilities.  This is only supported by Sun ld at the moment.\n+dnl capabilities.  This is only supported on Solaris at the moment.\n dnl\n dnl Defines:\n-dnl  HWCAP_LDFLAGS='-Wl,-M,clearcap.map' if possible\n+dnl  HWCAP_LDFLAGS=-mclear-hwcap if possible\n dnl  LD (as a side effect of testing)\n dnl\n AC_DEFUN([LIBITM_CHECK_LINKER_HWCAP], [\n   test -z \"$HWCAP_LDFLAGS\" && HWCAP_LDFLAGS=''\n   AC_REQUIRE([AC_PROG_LD])\n \n   ac_save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LFLAGS -Wl,-M,$srcdir/clearcap.map\"\n+  LDFLAGS=\"$LFLAGS -mclear-hwcap\"\n \n-  AC_MSG_CHECKING([for ld that supports -Wl,-M,mapfile])\n+  AC_MSG_CHECKING([for -mclear-hwcap])\n   AC_TRY_LINK([], [return 0;], [ac_hwcap_ldflags=yes],[ac_hwcap_ldflags=no])\n   if test \"$ac_hwcap_ldflags\" = \"yes\"; then\n-    HWCAP_LDFLAGS=\"-Wl,-M,$srcdir/clearcap.map $HWCAP_LDFLAGS\"\n+    HWCAP_LDFLAGS=\"-mclear-hwcap $HWCAP_LDFLAGS\"\n   fi\n   AC_MSG_RESULT($ac_hwcap_ldflags)\n "}, {"sha": "bd8189b43ff5feaadef4ac54c5099115449fc599", "filename": "libitm/clearcap.map", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c8bd90f9f48591980394092c4748678c37049ff/libitm%2Fclearcap.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c8bd90f9f48591980394092c4748678c37049ff/libitm%2Fclearcap.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fclearcap.map?ref=4c8bd90f9f48591980394092c4748678c37049ff", "patch": "@@ -1,14 +0,0 @@\n-# Clear hardware capabilities emitted by Sun as: calls to the x86_avx.c\n-# functions are only emitted with -mavx.\n-#\n-# The v1 mapfile syntax has no support for clearing specific capabilities,\n-# so clear everything.\n-#\n-hwcap_1 = V0x0 OVERRIDE;\n-#\n-# If we can assume mapfile v2 syntax, we can specificially clear AVX.\n-#\n-#$mapfile_version 2\n-#CAPABILITY {\n-#\tHW -= AVX;\n-#};"}, {"sha": "ce6d50a7d3ada530aaf972385e561fdc6e503888", "filename": "libitm/configure", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c698bf09bbb3c96d568011c7b62a49c9d67f928/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=3c698bf09bbb3c96d568011c7b62a49c9d67f928", "patch": "@@ -16739,10 +16739,10 @@ with_gnu_ld=$lt_cv_prog_gnu_ld\n \n \n   ac_save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LFLAGS -Wl,-M,$srcdir/clearcap.map\"\n+  LDFLAGS=\"$LFLAGS -mclear-hwcap\"\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ld that supports -Wl,-M,mapfile\" >&5\n-$as_echo_n \"checking for ld that supports -Wl,-M,mapfile... \" >&6; }\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for -mclear-hwcap\" >&5\n+$as_echo_n \"checking for -mclear-hwcap... \" >&6; }\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n \n@@ -16762,7 +16762,7 @@ fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n   if test \"$ac_hwcap_ldflags\" = \"yes\"; then\n-    HWCAP_LDFLAGS=\"-Wl,-M,$srcdir/clearcap.map $HWCAP_LDFLAGS\"\n+    HWCAP_LDFLAGS=\"-mclear-hwcap $HWCAP_LDFLAGS\"\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_hwcap_ldflags\" >&5\n $as_echo \"$ac_hwcap_ldflags\" >&6; }"}]}