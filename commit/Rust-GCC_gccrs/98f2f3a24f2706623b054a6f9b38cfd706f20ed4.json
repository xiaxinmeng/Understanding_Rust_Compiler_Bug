{"sha": "98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThmMmYzYTI0ZjI3MDY2MjNiMDU0YTZmOWIzOGNmZDcwNmYyMGVkNA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-19T22:53:01Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2008-10-19T22:53:01Z"}, "message": "re PR c++/37004 ([C++ only] Wconversion warns for short y = 0x7fff; short z = (short) x & y;)\n\n2008-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c++/37004\ncp/\n\t* typeck.c (cp_common_type): New. The same as\n\ttype_after_usual_arithmetic_conversions but without promotions.\n\t(type_after_usual_arithmetic_conversions): Do the promotions and\n\tcall cp_common_type.\n\t(common_type): Make it behave like the C version of this\n\tfunction. Do not handle pointer types.\n\t(common_pointer_type): Move handling of pointer types from\n\tcommon_type to here.\n\t(cp_build_binary_op): Use common_pointer_type instead of\n\tcommon_type in call to pointer_diff.\n\tUse cp_common_type instead of common_type.\n\t* cp-tree.h (common_pointer_type): Declare.\ntestsuite/\n\t* g++.dg/warn/Wconversion-pr34389.C: Remove XFAIL.\n\nFrom-SVN: r141233", "tree": {"sha": "efc7e715925fd1cb536642887f046421f2e8cfc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/efc7e715925fd1cb536642887f046421f2e8cfc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/comments", "author": null, "committer": null, "parents": [{"sha": "641afcff1d00be2cabd95d589a66a5d87ed1edda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641afcff1d00be2cabd95d589a66a5d87ed1edda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641afcff1d00be2cabd95d589a66a5d87ed1edda"}], "stats": {"total": 124, "additions": 84, "deletions": 40}, "files": [{"sha": "3d30c15819d728f35e9357bdf1e2223c864b1e2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "patch": "@@ -1,3 +1,19 @@\n+2008-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/37004\n+\t* typeck.c (cp_common_type): New. The same as\n+\ttype_after_usual_arithmetic_conversions but without promotions.\n+\t(type_after_usual_arithmetic_conversions): Do the promotions and\n+\tcall cp_common_type.\n+\t(common_type): Make it behave like the C version of this\n+\tfunction. Do not handle pointer types.\n+\t(common_pointer_type): Move handling of pointer types from\n+\tcommon_type to here.\n+\t(cp_build_binary_op): Use common_pointer_type instead of\n+\tcommon_type in call to pointer_diff.\n+\tUse cp_common_type instead of common_type.\n+\t* cp-tree.h (common_pointer_type): Declare.\n+\n 2008-10-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/37819"}, {"sha": "7ff5824180a7ed83df32dd383fe2f4d8d55c93ae", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "patch": "@@ -4959,6 +4959,7 @@ extern void cp_apply_type_quals_to_decl\t\t(int, tree);\n extern tree build_ptrmemfunc1\t\t\t(tree, tree, tree);\n extern void expand_ptrmemfunc_cst\t\t(tree, tree *, tree *);\n extern tree type_after_usual_arithmetic_conversions (tree, tree);\n+extern tree common_pointer_type                 (tree, tree);\n extern tree composite_pointer_type\t\t(tree, tree, tree, tree,\n \t\t\t\t\t\t const char*, tsubst_flags_t);\n extern tree merge_types\t\t\t\t(tree, tree);"}, {"sha": "9e65bdd3a118910597d117a85db4dc91f4bb63dc", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 61, "deletions": 39, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "patch": "@@ -248,12 +248,13 @@ original_type (tree t)\n   return cp_build_qualified_type (t, quals);\n }\n \n-/* T1 and T2 are arithmetic or enumeration types.  Return the type\n-   that will result from the \"usual arithmetic conversions\" on T1 and\n-   T2 as described in [expr].  */\n+/* Return the common type for two arithmetic types T1 and T2 under the\n+   usual arithmetic conversions.  The default conversions have already\n+   been applied, and enumerated types converted to their compatible\n+   integer types.  */\n \n-tree\n-type_after_usual_arithmetic_conversions (tree t1, tree t2)\n+static tree\n+cp_common_type (tree t1, tree t2)\n {\n   enum tree_code code1 = TREE_CODE (t1);\n   enum tree_code code2 = TREE_CODE (t2);\n@@ -307,13 +308,6 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n   if (code2 == REAL_TYPE && code1 != REAL_TYPE)\n     return build_type_attribute_variant (t2, attributes);\n \n-  /* Perform the integral promotions.  */\n-  if (code1 != REAL_TYPE)\n-    {\n-      t1 = type_promotes_to (t1);\n-      t2 = type_promotes_to (t2);\n-    }\n-\n   /* Both real or both integers; use the one with greater precision.  */\n   if (TYPE_PRECISION (t1) > TYPE_PRECISION (t2))\n     return build_type_attribute_variant (t1, attributes);\n@@ -393,6 +387,31 @@ type_after_usual_arithmetic_conversions (tree t1, tree t2)\n     }\n }\n \n+/* T1 and T2 are arithmetic or enumeration types.  Return the type\n+   that will result from the \"usual arithmetic conversions\" on T1 and\n+   T2 as described in [expr].  */\n+\n+tree\n+type_after_usual_arithmetic_conversions (tree t1, tree t2)\n+{\n+  gcc_assert (ARITHMETIC_TYPE_P (t1)\n+\t      || TREE_CODE (t1) == VECTOR_TYPE\n+\t      || UNSCOPED_ENUM_P (t1));\n+  gcc_assert (ARITHMETIC_TYPE_P (t2)\n+\t      || TREE_CODE (t2) == VECTOR_TYPE\n+\t      || UNSCOPED_ENUM_P (t2));\n+\n+  /* Perform the integral promotions.  We do not promote real types here.  */\n+  if (INTEGRAL_OR_ENUMERATION_TYPE_P (t1)\n+      && INTEGRAL_OR_ENUMERATION_TYPE_P (t1)) \n+    {\n+      t1 = type_promotes_to (t1);\n+      t2 = type_promotes_to (t2);\n+    }\n+\n+  return cp_common_type (t1, t2);\n+}\n+\n /* Subroutine of composite_pointer_type to implement the recursive\n    case.  See that function for documentation fo the parameters.  */\n \n@@ -744,39 +763,42 @@ merge_types (tree t1, tree t2)\n     return cp_build_type_attribute_variant (t1, attributes);\n }\n \n-/* Return the common type of two types.\n-   We assume that comptypes has already been done and returned 1;\n-   if that isn't so, this may crash.\n+/* Wrapper around cp_common_type that is used by c-common.c and other\n+   front end optimizations that remove promotions.  \n \n-   This is the type for the result of most arithmetic operations\n-   if the operands have the given two types.  */\n+   Return the common type for two arithmetic types T1 and T2 under the\n+   usual arithmetic conversions.  The default conversions have already\n+   been applied, and enumerated types converted to their compatible\n+   integer types.  */\n \n tree\n common_type (tree t1, tree t2)\n {\n-  enum tree_code code1;\n-  enum tree_code code2;\n+  /* If one type is nonsense, use the other  */\n+  if (t1 == error_mark_node)\n+    return t2;\n+  if (t2 == error_mark_node)\n+    return t1;\n \n-  /* If one type is nonsense, bail.  */\n-  if (t1 == error_mark_node || t2 == error_mark_node)\n-    return error_mark_node;\n+  return cp_common_type (t1, t2);\n+}\n \n-  code1 = TREE_CODE (t1);\n-  code2 = TREE_CODE (t2);\n+/* Return the common type of two pointer types T1 and T2.  This is the\n+   type for the result of most arithmetic operations if the operands\n+   have the given two types.\n+ \n+   We assume that comp_target_types has already been done and returned\n+   nonzero; if that isn't so, this may crash.  */\n \n-  if ((ARITHMETIC_TYPE_P (t1) || UNSCOPED_ENUM_P (t1)\n-       || code1 == VECTOR_TYPE)\n-      && (ARITHMETIC_TYPE_P (t2) || UNSCOPED_ENUM_P (t2)\n-\t  || code2 == VECTOR_TYPE))\n-    return type_after_usual_arithmetic_conversions (t1, t2);\n-\n-  else if ((TYPE_PTR_P (t1) && TYPE_PTR_P (t2))\n-\t   || (TYPE_PTRMEM_P (t1) && TYPE_PTRMEM_P (t2))\n-\t   || (TYPE_PTRMEMFUNC_P (t1) && TYPE_PTRMEMFUNC_P (t2)))\n-    return composite_pointer_type (t1, t2, error_mark_node, error_mark_node,\n-\t\t\t\t   \"conversion\", tf_warning_or_error);\n-  else\n-    gcc_unreachable ();\n+tree\n+common_pointer_type (tree t1, tree t2)\n+{\n+  gcc_assert ((TYPE_PTR_P (t1) && TYPE_PTR_P (t2))\n+              || (TYPE_PTRMEM_P (t1) && TYPE_PTRMEM_P (t2))\n+              || (TYPE_PTRMEMFUNC_P (t1) && TYPE_PTRMEMFUNC_P (t2)));\n+\n+  return composite_pointer_type (t1, t2, error_mark_node, error_mark_node,\n+                                 \"conversion\", tf_warning_or_error);\n }\n \f\n /* Compare two exception specifier types for exactness or subsetness, if\n@@ -3303,7 +3325,7 @@ cp_build_binary_op (location_t location,\n       if (code0 == POINTER_TYPE && code1 == POINTER_TYPE\n \t  && same_type_ignoring_top_level_qualifiers_p (TREE_TYPE (type0),\n \t\t\t\t\t\t\tTREE_TYPE (type1)))\n-\treturn pointer_diff (op0, op1, common_type (type0, type1));\n+\treturn pointer_diff (op0, op1, common_pointer_type (type0, type1));\n       /* In all other cases except pointer - int, the usual arithmetic\n \t rules apply.  */\n       else if (!(code0 == POINTER_TYPE && code1 == INTEGER_TYPE))\n@@ -3805,7 +3827,7 @@ cp_build_binary_op (location_t location,\n   if (!result_type\n       && arithmetic_types_p\n       && (shorten || common || short_compare))\n-    result_type = common_type (type0, type1);\n+    result_type = cp_common_type (type0, type1);\n \n   if (!result_type)\n     {"}, {"sha": "0ccdae9c885c20ca84ccebe448d30952b5528bbf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "patch": "@@ -1,3 +1,8 @@\n+2008-10-20  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c++/37004\n+\t* g++.dg/warn/Wconversion-pr34389.C: Remove XFAIL.\n+\n 2008-10-19  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/30260"}, {"sha": "43df8f902d7d872bc961afc9ec6048744d292e75", "filename": "gcc/testsuite/g++.dg/warn/Wconversion-pr34389.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98f2f3a24f2706623b054a6f9b38cfd706f20ed4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWconversion-pr34389.C?ref=98f2f3a24f2706623b054a6f9b38cfd706f20ed4", "patch": "@@ -5,7 +5,7 @@\n short  mask1(short x)\n {\n   short y = 0x7fff;\n-  return x & y; /* { dg-bogus \"conversion\" \"conversion\" { xfail *-*-* } 8 } */\n+  return x & y; /* { dg-bogus \"conversion\" \"bogus warning\" } */\n }\n \n short  mask2(short ssx)"}]}