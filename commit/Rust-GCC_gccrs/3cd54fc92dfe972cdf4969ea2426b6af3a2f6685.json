{"sha": "3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkNTRmYzkyZGZlOTcyY2RmNDk2OWVhMjQyNmI2YWYzYTJmNjY4NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-05-22T11:44:00Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-05-22T11:44:00Z"}, "message": "complex (proj(const std::complex<>&), proj(_Tp)): Add per DR 781.\n\n2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/complex (proj(const std::complex<>&), proj(_Tp)):\n\tAdd per DR 781.\n\t* include/tr1_impl/complex(polar(const _Tp&, const _Up&)): Move to...\n\t* include/tr1/complex: ... here.\n\t* doc/xml/manual/intro.xml: Add an entry for DR 781.\n\t* testsuite/26_numerics/complex/dr781.cc: Add.\n\t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Update.\n\t* configure: Regenerate.\n\nFrom-SVN: r135757", "tree": {"sha": "9e2d6af57d9f02cf4dc711a80839eb7e6dac1cf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e2d6af57d9f02cf4dc711a80839eb7e6dac1cf7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/comments", "author": null, "committer": null, "parents": [{"sha": "f8b52c2ff7dfe999f04c2db276c8c557d7eaf9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b52c2ff7dfe999f04c2db276c8c557d7eaf9e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b52c2ff7dfe999f04c2db276c8c557d7eaf9e9"}], "stats": {"total": 173, "additions": 156, "deletions": 17}, "files": [{"sha": "3b689a41f9ce69e2d1b919ca7d72030ca3a7849e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -1,3 +1,14 @@\n+2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/complex (proj(const std::complex<>&), proj(_Tp)):\n+\tAdd per DR 781.\n+\t* include/tr1_impl/complex(polar(const _Tp&, const _Up&)): Move to...\n+\t* include/tr1/complex: ... here.\n+\t* doc/xml/manual/intro.xml: Add an entry for DR 781.\n+\t* testsuite/26_numerics/complex/dr781.cc: Add.\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_C99]): Update.\n+\t* configure: Regenerate.\n+\n 2008-05-21  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/bitset (bitset<>::bitset(const char*)): Add per DR 778."}, {"sha": "a68ab9be2a8f46ce417a4f2538b2d39d3297f95d", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -860,6 +860,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \ttmpf = ctanf(tmpf);\n \ttmpf = ctanhf(tmpf);\n \ttmpf = cpowf(tmpf, tmpf);\n+\ttmpf = cprojf(tmpf);\n \td = cabs(tmpd);\n \td = carg(tmpd);\n \ttmpd = ccos(tmpd);\n@@ -872,6 +873,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \ttmpd = ctan(tmpd);\n \ttmpd = ctanh(tmpd);\n \ttmpd = cpow(tmpd, tmpd);\n+\ttmpd = cproj(tmpd);\n \tld = cabsl(tmpld);\n \tld = cargl(tmpld);\n \ttmpld = ccosl(tmpld);\n@@ -884,6 +886,7 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n \ttmpld = ctanl(tmpld);\n \ttmpld = ctanhl(tmpld);\n \ttmpld = cpowl(tmpld, tmpld);\n+\ttmpld = cprojl(tmpld);\n        ],[glibcxx_cv_c99_complex=yes], [glibcxx_cv_c99_complex=no])\n   fi\n   AC_MSG_RESULT($glibcxx_cv_c99_complex)"}, {"sha": "0343427e4e99b224f7d77a432f40d3284915cd01", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -16398,6 +16398,7 @@ f = cabsf(tmpf);\n \ttmpf = ctanf(tmpf);\n \ttmpf = ctanhf(tmpf);\n \ttmpf = cpowf(tmpf, tmpf);\n+\ttmpf = cprojf(tmpf);\n \td = cabs(tmpd);\n \td = carg(tmpd);\n \ttmpd = ccos(tmpd);\n@@ -16410,6 +16411,7 @@ f = cabsf(tmpf);\n \ttmpd = ctan(tmpd);\n \ttmpd = ctanh(tmpd);\n \ttmpd = cpow(tmpd, tmpd);\n+\ttmpd = cproj(tmpd);\n \tld = cabsl(tmpld);\n \tld = cargl(tmpld);\n \ttmpld = ccosl(tmpld);\n@@ -16422,6 +16424,7 @@ f = cabsf(tmpf);\n \ttmpld = ctanl(tmpld);\n \ttmpld = ctanhl(tmpld);\n \ttmpld = cpowl(tmpld, tmpld);\n+\ttmpld = cprojl(tmpld);\n \n   ;\n   return 0;\n@@ -16494,6 +16497,7 @@ f = cabsf(tmpf);\n \ttmpf = ctanf(tmpf);\n \ttmpf = ctanhf(tmpf);\n \ttmpf = cpowf(tmpf, tmpf);\n+\ttmpf = cprojf(tmpf);\n \td = cabs(tmpd);\n \td = carg(tmpd);\n \ttmpd = ccos(tmpd);\n@@ -16506,6 +16510,7 @@ f = cabsf(tmpf);\n \ttmpd = ctan(tmpd);\n \ttmpd = ctanh(tmpd);\n \ttmpd = cpow(tmpd, tmpd);\n+\ttmpd = cproj(tmpd);\n \tld = cabsl(tmpld);\n \tld = cargl(tmpld);\n \ttmpld = ccosl(tmpld);\n@@ -16518,6 +16523,7 @@ f = cabsf(tmpf);\n \ttmpld = ctanl(tmpld);\n \ttmpld = ctanhl(tmpld);\n \ttmpld = cpowl(tmpld, tmpld);\n+\ttmpld = cprojl(tmpld);\n \n   ;\n   return 0;"}, {"sha": "578d303a3965795a2bd2d891acfe40e0d26be0c2", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -634,6 +634,12 @@\n     </term>\n     <listitem><para>Add it.\n     </para></listitem></varlistentry>\n+\n+    <varlistentry><term><ulink url=\"lwg-active.html#781\">781</ulink>:\n+        <emphasis>std::complex should add missing C99 functions</emphasis>\n+    </term>\n+    <listitem><para>In C++0x mode, add std::proj.\n+    </para></listitem></varlistentry>\n   </variablelist>\n \n  </sect2>"}, {"sha": "e3feef0918f707b2b7012887e86a5cca6f0b093a", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -1,7 +1,7 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007\n+// 2006, 2007, 2008\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1552,6 +1552,58 @@ _GLIBCXX_END_NAMESPACE\n #    undef _GLIBCXX_BEGIN_NAMESPACE_TR1\n #    undef _GLIBCXX_INCLUDE_AS_CXX0X\n #  endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Forward declarations.\n+  // DR 781.\n+  template<typename _Tp> std::complex<_Tp> proj(const std::complex<_Tp>&);\n+\n+  template<typename _Tp>\n+    std::complex<_Tp>\n+    __complex_proj(const std::complex<_Tp>& __z)\n+    {\n+      const _Tp __den = (__z.real() * __z.real()\n+\t\t\t + __z.imag() * __z.imag() + _Tp(1.0));\n+\n+      return std::complex<_Tp>((_Tp(2.0) * __z.real()) / __den,\n+\t\t\t       (_Tp(2.0) * __z.imag()) / __den);\n+    }\n+\n+#if _GLIBCXX_USE_C99_COMPLEX\n+  inline __complex__ float\n+  __complex_proj(__complex__ float __z)\n+  { return __builtin_cprojf(__z); }\n+\n+  inline __complex__ double\n+  __complex_proj(__complex__ double __z)\n+  { return __builtin_cproj(__z); }\n+\n+  inline __complex__ long double\n+  __complex_proj(const __complex__ long double& __z)\n+  { return __builtin_cprojl(__z); }\n+\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    proj(const std::complex<_Tp>& __z)\n+    { return __complex_proj(__z.__rep()); }\n+#else\n+  template<typename _Tp>\n+    inline std::complex<_Tp>\n+    proj(const std::complex<_Tp>& __z)\n+    { return __complex_proj(__z); }\n+#endif\n+\n+  template<typename _Tp>\n+    inline std::complex<typename __gnu_cxx::__promote<_Tp>::__type>\n+    proj(_Tp __x)\n+    {\n+      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n+      return std::proj(std::complex<__type>(__x));\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n #endif\n \n #endif\t/* _GLIBCXX_COMPLEX */"}, {"sha": "8d14681e9557b980de94101bd9b5a9af962016be", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -1,6 +1,6 @@\n // TR1 complex -*- C++ -*-\n \n-// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -65,8 +65,17 @@ namespace tr1\n   using std::imag;\n   using std::norm;\n   using std::polar;\n-  using std::pow;\n+\n+  template<typename _Tp, typename _Up>\n+    inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>\n+    polar(const _Tp& __rho, const _Up& __theta)\n+    {\n+      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n+      return std::polar(__type(__rho), __type(__theta));\n+    }\n+\n   using std::real;\n+  using std::pow;\n }\n }\n "}, {"sha": "8b4f97401f60376ed846fc3269e22c48cac305b3", "filename": "libstdc++-v3/include/tr1_impl/complex", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1_impl%2Fcomplex?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -1,6 +1,6 @@\n // TR1 complex -*- C++ -*-\n \n-// Copyright (C) 2007 Free Software Foundation, Inc.\n+// Copyright (C) 2007, 2008 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -333,14 +333,11 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n       return __type(__x) * __type(__x);\n     }\n \n-  template<typename _Tp, typename _Up>\n-    inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>\n-    polar(const _Tp& __rho, const _Up& __theta)\n-    {\n-      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n-      return std::polar(__type(__rho), __type(__theta));\n-    }\n-  \n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    real(_Tp __x)\n+    { return __x; }\n+\n   template<typename _Tp, typename _Up>\n     inline std::complex<typename __gnu_cxx::__promote_2<_Tp, _Up>::__type>\n     pow(const std::complex<_Tp>& __x, const _Up& __y)\n@@ -366,11 +363,6 @@ _GLIBCXX_BEGIN_NAMESPACE_TR1\n \t\t      std::complex<__type>(__y));\n     }\n \n-  template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n-    real(_Tp __x)\n-    { return __x; }\n-\n #endif\n \n _GLIBCXX_END_NAMESPACE_TR1"}, {"sha": "b93422a8ae65aa4adea5c245534cf9e7c406f309", "filename": "libstdc++-v3/testsuite/26_numerics/complex/dr781.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr781.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cd54fc92dfe972cdf4969ea2426b6af3a2f6685/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr781.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fdr781.cc?ref=3cd54fc92dfe972cdf4969ea2426b6af3a2f6685", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2008-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2008 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <complex>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+// DR 781. std::complex should add missing C99 functions.\n+void test01()\n+{\n+  using __gnu_test::check_ret_type;\n+\n+  typedef std::complex<float>       cmplx_f_type;\n+  typedef std::complex<double>      cmplx_d_type;\n+  typedef std::complex<long double> cmplx_ld_type;\n+\n+  const int          i1 = 1;\n+  const float        f1 = 1.0f;\n+  const double       d1 = 1.0;\n+  const long double ld1 = 1.0l;\n+\n+  const cmplx_f_type  c_f1(f1, f1);\n+  const cmplx_d_type  c_d1(d1, d1);\n+  const cmplx_ld_type c_ld1(ld1, ld1);\n+\n+  check_ret_type<cmplx_f_type>(std::proj(c_f1));\n+  check_ret_type<cmplx_d_type>(std::proj(c_d1));\n+  check_ret_type<cmplx_ld_type>(std::proj(c_ld1));\n+\n+  check_ret_type<cmplx_f_type>(std::proj(f1));\n+  check_ret_type<cmplx_d_type>(std::proj(d1));\n+  check_ret_type<cmplx_d_type>(std::proj(i1));\n+  VERIFY( std::proj(i1) == std::proj(double(i1)) );\n+  VERIFY( std::proj(i1) == std::proj(cmplx_d_type(double(i1))) );\n+  check_ret_type<cmplx_ld_type>(std::proj(ld1));\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}