{"sha": "f002c19630174a63fea9517e3f1202cd702aa67d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAwMmMxOTYzMDE3NGE2M2ZlYTk1MTdlM2YxMjAyY2Q3MDJhYTY3ZA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2012-05-16T14:39:32Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-05-16T14:39:32Z"}, "message": "re PR tree-optimization/53217 (internal compiler error: verify_ssa failed)\n\ngcc:\n\n2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/53217\n\t* tree-ssa-reassoc.c (bip_map): New static variable.\n\t(possibly_move_powi): Move feeding multiplies with __builtin_powi call.\n\t(attempt_builtin_powi): Save feeding multiplies on a stack.\n\t(reassociate_bb): Create and destroy bip_map.\n\ngcc/testsuite:\n\n2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/53217\n\t* gfortran.dg/pr53217.f90: New test.\n\nFrom-SVN: r187595", "tree": {"sha": "04a19dfbfe937f4f6dfdd09b2c9d5029ed6c2cd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04a19dfbfe937f4f6dfdd09b2c9d5029ed6c2cd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f002c19630174a63fea9517e3f1202cd702aa67d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f002c19630174a63fea9517e3f1202cd702aa67d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f002c19630174a63fea9517e3f1202cd702aa67d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f002c19630174a63fea9517e3f1202cd702aa67d/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8294b6fe4d3311b335dfddc90eeeee2ebd1ddb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8294b6fe4d3311b335dfddc90eeeee2ebd1ddb12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8294b6fe4d3311b335dfddc90eeeee2ebd1ddb12"}], "stats": {"total": 111, "additions": 108, "deletions": 3}, "files": [{"sha": "8d6c406354d592d42e348f8aa240b016da90011e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f002c19630174a63fea9517e3f1202cd702aa67d", "patch": "@@ -1,3 +1,11 @@\n+2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/53217\n+\t* tree-ssa-reassoc.c (bip_map): New static variable.\n+\t(possibly_move_powi): Move feeding multiplies with __builtin_powi call.\n+\t(attempt_builtin_powi): Save feeding multiplies on a stack.\n+\t(reassociate_bb): Create and destroy bip_map.\n+\n 2012-05-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* Makefile.in (install-no-fixedincludes): New target, former toplevel"}, {"sha": "90d94b003cbef2233cffea3da45275278c7d005d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f002c19630174a63fea9517e3f1202cd702aa67d", "patch": "@@ -1,3 +1,8 @@\n+2012-05-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/53217\n+\t* gfortran.dg/pr53217.f90: New test.\n+\n 2012-05-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53364"}, {"sha": "82f34f0646b2f2e2141df6ec5d7a55751fea21c0", "filename": "gcc/testsuite/gfortran.dg/pr53217.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr53217.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr53217.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr53217.f90?ref=f002c19630174a63fea9517e3f1202cd702aa67d", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -ffast-math\" }\n+\n+! This tests only for compile-time failure, which formerly occurred\n+! when statements were emitted out of order, failing verify_ssa.\n+\n+MODULE xc_cs1\n+  INTEGER, PARAMETER :: dp=KIND(0.0D0)\n+  REAL(KIND=dp), PARAMETER :: a = 0.04918_dp, &\n+                              c = 0.2533_dp, &\n+                              d = 0.349_dp\n+CONTAINS\n+  SUBROUTINE cs1_u_2 ( rho, grho, r13, e_rho_rho, e_rho_ndrho, e_ndrho_ndrho,&\n+       npoints, error)\n+    REAL(KIND=dp), DIMENSION(*), &\n+      INTENT(INOUT)                          :: e_rho_rho, e_rho_ndrho, &\n+                                                e_ndrho_ndrho\n+    DO ip = 1, npoints\n+      IF ( rho(ip) > eps_rho ) THEN\n+         oc = 1.0_dp/(r*r*r3*r3 + c*g*g)\n+         d2rF4 = c4p*f13*f23*g**4*r3/r * (193*d*r**5*r3*r3+90*d*d*r**5*r3 &\n+                 -88*g*g*c*r**3*r3-100*d*d*c*g*g*r*r*r3*r3 &\n+                 +104*r**6)*od**3*oc**4\n+         e_rho_rho(ip) = e_rho_rho(ip) + d2F1 + d2rF2 + d2F3 + d2rF4\n+      END IF\n+    END DO\n+  END SUBROUTINE cs1_u_2\n+END MODULE xc_cs1"}, {"sha": "5ce26bcb4a9cf95d6c4cbe314126ce2ab30ca561", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f002c19630174a63fea9517e3f1202cd702aa67d/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=f002c19630174a63fea9517e3f1202cd702aa67d", "patch": "@@ -200,6 +200,10 @@ static long *bb_rank;\n /* Operand->rank hashtable.  */\n static struct pointer_map_t *operand_rank;\n \n+/* Map from inserted __builtin_powi calls to multiply chains that\n+   feed them.  */\n+static struct pointer_map_t *bip_map;\n+\n /* Forward decls.  */\n static long get_rank (tree);\n \n@@ -2249,7 +2253,7 @@ remove_visited_stmt_chain (tree var)\n static void\n possibly_move_powi (gimple stmt, tree op)\n {\n-  gimple stmt2;\n+  gimple stmt2, *mpy;\n   tree fndecl;\n   gimple_stmt_iterator gsi1, gsi2;\n \n@@ -2278,9 +2282,39 @@ possibly_move_powi (gimple stmt, tree op)\n       return;\n     }\n \n+  /* Move the __builtin_powi.  */\n   gsi1 = gsi_for_stmt (stmt);\n   gsi2 = gsi_for_stmt (stmt2);\n   gsi_move_before (&gsi2, &gsi1);\n+\n+  /* See if there are multiplies feeding the __builtin_powi base\n+     argument that must also be moved.  */\n+  while ((mpy = (gimple *) pointer_map_contains (bip_map, stmt2)) != NULL)\n+    {\n+      /* If we've already moved this statement, we're done.  This is\n+         identified by a NULL entry for the statement in bip_map.  */\n+      gimple *next = (gimple *) pointer_map_contains (bip_map, *mpy);\n+      if (next && !*next)\n+\treturn;\n+\n+      stmt = stmt2;\n+      stmt2 = *mpy;\n+      gsi1 = gsi_for_stmt (stmt);\n+      gsi2 = gsi_for_stmt (stmt2);\n+      gsi_move_before (&gsi2, &gsi1);\n+\n+      /* The moved multiply may be DAG'd from multiple calls if it\n+\t was the result of a cached multiply.  Only move it once.\n+\t Rank order ensures we move it to the right place the first\n+\t time.  */\n+      if (next)\n+\t*next = NULL;\n+      else\n+\t{\n+\t  next = (gimple *) pointer_map_insert (bip_map, *mpy);\n+\t  *next = NULL;\n+\t}\n+    }\n }\n \n /* This function checks three consequtive operands in\n@@ -3281,6 +3315,7 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n   while (true)\n     {\n       HOST_WIDE_INT power;\n+      gimple last_mul = NULL;\n \n       /* First look for the largest cached product of factors from\n \t preceding iterations.  If found, create a builtin_powi for\n@@ -3318,16 +3353,25 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t    }\n \t  else\n \t    {\n+\t      gimple *value;\n+\n \t      iter_result = get_reassoc_pow_ssa_name (target, type);\n \t      pow_stmt = gimple_build_call (powi_fndecl, 2, rf1->repr, \n \t\t\t\t\t    build_int_cst (integer_type_node,\n \t\t\t\t\t\t\t   power));\n \t      gimple_call_set_lhs (pow_stmt, iter_result);\n \t      gimple_set_location (pow_stmt, gimple_location (stmt));\n-\t      /* Temporarily place the call; we will move it to the\n-\t\t correct place during rewrite_expr.  */\n+\t      /* Temporarily place the call; we will move it and its\n+\t\t feeding multiplies to the correct place during\n+\t\t rewrite_expr.  */\n \t      gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n \n+\t      if (!operand_equal_p (rf1->repr, rf1->factor, 0))\n+\t\t{\n+\t\t  value = (gimple *) pointer_map_insert (bip_map, pow_stmt);\n+\t\t  *value = SSA_NAME_DEF_STMT (rf1->repr);\n+\t\t}\n+\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  unsigned elt;\n@@ -3413,6 +3457,15 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t\t  gsi_insert_before (&gsi, mul_stmt, GSI_SAME_STMT);\n \t\t  rf1->repr = target_ssa;\n \n+\t\t  /* Chain multiplies together for later movement.  */\n+\t\t  if (last_mul)\n+\t\t    {\n+\t\t      gimple *value\n+\t\t\t= (gimple *) pointer_map_insert (bip_map, mul_stmt);\n+\t\t      *value = last_mul;\n+\t\t    }\n+\t\t  last_mul = mul_stmt;\n+\n \t\t  /* Don't reprocess the multiply we just introduced.  */\n \t\t  gimple_set_visited (mul_stmt, true);\n \t\t}\n@@ -3428,6 +3481,15 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t  gimple_call_set_lhs (pow_stmt, iter_result);\n \t  gimple_set_location (pow_stmt, gimple_location (stmt));\n \t  gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n+\n+\t  /* If we inserted a chain of multiplies before the pow_stmt,\n+\t     record that fact so we can move it later when we move the\n+\t     pow_stmt.  */\n+\t  if (last_mul)\n+\t    {\n+\t      gimple *value = (gimple *) pointer_map_insert (bip_map, pow_stmt);\n+\t      *value = last_mul;\n+\t    }\n \t}\n \n       /* Append the result of this iteration to the ops vector.  */\n@@ -3544,6 +3606,7 @@ reassociate_bb (basic_block bb)\n \t  if (associative_tree_code (rhs_code))\n \t    {\n \t      VEC(operand_entry_t, heap) *ops = NULL;\n+\t      bip_map = pointer_map_create ();\n \n \t      /* There may be no immediate uses left by the time we\n \t\t get here because we may have eliminated them all.  */\n@@ -3608,6 +3671,7 @@ reassociate_bb (basic_block bb)\n \t\t}\n \n \t      VEC_free (operand_entry_t, heap, ops);\n+\t      pointer_map_destroy (bip_map);\n \t    }\n \t}\n     }"}]}