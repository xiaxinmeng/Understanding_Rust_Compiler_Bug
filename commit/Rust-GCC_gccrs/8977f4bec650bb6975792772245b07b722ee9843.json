{"sha": "8977f4bec650bb6975792772245b07b722ee9843", "node_id": "C_kwDOANBUbNoAKDg5NzdmNGJlYzY1MGJiNjk3NTc5Mjc3MjI0NWIwN2I3MjJlZTk4NDM", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-03-02T17:16:08Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-03-02T17:21:38Z"}, "message": "d: Merge upstream dmd 423f19b41, druntime 100a608c, phobos a1f8c4c07.\n\nD Runtime changes:\n\n    - Fix stdc.stdio bindings to not depend on druntime (PR104729).\n    - Implement stdc.math for Solaris (PR104735).\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 423f19b41.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 100a608c.\n\t* src/MERGE: Merge upstream phobos a1f8c4c07.", "tree": {"sha": "495444470878e267304174ed409829358ae07740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/495444470878e267304174ed409829358ae07740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8977f4bec650bb6975792772245b07b722ee9843", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8977f4bec650bb6975792772245b07b722ee9843", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8977f4bec650bb6975792772245b07b722ee9843", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8977f4bec650bb6975792772245b07b722ee9843/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12f8dc0b642db5edc702f252af1a5231606b29db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12f8dc0b642db5edc702f252af1a5231606b29db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12f8dc0b642db5edc702f252af1a5231606b29db"}], "stats": {"total": 639, "additions": 503, "deletions": 136}, "files": [{"sha": "71dc2b0a1552e5d5d719a586ccefd04d391b7cd9", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -1,4 +1,4 @@\n-cf63dd8e5a77ecb68cf5e7c43bf7b6c4c1154bbe\n+423f19b41089f627808bf16ff21c60c0791712ba\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "6abe69a9c4f5368d2886e9eca612d27b2f2bb3c2", "filename": "gcc/d/dmd/dtemplate.d", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fdtemplate.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fdtemplate.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtemplate.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -4295,8 +4295,13 @@ MATCH deduceType(RootObject o, Scope* sc, Type tparam, TemplateParameters* param\n                 if (ti && ti.toAlias() == t.sym)\n                 {\n                     auto tx = new TypeInstance(Loc.initial, ti);\n-                    result = deduceType(tx, sc, tparam, parameters, dedtypes, wm);\n-                    return;\n+                    auto m = deduceType(tx, sc, tparam, parameters, dedtypes, wm);\n+                    // if we have a no match we still need to check alias this\n+                    if (m != MATCH.nomatch)\n+                    {\n+                        result = m;\n+                        return;\n+                    }\n                 }\n \n                 /* Match things like:"}, {"sha": "2b41219846a2d871d7fb43436a7855d0f3917f5f", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 153, "deletions": 8, "changes": 161, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -83,7 +83,7 @@ void emplaceExp(T : UnionExp)(T* p, Expression e)\n     memcpy(p, cast(void*)e, e.size);\n }\n \n-// Return value for `checkModifiable`\n+/// Return value for `checkModifiable`\n enum Modifiable\n {\n     /// Not modifiable\n@@ -1766,6 +1766,7 @@ extern (C++) abstract class Expression : ASTNode\n }\n \n /***********************************************************\n+ * A compile-time known integer value\n  */\n extern (C++) final class IntegerExp : Expression\n {\n@@ -1982,6 +1983,7 @@ extern (C++) final class IntegerExp : Expression\n \n /***********************************************************\n  * Use this expression for error recovery.\n+ *\n  * It should behave as a 'sink' to prevent further cascaded error messages.\n  */\n extern (C++) final class ErrorExp : Expression\n@@ -2026,6 +2028,8 @@ extern (C++) final class ErrorExp : Expression\n /***********************************************************\n  * An uninitialized value,\n  * generated from void initializers.\n+ *\n+ * https://dlang.org/spec/declaration.html#void_init\n  */\n extern (C++) final class VoidInitExp : Expression\n {\n@@ -2052,6 +2056,7 @@ extern (C++) final class VoidInitExp : Expression\n \n \n /***********************************************************\n+ * A compile-time known floating point number\n  */\n extern (C++) final class RealExp : Expression\n {\n@@ -2127,6 +2132,7 @@ extern (C++) final class RealExp : Expression\n }\n \n /***********************************************************\n+ * A compile-time complex number (deprecated)\n  */\n extern (C++) final class ComplexExp : Expression\n {\n@@ -2202,6 +2208,12 @@ extern (C++) final class ComplexExp : Expression\n }\n \n /***********************************************************\n+ * An identifier in the context of an expression (as opposed to a declaration)\n+ *\n+ * ---\n+ * int x; // VarDeclaration with Identifier\n+ * x++; // PostExp with IdentifierExp\n+ * ---\n  */\n extern (C++) class IdentifierExp : Expression\n {\n@@ -2235,6 +2247,9 @@ extern (C++) class IdentifierExp : Expression\n }\n \n /***********************************************************\n+ * The dollar operator used when indexing or slicing an array. E.g `a[$]`, `a[1 .. $]` etc.\n+ *\n+ * https://dlang.org/spec/arrays.html#array-length\n  */\n extern (C++) final class DollarExp : IdentifierExp\n {\n@@ -2353,6 +2368,8 @@ extern (C++) final class SuperExp : ThisExp\n }\n \n /***********************************************************\n+ * A compile-time known `null` value\n+ *\n  * https://dlang.org/spec/expression.html#null\n  */\n extern (C++) final class NullExp : Expression\n@@ -2791,6 +2808,12 @@ extern (C++) final class StringExp : Expression\n }\n \n /***********************************************************\n+ * A sequence of expressions\n+ *\n+ * ---\n+ * alias AliasSeq(T...) = T;\n+ * alias Tup = AliasSeq!(3, int, \"abc\");\n+ * ---\n  */\n extern (C++) final class TupleExp : Expression\n {\n@@ -4127,6 +4150,9 @@ extern (C++) final class TraitsExp : Expression\n }\n \n /***********************************************************\n+ * Generates a halt instruction\n+ *\n+ * `assert(0)` gets rewritten to this with `CHECKACTION.halt`\n  */\n extern (C++) final class HaltExp : Expression\n {\n@@ -4185,6 +4211,9 @@ extern (C++) final class IsExp : Expression\n }\n \n /***********************************************************\n+ * Base class for unary operators\n+ *\n+ * https://dlang.org/spec/expression.html#unary-expression\n  */\n extern (C++) abstract class UnaExp : Expression\n {\n@@ -4255,6 +4284,7 @@ alias fp_t = UnionExp function(const ref Loc loc, Type, Expression, Expression);\n alias fp2_t = bool function(const ref Loc loc, EXP, Expression, Expression);\n \n /***********************************************************\n+ * Base class for binary operators\n  */\n extern (C++) abstract class BinExp : Expression\n {\n@@ -4550,6 +4580,7 @@ extern (C++) abstract class BinExp : Expression\n }\n \n /***********************************************************\n+ * Binary operator assignment, `+=` `-=` `*=` etc.\n  */\n extern (C++) class BinAssignExp : BinExp\n {\n@@ -4582,6 +4613,8 @@ extern (C++) class BinAssignExp : BinExp\n }\n \n /***********************************************************\n+ * A string mixin, `mixin(\"x\")`\n+ *\n  * https://dlang.org/spec/expression.html#mixin_expressions\n  */\n extern (C++) final class MixinExp : Expression\n@@ -4628,6 +4661,11 @@ extern (C++) final class MixinExp : Expression\n }\n \n /***********************************************************\n+ * An import expression, `import(\"file.txt\")`\n+ *\n+ * Not to be confused with module imports, `import std.stdio`, which is an `ImportStatement`\n+ *\n+ * https://dlang.org/spec/expression.html#import_expressions\n  */\n extern (C++) final class ImportExp : UnaExp\n {\n@@ -4643,6 +4681,8 @@ extern (C++) final class ImportExp : UnaExp\n }\n \n /***********************************************************\n+ * An assert expression, `assert(x == y)`\n+ *\n  * https://dlang.org/spec/expression.html#assert_expressions\n  */\n extern (C++) final class AssertExp : UnaExp\n@@ -5153,6 +5193,7 @@ FuncDeclaration isFuncAddress(Expression e, bool* hasOverloads = null)\n }\n \n /***********************************************************\n+ * The 'address of' operator, `&p`\n  */\n extern (C++) final class AddrExp : UnaExp\n {\n@@ -5174,6 +5215,7 @@ extern (C++) final class AddrExp : UnaExp\n }\n \n /***********************************************************\n+ * The pointer dereference operator, `*p`\n  */\n extern (C++) final class PtrExp : UnaExp\n {\n@@ -5226,6 +5268,7 @@ extern (C++) final class PtrExp : UnaExp\n }\n \n /***********************************************************\n+ * The negation operator, `-x`\n  */\n extern (C++) final class NegExp : UnaExp\n {\n@@ -5241,6 +5284,7 @@ extern (C++) final class NegExp : UnaExp\n }\n \n /***********************************************************\n+ * The unary add operator, `+x`\n  */\n extern (C++) final class UAddExp : UnaExp\n {\n@@ -5256,6 +5300,7 @@ extern (C++) final class UAddExp : UnaExp\n }\n \n /***********************************************************\n+ * The bitwise complement operator, `~x`\n  */\n extern (C++) final class ComExp : UnaExp\n {\n@@ -5271,6 +5316,7 @@ extern (C++) final class ComExp : UnaExp\n }\n \n /***********************************************************\n+ * The logical not operator, `!x`\n  */\n extern (C++) final class NotExp : UnaExp\n {\n@@ -5286,6 +5332,9 @@ extern (C++) final class NotExp : UnaExp\n }\n \n /***********************************************************\n+ * The delete operator, `delete x` (deprecated)\n+ *\n+ * https://dlang.org/spec/expression.html#delete_expressions\n  */\n extern (C++) final class DeleteExp : UnaExp\n {\n@@ -5304,7 +5353,11 @@ extern (C++) final class DeleteExp : UnaExp\n }\n \n /***********************************************************\n- * Possible to cast to one type while painting to another type\n+ * The type cast operator, `cast(T) x`\n+ *\n+ * It's possible to cast to one type while painting to another type\n+ *\n+ * https://dlang.org/spec/expression.html#cast_expressions\n  */\n extern (C++) final class CastExp : UnaExp\n {\n@@ -5500,6 +5553,7 @@ extern (C++) final class SliceExp : UnaExp\n }\n \n /***********************************************************\n+ * The `.length` property of an array\n  */\n extern (C++) final class ArrayLengthExp : UnaExp\n {\n@@ -5684,6 +5738,11 @@ extern (C++) final class IntervalExp : Expression\n     }\n }\n \n+/***********************************************************\n+ * The `dg.ptr` property, pointing to the delegate's 'context'\n+ *\n+ * c.f.`DelegateFuncptrExp` for the delegate's function pointer `dg.funcptr`\n+ */\n extern (C++) final class DelegatePtrExp : UnaExp\n {\n     extern (D) this(const ref Loc loc, Expression e1)\n@@ -5719,6 +5778,9 @@ extern (C++) final class DelegatePtrExp : UnaExp\n }\n \n /***********************************************************\n+ * The `dg.funcptr` property, pointing to the delegate's function\n+ *\n+ * c.f.`DelegatePtrExp` for the delegate's function pointer `dg.ptr`\n  */\n extern (C++) final class DelegateFuncptrExp : UnaExp\n {\n@@ -5835,7 +5897,7 @@ extern (C++) final class IndexExp : BinExp\n }\n \n /***********************************************************\n- * For both i++ and i--\n+ * The postfix increment/decrement operator, `i++` / `i--`\n  */\n extern (C++) final class PostExp : BinExp\n {\n@@ -5852,7 +5914,7 @@ extern (C++) final class PostExp : BinExp\n }\n \n /***********************************************************\n- * For both ++i and --i\n+ * The prefix increment/decrement operator, `++i` / `--i`\n  */\n extern (C++) final class PreExp : UnaExp\n {\n@@ -5876,6 +5938,9 @@ enum MemorySet\n }\n \n /***********************************************************\n+ * The assignment / initialization operator, `=`\n+ *\n+ * Note: operator assignment `op=` has a different base class, `BinAssignExp`\n  */\n extern (C++) class AssignExp : BinExp\n {\n@@ -5953,6 +6018,7 @@ extern (C++) final class ConstructExp : AssignExp\n }\n \n /***********************************************************\n+ * A bit-for-bit copy from `e2` to `e1`\n  */\n extern (C++) final class BlitExp : AssignExp\n {\n@@ -5981,6 +6047,7 @@ extern (C++) final class BlitExp : AssignExp\n }\n \n /***********************************************************\n+ * `x += y`\n  */\n extern (C++) final class AddAssignExp : BinAssignExp\n {\n@@ -5996,6 +6063,7 @@ extern (C++) final class AddAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x -= y`\n  */\n extern (C++) final class MinAssignExp : BinAssignExp\n {\n@@ -6011,6 +6079,7 @@ extern (C++) final class MinAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x *= y`\n  */\n extern (C++) final class MulAssignExp : BinAssignExp\n {\n@@ -6026,6 +6095,7 @@ extern (C++) final class MulAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x /= y`\n  */\n extern (C++) final class DivAssignExp : BinAssignExp\n {\n@@ -6041,6 +6111,7 @@ extern (C++) final class DivAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x %= y`\n  */\n extern (C++) final class ModAssignExp : BinAssignExp\n {\n@@ -6056,6 +6127,7 @@ extern (C++) final class ModAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x &= y`\n  */\n extern (C++) final class AndAssignExp : BinAssignExp\n {\n@@ -6071,6 +6143,7 @@ extern (C++) final class AndAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x |= y`\n  */\n extern (C++) final class OrAssignExp : BinAssignExp\n {\n@@ -6086,6 +6159,7 @@ extern (C++) final class OrAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x ^= y`\n  */\n extern (C++) final class XorAssignExp : BinAssignExp\n {\n@@ -6101,6 +6175,7 @@ extern (C++) final class XorAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x ^^= y`\n  */\n extern (C++) final class PowAssignExp : BinAssignExp\n {\n@@ -6116,6 +6191,7 @@ extern (C++) final class PowAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x <<= y`\n  */\n extern (C++) final class ShlAssignExp : BinAssignExp\n {\n@@ -6131,6 +6207,7 @@ extern (C++) final class ShlAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x >>= y`\n  */\n extern (C++) final class ShrAssignExp : BinAssignExp\n {\n@@ -6146,6 +6223,7 @@ extern (C++) final class ShrAssignExp : BinAssignExp\n }\n \n /***********************************************************\n+ * `x >>>= y`\n  */\n extern (C++) final class UshrAssignExp : BinAssignExp\n {\n@@ -6161,7 +6239,9 @@ extern (C++) final class UshrAssignExp : BinAssignExp\n }\n \n /***********************************************************\n- * The ~= operator. It can have one of the following operators:\n+ * The `~=` operator.\n+ *\n+ * It can have one of the following operators:\n  *\n  * EXP.concatenateAssign      - appending T[] to T[]\n  * EXP.concatenateElemAssign  - appending T to T[]\n@@ -6188,7 +6268,9 @@ extern (C++) class CatAssignExp : BinAssignExp\n     }\n }\n \n-///\n+/***********************************************************\n+ * The `~=` operator when appending a single element\n+ */\n extern (C++) final class CatElemAssignExp : CatAssignExp\n {\n     extern (D) this(const ref Loc loc, Type type, Expression e1, Expression e2)\n@@ -6203,7 +6285,9 @@ extern (C++) final class CatElemAssignExp : CatAssignExp\n     }\n }\n \n-///\n+/***********************************************************\n+ * The `~=` operator when appending a single `dchar`\n+ */\n extern (C++) final class CatDcharAssignExp : CatAssignExp\n {\n     extern (D) this(const ref Loc loc, Type type, Expression e1, Expression e2)\n@@ -6219,6 +6303,8 @@ extern (C++) final class CatDcharAssignExp : CatAssignExp\n }\n \n /***********************************************************\n+ * The addition operator, `x + y`\n+ *\n  * https://dlang.org/spec/expression.html#add_expressions\n  */\n extern (C++) final class AddExp : BinExp\n@@ -6235,6 +6321,9 @@ extern (C++) final class AddExp : BinExp\n }\n \n /***********************************************************\n+ * The minus operator, `x - y`\n+ *\n+ * https://dlang.org/spec/expression.html#add_expressions\n  */\n extern (C++) final class MinExp : BinExp\n {\n@@ -6250,6 +6339,8 @@ extern (C++) final class MinExp : BinExp\n }\n \n /***********************************************************\n+ * The concatenation operator, `x ~ y`\n+ *\n  * https://dlang.org/spec/expression.html#cat_expressions\n  */\n extern (C++) final class CatExp : BinExp\n@@ -6273,6 +6364,8 @@ extern (C++) final class CatExp : BinExp\n }\n \n /***********************************************************\n+ * The multiplication operator, `x * y`\n+ *\n  * https://dlang.org/spec/expression.html#mul_expressions\n  */\n extern (C++) final class MulExp : BinExp\n@@ -6289,6 +6382,8 @@ extern (C++) final class MulExp : BinExp\n }\n \n /***********************************************************\n+ * The division operator, `x / y`\n+ *\n  * https://dlang.org/spec/expression.html#mul_expressions\n  */\n extern (C++) final class DivExp : BinExp\n@@ -6305,6 +6400,8 @@ extern (C++) final class DivExp : BinExp\n }\n \n /***********************************************************\n+ * The modulo operator, `x % y`\n+ *\n  * https://dlang.org/spec/expression.html#mul_expressions\n  */\n extern (C++) final class ModExp : BinExp\n@@ -6321,6 +6418,8 @@ extern (C++) final class ModExp : BinExp\n }\n \n /***********************************************************\n+ * The 'power' operator, `x ^^ y`\n+ *\n  * https://dlang.org/spec/expression.html#pow_expressions\n  */\n extern (C++) final class PowExp : BinExp\n@@ -6337,6 +6436,9 @@ extern (C++) final class PowExp : BinExp\n }\n \n /***********************************************************\n+ * The 'shift left' operator, `x << y`\n+ *\n+ * https://dlang.org/spec/expression.html#shift_expressions\n  */\n extern (C++) final class ShlExp : BinExp\n {\n@@ -6352,6 +6454,9 @@ extern (C++) final class ShlExp : BinExp\n }\n \n /***********************************************************\n+ * The 'shift right' operator, `x >> y`\n+ *\n+ * https://dlang.org/spec/expression.html#shift_expressions\n  */\n extern (C++) final class ShrExp : BinExp\n {\n@@ -6367,6 +6472,9 @@ extern (C++) final class ShrExp : BinExp\n }\n \n /***********************************************************\n+ * The 'unsigned shift right' operator, `x >>> y`\n+ *\n+ * https://dlang.org/spec/expression.html#shift_expressions\n  */\n extern (C++) final class UshrExp : BinExp\n {\n@@ -6382,6 +6490,9 @@ extern (C++) final class UshrExp : BinExp\n }\n \n /***********************************************************\n+ * The bitwise 'and' operator, `x & y`\n+ *\n+ * https://dlang.org/spec/expression.html#and_expressions\n  */\n extern (C++) final class AndExp : BinExp\n {\n@@ -6397,6 +6508,9 @@ extern (C++) final class AndExp : BinExp\n }\n \n /***********************************************************\n+ * The bitwise 'or' operator, `x | y`\n+ *\n+ * https://dlang.org/spec/expression.html#or_expressions\n  */\n extern (C++) final class OrExp : BinExp\n {\n@@ -6412,6 +6526,9 @@ extern (C++) final class OrExp : BinExp\n }\n \n /***********************************************************\n+ * The bitwise 'xor' operator, `x ^ y`\n+ *\n+ * https://dlang.org/spec/expression.html#xor_expressions\n  */\n extern (C++) final class XorExp : BinExp\n {\n@@ -6427,6 +6544,8 @@ extern (C++) final class XorExp : BinExp\n }\n \n /***********************************************************\n+ * The logical 'and' / 'or' operator, `X && Y` / `X || Y`\n+ *\n  * https://dlang.org/spec/expression.html#andand_expressions\n  * https://dlang.org/spec/expression.html#oror_expressions\n  */\n@@ -6445,6 +6564,8 @@ extern (C++) final class LogicalExp : BinExp\n }\n \n /***********************************************************\n+ * A comparison operator, `<` `<=` `>` `>=`\n+ *\n  * `op` is one of:\n  *      EXP.lessThan, EXP.lessOrEqual, EXP.greaterThan, EXP.greaterOrEqual\n  *\n@@ -6465,6 +6586,11 @@ extern (C++) final class CmpExp : BinExp\n }\n \n /***********************************************************\n+ * The `in` operator, `\"a\" in [\"a\": 1]`\n+ *\n+ * Note: `x !in y` is rewritten to `!(x in y)` in the parser\n+ *\n+ * https://dlang.org/spec/expression.html#in_expressions\n  */\n extern (C++) final class InExp : BinExp\n {\n@@ -6480,6 +6606,8 @@ extern (C++) final class InExp : BinExp\n }\n \n /***********************************************************\n+ * Associative array removal, `aa.remove(arg)`\n+ *\n  * This deletes the key e1 from the associative array e2\n  */\n extern (C++) final class RemoveExp : BinExp\n@@ -6539,7 +6667,7 @@ extern (C++) final class IdentityExp : BinExp\n }\n \n /***********************************************************\n- * `econd ? e1 : e2`\n+ * The ternary operator, `econd ? e1 : e2`\n  *\n  * https://dlang.org/spec/expression.html#conditional_expressions\n  */\n@@ -6672,6 +6800,18 @@ bool isDefaultInitOp(EXP op) pure nothrow @safe @nogc\n }\n \n /***********************************************************\n+ * A special keyword when used as a function's default argument\n+ *\n+ * When possible, special keywords are resolved in the parser, but when\n+ * appearing as a default argument, they result in an expression deriving\n+ * from this base class that is resolved for each function call.\n+ *\n+ * ---\n+ * const x = __LINE__; // resolved in the parser\n+ * void foo(string file = __FILE__, int line = __LINE__); // DefaultInitExp\n+ * ---\n+ *\n+ * https://dlang.org/spec/expression.html#specialkeywords\n  */\n extern (C++) class DefaultInitExp : Expression\n {\n@@ -6687,6 +6827,7 @@ extern (C++) class DefaultInitExp : Expression\n }\n \n /***********************************************************\n+ * The `__FILE__` token as a default argument\n  */\n extern (C++) final class FileInitExp : DefaultInitExp\n {\n@@ -6717,6 +6858,7 @@ extern (C++) final class FileInitExp : DefaultInitExp\n }\n \n /***********************************************************\n+ * The `__LINE__` token as a default argument\n  */\n extern (C++) final class LineInitExp : DefaultInitExp\n {\n@@ -6739,6 +6881,7 @@ extern (C++) final class LineInitExp : DefaultInitExp\n }\n \n /***********************************************************\n+ * The `__MODULE__` token as a default argument\n  */\n extern (C++) final class ModuleInitExp : DefaultInitExp\n {\n@@ -6763,6 +6906,7 @@ extern (C++) final class ModuleInitExp : DefaultInitExp\n }\n \n /***********************************************************\n+ * The `__FUNCTION__` token as a default argument\n  */\n extern (C++) final class FuncInitExp : DefaultInitExp\n {\n@@ -6793,6 +6937,7 @@ extern (C++) final class FuncInitExp : DefaultInitExp\n }\n \n /***********************************************************\n+ * The `__PRETTY_FUNCTION__` token as a default argument\n  */\n extern (C++) final class PrettyFuncInitExp : DefaultInitExp\n {"}, {"sha": "965b3b45f87401182b6277b71ffae63c99d49b8a", "filename": "gcc/d/dmd/lexer.d", "status": "modified", "additions": 69, "deletions": 2, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Flexer.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Flexer.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Flexer.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -79,6 +79,12 @@ class Lexer\n         bool doDocComment;      // collect doc comment information\n         bool anyToken;          // seen at least one token\n         bool commentToken;      // comments are TOK.comment's\n+\n+        version (DMDLIB)\n+        {\n+            bool whitespaceToken;   // tokenize whitespaces\n+        }\n+\n         int inTokenStringConstant; // can be larger than 1 when in nested q{} strings\n         int lastDocLine;        // last line of previous doc comment\n \n@@ -145,6 +151,31 @@ class Lexer\n         }\n     }\n \n+    version (DMDLIB)\n+    {\n+        this(const(char)* filename, const(char)* base, size_t begoffset, size_t endoffset,\n+            bool doDocComment, bool commentToken, bool whitespaceToken)\n+        {\n+            this(filename, base, begoffset, endoffset, doDocComment, commentToken);\n+            this.whitespaceToken = whitespaceToken;\n+        }\n+\n+        bool empty() const pure @property @nogc @safe\n+        {\n+            return front() == TOK.endOfFile;\n+        }\n+\n+        TOK front() const pure @property @nogc @safe\n+        {\n+            return token.value;\n+        }\n+\n+        void popFront()\n+        {\n+            nextToken();\n+        }\n+    }\n+\n     /// Returns: a newly allocated `Token`.\n     Token* allocateToken() pure nothrow @safe\n     {\n@@ -237,20 +268,52 @@ class Lexer\n                 while (*p == ' ')\n                     p++;\n             LendSkipFourSpaces:\n+                version (DMDLIB)\n+                {\n+                    if (whitespaceToken)\n+                    {\n+                        t.value = TOK.whitespace;\n+                        return;\n+                    }\n+                }\n                 continue; // skip white space\n             case '\\t':\n             case '\\v':\n             case '\\f':\n                 p++;\n+                version (DMDLIB)\n+                {\n+                    if (whitespaceToken)\n+                    {\n+                        t.value = TOK.whitespace;\n+                        return;\n+                    }\n+                }\n                 continue; // skip white space\n             case '\\r':\n                 p++;\n                 if (*p != '\\n') // if CR stands by itself\n                     endOfLine();\n+                version (DMDLIB)\n+                {\n+                    if (whitespaceToken)\n+                    {\n+                        t.value = TOK.whitespace;\n+                        return;\n+                    }\n+                }\n                 continue; // skip white space\n             case '\\n':\n                 p++;\n                 endOfLine();\n+                version (DMDLIB)\n+                {\n+                    if (whitespaceToken)\n+                    {\n+                        t.value = TOK.whitespace;\n+                        return;\n+                    }\n+                }\n                 continue; // skip white space\n             case '0':\n                 if (!isZeroSecond(p[1]))        // if numeric literal does not continue\n@@ -594,8 +657,12 @@ class Lexer\n                     }\n                     if (commentToken)\n                     {\n-                        p++;\n-                        endOfLine();\n+                        version (DMDLIB) {}\n+                        else\n+                        {\n+                            p++;\n+                            endOfLine();\n+                        }\n                         t.loc = startLoc;\n                         t.value = TOK.comment;\n                         return;"}, {"sha": "10c265f600b54e1e8477429f505e7a7b7df7fbbd", "filename": "gcc/d/dmd/optimize.d", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Foptimize.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Foptimize.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Foptimize.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -469,10 +469,11 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n              * Params:\n              *      e = the DotVarExp or VarExp\n              *      var = set to the VarExp at the end, or null if doesn't end in VarExp\n+             *      eint = set to the IntegerExp at the end, or null if doesn't end in IntegerExp\n              *      offset = accumulation of all the .var offsets encountered\n              * Returns: true on error\n              */\n-            static bool getVarAndOffset(Expression e, ref VarDeclaration var, ref uint offset)\n+            static bool getVarAndOffset(Expression e, out VarDeclaration var, out IntegerExp eint, ref uint offset)\n             {\n                 if (e.type.size() == SIZE_INVALID)  // trigger computation of v.offset\n                     return true;\n@@ -483,7 +484,7 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n                     if (!v || !v.isField() || v.isBitFieldDeclaration())\n                         return false;\n \n-                    if (getVarAndOffset(dve.e1, var, offset))\n+                    if (getVarAndOffset(dve.e1, var, eint, offset))\n                         return true;\n                     offset += v.offset;\n                 }\n@@ -497,12 +498,20 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n                         var = ve.var.isVarDeclaration();\n                     }\n                 }\n+                else if (auto ep = e.isPtrExp())\n+                {\n+                    if (auto ei = ep.e1.isIntegerExp())\n+                    {\n+                        eint = ei;\n+                    }\n+                }\n                 return false;\n             }\n \n             uint offset;\n             VarDeclaration var;\n-            if (getVarAndOffset(e.e1, var, offset))\n+            IntegerExp eint;\n+            if (getVarAndOffset(e.e1, var, eint, offset))\n             {\n                 ret = ErrorExp.get();\n                 return;\n@@ -513,6 +522,11 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n                 ret.type = e.type;\n                 return;\n             }\n+            if (eint)\n+            {\n+                ret = new IntegerExp(e.loc, eint.toInteger() + offset, e.type);\n+                return;\n+            }\n         }\n         if (auto ae = e.e1.isIndexExp())\n         {\n@@ -828,6 +842,7 @@ Expression Expression_optimize(Expression e, int result, bool keepLvalue)\n \n     void visitMin(MinExp e)\n     {\n+        //printf(\"MinExp::optimize(%s)\\n\", e.toChars());\n         if (binOptimize(e, result))\n             return;\n         if (e.e1.isConst() && e.e2.isConst())"}, {"sha": "88520e85c24096112bb105a6ce0de49b3ad24bba", "filename": "gcc/d/dmd/statementsem.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fstatementsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Fstatementsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fstatementsem.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -47,6 +47,7 @@ import dmd.globals;\n import dmd.gluelayer;\n import dmd.id;\n import dmd.identifier;\n+import dmd.importc;\n import dmd.init;\n import dmd.intrange;\n import dmd.mtype;\n@@ -2862,6 +2863,7 @@ package (dmd) extern (C++) final class StatementSemanticVisitor : Visitor\n                 rs.exp = inferType(rs.exp, fld.treq.nextOf().nextOf());\n \n             rs.exp = rs.exp.expressionSemantic(sc);\n+            rs.exp = rs.exp.arrayFuncConv(sc);\n             // If we're returning by ref, allow the expression to be `shared`\n             const returnSharedRef = (tf.isref && (fd.inferRetType || tret.isShared()));\n             rs.exp.checkSharedAccess(sc, returnSharedRef);"}, {"sha": "0b1d1583a5518dd8563e62d581fc5b4c48aaec52", "filename": "gcc/d/dmd/tokens.d", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Ftokens.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Ftokens.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -246,6 +246,7 @@ enum TOK : ubyte\n     arrow,      // ->\n     colonColon, // ::\n     wchar_tLiteral,\n+    whitespace,\n \n     // C only keywords\n     inline,\n@@ -851,6 +852,7 @@ extern (C++) struct Token\n         TOK.wcharLiteral: \"wcharv\",\n         TOK.dcharLiteral: \"dcharv\",\n         TOK.wchar_tLiteral: \"wchar_tv\",\n+        TOK.whitespace: \"whitespace\",\n \n         TOK.hexadecimalString: \"xstring\",\n "}, {"sha": "6dfd0ce3333726e9ae6c42569ce80a629852343f", "filename": "gcc/d/dmd/tokens.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Ftokens.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Fd%2Fdmd%2Ftokens.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftokens.h?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -255,6 +255,7 @@ enum class TOK : unsigned char\n     arrow,      // ->\n     colonColon, // ::\n     wchar_tLiteral,\n+    whitespace,\n \n     // C only keywords\n     inline_,"}, {"sha": "f840d4c5329630c7edbea4f7d50c6c9168cae49f", "filename": "gcc/testsuite/gdc.test/compilable/test21975.d", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21975.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21975.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest21975.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -0,0 +1,15 @@\n+// https://issues.dlang.org/show_bug.cgi?id=21975\n+\n+struct Outer(T)\n+{\n+    Inner!T inner;\n+    alias inner this;\n+}\n+\n+struct Inner(T)\n+{\n+    T t;\n+}\n+\n+static assert(is(Outer!int : Inner!int)); // ok\n+static assert(is(Outer!int : Inner!T, T)); // needs to compile"}, {"sha": "4fa87efcfff2d57727738857f2c7dfa1c2da1b99", "filename": "gcc/testsuite/gdc.test/runnable_cxx/extra-files/cppb.cpp", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable_cxx%2Fextra-files%2Fcppb.cpp?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -4,6 +4,30 @@\n #include <exception>\n #include <cstdarg>\n \n+#if _WIN32 // otherwise defined in C header files!\n+// https://issues.dlang.org/show_bug.cgi?id=18955\n+namespace std\n+{\n+    template<typename Char>\n+    struct char_traits\n+    {\n+    };\n+    template<typename Char>\n+    class allocator\n+    {\n+    };\n+    template<typename Char, typename Traits, typename Alloc>\n+    class basic_string\n+    {\n+    };\n+    typedef basic_string<char, char_traits<char>, allocator<char> > string;\n+}\n+#else // if POSIX\n+\n+#include <string>\n+\n+#endif // _WIN32\n+\n #include \"cppb.h\"\n \n /**************************************/\n@@ -317,10 +341,9 @@ size_t getoffset13161a()\n \n /****************************************************/\n \n-#if __linux__ || __APPLE__ || __FreeBSD__ || __DragonFly__\n+#if __linux__\n #include <memory>\n #include <vector>\n-#include <string>\n \n #if __linux__\n template struct std::allocator<int>;\n@@ -903,26 +926,6 @@ void A18966::foo() { calledOverloads[i++] = 'A'; }\n B18966::B18966() { foo(); }\n void B18966::foo() { calledOverloads[i++] = 'B'; }\n \n-#if _WIN32 // otherwise defined in C header files!\n-// https://issues.dlang.org/show_bug.cgi?id=18955\n-namespace std\n-{\n-    template<typename Char>\n-    struct char_traits\n-    {\n-    };\n-    template<typename Char>\n-    class allocator\n-    {\n-    };\n-    template<typename Char, typename Traits, typename Alloc>\n-    class basic_string\n-    {\n-    };\n-    typedef basic_string<char, char_traits<char>, allocator<char> > string;\n-}\n-#endif // _WIN32\n-\n void callback18955(const std::string& s);\n \n void test18955()"}, {"sha": "c4b1538b3a46bab63a8d023a3649ec4351f7b9f1", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -1,4 +1,4 @@\n-caf14b0f4ebbae4157aac89368d6278332ee2aa1\n+0316b981e5f2fa1525e893c5d94c59c847a8c386\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}, {"sha": "27c84e7f55e2826aede9ec468859a5fba224190a", "filename": "libphobos/libdruntime/core/memory.d", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fmemory.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fmemory.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fmemory.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -1229,7 +1229,10 @@ void __delete(T)(ref T x) @system\n     else static if (is(T == U*, U))\n     {\n         static if (is(U == struct))\n-            _destructRecurse(*x);\n+        {\n+            if (x)\n+                _destructRecurse(*x);\n+        }\n     }\n     else static if (is(T : E[], E))\n     {\n@@ -1334,6 +1337,10 @@ unittest\n     assert(a is null);\n     assert(dtorCalled);\n     assert(GC.addrOf(cast(void*) a) == null);\n+\n+    // https://issues.dlang.org/show_bug.cgi?id=22779\n+    A *aptr;\n+    __delete(aptr);\n }\n \n /// Deleting arrays"}, {"sha": "0393ea52c072b7968888c455fe06e64f552502a2", "filename": "libphobos/libdruntime/core/stdc/math.d", "status": "modified", "additions": 125, "deletions": 8, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fmath.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -90,6 +90,13 @@ else version (DragonFlyBSD)\n     ///\n     enum int FP_ILOGBNAN      = int.max;\n }\n+else version (Solaris)\n+{\n+    ///\n+    enum int FP_ILOGB0        = -int.max;\n+    ///\n+    enum int FP_ILOGBNAN      = int.max;\n+}\n else version (CRuntime_Bionic)\n {\n     ///\n@@ -1380,18 +1387,128 @@ else version (DragonFlyBSD)\n }\n else version (Solaris)\n {\n-    pure int __isnanf(float x);\n-    pure int __isnan(double x);\n-    pure int __isnanl(real x);\n+    enum\n+    {\n+        FP_INFINITE  = 3,\n+        FP_NAN       = 4,\n+        FP_NORMAL    = 2,\n+        FP_SUBNORMAL = 1,\n+        FP_ZERO      = 0,\n+    }\n+\n+    enum\n+    {\n+        ///\n+        FP_FAST_FMA  = 0,\n+        ///\n+        FP_FAST_FMAF = 0,\n+        ///\n+        FP_FAST_FMAL = 0,\n+    }\n+\n+  extern (D)\n+  {\n+    //int fpclassify(real-floating x);\n+    ///\n+    pure int fpclassify(float x)\n+    {\n+        return isnan(x) ? FP_NAN    : isinf(x)  ? FP_INFINITE :\n+            isnormal(x) ? FP_NORMAL : x == 0.0f ? FP_ZERO :\n+                          FP_SUBNORMAL;\n+    }\n+\n+    ///\n+    pure int fpclassify(double x)\n+    {\n+        return isnan(x) ? FP_NAN    : isinf(x)  ? FP_INFINITE :\n+            isnormal(x) ? FP_NORMAL : x == 0.0  ? FP_ZERO :\n+                          FP_SUBNORMAL;\n+    }\n+\n+    ///\n+    pure int fpclassify(real x)\n+    {\n+        return isnan(x) ? FP_NAN    : isinf(x)  ? FP_INFINITE :\n+            isnormal(x) ? FP_NORMAL : x == 0.0L ? FP_ZERO :\n+                          FP_SUBNORMAL;\n+    }\n+\n+    //int isfinite(real-floating x);\n+    ///\n+    pure int isfinite(float x)       { return !isnan(x) && !isinf(x); }\n+    ///\n+    pure int isfinite(double x)      { return !isnan(x) && !isinf(x); }\n+    ///\n+    pure int isfinite(real x)        { return !isnan(x) && !isinf(x); }\n+\n+    //int isinf(real-floating x);\n+    ///\n+    pure int isinf(float x)          { return x == float.infinity || x == -float.infinity; }\n+    ///\n+    pure int isinf(double x)         { return x == double.infinity || x == -double.infinity; }\n+    ///\n+    pure int isinf(real x)           { return x == real.infinity || x == -real.infinity; }\n \n     //int isnan(real-floating x);\n-      ///\n-    pragma(mangle, \"__isnanf\") pure int isnan(float x);\n     ///\n-    pragma(mangle, \"__isnan\")  pure int isnan(double x);\n+    pure int isnan(float x)          { return x != x; }\n     ///\n-    pragma(mangle, real.sizeof == double.sizeof ? \"__isnan\" : \"__isnanl\")\n-    pure int isnan(real x);\n+    pure int isnan(double x)         { return x != x; }\n+    ///\n+    pure int isnan(real x)           { return x != x; }\n+\n+    //int isnormal(real-floating x);\n+    ///\n+    pure int isnormal(float x)\n+    {\n+        import core.math;\n+        return isfinite(x) && fabs(x) >= float.min_normal;\n+    }\n+    ///\n+    pure int isnormal(double x)\n+    {\n+        import core.math;\n+        return isfinite(x) && fabs(x) >= double.min_normal;\n+    }\n+    ///\n+    pure int isnormal(real x)\n+    {\n+        import core.math;\n+        return isfinite(x) && fabs(x) >= real.min_normal;\n+    }\n+\n+    //int signbit(real-floating x);\n+    ///\n+    pure int signbit(float x)\n+    {\n+        version (SPARC_Any)\n+            return cast(int)(*cast(uint*)&x >> 31);\n+        else version (X86_Any)\n+            return cast(int)(*cast(uint*)&x >> 31);\n+        else\n+            static assert(false, \"Architecture not supported.\");\n+    }\n+    ///\n+    pure int signbit(double x)\n+    {\n+        version (SPARC_Any)\n+            return cast(int)(*cast(uint*)&x >> 31);\n+        else version (X86_Any)\n+            return cast(int)((cast(uint*)&x)[1] >> 31);\n+        else\n+            static assert(false, \"Architecture not supported.\");\n+    }\n+    ///\n+    pure int signbit(real x)\n+    {\n+        version (SPARC_Any)\n+            return cast(int)(*cast(uint*)&x >> 31);\n+        else version (X86_Any)\n+            return cast(int)((cast(ushort *)&x)[4] >> 15);\n+        else\n+            static assert(false, \"Architecture not supported.\");\n+    }\n+  }\n }\n else version (CRuntime_Bionic)\n {"}, {"sha": "cd53f0ab50b857f06313e74dc904cc0d11f3b193", "filename": "libphobos/libdruntime/core/stdc/stdio.d", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Fstdio.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -983,7 +983,7 @@ else version (NetBSD)\n         _IONBF = 2,\n     }\n \n-    private extern __gshared FILE[3] __sF;\n+    private extern shared FILE[3] __sF;\n     @property auto __stdin()() { return &__sF[0]; }\n     @property auto __stdout()() { return &__sF[1]; }\n     @property auto __stderr()() { return &__sF[2]; }\n@@ -1006,7 +1006,7 @@ else version (OpenBSD)\n         _IONBF = 2,\n     }\n \n-    private extern __gshared FILE[3] __sF;\n+    private extern shared FILE[3] __sF;\n     @property auto __stdin()() { return &__sF[0]; }\n     @property auto __stdout()() { return &__sF[1]; }\n     @property auto __stderr()() { return &__sF[2]; }\n@@ -1061,11 +1061,11 @@ else version (Solaris)\n     private extern shared FILE[_NFILE] __iob;\n \n     ///\n-    shared stdin = &__iob[0];\n+    @property auto stdin()() { return &__iob[0]; }\n     ///\n-    shared stdout = &__iob[1];\n+    @property auto stdout()() { return &__iob[1]; }\n     ///\n-    shared stderr = &__iob[2];\n+    @property auto stderr()() { return &__iob[2]; }\n }\n else version (CRuntime_Bionic)\n {\n@@ -1082,11 +1082,11 @@ else version (CRuntime_Bionic)\n     private extern shared FILE[3] __sF;\n \n     ///\n-    shared stdin  = &__sF[0];\n+    @property auto stdin()() { return &__sF[0]; }\n     ///\n-    shared stdout = &__sF[1];\n+    @property auto stdout()() { return &__sF[1]; }\n     ///\n-    shared stderr = &__sF[2];\n+    @property auto stderr()() { return &__sF[2]; }\n }\n else version (CRuntime_Musl)\n {"}, {"sha": "d5339964e36776ff933b2dbbfdd97156f9540718", "filename": "libphobos/libdruntime/core/stdcpp/exception.d", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Fexception.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Fexception.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Fexception.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -69,15 +69,15 @@ version (GenericBaseException)\n     {\n     @nogc:\n         ///\n-        this() nothrow {}\n+        extern(D) this() nothrow {}\n         ///\n         @weak ~this() nothrow {} // HACK: this should extern, but then we have link errors!\n \n         ///\n         @weak const(char)* what() const nothrow { return \"unknown\"; } // HACK: this should extern, but then we have link errors!\n \n     protected:\n-        this(const(char)*, int = 1) nothrow { this(); } // compat with MS derived classes\n+        extern(D) this(const(char)*, int = 1) nothrow { this(); } // compat with MS derived classes\n     }\n }\n else version (CppRuntime_DigitalMars)\n@@ -87,7 +87,7 @@ else version (CppRuntime_DigitalMars)\n     {\n     @nogc:\n         ///\n-        this() nothrow {}\n+        extern(D) this() nothrow {}\n         //virtual ~this();\n         void dtor() { }     // reserve slot in vtbl[]\n \n@@ -105,7 +105,7 @@ else version (CppRuntime_Microsoft)\n     {\n     @nogc:\n         ///\n-        this(const(char)* message = \"unknown\", int = 1) nothrow { msg = message; }\n+        extern(D) this(const(char)* message = \"unknown\", int = 1) nothrow { msg = message; }\n         ///\n         @weak ~this() nothrow {}\n \n@@ -131,7 +131,7 @@ class bad_exception : exception\n {\n @nogc:\n     ///\n-    this(const(char)* message = \"bad exception\") { super(message); }\n+    extern(D) this(const(char)* message = \"bad exception\") nothrow { super(message); }\n \n     version (GenericBaseException)\n     {"}, {"sha": "24f2938ccab873ccfcf6cb6c5751846714a76b17", "filename": "libphobos/libdruntime/core/stdcpp/typeinfo.d", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Ftypeinfo.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Ftypeinfo.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdcpp%2Ftypeinfo.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -18,10 +18,10 @@ version (CppRuntime_DigitalMars)\n     import core.stdcpp.exception;\n \n     extern (C++, \"std\"):\n-    @nogc:\n \n     class type_info\n     {\n+    @nogc:\n         void* pdata;\n \n     public:\n@@ -41,17 +41,19 @@ version (CppRuntime_DigitalMars)\n \n     class bad_cast : exception\n     {\n-        this() nothrow { }\n-        this(const bad_cast) nothrow { }\n+    @nogc:\n+        extern(D) this() nothrow { }\n+        extern(D) this(const bad_cast) nothrow { }\n         //bad_cast operator=(const bad_cast) nothrow { return this; }\n         //virtual ~this() nothrow;\n         override const(char)* what() const nothrow;\n     }\n \n     class bad_typeid : exception\n     {\n-        this() nothrow { }\n-        this(const bad_typeid) nothrow { }\n+    @nogc:\n+        extern(D) this() nothrow { }\n+        extern(D) this(const bad_typeid) nothrow { }\n         //bad_typeid operator=(const bad_typeid) nothrow { return this; }\n         //virtual ~this() nothrow;\n         override const (char)* what() const nothrow;\n@@ -62,7 +64,6 @@ else version (CppRuntime_Microsoft)\n     import core.stdcpp.exception;\n \n     extern (C++, \"std\"):\n-    @nogc:\n \n     struct __type_info_node\n     {\n@@ -74,6 +75,7 @@ else version (CppRuntime_Microsoft)\n \n     class type_info\n     {\n+    @nogc:\n         @weak ~this() nothrow {}\n         //bool operator==(const type_info rhs) const;\n         //bool operator!=(const type_info rhs) const;\n@@ -88,13 +90,15 @@ else version (CppRuntime_Microsoft)\n \n     class bad_cast : exception\n     {\n-        this(const(char)* msg = \"bad cast\") @nogc nothrow { super(msg); }\n+    @nogc:\n+        extern(D) this(const(char)* msg = \"bad cast\") nothrow { super(msg); }\n         //virtual ~this();\n     }\n \n     class bad_typeid : exception\n     {\n-        this(const(char)* msg = \"bad typeid\") @nogc nothrow { super(msg); }\n+    @nogc:\n+        extern(D) this(const(char)* msg = \"bad typeid\") nothrow { super(msg); }\n         //virtual ~this();\n     }\n }\n@@ -108,10 +112,10 @@ else version (CppRuntime_Gcc)\n     }\n \n     extern (C++, \"std\"):\n-    @nogc:\n \n     abstract class type_info\n     {\n+    @nogc:\n         @weak ~this() {}\n         @weak final const(char)* name() const nothrow\n         {\n@@ -133,19 +137,21 @@ else version (CppRuntime_Gcc)\n     protected:\n         const(char)* _name;\n \n-        this(const(char)* name) { _name = name; }\n+        extern(D) this(const(char)* name) { _name = name; }\n     }\n \n     class bad_cast : exception\n     {\n-        this() nothrow {}\n+    @nogc:\n+        extern(D) this() nothrow {}\n         //~this();\n         @weak override const(char)* what() const nothrow { return \"bad cast\"; }\n     }\n \n     class bad_typeid : exception\n     {\n-        this() nothrow {}\n+    @nogc:\n+        extern(D) this() nothrow {}\n         //~this();\n         @weak override const(char)* what() const nothrow { return \"bad typeid\"; }\n     }\n@@ -155,10 +161,10 @@ else version (CppRuntime_Clang)\n     import core.stdcpp.exception;\n \n     extern (C++, \"std\"):\n-    @nogc:\n \n     abstract class type_info\n     {\n+    @nogc:\n         @weak ~this() {}\n         @weak final const(char)* name() const nothrow\n         {\n@@ -173,19 +179,21 @@ else version (CppRuntime_Clang)\n     protected:\n         const(char)* __type_name;\n \n-        this(const(char)* __n) { __type_name = __n; }\n+        extern(D) this(const(char)* __n) { __type_name = __n; }\n     }\n \n     class bad_cast : exception\n     {\n-        this() nothrow {}\n+    @nogc:\n+        extern(D) this() nothrow {}\n         //~this();\n         @weak override const(char)* what() const nothrow { return \"bad cast\"; }\n     }\n \n     class bad_typeid : exception\n     {\n-        this() nothrow {}\n+    @nogc:\n+        extern(D) this() nothrow {}\n         //~this();\n         @weak override const(char)* what() const nothrow { return \"bad typeid\"; }\n     }"}, {"sha": "85e2fb6691509343c6cd38fa43c4f6a09fc4720b", "filename": "libphobos/libdruntime/core/sys/posix/locale.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Flocale.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -31,7 +31,7 @@ version (FreeBSD)\n     version = DarwinBSDLocale;\n version (NetBSD)\n     version = DarwinBSDLocale;\n-version (DragonflyBSD)\n+version (DragonFlyBSD)\n     version = DarwinBSDLocale;\n \n version (CRuntime_Glibc)"}, {"sha": "a15616c6e0f32db122e7aa5f519ad8644cbe2e6e", "filename": "libphobos/libdruntime/object.d", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fobject.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Flibdruntime%2Fobject.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fobject.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -4445,7 +4445,11 @@ void destroy(bool initialize = true, T)(T obj) if (is(T == class))\n         }\n     }\n     else\n-        rt_finalize(cast(void*)obj);\n+    {\n+        // Bypass overloaded opCast\n+        auto ptr = (() @trusted => *cast(void**) &obj)();\n+        rt_finalize(ptr);\n+    }\n }\n \n /// ditto\n@@ -4707,6 +4711,18 @@ nothrow unittest\n     assert(C.dtorCount == 1);\n }\n \n+// https://issues.dlang.org/show_bug.cgi?id=22832\n+nothrow unittest\n+{\n+    static struct A {}\n+    static class B\n+    {\n+        A opCast(T : A)() { return A(); }\n+    }\n+\n+    destroy(B.init);\n+}\n+\n /// ditto\n void destroy(bool initialize = true, T)(ref T obj)\n if (__traits(isStaticArray, T))"}, {"sha": "5fd357c534a0c98a12f7d01614fdbb59cd99c52e", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -1,4 +1,4 @@\n-41aaf8c2636df0e2e3ad39933b321d2b4cd231fa\n+a1f8c4c0700ce4e256f4130ad7883c6ea3890901\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "db325f727e8f9fe15b3993a699ca7560b99d0f79", "filename": "libphobos/src/std/datetime/systime.d", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fdatetime%2Fsystime.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -8713,13 +8713,14 @@ public:\n \n     /++\n         Creates a $(LREF SysTime) from a string with the format\n-        YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds is the time\n-        zone). Whitespace is stripped from the given string.\n+        YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ\n+        is the time zone). Whitespace is stripped from the given string.\n \n-        The exact format is exactly as described in `toISOString` except that\n-        trailing zeroes are permitted - including having fractional seconds with\n-        all zeroes. However, a decimal point with nothing following it is\n-        invalid. Also, while $(LREF toISOString) will never generate a string\n+        The exact format is exactly as described in $(LREF toISOString) except\n+        that trailing zeroes are permitted - including having fractional seconds\n+        with all zeroes. The time zone and fractional seconds are optional,\n+        however, a decimal point with nothing following it is invalid.\n+        Also, while $(LREF toISOString) will never generate a string\n         with more than 7 digits in the fractional seconds (because that's the\n         limit with hecto-nanosecond precision), it will allow more than 7 digits\n         in order to read strings from other sources that have higher precision\n@@ -9024,13 +9025,14 @@ public:\n \n     /++\n         Creates a $(LREF SysTime) from a string with the format\n-        YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the\n-        time zone). Whitespace is stripped from the given string.\n+        YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ\n+        is the time zone). Whitespace is stripped from the given string.\n \n-        The exact format is exactly as described in `toISOExtString`\n+        The exact format is exactly as described in $(LREF toISOExtString)\n         except that trailing zeroes are permitted - including having fractional\n-        seconds with all zeroes. However, a decimal point with nothing following\n-        it is invalid. Also, while $(LREF toISOExtString) will never generate a\n+        seconds with all zeroes. The time zone and fractional seconds are\n+        optional, however, a decimal point with nothing following it is invalid.\n+        Also, while $(LREF toISOExtString) will never generate a\n         string with more than 7 digits in the fractional seconds (because that's\n         the limit with hecto-nanosecond precision), it will allow more than 7\n         digits in order to read strings from other sources that have higher\n@@ -9273,13 +9275,14 @@ public:\n \n     /++\n         Creates a $(LREF SysTime) from a string with the format\n-        YYYY-MM-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the\n-        time zone). Whitespace is stripped from the given string.\n+        YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ\n+        is the time zone). Whitespace is stripped from the given string.\n \n-        The exact format is exactly as described in `toSimpleString` except\n+        The exact format is exactly as described in $(LREF toSimpleString) except\n         that trailing zeroes are permitted - including having fractional seconds\n-        with all zeroes. However, a decimal point with nothing following it is\n-        invalid. Also, while $(LREF toSimpleString) will never generate a\n+        with all zeroes. The time zone and fractional seconds are optional,\n+        however, a decimal point with nothing following it is invalid.\n+        Also, while $(LREF toSimpleString) will never generate a\n         string with more than 7 digits in the fractional seconds (because that's\n         the limit with hecto-nanosecond precision), it will allow more than 7\n         digits in order to read strings from other sources that have higher"}, {"sha": "3833c84243cb25bed8110837b3d6d87f5337e162", "filename": "libphobos/src/std/sumtype.d", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8977f4bec650bb6975792772245b07b722ee9843/libphobos%2Fsrc%2Fstd%2Fsumtype.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fsumtype.d?ref=8977f4bec650bb6975792772245b07b722ee9843", "patch": "@@ -1569,27 +1569,7 @@ private enum bool isSumTypeInstance(T) = is(T == SumType!Args, Args...);\n }\n \n /// True if `T` is a [SumType] or implicitly converts to one, otherwise false.\n-template isSumType(T)\n-{\n-    static if (is(T : SumType!Args, Args...))\n-    {\n-        enum isSumType = true;\n-    }\n-    else static if (is(T == struct) && __traits(getAliasThis, T).length > 0)\n-    {\n-        // Workaround for https://issues.dlang.org/show_bug.cgi?id=21975\n-        import std.traits : ReturnType;\n-\n-        alias AliasThisType = ReturnType!((T t) =>\n-            __traits(getMember, t, __traits(getAliasThis, T)[0])\n-        );\n-        enum isSumType = .isSumType!AliasThisType;\n-    }\n-    else\n-    {\n-        enum isSumType = false;\n-    }\n-}\n+enum bool isSumType(T) = is(T : SumType!Args, Args...);\n \n ///\n @safe unittest\n@@ -1610,25 +1590,6 @@ template isSumType(T)\n     assert(!isSumType!ContainsSumType);\n }\n \n-@safe unittest\n-{\n-    static struct AliasThisVar(T)\n-    {\n-        SumType!T payload;\n-        alias payload this;\n-    }\n-\n-    static struct AliasThisFunc(T)\n-    {\n-        SumType!T payload;\n-        ref get() { return payload; }\n-        alias get this;\n-    }\n-\n-    static assert(isSumType!(AliasThisVar!int));\n-    static assert(isSumType!(AliasThisFunc!int));\n-}\n-\n /**\n  * Calls a type-appropriate function with the value held in a [SumType].\n  *"}]}