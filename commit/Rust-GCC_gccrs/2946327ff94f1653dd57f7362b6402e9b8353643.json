{"sha": "2946327ff94f1653dd57f7362b6402e9b8353643", "node_id": "C_kwDOANBUbNoAKDI5NDYzMjdmZjk0ZjE2NTNkZDU3ZjczNjJiNjQwMmU5YjgzNTM2NDM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-05-26T11:37:13Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-06-02T13:32:29Z"}, "message": "derive: Add #[derive(Copy)] builtin\n\ngcc/rust/ChangeLog:\n\n\t* Make-lang.in: Add new files.\n\t* expand/rust-derive.cc (DeriveVisitor::derive): Call into DeriveCopy.\n\t* expand/rust-derive-copy.cc: New file.\n\t* expand/rust-derive-copy.h: New file.", "tree": {"sha": "340b9301f27f1e2fe27e282ab57587e8987213d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/340b9301f27f1e2fe27e282ab57587e8987213d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2946327ff94f1653dd57f7362b6402e9b8353643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2946327ff94f1653dd57f7362b6402e9b8353643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2946327ff94f1653dd57f7362b6402e9b8353643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2946327ff94f1653dd57f7362b6402e9b8353643/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e49323c7593404ce536040b65bed37d4048eb95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e49323c7593404ce536040b65bed37d4048eb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e49323c7593404ce536040b65bed37d4048eb95"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "8dcfa4f93e12f4250408174ae0fd1d3cb55c9154", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=2946327ff94f1653dd57f7362b6402e9b8353643", "patch": "@@ -90,6 +90,7 @@ GRS_OBJS = \\\n \trust/rust-ast-builder.o \\\n \trust/rust-derive.o \\\n \trust/rust-derive-clone.o \\\n+\trust/rust-derive-copy.o \\\n     rust/rust-macro-invoc-lexer.o \\\n     rust/rust-macro-substitute-ctx.o \\\n     rust/rust-macro-builtins.o \\"}, {"sha": "d578849c06b87b193a5f73f26b99052a9616e2a0", "filename": "gcc/rust/expand/rust-derive-copy.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive-copy.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive-copy.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-derive-copy.cc?ref=2946327ff94f1653dd57f7362b6402e9b8353643", "patch": "@@ -0,0 +1,80 @@\n+// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-derive-copy.h\"\n+#include \"rust-ast-full.h\"\n+\n+namespace Rust {\n+namespace AST {\n+\n+DeriveCopy::DeriveCopy (Location loc)\n+  : loc (loc), builder (AstBuilder (loc)), expanded (nullptr)\n+{}\n+\n+std::unique_ptr<AST::Item>\n+DeriveCopy::go (Item &item)\n+{\n+  item.accept_vis (*this);\n+\n+  rust_assert (expanded);\n+\n+  return std::move (expanded);\n+}\n+\n+std::unique_ptr<Item>\n+DeriveCopy::copy_impl (std::string name)\n+{\n+  // `$crate::core::marker::Copy` instead\n+  auto segments = std::vector<std::unique_ptr<TypePathSegment>> ();\n+  segments.emplace_back (builder.type_path_segment (\"Copy\"));\n+  auto copy = TypePath (std::move (segments), loc);\n+\n+  return std::unique_ptr<Item> (\n+    new TraitImpl (copy, /* unsafe */ false,\n+\t\t   /* exclam */ false, /* trait items */ {},\n+\t\t   /* generics */ {}, builder.single_type_path (name),\n+\t\t   WhereClause::create_empty (), Visibility::create_private (),\n+\t\t   {}, {}, loc));\n+}\n+\n+void\n+DeriveCopy::visit_struct (StructStruct &item)\n+{\n+  expanded = copy_impl (item.get_struct_name ());\n+}\n+\n+void\n+DeriveCopy::visit_tuple (TupleStruct &item)\n+{\n+  expanded = copy_impl (item.get_struct_name ());\n+}\n+\n+void\n+DeriveCopy::visit_enum (Enum &item)\n+{\n+  expanded = copy_impl (item.get_identifier ());\n+}\n+\n+void\n+DeriveCopy::visit_union (Union &item)\n+{\n+  expanded = copy_impl (item.get_identifier ());\n+}\n+\n+} // namespace AST\n+} // namespace Rust"}, {"sha": "dce1f5e9a950b6b6f4a8471cd17c278dab66d651", "filename": "gcc/rust/expand/rust-derive-copy.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive-copy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive-copy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-derive-copy.h?ref=2946327ff94f1653dd57f7362b6402e9b8353643", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2020-2023 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_DERIVE_COPY_H\n+#define RUST_DERIVE_COPY_H\n+\n+#include \"rust-derive.h\"\n+#include \"rust-ast-builder.h\"\n+\n+namespace Rust {\n+namespace AST {\n+class DeriveCopy : DeriveVisitor\n+{\n+public:\n+  DeriveCopy (Location loc);\n+\n+  std::unique_ptr<Item> go (Item &);\n+\n+private:\n+  Location loc;\n+  AstBuilder builder;\n+  std::unique_ptr<Item> expanded;\n+\n+  /**\n+   * Create the Copy impl block for a type. These impl blocks are very simple as\n+   * Copy is just a marker trait.\n+   *\n+   * impl Copy for <type> {}\n+   */\n+  std::unique_ptr<Item> copy_impl (std::string name);\n+\n+  virtual void visit_struct (StructStruct &item);\n+  virtual void visit_tuple (TupleStruct &item);\n+  virtual void visit_enum (Enum &item);\n+  virtual void visit_union (Union &item);\n+};\n+\n+} // namespace AST\n+} // namespace Rust\n+\n+#endif // !RUST_DERIVE_COPY_H"}, {"sha": "8f9b206da4be1dc93eb1bd6a63256d8d4714af18", "filename": "gcc/rust/expand/rust-derive.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2946327ff94f1653dd57f7362b6402e9b8353643/gcc%2Frust%2Fexpand%2Frust-derive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-derive.cc?ref=2946327ff94f1653dd57f7362b6402e9b8353643", "patch": "@@ -18,6 +18,7 @@\n \n #include \"rust-derive.h\"\n #include \"rust-derive-clone.h\"\n+#include \"rust-derive-copy.h\"\n \n namespace Rust {\n namespace AST {\n@@ -31,6 +32,7 @@ DeriveVisitor::derive (Item &item, const Attribute &attr,\n     case BuiltinMacro::Clone:\n       return DeriveClone (attr.get_locus ()).go (item);\n     case BuiltinMacro::Copy:\n+      return DeriveCopy (attr.get_locus ()).go (item);\n     case BuiltinMacro::Debug:\n     case BuiltinMacro::Default:\n     case BuiltinMacro::Eq:"}]}