{"sha": "64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ4MjQyMDVjYzkzMTJlNGU3Nzk4Y2RhODZhOGU0YzFmMjNlNWQyYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-04-06T18:35:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-04-06T18:35:16Z"}, "message": "re PR preprocessor/61817 (Inconsistent location of tokens in the expansion list of a built-in macro)\n\nPR preprocessor/61817\nPR preprocessor/69391\n\n  * internal.h (_cpp_builtin_macro_text): Update decl.\n  * macro.c (_cpp_builtin_macro_text): Accept location for __LINE__.\n  (builtin_macro): Accept a second location for __LINE__.\n  (enter_macro_context): Compute both virtual and real expansion\n  locations for the macro.\n\n  * gcc.dg/pr61817-1.c: New test.\n  * gcc.dg/pr61817-2.c: New test.\n  * gcc.dg/pr69391-1.c: New test.\n  * gcc.dg/pr69391-2.c: New test.\n\nFrom-SVN: r234794", "tree": {"sha": "7c2cad1cf8de66534953f4d3d802c6e548f0b45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c2cad1cf8de66534953f4d3d802c6e548f0b45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/comments", "author": null, "committer": null, "parents": [{"sha": "bc2fc1f3b84472865724b7e91b540ca0fadedd1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2fc1f3b84472865724b7e91b540ca0fadedd1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2fc1f3b84472865724b7e91b540ca0fadedd1b"}], "stats": {"total": 134, "additions": 113, "deletions": 21}, "files": [{"sha": "0ecced8244895fa12eca79764aba0f65933d8dc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -1,3 +1,10 @@\n+2016-04-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/pr61817-1.c: New test.\n+\t* gcc.dg/pr61817-2.c: New test.\n+\t* gcc.dg/pr69391-1.c: New test.\n+\t* gcc.dg/pr69391-2.c: New test.\n+\n 2016-04-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/70398"}, {"sha": "4230485e635e16c1bdf2ae467e7b12c82f634f18", "filename": "gcc/testsuite/gcc.dg/pr61817-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-1.c?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -ftrack-macro-expansion=0\" } */\n+\n+#define A(x) _Static_assert(x, #x)\n+#define F(x, y, z) a = __LINE__, b = x ## y, c = z\n+\n+enum {\n+#line 10\n+    F\n+     (\n+      __LI,\n+      NE__,\n+      __LINE__\n+      )\n+};\n+\n+A(a == 15);\n+A(b == 15);\n+A(c == 15);"}, {"sha": "e4326b81f26e3abe4300f3b01083bcc051b2d847", "filename": "gcc/testsuite/gcc.dg/pr61817-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61817-2.c?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c11 -ftrack-macro-expansion=1\" } */\n+\n+#define A(x) _Static_assert(x, #x)\n+#define F(x, y, z) a = __LINE__, b = x ## y, c = z\n+\n+enum {\n+#line 10\n+    F\n+     (\n+      __LI,\n+      NE__,\n+      __LINE__\n+      )\n+};\n+\n+A(a == 15);\n+A(b == 15);\n+A(c == 15);"}, {"sha": "15e49dc657d62b8f4a7b6bc503f5650fcfc4354e", "filename": "gcc/testsuite/gcc.dg/pr69391-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-1.c?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftrack-macro-expansion=0\" } */\n+#define STR_I(X) #X\n+#define STR(X) STR_I(X)\n+#define LINE STR(__LINE__) STR(__LINE__)\n+int main()\n+{\n+  const char *s = LINE;\n+  if (s[0] != '8' || s[1] != '8')\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "7d2faae50d8842c1aef6e1f7f2498314255252ed", "filename": "gcc/testsuite/gcc.dg/pr69391-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr69391-2.c?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftrack-macro-expansion=1\" } */\n+#define STR_I(X) #X\n+#define STR(X) STR_I(X)\n+#define LINE STR(__LINE__) STR(__LINE__)\n+int main()\n+{\n+  const char *s = LINE;\n+  if (s[0] != '8' || s[1] != '8')\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "583f9542eabd6916463ae1a6c2c488bf59a7c721", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -1,3 +1,13 @@\n+2016-04-06  Richard Henderson  <rth@redhat.com>\n+\n+\tPR preprocessor/61817\n+\tPR preprocessor/69391\n+\t* internal.h (_cpp_builtin_macro_text): Update decl.\n+\t* macro.c (_cpp_builtin_macro_text): Accept location for __LINE__.\n+\t(builtin_macro): Accept a second location for __LINE__.\n+\t(enter_macro_context): Compute both virtual and real expansion\n+\tlocations for the macro.\n+\n 2016-03-25  Bernd Schmidt  <bschmidt@redhat.com>\n \n \tPR lto/69650"}, {"sha": "9ce870738cc6322362dee020f0e07e03b69991b0", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -626,7 +626,8 @@ extern bool _cpp_save_parameter (cpp_reader *, cpp_macro *, cpp_hashnode *,\n extern bool _cpp_arguments_ok (cpp_reader *, cpp_macro *, const cpp_hashnode *,\n \t\t\t       unsigned int);\n extern const unsigned char *_cpp_builtin_macro_text (cpp_reader *,\n-\t\t\t\t\t\t     cpp_hashnode *);\n+\t\t\t\t\t\t     cpp_hashnode *,\n+\t\t\t\t\t\t     source_location = 0);\n extern int _cpp_warn_if_unused_macro (cpp_reader *, cpp_hashnode *, void *);\n extern void _cpp_push_token_context (cpp_reader *, cpp_hashnode *,\n \t\t\t\t     const cpp_token *, unsigned int);"}, {"sha": "c251553450421fab1983474ddd77b068570de74e", "filename": "libcpp/macro.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64824205cc9312e4e7798cda86a8e4c1f23e5d2b/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=64824205cc9312e4e7798cda86a8e4c1f23e5d2b", "patch": "@@ -93,7 +93,8 @@ struct macro_arg_saved_data {\n \n static int enter_macro_context (cpp_reader *, cpp_hashnode *,\n \t\t\t\tconst cpp_token *, source_location);\n-static int builtin_macro (cpp_reader *, cpp_hashnode *, source_location);\n+static int builtin_macro (cpp_reader *, cpp_hashnode *,\n+\t\t\t  source_location, source_location);\n static void push_ptoken_context (cpp_reader *, cpp_hashnode *, _cpp_buff *,\n \t\t\t\t const cpp_token **, unsigned int);\n static void push_extended_tokens_context (cpp_reader *, cpp_hashnode *,\n@@ -229,7 +230,8 @@ static const char * const monthnames[] =\n /* Helper function for builtin_macro.  Returns the text generated by\n    a builtin macro. */\n const uchar *\n-_cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n+_cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n+\t\t\t source_location loc)\n {\n   const uchar *result = NULL;\n   linenum_type number = 1;\n@@ -319,11 +321,14 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n     case BT_SPECLINE:\n       /* If __LINE__ is embedded in a macro, it must expand to the\n \t line of the macro's invocation, not its definition.\n-\t Otherwise things like assert() will not work properly.  */\n-      number = linemap_get_expansion_line (pfile->line_table,\n-\t\t\t\t\t   CPP_OPTION (pfile, traditional)\n-\t\t\t\t\t   ? pfile->line_table->highest_line\n-\t\t\t\t\t   : pfile->cur_token[-1].src_loc);\n+\t Otherwise things like assert() will not work properly.\n+\t See WG14 N1911, WG21 N4220 sec 6.5, and PR 61861.  */\n+      if (CPP_OPTION (pfile, traditional))\n+\tloc = pfile->line_table->highest_line;\n+      else\n+\tloc = linemap_resolve_location (pfile->line_table, loc,\n+\t\t\t\t\tLRK_MACRO_EXPANSION_POINT, NULL);\n+      number = linemap_get_expansion_line (pfile->line_table, loc);\n       break;\n \n       /* __STDC__ has the value 1 under normal circumstances.\n@@ -417,7 +422,8 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node)\n    return the token to the caller.  LOC is the location of the expansion\n    point of the macro.  */\n static int\n-builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n+builtin_macro (cpp_reader *pfile, cpp_hashnode *node,\n+\t       source_location loc, source_location expand_loc)\n {\n   const uchar *buf;\n   size_t len;\n@@ -433,7 +439,7 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n       return _cpp_do__Pragma (pfile, loc);\n     }\n \n-  buf = _cpp_builtin_macro_text (pfile, node);\n+  buf = _cpp_builtin_macro_text (pfile, node, expand_loc);\n   len = ustrlen (buf);\n   nbuf = (char *) alloca (len + 1);\n   memcpy (nbuf, buf, len);\n@@ -456,8 +462,7 @@ builtin_macro (cpp_reader *pfile, cpp_hashnode *node, source_location loc)\n       source_location *virt_locs = NULL;\n       _cpp_buff *token_buf = tokens_buff_new (pfile, 1, &virt_locs);\n       const line_map_macro * map =\n-\tlinemap_enter_macro (pfile->line_table, node,\n-\t\t\t\t\t    token->src_loc, 1);\n+\tlinemap_enter_macro (pfile->line_table, node, loc, 1);\n       tokens_buff_add_token (token_buf, virt_locs, token,\n \t\t\t     pfile->line_table->builtin_location,\n \t\t\t     pfile->line_table->builtin_location,\n@@ -1231,22 +1236,29 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n   pfile->about_to_expand_macro_p = false;\n   /* Handle built-in macros and the _Pragma operator.  */\n   {\n-    source_location loc;\n+    source_location loc, expand_loc;\n+\n     if (/* The top-level macro invocation that triggered the expansion\n \t   we are looking at is with a standard macro ...*/\n \t!(pfile->top_most_macro_node->flags & NODE_BUILTIN)\n \t/* ... and it's a function-like macro invocation.  */\n \t&& pfile->top_most_macro_node->value.macro->fun_like)\n-      /* Then the location of the end of the macro invocation is the\n-\t location of the closing parenthesis.  */\n-      loc = pfile->cur_token[-1].src_loc;\n+      {\n+\t/* Then the location of the end of the macro invocation is the\n+\t   location of the closing parenthesis.  */\n+\tloc = pfile->cur_token[-1].src_loc;\n+\texpand_loc = loc;\n+      }\n     else\n-      /* Otherwise, the location of the end of the macro invocation is\n-\t the location of the expansion point of that top-level macro\n-\t invocation.  */\n-      loc = location;\n+      {\n+\t/* Otherwise, the location of the end of the macro invocation is\n+\t   the location of the expansion point of that top-level macro\n+\t   invocation.  */\n+\tloc = location;\n+\texpand_loc = pfile->invocation_location;\n+      }\n \n-    return builtin_macro (pfile, node, loc);\n+    return builtin_macro (pfile, node, loc, expand_loc);\n   }\n }\n "}]}