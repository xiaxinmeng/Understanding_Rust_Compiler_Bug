{"sha": "8d91472f6e41144c7e7e79d737788eeb2b8d1859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ5MTQ3MmY2ZTQxMTQ0YzdlN2U3OWQ3Mzc3ODhlZWIyYjhkMTg1OQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2016-11-07T20:16:13Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2016-11-07T20:16:13Z"}, "message": "configure.ac (.hidden): Change to conftest_s string.\n\n* configure.ac (.hidden): Change to conftest_s string. Provide string\nfor AIX assembler.\n(gcc_cv_ld_hidden): Yes for AIX.\n* configure: Regenerate.\n\n* dwarf2asm.c (USE_LINKONCE_INDIRECT): Don't set for AIX (XCOFF).\n\n* config/rs6000/rs6000-protos.h (rs6000_asm_weaken_decl): Declare\n(rs6000_xcoff_asm_output_aligned_decl_common): Declare.\n* config/rs6000/xcoff.h (TARGET_ASM_GLOBALIZE_DECL_NAME): Define.\n(ASM_OUTPUT_ALIGNED_DECL_COMMON): Define.\n(ASM_OUTPUT_ALIGNED_COMMON): Delete.\n* config/rs6000/rs6000.c (rs6000_init_builtins): Change clog rename\nfrom #if to if.\n(rs6000_xcoff_visibility): New.\n(rs6000_xcoff_declare_function_name): Add visibility support.\n(rs6000_xcoff_asm_globalize_decl_name): New.\n(rs6000_xcoff_asm_output_aligned_decl_common): New.\n(rs6000_asm_weaken_decl): New.\n(rs6000_code_end): Disable HIDDEN_LINKONCE on XCOFF.\nconfig/rs6000/rs6000.h (ASM_WEAKEN_DECL): Change definition to\nreference function.\n\nFrom-SVN: r241930", "tree": {"sha": "3889669409c14dddd4ee0590c976272de133bfdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3889669409c14dddd4ee0590c976272de133bfdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d91472f6e41144c7e7e79d737788eeb2b8d1859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d91472f6e41144c7e7e79d737788eeb2b8d1859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d91472f6e41144c7e7e79d737788eeb2b8d1859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d91472f6e41144c7e7e79d737788eeb2b8d1859/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9c039100a92c57714d3813b2d7d495a59963368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9c039100a92c57714d3813b2d7d495a59963368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9c039100a92c57714d3813b2d7d495a59963368"}], "stats": {"total": 228, "additions": 177, "deletions": 51}, "files": [{"sha": "ce1f8e3d31747496b93c46669c38587b6f70a046", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -1,3 +1,28 @@\n+2016-11-06  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* configure.ac (.hidden): Change to conftest_s string. Provide string\n+\tfor AIX assembler.\n+\t(gcc_cv_ld_hidden): Yes for AIX.\n+\t* configure: Regenerate.\n+\n+\t* dwarf2asm.c (USE_LINKONCE_INDIRECT): Don't set for AIX (XCOFF).\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_asm_weaken_decl): Declare\n+\t(rs6000_xcoff_asm_output_aligned_decl_common): Declare.\n+\t* config/rs6000/xcoff.h (TARGET_ASM_GLOBALIZE_DECL_NAME): Define.\n+\t(ASM_OUTPUT_ALIGNED_DECL_COMMON): Define.\n+\t(ASM_OUTPUT_ALIGNED_COMMON): Delete.\n+\t* config/rs6000/rs6000.c (rs6000_init_builtins): Change clog rename\n+\tfrom #if to if.\n+\t(rs6000_xcoff_visibility): New.\n+\t(rs6000_xcoff_declare_function_name): Add visibility support.\n+\t(rs6000_xcoff_asm_globalize_decl_name): New.\n+\t(rs6000_xcoff_asm_output_aligned_decl_common): New.\n+\t(rs6000_asm_weaken_decl): New.\n+\t(rs6000_code_end): Disable HIDDEN_LINKONCE on XCOFF.\n+\tconfig/rs6000/rs6000.h (ASM_WEAKEN_DECL): Change definition to\n+\treference function.\n+\n 2016-11-06  Jack Howarth  <howarth.at.gcc@gmail.com>\n \n \tPR driver/78206"}, {"sha": "989557f76c956624d5c95c235b27f96dc50adfc4", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -187,8 +187,13 @@ extern rtx rs6000_libcall_value (machine_mode);\n extern rtx rs6000_va_arg (tree, tree);\n extern int function_ok_for_sibcall (tree);\n extern int rs6000_reg_parm_stack_space (tree, bool);\n+extern void rs6000_asm_weaken_decl (FILE *, tree, const char *, const char *);\n extern void rs6000_xcoff_declare_function_name (FILE *, const char *, tree);\n extern void rs6000_xcoff_declare_object_name (FILE *, const char *, tree);\n+extern void rs6000_xcoff_asm_output_aligned_decl_common (FILE *, tree,\n+\t\t\t\t\t\t\t const char *,\n+\t\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t\t unsigned HOST_WIDE_INT);\n extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n extern bool rs6000_elf_in_small_data_p (const_tree);\n #ifdef ARGS_SIZE_RTX"}, {"sha": "1316252e48141f876316ee1ecac9a709038a904f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 116, "deletions": 4, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -16982,11 +16982,10 @@ rs6000_init_builtins (void)\n   def_builtin (\"__builtin_cpu_is\", ftype, RS6000_BUILTIN_CPU_IS);\n   def_builtin (\"__builtin_cpu_supports\", ftype, RS6000_BUILTIN_CPU_SUPPORTS);\n \n-#if TARGET_XCOFF\n   /* AIX libm provides clog as __clog.  */\n-  if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n+  if (TARGET_XCOFF &&\n+      (tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n     set_user_assembler_name (tdecl, \"__clog\");\n-#endif\n \n #ifdef SUBTARGET_INIT_BUILTINS\n   SUBTARGET_INIT_BUILTINS;\n@@ -35364,6 +35363,31 @@ rs6000_declare_alias (struct symtab_node *n, void *d)\n   return false;\n }\n \n+\n+#ifdef HAVE_GAS_HIDDEN\n+/* Helper function to calculate visibility of a DECL\n+   and return the value as a const string.  */\n+\n+static const char *\n+rs6000_xcoff_visibility (tree decl)\n+{\n+  static const char * const visibility_types[] = {\n+    \"\", \",protected\", \",hidden\", \",internal\"\n+  };\n+\n+  enum symbol_visibility vis = DECL_VISIBILITY (decl);\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && cgraph_node::get (decl)\n+      && cgraph_node::get (decl)->instrumentation_clone\n+      && cgraph_node::get (decl)->instrumented_version)\n+    vis = DECL_VISIBILITY (cgraph_node::get (decl)->instrumented_version->decl);\n+\n+  return visibility_types[vis];\n+}\n+#endif\n+\n+\n /* This macro produces the initial definition of a function name.\n    On the RS/6000, we need to place an extra '.' in the function name and\n    output the function descriptor.\n@@ -35403,6 +35427,9 @@ rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n \t    }\n \t  fputs (\"\\t.globl .\", file);\n \t  RS6000_OUTPUT_BASENAME (file, buffer);\n+#ifdef HAVE_GAS_HIDDEN\n+\t  fputs (rs6000_xcoff_visibility (decl), file);\n+#endif\n \t  putc ('\\n', file);\n \t}\n     }\n@@ -35447,6 +35474,52 @@ rs6000_xcoff_declare_function_name (FILE *file, const char *name, tree decl)\n   return;\n }\n \n+\n+/* Output assembly language to globalize a symbol from a DECL,\n+   possibly with visibility.  */\n+\n+void\n+rs6000_xcoff_asm_globalize_decl_name (FILE *stream, tree decl)\n+{\n+  const char *name = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n+  fputs (GLOBAL_ASM_OP, stream);\n+  RS6000_OUTPUT_BASENAME (stream, name);\n+#ifdef HAVE_GAS_HIDDEN\n+  fputs (rs6000_xcoff_visibility (decl), stream);\n+#endif\n+  putc ('\\n', stream);\n+}\n+\n+/* Output assembly language to define a symbol as COMMON from a DECL,\n+   possibly with visibility.  */\n+\n+void\n+rs6000_xcoff_asm_output_aligned_decl_common (FILE *stream,\n+\t\t\t\t\t     tree decl ATTRIBUTE_UNUSED,\n+\t\t\t\t\t     const char *name,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT size,\n+\t\t\t\t\t     unsigned HOST_WIDE_INT align)\n+{\n+  unsigned HOST_WIDE_INT align2 = 2;\n+\n+  if (align > 32)\n+    align2 = floor_log2 (align / BITS_PER_UNIT);\n+  else if (size > 4)\n+    align2 = 3;\n+\n+  fputs (COMMON_ASM_OP, stream);\n+  RS6000_OUTPUT_BASENAME (stream, name);\n+\n+  fprintf (stream,\n+\t   \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",\" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t   size, align2);\n+\n+#ifdef HAVE_GAS_HIDDEN\n+  fputs (rs6000_xcoff_visibility (decl), stream);\n+#endif\n+  putc ('\\n', stream);\n+}\n+\n /* This macro produces the initial definition of a object (variable) name.\n    Because AIX assembler's .set command has unexpected semantics, we output\n    all aliases as alternative labels in front of the definition.  */\n@@ -35528,6 +35601,45 @@ rs6000_xcoff_encode_section_info (tree decl, rtx rtl, int first)\n #endif /* HAVE_AS_TLS */\n #endif /* TARGET_XCOFF */\n \n+void\n+rs6000_asm_weaken_decl (FILE *stream, tree decl,\n+\t\t\tconst char *name, const char *val)\n+{\n+  fputs (\"\\t.weak\\t\", stream);\n+  RS6000_OUTPUT_BASENAME (stream, name);\n+  if (decl && TREE_CODE (decl) == FUNCTION_DECL\n+      && DEFAULT_ABI == ABI_AIX && DOT_SYMBOLS)\n+    {\n+      if (TARGET_XCOFF)\t\t\t\t\t\t\n+\tfputs (\"[DS]\", stream);\n+#if HAVE_GAS_HIDDEN\n+      if (TARGET_XCOFF)\n+\tfputs (rs6000_xcoff_visibility (decl), stream);\n+#endif\n+      fputs (\"\\n\\t.weak\\t.\", stream);\n+      RS6000_OUTPUT_BASENAME (stream, name);\n+    }\n+#if HAVE_GAS_HIDDEN\n+  if (TARGET_XCOFF)\n+    fputs (rs6000_xcoff_visibility (decl), stream);\n+#endif\n+  fputc ('\\n', stream);\n+  if (val)\n+    {\n+      ASM_OUTPUT_DEF (stream, name, val);\n+      if (decl && TREE_CODE (decl) == FUNCTION_DECL\n+\t  && DEFAULT_ABI == ABI_AIX && DOT_SYMBOLS)\n+\t{\n+\t  fputs (\"\\t.set\\t.\", stream);\n+\t  RS6000_OUTPUT_BASENAME (stream, name);\n+\t  fputs (\",.\", stream);\n+\t  RS6000_OUTPUT_BASENAME (stream, val);\n+\t  fputc ('\\n', stream);\n+\t}\n+    }\n+}\n+\n+\n /* Return true if INSN should not be copied.  */\n \n static bool\n@@ -38699,7 +38811,7 @@ rs6000_code_end (void)\n   TREE_STATIC (decl) = 1;\n \n #if RS6000_WEAK\n-  if (USE_HIDDEN_LINKONCE)\n+  if (USE_HIDDEN_LINKONCE && !TARGET_XCOFF)\n     {\n       cgraph_node::create (decl)->set_comdat_group (DECL_ASSEMBLER_NAME (decl));\n       targetm.asm_out.unique_section (decl, 0);"}, {"sha": "1148212c7ff20f0febb21e34677d9b45ce1688ce", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -2282,35 +2282,8 @@ extern int toc_initialized;\n \n #if RS6000_WEAK\n /* Used in lieu of ASM_WEAKEN_LABEL.  */\n-#define\tASM_WEAKEN_DECL(FILE, DECL, NAME, VAL)\t\t\t \t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      fputs (\"\\t.weak\\t\", (FILE));\t\t\t\t\t\\\n-      RS6000_OUTPUT_BASENAME ((FILE), (NAME)); \t\t\t\t\\\n-      if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-\t  && DEFAULT_ABI == ABI_AIX && DOT_SYMBOLS)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  if (TARGET_XCOFF)\t\t\t\t\t\t\\\n-\t    fputs (\"[DS]\", (FILE));\t\t\t\t\t\\\n-\t  fputs (\"\\n\\t.weak\\t.\", (FILE));\t\t\t\t\\\n-\t  RS6000_OUTPUT_BASENAME ((FILE), (NAME)); \t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n-      if (VAL)\t\t\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  ASM_OUTPUT_DEF ((FILE), (NAME), (VAL));\t\t\t\\\n-\t  if ((DECL) && TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n-\t      && DEFAULT_ABI == ABI_AIX && DOT_SYMBOLS)\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      fputs (\"\\t.set\\t.\", (FILE));\t\t\t\t\\\n-\t      RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\t\\\n-\t      fputs (\",.\", (FILE));\t\t\t\t\t\\\n-\t      RS6000_OUTPUT_BASENAME ((FILE), (VAL));\t\t\t\\\n-\t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n+#define        ASM_WEAKEN_DECL(FILE, DECL, NAME, VAL) \\\n+  rs6000_asm_weaken_decl ((FILE), (DECL), (NAME), (VAL))\n #endif\n \n #if HAVE_GAS_WEAKREF"}, {"sha": "f63d28720ce56d9ac1de12eabc94d1650896b6ec", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -89,6 +89,7 @@\n #undef TARGET_DEBUG_UNWIND_INFO\n #define TARGET_DEBUG_UNWIND_INFO  rs6000_xcoff_debug_unwind_info\n #define TARGET_ASM_OUTPUT_ANCHOR  rs6000_xcoff_asm_output_anchor\n+#define TARGET_ASM_GLOBALIZE_DECL_NAME  rs6000_xcoff_asm_globalize_decl_name\n #define TARGET_ASM_GLOBALIZE_LABEL  rs6000_xcoff_asm_globalize_label\n #define TARGET_ASM_INIT_SECTIONS  rs6000_xcoff_asm_init_sections\n #define TARGET_ASM_RELOC_RW_MASK  rs6000_xcoff_reloc_rw_mask\n@@ -102,6 +103,7 @@\n #ifdef HAVE_AS_TLS\n #define TARGET_ENCODE_SECTION_INFO rs6000_xcoff_encode_section_info\n #endif\n+#define ASM_OUTPUT_ALIGNED_DECL_COMMON  rs6000_xcoff_asm_output_aligned_decl_common\n \n /* FP save and restore routines.  */\n #define\tSAVE_FP_PREFIX \"._savef\"\n@@ -217,18 +219,6 @@\n \n #define COMMON_ASM_OP \"\\t.comm \"\n \n-#define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\\\n-  do { fputs (COMMON_ASM_OP, (FILE));\t\t\t\\\n-       RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       if ((ALIGN) > 32)\t\t\t\t\\\n-\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE), \\\n-\t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT)); \\\n-       else if ((SIZE) > 4)\t\t\t\t\\\n-         fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",3\\n\", (SIZE)); \\\n-       else\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)); \\\n-  } while (0)\n-\n /* This says how to output an assembler line\n    to define a local common symbol.\n    The assembler in AIX 6.1 and later supports an alignment argument."}, {"sha": "0f04033bc1d674a6b737315d3126a002d9f8e293", "filename": "gcc/configure", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -22662,6 +22662,15 @@ fi\n # ld, we don't know its patchlevel version, so we set the baseline at 2.13\n # to be safe.\n # The gcc_GAS_CHECK_FEATURE call just sets a cache variable.\n+case \"${target}\" in\n+  *-*-aix*)\n+    conftest_s='\t.globl foobar,hidden'\n+    ;;\n+  *)\n+    conftest_s='\t.hidden foobar\n+foobar:'\n+    ;;\n+esac\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .hidden\" >&5\n $as_echo_n \"checking assembler for .hidden... \" >&6; }\n if test \"${gcc_cv_as_hidden+set}\" = set; then :\n@@ -22674,8 +22683,7 @@ else\n   then gcc_cv_as_hidden=yes\n fi\n   elif test x$gcc_cv_as != x; then\n-    $as_echo '\t.hidden foobar\n-foobar:' > conftest.s\n+    $as_echo \"$conftest_s\" > conftest.s\n     if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n   { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n   (eval $ac_try) 2>&5\n@@ -22809,6 +22817,9 @@ else\n     fi\n   else\n     case \"${target}\" in\n+      *-*-aix[789]*)\n+        gcc_cv_ld_hidden=yes\n+        ;;\n       *-*-darwin*)\n \t# Darwin ld has some visibility support.\n \tgcc_cv_ld_hidden=yes"}, {"sha": "2f9b859eafb5e4cbcecaea0885bfd85c883e95d8", "filename": "gcc/configure.ac", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -2537,10 +2537,17 @@ gcc_GAS_CHECK_FEATURE([.nsubspa comdat], gcc_cv_as_nsubspa_comdat,\n # ld, we don't know its patchlevel version, so we set the baseline at 2.13\n # to be safe.\n # The gcc_GAS_CHECK_FEATURE call just sets a cache variable.\n+case \"${target}\" in\n+  *-*-aix*)\n+    conftest_s='\t.globl foobar,hidden'\n+    ;;\n+  *)\n+    conftest_s='\t.hidden foobar\n+foobar:'\n+    ;;\n+esac\n gcc_GAS_CHECK_FEATURE([.hidden], gcc_cv_as_hidden,\n- [elf,2,13,0],,\n-[\t.hidden foobar\n-foobar:])\n+ [elf,2,13,0],, [$conftest_s])\n case \"${target}\" in\n   *-*-darwin*)\n     # Darwin as has some visibility support, though with a different syntax.\n@@ -2649,6 +2656,9 @@ else\n     fi\n   else\n     case \"${target}\" in\n+      *-*-aix[789]*)\n+        gcc_cv_ld_hidden=yes\n+        ;;\n       *-*-darwin*)\n \t# Darwin ld has some visibility support.\n \tgcc_cv_ld_hidden=yes"}, {"sha": "80f385b0e13195c5cce8ecaec9beb063701a86ec", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d91472f6e41144c7e7e79d737788eeb2b8d1859/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=8d91472f6e41144c7e7e79d737788eeb2b8d1859", "patch": "@@ -824,7 +824,7 @@ static GTY(()) hash_map<const char *, tree> *indirect_pool;\n \n static GTY(()) int dw2_const_labelno;\n \n-#if defined(HAVE_GAS_HIDDEN)\n+#if defined(HAVE_GAS_HIDDEN) && !defined(XCOFF_DEBUGGING_INFO)\n # define USE_LINKONCE_INDIRECT (SUPPORTS_ONE_ONLY)\n #else\n # define USE_LINKONCE_INDIRECT 0"}]}