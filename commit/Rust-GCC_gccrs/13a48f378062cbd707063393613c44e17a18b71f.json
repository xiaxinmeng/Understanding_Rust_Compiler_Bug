{"sha": "13a48f378062cbd707063393613c44e17a18b71f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNDhmMzc4MDYyY2JkNzA3MDYzMzkzNjEzYzQ0ZTE3YTE4YjcxZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-28T20:30:30Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-28T20:30:30Z"}, "message": "re PR other/63504 (Issues found by --enable-checking=valgrind)\n\n\tPR other/63504\n\t* dwarf2out.c (add_AT_wide, mem_loc_descriptor, loc_descriptor):\n\tUse ggc_alloc<wide_int> instead of ggc_cleared_alloc<wide_int>.\n\t(attr_checksum, attr_checksum_ordered, hash_loc_operands): Checksum\n\tonly get_full_len HOST_WIDE_INTs from get_val () array rather than\n\tall bits in *val_wide.\n\nFrom-SVN: r220216", "tree": {"sha": "83d3087435763de99771071c43b7c2521a50dc82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83d3087435763de99771071c43b7c2521a50dc82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a48f378062cbd707063393613c44e17a18b71f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a48f378062cbd707063393613c44e17a18b71f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a48f378062cbd707063393613c44e17a18b71f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a48f378062cbd707063393613c44e17a18b71f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "d1ce2aac2f892b05cef7652b4ff30d58c1fa0688", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a48f378062cbd707063393613c44e17a18b71f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a48f378062cbd707063393613c44e17a18b71f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13a48f378062cbd707063393613c44e17a18b71f", "patch": "@@ -1,3 +1,12 @@\n+2015-01-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR other/63504\n+\t* dwarf2out.c (add_AT_wide, mem_loc_descriptor, loc_descriptor):\n+\tUse ggc_alloc<wide_int> instead of ggc_cleared_alloc<wide_int>.\n+\t(attr_checksum, attr_checksum_ordered, hash_loc_operands): Checksum\n+\tonly get_full_len HOST_WIDE_INTs from get_val () array rather than\n+\tall bits in *val_wide.\n+\n 2015-01-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* varpool.c (tls_model_names): Fix names."}, {"sha": "d9b8c421898d63d7fd5be0fd84341e2cf4394be7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a48f378062cbd707063393613c44e17a18b71f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a48f378062cbd707063393613c44e17a18b71f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=13a48f378062cbd707063393613c44e17a18b71f", "patch": "@@ -3886,7 +3886,7 @@ add_AT_wide (dw_die_ref die, enum dwarf_attribute attr_kind,\n \n   attr.dw_attr = attr_kind;\n   attr.dw_attr_val.val_class = dw_val_class_wide_int;\n-  attr.dw_attr_val.v.val_wide = ggc_cleared_alloc<wide_int> ();\n+  attr.dw_attr_val.v.val_wide = ggc_alloc<wide_int> ();\n   *attr.dw_attr_val.v.val_wide = w;\n   add_dwarf_attr (die, &attr);\n }\n@@ -5726,7 +5726,9 @@ attr_checksum (dw_attr_ref at, struct md5_ctx *ctx, int *mark)\n       CHECKSUM (at->dw_attr_val.v.val_double);\n       break;\n     case dw_val_class_wide_int:\n-      CHECKSUM (*at->dw_attr_val.v.val_wide);\n+      CHECKSUM_BLOCK (at->dw_attr_val.v.val_wide->get_val (),\n+\t\t      get_full_len (*at->dw_attr_val.v.val_wide)\n+\t\t      * HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR);\n       break;\n     case dw_val_class_vec:\n       CHECKSUM_BLOCK (at->dw_attr_val.v.val_vec.array,\n@@ -6009,8 +6011,11 @@ attr_checksum_ordered (enum dwarf_tag tag, dw_attr_ref at,\n \n     case dw_val_class_wide_int:\n       CHECKSUM_ULEB128 (DW_FORM_block);\n-      CHECKSUM_ULEB128 (sizeof (*at->dw_attr_val.v.val_wide));\n-      CHECKSUM (*at->dw_attr_val.v.val_wide);\n+      CHECKSUM_ULEB128 (get_full_len (*at->dw_attr_val.v.val_wide)\n+\t\t\t* HOST_BITS_PER_WIDE_INT / BITS_PER_UNIT);\n+      CHECKSUM_BLOCK (at->dw_attr_val.v.val_wide->get_val (),\n+\t\t      get_full_len (*at->dw_attr_val.v.val_wide)\n+\t\t      * HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR);\n       break;\n \n     case dw_val_class_vec:\n@@ -13160,7 +13165,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  mem_loc_result->dw_loc_oprnd2.val_class\n \t    = dw_val_class_wide_int;\n-\t  mem_loc_result->dw_loc_oprnd2.v.val_wide = ggc_cleared_alloc<wide_int> ();\n+\t  mem_loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc<wide_int> ();\n \t  *mem_loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n \t}\n       break;\n@@ -13663,7 +13668,7 @@ loc_descriptor (rtx rtl, machine_mode mode,\n \t  loc_result = new_loc_descr (DW_OP_implicit_value,\n \t\t\t\t      GET_MODE_SIZE (mode), 0);\n \t  loc_result->dw_loc_oprnd2.val_class = dw_val_class_wide_int;\n-\t  loc_result->dw_loc_oprnd2.v.val_wide = ggc_cleared_alloc<wide_int> ();\n+\t  loc_result->dw_loc_oprnd2.v.val_wide = ggc_alloc<wide_int> ();\n \t  *loc_result->dw_loc_oprnd2.v.val_wide = std::make_pair (rtl, mode);\n \t}\n       break;\n@@ -24022,7 +24027,9 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n \t  hstate.add_object (val2->v.val_double.high);\n \t  break;\n \tcase dw_val_class_wide_int:\n-\t  hstate.add_object (*val2->v.val_wide);\n+\t  hstate.add (val2->v.val_wide->get_val (),\n+\t\t      get_full_len (*val2->v.val_wide)\n+\t\t      * HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR);\n \t  break;\n \tcase dw_val_class_addr:\t\n \t  inchash::add_rtx (val2->v.val_addr, hstate);\n@@ -24113,7 +24120,9 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n \t    hstate.add_object (val2->v.val_double.high);\n \t    break;\n \t  case dw_val_class_wide_int:\n-\t    hstate.add_object (*val2->v.val_wide);\n+\t    hstate.add (val2->v.val_wide->get_val (),\n+\t\t\tget_full_len (*val2->v.val_wide)\n+\t\t\t* HOST_BITS_PER_WIDE_INT / HOST_BITS_PER_CHAR);\n \t    break;\n \t  default:\n \t    gcc_unreachable ();"}]}