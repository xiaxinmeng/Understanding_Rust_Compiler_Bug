{"sha": "07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdhYjJiMWIyNzMzMGI0NDFlZmRmMzViZjMxZjFiMmM5OWRjNGViYw==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2012-04-27T10:34:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-27T10:34:13Z"}, "message": "re PR middle-end/27139 (Optimize double INT->FP->INT conversions with -ffast-math)\n\n2012-04-27  Marc Glisse  <marc.glisse@inria.fr>\n\n\tPR middle-end/27139\n\t* tree-ssa-forwprop.c (combine_conversions): Handle INT->FP->INT.\n\n\t* gcc.dg/tree-ssa/forwprop-18.c: New test.\n\nFrom-SVN: r186898", "tree": {"sha": "b703e1bca4342e3b953ea7bf89353df6f93a550f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b703e1bca4342e3b953ea7bf89353df6f93a550f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae9331288f1d89671a60000b28e04e182378eb14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae9331288f1d89671a60000b28e04e182378eb14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae9331288f1d89671a60000b28e04e182378eb14"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "76578cb6d4c640b8e26bc58c6f3a21619bb8c9b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "patch": "@@ -1,3 +1,8 @@\n+2012-04-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/27139\n+\t* tree-ssa-forwprop.c (combine_conversions): Handle INT->FP->INT.\n+\n 2012-04-25  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c/53130"}, {"sha": "2109f5d376ecac088c4541a14fce9f4fa5c9f5ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "patch": "@@ -1,3 +1,8 @@\n+2012-04-27  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\tPR middle-end/27139\n+\t* gcc.dg/tree-ssa/forwprop-18.c: New test.\n+\n 2012-04-27  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/51879"}, {"sha": "2c4d120e999133fe27cda90cee75ec7abcb24aed", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-18.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-18.c?ref=07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-forwprop1\" } */\n+\n+signed char f1(signed char n)\n+{\n+  return (long double)n;\n+}\n+unsigned long long f2(signed char n)\n+{\n+  return (long double)n;\n+}\n+\n+unsigned long long g1(unsigned long long n)\n+{\n+  return (float)n;\n+}\n+signed char g2(unsigned long long n)\n+{\n+  return (float)n;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\\\\\(float\\\\\\)\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-not \"\\\\\\(long double\\\\\\)\" \"forwprop1\" } } */\n+/* { dg-final { cleanup-tree-dump \"forwprop1\" } } */"}, {"sha": "4739de12501faec83128822e2fb48ee9dabed7d5", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=07ab2b1b27330b441efdf35bf31f1b2c99dc4ebc", "patch": "@@ -2405,6 +2405,7 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   gimple def_stmt;\n   tree op0, lhs;\n   enum tree_code code = gimple_assign_rhs_code (stmt);\n+  enum tree_code code2;\n \n   gcc_checking_assert (CONVERT_EXPR_CODE_P (code)\n \t\t       || code == FLOAT_EXPR\n@@ -2425,7 +2426,9 @@ combine_conversions (gimple_stmt_iterator *gsi)\n   if (!is_gimple_assign (def_stmt))\n     return 0;\n \n-  if (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n+  code2 = gimple_assign_rhs_code (def_stmt);\n+\n+  if (CONVERT_EXPR_CODE_P (code2) || code2 == FLOAT_EXPR)\n     {\n       tree defop0 = gimple_assign_rhs1 (def_stmt);\n       tree type = TREE_TYPE (lhs);\n@@ -2553,6 +2556,29 @@ combine_conversions (gimple_stmt_iterator *gsi)\n \t  update_stmt (gsi_stmt (*gsi));\n \t  return 1;\n \t}\n+\n+      /* If we are converting an integer to a floating-point that can\n+\t represent it exactly and back to an integer, we can skip the\n+\t floating-point conversion.  */\n+      if (inside_int && inter_float && final_int &&\n+          (unsigned) significand_size (TYPE_MODE (inter_type))\n+          >= inside_prec - !inside_unsignedp)\n+        {\n+\t  if (useless_type_conversion_p (type, inside_type))\n+\t    {\n+\t      gimple_assign_set_rhs1 (stmt, unshare_expr (defop0));\n+\t      gimple_assign_set_rhs_code (stmt, TREE_CODE (defop0));\n+\t      update_stmt (stmt);\n+\t      return remove_prop_source_from_use (op0) ? 2 : 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      gimple_assign_set_rhs1 (stmt, defop0);\n+\t      gimple_assign_set_rhs_code (stmt, CONVERT_EXPR);\n+\t      update_stmt (stmt);\n+\t      return remove_prop_source_from_use (op0) ? 2 : 1;\n+\t    }\n+\t}\n     }\n \n   return 0;"}]}