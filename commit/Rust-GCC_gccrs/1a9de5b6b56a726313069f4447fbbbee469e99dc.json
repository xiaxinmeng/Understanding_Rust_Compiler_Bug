{"sha": "1a9de5b6b56a726313069f4447fbbbee469e99dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE5ZGU1YjZiNTZhNzI2MzEzMDY5ZjQ0NDdmYmJiZWU0NjllOTlkYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-29T19:40:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-29T19:40:55Z"}, "message": "PR c++/80767 - unnecessary instantiation of generic lambda\n\n\t* call.c (convert_like_real): Call build_user_type_conversion_1 if\n\tcand is null.\n\t(add_conv_candidate): Build a ck_user conversion with no candidate.\n\nFrom-SVN: r251427", "tree": {"sha": "250e589eb24f60c22a8e42d2d51f5d1105992b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/250e589eb24f60c22a8e42d2d51f5d1105992b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a9de5b6b56a726313069f4447fbbbee469e99dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9de5b6b56a726313069f4447fbbbee469e99dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a9de5b6b56a726313069f4447fbbbee469e99dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a9de5b6b56a726313069f4447fbbbee469e99dc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "a60f2ad9679ef959220076b9f1a8e2e2509ff2d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a9de5b6b56a726313069f4447fbbbee469e99dc", "patch": "@@ -1,5 +1,10 @@\n 2017-08-29  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/80767 - unnecessary instantiation of generic lambda\n+\t* call.c (convert_like_real): Call build_user_type_conversion_1 if\n+\tcand is null.\n+\t(add_conv_candidate): Build a ck_user conversion with no candidate.\n+\n \tFix lambdas in template default argument of inherited ctor.\n \t* method.c (synthesized_method_base_walk): Replace an inherited\n \ttemplate with its specialization."}, {"sha": "f7f929780529d290fcd9e2de4a8f190e9ef5f93e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=1a9de5b6b56a726313069f4447fbbbee469e99dc", "patch": "@@ -2278,8 +2278,10 @@ add_conv_candidate (struct z_candidate **candidates, tree fn, tree obj,\n \n       if (i == 0)\n \t{\n-\t  t = implicit_conversion (totype, argtype, arg, /*c_cast_p=*/false,\n-\t\t\t\t   flags, complain);\n+\t  t = build_identity_conv (argtype, NULL_TREE);\n+\t  t = build_conv (ck_user, totype, t);\n+\t  /* Leave the 'cand' field null; we'll figure out the conversion in\n+\t     convert_like_real if this candidate is chosen.  */\n \t  convert_type = totype;\n \t}\n       else if (parmnode == void_list_node)\n@@ -6692,6 +6694,13 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n     case ck_user:\n       {\n \tstruct z_candidate *cand = convs->cand;\n+\n+\tif (cand == NULL)\n+\t  /* We chose the surrogate function from add_conv_candidate, now we\n+\t     actually need to build the conversion.  */\n+\t  cand = build_user_type_conversion_1 (totype, expr,\n+\t\t\t\t\t       LOOKUP_NO_CONVERSION, complain);\n+\n \ttree convfn = cand->fn;\n \n \t/* When converting from an init list we consider explicit"}, {"sha": "75ef586b542e366c72c81fafe493b74ed7ef3d9c", "filename": "gcc/testsuite/g++.dg/cpp1z/lambda-inherit1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-inherit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a9de5b6b56a726313069f4447fbbbee469e99dc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-inherit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Flambda-inherit1.C?ref=1a9de5b6b56a726313069f4447fbbbee469e99dc", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/80767\n+// { dg-options -std=c++17 }\n+\n+template <typename... Fs> \n+struct overloader : Fs...\n+{\n+    overloader(Fs... fs) \n+        : Fs(fs)...\n+    { } \n+\n+    using Fs::operator()...;\n+};\n+\n+struct a { void foo() { } };\n+struct b { void bar() { } };\n+struct c { void bar() { } };\n+\n+int main() {\n+    overloader{\n+        [](a x) { x.foo(); },\n+        [](auto x) { x.bar(); }\n+    }(a{});\n+}"}]}