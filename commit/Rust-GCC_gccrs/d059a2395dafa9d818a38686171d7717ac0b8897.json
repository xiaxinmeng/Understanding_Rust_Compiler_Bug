{"sha": "d059a2395dafa9d818a38686171d7717ac0b8897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1OWEyMzk1ZGFmYTlkODE4YTM4Njg2MTcxZDc3MTdhYzBiODg5Nw==", "commit": {"author": {"name": "Fred Fish", "email": "fnf@cygnus.com", "date": "1999-08-25T02:49:56Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "1999-08-25T02:49:56Z"}, "message": "Makefile.in (PREPROCESSOR_DEFINES): New macro.\n\n* Makefile.in (PREPROCESSOR_DEFINES): New macro.\n(protoize.o):  Use PREPROCESSOR_DEFINES and DRIVER_DEFINES.\n(unprotoize.o): Ditto.\n(test-protoize-simple): Don't define STD_PROTO_DIR.\n* protoize.c: Use PARAMS rather than PROTO.  Minor whitespace\nchanges to make 'test-protoize-simple' pass.\n(STD_PROTO_DIR): Remove define.\n(STANDARD_EXEC_PREFIX): Supply default define.\n(standard_exec_prefix): New variable, init to STANDARD_EXEC_PREFIX.\n(target_machine): New variable, init to DEFAULT_TARGET_MACHINE.\n(target_version): New variable, init to DEFAULT_TARGET_VERSION.\n(GET_ENV_PATH_LIST): New macro.\n(default_syscalls_dir): No longer initialized to STD_PROTO_DIR.\n(do_processing): Initialize default_syscalls_dir using new\nmacros.  Use it to initialize syscalls_absolute_filename.\n\nCo-Authored-By: Geoff Keating <geoffk@cygnus.com>\n\nFrom-SVN: r28832", "tree": {"sha": "cc3f78e16bd61883bd851c64c73ab8ccd716a823", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc3f78e16bd61883bd851c64c73ab8ccd716a823"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d059a2395dafa9d818a38686171d7717ac0b8897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d059a2395dafa9d818a38686171d7717ac0b8897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d059a2395dafa9d818a38686171d7717ac0b8897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d059a2395dafa9d818a38686171d7717ac0b8897/comments", "author": null, "committer": null, "parents": [{"sha": "d55d01bdf868c129dce0a703a9fae4d45c95c0bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d01bdf868c129dce0a703a9fae4d45c95c0bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55d01bdf868c129dce0a703a9fae4d45c95c0bc"}], "stats": {"total": 116, "additions": 75, "deletions": 41}, "files": [{"sha": "0ca088fa2f03231a79320dfdd06b70c808aeb780", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d059a2395dafa9d818a38686171d7717ac0b8897", "patch": "@@ -1,3 +1,22 @@\n+Wed Aug 25 12:46:22 1999  Fred Fish  <fnf@cygnus.com>\n+\t\t\t  Geoffrey Keating <geoffk@cygnus.com>\n+\n+\t* Makefile.in (PREPROCESSOR_DEFINES): New macro.\n+\t(protoize.o):  Use PREPROCESSOR_DEFINES and DRIVER_DEFINES.\n+\t(unprotoize.o): Ditto.\n+\t(test-protoize-simple): Don't define STD_PROTO_DIR.\n+\t* protoize.c: Use PARAMS rather than PROTO.  Minor whitespace\n+\tchanges to make 'test-protoize-simple' pass.\n+ \t(STD_PROTO_DIR): Remove define.\n+\t(STANDARD_EXEC_PREFIX): Supply default define.\n+\t(standard_exec_prefix): New variable, init to STANDARD_EXEC_PREFIX.\n+\t(target_machine): New variable, init to DEFAULT_TARGET_MACHINE.\n+\t(target_version): New variable, init to DEFAULT_TARGET_VERSION.\n+\t(GET_ENV_PATH_LIST): New macro.\n+\t(default_syscalls_dir): No longer initialized to STD_PROTO_DIR.\n+\t(do_processing): Initialize default_syscalls_dir using new\n+\tmacros.  Use it to initialize syscalls_absolute_filename.\n+\n Tue Aug 24 16:58:15 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* jump.c (jump_optimize_1): Do cmov opt on any single-set; force"}, {"sha": "bc424b13de128b6f5271b9c122aa7d71426232ff", "filename": "gcc/Makefile.in", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d059a2395dafa9d818a38686171d7717ac0b8897", "patch": "@@ -1949,16 +1949,18 @@ cexp.o: $(srcdir)/cexp.c $(CONFIG_H) system.h\n $(srcdir)/cexp.c: $(srcdir)/cexp.y\n \tcd $(srcdir); $(BISON) -o cexp.c cexp.y\n \n+PREPROCESSOR_DEFINES = \\\n+  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n+  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n+  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n+  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n+  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\"\n # We use $(libsubdir)/$(unlibsubdir) to match the\n # -iprefix argument which gcc will pass if GCC_EXEC_PREFIX is used.\n cccp.o: cccp.c $(CONFIG_H) intl.h pcp.h version.c config.status system.h \\\n            mbchar.h prefix.h Makefile.in\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n-\t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n-\t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n-\t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n+\t  $(PREPROCESSOR_DEFINES) \\\n \t  -c `echo $(srcdir)/cccp.c | sed 's,^\\./,,'`\n \n LIBCPP_OBJS =\tcpplib.o cpphash.o cppalloc.o cpperror.o cppexp.o cppfiles.o \\\n@@ -1988,11 +1990,7 @@ cppfiles.o: cppfiles.c $(CONFIG_H) cpplib.h intl.h system.h\n cppinit.o:  cppinit.c $(CONFIG_H) cpplib.h intl.h system.h \\\n \t\tcpphash.h prefix.h output.h Makefile\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n-\t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n-\t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n-\t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n+\t  $(PREPROCESSOR_DEFINES) \\\n \t  -c `echo $(srcdir)/cppinit.c | sed 's,^\\./,,'`\n \n # Note for the stamp targets, we run the program `true' instead of\n@@ -2011,23 +2009,13 @@ unprotoize$(exeext): unprotoize.o $(PROTO_OBJS) $(LIBDEPS)\n protoize.o: protoize.c $(srcdir)/../include/getopt.h $(CONFIG_H) system.h \\\n    Makefile\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-          -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n-\t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n-\t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n-\t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n-\t  -DSTD_PROTO_DIR=\\\"$(libsubdir)\\\" \\\n+\t  $(DRIVER_DEFINES) $(PREPROCESSOR_DEFINES) \\\n \t  $(srcdir)/protoize.c\n \n unprotoize.o: unprotoize.c protoize.c $(srcdir)/../include/getopt.h \\\n    $(CONFIG_H) system.h Makefile\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-          -DGCC_INCLUDE_DIR=\\\"$(libsubdir)/include\\\" \\\n-\t  -DGPLUSPLUS_INCLUDE_DIR=\\\"$(gcc_gxx_include_dir)\\\" \\\n-\t  -DCROSS_INCLUDE_DIR=\\\"$(gcc_tooldir)/sys-include\\\" \\\n-\t  -DTOOL_INCLUDE_DIR=\\\"$(gcc_tooldir)/include\\\" \\\n-\t  -DLOCAL_INCLUDE_DIR=\\\"$(includedir)\\\" \\\n-\t  -DSTD_PROTO_DIR=\\\"$(libsubdir)\\\" \\\n+\t  $(DRIVER_DEFINES) $(PREPROCESSOR_DEFINES) \\\n \t  $(srcdir)/unprotoize.c\n \n # This info describes the target machine, so compile with GCC just built.\n@@ -2045,22 +2033,26 @@ test-protoize-simple: ./protoize ./unprotoize $(GCC_PASSES)\n \tcp $(srcdir)/protoize.c tmp-proto.c\n \tchmod u+w tmp-proto.c\n \t./protoize -N -B ./ -x getopt.h -c \"-B./ -Wall -Wwrite-strings \\\n-\t  $(CFLAGS) $(INCLUDES) \\\n+\t  $(GCC_CFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=0 \\\n \t  -DGPLUSPLUS_INCLUDE_DIR=0 \\\n \t  -DCROSS_INCLUDE_DIR=0 \\\n \t  -DTOOL_INCLUDE_DIR=0 \\\n-\t  -DSTD_PROTO_DIR=0\" tmp-proto.c\n+\t  -DSTANDARD_EXEC_PREFIX=0 \\\n+\t  -DDEFAULT_TARGET_MACHINE=0 \\\n+\t  -DDEFAULT_TARGET_VERSION=0\" tmp-proto.c\n \t@echo '**********' Expect 400 lines of differences.\n \t-diff $(srcdir)/protoize.c tmp-proto.c > tmp-proto.diff\n \t-wc -l tmp-proto.diff\n \t./unprotoize -N -x getopt.h -c \"-B./ -Wall -Wwrite-strings \\\n-\t  $(CFLAGS) $(INCLUDES) \\\n+\t  $(GCC_CFLAGS) $(INCLUDES) \\\n \t  -DGCC_INCLUDE_DIR=0 \\\n \t  -DGPLUSPLUS_INCLUDE_DIR=0 \\\n \t  -DCROSS_INCLUDE_DIR=0 \\\n \t  -DTOOL_INCLUDE_DIR=0 \\\n-\t  -DSTD_PROTO_DIR=0\" tmp-proto.c\n+\t  -DSTANDARD_EXEC_PREFIX=0 \\\n+\t  -DDEFAULT_TARGET_MACHINE=0 \\\n+\t  -DDEFAULT_TARGET_VERSION=0\" tmp-proto.c\n \t@echo Expect zero differences.\n \tdiff $(srcdir)/protoize.c tmp-proto.c | cat\n \t-rm -f tmp-proto.[cs] tmp-proto$(objext)"}, {"sha": "73a573ad5d44ff81639219525d68f5e60bbc81e1", "filename": "gcc/protoize.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d059a2395dafa9d818a38686171d7717ac0b8897/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=d059a2395dafa9d818a38686171d7717ac0b8897", "patch": "@@ -111,9 +111,9 @@ extern char *version_string;\n \n extern char *getpwd ();\n \n-static void usage PROTO ((void)) ATTRIBUTE_NORETURN;\n-static void aux_info_corrupted PROTO ((void)) ATTRIBUTE_NORETURN;\n-static void declare_source_confusing PROTO ((const char *)) ATTRIBUTE_NORETURN;\n+static void usage PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void aux_info_corrupted PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static void declare_source_confusing PARAMS ((const char *)) ATTRIBUTE_NORETURN;\n \n /* Aliases for pointers to void.\n    These were made to facilitate compilation with old brain-dead DEC C\n@@ -165,9 +165,21 @@ extern size_t   strlen ()\n \n /* Define a default place to find the SYSCALLS.X file.  */\n \n-#ifndef STD_PROTO_DIR\n-#define STD_PROTO_DIR \"/usr/local/lib\"\n-#endif /* !defined (STD_PROTO_DIR) */\n+#ifndef UNPROTOIZE\n+\n+#ifndef STANDARD_EXEC_PREFIX\n+#define STANDARD_EXEC_PREFIX \"/usr/local/lib/gcc-lib/\"\n+#endif /* !defined STANDARD_EXEC_PREFIX */\n+\n+static char *standard_exec_prefix = STANDARD_EXEC_PREFIX;\n+static char *target_machine = DEFAULT_TARGET_MACHINE;\n+static char *target_version = DEFAULT_TARGET_VERSION;\n+\n+#ifndef GET_ENV_PATH_LIST\n+#define GET_ENV_PATH_LIST(VAR,NAME)\tdo { (VAR) = getenv (NAME); } while (0)\n+#endif\n+\n+#endif /* !defined (UNPROTOIZE) */\n \n /* Suffix of aux_info files.  */\n \n@@ -187,7 +199,7 @@ static const char syscalls_filename[] = \"SYSCALLS.c\";\n \n /* Default place to find the above file.  */\n \n-static const char * const default_syscalls_dir = STD_PROTO_DIR;\n+static char * default_syscalls_dir;\n \n /* Variable to hold the complete absolutized filename of the SYSCALLS.c.X\n    file.  */\n@@ -569,10 +581,10 @@ static char * saved_repl_write_ptr;\n static const char *shortpath ();\n \f\n /* Translate and output an error message.  */\n-static void notice\t\t\tPVPROTO ((const char *, ...))\n+static void notice\t\t\tPARAMS ((const char *, ...))\n   ATTRIBUTE_PRINTF_1;\n static void\n-notice VPROTO ((const char *msgid, ...))\n+notice VPARAMS ((const char *msgid, ...))\n {\n #ifndef ANSI_PROTOTYPES\n   const char *msgid;\n@@ -592,7 +604,7 @@ notice VPROTO ((const char *msgid, ...))\n \f\n char *\n xstrerror(e)\n-  int e;\n+     int e;\n {\n \n #ifdef HAVE_STRERROR\n@@ -614,7 +626,7 @@ xstrerror(e)\n \n pointer_type\n xmalloc (byte_count)\n-  size_t byte_count;\n+     size_t byte_count;\n {\n   register pointer_type rv = (pointer_type) malloc (byte_count);\n   if (rv == NULL)\n@@ -4458,16 +4470,27 @@ do_processing ()\n   if (nondefault_syscalls_dir)\n     {\n       syscalls_absolute_filename\n-        = (char *) xmalloc (strlen (nondefault_syscalls_dir)\n-                            + sizeof (syscalls_filename) + 1);\n+        = (char *) xmalloc (strlen (nondefault_syscalls_dir) + 1\n+                            + sizeof (syscalls_filename));\n       strcpy (syscalls_absolute_filename, nondefault_syscalls_dir);\n     }\n   else\n     {\n+      GET_ENV_PATH_LIST (default_syscalls_dir, \"GCC_EXEC_PREFIX\");\n+      if (!default_syscalls_dir)\n+\t{\n+\t  default_syscalls_dir = standard_exec_prefix;\n+\t}\n       syscalls_absolute_filename\n-        = (char *) xmalloc (strlen (default_syscalls_dir)\n-                            + sizeof (syscalls_filename) + 1);\n+        = (char *) xmalloc (strlen (default_syscalls_dir) + 0\n+\t\t\t    + strlen (target_machine) + 1\n+\t\t\t    + strlen (target_version) + 1\n+                            + sizeof (syscalls_filename));\n       strcpy (syscalls_absolute_filename, default_syscalls_dir);\n+      strcat (syscalls_absolute_filename, target_machine);\n+      strcat (syscalls_absolute_filename, \"/\");\n+      strcat (syscalls_absolute_filename, target_version);\n+      strcat (syscalls_absolute_filename, \"/\");\n     }\n \n   syscalls_len = strlen (syscalls_absolute_filename);"}]}