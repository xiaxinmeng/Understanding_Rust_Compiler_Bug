{"sha": "971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcxY2ZjNmYxMDlmMWM0MmVkYjdhMTNkM2YyZmU1YjEzMzEzMmU0Yg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@nerim.net", "date": "2002-08-02T23:08:40Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2002-08-02T23:08:40Z"}, "message": "valarray_array.h (_DEFINE_ARRAY_FUNCTION): Use our object function surrogates.\n\n\t* include/bits/valarray_array.h (_DEFINE_ARRAY_FUNCTION): Use our\n\tobject function surrogates.\n\t* include/bits/valarray_meta.h (__shift_left): Fix typo.\n\t(_BinFunClos<>): Remove.\n\t(_BinFunBase<>): Likewise.\n\t(_BinFunBase1<>):Likewise.\n\t(_BinFunBase2<>): Likewise.\n\t(_DEFINE_EXPR_RELATIONAL_OPERATOR): Likewise.\n\t(_DEFINE_EXPR_UNARY_OPERATOR): Adjust definition.\n\t(_DEFINE_EXPR_BINARY_OPERATOR): Likewise.\n\t(_DEFINE_EXPR_BINARY_FUNCTION): Likewise.\n\t* include/std/std_valarray.h: Dont #include <functional> anymore.\n\t(_Bitwise_or<>, _Bitwise_and<>, _Bitwise_xor<>, _Shift_left<>,\n\t_Shift_right<>): Remove.\n\t(_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT): Adjust instantiation.\n\t(_DEFINE_BINARY_OPERATOR): Tweak definition.\n\t(_DEFINE_LOGICAL_OPERATOR): Remove.\n\t* testsuite/26_numerics/valarray_name_lookup.C (main): Add more tests.\n\nFrom-SVN: r56001", "tree": {"sha": "6fd9aaf193328fd4fed9b61f4779cb3857875853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fd9aaf193328fd4fed9b61f4779cb3857875853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/comments", "author": null, "committer": null, "parents": [{"sha": "55765de4413d1aea5bc847924b5cd2430f4974cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55765de4413d1aea5bc847924b5cd2430f4974cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55765de4413d1aea5bc847924b5cd2430f4974cb"}], "stats": {"total": 1136, "additions": 451, "deletions": 685}, "files": [{"sha": "31bbe4aa7329a7eb135e56e7574fa01f7a867696", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "patch": "@@ -1,3 +1,24 @@\n+2002-08-03  Gabriel Dos Reis  <gdr@nerim.net>\n+\n+\t* include/bits/valarray_array.h (_DEFINE_ARRAY_FUNCTION): Use our\n+\tobject function surrogates.\n+\t* include/bits/valarray_meta.h (__shift_left): Fix typo.\n+\t(_BinFunClos<>): Remove.\n+\t(_BinFunBase<>): Likewise.\n+\t(_BinFunBase1<>):Likewise.\n+\t(_BinFunBase2<>): Likewise.\n+\t(_DEFINE_EXPR_RELATIONAL_OPERATOR): Likewise.\n+\t(_DEFINE_EXPR_UNARY_OPERATOR): Adjust definition.\n+\t(_DEFINE_EXPR_BINARY_OPERATOR): Likewise.\n+\t(_DEFINE_EXPR_BINARY_FUNCTION): Likewise.\n+\t* include/std/std_valarray.h: Dont #include <functional> anymore.\n+\t(_Bitwise_or<>, _Bitwise_and<>, _Bitwise_xor<>, _Shift_left<>,\n+\t_Shift_right<>): Remove.\n+\t(_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT): Adjust instantiation.\n+\t(_DEFINE_BINARY_OPERATOR): Tweak definition.\n+\t(_DEFINE_LOGICAL_OPERATOR): Remove.\n+\t* testsuite/26_numerics/valarray_name_lookup.C (main): Add more tests.\n+\n 2002-08-02  Gabriel Dos Reis  <gdr@nerim.net>\n \n \t* include/bits/valarray_meta.h (_UnFunBase<>): Remove."}, {"sha": "c880478aa417406e001b21768497ebf011817aba", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "patch": "@@ -603,16 +603,16 @@ _Array_augmented_##_Name (_Array<_Tp> __a, _Array<bool> __m,\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-   _DEFINE_ARRAY_FUNCTION(+, plus)\n-   _DEFINE_ARRAY_FUNCTION(-, minus)\n-   _DEFINE_ARRAY_FUNCTION(*, multiplies)\n-   _DEFINE_ARRAY_FUNCTION(/, divides)\n-   _DEFINE_ARRAY_FUNCTION(%, modulus)\n-   _DEFINE_ARRAY_FUNCTION(^, xor)\n-   _DEFINE_ARRAY_FUNCTION(|, or)\n-   _DEFINE_ARRAY_FUNCTION(&, and)    \n-   _DEFINE_ARRAY_FUNCTION(<<, shift_left)\n-   _DEFINE_ARRAY_FUNCTION(>>, shift_right)\n+   _DEFINE_ARRAY_FUNCTION(+, __plus)\n+   _DEFINE_ARRAY_FUNCTION(-, __minus)\n+   _DEFINE_ARRAY_FUNCTION(*, __multiplies)\n+   _DEFINE_ARRAY_FUNCTION(/, __divides)\n+   _DEFINE_ARRAY_FUNCTION(%, __modulus)\n+   _DEFINE_ARRAY_FUNCTION(^, __bitwise_xor)\n+   _DEFINE_ARRAY_FUNCTION(|, __bitwise_or)\n+   _DEFINE_ARRAY_FUNCTION(&, __bitwise_and)    \n+   _DEFINE_ARRAY_FUNCTION(<<, __shift_left)\n+   _DEFINE_ARRAY_FUNCTION(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_FUNCTION    \n "}, {"sha": "8b3e74fedc3bd21a883754418e9bbbbe2becf5fb", "filename": "libstdc++-v3/include/bits/valarray_meta.h", "status": "modified", "additions": 322, "deletions": 541, "changes": 863, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h?ref=971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "patch": "@@ -50,7 +50,6 @@ namespace std\n   // template nesting due to _Expr<>\n   //\n   \n-  \n   // This class is NOT defined. It doesn't need to.\n   template<typename _Tp1, typename _Tp2> class _Constant;\n \n@@ -224,7 +223,7 @@ namespace std\n       { return __x | __y; }\n   };\n \n-  struct __shift__left\n+  struct __shift_left\n   {\n     template<typename _Tp>\n       _Tp operator()(const _Tp& __x, const _Tp& __y) const\n@@ -380,222 +379,73 @@ namespace std\n       typedef bool result_type;\n     };\n \n-    //\n-    // Binary function application closure.\n-    //\n-    template<template<class, class> class _Meta1,\n-        template<class, class> class Meta2,\n-        class _Dom1, class _Dom2> class _BinFunClos;\n-    \n-    template<class _Dom1, class _Dom2> class _BinFunBase {\n-    public:\n-        typedef typename _Dom1::value_type value_type;\n-        typedef value_type _Vt;\n-\n-        _BinFunBase (const _Dom1& __e1, const _Dom2& __e2,\n-                      _Vt __f (_Vt, _Vt))\n-                : _M_expr1 (__e1), _M_expr2 (__e2), _M_func (__f) {}\n-\n-        value_type operator[] (size_t __i) const\n-        { return _M_func (_M_expr1[__i], _M_expr2[__i]); }\n-        size_t size () const { return _M_expr1.size (); }\n-\n-    private:\n-        const _Dom1& _M_expr1;\n-        const _Dom2& _M_expr2;\n-        _Vt (*_M_func)(_Vt, _Vt);\n-    };\n-\n-    template<class _Dom> class _BinFunBase1 {\n-    public:\n-        typedef typename _Dom::value_type value_type ;\n-        typedef value_type _Vt;\n-\n-        _BinFunBase1 (const _Vt& __c, const _Dom& __e, _Vt __f(_Vt, _Vt))\n-                : _M_expr1 (__c), _M_expr2 (__e), _M_func (__f) {}\n-\n-        value_type operator[] (size_t __i) const\n-        { return _M_func (_M_expr1, _M_expr2[__i]); }\n-        size_t size () const { return _M_expr2.size (); }\n-\n-    private:\n-        const _Vt& _M_expr1;\n-        const _Dom& _M_expr2;\n-        _Vt (*_M_func)(_Vt, _Vt);\n-    };\n-\n-    template<class _Dom> class _BinFunBase2 {\n-    public:\n-        typedef typename _Dom::value_type value_type;\n-        typedef value_type _Vt;\n-\n-        _BinFunBase2 (const _Dom& __e, const _Vt& __c, _Vt __f(_Vt, _Vt))\n-                : _M_expr1 (__e), _M_expr2 (__c), _M_func (__f) {}\n-\n-        value_type operator[] (size_t __i) const\n-        { return _M_func (_M_expr1[__i], _M_expr2); }\n-        size_t size () const { return _M_expr1.size (); }\n-\n-    private:\n-        const _Dom& _M_expr1;\n-        const _Vt& _M_expr2;\n-        _Vt (*_M_func)(_Vt, _Vt);\n-    };\n-\n-    template<class _Dom1, class _Dom2>\n-    struct _BinFunClos<_Expr,_Expr,_Dom1,_Dom2> : _BinFunBase<_Dom1,_Dom2> {\n-        typedef _BinFunBase<_Dom1,_Dom2> _Base;\n-        typedef typename _Base::value_type value_type;\n-        typedef value_type _Tp;\n-\n-        _BinFunClos (const _Dom1& __e1, const _Dom2& __e2,\n-                     _Tp __f(_Tp, _Tp))\n-                : _Base (__e1, __e2, __f) {}\n-    };\n-\n-    template<typename _Tp>\n-    struct _BinFunClos<_ValArray,_ValArray,_Tp,_Tp>\n-        : _BinFunBase<valarray<_Tp>, valarray<_Tp> > {\n-        typedef _BinFunBase<valarray<_Tp>, valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n-\n-        _BinFunClos (const valarray<_Tp>& __v, const valarray<_Tp>& __w,\n-                     _Tp __f(_Tp, _Tp))\n-                : _Base (__v, __w, __f) {}\n-    };\n-    \n-    template<class _Dom>\n-    struct _BinFunClos<_Expr,_ValArray,_Dom,typename _Dom::value_type>\n-        : _BinFunBase<_Dom,valarray<typename _Dom::value_type> > {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinFunBase<_Dom,valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n-\n-        _BinFunClos (const _Dom& __e, const valarray<_Tp>& __v,\n-                     _Tp __f(_Tp, _Tp))\n-                : _Base (__e, __v, __f) {}\n-    };\n-\n-    template<class _Dom>\n-    struct _BinFunClos<_ValArray,_Expr,typename _Dom::value_type,_Dom>\n-        : _BinFunBase<valarray<typename _Dom::value_type>,_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinFunBase<_Dom,valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n-\n-        _BinFunClos (const valarray<_Tp>& __v, const _Dom& __e,\n-                     _Tp __f(_Tp, _Tp))\n-                : _Base (__v, __e, __f) {}\n-    };\n-\n-    template<class _Dom>\n-    struct _BinFunClos<_Expr,_Constant,_Dom,typename _Dom::value_type>\n-        : _BinFunBase2<_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _Tp value_type;\n-        typedef _BinFunBase2<_Dom> _Base;\n-\n-        _BinFunClos (const _Dom& __e, const _Tp& __t, _Tp __f (_Tp, _Tp))\n-                : _Base (__e, __t, __f) {}\n-    };\n-\n-    template<class _Dom>\n-    struct _BinFunClos<_Constant,_Expr,_Dom,typename _Dom::value_type>\n-        : _BinFunBase1<_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _Tp value_type;\n-        typedef _BinFunBase1<_Dom> _Base;\n-\n-        _BinFunClos (const _Tp& __t, const _Dom& __e, _Tp __f (_Tp, _Tp))\n-                : _Base (__t, __e, __f) {}\n-    };\n-\n-    template<typename _Tp>\n-    struct _BinFunClos<_ValArray,_Constant,_Tp,_Tp>\n-        : _BinFunBase2<valarray<_Tp> > {\n-        typedef _BinFunBase2<valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n-\n-        _BinFunClos (const valarray<_Tp>& __v, const _Tp& __t,\n-                     _Tp __f(_Tp, _Tp))\n-                : _Base (__v, __t, __f) {}\n-    };\n-\n-    template<typename _Tp>\n-    struct _BinFunClos<_Constant,_ValArray,_Tp,_Tp>\n-        : _BinFunBase1<valarray<_Tp> > {\n-        typedef _BinFunBase1<valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n-\n-        _BinFunClos (const _Tp& __t, const valarray<_Tp>& __v,\n-                     _Tp __f (_Tp, _Tp))\n-                : _Base (__t, __v, __f) {}\n-    };\n-\n     //\n     // Apply function taking a value/const reference closure\n     //\n \n-    template<typename _Dom, typename _Arg> class _FunBase {\n+  template<typename _Dom, typename _Arg>\n+    class _FunBase \n+    {\n     public:\n-        typedef typename _Dom::value_type value_type;\n+      typedef typename _Dom::value_type value_type;\n+      \n+      _FunBase(const _Dom& __e, value_type __f(_Arg))\n+\t: _M_expr(__e), _M_func(__f) {}\n \n-        _FunBase (const _Dom& __e, value_type __f(_Arg))\n-                : _M_expr (__e), _M_func (__f) {}\n+      value_type operator[](size_t __i) const\n+      { return _M_func (_M_expr[__i]); }\n \n-        value_type operator[] (size_t __i) const\n-        { return _M_func (_M_expr[__i]); }\n-        size_t size() const { return _M_expr.size ();}\n+      size_t size() const { return _M_expr.size ();}\n \n     private:\n         const _Dom& _M_expr;\n         value_type (*_M_func)(_Arg);\n     };\n \n-    template<class _Dom>\n-    struct _ValFunClos<_Expr,_Dom>\n-        : _FunBase<_Dom, typename _Dom::value_type> {\n-        typedef _FunBase<_Dom, typename _Dom::value_type> _Base;\n-        typedef typename _Base::value_type value_type;\n-        typedef value_type _Tp;\n+  template<class _Dom>\n+    struct _ValFunClos<_Expr,_Dom> : _FunBase<_Dom, typename _Dom::value_type> \n+    {\n+      typedef _FunBase<_Dom, typename _Dom::value_type> _Base;\n+      typedef typename _Base::value_type value_type;\n+      typedef value_type _Tp;\n     \n-        _ValFunClos (const _Dom& __e, _Tp __f (_Tp)) : _Base (__e, __f) {}\n+      _ValFunClos(const _Dom& __e, _Tp __f(_Tp)) : _Base(__e, __f) {}\n     };\n \n-    template<typename _Tp>\n-    struct _ValFunClos<_ValArray,_Tp>\n-        : _FunBase<valarray<_Tp>, _Tp> {\n-        typedef _FunBase<valarray<_Tp>, _Tp> _Base;\n-        typedef _Tp value_type;\n-\n-        _ValFunClos (const valarray<_Tp>& __v, _Tp __f(_Tp))\n-                : _Base (__v, __f) {}\n+  template<typename _Tp>\n+    struct _ValFunClos<_ValArray,_Tp> : _FunBase<valarray<_Tp>, _Tp>\n+    {\n+      typedef _FunBase<valarray<_Tp>, _Tp> _Base;\n+      typedef _Tp value_type;\n+      \n+      _ValFunClos(const valarray<_Tp>& __v, _Tp __f(_Tp)) : _Base(__v, __f) {}\n     };\n \n-    template<class _Dom>\n+  template<class _Dom>\n     struct _RefFunClos<_Expr,_Dom> :\n-        _FunBase<_Dom, const typename _Dom::value_type&> {\n-        typedef _FunBase<_Dom, const typename _Dom::value_type&> _Base;\n-        typedef typename _Base::value_type value_type;\n-        typedef value_type _Tp;\n-\n-        _RefFunClos (const _Dom& __e, _Tp __f (const _Tp&))\n-                : _Base (__e, __f) {}\n+        _FunBase<_Dom, const typename _Dom::value_type&> \n+    {\n+      typedef _FunBase<_Dom, const typename _Dom::value_type&> _Base;\n+      typedef typename _Base::value_type value_type;\n+      typedef value_type _Tp;\n+      \n+      _RefFunClos(const _Dom& __e, _Tp __f(const _Tp&))\n+\t: _Base(__e, __f) {}\n     };\n \n-    template<typename _Tp>\n-    struct _RefFunClos<_ValArray,_Tp>\n-        : _FunBase<valarray<_Tp>, const _Tp&> {\n-        typedef _FunBase<valarray<_Tp>, const _Tp&> _Base;\n-        typedef _Tp value_type;\n-        \n-        _RefFunClos (const valarray<_Tp>& __v, _Tp __f(const _Tp&))\n-                : _Base (__v, __f) {}\n+  template<typename _Tp>\n+    struct _RefFunClos<_ValArray,_Tp> : _FunBase<valarray<_Tp>, const _Tp&> \n+    {\n+      typedef _FunBase<valarray<_Tp>, const _Tp&> _Base;\n+      typedef _Tp value_type;\n+      \n+      _RefFunClos(const valarray<_Tp>& __v, _Tp __f(const _Tp&))\n+\t: _Base(__v, __f) {}\n     };\n     \n-    //\n-    // Unary expression closure.\n-    //\n+  //\n+  // Unary expression closure.\n+  //\n \n   template<class _Oper, class _Arg>\n     class _UnBase\n@@ -636,160 +486,156 @@ namespace std\n     };\n \n \n-    //\n-    // Binary expression closure.\n-    //\n+  //\n+  // Binary expression closure.\n+  //\n \n-    template<template<class> class _Oper,\n-        typename _FirstArg, typename _SecondArg>\n-    class _BinBase {\n+  template<class _Oper, class _FirstArg, class _SecondArg>\n+    class _BinBase \n+    {\n     public:\n-        typedef _Oper<typename _FirstArg::value_type> _Op;\n-        typedef typename _Op::result_type value_type;\n+        typedef typename _FirstArg::value_type _Vt;\n+        typedef typename __fun<_Oper, _Vt>::result_type value_type;\n \n-        _BinBase (const _FirstArg& __e1, const _SecondArg& __e2)\n-                : _M_expr1 (__e1), _M_expr2 (__e2) {}\n-        value_type operator[] (size_t) const;\n-        size_t size () const { return _M_expr1.size (); }\n+      _BinBase(const _FirstArg& __e1, const _SecondArg& __e2)\n+\t: _M_expr1(__e1), _M_expr2(__e2) {}\n+      \n+      value_type operator[](size_t __i) const\n+      { return _Oper()(_M_expr1[__i], _M_expr2[__i]); }\n+\n+      size_t size() const { return _M_expr1.size(); }\n         \n     private:\n-        const _FirstArg& _M_expr1;\n-        const _SecondArg& _M_expr2;\n+      const _FirstArg& _M_expr1;\n+      const _SecondArg& _M_expr2;\n     };\n \n-    template<template<class> class _Oper,\n-        typename _FirstArg, typename _SecondArg>\n-    inline typename _BinBase<_Oper,_FirstArg,_SecondArg>::value_type\n-    _BinBase<_Oper,_FirstArg,_SecondArg>::operator[] (size_t __i) const\n-    { return _Op() (_M_expr1[__i], _M_expr2[__i]); }\n-\n \n-    template<template<class> class _Oper, class _Clos>\n-    class _BinBase2 {\n+  template<class _Oper, class _Clos>\n+    class _BinBase2\n+    {\n     public:\n-        typedef typename _Clos::value_type _Vt;\n-        typedef _Oper<_Vt> _Op;\n-        typedef typename _Op::result_type value_type;\n+      typedef typename _Clos::value_type _Vt;\n+      typedef typename __fun<_Oper, _Vt>::result_type value_type;\n \n-        _BinBase2 (const _Clos& __e, const _Vt& __t)\n-                : _M_expr1 (__e), _M_expr2 (__t) {}\n-        value_type operator[] (size_t) const;\n-        size_t size () const { return _M_expr1.size (); }\n+      _BinBase2(const _Clos& __e, const _Vt& __t)\n+\t: _M_expr1(__e), _M_expr2(__t) {}\n \n-    private:\n-        const _Clos& _M_expr1;\n-        const _Vt& _M_expr2;\n-    };\n+      value_type operator[](size_t __i) const\n+      { return _Oper()(_M_expr1[__i], _M_expr2); }\n \n-    template<template<class> class _Oper, class _Clos>\n-    inline typename _BinBase2<_Oper,_Clos>::value_type\n-    _BinBase2<_Oper,_Clos>::operator[] (size_t __i) const\n-    { return _Op() (_M_expr1[__i], _M_expr2); }\n+      size_t size() const { return _M_expr1.size(); }\n \n+    private:\n+      const _Clos& _M_expr1;\n+      const _Vt& _M_expr2;\n+    };\n \n-    template<template<class> class _Oper, class _Clos>\n-    class _BinBase1 {\n+  template<class _Oper, class _Clos>\n+    class _BinBase1\n+    {\n     public:\n-        typedef typename _Clos::value_type _Vt;\n-        typedef _Oper<_Vt> _Op;\n-        typedef typename _Op::result_type value_type;\n+      typedef typename _Clos::value_type _Vt;\n+      typedef typename __fun<_Oper, _Vt>::result_type value_type;\n+\n+      _BinBase1(const _Vt& __t, const _Clos& __e)\n+\t: _M_expr1(__t), _M_expr2(__e) {}\n \n-        _BinBase1 (const _Vt& __t, const _Clos& __e)\n-                : _M_expr1 (__t), _M_expr2 (__e) {}\n-        value_type operator[] (size_t) const;\n-        size_t size () const { return _M_expr2.size (); }\n+      value_type operator[](size_t __i) const\n+      { return _Oper()(_M_expr1, _M_expr2[__i]); }\n+      \n+      size_t size() const { return _M_expr2.size(); }\n \n     private:\n-        const _Vt& _M_expr1;\n-        const _Clos& _M_expr2;\n+      const _Vt& _M_expr1;\n+      const _Clos& _M_expr2;\n     };\n-\n-    template<template<class> class _Oper, class _Clos>\n-    inline typename\n-    _BinBase1<_Oper,_Clos>::value_type\n-    _BinBase1<_Oper,_Clos>:: operator[] (size_t __i) const\n-    { return _Op() (_M_expr1, _M_expr2[__i]); }\n-\n     \n-    template<template<class> class _Oper, class _Dom1, class _Dom2>\n-    struct  _BinClos<_Oper, _Expr, _Expr, _Dom1, _Dom2>\n-        : _BinBase<_Oper,_Dom1,_Dom2> {\n-        typedef _BinBase<_Oper,_Dom1,_Dom2> _Base;\n-        typedef typename _Base::value_type value_type;\n+  template<class _Oper, class _Dom1, class _Dom2>\n+    struct _BinClos<_Oper, _Expr, _Expr, _Dom1, _Dom2>\n+        : _BinBase<_Oper,_Dom1,_Dom2> \n+    {\n+      typedef _BinBase<_Oper,_Dom1,_Dom2> _Base;\n+      typedef typename _Base::value_type value_type;\n         \n-        _BinClos(const _Dom1& __e1, const _Dom2& __e2) : _Base(__e1, __e2) {}\n+      _BinClos(const _Dom1& __e1, const _Dom2& __e2) : _Base(__e1, __e2) {}\n     };\n \n-    template<template<class> class _Oper, typename _Tp>\n+  template<class _Oper, typename _Tp>\n     struct _BinClos<_Oper,_ValArray,_ValArray,_Tp,_Tp>\n-        : _BinBase<_Oper,valarray<_Tp>,valarray<_Tp> > {\n-        typedef _BinBase<_Oper,valarray<_Tp>,valarray<_Tp> > _Base;\n-        typedef _Tp value_type;\n+      : _BinBase<_Oper,valarray<_Tp>,valarray<_Tp> > \n+    {\n+      typedef _BinBase<_Oper,valarray<_Tp>,valarray<_Tp> > _Base;\n+      typedef _Tp value_type;\n \n-        _BinClos (const valarray<_Tp>& __v, const valarray<_Tp>& __w)\n-                : _Base (__v, __w) {}\n+      _BinClos(const valarray<_Tp>& __v, const valarray<_Tp>& __w)\n+\t: _Base(__v, __w) {}\n     };\n \n-    template<template<class> class _Oper, class _Dom>\n-    struct  _BinClos<_Oper,_Expr,_ValArray,_Dom,typename _Dom::value_type>\n-        : _BinBase<_Oper,_Dom,valarray<typename _Dom::value_type> > {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinBase<_Oper,_Dom,valarray<_Tp> > _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos(const _Dom& __e1, const valarray<_Tp>& __e2)\n-                : _Base (__e1, __e2) {}\n+  template<class _Oper, class _Dom>\n+    struct _BinClos<_Oper,_Expr,_ValArray,_Dom,typename _Dom::value_type>\n+      : _BinBase<_Oper,_Dom,valarray<typename _Dom::value_type> > \n+    {\n+      typedef typename _Dom::value_type _Tp;\n+      typedef _BinBase<_Oper,_Dom,valarray<_Tp> > _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const _Dom& __e1, const valarray<_Tp>& __e2)\n+\t: _Base(__e1, __e2) {}\n     };\n \n-    template<template<class> class _Oper, class _Dom>\n+  template<class _Oper, class _Dom>\n     struct  _BinClos<_Oper,_ValArray,_Expr,typename _Dom::value_type,_Dom>\n-        : _BinBase<_Oper,valarray<typename _Dom::value_type>,_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinBase<_Oper,valarray<_Tp>,_Dom> _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos (const valarray<_Tp>& __e1, const _Dom& __e2)\n-                : _Base (__e1, __e2) {}\n+      : _BinBase<_Oper,valarray<typename _Dom::value_type>,_Dom> \n+    {\n+      typedef typename _Dom::value_type _Tp;\n+      typedef _BinBase<_Oper,valarray<_Tp>,_Dom> _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const valarray<_Tp>& __e1, const _Dom& __e2)\n+\t: _Base(__e1, __e2) {}\n     };\n \n-    template<template<class> class _Oper, class _Dom>\n+  template<class _Oper, class _Dom>\n     struct _BinClos<_Oper,_Expr,_Constant,_Dom,typename _Dom::value_type>\n-        : _BinBase2<_Oper,_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinBase2<_Oper,_Dom> _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos (const _Dom& __e1, const _Tp& __e2) : _Base (__e1, __e2) {}\n+      : _BinBase2<_Oper,_Dom> \n+    {\n+      typedef typename _Dom::value_type _Tp;\n+      typedef _BinBase2<_Oper,_Dom> _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const _Dom& __e1, const _Tp& __e2) : _Base(__e1, __e2) {}\n     };\n \n-    template<template<class> class _Oper, class _Dom>\n+  template<class _Oper, class _Dom>\n     struct _BinClos<_Oper,_Constant,_Expr,typename _Dom::value_type,_Dom>\n-        : _BinBase1<_Oper,_Dom> {\n-        typedef typename _Dom::value_type _Tp;\n-        typedef _BinBase1<_Oper,_Dom> _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos (const _Tp& __e1, const _Dom& __e2) : _Base (__e1, __e2) {}\n+      : _BinBase1<_Oper,_Dom> \n+    {\n+      typedef typename _Dom::value_type _Tp;\n+      typedef _BinBase1<_Oper,_Dom> _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const _Tp& __e1, const _Dom& __e2) : _Base(__e1, __e2) {}\n     };\n     \n-    template<template<class> class _Oper, typename _Tp>\n+  template<class _Oper, typename _Tp>\n     struct _BinClos<_Oper,_ValArray,_Constant,_Tp,_Tp>\n-        : _BinBase2<_Oper,valarray<_Tp> > {\n-        typedef _BinBase2<_Oper,valarray<_Tp> > _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos (const valarray<_Tp>& __v, const _Tp& __t)\n-                : _Base (__v, __t) {}\n+      : _BinBase2<_Oper,valarray<_Tp> > \n+    {\n+      typedef _BinBase2<_Oper,valarray<_Tp> > _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const valarray<_Tp>& __v, const _Tp& __t) : _Base(__v, __t) {}\n     };\n \n-    template<template<class> class _Oper, typename _Tp>\n+  template<class _Oper, typename _Tp>\n     struct _BinClos<_Oper,_Constant,_ValArray,_Tp,_Tp>\n-        : _BinBase1<_Oper,valarray<_Tp> > {\n-        typedef _BinBase1<_Oper,valarray<_Tp> > _Base;\n-        typedef typename _Base::value_type value_type;\n-\n-        _BinClos (const _Tp& __t, const valarray<_Tp>& __v)\n-                : _Base (__t, __v) {}\n+      : _BinBase1<_Oper,valarray<_Tp> > \n+    {\n+      typedef _BinBase1<_Oper,valarray<_Tp> > _Base;\n+      typedef typename _Base::value_type value_type;\n+      \n+      _BinClos(const _Tp& __t, const valarray<_Tp>& __v) : _Base(__t, __v) {}\n     };\n         \n \n@@ -1065,18 +911,18 @@ namespace std\n     inline _Expr<_UnClos<__logical_not,_Expr,_Dom>, bool>\n     _Expr<_Dom,_Tp>::operator!() const\n     {\n-        typedef _UnClos<__logical_not,std::_Expr,_Dom> _Closure;\n-        return _Expr<_Closure,_Tp>(_Closure(this->_M_closure));\n+      typedef _UnClos<__logical_not,std::_Expr,_Dom> _Closure;\n+      return _Expr<_Closure,_Tp>(_Closure(this->_M_closure));\n     }\n \n-#define _DEFINE_EXPR_UNARY_OPERATOR(_Op, _Name)                         \\\n-template<class _Dom, typename _Tp>                                      \\\n-inline _Expr<_UnClos<_Name,std::_Expr,_Dom>,_Tp>                        \\\n-_Expr<_Dom,_Tp>::operator _Op() const                                   \\\n-{                                                                       \\\n-    typedef _UnClos<_Name,std::_Expr,_Dom> _Closure;                    \\\n-    return _Expr<_Closure,_Tp>(_Closure(this->_M_closure));             \\\n-}\n+#define _DEFINE_EXPR_UNARY_OPERATOR(_Op, _Name)                           \\\n+  template<class _Dom, typename _Tp>                                      \\\n+    inline _Expr<_UnClos<_Name,std::_Expr,_Dom>,_Tp>                      \\\n+    _Expr<_Dom,_Tp>::operator _Op() const                                 \\\n+    {                                                                     \\\n+      typedef _UnClos<_Name,std::_Expr,_Dom> _Closure;                    \\\n+      return _Expr<_Closure,_Tp>(_Closure(this->_M_closure));             \\\n+    }\n \n     _DEFINE_EXPR_UNARY_OPERATOR(+, __unary_plus)\n     _DEFINE_EXPR_UNARY_OPERATOR(-, __negate)\n@@ -1086,165 +932,104 @@ _Expr<_Dom,_Tp>::operator _Op() const                                   \\\n \n \n #define _DEFINE_EXPR_BINARY_OPERATOR(_Op, _Name)                        \\\n-template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n-inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>,                   \\\n-             typename _Name<typename _Dom1::value_type>::result_type>   \\\n-operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n-              const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n-{                                                                       \\\n+  template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n+  inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>,                 \\\n+         typename __fun<_Name, typename _Dom1::value_type>::result_type>\\\n+  operator _Op(const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n+\t       const _Expr<_Dom2,typename _Dom2::value_type>& __w)      \\\n+  {                                                                     \\\n     typedef typename _Dom1::value_type _Arg;                            \\\n-    typedef typename _Name<_Arg>::result_type _Value;                   \\\n+    typedef typename __fun<_Name, _Arg>::result_type _Value;            \\\n     typedef _BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2> _Closure;           \\\n-    return _Expr<_Closure,_Value> (_Closure (__v (), __w ()));          \\\n-}                                                                       \\\n+    return _Expr<_Closure,_Value>(_Closure(__v(), __w()));              \\\n+  }                                                                     \\\n                                                                         \\\n template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n-             typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n-              const typename _Dom::value_type& __t)                     \\\n+inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>,\\\n+             typename __fun<_Name, typename _Dom::value_type>::result_type>\\\n+operator _Op(const _Expr<_Dom,typename _Dom::value_type>& __v,          \\\n+             const typename _Dom::value_type& __t)                      \\\n {                                                                       \\\n-    typedef typename _Dom::value_type _Arg;                             \\\n-    typedef typename _Name<_Arg>::result_type _Value;                   \\\n-    typedef _BinClos<_Name,_Expr,_Constant,_Dom,_Arg> _Closure;         \\\n-    return _Expr<_Closure,_Value> (_Closure (__v (), __t));             \\\n+  typedef typename _Dom::value_type _Arg;                               \\\n+  typedef typename __fun<_Name, _Arg>::result_type _Value;              \\\n+  typedef _BinClos<_Name,_Expr,_Constant,_Dom,_Arg> _Closure;           \\\n+  return _Expr<_Closure,_Value>(_Closure(__v(), __t));                  \\\n }                                                                       \\\n                                                                         \\\n template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n-             typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator _Op (const typename _Dom::value_type& __t,                    \\\n-               const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n+inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>,\\\n+             typename __fun<_Name, typename _Dom::value_type>::result_type>\\\n+operator _Op(const typename _Dom::value_type& __t,                      \\\n+             const _Expr<_Dom,typename _Dom::value_type>& __v)          \\\n {                                                                       \\\n-    typedef typename _Dom::value_type _Arg;                             \\\n-    typedef typename _Name<_Arg>::result_type _Value;                   \\\n-    typedef _BinClos<_Name,_Constant,_Expr,_Arg,_Dom> _Closure;         \\\n-    return _Expr<_Closure,_Value> (_Closure (__t, __v ()));             \\\n+  typedef typename _Dom::value_type _Arg;                               \\\n+  typedef typename __fun<_Name, _Arg>::result_type _Value;              \\\n+  typedef _BinClos<_Name,_Constant,_Expr,_Arg,_Dom> _Closure;           \\\n+  return _Expr<_Closure,_Value>(_Closure(__t, __v()));                  \\\n }                                                                       \\\n                                                                         \\\n template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n-             typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n-               const valarray<typename _Dom::value_type>& __v)          \\\n+inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>,\\\n+             typename __fun<_Name, typename _Dom::value_type>::result_type>\\\n+operator _Op(const _Expr<_Dom,typename _Dom::value_type>& __e,          \\\n+             const valarray<typename _Dom::value_type>& __v)            \\\n {                                                                       \\\n-    typedef typename _Dom::value_type _Arg;                             \\\n-    typedef typename _Name<_Arg>::result_type _Value;                   \\\n-    typedef _BinClos<_Name,_Expr,_ValArray,_Dom,_Arg> _Closure;         \\\n-    return  _Expr<_Closure,_Value> (_Closure (__e (), __v));            \\\n+  typedef typename _Dom::value_type _Arg;                               \\\n+  typedef typename __fun<_Name, _Arg>::result_type _Value;              \\\n+  typedef _BinClos<_Name,_Expr,_ValArray,_Dom,_Arg> _Closure;           \\\n+  return  _Expr<_Closure,_Value>(_Closure(__e(), __v));                 \\\n }                                                                       \\\n                                                                         \\\n template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n-             typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator _Op (const valarray<typename _Dom::value_type>& __v,          \\\n-               const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n+inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>,\\\n+             typename __fun<_Name, typename _Dom::value_type>::result_type>\\\n+operator _Op(const valarray<typename _Dom::value_type>& __v,            \\\n+             const _Expr<_Dom,typename _Dom::value_type>& __e)          \\\n {                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef typename _Name<_Tp>::result_type _Value;                    \\\n-    typedef _BinClos<_Name,_ValArray,_Expr,_Tp,_Dom> _Closure;          \\\n-    return _Expr<_Closure,_Value> (_Closure (__v, __e ()));             \\\n+  typedef typename _Dom::value_type _Tp;                                \\\n+  typedef typename __fun<_Name, _Tp>::result_type _Value;               \\\n+  typedef _BinClos<_Name,_ValArray,_Expr,_Tp,_Dom> _Closure;            \\\n+  return _Expr<_Closure,_Value> (_Closure (__v, __e ()));               \\\n }\n \n-    _DEFINE_EXPR_BINARY_OPERATOR(+, plus)\n-    _DEFINE_EXPR_BINARY_OPERATOR(-, minus)\n-    _DEFINE_EXPR_BINARY_OPERATOR(*, multiplies)\n-    _DEFINE_EXPR_BINARY_OPERATOR(/, divides)\n-    _DEFINE_EXPR_BINARY_OPERATOR(%, modulus)\n-    _DEFINE_EXPR_BINARY_OPERATOR(^, _Bitwise_xor)\n-    _DEFINE_EXPR_BINARY_OPERATOR(&, _Bitwise_and)\n-    _DEFINE_EXPR_BINARY_OPERATOR(|, _Bitwise_or)\n-    _DEFINE_EXPR_BINARY_OPERATOR(<<, _Shift_left)\n-    _DEFINE_EXPR_BINARY_OPERATOR(>>, _Shift_right)\n+    _DEFINE_EXPR_BINARY_OPERATOR(+, __plus)\n+    _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n+    _DEFINE_EXPR_BINARY_OPERATOR(*, __multiplies)\n+    _DEFINE_EXPR_BINARY_OPERATOR(/, __divides)\n+    _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n+    _DEFINE_EXPR_BINARY_OPERATOR(^, __bitwise_xor)\n+    _DEFINE_EXPR_BINARY_OPERATOR(&, __bitwise_and)\n+    _DEFINE_EXPR_BINARY_OPERATOR(|, __bitwise_or)\n+    _DEFINE_EXPR_BINARY_OPERATOR(<<, __shift_left)\n+    _DEFINE_EXPR_BINARY_OPERATOR(>>, __shift_right)\n+    _DEFINE_EXPR_BINARY_OPERATOR(&&, __logical_and)\n+    _DEFINE_EXPR_BINARY_OPERATOR(||, __logical_or)\n+    _DEFINE_EXPR_BINARY_OPERATOR(==, __equal_to)\n+    _DEFINE_EXPR_BINARY_OPERATOR(!=, __not_equal_to)\n+    _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n+    _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n+    _DEFINE_EXPR_BINARY_OPERATOR(<=, __less_equal)\n+    _DEFINE_EXPR_BINARY_OPERATOR(>=, __greater_equal)\n \n #undef _DEFINE_EXPR_BINARY_OPERATOR\n-    \n-#define _DEFINE_EXPR_RELATIONAL_OPERATOR(_Op, _Name)                    \\\n-template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n-inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>, bool>             \\\n-operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n-              const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n-{                                                                       \\\n-    typedef typename _Dom1::value_type _Arg;                            \\\n-    typedef _BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2> _Closure;           \\\n-    return _Expr<_Closure,bool> (_Closure (__v (), __w ()));            \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n-             bool>                                                      \\\n-operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n-              const typename _Dom::value_type& __t)                     \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Arg;                             \\\n-    typedef _BinClos<_Name,_Expr,_Constant,_Dom,_Arg> _Closure;         \\\n-    return _Expr<_Closure,bool> (_Closure (__v (), __t));               \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n-             bool>                                                      \\\n-operator _Op (const typename _Dom::value_type& __t,                    \\\n-               const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Arg;                             \\\n-    typedef _BinClos<_Name,_Constant,_Expr,_Arg,_Dom> _Closure;         \\\n-    return _Expr<_Closure,bool> (_Closure (__t, __v ()));               \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n-             bool>                                                      \\\n-operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n-               const valarray<typename _Dom::value_type>& __v)          \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinClos<_Name,_Expr,_ValArray,_Dom,_Tp> _Closure;          \\\n-    return  _Expr<_Closure,bool> (_Closure (__e (), __v));              \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n-             bool>                                                      \\\n-operator _Op (const valarray<typename _Dom::value_type>& __v,          \\\n-               const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinClos<_Name,_ValArray,_Expr,_Tp,_Dom> _Closure;          \\\n-    return _Expr<_Closure,bool> (_Closure (__v, __e ()));               \\\n-}\n-\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(&&, logical_and)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(||, logical_or)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(==, equal_to)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(!=, not_equal_to)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(<, less)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(>, greater)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(<=, less_equal)\n-    _DEFINE_EXPR_RELATIONAL_OPERATOR(>=, greater_equal)\n-\n-#undef _DEFINE_EXPR_RELATIONAL_OPERATOR\n-\n-\n-\n-#define _DEFINE_EXPR_UNARY_FUNCTION(_Name)                              \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_UnClos<__##_Name,_Expr,_Dom>,typename _Dom::value_type>   \\\n-_Name(const _Expr<_Dom,typename _Dom::value_type>& __e)                 \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _UnClos<__##_Name,_Expr,_Dom> _Closure;                     \\\n-    return _Expr<_Closure,_Tp>(_Closure(__e()));                        \\\n-}                                                                       \\\n-                                                                        \\\n-template<typename _Tp>                                                  \\\n-inline _Expr<_UnClos<__##_Name,_ValArray,_Tp>,_Tp>                      \\\n-_Name(const valarray<_Tp>& __v)                                         \\\n-{                                                                       \\\n-    typedef _UnClos<__##_Name,_ValArray,_Tp> _Closure;                  \\\n-    return _Expr<_Closure,_Tp>(_Closure (__v));                         \\\n-}\n \n+#define _DEFINE_EXPR_UNARY_FUNCTION(_Name)                               \\\n+  template<class _Dom>                                                   \\\n+    inline _Expr<_UnClos<__##_Name,_Expr,_Dom>,typename _Dom::value_type>\\\n+    _Name(const _Expr<_Dom,typename _Dom::value_type>& __e)              \\\n+    {                                                                    \\\n+      typedef typename _Dom::value_type _Tp;                             \\\n+      typedef _UnClos<__##_Name,_Expr,_Dom> _Closure;                    \\\n+      return _Expr<_Closure,_Tp>(_Closure(__e()));                       \\\n+    }                                                                    \\\n+                                                                         \\\n+  template<typename _Tp>                                                 \\\n+    inline _Expr<_UnClos<__##_Name,_ValArray,_Tp>,_Tp>                   \\\n+    _Name(const valarray<_Tp>& __v)                                      \\\n+    {                                                                    \\\n+      typedef _UnClos<__##_Name,_ValArray,_Tp> _Closure;                 \\\n+      return _Expr<_Closure,_Tp>(_Closure(__v));                         \\\n+    }\n \n     _DEFINE_EXPR_UNARY_FUNCTION(abs)\n     _DEFINE_EXPR_UNARY_FUNCTION(cos)\n@@ -1263,93 +1048,89 @@ _Name(const valarray<_Tp>& __v)                                         \\\n \n #undef _DEFINE_EXPR_UNARY_FUNCTION\n \n-\n-#define _DEFINE_EXPR_BINARY_FUNCTION(_Name)                             \\\n-template<class _Dom1, class _Dom2>                                      \\\n-inline _Expr<_BinFunClos<_Expr,_Expr,_Dom1,_Dom2>,typename _Dom1::value_type>\\\n-_Name (const _Expr<_Dom1,typename _Dom1::value_type>& __e1,             \\\n-       const _Expr<_Dom2,typename _Dom2::value_type>& __e2)             \\\n-{                                                                       \\\n-    typedef typename _Dom1::value_type _Tp;                             \\\n-    typedef _BinFunClos<_Expr,_Expr,_Dom1,_Dom2> _Closure;              \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__e1 (), __e2 (), (_Tp(*)(_Tp, _Tp))(&_Name)));      \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinFunClos<_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n-             typename _Dom::value_type>                                 \\\n-_Name (const _Expr<_Dom,typename _Dom::value_type>& __e,                \\\n-       const valarray<typename _Dom::value_type>& __v)                  \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinFunClos<_Expr,_ValArray,_Dom,_Tp> _Closure;             \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__e (), __v, (_Tp(*)(_Tp, _Tp))(&_Name)));           \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinFunClos<_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n-             typename _Dom::value_type>                                 \\\n-_Name (const valarray<typename _Dom::valarray>& __v,                    \\\n-       const _Expr<_Dom,typename _Dom::value_type>& __e)                \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinFunClos<_ValArray,_Expr,_Tp,_Dom> _Closure;             \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__v, __e (), (_Tp(*)(_Tp, _Tp))(&_Name)));           \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinFunClos<_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n-             typename _Dom::value_type>                                 \\\n-_Name (const _Expr<_Dom, typename _Dom::value_type>& __e,               \\\n-       const typename _Dom::value_type& __t)                            \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinFunClos<_Expr,_Constant,_Dom,_Tp> _Closure;             \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__e (), __t, (_Tp(*)(_Tp, _Tp))(&_Name)));           \\\n-}                                                                       \\\n-                                                                        \\\n-template<class _Dom>                                                    \\\n-inline _Expr<_BinFunClos<_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n-             typename _Dom::value_type>                                 \\\n-_Name (const typename _Dom::value_type& __t,                            \\\n-       const _Expr<_Dom,typename _Dom::value_type>& __e)                \\\n-{                                                                       \\\n-    typedef typename _Dom::value_type _Tp;                              \\\n-    typedef _BinFunClos<_Constant,_Expr,_Tp,_Dom> _Closure;             \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__t, __e (), (_Tp(*)(_Tp, _Tp))(&_Name)));           \\\n-}                                                                       \\\n-                                                                        \\\n-template<typename _Tp>                                                  \\\n-inline _Expr<_BinFunClos<_ValArray,_ValArray,_Tp,_Tp>, _Tp>             \\\n-_Name (const valarray<_Tp>& __v, const valarray<_Tp>& __w)              \\\n-{                                                                       \\\n-    typedef _BinFunClos<_ValArray,_ValArray,_Tp,_Tp> _Closure;          \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__v, __w, (_Tp(*)(_Tp,_Tp))(&_Name)));               \\\n-}                                                                       \\\n-                                                                        \\\n-template<typename _Tp>                                                  \\\n-inline _Expr<_BinFunClos<_ValArray,_Constant,_Tp,_Tp>,_Tp>              \\\n-_Name (const valarray<_Tp>& __v, const _Tp& __t)                        \\\n-{                                                                       \\\n-    typedef _BinFunClos<_ValArray,_Constant,_Tp,_Tp> _Closure;          \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__v, __t, (_Tp(*)(_Tp,_Tp))(&_Name)));               \\\n-}                                                                       \\\n-                                                                        \\\n-template<typename _Tp>                                                  \\\n-inline _Expr<_BinFunClos<_Constant,_ValArray,_Tp,_Tp>,_Tp>              \\\n-_Name (const _Tp& __t, const valarray<_Tp>& __v)                        \\\n-{                                                                       \\\n-    typedef _BinFunClos<_Constant,_ValArray,_Tp,_Tp> _Closure;          \\\n-    return _Expr<_Closure,_Tp>                                          \\\n-        (_Closure (__t, __v, (_Tp(*)(_Tp,_Tp))(&_Name)));               \\\n-}\n+#define _DEFINE_EXPR_BINARY_FUNCTION(_Fun)                             \\\n+  template<class _Dom1, class _Dom2>                                   \\\n+    inline _Expr<_BinClos<__##_Fun,_Expr,_Expr,_Dom1,_Dom2>,           \\\n+\t\t typename _Dom1::value_type>                           \\\n+    _Fun(const _Expr<_Dom1,typename _Dom1::value_type>& __e1,          \\\n+\t  const _Expr<_Dom2,typename _Dom2::value_type>& __e2)         \\\n+    {                                                                  \\\n+      typedef typename _Dom1::value_type _Tp;                          \\\n+      typedef _BinClos<__##_Fun,_Expr,_Expr,_Dom1,_Dom2> _Closure;     \\\n+      return _Expr<_Closure,_Tp>(_Closure(__e1(), __e2()));            \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<class _Dom>                                                 \\\n+    inline _Expr<_BinClos<__##_Fun, _Expr, _ValArray, _Dom,            \\\n+\t\t\t  typename _Dom::value_type>,                  \\\n+\t\t typename _Dom::value_type>                            \\\n+    _Fun(const _Expr<_Dom,typename _Dom::value_type>& __e,             \\\n+\t const valarray<typename _Dom::value_type>& __v)               \\\n+    {                                                                  \\\n+      typedef typename _Dom::value_type _Tp;                           \\\n+      typedef _BinClos<__##_Fun, _Expr, _ValArray, _Dom, _Tp> _Closure;\\\n+      return _Expr<_Closure,_Tp>(_Closure(__e(), __v));                \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<class _Dom>                                                 \\\n+    inline _Expr<_BinClos<__##_Fun, _ValArray, _Expr,                  \\\n+\t\t\t  typename _Dom::value_type,_Dom>,             \\\n+\t\t typename _Dom::value_type>                            \\\n+    _Fun(const valarray<typename _Dom::valarray>& __v,                 \\\n+\t const _Expr<_Dom,typename _Dom::value_type>& __e)             \\\n+    {                                                                  \\\n+      typedef typename _Dom::value_type _Tp;                           \\\n+      typedef _BinClos<__##_Fun,_ValArray,_Expr,_Tp,_Dom> _Closure;    \\\n+      return _Expr<_Closure,_Tp>(_Closure(__v, __e()));                \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<class _Dom>                                                 \\\n+    inline _Expr<_BinClos<__##_Fun,_Expr,_Constant,_Dom,               \\\n+\t\t\t  typename _Dom::value_type>,                  \\\n+\t\t typename _Dom::value_type>                            \\\n+    _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \\\n+\t const typename _Dom::value_type& __t)                         \\\n+    {                                                                  \\\n+      typedef typename _Dom::value_type _Tp;                           \\\n+      typedef _BinClos<__##_Fun,_Expr,_Constant,_Dom,_Tp> _Closure;    \\\n+      return _Expr<_Closure,_Tp>(_Closure(__e(), __t));                \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<class _Dom>                                                 \\\n+    inline _Expr<_BinClos<__##_Fun,_Constant,_Expr,                    \\\n+\t\t\t  typename _Dom::value_type,_Dom>,             \\\n+\t\t typename _Dom::value_type>                            \\\n+    _Fun(const typename _Dom::value_type& __t,                         \\\n+\t const _Expr<_Dom,typename _Dom::value_type>& __e)             \\\n+    {                                                                  \\\n+      typedef typename _Dom::value_type _Tp;                           \\\n+      typedef _BinClos<__##_Fun, _Constant,_Expr,_Tp,_Dom> _Closure;   \\\n+      return _Expr<_Closure,_Tp>(_Closure(__t, __e()));                \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<typename _Tp>                                               \\\n+    inline _Expr<_BinClos<__##_Fun,_ValArray,_ValArray,_Tp,_Tp>, _Tp>  \\\n+    _Fun(const valarray<_Tp>& __v, const valarray<_Tp>& __w)           \\\n+    {                                                                  \\\n+      typedef _BinClos<__##_Fun,_ValArray,_ValArray,_Tp,_Tp> _Closure; \\\n+      return _Expr<_Closure,_Tp>(_Closure(__v, __w));                  \\\n+    }                                                                  \\\n+                                                                       \\\n+  template<typename _Tp>                                               \\\n+    inline _Expr<_BinClos<__##_Fun,_ValArray,_Constant,_Tp,_Tp>,_Tp>   \\\n+    _Fun(const valarray<_Tp>& __v, const _Tp& __t)                     \\\n+    {                                                                  \\\n+      typedef _BinClos<__##_Fun,_ValArray,_Constant,_Tp,_Tp> _Closure; \\\n+      return _Expr<_Closure,_Tp>(_Closure(__v, __t));                  \\\n+    }                                                                  \\\n+\t\t\t\t\t\t\t\t       \\\n+  template<typename _Tp>                                               \\\n+    inline _Expr<_BinClos<__##_Fun,_Constant,_ValArray,_Tp,_Tp>,_Tp>   \\\n+    _Fun(const _Tp& __t, const valarray<_Tp>& __v)                     \\\n+    {                                                                  \\\n+      typedef _BinClos<__##_Fun,_Constant,_ValArray,_Tp,_Tp> _Closure; \\\n+      return _Expr<_Closure,_Tp>(_Closure(__t, __v));                  \\\n+    }\n \n _DEFINE_EXPR_BINARY_FUNCTION(atan2)\n _DEFINE_EXPR_BINARY_FUNCTION(pow)"}, {"sha": "b4de5dfec370be6e12f5c74cbd3781e2af6982af", "filename": "libstdc++-v3/include/std/std_valarray.h", "status": "modified", "additions": 75, "deletions": 134, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_valarray.h?ref=971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "patch": "@@ -45,7 +45,6 @@\n #include <cmath>\n #include <cstdlib>\n #include <numeric>\n-#include <functional>\n #include <algorithm>\n \n namespace std\n@@ -59,7 +58,7 @@ namespace std\n   template<class _Oper, template<class, class> class _Meta, class _Dom>\n     struct _UnClos;\n \n-  template<template<class> class _Oper,\n+  template<class _Oper,\n         template<class, class> class _Meta1,\n         template<class, class> class _Meta2,\n         class _Dom1, class _Dom2> \n@@ -80,12 +79,6 @@ namespace std\n   template<template<class, class> class _Meta, class _Dom> \n     class _RefFunClos;\n \n-  template<class _Tp> struct _Bitwise_and;\n-  template<class _Tp> struct _Bitwise_or;\n-  template<class _Tp> struct _Bitwise_xor;  \n-  template<class _Tp> struct _Shift_left;\n-  template<class _Tp> struct _Shift_right;\n-  \n   template<class _Tp> class valarray;   // An array of type _Tp\n   class slice;                          // BLAS-like slice out of an array\n   template<class _Tp> class slice_array;\n@@ -224,27 +217,6 @@ namespace std\n       \n       friend class _Array<_Tp>;\n     };\n-\n-  template<typename _Tp> struct _Bitwise_and : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x & __y; }\n-  };\n-\n-  template<typename _Tp> struct _Bitwise_or : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x | __y; }\n-  };\n-\n-  template<typename _Tp> struct _Bitwise_xor : binary_function<_Tp,_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x ^ __y; }\n-  };\n-  \n-  template<typename _Tp> struct _Shift_left : unary_function<_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x << __y; }\n-  };\n-\n-  template<typename _Tp> struct _Shift_right : unary_function<_Tp,_Tp> {\n-      _Tp operator() (_Tp __x, _Tp __y) const { return __x >> __y; }\n-  };\n-\n   \n   template<typename _Tp>\n     inline const _Tp&\n@@ -486,7 +458,7 @@ namespace std\n     inline _Tp\n     valarray<_Tp>::sum() const\n     {\n-\treturn __valarray_sum(_M_data, _M_data + _M_size);\n+      return __valarray_sum(_M_data, _M_data + _M_size);\n     }\n \n //   template<typename _Tp>\n@@ -611,138 +583,107 @@ namespace std\n \n #define _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(_Op, _Name)               \\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const _Tp &__t)\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);\t\\\n+    inline valarray<_Tp>&\t\t\t\t\t\t\\\n+    valarray<_Tp>::operator _Op##=(const _Tp &__t)\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_Array<_Tp>(_M_data), _M_size, __t);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const valarray<_Tp> &__v)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, \t\t\\\n-                               _Array<_Tp>(__v._M_data));\t\t\\\n+    inline valarray<_Tp>&\t\t\t\t\t\t\\\n+    valarray<_Tp>::operator _Op##=(const valarray<_Tp> &__v)\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_Array<_Tp>(_M_data), _M_size, \t\t\\\n+\t\t\t       _Array<_Tp>(__v._M_data));\t\t\\\n       return *this;\t\t\t\t\t\t\t\\\n-  }\n+    }\n \n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(+, plus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(-, minus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(*, multiplies)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(/, divides)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(%, modulus)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(^, xor)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(&, and)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(|, or)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(<<, shift_left)\n-_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(>>, shift_right)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(+, __plus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(-, __minus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(*, __multiplies)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(/, __divides)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(%, __modulus)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(^, __bitwise_xor)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(&, __bitwise_and)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(|, __bitwise_or)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(<<, __shift_left)\n+_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT\n \n-\n-} // std::\n-  \n-\n-namespace std\n-{\n-\n #define _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(_Op, _Name)          \\\n   template<class _Tp> template<class _Dom>\t\t\t\t\\\n-  inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);\t\\\n+    inline valarray<_Tp>&\t\t\t\t\t\t\\\n+    valarray<_Tp>::operator _Op##=(const _Expr<_Dom,_Tp>& __e)\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      _Array_augmented_##_Name(_Array<_Tp>(_M_data), __e, _M_size);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n-  }\n+    }\n \n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(+, plus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(-, minus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(*, multiplies)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(/, divides)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(%, modulus)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(^, xor)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(&, and)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(|, or)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(<<, shift_left)\n-_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, shift_right)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(+, __plus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(-, __minus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(*, __multiplies)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(/, __divides)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(%, __modulus)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(^, __bitwise_xor)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(&, __bitwise_and)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(|, __bitwise_or)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(<<, __shift_left)\n+_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, __shift_right)\n \n #undef _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT\n     \n \n #define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \\\n-  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n+    inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,           \\\n+                 typename __fun<_Name, _Tp>::result_type>               \\\n+    operator _Op(const valarray<_Tp>& __v, const valarray<_Tp>& __w)\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, _Tp> (_Closure (__v, __w));\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n+      typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n+      return _Expr<_Closure, _Rt>(_Closure(__v, __w));                  \\\n+    }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \\\n-  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,             \\\n+               typename __fun<_Name, _Tp>::result_type>                 \\\n+  operator _Op(const valarray<_Tp>& __v, const _Tp& __t)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n-      return _Expr<_Closure, _Tp> (_Closure (__v, __t));\t        \\\n+    typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n+    typedef typename __fun<_Name, _Tp>::result_type _Rt;                \\\n+    return _Expr<_Closure, _Rt>(_Closure(__v, __t));\t                \\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \\\n-  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,             \\\n+               typename __fun<_Name, _Tp>::result_type>                 \\\n+  operator _Op(const _Tp& __t, const valarray<_Tp>& __v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, _Tp> (_Closure (__t, __v));        \t\\\n-  }\n-\n-_DEFINE_BINARY_OPERATOR(+, plus)\n-_DEFINE_BINARY_OPERATOR(-, minus)\n-_DEFINE_BINARY_OPERATOR(*, multiplies)\n-_DEFINE_BINARY_OPERATOR(/, divides)\n-_DEFINE_BINARY_OPERATOR(%, modulus)\n-_DEFINE_BINARY_OPERATOR(^, _Bitwise_xor)\n-_DEFINE_BINARY_OPERATOR(&, _Bitwise_and)\n-_DEFINE_BINARY_OPERATOR(|, _Bitwise_or)\n-_DEFINE_BINARY_OPERATOR(<<, _Shift_left)\n-_DEFINE_BINARY_OPERATOR(>>, _Shift_right)\n-\n-#undef _DEFINE_BINARY_OPERATOR\n-\n-#define _DEFINE_LOGICAL_OPERATOR(_Op, _Name)\t\t\t\t\\\n-  template<typename _Tp>\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__v, __w));               \\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \\\n-  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__v, __t));       \t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  template<class _Tp>\t\t\t\t\t\t\t\\\n-  inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-      typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n-      return _Expr<_Closure, bool> (_Closure (__t, __v));\t        \\\n+    typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;       \\\n+    typedef typename __fun<_Name, _Tp>::result_type _Rt;                \\\n+    return _Expr<_Closure, _Tp>(_Closure(__t, __v));        \t        \\\n   }\n \n-_DEFINE_LOGICAL_OPERATOR(&&, logical_and)\n-_DEFINE_LOGICAL_OPERATOR(||, logical_or)\n-_DEFINE_LOGICAL_OPERATOR(==, equal_to)\n-_DEFINE_LOGICAL_OPERATOR(!=, not_equal_to)\n-_DEFINE_LOGICAL_OPERATOR(<, less)\n-_DEFINE_LOGICAL_OPERATOR(>, greater)\n-_DEFINE_LOGICAL_OPERATOR(<=, less_equal)\n-_DEFINE_LOGICAL_OPERATOR(>=, greater_equal)\n-\n-#undef _DEFINE_LOGICAL_OPERATOR\n+_DEFINE_BINARY_OPERATOR(+, __plus)\n+_DEFINE_BINARY_OPERATOR(-, __minus)\n+_DEFINE_BINARY_OPERATOR(*, __multiplies)\n+_DEFINE_BINARY_OPERATOR(/, __divides)\n+_DEFINE_BINARY_OPERATOR(%, __modulus)\n+_DEFINE_BINARY_OPERATOR(^, __bitwise_xor)\n+_DEFINE_BINARY_OPERATOR(&, __bitwise_and)\n+_DEFINE_BINARY_OPERATOR(|, __bitwise_or)\n+_DEFINE_BINARY_OPERATOR(<<, __shift_left)\n+_DEFINE_BINARY_OPERATOR(>>, __shift_right)\n+_DEFINE_BINARY_OPERATOR(&&, __logical_and)\n+_DEFINE_BINARY_OPERATOR(||, __logical_or)\n+_DEFINE_BINARY_OPERATOR(==, __equal_to)\n+_DEFINE_BINARY_OPERATOR(!=, __not_equal_to)\n+_DEFINE_BINARY_OPERATOR(<, __less)\n+_DEFINE_BINARY_OPERATOR(>, __greater)\n+_DEFINE_BINARY_OPERATOR(<=, __less_equal)\n+_DEFINE_BINARY_OPERATOR(>=, __greater_equal)\n \n } // namespace std\n "}, {"sha": "4079b14a18ad0c3ab4fee77cfd9c26d81d255b7c", "filename": "libstdc++-v3/testsuite/26_numerics/valarray_name_lookup.C", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_name_lookup.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/971cfc6f109f1c42edb7a13d3f2fe5b133132e4b/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_name_lookup.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fvalarray_name_lookup.C?ref=971cfc6f109f1c42edb7a13d3f2fe5b133132e4b", "patch": "@@ -116,4 +116,27 @@ int main()\n   v = log(u);\n   v = log10(u);\n   v = sqrt(u);  \n+\n+  Array w = u + v;\n+  w = u - v;\n+  w = u * v;\n+  w = u / v;\n+  w = u % v;\n+\n+  w = u ^ v;\n+  w = u & v;\n+  w = u | v;\n+\n+  w = u << v;\n+  w = u >> v;\n+\n+  z = u == v;\n+  z = u != v;\n+  z = u < v;\n+  z = u <= v;\n+  z = u > v;\n+  z = u >= v;\n+\n+  w = atan2(u, v);\n+  w = pow(u, v);\n }"}]}