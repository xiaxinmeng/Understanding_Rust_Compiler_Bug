{"sha": "52654036a544389fb66855bf3972f2a8013bec59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI2NTQwMzZhNTQ0Mzg5ZmI2Njg1NWJmMzk3MmYyYTgwMTNiZWM1OQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-03-15T10:02:02Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2021-03-15T10:02:02Z"}, "message": "Handle EXEC_IOLENGTH in doloop_contained_procedure_code.\n\nThis rather obvious patch fixes an ICE on valid which came about\nbecause I did not handle EXEC_IOLENGTH as start of an I/O statement\nwhen checking for the DO loop variable.  This is an 11 regression.\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99345\n\t* frontend-passes.c (doloop_contained_procedure_code):\n\tProperly handle EXEC_IOLENGTH.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99345\n\t* gfortran.dg/do_check_16.f90: New test.\n\t* gfortran.dg/do_check_17.f90: New test.", "tree": {"sha": "bd9f117090f37428ece4467884680b1efa3f1374", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd9f117090f37428ece4467884680b1efa3f1374"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52654036a544389fb66855bf3972f2a8013bec59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52654036a544389fb66855bf3972f2a8013bec59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52654036a544389fb66855bf3972f2a8013bec59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52654036a544389fb66855bf3972f2a8013bec59/comments", "author": null, "committer": null, "parents": [{"sha": "21ced2776a117924e52f6aab8b41afb613fef0e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ced2776a117924e52f6aab8b41afb613fef0e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ced2776a117924e52f6aab8b41afb613fef0e7"}], "stats": {"total": 36, "additions": 36, "deletions": 0}, "files": [{"sha": "cfc47471cf144a7cae41c40b9a8576a5b761011a", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=52654036a544389fb66855bf3972f2a8013bec59", "patch": "@@ -2405,6 +2405,7 @@ doloop_contained_procedure_code (gfc_code **c,\n     case EXEC_READ:\n     case EXEC_WRITE:\n     case EXEC_INQUIRE:\n+    case EXEC_IOLENGTH:\n       saved_io_op = last_io_op;\n       last_io_op = co->op;\n       break;\n@@ -2460,6 +2461,12 @@ doloop_contained_procedure_code (gfc_code **c,\n \t\t\t   info->procedure->name, &info->where_do);\n \t  break;\n \n+\tcase EXEC_IOLENGTH:\n+\t  if (co->expr1 && co->expr1->symtree->n.sym == do_var)\n+\t    gfc_error_now (errmsg, do_var->name, &co->expr1->where,\n+\t\t\t   info->procedure->name, &info->where_do);\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "db0d45cb581b7cff3c4c275fa0e9f60439a87d4a", "filename": "gcc/testsuite/gfortran.dg/do_check_16.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_16.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_16.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_16.f90?ref=52654036a544389fb66855bf3972f2a8013bec59", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+program main\n+  implicit none\n+  integer :: iq,nq,recl\n+  DO iq = 1, nq\n+     call foobar  ! { dg-error \"redefined\" }     \n+  ENDDO  \n+CONTAINS\n+\n+  subroutine foobar\n+    inquire (iolength=nq) iq ! { dg-error \"redefined\" }\n+  end subroutine foobar\n+END program main"}, {"sha": "02b8993de3879b862523fd4622cae2e126e87077", "filename": "gcc/testsuite/gfortran.dg/do_check_17.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_17.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52654036a544389fb66855bf3972f2a8013bec59/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_17.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_17.f90?ref=52654036a544389fb66855bf3972f2a8013bec59", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! PR 99345 - this used to cause an ICE.\n+! Original test case by Matthias Klose\n+program main\n+  implicit none\n+  integer :: iq,nq,recl\n+  DO iq = 1, nq\n+     CALL calc_upper_fan (iq)\n+  ENDDO  \n+CONTAINS\n+  SUBROUTINE calc_upper_fan (iq)\n+    INTEGER :: iq\n+    INTEGER :: recl\n+    INQUIRE(IOLENGTH=recl) iq\n+  END SUBROUTINE calc_upper_fan\n+END"}]}