{"sha": "6ca838330b632ebbe339a65d194afb0d863ddc21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhODM4MzMwYjYzMmViYmUzMzlhNjVkMTk0YWZiMGQ4NjNkZGMyMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-04-06T08:30:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-04-06T08:30:52Z"}, "message": "re PR rtl-optimization/85180 (Infinite loop in RTL DSE optimizer)\n\n2018-04-06  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/85180\n\t* alias.c (find_base_term): New wrapper around find_base_term\n\tunwinding CSELIB_VAL_PTR changes.\n\t(find_base_term): Do not restore CSELIB_VAL_PTR during the\n\trecursion.\n\n\t* gcc.dg/pr85180.c: New testcase.\n\nFrom-SVN: r259166", "tree": {"sha": "4dc06620d842bb76804b0257be5eed6e40596bf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dc06620d842bb76804b0257be5eed6e40596bf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca838330b632ebbe339a65d194afb0d863ddc21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca838330b632ebbe339a65d194afb0d863ddc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca838330b632ebbe339a65d194afb0d863ddc21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca838330b632ebbe339a65d194afb0d863ddc21/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54ebcca7952144986748e819751cce0c6ebba2d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebcca7952144986748e819751cce0c6ebba2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ebcca7952144986748e819751cce0c6ebba2d2"}], "stats": {"total": 70, "additions": 59, "deletions": 11}, "files": [{"sha": "76771a28364dd7450fa70438fa07823b1b0fe9d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ca838330b632ebbe339a65d194afb0d863ddc21", "patch": "@@ -1,3 +1,11 @@\n+2018-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85180\n+\t* alias.c (find_base_term): New wrapper around find_base_term\n+\tunwinding CSELIB_VAL_PTR changes.\n+\t(find_base_term): Do not restore CSELIB_VAL_PTR during the\n+\trecursion.\n+\n 2018-04-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_z10_optimize_cmp): Expand dedicated NOP"}, {"sha": "74032f8503b75eaf4c9039d699764e5894f8cd74", "filename": "gcc/alias.c", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=6ca838330b632ebbe339a65d194afb0d863ddc21", "patch": "@@ -1876,7 +1876,8 @@ rtx_equal_for_memref_p (const_rtx x, const_rtx y)\n }\n \n static rtx\n-find_base_term (rtx x)\n+find_base_term (rtx x, vec<std::pair<cselib_val *,\n+\t\t\t\t     struct elt_loc_list *> > &visited_vals)\n {\n   cselib_val *val;\n   struct elt_loc_list *l, *f;\n@@ -1910,7 +1911,7 @@ find_base_term (rtx x)\n     case POST_DEC:\n     case PRE_MODIFY:\n     case POST_MODIFY:\n-      return find_base_term (XEXP (x, 0));\n+      return find_base_term (XEXP (x, 0), visited_vals);\n \n     case ZERO_EXTEND:\n     case SIGN_EXTEND:\t/* Used for Alpha/NT pointers */\n@@ -1921,7 +1922,7 @@ find_base_term (rtx x)\n \treturn 0;\n \n       {\n-\trtx temp = find_base_term (XEXP (x, 0));\n+\trtx temp = find_base_term (XEXP (x, 0), visited_vals);\n \n \tif (temp != 0 && CONSTANT_P (temp))\n \t  temp = convert_memory_address (Pmode, temp);\n@@ -1940,7 +1941,9 @@ find_base_term (rtx x)\n \treturn static_reg_base_value[STACK_POINTER_REGNUM];\n \n       f = val->locs;\n-      /* Temporarily reset val->locs to avoid infinite recursion.  */\n+      /* Reset val->locs to avoid infinite recursion.  */\n+      if (f)\n+\tvisited_vals.safe_push (std::make_pair (val, f));\n       val->locs = NULL;\n \n       for (l = f; l; l = l->next)\n@@ -1949,16 +1952,15 @@ find_base_term (rtx x)\n \t    && !CSELIB_VAL_PTR (l->loc)->locs->next\n \t    && CSELIB_VAL_PTR (l->loc)->locs->loc == x)\n \t  continue;\n-\telse if ((ret = find_base_term (l->loc)) != 0)\n+\telse if ((ret = find_base_term (l->loc, visited_vals)) != 0)\n \t  break;\n \n-      val->locs = f;\n       return ret;\n \n     case LO_SUM:\n       /* The standard form is (lo_sum reg sym) so look only at the\n          second operand.  */\n-      return find_base_term (XEXP (x, 1));\n+      return find_base_term (XEXP (x, 1), visited_vals);\n \n     case CONST:\n       x = XEXP (x, 0);\n@@ -1984,7 +1986,7 @@ find_base_term (rtx x)\n \t   other operand is the base register.  */\n \n \tif (tmp1 == pic_offset_table_rtx && CONSTANT_P (tmp2))\n-\t  return find_base_term (tmp2);\n+\t  return find_base_term (tmp2, visited_vals);\n \n \t/* If either operand is known to be a pointer, then prefer it\n \t   to determine the base term.  */\n@@ -2001,12 +2003,12 @@ find_base_term (rtx x)\n \t   term is from a pointer or is a named object or a special address\n \t   (like an argument or stack reference), then use it for the\n \t   base term.  */\n-\trtx base = find_base_term (tmp1);\n+\trtx base = find_base_term (tmp1, visited_vals);\n \tif (base != NULL_RTX\n \t    && ((REG_P (tmp1) && REG_POINTER (tmp1))\n \t\t || known_base_value_p (base)))\n \t  return base;\n-\tbase = find_base_term (tmp2);\n+\tbase = find_base_term (tmp2, visited_vals);\n \tif (base != NULL_RTX\n \t    && ((REG_P (tmp2) && REG_POINTER (tmp2))\n \t\t || known_base_value_p (base)))\n@@ -2020,7 +2022,7 @@ find_base_term (rtx x)\n \n     case AND:\n       if (CONST_INT_P (XEXP (x, 1)) && INTVAL (XEXP (x, 1)) != 0)\n-\treturn find_base_term (XEXP (x, 0));\n+\treturn find_base_term (XEXP (x, 0), visited_vals);\n       return 0;\n \n     case SYMBOL_REF:\n@@ -2032,6 +2034,19 @@ find_base_term (rtx x)\n     }\n }\n \n+/* Wrapper around the worker above which removes locs from visited VALUEs\n+   to avoid visiting them multiple times.  We unwind that changes here.  */\n+\n+static rtx\n+find_base_term (rtx x)\n+{\n+  auto_vec<std::pair<cselib_val *, struct elt_loc_list *>, 32> visited_vals;\n+  rtx res = find_base_term (x, visited_vals);\n+  for (unsigned i = 0; i < visited_vals.length (); ++i)\n+    visited_vals[i].first->locs = visited_vals[i].second;\n+  return res;\n+}\n+\n /* Return true if accesses to address X may alias accesses based\n    on the stack pointer.  */\n "}, {"sha": "f63977ba8d4e88479c1619b73339371e1c5a38a2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ca838330b632ebbe339a65d194afb0d863ddc21", "patch": "@@ -1,3 +1,8 @@\n+2018-04-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/85180\n+\t* gcc.dg/pr85180.c: New testcase.\n+\n 2018-04-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/vector/vcond-shift.c: Use the proper conditions"}, {"sha": "07c77fbdb40a3b4b1d37bed7f5be425f5887abf3", "filename": "gcc/testsuite/gcc.dg/pr85180.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85180.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca838330b632ebbe339a65d194afb0d863ddc21/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85180.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85180.c?ref=6ca838330b632ebbe339a65d194afb0d863ddc21", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+char *bar (void);\n+__INTPTR_TYPE__ baz (void);\n+\n+void\n+foo (__INTPTR_TYPE__ *q)\n+{\n+  char *p = bar ();\n+  __INTPTR_TYPE__ a = baz ();\n+  __INTPTR_TYPE__ b = baz ();\n+  int i = 0;\n+#define X q[i++] = a; q[i++] = b; a = a + b; b = b + a;\n+#define Y X X X X X X X X X X\n+#define Z Y Y Y Y Y Y Y Y Y Y\n+  Z Z Z Z Z Z Z Z Z Z\n+      p[a] = 1;\n+  p[b] = 2;\n+}"}]}