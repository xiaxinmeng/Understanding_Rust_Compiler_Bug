{"sha": "82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJiYjJlYWVhZGQ1NmRmMWVhNjQyNzdkYmM3MDlhZTlhYTk4YTVmMg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-20T14:09:36Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-20T14:09:36Z"}, "message": "sh.exp (check_effective_target_sh4a, [...]): New effective target checks.\n\ngcc/testsuite/\n\t* gcc.target/sh/sh.exp (check_effective_target_sh4a,\n\tcheck_effective_target_big_endian, check_effective_target_little_endian,\n\tcheck_effective_target_any_fpu, check_effective_target_double_fpu,\n\tcheck_effective_target_use_single_only_fpu,\n\tcheck_effective_target_default_single_fpu,\n\tcheck_effective_target_no_fpu, check_effective_target_has_xf_regs,\n\tcheck_effective_target_has_fsca, check_effective_target_has_fsrra,\n\tcheck_effective_target_has_fpchg, check_effective_target_has_dyn_shift,\n\tcheck_effective_target_fmovd_enabled,\n\tcheck_effective_target_has_privileged, check_effective_target_has_pref,\n\tcheck_effective_target_banked_r0r7_isr,\n\tcheck_effective_target_stack_save_isr): New effective target checks.\n\t* gcc.target/sh/pr51244-16.c: Merge into pr51244-15.c.\n\t* gcc.target/sh/pr51244-20-sh2a.c: Merge into pr51244-20.c.\n\t* gcc.target/sh/pr51244-3.c: Merge into pr51244-2.c\n\t* gcc.target/sh/pr54089-5.c: Merge into pr54089-4.c.\n\t* gcc.target/sh/20080410-1.c: Use new effective target checks.\n\t* gcc.target/sh/attr-isr-nosave_low_regs.c: Likewise.\n\t* gcc.target/sh/attr-isr.c: Likewise.\n\t* gcc.target/sh/fpul-usage-1.c: Likewise.\n\t* gcc.target/sh/hiconst.c: Likewise.\n\t* gcc.target/sh/mfmovd.c: Likewise.\n\t* gcc.target/sh/pr21255-3.c: Likewise.\n\t* gcc.target/sh/pr33135-1.c: Likewise.\n\t* gcc.target/sh/pr33135-2.c: Likewise.\n\t* gcc.target/sh/pr33135-3.c: Likewise.\n\t* gcc.target/sh/pr33135-4.c: Likewise.\n\t* gcc.target/sh/pr39423-2.c: Likewise.\n\t* gcc.target/sh/pr49880-4.c: Likewise.\n\t* gcc.target/sh/pr49880-5.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-1.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-2.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-3.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-postinc-4.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-1.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-2.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-3.c: Likewise.\n\t* gcc.target/sh/pr50749-sf-predec-4.c: Likewise.\n\t* gcc.target/sh/pr50751-2.c: Likewise.\n\t* gcc.target/sh/pr50751-3.c: Likewise.\n\t* gcc.target/sh/pr50751-5.c: Likewise.\n\t* gcc.target/sh/pr50751-6.c: Likewise.\n\t* gcc.target/sh/pr50751-8.c: Likewise.\n\t* gcc.target/sh/pr51244-15.c: Likewise.\n\t* gcc.target/sh/pr51244-2.c: Likewise.\n\t* gcc.target/sh/pr51244-20.c: Likewise.\n\t* gcc.target/sh/pr51244-6.c: Likewise.\n\t* gcc.target/sh/pr52483-4.c: Likewise.\n\t* gcc.target/sh/pr53511-1.c: Likewise.\n\t* gcc.target/sh/pr53512-1.c: Likewise.\n\t* gcc.target/sh/pr53512-2.c: Likewise.\n\t* gcc.target/sh/pr53512-3.c: Likewise.\n\t* gcc.target/sh/pr53512-4.c: Likewise.\n\t* gcc.target/sh/pr53513-1.c: Likewise.\n\t* gcc.target/sh/pr54089-2.c: Likewise.\n\t* gcc.target/sh/pr54089-3.c: Likewise.\n\t* gcc.target/sh/pr54089-4.c: Likewise.\n\t* gcc.target/sh/pr54602-2.c: Likewise.\n\t* gcc.target/sh/pr54602-3.c: Likewise.\n\t* gcc.target/sh/pr54602-4.c: Likewise.\n\t* gcc.target/sh/pr54680.c: Likewise.\n\t* gcc.target/sh/pr55303-1.c: Likewise.\n\t* gcc.target/sh/pr55303-2.c: Likewise.\n\t* gcc.target/sh/pr55303-3.c: Likewise.\n\t* gcc.target/sh/pr56547-1.c: Likewise.\n\t* gcc.target/sh/pr56547-2.c: Likewise.\n\t* gcc.target/sh/pr61195.c: Likewise.\n\t* gcc.target/sh/pr61996.c: Likewise.\n\t* gcc.target/sh/pr6526.c: Likewise.\n\t* gcc.target/sh/pragma-isr-nosave_low_regs.c: Likewise.\n\t* gcc.target/sh/pragma-isr-trapa2.c: Likewise.\n\t* gcc.target/sh/prefetch.c: Likewise.\n\t* gcc.target/sh/rte-delay-slot.c: Likewise.\n\t* gcc.target/sh/sh2a-band.c: Likewise.\n\t* gcc.target/sh/sh2a-bclr.c: Likewise.\n\t* gcc.target/sh/sh2a-bclrmem.c: Likewise.\n\t* gcc.target/sh/sh2a-bld.c: Likewise.\n\t* gcc.target/sh/sh2a-bor.c: Likewise.\n\t* gcc.target/sh/sh2a-bset.c: Likewise.\n\t* gcc.target/sh/sh2a-bsetmem.c: Likewise.\n\t* gcc.target/sh/sh2a-bxor.c: Likewise.\n\t* gcc.target/sh/sh2a-jsrn.c: Likewise.\n\t* gcc.target/sh/sh2a-movi20s.c: Likewise.\n\t* gcc.target/sh/sh2a-movrt.c: Likewise.\n\t* gcc.target/sh/sh2a-resbank.c: Likewise.\n\t* gcc.target/sh/sh2a-rtsn.c: Likewise.\n\t* gcc.target/sh/sh2a-tbr-jump.c: Likewise.\n\t* gcc.target/sh/sh4a-bitmovua.c: Likewise.\n\t* gcc.target/sh/sh4a-cosf.c: Likewise.\n\t* gcc.target/sh/sh4a-fsrra.c: Likewise.\n\t* gcc.target/sh/sh4a-memmovua.c: Likewise.\n\t* gcc.target/sh/sh4a-sincosf.c: Likewise.\n\t* gcc.target/sh/sh4a-sinf.c: Likewise.\n\nFrom-SVN: r227944", "tree": {"sha": "e2c92b7e16d1343ff322f3e782b50509a2997ee9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2c92b7e16d1343ff322f3e782b50509a2997ee9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/comments", "author": null, "committer": null, "parents": [{"sha": "7c3e70560bcf162884f414c54720efcd8e68304f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c3e70560bcf162884f414c54720efcd8e68304f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c3e70560bcf162884f414c54720efcd8e68304f"}], "stats": {"total": 690, "additions": 445, "deletions": 245}, "files": [{"sha": "9142a39f3676c99a9f2f572378cad8e77bb87fbb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,102 @@\n+2015-09-20  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* gcc.target/sh/sh.exp (check_effective_target_sh4a,\n+\tcheck_effective_target_big_endian, check_effective_target_little_endian,\n+\tcheck_effective_target_any_fpu, check_effective_target_double_fpu,\n+\tcheck_effective_target_use_single_only_fpu,\n+\tcheck_effective_target_default_single_fpu,\n+\tcheck_effective_target_no_fpu, check_effective_target_has_xf_regs,\n+\tcheck_effective_target_has_fsca, check_effective_target_has_fsrra,\n+\tcheck_effective_target_has_fpchg, check_effective_target_has_dyn_shift,\n+\tcheck_effective_target_fmovd_enabled,\n+\tcheck_effective_target_has_privileged, check_effective_target_has_pref,\n+\tcheck_effective_target_banked_r0r7_isr,\n+\tcheck_effective_target_stack_save_isr): New effective target checks.\n+\t* gcc.target/sh/pr51244-16.c: Merge into pr51244-15.c.\n+\t* gcc.target/sh/pr51244-20-sh2a.c: Merge into pr51244-20.c.\n+\t* gcc.target/sh/pr51244-3.c: Merge into pr51244-2.c\n+\t* gcc.target/sh/pr54089-5.c: Merge into pr54089-4.c.\n+\t* gcc.target/sh/20080410-1.c: Use new effective target checks.\n+\t* gcc.target/sh/attr-isr-nosave_low_regs.c: Likewise.\n+\t* gcc.target/sh/attr-isr.c: Likewise.\n+\t* gcc.target/sh/fpul-usage-1.c: Likewise.\n+\t* gcc.target/sh/hiconst.c: Likewise.\n+\t* gcc.target/sh/mfmovd.c: Likewise.\n+\t* gcc.target/sh/pr21255-3.c: Likewise.\n+\t* gcc.target/sh/pr33135-1.c: Likewise.\n+\t* gcc.target/sh/pr33135-2.c: Likewise.\n+\t* gcc.target/sh/pr33135-3.c: Likewise.\n+\t* gcc.target/sh/pr33135-4.c: Likewise.\n+\t* gcc.target/sh/pr39423-2.c: Likewise.\n+\t* gcc.target/sh/pr49880-4.c: Likewise.\n+\t* gcc.target/sh/pr49880-5.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-1.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-2.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-3.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-postinc-4.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-1.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-2.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-3.c: Likewise.\n+\t* gcc.target/sh/pr50749-sf-predec-4.c: Likewise.\n+\t* gcc.target/sh/pr50751-2.c: Likewise.\n+\t* gcc.target/sh/pr50751-3.c: Likewise.\n+\t* gcc.target/sh/pr50751-5.c: Likewise.\n+\t* gcc.target/sh/pr50751-6.c: Likewise.\n+\t* gcc.target/sh/pr50751-8.c: Likewise.\n+\t* gcc.target/sh/pr51244-15.c: Likewise.\n+\t* gcc.target/sh/pr51244-2.c: Likewise.\n+\t* gcc.target/sh/pr51244-20.c: Likewise.\n+\t* gcc.target/sh/pr51244-6.c: Likewise.\n+\t* gcc.target/sh/pr52483-4.c: Likewise.\n+\t* gcc.target/sh/pr53511-1.c: Likewise.\n+\t* gcc.target/sh/pr53512-1.c: Likewise.\n+\t* gcc.target/sh/pr53512-2.c: Likewise.\n+\t* gcc.target/sh/pr53512-3.c: Likewise.\n+\t* gcc.target/sh/pr53512-4.c: Likewise.\n+\t* gcc.target/sh/pr53513-1.c: Likewise.\n+\t* gcc.target/sh/pr54089-2.c: Likewise.\n+\t* gcc.target/sh/pr54089-3.c: Likewise.\n+\t* gcc.target/sh/pr54089-4.c: Likewise.\n+\t* gcc.target/sh/pr54602-2.c: Likewise.\n+\t* gcc.target/sh/pr54602-3.c: Likewise.\n+\t* gcc.target/sh/pr54602-4.c: Likewise.\n+\t* gcc.target/sh/pr54680.c: Likewise.\n+\t* gcc.target/sh/pr55303-1.c: Likewise.\n+\t* gcc.target/sh/pr55303-2.c: Likewise.\n+\t* gcc.target/sh/pr55303-3.c: Likewise.\n+\t* gcc.target/sh/pr56547-1.c: Likewise.\n+\t* gcc.target/sh/pr56547-2.c: Likewise.\n+\t* gcc.target/sh/pr61195.c: Likewise.\n+\t* gcc.target/sh/pr61996.c: Likewise.\n+\t* gcc.target/sh/pr6526.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-nosave_low_regs.c: Likewise.\n+\t* gcc.target/sh/pragma-isr-trapa2.c: Likewise.\n+\t* gcc.target/sh/prefetch.c: Likewise.\n+\t* gcc.target/sh/rte-delay-slot.c: Likewise.\n+\t* gcc.target/sh/sh2a-band.c: Likewise.\n+\t* gcc.target/sh/sh2a-bclr.c: Likewise.\n+\t* gcc.target/sh/sh2a-bclrmem.c: Likewise.\n+\t* gcc.target/sh/sh2a-bld.c: Likewise.\n+\t* gcc.target/sh/sh2a-bor.c: Likewise.\n+\t* gcc.target/sh/sh2a-bset.c: Likewise.\n+\t* gcc.target/sh/sh2a-bsetmem.c: Likewise.\n+\t* gcc.target/sh/sh2a-bxor.c: Likewise.\n+\t* gcc.target/sh/sh2a-jsrn.c: Likewise.\n+\t* gcc.target/sh/sh2a-movi20s.c: Likewise.\n+\t* gcc.target/sh/sh2a-movrt.c: Likewise.\n+\t* gcc.target/sh/sh2a-resbank.c: Likewise.\n+\t* gcc.target/sh/sh2a-rtsn.c: Likewise.\n+\t* gcc.target/sh/sh2a-tbr-jump.c: Likewise.\n+\t* gcc.target/sh/sh4a-bitmovua.c: Likewise.\n+\t* gcc.target/sh/sh4a-cosf.c: Likewise.\n+\t* gcc.target/sh/sh4a-fsrra.c: Likewise.\n+\t* gcc.target/sh/sh4a-memmovua.c: Likewise.\n+\t* gcc.target/sh/sh4a-sincosf.c: Likewise.\n+\t* gcc.target/sh/sh4a-sinf.c: Likewise.\n+\n 2015-09-20  Jeff Law  <law@redhat.com>\n \n-        PR tree-optimization/47679\n+\tPR tree-optimization/47679\n \t* g++.dg/warn/Wuninitialized-6.C: New test.\n \n 2015-09-18  Ville Voutilainen  <ville.voutilainen@gmail.com>"}, {"sha": "6e9e9c14476f9bd14b3a65a9a8088074dba156a9", "filename": "gcc/testsuite/gcc.target/sh/20080410-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2F20080410-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { little_endian } } }  */\n /* { dg-options \"-O0\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"-mb\" \"\" }  */\n /* { dg-final { scan-assembler-not \"add\\tr0,r0\" } } */\n \n /* This test checks chain reloads conflicts.  If they don't"}, {"sha": "5087a73b502205f8ce3f968d6380e0b564175b20", "filename": "gcc/testsuite/gcc.target/sh/attr-isr-nosave_low_regs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr-nosave_low_regs.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -3,8 +3,7 @@\n    (On SH3* and SH4* r0..r7 are banked)\n    Call-saved registers r8..r13 also don't need to be restored.\n    To test that we look for register push insns such as 'mov.l r0,@-r15'.  */\n-/* { dg-do compile { target { { \"sh*-*-*\" } && nonpic } } }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1*\" \"-m2*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-do compile { target { { banked_r0r7_isr } && nonpic } } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n /* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */"}, {"sha": "c2efd765e2e6b34bd3e1b4048df43855e2db0a16", "filename": "gcc/testsuite/gcc.target/sh/attr-isr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fattr-isr.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* The call will clobber r0..r7, which will need not be saved/restored, but\n    not the call-saved registers r8..r14.  Check this by counting the register\n    push insns.  */\n-/* { dg-do compile { target { { { sh-*-* sh[1234ble]*-*-* } && { ! sh2a*-*-* } } && nonpic } } } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m2a*\" } { \"\" } } */\n+/* { dg-do compile { target { { ! sh2a } && nonpic } } } */\n /* { dg-options \"-O\" } */\n /* { dg-final { scan-assembler-times \"rte\" 1} } */\n /* { dg-final { scan-assembler-times \"mov.l\\tr\\[0-7\\],@-r15\" 8 } }  */"}, {"sha": "277f708b6c614fb9a73d297c85436ae254ea8c54", "filename": "gcc/testsuite/gcc.target/sh/fpul-usage-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ffpul-usage-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that the FPUL register is used when reading a float as an int and\n    vice versa, as opposed to pushing and popping the values over the stack.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fpul\" } } */\n /* { dg-final { scan-assembler-not \"r15\" } } */\n "}, {"sha": "d8911a52d78cf1a5005c42f89a6e45d59d1d2d14", "filename": "gcc/testsuite/gcc.target/sh/hiconst.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fhiconst.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile } */\n /* { dg-options \"-O1\" } */\n \n char a;"}, {"sha": "3fb1e8ee8c776b78ef8925367ad90b715bd5e8b9", "filename": "gcc/testsuite/gcc.target/sh/mfmovd.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fmfmovd.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,7 @@\n /* Verify that we generate fmov.d instructions to move doubles when -mfmovd \n    option is enabled.  */\n-/* { dg-do compile }  */\n-/* { dg-require-effective-target hard_float } */\n+/* { dg-do compile { target { double_fpu } } }  */\n /* { dg-options \"-mfmovd\" } */\n-/* { dg-skip-if \"\" { *-*-* }  { \"*-single-only\" } { \"\" } } */\n /* { dg-final { scan-assembler \"fmov.d\" } } */\n \n extern double g;"}, {"sha": "7dccf073c8e64b349fc2bbcd6b95bcd1da938071", "filename": "gcc/testsuite/gcc.target/sh/pr21255-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr21255-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { double_fpu } } }  */\n /* { dg-options \"-O2 -fomit-frame-pointer\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m2e\" \"-m3e\" \"*single-only\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"mov #?0,r.*; mov #?20,r\" } } */\n /* { dg-final { scan-assembler \"mov #?1077149696,r.*; mov #?0,r\" } } */\n double"}, {"sha": "a6e88387d6f7418aa4251fb0564df5a03714768e", "filename": "gcc/testsuite/gcc.target/sh/pr33135-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that fcmp/eq and fcmp/gt instructions are generated by default\n    (implicit -mieee).  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */\n /* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n \n@@ -29,4 +28,3 @@ test_03 (double a, double b)\n {\n   return a >= b;\n }\n-"}, {"sha": "ec6452b8810d2afc1e409f1ec90136bdc83943e9", "filename": "gcc/testsuite/gcc.target/sh/pr33135-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that only the fcmp/gt instruction is generated when specifying\n    -ffinite-math-only (implicit -mno-ieee).  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1 -ffinite-math-only\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fcmp/eq\" } } */\n /* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n "}, {"sha": "c5b9274d66b30aaf51308dc2cd77bfe7f51a497b", "filename": "gcc/testsuite/gcc.target/sh/pr33135-3.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that fcmp/eq and fcmp/gt instructions are generated when specifying\n    -ffinite-math-only and -mieee.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1 -ffinite-math-only -mieee\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fcmp/eq\" 4 } } */\n /* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n \n@@ -29,4 +28,3 @@ test_03 (double a, double b)\n {\n   return a >= b;\n }\n-"}, {"sha": "0c5ff1c001c5149697f1f6e4b5d23990512657ad", "filename": "gcc/testsuite/gcc.target/sh/pr33135-4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr33135-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that only the fcmp/gt instruction is generated when specifying\n    -fno-finite-math-only and -mno-ieee.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1 -fno-finite-math-only -mno-ieee\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fcmp/eq\" } } */\n /* { dg-final { scan-assembler-times \"fcmp/gt\" 4 } } */\n \n@@ -29,4 +28,3 @@ test_03 (double a, double b)\n {\n   return a >= b;\n }\n-"}, {"sha": "962d982059ad7e96ba0e5d2b2b9d9d733ecb8efc", "filename": "gcc/testsuite/gcc.target/sh/pr39423-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr39423-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that displacement addressing is used for indexed addresses with a\n    small offset, instead of re-calculating the index and that the movu.w\n    instruction is used on SH2A.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add\\t#1\" } } */\n /* { dg-final { scan-assembler \"movu.w\" } } */\n "}, {"sha": "8819be0c72314e368d24537c8a4d845d8c1ba427", "filename": "gcc/testsuite/gcc.target/sh/pr49880-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that the option -mdiv=call-fp does not produce calls to the\n    library function that uses FPU to implement integer division if FPU insns\n    are not supported or are disabled.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { no_fpu } } }  */\n /* { dg-options \"-mdiv=call-fp\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" } }  */\n /* { dg-final { scan-assembler-not \"sdivsi3_i4\\n|udivsi3_i4\\n\" } }  */\n \n int"}, {"sha": "f83a35bc261118032ff12547973bdbf6d0199cda", "filename": "gcc/testsuite/gcc.target/sh/pr49880-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr49880-5.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that the option -mdiv=call-fp results in the corresponding library\n    function calls on targets that have a double precision FPU.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { double_fpu || use_single_only_fpu } } }  */\n /* { dg-options \"-mdiv=call-fp\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m2a\" \"-m4\" \"-m4a\" \"*single-only\" } }  */\n /* { dg-final { scan-assembler \"sdivsi3_i4\\n\" } }  */\n /* { dg-final { scan-assembler \"udivsi3_i4\\n\" } }  */\n "}, {"sha": "3da1cca565cee3e604ec6c260ce8c6b6dc6a9893", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-1.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,7 +1,6 @@\n /* PR target/50749: Verify that post-increment addressing is generated.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */\n \n float*\n@@ -12,4 +11,3 @@ test_func_00 (float* p, float* x)\n   *x = r;\n   return p;\n }\n-"}, {"sha": "ec9eff46954d873a0099d3ed2e5216416c0bdf62", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that subsequent post-increment addressings\n    are generated.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n \n float*"}, {"sha": "3ce81b646919754114ebe7203d8152b8f857ed54", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 1 } } */\n \n float"}, {"sha": "65f45a3f9754f0e17aaf6d16fab6506577e74e6a", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-postinc-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-postinc-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that post-increment addressing is generated\n    inside a loop.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\t@r\\[0-9]\\+\\\\+,fr\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n \n float"}, {"sha": "05e603d4613e7e8e9d1fd900539da93018cff441", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,7 +1,6 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n \n float*"}, {"sha": "22ec161f4ae52986fcc3ad20514c085c234070f3", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that subsequent pre-decrement addressings\n    are generated.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 5 { xfail *-*-*} } } */\n \n float*"}, {"sha": "6ed3254a089b0f8363f0a9d3bd73b47e878cf3ee", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 1 } } */\n \n float*"}, {"sha": "26bc3eb9ac3866be40ba1d31d79701598ab628fe", "filename": "gcc/testsuite/gcc.target/sh/pr50749-sf-predec-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50749-sf-predec-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* PR target/50749: Verify that pre-decrement addressing is generated\n    inside a loop.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmov.s\\tfr\\[0-9]\\+,@-r\\[0-9]\\+\" 3 { xfail *-*-*} } } */\n \n float*"}, {"sha": "c8780f94e4d39eb3d6ed88de0a238cdb99ee6aef", "filename": "gcc/testsuite/gcc.target/sh/pr50751-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -2,9 +2,8 @@\n    base address is adjusted only once.  On SH2A this test is skipped because\n    there is a 4 byte mov.b insn that can handle larger displacements.  Thus\n    on SH2A the base address will not be adjusted in this case.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { ! sh2a } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"add\" 2 } } */\n \n void"}, {"sha": "caf8a8703559ed4a48ba25ca984dcd3ee6d683c8", "filename": "gcc/testsuite/gcc.target/sh/pr50751-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that on SH2A the 4 byte mov.b displacement insn is generated to\n    handle larger displacements.  If it is generated correctly, there should\n    be no base address adjustments outside the mov.b insns.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */\n \n void"}, {"sha": "89658c0cc35a4b5187f8f022f92bc6e97b43f0d4", "filename": "gcc/testsuite/gcc.target/sh/pr50751-5.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-5.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -2,9 +2,8 @@\n    base address is adjusted only once.  On SH2A this test is skipped because\n    there is a 4 byte mov.w insn that can handle larger displacements.  Thus\n    on SH2A the base address will not be adjusted in this case.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { ! sh2a } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n /* { dg-final { scan-assembler-times \"add\" 2 } } */\n \n void"}, {"sha": "e8f0e3e16862c5a296592c9223497c9337f192ec", "filename": "gcc/testsuite/gcc.target/sh/pr50751-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-6.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that on SH2A the 4 byte mov.w displacement insn is generated to\n    handle larger displacements.  If it is generated correctly, there should\n    be no base address adjustments outside the mov.w insns.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-not \"add|sub\" } } */\n \n void"}, {"sha": "07bbee4fe8f64110fc5fcd90d600480c8a2c4c5c", "filename": "gcc/testsuite/gcc.target/sh/pr50751-8.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr50751-8.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that on SH2A the 4 byte movu.b and movu.w displacement insns are\n    generated.  This has to be checked with -O2 because some of the patterns\n    rely on peepholes.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"movu.b\" 4 } } */\n /* { dg-final { scan-assembler-times \"movu.w\" 3 } } */\n "}, {"sha": "8b9d57bf8d3d9b9fbf6ff2c37c6260d61773e7e9", "filename": "gcc/testsuite/gcc.target/sh/pr51244-15.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-15.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,13 +1,16 @@\n /* Check that the redundant test removal code in the *cbranch_t split works\n-   as expected on non-SH2A targets.  Because on SH2A the movrt instruction\n-   is used, this test is re-used and checked differently in pr51244-16.c.  */\n+   as expected.  */\n /* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n-/* { dg-final { scan-assembler-times \"tst\" 6 } } */\n-/* { dg-final { scan-assembler-times \"movt\" 6 } } */\n-/* { dg-final { scan-assembler-times \"xor\" 3 } } */\n+\n /* { dg-final { scan-assembler-not \"extu|exts|negc\" } } */\n+/* { dg-final { scan-assembler-times \"tst\" 6 } } */\n+\n+/* { dg-final { scan-assembler-times \"movt\" 6 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"xor\" 3 { target { ! sh2a } } } } */\n+\n+/* { dg-final { scan-assembler-times \"movt\" 3 { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"movrt\" 3 { target { sh2a } } } } */\n \n typedef char bool;\n "}, {"sha": "5132f7433f32136be3ffc3c9e234c505eebdba79", "filename": "gcc/testsuite/gcc.target/sh/pr51244-16.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-16.c?ref=7c3e70560bcf162884f414c54720efcd8e68304f", "patch": "@@ -1,11 +0,0 @@\n-/* Check that the redundant test removal code in the *cbranch_t split works\n-   as expected on SH2A targets.  */\n-/* { dg-do compile }  */\n-/* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n-/* { dg-final { scan-assembler-times \"tst\" 6 } } */\n-/* { dg-final { scan-assembler-times \"movt\" 3 } } */\n-/* { dg-final { scan-assembler-times \"movrt\" 3 } } */\n-/* { dg-final { scan-assembler-not \"extu|exts|negc\" } } */\n-\n-#include \"pr51244-15.c\""}, {"sha": "c6318389ff36a5a6e382f03e110fe1ff4fde2570", "filename": "gcc/testsuite/gcc.target/sh/pr51244-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,11 +1,11 @@\n /* Check that when taking the complement of the T bit using the negc\n-   instruction pattern, the constant -1 is loaded only once.\n-   On SH2A this test is skipped because the movrt instruction is used\n-   to get the complement of the T bit.  */\n+   instruction pattern, the constant -1 is loaded only once on non-SH2A and\n+   that the movrt insn is generated on SH2A.\n /* { dg-do compile }  */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n-/* { dg-final { scan-assembler-times \"mov\\t#-1\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"mov\\t#-1\" 1 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"movrt\" 4 { target { sh2a } } } } */\n \n void\n testfunc_00 (int* a, int* b, int c, int d)"}, {"sha": "2c6f365a587920a97399901bcf65039293603029", "filename": "gcc/testsuite/gcc.target/sh/pr51244-20-sh2a.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20-sh2a.c?ref=7c3e70560bcf162884f414c54720efcd8e68304f", "patch": "@@ -1,14 +0,0 @@\n-/* Check that the SH specific sh_treg_combine RTL optimization pass works as\n-   expected.  */\n-/* { dg-do compile }  */\n-/* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n-/* { dg-final { scan-assembler-times \"tst\" 6 } } */\n-/* { dg-final { scan-assembler-not \"movt\" } } */\n-/* { dg-final { scan-assembler-times \"nott\" 2 } } */\n-/* { dg-final { scan-assembler-times \"cmp/eq\" 2 } } */\n-/* { dg-final { scan-assembler-times \"cmp/hi\" 4 } } */\n-/* { dg-final { scan-assembler-times \"cmp/gt\" 2 } } */\n-/* { dg-final { scan-assembler-not \"not\\t\" } } */\n-\n-#include \"pr51244-20.c\""}, {"sha": "c342163160b2cf10f26f59c54c3043ba478561c8", "filename": "gcc/testsuite/gcc.target/sh/pr51244-20.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-20.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,15 +1,19 @@\n /* Check that the SH specific sh_treg_combine RTL optimization pass works as\n-   expected.  On SH2A the expected insns are slightly different, see\n-   pr51244-20-sh2a.c.  */\n+   expected.  */\n /* { dg-do compile }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } } */\n-/* { dg-final { scan-assembler-times \"tst\" 7 } } */\n-/* { dg-final { scan-assembler-times \"movt\" 2 } } */\n+\n+/* { dg-final { scan-assembler-not \"not\\t\" } } */\n /* { dg-final { scan-assembler-times \"cmp/eq\" 2 } } */\n /* { dg-final { scan-assembler-times \"cmp/hi\" 4 } } */\n /* { dg-final { scan-assembler-times \"cmp/gt\" 2 } } */\n-/* { dg-final { scan-assembler-not \"not\\t\" } } */\n+\n+/* { dg-final { scan-assembler-times \"tst\" 7 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"movt\" 2 { target { ! sh2a } } } } */\n+\n+/* { dg-final { scan-assembler-times \"tst\" 6 { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-not \"movt\" { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"nott\" 2 { target { sh2a } } } } */\n \n \n /* non-SH2A: 2x tst, 1x movt, 2x cmp/eq, 1x cmp/hi"}, {"sha": "92963c4bec97011f6254e5b7bc9bc85e762d352a", "filename": "gcc/testsuite/gcc.target/sh/pr51244-3.c", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-3.c?ref=7c3e70560bcf162884f414c54720efcd8e68304f", "patch": "@@ -1,16 +0,0 @@\n-/* Check that when taking the complement of the T bit on SH2A, \n-   the movrt instruction is being generated.  */\n-/* { dg-do compile }  */\n-/* { dg-options \"-O1 -mbranch-cost=2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n-/* { dg-final { scan-assembler-times \"movrt\" 4 } } */\n-\n-void\n-testfunc_00 (int* a, int* b, int c, int d)\n-{\n-  b[0] = a[0] != c;\n-  b[1] = a[1] != d;\n-  b[2] = a[2] != c;\n-  b[3] = a[3] != d;\n-}\n-"}, {"sha": "57f1f31f2addb5b6078e80a204c4ab0a53db241d", "filename": "gcc/testsuite/gcc.target/sh/pr51244-6.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-6.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that no unnecessary sign or zero extension insn is generated after\n    a negc or movrt insn that stores the inverted T bit in a reg.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"extu|exts\" } } */\n \n float"}, {"sha": "81a24d4f48118db9e20b076801eebfc2248032b6", "filename": "gcc/testsuite/gcc.target/sh/pr52483-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr52483-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Check that loads/stores from/to volatile floating point mems utilize\n    indexed addressing modes. */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"@\\\\(r0,\" 2 } } */\n \n float"}, {"sha": "bd6ac00fdd67e8e65a1bf6b2c0ce66e033b2b508", "filename": "gcc/testsuite/gcc.target/sh/pr53511-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53511-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,7 +1,6 @@\n /* Verify that the fmac insn is used for the standard fmaf function.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fmac\" } } */\n \n #include <math.h>"}, {"sha": "14106c02facd51f08ca1d4a779bff83a8c8dda75", "filename": "gcc/testsuite/gcc.target/sh/pr53512-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the fsca insn is used when specifying -mfsca and\n   -funsafe-math-optimizations.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsca } } }  */\n /* { dg-options \"-O1 -mfsca -funsafe-math-optimizations\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 3 } } */\n \n #include <math.h>"}, {"sha": "a79e58adb749e7d27b8771d050ea44ee9304786e", "filename": "gcc/testsuite/gcc.target/sh/pr53512-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the fsca insn is not used when specifying -mno-fsca and\n   -funsafe-math-optimizations.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsca } } }  */\n /* { dg-options \"-O1 -mno-fsca -funsafe-math-optimizations\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fsca\" } } */\n \n #include <math.h>"}, {"sha": "19e9ede8156b6125f3fdf31acf9fd42018b21bce", "filename": "gcc/testsuite/gcc.target/sh/pr53512-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the fsrra insn is used when specifying -mfsrra and\n   -funsafe-math-optimizations and -ffinite-math-only.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsrra } } }  */\n /* { dg-options \"-O1 -mfsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler \"fsrra\" } } */\n \n #include <math.h>"}, {"sha": "a1d3e8141170956b6fc2a796232c13055f2cd48d", "filename": "gcc/testsuite/gcc.target/sh/pr53512-4.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53512-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the fsrra insn is not used when specifying -mno-fsrra and\n   -funsafe-math-optimizations and -ffinite-math-only.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsrra } } }  */\n /* { dg-options \"-O1 -mno-fsrra -funsafe-math-optimizations -ffinite-math-only\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-not \"fsrra\" } } */\n \n #include <math.h>\n@@ -12,4 +11,3 @@ test_func_00 (float x)\n {\n   return 1 / sqrtf (x);\n }\n-"}, {"sha": "a1106111c7bbeccb15bf93d525281f39abecc8b8", "filename": "gcc/testsuite/gcc.target/sh/pr53513-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53513-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53513-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr53513-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,6 @@\n /* Check that fpchg is used to switch FPSCR.PR mode on SH4A.  */\n+/* { dg-do compile { target { has_fpchg } } }  */\n /* { dg-additional-options \"-O\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" } }  */\n /* { dg-final { scan-assembler \"fpchg\" } }  */\n /* { dg-final { scan-assembler-not \"fpscr\" } }  */\n "}, {"sha": "e6d6a0ed8e5ffcfaea5e81127b46457c9ee8c2dd", "filename": "gcc/testsuite/gcc.target/sh/pr54089-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -9,9 +9,8 @@\n \tmov\tr4,r0\n \trts\n \trotcr\tr0  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_dyn_shift } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m3* -m2a* -m4*\" } }  */\n /* { dg-final { scan-assembler-not \"neg\" } } */\n \n unsigned int"}, {"sha": "7370f189d18582e057e0fe01d064054754beaf2c", "filename": "gcc/testsuite/gcc.target/sh/pr54089-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* The dynamic shift library functions truncate the shift count to 5 bits.\n    Verify that this is taken into account and no extra shift count\n    truncations are generated before the library call.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { ! has_dyn_shift } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2\" \"-m2e*\" } } */\n /* { dg-final { scan-assembler-not \"and\" } } */\n /* { dg-final { scan-assembler-not \"#31\" } } */\n "}, {"sha": "421d7bf80adf591a9027d5ab5f20c4d7d1f8723d", "filename": "gcc/testsuite/gcc.target/sh/pr54089-4.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,11 +1,15 @@\n /* Check that the rotcr instruction is generated when shifting the\n-   negated T bit on non-SH2A.  */\n+   negated T bit on non-SH2A.\n+   On SH2A expect a movrt rotr sequence instead.  */\n /* { dg-do compile }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" \"-m2a*\" } { \"\" } }  */\n-/* { dg-final { scan-assembler-times \"rotcr\" 1 } } */\n-/* { dg-final { scan-assembler-times \"tst\" 1 } } */\n-/* { dg-final { scan-assembler-times \"movt\" 1 } } */\n+\n+/* { dg-final { scan-assembler-times \"rotcr\" 1 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"tst\" 1 { target { ! sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"movt\" 1 { target { ! sh2a } } } } */\n+\n+/* { dg-final { scan-assembler-times \"movrt\" 1 { target { sh2a } } } } */\n+/* { dg-final { scan-assembler-times \"rotr\" 1 { target { sh2a } } } } */\n \n int\n test_00 (int a, int b)"}, {"sha": "decb9db9504cf9c6c312e716efd86e3fe25b2e87", "filename": "gcc/testsuite/gcc.target/sh/pr54089-5.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c3e70560bcf162884f414c54720efcd8e68304f/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-5.c?ref=7c3e70560bcf162884f414c54720efcd8e68304f", "patch": "@@ -1,14 +0,0 @@\n-/* Check that the movrt rotr instruction sequence is generated when shifting\n-   the negated T bit on SH2A.  */\n-/* { dg-do compile }  */\n-/* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n-/* { dg-final { scan-assembler-times \"movrt\" 1 } } */\n-/* { dg-final { scan-assembler-times \"rotr\" 1 } } */\n-\n-int\n-test_00 (int a, int b)\n-{\n-  int r = a != b;\n-  return r << 31;\n-}"}, {"sha": "f5d5c77bba06a18616c190df2911c37d9c3af197", "filename": "gcc/testsuite/gcc.target/sh/pr54602-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Verify that the delay slot is not stuffed with register pop insns for\n    interrupt handler function returns on SH1* and SH2* targets, where the\n    rte insn uses the stack pointer.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { stack_save_isr } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2*\" } }  */\n /* { dg-final { scan-assembler-times \"nop\" 1 } } */\n \n int test00 (int a, int b);"}, {"sha": "37dc005121cb9b7956860c2cb7f69576f23fb203", "filename": "gcc/testsuite/gcc.target/sh/pr54602-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the rte delay slot is not stuffed with register pop insns\n    which touch the banked registers r0..r7 on SH3* and SH4* targets.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { banked_r0r7_isr } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n /* { dg-final { scan-assembler-times \"nop\" 1 } } */\n \n int __attribute__ ((interrupt_handler))"}, {"sha": "8e044ed47add7f62906b4da85477bb861135eca4", "filename": "gcc/testsuite/gcc.target/sh/pr54602-4.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54602-4.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Verify that the delay slot is stuffed with register pop insns on SH3* and\n    SH4* targets, where the stack pointer is not used by the rte insn.  If\n    everything works out, we won't see a nop insn.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { banked_r0r7_isr } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m3*\" \"-m4*\" } }  */\n /* { dg-final { scan-assembler-not \"rte\\n\\tnop\" } } */\n \n int test00 (int a, int b);"}, {"sha": "7b02de35464787ccdc4eb5b28be01a71e8ca668f", "filename": "gcc/testsuite/gcc.target/sh/pr54680.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Verify that the fsca input value is not converted to float and then back\n    to int.  Notice that we can't count just \"lds\" insns because mode switches\n    use \"lds.l\".  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsca } } }  */\n /* { dg-options \"-O2 -mfsca -funsafe-math-optimizations -fno-ipa-icf\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 7 } } */\n /* { dg-final { scan-assembler-times \"shad\" 1 } } */\n /* { dg-final { scan-assembler-times \"lds\\tr\\[0-9\\],fpul\" 6 } } */"}, {"sha": "bbf6570a6b7a4b7220ea3e1d95dc1b8c02129e19", "filename": "gcc/testsuite/gcc.target/sh/pr55303-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the SH2A clips and clipu instructions are generated as\n    expected.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"clips.b\" 2 } } */\n /* { dg-final { scan-assembler-times \"clips.w\" 2 } } */\n /* { dg-final { scan-assembler-times \"clipu.b\" 2 } } */"}, {"sha": "4525790888a66dede86ce8d03e66bdd432675f17", "filename": "gcc/testsuite/gcc.target/sh/pr55303-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Verify that for SH2A smax/smin -> cbranch conversion is done properly\n    if the clips insn is not used and the expected comparison insns are\n    generated.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"cmp/pl\" 4 } } */\n \n int"}, {"sha": "f5c23730f7bab760df7ce30e5dba8628fc796c05", "filename": "gcc/testsuite/gcc.target/sh/pr55303-3.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr55303-3.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the special case (umin (reg const_int 1)) results in the\n    expected instruction sequence on SH2A.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" } } */\n /* { dg-final { scan-assembler-times \"tst\" 1 } } */\n /* { dg-final { scan-assembler-times \"movrt\" 1 } } */\n "}, {"sha": "d9be9be05b04cb72942f1c81475e12f860c81c64", "filename": "gcc/testsuite/gcc.target/sh/pr56547-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Verify that the fmac insn is used for the expression 'a * b + a' and\n    'a * a + a'.\n    This assumes that the default compiler setting is -ffp-contract=fast.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmac\" 2 } } */\n \n float"}, {"sha": "e9f1df94cebc111e30818295868d1fc6d62a80d0", "filename": "gcc/testsuite/gcc.target/sh/pr56547-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Verify that the fmac insn is used for the expression 'a * b + a' and\n    'a * a + a' when -ffast-math is specified.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { any_fpu } } }  */\n /* { dg-options \"-O1 -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fmac\" 2 } } */\n \n float"}, {"sha": "5c7925428a72acf85a0c13c8fc993919561f519a", "filename": "gcc/testsuite/gcc.target/sh/pr61195.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61195.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61195.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61195.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,6 @@\n /* Verify that we don't switch mode for single moves.  */\n-/* { dg-do compile }  */\n-/* { dg-require-effective-target hard_float } */\n-/* { dg-skip-if \"\" { *-*-* }  { \"mfmovd\" } { \"\" } } */\n-/* { dg-final { scan-assembler-not \"fpscr\" } } */\n+/* { dg-do compile { target { any_fpu && { ! fmovd_enabled } } } }  */\n+/* { dg-final { scan-assembler-not \"fpscr|fpchg\" } } */\n \n float *g;\n "}, {"sha": "e839cc3555b1da4a4256a9a17de3b469cde0811e", "filename": "gcc/testsuite/gcc.target/sh/pr61996.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61996.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61996.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr61996.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Check that the option -musermode has no effect on targets that do not\n    support user/privileged mode and that it does not interfere with option\n    -matomic-model=soft-imask.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { ! has_privileged } } }  */\n /* { dg-options \"-matomic-model=soft-imask\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\"} { \"-m1*\" \"-m2*\" } }  */\n \n int\n test (void)"}, {"sha": "7443b4d1e34973078a75c8c74849e3f8e89d00af", "filename": "gcc/testsuite/gcc.target/sh/pr6526.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr6526.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,8 @@\n /* Check that the XF registers are not clobbered by an integer division\n    that is done using double precision FPU division.  */\n-/* { dg-do run }  */\n+\n+/* { dg-do run { target { default_single_fpu && has_xf_regs } } } */\n /* { dg-options \"-O1 -mdiv=call-fp\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4*-single\" \"-m4*-single-only\" } }  */\n \n #include <assert.h>\n #include <stdlib.h>"}, {"sha": "8c91b3778796f8bdff79cd48d2a10ba0b6a1d43d", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-nosave_low_regs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-nosave_low_regs.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -3,8 +3,7 @@\n    (On SH3* and SH4* r0..r7 are banked)\n    Call-saved registers r8..r14 also don't need to be restored.\n    To test that we look for register push insns such as 'mov.l r0,@-r15'.  */\n-/* { dg-do compile { target { { \"sh*-*-*\" } && nonpic } } }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1*\" \"-m2*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-do compile { target { { banked_r0r7_isr } && nonpic } } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n /* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */"}, {"sha": "49a60dff8a4d86c594c90eeb0fcefba43fb0615c", "filename": "gcc/testsuite/gcc.target/sh/pragma-isr-trapa2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpragma-isr-trapa2.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -2,8 +2,7 @@\n    The function call will require to load the address first into a register,\n    then use that for a jsr or jmp.  It will also need to load a constant\n    address in order to load fpscr.  */\n-/* { dg-do compile { target { { \"sh*-*-*\" } && nonpic } } }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-do compile { target { { any_fpu } && nonpic } } }  */\n /* { dg-options \"-O\" }  */\n /* { dg-final { scan-assembler-times \"rte\" 1 } }  */\n /* { dg-final { scan-assembler-not \"mov.l\\tr\\[0-9\\],@-r15\" } }  */"}, {"sha": "24b7939b99915cf6d8bafe38159102d45d8eff92", "filename": "gcc/testsuite/gcc.target/sh/prefetch.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fprefetch.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n-/* Testcase to check generation of a SH4 and SH2A operand cache prefetch\n-   instruction PREF @Rm.  */\n-/* { dg-do assemble }  */\n+/* Testcase to check generation of the operand cache prefetch instruction\n+   PREF @Rm.  */\n+/* { dg-do compile { target { has_pref } } }  */\n /* { dg-options \"-O0\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m2a*\" \"-m3*\" \"-m4*\" } }  */\n-/* { dg-final { scan-assembler \"pref\"} }  */\n+/* { dg-final { scan-assembler \"pref\" } }  */\n \n void\n opt (void)"}, {"sha": "ea5521275a33434f39258a7c7832561f368dbc9a", "filename": "gcc/testsuite/gcc.target/sh/rte-delay-slot.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Frte-delay-slot.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,5 @@\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { stack_save_isr } } }  */\n /* { dg-options \"-O2\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m1 -m2*\" }  */\n /* { dg-final { scan-assembler-not \"\\trte\\t\\n\\tmov.l\\t@r15\\\\+\" } } */\n \n /* This test checks if the compiler generates a pop instruction"}, {"sha": "3064bd00ad59a3316a2511d953039cc9dfb1e816", "filename": "gcc/testsuite/gcc.target/sh/sh.exp", "status": "modified", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh.exp?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -42,6 +42,217 @@ proc check_effective_target_sh1 { } {\n     } \"\"]\n }\n \n+# Return 1 if target is SH4A\n+proc check_effective_target_sh4a { } {\n+    return [check_no_compiler_messages sh4a object {\n+\t     #ifndef __SH4A__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if target is big endian\n+proc check_effective_target_big_endian { } {\n+    return [check_no_compiler_messages big_endian object {\n+\t     #if __BYTE_ORDER__ != __ORDER_BIG_ENDIAN__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if target is little endian\n+proc check_effective_target_little_endian { } {\n+    return [check_no_compiler_messages little_endian object {\n+\t     #if __BYTE_ORDER__ != __ORDER_LITTLE_ENDIAN__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target has any FPU (single or double precision)\n+proc check_effective_target_any_fpu { } {\n+    return [check_no_compiler_messages any_fpu object {\n+\t     #ifndef __SH_FPU_ANY__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target has a double precision FPU which is allowed to be\n+# used by the compiler as such.\n+proc check_effective_target_double_fpu { } {\n+    return [check_no_compiler_messages double_fpu object {\n+\t     #ifndef __SH_FPU_DOUBLE__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target has a double precision FPU but it is only being used\n+# in single precision mode by the compiler\n+proc check_effective_target_use_single_only_fpu { } {\n+    return [check_no_compiler_messages use_single_only_fpu object {\n+\t     #if !(defined (__SH2A_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target has an FPU and the default mode is single\n+proc check_effective_target_default_single_fpu { } {\n+    return [check_no_compiler_messages default_single_fpu object {\n+\t     #if !(defined (__SH2E__) || defined (__SH3E__) \\\n+\t\t   || defined (__SH2A_SINGLE__) \\\n+\t\t   || defined (__SH2A_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4_SINGLE__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target has no FPU\n+proc check_effective_target_no_fpu { } {\n+    return [check_no_compiler_messages no_fpu object {\n+\t     #ifdef __SH_FPU_ANY__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+\n+# Return 1 if the target has XF regs\n+proc check_effective_target_has_xf_regs { } {\n+    return [check_no_compiler_messages has_xf_regs object {\n+\t     #if !(defined (__SH_FPU_ANY__) \\\n+\t\t   && (defined (__SH4__) \\\n+\t\t       || defined (__SH4_SINGLE__) \\\n+\t\t       || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t       || defined (__SH4A__)))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+\n+# Return 1 if the target can do the fsca insn\n+proc check_effective_target_has_fsca { } {\n+    return [check_no_compiler_messages has_fsca object {\n+\t     #if !(defined (__SH_FPU_ANY__) \\\n+\t\t   && (defined (__SH4__) \\\n+\t\t       || defined (__SH4_SINGLE__) \\\n+\t\t       || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t       || defined (__SH4A__)))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target can do the fsrra insn\n+proc check_effective_target_has_fsrra { } {\n+    return [check_no_compiler_messages has_fsrra object {\n+\t     #if !(defined (__SH_FPU_ANY__) \\\n+\t\t   && (defined (__SH4__) \\\n+\t\t       || defined (__SH4_SINGLE__) \\\n+\t\t       || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t       || defined (__SH4A__)))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target can do the fpchg insn\n+proc check_effective_target_has_fpchg { } {\n+    return [check_no_compiler_messages has_fpchg object {\n+\t     #if !(defined (__SH4A__) && defined (__SH_FPU_ANY__) \\\n+\t\t   && !defined (__SH4_SINGLE_ONLY__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target can do dynamic shifts\n+proc check_effective_target_has_dyn_shift { } {\n+    return [check_no_compiler_messages has_dyn_shift object {\n+\t     #if !(defined (__SH3__) \\\n+\t\t   || defined (__SH3E__) \\\n+\t\t   || defined (__SH2A__) \\\n+\t\t   || defined (__SH4__) \\\n+\t\t   || defined (__SH4_NOFPU__) \\\n+\t\t   || defined (__SH4_SINGLE__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4A__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the mfmovd option is enabled\n+proc check_effective_target_fmovd_enabled { } {\n+    return [check_no_compiler_messages fmovd_enabled object {\n+\t     #ifndef __FMOVD_ENABLED__\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target supports privileged mode\n+proc check_effective_target_has_privileged { } {\n+    return [check_no_compiler_messages has_privileged object {\n+\t     #if !(defined (__SH3__) \\\n+\t\t   || defined (__SH3E__) \\\n+\t\t   || defined (__SH4__) \\\n+\t\t   || defined (__SH4_NOFPU__) \\\n+\t\t   || defined (__SH4_SINGLE__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4A__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if the target supports the prefetch insn\n+proc check_effective_target_has_pref { } {\n+    return [check_no_compiler_messages has_pref object {\n+\t     #if !(defined (__SH3__) \\\n+\t\t   || defined (__SH3E__) \\\n+\t\t   || defined (__SH4__) \\\n+\t\t   || defined (__SH4_NOFPU__) \\\n+\t\t   || defined (__SH4_SINGLE__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4A__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if target does banked r0..r7 regs type of ISRs\n+proc check_effective_target_banked_r0r7_isr { } {\n+    return [check_no_compiler_messages banked_r0r7_isr object {\n+\t     #if !(defined (__SH3__) || defined (__SH3E__) \\\n+\t\t   || defined (__SH4__) \\\n+\t\t   || defined (__SH4_SINGLE__) \\\n+\t\t   || defined (__SH4_SINGLE_ONLY__) \\\n+\t\t   || defined (__SH4_NOFPU__) \\\n+\t\t   || defined (__SH4A__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n+# Return 1 if target does stack only type of ISRs\n+proc check_effective_target_stack_save_isr { } {\n+    return [check_no_compiler_messages stack_save_isr object {\n+\t     #if !(defined (__SH1__) \\\n+\t\t   || defined (__SH2__) \\\n+\t\t   || defined (__SH2E__) \\\n+\t\t   || defined (__SH2A__))\n+\t     #error \"\"\n+\t     #endif\n+    } \"\"]\n+}\n+\n # Return 1 if target supports atomic-model=soft-gusa\n proc check_effective_target_atomic_model_soft_gusa_available { } {\n     return [check_no_compiler_messages atomic_model_soft_gusa_available object {"}, {"sha": "fd1fe01521710017ebd77d20690113bc7396ffe1", "filename": "gcc/testsuite/gcc.target/sh/sh2a-band.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-band.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BAND.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1 -mbitops\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"band.b\"} }  */\n \n volatile struct"}, {"sha": "7465d5b8fdac2c256a0b0974faf1b8c415fbb3e1", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bclr.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclr.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction\n    'BCLR #imm3,Rn'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bclr\"} }  */\n \n struct a"}, {"sha": "d039e6e9552297952a0ae4a36560e8238f749562", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bclrmem.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bclrmem.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction\n    \"BCLR #imm3,@(disp12,Rn)\".  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2 -mbitops\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bclr\"} }  */\n /* { dg-final { scan-assembler \"bclr.b\"} }  */\n "}, {"sha": "0d4ab27ee3b4278375116b7736c0a8a9bbc247b9", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bld.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bld.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -4,9 +4,8 @@\n     BLD #imm3, Rn\n     BLD.B #imm3, @(disp12, Rn)\n  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-Os -mbitops\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bld\"} }  */\n /* { dg-final { scan-assembler \"bld.b\"} }  */\n "}, {"sha": "648e7661302f4f31927646ca90e6660cbed70e04", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bor.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bor.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BOR.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1 -mbitops\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bor.b\"} }  */\n \n volatile struct"}, {"sha": "27e04b46fa2ffbd6d494956126662084cd15346b", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bset.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bset.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction\n   'BSET #imm3,Rn'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bset\"} }  */\n \n struct a"}, {"sha": "ba5793254578b52d2e8544c0ddb2924cd8bc06c8", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bsetmem.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bsetmem.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction\n    \"BSET #imm3,@(disp12,Rn)\".  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O2 -mbitops\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bset\"} }  */\n /* { dg-final { scan-assembler \"bset.b\"} }  */\n "}, {"sha": "9259981c255ec992888bc4a73850c37b1a1e0a09", "filename": "gcc/testsuite/gcc.target/sh/sh2a-bxor.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-bxor.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    \"BXOR.B #imm3, @(disp12, Rn)\".  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1 -mbitops\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"bxor.b\"} }  */\n \n volatile struct"}, {"sha": "62e312859b630e4f9e192d93318118a321bb1999", "filename": "gcc/testsuite/gcc.target/sh/sh2a-jsrn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-jsrn.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'JSR/N @Rm'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O0\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"jsr/n\"} }  */\n \n void foo(void)"}, {"sha": "91cf96e82a89db946d8941a314c47497d3186d13", "filename": "gcc/testsuite/gcc.target/sh/sh2a-movi20s.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movi20s.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,7 +1,6 @@\n /* Testcase to check generation of 'MOVI20S #imm20, Rn'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O0\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"movi20s\"} }  */\n \n volatile long la;"}, {"sha": "dd2abc2a4278c7926a10eb71b8ff1ec47dd99f0a", "filename": "gcc/testsuite/gcc.target/sh/sh2a-movrt.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-movrt.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,9 +1,8 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'MOVRT Rn'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O1\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n-/* { dg-final { scan-assembler \"movrt\"} }  */\n+/* { dg-final { scan-assembler \"movrt\" } }  */\n \n int\n foo (void)"}, {"sha": "bb2fa07ac170726b1f2644b8fc8e032a110397b5", "filename": "gcc/testsuite/gcc.target/sh/sh2a-resbank.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-resbank.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,6 +1,5 @@\n /* Test for resbank attribute.  */\n-/* { dg-do assemble }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" } */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-final { scan-assembler \"resbank\" } } */\n  \n extern void bar(void);"}, {"sha": "78782b8cc312b7b4a37c13f0504496211ae9a505", "filename": "gcc/testsuite/gcc.target/sh/sh2a-rtsn.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-rtsn.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific instruction for\n    'RTS/N'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"-O0\" }  */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" }  */\n /* { dg-final { scan-assembler \"rts/n\"} }  */\n \n void"}, {"sha": "7e92bb96ad2166fd15eaa4564e549f3dbebb9568", "filename": "gcc/testsuite/gcc.target/sh/sh2a-tbr-jump.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh2a-tbr-jump.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,8 +1,7 @@\n /* Testcase to check generation of a SH2A specific,\n    TBR relative jump instruction - 'JSR @@(disp8,TBR)'.  */\n-/* { dg-do assemble }  */\n+/* { dg-do compile { target { sh2a } } }  */\n /* { dg-options \"\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } \"*\" \"-m2a -m2a-nofpu -m2a-single -m2a-single-only\" } */\n /* { dg-final { scan-assembler-times \"jsr/n\\\\t@@\\\\(40,tbr\\\\)\" 1} } */\n /* { dg-final { scan-assembler-times \"jsr/n\\\\t@@\\\\(72,tbr\\\\)\" 1} } */\n  "}, {"sha": "13c620686c387bd57bcb22fdc70d37077e366644", "filename": "gcc/testsuite/gcc.target/sh/sh4a-bitmovua.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-bitmovua.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,7 +1,6 @@\n /* Verify that we generate movua to load unaligned 32-bit values on SH4A.  */\n-/* { dg-do run }  */\n+/* { dg-do run { target { sh4a } } }  */\n /* { dg-options \"-O1 -save-temps -fno-inline\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a*\" } }  */\n /* { dg-final { scan-assembler-times \"movua.l\" 6 } } */\n \n /* Aligned.  */"}, {"sha": "70262f8100331f4e02590104248bf9c12187fc08", "filename": "gcc/testsuite/gcc.target/sh/sh4a-cosf.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-cosf.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,11 +1,13 @@\n /* Verify that we generate single-precision sine and cosine approximate\n    (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh4a && any_fpu } } }  */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsca\" } } */\n \n #include <math.h>\n \n-float test(float f) { return cosf(f); }\n-\n+float\n+test (float f)\n+{\n+  return cosf (f);\n+}"}, {"sha": "ebbb05a0846a046c7342d081afaa19dc5add7c03", "filename": "gcc/testsuite/gcc.target/sh/sh4a-fsrra.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-fsrra.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,11 +1,13 @@\n /* Verify that we generate single-precision square root reciprocal\n    approximate (fsrra) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { has_fsrra } } }  */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsrra\" } } */\n \n #include <math.h>\n \n-float test(float f) { return 1 / sqrtf(f); }\n-\n+float\n+test (float f)\n+{\n+  return 1 / sqrtf (f);\n+}"}, {"sha": "bb565dff6ac1e25bf88ce010d28cdc9bf836b49c", "filename": "gcc/testsuite/gcc.target/sh/sh4a-memmovua.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-memmovua.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,14 +1,15 @@\n /* Verify that we generate movua to copy unaligned memory regions to\n    32-bit-aligned addresses on SH4A.  */\n-/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-do compile { target { sh4a } } }  */\n /* { dg-options \"-O\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" \"-m4a-nofpu\" } }  */\n /* { dg-final { scan-assembler-times \"movua.l\" 2 } } */\n \n #include <string.h>\n \n struct s { int i; char a[10], b[10]; } x;\n-int f() {\n-  memcpy(x.a, x.b, 10);\n-}\n \n+int\n+f (void)\n+{\n+  memcpy (x.a, x.b, 10);\n+}"}, {"sha": "533c83c08b47016049232532fb47c81c6ff9ad62", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sincosf.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sincosf.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,12 +1,14 @@\n /* Verify that we generate a single single-precision sine and cosine\n    approximate (fsca) in fast math mode when a function computes both\n    sine and cosine.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh4a && any_fpu } } }  */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 1 } } */\n \n #include <math.h>\n \n-float test(float f) { return sinf(f) + cosf(f); }\n-\n+float\n+test (float f)\n+{\n+  return sinf (f) + cosf (f);\n+}"}, {"sha": "fbe9592460bfd56d3844b7fa76a7a466fe833b81", "filename": "gcc/testsuite/gcc.target/sh/sh4a-sinf.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fsh4a-sinf.c?ref=82bb2eaeadd56df1ea64277dbc709ae9aa98a5f2", "patch": "@@ -1,11 +1,13 @@\n /* Verify that we generate single-precision sine and cosine approximate\n    (fsca) in fast math mode on SH4A with FPU.  */\n-/* { dg-do compile }  */\n+/* { dg-do compile { target { sh4a && any_fpu } } }  */\n /* { dg-options \"-O -ffast-math\" } */\n-/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m4a\" \"-m4a-single\" \"-m4a-single-only\" } }  */\n /* { dg-final { scan-assembler \"fsca\" } } */\n \n #include <math.h>\n \n-float test(float f) { return sinf(f); }\n-\n+float\n+test (float f)\n+{\n+  return sinf (f);\n+}"}]}