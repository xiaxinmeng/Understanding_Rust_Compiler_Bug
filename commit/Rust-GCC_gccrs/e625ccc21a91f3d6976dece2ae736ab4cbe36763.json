{"sha": "e625ccc21a91f3d6976dece2ae736ab4cbe36763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYyNWNjYzIxYTkxZjNkNjk3NmRlY2UyYWU3MzZhYjRjYmUzNjc2Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-17T14:13:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-17T14:13:32Z"}, "message": "PR libstdc++/85965 move is_invocable assertions again\n\nThis is another attempt to reduce how often the assertions are\nevaluated, so that code which doesn't try to use the function objects\ndoesn't need them to be invocable.\n\nFor _Rb_tree we access the _M_key_compare object directly, so can't put\nthe assertions in an accessor function for it. However, every invocation\nof _M_key_compare is accompanied by a use of _S_key, so the assertions\ncan be put in there.  For _Hashtable there are member functions that are\nconsistently used to obtain a hash code or test for equality, so the\nassertions can go in those members.\n\n\tPR libstdc++/85965\n\t* include/bits/hashtable.h (_Hashtable::~_Hashtable()): Remove static\n\tassertions from the destructor.\n\t* include/bits/hashtable_policy.h (_Hash_code_base::_M_hash_code):\n\tMove static_assert for hash function to here.\n\t(_Hash_table_base::_M_equals): Move static_assert for equality\n\tpredicate to here.\n\t* include/bits/stl_tree.h (_Rb_tree::_S_value(_Const_Link_type)):\n\tRemove.\n\t(_Rb_tree::_S_key(_Const_Link_type)): Move assertions here. Access\n\tthe value directly instead of calling _S_value.\n\t(_Rb_tree::_S_value(_Const_Base_ptr)): Remove.\n\t(_Rb_tree::_S_key(_Const_Base_ptr)): Do downcast and forward to\n\t_S_key(_Const_Link_type).\n\t* testsuite/23_containers/set/85965.cc: Check construction,\n\tdestruction, assignment and size() do not trigger the assertions.\n\t* testsuite/23_containers/unordered_set/85965.cc: Likewise.\n\t* testsuite/23_containers/map/48101_neg.cc: Call find and adjust\n\texpected errors.\n\t* testsuite/23_containers/multimap/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/multiset/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/set/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.\n\t* testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.\n\nFrom-SVN: r271323", "tree": {"sha": "f8777957f3af5584d34204e73a91e5f1439fd44b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8777957f3af5584d34204e73a91e5f1439fd44b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e625ccc21a91f3d6976dece2ae736ab4cbe36763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e625ccc21a91f3d6976dece2ae736ab4cbe36763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e625ccc21a91f3d6976dece2ae736ab4cbe36763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e625ccc21a91f3d6976dece2ae736ab4cbe36763/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd5cc193d815779f1546dcd548dec611f79db99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd5cc193d815779f1546dcd548dec611f79db99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd5cc193d815779f1546dcd548dec611f79db99"}], "stats": {"total": 134, "additions": 101, "deletions": 33}, "files": [{"sha": "6e404b228e584bf0adca9b8c8bb8869d1752a635", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -1,5 +1,32 @@\n 2019-05-17  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/85965\n+\t* include/bits/hashtable.h (_Hashtable::~_Hashtable()): Remove static\n+\tassertions from the destructor.\n+\t* include/bits/hashtable_policy.h (_Hash_code_base::_M_hash_code):\n+\tMove static_assert for hash function to here.\n+\t(_Hash_table_base::_M_equals): Move static_assert for equality\n+\tpredicate to here.\n+\t* include/bits/stl_tree.h (_Rb_tree::_S_value(_Const_Link_type)):\n+\tRemove.\n+\t(_Rb_tree::_S_key(_Const_Link_type)): Move assertions here. Access\n+\tthe value directly instead of calling _S_value.\n+\t(_Rb_tree::_S_value(_Const_Base_ptr)): Remove.\n+\t(_Rb_tree::_S_key(_Const_Base_ptr)): Do downcast and forward to\n+\t_S_key(_Const_Link_type).\n+\t* testsuite/23_containers/set/85965.cc: Check construction,\n+\tdestruction, assignment and size() do not trigger the assertions.\n+\t* testsuite/23_containers/unordered_set/85965.cc: Likewise.\n+\t* testsuite/23_containers/map/48101_neg.cc: Call find and adjust\n+\texpected errors.\n+\t* testsuite/23_containers/multimap/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/multiset/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/set/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multimap/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_multiset/48101_neg.cc: Likewise.\n+\t* testsuite/23_containers/unordered_set/48101_neg.cc: Likewise.\n+\n \t* include/bits/invoke.h [__cplusplus < 201703L] (__invoke_r<void>):\n \tUse _GLIBCXX14_CONSTEXPR because void functions cannot be constexpr\n \tin C++11."}, {"sha": "ab24b5bb537a4d934aed3b54fe66764a8fa3e1fd", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -1351,12 +1351,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       clear();\n       _M_deallocate_buckets();\n-\n-      static_assert(__is_invocable<const _H1&, const _Key&>{},\n-\t  \"hash function must be invocable with an argument of key type\");\n-      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},\n-\t  \"key equality predicate must be invocable with two arguments of \"\n-\t  \"key type\");\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "a4d2a97f4f31510058285885e33ebbd81b29e32e", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -1283,7 +1283,11 @@ namespace __detail\n \n       __hash_code\n       _M_hash_code(const _Key& __k) const\n-      { return _M_h1()(__k); }\n+      {\n+\tstatic_assert(__is_invocable<const _H1&, const _Key&>{},\n+\t    \"hash function must be invocable with an argument of key type\");\n+\treturn _M_h1()(__k);\n+      }\n \n       std::size_t\n       _M_bucket_index(const _Key&, __hash_code __c, std::size_t __n) const\n@@ -1363,7 +1367,11 @@ namespace __detail\n \n       __hash_code\n       _M_hash_code(const _Key& __k) const\n-      { return _M_h1()(__k); }\n+      {\n+\tstatic_assert(__is_invocable<const _H1&, const _Key&>{},\n+\t    \"hash function must be invocable with an argument of key type\");\n+\treturn _M_h1()(__k);\n+      }\n \n       std::size_t\n       _M_bucket_index(const _Key&, __hash_code __c,\n@@ -1783,6 +1791,9 @@ namespace __detail\n     bool\n     _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const\n     {\n+      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},\n+\t  \"key equality predicate must be invocable with two arguments of \"\n+\t  \"key type\");\n       return _Equal_hash_code<__node_type>::_S_equals(__c, *__n)\n \t&& _M_eq()(__k, this->_M_extract()(__n->_M_v()));\n     }"}, {"sha": "940155d8a3282ae5e22a23b59670bb0c7a21f2a1", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -759,13 +759,27 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_end() const _GLIBCXX_NOEXCEPT\n       { return &this->_M_impl._M_header; }\n \n-      static const_reference\n-      _S_value(_Const_Link_type __x)\n-      { return *__x->_M_valptr(); }\n-\n       static const _Key&\n       _S_key(_Const_Link_type __x)\n-      { return _KeyOfValue()(_S_value(__x)); }\n+      {\n+#if __cplusplus >= 201103L\n+\t// If we're asking for the key we're presumably using the comparison\n+\t// object, and so this is a good place to sanity check it.\n+\tstatic_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},\n+\t\t      \"comparison object must be invocable \"\n+\t\t      \"with two arguments of key type\");\n+# if __cplusplus >= 201703L\n+\t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t// 2542. Missing const requirements for associative containers\n+\tif constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})\n+\t  static_assert(\n+\t      is_invocable_v<const _Compare&, const _Key&, const _Key&>,\n+\t      \"comparison object must be invocable as const\");\n+# endif // C++17\n+#endif // C++11\n+\n+\treturn _KeyOfValue()(*__x->_M_valptr());\n+      }\n \n       static _Link_type\n       _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n@@ -783,13 +797,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT\n       { return static_cast<_Const_Link_type>(__x->_M_right); }\n \n-      static const_reference\n-      _S_value(_Const_Base_ptr __x)\n-      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }\n-\n       static const _Key&\n       _S_key(_Const_Base_ptr __x)\n-      { return _KeyOfValue()(_S_value(__x)); }\n+      { return _S_key(static_cast<_Const_Link_type>(__x)); }\n \n       static _Base_ptr\n       _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT\n@@ -974,21 +984,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       ~_Rb_tree() _GLIBCXX_NOEXCEPT\n-      {\n-\t_M_erase(_M_begin());\n-\n-#if __cplusplus >= 201103L\n-\tstatic_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},\n-\t\t      \"comparison object must be invocable \"\n-\t\t      \"with two arguments of key type\");\n-# if __cplusplus >= 201703L\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2542. Missing const requirements for associative containers\n-\tstatic_assert(is_invocable_v<const _Compare&, const _Key&, const _Key&>,\n-\t\t      \"comparison object must be invocable as const\");\n-# endif // C++17\n-#endif // C++11\n-      }\n+      { _M_erase(_M_begin()); }\n \n       _Rb_tree&\n       operator=(const _Rb_tree& __x);"}, {"sha": "8a7429c85a8be4d28e943a05442050e9199b4b90", "filename": "libstdc++-v3/testsuite/23_containers/map/48101_neg.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,9 +24,13 @@ void\n test01()\n {\n   std::map<int, int, std::less<int*>> c;\n+  c.find(1);  // { dg-error \"here\" }\n   std::map<int, int, std::allocator<int>> c2;\n+  c2.find(2); // { dg-error \"here\" }\n }\n \n // { dg-error \"_Compare = std::less<int.>\" \"\" { target *-*-* } 0 }\n // { dg-error \"_Compare = std::allocator<int>\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "7bd56cc9c7315dff4f1f426077dc41d31c88e502", "filename": "libstdc++-v3/testsuite/23_containers/multimap/48101_neg.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,9 +24,13 @@ void\n test01()\n {\n   std::multimap<int, int, std::less<int*>> c;\n+  c.find(1);  // { dg-error \"here\" }\n   std::multimap<int, int, std::allocator<int>> c2;\n+  c2.find(2); // { dg-error \"here\" }\n }\n \n // { dg-error \"_Compare = std::less<int.>\" \"\" { target *-*-* } 0 }\n // { dg-error \"_Compare = std::allocator<int>\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "f13aa098976fe0d4e61b24ed4f412e2349876f9b", "filename": "libstdc++-v3/testsuite/23_containers/multiset/48101_neg.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,9 +24,12 @@ test01()\n {\n   std::multiset<const int> c;\t\t   // { dg-error \"here\" }\n   std::multiset<int, std::less<long*>> c2;\n+  c2.find(2);\t\t\t\t   // { dg-error \"here\" }\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"std::allocator<.* has no member named \" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n+// { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "4ede0421d903b09655155142c5e7379658ca019a", "filename": "libstdc++-v3/testsuite/23_containers/set/48101_neg.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,9 +24,12 @@ test01()\n {\n   std::set<const int> c;\t      // { dg-error \"here\" }\n   std::set<int, std::less<long*>> c2;\n+  c2.find(2);\t\t\t\t   // { dg-error \"here\" }\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n // { dg-error \"comparison object must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"std::allocator<.* has no member named \" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n+// { dg-prune-output \"no match for call\" }\n+// { dg-prune-output \"invalid conversion\" }"}, {"sha": "7d8f2167519f3fb0eea4f8e3bda505eb32d157ac", "filename": "libstdc++-v3/testsuite/23_containers/set/85965.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F85965.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -27,3 +27,12 @@ struct Foo\n   // PR libstdc++/85965\n   std::set<Derived*, std::less<Base*>> s;\n };\n+\n+std::size_t\n+test01(std::set<Derived*, std::less<Base*>> s)\n+{\n+  // these operations should not require the comparison object\n+  auto copy = s;\n+  copy = s;\n+  return s.size();\n+}"}, {"sha": "8d823dfa47641e296a88b2de3e25c01d9826f6d2", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/48101_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,8 +24,10 @@ test01()\n {\n   using namespace std;\n   unordered_map<int, int, equal_to<int>, hash<int>> c2;\n+  c2.find(2); // { dg-error \"here\" }\n }\n \n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"use of deleted function\" }\n+// { dg-prune-output \"no match for call\" }"}, {"sha": "a81615b3607c3e3075bcec3898438ec8f766aeba", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/48101_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -24,8 +24,10 @@ test01()\n {\n   using namespace std;\n   unordered_multimap<int, int, equal_to<int>, hash<int>> c2;\n+  c2.find(2); // { dg-error \"here\" }\n }\n \n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"use of deleted function\" }\n+// { dg-prune-output \"no match for call\" }"}, {"sha": "03ddb898d6cec3c93abe89f3248e1ae9e8b99ae3", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/48101_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -25,10 +25,12 @@ test01()\n   using namespace std;\n   unordered_multiset<const int, hash<int>> c;\t\t// { dg-error \"here\" }\n   unordered_multiset<int, equal_to<int>, hash<int>> c2;\n+  c2.find(2);\t\t\t\t\t    // { dg-error \"here\" }\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"use of deleted function\" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n+// { dg-prune-output \"no match for call\" }"}, {"sha": "e79d3769248551ad8609527b73c712770b24bfe9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/48101_neg.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F48101_neg.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -25,10 +25,12 @@ test01()\n   using namespace std;\n   unordered_set<const int, hash<int>> c;\t    // { dg-error \"here\" }\n   unordered_set<int, equal_to<int>, hash<int>> c2;\n+  c2.find(2);\t\t\t\t\t    // { dg-error \"here\" }\n }\n \n // { dg-error \"non-const, non-volatile value_type\" \"\" { target *-*-* } 0 }\n // { dg-error \"hash function must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-error \"key equality predicate must be invocable\" \"\" { target *-*-* } 0 }\n // { dg-prune-output \"use of deleted function\" }\n // { dg-prune-output \"must have the same value_type as its allocator\" }\n+// { dg-prune-output \"no match for call\" }"}, {"sha": "8c48fa2a978157a5ddb4bb9e706e61fd43f6929c", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/85965.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e625ccc21a91f3d6976dece2ae736ab4cbe36763/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2F85965.cc?ref=e625ccc21a91f3d6976dece2ae736ab4cbe36763", "patch": "@@ -27,3 +27,12 @@ struct Foo\n   // PR libstdc++/85965\n   std::unordered_set<Derived*, std::equal_to<Base*>, std::hash<Base*>> u;\n };\n+\n+std::size_t\n+test01(std::unordered_set<Derived*, std::equal_to<Base*>, std::hash<Base*>> s)\n+{\n+  // these operations should not require the comparison object\n+  auto copy = s;\n+  copy = s;\n+  return s.size();\n+}"}]}