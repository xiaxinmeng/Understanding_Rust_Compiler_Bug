{"sha": "02f6b405f0e9dc7a8868fecef9a048b79c433125", "node_id": "C_kwDOANBUbNoAKDAyZjZiNDA1ZjBlOWRjN2E4ODY4ZmVjZWY5YTA0OGI3OWM0MzMxMjU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-23T17:35:49Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-23T17:35:49Z"}, "message": "libstdc++: Separate construct/convertibility tests for std::tuple\n\nP2321R2 adds additional conditionally explicit constructors to std::tuple\nwhich we'll concisely implement in a subsequent patch using explicit(bool),\nlike in our C++20 std::pair implementation.  This prerequisite patch\nadds member typedefs to _TupleConstraints for testing element-wise\nconstructibility and convertibility separately; we'll use the first in\nthe new constructors' constraints, and the second in their explicit\nspecifier.\n\nIn passing, this patch also redefines the existing member predicates\n__is_ex/implicitly_constructible in terms of these new members.  This\nseems to reduce compile time and memory usage by about 10% for large\ntuples when using the converting constructors that're constrained by\n_Explicit/_ImplicitCtor.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/tuple (_TupleConstraints::__convertible): Define.\n\t(_TupleConstraints::__constructible): Define.\n\t(_TupleConstraints::__is_explicitly_constructible): Redefine this\n\tin terms of __convertible and __constructible.\n\t(_TupleConstraints::__is_implicitly_constructible): Likewise.", "tree": {"sha": "7a0ef673a67bb94c053bc4dcc0f1eed31687c852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a0ef673a67bb94c053bc4dcc0f1eed31687c852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02f6b405f0e9dc7a8868fecef9a048b79c433125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f6b405f0e9dc7a8868fecef9a048b79c433125", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02f6b405f0e9dc7a8868fecef9a048b79c433125", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02f6b405f0e9dc7a8868fecef9a048b79c433125/comments", "author": null, "committer": null, "parents": [{"sha": "e85bb1881e57e53306ede2a15f30d06480d69886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85bb1881e57e53306ede2a15f30d06480d69886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85bb1881e57e53306ede2a15f30d06480d69886"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "7f9c07248d4335515a07ccfdbea23849fe8f0b0f", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02f6b405f0e9dc7a8868fecef9a048b79c433125/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02f6b405f0e9dc7a8868fecef9a048b79c433125/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=02f6b405f0e9dc7a8868fecef9a048b79c433125", "patch": "@@ -553,14 +553,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<bool, typename... _Types>\n     struct _TupleConstraints\n     {\n+      template<typename... _UTypes>\n+\tusing __constructible = __and_<is_constructible<_Types, _UTypes>...>;\n+\n+      template<typename... _UTypes>\n+\tusing __convertible = __and_<is_convertible<_UTypes, _Types>...>;\n+\n       // Constraint for a non-explicit constructor.\n       // True iff each Ti in _Types... can be constructed from Ui in _UTypes...\n       // and every Ui is implicitly convertible to Ti.\n       template<typename... _UTypes>\n \tstatic constexpr bool __is_implicitly_constructible()\n \t{\n-\t  return __and_<is_constructible<_Types, _UTypes>...,\n-\t\t\tis_convertible<_UTypes, _Types>...\n+\t  return __and_<__constructible<_UTypes...>,\n+\t\t\t__convertible<_UTypes...>\n \t\t\t>::value;\n \t}\n \n@@ -570,8 +576,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename... _UTypes>\n \tstatic constexpr bool __is_explicitly_constructible()\n \t{\n-\t  return __and_<is_constructible<_Types, _UTypes>...,\n-\t\t\t__not_<__and_<is_convertible<_UTypes, _Types>...>>\n+\t  return __and_<__constructible<_UTypes...>,\n+\t\t\t__not_<__convertible<_UTypes...>>\n \t\t\t>::value;\n \t}\n "}]}