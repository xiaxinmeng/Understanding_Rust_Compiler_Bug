{"sha": "fb757f7da43d13603d3d8b821f62076336e412a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI3NTdmN2RhNDNkMTM2MDNkM2Q4YjgyMWY2MjA3NjMzNmU0MTJhOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T09:44:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T09:44:04Z"}, "message": "[multiple changes]\n\n2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_attr.adb, inline.adb, sem_attr.adb, sem_elab.adb: Minor\n\treformatting.\n\n2016-06-16  Bob Duff  <duff@adacore.com>\n\n\t* sem_util.adb (Collect): Avoid Empty Full_T. Otherwise Etype\n\t(Full_T) crashes when assertions are on.\n\t* sem_ch12.adb (Matching_Actual): Correctly handle the case where\n\t\"others => <>\" appears in a generic formal package, other than\n\tby itself.\n\n2016-06-16  Arnaud Charlet  <charlet@adacore.com>\n\n\t* usage.adb: Remove confusing comment in usage line.\n\t* bindgen.adb: Fix binder generated file in codepeer mode wrt\n\trecent additions.\n\n2016-06-16  Javier Miranda  <miranda@adacore.com>\n\n\t* restrict.adb (Check_Restriction_No_Use_Of_Entity): Avoid\n\tnever-ending loop, code cleanup; adding also support for Text_IO.\n\t* sem_ch8.adb (Find_Expanded_Name): Invoke\n\tCheck_Restriction_No_Use_Entity.\n\n2016-06-16  Tristan Gingold  <gingold@adacore.com>\n\n\t* exp_ch9.adb: Minor comment fix.\n\t* einfo.ads (Has_Protected): Clarify comment.\n\t* sem_ch9.adb (Analyze_Protected_Type_Declaration): Do not\n\tconsider private protected types declared in the runtime for\n\tthe No_Local_Protected_Types restriction.\n\nFrom-SVN: r237507", "tree": {"sha": "053397ad0da456b40522b26baa0eeb0cfbf88e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/053397ad0da456b40522b26baa0eeb0cfbf88e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb757f7da43d13603d3d8b821f62076336e412a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb757f7da43d13603d3d8b821f62076336e412a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb757f7da43d13603d3d8b821f62076336e412a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb757f7da43d13603d3d8b821f62076336e412a9/comments", "author": null, "committer": null, "parents": [{"sha": "17d7bdd87dcafe86ec678cb22604e4aada008948", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17d7bdd87dcafe86ec678cb22604e4aada008948", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17d7bdd87dcafe86ec678cb22604e4aada008948"}], "stats": {"total": 186, "additions": 126, "deletions": 60}, "files": [{"sha": "d514eaff5bcf22716fdaed913440ec5447f2a958", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -1,3 +1,37 @@\n+2016-06-16  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb, inline.adb, sem_attr.adb, sem_elab.adb: Minor\n+\treformatting.\n+\n+2016-06-16  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_util.adb (Collect): Avoid Empty Full_T. Otherwise Etype\n+\t(Full_T) crashes when assertions are on.\n+\t* sem_ch12.adb (Matching_Actual): Correctly handle the case where\n+\t\"others => <>\" appears in a generic formal package, other than\n+\tby itself.\n+\n+2016-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* usage.adb: Remove confusing comment in usage line.\n+\t* bindgen.adb: Fix binder generated file in codepeer mode wrt\n+\trecent additions.\n+\n+2016-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* restrict.adb (Check_Restriction_No_Use_Of_Entity): Avoid\n+\tnever-ending loop, code cleanup; adding also support for Text_IO.\n+\t* sem_ch8.adb (Find_Expanded_Name): Invoke\n+\tCheck_Restriction_No_Use_Entity.\n+\n+2016-06-16  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* exp_ch9.adb: Minor comment fix.\n+\t* einfo.ads (Has_Protected): Clarify comment.\n+\t* sem_ch9.adb (Analyze_Protected_Type_Declaration): Do not\n+\tconsider private protected types declared in the runtime for\n+\tthe No_Local_Protected_Types restriction.\n+\n 2016-06-14  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch6.adb (Set_Actual_Subtypes): Do not generate actual"}, {"sha": "079ebb40cbc25e05adac88d857fbd70e23d37fee", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -930,35 +930,38 @@ package body Bindgen is\n \n       Gen_Elab_Calls;\n \n-      --  Call System.Elaboration_Allocators.Mark_Start_Of_Elaboration if\n-      --  restriction No_Standard_Allocators_After_Elaboration is active.\n+      if not CodePeer_Mode then\n+         --  Call System.Elaboration_Allocators.Mark_Start_Of_Elaboration if\n+         --  restriction No_Standard_Allocators_After_Elaboration is active.\n \n-      if Cumulative_Restrictions.Set\n-        (No_Standard_Allocators_After_Elaboration)\n-      then\n-         WBI (\"      System.Elaboration_Allocators.Mark_End_Of_Elaboration;\");\n-      end if;\n+         if Cumulative_Restrictions.Set\n+           (No_Standard_Allocators_After_Elaboration)\n+         then\n+            WBI\n+              (\"      System.Elaboration_Allocators.Mark_End_Of_Elaboration;\");\n+         end if;\n \n-      --  From this point, no new dispatching domain can be created\n+         --  From this point, no new dispatching domain can be created\n \n-      if Dispatching_Domains_Used then\n-         WBI (\"      Freeze_Dispatching_Domains;\");\n-      end if;\n+         if Dispatching_Domains_Used then\n+            WBI (\"      Freeze_Dispatching_Domains;\");\n+         end if;\n \n-      --  Sequential partition elaboration policy\n+         --  Sequential partition elaboration policy\n \n-      if Partition_Elaboration_Policy_Specified = 'S' then\n-         if System_Interrupts_Used then\n-            WBI (\"      Install_Restricted_Handlers_Sequential;\");\n-         end if;\n+         if Partition_Elaboration_Policy_Specified = 'S' then\n+            if System_Interrupts_Used then\n+               WBI (\"      Install_Restricted_Handlers_Sequential;\");\n+            end if;\n \n-         if System_Tasking_Restricted_Stages_Used then\n-            WBI (\"      Activate_All_Tasks_Sequential;\");\n+            if System_Tasking_Restricted_Stages_Used then\n+               WBI (\"      Activate_All_Tasks_Sequential;\");\n+            end if;\n          end if;\n-      end if;\n \n-      if System_BB_CPU_Primitives_Multiprocessors_Used then\n-         WBI (\"      Start_Slave_CPUs;\");\n+         if System_BB_CPU_Primitives_Multiprocessors_Used then\n+            WBI (\"      Start_Slave_CPUs;\");\n+         end if;\n       end if;\n \n       WBI (\"   end \" & Ada_Init_Name.all & \";\");"}, {"sha": "a8212984c05a09fa99eaaba5e5ef28ca36b478cc", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -1936,10 +1936,10 @@ package Einfo is\n --    Has_Protected (Flag271) [base type only]\n --       Defined in all type entities. Set on protected types themselves, and\n --       also (recursively) on any composite type which has a component for\n---       which Has_Protected is set. The meaning is that an allocator for\n---       or declaration of such an object must create the required protected\n---       objects. Note: the flag is not set on access types, even if they\n---       designate an object that Has_Protected.\n+--       which Has_Protected is set, unless the protected type is declared in\n+--       the private part of an internal unit. The meaning is that restrictions\n+--       for protected types apply to this type. Note: the flag is not set on\n+--       access types, even if they designate an object that Has_Protected.\n \n --    Has_Qualified_Name (Flag161)\n --       Defined in all entities. Set if the name in the Chars field has"}, {"sha": "6c5f3b5e7c5f42279915e6a3c94a2b323a3fa837", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -4398,8 +4398,9 @@ package body Exp_Attr is\n          --  _Postconditions must be in the tree (or inlined if we are\n          --  generating C code).\n \n-         pragma Assert (Present (Subp)\n-           or else (Modify_Tree_For_C and then In_Inlined_Body));\n+         pragma Assert\n+           (Present (Subp)\n+             or else (Modify_Tree_For_C and then In_Inlined_Body));\n \n          Temp := Make_Temporary (Loc, 'T', Pref);\n "}, {"sha": "9f4563106b1a7cdce284ae49baad7596be6585a7", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -14142,7 +14142,7 @@ package body Exp_Ch9 is\n          --  or, in the case of Ravenscar:\n \n          --  Install_Restricted_Handlers\n-         --    (Prio, (Expr1, Proc1'access), ...., (ExprN, ProcN'access));\n+         --    (Prio, ((Expr1, Proc1'access), ...., (ExprN, ProcN'access)));\n \n          declare\n             Args  : constant List_Id := New_List;"}, {"sha": "b6db273430e94e25f87a2d8b34efb0acb85d6390", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -2323,8 +2323,8 @@ package body Inline is\n              and then Present (Postconditions_Proc (Enclosing_Subp)));\n \n          if Ekind (Enclosing_Subp) = E_Function then\n-            if Nkind (First (Parameter_Associations (N)))\n-              in N_Numeric_Or_String_Literal\n+            if Nkind (First (Parameter_Associations (N))) in\n+                 N_Numeric_Or_String_Literal\n             then\n                Append_To (Declarations (Blk),\n                  Make_Object_Declaration (Loc,"}, {"sha": "6cc308f5fe7faef3b95d42526eaef6a377796fd1", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -759,9 +759,16 @@ package body Restrict is\n             Ent  := Entity (N);\n             Expr := NE_Ent.Entity;\n             loop\n-               --  Here if at outer level of entity name in reference\n-\n-               if Scope (Ent) = Standard_Standard then\n+               --  Here if at outer level of entity name in reference (handle\n+               --  also the direct use of Text_IO in the pragma). For example:\n+               --  pragma Restrictions (No_Use_Of_Entity => Text_IO.Put);\n+\n+               if Scope (Ent) = Standard_Standard\n+                 or else (Nkind (Expr) = N_Identifier\n+                           and then Chars (Ent) = Name_Text_IO\n+                           and then Chars (Scope (Ent)) = Name_Ada\n+                           and then Scope (Scope (Ent)) = Standard_Standard)\n+               then\n                   if Nkind_In (Expr, N_Identifier, N_Operator_Symbol)\n                     and then Chars (Ent) = Chars (Expr)\n                   then\n@@ -774,22 +781,19 @@ package body Restrict is\n                      return;\n \n                   else\n-                     goto Continue;\n+                     exit;\n                   end if;\n \n                --  Here if at outer level of entity name in table\n \n                elsif Nkind_In (Expr, N_Identifier, N_Operator_Symbol) then\n-                  goto Continue;\n+                  exit;\n \n                --  Here if neither at the outer level\n \n                else\n                   pragma Assert (Nkind (Expr) = N_Selected_Component);\n-\n-                  if Chars (Selector_Name (Expr)) /= Chars (Ent) then\n-                     goto Continue;\n-                  end if;\n+                  exit when Chars (Selector_Name (Expr)) /= Chars (Ent);\n                end if;\n \n                --  Move up a level\n@@ -800,10 +804,6 @@ package body Restrict is\n                end loop;\n \n                Expr := Prefix (Expr);\n-\n-               --  Entry did not match\n-\n-               <<Continue>> null;\n             end loop;\n          end;\n       end loop;"}, {"sha": "f1535179c1bc53f557095bf829203f3e089246ee", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -1384,6 +1384,7 @@ package body Sem_Attr is\n            and then Chars (Scope (Spec_Id)) = Name_uPostconditions\n          then\n             --  This situation occurs only when preanalyzing the inlined body\n+\n             pragma Assert (not Full_Analysis);\n \n             Spec_Id := Scope (Spec_Id);"}, {"sha": "f62c30f1aec97c653f752218e617313b204d00f6", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -1112,7 +1112,7 @@ package body Sem_Ch12 is\n       --  Find actual that corresponds to a given a formal parameter. If the\n       --  actuals are positional, return the next one, if any. If the actuals\n       --  are named, scan the parameter associations to find the right one.\n-      --  A_F is the corresponding entity in the analyzed generic,which is\n+      --  A_F is the corresponding entity in the analyzed generic, which is\n       --  placed on the selector name for ASIS use.\n       --\n       --  In Ada 2005, a named association may be given with a box, in which\n@@ -1257,7 +1257,7 @@ package body Sem_Ch12 is\n \n          elsif No (Selector_Name (Actual)) then\n             Found_Assoc := Actual;\n-            Act := Explicit_Generic_Actual_Parameter (Actual);\n+            Act         := Explicit_Generic_Actual_Parameter (Actual);\n             Num_Matched := Num_Matched + 1;\n             Next (Actual);\n \n@@ -1271,12 +1271,17 @@ package body Sem_Ch12 is\n             Prev        := Empty;\n \n             while Present (Actual) loop\n-               if Chars (Selector_Name (Actual)) = Chars (F) then\n+               if Nkind (Actual) = N_Others_Choice then\n+                  Found_Assoc := Empty;\n+                  Act         := Empty;\n+\n+               elsif Chars (Selector_Name (Actual)) = Chars (F) then\n                   Set_Entity (Selector_Name (Actual), A_F);\n                   Set_Etype  (Selector_Name (Actual), Etype (A_F));\n                   Generate_Reference (A_F, Selector_Name (Actual));\n+\n                   Found_Assoc := Actual;\n-                  Act := Explicit_Generic_Actual_Parameter (Actual);\n+                  Act         := Explicit_Generic_Actual_Parameter (Actual);\n                   Num_Matched := Num_Matched + 1;\n                   exit;\n                end if;"}, {"sha": "a6900a3b9bd9e2c50cb84a23d7da35ac268d980f", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -6224,6 +6224,8 @@ package body Sem_Ch8 is\n       if Is_Overloadable (Id) and then not Is_Overloaded (N) then\n          Generate_Reference (Id, N);\n       end if;\n+\n+      Check_Restriction_No_Use_Of_Entity (N);\n    end Find_Expanded_Name;\n \n    -------------------------"}, {"sha": "d981b5f18fac26ab583f124267b03c3e6c242348", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -32,8 +32,10 @@ with Einfo;     use Einfo;\n with Errout;    use Errout;\n with Exp_Ch9;   use Exp_Ch9;\n with Elists;    use Elists;\n+with Fname;     use Fname;\n with Freeze;    use Freeze;\n with Layout;    use Layout;\n+with Lib;       use Lib;\n with Lib.Xref;  use Lib.Xref;\n with Namet;     use Namet;\n with Nlists;    use Nlists;\n@@ -1985,12 +1987,27 @@ package body Sem_Ch9 is\n \n       Set_Ekind              (T, E_Protected_Type);\n       Set_Is_First_Subtype   (T, True);\n-      Set_Has_Protected      (T, True);\n       Init_Size_Align        (T);\n       Set_Etype              (T, T);\n       Set_Has_Delayed_Freeze (T, True);\n       Set_Stored_Constraint  (T, No_Elist);\n \n+      --  Mark this type as a protected type for the sake of restrictions,\n+      --  unless the protected type is declared in a private part of a package\n+      --  of the runtime. With this exception, the Suspension_Object from\n+      --  Ada.Synchronous_Task_Control can be implemented using a protected\n+      --  without triggering violations of No_Local_Protected_Objects when the\n+      --  user locally declares such an object. This may look like a trick but\n+      --  the user doesn't have to know how Suspension_Object is implemented.\n+\n+      if In_Private_Part (Current_Scope)\n+        and then Is_Internal_File_Name (Unit_File_Name (Current_Sem_Unit))\n+      then\n+         Set_Has_Protected   (T, False);\n+      else\n+         Set_Has_Protected   (T, True);\n+      end if;\n+\n       --  Set the SPARK_Mode from the current context (may be overwritten later\n       --  with an explicit pragma).\n "}, {"sha": "fd5a70360cf4d520a3c0442926cc99afa60c87c7", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -516,8 +516,7 @@ package body Sem_Elab is\n       Access_Case : constant Boolean := Nkind (N) = N_Attribute_Reference;\n       --  Indicates if we have Access attribute case\n \n-      function Call_To_Instance_From_Outside\n-        (Ent : Entity_Id) return Boolean;\n+      function Call_To_Instance_From_Outside (Id : Entity_Id) return Boolean;\n       --  True if we're calling an instance of a generic subprogram, or a\n       --  subprogram in an instance of a generic package, and the call is\n       --  outside that instance.\n@@ -543,21 +542,20 @@ package body Sem_Elab is\n       -- Call_To_Instance_From_Outside --\n       -----------------------------------\n \n-      function Call_To_Instance_From_Outside\n-        (Ent : Entity_Id) return Boolean is\n+      function Call_To_Instance_From_Outside (Id : Entity_Id) return Boolean is\n+         Scop : Entity_Id := Id;\n \n-         X : Entity_Id := Ent;\n       begin\n          loop\n-            if X = Standard_Standard then\n+            if Scop = Standard_Standard then\n                return False;\n             end if;\n \n-            if Is_Generic_Instance (X) then\n-               return not In_Open_Scopes (X);\n+            if Is_Generic_Instance (Scop) then\n+               return not In_Open_Scopes (Scop);\n             end if;\n \n-            X := Scope (X);\n+            Scop := Scope (Scop);\n          end loop;\n       end Call_To_Instance_From_Outside;\n \n@@ -602,6 +600,7 @@ package body Sem_Elab is\n       function Find_W_Scope return Entity_Id is\n          Refed_Ent : constant Entity_Id := Get_Referenced_Ent (N);\n          W_Scope   : Entity_Id;\n+\n       begin\n          if Is_Init_Proc (Refed_Ent)\n            and then not In_Same_Extended_Unit (N, Refed_Ent)"}, {"sha": "021ceac6a35fa97d9145da758d525c4ff9db7d59", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -4239,7 +4239,11 @@ package body Sem_Util is\n             Full_T := Full_View (Typ);\n \n             if Ekind (Full_T) = E_Record_Subtype then\n-               Full_T := Full_View (Etype (Typ));\n+               Full_T := Etype (Typ);\n+\n+               if Present (Full_View (Full_T)) then\n+                  Full_T := Full_View (Full_T);\n+               end if;\n             end if;\n          end if;\n "}, {"sha": "6421a08fbfaeeb27925ffc650a8c6ece03f183e2", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb757f7da43d13603d3d8b821f62076336e412a9/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=fb757f7da43d13603d3d8b821f62076336e412a9", "patch": "@@ -347,7 +347,7 @@ begin\n    --  Line for -gnato switch\n \n    Write_Switch_Char (\"o0\");\n-   Write_Line (\"Disable overflow checking (on by default)\");\n+   Write_Line (\"Disable overflow checking\");\n \n    Write_Switch_Char (\"o\");\n    Write_Line (\"Enable overflow checking in STRICT (-gnato1) mode (default)\");"}]}