{"sha": "9d68cba5eb20442f8075b8f92d1b20a00022852f", "node_id": "C_kwDOANBUbNoAKDlkNjhjYmE1ZWIyMDQ0MmY4MDc1YjhmOTJkMWIyMGEwMDAyMjg1MmY", "commit": {"author": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-11-30T07:05:59Z"}, "committer": {"name": "Haochen Gui", "email": "guihaoc@gcc.gnu.org", "date": "2022-12-01T02:06:11Z"}, "message": "rs6000: Generates permute index directly for little endian targets (PR100866)\n\n2022-10-11  Haochen Gui <guihaoc@linux.ibm.com>\n\ngcc/\n\tPR target/100866\n\t* config/rs6000/rs6000-call.cc (swap_endian_selector_for_mode):\n\tGenerate permute index directly for little endian targets.\n\t* config/rs6000/vsx.md (revb_<mode>): Call vprem directly with\n\tcorresponding permute indexes.\n\ngcc/testsuite/\n\tPR target/100866\n\t* gcc.target/powerpc/pr100866-1.c: New.", "tree": {"sha": "7cde00fed65fd544324c571144f443bb03f34445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cde00fed65fd544324c571144f443bb03f34445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d68cba5eb20442f8075b8f92d1b20a00022852f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d68cba5eb20442f8075b8f92d1b20a00022852f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d68cba5eb20442f8075b8f92d1b20a00022852f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d68cba5eb20442f8075b8f92d1b20a00022852f/comments", "author": null, "committer": null, "parents": [{"sha": "6eea85a95eecce38d194408fa4ce139b8bce1b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eea85a95eecce38d194408fa4ce139b8bce1b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eea85a95eecce38d194408fa4ce139b8bce1b28"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "c2a4e4f4e27116436a066870c85c5f493d9fa46a", "filename": "gcc/config/rs6000/rs6000-call.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.cc?ref=9d68cba5eb20442f8075b8f92d1b20a00022852f", "patch": "@@ -2802,6 +2802,8 @@ rs6000_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   return build_va_arg_indirect_ref (addr);\n }\n \n+/* The selector (perm) is expected to be used with vperm direct as the\n+   function generates reversed perm for little endian with this patch.  */\n rtx\n swap_endian_selector_for_mode (machine_mode mode)\n {\n@@ -2834,7 +2836,11 @@ swap_endian_selector_for_mode (machine_mode mode)\n     }\n \n   for (i = 0; i < 16; ++i)\n-    perm[i] = GEN_INT (swaparray[i]);\n+    if (BYTES_BIG_ENDIAN)\n+      perm[i] = GEN_INT (swaparray[i]);\n+    else\n+      /* Generates the reversed perm for little endian.  */\n+      perm[i] = GEN_INT (~swaparray[i] & 0x0000001f);\n \n   return force_reg (V16QImode, gen_rtx_CONST_VECTOR (V16QImode,\n \t\t\t\t\t\t     gen_rtvec_v (16, perm)));"}, {"sha": "992fbc983be52368973b6f688cf4f31ebe574427", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=9d68cba5eb20442f8075b8f92d1b20a00022852f", "patch": "@@ -6099,8 +6099,8 @@\n \t     to the endian mode in use, i.e. in LE mode, put elements\n \t     in BE order.  */\n \t  rtx sel = swap_endian_selector_for_mode (<MODE>mode);\n-\t  emit_insn (gen_altivec_vperm_<mode> (operands[0], operands[1],\n-\t\t\t\t\t       operands[1], sel));\n+\t  emit_insn (gen_altivec_vperm_<mode>_direct (operands[0], operands[1],\n+\t\t\t\t\t\t      operands[1], sel));\n \t}\n     }\n "}, {"sha": "63872f21bf8be8515d39109c11eebd0e6e47a299", "filename": "gcc/testsuite/gcc.target/powerpc/pr100866-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100866-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d68cba5eb20442f8075b8f92d1b20a00022852f/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100866-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr100866-1.c?ref=9d68cba5eb20442f8075b8f92d1b20a00022852f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power8\" } */\n+/* { dg-final { scan-assembler-not {\\mxxlnor\\M} } } */\n+\n+#include <altivec.h>\n+\n+vector unsigned int revb (vector unsigned int a)\n+{\n+   return vec_revb(a);\n+}"}]}