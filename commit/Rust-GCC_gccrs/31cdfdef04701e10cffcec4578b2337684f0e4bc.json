{"sha": "31cdfdef04701e10cffcec4578b2337684f0e4bc", "node_id": "C_kwDOANBUbNoAKDMxY2RmZGVmMDQ3MDFlMTBjZmZjZWM0NTc4YjIzMzc2ODRmMGU0YmM", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-16T18:47:43Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2023-03-16T18:47:43Z"}, "message": "c++: maybe_constant_init and unevaluated operands [PR109030]\n\nThis testcase in this PR (already fixed by r13-6526-ge4692319fd5fc7)\ndemonstrates that maybe_constant_init can be called on an unevaluated\noperand (e.g. from massage_init_elt) so this entry point should also\nlimit constant evaluation in that case, like maybe_constant_value does.\n\n\tPR c++/109030\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (maybe_constant_init_1): For an unevaluated\n\tnon-manifestly-constant operand, don't constant evaluate\n\tand instead call fold_to_constant as in maybe_constant_value.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/constexpr-inst2.C: New test.", "tree": {"sha": "81e471cb3f4b83772bfb63559f433e5908f3049e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81e471cb3f4b83772bfb63559f433e5908f3049e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31cdfdef04701e10cffcec4578b2337684f0e4bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cdfdef04701e10cffcec4578b2337684f0e4bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31cdfdef04701e10cffcec4578b2337684f0e4bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31cdfdef04701e10cffcec4578b2337684f0e4bc/comments", "author": null, "committer": null, "parents": [{"sha": "c630157fd01140dbce120c1409c413a97dc17104", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c630157fd01140dbce120c1409c413a97dc17104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c630157fd01140dbce120c1409c413a97dc17104"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "3de60cfd0f84ffeb8c0427689153e87438c30a18", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdfdef04701e10cffcec4578b2337684f0e4bc/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdfdef04701e10cffcec4578b2337684f0e4bc/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=31cdfdef04701e10cffcec4578b2337684f0e4bc", "patch": "@@ -8796,6 +8796,10 @@ maybe_constant_init_1 (tree t, tree decl, bool allow_non_constant,\n \t\t\t&& (TREE_STATIC (decl) || DECL_EXTERNAL (decl)));\n       if (is_static)\n \tmanifestly_const_eval = true;\n+\n+      if (cp_unevaluated_operand && !manifestly_const_eval)\n+\treturn fold_to_constant (t);\n+\n       t = cxx_eval_outermost_constant_expr (t, allow_non_constant, !is_static,\n \t\t\t\t\t    mce_value (manifestly_const_eval),\n \t\t\t\t\t    false, decl);"}, {"sha": "7676b625321a441d9a58de7b34238f11d43c90ca", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-inst2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31cdfdef04701e10cffcec4578b2337684f0e4bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31cdfdef04701e10cffcec4578b2337684f0e4bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-inst2.C?ref=31cdfdef04701e10cffcec4578b2337684f0e4bc", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile { target c++11 } }\n+\n+struct __as_receiver {\n+  int empty_env;\n+};\n+\n+template<class T>\n+constexpr int f(T t) {\n+  return t.fail;\n+};\n+\n+using type = decltype(__as_receiver{f(0)}); // OK, f<int> not instantiated"}]}