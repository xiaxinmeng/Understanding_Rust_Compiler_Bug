{"sha": "6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUxYjM0MjBjNjFmOGFhZWM1MjdjZjJiMmM1MDdmOTNlZjA3YjhjMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-03-27T00:09:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-03-27T00:09:30Z"}, "message": "tree.c (get_unwidened): Remove code fiddling with COMPONENT_REF.\n\n\t* tree.c (get_unwidened): Remove code fiddling with COMPONENT_REF.\n\nFrom-SVN: r133624", "tree": {"sha": "0f14c62ec9d8b4f02199b2e9089cc3c99fd4fb0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f14c62ec9d8b4f02199b2e9089cc3c99fd4fb0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0/comments", "author": null, "committer": null, "parents": [{"sha": "3e9608a53fad38713e2b8f52be7121e460f1627a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e9608a53fad38713e2b8f52be7121e460f1627a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e9608a53fad38713e2b8f52be7121e460f1627a"}], "stats": {"total": 41, "additions": 4, "deletions": 37}, "files": [{"sha": "f62d553bba29972131c8b81eade3014ca1d1c311", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "patch": "@@ -1,3 +1,7 @@\n+2008-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.c (get_unwidened): Remove code fiddling with COMPONENT_REF.\n+\n 2008-03-26  Andreas Schwab  <schwab@suse.de>\n \n \t* doc/invoke.texi: Fix use of @item vs. @itemx."}, {"sha": "2a6ebb0069b5501fa0e4686ddfcebc03cc99755f", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6e1b3420c61f8aaec527cf2b2c507f93ef07b8c0", "patch": "@@ -5956,11 +5956,6 @@ build_complex_type (tree component_type)\n    If FOR_TYPE is nonzero, we return a value which, if converted to\n    type FOR_TYPE, would be equivalent to converting OP to type FOR_TYPE.\n \n-   If FOR_TYPE is nonzero, unaligned bit-field references may be changed to the\n-   narrowest type that can hold the value, even if they don't exactly fit.\n-   Otherwise, bit-field references are changed to a narrower type\n-   only if they can be fetched directly from memory in that type.\n-\n    OP must have integer, real or enumeral type.  Pointers are not allowed!\n \n    There are some cases where the obvious value we could return\n@@ -6035,38 +6030,6 @@ get_unwidened (tree op, tree for_type)\n \t}\n     }\n \n-  if (TREE_CODE (op) == COMPONENT_REF\n-      /* Since type_for_size always gives an integer type.  */\n-      && TREE_CODE (type) != REAL_TYPE\n-      && TREE_CODE (type) != FIXED_POINT_TYPE\n-      /* Don't crash if field not laid out yet.  */\n-      && DECL_SIZE (TREE_OPERAND (op, 1)) != 0\n-      && host_integerp (DECL_SIZE (TREE_OPERAND (op, 1)), 1))\n-    {\n-      unsigned int innerprec\n-\t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);\n-      int unsignedp = (DECL_UNSIGNED (TREE_OPERAND (op, 1))\n-\t\t       || TYPE_UNSIGNED (TREE_TYPE (TREE_OPERAND (op, 1))));\n-      type = lang_hooks.types.type_for_size (innerprec, unsignedp);\n-\n-      /* We can get this structure field in the narrowest type it fits in.\n-\t If FOR_TYPE is 0, do this only for a field that matches the\n-\t narrower type exactly and is aligned for it\n-\t The resulting extension to its nominal type (a fullword type)\n-\t must fit the same conditions as for other extensions.  */\n-\n-      if (type != 0\n-\t  && INT_CST_LT_UNSIGNED (TYPE_SIZE (type), TYPE_SIZE (TREE_TYPE (op)))\n-\t  && (for_type || ! DECL_BIT_FIELD (TREE_OPERAND (op, 1)))\n-\t  && (! uns || final_prec <= innerprec || unsignedp))\n-\t{\n-\t  win = build3 (COMPONENT_REF, type, TREE_OPERAND (op, 0),\n-\t\t\tTREE_OPERAND (op, 1), NULL_TREE);\n-\t  TREE_SIDE_EFFECTS (win) = TREE_SIDE_EFFECTS (op);\n-\t  TREE_THIS_VOLATILE (win) = TREE_THIS_VOLATILE (op);\n-\t}\n-    }\n-\n   return win;\n }\n \f"}]}