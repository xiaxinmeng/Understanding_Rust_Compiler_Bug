{"sha": "dad5ed2eb152e85ae2ebb3582d57d895488011a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkNWVkMmViMTUyZTg1YWUyZWJiMzU4MmQ1N2Q4OTU0ODgwMTFhNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-04T09:57:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-04T09:57:36Z"}, "message": "sse.md (avx512f_load<mode>_mask): Emit vmovup{s,d} or vmovdqu* for misaligned_operand.\n\n\t* config/i386/sse.md (avx512f_load<mode>_mask): Emit vmovup{s,d}\n\tor vmovdqu* for misaligned_operand.\n\t(<sse>_loadu<ssemodesuffix><avxsizesuffix><mask_name>,\n\t<sse2_avx_avx512f>_loaddqu<mode><mask_name>): Handle <mask_applied>.\n\t* config/i386/i386.c (ix86_expand_special_args_builtin): Set\n\taligned_mem for AVX512F masked aligned load and store builtins and for\n\tnon-temporal moves.\n\n\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Allow vmovdqu64 instead of\n\tvmovdqu32.\n\nFrom-SVN: r206332", "tree": {"sha": "0825b32b591ed13bbe28597519cb1b2c610c122a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0825b32b591ed13bbe28597519cb1b2c610c122a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad5ed2eb152e85ae2ebb3582d57d895488011a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad5ed2eb152e85ae2ebb3582d57d895488011a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad5ed2eb152e85ae2ebb3582d57d895488011a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad5ed2eb152e85ae2ebb3582d57d895488011a4/comments", "author": null, "committer": null, "parents": [{"sha": "e8ed37508957f989a10b0d66dc0910ced0b2716b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8ed37508957f989a10b0d66dc0910ced0b2716b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8ed37508957f989a10b0d66dc0910ced0b2716b"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "caae1f6f473acfdf6277ddab9d494bc239e7b6b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dad5ed2eb152e85ae2ebb3582d57d895488011a4", "patch": "@@ -1,4 +1,14 @@\n-2014-01-03  Bingfeng Mei <bmei@broadcom.com>\n+2014-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (avx512f_load<mode>_mask): Emit vmovup{s,d}\n+\tor vmovdqu* for misaligned_operand.\n+\t(<sse>_loadu<ssemodesuffix><avxsizesuffix><mask_name>,\n+\t<sse2_avx_avx512f>_loaddqu<mode><mask_name>): Handle <mask_applied>.\n+\t* config/i386/i386.c (ix86_expand_special_args_builtin): Set\n+\taligned_mem for AVX512F masked aligned load and store builtins and for\n+\tnon-temporal moves.\n+\n+2014-01-03  Bingfeng Mei  <bmei@broadcom.com>\n \n \tPR tree-optimization/59651\n \t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): "}, {"sha": "1fc68e144bbe6d5001722892cdbe0b328986dc3f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=dad5ed2eb152e85ae2ebb3582d57d895488011a4", "patch": "@@ -34407,6 +34407,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n \tcase CODE_FOR_sse2_movntidi:\n \tcase CODE_FOR_sse_movntq:\n \tcase CODE_FOR_sse2_movntisi:\n+\tcase CODE_FOR_avx512f_movntv16sf:\n+\tcase CODE_FOR_avx512f_movntv8df:\n+\tcase CODE_FOR_avx512f_movntv8di:\n \t  aligned_mem = true;\n \t  break;\n \tdefault:\n@@ -34431,6 +34434,24 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       klass = load;\n       memory = 0;\n       break;\n+    case VOID_FTYPE_PV8DF_V8DF_QI:\n+    case VOID_FTYPE_PV16SF_V16SF_HI:\n+    case VOID_FTYPE_PV8DI_V8DI_QI:\n+    case VOID_FTYPE_PV16SI_V16SI_HI:\n+      switch (icode)\n+\t{\n+\t/* These builtins and instructions require the memory\n+\t   to be properly aligned.  */\n+\tcase CODE_FOR_avx512f_storev16sf_mask:\n+\tcase CODE_FOR_avx512f_storev16si_mask:\n+\tcase CODE_FOR_avx512f_storev8df_mask:\n+\tcase CODE_FOR_avx512f_storev8di_mask:\n+\t  aligned_mem = true;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n     case VOID_FTYPE_PV8SF_V8SI_V8SF:\n     case VOID_FTYPE_PV4DF_V4DI_V4DF:\n     case VOID_FTYPE_PV4SF_V4SI_V4SF:\n@@ -34439,10 +34460,6 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PV4DI_V4DI_V4DI:\n     case VOID_FTYPE_PV4SI_V4SI_V4SI:\n     case VOID_FTYPE_PV2DI_V2DI_V2DI:\n-    case VOID_FTYPE_PV8DF_V8DF_QI:\n-    case VOID_FTYPE_PV16SF_V16SF_HI:\n-    case VOID_FTYPE_PV8DI_V8DI_QI:\n-    case VOID_FTYPE_PV16SI_V16SI_HI:\n     case VOID_FTYPE_PDOUBLE_V2DF_QI:\n     case VOID_FTYPE_PFLOAT_V4SF_QI:\n       nargs = 2;\n@@ -34459,6 +34476,19 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n       nargs = 3;\n       klass = load;\n       memory = 0;\n+      switch (icode)\n+\t{\n+\t/* These builtins and instructions require the memory\n+\t   to be properly aligned.  */\n+\tcase CODE_FOR_avx512f_loadv16sf_mask:\n+\tcase CODE_FOR_avx512f_loadv16si_mask:\n+\tcase CODE_FOR_avx512f_loadv8df_mask:\n+\tcase CODE_FOR_avx512f_loadv8di_mask:\n+\t  aligned_mem = true;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n       break;\n     case VOID_FTYPE_UINT_UINT_UINT:\n     case VOID_FTYPE_UINT64_UINT_UINT:"}, {"sha": "dfc98ba813adfcf9612ecc6109c9fc793c2f1ef9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=dad5ed2eb152e85ae2ebb3582d57d895488011a4", "patch": "@@ -786,8 +786,12 @@\n     {\n     case MODE_V8DF:\n     case MODE_V16SF:\n+      if (misaligned_operand (operands[1], <MODE>mode))\n+\treturn \"vmovu<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n       return \"vmova<ssemodesuffix>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n     default:\n+      if (misaligned_operand (operands[1], <MODE>mode))\n+\treturn \"vmovdqu<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n       return \"vmovdqa<ssescalarsize>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\";\n     }\n }\n@@ -936,11 +940,14 @@\n      false, still emit UNSPEC_LOADU insn to honor user's request for\n      misaligned load.  */\n   if (TARGET_AVX\n-      && misaligned_operand (operands[1], <MODE>mode)\n-      /* FIXME: Revisit after AVX512F merge is completed.  */\n-      && !<mask_applied>)\n+      && misaligned_operand (operands[1], <MODE>mode))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+      rtx src = operands[1];\n+      if (<mask_applied>)\n+\tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n+\t\t\t\t operands[2 * <mask_applied>],\n+\t\t\t\t operands[3 * <mask_applied>]);\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n       DONE;\n     }\n })\n@@ -1046,11 +1053,14 @@\n      false, still emit UNSPEC_LOADU insn to honor user's request for\n      misaligned load.  */\n   if (TARGET_AVX\n-      && misaligned_operand (operands[1], <MODE>mode)\n-      /* FIXME: Revisit after AVX512F merge is completed.  */\n-      && !<mask_applied>)\n+      && misaligned_operand (operands[1], <MODE>mode))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+      rtx src = operands[1];\n+      if (<mask_applied>)\n+\tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n+\t\t\t\t operands[2 * <mask_applied>],\n+\t\t\t\t operands[3 * <mask_applied>]);\n+      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n       DONE;\n     }\n })"}, {"sha": "267bcc0c7c603e9fd2f2b101247a3d8817fdbd69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dad5ed2eb152e85ae2ebb3582d57d895488011a4", "patch": "@@ -1,3 +1,8 @@\n+2014-01-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512f-vmovdqu32-1.c: Allow vmovdqu64 instead of\n+\tvmovdqu32.\n+\n 2014-01-04  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/59547"}, {"sha": "79dbf9dd37a0b55cd074972bf8dbd75318f15887", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vmovdqu32-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad5ed2eb152e85ae2ebb3582d57d895488011a4/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vmovdqu32-1.c?ref=dad5ed2eb152e85ae2ebb3582d57d895488011a4", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-mavx512f -O2\" } */\n-/* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[36\\]\\[24\\]\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\[^\\{\\]\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\n\\]*\\\\)\\[^\\n\\]*%zmm\\[0-9\\]\\{%k\\[1-7\\]\\}\\{z\\}\" 1 } } */\n /* { dg-final { scan-assembler-times \"vmovdqu32\\[ \\\\t\\]+\\[^\\n\\]*%zmm\\[0-9\\]\\[^\\n\\]*\\\\)\\[^\\{\\]\" 1 } } */"}]}