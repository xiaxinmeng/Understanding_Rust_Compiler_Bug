{"sha": "3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q2YTlhY2Q1MThiNWE0MTRmMGUyODZmZWE0ZjI0M2I2YjQxNjBlNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-30T20:47:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-30T20:47:55Z"}, "message": "ia64.c (hfa_element_mode): Return false for zero-sized top-level aggregates.\n\n        * config/ia64/ia64.c (hfa_element_mode): Return false for\n        zero-sized top-level aggregates.\n\nFrom-SVN: r92741", "tree": {"sha": "ce9549fd12687a4a303dec199bcb66780d96f7c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce9549fd12687a4a303dec199bcb66780d96f7c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6a9acd518b5a414f0e286fea4f243b6b4160e4/comments", "author": null, "committer": null, "parents": [{"sha": "64f33597f37856b4bcc74963f8ac67f8294af383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f33597f37856b4bcc74963f8ac67f8294af383", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f33597f37856b4bcc74963f8ac67f8294af383"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "f6d95d3d98a433323e0dd2f8871620ec94214726", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6a9acd518b5a414f0e286fea4f243b6b4160e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6a9acd518b5a414f0e286fea4f243b6b4160e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "patch": "@@ -1,3 +1,8 @@\n+2004-12-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (hfa_element_mode): Return false for \n+\tzero-sized top-level aggregates.\n+\n 2004-12-30  Jan Hubicka  <jh@suse.cz>\n \n \tPR target/18019"}, {"sha": "68e6ddbba149b5494985b0c4eedcbed0fedd1e1a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d6a9acd518b5a414f0e286fea4f243b6b4160e4/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d6a9acd518b5a414f0e286fea4f243b6b4160e4/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3d6a9acd518b5a414f0e286fea4f243b6b4160e4", "patch": "@@ -186,7 +186,7 @@ static rtx gen_movdi_x (rtx, rtx, rtx);\n static rtx gen_fr_spill_x (rtx, rtx, rtx);\n static rtx gen_fr_restore_x (rtx, rtx, rtx);\n \n-static enum machine_mode hfa_element_mode (tree, int);\n+static enum machine_mode hfa_element_mode (tree, bool);\n static void ia64_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n static bool ia64_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n@@ -2968,17 +2968,24 @@ ia64_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \n    An aggregate is a homogeneous floating point aggregate is if all\n    fields/elements in it have the same floating point type (e.g,\n-   SFmode).  128-bit quad-precision floats are excluded.  */\n+   SFmode).  128-bit quad-precision floats are excluded.\n+\n+   Variable sized aggregates should never arrive here, since we should\n+   have already decided to pass them by reference.  Top-level zero-sized\n+   aggregates are excluded because our parallels crash the middle-end.  */\n \n static enum machine_mode\n-hfa_element_mode (tree type, int nested)\n+hfa_element_mode (tree type, bool nested)\n {\n   enum machine_mode element_mode = VOIDmode;\n   enum machine_mode mode;\n   enum tree_code code = TREE_CODE (type);\n   int know_element_mode = 0;\n   tree t;\n \n+  if (!nested && (!TYPE_SIZE (type) || integer_zerop (TYPE_SIZE (type))))\n+    return VOIDmode;\n+\n   switch (code)\n     {\n     case VOID_TYPE:\tcase INTEGER_TYPE:\tcase ENUMERAL_TYPE:"}]}