{"sha": "5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "node_id": "C_kwDOANBUbNoAKDVmYTU1ZDU1YWJkMjljNGRiNzM5NjVkNWFjNWE4NjE5ZDdhZjZjNTg", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-21T00:16:28Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-21T00:16:28Z"}, "message": "Daily bump.", "tree": {"sha": "84ac799d547677d3f30dc99155a843bb8f78eb28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84ac799d547677d3f30dc99155a843bb8f78eb28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/comments", "author": null, "committer": null, "parents": [{"sha": "c4b8f3730a80025192fdb485ad2535c165340e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4b8f3730a80025192fdb485ad2535c165340e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4b8f3730a80025192fdb485ad2535c165340e41"}], "stats": {"total": 287, "additions": 286, "deletions": 1}, "files": [{"sha": "1f5df20f01d124a0618148464d7fb3a7a7be1e13", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,7 @@\n+2022-01-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* MAINTAINERS: Adjust email address based on IRC request.\n+\n 2022-01-18  Xionghu Luo  <luoxhu@linux.ibm.com>\n \n \t* MAINTAINERS: Update my email address."}, {"sha": "1464a78a6c2dfe8bfada4bd34c92091db6b2af05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,113 @@\n+2022-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100786\n+\t* gimple-fold.cc (get_symbol_constant_value): Only return\n+\tvalues of compatible type to the symbol.\n+\n+2022-01-20  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (relation_oracle::valid_equivs): Query and add\n+\tif valid members of a set.\n+\t(equiv_oracle::register_equiv): Call valid_equivs rather than\n+\tbitmap direct operations.\n+\t(path_oracle::register_equiv): Ditto.\n+\t* value-relation.h (relation_oracle::valid_equivs): New prototype.\n+\n+2022-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR target/100784\n+\t* config/i386/i386.cc (ix86_gimple_fold_builtin): Check for\n+\tLHS before folding __builtin_ia32_shufpd and friends.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/crypto.md (aes_op_protect): Allow moves from core\n+\tregisters and from memory.\n+\t(aes_op_protect_misalign_load): New pattern.\n+\t(aes_op_protect_neon_vld1v16qi): New pattern.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/crypto.md (crypto_<CRYPTO_AESMC:crypto_pattern>_protected):\n+\tNew pattern.\n+\t(aarch32_crypto_aese_fused_protected): Likewise.\n+\t(aarch32_crypto_aesd_fused_protected): Likewise.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/crypto.md (crypto_<CRYPTO_AES:crypto_pattern>): Convert\n+\tto define_expand.  Add mitigation for the Cortex-A AES erratum\n+\twhen enabled.\n+\t(*crypto_<CRYPTO_AES:crypto_pattern>_insn): New pattern, based\n+\ton original crypto_<CRYPTO_AES:crypto_pattern> insn.\n+\t(aes_op_protect): New pattern.\n+\t* config/arm/unspecs.md (unspec): Add UNSPEC_AES_PROTECT.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-cpus.in (quirk_aes_1742098): New quirk feature\n+\t(ALL_QUIRKS): Add it.\n+\t(cortex-a57, cortex-a72): Enable it.\n+\t(cortex-a57.cortex-a53, cortex-a72.cortex-a53): Likewise.\n+\t* config/arm/arm.opt (mfix-cortex-a57-aes-1742098): New command-line\n+\toption.\n+\t(mfix-cortex-a72-aes-1655431): New option alias.\n+\t* config/arm/arm.cc (arm_option_override): Handle default settings\n+\tfor AES erratum switch.\n+\t* doc/invoke.texi (Arm Options): Document new options.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/crypto.md (crypto_<CYRPTO_AES:crypto_pattern>): Use\n+\t<crypto_mode> rather than hard-coding the mode.\n+\t(crypto_<CRYPTO_AESMC:crypto_pattern>): Fix white space.\n+\t(crypto_<CRYPTO_AES:crypto_pattern>): Likewise.\n+\t(*aarch32_crypto_aese_fused): Likewise.\n+\t(*aarch32_crypto_aesd_fused): Likewise.\n+\t(crypto_<CRYPTO_BINARY:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_TERNARY:crypto_pattern>): Likewise.\n+\t(crypto_sha1h_lb): Likewise.\n+\t(crypto_vmullp64): Likewise.\n+\t(crypto_<CRYPTO_SELECTING:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_SELECTING:crypto_pattern>_lb): Likewise.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/crypto.md (crypto_<CRYPTO_AESMC:crypto_pattern>): Add\n+\titerator to pattern name to disambiguate.\n+\t(crypto_<CRYPTO_AES:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_BINARY:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_TERNARY:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_SELECTING:crypto_pattern>): Likewise.\n+\t(crypto_<CRYPTO_SELECTING:crypto_pattern>_lb): Likewise.\n+\n+2022-01-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/104135\n+\t* emit-rtl.cc (make_insn_raw): Fix -Wformat-diag warnings.\n+\t* rtl.cc: Partially disable -Wformat-diag for RTL checking\n+\terror messages.\n+\n+2022-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/103874\n+\t* dwarf2out.cc (index_rnglists): For !HAVE_AS_LEB128 and\n+\tblock_num > 0, index entry even if !have_multiple_function_sections.\n+\n+2022-01-20  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103771\n+\t* tree-vect-stmts.cc (supportable_narrowing_operation): Enhance\n+\tintegral mode mask pack by multi steps which takes\n+\tvec_pack_sbool_trunc_optab as start when elements number is\n+\tless than BITS_PER_UNITS.\n+\n+2022-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/104114\n+\t* tree-vect-generic.cc (expand_vector_piecewise): Do not diagnose\n+\tsingle element vector decomposition.\n+\n 2022-01-19  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* ifcvt.cc (noce_convert_multiple_sets_1): New function."}, {"sha": "3f3ee5d7268f5d50d76021ce872a3b008e9b5dba", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1 +1 @@\n-20220120\n+20220121"}, {"sha": "3b823873740c5245bc3bb34e07d78345e2cc52ac", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,27 @@\n+2022-01-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94362\n+\t* constraint-manager.cc (bound::ensure_closed): Convert param to\n+\tenum bound_kind.\n+\t(range::constrained_to_single_element): Likewise.\n+\t(range::add_bound): New.\n+\t(constraint_manager::add_constraint): Handle SVAL + OFFSET\n+\tcompared to a constant.\n+\t(constraint_manager::get_ec_bounds): Rewrite in terms of\n+\trange::add_bound.\n+\t(constraint_manager::eval_condition): Reject if range::add_bound\n+\tfails.\n+\t(selftest::test_constant_comparisons): Add test coverage for\n+\tvarious impossible combinations of integer comparisons.\n+\t* constraint-manager.h (enum bound_kind): New.\n+\t(struct bound): Likewise.\n+\t(bound::ensure_closed): Convert to param to enum bound_kind.\n+\t(struct range): Convert to...\n+\t(class range): ...this, making fields private.\n+\t(range::add_bound): New decls.\n+\t* region-model.cc (region_model::add_constraint): Fail if\n+\tconstraint_manager::add_constraint fails.\n+\n 2022-01-18  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/104089"}, {"sha": "ea3c8013563e868da335edc7e33be0b3347860f4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,35 @@\n+2022-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101405\n+\t* decl.cc (reshape_init_class): Reject designator for a member of\n+\tanother class.\n+\n+2022-01-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/91911\n+\tPR c++/103672\n+\t* pt.cc (keep_template_parm): Punt on a level 0 template parm.\n+\t(tsubst_decl) <case VAR_DECL>: Remove !CHECKING_P safeguard.\n+\t(tsubst) <case TEMPLATE_TYPE_PARM>: Handle CTAD placeholders\n+\tspecially.\n+\t(make_auto_1): Add defaulted 'level' parameter.\n+\t(make_template_placeholder): Pass 0 as 'level' to make_auto_1.\n+\n+2022-01-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* decl.cc (grokdeclarator): Diagnose a CTAD placeholder as\n+\tfunction return type even when !funcdecl_p.\n+\n+2022-01-20  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/104134\n+\t* error.cc (dump_aggr_type): Partially disable the warning.\n+\n+2022-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102300\n+\t* parser.cc (cp_parser_template_name): Use dependent_scope_p.\n+\n 2022-01-19  David Malcolm  <dmalcolm@redhat.com>\n \n \t* cp-lang.cc (selftest::run_cp_tests): Update calls for .c to .cc"}, {"sha": "cd8bc4e06846558fa0ca0a1d7faf580d1fc66e43", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,15 @@\n+2022-01-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103695\n+\tPR fortran/102621\n+\t* gfortran.h (struct gfc_namespace) Add omp_affinity_iterator\n+\tfield.\n+\t* dump-parse-tree.cc (show_iterator): Use it.\n+\t* openmp.cc (gfc_match_iterator): Likewise.\n+\t(resolve_omp_clauses): Likewise.\n+\t* trans-decl.cc (gfc_finish_var_decl): Likewise.\n+\t* trans-openmp.cc (handle_iterator): Likewise.\n+\n 2022-01-18  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/103692"}, {"sha": "7b298aeddf9d30288238c93c1c40254de0a2fc66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,93 @@\n+2022-01-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/94362\n+\t* gcc.dg/analyzer/pr94362-1.c: New test.\n+\t* gcc.dg/analyzer/pr94362-2.c: New test.\n+\n+2022-01-20  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/103685\n+\t* gcc.dg/analyzer/torture/pr103685.c: New test.\n+\n+2022-01-20  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103695\n+\tPR fortran/102621\n+\t* gfortran.dg/gomp/affinity-clause-3.f90: Adjust pattern.\n+\t* gfortran.dg/gomp/pr102621.f90: New.\n+\t* gfortran.dg/gomp/pr103695.f90: New.\n+\n+2022-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/101405\n+\t* g++.dg/cpp2a/desig20.C: New test.\n+\n+2022-01-20  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/102338\n+\t* g++.dg/cpp1y/noexcept2.C: New test.\n+\n+2022-01-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/103631\n+\t* g++.dg/cpp2a/nontype-class51.C: New test.\n+\n+2022-01-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/100786\n+\t* gcc.dg/torture/pr100786.c: New testcase.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/102517\n+\t* gcc.target/aarch64/cpymem-q-reg_1.c: Allow ld1 and st1 for the\n+\tmemcpy expansion.\n+\n+2022-01-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/91911\n+\tPR c++/103672\n+\t* g++.dg/cpp1z/class-deduction101.C: New test.\n+\t* g++.dg/cpp1z/class-deduction101a.C: New test.\n+\t* g++.dg/cpp1z/class-deduction101b.C: New test.\n+\t* g++.dg/cpp1z/class-deduction102.C: New test.\n+\t* g++.dg/cpp1z/class-deduction102a.C: New test.\n+\t* g++.dg/cpp1z/class-deduction102b.C: New test.\n+\t* g++.dg/cpp1z/class-deduction103.C: New test.\n+\n+2022-01-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/other/pr88187.C: Adjust expected C++17 diagnostic.\n+\n+2022-01-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* gcc.target/arm/crypto-vaese-erratum1.c: New test.\n+\n+2022-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/103874\n+\t* gcc.dg/debug/dwarf2/pr103874.c: New test.\n+\n+2022-01-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/opt/pr47639.C: Add -Wno-psabi to dg-options.\n+\n+2022-01-20  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/mask-pack-prefer128.c: New test.\n+\t* gcc.target/i386/mask-pack-prefer256.c: New test.\n+\t* gcc.target/i386/pr103771.c: New test.\n+\n+2022-01-20  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/102300\n+\t* g++.dg/parse/no-typename1.C: Remove expected error.\n+\t* g++.dg/template/nested7.C: New test.\n+\n+2022-01-20  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/sldoi_to_mov.c: Require VSX.\n+\n 2022-01-19  Robin Dapp  <rdapp@linux.ibm.com>\n \n \t* gcc.dg/ifcvt-4.c: Remove s390-specific check."}, {"sha": "f4ca57f7956ff67c5dcacbf961ca454c388fa312", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa55d55abd29c4db73965d5ac5a8619d7af6c58/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5fa55d55abd29c4db73965d5ac5a8619d7af6c58", "patch": "@@ -1,3 +1,16 @@\n+2022-01-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/cxx11-ios_failure.cc (__constinit): Define as\n+\tequivalent attribute for Clang.\n+\t* src/c++11/future.cc (__constinit): Likewise.\n+\t* src/c++11/system_error.cc (__constinit): Likewise.\n+\t* src/c++17/memory_resource.cc (__constinit): Likewise.\n+\n+2022-01-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* scripts/testsuite_flags.in: Only add src/filesystem/.libs and\n+\tsrc/libbacktrace/.libs to LDFLAGS if those directories exist.\n+\n 2022-01-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* configure.ac (GLIBCXX_ENABLE_DEBUG_FLAGS): Remove -gdwarf-4"}]}