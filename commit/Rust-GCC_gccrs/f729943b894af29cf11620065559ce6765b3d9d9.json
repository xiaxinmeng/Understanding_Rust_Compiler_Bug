{"sha": "f729943b894af29cf11620065559ce6765b3d9d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcyOTk0M2I4OTRhZjI5Y2YxMTYyMDA2NTU1OWNlNjc2NWIzZDlkOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-04-25T21:57:42Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-04-25T21:57:42Z"}, "message": "i386.md (*movxi_internal_avx512f): Use insn type attribute instead of which_alternative.\n\n\t* config/i386/i386.md (*movxi_internal_avx512f): Use insn type\n\tattribute instead of which_alternative.\n\t* config/i386/sse.md (*mov<mode>_internal): Ditto.\n\tUse EXT_REX_SSE_REG_P where appropriate.\n\nFrom-SVN: r235422", "tree": {"sha": "e012b7ec61f3db8dde053b9b83ad4afaeeea725a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e012b7ec61f3db8dde053b9b83ad4afaeeea725a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f729943b894af29cf11620065559ce6765b3d9d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f729943b894af29cf11620065559ce6765b3d9d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f729943b894af29cf11620065559ce6765b3d9d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f729943b894af29cf11620065559ce6765b3d9d9/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d01617cab889bd0ee9c6ac42ff8e8117b32ee562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d01617cab889bd0ee9c6ac42ff8e8117b32ee562", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d01617cab889bd0ee9c6ac42ff8e8117b32ee562"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "282642c70e7fde7ce2dd17bb2901b367cb37855d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f729943b894af29cf11620065559ce6765b3d9d9", "patch": "@@ -1,3 +1,10 @@\n+2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movxi_internal_avx512f): Use insn type\n+\tattribute instead of which_alternative.\n+\t* config/i386/sse.md (*mov<mode>_internal): Ditto.\n+\tUse EXT_REX_SSE_REG_P where appropriate.\n+\n 2016-04-25  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/predicates.md (const0_operand): Do not match"}, {"sha": "b1f8461c9723176d6e6ca030fee72c6edfd45e1d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f729943b894af29cf11620065559ce6765b3d9d9", "patch": "@@ -1975,17 +1975,18 @@\n    && (register_operand (operands[0], XImode)\n        || register_operand (operands[1], XImode))\"\n {\n-  switch (which_alternative)\n+  switch (get_attr_type (insn))\n     {\n-    case 0:\n+    case TYPE_SSELOG1:\n       return standard_sse_constant_opcode (insn, operands[1]);\n-    case 1:\n-    case 2:\n+\n+    case TYPE_SSEMOV:\n       if (misaligned_operand (operands[0], XImode)\n \t  || misaligned_operand (operands[1], XImode))\n \treturn \"vmovdqu32\\t{%1, %0|%0, %1}\";\n       else\n \treturn \"vmovdqa32\\t{%1, %0|%0, %1}\";\n+\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "45442bd7fecbdc8a4d2449fe2dfbceef46e74d0d", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f729943b894af29cf11620065559ce6765b3d9d9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f729943b894af29cf11620065559ce6765b3d9d9", "patch": "@@ -839,19 +839,18 @@\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n {\n-  int mode = get_attr_mode (insn);\n-  switch (which_alternative)\n+  switch (get_attr_type (insn))\n     {\n-    case 0:\n+    case TYPE_SSELOG1:\n       return standard_sse_constant_opcode (insn, operands[1]);\n-    case 1:\n-    case 2:\n+\n+    case TYPE_SSEMOV:\n       /* There is no evex-encoded vmov* for sizes smaller than 64-bytes\n \t in avx512f, so we need to use workarounds, to access sse registers\n \t 16-31, which are evex-only. In avx512vl we don't need workarounds.  */\n       if (TARGET_AVX512F && <MODE_SIZE> < 64 && !TARGET_AVX512VL\n-\t  && ((REG_P (operands[0]) && EXT_REX_SSE_REGNO_P (REGNO (operands[0])))\n-\t      || (REG_P (operands[1]) && EXT_REX_SSE_REGNO_P (REGNO (operands[1])))))\n+\t  && (EXT_REX_SSE_REG_P (operands[0])\n+\t      || EXT_REX_SSE_REG_P (operands[1])))\n \t{\n \t  if (memory_operand (operands[0], <MODE>mode))\n \t    {\n@@ -873,7 +872,7 @@\n \t    }\n \t  else\n \t    /* Reg -> reg move is always aligned.  Just use wider move.  */\n-\t    switch (mode)\n+\t    switch (get_attr_mode (insn))\n \t      {\n \t      case MODE_V8SF:\n \t      case MODE_V4SF:\n@@ -888,7 +887,8 @@\n \t\tgcc_unreachable ();\n \t      }\n \t}\n-      switch (mode)\n+\n+      switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V16SF:\n \tcase MODE_V8SF:\n@@ -931,6 +931,7 @@\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+\n     default:\n       gcc_unreachable ();\n     }"}]}