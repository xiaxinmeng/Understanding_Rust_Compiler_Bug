{"sha": "7bb5d01e327bcb3699659786309b4a7210972950", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JiNWQwMWUzMjdiY2IzNjk5NjU5Nzg2MzA5YjRhNzIxMDk3Mjk1MA==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-13T18:27:32Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-13T18:27:32Z"}, "message": "(REAL_VALUE_TYPE): Define array at least 20 bytes wide if LONG_DOUBLE_TYPE_SIZE is 128 bits.\n\n(REAL_VALUE_TYPE): Define array at least 20 bytes wide\nif LONG_DOUBLE_TYPE_SIZE is 128 bits.\n(etartdouble): Declare and use for REAL_VALUE_TO_TARGET_LONG_DOUBLE\nwhen long double is TFmode.\n(REAL_VALUE_FIX, REAL_VALUE_UNSIGNED_FIX): Must always round\ntowards zero.\n\nFrom-SVN: r5152", "tree": {"sha": "95e24a22e200a3a22716e5a8814cf550a671e07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95e24a22e200a3a22716e5a8814cf550a671e07a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bb5d01e327bcb3699659786309b4a7210972950", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb5d01e327bcb3699659786309b4a7210972950", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bb5d01e327bcb3699659786309b4a7210972950", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bb5d01e327bcb3699659786309b4a7210972950/comments", "author": null, "committer": null, "parents": [{"sha": "3d91674b8798be0787a3e2f356ecadc5308caffd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d91674b8798be0787a3e2f356ecadc5308caffd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d91674b8798be0787a3e2f356ecadc5308caffd"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "daa8dad27d26a7dcadd0b9b607516ac80f98a05b", "filename": "gcc/real.h", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bb5d01e327bcb3699659786309b4a7210972950/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bb5d01e327bcb3699659786309b4a7210972950/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=7bb5d01e327bcb3699659786309b4a7210972950", "patch": "@@ -47,7 +47,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #ifndef LONG_DOUBLE_TYPE_SIZE\n #define LONG_DOUBLE_TYPE_SIZE 64\n #endif\n-#if (LONG_DOUBLE_TYPE_SIZE == 96) || defined (REAL_ARITHMETIC)\n+#if (LONG_DOUBLE_TYPE_SIZE == 96) || (LONG_DOUBLE_TYPE_SIZE == 128)\n+#ifndef REAL_ARITHMETIC\n+#define REAL_ARITHMETIC\n+#endif\n+#endif\n+#ifdef REAL_ARITHMETIC\n /* **** Start of software floating point emulator interface macros **** */\n \n /* Support 80-bit extended real XFmode if LONG_DOUBLE_TYPE_SIZE\n@@ -62,6 +67,17 @@ typedef struct {\n \n #else /* no XFmode support */\n \n+#if (LONG_DOUBLE_TYPE_SIZE == 128)\n+\n+#define REAL_IS_NOT_DOUBLE\n+#define REAL_ARITHMETIC\n+typedef struct {\n+  HOST_WIDE_INT r[(19 + sizeof (HOST_WIDE_INT))/(sizeof (HOST_WIDE_INT))];\n+} realvaluetype;\n+#define REAL_VALUE_TYPE realvaluetype\n+\n+#else /* not TFmode */\n+\n #if HOST_FLOAT_FORMAT != TARGET_FLOAT_FORMAT\n /* If no XFmode support, then a REAL_VALUE_TYPE is 64 bits wide\n    but it is not necessarily a host machine double. */\n@@ -75,10 +91,12 @@ typedef struct {\n    is actually a host machine double. */\n #define REAL_VALUE_TYPE double\n #endif\n+\n+#endif /* no TFmode support */\n #endif /* no XFmode support */\n \n /* If emulation has been enabled by defining REAL_ARITHMETIC or by\n-   setting LONG_DOUBLE_TYPE_SIZE to 96, then define macros so that\n+   setting LONG_DOUBLE_TYPE_SIZE to 96 or 128, then define macros so that\n    they invoke emulator functions. This will succeed only if the machine\n    files have been updated to use these macros in place of any\n    references to host machine `double' or `float' types.  */\n@@ -89,9 +107,10 @@ typedef struct {\n \n /* Declare functions in real.c that are referenced here. */\n void earith (), ereal_from_uint (), ereal_from_int (), ereal_to_int ();\n-void etarldouble (), etardouble ();\n-long etarsingle ();\n-int ereal_cmp (), eroundi (), ereal_isneg ();\n+void etarldouble (), etartdouble (), etardouble ();\n+long etarsingle (), efixi ();\n+unsigned long efixui ();\n+int ereal_cmp (), ereal_isneg ();\n unsigned int eroundui ();\n REAL_VALUE_TYPE etrunci (), etruncui (), ereal_ldexp (), ereal_atof ();\n REAL_VALUE_TYPE ereal_negate (), ereal_truncate ();\n@@ -109,8 +128,11 @@ extern REAL_VALUE_TYPE real_value_truncate ();\n #define REAL_VALUE_TRUNCATE(mode, x)  real_value_truncate (mode, x)\n \n /* These return int: */\n-#define REAL_VALUE_FIX(x) (eroundi (x))\n-#define REAL_VALUE_UNSIGNED_FIX(x) ((unsigned int) eroundui (x))\n+/* Convert a floating-point value to integer, rounding toward zero.  */\n+#define REAL_VALUE_FIX(x) (efixi (x))\n+/* Convert a floating-point value to unsigned integer, rounding\n+   toward zero. */\n+#define REAL_VALUE_UNSIGNED_FIX(x) (efixui (x))\n \n #define REAL_VALUE_ATOF ereal_atof\n #define REAL_VALUE_NEGATE ereal_negate\n@@ -123,12 +145,19 @@ extern REAL_VALUE_TYPE real_value_truncate ();\n #define REAL_VALUE_FROM_UNSIGNED_INT(d, i, j) (ereal_from_uint (&d, i, j))\n \n /* IN is a REAL_VALUE_TYPE.  OUT is an array of longs. */\n+#if LONG_DOUBLE_TYPE_SIZE == 96\n #define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etarldouble ((IN), (OUT)))\n+#else\n+#define REAL_VALUE_TO_TARGET_LONG_DOUBLE(IN, OUT) (etartdouble ((IN), (OUT)))\n+#endif\n #define REAL_VALUE_TO_TARGET_DOUBLE(IN, OUT) (etardouble ((IN), (OUT)))\n-/* d is an array of longs. */\n-#define REAL_VALUE_FROM_TARGET_DOUBLE(d)  (ereal_from_double (d))\n+\n /* IN is a REAL_VALUE_TYPE.  OUT is a long. */\n #define REAL_VALUE_TO_TARGET_SINGLE(IN, OUT) ((OUT) = etarsingle ((IN)))\n+\n+/* d is an array of longs. */\n+#define REAL_VALUE_FROM_TARGET_DOUBLE(d)  (ereal_from_double (d))\n+\n /* f is a long. */\n #define REAL_VALUE_FROM_TARGET_SINGLE(f)  (ereal_from_float (f))\n \n@@ -138,7 +167,7 @@ extern REAL_VALUE_TYPE real_value_truncate ();\n #endif /* REAL_ARITHMETIC defined */\n \n /* **** End of software floating point emulator interface macros **** */\n-#else /* LONG_DOUBLE_TYPE_SIZE != 96 and REAL_ARITHMETIC not defined */\n+#else /* No XFmode or TFmode and REAL_ARITHMETIC not defined */\n \n /* old interface */\n #ifdef REAL_ARITHMETIC\n@@ -230,13 +259,13 @@ do { REAL_VALUE_TYPE in = (IN);  /* Make sure it's not in a register.  */\\\n #define REAL_VALUE_UNSIGNED_RNDZINT(x) ((double) ((unsigned int) (x)))\n #endif\n \n-/* Convert a floating-point value to integer, using any rounding mode.  */\n+/* Convert a floating-point value to integer, rounding toward zero.  */\n #ifndef REAL_VALUE_FIX\n #define REAL_VALUE_FIX(x) ((int) (x))\n #endif\n \n-/* Convert a floating-point value to unsigned integer, using any rounding\n-   mode.  */\n+/* Convert a floating-point value to unsigned integer, rounding\n+   toward zero. */\n #ifndef REAL_VALUE_UNSIGNED_FIX\n #define REAL_VALUE_UNSIGNED_FIX(x) ((unsigned int) (x))\n #endif"}]}