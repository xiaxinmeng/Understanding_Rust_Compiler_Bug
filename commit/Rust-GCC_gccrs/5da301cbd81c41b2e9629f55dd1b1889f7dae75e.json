{"sha": "5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRhMzAxY2JkODFjNDFiMmU5NjI5ZjU1ZGQxYjE4ODlmN2RhZTc1ZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-20T14:43:32Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-04-20T14:43:32Z"}, "message": "aarch64: Fix vector builds used by SVE vec_init [PR94668]\n\nThis testcase triggered an ICE in rtx_vector_builder::step because\nwe were trying to use a stepped representation for floating-point\nconstants.  The underlying problem was that the arguments to\nrtx_vector_builder were the wrong way around, meaning that some\nvariations were likely to be incorrectly encoded for integers\n(but probably as a silent failure).\n\nAlso, aarch64_sve_expand_vector_init_handle_trailing_constants\ntries to extend the trailing constant elements to a full vector\nby following the \"natural\" pattern of the original vector, which\nshould generally lead to nicer constants.  However, for the testcase,\nwe'd then end up picking a variable for some elements.  Fixed by\nstubbing out all variable elements with zeros.\n\nThat fix involved testing valid_for_const_vector_p.  For consistency,\nthe patch uses the same test when finding trailing constants, instead\nof the previous aarch64_legitimate_constant_p.\n\n2020-04-20  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/94668\n\t* config/aarch64/aarch64.c (aarch64_sve_expand_vector_init): Fix\n\torder of arguments to rtx_vector_builder.\n\t(aarch64_sve_expand_vector_init_handle_trailing_constants): Likewise.\n\tWhen extending the trailing constants to a full vector, replace any\n\tvariables with zeros.\n\ngcc/testsuite/\n\tPR target/94668\n\t* gcc.target/aarch64/sve/pr94668.c: New test.", "tree": {"sha": "97886636d67a0a5b255626a767bb22c2c06a900e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97886636d67a0a5b255626a767bb22c2c06a900e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697b94cfaef4a958132faf0cf4b35b15dfb29acc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/697b94cfaef4a958132faf0cf4b35b15dfb29acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/697b94cfaef4a958132faf0cf4b35b15dfb29acc"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "4c9de79c1fd56d5b78eba8c1778c7ea69b32c1eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "patch": "@@ -1,3 +1,12 @@\n+2020-04-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/94668\n+\t* config/aarch64/aarch64.c (aarch64_sve_expand_vector_init): Fix\n+\torder of arguments to rtx_vector_builder.\n+\t(aarch64_sve_expand_vector_init_handle_trailing_constants): Likewise.\n+\tWhen extending the trailing constants to a full vector, replace any\n+\tvariables with zeros.\n+\n 2020-04-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/94582"}, {"sha": "ee6a2de77a59765f94c900eb769aad5ea2a4cd04", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "patch": "@@ -18382,15 +18382,27 @@ aarch64_sve_expand_vector_init_handle_trailing_constants\n   int n_trailing_constants = 0;\n \n   for (int i = nelts_reqd - 1;\n-       i >= 0 && aarch64_legitimate_constant_p (elem_mode, builder.elt (i));\n+       i >= 0 && valid_for_const_vector_p (elem_mode, builder.elt (i));\n        i--)\n     n_trailing_constants++;\n \n   if (n_trailing_constants >= nelts_reqd / 2)\n     {\n-      rtx_vector_builder v (mode, 1, nelts);\n+      /* Try to use the natural pattern of BUILDER to extend the trailing\n+\t constant elements to a full vector.  Replace any variables in the\n+\t extra elements with zeros.\n+\n+\t ??? It would be better if the builders supported \"don't care\"\n+\t     elements, with the builder filling in whichever elements\n+\t     give the most compact encoding.  */\n+      rtx_vector_builder v (mode, nelts, 1);\n       for (int i = 0; i < nelts; i++)\n-\tv.quick_push (builder.elt (i + nelts_reqd - n_trailing_constants));\n+\t{\n+\t  rtx x = builder.elt (i + nelts_reqd - n_trailing_constants);\n+\t  if (!valid_for_const_vector_p (elem_mode, x))\n+\t    x = const0_rtx;\n+\t  v.quick_push (x);\n+\t}\n       rtx const_vec = v.build ();\n       emit_move_insn (target, const_vec);\n \n@@ -18508,7 +18520,7 @@ aarch64_sve_expand_vector_init (rtx target, const rtx_vector_builder &builder,\n \n   /* Case 2: Vector contains leading constants.  */\n \n-  rtx_vector_builder rev_builder (mode, 1, nelts_reqd);\n+  rtx_vector_builder rev_builder (mode, nelts_reqd, 1);\n   for (int i = 0; i < nelts_reqd; i++)\n     rev_builder.quick_push (builder.elt (nelts_reqd - i - 1));\n   rev_builder.finalize ();\n@@ -18541,8 +18553,8 @@ aarch64_sve_expand_vector_init (rtx target, const rtx_vector_builder &builder,\n   if (nelts_reqd <= 4)\n     return false;\n \n-  rtx_vector_builder v_even (mode, 1, nelts);\n-  rtx_vector_builder v_odd (mode, 1, nelts);\n+  rtx_vector_builder v_even (mode, nelts, 1);\n+  rtx_vector_builder v_odd (mode, nelts, 1);\n \n   for (int i = 0; i < nelts * 2; i += 2)\n     {\n@@ -18586,7 +18598,7 @@ aarch64_sve_expand_vector_init (rtx target, rtx vals)\n   machine_mode mode = GET_MODE (target);\n   int nelts = XVECLEN (vals, 0);\n \n-  rtx_vector_builder v (mode, 1, nelts);\n+  rtx_vector_builder v (mode, nelts, 1);\n   for (int i = 0; i < nelts; i++)\n     v.quick_push (XVECEXP (vals, 0, i));\n   v.finalize ();"}, {"sha": "9bf3581b7700a151d62626fa4a3879f687dc2882", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "patch": "@@ -1,3 +1,8 @@\n+2020-04-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/94668\n+\t* gcc.target/aarch64/sve/pr94668.c: New test.\n+\n 2020-04-20  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/94582"}, {"sha": "9ff01e825c941aafae28013ca1bebd6736a3568b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr94668.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr94668.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5da301cbd81c41b2e9629f55dd1b1889f7dae75e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr94668.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr94668.c?ref=5da301cbd81c41b2e9629f55dd1b1889f7dae75e", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-options \"-O -msve-vector-bits=512\" } */\n+\n+typedef float v16sf __attribute__ ((vector_size(64)));\n+v16sf\n+foo (float a)\n+{\n+  return (v16sf) { 0, 0, 0, a, 0, 0, 0, 0, 0, a, 0, 0, 0, 0, 0, 0 };\n+}"}]}