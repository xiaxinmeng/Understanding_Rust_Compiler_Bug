{"sha": "e98889226cc487b39334ae069422c0ac4615f9ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk4ODg5MjI2Y2M0ODdiMzkzMzRhZTA2OTQyMmMwYWM0NjE1ZjllYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-29T14:13:11Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-29T14:13:11Z"}, "message": "Whitespace cleanups.\n\n\t* call.c (name_as_c_string): Move CONST_CAST to return.\n\t(build_new_method_call_1): Remove unneeded bracing.\n\t* class.c (include_empty_classes): Unbreak line.\n\t* constraint.cc (tsubst_check_constraint): Add space.\n\t* cp-tree.h (lang_decl_ns): Add comment.\n\t(PTRMEM_CST_MEMBER): Break line.\n\t* decl.c (grokfndecl): Add blank lines. Unbreak some others.\n\t(grokdeclarator): Remove lines, move declaration to first use.\n\t* decl2.c (decl_needed_p): Fix indentation.\n\t(c_parse_final_cleanups): Remove blank line.\n\t* method.c (implicitly_declare_fn): Move declaration to first use.\n\t* search.c (current_scope): Add blank lines.\n\nFrom-SVN: r249786", "tree": {"sha": "a5f3433070fd82111d79d7aaa831f37cca63f1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5f3433070fd82111d79d7aaa831f37cca63f1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e98889226cc487b39334ae069422c0ac4615f9ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98889226cc487b39334ae069422c0ac4615f9ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e98889226cc487b39334ae069422c0ac4615f9ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e98889226cc487b39334ae069422c0ac4615f9ec/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0630a4ecda602a90e978c3285cf1028e92ff5e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0630a4ecda602a90e978c3285cf1028e92ff5e8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0630a4ecda602a90e978c3285cf1028e92ff5e8b"}], "stats": {"total": 73, "additions": 45, "deletions": 28}, "files": [{"sha": "c29dd163f4f958fa5166c0d5f85e5284f8221e1a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -1,3 +1,19 @@\n+2017-06-29  Nathan Sidwell  <nathan@acm.org>\n+\n+\tWhitespace cleanups.\n+\t* call.c (name_as_c_string): Move CONST_CAST to return.\n+\t(build_new_method_call_1): Remove unneeded bracing.\n+\t* class.c (include_empty_classes): Unbreak line.\n+\t* constraint.cc (tsubst_check_constraint): Add space.\n+\t* cp-tree.h (lang_decl_ns): Add comment.\n+\t(PTRMEM_CST_MEMBER): Break line.\n+\t* decl.c (grokfndecl): Add blank lines. Unbreak some others.\n+\t(grokdeclarator): Remove lines, move declaration to first use.\n+\t* decl2.c (decl_needed_p): Fix indentation.\n+\t(c_parse_final_cleanups): Remove blank line.\n+\t* method.c (implicitly_declare_fn): Move declaration to first use.\n+\t* search.c (current_scope): Add blank lines.\n+\n 2017-06-28  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/72764 - ICE with invalid template typename."}, {"sha": "b83ffa8213d87f20151824f06fa08bc364a9d988", "filename": "gcc/cp/call.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -8878,15 +8878,15 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n static char *\n name_as_c_string (tree name, tree type, bool *free_p)\n {\n-  char *pretty_name;\n+  const char *pretty_name;\n \n   /* Assume that we will not allocate memory.  */\n   *free_p = false;\n   /* Constructors and destructors are special.  */\n   if (IDENTIFIER_CDTOR_P (name))\n     {\n       pretty_name\n-\t= CONST_CAST (char *, identifier_to_locale (IDENTIFIER_POINTER (constructor_name (type))));\n+\t= identifier_to_locale (IDENTIFIER_POINTER (constructor_name (type)));\n       /* For a destructor, add the '~'.  */\n       if (IDENTIFIER_DTOR_P (name))\n \t{\n@@ -8905,9 +8905,9 @@ name_as_c_string (tree name, tree type, bool *free_p)\n       *free_p = true;\n     }\n   else\n-    pretty_name = CONST_CAST (char *, identifier_to_locale (IDENTIFIER_POINTER (name)));\n+    pretty_name = identifier_to_locale (IDENTIFIER_POINTER (name));\n \n-  return pretty_name;\n+  return CONST_CAST (char *, pretty_name);\n }\n \n /* Build a call to \"INSTANCE.FN (ARGS)\".  If FN_P is non-NULL, it will\n@@ -9118,11 +9118,10 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t\t\t   &candidates, complain);\n     }\n   else\n-    {\n-      add_candidates (fns, first_mem_arg, user_args, optype,\n-\t\t      explicit_targs, template_only, conversion_path,\n-\t\t      access_binfo, flags, &candidates, complain);\n-    }\n+    add_candidates (fns, first_mem_arg, user_args, optype,\n+\t\t    explicit_targs, template_only, conversion_path,\n+\t\t    access_binfo, flags, &candidates, complain);\n+\n   any_viable_p = false;\n   candidates = splice_viable (candidates, false, &any_viable_p);\n "}, {"sha": "78cb5c2e81d141ec34fe8147384251cf91fafb3e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -6295,8 +6295,7 @@ include_empty_classes (record_layout_info rli)\n      because we are willing to overlay multiple bases at the same\n      offset.  However, now we need to make sure that RLI is big enough\n      to reflect the entire class.  */\n-  eoc = end_of_class (rli->t,\n-\t\t      CLASSTYPE_AS_BASE (rli->t) != NULL_TREE);\n+  eoc = end_of_class (rli->t, CLASSTYPE_AS_BASE (rli->t) != NULL_TREE);\n   rli_size = rli_size_unit_so_far (rli);\n   if (TREE_CODE (rli_size) == INTEGER_CST\n       && tree_int_cst_lt (rli_size, eoc))"}, {"sha": "64a8ea926d2a170642c5f90cbee85b51207b6731", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -1580,7 +1580,7 @@ tsubst_check_constraint (tree t, tree args,\n \n   /* Substitute through by building an template-id expression\n      and then substituting into that. */\n-  tree expr = build_nt(TEMPLATE_ID_EXPR, tmpl, targs);\n+  tree expr = build_nt (TEMPLATE_ID_EXPR, tmpl, targs);\n   ++processing_template_decl;\n   tree result = tsubst_expr (expr, args, complain, in_decl, false);\n   --processing_template_decl;"}, {"sha": "6b175a3146609e6856f2c810d5aea092790bfff1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -2556,7 +2556,9 @@ struct GTY(()) lang_decl_ns {\n   vec<tree, va_gc> *usings;\n   vec<tree, va_gc> *inlinees;\n \n-  /* Map from IDENTIFIER nodes to DECLS.  */\n+  /* Map from IDENTIFIER nodes to DECLS.  It'd be nice to have this\n+     inline, but as the hash_map has a dtor, we can't then put this\n+     struct into a union (until moving to c++11).  */\n   hash_map<lang_identifier *, tree> *bindings;\n };\n \n@@ -4312,7 +4314,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n /* For a pointer-to-member constant `X::Y' this is the _DECL for\n    `Y'.  */\n-#define PTRMEM_CST_MEMBER(NODE) (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->member)\n+#define PTRMEM_CST_MEMBER(NODE) \\\n+  (((ptrmem_cst_t)PTRMEM_CST_CHECK (NODE))->member)\n \n /* The expression in question for a TYPEOF_TYPE.  */\n #define TYPEOF_TYPE_EXPR(NODE) (TYPE_VALUES_RAW (TYPEOF_TYPE_CHECK (NODE)))"}, {"sha": "38c0348bc8950f47eb61d5cadda8200202105756", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -8502,9 +8502,11 @@ grokfndecl (tree ctype,\n       /* Allocate space to hold the vptr bit if needed.  */\n       SET_DECL_ALIGN (decl, MINIMUM_METHOD_BOUNDARY);\n     }\n+\n   DECL_ARGUMENTS (decl) = parms;\n   for (t = parms; t; t = DECL_CHAIN (t))\n     DECL_CONTEXT (t) = decl;\n+\n   /* Propagate volatile out from type to decl.  */\n   if (TYPE_VOLATILE (type))\n     TREE_THIS_VOLATILE (decl) = 1;\n@@ -8524,13 +8526,11 @@ grokfndecl (tree ctype,\n       break;\n     }\n \n-  if (friendp\n-      && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n+  if (friendp && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n     {\n       if (funcdef_flag)\n-\terror\n-\t  (\"defining explicit specialization %qD in friend declaration\",\n-\t   orig_declarator);\n+\terror (\"defining explicit specialization %qD in friend declaration\",\n+\t       orig_declarator);\n       else\n \t{\n \t  tree fns = TREE_OPERAND (orig_declarator, 0);\n@@ -9132,7 +9132,6 @@ build_ptrmemfunc_type (tree type)\n      this method instead of type_hash_canon, because it only does a\n      simple equality check on the list of field members.  */\n \n-\n   t = TYPE_PTRMEMFUNC_TYPE (type);\n   if (t)\n     return t;\n@@ -10068,8 +10067,6 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t      case BIT_NOT_EXPR:\n \t\t{\n-\t\t  tree type;\n-\n \t\t  if (innermost_code != cdk_function)\n \t\t    {\n \t\t      error (\"declaration of %qD as non-function\", decl);\n@@ -10082,7 +10079,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t      return error_mark_node;\n \t\t    }\n \n-\t\t  type = TREE_OPERAND (decl, 0);\n+\t\t  tree type = TREE_OPERAND (decl, 0);\n \t\t  if (TYPE_P (type))\n \t\t    type = constructor_name (type);\n \t\t  name = identifier_to_locale (IDENTIFIER_POINTER (type));"}, {"sha": "08f122d4e91e7e7f10033a2c29f0e75791f0fba9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -1992,12 +1992,14 @@ decl_needed_p (tree decl)\n   /* If this entity was used, let the back end see it; it will decide\n      whether or not to emit it into the object file.  */\n   if (TREE_USED (decl))\n-      return true;\n+    return true;\n+\n   /* Virtual functions might be needed for devirtualization.  */\n   if (flag_devirtualize\n       && TREE_CODE (decl) == FUNCTION_DECL\n       && DECL_VIRTUAL_P (decl))\n     return true;\n+\n   /* Otherwise, DECL does not need to be emitted -- yet.  A subsequent\n      reference to DECL might cause it to be emitted later.  */\n   return false;\n@@ -4803,7 +4805,6 @@ c_parse_final_cleanups (void)\n   perform_deferred_noexcept_checks ();\n \n   finish_repo ();\n-\n   fini_constexpr ();\n \n   /* The entire file is now complete.  If requested, dump everything"}, {"sha": "ba65284a066f4ace31bbce4e86eadae89b474004", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -1982,7 +1982,6 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n     case sfk_move_assignment:\n     case sfk_inheriting_constructor:\n     {\n-      bool move_p;\n       if (kind == sfk_copy_assignment\n \t  || kind == sfk_move_assignment)\n \t{\n@@ -2000,8 +1999,8 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n \t    rhs_parm_type = cp_build_qualified_type (type, TYPE_QUAL_CONST);\n \t  else\n \t    rhs_parm_type = type;\n-\t  move_p = (kind == sfk_move_assignment\n-\t\t    || kind == sfk_move_constructor);\n+\t  bool move_p = (kind == sfk_move_assignment\n+\t\t\t || kind == sfk_move_constructor);\n \t  rhs_parm_type = cp_build_reference_type (rhs_parm_type, move_p);\n \n \t  parameter_types = tree_cons (NULL_TREE, rhs_parm_type, parameter_types);"}, {"sha": "af7a0f169a158ffe01c20d8c1d5d4acad9a777d7", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e98889226cc487b39334ae069422c0ac4615f9ec/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=e98889226cc487b39334ae069422c0ac4615f9ec", "patch": "@@ -507,10 +507,13 @@ current_scope (void)\n \t      && same_type_p (DECL_FRIEND_CONTEXT (current_function_decl),\n \t\t\t      current_class_type))))\n     return current_function_decl;\n+\n   if (current_class_type)\n     return current_class_type;\n+\n   if (current_function_decl)\n     return current_function_decl;\n+\n   return current_namespace;\n }\n "}]}