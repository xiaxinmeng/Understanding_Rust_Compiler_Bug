{"sha": "828fb3ba9958f3117680efb9ade199fc7e98f462", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4ZmIzYmE5OTU4ZjMxMTc2ODBlZmI5YWRlMTk5ZmM3ZTk4ZjQ2Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-23T22:55:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-23T22:55:46Z"}, "message": "re PR c++/48106 ([C++0x] ICE with scoped enum with fixed underlying type)\n\n\tPR c++/48106\n\t* c-common.c (c_common_get_narrower): New.\n\t(shorten_binary_op, shorten_compare, warn_for_sign_compare): Use it.\n\nFrom-SVN: r174091", "tree": {"sha": "4dab37634bd240e1a80cbc953bd868d0db79d860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dab37634bd240e1a80cbc953bd868d0db79d860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828fb3ba9958f3117680efb9ade199fc7e98f462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828fb3ba9958f3117680efb9ade199fc7e98f462", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828fb3ba9958f3117680efb9ade199fc7e98f462", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828fb3ba9958f3117680efb9ade199fc7e98f462/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0f6e664b85c971f7550db62f490ea7e261d40307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f6e664b85c971f7550db62f490ea7e261d40307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f6e664b85c971f7550db62f490ea7e261d40307"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "593086e8874fb189744c175212a61b045cc9be10", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=828fb3ba9958f3117680efb9ade199fc7e98f462", "patch": "@@ -1,3 +1,9 @@\n+2011-05-23  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/48106\n+\t* c-common.c (c_common_get_narrower): New.\n+\t(shorten_binary_op, shorten_compare, warn_for_sign_compare): Use it.\n+\n 2011-05-23  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.h (check_function_arguments): Tweak prototype of"}, {"sha": "b822553ed872aebb27cba905288344c487765d05", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=828fb3ba9958f3117680efb9ade199fc7e98f462", "patch": "@@ -1765,6 +1765,28 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n   return false;\n }\n \n+/* Like tree.c:get_narrower, but retain conversion from C++0x scoped enum\n+   to integral type.  */\n+\n+static tree\n+c_common_get_narrower (tree op, int *unsignedp_ptr)\n+{\n+  op = get_narrower (op, unsignedp_ptr);\n+\n+  if (TREE_CODE (TREE_TYPE (op)) == ENUMERAL_TYPE\n+      && ENUM_IS_SCOPED (TREE_TYPE (op)))\n+    {\n+      /* C++0x scoped enumerations don't implicitly convert to integral\n+\t type; if we stripped an explicit conversion to a larger type we\n+\t need to replace it so common_type will still work.  */\n+      tree type = (lang_hooks.types.type_for_size\n+\t\t   (TYPE_PRECISION (TREE_TYPE (op)),\n+\t\t    TYPE_UNSIGNED (TREE_TYPE (op))));\n+      op = fold_convert (type, op);\n+    }\n+  return op;\n+}\n+\n /* This is a helper function of build_binary_op.\n \n    For certain operations if both args were extended from the same\n@@ -1777,7 +1799,8 @@ vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note)\n    Eg, (short)-1 | (unsigned short)-1 is (int)-1\n    but calculated in (unsigned short) it would be (unsigned short)-1.\n */\n-tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise)\n+tree\n+shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise)\n {\n   int unsigned0, unsigned1;\n   tree arg0, arg1;\n@@ -1803,8 +1826,8 @@ tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise)\n   op0 = convert (result_type, op0);\n   op1 = convert (result_type, op1);\n \n-  arg0 = get_narrower (op0, &unsigned0);\n-  arg1 = get_narrower (op1, &unsigned1);\n+  arg0 = c_common_get_narrower (op0, &unsigned0);\n+  arg1 = c_common_get_narrower (op1, &unsigned1);\n \n   /* UNS is 1 if the operation to be done is an unsigned one.  */\n   uns = TYPE_UNSIGNED (result_type);\n@@ -3301,8 +3324,8 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n   /* Throw away any conversions to wider types\n      already present in the operands.  */\n \n-  primop0 = get_narrower (op0, &unsignedp0);\n-  primop1 = get_narrower (op1, &unsignedp1);\n+  primop0 = c_common_get_narrower (op0, &unsignedp0);\n+  primop1 = c_common_get_narrower (op1, &unsignedp1);\n \n   /* If primopN is first sign-extended from primopN's precision to opN's\n      precision, then zero-extended from opN's precision to\n@@ -9371,16 +9394,16 @@ warn_for_sign_compare (location_t location,\n      have all bits set that are set in the ~ operand when it is\n      extended.  */\n \n-  op0 = get_narrower (op0, &unsignedp0);\n-  op1 = get_narrower (op1, &unsignedp1);\n+  op0 = c_common_get_narrower (op0, &unsignedp0);\n+  op1 = c_common_get_narrower (op1, &unsignedp1);\n \n   if ((TREE_CODE (op0) == BIT_NOT_EXPR)\n       ^ (TREE_CODE (op1) == BIT_NOT_EXPR))\n     {\n       if (TREE_CODE (op0) == BIT_NOT_EXPR)\n-\top0 = get_narrower (TREE_OPERAND (op0, 0), &unsignedp0);\n+\top0 = c_common_get_narrower (TREE_OPERAND (op0, 0), &unsignedp0);\n       if (TREE_CODE (op1) == BIT_NOT_EXPR)\n-\top1 = get_narrower (TREE_OPERAND (op1, 0), &unsignedp1);\n+\top1 = c_common_get_narrower (TREE_OPERAND (op1, 0), &unsignedp1);\n \n       if (host_integerp (op0, 0) || host_integerp (op1, 0))\n         {"}, {"sha": "8c1fc39c65ce89df85a6f51aa1e6d3232773e95e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=828fb3ba9958f3117680efb9ade199fc7e98f462", "patch": "@@ -1,3 +1,7 @@\n+2011-05-23  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/enum14.C: New.\n+\n 2011-05-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR lto/49123"}, {"sha": "709b201d1f7475f11c1a7e2d70fba1b7fdd7a6a8", "filename": "gcc/testsuite/g++.dg/cpp0x/enum14.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828fb3ba9958f3117680efb9ade199fc7e98f462/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum14.C?ref=828fb3ba9958f3117680efb9ade199fc7e98f462", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/48106\n+// { dg-options -std=c++0x }\n+\n+enum class E : char\n+{\n+  e\n+};\n+\n+bool operator&(E e, char m)\n+{\n+  return static_cast<int>(e) & m;\n+}"}]}