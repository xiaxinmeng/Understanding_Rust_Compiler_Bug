{"sha": "641b2721c4f7ee9975c059ea2ce62c104be985d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQxYjI3MjFjNGY3ZWU5OTc1YzA1OWVhMmNlNjJjMTA0YmU5ODVkMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@stanford.edu", "date": "2001-05-08T06:13:58Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-05-08T06:13:58Z"}, "message": "cp-demangle.c (demangle_v3_with_details, [...]): Use K+R style function definition.\n\n\t* cp-demangle.c (demangle_v3_with_details,\n\tis_gnu_v3_mangled_ctor, is_gnu_v3_mangled_dtor): Use K+R style\n\tfunction definition.\n\t* ternary.c: Use K+R style function definitions.  Use PTR, not\n\tvoid *.  Make arguments constant where possible.\n\t* demangle.h: Use PARAMS for all prototypes.\n\t* ternary.h: Use PARAMS for all prototypes.  Use PTR, not void *.\n\tMake arguments constant where possible.\n\nFrom-SVN: r41910", "tree": {"sha": "cb279795efc4e5b734fb92e5aa50763824cde776", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb279795efc4e5b734fb92e5aa50763824cde776"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/641b2721c4f7ee9975c059ea2ce62c104be985d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641b2721c4f7ee9975c059ea2ce62c104be985d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/641b2721c4f7ee9975c059ea2ce62c104be985d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/641b2721c4f7ee9975c059ea2ce62c104be985d3/comments", "author": null, "committer": null, "parents": [{"sha": "ee2f20b9c54f8638740fcdafecf9bdf776b734cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee2f20b9c54f8638740fcdafecf9bdf776b734cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee2f20b9c54f8638740fcdafecf9bdf776b734cc"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "a7384878beff2b1bd43119bfbb36d725361b71e6", "filename": "include/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -1,3 +1,9 @@\n+2001-05-07  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* demangle.h: Use PARAMS for all prototypes.\n+\t* ternary.h: Use PARAMS for all prototypes.  Use PTR, not void *.\n+\tMake arguments constant where possible.\n+\n 2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* splay-tree.h (splay_tree_max): New function."}, {"sha": "dc1e1f107440a9b55e6170cb3b3819f246b457e0", "filename": "include/demangle.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -139,7 +139,8 @@ enum gnu_v3_ctor_kinds {\n    in the G++ V3 ABI demangling style.  Specifically, return an `enum\n    gnu_v3_ctor_kinds' value indicating what kind of constructor\n    it is.  */\n-extern enum gnu_v3_ctor_kinds is_gnu_v3_mangled_ctor (const char *name);\n+extern enum gnu_v3_ctor_kinds\n+\tis_gnu_v3_mangled_ctor PARAMS ((const char *name));\n \n \n enum gnu_v3_dtor_kinds {\n@@ -152,6 +153,7 @@ enum gnu_v3_dtor_kinds {\n    in the G++ V3 ABI demangling style.  Specifically, return an `enum\n    gnu_v3_dtor_kinds' value, indicating what kind of destructor\n    it is.  */\n-extern enum gnu_v3_dtor_kinds is_gnu_v3_mangled_dtor (const char *name);\n+extern enum gnu_v3_dtor_kinds\n+\tis_gnu_v3_mangled_dtor PARAMS ((const char *name));\n \n #endif\t/* DEMANGLE_H */"}, {"sha": "40d442e6223e5a12f90fda83c3e7d0f5a322e5ba", "filename": "include/ternary.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2Fternary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/include%2Fternary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fternary.h?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -38,13 +38,14 @@ ternary_node;\n    already there, and replace is 0.\n    Otherwise, replaces if it it exists, inserts if it doesn't, and\n    returns the data you passed in. */\n-void *ternary_insert (ternary_tree *p, char *s, void *data, int replace);\n+PTR ternary_insert PARAMS ((ternary_tree *p, const char *s,\n+\t\t\t    PTR data, int replace));\n \n /* Delete the ternary search tree rooted at P. \n    Does NOT delete the data you associated with the strings. */\n-void ternary_cleanup (ternary_tree p);\n+void ternary_cleanup PARAMS ((ternary_tree p));\n \n /* Search the ternary tree for string S, returning the data associated\n    with it if found. */\n-void *ternary_search (ternary_tree p, char *s);\n+PTR ternary_search PARAMS ((const ternary_node *p, const char *s));\n #endif"}, {"sha": "bf8f221d910f6c6eb8375f3c6e4e943be9c2593d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -1,3 +1,11 @@\n+2001-05-07  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* cp-demangle.c (demangle_v3_with_details,\n+\tis_gnu_v3_mangled_ctor, is_gnu_v3_mangled_dtor): Use K+R style\n+\tfunction definition.\n+\t* ternary.c: Use K+R style function definitions.  Use PTR, not\n+\tvoid *.  Make arguments constant where possible.\n+\n 2001-05-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* splay-tree.h (splay_tree_max): New function."}, {"sha": "a6a2c1e9f1a56c6d74d67a3a4b1330e69bf57fb9", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -3819,7 +3819,8 @@ java_demangle_v3 (mangled)\n    zero, indicating that some error occurred, or a demangling_t\n    holding the results.  */\n static demangling_t\n-demangle_v3_with_details (const char *name)\n+demangle_v3_with_details (name)\n+     const char *name;\n {\n   demangling_t dm;\n   status_t status;\n@@ -3857,7 +3858,8 @@ demangle_v3_with_details (const char *name)\n    - '2' if NAME is a base object constructor, or\n    - '3' if NAME is a complete object allocating constructor.  */\n enum gnu_v3_ctor_kinds\n-is_gnu_v3_mangled_ctor (const char *name)\n+is_gnu_v3_mangled_ctor (name)\n+     const char *name;\n {\n   demangling_t dm = demangle_v3_with_details (name);\n \n@@ -3878,7 +3880,8 @@ is_gnu_v3_mangled_ctor (const char *name)\n    - '1' if NAME is a complete object destructor, or\n    - '2' if NAME is a base object destructor.  */\n enum gnu_v3_dtor_kinds\n-is_gnu_v3_mangled_dtor (const char *name)\n+is_gnu_v3_mangled_dtor (name)\n+     const char *name;\n {\n   demangling_t dm = demangle_v3_with_details (name);\n "}, {"sha": "056d2cee11ee661d4e7bfc2e3def8ec5fe7f13ef", "filename": "libiberty/ternary.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2Fternary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/641b2721c4f7ee9975c059ea2ce62c104be985d3/libiberty%2Fternary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fternary.c?ref=641b2721c4f7ee9975c059ea2ce62c104be985d3", "patch": "@@ -33,8 +33,12 @@\n /* Non-recursive so we don't waste stack space/time on large\n    insertions. */\n \n-void *\n-ternary_insert (ternary_tree * root, char *s, void *data, int replace)\n+PTR\n+ternary_insert (root, s, data, replace)\n+     ternary_tree *root;\n+     const char *s;\n+     PTR data;\n+     int replace;\n {\n   int diff;\n   ternary_tree curr, *pcurr;\n@@ -54,7 +58,7 @@ ternary_insert (ternary_tree * root, char *s, void *data, int replace)\n \t    {\n \t      if (replace)\n \t\tcurr->eqkid = (ternary_tree) data;\n-\t      return (void *) curr->eqkid;\n+\t      return (PTR) curr->eqkid;\n \t    }\n \t  pcurr = &(curr->eqkid);\n \t}\n@@ -94,7 +98,8 @@ ternary_insert (ternary_tree * root, char *s, void *data, int replace)\n \n /* Free the ternary search tree rooted at p. */\n void\n-ternary_cleanup (ternary_tree p)\n+ternary_cleanup (p)\n+     ternary_tree p;\n {\n   if (p)\n     {\n@@ -107,10 +112,12 @@ ternary_cleanup (ternary_tree p)\n }\n \n /* Non-recursive find of a string in the ternary tree */\n-void *\n-ternary_search (ternary_tree p, char *s)\n+PTR\n+ternary_search (p, s)\n+     const ternary_node *p;\n+     const char *s;\n {\n-  ternary_tree curr;\n+  const ternary_node *curr;\n   int diff, spchar;\n   spchar = *s;\n   curr = p;\n@@ -123,7 +130,7 @@ ternary_search (ternary_tree p, char *s)\n       if (diff == 0)\n \t{\n \t  if (spchar == 0)\n-\t    return (void *) curr->eqkid;\n+\t    return (PTR) curr->eqkid;\n \t  spchar = *++s;\n \t  curr = curr->eqkid;\n \t}\n@@ -139,8 +146,10 @@ ternary_search (ternary_tree p, char *s)\n \n /* For those who care, the recursive version of the search. Useful if\n    you want a starting point for pmsearch or nearsearch. */\n-static void *\n-ternary_recursivesearch (ternary_tree p, char *s)\n+static PTR\n+ternary_recursivesearch (p, s)\n+     const ternary_node *p;\n+     const char *s;\n {\n   if (!p)\n     return 0;\n@@ -151,7 +160,7 @@ ternary_recursivesearch (ternary_tree p, char *s)\n   else\n     {\n       if (*s == 0)\n-\treturn (void *) p->eqkid;\n+\treturn (PTR) p->eqkid;\n       return ternary_recursivesearch (p->eqkid, ++s);\n     }\n }"}]}