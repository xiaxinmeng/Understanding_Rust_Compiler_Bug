{"sha": "895ea8f080abe5d2b456152cdc49277db059e655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk1ZWE4ZjA4MGFiZTVkMmI0NTYxNTJjZGM0OTI3N2RiMDU5ZTY1NQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-01-27T11:15:23Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-01-27T11:15:23Z"}, "message": "rs6000.h: Correct target_flags free bits comment.\n\n\t* config/rs6000/rs6000.h: Correct target_flags free bits comment.\n\t(PREDICATE_CODES): Remove duplicate.\n\t* config/rs6000/linux64.h (CPP_SYSV_SPEC): Don't define.\n\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Disallow 32 bit TARGET_PROFILE_KERNEL.\n\t(MASK_PROFILE_KERNEL): Adjust define.\n\nFrom-SVN: r76697", "tree": {"sha": "b8583dbdfc6c40ee1d7122651811da7180d28690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8583dbdfc6c40ee1d7122651811da7180d28690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/895ea8f080abe5d2b456152cdc49277db059e655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895ea8f080abe5d2b456152cdc49277db059e655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/895ea8f080abe5d2b456152cdc49277db059e655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/895ea8f080abe5d2b456152cdc49277db059e655/comments", "author": null, "committer": null, "parents": [{"sha": "a3af79eab6131f17e2be677c12e720c4746cfec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3af79eab6131f17e2be677c12e720c4746cfec1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3af79eab6131f17e2be677c12e720c4746cfec1"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "e4319c734ed3bed851d93c3350e9cfe84759112c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=895ea8f080abe5d2b456152cdc49277db059e655", "patch": "@@ -1,3 +1,11 @@\n+2004-01-27  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.h: Correct target_flags free bits comment.\n+\t(PREDICATE_CODES): Remove duplicate.\n+\t* config/rs6000/linux64.h (CPP_SYSV_SPEC): Don't define.\n+\t(SUBSUBTARGET_OVERRIDE_OPTIONS): Disallow 32 bit TARGET_PROFILE_KERNEL.\n+\t(MASK_PROFILE_KERNEL): Adjust define.\n+\n 2004-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_constant_alignment): Decrease alignment"}, {"sha": "6bb60d39b13bd321930f7daf15de5b2d77eaf148", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=895ea8f080abe5d2b456152cdc49277db059e655", "patch": "@@ -100,6 +100,11 @@\n \t{\t\t\t\t\t\t\t\\\n \t  if (!RS6000_BI_ARCH_P)\t\t\t\t\\\n \t    error (INVALID_32BIT, \"32\");\t\t\t\\\n+\t  if (TARGET_PROFILE_KERNEL)\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      target_flags &= ~MASK_PROFILE_KERNEL;\t\t\\\n+\t      error (INVALID_32BIT, \"profile-kernel\");\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -186,7 +191,7 @@\n \n #endif\n \n-#define\tMASK_PROFILE_KERNEL\t0x00080000\n+#define\tMASK_PROFILE_KERNEL\t0x00100000\n \n /* Non-standard profiling for kernels, which just saves LR then calls\n    _mcount without worrying about arg saves.  The idea is to change\n@@ -282,10 +287,6 @@\n #undef MD_EXEC_PREFIX\n #undef MD_STARTFILE_PREFIX\n \n-/* Override sysv4.h  */\n-#undef\tCPP_SYSV_SPEC\n-#define\tCPP_SYSV_SPEC \"\"\n-\n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS()            \t\t\\\n   do\t\t\t\t\t\t\t\\"}, {"sha": "4d83416d548488bb51fae719c99f37c52affe837", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/895ea8f080abe5d2b456152cdc49277db059e655/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=895ea8f080abe5d2b456152cdc49277db059e655", "patch": "@@ -193,9 +193,9 @@ extern int target_flags;\n /* Use single field mfcr instruction.  */\n #define MASK_MFCRF\t\t0x00080000\n \n-/* The only remaining free bits are 0x00700000. sysv4.h uses\n-   0x00800000 -> 0x40000000, and 0x80000000 is not available\n-   because target_flags is signed.  */\n+/* The only remaining free bits are 0x00600000.  linux64.h uses\n+   0x00100000, and sysv4.h uses 0x00800000 -> 0x40000000.\n+   0x80000000 is not available because target_flags is signed.  */\n \n #define TARGET_POWER\t\t(target_flags & MASK_POWER)\n #define TARGET_POWER2\t\t(target_flags & MASK_POWER2)\n@@ -2653,7 +2653,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n   {\"reg_or_logical_cint_operand\", {SUBREG, REG, CONST_INT, CONST_DOUBLE}}, \\\n   {\"got_operand\", {SYMBOL_REF, CONST, LABEL_REF}},\t\t\t   \\\n   {\"got_no_const_operand\", {SYMBOL_REF, LABEL_REF}},\t\t\t   \\\n-  {\"rs6000_tls_symbol_ref\", {SYMBOL_REF}},\t\t\t\t   \\\n   {\"easy_fp_constant\", {CONST_DOUBLE}},\t\t\t\t\t   \\\n   {\"easy_vector_constant\", {CONST_VECTOR}},\t\t\t\t   \\\n   {\"easy_vector_constant_add_self\", {CONST_VECTOR}},\t\t\t   \\"}]}