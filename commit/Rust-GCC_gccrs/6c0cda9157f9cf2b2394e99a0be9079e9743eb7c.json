{"sha": "6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwY2RhOTE1N2Y5Y2YyYjIzOTRlOTlhMGJlOTA3OWU5NzQzZWI3Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:24:03Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:24:03Z"}, "message": "reg-stack.c: Include rtl-iter.h.\n\ngcc/\n\t* reg-stack.c: Include rtl-iter.h.\n\t(subst_stack_regs_in_debug_insn): Delete.\n\t(subst_all_stack_regs_in_debug_insn): Use FOR_EACH_SUBRTX_PTR\n\tinstead of for_each_rtx.\n\nFrom-SVN: r214650", "tree": {"sha": "25f0805d73871b5eb9bd6d14cc30a8e59f40de80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25f0805d73871b5eb9bd6d14cc30a8e59f40de80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a36a1928e2b23355618c68a2d8d7e5a17b827df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36a1928e2b23355618c68a2d8d7e5a17b827df8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36a1928e2b23355618c68a2d8d7e5a17b827df8"}], "stats": {"total": 60, "additions": 28, "deletions": 32}, "files": [{"sha": "20dedc9a80e98e4936baef411578ba7ef0e291e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* reg-stack.c: Include rtl-iter.h.\n+\t(subst_stack_regs_in_debug_insn): Delete.\n+\t(subst_all_stack_regs_in_debug_insn): Use FOR_EACH_SUBRTX_PTR\n+\tinstead of for_each_rtx.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* lower-subreg.c (find_decomposable_subregs): Turn from being"}, {"sha": "af8e3cd7ec3b8ccbad369538c55e9dee6b1c06ad", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c0cda9157f9cf2b2394e99a0be9079e9743eb7c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=6c0cda9157f9cf2b2394e99a0be9079e9743eb7c", "patch": "@@ -170,6 +170,7 @@\n #include \"target.h\"\n #include \"df.h\"\n #include \"emit-rtl.h\"  /* FIXME: Can go away once crtl is moved to rtl.h.  */\n+#include \"rtl-iter.h\"\n \n #ifdef STACK_REGS\n \n@@ -1308,46 +1309,34 @@ compare_for_stack_reg (rtx_insn *insn, stack_ptr regstack, rtx pat_src)\n     }\n }\n \f\n-/* Substitute new registers in LOC, which is part of a debug insn.\n-   REGSTACK is the current register layout.  */\n-\n-static int\n-subst_stack_regs_in_debug_insn (rtx *loc, void *data)\n-{\n-  stack_ptr regstack = (stack_ptr)data;\n-  int hard_regno;\n-\n-  if (!STACK_REG_P (*loc))\n-    return 0;\n-\n-  hard_regno = get_hard_regnum (regstack, *loc);\n-\n-  /* If we can't find an active register, reset this debug insn.  */\n-  if (hard_regno == -1)\n-    return 1;\n-\n-  gcc_assert (hard_regno >= FIRST_STACK_REG);\n-\n-  replace_reg (loc, hard_regno);\n-\n-  return -1;\n-}\n-\n /* Substitute hardware stack regs in debug insn INSN, using stack\n    layout REGSTACK.  If we can't find a hardware stack reg for any of\n    the REGs in it, reset the debug insn.  */\n \n static void\n subst_all_stack_regs_in_debug_insn (rtx_insn *insn, struct stack_def *regstack)\n {\n-  int ret = for_each_rtx (&INSN_VAR_LOCATION_LOC (insn),\n-\t\t\t  subst_stack_regs_in_debug_insn,\n-\t\t\t  regstack);\n+  subrtx_ptr_iterator::array_type array;\n+  FOR_EACH_SUBRTX_PTR (iter, array, &INSN_VAR_LOCATION_LOC (insn), NONCONST)\n+    {\n+      rtx *loc = *iter;\n+      rtx x = *loc;\n+      if (STACK_REG_P (x))\n+\t{\n+\t  int hard_regno = get_hard_regnum (regstack, x);\n \n-  if (ret == 1)\n-    INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n-  else\n-    gcc_checking_assert (ret == 0);\n+\t  /* If we can't find an active register, reset this debug insn.  */\n+\t  if (hard_regno == -1)\n+\t    {\n+\t      INSN_VAR_LOCATION_LOC (insn) = gen_rtx_UNKNOWN_VAR_LOC ();\n+\t      return;\n+\t    }\n+\n+\t  gcc_assert (hard_regno >= FIRST_STACK_REG);\n+\t  replace_reg (loc, hard_regno);\n+\t  iter.skip_subrtxes ();\n+\t}\n+    }\n }\n \n /* Substitute new registers in PAT, which is part of INSN.  REGSTACK"}]}