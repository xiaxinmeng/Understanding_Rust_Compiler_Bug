{"sha": "c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkN2MzOWZjYjhhM2NiNjc2MDBjZGI2ZmRlNDllY2IwZTk1MTU4OQ==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-03-14T19:39:58Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-03-14T19:39:58Z"}, "message": "PR fortran/99112 - ICE with runtime diagnostics for SIZE intrinsic function\n\nAdd/fix handling of runtime checks for CLASS arguments with ALLOCATABLE\nor POINTER attribute.\n\ngcc/fortran/ChangeLog:\n\n\t* trans-expr.c (gfc_conv_procedure_call): Fix runtime checks for\n\tCLASS arguments.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gfortran.dg/pr99112.f90: New test.\n\nCo-authored-by: Paul Thomas <pault@gcc.gnu.org>", "tree": {"sha": "bc438cfdc6425aab5410aaf00f19c1adfe53a2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc438cfdc6425aab5410aaf00f19c1adfe53a2cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553488851dd150c09c245ee64b2c0c3c15f75bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/553488851dd150c09c245ee64b2c0c3c15f75bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/553488851dd150c09c245ee64b2c0c3c15f75bbd"}], "stats": {"total": 69, "additions": 59, "deletions": 10}, "files": [{"sha": "bffe0808dffec81c193b1f678ba37412931d8403", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "patch": "@@ -6662,6 +6662,7 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t  symbol_attribute attr;\n \t  char *msg;\n \t  tree cond;\n+\t  tree tmp;\n \n \t  if (e->expr_type == EXPR_VARIABLE || e->expr_type == EXPR_FUNCTION)\n \t    attr = gfc_expr_attr (e);\n@@ -6732,11 +6733,20 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t      else\n \t\tgoto end_pointer_check;\n \n-\t      tmp = parmse.expr;\n+\t      if (fsym && fsym->ts.type == BT_CLASS)\n+\t\t{\n+\t\t  tmp = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t      parmse.expr);\n+\t\t  tmp = gfc_class_data_get (tmp);\n+\t\t  if (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (tmp)))\n+\t\t    tmp = gfc_conv_descriptor_data_get (tmp);\n+\t\t}\n+\t      else\n+\t\ttmp = parmse.expr;\n \n \t      /* If the argument is passed by value, we need to strip the\n \t\t INDIRECT_REF.  */\n-\t      if (!POINTER_TYPE_P (TREE_TYPE (parmse.expr)))\n+\t      if (!POINTER_TYPE_P (TREE_TYPE (tmp)))\n \t\ttmp = gfc_build_addr_expr (NULL_TREE, tmp);\n \n \t      cond = fold_build2_loc (input_location, EQ_EXPR,"}, {"sha": "5e53d1162fadf2a50421481c533df04886380f41", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "patch": "@@ -8006,8 +8006,10 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n     {\n       symbol_attribute attr;\n       char *msg;\n+      tree temp;\n+      tree cond;\n \n-      attr = gfc_expr_attr (e);\n+      attr = sym ? sym->attr : gfc_expr_attr (e);\n       if (attr.allocatable)\n \tmsg = xasprintf (\"Allocatable argument '%s' is not allocated\",\n \t\t\t e->symtree->n.sym->name);\n@@ -8017,14 +8019,24 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n       else\n \tgoto end_arg_check;\n \n-      argse.descriptor_only = 1;\n-      gfc_conv_expr_descriptor (&argse, actual->expr);\n-      tree temp = gfc_conv_descriptor_data_get (argse.expr);\n-      tree cond = fold_build2_loc (input_location, EQ_EXPR,\n-\t\t\t\t   logical_type_node, temp,\n-\t\t\t\t   fold_convert (TREE_TYPE (temp),\n-\t\t\t\t\t\t null_pointer_node));\n+      if (sym)\n+\t{\n+\t  temp = gfc_class_data_get (sym->backend_decl);\n+\t  temp = gfc_conv_descriptor_data_get (temp);\n+\t}\n+      else\n+\t{\n+\t  argse.descriptor_only = 1;\n+\t  gfc_conv_expr_descriptor (&argse, actual->expr);\n+\t  temp = gfc_conv_descriptor_data_get (argse.expr);\n+\t}\n+\n+      cond = fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t      logical_type_node, temp,\n+\t\t\t      fold_convert (TREE_TYPE (temp),\n+\t\t\t\t\t    null_pointer_node));\n       gfc_trans_runtime_check (true, false, cond, &argse.pre, &e->where, msg);\n+\n       free (msg);\n     }\n  end_arg_check:"}, {"sha": "94010615b8373c17db179b6816679c868b6ca4d9", "filename": "gcc/testsuite/gfortran.dg/pr99112.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99112.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99112.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr99112.f90?ref=c2d7c39fcb8a3cb67600cdb6fde49ecb0e951589", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-fcheck=pointer -fdump-tree-original\" }\n+! PR99112 - ICE with runtime diagnostics for SIZE intrinsic function\n+ \n+module m\n+  type t\n+  end type\n+contains\n+  function f (x, y) result(z)\n+    class(t) :: x(:)\n+    class(t) :: y(size(x))\n+    type(t)  :: z(size(x))\n+  end\n+  function g (x) result(z)\n+    class(*) :: x(:)\n+    type(t)  :: z(size(x))\n+  end\n+  subroutine s ()\n+    class(t), allocatable :: a(:), b(:), c(:), d(:)\n+    class(t), pointer     :: p(:)\n+    c = f (a, b)\n+    d = g (p)\n+  end\n+end\n+! { dg-final { scan-tree-dump-times \"_gfortran_runtime_error_at\" 3 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"Allocatable actual argument\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"Pointer actual argument\" 1 \"original\" } }"}]}