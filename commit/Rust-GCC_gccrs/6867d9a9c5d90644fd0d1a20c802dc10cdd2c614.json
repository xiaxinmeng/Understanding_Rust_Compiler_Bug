{"sha": "6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg2N2Q5YTljNWQ5MDY0NGZkMGQxYTIwYzgwMmRjMTBjZGQyYzYxNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2012-07-06T11:22:06Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2012-07-06T11:22:06Z"}, "message": "re PR tree-optimization/51879 (Missed tail merging with non-const/pure calls)\n\n2012-07-06  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/51879\n\t* tree-ssa-sccvn.c (copy_reference_ops_from_call)\n\t(visit_reference_op_call): Handle case that lhs is not an SSA_NAME.\n\t(visit_use): Also call visit_reference_op_call for calls with a vdef.\n\nFrom-SVN: r189323", "tree": {"sha": "b8a5232a7a7ad1c720000d14143a6703598865c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8a5232a7a7ad1c720000d14143a6703598865c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614/comments", "author": null, "committer": null, "parents": [{"sha": "6cf5e1d0514b6bba0e3b5d59b440dd7a451e6d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cf5e1d0514b6bba0e3b5d59b440dd7a451e6d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cf5e1d0514b6bba0e3b5d59b440dd7a451e6d1f"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "871e023603fa6eac587ea79dc3112f338ccca076", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "patch": "@@ -1,3 +1,10 @@\n+2012-07-06  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/51879\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_call)\n+\t(visit_reference_op_call): Handle case that lhs is not an SSA_NAME.\n+\t(visit_use): Also call visit_reference_op_call for calls with a vdef.\n+\n 2012-07-06  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/52009"}, {"sha": "c1102a2c56e6f0a672d794ffd9a50eb15e4983bd", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6867d9a9c5d90644fd0d1a20c802dc10cdd2c614/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6867d9a9c5d90644fd0d1a20c802dc10cdd2c614", "patch": "@@ -946,6 +946,20 @@ copy_reference_ops_from_call (gimple call,\n {\n   vn_reference_op_s temp;\n   unsigned i;\n+  tree lhs = gimple_call_lhs (call);\n+\n+  /* If 2 calls have a different non-ssa lhs, vdef value numbers should be\n+     different.  By adding the lhs here in the vector, we ensure that the\n+     hashcode is different, guaranteeing a different value number.  */\n+  if (lhs && TREE_CODE (lhs) != SSA_NAME)\n+    {\n+      memset (&temp, 0, sizeof (temp));\n+      temp.opcode = MODIFY_EXPR;\n+      temp.type = TREE_TYPE (lhs);\n+      temp.op0 = lhs;\n+      temp.off = -1;\n+      VEC_safe_push (vn_reference_op_s, heap, *result, &temp);\n+    }\n \n   /* Copy the type, opcode, function being called and static chain.  */\n   memset (&temp, 0, sizeof (temp));\n@@ -2633,6 +2647,10 @@ visit_reference_op_call (tree lhs, gimple stmt)\n   tree vuse = gimple_vuse (stmt);\n   tree vdef = gimple_vdef (stmt);\n \n+  /* Non-ssa lhs is handled in copy_reference_ops_from_call.  */\n+  if (lhs && TREE_CODE (lhs) != SSA_NAME)\n+    lhs = NULL_TREE;\n+\n   vr1.vuse = vuse ? SSA_VAL (vuse) : NULL_TREE;\n   vr1.operands = valueize_shared_reference_ops_from_call (stmt);\n   vr1.type = gimple_expr_type (stmt);\n@@ -3424,18 +3442,20 @@ visit_use (tree use)\n \t\t}\n \t    }\n \n-\t  /* ???  We should handle stores from calls.  */\n \t  if (!gimple_call_internal_p (stmt)\n-\t      && (gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST)\n-\t\t  /* If the call has side effects, subsequent calls won't have\n-\t\t     the same incoming vuse, so it's save to assume\n-\t\t     equality.  */\n-\t\t  || gimple_has_side_effects (stmt))\n-\t      && ((lhs && TREE_CODE (lhs) == SSA_NAME)\n-\t\t  || (!lhs && gimple_vdef (stmt))))\n-\t    {\n-\t      changed = visit_reference_op_call (lhs, stmt);\n-\t    }\n+\t      && (/* Calls to the same function with the same vuse\n+\t\t     and the same operands do not necessarily return the same\n+\t\t     value, unless they're pure or const.  */\n+\t\t  gimple_call_flags (stmt) & (ECF_PURE | ECF_CONST)\n+\t\t  /* If calls have a vdef, subsequent calls won't have\n+\t\t     the same incoming vuse.  So, if 2 calls with vdef have the\n+\t\t     same vuse, we know they're not subsequent.\n+\t\t     We can value number 2 calls to the same function with the\n+\t\t     same vuse and the same operands which are not subsequent\n+\t\t     the same, because there is no code in the program that can\n+\t\t     compare the 2 values.  */\n+\t\t  || gimple_vdef (stmt)))\n+\t    changed = visit_reference_op_call (lhs, stmt);\n \t  else\n \t    changed = defs_to_varying (stmt);\n \t}"}]}