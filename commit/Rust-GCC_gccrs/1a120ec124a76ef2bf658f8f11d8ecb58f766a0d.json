{"sha": "1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExMjBlYzEyNGE3NmVmMmJmNjU4ZjhmMTFkOGVjYjU4Zjc2NmEwZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-09-27T18:23:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-09-27T18:23:10Z"}, "message": "constexpr.c (cxx_fold_indirect_ref): Use similar_type_p.\n\n\t* constexpr.c (cxx_fold_indirect_ref): Use similar_type_p.\n\nMerging the similar_type_p change to the concepts branch broke a cmcstl2\ntestcase; investigating led me to this small testcase which has always\nfailed on trunk.\n\n\t(cxx_eval_indirect_ref): Likewise.  Improve error location.\n\nFrom-SVN: r276192", "tree": {"sha": "50a534b5421c3c1b66778dbf2353a5cf59608074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50a534b5421c3c1b66778dbf2353a5cf59608074"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c872f1506d46ceba10776d0ebc86b4126273a419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c872f1506d46ceba10776d0ebc86b4126273a419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c872f1506d46ceba10776d0ebc86b4126273a419"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "20f543ea716792fb20dbf6241cc0acaf18bdf740", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "patch": "@@ -1,5 +1,8 @@\n 2019-09-27  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (cxx_fold_indirect_ref): Use similar_type_p.\n+\t(cxx_eval_indirect_ref): Likewise.  Improve error location.\n+\n \t* cp-tree.h (class iloc_sentinel): New.\n \t* decl.c (grokdeclarator, finish_enum_value_list): Use it.\n \t* mangle.c (mangle_decl_string): Use it."}, {"sha": "cb5484f4b72d55740fc77b7388974939c45fe9ad", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "patch": "@@ -3388,7 +3388,7 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n       if (TREE_CODE (op) == CONST_DECL)\n \treturn DECL_INITIAL (op);\n       /* *&p => p;  make sure to handle *&\"str\"[cst] here.  */\n-      if (same_type_ignoring_tlq_and_bounds_p (optype, type))\n+      if (similar_type_p (optype, type))\n \t{\n \t  tree fop = fold_read_from_constant_string (op);\n \t  if (fop)\n@@ -3398,8 +3398,7 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t}\n       /* *(foo *)&fooarray => fooarray[0] */\n       else if (TREE_CODE (optype) == ARRAY_TYPE\n-\t       && (same_type_ignoring_top_level_qualifiers_p\n-\t\t   (type, TREE_TYPE (optype))))\n+\t       && similar_type_p (type, TREE_TYPE (optype)))\n \t{\n \t  tree type_domain = TYPE_DOMAIN (optype);\n \t  tree min_val = size_zero_node;\n@@ -3410,13 +3409,11 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t}\n       /* *(foo *)&complexfoo => __real__ complexfoo */\n       else if (TREE_CODE (optype) == COMPLEX_TYPE\n-\t       && (same_type_ignoring_top_level_qualifiers_p\n-\t\t   (type, TREE_TYPE (optype))))\n+\t       && similar_type_p (type, TREE_TYPE (optype)))\n \treturn fold_build1_loc (loc, REALPART_EXPR, type, op);\n       /* *(foo *)&vectorfoo => BIT_FIELD_REF<vectorfoo,...> */\n       else if (VECTOR_TYPE_P (optype)\n-\t       && (same_type_ignoring_top_level_qualifiers_p\n-\t\t   (type, TREE_TYPE (optype))))\n+\t       && similar_type_p (type, TREE_TYPE (optype)))\n \t{\n \t  tree part_width = TYPE_SIZE (type);\n \t  tree index = bitsize_int (0);\n@@ -3440,8 +3437,7 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t    if (TREE_CODE (field) == FIELD_DECL\n \t\t&& TREE_TYPE (field) != error_mark_node\n \t\t&& integer_zerop (byte_position (field))\n-\t\t&& (same_type_ignoring_top_level_qualifiers_p\n-\t\t    (TREE_TYPE (field), type)))\n+\t\t&& similar_type_p (TREE_TYPE (field), type))\n \t      return fold_build3 (COMPONENT_REF, type, op, field, NULL_TREE);\n \t}\n     }\n@@ -3460,8 +3456,7 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \n \t  /* ((foo*)&vectorfoo)[1] => BIT_FIELD_REF<vectorfoo,...> */\n \t  if (VECTOR_TYPE_P (op00type)\n-\t      && same_type_ignoring_top_level_qualifiers_p\n-\t\t\t\t\t\t(type, TREE_TYPE (op00type))\n+\t      && similar_type_p (type, TREE_TYPE (op00type))\n \t      /* POINTER_PLUS_EXPR second operand is sizetype, unsigned,\n \t\t but we want to treat offsets with MSB set as negative.\n \t\t For the code below negative offsets are invalid and\n@@ -3486,17 +3481,15 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t    }\n \t  /* ((foo*)&complexfoo)[1] => __imag__ complexfoo */\n \t  else if (TREE_CODE (op00type) == COMPLEX_TYPE\n-\t\t   && (same_type_ignoring_top_level_qualifiers_p\n-\t\t       (type, TREE_TYPE (op00type))))\n+\t\t   && similar_type_p (type, TREE_TYPE (op00type)))\n \t    {\n \t      if (known_eq (wi::to_poly_offset (TYPE_SIZE_UNIT (type)),\n \t\t\t    const_op01))\n \t\treturn fold_build1_loc (loc, IMAGPART_EXPR, type, op00);\n \t    }\n \t  /* ((foo *)&fooarray)[1] => fooarray[1] */\n \t  else if (TREE_CODE (op00type) == ARRAY_TYPE\n-\t\t   && (same_type_ignoring_top_level_qualifiers_p\n-\t\t       (type, TREE_TYPE (op00type))))\n+\t\t   && similar_type_p (type, TREE_TYPE (op00type)))\n \t    {\n \t      tree type_domain = TYPE_DOMAIN (op00type);\n \t      tree min_val = size_zero_node;\n@@ -3531,17 +3524,15 @@ cxx_fold_indirect_ref (location_t loc, tree type, tree op0, bool *empty_base)\n \t\tif (TREE_CODE (field) == FIELD_DECL\n \t\t    && TREE_TYPE (field) != error_mark_node\n \t\t    && tree_int_cst_equal (byte_position (field), op01)\n-\t\t    && (same_type_ignoring_top_level_qualifiers_p\n-\t\t\t(TREE_TYPE (field), type)))\n+\t\t    && similar_type_p (TREE_TYPE (field), type))\n \t\t  return fold_build3 (COMPONENT_REF, type, op00,\n \t\t\t\t      field, NULL_TREE);\n \t    }\n \t}\n     }\n   /* *(foo *)fooarrptr => (*fooarrptr)[0] */\n   else if (TREE_CODE (TREE_TYPE (subtype)) == ARRAY_TYPE\n-\t   && (same_type_ignoring_top_level_qualifiers_p\n-\t       (type, TREE_TYPE (TREE_TYPE (subtype)))))\n+\t   && similar_type_p (type, TREE_TYPE (TREE_TYPE (subtype))))\n     {\n       tree type_domain;\n       tree min_val = size_zero_node;\n@@ -3611,13 +3602,14 @@ cxx_eval_indirect_ref (const constexpr_ctx *ctx, tree t,\n \t  STRIP_NOPS (sub);\n \t  if (TREE_CODE (sub) == ADDR_EXPR)\n \t    {\n-\t      gcc_assert (!same_type_ignoring_top_level_qualifiers_p\n+\t      gcc_assert (!similar_type_p\n \t\t\t  (TREE_TYPE (TREE_TYPE (sub)), TREE_TYPE (t)));\n \t      /* DR 1188 says we don't have to deal with this.  */\n \t      if (!ctx->quiet)\n-\t\terror (\"accessing value of %qE through a %qT glvalue in a \"\n-\t\t       \"constant expression\", build_fold_indirect_ref (sub),\n-\t\t       TREE_TYPE (t));\n+\t\terror_at (cp_expr_loc_or_input_loc (t),\n+\t\t\t  \"accessing value of %qE through a %qT glvalue in a \"\n+\t\t\t  \"constant expression\", build_fold_indirect_ref (sub),\n+\t\t\t  TREE_TYPE (t));\n \t      *non_constant_p = true;\n \t      return t;\n \t    }"}, {"sha": "7aa16a362fdb826dec61e42047965e0d83c361c2", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-const2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-const2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a120ec124a76ef2bf658f8f11d8ecb58f766a0d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-const2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-const2.C?ref=1a120ec124a76ef2bf658f8f11d8ecb58f766a0d", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile { target c++11 } }\n+\n+int i = 42;\n+constexpr int *p = &i;\n+constexpr int const *const *q = &p;\n+constexpr int const *r = *q;"}]}