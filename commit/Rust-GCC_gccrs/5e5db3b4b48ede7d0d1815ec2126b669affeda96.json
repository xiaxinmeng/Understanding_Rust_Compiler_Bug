{"sha": "5e5db3b4b48ede7d0d1815ec2126b669affeda96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1ZGIzYjRiNDhlZGU3ZDBkMTgxNWVjMjEyNmI2NjlhZmZlZGE5Ng==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2010-10-22T10:28:52Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-22T10:28:52Z"}, "message": "sem_ch3.adb (Check_Or_Process_Discriminants): In Ada 2012, allow limited tagged types to have defaulted discriminants.\n\n2010-10-22  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch3.adb (Check_Or_Process_Discriminants): In Ada 2012, allow\n\tlimited tagged types to have defaulted discriminants. Customize the\n\terror message for the Ada 2012 case.\n\t(Process_Discriminants): In Ada 2012, allow limited tagged types to have\n\tdefaulted discriminants. Customize the error message for the Ada 2012\n\tcase.\n\t* sem_ch6.adb (Create_Extra_Formals): Suppress creation of the extra\n\tformal for out formals of discriminated types in the case where the\n\tunderlying type is a limited tagged type.\n\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n\tAttribute_Constrained): Return True for 'Constrained when the\n\tunderlying type of the prefix is a limited tagged type.\n\nFrom-SVN: r165819", "tree": {"sha": "b62adf60e72734b8896d83cb6ca033a7f86f4335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b62adf60e72734b8896d83cb6ca033a7f86f4335"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5db3b4b48ede7d0d1815ec2126b669affeda96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5db3b4b48ede7d0d1815ec2126b669affeda96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5db3b4b48ede7d0d1815ec2126b669affeda96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5db3b4b48ede7d0d1815ec2126b669affeda96/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a043e7356e5eb2e7c0c09f0775d7647c8f2a0ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a043e7356e5eb2e7c0c09f0775d7647c8f2a0ece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a043e7356e5eb2e7c0c09f0775d7647c8f2a0ece"}], "stats": {"total": 104, "additions": 87, "deletions": 17}, "files": [{"sha": "8028ecb292faddf19bfe338857d79f07ba2a6a1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e5db3b4b48ede7d0d1815ec2126b669affeda96", "patch": "@@ -1,3 +1,18 @@\n+2010-10-22  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch3.adb (Check_Or_Process_Discriminants): In Ada 2012, allow\n+\tlimited tagged types to have defaulted discriminants. Customize the\n+\terror message for the Ada 2012 case.\n+\t(Process_Discriminants): In Ada 2012, allow limited tagged types to have\n+\tdefaulted discriminants. Customize the error message for the Ada 2012\n+\tcase.\n+\t* sem_ch6.adb (Create_Extra_Formals): Suppress creation of the extra\n+\tformal for out formals of discriminated types in the case where the\n+\tunderlying type is a limited tagged type.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference, case\n+\tAttribute_Constrained): Return True for 'Constrained when the\n+\tunderlying type of the prefix is a limited tagged type.\n+\n 2010-10-22  Thomas Quinot  <quinot@adacore.com>\n \n \t* sem_ch3.adb (Complete_Private_Subtype): The full view of the subtype"}, {"sha": "3f47a3050b75b3307545f1d34b51c74f1bbb9bf0", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=5e5db3b4b48ede7d0d1815ec2126b669affeda96", "patch": "@@ -1644,17 +1644,30 @@ package body Exp_Attr is\n                --  internally for passing to the Extra_Constrained parameter.\n \n                else\n-                  Res := Is_Constrained (Underlying_Type (Etype (Ent)));\n+                  --  In Ada 2012, test for case of a limited tagged type, in\n+                  --  which case the attribute is always required to return\n+                  --  True. The underlying type is tested, to make sure we also\n+                  --  return True for cases where there is an unconstrained\n+                  --  object with an untagged limited partial view which has\n+                  --  defaulted discriminants (such objects always produce a\n+                  --  False in earlier versions of Ada). (Ada 2012: AI05-0214)\n+\n+                  Res := Is_Constrained (Underlying_Type (Etype (Ent)))\n+                           or else\n+                             (Ada_Version >= Ada_2012\n+                               and then Is_Tagged_Type (Underlying_Type (Ptyp))\n+                               and then Is_Limited_Type (Ptyp));\n                end if;\n \n-               Rewrite (N,\n-                 New_Reference_To (Boolean_Literals (Res), Loc));\n+               Rewrite (N, New_Reference_To (Boolean_Literals (Res), Loc));\n             end;\n \n          --  Prefix is not an entity name. These are also cases where we can\n          --  always tell at compile time by looking at the form and type of the\n          --  prefix. If an explicit dereference of an object with constrained\n-         --  partial view, this is unconstrained (Ada 2005 AI-363).\n+         --  partial view, this is unconstrained (Ada 2005: AI95-0363). If the\n+         --  underlying type is a limited tagged type, then Constrained is\n+         --  required to always return True (Ada 2012: AI05-0214).\n \n          else\n             Rewrite (N,\n@@ -1663,9 +1676,12 @@ package body Exp_Attr is\n                   not Is_Variable (Pref)\n                     or else\n                      (Nkind (Pref) = N_Explicit_Dereference\n-                        and then\n-                          not Has_Constrained_Partial_View (Base_Type (Ptyp)))\n-                    or else Is_Constrained (Underlying_Type (Ptyp))),\n+                       and then\n+                         not Has_Constrained_Partial_View (Base_Type (Ptyp)))\n+                    or else Is_Constrained (Underlying_Type (Ptyp))\n+                    or else (Ada_Version >= Ada_2012\n+                              and then Is_Tagged_Type (Underlying_Type (Ptyp))\n+                              and then Is_Limited_Type (Ptyp))),\n                 Loc));\n          end if;\n "}, {"sha": "5322387c3a49b1f62fa0f5609b0a7c9c529834e5", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5e5db3b4b48ede7d0d1815ec2126b669affeda96", "patch": "@@ -9639,16 +9639,28 @@ package body Sem_Ch3 is\n \n                --  Handle the case where there is an untagged partial view and\n                --  the full view is tagged: must disallow discriminants with\n-               --  defaults. However suppress the error here if it was already\n-               --  reported on the default expression of the partial view.\n+               --  defaults, unless compiling for Ada 2012, which allows a\n+               --  limited tagged type to have defaulted discriminants (see\n+               --  AI05-0214). However, suppress the error here if it was\n+               --  already reported on the default expression of the partial\n+               --  view.\n \n                if Is_Tagged_Type (T)\n                     and then Present (Expression (Parent (D)))\n+                    and then (not Is_Limited_Type (Current_Scope)\n+                               or else Ada_Version < Ada_2012)\n                     and then not Error_Posted (Expression (Parent (D)))\n                then\n-                  Error_Msg_N\n-                    (\"discriminants of tagged type cannot have defaults\",\n-                     Expression (New_D));\n+                  if Ada_Version >= Ada_2012 then\n+                     Error_Msg_N\n+                       (\"discriminants of nonlimited tagged type cannot have\"\n+                          & \" defaults\",\n+                        Expression (New_D));\n+                  else\n+                     Error_Msg_N\n+                       (\"discriminants of tagged type cannot have defaults\",\n+                        Expression (New_D));\n+                  end if;\n                end if;\n \n                --  Ada 2005 (AI-230): Access discriminant allowed in\n@@ -16442,20 +16454,33 @@ package body Sem_Ch3 is\n                  (\"discriminant defaults not allowed for formal type\",\n                   Expression (Discr));\n \n+            --  Flag an error for a tagged type with defaulted discriminants,\n+            --  excluding limited tagged types when compiling for Ada 2012\n+            --  (see AI05-0214).\n+\n             elsif Is_Tagged_Type (Current_Scope)\n+              and then (not Is_Limited_Type (Current_Scope)\n+                         or else Ada_Version < Ada_2012)\n               and then Comes_From_Source (N)\n             then\n                --  Note: see similar test in Check_Or_Process_Discriminants, to\n                --  handle the (illegal) case of the completion of an untagged\n                --  view with discriminants with defaults by a tagged full view.\n-               --  We skip the check if Discr does not come from source to\n+               --  We skip the check if Discr does not come from source, to\n                --  account for the case of an untagged derived type providing\n-               --  defaults for a renamed discriminant from a private nontagged\n+               --  defaults for a renamed discriminant from a private untagged\n                --  ancestor with a tagged full view (ACATS B460006).\n \n-               Error_Msg_N\n-                 (\"discriminants of tagged type cannot have defaults\",\n-                  Expression (Discr));\n+               if Ada_Version >= Ada_2012 then\n+                  Error_Msg_N\n+                    (\"discriminants of nonlimited tagged type cannot have\"\n+                       & \" defaults\",\n+                     Expression (Discr));\n+               else\n+                  Error_Msg_N\n+                    (\"discriminants of tagged type cannot have defaults\",\n+                     Expression (Discr));\n+               end if;\n \n             else\n                Default_Present := True;"}, {"sha": "a4d65d8b7d95b36a7495596bca90c81f7e693ee6", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5db3b4b48ede7d0d1815ec2126b669affeda96/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5e5db3b4b48ede7d0d1815ec2126b669affeda96", "patch": "@@ -5697,9 +5697,23 @@ package body Sem_Ch6 is\n                Formal_Type := Underlying_Type (Formal_Type);\n             end if;\n \n+            --  Suppress the extra formal if formal's subtype is constrained or\n+            --  indefinite, or we're compiling for Ada 2012 and the underlying\n+            --  type is tagged and limited. In Ada 2012, a limited tagged type\n+            --  can have defaulted discriminants, but 'Constrained is required\n+            --  to return True, so the formal is never needed (see AI05-0214).\n+            --  Note that this ensures consistency of calling sequences for\n+            --  dispatching operations when some types in a class have defaults\n+            --  on discriminants and others do not (and requiring the extra\n+            --  formal would introduce distributed overhead).\n+\n             if Has_Discriminants (Formal_Type)\n               and then not Is_Constrained (Formal_Type)\n               and then not Is_Indefinite_Subtype (Formal_Type)\n+              and then (Ada_Version < Ada_2012\n+                         or else\n+                           not (Is_Tagged_Type (Underlying_Type (Formal_Type))\n+                                 and then Is_Limited_Type (Formal_Type)))\n             then\n                Set_Extra_Constrained\n                  (Formal, Add_Extra_Formal (Formal, Standard_Boolean, E, \"O\"));"}]}