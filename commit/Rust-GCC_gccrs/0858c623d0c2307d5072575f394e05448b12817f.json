{"sha": "0858c623d0c2307d5072575f394e05448b12817f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg1OGM2MjNkMGMyMzA3ZDUwNzI1NzVmMzk0ZTA1NDQ4YjEyODE3Zg==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-08-14T05:59:50Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-08-14T05:59:50Z"}, "message": "flow.c (attempt_auto_inc): Remove unused variable `bb'.\n\n* flow.c (attempt_auto_inc): Remove unused variable `bb'.\n(attempt_auto_inc): Suppress parentheses warning.\n* function.c (put_reg_into_stack): Remove unused variable `unsigned_p'.\n* loop.c (load_mems): Remove `u' suffix in two places.\n* config/rs6000/rs6000.c: Remove unnecessary `u' suffixes from\nhex constants.\n* config/rs6000/rs6000.h: Likewise.\n* config/rs6000/sol-c0.c: Prototype some functions.  Remove the\n__eabi dummy routine.\n* config/rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Remove unused\nvariable `buf_ptr'.\n\nFrom-SVN: r35670", "tree": {"sha": "bf2013914495537d0dd5a8f1d43cb696b4b8434e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf2013914495537d0dd5a8f1d43cb696b4b8434e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0858c623d0c2307d5072575f394e05448b12817f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0858c623d0c2307d5072575f394e05448b12817f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0858c623d0c2307d5072575f394e05448b12817f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0858c623d0c2307d5072575f394e05448b12817f/comments", "author": null, "committer": null, "parents": [{"sha": "51a017d8bc4aa54f56d0f245dacf5e847c947b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a017d8bc4aa54f56d0f245dacf5e847c947b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a017d8bc4aa54f56d0f245dacf5e847c947b9f"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "94e2e03edf844295b43b2aef4c993b979f4ccd38", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -1,5 +1,17 @@\n 2000-08-13  Geoff Keating  <geoffk@cygnus.com>\n \n+\t* flow.c (attempt_auto_inc): Remove unused variable `bb'.\n+\t(attempt_auto_inc): Suppress parentheses warning.\n+\t* function.c (put_reg_into_stack): Remove unused variable `unsigned_p'.\n+\t* loop.c (load_mems): Remove `u' suffix in two places.\n+\t* config/rs6000/rs6000.c: Remove unnecessary `u' suffixes from\n+\thex constants.\n+\t* config/rs6000/rs6000.h: Likewise.\n+\t* config/rs6000/sol-c0.c: Prototype some functions.  Remove the\n+\t__eabi dummy routine.\n+\t* config/rs6000/sysv4.h (ASM_DECLARE_FUNCTION_NAME): Remove unused\n+\tvariable `buf_ptr'.\n+\n \t* config/rs6000/rs6000.c (rs6000_select_section): Rewrite to\n \tnot put stuff in .sdata unnecessarily.\n \t(rs6000_unique_section): New function."}, {"sha": "a85f5bddb2d91d101a5b397ad4ce0616b32b9fa9", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -686,7 +686,7 @@ reg_or_logical_cint_operand (op, mode)\n \t}\n \n       return ((INTVAL (op) & GET_MODE_MASK (mode)\n-\t       & (~ (unsigned HOST_WIDE_INT) 0xffffffffu)) == 0);\n+\t       & (~ (unsigned HOST_WIDE_INT) 0xffffffff)) == 0);\n     }\n   else if (GET_CODE (op) == CONST_DOUBLE)\n     {\n@@ -741,13 +741,13 @@ num_insns_constant_wide (value)\n #if HOST_BITS_PER_WIDE_INT == 64\n   else if (TARGET_POWERPC64)\n     {\n-      unsigned HOST_WIDE_INT low  = value & 0xffffffffu;\n+      unsigned HOST_WIDE_INT low  = value & 0xffffffff;\n       HOST_WIDE_INT high = value >> 32;\n \n-      if (high == 0 && (low & 0x80000000u) == 0)\n+      if (high == 0 && (low & 0x80000000) == 0)\n \treturn 2;\n \n-      else if (high == -1 && (low & 0x80000000u) != 0)\n+      else if (high == -1 && (low & 0x80000000) != 0)\n \treturn 2;\n \n       else if (! low)\n@@ -808,10 +808,10 @@ num_insns_constant (op, mode)\n \n       else\n \t{\n-\t  if (high == 0 && (low & 0x80000000u) == 0)\n+\t  if (high == 0 && (low & 0x80000000) == 0)\n \t    return num_insns_constant_wide (low);\n \n-\t  else if (high == -1 && (low & 0x80000000u) != 0)\n+\t  else if (high == -1 && (low & 0x80000000) != 0)\n \t    return num_insns_constant_wide (low);\n \n \t  else if (mask64_operand (op, mode))\n@@ -1003,7 +1003,7 @@ logical_operand (op, mode)\n \n   return (oph == 0\n \t  && ((opl & ~ (unsigned HOST_WIDE_INT) 0xffff) == 0\n-\t      || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000u) == 0));\n+\t      || (opl & ~ (unsigned HOST_WIDE_INT) 0xffff0000) == 0));\n }\n \n /* Return 1 if C is a constant that is not a logical operand (as\n@@ -3899,15 +3899,15 @@ print_operand (file, x, code)\n       /* If the high bit is set and the low bit is not, the value is zero.\n \t If the high bit is zero, the value is the first 1 bit we find from\n \t the left.  */\n-      if ((val & 0x80000000u) && ((val & 1) == 0))\n+      if ((val & 0x80000000) && ((val & 1) == 0))\n \t{\n \t  putc ('0', file);\n \t  return;\n \t}\n-      else if ((val & 0x80000000u) == 0)\n+      else if ((val & 0x80000000) == 0)\n \t{\n \t  for (i = 1; i < 32; i++)\n-\t    if ((val <<= 1) & 0x80000000u)\n+\t    if ((val <<= 1) & 0x80000000)\n \t      break;\n \t  fprintf (file, \"%d\", i);\n \t  return;\n@@ -3934,7 +3934,7 @@ print_operand (file, x, code)\n       /* If the low bit is set and the high bit is not, the value is 31.\n \t If the low bit is zero, the value is the first 1 bit we find from\n \t the right.  */\n-      if ((val & 1) && ((val & 0x80000000u) == 0))\n+      if ((val & 1) && ((val & 0x80000000) == 0))\n \t{\n \t  fputs (\"31\", file);\n \t  return;\n@@ -3954,7 +3954,7 @@ print_operand (file, x, code)\n       /* Otherwise, look for the first 0 bit from the left.  The result is its\n \t number minus 1. We know the high-order bit is one.  */\n       for (i = 0; i < 32; i++)\n-\tif (((val <<= 1) & 0x80000000u) == 0)\n+\tif (((val <<= 1) & 0x80000000) == 0)\n \t  break;\n \n       fprintf (file, \"%d\", i);\n@@ -6660,7 +6660,7 @@ output_toc (file, x, labelno, mode)\n \t    fprintf (file, \"\\t.llong 0x%lx%08lx\\n\", k[0], k[1]);\n \t  else\n \t    fprintf (file, \"\\t.tc FD_%lx_%lx[TC],0x%lx%08lx\\n\",\n-\t\t     k[0], k[1], k[0] & 0xffffffffu, k[1] & 0xffffffffu);\n+\t\t     k[0], k[1], k[0] & 0xffffffff, k[1] & 0xffffffff);\n \t  return;\n \t}\n       else\n@@ -6713,11 +6713,11 @@ output_toc (file, x, labelno, mode)\n #if HOST_BITS_PER_WIDE_INT == 32\n \t{\n \t  low = INTVAL (x);\n-\t  high = (low & 0x80000000u) ? ~0 : 0;\n+\t  high = (low & 0x80000000) ? ~0 : 0;\n \t}\n #else\n \t{\n-          low = INTVAL (x) & 0xffffffffu;\n+          low = INTVAL (x) & 0xffffffff;\n           high = (HOST_WIDE_INT) INTVAL (x) >> 32;\n \t}\n #endif"}, {"sha": "14ca63a534d65f810a725f0abba8cdbebc20bf83", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -1061,7 +1061,7 @@ enum reg_class\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n    ( (C) == 'I' ? (unsigned HOST_WIDE_INT) ((VALUE) + 0x8000) < 0x10000\t\\\n-   : (C) == 'J' ? ((VALUE) & (~ (unsigned HOST_WIDE_INT) 0xffff0000u)) == 0 \\\n+   : (C) == 'J' ? ((VALUE) & (~ (unsigned HOST_WIDE_INT) 0xffff0000)) == 0 \\\n    : (C) == 'K' ? ((VALUE) & (~ (HOST_WIDE_INT) 0xffff)) == 0\t\t\\\n    : (C) == 'L' ? (((VALUE) & 0xffff) == 0\t\t\t\t\\\n \t\t   && ((VALUE) >> 31 == -1 || (VALUE) >> 31 == 0))\t\\\n@@ -1960,7 +1960,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n       HOST_WIDE_INT val = INTVAL (XEXP (X, 1));\t\t\t\t     \\\n       HOST_WIDE_INT low = ((val & 0xffff) ^ 0x8000) - 0x8000;\t\t     \\\n       HOST_WIDE_INT high\t\t\t\t\t\t     \\\n-        = (((val - low) & 0xffffffffu) ^ 0x80000000u) - 0x80000000u;\t     \\\n+        = (((val - low) & 0xffffffff) ^ 0x80000000) - 0x80000000;\t     \\\n \t\t\t\t\t\t\t\t\t     \\\n       /* Check for 32-bit overflow.  */\t\t\t\t\t     \\\n       if (high + low != val)\t\t\t\t\t\t     \\\n@@ -2591,7 +2591,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n     long t[2];\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\\\n     fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n-\t     t[0] & 0xffffffffu, t[1] & 0xffffffffu);\t\\\n+\t     t[0] & 0xffffffff, t[1] & 0xffffffff);\t\\\n   }\n \n /* This is how to output an assembler line defining a `float' constant.  */\n@@ -2600,7 +2600,7 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0). */\n   {\t\t\t\t\t\t\t\\\n     long t;\t\t\t\t\t\t\\\n     REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffffu);\t\\\n+    fprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\\\n   }\n \n /* This is how to output an assembler line defining an `int' constant.  */"}, {"sha": "a31876c889dfcad39d9e15b6430042ec503de950", "filename": "gcc/config/rs6000/sol-c0.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Fsol-c0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsol-c0.c?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -1,5 +1,5 @@\n /* Solaris PowerPC startfile.  */\n-/* Copyright (C) 1996 Free Software Foundation, Inc.\n+/* Copyright (C) 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -32,6 +32,10 @@ extern char **_environ;\n extern int atexit (void (*__func) (void));\n extern void __init (void) __attribute__ ((__longcall__));\n extern void __fini (void) __attribute__ ((__longcall__));\n+extern void _start(int argc, char *argv[], char *envp[], void *auxp, \n+\t\t   void (*termfunc)());\n+extern void exit(int);\n+extern int main (int argc, char *argv[], char *envp[], void *auxp);\n \n typedef void (*func_ptr) (void);\n int (*__atexit)(func_ptr) = atexit;\n@@ -116,9 +120,3 @@ _start(int argc, char *argv[], char *envp[], void *auxp, void (*termfunc)())\n   /* Return to the os */\n   exit (ret);\n }\n-\n-/* Provide a dummy __eabi in case main got compiled without -mcall-solaris.  */\n-void\n-__eabi ()\n-{\n-}"}, {"sha": "a7590efa36574057535b750835b4e134a9456e3c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -610,7 +610,6 @@ extern int rs6000_pic_labelno;\n \t&& uses_TOC())\t\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tchar buf[256];\t\t\t\t\t\t\t\\\n-\tconst char *buf_ptr;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tASM_OUTPUT_INTERNAL_LABEL (FILE, \"LCL\", rs6000_pic_labelno);\t\\\n \t\t\t\t\t\t\t\t\t\\"}, {"sha": "e5df347c703b35f9d71035f22e0f9952c33c5c0d", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -4879,7 +4879,6 @@ attempt_auto_inc (pbi, inc, insn, mem, incr, incr_reg)\n \t Change it to q = p, ...*q..., q = q+size.\n \t Then fall into the usual case.  */\n       rtx insns, temp;\n-      basic_block bb;\n \n       start_sequence ();\n       emit_move_insn (q, incr_reg);\n@@ -4956,7 +4955,7 @@ attempt_auto_inc (pbi, inc, insn, mem, incr, incr_reg)\n       /* If the original source was dead, it's dead now.  */\n       rtx note;\n \n-      while (note = find_reg_note (incr, REG_DEAD, NULL_RTX))\n+      while ((note = find_reg_note (incr, REG_DEAD, NULL_RTX)) != NULL_RTX)\n \t{\n \t  remove_note (incr, note);\n \t  if (XEXP (note, 0) != incr_reg)"}, {"sha": "7f8bd1ea69c983a508c92ab8fd3636e2bccd688e", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -1481,7 +1481,6 @@ put_reg_into_stack (function, reg, type, promoted_mode, decl_mode, volatile_p,\n   struct function *func = function ? function : cfun;\n   rtx new = 0;\n   unsigned int regno = original_regno;\n-  int unsigned_p;\n \n   if (regno == 0)\n     regno = REGNO (reg);"}, {"sha": "ddaf017588a4341a482b5b4f561b6406d83b120e", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0858c623d0c2307d5072575f394e05448b12817f/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=0858c623d0c2307d5072575f394e05448b12817f", "patch": "@@ -9569,7 +9569,7 @@ load_mems (loop)\n \t\t  && GET_CODE (SET_DEST (set)) == REG\n \t\t  && REGNO (SET_DEST (set)) >= FIRST_PSEUDO_REGISTER\n \t\t  && REGNO (SET_DEST (set)) < last_max_reg\n-\t\t  && VARRAY_INT (n_times_set, REGNO (SET_DEST (set))) == 1U\n+\t\t  && VARRAY_INT (n_times_set, REGNO (SET_DEST (set))) == 1\n \t\t  && rtx_equal_p (SET_SRC (set), mem))\n \t\tSET_REGNO_REG_SET (&load_copies, REGNO (SET_DEST (set)));\n \n@@ -9583,7 +9583,7 @@ load_mems (loop)\n  \t\t  && GET_CODE (SET_SRC (set)) == REG\n  \t\t  && REGNO (SET_SRC (set)) >= FIRST_PSEUDO_REGISTER\n  \t\t  && REGNO (SET_SRC (set)) < last_max_reg\n- \t\t  && VARRAY_INT (n_times_set, REGNO (SET_SRC (set))) == 1U\n+ \t\t  && VARRAY_INT (n_times_set, REGNO (SET_SRC (set))) == 1\n  \t\t  && rtx_equal_p (SET_DEST (set), mem))\n  \t\tSET_REGNO_REG_SET (&store_copies, REGNO (SET_SRC (set)));\n  \t      "}]}