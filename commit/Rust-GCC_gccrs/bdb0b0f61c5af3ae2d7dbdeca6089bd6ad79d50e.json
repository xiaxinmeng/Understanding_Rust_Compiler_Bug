{"sha": "bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRiMGIwZjYxYzVhZjNhZTJkN2RiZGVjYTYwODliZDZhZDc5ZDUwZQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2011-04-01T18:24:52Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2011-04-01T18:24:52Z"}, "message": "Don't add DW_AT_low_pc if the CU has no associated code.\n\n        * dwarf2out.c (dwarf2out_finish): Don't add low_pc and/or\n        high_pc attribute if the CU has no associated code. Only output\n        DW_AT_entry_pc for CU if not generating strict dwarf and\n        dwarf_version < 4.\n\nFrom-SVN: r171846", "tree": {"sha": "ff9f1978d02833ba15573d58f13b01aaf374758e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9f1978d02833ba15573d58f13b01aaf374758e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e/comments", "author": null, "committer": null, "parents": [{"sha": "9d70124888e3823e60964b56e9ab6bf07454f68e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d70124888e3823e60964b56e9ab6bf07454f68e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d70124888e3823e60964b56e9ab6bf07454f68e"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "bfaf388b089c3bc669a62a5e006269e1a1ec8705", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "patch": "@@ -1,3 +1,10 @@\n+2011-03-31  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_finish): Don't add low_pc and/or\n+\thigh_pc attribute if the CU has no associated code. Only output\n+\tDW_AT_entry_pc for CU if not generating strict dwarf and\n+\tdwarf_version < 4.\n+\n 2011-04-01  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* dwarf2out.h (dwarf2out_frame_debug_init): Declare."}, {"sha": "50d942974dd1b2bbfc75615225032f5f9a2a4a3e", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bdb0b0f61c5af3ae2d7dbdeca6089bd6ad79d50e", "patch": "@@ -23588,23 +23588,18 @@ dwarf2out_finish (const char *filename)\n   if (!have_multiple_function_sections \n       || (dwarf_version < 3 && dwarf_strict))\n     {\n-      add_AT_lbl_id (comp_unit_die (), DW_AT_low_pc, text_section_label);\n-      add_AT_lbl_id (comp_unit_die (), DW_AT_high_pc, text_end_label);\n+      /* Don't add if the CU has no associated code.  */\n+      if (text_section_used)\n+\t{\n+\t  add_AT_lbl_id (comp_unit_die (), DW_AT_low_pc, text_section_label);\n+\t  add_AT_lbl_id (comp_unit_die (), DW_AT_high_pc, text_end_label);\n+\t}\n     }\n-\n   else\n     {\n       unsigned fde_idx = 0;\n       bool range_list_added = false;\n \n-      /* We need to give .debug_loc and .debug_ranges an appropriate\n-\t \"base address\".  Use zero so that these addresses become\n-\t absolute.  Historically, we've emitted the unexpected\n-\t DW_AT_entry_pc instead of DW_AT_low_pc for this purpose.\n-\t Emit both to give time for other tools to adapt.  */\n-      add_AT_addr (comp_unit_die (), DW_AT_low_pc, const0_rtx);\n-      add_AT_addr (comp_unit_die (), DW_AT_entry_pc, const0_rtx);\n-\n       if (text_section_used)\n \tadd_ranges_by_labels (comp_unit_die (), text_section_label,\n \t\t\t      text_end_label, &range_list_added);\n@@ -23625,7 +23620,18 @@ dwarf2out_finish (const char *filename)\n \t}\n \n       if (range_list_added)\n-\tadd_ranges (NULL);\n+\t{\n+\t  /* We need to give .debug_loc and .debug_ranges an appropriate\n+\t     \"base address\".  Use zero so that these addresses become\n+\t     absolute.  Historically, we've emitted the unexpected\n+\t     DW_AT_entry_pc instead of DW_AT_low_pc for this purpose.\n+\t     Emit both to give time for other tools to adapt.  */\n+\t  add_AT_addr (comp_unit_die (), DW_AT_low_pc, const0_rtx);\n+\t  if (! dwarf_strict && dwarf_version < 4)\n+\t    add_AT_addr (comp_unit_die (), DW_AT_entry_pc, const0_rtx);\n+\n+\t  add_ranges (NULL);\n+\t}\n     }\n \n   if (debug_info_level >= DINFO_LEVEL_NORMAL)"}]}