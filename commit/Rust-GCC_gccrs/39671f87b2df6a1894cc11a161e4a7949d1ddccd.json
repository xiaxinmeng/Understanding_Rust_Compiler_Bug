{"sha": "39671f87b2df6a1894cc11a161e4a7949d1ddccd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2NzFmODdiMmRmNmExODk0Y2MxMWExNjFlNGE3OTQ5ZDFkZGNjZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-04-15T12:59:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-04-20T15:56:46Z"}, "message": "x86: Use crc32 target option for CRC32 intrinsics\n\nUse crc32 target option for CRC32 intrinsics to support CRC32 intrinsics\nwithout enabling SSE vector instructions.\n\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define\n\t__CRC32__ for -mcrc32.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tEnable crc32 instruction for -msse4.2.\n\t* config/i386/i386.md (sse4_2_crc32<mode>): Remove TARGET_SSE4_2\n\tcheck.\n\t(sse4_2_crc32di): Likewise.\n\t* config/i386/ia32intrin.h: Use crc32 target option for CRC32\n\tintrinsics.", "tree": {"sha": "414245024fe9b7ea613703c8023cff253ef62ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/414245024fe9b7ea613703c8023cff253ef62ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39671f87b2df6a1894cc11a161e4a7949d1ddccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39671f87b2df6a1894cc11a161e4a7949d1ddccd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39671f87b2df6a1894cc11a161e4a7949d1ddccd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39671f87b2df6a1894cc11a161e4a7949d1ddccd/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54995d98cc7746da08d317e4eff756d119136c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54995d98cc7746da08d317e4eff756d119136c21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54995d98cc7746da08d317e4eff756d119136c21"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "5ed0de006fb5dcaa1ad1cc0b5463a0c9f7a6e1da", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=39671f87b2df6a1894cc11a161e4a7949d1ddccd", "patch": "@@ -532,6 +532,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__LZCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_TBM)\n     def_or_undef (parse_in, \"__TBM__\");\n+  if (isa_flag & OPTION_MASK_ISA_CRC32)\n+    def_or_undef (parse_in, \"__CRC32__\");\n   if (isa_flag & OPTION_MASK_ISA_POPCNT)\n     def_or_undef (parse_in, \"__POPCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_FSGSBASE)"}, {"sha": "7e59ccd988d850f21ba322d76df1ac9707162ea8", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=39671f87b2df6a1894cc11a161e4a7949d1ddccd", "patch": "@@ -2617,6 +2617,11 @@ ix86_option_override_internal (bool main_args_p,\n     opts->x_ix86_isa_flags\n       |= OPTION_MASK_ISA_POPCNT & ~opts->x_ix86_isa_flags_explicit;\n \n+  /* Enable crc32 instruction for -msse4.2.  */\n+  if (TARGET_SSE4_2_P (opts->x_ix86_isa_flags))\n+    opts->x_ix86_isa_flags\n+      |= OPTION_MASK_ISA_CRC32 & ~opts->x_ix86_isa_flags_explicit;\n+\n   /* Enable lzcnt instruction for -mabm.  */\n   if (TARGET_ABM_P(opts->x_ix86_isa_flags))\n     opts->x_ix86_isa_flags"}, {"sha": "1f1d74e6275e9c3b327f2017de77d864509eec13", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=39671f87b2df6a1894cc11a161e4a7949d1ddccd", "patch": "@@ -20998,7 +20998,7 @@\n \t  [(match_operand:SI 1 \"register_operand\" \"0\")\n \t   (match_operand:SWI124 2 \"nonimmediate_operand\" \"<r>m\")]\n \t  UNSPEC_CRC32))]\n-  \"TARGET_SSE4_2 || TARGET_CRC32\"\n+  \"TARGET_CRC32\"\n   \"crc32{<imodesuffix>}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")\n@@ -21019,7 +21019,7 @@\n \t  [(match_operand:DI 1 \"register_operand\" \"0\")\n \t   (match_operand:DI 2 \"nonimmediate_operand\" \"rm\")]\n \t  UNSPEC_CRC32))]\n-  \"TARGET_64BIT && (TARGET_SSE4_2 || TARGET_CRC32)\"\n+  \"TARGET_64BIT && TARGET_CRC32\"\n   \"crc32{q}\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_rep\" \"1\")"}, {"sha": "5422b0fc9e0968070896a07e6b9b0c7f56713829", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39671f87b2df6a1894cc11a161e4a7949d1ddccd/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=39671f87b2df6a1894cc11a161e4a7949d1ddccd", "patch": "@@ -51,11 +51,11 @@ __bswapd (int __X)\n \n #ifndef __iamcu__\n \n-#ifndef __SSE4_2__\n+#ifndef __CRC32__\n #pragma GCC push_options\n-#pragma GCC target(\"sse4.2\")\n-#define __DISABLE_SSE4_2__\n-#endif /* __SSE4_2__ */\n+#pragma GCC target(\"crc32\")\n+#define __DISABLE_CRC32__\n+#endif /* __CRC32__ */\n \n /* 32bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n extern __inline unsigned int\n@@ -79,10 +79,10 @@ __crc32d (unsigned int __C, unsigned int __V)\n   return __builtin_ia32_crc32si (__C, __V);\n }\n \n-#ifdef __DISABLE_SSE4_2__\n-#undef __DISABLE_SSE4_2__\n+#ifdef __DISABLE_CRC32__\n+#undef __DISABLE_CRC32__\n #pragma GCC pop_options\n-#endif /* __DISABLE_SSE4_2__ */\n+#endif /* __DISABLE_CRC32__ */\n \n #endif /* __iamcu__ */\n \n@@ -199,11 +199,11 @@ __bswapq (long long __X)\n   return __builtin_bswap64 (__X);\n }\n \n-#ifndef __SSE4_2__\n+#ifndef __CRC32__\n #pragma GCC push_options\n-#pragma GCC target(\"sse4.2\")\n-#define __DISABLE_SSE4_2__\n-#endif /* __SSE4_2__ */\n+#pragma GCC target(\"crc32\")\n+#define __DISABLE_CRC32__\n+#endif /* __CRC32__ */\n \n /* 64bit accumulate CRC32 (polynomial 0x11EDC6F41) value.  */\n extern __inline unsigned long long\n@@ -213,10 +213,10 @@ __crc32q (unsigned long long __C, unsigned long long __V)\n   return __builtin_ia32_crc32di (__C, __V);\n }\n \n-#ifdef __DISABLE_SSE4_2__\n-#undef __DISABLE_SSE4_2__\n+#ifdef __DISABLE_CRC32__\n+#undef __DISABLE_CRC32__\n #pragma GCC pop_options\n-#endif /* __DISABLE_SSE4_2__ */\n+#endif /* __DISABLE_CRC32__ */\n \n /* 64bit popcnt */\n extern __inline long long"}]}