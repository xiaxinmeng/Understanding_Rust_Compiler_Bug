{"sha": "b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIzYzZhMmM2MDRjMGRjY2YxNGNjMzQ2MTM1N2EyOGZmYjk5ZWQ4OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-19T14:52:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-19T14:52:46Z"}, "message": "[AArch64] Fix handling of npatterns>1 constants for partial SVE modes\n\nFor partial SVE vectors of element X, we want to treat duplicates\nof single X elements in the same way as for full vectors of X.\nBut if a constant instead contains a repeating pattern of X elements,\nthe transition from one value to the next must happen at container\nboundaries rather than element boundaries.  E.g. a VNx4HI should\nin that case contain the same number of constants as a VNx4SI.\n\nFixing this means that we need a reinterpret from the container-based\nmode to the partial mode; e.g. in the above example we need a\nreinterpret from VNx4SI to VNx4HI.  We can't use subregs for that\nbecause they're forbidden by aarch64_can_change_class_mode; we should\nhandle them in the same way as for big-endian instead.\n\n2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): When\n\thandling partial SVE vectors, use the container mode rather than\n\tthe element mode if the constant isn't a single-element duplicate.\n\t* config/aarch64/aarch64-sve.md (@aarch64_sve_reinterpret<mode>):\n\tCheck targetm.can_change_mode_class instead of BYTES_BIG_ENDIAN.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mixed_size_9.c: New test.\n\nFrom-SVN: r279580", "tree": {"sha": "71c2e52a118ed2e9102a046cdb791e86560a1250", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71c2e52a118ed2e9102a046cdb791e86560a1250"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3561caa298e9f37e91e24a80ca7bd4830ef720ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3561caa298e9f37e91e24a80ca7bd4830ef720ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3561caa298e9f37e91e24a80ca7bd4830ef720ed"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "308774df148082ff3f287942ceb11952a894ea15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "patch": "@@ -1,3 +1,11 @@\n+2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): When\n+\thandling partial SVE vectors, use the container mode rather than\n+\tthe element mode if the constant isn't a single-element duplicate.\n+\t* config/aarch64/aarch64-sve.md (@aarch64_sve_reinterpret<mode>):\n+\tCheck targetm.can_change_mode_class instead of BYTES_BIG_ENDIAN.\n+\n 2019-12-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (addv64si3<exec_clobber>): Rename to ..."}, {"sha": "feb7559641469cb6f86b6f28b2bf7021be41cbfd", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "patch": "@@ -694,7 +694,8 @@\n \t  UNSPEC_REINTERPRET))]\n   \"TARGET_SVE\"\n   {\n-    if (!BYTES_BIG_ENDIAN)\n+    machine_mode src_mode = GET_MODE (operands[1]);\n+    if (targetm.can_change_mode_class (<MODE>mode, src_mode, FP_REGS))\n       {\n \temit_move_insn (operands[0], gen_lowpart (<MODE>mode, operands[1]));\n \tDONE;"}, {"sha": "a85f8b04c202bd34909dea7035b044726fe853be", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "patch": "@@ -16826,12 +16826,28 @@ aarch64_simd_valid_immediate (rtx op, simd_immediate_info *info,\n \t}\n     }\n \n-  unsigned int elt_size = GET_MODE_SIZE (elt_mode);\n+  /* If all elements in an SVE vector have the same value, we have a free\n+     choice between using the element mode and using the container mode.\n+     Using the element mode means that unused parts of the vector are\n+     duplicates of the used elements, while using the container mode means\n+     that the unused parts are an extension of the used elements.  Using the\n+     element mode is better for (say) VNx4HI 0x101, since 0x01010101 is valid\n+     for its container mode VNx4SI while 0x00000101 isn't.\n+\n+     If not all elements in an SVE vector have the same value, we need the\n+     transition from one element to the next to occur at container boundaries.\n+     E.g. a fixed-length VNx4HI containing { 1, 2, 3, 4 } should be treated\n+     in the same way as a VNx4SI containing { 1, 2, 3, 4 }.  */\n+  scalar_int_mode elt_int_mode;\n+  if ((vec_flags & VEC_SVE_DATA) && n_elts > 1)\n+    elt_int_mode = aarch64_sve_container_int_mode (mode);\n+  else\n+    elt_int_mode = int_mode_for_mode (elt_mode).require ();\n+\n+  unsigned int elt_size = GET_MODE_SIZE (elt_int_mode);\n   if (elt_size > 8)\n     return false;\n \n-  scalar_int_mode elt_int_mode = int_mode_for_mode (elt_mode).require ();\n-\n   /* Expand the vector constant out into a byte vector, with the least\n      significant byte of the register first.  */\n   auto_vec<unsigned char, 16> bytes;"}, {"sha": "bbca1aa5b1684b8ba5e8d47a07488171e1b6d84c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "patch": "@@ -1,3 +1,7 @@\n+2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mixed_size_9.c: New test.\n+\n 2019-12-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/mixed_size_8.c: New test."}, {"sha": "5f78150308a54783cdd1c522d538318a395c76d7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mixed_size_9.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b23c6a2c604c0dccf14cc3461357a28ffb99ed88/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_9.c?ref=b23c6a2c604c0dccf14cc3461357a28ffb99ed88", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-options \"-O2 -ftree-vectorize -fno-vect-cost-model -msve-vector-bits=256\" } */\n+/* Originally from gcc.dg/vect/pr88598-4.c.  */\n+\n+#define N 4\n+\n+int a[N];\n+\n+int __attribute__ ((noipa))\n+f2 (void)\n+{\n+  int b[N] = { 0, 31, 0, 31 }, res = 0;\n+  for (int i = 0; i < N; ++i)\n+    res += a[i] & b[i];\n+  return res;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[0-9]\\.d, #} } } */\n+/* { dg-final { scan-assembler-not {\\tstr\\tz[0-9],} } } */"}]}