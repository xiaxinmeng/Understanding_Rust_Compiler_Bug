{"sha": "8db7a05fd73be5df9195a3697248084d4a5b0ee6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRiN2EwNWZkNzNiZTVkZjkxOTVhMzY5NzI0ODA4NGQ0YTViMGVlNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T12:01:15Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T12:01:15Z"}, "message": "PR libstdc++/69724 avoid temporary in std::thread construction\n\nThe std::thread constructor creates (and then moves) an unnecessary\ntemporary copy of each argument. Optimize it to only make the one copy\nthat is required.\n\n\tPR libstdc++/69724\n\t* include/std/thread (thread::_State_impl, thread::_S_make_state):\n\tReplace single _Callable parameter with variadic _Args pack, to\n\tforward them directly to the tuple of decayed copies.\n\t* testsuite/30_threads/thread/cons/69724.cc: New test.\n\nFrom-SVN: r271166", "tree": {"sha": "77beac2f9222970cb655b89af0af57d715b2a46b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77beac2f9222970cb655b89af0af57d715b2a46b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8db7a05fd73be5df9195a3697248084d4a5b0ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db7a05fd73be5df9195a3697248084d4a5b0ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db7a05fd73be5df9195a3697248084d4a5b0ee6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db7a05fd73be5df9195a3697248084d4a5b0ee6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db33efde17932fb29fd08f19eaeef0e527adb065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db33efde17932fb29fd08f19eaeef0e527adb065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db33efde17932fb29fd08f19eaeef0e527adb065"}], "stats": {"total": 98, "additions": 90, "deletions": 8}, "files": [{"sha": "995f2ce1d45ef69a906b455665f487e8fce1e100", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8db7a05fd73be5df9195a3697248084d4a5b0ee6", "patch": "@@ -1,3 +1,11 @@\n+2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/69724\n+\t* include/std/thread (thread::_State_impl, thread::_S_make_state):\n+\tReplace single _Callable parameter with variadic _Args pack, to\n+\tforward them directly to the tuple of decayed copies.\n+\t* testsuite/30_threads/thread/cons/69724.cc: New test.\n+\n 2019-05-14  Nina Dinka Ranns  <dinka.ranns@gmail.com>\n \n \tInconsistency wrt Allocators in basic_string assignment (LWG2579)"}, {"sha": "90b4be6cd168640ccf48988cdbd1067fa03cedf1", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=8db7a05fd73be5df9195a3697248084d4a5b0ee6", "patch": "@@ -127,9 +127,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n \tauto __depend = nullptr;\n #endif\n-        _M_start_thread(_S_make_state(\n-\t      __make_invoker(std::forward<_Callable>(__f),\n-\t\t\t     std::forward<_Args>(__args)...)),\n+\t// A call wrapper holding tuple{DECAY_COPY(__f), DECAY_COPY(__args)...}\n+\tusing _Invoker_type = _Invoker<__decayed_tuple<_Callable, _Args...>>;\n+\n+\t_M_start_thread(_S_make_state<_Invoker_type>(\n+\t      std::forward<_Callable>(__f), std::forward<_Args>(__args)...),\n \t    __depend);\n       }\n \n@@ -188,8 +190,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n \t_Callable\t\t_M_func;\n \n-\t_State_impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))\n-\t{ }\n+\ttemplate<typename... _Args>\n+\t  _State_impl(_Args&&... __args)\n+\t  : _M_func{{std::forward<_Args>(__args)...}}\n+\t  { }\n \n \tvoid\n \t_M_run() { _M_func(); }\n@@ -198,12 +202,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     _M_start_thread(_State_ptr, void (*)());\n \n-    template<typename _Callable>\n+    template<typename _Callable, typename... _Args>\n       static _State_ptr\n-      _S_make_state(_Callable&& __f)\n+      _S_make_state(_Args&&... __args)\n       {\n \tusing _Impl = _State_impl<_Callable>;\n-\treturn _State_ptr{new _Impl{std::forward<_Callable>(__f)}};\n+\treturn _State_ptr{new _Impl{std::forward<_Args>(__args)...}};\n       }\n #if _GLIBCXX_THREAD_ABI_COMPAT\n   public:"}, {"sha": "ee3a8602b298bcb4aea527be81d35475bffb7072", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/69724.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F69724.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8db7a05fd73be5df9195a3697248084d4a5b0ee6/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F69724.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F69724.cc?ref=8db7a05fd73be5df9195a3697248084d4a5b0ee6", "patch": "@@ -0,0 +1,70 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run }\n+// { dg-options \"-pthread\"  }\n+// { dg-require-effective-target c++11 }\n+// { dg-require-effective-target pthread }\n+// { dg-require-gthreads \"\" }\n+\n+#include <thread>\n+#include <testsuite_rvalref.h>\n+\n+struct F : __gnu_test::copycounter\n+{\n+  F() = default;\n+\n+  F(const F&) = default;\n+\n+  // Move constructor copies base class, to use counter:\n+  F(F&& f) : copycounter(f) { f.valid = false; }\n+\n+  void run() { VERIFY(this->valid); }\n+};\n+\n+void\n+test01()\n+{\n+  std::thread{&F::run, F{}}.join();\n+  VERIFY( F::copycount == 1 );\n+}\n+\n+void\n+test02()\n+{\n+  F::copycount = 0;\n+  const F f;\n+  std::thread{&F::run, f}.join();\n+  VERIFY( F::copycount == 1 );\n+}\n+\n+void\n+test03()\n+{\n+  F::copycount = 0;\n+  F f;\n+  std::thread{&F::run, std::ref(f)}.join();\n+  VERIFY( F::copycount == 0 );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}