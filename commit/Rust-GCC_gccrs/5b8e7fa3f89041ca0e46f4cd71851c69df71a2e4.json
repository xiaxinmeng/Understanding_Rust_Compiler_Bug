{"sha": "5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI4ZTdmYTNmODkwNDFjYTBlNDZmNGNkNzE4NTFjNjlkZjcxYTJlNA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-06-23T01:16:31Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-06-23T01:16:31Z"}, "message": "sparc.md (zero_extendhidi2, [...]): Change remaining generic gen_rtx calls to specific genrtl ones.\n\n\t* config/sparc/sparc.md (zero_extendhidi2, extendhisi2,\n\textendqihi2, extendqisi2, extendqidi2, extendhidi2, adddi3,\n\tsubdi3, negdi2, call, call_value, untyped_return, nonlocal_goto,\n\tsplits and peepholes): Change remaining generic gen_rtx calls to\n\tspecific genrtl ones.\n\nFrom-SVN: r20667", "tree": {"sha": "6a5a095c5bdb723e48334dbb9ba3c8eafae1a088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a5a095c5bdb723e48334dbb9ba3c8eafae1a088"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4/comments", "author": null, "committer": null, "parents": [{"sha": "83b2940ecbbe1580f5fc4e19a5953a01399fe430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b2940ecbbe1580f5fc4e19a5953a01399fe430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b2940ecbbe1580f5fc4e19a5953a01399fe430"}], "stats": {"total": 142, "additions": 75, "deletions": 67}, "files": [{"sha": "5acbf173b4675b9254561e2179077ff64eb3d835", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "patch": "@@ -1,3 +1,11 @@\n+Mon Jun 22 23:57:31 1998  David S. Miller <davem@pierdol.cobaltmicro.com>\n+\n+\t* config/sparc/sparc.md (zero_extendhidi2, extendhisi2,\n+\textendqihi2, extendqisi2, extendqidi2, extendhidi2, adddi3,\n+\tsubdi3, negdi2, call, call_value, untyped_return, nonlocal_goto,\n+\tsplits and peepholes): Change remaining generic gen_rtx calls to\n+\tspecific genrtl ones.\n+\n Mon Jun 22 22:21:46 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* gcc.c (handle_braces): Recognize | between options as an or."}, {"sha": "0732b8bbe5a18f020c2c5b35d1627d93f20abab1", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 67, "deletions": 67, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5b8e7fa3f89041ca0e46f4cd71851c69df71a2e4", "patch": "@@ -3224,8 +3224,8 @@\n       operand1 = XEXP (operand1, 0);\n     }\n \n-  emit_insn (gen_ashldi3 (temp, gen_rtx (SUBREG, DImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashldi3 (temp, gen_rtx_SUBREG (DImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_48));\n   emit_insn (gen_lshrdi3 (operand0, temp, shift_48));\n   DONE;\n@@ -3333,8 +3333,8 @@ return \\\"srl %1,0,%0\\\";\n       operand1 = XEXP (operand1, 0);\n     }\n \n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx_SUBREG (SImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_16));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_16));\n   DONE;\n@@ -3368,11 +3368,11 @@ return \\\"srl %1,0,%0\\\";\n       op0_subword = SUBREG_WORD (operand0);\n       operand0 = XEXP (operand0, 0);\n     }\n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx_SUBREG (SImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_24));\n   if (GET_MODE (operand0) != SImode)\n-    operand0 = gen_rtx (SUBREG, SImode, operand0, op0_subword);\n+    operand0 = gen_rtx_SUBREG (SImode, operand0, op0_subword);\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n }\")\n@@ -3400,8 +3400,8 @@ return \\\"srl %1,0,%0\\\";\n       operand1 = XEXP (operand1, 0);\n     }\n \n-  emit_insn (gen_ashlsi3 (temp, gen_rtx (SUBREG, SImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashlsi3 (temp, gen_rtx_SUBREG (SImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_24));\n   emit_insn (gen_ashrsi3 (operand0, temp, shift_24));\n   DONE;\n@@ -3430,8 +3430,8 @@ return \\\"srl %1,0,%0\\\";\n       operand1 = XEXP (operand1, 0);\n     }\n \n-  emit_insn (gen_ashldi3 (temp, gen_rtx (SUBREG, DImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashldi3 (temp, gen_rtx_SUBREG (DImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_56));\n   emit_insn (gen_ashrdi3 (operand0, temp, shift_56));\n   DONE;\n@@ -3460,8 +3460,8 @@ return \\\"srl %1,0,%0\\\";\n       operand1 = XEXP (operand1, 0);\n     }\n \n-  emit_insn (gen_ashldi3 (temp, gen_rtx (SUBREG, DImode, operand1,\n-\t\t\t\t\t op1_subword),\n+  emit_insn (gen_ashldi3 (temp, gen_rtx_SUBREG (DImode, operand1,\n+\t\t\t\t\t\top1_subword),\n \t\t\t  shift_48));\n   emit_insn (gen_ashrdi3 (operand0, temp, shift_48));\n   DONE;\n@@ -3683,12 +3683,12 @@ return \\\"srl %1,0,%0\\\";\n {\n   if (! TARGET_ARCH64)\n     {\n-      emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\t  gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t\t   gen_rtx (PLUS, DImode, operands[1],\n-\t\t\t\t\t\t  operands[2])),\n-\t\t\t  gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t   gen_rtx (REG, SImode, SPARC_ICC_REG)))));\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n+\t\t\t  gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t\t   gen_rtx_PLUS (DImode, operands[1],\n+\t\t\t\t\t\t operands[2])),\n+\t\t\t  gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t   gen_rtx_raw_REG (SImode, SPARC_ICC_REG)))));\n       DONE;\n     }\n }\")\n@@ -3867,12 +3867,12 @@ return \\\"srl %1,0,%0\\\";\n {\n   if (! TARGET_ARCH64)\n     {\n-      emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\t  gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t\t   gen_rtx (MINUS, DImode, operands[1],\n-\t\t\t\t\t\t   operands[2])),\n-\t\t\t  gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t   gen_rtx (REG, SImode, SPARC_ICC_REG)))));\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n+\t\t\t  gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t\t   gen_rtx_MINUS (DImode, operands[1],\n+\t\t\t\t\t\t  operands[2])),\n+\t\t\t  gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t   gen_rtx_raw_REG (SImode, SPARC_ICC_REG)))));\n       DONE;\n     }\n }\")\n@@ -4944,11 +4944,11 @@ return \\\"srl %1,0,%0\\\";\n {\n   if (! TARGET_ARCH64)\n     {\n-      emit_insn (gen_rtx (PARALLEL, VOIDmode, gen_rtvec (2,\n-\t\t\t  gen_rtx (SET, VOIDmode, operand0,\n-\t\t\t\t   gen_rtx (NEG, DImode, operand1)),\n-\t\t\t  gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t   gen_rtx (REG, SImode, SPARC_ICC_REG)))));\n+      emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n+\t\t\t  gen_rtx_SET (VOIDmode, operand0,\n+\t\t\t\t   gen_rtx_NEG (DImode, operand1)),\n+\t\t\t  gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t   gen_rtx_raw_REG (SImode, SPARC_ICC_REG)))));\n       DONE;\n     }\n }\")\n@@ -5622,21 +5622,21 @@ if (! TARGET_ARCH64)\n \n       if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n \temit_jump_insn\n-\t  (gen_rtx (PARALLEL, VOIDmode,\n+\t  (gen_rtx_PARALLEL (VOIDmode,\n \t\t    gen_rtvec (3,\n-\t\t\t       gen_rtx (SET, VOIDmode, pc_rtx,\n+\t\t\t       gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t\t\tXEXP (operands[0], 0)),\n \t\t\t       GEN_INT (INTVAL (operands[3]) & 0xfff),\n-\t\t\t       gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\tgen_rtx (REG, Pmode, 15)))));\n+\t\t\t       gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\tgen_rtx_raw_REG (Pmode, 15)))));\n       else\n \temit_jump_insn\n-\t  (gen_rtx (PARALLEL, VOIDmode,\n+\t  (gen_rtx_PARALLEL (VOIDmode,\n \t\t    gen_rtvec (2,\n-\t\t\t       gen_rtx (SET, VOIDmode, pc_rtx,\n+\t\t\t       gen_rtx_SET (VOIDmode, pc_rtx,\n \t\t\t\t\tXEXP (operands[0], 0)),\n-\t\t\t       gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t\tgen_rtx (REG, Pmode, 15)))));\n+\t\t\t       gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\tgen_rtx_raw_REG (Pmode, 15)))));\n       goto finish_call;\n     }\n \n@@ -5656,17 +5656,17 @@ if (! TARGET_ARCH64)\n \n   if (! TARGET_ARCH64 && INTVAL (operands[3]) != 0)\n     emit_call_insn\n-      (gen_rtx (PARALLEL, VOIDmode,\n-\t\tgen_rtvec (3, gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n+      (gen_rtx_PARALLEL (VOIDmode,\n+\t\tgen_rtvec (3, gen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx),\n \t\t\t   GEN_INT (INTVAL (operands[3]) & 0xfff),\n-\t\t\t   gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t    gen_rtx (REG, Pmode, 15)))));\n+\t\t\t   gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t    gen_rtx_raw_REG (Pmode, 15)))));\n   else\n     emit_call_insn\n-      (gen_rtx (PARALLEL, VOIDmode,\n-\t\tgen_rtvec (2, gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx),\n-\t\t\t   gen_rtx (CLOBBER, VOIDmode,\n-\t\t\t\t    gen_rtx (REG, Pmode, 15)))));\n+      (gen_rtx_PARALLEL (VOIDmode,\n+\t\tgen_rtvec (2, gen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx),\n+\t\t\t   gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t    gen_rtx_raw_REG (Pmode, 15)))));\n \n  finish_call:\n #if 0\n@@ -5797,11 +5797,11 @@ if (! TARGET_ARCH64)\n #endif\n \n   vec = gen_rtvec (2,\n-\t\t   gen_rtx (SET, VOIDmode, operands[0],\n-\t\t\t    gen_rtx (CALL, VOIDmode, fn_rtx, nregs_rtx)),\n-\t\t   gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, Pmode, 15)));\n+\t\t   gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t    gen_rtx_CALL (VOIDmode, fn_rtx, nregs_rtx)),\n+\t\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_raw_REG (Pmode, 15)));\n \n-  emit_call_insn (gen_rtx (PARALLEL, VOIDmode, vec));\n+  emit_call_insn (gen_rtx_PARALLEL (VOIDmode, vec));\n \n   DONE;\n }\")\n@@ -5891,20 +5891,20 @@ if (! TARGET_ARCH64)\n   \"\"\n   \"\n {\n-  rtx valreg1 = gen_rtx (REG, DImode, 24);\n-  rtx valreg2 = gen_rtx (REG, TARGET_ARCH64 ? TFmode : DFmode, 32);\n+  rtx valreg1 = gen_rtx_raw_REG (DImode, 24);\n+  rtx valreg2 = gen_rtx_raw_REG (TARGET_ARCH64 ? TFmode : DFmode, 32);\n   rtx result = operands[0];\n \n   if (! TARGET_ARCH64)\n     {\n-      rtx rtnreg = gen_rtx (REG, SImode, (leaf_function ? 15 : 31));\n+      rtx rtnreg = gen_rtx_raw_REG (SImode, (leaf_function ? 15 : 31));\n       rtx value = gen_reg_rtx (SImode);\n \n       /* Fetch the instruction where we will return to and see if it's an unimp\n \t instruction (the most significant 10 bits will be zero).  If so,\n \t update the return address to skip the unimp instruction.  */\n       emit_move_insn (value,\n-\t\t      gen_rtx (MEM, SImode, plus_constant (rtnreg, 8)));\n+\t\t      gen_rtx_MEM (SImode, plus_constant (rtnreg, 8)));\n       emit_insn (gen_lshrsi3 (value, value, GEN_INT (22)));\n       emit_insn (gen_update_return (rtnreg, value));\n     }\n@@ -5916,8 +5916,8 @@ if (! TARGET_ARCH64)\n \t\t\t\t  plus_constant (XEXP (result, 0), 8)));\n \n   /* Put USE insns before the return.  */\n-  emit_insn (gen_rtx (USE, VOIDmode, valreg1));\n-  emit_insn (gen_rtx (USE, VOIDmode, valreg2));\n+  emit_insn (gen_rtx_USE (VOIDmode, valreg1));\n+  emit_insn (gen_rtx_USE (VOIDmode, valreg2));\n \n   /* Construct the return.  */\n   expand_null_return ();\n@@ -5999,7 +5999,7 @@ if (! TARGET_ARCH64)\n \n   /* Find the containing function's current nonlocal goto handler,\n      which will do any cleanups and then jump to the label.  */\n-  labreg = gen_rtx (REG, Pmode, 8);\n+  labreg = gen_rtx_raw_REG (Pmode, 8);\n   emit_move_insn (labreg, lab);\n \n   /* Restore %fp from stack pointer value for containing function.\n@@ -6009,8 +6009,8 @@ if (! TARGET_ARCH64)\n \n   /* USE of frame_pointer_rtx added for consistency; not clear if\n      really needed.  */\n-  /*emit_insn (gen_rtx (USE, VOIDmode, frame_pointer_rtx));*/\n-  emit_insn (gen_rtx (USE, VOIDmode, stack_pointer_rtx));\n+  /*emit_insn (gen_rtx_USE (VOIDmode, frame_pointer_rtx));*/\n+  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n   /* Return, restoring reg window and jumping to goto handler.  */\n   if (TARGET_V9 && GET_CODE (chain) == CONST_INT\n       && ! (INTVAL (chain) & ~(HOST_WIDE_INT)0xffffffff))\n@@ -6022,7 +6022,7 @@ if (! TARGET_ARCH64)\n     }\n   /* Put in the static chain register the nonlocal label address.  */\n   emit_move_insn (static_chain_rtx, chain);\n-  emit_insn (gen_rtx (USE, VOIDmode, static_chain_rtx));\n+  emit_insn (gen_rtx_USE (VOIDmode, static_chain_rtx));\n   emit_insn (gen_goto_handler_and_restore (labreg));\n   emit_barrier ();\n   DONE;\n@@ -6152,8 +6152,8 @@ if (! TARGET_ARCH64)\n   \"\n {\n   operands[3] = XEXP (operands[0], 0);\n-  operands[4] = gen_rtx (MEM, GET_MODE (operands[0]),\n-\t\t\t gen_rtx (LO_SUM, SImode, operands[2], operands[3]));\n+  operands[4] = gen_rtx_MEM (GET_MODE (operands[0]),\n+\t\t\t gen_rtx_LO_SUM (SImode, operands[2], operands[3]));\n   MEM_IN_STRUCT_P (operands[4]) = MEM_IN_STRUCT_P (operands[0]);\n   MEM_VOLATILE_P (operands[4]) = MEM_VOLATILE_P (operands[0]);\n   RTX_UNCHANGING_P (operands[4]) = RTX_UNCHANGING_P (operands[0]);\n@@ -6170,7 +6170,7 @@ if (! TARGET_ARCH64)\n   rtx addr = legitimize_pic_address (XEXP (operands[0], 0),\n \t\t\t\t     GET_MODE (operands[0]),\n \t\t\t\t     operands[2]);\n-  operands[3] = gen_rtx (MEM, GET_MODE (operands[0]), addr);\n+  operands[3] = gen_rtx_MEM (GET_MODE (operands[0]), addr);\n   MEM_IN_STRUCT_P (operands[3]) = MEM_IN_STRUCT_P (operands[0]);\n   MEM_VOLATILE_P (operands[3]) = MEM_VOLATILE_P (operands[0]);\n   RTX_UNCHANGING_P (operands[3]) = RTX_UNCHANGING_P (operands[0]);\n@@ -6186,7 +6186,7 @@ if (! TARGET_ARCH64)\n   rtx addr = legitimize_pic_address (XEXP (operands[1], 0),\n \t\t\t\t     GET_MODE (operands[1]),\n \t\t\t\t     operands[0]);\n-  operands[2] = gen_rtx (MEM, GET_MODE (operands[1]), addr);\n+  operands[2] = gen_rtx_MEM (GET_MODE (operands[1]), addr);\n   MEM_IN_STRUCT_P (operands[2]) = MEM_IN_STRUCT_P (operands[1]);\n   MEM_VOLATILE_P (operands[2]) = MEM_VOLATILE_P (operands[1]);\n   RTX_UNCHANGING_P (operands[2]) = RTX_UNCHANGING_P (operands[1]);\n@@ -6204,7 +6204,7 @@ if (! TARGET_ARCH64)\n   rtx addr = legitimize_pic_address (XEXP (operands[2], 0),\n \t\t\t\t     GET_MODE (operands[2]),\n \t\t\t\t     operands[0]);\n-  operands[3] = gen_rtx (MEM, GET_MODE (operands[2]), addr);\n+  operands[3] = gen_rtx_MEM (GET_MODE (operands[2]), addr);\n   MEM_IN_STRUCT_P (operands[3]) = MEM_IN_STRUCT_P (operands[2]);\n   MEM_VOLATILE_P (operands[3]) = MEM_VOLATILE_P (operands[2]);\n   RTX_UNCHANGING_P (operands[3]) = RTX_UNCHANGING_P (operands[2]);\n@@ -6483,8 +6483,8 @@ if (! TARGET_ARCH64)\n {\n   /* Go by way of output_move_double in case the register in operand 2\n      is not properly aligned for ldd.  */\n-  operands[1] = gen_rtx (MEM, DFmode,\n-\t\t\t gen_rtx (LO_SUM, SImode, operands[0], operands[1]));\n+  operands[1] = gen_rtx_MEM (DFmode,\n+\t\t\t gen_rtx_LO_SUM (SImode, operands[0], operands[1]));\n   operands[0] = operands[2];\n   return output_move_double (operands);\n }\")"}]}