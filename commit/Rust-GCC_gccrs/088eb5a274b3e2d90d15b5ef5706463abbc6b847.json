{"sha": "088eb5a274b3e2d90d15b5ef5706463abbc6b847", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDg4ZWI1YTI3NGIzZTJkOTBkMTViNWVmNTcwNjQ2M2FiYmM2Yjg0Nw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-13T02:13:54Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-06-13T02:13:54Z"}, "message": "[multiple changes]\n\n\n2000-06-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* bits/locale_facets.h (ctype<wchar_t>): Remove unnecessary data\n\tmembers.\n\t* src/locale.cc: Add cwchar include here. Remove incorrect\n\tdefinitions, and stub them out.\n\t* config/generic/ctype.cc (ctype): Remove ctype<wchar_t> bits.\n\t* config/solaris/solaris2.7/ctype.cc (ctype): Same.\n\t* config/solaris/solaris2.5/ctype.cc (ctype): Same.\n\t* config/newlib/ctype.cc: Same.\n\t* config/gnu-linux/ctype.cc: Same.\n\t* config/bsd/ctype.cc: Same.\n\t* config/aix/ctype.cc: Same.\n\n2000-06-12  Branko Cibej  <branko.cibej@hermes.si>\n\n        * config/solaris/solaris2.6/ctype.cc (do_toupper, do_tolower): Use\n        towupper and towlower to convert wide characters.\n\nFrom-SVN: r34511", "tree": {"sha": "51563b8b86b75220b40d2d6f32d188493d22c62d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51563b8b86b75220b40d2d6f32d188493d22c62d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/088eb5a274b3e2d90d15b5ef5706463abbc6b847", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088eb5a274b3e2d90d15b5ef5706463abbc6b847", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088eb5a274b3e2d90d15b5ef5706463abbc6b847", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088eb5a274b3e2d90d15b5ef5706463abbc6b847/comments", "author": null, "committer": null, "parents": [{"sha": "d54a528ae41f74bd3d8686742ae4feed435576d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d54a528ae41f74bd3d8686742ae4feed435576d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d54a528ae41f74bd3d8686742ae4feed435576d7"}], "stats": {"total": 429, "additions": 80, "deletions": 349}, "files": [{"sha": "c0b73b61946d1bce8f3d1fbaf8278003ab5a03db", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -1,3 +1,22 @@\n+2000-06-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* bits/locale_facets.h (ctype<wchar_t>): Remove unnecessary data\n+\tmembers.\n+\t* src/locale.cc: Add cwchar include here. Remove incorrect\n+\tdefinitions, and stub them out.\n+\t* config/generic/ctype.cc (ctype): Remove ctype<wchar_t> bits.\n+\t* config/solaris/solaris2.7/ctype.cc (ctype): Same.\n+\t* config/solaris/solaris2.5/ctype.cc (ctype): Same.\n+\t* config/newlib/ctype.cc: Same.\n+\t* config/gnu-linux/ctype.cc: Same.\n+\t* config/bsd/ctype.cc: Same.\n+\t* config/aix/ctype.cc: Same.\n+\n+2000-06-12  Branko Cibej  <branko.cibej@hermes.si>\n+\n+        * config/solaris/solaris2.6/ctype.cc (do_toupper, do_tolower): Use\n+        towupper and towlower to convert wide characters.\n+\n 2000-06-12  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* mkcheck.in: Clean up confusion regarding NAME, PRE_NAME."}, {"sha": "f987f01665dfe362777532c67d4bcd928e42baca", "filename": "libstdc++-v3/bits/locale_facets.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Flocale_facets.h?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -390,15 +390,7 @@ namespace std\n      // Types:\n       typedef wchar_t \t\t\t\t\tchar_type;\n       typedef ctype::mask \t\t\t\tmask;\n-      typedef size_t\t\t\t\t\t__table_type;\n-\n-    private:\n-      __to_type const& \t\t_M_toupper;\n-      __to_type const& \t\t_M_tolower;\n-      const mask* const& \t_M_ctable;\n-      static const __table_type\t_S_table_size = ctype<char>::table_size;\n       \n-    public:\n       static locale::id id;\n \n       explicit "}, {"sha": "67972999ee175e926217ea7796ac103c48dc732e", "filename": "libstdc++-v3/config/aix/ctype.cc", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Faix%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Faix%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Faix%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -69,42 +69,3 @@\n       }\n     return __high;\n   }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { return towupper(__c); }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = this->do_toupper(*low);\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { return towlower(__c); }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = this->do_tolower(*__low);\n-    return __high;\n-  }\n-#endif\n-\n-\n-\n-\n-\n-"}, {"sha": "f419865763538bd0205605e44f24571cf7591bdb", "filename": "libstdc++-v3/config/bsd/ctype.cc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -69,38 +69,3 @@\n       }\n     return __high;\n   }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(char_type __c) const\n-  { return (__c < _S_table_size) ? _S_toupper[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(char_type* low, const char_type* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = _S_toupper[*low];\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(char_type __c) const\n-  { return (__c < _S_table_size) ? _S_tolower[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(char_type* __low, const char_type* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = _S_toupper[*__low];\n-    return __high;\n-  }\n-#endif\n-\n-"}, {"sha": "e4de5c2eae9bfca80ceb757e5cdc40482608ecab", "filename": "libstdc++-v3/config/generic/ctype.cc", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -69,38 +69,3 @@\n       }\n     return __high;\n   }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(NULL)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(char_type __c) const\n-  { return (__c < _S_table_size) ? _S_toupper[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(char_type* low, const char_type* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = _S_toupper[*low];\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(char_type __c) const\n-  { return (__c < _S_table_size) ? _S_tolower[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(char_type* __low, const char_type* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = _S_toupper[*__low];\n-    return __high;\n-  }\n-#endif\n-\n-"}, {"sha": "dc10a63a6842a9643f89418de687938f4628fec9", "filename": "libstdc++-v3/config/gnu-linux/ctype.cc", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgnu-linux%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -70,43 +70,3 @@\n     return __high;\n   }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(__ctype_toupper), _M_tolower(__ctype_tolower),\n-      _M_ctable(__ctype_b)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { \n-    return ((static_cast<__table_type>(__c) < _S_table_size) \n-\t    ? _M_toupper[__c] : __c);\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (static_cast<__table_type>(*low) < _S_table_size)\n-        *low = _M_toupper[*low];\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { \n-    return ((static_cast<__table_type>(__c) < _S_table_size) \n-\t    ? _M_tolower[__c] : __c);\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (static_cast<__table_type>(*__low) < _S_table_size)\n-        *__low = _M_toupper[*__low];\n-    return __high;\n-  }\n-#endif\n-\n-"}, {"sha": "1984d65439370211b9745d774f782224a45c8089", "filename": "libstdc++-v3/config/newlib/ctype.cc", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fnewlib%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fnewlib%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fnewlib%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -76,45 +76,3 @@\n     return __high;\n   }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(_ctype_)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { \n-    int __x = __c;\n-    bool __testok = __c < _S_table_size && this->is(ctype_base::upper, __c);\n-    return (__testok ? (__x - 'A' + 'a') : __x);\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = this->do_toupper(*low);\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { \n-    int __x = __c;\n-    bool __testok = __c < _S_table_size && this->is(ctype_base::lower, __c);\n-    return (__testok ? (__x - 'A' + 'a') : __x);\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = this->do_tolower(*__low);\n-    return __high;\n-  }\n-#endif\n-\n-"}, {"sha": "c02a31ead51c886c7d774574c3e277709614421f", "filename": "libstdc++-v3/config/solaris/solaris2.5/ctype.cc", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.5%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.5%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.5%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -70,49 +70,3 @@\n     return __high;\n   }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(NULL), _M_tolower(NULL),\n-      _M_ctable(__ctype)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { \n-    int __x = __c;\n-    bool __testok = __c < _S_table_size && this->is(ctype_base::upper, __c);\n-    return (__testok ? __x : (__x - 'a' + 'A'));\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = this->do_toupper(*low);\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { \n-    int __x = __c;\n-    bool __testok = __c < _S_table_size && this->is(ctype_base::lower, __c);\n-    return (__testok ? __x: (__x - 'A' + 'a'));\n-  }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = this->do_tolower(*__low);\n-    return __high;\n-  }\n-#endif\n-\n-\n-\n-\n-\n-"}, {"sha": "f760ac934ae66a20cdc592edfe5767a66e8d16f9", "filename": "libstdc++-v3/config/solaris/solaris2.6/ctype.cc", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.6%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.6%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.6%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -69,39 +69,3 @@\n       }\n     return __high;\n   }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-      _M_ctable(__ctype_mask)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { return (__c < _S_table_size) ? _M_toupper[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (*low < _S_table_size)\n-        *low = _M_toupper[*low];\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { return (__c < _S_table_size) ? _M_tolower[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (*__low < _S_table_size)\n-        *__low = _M_toupper[*__low];\n-    return __high;\n-  }\n-#endif\n-\n-\n-"}, {"sha": "348495ecefb52bfe92d2799196d6e693c20da3e7", "filename": "libstdc++-v3/config/solaris/solaris2.7/ctype.cc", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.7%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.7%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fsolaris%2Fsolaris2.7%2Fctype.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -70,41 +70,4 @@\n     return __high;\n   }\n \n-#ifdef _GLIBCPP_USE_WCHAR_T  \n-  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n-    : _M_toupper(__trans_upper), _M_tolower(__trans_lower),\n-      _M_ctable(__ctype_mask)\n-    { }\n-\n-  wchar_t\n-  ctype<wchar_t>::do_toupper(wchar_t __c) const\n-  { return (static_cast<__table_type>(__c) < _S_table_size) ? _M_toupper[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_toupper(wchar_t* low, const wchar_t* high) const\n-  {\n-    for (;low < high; ++low)\n-      if (static_cast<__table_type>(*low) < _S_table_size)\n-        *low = _M_toupper[*low];\n-    return high;\n-  }\n-  \n-  wchar_t\n-  ctype<wchar_t>::do_tolower(wchar_t __c) const\n-  { return (static_cast<__table_type>(__c) < _S_table_size) ? _M_tolower[__c] : __c; }\n-  \n-  const wchar_t*\n-  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n-  {\n-    for (; __low < __high; ++__low)\n-      if (static_cast<__table_type>(*__low) < _S_table_size)\n-        *__low = _M_toupper[*__low];\n-    return __high;\n-  }\n-#endif\n-\n-\n-\n-\n-\n "}, {"sha": "4faa2a40494a6c9da1c4d990d69bf2f1ea5e0ac1", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 61, "deletions": 31, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/088eb5a274b3e2d90d15b5ef5706463abbc6b847/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=088eb5a274b3e2d90d15b5ef5706463abbc6b847", "patch": "@@ -37,7 +37,9 @@\n #include <bits/std_ostream.h>\n #include <bits/std_vector.h>\n #include <bits/std_memory.h>      // for auto_ptr\n-\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  #include <bits/std_cwctype.h>     // for towupper, etc.\n+#endif\n namespace std {\n \n   // locale::_Impl\n@@ -641,76 +643,104 @@ namespace std {\n   ctype<wchar_t>::\n   ~ctype() { }\n \n+  // NB: These ctype<wchar_t> methods are not configuration-specific,\n+  // unlike the ctype<char> bits.\n+  ctype<wchar_t>::ctype(size_t /*__refs*/) throw() { }\n+\n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return ::towupper(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __low, const wchar_t* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+        *__low = ::towupper(*__low);\n+        ++__low;\n+      }\n+    return __high;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return ::towlower(__c); }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __low, const wchar_t* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+        *__low = ::towlower(*__low);\n+        ++__low;\n+      }\n+    return __high;\n+  }\n+\n   bool\n   ctype<wchar_t>::\n-  do_is(mask __m, char_type __c) const\n+  do_is(mask /*__m*/, char_type /*__c*/) const\n   { \n-    return ((static_cast<__table_type>(__c) < _S_table_size) \n-\t    && (_M_ctable[__c] & __m)); \n+    // XXX\n+    return false;\n   }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_is(const wchar_t* __low, const wchar_t* __high, mask* __vec) const\n+  do_is(const wchar_t* __low, const wchar_t* /*__high*/, mask* /*__vec*/) const\n   {\n-    for (; __low < __high; ++__low, ++__vec)\n-      *__vec = ((static_cast<__table_type>(*__low) < _S_table_size) \n-\t\t? _M_ctable[*__low] : mask(0));\n-    return __high;\n+    // XXX\n+    return __low;\n   }\n   \n   const wchar_t* \n   ctype<wchar_t>::\n-  do_scan_is(mask __m, const wchar_t* __low, const wchar_t* __high) const\n+  do_scan_is(mask /*__m*/, const wchar_t* __low, const wchar_t* /*__high*/) const\n   {\n-    while (__low < __high \n-\t   && (_S_table_size < static_cast<__table_type>(*__low) \n-\t       || !(_M_ctable[*__low] & __m)))\n-      ++__low;\n+    // XXX\n     return __low;\n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_scan_not(mask __m, const char_type* __low, const char_type* __high) const\n+  do_scan_not(mask /*__m*/, const char_type* __low, \n+\t      const char_type* /*__high*/) const\n   {\n-    while (__low < __high \n-\t   && static_cast<__table_type>(*__low) < _S_table_size \n-\t   && (_M_ctable[*__low] & __m))\n-      ++__low;\n+    // XXX\n     return __low;\n   }\n \n   wchar_t\n   ctype<wchar_t>::\n   do_widen(char __c) const\n-  { return static_cast<wchar_t>((unsigned char)__c); }\n+  { \n+    // XXX\n+    return static_cast<wchar_t>((unsigned char)__c); \n+  }\n   \n   const char* \n   ctype<wchar_t>::\n-  do_widen(const char* __low, const char* __high, wchar_t* __dest) const\n+  do_widen(const char* /*__low*/, const char* __high, \n+\t   wchar_t* /*__dest*/) const\n   {\n-    while (__low < __high)\n-      *__dest++ = static_cast<wchar_t>((unsigned char)*__low++);\n+    // XXX\n     return __high;\n   }\n \n   char\n   ctype<wchar_t>::\n-  do_narrow(wchar_t __c, char __dfault) const\n+  do_narrow(wchar_t /*__c*/, char __dfault) const\n   { \n-    return ((static_cast<__table_type>(__c) < _S_table_size) \n-\t    ? static_cast<char>(__c) : __dfault); \n+    // XXX\n+    return __dfault; \n   }\n \n   const wchar_t*\n   ctype<wchar_t>::\n-  do_narrow(const wchar_t* __low, const wchar_t* __high, \n-\t    char __dfault, char* __dest) const\n+  do_narrow(const wchar_t* /*__low*/, const wchar_t* __high, \n+\t    char /*__dfault*/, char* /*__dest*/) const\n   {\n-    for (; __low < __high; ++__dest, ++__low)\n-      *__dest = (static_cast<__table_type>(*__low) < _S_table_size) \n-\t\t? static_cast<char>(*__low) : __dfault;\n+    // XXX\n     return __high;\n   }\n "}]}