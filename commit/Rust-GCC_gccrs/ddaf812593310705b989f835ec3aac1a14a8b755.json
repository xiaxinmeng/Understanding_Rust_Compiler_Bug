{"sha": "ddaf812593310705b989f835ec3aac1a14a8b755", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRhZjgxMjU5MzMxMDcwNWI5ODlmODM1ZWMzYWFjMWExNGE4Yjc1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-01-15T18:22:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-01-15T18:22:55Z"}, "message": "mips-protos.h (SYMBOL_FORCE_TO_MEM): Delete.\n\ngcc/\n2012-01-08  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* config/mips/mips-protos.h (SYMBOL_FORCE_TO_MEM): Delete.\n\t(SYMBOL_32_HIGH): Likewise.\n\t(mips_output_tls_reloc_directive): Declare.\n\t* config/mips/mips.h (PIC_FUNCTION_ADDR_REGNUM): Move to mips.md.\n\t(mips_use_pcrel_pool_p, mips_lo_relocs, mips_hi_relocs): Declare.\n\t* config/mips/mips.c (mips_use_pcrel_pool_p): New variable.\n\t(mips_lo_relocs, mips_hi_relocs): Make extern.\n\t(mips16_stub_function): Move up file.\n\t(mips_classify_symbol): Remove SYMBOL_FORCE_TO_MEM handling.\n\t(mips_symbolic_constant_p): Likewise.  Remove SYMBOL_32_HIGH too.\n\t(mips_symbol_insns_1): Likewise.  Check mips_use_pcrel_pool_p.\n\t(mips_cannot_force_const_mem): Use mips_use_pcrel_pool_p instead\n\tof SYMBOL_FORCE_TO_MEM.  Only check mips_tls_symbol_ref_1\n\tif it's false.\n\t(mips_get_tp): Add MIPS16 support.\n\t(mips_legitimize_tls_address): Remove MIPS16 sorry().\n\tGeneralize DTPREL and TPREL handling.\n\t(mips_init_relocs): Initialize mips_use_pcrel_pool_p.\n\tAdd MIPS16 TLS support.\n\t(mips_output_tls_reloc_directive): New function.\n\t(mips16_rewrite_pool_refs): Ignore UNSPEC_TLS_GET_TPs.\n\t* config/mips/predicates.md (symbolic_operand_with_high)\n\t(tls_reloc_operand): New predicates.\n\t(force_to_mem_operand): Use mips_use_pcrel_pool_p.\n\t* config/mips/mips.md (UNSPEC_UNSHIFTED_HIGH): New unspec.\n\t(PIC_FUNCTION_ADDR_REGNUM): Moved from mips.h.\n\t(*unshifted_high): New instruction.  Use it for MIPS16\n\thigh splitter.\n\t(consttable_tls_reloc, tls_get_tp_mips16_<mode>): New patterns.\n\t(*tls_get_tp_mips16_call_<mode>): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/mips/code-readable-2.c: Allow the jump table address\n\tto be loaded from the constant pool, rather than via %hi and %lo.\n\nlibgcc/\n2012-01-08  Chung-Lin Tang  <cltang@codesourcery.com>\n\t    Richard Sandiford  <rdsandiford@googlemail.com>\n\n\t* config/mips/libgcc-mips16.ver (__mips16_rdhwr): Add.\n\t* config/mips/mips16.S (__mips16_rdhwr): New function.\n\t* config/mips/t-mips16 (LIB1ASMFUNCS): Add _m16rdhwr.\n\nFrom-SVN: r183195", "tree": {"sha": "fc5bc18bcb124f4811d716b815e3bc85b3097e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc5bc18bcb124f4811d716b815e3bc85b3097e55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddaf812593310705b989f835ec3aac1a14a8b755", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaf812593310705b989f835ec3aac1a14a8b755", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddaf812593310705b989f835ec3aac1a14a8b755", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddaf812593310705b989f835ec3aac1a14a8b755/comments", "author": null, "committer": null, "parents": [{"sha": "bf63ef6c22e8d8f972e76dad2b75ef509ddbc062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf63ef6c22e8d8f972e76dad2b75ef509ddbc062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf63ef6c22e8d8f972e76dad2b75ef509ddbc062"}], "stats": {"total": 383, "additions": 283, "deletions": 100}, "files": [{"sha": "66c43f19e940cba63aad6e75906c99ef76e532a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -1,3 +1,37 @@\n+2012-01-15  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips-protos.h (SYMBOL_FORCE_TO_MEM): Delete.\n+\t(SYMBOL_32_HIGH): Likewise.\n+\t(mips_output_tls_reloc_directive): Declare.\n+\t* config/mips/mips.h (PIC_FUNCTION_ADDR_REGNUM): Move to mips.md.\n+\t(mips_use_pcrel_pool_p, mips_lo_relocs, mips_hi_relocs): Declare.\n+\t* config/mips/mips.c (mips_use_pcrel_pool_p): New variable.\n+\t(mips_lo_relocs, mips_hi_relocs): Make extern.\n+\t(mips16_stub_function): Move up file.\n+\t(mips_classify_symbol): Remove SYMBOL_FORCE_TO_MEM handling.\n+\t(mips_symbolic_constant_p): Likewise.  Remove SYMBOL_32_HIGH too.\n+\t(mips_symbol_insns_1): Likewise.  Check mips_use_pcrel_pool_p.\n+\t(mips_cannot_force_const_mem): Use mips_use_pcrel_pool_p instead\n+\tof SYMBOL_FORCE_TO_MEM.  Only check mips_tls_symbol_ref_1\n+\tif it's false.\n+\t(mips_get_tp): Add MIPS16 support.\n+\t(mips_legitimize_tls_address): Remove MIPS16 sorry().\n+\tGeneralize DTPREL and TPREL handling.\n+\t(mips_init_relocs): Initialize mips_use_pcrel_pool_p.\n+\tAdd MIPS16 TLS support.\n+\t(mips_output_tls_reloc_directive): New function.\n+\t(mips16_rewrite_pool_refs): Ignore UNSPEC_TLS_GET_TPs.\n+\t* config/mips/predicates.md (symbolic_operand_with_high)\n+\t(tls_reloc_operand): New predicates.\n+\t(force_to_mem_operand): Use mips_use_pcrel_pool_p.\n+\t* config/mips/mips.md (UNSPEC_UNSHIFTED_HIGH): New unspec.\n+\t(PIC_FUNCTION_ADDR_REGNUM): Moved from mips.h.\n+\t(*unshifted_high): New instruction.  Use it for MIPS16\n+\thigh splitter.\n+\t(consttable_tls_reloc, tls_get_tp_mips16_<mode>): New patterns.\n+\t(*tls_get_tp_mips16_call_<mode>): Likewise.\n+\n 2012-01-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/51821"}, {"sha": "45d2537cab83ed70b0823317e727ca3c760168b7", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -56,9 +56,6 @@ enum mips_symbol_context {\n        The symbol's value will be calculated using a MIPS16 PC-relative\n        calculation.\n \n-   SYMBOL_FORCE_TO_MEM\n-       The symbol's value must be forced to memory and loaded from there.\n-\n    SYMBOL_GOT_PAGE_OFST\n        The symbol's value will be calculated by loading an address\n        from the GOT and then applying a 16-bit offset.\n@@ -94,9 +91,6 @@ enum mips_symbol_context {\n        UNSPEC wrappers around SYMBOL_TLS, corresponding to the\n        thread-local storage relocation operators.\n \n-   SYMBOL_32_HIGH\n-       For a 32-bit symbolic address X, this is the value of %hi(X).\n-\n    SYMBOL_64_HIGH\n        For a 64-bit symbolic address X, this is the value of\n        (%highest(X) << 16) + %higher(X).\n@@ -116,7 +110,6 @@ enum mips_symbol_type {\n   SYMBOL_ABSOLUTE,\n   SYMBOL_GP_RELATIVE,\n   SYMBOL_PC_RELATIVE,\n-  SYMBOL_FORCE_TO_MEM,\n   SYMBOL_GOT_PAGE_OFST,\n   SYMBOL_GOT_DISP,\n   SYMBOL_GOTOFF_PAGE,\n@@ -129,7 +122,6 @@ enum mips_symbol_type {\n   SYMBOL_DTPREL,\n   SYMBOL_GOTTPREL,\n   SYMBOL_TPREL,\n-  SYMBOL_32_HIGH,\n   SYMBOL_64_HIGH,\n   SYMBOL_64_MID,\n   SYMBOL_64_LOW,\n@@ -260,6 +252,7 @@ extern void mips_push_asm_switch (struct mips_asm_switch *);\n extern void mips_pop_asm_switch (struct mips_asm_switch *);\n extern void mips_output_external (FILE *, tree, const char *);\n extern void mips_output_ascii (FILE *, const char *, size_t);\n+extern const char *mips_output_tls_reloc_directive (rtx *);\n extern void mips_output_aligned_decl_common (FILE *, tree, const char *,\n \t\t\t\t\t     unsigned HOST_WIDE_INT,\n \t\t\t\t\t     unsigned int);"}, {"sha": "b29ec4a5041089985f1daf37bfd930aaba9694a0", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 133, "deletions": 79, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -573,13 +573,17 @@ bool mips_split_p[NUM_SYMBOL_TYPES];\n    can be split by mips_split_symbol.  */\n bool mips_split_hi_p[NUM_SYMBOL_TYPES];\n \n+/* mips_use_pcrel_pool_p[X] is true if symbols of type X should be\n+   forced into a PC-relative constant pool.  */\n+bool mips_use_pcrel_pool_p[NUM_SYMBOL_TYPES];\n+\n /* mips_lo_relocs[X] is the relocation to use when a symbol of type X\n    appears in a LO_SUM.  It can be null if such LO_SUMs aren't valid or\n    if they are matched by a special .md file pattern.  */\n-static const char *mips_lo_relocs[NUM_SYMBOL_TYPES];\n+const char *mips_lo_relocs[NUM_SYMBOL_TYPES];\n \n /* Likewise for HIGHs.  */\n-static const char *mips_hi_relocs[NUM_SYMBOL_TYPES];\n+const char *mips_hi_relocs[NUM_SYMBOL_TYPES];\n \n /* Target state for MIPS16.  */\n struct target_globals *mips16_globals;\n@@ -1440,6 +1444,18 @@ mips_legitimate_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return mips_const_insns (x) > 0;\n }\n \f\n+/* Return a SYMBOL_REF for a MIPS16 function called NAME.  */\n+\n+static rtx\n+mips16_stub_function (const char *name)\n+{\n+  rtx x;\n+\n+  x = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n+  SYMBOL_REF_FLAGS (x) |= (SYMBOL_FLAG_EXTERNAL | SYMBOL_FLAG_FUNCTION);\n+  return x;\n+}\n+\f\n /* Return true if symbols of type TYPE require a GOT access.  */\n \n static bool\n@@ -1644,9 +1660,6 @@ mips_classify_symbol (const_rtx x, enum mips_symbol_context context)\n       return SYMBOL_GOT_PAGE_OFST;\n     }\n \n-  if (TARGET_MIPS16_PCREL_LOADS && context != SYMBOL_CONTEXT_CALL)\n-    return SYMBOL_FORCE_TO_MEM;\n-\n   return SYMBOL_ABSOLUTE;\n }\n \n@@ -1709,8 +1722,6 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_context context,\n   switch (*symbol_type)\n     {\n     case SYMBOL_ABSOLUTE:\n-    case SYMBOL_FORCE_TO_MEM:\n-    case SYMBOL_32_HIGH:\n     case SYMBOL_64_HIGH:\n     case SYMBOL_64_MID:\n     case SYMBOL_64_LOW:\n@@ -1776,6 +1787,17 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_context context,\n static int\n mips_symbol_insns_1 (enum mips_symbol_type type, enum machine_mode mode)\n {\n+  if (mips_use_pcrel_pool_p[(int) type])\n+    {\n+      if (mode == MAX_MACHINE_MODE)\n+\t/* LEAs will be converted into constant-pool references by\n+\t   mips_reorg.  */\n+\ttype = SYMBOL_PC_RELATIVE;\n+      else\n+\t/* The constant must be loaded and then dereferenced.  */\n+\treturn 0;\n+    }\n+\n   switch (type)\n     {\n     case SYMBOL_ABSOLUTE:\n@@ -1809,15 +1831,6 @@ mips_symbol_insns_1 (enum mips_symbol_type type, enum machine_mode mode)\n       /* The constant must be loaded using ADDIUPC or DADDIUPC first.  */\n       return 0;\n \n-    case SYMBOL_FORCE_TO_MEM:\n-      /* LEAs will be converted into constant-pool references by\n-\t mips_reorg.  */\n-      if (mode == MAX_MACHINE_MODE)\n-\treturn 1;\n-\n-      /* The constant must be loaded and then dereferenced.  */\n-      return 0;\n-\n     case SYMBOL_GOT_DISP:\n       /* The constant will have to be loaded from the GOT before it\n \t is used in an address.  */\n@@ -1850,7 +1863,6 @@ mips_symbol_insns_1 (enum mips_symbol_type type, enum machine_mode mode)\n     case SYMBOL_GOTOFF_DISP:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n-    case SYMBOL_32_HIGH:\n     case SYMBOL_64_HIGH:\n     case SYMBOL_64_MID:\n     case SYMBOL_64_LOW:\n@@ -1925,9 +1937,12 @@ mips_cannot_force_const_mem (enum machine_mode mode, rtx x)\n     return true;\n \n   split_const (x, &base, &offset);\n-  if (mips_symbolic_constant_p (base, SYMBOL_CONTEXT_LEA, &type)\n-      && type != SYMBOL_FORCE_TO_MEM)\n+  if (mips_symbolic_constant_p (base, SYMBOL_CONTEXT_LEA, &type))\n     {\n+      /* See whether we explicitly want these symbols in the pool.  */\n+      if (mips_use_pcrel_pool_p[(int) type])\n+\treturn false;\n+\n       /* The same optimization as for CONST_INT.  */\n       if (SMALL_INT (offset) && mips_symbol_insns (type, MAX_MACHINE_MODE) > 0)\n \treturn true;\n@@ -2822,13 +2837,18 @@ mips_call_tls_get_addr (rtx sym, enum mips_symbol_type type, rtx v0)\n static rtx\n mips_get_tp (void)\n {\n-  rtx tp;\n+  rtx tp, fn;\n \n   tp = gen_reg_rtx (Pmode);\n-  if (Pmode == DImode)\n-    emit_insn (gen_tls_get_tp_di (tp));\n+  if (TARGET_MIPS16)\n+    {\n+      fn = mips16_stub_function (\"__mips16_rdhwr\");\n+      if (!call_insn_operand (fn, VOIDmode))\n+\tfn = force_reg (Pmode, fn);\n+      emit_insn (PMODE_INSN (gen_tls_get_tp_mips16, (tp, fn)));\n+    }\n   else\n-    emit_insn (gen_tls_get_tp_si (tp));\n+    emit_insn (PMODE_INSN (gen_tls_get_tp, (tp)));\n   return tp;\n }\n \n@@ -2839,15 +2859,9 @@ mips_get_tp (void)\n static rtx\n mips_legitimize_tls_address (rtx loc)\n {\n-  rtx dest, insn, v0, tp, tmp1, tmp2, eqv;\n+  rtx dest, insn, v0, tp, tmp1, tmp2, eqv, offset;\n   enum tls_model model;\n \n-  if (TARGET_MIPS16)\n-    {\n-      sorry (\"MIPS16 TLS\");\n-      return gen_reg_rtx (Pmode);\n-    }\n-\n   model = SYMBOL_REF_TLS_MODEL (loc);\n   /* Only TARGET_ABICALLS code can have more than one module; other\n      code must be be static and should not use a GOT.  All TLS models\n@@ -2875,9 +2889,15 @@ mips_legitimize_tls_address (rtx loc)\n \t\t\t    UNSPEC_TLS_LDM);\n       emit_libcall_block (insn, tmp1, v0, eqv);\n \n-      tmp2 = mips_unspec_offset_high (NULL, tmp1, loc, SYMBOL_DTPREL);\n-      dest = gen_rtx_LO_SUM (Pmode, tmp2,\n-\t\t\t     mips_unspec_address (loc, SYMBOL_DTPREL));\n+      offset = mips_unspec_address (loc, SYMBOL_DTPREL);\n+      if (mips_split_p[SYMBOL_DTPREL])\n+\t{\n+\t  tmp2 = mips_unspec_offset_high (NULL, tmp1, loc, SYMBOL_DTPREL);\n+\t  dest = gen_rtx_LO_SUM (Pmode, tmp2, offset);\n+\t}\n+      else\n+\tdest = expand_binop (Pmode, add_optab, tmp1, offset,\n+\t\t\t     0, 0, OPTAB_DIRECT);\n       break;\n \n     case TLS_MODEL_INITIAL_EXEC:\n@@ -2893,10 +2913,16 @@ mips_legitimize_tls_address (rtx loc)\n       break;\n \n     case TLS_MODEL_LOCAL_EXEC:\n-      tp = mips_get_tp ();\n-      tmp1 = mips_unspec_offset_high (NULL, tp, loc, SYMBOL_TPREL);\n-      dest = gen_rtx_LO_SUM (Pmode, tmp1,\n-\t\t\t     mips_unspec_address (loc, SYMBOL_TPREL));\n+      tmp1 = mips_get_tp ();\n+      offset = mips_unspec_address (loc, SYMBOL_TPREL);\n+      if (mips_split_p[SYMBOL_TPREL])\n+\t{\n+\t  tmp2 = mips_unspec_offset_high (NULL, tmp1, loc, SYMBOL_TPREL);\n+\t  dest = gen_rtx_LO_SUM (Pmode, tmp2, offset);\n+\t}\n+      else\n+\tdest = expand_binop (Pmode, add_optab, tmp1, offset,\n+\t\t\t     0, 0, OPTAB_DIRECT);\n       break;\n \n     default:\n@@ -5866,18 +5892,6 @@ struct mips16_stub {\n };\n static struct mips16_stub *mips16_stubs;\n \n-/* Return a SYMBOL_REF for a MIPS16 function called NAME.  */\n-\n-static rtx\n-mips16_stub_function (const char *name)\n-{\n-  rtx x;\n-\n-  x = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (name));\n-  SYMBOL_REF_FLAGS (x) |= (SYMBOL_FLAG_EXTERNAL | SYMBOL_FLAG_FUNCTION);\n-  return x;\n-}\n-\n /* Return the two-character string that identifies floating-point\n    return mode MODE in the name of a MIPS16 function stub.  */\n \n@@ -7192,38 +7206,44 @@ mips_init_relocs (void)\n {\n   memset (mips_split_p, '\\0', sizeof (mips_split_p));\n   memset (mips_split_hi_p, '\\0', sizeof (mips_split_hi_p));\n+  memset (mips_use_pcrel_pool_p, '\\0', sizeof (mips_use_pcrel_pool_p));\n   memset (mips_hi_relocs, '\\0', sizeof (mips_hi_relocs));\n   memset (mips_lo_relocs, '\\0', sizeof (mips_lo_relocs));\n \n-  if (ABI_HAS_64BIT_SYMBOLS)\n+  if (TARGET_MIPS16_PCREL_LOADS)\n+    mips_use_pcrel_pool_p[SYMBOL_ABSOLUTE] = true;\n+  else\n     {\n-      if (TARGET_EXPLICIT_RELOCS)\n+      if (ABI_HAS_64BIT_SYMBOLS)\n \t{\n-\t  mips_split_p[SYMBOL_64_HIGH] = true;\n-\t  mips_hi_relocs[SYMBOL_64_HIGH] = \"%highest(\";\n-\t  mips_lo_relocs[SYMBOL_64_HIGH] = \"%higher(\";\n+\t  if (TARGET_EXPLICIT_RELOCS)\n+\t    {\n+\t      mips_split_p[SYMBOL_64_HIGH] = true;\n+\t      mips_hi_relocs[SYMBOL_64_HIGH] = \"%highest(\";\n+\t      mips_lo_relocs[SYMBOL_64_HIGH] = \"%higher(\";\n \n-\t  mips_split_p[SYMBOL_64_MID] = true;\n-\t  mips_hi_relocs[SYMBOL_64_MID] = \"%higher(\";\n-\t  mips_lo_relocs[SYMBOL_64_MID] = \"%hi(\";\n+\t      mips_split_p[SYMBOL_64_MID] = true;\n+\t      mips_hi_relocs[SYMBOL_64_MID] = \"%higher(\";\n+\t      mips_lo_relocs[SYMBOL_64_MID] = \"%hi(\";\n \n-\t  mips_split_p[SYMBOL_64_LOW] = true;\n-\t  mips_hi_relocs[SYMBOL_64_LOW] = \"%hi(\";\n-\t  mips_lo_relocs[SYMBOL_64_LOW] = \"%lo(\";\n+\t      mips_split_p[SYMBOL_64_LOW] = true;\n+\t      mips_hi_relocs[SYMBOL_64_LOW] = \"%hi(\";\n+\t      mips_lo_relocs[SYMBOL_64_LOW] = \"%lo(\";\n \n-\t  mips_split_p[SYMBOL_ABSOLUTE] = true;\n-\t  mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n+\t      mips_split_p[SYMBOL_ABSOLUTE] = true;\n+\t      mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n+\t    }\n \t}\n-    }\n-  else\n-    {\n-      if (TARGET_EXPLICIT_RELOCS || mips_split_addresses_p () || TARGET_MIPS16)\n+      else\n \t{\n-\t  mips_split_p[SYMBOL_ABSOLUTE] = true;\n-\t  mips_hi_relocs[SYMBOL_ABSOLUTE] = \"%hi(\";\n-\t  mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n-\n-\t  mips_lo_relocs[SYMBOL_32_HIGH] = \"%hi(\";\n+\t  if (TARGET_EXPLICIT_RELOCS\n+\t      || mips_split_addresses_p ()\n+\t      || TARGET_MIPS16)\n+\t    {\n+\t      mips_split_p[SYMBOL_ABSOLUTE] = true;\n+\t      mips_hi_relocs[SYMBOL_ABSOLUTE] = \"%hi(\";\n+\t      mips_lo_relocs[SYMBOL_ABSOLUTE] = \"%lo(\";\n+\t    }\n \t}\n     }\n \n@@ -7291,16 +7311,23 @@ mips_init_relocs (void)\n   mips_lo_relocs[SYMBOL_TLSGD] = \"%tlsgd(\";\n   mips_lo_relocs[SYMBOL_TLSLDM] = \"%tlsldm(\";\n \n-  mips_split_p[SYMBOL_DTPREL] = true;\n-  mips_hi_relocs[SYMBOL_DTPREL] = \"%dtprel_hi(\";\n-  mips_lo_relocs[SYMBOL_DTPREL] = \"%dtprel_lo(\";\n-\n-  mips_lo_relocs[SYMBOL_GOTTPREL] = \"%gottprel(\";\n+  if (TARGET_MIPS16_PCREL_LOADS)\n+    {\n+      mips_use_pcrel_pool_p[SYMBOL_DTPREL] = true;\n+      mips_use_pcrel_pool_p[SYMBOL_TPREL] = true;\n+    }\n+  else\n+    {\n+      mips_split_p[SYMBOL_DTPREL] = true;\n+      mips_hi_relocs[SYMBOL_DTPREL] = \"%dtprel_hi(\";\n+      mips_lo_relocs[SYMBOL_DTPREL] = \"%dtprel_lo(\";\n \n-  mips_split_p[SYMBOL_TPREL] = true;\n-  mips_hi_relocs[SYMBOL_TPREL] = \"%tprel_hi(\";\n-  mips_lo_relocs[SYMBOL_TPREL] = \"%tprel_lo(\";\n+      mips_split_p[SYMBOL_TPREL] = true;\n+      mips_hi_relocs[SYMBOL_TPREL] = \"%tprel_hi(\";\n+      mips_lo_relocs[SYMBOL_TPREL] = \"%tprel_lo(\";\n+    }\n \n+  mips_lo_relocs[SYMBOL_GOTTPREL] = \"%gottprel(\";\n   mips_lo_relocs[SYMBOL_HALF] = \"%half(\";\n }\n \n@@ -8082,6 +8109,29 @@ mips_output_ascii (FILE *stream, const char *string, size_t len)\n   fprintf (stream, \"\\\"\\n\");\n }\n \n+/* Return the pseudo-op for full SYMBOL_(D)TPREL address *ADDR.\n+   Update *ADDR with the operand that should be printed.  */\n+\n+const char *\n+mips_output_tls_reloc_directive (rtx *addr)\n+{\n+  enum mips_symbol_type type;\n+\n+  type = mips_classify_symbolic_expression (*addr, SYMBOL_CONTEXT_LEA);\n+  *addr = mips_strip_unspec_address (*addr);\n+  switch (type)\n+    {\n+    case SYMBOL_DTPREL:\n+      return Pmode == SImode ? \".dtprelword\\t%0\" : \".dtpreldword\\t%0\";\n+\n+    case SYMBOL_TPREL:\n+      return Pmode == SImode ? \".tprelword\\t%0\" : \".tpreldword\\t%0\";\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* Emit either a label, .comm, or .lcomm directive.  When using assembler\n    macros, mark the symbol as written so that mips_asm_output_external\n    won't emit an .extern for it.  STREAM is the output file, NAME is the\n@@ -13783,6 +13833,10 @@ mips16_rewrite_pool_refs (rtx *x, void *data)\n       return -1;\n     }\n \n+  /* Don't rewrite the __mips16_rdwr symbol.  */\n+  if (GET_CODE (*x) == UNSPEC && XINT (*x, 1) == UNSPEC_TLS_GET_TP)\n+    return -1;\n+\n   if (TARGET_MIPS16_TEXT_LOADS)\n     mips16_rewrite_pool_constant (info->pool, x);\n "}, {"sha": "1c19f8b2df4f8b6787b060131afb7f5875b52f34", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -1785,8 +1785,6 @@ struct mips_cpu_info {\n    from there after reload.  */\n #define PIC_OFFSET_TABLE_REGNUM \\\n   (reload_completed ? REGNO (pic_offset_table_rtx) : GLOBAL_POINTER_REGNUM)\n-\n-#define PIC_FUNCTION_ADDR_REGNUM (GP_REG_FIRST + 25)\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -2868,6 +2866,9 @@ extern int mips_dbx_regno[];\n extern int mips_dwarf_regno[];\n extern bool mips_split_p[];\n extern bool mips_split_hi_p[];\n+extern bool mips_use_pcrel_pool_p[];\n+extern const char *mips_lo_relocs[];\n+extern const char *mips_hi_relocs[];\n extern enum processor mips_arch;        /* which cpu to codegen for */\n extern enum processor mips_tune;        /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */"}, {"sha": "3b3eecfeb90ac9820dd4042b88e7789576f87c55", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 65, "deletions": 7, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -103,6 +103,7 @@\n   UNSPEC_LOAD_GOT\n   UNSPEC_TLS_LDM\n   UNSPEC_TLS_GET_TP\n+  UNSPEC_UNSHIFTED_HIGH\n \n   ;; MIPS16 constant pools.\n   UNSPEC_ALIGN\n@@ -135,6 +136,7 @@\n \n (define_constants\n   [(TLS_GET_TP_REGNUM\t\t3)\n+   (PIC_FUNCTION_ADDR_REGNUM\t25)\n    (RETURN_ADDR_REGNUM\t\t31)\n    (CPRESTORE_SLOT_REGNUM\t76)\n    (GOT_VERSION_REGNUM\t\t79)\n@@ -3924,14 +3926,19 @@\n ;;\n ;; on MIPS16 targets.\n (define_split\n-  [(set (match_operand:SI 0 \"d_operand\")\n-\t(high:SI (match_operand:SI 1 \"absolute_symbolic_operand\")))]\n+  [(set (match_operand:P 0 \"d_operand\")\n+\t(high:P (match_operand:P 1 \"symbolic_operand_with_high\")))]\n   \"TARGET_MIPS16 && reload_completed\"\n-  [(set (match_dup 0) (match_dup 2))\n-   (set (match_dup 0) (ashift:SI (match_dup 0) (const_int 16)))]\n-{\n-  operands[2] = mips_unspec_address (operands[1], SYMBOL_32_HIGH);\n-})\n+  [(set (match_dup 0) (unspec:P [(match_dup 1)] UNSPEC_UNSHIFTED_HIGH))\n+   (set (match_dup 0) (ashift:P (match_dup 0) (const_int 16)))])\n+\n+(define_insn \"*unshifted_high\"\n+  [(set (match_operand:P 0 \"d_operand\" \"=d\")\n+\t(unspec:P [(match_operand:P 1 \"symbolic_operand_with_high\")]\n+\t\t  UNSPEC_UNSHIFTED_HIGH))]\n+  \"\"\n+  \"li\\t%0,%h1\"\n+  [(set_attr \"extended_mips16\" \"yes\")])\n \n ;; Insns to fetch a symbol from a big GOT.\n \n@@ -6492,6 +6499,14 @@\n ;;  ....................\n ;;\n \n+(define_insn \"consttable_tls_reloc\"\n+  [(unspec_volatile [(match_operand 0 \"tls_reloc_operand\" \"\")\n+\t\t     (match_operand 1 \"const_int_operand\" \"\")]\n+\t\t    UNSPEC_CONSTTABLE_INT)]\n+  \"TARGET_MIPS16_PCREL_LOADS\"\n+  { return mips_output_tls_reloc_directive (&operands[0]); }\n+  [(set (attr \"length\") (symbol_ref \"INTVAL (operands[1])\"))])\n+\n (define_insn \"consttable_int\"\n   [(unspec_volatile [(match_operand 0 \"consttable_operand\" \"\")\n \t\t     (match_operand 1 \"const_int_operand\" \"\")]\n@@ -6593,6 +6608,49 @@\n    ; See tls_get_tp_<mode>\n    (set_attr \"can_delay\" \"no\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; In MIPS16 mode, the TLS base pointer is accessed by a\n+;; libgcc helper function __mips16_rdhwr(), as 'rdhwr' is not\n+;; accessible in MIPS16.\n+;;\n+;; This is not represented as a call insn, to avoid the\n+;; unnecesarry clobbering of caller-save registers by a\n+;; function consisting only of: \"rdhwr $3,$29; j $31; nop;\"\n+;;\n+;; A $25 clobber is added to cater for a $25 load stub added by the\n+;; linker to __mips16_rdhwr when the call is made from non-PIC code.\n+\n+(define_insn_and_split \"tls_get_tp_mips16_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=d\")\n+\t(unspec:P [(match_operand:P 1 \"call_insn_operand\" \"dS\")]\n+\t\t  UNSPEC_TLS_GET_TP))\n+   (clobber (reg:P TLS_GET_TP_REGNUM))\n+   (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n+   (clobber (reg:P RETURN_ADDR_REGNUM))]\n+  \"HAVE_AS_TLS && TARGET_MIPS16\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:P TLS_GET_TP_REGNUM)\n+\t  \t   (unspec:P [(match_dup 1)] UNSPEC_TLS_GET_TP))\n+\t      (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n+\t      (clobber (reg:P RETURN_ADDR_REGNUM))])\n+   (set (match_dup 0) (reg:P TLS_GET_TP_REGNUM))]\n+  \"\"\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"length\" \"16\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*tls_get_tp_mips16_call_<mode>\"\n+  [(set (reg:P TLS_GET_TP_REGNUM)\n+\t(unspec:P [(match_operand:P 0 \"call_insn_operand\" \"dS\")]\n+\t\t  UNSPEC_TLS_GET_TP))\n+   (clobber (reg:P PIC_FUNCTION_ADDR_REGNUM))\n+   (clobber (reg:P RETURN_ADDR_REGNUM))]\n+  \"HAVE_AS_TLS && TARGET_MIPS16\"\n+  { return MIPS_CALL (\"jal\", operands, 0, -1); }\n+  [(set_attr \"type\" \"call\")\n+   (set_attr \"length\" \"12\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \f\n ;; Synchronization instructions.\n "}, {"sha": "57b1af2de3e26e17edff379c27296b4cfbc99ce3", "filename": "gcc/config/mips/predicates.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Fconfig%2Fmips%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fpredicates.md?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -288,12 +288,20 @@\n \t  && type == SYMBOL_ABSOLUTE);\n })\n \n+(define_predicate \"symbolic_operand_with_high\"\n+  (match_code \"const,symbol_ref,label_ref\")\n+{\n+  enum mips_symbol_type type;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type)\n+\t  && mips_hi_relocs[(int) type]);\n+})\n+\n (define_predicate \"force_to_mem_operand\"\n   (match_code \"const,symbol_ref,label_ref\")\n {\n   enum mips_symbol_type symbol_type;\n   return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &symbol_type)\n-\t  && symbol_type == SYMBOL_FORCE_TO_MEM);\n+\t  && mips_use_pcrel_pool_p[(int) symbol_type]);\n })\n \n (define_predicate \"got_disp_operand\"\n@@ -312,6 +320,14 @@\n \t  && type == SYMBOL_GOT_PAGE_OFST);\n })\n \n+(define_predicate \"tls_reloc_operand\"\n+  (match_code \"const,symbol_ref,label_ref\")\n+{\n+  enum mips_symbol_type type;\n+  return (mips_symbolic_constant_p (op, SYMBOL_CONTEXT_LEA, &type)\n+\t  && (type == SYMBOL_DTPREL || type == SYMBOL_TPREL));\n+})\n+\n (define_predicate \"symbol_ref_operand\"\n   (match_code \"symbol_ref\"))\n "}, {"sha": "5d5bd3ee4659f09f3824da97d5777ba002e0ab6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -1,3 +1,8 @@\n+2012-01-15  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/code-readable-2.c: Allow the jump table address\n+\tto be loaded from the constant pool, rather than via %hi and %lo.\n+\n 2012-01-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/51821"}, {"sha": "e0176c3dbd54f5edcede543140eb4c87ea2b9485", "filename": "gcc/testsuite/gcc.target/mips/code-readable-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fcode-readable-2.c?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -26,8 +26,7 @@ bar (void)\n \n /* { dg-final { scan-assembler-not \"\\tla\\t\" } } */\n /* { dg-final { scan-assembler-not \"\\t\\\\.half\\t\" } } */\n-/* { dg-final { scan-assembler \"%hi\\\\(\\[^)\\]*L\" } } */\n-/* { dg-final { scan-assembler \"%lo\\\\(\\[^)\\]*L\" } } */\n+/* { dg-final { scan-assembler \"\\t\\\\.word\\t\\[^\\n\\]*L\" } } */\n \n /* { dg-final { scan-assembler \"\\t\\\\.word\\tk\\n\" } } */\n /* { dg-final { scan-assembler-not \"%hi\\\\(k\\\\)\" } } */"}, {"sha": "70880b0b5cce9be00ff9e273e70ac52be92c82ce", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -1,3 +1,10 @@\n+2012-01-15  Chung-Lin Tang  <cltang@codesourcery.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/libgcc-mips16.ver (__mips16_rdhwr): Add.\n+\t* config/mips/mips16.S (__mips16_rdhwr): New function.\n+\t* config/mips/t-mips16 (LIB1ASMFUNCS): Add _m16rdhwr.\n+\n 2012-01-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* libgcov.c (__gcov_init): Ignore objects with no functions."}, {"sha": "a92574478526242bd7cbe324a1e2150d9978cc0a", "filename": "libgcc/config/mips/libgcc-mips16.ver", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Flibgcc-mips16.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Flibgcc-mips16.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Flibgcc-mips16.ver?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -84,3 +84,7 @@ GCC_4.4.0 {\n   __mips16_call_stub_dc_9\n   __mips16_call_stub_dc_10\n }\n+\n+GCC_4.7.0 {\n+  __mips16_rdhwr\n+}"}, {"sha": "a087508d4a64486d7c76789ef09f55f670bd172d", "filename": "libgcc/config/mips/mips16.S", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Fmips16.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Fmips16.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fmips16.S?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -709,4 +709,15 @@ CALL_STUB_RET (__mips16_call_stub_dc_9, 9, DC)\n CALL_STUB_RET (__mips16_call_stub_dc_10, 10, DC)\n #endif\n #endif /* !__mips_single_float */\n+\n+#ifdef L_m16rdhwr\n+STARTFN (__mips16_rdhwr)\n+\t.set\tpush\n+\t.set\tmips32r2\n+\t.set\tnoreorder\n+\trdhwr\t$3,$29\n+\t.set\tpop\n+\tj\t$31\n+\tENDFN (__mips16_rdhwr)\n+#endif\n #endif"}, {"sha": "7fe37f64f52129defaa2c25500ef4d0b0b9f550e", "filename": "libgcc/config/mips/t-mips16", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Ft-mips16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddaf812593310705b989f835ec3aac1a14a8b755/libgcc%2Fconfig%2Fmips%2Ft-mips16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-mips16?ref=ddaf812593310705b989f835ec3aac1a14a8b755", "patch": "@@ -36,7 +36,8 @@ LIB1ASMFUNCS = _m16addsf3 _m16subsf3 _m16mulsf3 _m16divsf3 \\\n \t_m16stubsc0 _m16stubsc1 _m16stubsc2 _m16stubsc5 _m16stubsc6 \\\n \t_m16stubsc9 _m16stubsc10 \\\n \t_m16stubdc0 _m16stubdc1 _m16stubdc2 _m16stubdc5 _m16stubdc6 \\\n-\t_m16stubdc9 _m16stubdc10\n+\t_m16stubdc9 _m16stubdc10 \\\n+\t_m16rdhwr\n \n SYNC = yes\n SYNC_CFLAGS = -mno-mips16"}]}