{"sha": "b27c4a4986fb240efafbf263952e5f474bcef2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3YzRhNDk4NmZiMjQwZWZhZmJmMjYzOTUyZTVmNDc0YmNlZjJmMQ==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:14:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:14:26Z"}, "message": "No need to declare Type as inferedType when it is already defined\n\nIn the case where there is no init_expression for a variable declaration\nand the type was defined on the name we dont need to then assign\nthat the variable was infered.", "tree": {"sha": "59df1fc63fbb7535f34efeb91019495e2d8b66af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59df1fc63fbb7535f34efeb91019495e2d8b66af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b27c4a4986fb240efafbf263952e5f474bcef2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c4a4986fb240efafbf263952e5f474bcef2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27c4a4986fb240efafbf263952e5f474bcef2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c4a4986fb240efafbf263952e5f474bcef2f1/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed452249584e272359faf723e831e9d91f9a511c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed452249584e272359faf723e831e9d91f9a511c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed452249584e272359faf723e831e9d91f9a511c"}], "stats": {"total": 7, "additions": 0, "deletions": 7}, "files": [{"sha": "707e0e86d020b416748e11ffb9558d9105c9f542", "filename": "gcc/rust/analysis/rust-type-resolution.cc", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b27c4a4986fb240efafbf263952e5f474bcef2f1/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b27c4a4986fb240efafbf263952e5f474bcef2f1/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fanalysis%2Frust-type-resolution.cc?ref=b27c4a4986fb240efafbf263952e5f474bcef2f1", "patch": "@@ -1048,13 +1048,6 @@ TypeResolution::visit (AST::LetStmt &stmt)\n \t  return;\n \t}\n     }\n-  else if (stmt.has_type () && !stmt.has_init_expr ())\n-    {\n-      inferedType = stmt.type.get ();\n-    }\n-\n-  // TODO check we know what the type is in the scope requires the builtins to\n-  // be defined at the constructor\n \n   // ensure the decl has the type set for compilation later on\n   if (!stmt.has_type ())"}]}