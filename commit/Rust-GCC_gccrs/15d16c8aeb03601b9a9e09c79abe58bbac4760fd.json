{"sha": "15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVkMTZjOGFlYjAzNjAxYjlhOWUwOWM3OWFiZTU4YmJhYzQ3NjBmZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-06-06T12:55:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-06-06T12:55:52Z"}, "message": "lto-streamer.h (enum LTO_tags): Move LTO_tree_pickle_reference after LTO_null.\n\n2013-06-06  Richard Biener  <rguenther@suse.de>\n\n\t* lto-streamer.h (enum LTO_tags): Move LTO_tree_pickle_reference\n\tafter LTO_null.\n\t(lto_tag_is_tree_code_p): Adjust.\n\t(lto_tag_is_gimple_code_p): Likewise.\n\t(lto_gimple_code_to_tag): Likewise.\n\t(lto_tag_to_gimple_code): Likewise.\n\t(lto_tree_code_to_tag): Likewise.\n\t(lto_tag_to_tree_code): Likewise.\n\t* data-streamer.h (streamer_write_hwi_in_range): Use\n\tuhwi streaming to stream the normalized range.\n\t(streamer_read_hwi_in_range): Likewise.\n\nFrom-SVN: r199732", "tree": {"sha": "b2dc897ec282b0f9ce9eafb4d2b23ac9ebd353fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2dc897ec282b0f9ce9eafb4d2b23ac9ebd353fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "48df3acb54e3d5a623ba7b0890d5a75b502f22d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48df3acb54e3d5a623ba7b0890d5a75b502f22d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48df3acb54e3d5a623ba7b0890d5a75b502f22d1"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "1d9dd12979a73d019cf2ce5116e7907d15205d7d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "patch": "@@ -1,3 +1,17 @@\n+2013-06-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* lto-streamer.h (enum LTO_tags): Move LTO_tree_pickle_reference\n+\tafter LTO_null.\n+\t(lto_tag_is_tree_code_p): Adjust.\n+\t(lto_tag_is_gimple_code_p): Likewise.\n+\t(lto_gimple_code_to_tag): Likewise.\n+\t(lto_tag_to_gimple_code): Likewise.\n+\t(lto_tree_code_to_tag): Likewise.\n+\t(lto_tag_to_tree_code): Likewise.\n+\t* data-streamer.h (streamer_write_hwi_in_range): Use\n+\tuhwi streaming to stream the normalized range.\n+\t(streamer_read_hwi_in_range): Likewise.\n+\n 2013-06-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (enabled_for_depr_it): New attribute."}, {"sha": "dfca7abbd2cfdb9f5ef3ad267b1f3e59a1d47204", "filename": "gcc/data-streamer.h", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2Fdata-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2Fdata-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdata-streamer.h?ref=15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "patch": "@@ -216,13 +216,7 @@ streamer_write_hwi_in_range (struct lto_output_stream *obs,\n \t\t       && range < 0x7fffffff);\n \n   val -= min;\n-  streamer_write_char_stream (obs, val & 255);\n-  if (range >= 0xff)\n-    streamer_write_char_stream (obs, (val >> 8) & 255);\n-  if (range >= 0xffff)\n-    streamer_write_char_stream (obs, (val >> 16) & 255);\n-  if (range >= 0xffffff)\n-    streamer_write_char_stream (obs, (val >> 24) & 255);\n+  streamer_write_uhwi_stream (obs, (unsigned HOST_WIDE_INT) val);\n }\n \n /* Input VAL into OBS and verify it is in range MIN...MAX that is supposed\n@@ -235,17 +229,11 @@ streamer_read_hwi_in_range (struct lto_input_block *ib,\n \t\t\t\t HOST_WIDE_INT max)\n {\n   HOST_WIDE_INT range = max - min;\n-  HOST_WIDE_INT val = streamer_read_uchar (ib);\n+  unsigned HOST_WIDE_INT uval = streamer_read_uhwi (ib);\n \n   gcc_checking_assert (range > 0 && range < 0x7fffffff);\n \n-  if (range >= 0xff)\n-    val |= ((HOST_WIDE_INT)streamer_read_uchar (ib)) << 8;\n-  if (range >= 0xffff)\n-    val |= ((HOST_WIDE_INT)streamer_read_uchar (ib)) << 16;\n-  if (range >= 0xffffff)\n-    val |= ((HOST_WIDE_INT)streamer_read_uchar (ib)) << 24;\n-  val += min;\n+  HOST_WIDE_INT val = (HOST_WIDE_INT) (uval + (unsigned HOST_WIDE_INT) min);\n   if (val < min || val > max)\n     lto_value_range_error (purpose, val, min, max);\n   return val;"}, {"sha": "a0eca6d8e2e740521298980ccdb9538090ca6999", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15d16c8aeb03601b9a9e09c79abe58bbac4760fd/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=15d16c8aeb03601b9a9e09c79abe58bbac4760fd", "patch": "@@ -155,6 +155,9 @@ enum LTO_tags\n {\n   LTO_null = 0,\n \n+  /* Special for streamer.  Reference to previously-streamed node.  */\n+  LTO_tree_pickle_reference,\n+\n   /* Reserve enough entries to fit all the tree and gimple codes handled\n      by the streamer.  This guarantees that:\n \n@@ -196,9 +199,6 @@ enum LTO_tags\n   /* EH try/catch node.  */\n   LTO_eh_catch,\n \n-  /* Special for global streamer. Reference to previously-streamed node.  */\n-  LTO_tree_pickle_reference,\n-\n   /* References to indexable tree nodes.  These objects are stored in\n      tables that are written separately from the function bodies that\n      reference them.  This way they can be instantiated even when the\n@@ -921,16 +921,16 @@ extern vec<lto_out_decl_state_ptr> lto_function_decl_states;\n static inline bool\n lto_tag_is_tree_code_p (enum LTO_tags tag)\n {\n-  return tag > LTO_null && (unsigned) tag <= MAX_TREE_CODES;\n+  return tag > LTO_tree_pickle_reference && (unsigned) tag <= MAX_TREE_CODES;\n }\n \n \n /* Return true if LTO tag TAG corresponds to a gimple code.  */\n static inline bool\n lto_tag_is_gimple_code_p (enum LTO_tags tag)\n {\n-  return (unsigned) tag >= NUM_TREE_CODES + 1\n-\t && (unsigned) tag < 1 + NUM_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE;\n+  return (unsigned) tag >= NUM_TREE_CODES + 2\n+\t && (unsigned) tag < 2 + NUM_TREE_CODES + LAST_AND_UNUSED_GIMPLE_CODE;\n }\n \n \n@@ -939,7 +939,7 @@ lto_tag_is_gimple_code_p (enum LTO_tags tag)\n static inline enum LTO_tags\n lto_gimple_code_to_tag (enum gimple_code code)\n {\n-  return (enum LTO_tags) ((unsigned) code + NUM_TREE_CODES + 1);\n+  return (enum LTO_tags) ((unsigned) code + NUM_TREE_CODES + 2);\n }\n \n \n@@ -949,7 +949,7 @@ static inline enum gimple_code\n lto_tag_to_gimple_code (enum LTO_tags tag)\n {\n   gcc_assert (lto_tag_is_gimple_code_p (tag));\n-  return (enum gimple_code) ((unsigned) tag - NUM_TREE_CODES - 1);\n+  return (enum gimple_code) ((unsigned) tag - NUM_TREE_CODES - 2);\n }\n \n \n@@ -958,7 +958,7 @@ lto_tag_to_gimple_code (enum LTO_tags tag)\n static inline enum LTO_tags\n lto_tree_code_to_tag (enum tree_code code)\n {\n-  return (enum LTO_tags) ((unsigned) code + 1);\n+  return (enum LTO_tags) ((unsigned) code + 2);\n }\n \n \n@@ -968,7 +968,7 @@ static inline enum tree_code\n lto_tag_to_tree_code (enum LTO_tags tag)\n {\n   gcc_assert (lto_tag_is_tree_code_p (tag));\n-  return (enum tree_code) ((unsigned) tag - 1);\n+  return (enum tree_code) ((unsigned) tag - 2);\n }\n \n /* Check that tag ACTUAL == EXPECTED.  */"}]}