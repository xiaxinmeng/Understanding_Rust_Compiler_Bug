{"sha": "bb8a619e12e06104939fac9969dcd07615ee7260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI4YTYxOWUxMmUwNjEwNDkzOWZhYzk5NjlkY2QwNzYxNWVlNzI2MA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-05T10:53:00Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-05T10:53:00Z"}, "message": "basic-block.h (free_basic_block_vars): Update prototype.\n\n\t* basic-block.h (free_basic_block_vars): Update prototype.\n\t* flow.c (free_basic_block_vars): Remove the keep_head_end_p\n\targument.\n\t(life_analysis): Update call.\n\t* ifcvt.c (if_convert): Likewise.\n\t* passes.c (rest_of_handle_final): Likewise.\n\t(rest_of_compilation): Likewise.\n\t* sibcall.c (optimize_sibling_and_tail_recursive_call): Likewise.\n\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n\n\t* emit-rtl.c (next_real_insn): Use INSN_P.\n\t(prev_real_insn): Likewise.\n\nFrom-SVN: r81520", "tree": {"sha": "03660da4d993a568cb0264f3a174eaea5804d852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03660da4d993a568cb0264f3a174eaea5804d852"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb8a619e12e06104939fac9969dcd07615ee7260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8a619e12e06104939fac9969dcd07615ee7260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb8a619e12e06104939fac9969dcd07615ee7260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb8a619e12e06104939fac9969dcd07615ee7260/comments", "author": null, "committer": null, "parents": [{"sha": "aa720a546a2945095bfa7a8cfb2b0f1a4021763a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa720a546a2945095bfa7a8cfb2b0f1a4021763a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa720a546a2945095bfa7a8cfb2b0f1a4021763a"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "147f1c7155d9d496b9ee37c0e556fe37e7782875", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -1,3 +1,18 @@\n+2004-05-05  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* basic-block.h (free_basic_block_vars): Update prototype.\n+\t* flow.c (free_basic_block_vars): Remove the keep_head_end_p\n+\targument.\n+\t(life_analysis): Update call.\n+\t* ifcvt.c (if_convert): Likewise.\n+\t* sibcall.c (optimize_sibling_and_tail_recursive_call): Likewise.\n+\t* passes.c (rest_of_handle_final): Likewise.\n+\t(rest_of_compilation): Likewise.\n+\t* config/sh/sh.c (sh_output_mi_thunk): Likewise.\n+\n+\t* emit-rtl.c (next_real_insn): Use INSN_P.\n+\t(prev_real_insn): Likewise.\n+\n 2004-05-05  Eric Christopher  <echristo@redhat.com>\n \n \t* config/mips/mips.md: Update the madd define_split for new mflo/mfhi\n@@ -133,8 +148,8 @@\n \t* dwarf2out.c (dwarf2out_imported_module_or_decl): Use\n \tforce_type_die for CONST_DECL.\n \n-2004-05-03 \ufffdEric Botcazou  <ebotcazou@libertysurf.fr>\n-            Rainer Orth \ufffd<ro@TechFak.Uni-Bielefeld.DE>\n+2004-05-03  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\t    Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config.gcc (sparc64-*-solaris2*, sparcv9-*-solaris2*): Add\n \ttm-dwarf2.h to tm_file.\n@@ -300,20 +315,20 @@\n \t* config/alpha/osf.h (SWITCHES_NEED_SPACES): Define.\n \n 2004-04-30  Brian Ford  <ford@vss.fsi.com>\n-            DJ Delorie  <dj@redhat.com>\n-\n-        * config/i386/cygming.h [HAVE_GAS_PE_SECREL32_RELOC]\n-        (DWARF2_DEBUGGING_INFO): Define to enable.\n-        (DBX_REGISTER_NUMBER): Define to use the svr4 register map for\n-        DWARF2.\n-        * configure.ac (Target-specific assembler checks)\n-        <i[34567]86-*-[cygwin*|pe|mingw32*]>: New test for .secrel32\n-        relocs.\n-        * configure: Regenerate.\n-        * config.in: Likewise.\n-\n-        * config/i386/cygming.h [HAVE_GAS_PE_SECREL32_RELOC]\n-        (ASM_OUPUT_DWARF_OFFSET): Define.\n+\t    DJ Delorie  <dj@redhat.com>\n+\n+\t* config/i386/cygming.h [HAVE_GAS_PE_SECREL32_RELOC]\n+\t(DWARF2_DEBUGGING_INFO): Define to enable.\n+\t(DBX_REGISTER_NUMBER): Define to use the svr4 register map for\n+\tDWARF2.\n+\t* configure.ac (Target-specific assembler checks)\n+\t<i[34567]86-*-[cygwin*|pe|mingw32*]>: New test for .secrel32\n+\trelocs.\n+\t* configure: Regenerate.\n+\t* config.in: Likewise.\n+\n+\t* config/i386/cygming.h [HAVE_GAS_PE_SECREL32_RELOC]\n+\t(ASM_OUPUT_DWARF_OFFSET): Define.\n \n 2004-04-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n "}, {"sha": "ccbecf1fdc422046a4219f319977701cdb84b86f", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -363,7 +363,7 @@ extern void compute_bb_for_insn (void);\n extern void free_bb_for_insn (void);\n extern void update_bb_for_insn (basic_block);\n \n-extern void free_basic_block_vars (int);\n+extern void free_basic_block_vars (void);\n \n extern void insert_insn_on_edge (rtx, edge);\n bool safe_insert_insn_on_edge (rtx, edge);"}, {"sha": "e3d15b9388e0daf010ce7719352b2c7237e99447", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -9482,7 +9482,7 @@ sh_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n   if (optimize > 0 && flag_schedule_insns_after_reload)\n     {\n       /* Release all memory allocated by flow.  */\n-      free_basic_block_vars (0);\n+      free_basic_block_vars ();\n \n       /* Release all memory held by regsets now.  */\n       regset_release_memory ();"}, {"sha": "d7633e5a8166d1293da55442f90e80f6c0e4f458", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -2960,8 +2960,7 @@ next_real_insn (rtx insn)\n   while (insn)\n     {\n       insn = NEXT_INSN (insn);\n-      if (insn == 0 || GET_CODE (insn) == INSN\n-\t  || GET_CODE (insn) == CALL_INSN || GET_CODE (insn) == JUMP_INSN)\n+      if (insn == 0 || INSN_P (insn))\n \tbreak;\n     }\n \n@@ -2978,8 +2977,7 @@ prev_real_insn (rtx insn)\n   while (insn)\n     {\n       insn = PREV_INSN (insn);\n-      if (insn == 0 || GET_CODE (insn) == INSN || GET_CODE (insn) == CALL_INSN\n-\t  || GET_CODE (insn) == JUMP_INSN)\n+      if (insn == 0 || INSN_P (insn))\n \tbreak;\n     }\n "}, {"sha": "49729bb538eb77c21d80b788caaadeaf74ab9ec8", "filename": "gcc/flow.c", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -488,8 +488,6 @@ life_analysis (rtx f, FILE *file, int flags)\n   if (file)\n     dump_flow_info (file);\n \n-  free_basic_block_vars (1);\n-\n   /* Removing dead insns should have made jumptables really dead.  */\n   delete_dead_jumptables ();\n }\n@@ -809,28 +807,23 @@ update_life_info_in_dirty_blocks (enum update_life_extent extent, int prop_flags\n   return retval;\n }\n \n-/* Free the variables allocated by find_basic_blocks.\n-\n-   KEEP_HEAD_END_P is nonzero if basic_block_info is not to be freed.  */\n+/* Free the variables allocated by find_basic_blocks.  */\n \n void\n-free_basic_block_vars (int keep_head_end_p)\n+free_basic_block_vars (void)\n {\n-  if (! keep_head_end_p)\n+  if (basic_block_info)\n     {\n-      if (basic_block_info)\n-\t{\n-\t  clear_edges ();\n-\t  VARRAY_FREE (basic_block_info);\n-\t}\n-      n_basic_blocks = 0;\n-      last_basic_block = 0;\n-\n-      ENTRY_BLOCK_PTR->aux = NULL;\n-      ENTRY_BLOCK_PTR->global_live_at_end = NULL;\n-      EXIT_BLOCK_PTR->aux = NULL;\n-      EXIT_BLOCK_PTR->global_live_at_start = NULL;\n+      clear_edges ();\n+      VARRAY_FREE (basic_block_info);\n     }\n+  n_basic_blocks = 0;\n+  last_basic_block = 0;\n+\n+  ENTRY_BLOCK_PTR->aux = NULL;\n+  ENTRY_BLOCK_PTR->global_live_at_end = NULL;\n+  EXIT_BLOCK_PTR->aux = NULL;\n+  EXIT_BLOCK_PTR->global_live_at_start = NULL;\n }\n \n /* Delete any insns that copy a register to itself.  */"}, {"sha": "7968b2b764bbdfadaed896ab88b23f9e6a027891", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -3291,10 +3291,6 @@ if_convert (int x_life_data_ok)\n       && (!flag_reorder_blocks_and_partition || !no_new_pseudos))\n     mark_loop_exit_edges ();\n \n-  /* Free up basic_block_for_insn so that we don't have to keep it\n-     up to date, either here or in merge_blocks.  */\n-  free_basic_block_vars (1);\n-\n   /* Compute postdominators if we think we'll use them.  */\n   if (HAVE_conditional_execution || life_data_ok)\n     calculate_dominance_info (CDI_POST_DOMINATORS);"}, {"sha": "eaf4de5df4123e12c68b7016190ba77be2c93316", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -465,7 +465,7 @@ rest_of_handle_final (tree decl, rtx insns)\n       fflush (asm_out_file);\n \n     /* Release all memory allocated by flow.  */\n-    free_basic_block_vars (0);\n+    free_basic_block_vars ();\n \n     /* Release all memory held by regsets now.  */\n     regset_release_memory ();\n@@ -2095,7 +2095,7 @@ rest_of_compilation (tree decl)\n   /* Show no temporary slots allocated.  */\n   init_temp_slots ();\n \n-  free_basic_block_vars (0);\n+  free_basic_block_vars ();\n   free_bb_for_insn ();\n \n   timevar_pop (TV_FINAL);"}, {"sha": "cfd1a629c62dd98688c52e889c0c3409ecfb3af2", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb8a619e12e06104939fac9969dcd07615ee7260/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=bb8a619e12e06104939fac9969dcd07615ee7260", "patch": "@@ -748,6 +748,6 @@ optimize_sibling_and_tail_recursive_calls (void)\n     reorder_blocks ();\n \n   /* This information will be invalid after inline expansion.  Kill it now.  */\n-  free_basic_block_vars (0);\n+  free_basic_block_vars ();\n   free_EXPR_LIST_list (&tail_recursion_label_list);\n }"}]}