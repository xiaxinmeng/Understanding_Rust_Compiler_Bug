{"sha": "0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk4MzQ5N2ZhZDEzOWE5NWJjOWQ5ZThjMWVhN2E1ZDM3N2FlMjczZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-08T14:15:24Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2016-05-08T14:15:24Z"}, "message": "sh.h (GET_SH_ARG_CLASS): Convert macro into ...\n\ngcc/\n\t* config/sh/sh.h (GET_SH_ARG_CLASS): Convert macro into ...\n\t* config/sh/sh.c (get_sh_arg_class): ... this new function.  Update its\n\tusers.\n\nFrom-SVN: r236009", "tree": {"sha": "80acfed56c2a983ee68a4f0382c078d60667916b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80acfed56c2a983ee68a4f0382c078d60667916b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/comments", "author": null, "committer": null, "parents": [{"sha": "df4bacab135cf6c92e3b5c46900d58c1592e8ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4bacab135cf6c92e3b5c46900d58c1592e8ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4bacab135cf6c92e3b5c46900d58c1592e8ada"}], "stats": {"total": 35, "additions": 24, "deletions": 11}, "files": [{"sha": "26437399346d2462492508a9078dc9931042a6ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "patch": "@@ -1,3 +1,9 @@\n+2016-05-08  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.h (GET_SH_ARG_CLASS): Convert macro into ...\n+\t* config/sh/sh.c (get_sh_arg_class): ... this new function.  Update its\n+\tusers.\n+\n 2016-05-08  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh-protos.h (sh_media_register_for_return): Remove."}, {"sha": "a36b098cf409df4ab7d7a3451c3e4a81628f25e2", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "patch": "@@ -7898,6 +7898,20 @@ sh_callee_copies (cumulative_args_t cum, machine_mode mode,\n \t      % SH_MIN_ALIGN_FOR_CALLEE_COPY == 0));\n }\n \n+static sh_arg_class\n+get_sh_arg_class (machine_mode mode)\n+{\n+  if (TARGET_FPU_ANY && mode == SFmode)\n+    return SH_ARG_FLOAT;\n+\n+  if (TARGET_FPU_DOUBLE\n+      && (GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t  || GET_MODE_CLASS (mode) == MODE_COMPLEX_FLOAT))\n+    return SH_ARG_FLOAT;\n+\n+  return SH_ARG_INT;\n+}\n+\n /* Round a register number up to a proper boundary for an arg of mode\n    MODE.\n    The SH doesn't care about double alignment, so we only\n@@ -7913,9 +7927,9 @@ sh_round_reg (const CUMULATIVE_ARGS& cum, machine_mode mode)\n \t  && (mode == DFmode || mode == DCmode)\n \t  && cum.arg_count[(int) SH_ARG_FLOAT] < NPARM_REGS (mode)))\n      && GET_MODE_UNIT_SIZE (mode) > UNITS_PER_WORD)\n-    ? (cum.arg_count[(int) GET_SH_ARG_CLASS (mode)]\n-       + (cum.arg_count[(int) GET_SH_ARG_CLASS (mode)] & 1))\n-    : cum.arg_count[(int) GET_SH_ARG_CLASS (mode)]);\n+    ? (cum.arg_count[(int) get_sh_arg_class (mode)]\n+       + (cum.arg_count[(int) get_sh_arg_class (mode)] & 1))\n+    : cum.arg_count[(int) get_sh_arg_class (mode)]);\n }\n \n /* Return true if arg of the specified mode should be passed in a register\n@@ -8067,7 +8081,7 @@ sh_function_arg_advance (cumulative_args_t ca_v, machine_mode mode,\n \n   if (! ((TARGET_SH4 || TARGET_SH2A) || ca->renesas_abi)\n       || sh_pass_in_reg_p (*ca, mode, type))\n-    (ca->arg_count[(int) GET_SH_ARG_CLASS (mode)]\n+    (ca->arg_count[(int) get_sh_arg_class (mode)]\n      = (sh_round_reg (*ca, mode)\n \t+ (mode == BLKmode\n \t   ? CEIL (int_size_in_bytes (type), UNITS_PER_WORD)"}, {"sha": "f725535497081188b181cf77824a7a5a9ba90ddd", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0983497fad139a95bc9d9e8c1ea7a5d377ae273e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=0983497fad139a95bc9d9e8c1ea7a5d377ae273e", "patch": "@@ -1198,13 +1198,6 @@ extern bool current_function_interrupt;\n \n #endif // __cplusplus\n \n-#define GET_SH_ARG_CLASS(MODE) \\\n-  ((TARGET_FPU_ANY && (MODE) == SFmode) \\\n-   ? SH_ARG_FLOAT \\\n-   : TARGET_FPU_DOUBLE && (GET_MODE_CLASS (MODE) == MODE_FLOAT \\\n-\t\t\t   || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n-     ? SH_ARG_FLOAT : SH_ARG_INT)\n-\n /* Initialize a variable CUM of type CUMULATIVE_ARGS\n    for a call to a function whose data type is FNTYPE.\n    For a library call, FNTYPE is 0."}]}