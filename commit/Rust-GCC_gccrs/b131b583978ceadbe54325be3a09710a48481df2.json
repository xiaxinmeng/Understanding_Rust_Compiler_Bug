{"sha": "b131b583978ceadbe54325be3a09710a48481df2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEzMWI1ODM5NzhjZWFkYmU1NDMyNWJlM2EwOTcxMGE0ODQ4MWRmMg==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2012-11-23T08:49:43Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-11-23T08:49:43Z"}, "message": "predict.c (maybe_hot_count_p): Use threshold from profiled working set instead of hard limit.\n\n\n\t* predict.c (maybe_hot_count_p): Use threshold from profiled working\n\tset instead of hard limit.\n\t(cgraph_maybe_hot_edge_p): Invoke maybe_hot_count_p() instead of\n\tdirectly checking limit.\n\t* params.def (HOT_BB_COUNT_FRACTION): Remove.\n\t(HOT_BB_COUNT_WS_PERMILLE): New parameter.\n\t* invoke.texi (hot-bb-count-fraction): Remove.\n\t(hot-bb-count-ws-permille): Document.\n\nCo-Authored-By: Jan Hubicka <jh@suse.cz>\n\nFrom-SVN: r193747", "tree": {"sha": "c3a33c43f2e5098a3927078c4b315cd7408551cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3a33c43f2e5098a3927078c4b315cd7408551cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b131b583978ceadbe54325be3a09710a48481df2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b131b583978ceadbe54325be3a09710a48481df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b131b583978ceadbe54325be3a09710a48481df2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b131b583978ceadbe54325be3a09710a48481df2/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3409d40e47ed30f1b6dca3fa074c4094efbf5b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3409d40e47ed30f1b6dca3fa074c4094efbf5b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3409d40e47ed30f1b6dca3fa074c4094efbf5b50"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "258bed5e264b92707291fe40a4f6c51a123e3b70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b131b583978ceadbe54325be3a09710a48481df2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b131b583978ceadbe54325be3a09710a48481df2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b131b583978ceadbe54325be3a09710a48481df2", "patch": "@@ -1,3 +1,15 @@\n+2012-11-22  Teresa Johnson  <tejohnson@google.com>\n+\t    Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (maybe_hot_count_p): Use threshold from profiled working\n+\tset instead of hard limit.\n+\t(cgraph_maybe_hot_edge_p): Invoke maybe_hot_count_p() instead of\n+\tdirectly checking limit.\n+\t* params.def (HOT_BB_COUNT_FRACTION): Remove.\n+\t(HOT_BB_COUNT_WS_PERMILLE): New parameter.\n+\t* invoke.texi (hot-bb-count-fraction): Remove.\n+\t(hot-bb-count-ws-permille): Document.\n+\n 2012-11-22  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/55430"}, {"sha": "59fa35e8f198e5978892d17df13737b796536f09", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=b131b583978ceadbe54325be3a09710a48481df2", "patch": "@@ -9224,9 +9224,9 @@ doing loop versioning for alias in the vectorizer.  See option\n The maximum number of iterations of a loop the brute-force algorithm\n for analysis of the number of iterations of the loop tries to evaluate.\n \n-@item hot-bb-count-fraction\n-Select fraction of the maximal count of repetitions of basic block in program\n-given basic block needs to have to be considered hot.\n+@item hot-bb-count-ws-permille\n+A basic block profile count is considered hot if it contributes to \n+the given permillage (i.e. 0...1000) of the entire profiled execution.\n \n @item hot-bb-frequency-fraction\n Select fraction of the entry block frequency of executions of basic block in"}, {"sha": "38aaf4b0b0342553d9d6f520fc77e177bd1c51b2", "filename": "gcc/params.def", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=b131b583978ceadbe54325be3a09710a48481df2", "patch": "@@ -365,10 +365,11 @@ DEFPARAM(PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD,\n \t \"A threshold on the average loop count considered by the swing modulo scheduler\",\n \t 0, 0, 0)\n \n-DEFPARAM(HOT_BB_COUNT_FRACTION,\n-\t \"hot-bb-count-fraction\",\n-\t \"Select fraction of the maximal count of repetitions of basic block in program given basic block needs to have to be considered hot\",\n-\t 10000, 0, 0)\n+DEFPARAM(HOT_BB_COUNT_WS_PERMILLE,\n+\t \"hot-bb-count-ws-permille\",\n+         \"A basic block profile count is considered hot if it contributes to \"\n+         \"the given permillage of the entire profiled execution\",\n+\t 999, 0, 1000)\n DEFPARAM(HOT_BB_FREQUENCY_FRACTION,\n \t \"hot-bb-frequency-fraction\",\n \t \"Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot\",\n@@ -392,7 +393,7 @@ DEFPARAM (PARAM_ALIGN_LOOP_ITERATIONS,\n    flatten the profile.\n \n    We need to cut the maximal predicted iterations to large enough iterations\n-   so the loop appears important, but safely within HOT_BB_COUNT_FRACTION\n+   so the loop appears important, but safely within maximum hotness\n    range.  */\n \n DEFPARAM(PARAM_MAX_PREDICTED_ITERATIONS,"}, {"sha": "5d3de29085849796db74b3f40050d1c0e83d3535", "filename": "gcc/predict.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b131b583978ceadbe54325be3a09710a48481df2/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=b131b583978ceadbe54325be3a09710a48481df2", "patch": "@@ -134,13 +134,20 @@ maybe_hot_frequency_p (struct function *fun, int freq)\n static inline bool\n maybe_hot_count_p (struct function *fun, gcov_type count)\n {\n-  if (profile_status_for_function (fun) != PROFILE_READ)\n+  gcov_working_set_t *ws;\n+  static gcov_type min_count = -1;\n+  if (fun && profile_status_for_function (fun) != PROFILE_READ)\n     return true;\n   /* Code executed at most once is not hot.  */\n   if (profile_info->runs >= count)\n     return false;\n-  return (count\n-\t  > profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION));\n+  if (min_count == -1)\n+    {\n+      ws = find_working_set (PARAM_VALUE (HOT_BB_COUNT_WS_PERMILLE));\n+      gcc_assert (ws);\n+      min_count = ws->min_counter;\n+    }\n+  return (count >= min_count);\n }\n \n /* Return true in case BB can be CPU intensive and should be optimized\n@@ -161,8 +168,8 @@ bool\n cgraph_maybe_hot_edge_p (struct cgraph_edge *edge)\n {\n   if (profile_info && flag_branch_probabilities\n-      && (edge->count\n-\t  <= profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n+      && !maybe_hot_count_p (NULL,\n+                             edge->count))\n     return false;\n   if (edge->caller->frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED\n       || (edge->callee"}]}