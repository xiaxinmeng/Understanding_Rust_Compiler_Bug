{"sha": "edc7394cad7cf7e7a656a91b23694150dc84dae3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRjNzM5NGNhZDdjZjdlN2E2NTZhOTFiMjM2OTQxNTBkYzg0ZGFlMw==", "commit": {"author": {"name": "Doug Rupp", "email": "rupp@adacore.com", "date": "2005-02-10T13:48:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:48:50Z"}, "message": "g-expect-vms.adb (Non_Blocking_Spawn): Separate out.\n\n2005-02-09  Doug Rupp  <rupp@adacore.com>\n\n\t* g-expect-vms.adb (Non_Blocking_Spawn): Separate out.\n\t* g-enblsp-vms-alpha.adb g-enblsp-vms-ia64.adb: New subunits.\n\nFrom-SVN: r94806", "tree": {"sha": "7139ee6d806b22924db1974b85299cc52c37d118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7139ee6d806b22924db1974b85299cc52c37d118"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/edc7394cad7cf7e7a656a91b23694150dc84dae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc7394cad7cf7e7a656a91b23694150dc84dae3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/edc7394cad7cf7e7a656a91b23694150dc84dae3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/edc7394cad7cf7e7a656a91b23694150dc84dae3/comments", "author": {"login": "Cementitious", "id": 115579865, "node_id": "U_kgDOBuOb2Q", "avatar_url": "https://avatars.githubusercontent.com/u/115579865?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Cementitious", "html_url": "https://github.com/Cementitious", "followers_url": "https://api.github.com/users/Cementitious/followers", "following_url": "https://api.github.com/users/Cementitious/following{/other_user}", "gists_url": "https://api.github.com/users/Cementitious/gists{/gist_id}", "starred_url": "https://api.github.com/users/Cementitious/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Cementitious/subscriptions", "organizations_url": "https://api.github.com/users/Cementitious/orgs", "repos_url": "https://api.github.com/users/Cementitious/repos", "events_url": "https://api.github.com/users/Cementitious/events{/privacy}", "received_events_url": "https://api.github.com/users/Cementitious/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d3e9f35690a885eae4b5c69df4943ae6cc81c75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d3e9f35690a885eae4b5c69df4943ae6cc81c75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d3e9f35690a885eae4b5c69df4943ae6cc81c75"}], "stats": {"total": 357, "additions": 267, "deletions": 90}, "files": [{"sha": "810e809b4e7a3a6bc9aed373318975530efc0e0d", "filename": "gcc/ada/g-enblsp-vms-alpha.adb", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-enblsp-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-enblsp-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-enblsp-vms-alpha.adb?ref=edc7394cad7cf7e7a656a91b23694150dc84dae3", "patch": "@@ -0,0 +1,132 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         G N A T . E X P E C T . N O N _ B L O C K I N G _ S P A W N      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--              Copyright (C) 2005 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a target dependent non-blocking spawn function\n+--  for use by the VMS GNAT.Expect package (g-expect-vms.adb). This package\n+--  should not be directly with'ed by an application program.\n+\n+--  This version is for Alpha/VMS.\n+\n+separate (GNAT.Expect)\n+procedure Non_Blocking_Spawn\n+  (Descriptor  : out Process_Descriptor'Class;\n+   Command     : String;\n+   Args        : GNAT.OS_Lib.Argument_List;\n+   Buffer_Size : Natural := 4096;\n+   Err_To_Out  : Boolean := False)\n+is\n+   function Alloc_Vfork_Blocks return Integer;\n+   pragma Import (C, Alloc_Vfork_Blocks, \"decc$$alloc_vfork_blocks\");\n+\n+   function Get_Vfork_Jmpbuf return System.Address;\n+   pragma Import (C, Get_Vfork_Jmpbuf, \"decc$$get_vfork_jmpbuf\");\n+\n+   function Get_Current_Invo_Context\n+     (Addr : System.Address) return Process_Id;\n+   pragma Import (C, Get_Current_Invo_Context,\n+     \"LIB$GET_CURRENT_INVO_CONTEXT\");\n+\n+   Pipe1, Pipe2, Pipe3 : aliased Pipe_Type;\n+\n+   Arg      : String_Access;\n+   Arg_List : aliased array (1 .. Args'Length + 2) of System.Address;\n+\n+   Command_With_Path : String_Access;\n+\n+begin\n+   --  Create the rest of the pipes\n+\n+   Set_Up_Communications\n+     (Descriptor, Err_To_Out, Pipe1'Access, Pipe2'Access, Pipe3'Access);\n+\n+   Command_With_Path := Locate_Exec_On_Path (Command);\n+\n+   if Command_With_Path = null then\n+      raise Invalid_Process;\n+   end if;\n+\n+   --  Fork a new process. It's not possible to do this in a subprogram.\n+\n+   if Alloc_Vfork_Blocks >= 0 then\n+      Descriptor.Pid := Get_Current_Invo_Context (Get_Vfork_Jmpbuf);\n+   else\n+      Descriptor.Pid := -1;\n+   end if;\n+\n+   --  Are we now in the child (or, for Windows, still in the common\n+   --  process).\n+\n+   if Descriptor.Pid = Null_Pid then\n+      --  Prepare an array of arguments to pass to C\n+\n+      Arg   := new String (1 .. Command_With_Path'Length + 1);\n+      Arg (1 .. Command_With_Path'Length) := Command_With_Path.all;\n+      Arg (Arg'Last)        := ASCII.Nul;\n+      Arg_List (1)          := Arg.all'Address;\n+\n+      for J in Args'Range loop\n+         Arg                     := new String (1 .. Args (J)'Length + 1);\n+         Arg (1 .. Args (J)'Length)  := Args (J).all;\n+         Arg (Arg'Last)              := ASCII.Nul;\n+         Arg_List (J + 2 - Args'First) := Arg.all'Address;\n+      end loop;\n+\n+      Arg_List (Arg_List'Last) := System.Null_Address;\n+\n+      --  This does not return on Unix systems\n+\n+      Set_Up_Child_Communications\n+        (Descriptor, Pipe1, Pipe2, Pipe3, Command_With_Path.all,\n+         Arg_List'Address);\n+   end if;\n+\n+   Free (Command_With_Path);\n+\n+   --  Did we have an error when spawning the child ?\n+\n+   if Descriptor.Pid < Null_Pid then\n+      raise Invalid_Process;\n+   else\n+      --  We are now in the parent process\n+\n+      Set_Up_Parent_Communications (Descriptor, Pipe1, Pipe2, Pipe3);\n+   end if;\n+\n+   --  Create the buffer\n+\n+   Descriptor.Buffer_Size := Buffer_Size;\n+\n+   if Buffer_Size /= 0 then\n+      Descriptor.Buffer := new String (1 .. Positive (Buffer_Size));\n+   end if;\n+end Non_Blocking_Spawn;"}, {"sha": "711c9924c14fd69f4de25ef126cae6076ade5f71", "filename": "gcc/ada/g-enblsp-vms-ia64.adb", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-enblsp-vms-ia64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-enblsp-vms-ia64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-enblsp-vms-ia64.adb?ref=edc7394cad7cf7e7a656a91b23694150dc84dae3", "patch": "@@ -0,0 +1,130 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                         GNAT COMPILER COMPONENTS                         --\n+--                                                                          --\n+--         G N A T . E X P E C T . N O N _ B L O C K I N G _ S P A W N      --\n+--                                                                          --\n+--                                 B o d y                                  --\n+--                                                                          --\n+--              Copyright (C) 2005 Ada Core Technologies, Inc.              --\n+--                                                                          --\n+-- GNAT is free software;  you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n+-- for  more details.  You should have  received  a copy of the GNU General --\n+-- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n+-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n+-- MA 02111-1307, USA.                                                      --\n+--                                                                          --\n+-- As a special exception,  if other files  instantiate  generics from this --\n+-- unit, or you link  this unit with other files  to produce an executable, --\n+-- this  unit  does not  by itself cause  the resulting  executable  to  be --\n+-- covered  by the  GNU  General  Public  License.  This exception does not --\n+-- however invalidate  any other reasons why  the executable file  might be --\n+-- covered by the  GNU Public License.                                      --\n+--                                                                          --\n+-- GNAT was originally developed  by the GNAT team at  New York University. --\n+-- Extensive contributions were provided by Ada Core Technologies Inc.      --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a target dependent non-blocking spawn function\n+--  for use by the VMS GNAT.Expect package (g-expect-vms.adb). This package\n+--  should not be directly with'ed by an application program.\n+\n+--  This version is for IA64/VMS.\n+\n+separate (GNAT.Expect)\n+procedure Non_Blocking_Spawn\n+  (Descriptor  : out Process_Descriptor'Class;\n+   Command     : String;\n+   Args        : GNAT.OS_Lib.Argument_List;\n+   Buffer_Size : Natural := 4096;\n+   Err_To_Out  : Boolean := False)\n+is\n+   function Alloc_Vfork_Blocks return Integer;\n+   pragma Import (C, Alloc_Vfork_Blocks, \"decc$$alloc_vfork_blocks\");\n+\n+   function Get_Vfork_Jmpbuf return System.Address;\n+   pragma Import (C, Get_Vfork_Jmpbuf, \"decc$$get_vfork_jmpbuf\");\n+\n+   function Setjmp1 (Addr : System.Address) return Process_Id;\n+   pragma Import (C, Setjmp1, \"decc$setjmp1\");\n+\n+   Pipe1, Pipe2, Pipe3 : aliased Pipe_Type;\n+\n+   Arg      : String_Access;\n+   Arg_List : aliased array (1 .. Args'Length + 2) of System.Address;\n+\n+   Command_With_Path : String_Access;\n+\n+begin\n+   --  Create the rest of the pipes\n+\n+   Set_Up_Communications\n+     (Descriptor, Err_To_Out, Pipe1'Access, Pipe2'Access, Pipe3'Access);\n+\n+   Command_With_Path := Locate_Exec_On_Path (Command);\n+\n+   if Command_With_Path = null then\n+      raise Invalid_Process;\n+   end if;\n+\n+   --  Fork a new process. It's not possible to do this in a subprogram.\n+\n+   if Alloc_Vfork_Blocks >= 0 then\n+      Descriptor.Pid := Setjmp1 (Get_Vfork_Jmpbuf);\n+   else\n+      Descriptor.Pid := -1;\n+   end if;\n+\n+   --  Are we now in the child (or, for Windows, still in the common\n+   --  process).\n+\n+   if Descriptor.Pid = Null_Pid then\n+      --  Prepare an array of arguments to pass to C\n+\n+      Arg   := new String (1 .. Command_With_Path'Length + 1);\n+      Arg (1 .. Command_With_Path'Length) := Command_With_Path.all;\n+      Arg (Arg'Last)        := ASCII.Nul;\n+      Arg_List (1)          := Arg.all'Address;\n+\n+      for J in Args'Range loop\n+         Arg                     := new String (1 .. Args (J)'Length + 1);\n+         Arg (1 .. Args (J)'Length)  := Args (J).all;\n+         Arg (Arg'Last)              := ASCII.Nul;\n+         Arg_List (J + 2 - Args'First) := Arg.all'Address;\n+      end loop;\n+\n+      Arg_List (Arg_List'Last) := System.Null_Address;\n+\n+      --  This does not return on Unix systems\n+\n+      Set_Up_Child_Communications\n+        (Descriptor, Pipe1, Pipe2, Pipe3, Command_With_Path.all,\n+         Arg_List'Address);\n+   end if;\n+\n+   Free (Command_With_Path);\n+\n+   --  Did we have an error when spawning the child ?\n+\n+   if Descriptor.Pid < Null_Pid then\n+      raise Invalid_Process;\n+   else\n+      --  We are now in the parent process\n+\n+      Set_Up_Parent_Communications (Descriptor, Pipe1, Pipe2, Pipe3);\n+   end if;\n+\n+   --  Create the buffer\n+\n+   Descriptor.Buffer_Size := Buffer_Size;\n+\n+   if Buffer_Size /= 0 then\n+      Descriptor.Buffer := new String (1 .. Positive (Buffer_Size));\n+   end if;\n+end Non_Blocking_Spawn;"}, {"sha": "35a1f21a25ea03d1726650a2d00e525261975215", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 5, "deletions": 90, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/edc7394cad7cf7e7a656a91b23694150dc84dae3/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=edc7394cad7cf7e7a656a91b23694150dc84dae3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---             Copyright (C) 2002-2003 Ada Core Technologies, Inc.          --\n+--             Copyright (C) 2002-2005 Ada Core Technologies, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -87,13 +87,13 @@ package body GNAT.Expect is\n    ------------------------------\n \n    function Dup (Fd : File_Descriptor) return File_Descriptor;\n-   pragma Import (C, Dup);\n+   pragma Import (C, Dup, \"decc$dup\");\n \n    procedure Dup2 (Old_Fd, New_Fd : File_Descriptor);\n-   pragma Import (C, Dup2);\n+   pragma Import (C, Dup2, \"decc$dup2\");\n \n    procedure Kill (Pid : Process_Id; Sig_Num : Integer);\n-   pragma Import (C, Kill);\n+   pragma Import (C, Kill, \"decc$kill\");\n \n    function Create_Pipe (Pipe : access Pipe_Type) return Integer;\n    pragma Import (C, Create_Pipe, \"__gnat_pipe\");\n@@ -835,92 +835,7 @@ package body GNAT.Expect is\n       Args        : GNAT.OS_Lib.Argument_List;\n       Buffer_Size : Natural := 4096;\n       Err_To_Out  : Boolean := False)\n-   is\n-      function Alloc_Vfork_Blocks return Integer;\n-      pragma Import (C, Alloc_Vfork_Blocks, \"decc$$alloc_vfork_blocks\");\n-\n-      function Get_Vfork_Jmpbuf return System.Address;\n-      pragma Import (C, Get_Vfork_Jmpbuf, \"decc$$get_vfork_jmpbuf\");\n-\n-      function Get_Current_Invo_Context\n-        (Addr : System.Address) return Process_Id;\n-      pragma Import (C, Get_Current_Invo_Context,\n-        \"LIB$GET_CURRENT_INVO_CONTEXT\");\n-\n-      Pipe1, Pipe2, Pipe3 : aliased Pipe_Type;\n-\n-      Arg      : String_Access;\n-      Arg_List : aliased array (1 .. Args'Length + 2) of System.Address;\n-\n-      Command_With_Path : String_Access;\n-\n-   begin\n-      --  Create the rest of the pipes\n-\n-      Set_Up_Communications\n-        (Descriptor, Err_To_Out, Pipe1'Access, Pipe2'Access, Pipe3'Access);\n-\n-      Command_With_Path := Locate_Exec_On_Path (Command);\n-\n-      if Command_With_Path = null then\n-         raise Invalid_Process;\n-      end if;\n-\n-      --  Fork a new process. It's not possible to do this in a subprogram.\n-\n-      if Alloc_Vfork_Blocks >= 0 then\n-         Descriptor.Pid := Get_Current_Invo_Context (Get_Vfork_Jmpbuf);\n-      else\n-         Descriptor.Pid := -1;\n-      end if;\n-\n-      --  Are we now in the child (or, for Windows, still in the common\n-      --  process).\n-\n-      if Descriptor.Pid = Null_Pid then\n-         --  Prepare an array of arguments to pass to C\n-\n-         Arg   := new String (1 .. Command_With_Path'Length + 1);\n-         Arg (1 .. Command_With_Path'Length) := Command_With_Path.all;\n-         Arg (Arg'Last)        := ASCII.Nul;\n-         Arg_List (1)          := Arg.all'Address;\n-\n-         for J in Args'Range loop\n-            Arg                     := new String (1 .. Args (J)'Length + 1);\n-            Arg (1 .. Args (J)'Length)  := Args (J).all;\n-            Arg (Arg'Last)              := ASCII.Nul;\n-            Arg_List (J + 2 - Args'First) := Arg.all'Address;\n-         end loop;\n-\n-         Arg_List (Arg_List'Last) := System.Null_Address;\n-\n-         --  This does not return on Unix systems\n-\n-         Set_Up_Child_Communications\n-           (Descriptor, Pipe1, Pipe2, Pipe3, Command_With_Path.all,\n-            Arg_List'Address);\n-      end if;\n-\n-      Free (Command_With_Path);\n-\n-      --  Did we have an error when spawning the child ?\n-\n-      if Descriptor.Pid < Null_Pid then\n-         raise Invalid_Process;\n-      else\n-         --  We are now in the parent process\n-\n-         Set_Up_Parent_Communications (Descriptor, Pipe1, Pipe2, Pipe3);\n-      end if;\n-\n-      --  Create the buffer\n-\n-      Descriptor.Buffer_Size := Buffer_Size;\n-\n-      if Buffer_Size /= 0 then\n-         Descriptor.Buffer := new String (1 .. Positive (Buffer_Size));\n-      end if;\n-   end Non_Blocking_Spawn;\n+   is separate;\n \n    -------------------------\n    -- Reinitialize_Buffer --"}]}