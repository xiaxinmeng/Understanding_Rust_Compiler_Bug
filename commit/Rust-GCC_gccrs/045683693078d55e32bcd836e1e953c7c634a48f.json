{"sha": "045683693078d55e32bcd836e1e953c7c634a48f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1NjgzNjkzMDc4ZDU1ZTMyYmNkODM2ZTFlOTUzYzdjNjM0YTQ4Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2006-02-15T09:45:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-02-15T09:45:43Z"}, "message": "sem_warn.adb (Check_One_Unit): If the unit appears in a limited_with clause...\n\n2006-02-13  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Check_One_Unit): If the unit appears in a limited_with\n\tclause, use the limited view to determine whether any entity from it\n\tis referenced.\n\nFrom-SVN: r111097", "tree": {"sha": "9079a1fb14c4a68858bdd8f758ea6e9495133f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9079a1fb14c4a68858bdd8f758ea6e9495133f02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045683693078d55e32bcd836e1e953c7c634a48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045683693078d55e32bcd836e1e953c7c634a48f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045683693078d55e32bcd836e1e953c7c634a48f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045683693078d55e32bcd836e1e953c7c634a48f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4e73070af6d0d5091ac78966a6bd3b43c861c904", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e73070af6d0d5091ac78966a6bd3b43c861c904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e73070af6d0d5091ac78966a6bd3b43c861c904"}], "stats": {"total": 372, "additions": 189, "deletions": 183}, "files": [{"sha": "5f8394e790a805afc96530ce248bc47b624233a2", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 189, "deletions": 183, "changes": 372, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045683693078d55e32bcd836e1e953c7c634a48f/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045683693078d55e32bcd836e1e953c7c634a48f/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=045683693078d55e32bcd836e1e953c7c634a48f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -58,26 +58,26 @@ package body Sem_Warn is\n    -- Handling of Conditionals --\n    ------------------------------\n \n-   --  Note: this is work in progress, the data structures and general\n-   --  approach are defined, but are not in use yet. ???\n+   --  Note: this is work in progress, the data structures and general approach\n+   --  are defined, but are not in use yet. ???\n \n-   --  One entry is made in the following table for each branch of\n-   --  a conditional, e.g. an if-then-elsif-else-endif structure\n-   --  creates three entries in this table.\n+   --  An entry is made in the following table for each branch of conditional,\n+   --  e.g. an if-then-elsif-else-endif structure creates three entries in this\n+   --  table.\n \n    type Branch_Entry is record\n       Sloc : Source_Ptr;\n       --  Location for warnings associated with this branch\n \n       Defs : Elist_Id;\n-      --  List of entities defined for the first time in this branch. On\n-      --  exit from a conditional structure, any entity that is in the\n-      --  list of all branches is removed (and the entity flagged as\n-      --  defined by the conditional as a whole). Thus after processing\n-      --  a conditional, Defs contains a list of entities defined in this\n-      --  branch for the first time, but not defined at all in some other\n-      --  branch of the same conditional. A value of No_Elist is used to\n-      --  represent the initial empty list.\n+      --  List of entities defined for the first time in this branch. On exit\n+      --  from a conditional structure, any entity that is in the list of all\n+      --  branches is removed (and the entity flagged as defined by the\n+      --  conditional as a whole). Thus after processing a conditional, Defs\n+      --  contains a list of entities defined in this branch for the first\n+      --  time, but not defined at all in some other branch of the same\n+      --  conditional. A value of No_Elist is used to represent the initial\n+      --  empty list.\n \n       Next : Nat;\n       --  Index of next branch for this conditional, zero = last branch\n@@ -91,8 +91,8 @@ package body Sem_Warn is\n      Table_Increment      => Alloc.Branches_Increment,\n      Table_Name           => \"Branches\");\n \n-   --  The following table is used to represent conditionals, there is\n-   --  one entry in this table for each conditional structure.\n+   --  The following table is used to represent conditionals, there is one\n+   --  entry in this table for each conditional structure.\n \n    type Conditional_Entry is record\n       If_Stmt : Boolean;\n@@ -114,9 +114,9 @@ package body Sem_Warn is\n      Table_Name           => \"Conditionals\");\n \n    --  The following table is a stack that keeps track of the current\n-   --  conditional. The Last entry is the top of the stack. An Empty\n-   --  entry represents the start of a compilation unit. Non-zero\n-   --  entries in the stack are indexes into the conditional table.\n+   --  conditional. The Last entry is the top of the stack. An Empty entry\n+   --  represents the start of a compilation unit. Non-zero entries in the\n+   --  stack are indexes into the conditional table.\n \n    package Conditional_Stack is new Table.Table (\n      Table_Component_Type => Nat,\n@@ -143,10 +143,10 @@ package body Sem_Warn is\n    --  for the instance, when we will know more.\n \n    function Operand_Has_Warnings_Suppressed (N : Node_Id) return Boolean;\n-   --  This function traverses the expression tree represented by the node\n-   --  N and determines if any sub-operand is a reference to an entity for\n-   --  which the Warnings_Off flag is set. True is returned if such an\n-   --  entity is encountered, and False otherwise.\n+   --  This function traverses the expression tree represented by the node N\n+   --  and determines if any sub-operand is a reference to an entity for which\n+   --  the Warnings_Off flag is set. True is returned if such an entity is\n+   --  encountered, and False otherwise.\n \n    ----------------------\n    -- Check_References --\n@@ -158,18 +158,18 @@ package body Sem_Warn is\n \n       function Missing_Subunits return Boolean;\n       --  We suppress warnings when there are missing subunits, because this\n-      --  may generate too many false positives: entities in a parent may\n-      --  only be referenced in one of the subunits. We make an exception\n-      --  for subunits that contain no other stubs.\n+      --  may generate too many false positives: entities in a parent may only\n+      --  be referenced in one of the subunits. We make an exception for\n+      --  subunits that contain no other stubs.\n \n       procedure Output_Reference_Error (M : String);\n-      --  Used to output an error message. Deals with posting the error on\n-      --  the body formal in the accept case.\n+      --  Used to output an error message. Deals with posting the error on the\n+      --  body formal in the accept case.\n \n       function Publicly_Referenceable (Ent : Entity_Id) return Boolean;\n       --  This is true if the entity in question is potentially referenceable\n-      --  from another unit. This is true for entities in packages that are\n-      --  at the library level.\n+      --  from another unit. This is true for entities in packages that are at\n+      --  the library level.\n \n       ----------------------\n       -- Missing_Subunits --\n@@ -193,7 +193,6 @@ package body Sem_Warn is\n \n          elsif Nkind (Unit_Declaration_Node (E)) in N_Proper_Body then\n             D := First (Declarations (Unit_Declaration_Node (E)));\n-\n             while Present (D) loop\n \n                --  No warnings if the proper body contains nested stubs\n@@ -208,7 +207,7 @@ package body Sem_Warn is\n             return False;\n \n          else\n-            --   Missing stubs elsewhere\n+            --  Missing stubs elsewhere\n \n             return True;\n          end if;\n@@ -238,7 +237,6 @@ package body Sem_Warn is\n \n                if Present (Parameter_Specifications (Anod)) then\n                   Parm := First (Parameter_Specifications (Anod));\n-\n                   while Present (Parm) loop\n                      Defid := Defining_Identifier (Parm);\n \n@@ -265,9 +263,9 @@ package body Sem_Warn is\n          Prev : Node_Id;\n \n       begin\n-         --  Examine parents to look for a library level package spec\n-         --  But if we find a body or block or other similar construct\n-         --  along the way, we cannot be referenced.\n+         --  Examine parents to look for a library level package spec. But if\n+         --  we find a body or block or other similar construct along the way,\n+         --  we cannot be referenced.\n \n          Prev := Ent;\n          P    := Parent (Ent);\n@@ -283,7 +281,8 @@ package body Sem_Warn is\n                --  consider this referenceable, since any instantiation will\n                --  have access to the entities in the generic package. Note\n                --  that the package itself may not be instantiated, but then\n-               --  we will get a warning for the package entity\n+               --  we will get a warning for the package entity.\n+\n                --  Note that generic formal parameters are themselves not\n                --  publicly referenceable in an instance, and warnings on\n                --  them are useful.\n@@ -341,9 +340,9 @@ package body Sem_Warn is\n    --  Start of processing for Check_References\n \n    begin\n-      --  No messages if warnings are suppressed, or if we have detected\n-      --  any real errors so far (this last check avoids junk messages\n-      --  resulting from errors, e.g. a subunit that is not loaded).\n+      --  No messages if warnings are suppressed, or if we have detected any\n+      --  real errors so far (this last check avoids junk messages resulting\n+      --  from errors, e.g. a subunit that is not loaded).\n \n       if Warning_Mode = Suppress\n         or else Serious_Errors_Detected /= 0\n@@ -376,9 +375,9 @@ package body Sem_Warn is\n                (Ekind (E1) = E_Out_Parameter\n                   and then not Is_Protected_Type (Current_Scope))\n             then\n-               --  Post warning if this object not assigned. Note that we\n-               --  do not consider the implicit initialization of an access\n-               --  type to be the assignment of a value for this purpose.\n+               --  Post warning if this object not assigned. Note that we do\n+               --  not consider the implicit initialization of an access type\n+               --  to be the assignment of a value for this purpose.\n \n                if Ekind (E1) = E_Out_Parameter\n                  and then Present (Spec_Entity (E1))\n@@ -401,14 +400,13 @@ package body Sem_Warn is\n                  and then Is_Access_Type (Etype (E1))\n                then\n \n-                  --  For access types, the only time we made a UR\n-                  --  entry was for a dereference, and so we post\n-                  --  the appropriate warning here (note that the\n-                  --  dereference may not be explicit in the source,\n-                  --  for example in the case of a dispatching call\n-                  --  with an anonymous access controlling formal, or\n-                  --  of an assignment of a pointer involving a\n-                  --  discriminant check on the designated object).\n+                  --  For access types, the only time we made a UR entry was\n+                  --  for a dereference, and so we post the appropriate warning\n+                  --  here (note that the dereference may not be explicit in\n+                  --  the source, for example in the case of a dispatching call\n+                  --  with an anonymous access controlling formal, or of an\n+                  --  assignment of a pointer involving discriminant check on\n+                  --  the designated object).\n \n                   Error_Msg_NE (\"& may be null?\", UR, E1);\n                   goto Continue;\n@@ -502,14 +500,13 @@ package body Sem_Warn is\n                      UR := Expression (UR);\n                   end loop;\n \n-                  --  Here we issue the warning, all checks completed\n-                  --  If the unset reference is prefix of a selected\n-                  --  component that comes from source, mention the\n-                  --  component as well. If the selected component comes\n-                  --  from expansion, all we know is that the entity is\n-                  --  not fully initialized at the point of the reference.\n-                  --  Locate an unintialized component to get a better\n-                  --  error message.\n+                  --  Here we issue the warning, all checks completed If the\n+                  --  unset reference is prefix of a selected component that\n+                  --  comes from source, mention the component as well. If the\n+                  --  selected component comes from expansion, all we know is\n+                  --  that the entity is not fully initialized at the point of\n+                  --  the reference. Locate an unintialized component to get a\n+                  --  better error message.\n \n                   if Nkind (Parent (UR)) = N_Selected_Component then\n                      Error_Msg_Node_2 := Selector_Name (Parent (UR));\n@@ -565,9 +562,9 @@ package body Sem_Warn is\n                           and then Referenced_As_LHS (E1)))\n \n                --  Labels, and enumeration literals, and exceptions. The\n-               --  warnings are also placed on local packages that cannot\n-               --  be referenced from elsewhere, including those declared\n-               --  within a package body.\n+               --  warnings are also placed on local packages that cannot be\n+               --  referenced from elsewhere, including those declared within a\n+               --  package body.\n \n                and then (Is_Object (E1)\n                            or else\n@@ -591,8 +588,8 @@ package body Sem_Warn is\n                                   or else Ekind (E) = E_Subprogram_Body\n                                   or else Ekind (E) = E_Block)))\n \n-               --  Exclude instantiations, since there is no reason why\n-               --  every entity in an instantiation should be referenced.\n+               --  Exclude instantiations, since there is no reason why every\n+               --  entity in an instantiation should be referenced.\n \n                and then Instantiation_Location (Sloc (E1)) = No_Location\n \n@@ -628,49 +625,49 @@ package body Sem_Warn is\n \n                and then not Is_Dispatching_Operation (E1)\n \n-               --  Check entity that can be publicly referenced (we do not\n-               --  give messages for such entities, since there could be\n-               --  other units, not involved in this compilation, that\n-               --  contain relevant references.\n+               --  Check entity that can be publicly referenced (we do not give\n+               --  messages for such entities, since there could be other\n+               --  units, not involved in this compilation, that contain\n+               --  relevant references.\n \n                and then not Publicly_Referenceable (E1)\n \n-               --  Class wide types are marked as source entities, but\n-               --  they are not really source entities, and are always\n-               --  created, so we do not care if they are not referenced.\n+               --  Class wide types are marked as source entities, but they are\n+               --  not really source entities, and are always created, so we do\n+               --  not care if they are not referenced.\n \n                and then Ekind (E1) /= E_Class_Wide_Type\n \n-               --  Objects other than parameters of task types are allowed\n-               --  to be non-referenced, since they start up tasks!\n+               --  Objects other than parameters of task types are allowed to\n+               --  be non-referenced, since they start up tasks!\n \n                and then ((Ekind (E1) /= E_Variable\n                              and then Ekind (E1) /= E_Constant\n                              and then Ekind (E1) /= E_Component)\n                            or else not Is_Task_Type (Etype (E1)))\n \n-               --  For subunits, only place warnings on the main unit\n-               --  itself, since parent units are not completely compiled\n+               --  For subunits, only place warnings on the main unit itself,\n+               --  since parent units are not completely compiled\n \n                and then (Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit\n                            or else\n                          Get_Source_Unit (E1) = Main_Unit)\n             then\n-               --  Suppress warnings in internal units if not in -gnatg\n-               --  mode (these would be junk warnings for an applications\n-               --  program, since they refer to problems in internal units)\n+               --  Suppress warnings in internal units if not in -gnatg mode\n+               --  (these would be junk warnings for an applications program,\n+               --  since they refer to problems in internal units)\n \n                if GNAT_Mode\n                  or else not\n                    Is_Internal_File_Name\n                      (Unit_File_Name (Get_Source_Unit (E1)))\n                then\n-                  --  We do not immediately flag the error. This is because\n-                  --  we have not expanded generic bodies yet, and they may\n-                  --  have the missing reference. So instead we park the\n-                  --  entity on a list, for later processing. However, for\n-                  --  the accept case, post the error right here, since we\n-                  --  have the information now in this case.\n+                  --  We do not immediately flag the error. This is because we\n+                  --  have not expanded generic bodies yet, and they may have\n+                  --  the missing reference. So instead we park the entity on a\n+                  --  list, for later processing. However, for the accept case,\n+                  --  post the error right here, since we have the information\n+                  --  now in this case.\n \n                   if Present (Anod) then\n                      Output_Reference_Error (\"& is not referenced?\");\n@@ -682,10 +679,10 @@ package body Sem_Warn is\n                   end if;\n                end if;\n \n-            --  Generic units are referenced in the generic body,\n-            --  but if they are not public and never instantiated\n-            --  we want to force a warning on them. We treat them\n-            --  as redundant constructs to minimize noise.\n+            --  Generic units are referenced in the generic body, but if they\n+            --  are not public and never instantiated we want to force a\n+            --  warning on them. We treat them as redundant constructs to\n+            --  minimize noise.\n \n             elsif Is_Generic_Subprogram (E1)\n               and then not Is_Instantiated (E1)\n@@ -733,9 +730,9 @@ package body Sem_Warn is\n          return;\n       end if;\n \n-      --  Ignore reference to non-scalar if not from source. Almost always\n-      --  such references are bogus (e.g. calls to init procs to set\n-      --  default discriminant values).\n+      --  Ignore reference to non-scalar if not from source. Almost always such\n+      --  references are bogus (e.g. calls to init procs to set default\n+      --  discriminant values).\n \n       if not Comes_From_Source (N)\n         and then not Is_Scalar_Type (Etype (N))\n@@ -765,16 +762,16 @@ package body Sem_Warn is\n                                (Sloc (N),  Sloc (Unset_Reference (E))))\n                  and then not Warnings_Off (E)\n                then\n-                  --  We may have an unset reference. The first test is\n-                  --  whether we are accessing a discriminant of a record\n-                  --  or a component with default initialization. Both of\n-                  --  these cases can be ignored, since the actual object\n-                  --  that is referenced is definitely initialized. Note\n-                  --  that this covers the case of reading discriminants\n-                  --  of an out parameter, which is OK even in Ada 83.\n-\n-                  --  Note that we are only interested in a direct reference\n-                  --  to a record component here. If the reference is via an\n+                  --  We may have an unset reference. The first test is whether\n+                  --  we are accessing a discriminant of a record or a\n+                  --  component with default initialization. Both of these\n+                  --  cases can be ignored, since the actual object that is\n+                  --  referenced is definitely initialized. Note that this\n+                  --  covers the case of reading discriminants of an out\n+                  --  parameter, which is OK even in Ada 83.\n+\n+                  --  Note that we are only interested in a direct reference to\n+                  --  a record component here. If the reference is via an\n                   --  access type, then the access object is being referenced,\n                   --  not the record, and still deserves an unset reference.\n \n@@ -797,11 +794,11 @@ package body Sem_Warn is\n                   --  Here we have a potential unset reference. But before we\n                   --  get worried about it, we have to make sure that the\n                   --  entity declaration is in the same procedure as the\n-                  --  reference, since if they are in separate procedures,\n-                  --  then we have no idea about sequential execution.\n+                  --  reference, since if they are in separate procedures, then\n+                  --  we have no idea about sequential execution.\n \n-                  --  The tests in the loop below catch all such cases, but\n-                  --  do allow the reference to appear in a loop, block, or\n+                  --  The tests in the loop below catch all such cases, but do\n+                  --  allow the reference to appear in a loop, block, or\n                   --  package spec that is nested within the declaring scope.\n                   --  As always, it is possible to construct cases where the\n                   --  warning is wrong, that is why it is a warning!\n@@ -824,25 +821,29 @@ package body Sem_Warn is\n                         SR := Scope (SR);\n                      end loop;\n \n-                     --  Case of reference has an access type. This is a\n-                     --  special case since access types are always set to\n-                     --  null so cannot be truly uninitialized, but we still\n-                     --  want to warn about cases of obvious null dereference.\n+                     --  Case of reference has an access type. This is special\n+                     --  case since access types are always set to null so\n+                     --  cannot be truly uninitialized, but we still want to\n+                     --  warn about cases of obvious null dereference.\n \n                      if Is_Access_Type (Etype (N)) then\n-                        declare\n+                        Access_Type_Case : declare\n                            P : Node_Id;\n \n                            function Process\n                              (N    : Node_Id)\n                               return Traverse_Result;\n                            --  Process function for instantation of Traverse\n-                           --  below. Checks if N contains reference to E\n-                           --  other than a dereference.\n+                           --  below. Checks if N contains reference to other\n+                           --  than a dereference.\n \n                            function Ref_In (Nod : Node_Id) return Boolean;\n-                           --  Determines whether Nod contains a reference\n-                           --  to the entity E that is not a dereference.\n+                           --  Determines whether Nod contains a reference to\n+                           --  the entity E that is not a dereference.\n+\n+                           -------------\n+                           -- Process --\n+                           -------------\n \n                            function Process\n                              (N    : Node_Id)\n@@ -859,13 +860,18 @@ package body Sem_Warn is\n                               end if;\n                            end Process;\n \n+                           ------------\n+                           -- Ref_In --\n+                           ------------\n+\n                            function Ref_In (Nod : Node_Id) return Boolean is\n                               function Traverse is new Traverse_Func (Process);\n-\n                            begin\n                               return Traverse (Nod) = Abandon;\n                            end Ref_In;\n \n+                        --  Start of processing for Access_Type_Case\n+\n                         begin\n                            --  Don't bother if we are inside an instance,\n                            --  since the compilation of the generic template\n@@ -918,7 +924,7 @@ package body Sem_Warn is\n                                  return;\n                               end if;\n                            end loop;\n-                        end;\n+                        end Access_Type_Case;\n                      end if;\n \n                      --  Here we definitely have a case for giving a warning\n@@ -1035,7 +1041,6 @@ package body Sem_Warn is\n             begin\n                if Nkind (N) = N_Use_Package_Clause then\n                   Nam := First (Names (N));\n-\n                   while Present (Nam) loop\n                      if Entity (Nam) = Pack then\n                         Error_Msg_Qual_Level := 1;\n@@ -1056,7 +1061,6 @@ package body Sem_Warn is\n \n          begin\n             E := First_Entity (Pack);\n-\n             while Present (E) loop\n                if Referenced (E) then\n                   return;\n@@ -1065,9 +1069,9 @@ package body Sem_Warn is\n                Next_Entity (E);\n             end loop;\n \n-            --  No entities of the package are referenced. Check whether\n-            --  the reference to the package itself is a use clause, and\n-            --  if so place a warning on it.\n+            --  No entities of the package are referenced. Check whether the\n+            --  reference to the package itself is a use clause, and if so\n+            --  place a warning on it.\n \n             Check_Use_Clauses (Un);\n          end Check_Inner_Package;\n@@ -1085,7 +1089,6 @@ package body Sem_Warn is\n                and then Present_System_Aux\n             then\n                Ent := First_Entity (System_Aux_Id);\n-\n                while Present (Ent) loop\n                   if Referenced (Ent) then\n                      return True;\n@@ -1111,8 +1114,8 @@ package body Sem_Warn is\n \n          begin\n             Is_Visible_Renaming := False;\n-            E1 := First_Entity (P);\n \n+            E1 := First_Entity (P);\n             while Present (E1) loop\n                if Ekind (E1) = E_Package\n                   and then Renamed_Object (E1) = L\n@@ -1143,17 +1146,17 @@ package body Sem_Warn is\n       begin\n          Cnode := Cunit (Unit);\n \n-         --  Only do check in units that are part of the extended main\n-         --  unit. This is actually a necessary restriction, because in\n-         --  the case of subprogram acting as its own specification,\n-         --  there can be with's in subunits that we will not see.\n+         --  Only do check in units that are part of the extended main unit.\n+         --  This is actually a necessary restriction, because in the case of\n+         --  subprogram acting as its own specification, there can be with's in\n+         --  subunits that we will not see.\n \n          if not In_Extended_Main_Source_Unit (Cnode) then\n             return;\n \n-         --  In configurable run time mode, we remove the bodies of\n-         --  non-inlined subprograms, which may lead to spurious warnings,\n-         --  which are clearly undesirable.\n+         --  In configurable run time mode, we remove the bodies of non-inlined\n+         --  subprograms, which may lead to spurious warnings, which are\n+         --  clearly undesirable.\n \n          elsif Configurable_Run_Time_Mode\n            and then Is_Predefined_File_Name (Unit_File_Name (Unit))\n@@ -1175,16 +1178,16 @@ package body Sem_Warn is\n \n                if not Referenced (Lunit) then\n \n-                  --  Suppress warnings in internal units if not in -gnatg\n-                  --  mode (these would be junk warnings for an applications\n-                  --  program, since they refer to problems in internal units)\n+                  --  Suppress warnings in internal units if not in -gnatg mode\n+                  --  (these would be junk warnings for an application program,\n+                  --  since they refer to problems in internal units)\n \n                   if GNAT_Mode\n                     or else not Is_Internal_File_Name (Unit_File_Name (Unit))\n                   then\n-                     --  Here we definitely have a non-referenced unit. If\n-                     --  it is the special call for a spec unit, then just\n-                     --  set the flag to be read later.\n+                     --  Here we definitely have a non-referenced unit. If it\n+                     --  is the special call for a spec unit, then just set the\n+                     --  flag to be read later.\n \n                      if Unit = Spec_Unit then\n                         Set_Unreferenced_In_Spec (Item);\n@@ -1205,26 +1208,26 @@ package body Sem_Warn is\n                then\n                   null;\n \n-               --  If this unit is referenced, and it is a package, we\n-               --  do another test, to see if any of the entities in the\n-               --  package are referenced. If none of the entities are\n-               --  referenced, we still post a warning. This occurs if\n-               --  the only use of the package is in a use clause, or\n-               --  in a package renaming declaration.\n+               --  If this unit is referenced, and it is a package, we do\n+               --  another test, to see if any of the entities in the package\n+               --  are referenced. If none of the entities are referenced, we\n+               --  still post a warning. This occurs if the only use of the\n+               --  package is in a use clause, or in a package renaming\n+               --  declaration.\n \n                elsif Ekind (Lunit) = E_Package then\n \n-                  --  If Is_Instantiated is set, it means that the package\n-                  --  is implicitly instantiated (this is the case of a\n-                  --  parent instance or an actual for a generic package\n-                  --  formal), and this counts as a reference.\n+                  --  If Is_Instantiated is set, it means that the package is\n+                  --  implicitly instantiated (this is the case of parent\n+                  --  instance or an actual for a generic package formal), and\n+                  --  this counts as a reference.\n \n                   if Is_Instantiated (Lunit) then\n                      null;\n \n                   --  If no entities in package, and there is a pragma\n-                  --  Elaborate_Body present, then assume that this with\n-                  --  is done for purposes of this elaboration.\n+                  --  Elaborate_Body present, then assume that this with is\n+                  --  done for purposes of this elaboration.\n \n                   elsif No (First_Entity (Lunit))\n                     and then Has_Pragma_Elaborate_Body (Lunit)\n@@ -1234,12 +1237,16 @@ package body Sem_Warn is\n                   --  Otherwise see if any entities have been referenced\n \n                   else\n-                     Ent := First_Entity (Lunit);\n+                     if Limited_Present (Item) then\n+                        Ent := First_Entity (Limited_View (Lunit));\n+                     else\n+                        Ent := First_Entity (Lunit);\n+                     end if;\n+\n                      loop\n-                        --  No more entities, and we did not find one\n-                        --  that was referenced. Means we have a definite\n-                        --  case of a with none of whose entities was\n-                        --  referenced.\n+                        --  No more entities, and we did not find one that was\n+                        --  referenced. Means we have a definite case of a with\n+                        --  none of whose entities was referenced.\n \n                         if No (Ent) then\n \n@@ -1258,10 +1265,10 @@ package body Sem_Warn is\n                                 (\"no entities of & are referenced?\",\n                                  Name (Item));\n \n-                              --  Look for renamings of this package, and\n-                              --  flag them as well. If the original package\n-                              --  has warnings off, we suppress the warning\n-                              --  on the renaming as well.\n+                              --  Look for renamings of this package, and flag\n+                              --  them as well. If the original package has\n+                              --  warnings off, we suppress the warning on the\n+                              --  renaming as well.\n \n                               Pack := Find_Package_Renaming (Munite, Lunit);\n \n@@ -1282,16 +1289,16 @@ package body Sem_Warn is\n                         elsif Referenced (Ent)\n                           or else Referenced_As_LHS (Ent)\n                         then\n-                           --  This means that the with is indeed fine, in\n-                           --  that it is definitely needed somewhere, and\n-                           --  we can quite worrying about this one.\n+                           --  This means that the with is indeed fine, in that\n+                           --  it is definitely needed somewhere, and we can\n+                           --  quite worrying about this one.\n \n-                           --  Except for one little detail, if either of\n-                           --  the flags was set during spec processing,\n-                           --  this is where we complain that the with\n-                           --  could be moved from the spec. If the spec\n-                           --  contains a visible renaming of the package,\n-                           --  inhibit warning to move with_clause to body.\n+                           --  Except for one little detail, if either of the\n+                           --  flags was set during spec processing, this is\n+                           --  where we complain that the with could be moved\n+                           --  from the spec. If the spec contains a visible\n+                           --  renaming of the package, inhibit warning to move\n+                           --  with_clause to body.\n \n                            if Ekind (Munite) = E_Package_Body then\n                               Pack :=\n@@ -1334,8 +1341,8 @@ package body Sem_Warn is\n                   end if;\n \n                --  For a generic package, the only interesting kind of\n-               --  reference is an instantiation, since entities cannot\n-               --  be referenced directly.\n+               --  reference is an instantiation, since entities cannot be\n+               --  referenced directly.\n \n                elsif Is_Generic_Unit (Lunit) then\n \n@@ -1350,9 +1357,9 @@ package body Sem_Warn is\n                           (\"unit& is never instantiated?\", Name (Item));\n                      end if;\n \n-                  --  If unit was indeed instantiated, make sure that\n-                  --  flag is not set showing it was uninstantiated in\n-                  --  the spec, and if so, give warning.\n+                  --  If unit was indeed instantiated, make sure that flag is\n+                  --  not set showing it was uninstantiated in the spec, and if\n+                  --  so, give warning.\n \n                   elsif Unreferenced_In_Spec (Item) then\n                      Error_Msg_N\n@@ -1377,11 +1384,11 @@ package body Sem_Warn is\n          return;\n       end if;\n \n-      --  Flag any unused with clauses, but skip this step if we are\n-      --  compiling a subunit on its own, since we do not have enough\n-      --  information to determine whether with's are used. We will get\n-      --  the relevant warnings when we compile the parent. This is the\n-      --  normal style of GNAT compilation in any case.\n+      --  Flag any unused with clauses, but skip this step if we are compiling\n+      --  a subunit on its own, since we do not have enough information to\n+      --  determine whether with's are used. We will get the relevant warnings\n+      --  when we compile the parent. This is the normal style of GNAT\n+      --  compilation in any case.\n \n       if Nkind (Unit (Cunit (Main_Unit))) = N_Subunit then\n          return;\n@@ -1417,7 +1424,6 @@ package body Sem_Warn is\n \n       else\n          S := Scope (E);\n-\n          loop\n             if S = Standard_Standard then\n                return False;\n@@ -1500,8 +1506,8 @@ package body Sem_Warn is\n                when E_Variable =>\n \n                   --  Case of variable that is assigned but not read. We\n-                  --  suppress the message if the variable is volatile,\n-                  --  has an address clause, or is imported.\n+                  --  suppress the message if the variable is volatile, has an\n+                  --  address clause, or is imported.\n \n                   if Referenced_As_LHS (E)\n                     and then No (Address_Clause (E))\n@@ -1511,8 +1517,8 @@ package body Sem_Warn is\n                        and then not Is_Imported (E)\n \n                         --  Suppress the message for aliased or renamed\n-                        --  variables, since there may be other entities\n-                        --  read the same memory location.\n+                        --  variables, since there may be other entities read\n+                        --  the same memory location.\n \n                        and then not Is_Aliased (E)\n                        and then No (Renamed_Object (E))\n@@ -1784,8 +1790,8 @@ package body Sem_Warn is\n       P : Node_Id;\n \n    begin\n-      --   Argument replacement in an inlined body can make conditions\n-      --   static. Do not emit warnings in this case.\n+      --   Argument replacement in an inlined body can make conditions static.\n+      --   Do not emit warnings in this case.\n \n       if In_Inlined_Body then\n          return;"}]}