{"sha": "b59eee4039c12735d90507ac5508ba31cb76e785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU5ZWVlNDAzOWMxMjczNWQ5MDUwN2FjNTUwOGJhMzFjYjc2ZTc4NQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2012-04-18T12:29:23Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-04-18T12:29:23Z"}, "message": "re PR tree-optimization/52976 (Revision 186384 breaks the polyhedron tests aermod.f90 and doduc.f90 at -O3 -ffast-math)\n\ngcc:\n\n2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/52976\n\t* tree-ssa-reassoc.c (add_to_ops_vec_max_rank): Delete.\n\t(possibly_move_powi): New function.\n\t(rewrite_expr_tree): Call possibly_move_powi.\n\t(rewrite_expr_tree_parallel): Likewise.\n\t(attempt_builtin_powi): Change call of add_to_ops_vec_max_rank to\n\tcall add_to_ops_vec instead.\n\n\ngcc/testsuite:\n\n2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/52976\n\tgfortran.dg/reassoc_11.f: New test.\n\nFrom-SVN: r186568", "tree": {"sha": "638859999b42a6d983b7eaab2897c8d0808e3905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/638859999b42a6d983b7eaab2897c8d0808e3905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b59eee4039c12735d90507ac5508ba31cb76e785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59eee4039c12735d90507ac5508ba31cb76e785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b59eee4039c12735d90507ac5508ba31cb76e785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b59eee4039c12735d90507ac5508ba31cb76e785/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2723bdeb0d4e2ed329fef1b54acf74410c4de63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2723bdeb0d4e2ed329fef1b54acf74410c4de63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2723bdeb0d4e2ed329fef1b54acf74410c4de63"}], "stats": {"total": 110, "additions": 84, "deletions": 26}, "files": [{"sha": "006a3ea697e57cd08ec5063531dcea4d434aa363", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b59eee4039c12735d90507ac5508ba31cb76e785", "patch": "@@ -1,3 +1,13 @@\n+2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/52976\n+\t* tree-ssa-reassoc.c (add_to_ops_vec_max_rank): Delete.\n+\t(possibly_move_powi): New function.\n+\t(rewrite_expr_tree): Call possibly_move_powi.\n+\t(rewrite_expr_tree_parallel): Likewise.\n+\t(attempt_builtin_powi): Change call of add_to_ops_vec_max_rank to\n+\tcall add_to_ops_vec instead.\n+\n 2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976"}, {"sha": "a07a031a4a78ea6c12a0edde29804de758e71a77", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b59eee4039c12735d90507ac5508ba31cb76e785", "patch": "@@ -1,3 +1,8 @@\n+2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/52976\n+\tgfortran.dg/reassoc_11.f: New test.\n+\n 2012-04-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR tree-optimization/52976"}, {"sha": "242201680b3b1d587a4515c8c06aa109ddd41a5a", "filename": "gcc/testsuite/gfortran.dg/reassoc_11.f", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_11.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_11.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Freassoc_11.f?ref=b59eee4039c12735d90507ac5508ba31cb76e785", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-O3 -ffast-math\" }\n+\n+! This tests only for compile-time failure, which formerly occurred\n+! when a __builtin_powi was introduced by reassociation in a bad place.\n+\n+      SUBROUTINE GRDURBAN(URBWSTR, ZIURB, GRIDHT)\n+\n+      IMPLICIT NONE\n+      INTEGER :: I\n+      REAL :: SW2, URBWSTR, ZIURB, GRIDHT(87)\n+\n+      SAVE \n+\n+      SW2 = 1.6*(GRIDHT(I)/ZIURB)**0.667*URBWSTR**2\n+\n+      END"}, {"sha": "f440d1742586270c75056c0b5f07eb4381c1b069", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 52, "deletions": 26, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b59eee4039c12735d90507ac5508ba31cb76e785/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=b59eee4039c12735d90507ac5508ba31cb76e785", "patch": "@@ -544,28 +544,6 @@ add_repeat_to_ops_vec (VEC(operand_entry_t, heap) **ops, tree op,\n   reassociate_stats.pows_encountered++;\n }\n \n-/* Add an operand entry to *OPS for the tree operand OP, giving the\n-   new entry a larger rank than any other operand already in *OPS.  */\n-\n-static void\n-add_to_ops_vec_max_rank (VEC(operand_entry_t, heap) **ops, tree op)\n-{\n-  operand_entry_t oe = (operand_entry_t) pool_alloc (operand_entry_pool);\n-  operand_entry_t oe1;\n-  unsigned i;\n-  unsigned max_rank = 0;\n-\n-  FOR_EACH_VEC_ELT (operand_entry_t, *ops, i, oe1)\n-    if (oe1->rank > max_rank)\n-      max_rank = oe1->rank;\n-\n-  oe->op = op;\n-  oe->rank = max_rank + 1;\n-  oe->id = next_operand_entry_id++;\n-  oe->count = 1;\n-  VEC_safe_push (operand_entry_t, heap, *ops, oe);\n-}\n-\n /* Return true if STMT is reassociable operation containing a binary\n    operation with tree code CODE, and is inside LOOP.  */\n \n@@ -2264,6 +2242,47 @@ remove_visited_stmt_chain (tree var)\n     }\n }\n \n+/* If OP is an SSA name, find its definition and determine whether it\n+   is a call to __builtin_powi.  If so, move the definition prior to\n+   STMT.  Only do this during early reassociation.  */\n+\n+static void\n+possibly_move_powi (gimple stmt, tree op)\n+{\n+  gimple stmt2;\n+  tree fndecl;\n+  gimple_stmt_iterator gsi1, gsi2;\n+\n+  if (!first_pass_instance\n+      || !flag_unsafe_math_optimizations\n+      || TREE_CODE (op) != SSA_NAME)\n+    return;\n+  \n+  stmt2 = SSA_NAME_DEF_STMT (op);\n+\n+  if (!is_gimple_call (stmt2)\n+      || !has_single_use (gimple_call_lhs (stmt2)))\n+    return;\n+\n+  fndecl = gimple_call_fndecl (stmt2);\n+\n+  if (!fndecl\n+      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+    return;\n+\n+  switch (DECL_FUNCTION_CODE (fndecl))\n+    {\n+    CASE_FLT_FN (BUILT_IN_POWI):\n+      break;\n+    default:\n+      return;\n+    }\n+\n+  gsi1 = gsi_for_stmt (stmt);\n+  gsi2 = gsi_for_stmt (stmt2);\n+  gsi_move_before (&gsi2, &gsi1);\n+}\n+\n /* This function checks three consequtive operands in\n    passed operands vector OPS starting from OPINDEX and\n    swaps two operands if it is profitable for binary operation\n@@ -2369,6 +2388,8 @@ rewrite_expr_tree (gimple stmt, unsigned int opindex,\n \t      print_gimple_stmt (dump_file, stmt, 0, 0);\n \t    }\n \n+\t  possibly_move_powi (stmt, oe1->op);\n+\t  possibly_move_powi (stmt, oe2->op);\n \t}\n       return;\n     }\n@@ -2414,6 +2435,8 @@ rewrite_expr_tree (gimple stmt, unsigned int opindex,\n \t  fprintf (dump_file, \" into \");\n \t  print_gimple_stmt (dump_file, stmt, 0, 0);\n \t}\n+\n+      possibly_move_powi (stmt, oe->op);\n     }\n   /* Recurse on the LHS of the binary operator, which is guaranteed to\n      be the non-leaf side.  */\n@@ -2587,6 +2610,9 @@ rewrite_expr_tree_parallel (gimple stmt, int width,\n \t  fprintf (dump_file, \" into \");\n \t  print_gimple_stmt (dump_file, stmts[i], 0, 0);\n \t}\n+\n+      possibly_move_powi (stmts[i], op1);\n+      possibly_move_powi (stmts[i], op2);\n     }\n \n   remove_visited_stmt_chain (last_rhs1);\n@@ -3298,6 +3324,8 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t\t\t\t\t\t\t   power));\n \t      gimple_call_set_lhs (pow_stmt, iter_result);\n \t      gimple_set_location (pow_stmt, gimple_location (stmt));\n+\t      /* Temporarily place the call; we will move it to the\n+\t\t correct place during rewrite_expr.  */\n \t      gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n \n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -3402,10 +3430,8 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t  gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n \t}\n \n-      /* Append the result of this iteration to the ops vector.\n-         Give it a rank higher than all other ranks in the ops vector\n-         so that all uses of it will be forced to come after it.  */\n-      add_to_ops_vec_max_rank (ops, iter_result);\n+      /* Append the result of this iteration to the ops vector.  */\n+      add_to_ops_vec (ops, iter_result);\n \n       /* Decrement the occurrence count of each element in the product\n \t by the count found above, and remove this many copies of each"}]}