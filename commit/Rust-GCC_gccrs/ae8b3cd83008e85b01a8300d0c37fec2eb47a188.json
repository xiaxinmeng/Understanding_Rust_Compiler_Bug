{"sha": "ae8b3cd83008e85b01a8300d0c37fec2eb47a188", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU4YjNjZDgzMDA4ZTg1YjAxYTgzMDBkMGMzN2ZlYzJlYjQ3YTE4OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-22T11:45:51Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-22T11:45:51Z"}, "message": "(pa_adjust_cost): Use pa_cpu, not pa_cpu_attr.\n\nFrom-SVN: r10505", "tree": {"sha": "c9b59fd3bab92998b5d132ea2299650edf51393b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b59fd3bab92998b5d132ea2299650edf51393b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae8b3cd83008e85b01a8300d0c37fec2eb47a188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8b3cd83008e85b01a8300d0c37fec2eb47a188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae8b3cd83008e85b01a8300d0c37fec2eb47a188", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae8b3cd83008e85b01a8300d0c37fec2eb47a188/comments", "author": null, "committer": null, "parents": [{"sha": "4db7b4ce13e06dcf40320db2689003d9b6bf0b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db7b4ce13e06dcf40320db2689003d9b6bf0b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db7b4ce13e06dcf40320db2689003d9b6bf0b91"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "3bd15e1e4f6a8259b70d6b4a8a77c22f09c8b286", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae8b3cd83008e85b01a8300d0c37fec2eb47a188/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae8b3cd83008e85b01a8300d0c37fec2eb47a188/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=ae8b3cd83008e85b01a8300d0c37fec2eb47a188", "patch": "@@ -2621,7 +2621,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\tcase TYPE_FPLOAD:\n \t\t  /* This cost 3 cycles, not 2 as the md says for the\n \t\t     700 and 7100.  Note scaling of cost for 7100.  */\n-\t\t  return cost + (pa_cpu_attr == PROCESSOR_700) ? 1 : 2;\n+\t\t  return cost + (pa_cpu == PROCESSOR_700) ? 1 : 2;\n \n \t\tcase TYPE_FPALU:\n \t\tcase TYPE_FPMULSGL:\n@@ -2632,7 +2632,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\tcase TYPE_FPSQRTDBL:\n \t\t  /* In these important cases, we save one cycle compared to\n \t\t     when flop instruction feed each other.  */\n-\t\t  return cost - (pa_cpu_attr == PROCESSOR_700) ? 1 : 2;\n+\t\t  return cost - (pa_cpu == PROCESSOR_700) ? 1 : 2;\n \n \t\tdefault:\n \t\t  return cost;\n@@ -2680,7 +2680,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\t     preceding arithmetic operation has finished if\n \t\t     the target of the fpload is any of the sources\n \t\t     (or destination) of the arithmetic operation.  */\n-\t\t  return cost - (pa_cpu_attr == PROCESSOR_700) ? 1 : 2;\n+\t\t  return cost - (pa_cpu == PROCESSOR_700) ? 1 : 2;\n \n \t\tdefault:\n \t\t  return 0;\n@@ -2715,7 +2715,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\t     preceding divide or sqrt operation has finished if\n \t\t     the target of the ALU flop is any of the sources\n \t\t     (or destination) of the divide or sqrt operation.  */\n-\t\t  return cost - (pa_cpu_attr == PROCESSOR_700) ? 2 : 4;\n+\t\t  return cost - (pa_cpu == PROCESSOR_700) ? 2 : 4;\n \n \t\tdefault:\n \t\t  return 0;\n@@ -2761,7 +2761,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\t     preceding arithmetic operation has finished if\n \t\t     the target of the fpload is the destination of the\n \t\t     arithmetic operation.  */\n-\t\t  return cost - (pa_cpu_attr == PROCESSOR_700) ? 1 : 2;\n+\t\t  return cost - (pa_cpu == PROCESSOR_700) ? 1 : 2;\n \n \t\tdefault:\n \t\t  return 0;\n@@ -2796,7 +2796,7 @@ pa_adjust_cost (insn, link, dep_insn, cost)\n \t\t     preceding divide or sqrt operation has finished if\n \t\t     the target of the ALU flop is also the target of\n \t\t     of the divide or sqrt operation.  */\n-\t\t  return cost - (pa_cpu_attr == PROCESSOR_700) ? 2 : 4;\n+\t\t  return cost - (pa_cpu == PROCESSOR_700) ? 2 : 4;\n \n \t\tdefault:\n \t\t  return 0;"}]}