{"sha": "06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDYyMDFhZDViZTZmOWU2NDAzZTZhZDlhMDBmNGE5ZDM0MmI4MmQzNg==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2015-01-16T13:08:24Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-01-16T13:08:24Z"}, "message": "re PR target/64363 (Unresolved labels with -fcheck-pointer-bounds and -mmpx)\n\ngcc/\n\n\tPR target/64363\n\t* ipa-chkp.h (chkp_instrumentable_p): New.\n\t* ipa-chkp.c: Include tree-inline.h.\n\t(chkp_instrumentable_p): New.\n\t(chkp_maybe_create_clone): Use chkp_instrumentable_p.\n\tFix processing of not instrumentable functions.\n\t(chkp_versioning): Use chkp_instrumentable_p. Warn about\n\tnot instrumentable functions.\n\t* tree-chkp.c (chkp_add_bounds_to_call_stmt): Use\n\tchkp_instrumentable_p.\n\t* tree-inline.h (copy_forbidden): New.\n\t* tree-inline.c (copy_forbidden): Not static anymore.\n\ngcc/testsuite/\n\n\tPR target/64363\n\t* gcc.target/i386/chkp-label-address.c: New.\n\nFrom-SVN: r219733", "tree": {"sha": "b5038b43de84cfd22a1155dcfdf3b9d8bf034b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5038b43de84cfd22a1155dcfdf3b9d8bf034b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb13ee31dbf5b07b443fa2ea94441031075f8ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb13ee31dbf5b07b443fa2ea94441031075f8ecc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb13ee31dbf5b07b443fa2ea94441031075f8ecc"}], "stats": {"total": 92, "additions": 79, "deletions": 13}, "files": [{"sha": "62871b51c69a790b4534013a9e28f6d6c53aa35f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -1,3 +1,18 @@\n+2015-01-16  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/64363\n+\t* ipa-chkp.h (chkp_instrumentable_p): New.\n+\t* ipa-chkp.c: Include tree-inline.h.\n+\t(chkp_instrumentable_p): New.\n+\t(chkp_maybe_create_clone): Use chkp_instrumentable_p.\n+\tFix processing of not instrumentable functions.\n+\t(chkp_versioning): Use chkp_instrumentable_p. Warn about\n+\tnot instrumentable functions.\n+\t* tree-chkp.c (chkp_add_bounds_to_call_stmt): Use\n+\tchkp_instrumentable_p.\n+\t* tree-inline.h (copy_forbidden): New.\n+\t* tree-inline.c (copy_forbidden): Not static anymore.\n+\n 2015-01-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* optc-save-gen.awk (cl_target_option_print_diff): Mark indent,"}, {"sha": "8e6612ef1ec3c5b12a4194b104f6075149612ad1", "filename": "gcc/ipa-chkp.c", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Fipa-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Fipa-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.c?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"lto-streamer.h\"\n #include \"cgraph.h\"\n #include \"tree-chkp.h\"\n+#include \"tree-inline.h\"\n #include \"ipa-chkp.h\"\n \n /*  Pointer Bounds Checker has two IPA passes to support code instrumentation.\n@@ -401,6 +402,18 @@ chkp_maybe_clone_builtin_fndecl (tree fndecl)\n   return clone;\n }\n \n+/* Return 1 if function FNDECL should be instrumented.  */\n+\n+bool\n+chkp_instrumentable_p (tree fndecl)\n+{\n+  struct function *fn = DECL_STRUCT_FUNCTION (fndecl);\n+  return (!lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl))\n+\t  && (!flag_chkp_instrument_marked_only\n+\t      || lookup_attribute (\"bnd_instrument\", DECL_ATTRIBUTES (fndecl)))\n+\t  && (!fn || !copy_forbidden (fn, fndecl)));\n+}\n+\n /* Return clone created for instrumentation of NODE or NULL.  */\n \n cgraph_node *\n@@ -483,10 +496,10 @@ chkp_maybe_create_clone (tree fndecl)\n \t{\n \t  /* If function will not be instrumented, then it's instrumented\n \t     version is a thunk for the original.  */\n-\t  if (lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl))\n-\t      || (flag_chkp_instrument_marked_only\n-\t\t  && !lookup_attribute (\"bnd_instrument\", DECL_ATTRIBUTES (fndecl))))\n+\t  if (!chkp_instrumentable_p (fndecl))\n \t    {\n+\t      clone->remove_callees ();\n+\t      clone->remove_all_references ();\n \t      clone->thunk.thunk_p = true;\n \t      clone->thunk.add_pointer_bounds_args = true;\n \t      clone->create_edge (node, NULL, 0, CGRAPH_FREQ_BASE);\n@@ -532,7 +545,8 @@ chkp_maybe_create_clone (tree fndecl)\n \n       /* Clone all thunks.  */\n       for (e = node->callers; e; e = e->next_caller)\n-\tif (e->caller->thunk.thunk_p)\n+\tif (e->caller->thunk.thunk_p\n+\t    && !e->caller->thunk.add_pointer_bounds_args)\n \t  {\n \t    struct cgraph_node *thunk\n \t      = chkp_maybe_create_clone (e->caller->decl);\n@@ -578,6 +592,7 @@ static unsigned int\n chkp_versioning (void)\n {\n   struct cgraph_node *node;\n+  const char *reason;\n \n   bitmap_obstack_initialize (NULL);\n \n@@ -587,14 +602,20 @@ chkp_versioning (void)\n \t  && !node->instrumented_version\n \t  && !node->alias\n \t  && !node->thunk.thunk_p\n-\t  && !lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (node->decl))\n-\t  && (!flag_chkp_instrument_marked_only\n-\t      || lookup_attribute (\"bnd_instrument\",\n-\t\t\t\t   DECL_ATTRIBUTES (node->decl)))\n \t  && (!DECL_BUILT_IN (node->decl)\n \t      || (DECL_BUILT_IN_CLASS (node->decl) == BUILT_IN_NORMAL\n \t\t  && DECL_FUNCTION_CODE (node->decl) < BEGIN_CHKP_BUILTINS)))\n-\tchkp_maybe_create_clone (node->decl);\n+\t{\n+\t  if (chkp_instrumentable_p (node->decl))\n+\t    chkp_maybe_create_clone (node->decl);\n+\t  else if ((reason = copy_forbidden (DECL_STRUCT_FUNCTION (node->decl),\n+\t\t\t\t\t     node->decl)))\n+\t    {\n+\t      if (warning_at (DECL_SOURCE_LOCATION (node->decl), OPT_Wchkp,\n+\t\t\t      \"function cannot be instrumented\"))\n+\t\tinform (DECL_SOURCE_LOCATION (node->decl), reason, node->decl);\n+\t    }\n+\t}\n     }\n \n   /* Mark all aliases and thunks of functions with no instrumented"}, {"sha": "6708fe9c56a00af89c16ce38d9b7fa163b8ba310", "filename": "gcc/ipa-chkp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Fipa-chkp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Fipa-chkp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-chkp.h?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -23,5 +23,6 @@ along with GCC; see the file COPYING3.  If not see\n extern tree chkp_copy_function_type_adding_bounds (tree orig_type);\n extern tree chkp_maybe_clone_builtin_fndecl (tree fndecl);\n extern cgraph_node *chkp_maybe_create_clone (tree fndecl);\n+extern bool chkp_instrumentable_p (tree fndecl);\n \n #endif /* GCC_IPA_CHKP_H */"}, {"sha": "6da9eee4d23287f99fee62b56c289a2aa3ea7457", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -1,3 +1,8 @@\n+2015-01-16  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\tPR target/64363\n+\t* gcc.target/i386/chkp-label-address.c: New.\n+\n 2015-01-16  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/45290"}, {"sha": "05963e2e6ed793d36c98a5b8fa85d3fcfee9b147", "filename": "gcc/testsuite/gcc.target/i386/chkp-label-address.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fchkp-label-address.c?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target mpx } */\n+/* { dg-options \"-fcheck-pointer-bounds -mmpx -O2 -Wchkp\" } */\n+\n+#include <stdio.h>\n+\n+static int f1 () /* { dg-warning \"function cannot be instrumented\" \"\" } */\n+{\n+  static int array = &&label_B - &&label_A;\n+\n+ label_A:\n+\n+  printf (\"%d\\n\", array);\n+\n+ label_B:\n+\n+  return 0;\n+}\n+\n+int f2 (int i)\n+{\n+  printf (\"%d\\n\", i);\n+  return f1 ();\n+}"}, {"sha": "e7649effd97f99e8c5e5b22f93fe3333401f9c42", "filename": "gcc/tree-chkp.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-chkp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-chkp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-chkp.c?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -1686,9 +1686,8 @@ chkp_add_bounds_to_call_stmt (gimple_stmt_iterator *gsi)\n       && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_OBJECT_SIZE)\n     return;\n \n-  /* Do nothing for calls to legacy functions.  */\n-  if (fndecl\n-      && lookup_attribute (\"bnd_legacy\", DECL_ATTRIBUTES (fndecl)))\n+  /* Do nothing for calls to not instrumentable functions.  */\n+  if (fndecl && !chkp_instrumentable_p (fndecl))\n     return;\n \n   /* Ignore CHKP_INIT_PTR_BOUNDS, CHKP_NULL_PTR_BOUNDS"}, {"sha": "d8abe03e40db8d8ff0f4cb27c81d83d47dd4eb80", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -3542,7 +3542,7 @@ has_label_address_in_static_1 (tree *nodep, int *walk_subtrees, void *fnp)\n /* Determine if the function can be copied.  If so return NULL.  If\n    not return a string describng the reason for failure.  */\n \n-static const char *\n+const char *\n copy_forbidden (struct function *fun, tree fndecl)\n {\n   const char *reason = fun->cannot_be_copied_reason;"}, {"sha": "f8b2ebfe2dde40d1f7bb9a7d10d42af366025500", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06201ad5be6f9e6403e6ad9a00f4a9d342b82d36/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=06201ad5be6f9e6403e6ad9a00f4a9d342b82d36", "patch": "@@ -234,6 +234,7 @@ extern tree remap_type (tree type, copy_body_data *id);\n extern gimple_seq copy_gimple_seq_and_replace_locals (gimple_seq seq);\n extern bool debug_find_tree (tree, tree);\n extern tree copy_fn (tree, tree&, tree&);\n+extern const char *copy_forbidden (struct function *fun, tree fndecl);\n \n /* This is in tree-inline.c since the routine uses\n    data structures from the inliner.  */"}]}