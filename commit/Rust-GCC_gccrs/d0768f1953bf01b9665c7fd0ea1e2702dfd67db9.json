{"sha": "d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA3NjhmMTk1M2JmMDFiOTY2NWM3ZmQwZWExZTI3MDJkZmQ2N2RiOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-01-16T16:03:26Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-01-16T16:03:26Z"}, "message": "darwin-ldouble.c: Build file for SOFT_FLOAT.\n\n\t* config/rs6000/darwin-ldouble.c: Build file for SOFT_FLOAT.\n\t(strong_alias): Define.\n\t(__gcc_qmul): Provide non-FMA for soft-float.\n\t(__gcc_qdiv): Same.\n\t(__gcc_qneg): New.\n\t(__gcc_qeq): New.\n\t(__gcc_qle): New.\n\t(__gcc_qge): New.\n\t(__gcc_qunord): New.\n\t(__gcc_stoq): New.\n\t(__gcc_dtoq): New.\n\t(__gcc_qtos): New.\n\t(__gcc_qtod): New.\n\t(__gcc_qtoi): New.\n\t(__gcc_qtou): New.\n\t(__gcc_itoq): New.\n\t(__gcc_utoq): New.\n\t(fmsub): New.\n\t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Initialize\n\tsoft-float functions.\n\t* config/rs6000/libgcc-ppc-glibc.ver: Version soft-float symbols.\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Do not warn\n\tabout long double soft float.\n\nFrom-SVN: r120828", "tree": {"sha": "aab04471d4337abf0e76b39edfaba8c2f5cebe06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab04471d4337abf0e76b39edfaba8c2f5cebe06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/comments", "author": null, "committer": null, "parents": [{"sha": "05794ce850979f99c29d11c470ab8fd33dffd065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05794ce850979f99c29d11c470ab8fd33dffd065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05794ce850979f99c29d11c470ab8fd33dffd065"}], "stats": {"total": 321, "additions": 308, "deletions": 13}, "files": [{"sha": "cf4cd24f51d9eb8a86aa73e2f060ee3d860aa3ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "patch": "@@ -1,3 +1,29 @@\n+2007-01-16  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/darwin-ldouble.c: Build file for SOFT_FLOAT.\n+\t(strong_alias): Define.\n+\t(__gcc_qmul): Provide non-FMA for soft-float.\n+\t(__gcc_qdiv): Same.\n+\t(__gcc_qneg): New.\n+\t(__gcc_qeq): New.\n+\t(__gcc_qle): New.\n+\t(__gcc_qge): New.\n+\t(__gcc_qunord): New.\n+\t(__gcc_stoq): New.\n+\t(__gcc_dtoq): New.\n+\t(__gcc_qtos): New.\n+\t(__gcc_qtod): New.\n+\t(__gcc_qtoi): New.\n+\t(__gcc_qtou): New.\n+\t(__gcc_itoq): New.\n+\t(__gcc_utoq): New.\n+\t(fmsub): New.\n+\t* config/rs6000/rs6000.c (rs6000_init_libfuncs): Initialize\n+\tsoft-float functions.\n+\t* config/rs6000/libgcc-ppc-glibc.ver: Version soft-float symbols.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Do not warn\n+\tabout long double soft float.\n+\n 2007-01-16  Dorit Nuzman  <dorit@il.ibm.com>\n             Tehila Meyzels  <tehila@il.ibm.com>\n "}, {"sha": "8ac69f2e627486c6333c95e22c40be5605aee5af", "filename": "gcc/config/rs6000/darwin-ldouble.c", "status": "modified", "additions": 239, "deletions": 5, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-ldouble.c?ref=d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "patch": "@@ -49,7 +49,8 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n    This code currently assumes big-endian.  */\n \n-#if (!defined (__NO_FPRS__) && !defined (__LITTLE_ENDIAN__) \\\n+#if ((!defined (__NO_FPRS__) || defined (_SOFT_FLOAT)) \\\n+     && !defined (__LITTLE_ENDIAN__) \\\n      && (defined (__MACH__) || defined (__powerpc__) || defined (_AIX)))\n \n #define fabs(x) __builtin_fabs(x)\n@@ -60,14 +61,19 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #define nonfinite(a) unlikely (! isless (fabs (a), inf ()))\n \n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));\n+\n /* All these routines actually take two long doubles as parameters,\n    but GCC currently generates poor code when a union is used to turn\n    a long double into a pair of doubles.  */\n \n-extern long double __gcc_qadd (double, double, double, double);\n-extern long double __gcc_qsub (double, double, double, double);\n-extern long double __gcc_qmul (double, double, double, double);\n-extern long double __gcc_qdiv (double, double, double, double);\n+long double __gcc_qadd (double, double, double, double);\n+long double __gcc_qsub (double, double, double, double);\n+long double __gcc_qmul (double, double, double, double);\n+long double __gcc_qdiv (double, double, double, double);\n \n #if defined __ELF__ && defined SHARED \\\n     && (defined __powerpc64__ || !(defined __linux__ || defined __gnu_hurd__))\n@@ -139,6 +145,10 @@ __gcc_qsub (double a, double b, double c, double d)\n   return __gcc_qadd (a, b, -c, -d);\n }\n \n+#ifdef _SOFT_FLOAT\n+static double fmsub (double, double, double);\n+#endif\n+\n long double\n __gcc_qmul (double a, double b, double c, double d)\n {\n@@ -154,7 +164,11 @@ __gcc_qmul (double a, double b, double c, double d)\n   /* Sum terms of two highest orders. */\n   \n   /* Use fused multiply-add to get low part of a * c.  */\n+#ifndef _SOFT_FLOAT\n   asm (\"fmsub %0,%1,%2,%3\" : \"=f\"(tau) : \"f\"(a), \"f\"(c), \"f\"(t));\n+#else\n+  tau = fmsub (a, c, t);\n+#endif\n   v = a*d;\n   w = b*c;\n   tau += v + w;\t    /* Add in other second-order terms.\t */\n@@ -187,7 +201,11 @@ __gcc_qdiv (double a, double b, double c, double d)\n \t\t\t   numerically necessary.  */\n   \n   /* Use fused multiply-add to get low part of c * t.\t */\n+#ifndef _SOFT_FLOAT\n   asm (\"fmsub %0,%1,%2,%3\" : \"=f\"(sigma) : \"f\"(c), \"f\"(t), \"f\"(s));\n+#else\n+  sigma = fmsub (c, t, s);\n+#endif\n   v = a - s;\n   \n   tau = ((v-sigma)+w)/c;   /* Correction to t.  */\n@@ -201,4 +219,220 @@ __gcc_qdiv (double a, double b, double c, double d)\n   return z.ldval;\n }\n \n+#ifdef _SOFT_FLOAT\n+\n+long double __gcc_qneg (double, double);\n+int __gcc_qeq (double, double, double, double);\n+int __gcc_qne (double, double, double, double);\n+int __gcc_qge (double, double, double, double);\n+int __gcc_qle (double, double, double, double);\n+int __gcc_qunord (double, double, double, double);\n+long double __gcc_stoq (float);\n+long double __gcc_dtoq (double);\n+float __gcc_qtos (double, double);\n+double __gcc_qtod (double, double);\n+int __gcc_qtoi (double, double);\n+unsigned int __gcc_qtou (double, double);\n+long double __gcc_itoq (int);\n+long double __gcc_utoq (unsigned int);\n+\n+extern int __eqdf2 (double, double);\n+extern int __ledf2 (double, double);\n+extern int __gedf2 (double, double);\n+extern int __unorddf2 (double, double);\n+\n+/* Negate 'long double' value and return the result.\t*/\n+long double\n+__gcc_qneg (double a, double aa)\n+{\n+  longDblUnion x;\n+\n+  x.dval[0] = -a;\n+  x.dval[1] = -aa;\n+  return x.ldval;\n+}\n+\n+/* Compare two 'long double' values for equality.  */\n+int\n+__gcc_qeq (double a, double aa, double c, double cc)\n+{\n+  if (__eqdf2 (a, c) == 0)\n+    return __eqdf2 (aa, cc);\n+  return 1;\n+}\n+\n+strong_alias (__gcc_qeq, __gcc_qne);\n+\n+/* Compare two 'long double' values for less than or equal.  */\n+int\n+__gcc_qle (double a, double aa, double c, double cc)\n+{\n+  if (__eqdf2 (a, c) == 0)\n+    return __ledf2 (aa, cc);\n+  return __ledf2 (a, c);\n+}\n+\n+strong_alias (__gcc_qle, __gcc_qlt);\n+\n+/* Compare two 'long double' values for greater than or equal.  */\n+int\n+__gcc_qge (double a, double aa, double c, double cc)\n+{\n+  if (__eqdf2 (a, c) == 0)\n+    return __gedf2 (aa, cc);\n+  return __gedf2 (a, c);\n+}\n+\n+strong_alias (__gcc_qge, __gcc_qgt);\n+\n+/* Compare two 'long double' values for unordered.  */\n+int\n+__gcc_qunord (double a, double aa, double c, double cc)\n+{\n+  if (__eqdf2 (a, c) == 0)\n+    return __unorddf2 (aa, cc);\n+  return __unorddf2 (a, c);\n+}\n+\n+/* Convert single to long double.  */\n+long double\n+__gcc_stoq (float a)\n+{\n+  longDblUnion x;\n+\n+  x.dval[0] = (double) a;\n+  x.dval[1] = 0.0;\n+\n+  return x.ldval;\n+}\n+\n+/* Convert double to long double.  */\n+long double\n+__gcc_dtoq (double a)\n+{\n+  longDblUnion x;\n+\n+  x.dval[0] = a;\n+  x.dval[1] = 0.0;\n+\n+  return x.ldval;\n+}\n+\n+/* Convert long double to single.  */\n+float\n+__gcc_qtos (double a, double aa __attribute__ ((__unused__)))\n+{\n+  return (float) a;\n+}\n+\n+/* Convert long double to double.  */\n+double\n+__gcc_qtod (double a, double aa __attribute__ ((__unused__)))\n+{\n+  return a;\n+}\n+\n+/* Convert long double to int.  */\n+int\n+__gcc_qtoi (double a, double aa)\n+{\n+  double z = a + aa;\n+  return (int) z;\n+}\n+\n+/* Convert long double to unsigned int.  */\n+unsigned int\n+__gcc_qtou (double a, double aa)\n+{\n+  double z = a + aa;\n+  return (unsigned int) z;\n+}\n+\n+/* Convert int to long double.  */\n+long double\n+__gcc_itoq (int a)\n+{\n+  return __gcc_dtoq ((double) a);\n+}\n+\n+/* Convert unsigned int to long double.  */\n+long double\n+__gcc_utoq (unsigned int a)\n+{\n+  return __gcc_dtoq ((double) a);\n+}\n+\n+#include \"config/soft-fp/soft-fp.h\"\n+#include \"config/soft-fp/double.h\"\n+#include \"config/soft-fp/quad.h\"\n+\n+/* Compute floating point multiply-subtract with higher (quad) precision.  */\n+static double\n+fmsub (double a, double b, double c)\n+{\n+    FP_DECL_EX;\n+    FP_DECL_D(A);\n+    FP_DECL_D(B);\n+    FP_DECL_D(C);\n+    FP_DECL_Q(X);\n+    FP_DECL_Q(Y);\n+    FP_DECL_Q(Z);\n+    FP_DECL_Q(U);\n+    FP_DECL_Q(V);\n+    FP_DECL_D(R);\n+    double r;\n+    long double u, v, x, y, z;\n+\n+    FP_INIT_ROUNDMODE;\n+    FP_UNPACK_RAW_D (A, a);\n+    FP_UNPACK_RAW_D (B, b);\n+    FP_UNPACK_RAW_D (C, c);\n+\n+    /* Extend double to quad.  */\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+    FP_EXTEND(Q,D,4,2,X,A);\n+    FP_EXTEND(Q,D,4,2,Y,B);\n+    FP_EXTEND(Q,D,4,2,Z,C);\n+#else\n+    FP_EXTEND(Q,D,2,1,X,A);\n+    FP_EXTEND(Q,D,2,1,Y,B);\n+    FP_EXTEND(Q,D,2,1,Z,C);\n+#endif\n+    FP_PACK_RAW_Q(x,X);\n+    FP_PACK_RAW_Q(y,Y);\n+    FP_PACK_RAW_Q(z,Z);\n+    FP_HANDLE_EXCEPTIONS;\n+\n+    /* Multiply.  */\n+    FP_INIT_ROUNDMODE;\n+    FP_UNPACK_Q(X,x);\n+    FP_UNPACK_Q(Y,y);\n+    FP_MUL_Q(U,X,Y);\n+    FP_PACK_Q(u,U);\n+    FP_HANDLE_EXCEPTIONS;\n+\n+    /* Subtract.  */\n+    FP_INIT_ROUNDMODE;\n+    FP_UNPACK_SEMIRAW_Q(U,u);\n+    FP_UNPACK_SEMIRAW_Q(Z,z);\n+    FP_SUB_Q(V,U,Z);\n+    FP_PACK_SEMIRAW_Q(v,V);\n+    FP_HANDLE_EXCEPTIONS;\n+\n+    /* Truncate quad to double.  */\n+    FP_INIT_ROUNDMODE;\n+    FP_UNPACK_SEMIRAW_Q(V,v);\n+#if (2 * _FP_W_TYPE_SIZE) < _FP_FRACBITS_Q\n+    FP_TRUNC(D,Q,2,4,R,V);\n+#else\n+    FP_TRUNC(D,Q,1,2,R,V);\n+#endif\n+    FP_PACK_SEMIRAW_D(r,R);\n+    FP_HANDLE_EXCEPTIONS;\n+\n+    return r;\n+}\n+\n+#endif\n+\n #endif"}, {"sha": "d8ffd2ad28278f1cc0edf57de5981b1f95ae20f5", "filename": "gcc/config/rs6000/libgcc-ppc-glibc.ver", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flibgcc-ppc-glibc.ver?ref=d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "patch": "@@ -20,12 +20,33 @@ GCC_4.1.0 {\n \n %else\n GCC_3.4.4 {\n+%endif\n+%else\n+GCC_4.2.0 {\n %endif\n \n   # long double support\n   __gcc_qadd\n   __gcc_qsub\n   __gcc_qmul\n   __gcc_qdiv\n-}\n+\n+%ifdef _SOFT_FLOAT\n+  __gcc_qneg\n+  __gcc_qeq\n+  __gcc_qne\n+  __gcc_ggt\n+  __gcc_qge\n+  __gcc_qlt\n+  __gcc_qle\n+  __gcc_qunord\n+  __gcc_stoq\n+  __gcc_dtoq\n+  __gcc_qtos\n+  __gcc_qtod\n+  __gcc_qtoi\n+  __gcc_qtou\n+  __gcc_itoq\n+  __gcc_utoq\n %endif\n+}"}, {"sha": "ce178140ef05772bd16a2bc9ef9010ba2f608f99", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "patch": "@@ -9401,9 +9401,6 @@ rs6000_common_init_builtins (void)\n static void\n rs6000_init_libfuncs (void)\n {\n-  if (!TARGET_HARD_FLOAT)\n-    return;\n-\n   if (DEFAULT_ABI != ABI_V4 && TARGET_XCOFF\n       && !TARGET_POWER2 && !TARGET_POWERPC)\n     {\n@@ -9422,6 +9419,27 @@ rs6000_init_libfuncs (void)\n \tset_optab_libfunc (sub_optab, TFmode, \"__gcc_qsub\");\n \tset_optab_libfunc (smul_optab, TFmode, \"__gcc_qmul\");\n \tset_optab_libfunc (sdiv_optab, TFmode, \"__gcc_qdiv\");\n+\n+\tif (TARGET_SOFT_FLOAT)\n+\t  {\n+\t    set_optab_libfunc (neg_optab, TFmode, \"__gcc_qneg\");\n+\t    set_optab_libfunc (eq_optab, TFmode, \"__gcc_qeq\");\n+\t    set_optab_libfunc (ne_optab, TFmode, \"__gcc_qne\");\n+\t    set_optab_libfunc (gt_optab, TFmode, \"__gcc_qgt\");\n+\t    set_optab_libfunc (ge_optab, TFmode, \"__gcc_qge\");\n+\t    set_optab_libfunc (lt_optab, TFmode, \"__gcc_qlt\");\n+\t    set_optab_libfunc (le_optab, TFmode, \"__gcc_qle\");\n+\t    set_optab_libfunc (unord_optab, TFmode, \"__gcc_qunord\");\n+\n+\t    set_conv_libfunc (sext_optab, TFmode, SFmode, \"__gcc_stoq\");\n+\t    set_conv_libfunc (sext_optab, TFmode, DFmode, \"__gcc_dtoq\");\n+\t    set_conv_libfunc (trunc_optab, SFmode, TFmode, \"__gcc_qtos\");\n+\t    set_conv_libfunc (trunc_optab, DFmode, TFmode, \"__gcc_qtod\");\n+\t    set_conv_libfunc (sfix_optab, SImode, TFmode, \"__gcc_qtoi\");\n+\t    set_conv_libfunc (ufix_optab, SImode, TFmode, \"__gcc_qtou\");\n+\t    set_conv_libfunc (sfloat_optab, TFmode, SImode, \"__gcc_itoq\");\n+\t    set_conv_libfunc (ufloat_optab, TFmode, SImode, \"__gcc_utoq\");\n+\t  }\n       }\n     else\n       {"}, {"sha": "d7c10028a7999e45c9891dab55c39f70ceafc85e", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0768f1953bf01b9665c7fd0ea1e2702dfd67db9/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=d0768f1953bf01b9665c7fd0ea1e2702dfd67db9", "patch": "@@ -215,10 +215,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n       error (\"-msecure-plt not supported by your assembler\");\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_SOFT_FLOAT && TARGET_LONG_DOUBLE_128\t\t\t\\\n-      && rs6000_explicit_options.long_double)\t\t\t\t\\\n-    warning (0, \"-msoft-float and -mlong-double-128 not supported\");\t\\\n-\t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n   if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}]}