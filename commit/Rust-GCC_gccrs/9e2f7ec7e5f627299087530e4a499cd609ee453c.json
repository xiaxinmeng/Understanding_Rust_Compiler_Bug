{"sha": "9e2f7ec7e5f627299087530e4a499cd609ee453c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUyZjdlYzdlNWY2MjcyOTkwODc1MzBlNGE0OTljZDYwOWVlNDUzYw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2001-06-22T17:38:20Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2001-06-22T17:38:20Z"}, "message": "arm.h (struct machine_function): Remove ra_rtx.\n\n* config/arm/arm.h (struct machine_function): Remove ra_rtx.\n* config/arm/arm.c (arm_mark_machine_status): Remove ra_rtx.\n(arm_return_addr): Use get_hard_reg_initial_val et al.\n* config/d30v/d30v.h (struct machine_function): Remove ra_rtx.\n* config/d30v/d30v.c (d30v_mark_machine_status): Remove ra_rtx.\n(d30v_return_addr): Use get_hard_reg_initial_val et al.\n* config/rs6000/rs6000.h (struct machine_function): Remove ra_rtx.\n* config/rs6000/rs6000.c (rs6000_override_options): Don't set\nmark_machine_status.\n(rs6000_mark_machine_status): Remove.\n(rs6000_return_addr): Use get_hard_reg_initial_val.\n(rs6000_ra_ever_killed): Use has_hard_reg_initial_val.\n* config/v850/v850.h (INIT_EXPANDERS): Delete.\n* config/v850/v850.c (struct machine_function): Delete.\n(v850_init_machine_status): Delete.\n(v850_mark_machine_status): Delete.\n(v850_free_machine_status): Delete.\n(v850_return_addr): Use get_hard_reg_initial_val.\n(v850_init_expanders): Delete.\n\nFrom-SVN: r43507", "tree": {"sha": "aa3cca8c99ec42939790c778ddf000a1210b5983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa3cca8c99ec42939790c778ddf000a1210b5983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e2f7ec7e5f627299087530e4a499cd609ee453c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f7ec7e5f627299087530e4a499cd609ee453c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e2f7ec7e5f627299087530e4a499cd609ee453c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e2f7ec7e5f627299087530e4a499cd609ee453c/comments", "author": null, "committer": null, "parents": [{"sha": "25c3a4ef2eec4088a0516e4021830d2629930dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25c3a4ef2eec4088a0516e4021830d2629930dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25c3a4ef2eec4088a0516e4021830d2629930dbc"}], "stats": {"total": 182, "additions": 33, "deletions": 149}, "files": [{"sha": "928491e896fdec9d8fb0157592df19b807bcc7a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -1,3 +1,25 @@\n+2001-06-22  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/arm/arm.h (struct machine_function): Remove ra_rtx.\n+\t* config/arm/arm.c (arm_mark_machine_status): Remove ra_rtx.\n+\t(arm_return_addr): Use get_hard_reg_initial_val et al.\n+\t* config/d30v/d30v.h (struct machine_function): Remove ra_rtx.\n+\t* config/d30v/d30v.c (d30v_mark_machine_status): Remove ra_rtx.\n+\t(d30v_return_addr): Use get_hard_reg_initial_val et al.\n+\t* config/rs6000/rs6000.h (struct machine_function): Remove ra_rtx.\n+\t* config/rs6000/rs6000.c (rs6000_override_options): Don't set\n+\tmark_machine_status.\n+\t(rs6000_mark_machine_status): Remove.\n+\t(rs6000_return_addr): Use get_hard_reg_initial_val.\n+\t(rs6000_ra_ever_killed): Use has_hard_reg_initial_val.\n+\t* config/v850/v850.h (INIT_EXPANDERS): Delete.\n+\t* config/v850/v850.c (struct machine_function): Delete.\n+\t(v850_init_machine_status): Delete.\n+\t(v850_mark_machine_status): Delete.\n+\t(v850_free_machine_status): Delete.\n+\t(v850_return_addr): Use get_hard_reg_initial_val.\n+\t(v850_init_expanders): Delete.\n+\n Fri Jun 22 19:20:59 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* predict.c (estimate_bb_frequencies): Do not handle conditional"}, {"sha": "a1ce9c0f53cfaeb6439edc5f51eb661ae81bad1f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -9606,10 +9606,7 @@ arm_mark_machine_status (p)\n   machine_function *machine = p->machine;\n \n   if (machine)\n-    {\n-      ggc_mark_rtx (machine->ra_rtx);\n-      ggc_mark_rtx (machine->eh_epilogue_sp_ofs);\n-    }\n+    ggc_mark_rtx (machine->eh_epilogue_sp_ofs);\n }\n \n static void\n@@ -9642,37 +9639,17 @@ arm_return_addr (count, frame)\n      int count;\n      rtx frame ATTRIBUTE_UNUSED;\n {\n-  rtx reg;\n-\n   if (count != 0)\n     return NULL_RTX;\n \n-  reg = cfun->machine->ra_rtx;\n-  \n-  if (reg == NULL)\n+  if (TARGET_APCS_32)\n+    return get_hard_reg_initial_val (Pmode, LR_REGNUM);\n+  else\n     {\n-      rtx init;\n-      \n-      /* No rtx yet.  Invent one, and initialize it for r14 (lr) in \n-\t the prologue.  */\n-      reg = gen_reg_rtx (Pmode);\n-      cfun->machine->ra_rtx = reg;\n-      \n-      if (!TARGET_APCS_32)\n-\tinit = gen_rtx_AND (Pmode, gen_rtx_REG (Pmode, LR_REGNUM),\n+      rtx lr = gen_rtx_AND (Pmode, gen_rtx_REG (Pmode, LR_REGNUM),\n \t\t\t    GEN_INT (RETURN_ADDR_MASK26));\n-      else\n-\tinit = gen_rtx_REG (Pmode, LR_REGNUM);\n-\n-      init = gen_rtx_SET (VOIDmode, reg, init);\n-\n-      /* Emit the insn to the prologue with the other argument copies.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n+      return get_func_hard_reg_initial_val (cfun, lr);\n     }\n-\n-  return reg;\n }\n \n /* Do anything needed before RTL is emitted for each function.  */"}, {"sha": "8cd8b93f448204968cdc16a1c22c4d3ca320ae96", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -1433,8 +1433,6 @@ enum reg_class\n    This is added to the cfun structure.  */\n typedef struct machine_function\n {\n-  /* Records __builtin_return address.  */\n-  struct rtx_def *ra_rtx;\n   /* Additionsl stack adjustment in __builtin_eh_throw.  */\n   struct rtx_def *eh_epilogue_sp_ofs;\n   /* Records if LR has to be saved for far jumps.  */"}, {"sha": "8f8f6d20280b68860be4c8616c5afb3b44a0596d", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -3617,7 +3617,6 @@ d30v_mark_machine_status (p)\n   if (p->machine == NULL)\n     return;\n   \n-  ggc_mark_rtx (p->machine->ra_rtx);\n   ggc_mark_rtx (p->machine->eh_epilogue_sp_ofs);\n }\n \n@@ -3655,23 +3654,7 @@ d30v_init_expanders ()\n rtx\n d30v_return_addr ()\n {\n-  rtx ret;\n-\n-  ret = cfun->machine->ra_rtx;\n-  \n-  if (ret == NULL)\n-    {\n-      rtx init;\n-\n-      cfun->machine->ra_rtx = ret = gen_reg_rtx (Pmode);\n-\n-      init = gen_rtx (SET, VOIDmode, ret, gen_rtx (REG, Pmode, GPR_LINK));\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n-\n-  return ret;\n+  return get_hard_reg_initial_val (Pmode, GPR_LINK);\n }\n \n /* Called to register all of our global variables with the garbage"}, {"sha": "ca015b6f4d1ac91eac045fd1283d8fc4da802696", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -2870,8 +2870,6 @@ typedef struct machine_function\n {\n   /* Additionsl stack adjustment in __builtin_eh_throw.  */\n   struct rtx_def * eh_epilogue_sp_ofs;\n-  /* Records __builtin_return address.  */\n-  struct rtx_def * ra_rtx;\n } machine_function;\n \n \f"}, {"sha": "2267b06c3338525bb331cfac9466247546705b77", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -122,7 +122,6 @@ static void toc_hash_mark_table PARAMS ((void *));\n static int constant_pool_expr_1 PARAMS ((rtx, int *, int *));\n static void rs6000_free_machine_status PARAMS ((struct function *));\n static void rs6000_init_machine_status PARAMS ((struct function *));\n-static void rs6000_mark_machine_status PARAMS ((struct function *));\n static int rs6000_ra_ever_killed PARAMS ((void));\n \f\n /* Default register names.  */\n@@ -404,7 +403,6 @@ rs6000_override_options (default_cpu)\n \n   /* Arrange to save and restore machine status around nested functions.  */\n   init_machine_status = rs6000_init_machine_status;\n-  mark_machine_status = rs6000_mark_machine_status;\n   free_machine_status = rs6000_free_machine_status;\n }\n \n@@ -3750,14 +3748,6 @@ rs6000_init_machine_status (p)\n   p->machine = (machine_function *) xcalloc (1, sizeof (machine_function));\n }\n \n-static void\n-rs6000_mark_machine_status (p)\n-     struct function *p;\n-{\n-  if (p->machine)\n-    ggc_mark_rtx (p->machine->ra_rtx);\n-}\n-\n static void\n rs6000_free_machine_status (p)\n      struct function *p;\n@@ -5387,8 +5377,6 @@ rs6000_return_addr (count, frame)\n      int count;\n      rtx frame;\n {\n-  rtx init, reg;\n-\n   /* Currently we don't optimize very well between prolog and body code and\n      for PIC code the code can be actually quite bad, so don't try to be\n      too clever here.  */\n@@ -5406,23 +5394,7 @@ rs6000_return_addr (count, frame)\n \t\t\t\t\t RETURN_ADDRESS_OFFSET)));\n     }\n \n-  reg = cfun->machine->ra_rtx;\n-  if (reg == NULL)\n-    {\n-      /* No rtx yet.  Invent one, and initialize it from LR in\n-         the prologue.  */\n-      reg = gen_reg_rtx (Pmode);\n-      cfun->machine->ra_rtx = reg;\n-      init = gen_rtx_SET (VOIDmode, reg,\n-\t\t\t  gen_rtx_REG (Pmode, LINK_REGISTER_REGNUM));\n-\n-      /* Emit the insn to the prologue with the other argument copies.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n-\n-  return reg;\n+  return get_hard_reg_initial_val (Pmode, LINK_REGISTER_REGNUM);\n }\n \n static int\n@@ -5434,7 +5406,8 @@ rs6000_ra_ever_killed ()\n   if (current_function_is_thunk)\n     return 0;\n #endif\n-  if (!cfun->machine->ra_rtx || cfun->machine->ra_needs_full_frame)\n+  if (!has_hard_reg_initial_val (Pmode, LINK_REGISTER_REGNUM)\n+      || cfun->machine->ra_needs_full_frame)\n     return regs_ever_live[LINK_REGISTER_REGNUM];\n \n   push_topmost_sequence ();"}, {"sha": "260262a1b3dacb26a238cce3559d346239bd95fa", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -1394,8 +1394,6 @@ typedef struct machine_function\n {\n   /* Whether a System V.4 varargs area was created.  */\n   int sysv_varargs_p;\n-  /* Set if a return address rtx for loading from LR was created.  */\n-  struct rtx_def *ra_rtx;\n   /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n   int ra_needs_full_frame;\n } machine_function;"}, {"sha": "4883ab2daaebe7a61cfa4708247f9fa9062b26b1", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -51,9 +51,6 @@ static int  const_costs_int          PARAMS ((HOST_WIDE_INT, int));\n static void substitute_ep_register   PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n static int  ep_memory_offset         PARAMS ((enum machine_mode, int));\n static void v850_set_data_area       PARAMS ((tree, v850_data_area));\n-static void v850_init_machine_status PARAMS ((struct function *));\n-static void v850_mark_machine_status PARAMS ((struct function *));\n-static void v850_free_machine_status PARAMS ((struct function *));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -2786,36 +2783,6 @@ v850_va_arg (valist, type)\n   return addr_rtx;\n }\n \f\n-/* Functions to save and restore machine-specific function data.  */\n-struct machine_function\n-{\n-  /* Records __builtin_return address.  */\n-  struct rtx_def * ra_rtx;\n-};\n-\n-static void\n-v850_init_machine_status (p)\n-     struct function * p;\n-{\n-  p->machine =\n-    (struct machine_function *) xcalloc (1, sizeof (struct machine_function));\n-}\n-\n-static void\n-v850_mark_machine_status (p)\n-     struct function * p;\n-{\n-  ggc_mark_rtx (p->machine->ra_rtx);\n-}\n-\n-static void\n-v850_free_machine_status (p)\n-     struct function * p;\n-{\n-  free (p->machine);\n-  p->machine = NULL;\n-}\n-\n /* Return an RTX indicating where the return address to the\n    calling function can be found.  */\n \n@@ -2826,33 +2793,5 @@ v850_return_addr (count)\n   if (count != 0)\n     return const0_rtx;\n \n-  if (cfun->machine->ra_rtx == NULL)\n-    {\n-      rtx init;\n-      \n-      /* No rtx yet.  Invent one, and initialize it for r31 (lp) in \n-       the prologue.  */\n-      cfun->machine->ra_rtx = gen_reg_rtx (Pmode);\n-      \n-      init = gen_rtx_REG (Pmode, LINK_POINTER_REGNUM);\n-\n-      init = gen_rtx_SET (VOIDmode, cfun->machine->ra_rtx, init);\n-\n-      /* Emit the insn to the prologue with the other argument copies.  */\n-      push_topmost_sequence ();\n-      emit_insn_after (init, get_insns ());\n-      pop_topmost_sequence ();\n-    }\n-\n-  return cfun->machine->ra_rtx;\n-}\n-\n-/* Do anything needed before RTL is emitted for each function.  */\n-\n-void\n-v850_init_expanders ()\n-{\n-  init_machine_status = v850_init_machine_status;\n-  mark_machine_status = v850_mark_machine_status;\n-  free_machine_status = v850_free_machine_status;\n+  return get_hard_reg_initial_val (Pmode, LINK_POINTER_REGNUM);\n }"}, {"sha": "4c94e80e45890a1cb2917d86cbb8e7e8b4595a09", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e2f7ec7e5f627299087530e4a499cd609ee453c/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=9e2f7ec7e5f627299087530e4a499cd609ee453c", "patch": "@@ -788,10 +788,6 @@ extern int current_function_anonymous_args;\n \n #define EXIT_IGNORE_STACK 1\n \n-/* Initialize data used by insn expanders.  This is called from insn_emit,\n-   once for every function before code is generated.  */\n-#define INIT_EXPANDERS  v850_init_expanders ()\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n "}]}