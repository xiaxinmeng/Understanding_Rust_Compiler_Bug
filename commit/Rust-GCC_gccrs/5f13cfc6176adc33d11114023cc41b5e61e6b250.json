{"sha": "5f13cfc6176adc33d11114023cc41b5e61e6b250", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYxM2NmYzYxNzZhZGMzM2QxMTExNDAyM2NjNDFiNWU2MWU2YjI1MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-10-24T09:16:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-24T09:16:36Z"}, "message": "ia64.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): True.\n\n        * config/ia64/ia64.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): True.\n        (ia64_output_mi_thunk): Rewrite to use rtl, and to handle the\n        vcall offset.\n        * g++.dg/inherit/thunk1.C: Enable for ia64.\n\nFrom-SVN: r58491", "tree": {"sha": "2acf2c8bbca1bdab17f88e1a4ed8b42132120fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2acf2c8bbca1bdab17f88e1a4ed8b42132120fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f13cfc6176adc33d11114023cc41b5e61e6b250", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f13cfc6176adc33d11114023cc41b5e61e6b250", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f13cfc6176adc33d11114023cc41b5e61e6b250", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f13cfc6176adc33d11114023cc41b5e61e6b250/comments", "author": null, "committer": null, "parents": [{"sha": "3bd216f20128fabe1659826cc5717f2f4c7f8f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd216f20128fabe1659826cc5717f2f4c7f8f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd216f20128fabe1659826cc5717f2f4c7f8f71"}], "stats": {"total": 124, "additions": 95, "deletions": 29}, "files": [{"sha": "17bac5c647374bdbf5fd66e85c7a7175c673e471", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f13cfc6176adc33d11114023cc41b5e61e6b250", "patch": "@@ -1,3 +1,9 @@\n+2002-10-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): True.\n+\t(ia64_output_mi_thunk): Rewrite to use rtl, and to handle the\n+\tvcall offset.\n+\n 2002-10-24  Richard Henderson  <rth@redhat.com>\n \n         PR opt/7944"}, {"sha": "63a6258d7a922822d70e0db7073001e1b643db8a", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 84, "deletions": 28, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5f13cfc6176adc33d11114023cc41b5e61e6b250", "patch": "@@ -250,7 +250,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK default_can_output_mi_thunk_no_vcall\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -8167,40 +8167,96 @@ ia64_aix_select_rtx_section (mode, x, align)\n   flag_pic = save_pic;\n }\n \n+/* Output the assembler code for a thunk function.  THUNK_DECL is the\n+   declaration for the thunk function itself, FUNCTION is the decl for\n+   the target function.  DELTA is an immediate constant offset to be\n+   added to THIS.  If VCALL_OFFSET is non-zero, the word at\n+   *(*this + vcall_offset) should be added to THIS.  */\n+\n static void\n ia64_output_mi_thunk (file, thunk, delta, vcall_offset, function)\n      FILE *file;\n      tree thunk ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT delta;\n-     HOST_WIDE_INT vcall_offset ATTRIBUTE_UNUSED;\n+     HOST_WIDE_INT vcall_offset;\n      tree function;\n {\n-  if (CONST_OK_FOR_I (delta))\t\t\t\t\t\t\n-    {\t\t\t\t\t\t\t\t\t\n-      fprintf (file, \"\\tadds r32 = \");\t\t\t\t\t\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\t\n-      fprintf (file, \", r32\\n\");\t\t\t\t\t\n-    }\t\t\t\t\t\t\t\t\t\n-  else\t\t\t\t\t\t\t\t\t\n-    {\t\t\t\t\t\t\t\t\t\n-      if (CONST_OK_FOR_J (delta))\t\t\t\t\t\n-        {\t\t\t\t\t\t\t\t\n-          fprintf (file, \"\\taddl r2 = \");\t\t\t\t\n-          fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\n-          fprintf (file, \", r0\\n\");\t\t\t\t\t\n-        }\t\t\t\t\t\t\t\t\n-      else\t\t\t\t\t\t\t\t\n-        {\t\t\t\t\t\t\t\t\n-\t  fprintf (file, \"\\tmovl r2 = \");\t\t\t\t\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC, (delta));\t\t\n-\t  fprintf (file, \"\\n\");\t\t\t\t\t\t\n-        }\t\t\t\t\t\t\t\t\n-      fprintf (file, \"\\t;;\\n\");\t\t\t\t\t\t\n-      fprintf (file, \"\\tadd r32 = r2, r32\\n\");\t\t\t\t\n-    }\t\t\t\t\t\t\t\t\t\n-  fprintf (file, \"\\tbr \");\t\t\t\t\t\t\n-  assemble_name (file, XSTR (XEXP (DECL_RTL (function), 0), 0));\t\n-  fprintf (file, \"\\n\");\t\t\t\t\t\t\t\n+  rtx this, insn, funexp;\n+\n+  /* Set things up as ia64_expand_prologue might.  */\n+  last_scratch_gr_reg = 15;\n+\n+  memset (&current_frame_info, 0, sizeof (current_frame_info));\n+  current_frame_info.spill_cfa_off = -16;\n+  current_frame_info.n_input_regs = 1;\n+  current_frame_info.need_regstk = (TARGET_REG_NAMES != 0);\n+\n+  if (!TARGET_REG_NAMES)\n+    reg_names[IN_REG (0)] = ia64_reg_numbers[0];\n+\n+  /* Mark the end of the (empty) prologue.  */\n+  emit_note (NULL, NOTE_INSN_PROLOGUE_END);\n+\n+  this = gen_rtx_REG (Pmode, IN_REG (0));\n+\n+  /* Apply the constant offset, if required.  */\n+  if (delta)\n+    {\n+      rtx delta_rtx = GEN_INT (delta);\n+\n+      if (!CONST_OK_FOR_I (delta))\n+\t{\n+\t  rtx tmp = gen_rtx_REG (Pmode, 2);\n+\t  emit_move_insn (tmp, delta_rtx);\n+\t  delta_rtx = tmp;\n+\t}\n+      emit_insn (gen_adddi3 (this, this, delta_rtx));\n+    }\n+\n+  /* Apply the offset from the vtable, if required.  */\n+  if (vcall_offset)\n+    {\n+      rtx vcall_offset_rtx = GEN_INT (vcall_offset);\n+      rtx tmp = gen_rtx_REG (Pmode, 2);\n+\n+      emit_move_insn (tmp, gen_rtx_MEM (Pmode, this));\n+\n+      if (!CONST_OK_FOR_J (vcall_offset))\n+\t{\n+\t  rtx tmp2 = gen_rtx_REG (Pmode, next_scratch_gr_reg ());\n+\t  emit_move_insn (tmp2, vcall_offset_rtx);\n+\t  vcall_offset_rtx = tmp2;\n+\t}\n+      emit_insn (gen_adddi3 (tmp, tmp, vcall_offset_rtx));\n+\n+      emit_move_insn (tmp, gen_rtx_MEM (Pmode, tmp));\n+\n+      emit_insn (gen_adddi3 (this, this, tmp));\n+    }\n+\n+  /* Generate a tail call to the target function.  */\n+  if (! TREE_USED (function))\n+    {\n+      assemble_external (function);\n+      TREE_USED (function) = 1;\n+    }\n+  funexp = XEXP (DECL_RTL (function), 0);\n+  funexp = gen_rtx_MEM (FUNCTION_MODE, funexp);\n+  ia64_expand_call (NULL_RTX, funexp, NULL_RTX, 1);\n+  insn = get_last_insn ();\n+  SIBLING_CALL_P (insn) = 1;\n+  emit_barrier ();\n+\n+  /* Run just enough of rest_of_compilation to get the insns emitted.\n+     There's not really enough bulk here to make other passes such as\n+     instruction scheduling worth while.  Note that use_thunk calls\n+     assemble_start_function and assemble_end_function.  */\n+  insn = get_insns ();\n+  emit_all_insn_group_barriers (NULL, insn);\n+  shorten_branches (insn);\n+  final_start_function (insn, file, 1);\n+  final (insn, file, 1, 0);\n+  final_end_function ();\n }\n \n #include \"gt-ia64.h\""}, {"sha": "9823511e05d4c3c9b2a1e8053a47de11e2abd181", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5f13cfc6176adc33d11114023cc41b5e61e6b250", "patch": "@@ -1,3 +1,7 @@\n+2002-10-24  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/inherit/thunk1.C: Enable for ia64.\n+\n 2002-10-23  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/8067"}, {"sha": "4426419e9daf4c6428b6c1eca7d92b06d2638871", "filename": "gcc/testsuite/g++.dg/inherit/thunk1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f13cfc6176adc33d11114023cc41b5e61e6b250/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fthunk1.C?ref=5f13cfc6176adc33d11114023cc41b5e61e6b250", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target i?86-*-* x86_64-*-* s390*-*-* alpha*-*-* } }\n+// { dg-do run { target i?86-*-* x86_64-*-* s390*-*-* alpha*-*-* ia64-*-* } }\n \n #include <stdarg.h>\n "}]}