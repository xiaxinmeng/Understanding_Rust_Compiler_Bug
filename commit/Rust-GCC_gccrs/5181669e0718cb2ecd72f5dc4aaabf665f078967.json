{"sha": "5181669e0718cb2ecd72f5dc4aaabf665f078967", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE4MTY2OWUwNzE4Y2IyZWNkNzJmNWRjNGFhYWJmNjY1ZjA3ODk2Nw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T07:53:49Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T07:53:49Z"}, "message": "Initial revision\n\nFrom-SVN: r7488", "tree": {"sha": "358ac364e35c9316142440e67d1683d78c802e01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/358ac364e35c9316142440e67d1683d78c802e01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5181669e0718cb2ecd72f5dc4aaabf665f078967", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5181669e0718cb2ecd72f5dc4aaabf665f078967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5181669e0718cb2ecd72f5dc4aaabf665f078967", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5181669e0718cb2ecd72f5dc4aaabf665f078967/comments", "author": null, "committer": null, "parents": [{"sha": "a8d2b75275a7a3619e61843adc86152b623ebf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8d2b75275a7a3619e61843adc86152b623ebf9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8d2b75275a7a3619e61843adc86152b623ebf9b"}], "stats": {"total": 199, "additions": 199, "deletions": 0}, "files": [{"sha": "9800547a676e7f08fc745576d0af39b80b83fcd8", "filename": "gcc/config/sparc/sp64-aout.h", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-aout.h?ref=5181669e0718cb2ecd72f5dc4aaabf665f078967", "patch": "@@ -0,0 +1,49 @@\n+/* Definitions of target machine for GNU compiler,\n+   for Sun SPARC-V9 on a hypothetical a.out format machine.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Doug Evans, dje@cygnus.com.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n+   a v8/v9 compiler, this isn't the place to do it.  */\n+/* ??? Until real v9 machines exist, all of this is subject to change.  */\n+/* ??? This file should really be called sp64-sunos4.h or some such but that\n+   would be a bit misleading since no such machines exist yet.  The current\n+   name is also misleading since the term \"aout\" is more properly applied to\n+   embedded configurations.  */\n+\n+#define SPARCV9 /* See sparc.h.  */\n+\n+#include \"sparc/sparc.h\"\n+\n+/* A v9 compiler with 32 bit integers and 64 bit pointers,\n+   in a Medium/Low code model with only 32 bit assembler support.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_MEDLOW + MASK_ENV32 + MASK_PTR64 + MASK_HARD_QUAD + MASK_EPILOGUE + MASK_FPU)\n+\n+/* ??? Disabled for v9 as the current implementation of the Medium/Anywhere\n+   code model needs this in the data segment (still true?).  Let's hope the\n+   assembler is fixed.  */\n+#undef JUMP_TABLES_IN_TEXT_SECTION\n+\n+/* Put all data in the data segment (necessary for the current implementation\n+   of the Medium/Anywhere code model - see if still true).  */\n+\n+#define READONLY_DATA_SECTION data_section"}, {"sha": "6c518b34fa2191d7ecdc84b10068643550b5cb8f", "filename": "gcc/config/sparc/sp64-elf.h", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsp64-elf.h?ref=5181669e0718cb2ecd72f5dc4aaabf665f078967", "patch": "@@ -0,0 +1,147 @@\n+/* Definitions of target machine for GNU compiler,\n+   for Sun SPARC-V9 on a hypothetical elf format machine.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Doug Evans, dje@cygnus.com.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* This is a v9 only compiler.  -mv8 is not expected to work.  If you want\n+   a v8/v9 compiler, this isn't the place to do it.  */\n+/* ??? Until real v9 machines exist, all of this is subject to change.  */\n+/* ??? This file should really be called sp64-sol2.h or some such but that\n+   would be a bit misleading since no such machines exist yet.  The current\n+   name is also misleading since the term \"elf\" is more properly applied to\n+   embedded configurations.  */\n+\n+#define SPARCV9 /* See sparc.h.  */\n+\n+/* ??? We're taking the scheme of including another file and then overriding\n+   the values we don't like a bit too far here.  The alternative is to more or\n+   less duplicate all of svr4.h, sparc/sysv4.h, and sparc/sol2.h here\n+   (suitably cleaned up).  Until real sparc64 machines exist, it's not clear\n+   which is better.  */\n+\n+#include \"sparc/sol2.h\"\n+\n+/* A v9 compiler with stack-bias, 32 bit integers and 64 bit pointers,\n+   in a Medium/Anywhere code model environment.  */\n+\n+#undef TARGET_DEFAULT\n+#define TARGET_DEFAULT \\\n+  (MASK_V9 + MASK_STACK_BIAS + MASK_MEDANY + MASK_PTR64 + MASK_HARD_QUAD + MASK_EPILOGUE + MASK_FPU)\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+ \"-Dsun -Dsparc -Dunix -D__svr4__ -D__sparc_v9__ \\\n+  -Asystem(unix) -Asystem(svr4) -Acpu(sparc64) -Amachine(sparc64)\"\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"\\\n+%{mint64:-D__INT_MAX__=9223372036854775807LL -D__LONG_MAX__=9223372036854775807LL} \\\n+%{mlong64:-D__LONG_MAX__=9223372036854775807LL} \\\n+\"\n+\n+#undef MD_EXEC_PREFIX\n+#undef MD_STARTFILE_PREFIX\n+\n+/* Use the default (for now).  */\n+#undef STARTFILE_SPEC\n+\n+/* Use the default (for now).  */\n+#undef LIB_SPEC\n+\n+/* This is taken from sol2.h.  */\n+#undef LINK_SPEC\n+#define LINK_SPEC \"\\\n+%{!nostdlib:%{!r*:%{!e*:-e _start}}}\n+%{h*} %{V} %{v:%{!V:-V}} \\\n+%{b} %{Wl,*:%*} \\\n+%{static:-dn -Bstatic} \\\n+%{shared:-G -dy} \\\n+%{symbolic:-Bsymbolic -G -dy} \\\n+%{G:-G} \\\n+%{YP,*} \\\n+%{R*} \\\n+%{Qy:} %{!Qn:-Qy} \\\n+\"\n+\n+/* Unfortunately, svr4.h redefines these so we have to restore them to\n+   their original values in sparc.h.  */\n+/* ??? It might be possible to eventually get svr4.h to do the right thing.  */\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \\\n+  (POINTER_SIZE == 64 ? \"long long int\"\t\t\t\t\\\n+   : POINTER_SIZE == 32 && LONG_TYPE_SIZE == 32 ? \"long\"\t\\\n+   : 0 /*abort*/)\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \\\n+  (POINTER_SIZE == 64 ? \"long long unsigned int\"\t\t\\\n+   : POINTER_SIZE == 32 && LONG_TYPE_SIZE == 32 ? \"long unsigned int\" \\\n+   : 0 /*abort*/)\n+\n+/* ??? This should be 32 bits for v9 but what can we do?  */\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+/* ??? Disabled for v9 as the current implementation of the Medium/Anywhere\n+   code model needs this in the data segment (still true?).  Let's hope the\n+   assembler is fixed.  */\n+#undef JUMP_TABLES_IN_TEXT_SECTION\n+\n+/* System V Release 4 uses DWARF debugging info.\n+   GDB doesn't support 64 bit stabs yet and the desired debug format is DWARF\n+   anyway so it is the default.  */\n+\n+#define DWARF_DEBUGGING_INFO\n+#define DBX_DEBUGGING_INFO\n+\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+\n+/* Define the names of various pseudo-ops used by the Sparc/svr4 assembler.\n+   ??? If ints are 64 bits then UNALIGNED_INT_ASM_OP (defined elsewhere) is\n+   misnamed.  These should all refer to explicit sizes (half/word/xword?),\n+   anything other than short/int/long/etc.  */\n+\n+#define UNALIGNED_LONGLONG_ASM_OP\t\".uaxword\"\n+\n+/* DWARF stuff.  */\n+\n+#define ASM_OUTPUT_DWARF_ADDR(FILE,LABEL)\t\t\t\t\\\n+ do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_LONGLONG_ASM_OP);\t\t\\\n+\tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#define ASM_OUTPUT_DWARF_ADDR_CONST(FILE,RTX)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf ((FILE), \"\\t%s\\t\", UNALIGNED_LONGLONG_ASM_OP);\t\t\\\n+    output_addr_const ((FILE), (RTX));\t\t\t\t\t\\\n+    fputc ('\\n', (FILE));\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* ??? Not sure if this should be 4 or 8 bytes.  4 works for now.  */\n+#define ASM_OUTPUT_DWARF_REF(FILE,LABEL)\t\t\t\t\\\n+ do {\tfprintf ((FILE), \"\\t%s\\t\", UNALIGNED_INT_ASM_OP);\t\t\\\n+\tassemble_name (FILE, LABEL);\t\t\t\t\t\\\n+\tfprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)"}, {"sha": "9374a73d614ad6d82801ea08bf8a7d9f1bcadcc6", "filename": "gcc/config/sparc/t-sp64", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Ft-sp64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5181669e0718cb2ecd72f5dc4aaabf665f078967/gcc%2Fconfig%2Fsparc%2Ft-sp64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sp64?ref=5181669e0718cb2ecd72f5dc4aaabf665f078967", "patch": "@@ -0,0 +1,3 @@\n+LIBGCC1 = libgcc1.null\n+CROSS_LIBGCC1 = libgcc1.null\n+"}]}