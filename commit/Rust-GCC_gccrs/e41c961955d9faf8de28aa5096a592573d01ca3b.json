{"sha": "e41c961955d9faf8de28aa5096a592573d01ca3b", "node_id": "C_kwDOANBUbNoAKGU0MWM5NjE5NTVkOWZhZjhkZTI4YWE1MDk2YTU5MjU3M2QwMWNhM2I", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-16T11:59:23Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Make Ident ffi-safe\n\nMake the Ident rust type ffi-safe. This involved a rework of the\nstructure construction/destroy which will be delagated to the cpp part.\n\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/ident.rs: Make Ident ffi-safe.\n\t* librust/proc_macro/rust/ident.rs: Refactor display trait.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "45e1c2a2161c533ac2b02ac786045e7d7526b8bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45e1c2a2161c533ac2b02ac786045e7d7526b8bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41c961955d9faf8de28aa5096a592573d01ca3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41c961955d9faf8de28aa5096a592573d01ca3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41c961955d9faf8de28aa5096a592573d01ca3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41c961955d9faf8de28aa5096a592573d01ca3b/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905cf7298dea48f6b354ec98810b91f9b16c0541", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/905cf7298dea48f6b354ec98810b91f9b16c0541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/905cf7298dea48f6b354ec98810b91f9b16c0541"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "880cf77a411438d8f7f31e36db6c42f019cc5289", "filename": "librust/proc_macro/rust/bridge/ident.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41c961955d9faf8de28aa5096a592573d01ca3b/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41c961955d9faf8de28aa5096a592573d01ca3b/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs?ref=e41c961955d9faf8de28aa5096a592573d01ca3b", "patch": "@@ -1,26 +1,29 @@\n use bridge::span::Span;\n-use std::ffi::CString;\n+use std::ffi::{c_char, CStr, CString};\n+use std::fmt;\n+\n+extern \"C\" {\n+    fn Ident__new(string: *const c_char) -> Ident;\n+    fn Ident__new_raw(string: *const c_char) -> Ident;\n+    fn Ident__drop(ident: *const Ident);\n+}\n \n #[repr(C)]\n #[derive(Clone, Debug)]\n pub struct Ident {\n     pub(crate) is_raw: bool,\n-    pub(crate) val: CString,\n+    pub(crate) val: *const c_char,\n }\n \n impl Ident {\n     pub fn new(string: &str, _span: Span) -> Self {\n-        Ident {\n-            is_raw: false,\n-            val: CString::new(string).expect(\"Cannot create CString from rust String\"),\n-        }\n+        let string = CString::new(string).expect(\"Cannot convert to CString\");\n+        unsafe { Ident__new(string.as_ptr()) }\n     }\n \n     pub fn new_raw(string: &str, _span: Span) -> Self {\n-        Ident {\n-            is_raw: true,\n-            val: CString::new(string).expect(\"Cannot create CString from rust String\"),\n-        }\n+        let string = CString::new(string).expect(\"Cannot convert to CString\");\n+        unsafe { Ident__new_raw(string.as_ptr()) }\n     }\n \n     pub fn span(&self) -> Span {\n@@ -31,3 +34,26 @@ impl Ident {\n         let _ = span;\n     }\n }\n+\n+impl Drop for Ident {\n+    fn drop(&mut self) {\n+        unsafe { Ident__drop(self as *const Ident) }\n+    }\n+}\n+\n+impl fmt::Display for Ident {\n+    /// Display as lossless converted string.\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.is_raw {\n+            f.write_str(\"r#\")?;\n+        }\n+        fmt::Display::fmt(\n+            unsafe {\n+                CStr::from_ptr(self.val)\n+                    .to_str()\n+                    .expect(\"Cannot convert back to rust string\")\n+            },\n+            f,\n+        )\n+    }\n+}"}, {"sha": "809c9939e09b369cf8906f7193efae03e022ecca", "filename": "librust/proc_macro/rust/ident.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41c961955d9faf8de28aa5096a592573d01ca3b/librust%2Fproc_macro%2Frust%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41c961955d9faf8de28aa5096a592573d01ca3b/librust%2Fproc_macro%2Frust%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fident.rs?ref=e41c961955d9faf8de28aa5096a592573d01ca3b", "patch": "@@ -56,17 +56,7 @@ impl Ident {\n impl fmt::Display for Ident {\n     /// Display as lossless converted string.\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if self.0.is_raw {\n-            f.write_str(\"r#\")?;\n-        }\n-        fmt::Display::fmt(\n-            &self\n-                .0\n-                .val\n-                .to_str()\n-                .expect(\"Cannot convert back to rust string\"),\n-            f,\n-        )\n+        self.0.fmt(f)\n     }\n }\n "}]}