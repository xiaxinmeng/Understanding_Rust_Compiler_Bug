{"sha": "b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUxMDc2NWRlZGZlYzU3M2M3NTZjYjFmY2ZjYjViMGMzODMwYzVlOQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T11:43:39Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T11:43:39Z"}, "message": "Fix \"noinit\" attribute being ignored for -O0 and -fdata-sections\n\nVariables with the \"noinit\" attribute are ignored at -O0 because they\nare treated like a regular bss variable and placed in the .bss section.\n\nWith -fdata-sections they are ignored because they are not handled in\nresolve_unique_section.\n\ngcc/ChangeLog:\n\n\t* tree.h (DECL_NOINIT_P): Define.\n\t* varasm.c (DECL_NOINIT_P): Check DECL_NOINIT_P before using\n\tunnamed bss/lcomm sections for bss_initializer variables.\n\t(default_elf_select_section): Use DECL_NOINIT_P instead of\n\tlooking up attribute for .noinit section selection.\n\t(default_unique_section): Check DECL_NOINIT_P for .noinit\n\tsection selection.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/execute/noinit-attribute.c: Don't override\n\toptimization options set by torture test harness.\n\t* lib/target-supports.exp (check_effective_target_noinit): Adjust\n\tcomment formatting.", "tree": {"sha": "fc1c04fa396e7abcbd4fb88b6cf1d8b1fd091794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc1c04fa396e7abcbd4fb88b6cf1d8b1fd091794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8c54359a593e4e53192303159144dd70bfced1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8c54359a593e4e53192303159144dd70bfced1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8c54359a593e4e53192303159144dd70bfced1"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "c8fa22bf38b888af916df9b2ba8e1fb667b7c204", "filename": "gcc/testsuite/gcc.c-torture/execute/noinit-attribute.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnoinit-attribute.c?ref=b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do run } */\n /* { dg-require-effective-target noinit } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-Wattributes\" } */\n /* { dg-skip-if \"data LMA != VMA\" { msp430-*-* } { \"-mlarge\" } } */\n \n /* This test checks that noinit data is handled correctly."}, {"sha": "43ac526567f17dd7f64d28a53e9439ec5493ef0f", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "patch": "@@ -368,7 +368,7 @@ proc check_weak_override_available { } {\n     return [check_weak_available]\n }\n \n-# The noinit attribute is only supported by some targets.\n+# The \"noinit\" attribute is only supported by some targets.\n # This proc returns 1 if it's supported, 0 if it's not.\n \n proc check_effective_target_noinit { } {"}, {"sha": "664449aa32991eb0469b053419242414952e2528", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "patch": "@@ -2662,6 +2662,13 @@ extern tree vector_element_bits_tree (const_tree);\n #define DECL_PRESERVE_P(DECL) \\\n   DECL_COMMON_CHECK (DECL)->decl_common.preserve_flag\n \n+/* Nonzero for a decl that is decorated with the \"noinit\" attribute.\n+   decls with this attribute are placed into the \".noinit\" section, so they are\n+   not initialized by the target's startup code.  */\n+#define DECL_NOINIT_P(DECL)\t\\\n+  (DECL_P (DECL)\t\t\\\n+   && (lookup_attribute (\"noinit\", DECL_ATTRIBUTES (DECL)) != NULL_TREE))\n+\n /* For function local variables of COMPLEX and VECTOR types,\n    indicates that the variable is not aliased, and that all\n    modifications to the variable have been adjusted so that"}, {"sha": "da7d0d7d91d15168784d4b21ba467e75a45b8cf0", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b510765dedfec573c756cb1fcfcb5b0c3830c5e9/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "patch": "@@ -1241,6 +1241,7 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n \n   if (ADDR_SPACE_GENERIC_P (as)\n       && !DECL_THREAD_LOCAL_P (decl)\n+      && !DECL_NOINIT_P (decl)\n       && !(prefer_noswitch_p && targetm.have_switchable_bss_sections)\n       && bss_initializer_p (decl))\n     {\n@@ -7042,13 +7043,11 @@ default_elf_select_section (tree decl, int reloc,\n       sname = \".tdata\";\n       break;\n     case SECCAT_BSS:\n-      if (DECL_P (decl)\n-\t  && lookup_attribute (\"noinit\", DECL_ATTRIBUTES (decl)) != NULL_TREE)\n+      if (DECL_P (decl) && DECL_NOINIT_P (decl))\n \t{\n \t  sname = \".noinit\";\n \t  break;\n \t}\n-\n       if (bss_section)\n \treturn bss_section;\n       sname = \".bss\";\n@@ -7111,6 +7110,11 @@ default_unique_section (tree decl, int reloc)\n       prefix = one_only ? \".s\" : \".sdata\";\n       break;\n     case SECCAT_BSS:\n+      if (DECL_P (decl) && DECL_NOINIT_P (decl))\n+\t{\n+\t  prefix = one_only ? \".n\" : \".noinit\";\n+\t  break;\n+\t}\n       prefix = one_only ? \".b\" : \".bss\";\n       break;\n     case SECCAT_SBSS:"}]}