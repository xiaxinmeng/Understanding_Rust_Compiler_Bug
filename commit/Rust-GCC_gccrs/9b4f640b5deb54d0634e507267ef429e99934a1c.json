{"sha": "9b4f640b5deb54d0634e507267ef429e99934a1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0ZjY0MGI1ZGViNTRkMDYzNGU1MDcyNjdlZjQyOWU5OTkzNGExYw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-04-06T19:43:12Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-04-06T19:43:12Z"}, "message": "* sh.h (STRUCT_VALUE, RETURN_IN_MEMORY): Define.\n\nFrom-SVN: r32977", "tree": {"sha": "47938717eaab444e6fd39d61075bf399724ef43c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47938717eaab444e6fd39d61075bf399724ef43c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4f640b5deb54d0634e507267ef429e99934a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f640b5deb54d0634e507267ef429e99934a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4f640b5deb54d0634e507267ef429e99934a1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4f640b5deb54d0634e507267ef429e99934a1c/comments", "author": null, "committer": null, "parents": [{"sha": "2f6f4b96518a3e2e911acb32d2ceb48fba761686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f6f4b96518a3e2e911acb32d2ceb48fba761686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f6f4b96518a3e2e911acb32d2ceb48fba761686"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "b4aabb47bea8326565a5010d74c9b56e9f8514ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4f640b5deb54d0634e507267ef429e99934a1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4f640b5deb54d0634e507267ef429e99934a1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b4f640b5deb54d0634e507267ef429e99934a1c", "patch": "@@ -1,3 +1,7 @@\n+Thu Apr  6 20:39:26 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* sh.h (STRUCT_VALUE, RETURN_IN_MEMORY): Define.\n+\n Thu Apr  6 19:34:08 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* config/sh/lib1funcs.asm (___udivsi3_i4):"}, {"sha": "efeab0a6b9e93907ebfc3aa711454d71933e7c3e", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4f640b5deb54d0634e507267ef429e99934a1c/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4f640b5deb54d0634e507267ef429e99934a1c/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=9b4f640b5deb54d0634e507267ef429e99934a1c", "patch": "@@ -592,7 +592,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n    where the address is passed.  If it returns 0, the address is\n    passed as an \"invisible\" first argument.  */\n \n-/*#define STRUCT_VALUE ((rtx)0)*/\n+/* The Hitachi calling convention doesn't quite fit into this scheme since\n+   the address is passed like an invisible argument, but one that is always\n+   passed in memory.  We approximate this by saying where the pointer is;\n+   however, this will put any actual arguments that are passed in memory\n+   in the wrong place.\n+   If we wanted to implement this exactly, we'd need a STRUCT_VALUE of 0,\n+   an extra field in CUMULATIVE_ARGS, initialize it in INIT_CUMULATIVE_ARGS,\n+   and hack FUNCTION_VALUE / FUNCTION_ARG_ADVANCE to look directly at\n+   DECL_RESULT of the current function in conjunction with CUM to determine\n+   if the argument in question it is a struct value pointer, and if it is,\n+   pass it in memory.  */\n+#define STRUCT_VALUE \\\n+  (TARGET_HITACHI \\\n+   ? gen_rtx_MEM (Pmode, arg_pointer_rtx) \\\n+   : gen_rtx_REG (Pmode, STRUCT_VALUE_REGNUM))\n+\n+#define RETURN_IN_MEMORY(TYPE) \\\n+  (TYPE_MODE (TYPE) == BLKmode \\\n+   || TARGET_HITACHI && TREE_CODE (TYPE) == RECORD_TYPE)\n \n /* Don't default to pcc-struct-return, because we have already specified\n    exactly how to return structures in the RETURN_IN_MEMORY macro.  */"}]}