{"sha": "22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlYTllYzBlOGFjZmQ2YThlNDJhYmEzNDM3YmY2MWZkNmZkMDRjMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-14T15:18:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-14T15:18:11Z"}, "message": "alias.c (component_uses_parent_alias_set): Constify.\n\n\t* alias.c (component_uses_parent_alias_set): Constify.\n\t* alias.h (component_uses_parent_alias_set): Likewise.\n\t* cfgrtl.c (print_rtl_with_bb): Likewise.\n\t* double-int.c (tree_to_double_int, double_int_fits_to_tree_p,\n\tmpz_get_double_int): Likewise.\n\t* double-int.h (double_int_fits_to_tree_p, tree_to_double_int,\n\tmpz_get_double_int): Likewise.\n\t* expr.c (is_aligning_offset, undefined_operand_subword_p,\n\tmostly_zeros_p, all_zeros_p, safe_from_p, is_aligning_offset):\n\tLikewise.\n\t* expr.h (safe_from_p): Likewise.\n\t* gimple-low.c (try_catch_may_fallthru, block_may_fallthru):\n\tLikewise.\n\t* gimplify.c (should_carry_locus_p, zero_sized_field_decl,\n\tzero_sized_type, goa_lhs_expr_p): Likewise.\n\t* omp-low.c (is_variable_sized, use_pointer_for_field): Likewise.\n\t* rtl.h (print_rtl_with_bb): Likewise.\n\t* sched-vis.c (print_exp, print_value, print_pattern): Likewise.\n\t* tree-cfg.c (const_first_stmt, const_last_stmt): New.\n\t* tree-flow-inline.h (bb_stmt_list): Constify.\n\t(cbsi_start, cbsi_last, cbsi_end_p, cbsi_next, cbsi_prev,\n\tcbsi_stmt): New.\n\t* tree-flow.h (const_block_stmt_iterator, cbsi_start, cbsi_last,\n\tconst_first_stmt, const_last_stmt): New.\n\t(block_may_fallthru, empty_block_p): Constify.\n\t* tree-iterator.c (EXPR_FIRST_BODY, EXPR_LAST_BODY,\n\tEXPR_ONLY_BODY): New.\n\t(expr_first, expr_last, expr_only): Use macro for body.\n\t(const_expr_first, const_expr_last, const_expr_only): New.\n\t* tree-iterator.h (const_tree_stmt_iterator, ctsi_start,\n\tctsi_last, ctsi_end_p, ctsi_one_before_end_p, ctsi_next,\n\tctsi_prev, ctsi_stmt): New.\n\t* tree-scalar-evolution.c (get_loop_exit_condition): Constify.\n\t* tree-scalar-evolution.h (get_loop_exit_condition): Likewise.\n\t* tree-ssa-loop-niter.c (loop_only_exit_p,\n\tderive_constant_upper_bound): Likewise.\n\t* tree-ssa-phiopt.c (empty_block_p): Likewise.\n\t* tree-ssa-threadupdate.c (redirection_block_p): Likewise.\n\t* tree-vectorizer.c (slpeel_can_duplicate_loop_p): Likewise.\n\t* tree-vectorizer.h (slpeel_can_duplicate_loop_p): Likewise.\n\t* tree-vrp.c (vrp_bitmap_equal_p): Likewise.\n\t* tree.c (get_type_static_bounds): Likewise.\n\t* tree.h (const_expr_first, const_expr_last, const_expr_only): New.\n\t(get_type_static_bounds): Constify.\n\nFrom-SVN: r127483", "tree": {"sha": "94820a53d64bc84958636e8e87e79b6b817705b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94820a53d64bc84958636e8e87e79b6b817705b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/comments", "author": null, "committer": null, "parents": [{"sha": "d39d658dbe7c5682da000db60d4ea6209ce6ab66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d39d658dbe7c5682da000db60d4ea6209ce6ab66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d39d658dbe7c5682da000db60d4ea6209ce6ab66"}], "stats": {"total": 410, "additions": 308, "deletions": 102}, "files": [{"sha": "c23de5cd4e8c10ac685022723ed27acc492234b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -1,3 +1,50 @@\n+2007-08-14  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* alias.c (component_uses_parent_alias_set): Constify.\n+\t* alias.h (component_uses_parent_alias_set): Likewise.\n+\t* cfgrtl.c (print_rtl_with_bb): Likewise.\n+\t* double-int.c (tree_to_double_int, double_int_fits_to_tree_p,\n+\tmpz_get_double_int): Likewise.\n+\t* double-int.h (double_int_fits_to_tree_p, tree_to_double_int,\n+\tmpz_get_double_int): Likewise.\n+\t* expr.c (is_aligning_offset, undefined_operand_subword_p,\n+\tmostly_zeros_p, all_zeros_p, safe_from_p, is_aligning_offset):\n+\tLikewise.\n+\t* expr.h (safe_from_p): Likewise.\n+\t* gimple-low.c (try_catch_may_fallthru, block_may_fallthru):\n+\tLikewise.\n+\t* gimplify.c (should_carry_locus_p, zero_sized_field_decl,\n+\tzero_sized_type, goa_lhs_expr_p): Likewise.\n+\t* omp-low.c (is_variable_sized, use_pointer_for_field): Likewise.\n+\t* rtl.h (print_rtl_with_bb): Likewise.\n+\t* sched-vis.c (print_exp, print_value, print_pattern): Likewise.\n+\t* tree-cfg.c (const_first_stmt, const_last_stmt): New.\n+\t* tree-flow-inline.h (bb_stmt_list): Constify.\n+\t(cbsi_start, cbsi_last, cbsi_end_p, cbsi_next, cbsi_prev,\n+\tcbsi_stmt): New.\n+\t* tree-flow.h (const_block_stmt_iterator, cbsi_start, cbsi_last,\n+\tconst_first_stmt, const_last_stmt): New.\n+\t(block_may_fallthru, empty_block_p): Constify.\n+\t* tree-iterator.c (EXPR_FIRST_BODY, EXPR_LAST_BODY,\n+\tEXPR_ONLY_BODY): New.\n+\t(expr_first, expr_last, expr_only): Use macro for body.\n+\t(const_expr_first, const_expr_last, const_expr_only): New.\n+\t* tree-iterator.h (const_tree_stmt_iterator, ctsi_start,\n+\tctsi_last, ctsi_end_p, ctsi_one_before_end_p, ctsi_next,\n+\tctsi_prev, ctsi_stmt): New.\n+\t* tree-scalar-evolution.c (get_loop_exit_condition): Constify.\n+\t* tree-scalar-evolution.h (get_loop_exit_condition): Likewise.\n+\t* tree-ssa-loop-niter.c (loop_only_exit_p,\n+\tderive_constant_upper_bound): Likewise.\n+\t* tree-ssa-phiopt.c (empty_block_p): Likewise.\n+\t* tree-ssa-threadupdate.c (redirection_block_p): Likewise.\n+\t* tree-vectorizer.c (slpeel_can_duplicate_loop_p): Likewise.\n+\t* tree-vectorizer.h (slpeel_can_duplicate_loop_p): Likewise.\n+\t* tree-vrp.c (vrp_bitmap_equal_p): Likewise.\n+\t* tree.c (get_type_static_bounds): Likewise.\n+\t* tree.h (const_expr_first, const_expr_last, const_expr_only): New.\n+\t(get_type_static_bounds): Constify.\n+\n 2007-08-14  Rask Ingemann Lambertsen  <rask@sygehus.dk>\n \n \tPR target/30315"}, {"sha": "ec298423020918442ffd655cb0b216bb42052de1", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -446,7 +446,7 @@ find_base_decl (tree t)\n    assignable alias sets.  */\n \n bool\n-component_uses_parent_alias_set (tree t)\n+component_uses_parent_alias_set (const_tree t)\n {\n   while (1)\n     {"}, {"sha": "a24549391feaa435009f6ad2e7f50a95bdca7722", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -26,7 +26,7 @@ typedef HOST_WIDE_INT alias_set_type;\n extern alias_set_type new_alias_set (void);\n extern alias_set_type get_varargs_alias_set (void);\n extern alias_set_type get_frame_alias_set (void);\n-extern bool component_uses_parent_alias_set (tree);\n+extern bool component_uses_parent_alias_set (const_tree);\n extern bool alias_set_subset_of (alias_set_type, alias_set_type);\n \n /* This alias set can be used to force a memory to conflict with all"}, {"sha": "5d736a5990bd53f30566fa4b22595c2792d091c4", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -1526,9 +1526,9 @@ rtl_dump_bb (basic_block bb, FILE *outf, int indent)\n    basic block.  */\n \n void\n-print_rtl_with_bb (FILE *outf, rtx rtx_first)\n+print_rtl_with_bb (FILE *outf, const_rtx rtx_first)\n {\n-  rtx tmp_rtx;\n+  const_rtx tmp_rtx;\n   if (rtx_first == 0)\n     fprintf (outf, \"(nil)\\n\");\n   else"}, {"sha": "7bcf88f2780d87d899ff5024d42ad6f1e08d099c", "filename": "gcc/double-int.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -112,7 +112,7 @@ double_int_sext (double_int cst, unsigned prec)\n    is unsigned.  */\n \n double_int\n-tree_to_double_int (tree cst)\n+tree_to_double_int (const_tree cst)\n {\n   /* We do not need to call double_int_restrict here to ensure the semantics as\n      described, as this is the default one for trees.  */\n@@ -304,7 +304,7 @@ double_int_to_tree (tree type, double_int cst)\n    to be the same as the signedness of TYPE.  */\n \n bool\n-double_int_fits_to_tree_p (tree type, double_int cst)\n+double_int_fits_to_tree_p (const_tree type, double_int cst)\n {\n   double_int ext = double_int_ext (cst,\n \t\t\t\t   TYPE_PRECISION (type),\n@@ -442,7 +442,7 @@ mpz_set_double_int (mpz_t result, double_int val, bool uns)\n    appropriate minimum or maximum TYPE bound.  */\n \n double_int\n-mpz_get_double_int (tree type, mpz_t val, bool wrap)\n+mpz_get_double_int (const_tree type, mpz_t val, bool wrap)\n {\n   unsigned HOST_WIDE_INT *vp;\n   size_t count, numb;"}, {"sha": "e82c37ee6d28e67dfdaccfc0a70eefaf71df0409", "filename": "gcc/double-int.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -60,8 +60,8 @@ union tree_node;\n /* Constructors and conversions.  */\n \n union tree_node *double_int_to_tree (union tree_node *, double_int);\n-bool double_int_fits_to_tree_p (union tree_node *, double_int);\n-double_int tree_to_double_int (union tree_node *);\n+bool double_int_fits_to_tree_p (const union tree_node *, double_int);\n+double_int tree_to_double_int (const union tree_node *);\n \n /* Constructs double_int from integer CST.  The bits over the precision of\n    HOST_WIDE_INT are filled with the sign bit.  */\n@@ -179,7 +179,7 @@ double_int_equal_p (double_int cst1, double_int cst2)\n /* Conversion to and from GMP integer representations.  */\n \n void mpz_set_double_int (mpz_t, double_int, bool);\n-double_int mpz_get_double_int (tree, mpz_t, bool);\n+double_int mpz_get_double_int (const_tree, mpz_t, bool);\n \n \n #endif /* DOUBLE_INT_H */"}, {"sha": "dc6615abac09d47700ea43c6dca731e2bd76c9ca", "filename": "gcc/expr.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -146,7 +146,7 @@ static rtx store_field (rtx, HOST_WIDE_INT, HOST_WIDE_INT, enum machine_mode,\n \n static unsigned HOST_WIDE_INT highest_pow2_factor_for_target (const_tree, const_tree);\n \n-static int is_aligning_offset (tree, tree);\n+static int is_aligning_offset (const_tree, const_tree);\n static void expand_operands (tree, tree, rtx, rtx*, rtx*,\n \t\t\t     enum expand_modifier);\n static rtx reduce_to_bit_field_precision (rtx, rtx, tree);\n@@ -3141,7 +3141,7 @@ emit_move_ccmode (enum machine_mode mode, rtx x, rtx y)\n    undefined bits of a paradoxical subreg.  */\n \n static bool\n-undefined_operand_subword_p (rtx op, int i)\n+undefined_operand_subword_p (const_rtx op, int i)\n {\n   enum machine_mode innermode, innermostmode;\n   int offset;\n@@ -4908,7 +4908,7 @@ count_type_elements (const_tree type, bool allow_flexarr)\n /* Return 1 if EXP contains mostly (3/4)  zeros.  */\n \n static int\n-mostly_zeros_p (tree exp)\n+mostly_zeros_p (const_tree exp)\n {\n   if (TREE_CODE (exp) == CONSTRUCTOR)\n \n@@ -4931,7 +4931,7 @@ mostly_zeros_p (tree exp)\n /* Return 1 if EXP contains all zeros.  */\n \n static int\n-all_zeros_p (tree exp)\n+all_zeros_p (const_tree exp)\n {\n   if (TREE_CODE (exp) == CONSTRUCTOR)\n \n@@ -6243,7 +6243,7 @@ force_operand (rtx value, rtx target)\n    searches for optimization opportunities.  */\n \n int\n-safe_from_p (rtx x, tree exp, int top_p)\n+safe_from_p (const_rtx x, tree exp, int top_p)\n {\n   rtx exp_rtl = 0;\n   int i, nops;\n@@ -9215,7 +9215,7 @@ reduce_to_bit_field_precision (rtx exp, rtx target, tree type)\n    aligned more than BIGGEST_ALIGNMENT.  */\n \n static int\n-is_aligning_offset (tree offset, tree exp)\n+is_aligning_offset (const_tree offset, const_tree exp)\n {\n   /* Strip off any conversions.  */\n   while (TREE_CODE (offset) == NON_LVALUE_EXPR"}, {"sha": "2e75916f832e58ca0c599bf3ac5016efbb722689", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -740,7 +740,7 @@ extern rtx expand_mult (enum machine_mode, rtx, rtx, rtx, int);\n extern rtx expand_mult_highpart_adjust (enum machine_mode, rtx, rtx, rtx, rtx, int);\n \n extern rtx assemble_static_space (unsigned HOST_WIDE_INT);\n-extern int safe_from_p (rtx, tree, int);\n+extern int safe_from_p (const_rtx, tree, int);\n \n /* Call this once to initialize the contents of the optabs\n    appropriately for the current target machine.  */"}, {"sha": "ba539ac7e5025c29787bfad90cf1ff2897d91661", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -344,7 +344,7 @@ lower_bind_expr (tree_stmt_iterator *tsi, struct lower_data *data)\n    This is a subroutine of block_may_fallthru.  */\n \n static bool\n-try_catch_may_fallthru (tree stmt)\n+try_catch_may_fallthru (const_tree stmt)\n {\n   tree_stmt_iterator i;\n \n@@ -394,9 +394,9 @@ try_catch_may_fallthru (tree stmt)\n    If we're wrong, we'll just delete the extra code later.  */\n \n bool\n-block_may_fallthru (tree block)\n+block_may_fallthru (const_tree block)\n {\n-  tree stmt = expr_last (block);\n+  const_tree stmt = const_expr_last (block);\n \n   switch (stmt ? TREE_CODE (stmt) : ERROR_MARK)\n     {"}, {"sha": "cea79919965934f6bc015b32517bcae98d36b0db", "filename": "gcc/gimplify.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -761,7 +761,7 @@ gimple_add_tmp_var (tree tmp)\n /* Determines whether to assign a locus to the statement STMT.  */\n \n static bool\n-should_carry_locus_p (tree stmt)\n+should_carry_locus_p (const_tree stmt)\n {\n   /* Don't emit a line note for a label.  We particularly don't want to\n      emit one for the break label, since it doesn't actually correspond\n@@ -2891,7 +2891,7 @@ gimplify_init_ctor_eval_range (tree object, tree lower, tree upper,\n /* Return true if FDECL is accessing a field that is zero sized.  */\n    \n static bool\n-zero_sized_field_decl (tree fdecl)\n+zero_sized_field_decl (const_tree fdecl)\n {\n   if (TREE_CODE (fdecl) == FIELD_DECL && DECL_SIZE (fdecl) \n       && integer_zerop (DECL_SIZE (fdecl)))\n@@ -2902,7 +2902,7 @@ zero_sized_field_decl (tree fdecl)\n /* Return true if TYPE is zero sized.  */\n    \n static bool\n-zero_sized_type (tree type)\n+zero_sized_type (const_tree type)\n {\n   if (AGGREGATE_TYPE_P (type) && TYPE_SIZE (type)\n       && integer_zerop (TYPE_SIZE (type)))\n@@ -5181,7 +5181,7 @@ gimplify_omp_workshare (tree *expr_p, tree *pre_p)\n    EXPR is this stabilized form.  */\n \n static bool\n-goa_lhs_expr_p (tree expr, tree addr)\n+goa_lhs_expr_p (const_tree expr, const_tree addr)\n {\n   /* Also include casts to other type variants.  The C front end is fond\n      of adding these for e.g. volatile variables.  This is like "}, {"sha": "5aaa7fe86823f2acb6dfe24bd1bf5cfdbbe91586", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -428,7 +428,7 @@ determine_parallel_type (struct omp_region *region)\n /* Return true if EXPR is variable sized.  */\n \n static inline bool\n-is_variable_sized (tree expr)\n+is_variable_sized (const_tree expr)\n {\n   return !TREE_CONSTANT (TYPE_SIZE_UNIT (TREE_TYPE (expr)));\n }\n@@ -481,7 +481,7 @@ maybe_lookup_field (tree var, omp_context *ctx)\n    if DECL is to be shared.  */\n \n static bool\n-use_pointer_for_field (tree decl, bool shared_p)\n+use_pointer_for_field (const_tree decl, bool shared_p)\n {\n   if (AGGREGATE_TYPE_P (TREE_TYPE (decl)))\n     return true;"}, {"sha": "ff884b314a4f208c256da5bcc1a74ddbfe9c2b21", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -2130,7 +2130,7 @@ extern rtx move_by_pieces (rtx, rtx, unsigned HOST_WIDE_INT,\n \t\t\t   unsigned int, int);\n \n /* In cfgrtl.c */\n-extern void print_rtl_with_bb (FILE *, rtx);\n+extern void print_rtl_with_bb (FILE *, const_rtx);\n \n /* In cfg.c.  */\n extern void dump_reg_info (FILE *);"}, {"sha": "7ce0f0cc6407a610634583f3bbd45257a143b9db", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -33,9 +33,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n \n static char *safe_concat (char *, char *, const char *);\n-static void print_exp (char *, rtx, int);\n-static void print_value (char *, rtx, int);\n-static void print_pattern (char *, rtx, int);\n+static void print_exp (char *, const_rtx, int);\n+static void print_value (char *, const_rtx, int);\n+static void print_pattern (char *, const_rtx, int);\n \n #define BUF_LEN 2048\n \n@@ -63,7 +63,7 @@ safe_concat (char *buf, char *cur, const char *str)\n    may be stored in objects representing values.  */\n \n static void\n-print_exp (char *buf, rtx x, int verbose)\n+print_exp (char *buf, const_rtx x, int verbose)\n {\n   char tmp[BUF_LEN];\n   const char *st[4];\n@@ -426,7 +426,7 @@ print_exp (char *buf, rtx x, int verbose)\n    registers, labels, symbols and memory accesses.  */\n \n static void\n-print_value (char *buf, rtx x, int verbose)\n+print_value (char *buf, const_rtx x, int verbose)\n {\n   char t[BUF_LEN];\n   char *cur = buf;\n@@ -528,7 +528,7 @@ print_value (char *buf, rtx x, int verbose)\n /* The next step in insn detalization, its pattern recognition.  */\n \n static void\n-print_pattern (char *buf, rtx x, int verbose)\n+print_pattern (char *buf, const_rtx x, int verbose)\n {\n   char t1[BUF_LEN], t2[BUF_LEN], t3[BUF_LEN];\n "}, {"sha": "8cf3112a5a547ebcccc2553124d777e64e61d1b4", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -2592,6 +2592,12 @@ first_stmt (basic_block bb)\n   return !bsi_end_p (i) ? bsi_stmt (i) : NULL_TREE;\n }\n \n+const_tree\n+const_first_stmt (const_basic_block bb)\n+{\n+  const_block_stmt_iterator i = cbsi_start (bb);\n+  return !cbsi_end_p (i) ? cbsi_stmt (i) : NULL_TREE;\n+}\n \n /* Return the last statement in basic block BB.  */\n \n@@ -2602,6 +2608,12 @@ last_stmt (basic_block bb)\n   return !bsi_end_p (b) ? bsi_stmt (b) : NULL_TREE;\n }\n \n+const_tree\n+const_last_stmt (const_basic_block bb)\n+{\n+  const_block_stmt_iterator b = cbsi_last (bb);\n+  return !cbsi_end_p (b) ? cbsi_stmt (b) : NULL_TREE;\n+}\n \n /* Return the last statement of an otherwise empty block.  Return NULL\n    if the block is totally empty, or if it contains more than one"}, {"sha": "63d4021c2bc547c654711a9c35071caa1458609c", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -713,7 +713,7 @@ phi_ssa_name_p (const_tree t)\n /* Returns the list of statements in BB.  */\n \n static inline tree\n-bb_stmt_list (basic_block bb)\n+bb_stmt_list (const_basic_block bb)\n {\n   gcc_assert (!(bb->flags & BB_RTL));\n   return bb->il.tree->stmt_list;\n@@ -745,6 +745,21 @@ bsi_start (basic_block bb)\n   return bsi;\n }\n \n+static inline const_block_stmt_iterator\n+cbsi_start (const_basic_block bb)\n+{\n+  const_block_stmt_iterator bsi;\n+  if (bb->index < NUM_FIXED_BLOCKS)\n+    {\n+      bsi.tsi.ptr = NULL;\n+      bsi.tsi.container = NULL;\n+    }\n+  else\n+    bsi.tsi = ctsi_start (bb_stmt_list (bb));\n+  bsi.bb = bb;\n+  return bsi;\n+}\n+\n /* Return a block statement iterator that points to the first non-label\n    statement in block BB.  */\n \n@@ -777,6 +792,22 @@ bsi_last (basic_block bb)\n   return bsi;\n }\n \n+static inline const_block_stmt_iterator\n+cbsi_last (const_basic_block bb)\n+{\n+  const_block_stmt_iterator bsi;\n+\n+  if (bb->index < NUM_FIXED_BLOCKS)\n+    {\n+      bsi.tsi.ptr = NULL;\n+      bsi.tsi.container = NULL;\n+    }\n+  else\n+    bsi.tsi = ctsi_last (bb_stmt_list (bb));\n+  bsi.bb = bb;\n+  return bsi;\n+}\n+\n /* Return true if block statement iterator I has reached the end of\n    the basic block.  */\n static inline bool\n@@ -785,6 +816,12 @@ bsi_end_p (block_stmt_iterator i)\n   return tsi_end_p (i.tsi);\n }\n \n+static inline bool\n+cbsi_end_p (const_block_stmt_iterator i)\n+{\n+  return ctsi_end_p (i.tsi);\n+}\n+\n /* Modify block statement iterator I so that it is at the next\n    statement in the basic block.  */\n static inline void\n@@ -793,6 +830,12 @@ bsi_next (block_stmt_iterator *i)\n   tsi_next (&i->tsi);\n }\n \n+static inline void\n+cbsi_next (const_block_stmt_iterator *i)\n+{\n+  ctsi_next (&i->tsi);\n+}\n+\n /* Modify block statement iterator I so that it is at the previous\n    statement in the basic block.  */\n static inline void\n@@ -801,6 +844,12 @@ bsi_prev (block_stmt_iterator *i)\n   tsi_prev (&i->tsi);\n }\n \n+static inline void\n+cbsi_prev (const_block_stmt_iterator *i)\n+{\n+  ctsi_prev (&i->tsi);\n+}\n+\n /* Return the statement that block statement iterator I is currently\n    at.  */\n static inline tree\n@@ -809,6 +858,12 @@ bsi_stmt (block_stmt_iterator i)\n   return tsi_stmt (i.tsi);\n }\n \n+static inline const_tree\n+cbsi_stmt (const_block_stmt_iterator i)\n+{\n+  return ctsi_stmt (i.tsi);\n+}\n+\n /* Return a pointer to the statement that block statement iterator I\n    is currently at.  */\n static inline tree *"}, {"sha": "7e60dae42a82d6d3a509d78d242e67c00ccc4a8a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -628,8 +628,15 @@ typedef struct {\n   basic_block bb;\n } block_stmt_iterator;\n \n+typedef struct {\n+  const_tree_stmt_iterator tsi;\n+  const_basic_block bb;\n+} const_block_stmt_iterator;\n+\n static inline block_stmt_iterator bsi_start (basic_block);\n+static inline const_block_stmt_iterator cbsi_start (const_basic_block);\n static inline block_stmt_iterator bsi_last (basic_block);\n+static inline const_block_stmt_iterator cbsi_last (const_basic_block);\n static inline block_stmt_iterator bsi_after_labels (basic_block);\n block_stmt_iterator bsi_for_stmt (tree);\n static inline bool bsi_end_p (block_stmt_iterator);\n@@ -737,7 +744,9 @@ extern void print_loop_ir (FILE *);\n extern void cleanup_dead_labels (void);\n extern void group_case_labels (void);\n extern tree first_stmt (basic_block);\n+extern const_tree const_first_stmt (const_basic_block);\n extern tree last_stmt (basic_block);\n+extern const_tree const_last_stmt (const_basic_block);\n extern tree last_and_only_stmt (basic_block);\n extern edge find_taken_edge (basic_block, tree);\n extern basic_block label_to_block_fn (struct function *, tree);\n@@ -819,7 +828,7 @@ extern tree phi_reverse (tree);\n /* In gimple-low.c  */\n extern void record_vars_into (tree, tree);\n extern void record_vars (tree);\n-extern bool block_may_fallthru (tree);\n+extern bool block_may_fallthru (const_tree);\n \n /* In tree-ssa-alias.c  */\n extern void dump_may_aliases_for (FILE *, tree);\n@@ -959,7 +968,7 @@ extern bool vect_can_force_dr_alignment_p (tree, unsigned int);\n extern tree get_vectype_for_scalar_type (tree);\n \n /* In tree-ssa-phiopt.c */\n-bool empty_block_p (basic_block);\n+bool empty_block_p (const_basic_block);\n basic_block *blocks_in_phiopt_order (void);\n \n /* In tree-ssa-loop*.c  */"}, {"sha": "1e7a682d3915a2f37244d763b47989ffa6e678fe", "filename": "gcc/tree-iterator.c", "status": "modified", "additions": 60, "deletions": 37, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-iterator.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-iterator.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -299,66 +299,89 @@ tsi_split_statement_list_before (tree_stmt_iterator *i)\n /* Return the first expression in a sequence of COMPOUND_EXPRs,\n    or in a STATEMENT_LIST.  */\n \n+#define EXPR_FIRST_BODY do { \\\n+  if (expr == NULL_TREE) \\\n+    return expr; \\\n+  if (TREE_CODE (expr) == STATEMENT_LIST) \\\n+    { \\\n+      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (expr); \\\n+      return n ? n->stmt : NULL_TREE; \\\n+    } \\\n+  while (TREE_CODE (expr) == COMPOUND_EXPR) \\\n+    expr = TREE_OPERAND (expr, 0); \\\n+  return expr; \\\n+} while (0)\n+\n tree\n expr_first (tree expr)\n {\n-  if (expr == NULL_TREE)\n-    return expr;\n-\n-  if (TREE_CODE (expr) == STATEMENT_LIST)\n-    {\n-      struct tree_statement_list_node *n = STATEMENT_LIST_HEAD (expr);\n-      return n ? n->stmt : NULL_TREE;\n-    }\n+  EXPR_FIRST_BODY;\n+}\n \n-  while (TREE_CODE (expr) == COMPOUND_EXPR)\n-    expr = TREE_OPERAND (expr, 0);\n-  return expr;\n+const_tree\n+const_expr_first (const_tree expr)\n+{\n+  EXPR_FIRST_BODY;\n }\n \n /* Return the last expression in a sequence of COMPOUND_EXPRs,\n    or in a STATEMENT_LIST.  */\n \n+#define EXPR_LAST_BODY do { \\\n+  if (expr == NULL_TREE) \\\n+    return expr;\\\n+  if (TREE_CODE (expr) == STATEMENT_LIST) \\\n+    { \\\n+      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr); \\\n+      return n ? n->stmt : NULL_TREE; \\\n+    } \\\n+  while (TREE_CODE (expr) == COMPOUND_EXPR) \\\n+    expr = TREE_OPERAND (expr, 1); \\\n+  return expr; \\\n+} while (0)\n+\n tree\n expr_last (tree expr)\n {\n-  if (expr == NULL_TREE)\n-    return expr;\n-\n-  if (TREE_CODE (expr) == STATEMENT_LIST)\n-    {\n-      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr);\n-      return n ? n->stmt : NULL_TREE;\n-    }\n+  EXPR_LAST_BODY;\n+}\n \n-  while (TREE_CODE (expr) == COMPOUND_EXPR)\n-    expr = TREE_OPERAND (expr, 1);\n-  return expr;\n+const_tree\n+const_expr_last (const_tree expr)\n+{\n+  EXPR_LAST_BODY;\n }\n \n /* If EXPR is a single statement return it.  If EXPR is a\n    STATEMENT_LIST containing exactly one statement S, return S.\n    Otherwise, return NULL.  */\n \n+#define EXPR_ONLY_BODY do { \\\n+  if (expr == NULL_TREE) \\\n+    return NULL_TREE; \\\n+  if (TREE_CODE (expr) == STATEMENT_LIST) \\\n+    { \\\n+      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr); \\\n+      if (n && STATEMENT_LIST_HEAD (expr) == n) \\\n+\treturn n->stmt; \\\n+      else \\\n+\treturn NULL_TREE; \\\n+    } \\\n+  if (TREE_CODE (expr) == COMPOUND_EXPR) \\\n+    return NULL_TREE; \\\n+  return expr; \\\n+} while (0)\n+\n tree \n expr_only (tree expr)\n {\n-  if (expr == NULL_TREE)\n-    return NULL_TREE;\n-\n-  if (TREE_CODE (expr) == STATEMENT_LIST)\n-    {\n-      struct tree_statement_list_node *n = STATEMENT_LIST_TAIL (expr);\n-      if (n && STATEMENT_LIST_HEAD (expr) == n)\n-\treturn n->stmt;\n-      else\n-\treturn NULL_TREE;\n-    }\n-\n-  if (TREE_CODE (expr) == COMPOUND_EXPR)\n-    return NULL_TREE;\n+  EXPR_ONLY_BODY;\n+}\n \n-  return expr;\n+const_tree \n+const_expr_only (const_tree expr)\n+{\n+  EXPR_ONLY_BODY;\n }\n \n #include \"gt-tree-iterator.h\""}, {"sha": "5b8113a4560c602e3316e903d641954f346661e2", "filename": "gcc/tree-iterator.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-iterator.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -34,6 +34,11 @@ typedef struct {\n   tree container;\n } tree_stmt_iterator;\n \n+typedef struct {\n+  struct tree_statement_list_node *ptr;\n+  const_tree container;\n+} const_tree_stmt_iterator;\n+\n static inline tree_stmt_iterator\n tsi_start (tree t)\n {\n@@ -45,6 +50,17 @@ tsi_start (tree t)\n   return i;\n }\n \n+static inline const_tree_stmt_iterator\n+ctsi_start (const_tree t)\n+{\n+  const_tree_stmt_iterator i;\n+\n+  i.ptr = STATEMENT_LIST_HEAD (t);\n+  i.container = t;\n+\n+  return i;\n+}\n+\n static inline tree_stmt_iterator\n tsi_last (tree t)\n {\n@@ -56,30 +72,65 @@ tsi_last (tree t)\n   return i;\n }\n \n+static inline const_tree_stmt_iterator\n+ctsi_last (tree t)\n+{\n+  const_tree_stmt_iterator i;\n+\n+  i.ptr = STATEMENT_LIST_TAIL (t);\n+  i.container = t;\n+\n+  return i;\n+}\n+\n static inline bool\n tsi_end_p (tree_stmt_iterator i)\n {\n   return i.ptr == NULL;\n }\n \n+static inline bool\n+ctsi_end_p (const_tree_stmt_iterator i)\n+{\n+  return i.ptr == NULL;\n+}\n+\n static inline bool\n tsi_one_before_end_p (tree_stmt_iterator i)\n {\n   return i.ptr != NULL && i.ptr->next == NULL;\n }\n \n+static inline bool\n+ctsi_one_before_end_p (const_tree_stmt_iterator i)\n+{\n+  return i.ptr != NULL && i.ptr->next == NULL;\n+}\n+\n static inline void\n tsi_next (tree_stmt_iterator *i)\n {\n   i->ptr = i->ptr->next;\n }\n \n+static inline void\n+ctsi_next (const_tree_stmt_iterator *i)\n+{\n+  i->ptr = i->ptr->next;\n+}\n+\n static inline void\n tsi_prev (tree_stmt_iterator *i)\n {\n   i->ptr = i->ptr->prev;\n }\n \n+static inline void\n+ctsi_prev (const_tree_stmt_iterator *i)\n+{\n+  i->ptr = i->ptr->prev;\n+}\n+\n static inline tree *\n tsi_stmt_ptr (tree_stmt_iterator i)\n {\n@@ -92,6 +143,12 @@ tsi_stmt (tree_stmt_iterator i)\n   return i.ptr->stmt;\n }\n \n+static inline const_tree\n+ctsi_stmt (const_tree_stmt_iterator i)\n+{\n+  return i.ptr->stmt;\n+}\n+\n enum tsi_iterator_update\n {\n   TSI_NEW_STMT,\t\t/* Only valid when single statement is added, move"}, {"sha": "cc80794c5d9cab5d0f42ca51b0cdb033ca377c62", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -932,7 +932,7 @@ analyzable_condition (const_tree expr)\n    analyze, then give up.  */\n \n tree \n-get_loop_exit_condition (struct loop *loop)\n+get_loop_exit_condition (const struct loop *loop)\n {\n   tree res = NULL_TREE;\n   edge exit_edge = single_exit (loop);"}, {"sha": "a2ba5848046480ffd1abf728124da44556d3f86b", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -23,7 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n \n extern tree number_of_latch_executions (struct loop *);\n extern tree number_of_exit_cond_executions (struct loop *);\n-extern tree get_loop_exit_condition (struct loop *);\n+extern tree get_loop_exit_condition (const struct loop *);\n \n extern void scev_initialize (void);\n extern void scev_reset (void);"}, {"sha": "6d1834ec5e4ba7147e5ba048c3ada85b27b85132", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -1673,7 +1673,7 @@ simplify_using_outer_evolutions (struct loop *loop, tree expr)\n /* Returns true if EXIT is the only possible exit from LOOP.  */\n \n static bool\n-loop_only_exit_p (struct loop *loop, edge exit)\n+loop_only_exit_p (const struct loop *loop, const_edge exit)\n {\n   basic_block *body;\n   block_stmt_iterator bsi;\n@@ -2171,7 +2171,7 @@ find_loop_niter_by_eval (struct loop *loop, edge *exit)\n    be nonnegative.  */\n  \n static double_int\n-derive_constant_upper_bound (tree val)\n+derive_constant_upper_bound (const_tree val)\n {\n   tree type = TREE_TYPE (val);\n   tree op0, op1, subtype, maxt;"}, {"sha": "c3dcf33521f5444404268a753ac5f904101c9505", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -297,18 +297,18 @@ blocks_in_phiopt_order (void)\n /* Return TRUE if block BB has no executable statements, otherwise return\n    FALSE.  */\n bool\n-empty_block_p (basic_block bb)\n+empty_block_p (const_basic_block bb)\n {\n-  block_stmt_iterator bsi;\n+  const_block_stmt_iterator bsi;\n \n   /* BB must have no executable statements.  */\n-  bsi = bsi_start (bb);\n-  while (!bsi_end_p (bsi)\n-\t  && (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR\n-\t      || IS_EMPTY_STMT (bsi_stmt (bsi))))\n-    bsi_next (&bsi);\n+  bsi = cbsi_start (bb);\n+  while (!cbsi_end_p (bsi)\n+\t  && (TREE_CODE (cbsi_stmt (bsi)) == LABEL_EXPR\n+\t      || IS_EMPTY_STMT (cbsi_stmt (bsi))))\n+    cbsi_next (&bsi);\n \n-  if (!bsi_end_p (bsi))\n+  if (!cbsi_end_p (bsi))\n     return false;\n \n   return true;"}, {"sha": "d4d9ee53788ee8680967abed60f972d4dbdcf5fa", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -461,26 +461,26 @@ redirect_edges (void **slot, void *data)\n    is one, this is equivalent to a \"forwarder\" block.  */\n \n static bool\n-redirection_block_p (basic_block bb)\n+redirection_block_p (const_basic_block bb)\n {\n-  block_stmt_iterator bsi;\n+  const_block_stmt_iterator bsi;\n \n   /* Advance to the first executable statement.  */\n-  bsi = bsi_start (bb);\n-  while (!bsi_end_p (bsi)\n-          && (TREE_CODE (bsi_stmt (bsi)) == LABEL_EXPR\n-              || IS_EMPTY_STMT (bsi_stmt (bsi))))\n-    bsi_next (&bsi);\n+  bsi = cbsi_start (bb);\n+  while (!cbsi_end_p (bsi)\n+          && (TREE_CODE (cbsi_stmt (bsi)) == LABEL_EXPR\n+              || IS_EMPTY_STMT (cbsi_stmt (bsi))))\n+    cbsi_next (&bsi);\n \n   /* Check if this is an empty block.  */\n-  if (bsi_end_p (bsi))\n+  if (cbsi_end_p (bsi))\n     return true;\n \n   /* Test that we've reached the terminating control statement.  */\n-  return bsi_stmt (bsi)\n-\t && (TREE_CODE (bsi_stmt (bsi)) == COND_EXPR\n-\t     || TREE_CODE (bsi_stmt (bsi)) == GOTO_EXPR\n-\t     || TREE_CODE (bsi_stmt (bsi)) == SWITCH_EXPR);\n+  return cbsi_stmt (bsi)\n+\t && (TREE_CODE (cbsi_stmt (bsi)) == COND_EXPR\n+\t     || TREE_CODE (cbsi_stmt (bsi)) == GOTO_EXPR\n+\t     || TREE_CODE (cbsi_stmt (bsi)) == SWITCH_EXPR);\n }\n \n /* BB is a block which ends with a COND_EXPR or SWITCH_EXPR and when BB"}, {"sha": "6834e25684e4588f4c9cf2f09d57ec2e00ea8df4", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -948,7 +948,7 @@ slpeel_add_loop_guard (basic_block guard_bb, tree cond, basic_block exit_bb,\n  */\n \n bool\n-slpeel_can_duplicate_loop_p (struct loop *loop, edge e)\n+slpeel_can_duplicate_loop_p (const struct loop *loop, const_edge e)\n {\n   edge exit_e = single_exit (loop);\n   edge entry_e = loop_preheader_edge (loop);"}, {"sha": "40f22056ee9d65c6aed7ce81924f392ddea10960", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -448,7 +448,7 @@ extern bitmap vect_memsyms_to_rename;\n extern struct loop *slpeel_tree_peel_loop_to_edge \n   (struct loop *, edge, tree, tree, bool, unsigned int);\n extern void slpeel_make_loop_iterate_ntimes (struct loop *, tree);\n-extern bool slpeel_can_duplicate_loop_p (struct loop *, edge);\n+extern bool slpeel_can_duplicate_loop_p (const struct loop *, const_edge);\n #ifdef ENABLE_CHECKING\n extern void slpeel_verify_cfg_after_peeling (struct loop *, struct loop *);\n #endif"}, {"sha": "e1124b955d4dd0d2ea39f3a04d8779f613d08604", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -518,7 +518,7 @@ vrp_operand_equal_p (tree val1, tree val2)\n /* Return true, if the bitmaps B1 and B2 are equal.  */\n \n static inline bool\n-vrp_bitmap_equal_p (bitmap b1, bitmap b2)\n+vrp_bitmap_equal_p (const_bitmap b1, const_bitmap b2)\n {\n   return (b1 == b2\n \t  || (b1 && b2"}, {"sha": "8e8fe211234e67eeed3335085e3c94418821aa93", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -6319,7 +6319,7 @@ int_fits_type_p (const_tree c, const_tree type)\n    precision of the type are returned instead.  */\n \n void\n-get_type_static_bounds (tree type, mpz_t min, mpz_t max)\n+get_type_static_bounds (const_tree type, mpz_t min, mpz_t max)\n {\n   if (!POINTER_TYPE_P (type) && TYPE_MIN_VALUE (type)\n       && TREE_CODE (TYPE_MIN_VALUE (type)) == INTEGER_CST)"}, {"sha": "fc0ca50bc86b90b2a14df9a9cda8fc0d60497ae0", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=22ea9ec0e8acfd6a8e42aba3437bf61fd6fd04c3", "patch": "@@ -4297,8 +4297,11 @@ extern tree non_lvalue (tree);\n extern tree convert (tree, tree);\n extern unsigned int expr_align (const_tree);\n extern tree expr_first (tree);\n+extern const_tree const_expr_first (const_tree);\n extern tree expr_last (tree);\n+extern const_tree const_expr_last (const_tree);\n extern tree expr_only (tree);\n+extern const_tree const_expr_only (const_tree);\n extern tree size_in_bytes (tree);\n extern HOST_WIDE_INT int_size_in_bytes (const_tree);\n extern HOST_WIDE_INT max_int_size_in_bytes (tree);\n@@ -4789,7 +4792,7 @@ extern int objects_must_conflict_p (tree, tree);\n /* In tree.c */\n extern int really_constant_p (const_tree);\n extern int int_fits_type_p (const_tree, const_tree);\n-extern void get_type_static_bounds (tree, mpz_t, mpz_t);\n+extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);\n extern bool variably_modified_type_p (tree, tree);\n extern int tree_log2 (const_tree);\n extern int tree_floor_log2 (const_tree);"}]}