{"sha": "c94f9067af215b26b634b6c9678297aa92d74fc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk0ZjkwNjdhZjIxNWIyNmI2MzRiNmM5Njc4Mjk3YWE5MmQ3NGZjNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-05-08T20:58:26Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-05-08T20:58:26Z"}, "message": "fold-const.c (fold_binary): Do not fold multiplication by 1 or -1 for complex floating-point types if...\n\n\t* fold-const.c (fold_binary): Do not fold multiplication by 1 or\n\t-1 for complex floating-point types if honoring signed zeros.\n\ntestsuite:\n\t* gcc.dg/torture/complex-sign-mul-minus-one.c,\n\tgcc.dg/torture/complex-sign-mul-one.c: New tests.\n\nFrom-SVN: r147295", "tree": {"sha": "2750c2df225dea05be099d922f95c8e92115e8c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2750c2df225dea05be099d922f95c8e92115e8c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c94f9067af215b26b634b6c9678297aa92d74fc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94f9067af215b26b634b6c9678297aa92d74fc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c94f9067af215b26b634b6c9678297aa92d74fc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c94f9067af215b26b634b6c9678297aa92d74fc7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9187e02deb92bfe982c845a682468fce39c8bf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9187e02deb92bfe982c845a682468fce39c8bf9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9187e02deb92bfe982c845a682468fce39c8bf9b"}], "stats": {"total": 139, "additions": 138, "deletions": 1}, "files": [{"sha": "026c8eff2fc5668cb7939e25cabe795c74a501f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c94f9067af215b26b634b6c9678297aa92d74fc7", "patch": "@@ -1,3 +1,8 @@\n+2009-05-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* fold-const.c (fold_binary): Do not fold multiplication by 1 or\n+\t-1 for complex floating-point types if honoring signed zeros.\n+\n 2009-05-08  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c (compute_call_stmt_bb_frequency): Accept function argument;"}, {"sha": "fb590492fb4ada77e8846f89614fa2491f5fbc15", "filename": "gcc/fold-const.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c94f9067af215b26b634b6c9678297aa92d74fc7", "patch": "@@ -10647,13 +10647,18 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t      && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n \t      && real_zerop (arg1))\n \t    return omit_one_operand (type, arg1, arg0);\n-\t  /* In IEEE floating point, x*1 is not equivalent to x for snans.  */\n+\t  /* In IEEE floating point, x*1 is not equivalent to x for snans.\n+\t     Likewise for complex arithmetic with signed zeros.  */\n \t  if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t      && (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t\t  || !COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t      && real_onep (arg1))\n \t    return non_lvalue (fold_convert (type, arg0));\n \n \t  /* Transform x * -1.0 into -x.  */\n \t  if (!HONOR_SNANS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t      && (!HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (arg0)))\n+\t\t  || !COMPLEX_FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t      && real_minus_onep (arg1))\n \t    return fold_convert (type, negate_expr (arg0));\n "}, {"sha": "a03013efffad241b613ad61e9278efa5f23e6625", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c94f9067af215b26b634b6c9678297aa92d74fc7", "patch": "@@ -1,3 +1,8 @@\n+2009-05-08  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/complex-sign-mul-minus-one.c,\n+\tgcc.dg/torture/complex-sign-mul-one.c: New tests.\n+\n 2009-05-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/36892"}, {"sha": "6b9a905ae9c112eb5ea963489b670c0ffa5ba664", "filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mul-minus-one.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-minus-one.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-minus-one.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-minus-one.c?ref=c94f9067af215b26b634b6c9678297aa92d74fc7", "patch": "@@ -0,0 +1,61 @@\n+/* Test complex arithmetic with signed zeros.  Pure complex\n+   multiplication with -1.0 + 0.0i.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include \"complex-sign.h\"\n+\n+#define CHECK_MUL_INT(TYPE, COPY, ZERO, ZEROI, ONE, S1, S2, SR, SI)\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    _Complex TYPE a1, b1, c1;\t\t\t\t\t\t\\\n+    volatile _Complex TYPE a2, b2, c2;\t\t\t\t\t\\\n+    a1 = ENCODE(ZERO, ZEROI, S1, S2);\t\t\t\t\t\\\n+    CHECK_RES (a1, COPY, S1, S2);\t\t\t\t\t\\\n+    b1 = -ONE + ZEROI;\t\t\t\t\t\t\t\\\n+    c1 = a1 * b1;\t\t\t\t\t\t\t\\\n+    CHECK_RES (c1, COPY, SR, SI);\t\t\t\t\t\\\n+    c1 = a1 * (-ONE + ZEROI);\t\t\t\t\t\t\\\n+    CHECK_RES (c1, COPY, SR, SI);\t\t\t\t\t\\\n+    a2 = ENCODE(ZERO, ZEROI, S1, S2);\t\t\t\t\t\\\n+    CHECK_RES (a2, COPY, S1, S2);\t\t\t\t\t\\\n+    b2 = -ONE + ZEROI;\t\t\t\t\t\t\t\\\n+    c2 = a2 * b2;\t\t\t\t\t\t\t\\\n+    CHECK_RES (c2, COPY, SR, SI);\t\t\t\t\t\\\n+    c2 = a2 * (-ONE + ZEROI);\t\t\t\t\t\t\\\n+    CHECK_RES (c2, COPY, SR, SI);\t\t\t\t\t\\\n+  } while (0)\n+\n+#define CHECK_MUL(TYPE, COPY, ZERO, ZEROI, ONE)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, +, +, -, +);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, +, -, +, +);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, -, +, +, -);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, -, -, +, +);\t\\\n+  } while (0)\n+\n+void\n+check_mul_float (void)\n+{\n+  CHECK_MUL (float, __builtin_copysignf, 0.0f, 0.0if, 1.0f);\n+}\n+\n+void\n+check_mul_double (void)\n+{\n+  CHECK_MUL (double, __builtin_copysign, 0.0, 0.0i, 1.0);\n+}\n+\n+void\n+check_mul_long_double (void)\n+{\n+  CHECK_MUL (long double, __builtin_copysignl, 0.0l, 0.0il, 1.0l);\n+}\n+\n+int\n+main (void)\n+{\n+  check_mul_float ();\n+  check_mul_double ();\n+  check_mul_long_double ();\n+  exit (0);\n+}"}, {"sha": "9d1d6c7ce1012b7a2b69eb787a92ab2f2d759bd2", "filename": "gcc/testsuite/gcc.dg/torture/complex-sign-mul-one.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-one.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c94f9067af215b26b634b6c9678297aa92d74fc7/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-one.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fcomplex-sign-mul-one.c?ref=c94f9067af215b26b634b6c9678297aa92d74fc7", "patch": "@@ -0,0 +1,61 @@\n+/* Test complex arithmetic with signed zeros.  Pure complex\n+   multiplication with 1.0 + 0.0i.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=gnu99\" } */\n+\n+#include \"complex-sign.h\"\n+\n+#define CHECK_MUL_INT(TYPE, COPY, ZERO, ZEROI, ONE, S1, S2, SR, SI)\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    _Complex TYPE a1, b1, c1;\t\t\t\t\t\t\\\n+    volatile _Complex TYPE a2, b2, c2;\t\t\t\t\t\\\n+    a1 = ENCODE(ZERO, ZEROI, S1, S2);\t\t\t\t\t\\\n+    CHECK_RES (a1, COPY, S1, S2);\t\t\t\t\t\\\n+    b1 = ONE + ZEROI;\t\t\t\t\t\t\t\\\n+    c1 = a1 * b1;\t\t\t\t\t\t\t\\\n+    CHECK_RES (c1, COPY, SR, SI);\t\t\t\t\t\\\n+    c1 = a1 * (ONE + ZEROI);\t\t\t\t\t\t\\\n+    CHECK_RES (c1, COPY, SR, SI);\t\t\t\t\t\\\n+    a2 = ENCODE(ZERO, ZEROI, S1, S2);\t\t\t\t\t\\\n+    CHECK_RES (a2, COPY, S1, S2);\t\t\t\t\t\\\n+    b2 = ONE + ZEROI;\t\t\t\t\t\t\t\\\n+    c2 = a2 * b2;\t\t\t\t\t\t\t\\\n+    CHECK_RES (c2, COPY, SR, SI);\t\t\t\t\t\\\n+    c2 = a2 * (ONE + ZEROI);\t\t\t\t\t\t\\\n+    CHECK_RES (c2, COPY, SR, SI);\t\t\t\t\t\\\n+  } while (0)\n+\n+#define CHECK_MUL(TYPE, COPY, ZERO, ZEROI, ONE)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, +, +, +, +);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, +, -, +, +);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, -, +, -, +);\t\\\n+    CHECK_MUL_INT (TYPE, COPY, ZERO, ZEROI, ONE, -, -, +, -);\t\\\n+  } while (0)\n+\n+void\n+check_mul_float (void)\n+{\n+  CHECK_MUL (float, __builtin_copysignf, 0.0f, 0.0if, 1.0f);\n+}\n+\n+void\n+check_mul_double (void)\n+{\n+  CHECK_MUL (double, __builtin_copysign, 0.0, 0.0i, 1.0);\n+}\n+\n+void\n+check_mul_long_double (void)\n+{\n+  CHECK_MUL (long double, __builtin_copysignl, 0.0l, 0.0il, 1.0l);\n+}\n+\n+int\n+main (void)\n+{\n+  check_mul_float ();\n+  check_mul_double ();\n+  check_mul_long_double ();\n+  exit (0);\n+}"}]}