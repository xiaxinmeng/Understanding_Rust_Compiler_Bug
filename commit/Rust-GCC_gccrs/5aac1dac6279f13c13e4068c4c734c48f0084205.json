{"sha": "5aac1dac6279f13c13e4068c4c734c48f0084205", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFhYzFkYWM2Mjc5ZjEzYzEzZTQwNjhjNGM3MzRjNDhmMDA4NDIwNQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-01-31T17:54:14Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-01-31T17:54:14Z"}, "message": "Window.java (Window(Window,GraphicsConfiguration)): Don't try to find graphics configuration.\n\n\t* java/awt/Window.java (Window(Window,GraphicsConfiguration)):\n\tDon't try to find graphics configuration.\n\t* java/awt/Toolkit.java (default_toolkit_name): Use new\n\tConfiguration entry.\n\t* gnu/classpath/Configuration.java.in (default_awt_peer_toolkit):\n\tNew global.\n\t* configure: Rebuilt.\n\t* configure.in (TOOLKIT): New subst.\n\t(--enable-java-awt) [xlib, gtk]: Set TOOLKIT if required.\n\tDo AWT tests much earlier.  Run Gtk tests.  Make jniinclude\n\tdirectory.  Make output directories for .c files.\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (lib_gnu_java_awt_peer_gtk_la_SOURCES): New macro.\n\t(toolexeclib_LTLIBRARIES): Added cond_gtk_ltlibrary.\n\t(all_java_source_files): Added new sources.\n\t($(lib_gnu_java_awt_peer_gtk_la_OBJECTS)): New target.\n\t(gtk_c_files): New macro.\n\t(gtk_c_source_files): New macro.\n\t(cond_gtk_ltlibrary): New macro.\n\t($(gtk_c_files)): New target.\n\t(lib_gnu_java_awt_peer_gtk_la_LIBADD): New macro.\n\t(gtk_awt_peer_sources): New macro.\n\t(gtk_c_headers): New macro.\n\t($(gtk_c_headers)): New target.\n\t(ACLOCAL_AMFLAGS): New macro.\n\t* gtk.m4, glib.m4, libart.m4: New files.\n\t* gnu/java/awt/peer/gtk/GdkFontMetrics.java,\n\tgnu/java/awt/peer/gtk/GdkGraphics.java,\n\tgnu/java/awt/peer/gtk/GtkArg.java,\n\tgnu/java/awt/peer/gtk/GtkArgList.java,\n\tgnu/java/awt/peer/gtk/GtkButtonPeer.java,\n\tgnu/java/awt/peer/gtk/GtkCanvasPeer.java,\n\tgnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.java,\n\tgnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.java,\n\tgnu/java/awt/peer/gtk/GtkCheckboxPeer.java,\n\tgnu/java/awt/peer/gtk/GtkChoicePeer.java,\n\tgnu/java/awt/peer/gtk/GtkClipboard.java,\n\tgnu/java/awt/peer/gtk/GtkComponentPeer.java,\n\tgnu/java/awt/peer/gtk/GtkContainerPeer.java,\n\tgnu/java/awt/peer/gtk/GtkDialogPeer.java,\n\tgnu/java/awt/peer/gtk/GtkFileDialogPeer.java,\n\tgnu/java/awt/peer/gtk/GtkFontPeer.java,\n\tgnu/java/awt/peer/gtk/GtkFramePeer.java,\n\tgnu/java/awt/peer/gtk/GtkGenericPeer.java,\n\tgnu/java/awt/peer/gtk/GtkImage.java,\n\tgnu/java/awt/peer/gtk/GtkImagePainter.java,\n\tgnu/java/awt/peer/gtk/GtkLabelPeer.java,\n\tgnu/java/awt/peer/gtk/GtkListPeer.java,\n\tgnu/java/awt/peer/gtk/GtkMainThread.java,\n\tgnu/java/awt/peer/gtk/GtkMenuBarPeer.java,\n\tgnu/java/awt/peer/gtk/GtkMenuComponentPeer.java,\n\tgnu/java/awt/peer/gtk/GtkMenuItemPeer.java,\n\tgnu/java/awt/peer/gtk/GtkMenuPeer.java,\n\tgnu/java/awt/peer/gtk/GtkOffScreenImage.java,\n\tgnu/java/awt/peer/gtk/GtkPanelPeer.java,\n\tgnu/java/awt/peer/gtk/GtkPopupMenuPeer.java,\n\tgnu/java/awt/peer/gtk/GtkScrollbarPeer.java,\n\tgnu/java/awt/peer/gtk/GtkScrollPanePeer.java,\n\tgnu/java/awt/peer/gtk/GtkTextAreaPeer.java,\n\tgnu/java/awt/peer/gtk/GtkTextComponentPeer.java,\n\tgnu/java/awt/peer/gtk/GtkTextFieldPeer.java,\n\tgnu/java/awt/peer/gtk/GtkToolkit.java,\n\tgnu/java/awt/peer/gtk/GtkWindowPeer.java,\n\tgnu/java/awt/peer/gtk/TestAWT.java,\n\tgnu/java/awt/peer/gtk/Test.java: New files from Classpath.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c,\n\tjni/gtk-peer/gthread-jni.c, jni/gtk-peer/gthread-jni.h,\n\tjni/gtk-peer/gtkpeer.h, jni/classpath/jcl.c, jni/classpath/jcl.h,\n\tjni/classpath/jnilink.c, jni/classpath/jnilink.h,\n\tjni/classpath/native_state.c, jni/classpath/native_state.h,\n\tjni/classpath/primlib.c, jni/classpath/primlib.h: Likewise.\n\nFrom-SVN: r62187", "tree": {"sha": "3d061835fbf308ad2ee29fe5eed56c06842c6b38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d061835fbf308ad2ee29fe5eed56c06842c6b38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5aac1dac6279f13c13e4068c4c734c48f0084205", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aac1dac6279f13c13e4068c4c734c48f0084205", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aac1dac6279f13c13e4068c4c734c48f0084205", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aac1dac6279f13c13e4068c4c734c48f0084205/comments", "author": null, "committer": null, "parents": [{"sha": "371ac725580efe2c70111c2403a98b0fef3b11d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/371ac725580efe2c70111c2403a98b0fef3b11d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/371ac725580efe2c70111c2403a98b0fef3b11d6"}], "stats": {"total": 20991, "additions": 17934, "deletions": 3057}, "files": [{"sha": "463343643222a20e2271fba42d5b8d2cffb7622f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,3 +1,103 @@\n+2003-01-31  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/awt/Window.java (Window(Window,GraphicsConfiguration)):\n+\tDon't try to find graphics configuration.\n+\t* java/awt/Toolkit.java (default_toolkit_name): Use new\n+\tConfiguration entry.\n+\t* gnu/classpath/Configuration.java.in (default_awt_peer_toolkit):\n+\tNew global.\n+\t* configure: Rebuilt.\n+\t* configure.in (TOOLKIT): New subst.\n+\t(--enable-java-awt) [xlib, gtk]: Set TOOLKIT if required.\n+\tDo AWT tests much earlier.  Run Gtk tests.  Make jniinclude\n+\tdirectory.  Make output directories for .c files.\n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (lib_gnu_java_awt_peer_gtk_la_SOURCES): New macro.\n+\t(toolexeclib_LTLIBRARIES): Added cond_gtk_ltlibrary.\n+\t(all_java_source_files): Added new sources.\n+\t($(lib_gnu_java_awt_peer_gtk_la_OBJECTS)): New target.\n+\t(gtk_c_files): New macro.\n+\t(gtk_c_source_files): New macro.\n+\t(cond_gtk_ltlibrary): New macro.\n+\t($(gtk_c_files)): New target.\n+\t(lib_gnu_java_awt_peer_gtk_la_LIBADD): New macro.\n+\t(gtk_awt_peer_sources): New macro.\n+\t(gtk_c_headers): New macro.\n+\t($(gtk_c_headers)): New target.\n+\t(ACLOCAL_AMFLAGS): New macro.\n+\t* gtk.m4, glib.m4, libart.m4: New files.\n+\t* gnu/java/awt/peer/gtk/GdkFontMetrics.java,\n+\tgnu/java/awt/peer/gtk/GdkGraphics.java,\n+\tgnu/java/awt/peer/gtk/GtkArg.java,\n+\tgnu/java/awt/peer/gtk/GtkArgList.java,\n+\tgnu/java/awt/peer/gtk/GtkButtonPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkCanvasPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkCheckboxPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkChoicePeer.java,\n+\tgnu/java/awt/peer/gtk/GtkClipboard.java,\n+\tgnu/java/awt/peer/gtk/GtkComponentPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkContainerPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkDialogPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkFileDialogPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkFontPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkFramePeer.java,\n+\tgnu/java/awt/peer/gtk/GtkGenericPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkImage.java,\n+\tgnu/java/awt/peer/gtk/GtkImagePainter.java,\n+\tgnu/java/awt/peer/gtk/GtkLabelPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkListPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkMainThread.java,\n+\tgnu/java/awt/peer/gtk/GtkMenuBarPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkMenuComponentPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkMenuItemPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkMenuPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkOffScreenImage.java,\n+\tgnu/java/awt/peer/gtk/GtkPanelPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkPopupMenuPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkScrollbarPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkScrollPanePeer.java,\n+\tgnu/java/awt/peer/gtk/GtkTextAreaPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkTextComponentPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkTextFieldPeer.java,\n+\tgnu/java/awt/peer/gtk/GtkToolkit.java,\n+\tgnu/java/awt/peer/gtk/GtkWindowPeer.java,\n+\tgnu/java/awt/peer/gtk/TestAWT.java,\n+\tgnu/java/awt/peer/gtk/Test.java: New files from Classpath.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c,\n+\tjni/gtk-peer/gthread-jni.c, jni/gtk-peer/gthread-jni.h,\n+\tjni/gtk-peer/gtkpeer.h, jni/classpath/jcl.c, jni/classpath/jcl.h,\n+\tjni/classpath/jnilink.c, jni/classpath/jnilink.h,\n+\tjni/classpath/native_state.c, jni/classpath/native_state.h,\n+\tjni/classpath/primlib.c, jni/classpath/primlib.h: Likewise.\n+\n 2003-01-31  Julian Dolby  <dolby@us.ibm.com>\n \n \t* java/util/Properties.java (load): Ignore backslash before EOF."}, {"sha": "65c106455ccd21e8c2f6895271a2233b651af0f5", "filename": "libjava/Makefile.am", "status": "modified", "additions": 118, "deletions": 1, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -2,6 +2,8 @@\n \n AUTOMAKE_OPTIONS = foreign\n \n+ACLOCAL_AMFLAGS = -I .\n+\n if TESTSUBDIR\n SUBDIRS = $(DIRLTDL) testsuite gcj include\n else\n@@ -23,7 +25,14 @@ cond_x_ltlibrary =\n xlib_includes =\n endif\n \n-toolexeclib_LTLIBRARIES = libgcj.la lib-org-xml-sax.la lib-org-w3c-dom.la $(cond_x_ltlibrary)\n+if GTK_AWT\n+cond_gtk_ltlibrary = lib-gnu-java-awt-peer-gtk.la\n+else\n+cond_gtk_ltlibrary =\n+endif\n+\n+toolexeclib_LTLIBRARIES = libgcj.la lib-org-xml-sax.la lib-org-w3c-dom.la \\\n+    $(cond_gtk_ltlibrary) $(cond_x_ltlibrary)\n toolexecmainlib_DATA = libgcj.spec\n \n jardir = $(datadir)/java\n@@ -115,6 +124,8 @@ nat_files = $(nat_source_files:.cc=.lo)\n x_nat_files = $(x_nat_source_files:.cc=.lo)\n ## Objects from C sources in subdirs.\n c_files = $(c_source_files:.c=.lo)\n+## Objects from gtk-related C sources in subdirs.\n+gtk_c_files = $(gtk_c_source_files:.c=.lo)\n ## Objects from Java sources in subdirs.\n javao_files = $(java_source_files:.java=.lo) \\\n \t$(built_java_source_files:.java=.lo)\n@@ -140,6 +151,102 @@ libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(THREADLIBS) \\\n \t-version-info `grep -v '^\\#' $(srcdir)/libtool-version`\n libgcj_la_LINK = $(LIBLINK)\n \n+## Gtk JNI sources.\n+gtk_c_source_files = \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c\t\\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c \\\n+jni/gtk-peer/gthread-jni.c \\\n+jni/classpath/jcl.c \\\n+jni/classpath/jnilink.c\t\\\n+jni/classpath/native_state.c \\\n+jni/classpath/primlib.c\n+\n+## Java sources for Gtk peers.\n+gtk_awt_peer_sources = \\\n+gnu/java/awt/peer/gtk/GdkFontMetrics.java \\\n+gnu/java/awt/peer/gtk/GdkGraphics.java \\\n+gnu/java/awt/peer/gtk/GtkArg.java \\\n+gnu/java/awt/peer/gtk/GtkArgList.java \\\n+gnu/java/awt/peer/gtk/GtkButtonPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCanvasPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCheckboxPeer.java \\\n+gnu/java/awt/peer/gtk/GtkChoicePeer.java \\\n+gnu/java/awt/peer/gtk/GtkClipboard.java\t\\\n+gnu/java/awt/peer/gtk/GtkComponentPeer.java \\\n+gnu/java/awt/peer/gtk/GtkContainerPeer.java \\\n+gnu/java/awt/peer/gtk/GtkDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFileDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFontPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFramePeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkGenericPeer.java \\\n+gnu/java/awt/peer/gtk/GtkImage.java \\\n+gnu/java/awt/peer/gtk/GtkImagePainter.java \\\n+gnu/java/awt/peer/gtk/GtkLabelPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkListPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMainThread.java \\\n+gnu/java/awt/peer/gtk/GtkMenuBarPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMenuComponentPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkMenuItemPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMenuPeer.java \\\n+gnu/java/awt/peer/gtk/GtkOffScreenImage.java \\\n+gnu/java/awt/peer/gtk/GtkPanelPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java \\\n+gnu/java/awt/peer/gtk/GtkScrollPanePeer.java \\\n+gnu/java/awt/peer/gtk/GtkScrollbarPeer.java \\\n+gnu/java/awt/peer/gtk/GtkTextAreaPeer.java \\\n+gnu/java/awt/peer/gtk/GtkTextComponentPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkTextFieldPeer.java \\\n+gnu/java/awt/peer/gtk/GtkToolkit.java \\\n+gnu/java/awt/peer/gtk/GtkWindowPeer.java\n+\n+## FIXME: GNU make.\n+gtk_c_headers = $(patsubst %.java,jniinclude/%.h,$(subst /,_,$(gtk_awt_peer_sources)))\n+\n+$(gtk_c_headers): $(gtk_awt_peer_sources)\n+## FIXME: GNU make.\n+\t@input=`echo $@ | sed -e 's,jniinclude,,' -e 's,_,.,g' -e 's,.h$$,,'`; \\\n+\techo \"$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\"; \\\n+\t$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\n+\n+lib_gnu_java_awt_peer_gtk_la_SOURCES = \\\n+$(gtk_awt_peer_sources) \\\n+$(gtk_c_source_files) \\\n+jni/gtk-peer/gthread-jni.h \\\n+jni/gtk-peer/gtkpeer.h \\\n+jni/classpath/jcl.h \\\n+jni/classpath/jnilink.h\t\\\n+jni/classpath/native_state.h \\\n+jni/classpath/primlib.h\n+\n+lib_gnu_java_awt_peer_gtk_la_LIBADD = $(GTK_LIBS) $(GLIB_LIBS) $(LIBART_LIBS)\n+\n lib_org_w3c_dom_la_SOURCES = org/w3c/dom/Attr.java \\\n org/w3c/dom/CDATASection.java \\\n org/w3c/dom/CharacterData.java \\\n@@ -220,6 +327,7 @@ all_java_source_files = \\\n     $(built_java_source_files) \\\n     $(lib_org_xml_sax_la_SOURCES) \\\n     $(lib_org_w3c_dom_la_SOURCES) \\\n+    $(gtk_awt_peer_sources) \\\n     $(x_java_source_files)\n \n all_java_class_files = $(all_java_source_files:.java=.class)\n@@ -269,10 +377,19 @@ $(c_files): %.lo: %.c\n \n $(c_files): java/lang/fdlibm.h java/lang/ieeefp.h java/lang/mprec.h\n \n+## FIXME: GNU make.\n+$(gtk_c_files): %.lo: %.c\n+\t$(LTCOMPILE) -c -Ijniinclude -I$(srcdir)/jni/classpath -I$(srcdir)/jni/gtk-peer $(GTK_CFLAGS) $(LIBART_CFLAGS) -o $@ $<\n+\n+$(gtk_c_files): $(gtk_c_headers)\n+\n ## FIXME: GNU make.\n $(javao_files) $(x_javao_files) $(lib_org_w3c_dom_la_OBJECTS) $(lib_org_xml_sax_la_OBJECTS): %.lo: %.java\n \t$(GCJCOMPILE) -o $@ $<\n \n+$(gtk_awt_peer_sources:.java=.lo): %.lo: %.java\n+\t$(GCJCOMPILE) -fjni -o $@ $<\n+\n ## Pass the list of object files to libtool in a temporary file to \n ## avoid tripping platform command line length limits.\n libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)"}, {"sha": "a646689d7b2c584bdee69916a6441f60a0340a38", "filename": "libjava/Makefile.in", "status": "modified", "additions": 286, "deletions": 75, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -84,10 +84,19 @@ GCLIBS = @GCLIBS@\n GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n+GLIB_CFLAGS = @GLIB_CFLAGS@\n+GLIB_CONFIG = @GLIB_CONFIG@\n+GLIB_LIBS = @GLIB_LIBS@\n+GTK_CFLAGS = @GTK_CFLAGS@\n+GTK_CONFIG = @GTK_CONFIG@\n+GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n INCLTDL = @INCLTDL@\n INTERPRETER = @INTERPRETER@\n JC1GCSPEC = @JC1GCSPEC@\n+LIBART_CFLAGS = @LIBART_CFLAGS@\n+LIBART_CONFIG = @LIBART_CONFIG@\n+LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n LIBGCJDEBUG = @LIBGCJDEBUG@\n LIBGCJTESTSPEC = @LIBGCJTESTSPEC@\n@@ -116,6 +125,7 @@ THREADLDFLAGS = @THREADLDFLAGS@\n THREADLIBS = @THREADLIBS@\n THREADOBJS = @THREADOBJS@\n THREADSPEC = @THREADSPEC@\n+TOOLKIT = @TOOLKIT@\n VERSION = @VERSION@\n ZINCS = @ZINCS@\n ZLIBS = @ZLIBS@\n@@ -132,14 +142,20 @@ toolexeclibdir = @toolexeclibdir@\n toolexecmainlibdir = @toolexecmainlibdir@\n \n AUTOMAKE_OPTIONS = foreign\n+\n+ACLOCAL_AMFLAGS = -I .\n @TESTSUBDIR_TRUE@SUBDIRS = @TESTSUBDIR_TRUE@$(DIRLTDL) testsuite gcj include\n @TESTSUBDIR_FALSE@SUBDIRS = @TESTSUBDIR_FALSE@$(DIRLTDL) gcj include\n @XLIB_AWT_TRUE@cond_x_ltlibrary = @XLIB_AWT_TRUE@libgcjx.la\n @XLIB_AWT_FALSE@cond_x_ltlibrary = \n @XLIB_AWT_TRUE@xlib_includes = @XLIB_AWT_TRUE@-I../libstdc++-v3/include -I../libstdc++-v3/include/$(target_alias) -I$(srcdir)/../libstdc++-v3/libsupc++\n @XLIB_AWT_FALSE@xlib_includes = \n+@GTK_AWT_TRUE@cond_gtk_ltlibrary = @GTK_AWT_TRUE@lib-gnu-java-awt-peer-gtk.la\n+@GTK_AWT_FALSE@cond_gtk_ltlibrary = \n+\n+toolexeclib_LTLIBRARIES = libgcj.la lib-org-xml-sax.la lib-org-w3c-dom.la \\\n+    $(cond_gtk_ltlibrary) $(cond_x_ltlibrary)\n \n-toolexeclib_LTLIBRARIES = libgcj.la lib-org-xml-sax.la lib-org-w3c-dom.la $(cond_x_ltlibrary)\n toolexecmainlib_DATA = libgcj.spec\n \n jardir = $(datadir)/java\n@@ -191,6 +207,7 @@ INCLUDES = -I$(top_srcdir) -Iinclude -I$(top_srcdir)/include \\\n nat_files = $(nat_source_files:.cc=.lo)\n x_nat_files = $(x_nat_source_files:.cc=.lo)\n c_files = $(c_source_files:.c=.lo)\n+gtk_c_files = $(gtk_c_source_files:.c=.lo)\n javao_files = $(java_source_files:.java=.lo) \\\n \t$(built_java_source_files:.java=.lo)\n \n@@ -220,6 +237,96 @@ libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(THREADLIBS) \\\n \n libgcj_la_LINK = $(LIBLINK)\n \n+gtk_c_source_files = \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c\t\\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c \\\n+jni/gtk-peer/gthread-jni.c \\\n+jni/classpath/jcl.c \\\n+jni/classpath/jnilink.c\t\\\n+jni/classpath/native_state.c \\\n+jni/classpath/primlib.c\n+\n+\n+gtk_awt_peer_sources = \\\n+gnu/java/awt/peer/gtk/GdkFontMetrics.java \\\n+gnu/java/awt/peer/gtk/GdkGraphics.java \\\n+gnu/java/awt/peer/gtk/GtkArg.java \\\n+gnu/java/awt/peer/gtk/GtkArgList.java \\\n+gnu/java/awt/peer/gtk/GtkButtonPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCanvasPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.java \\\n+gnu/java/awt/peer/gtk/GtkCheckboxPeer.java \\\n+gnu/java/awt/peer/gtk/GtkChoicePeer.java \\\n+gnu/java/awt/peer/gtk/GtkClipboard.java\t\\\n+gnu/java/awt/peer/gtk/GtkComponentPeer.java \\\n+gnu/java/awt/peer/gtk/GtkContainerPeer.java \\\n+gnu/java/awt/peer/gtk/GtkDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFileDialogPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFontPeer.java \\\n+gnu/java/awt/peer/gtk/GtkFramePeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkGenericPeer.java \\\n+gnu/java/awt/peer/gtk/GtkImage.java \\\n+gnu/java/awt/peer/gtk/GtkImagePainter.java \\\n+gnu/java/awt/peer/gtk/GtkLabelPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkListPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMainThread.java \\\n+gnu/java/awt/peer/gtk/GtkMenuBarPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMenuComponentPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkMenuItemPeer.java \\\n+gnu/java/awt/peer/gtk/GtkMenuPeer.java \\\n+gnu/java/awt/peer/gtk/GtkOffScreenImage.java \\\n+gnu/java/awt/peer/gtk/GtkPanelPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java \\\n+gnu/java/awt/peer/gtk/GtkScrollPanePeer.java \\\n+gnu/java/awt/peer/gtk/GtkScrollbarPeer.java \\\n+gnu/java/awt/peer/gtk/GtkTextAreaPeer.java \\\n+gnu/java/awt/peer/gtk/GtkTextComponentPeer.java\t\\\n+gnu/java/awt/peer/gtk/GtkTextFieldPeer.java \\\n+gnu/java/awt/peer/gtk/GtkToolkit.java \\\n+gnu/java/awt/peer/gtk/GtkWindowPeer.java\n+\n+\n+gtk_c_headers = $(patsubst %.java,jniinclude/%.h,$(subst /,_,$(gtk_awt_peer_sources)))\n+\n+lib_gnu_java_awt_peer_gtk_la_SOURCES = \\\n+$(gtk_awt_peer_sources) \\\n+$(gtk_c_source_files) \\\n+jni/gtk-peer/gthread-jni.h \\\n+jni/gtk-peer/gtkpeer.h \\\n+jni/classpath/jcl.h \\\n+jni/classpath/jnilink.h\t\\\n+jni/classpath/native_state.h \\\n+jni/classpath/primlib.h\n+\n+\n+lib_gnu_java_awt_peer_gtk_la_LIBADD = $(GTK_LIBS) $(GLIB_LIBS) $(LIBART_LIBS)\n+\n lib_org_w3c_dom_la_SOURCES = org/w3c/dom/Attr.java \\\n org/w3c/dom/CDATASection.java \\\n org/w3c/dom/CharacterData.java \\\n@@ -294,6 +401,7 @@ all_java_source_files = \\\n     $(built_java_source_files) \\\n     $(lib_org_xml_sax_la_SOURCES) \\\n     $(lib_org_w3c_dom_la_SOURCES) \\\n+    $(gtk_awt_peer_sources) \\\n     $(x_java_source_files)\n \n \n@@ -2309,6 +2417,75 @@ org/w3c/dom/traversal/DocumentTraversal.lo \\\n org/w3c/dom/traversal/NodeFilter.lo \\\n org/w3c/dom/traversal/NodeIterator.lo \\\n org/w3c/dom/traversal/TreeWalker.lo\n+lib_gnu_java_awt_peer_gtk_la_LDFLAGS = \n+lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES = \n+lib_gnu_java_awt_peer_gtk_la_OBJECTS =  \\\n+gnu/java/awt/peer/gtk/GdkFontMetrics.lo \\\n+gnu/java/awt/peer/gtk/GdkGraphics.lo gnu/java/awt/peer/gtk/GtkArg.lo \\\n+gnu/java/awt/peer/gtk/GtkArgList.lo \\\n+gnu/java/awt/peer/gtk/GtkButtonPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkCanvasPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkCheckboxPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkChoicePeer.lo \\\n+gnu/java/awt/peer/gtk/GtkClipboard.lo \\\n+gnu/java/awt/peer/gtk/GtkComponentPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkContainerPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkDialogPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkFileDialogPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkFontPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkFramePeer.lo \\\n+gnu/java/awt/peer/gtk/GtkGenericPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkImage.lo \\\n+gnu/java/awt/peer/gtk/GtkImagePainter.lo \\\n+gnu/java/awt/peer/gtk/GtkLabelPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkListPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkMainThread.lo \\\n+gnu/java/awt/peer/gtk/GtkMenuBarPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkMenuComponentPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkMenuItemPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkMenuPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkOffScreenImage.lo \\\n+gnu/java/awt/peer/gtk/GtkPanelPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkPopupMenuPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkScrollPanePeer.lo \\\n+gnu/java/awt/peer/gtk/GtkScrollbarPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkTextAreaPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkTextComponentPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkTextFieldPeer.lo \\\n+gnu/java/awt/peer/gtk/GtkToolkit.lo \\\n+gnu/java/awt/peer/gtk/GtkWindowPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.lo \\\n+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.lo \\\n+jni/gtk-peer/gthread-jni.lo jni/classpath/jcl.lo \\\n+jni/classpath/jnilink.lo jni/classpath/native_state.lo \\\n+jni/classpath/primlib.lo\n libgcjx_la_OBJECTS =  gnu/gcj/xlib/natClip.lo \\\n gnu/gcj/xlib/natColormap.lo gnu/gcj/xlib/natDisplay.lo \\\n gnu/gcj/xlib/natDrawable.lo gnu/gcj/xlib/natFont.lo \\\n@@ -2346,9 +2523,8 @@ LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n DATA =  $(jar_DATA) $(toolexecmainlib_DATA)\n \n DIST_COMMON =  README COPYING ChangeLog Makefile.am Makefile.in NEWS \\\n-THANKS acconfig.h acinclude.m4 aclocal.m4 configure configure.in \\\n-gcj/libgcj-config.h.in gcj/stamp-h2.in include/config.h.in \\\n-include/stamp-h1.in libgcj-test.spec.in libgcj.spec.in\n+THANKS acinclude.m4 aclocal.m4 configure configure.in \\\n+libgcj-test.spec.in libgcj.spec.in\n \n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n@@ -2448,6 +2624,43 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/awt/GLightweightPeer.P \\\n .deps/gnu/java/awt/image/ImageDecoder.P \\\n .deps/gnu/java/awt/image/XBMDecoder.P \\\n+.deps/gnu/java/awt/peer/gtk/GdkFontMetrics.P \\\n+.deps/gnu/java/awt/peer/gtk/GdkGraphics.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkArg.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkArgList.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkButtonPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkCanvasPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkCheckboxPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkChoicePeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkClipboard.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkComponentPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkContainerPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkDialogPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkFileDialogPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkFontPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkFramePeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkGenericPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkImage.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkImagePainter.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkLabelPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkListPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkMainThread.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkMenuBarPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkMenuComponentPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkMenuItemPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkMenuPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkOffScreenImage.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkPanelPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkPopupMenuPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkScrollPanePeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkScrollbarPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkTextAreaPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkTextComponentPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkTextFieldPeer.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkToolkit.P \\\n+.deps/gnu/java/awt/peer/gtk/GtkWindowPeer.P \\\n .deps/gnu/java/beans/BeanInfoEmbryo.P \\\n .deps/gnu/java/beans/EmptyBeanInfo.P \\\n .deps/gnu/java/beans/ExplicitBeanInfo.P \\\n@@ -3724,8 +3937,38 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/transaction/UserTransaction.P \\\n .deps/javax/transaction/xa/XAException.P \\\n .deps/javax/transaction/xa/XAResource.P \\\n-.deps/javax/transaction/xa/Xid.P .deps/jni.P .deps/no-threads.P \\\n-.deps/nogc.P .deps/org/w3c/dom/Attr.P .deps/org/w3c/dom/CDATASection.P \\\n+.deps/javax/transaction/xa/Xid.P .deps/jni.P .deps/jni/classpath/jcl.P \\\n+.deps/jni/classpath/jnilink.P .deps/jni/classpath/native_state.P \\\n+.deps/jni/classpath/primlib.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.P \\\n+.deps/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.P \\\n+.deps/jni/gtk-peer/gthread-jni.P .deps/no-threads.P .deps/nogc.P \\\n+.deps/org/w3c/dom/Attr.P .deps/org/w3c/dom/CDATASection.P \\\n .deps/org/w3c/dom/CharacterData.P .deps/org/w3c/dom/Comment.P \\\n .deps/org/w3c/dom/DOMException.P .deps/org/w3c/dom/DOMImplementation.P \\\n .deps/org/w3c/dom/Document.P .deps/org/w3c/dom/DocumentFragment.P \\\n@@ -3765,8 +4008,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/org/xml/sax/helpers/XMLReaderFactory.P .deps/posix-threads.P \\\n .deps/posix.P .deps/prims.P .deps/resolve.P .deps/verify.P \\\n .deps/win32-threads.P .deps/win32.P\n-SOURCES = $(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) $(lib_org_xml_sax_la_SOURCES) $(lib_org_w3c_dom_la_SOURCES) $(libgcjx_la_SOURCES) $(EXTRA_libgcjx_la_SOURCES) $(jv_convert_SOURCES) $(EXTRA_jv_convert_SOURCES) $(gij_SOURCES) $(rmic_SOURCES) $(EXTRA_rmic_SOURCES) $(rmiregistry_SOURCES) $(EXTRA_rmiregistry_SOURCES) $(gen_from_JIS_SOURCES) $(EXTRA_gen_from_JIS_SOURCES)\n-OBJECTS = $(libgcj_la_OBJECTS) $(lib_org_xml_sax_la_OBJECTS) $(lib_org_w3c_dom_la_OBJECTS) $(libgcjx_la_OBJECTS) $(jv_convert_OBJECTS) $(gij_OBJECTS) $(rmic_OBJECTS) $(rmiregistry_OBJECTS) $(gen_from_JIS_OBJECTS)\n+SOURCES = $(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) $(lib_org_xml_sax_la_SOURCES) $(lib_org_w3c_dom_la_SOURCES) $(lib_gnu_java_awt_peer_gtk_la_SOURCES) $(libgcjx_la_SOURCES) $(EXTRA_libgcjx_la_SOURCES) $(jv_convert_SOURCES) $(EXTRA_jv_convert_SOURCES) $(gij_SOURCES) $(rmic_SOURCES) $(EXTRA_rmic_SOURCES) $(rmiregistry_SOURCES) $(EXTRA_rmiregistry_SOURCES) $(gen_from_JIS_SOURCES) $(EXTRA_gen_from_JIS_SOURCES)\n+OBJECTS = $(libgcj_la_OBJECTS) $(lib_org_xml_sax_la_OBJECTS) $(lib_org_w3c_dom_la_OBJECTS) $(lib_gnu_java_awt_peer_gtk_la_OBJECTS) $(libgcjx_la_OBJECTS) $(jv_convert_OBJECTS) $(gij_OBJECTS) $(rmic_OBJECTS) $(rmiregistry_OBJECTS) $(gen_from_JIS_OBJECTS)\n \n all: all-redirect\n .SUFFIXES:\n@@ -3778,60 +4021,15 @@ Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)\n \tcd $(top_builddir) \\\n \t  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n \n-$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ configure.in  acinclude.m4\n-\tcd $(srcdir) && $(ACLOCAL)\n+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ configure.in  acinclude.m4 \\\n+\t\t./acinclude.m4 ./aclocal.m4 ./glib.m4 ./gtk.m4 \\\n+\t\t./libart.m4\n+\tcd $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n \n config.status: $(srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n \t$(SHELL) ./config.status --recheck\n $(srcdir)/configure: @MAINTAINER_MODE_TRUE@$(srcdir)/configure.in $(ACLOCAL_M4) $(CONFIGURE_DEPENDENCIES)\n \tcd $(srcdir) && $(AUTOCONF)\n-\n-include/config.h: include/stamp-h1\n-\t@if test ! -f $@; then \\\n-\t\trm -f include/stamp-h1; \\\n-\t\t$(MAKE) include/stamp-h1; \\\n-\telse :; fi\n-include/stamp-h1: $(srcdir)/include/config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=include/config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > include/stamp-h1 2> /dev/null\n-$(srcdir)/include/config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/include/stamp-h1.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/include/stamp-h1.in; \\\n-\t\t$(MAKE) $(srcdir)/include/stamp-h1.in; \\\n-\telse :; fi\n-$(srcdir)/include/stamp-h1.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/include/stamp-h1.in 2> /dev/null\n-\n-gcj/libgcj-config.h: gcj/stamp-h2\n-\t@if test ! -f $@; then \\\n-\t\trm -f gcj/stamp-h2; \\\n-\t\t$(MAKE) gcj/stamp-h2; \\\n-\telse :; fi\n-gcj/stamp-h2: $(srcdir)/gcj/libgcj-config.h.in $(top_builddir)/config.status\n-\tcd $(top_builddir) \\\n-\t  && CONFIG_FILES= CONFIG_HEADERS=gcj/libgcj-config.h \\\n-\t     $(SHELL) ./config.status\n-\t@echo timestamp > gcj/stamp-h2 2> /dev/null\n-$(srcdir)/gcj/libgcj-config.h.in: @MAINTAINER_MODE_TRUE@$(srcdir)/gcj/stamp-h2.in\n-\t@if test ! -f $@; then \\\n-\t\trm -f $(srcdir)/gcj/stamp-h2.in; \\\n-\t\t$(MAKE) $(srcdir)/gcj/stamp-h2.in; \\\n-\telse :; fi\n-$(srcdir)/gcj/stamp-h2.in: $(top_srcdir)/configure.in $(ACLOCAL_M4) acconfig.h\n-\tcd $(top_srcdir) && $(AUTOHEADER)\n-\t@echo timestamp > $(srcdir)/gcj/stamp-h2.in 2> /dev/null\n-\n-mostlyclean-hdr:\n-\n-clean-hdr:\n-\n-distclean-hdr:\n-\t-rm -f include/config.h gcj/libgcj-config.h\n-\n-maintainer-clean-hdr:\n libgcj.spec: $(top_builddir)/config.status libgcj.spec.in\n \tcd $(top_builddir) && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status\n libgcj-test.spec: $(top_builddir)/config.status libgcj-test.spec.in\n@@ -3906,6 +4104,9 @@ lib-org-xml-sax.la: $(lib_org_xml_sax_la_OBJECTS) $(lib_org_xml_sax_la_DEPENDENC\n lib-org-w3c-dom.la: $(lib_org_w3c_dom_la_OBJECTS) $(lib_org_w3c_dom_la_DEPENDENCIES)\n \t$(LINK) -rpath $(toolexeclibdir) $(lib_org_w3c_dom_la_LDFLAGS) $(lib_org_w3c_dom_la_OBJECTS) $(lib_org_w3c_dom_la_LIBADD) $(LIBS)\n \n+lib-gnu-java-awt-peer-gtk.la: $(lib_gnu_java_awt_peer_gtk_la_OBJECTS) $(lib_gnu_java_awt_peer_gtk_la_DEPENDENCIES)\n+\t$(LINK) -rpath $(toolexeclibdir) $(lib_gnu_java_awt_peer_gtk_la_LDFLAGS) $(lib_gnu_java_awt_peer_gtk_la_OBJECTS) $(lib_gnu_java_awt_peer_gtk_la_LIBADD) $(LIBS)\n+\n mostlyclean-binPROGRAMS:\n \n clean-binPROGRAMS:\n@@ -4272,32 +4473,29 @@ distclean-generic:\n \t-rm -f config.cache config.log stamp-h stamp-h[0-9]*\n \n maintainer-clean-generic:\n-mostlyclean-am:  mostlyclean-hdr mostlyclean-toolexeclibLTLIBRARIES \\\n-\t\tmostlyclean-compile mostlyclean-libtool \\\n-\t\tmostlyclean-binPROGRAMS mostlyclean-noinstPROGRAMS \\\n-\t\tmostlyclean-tags mostlyclean-depend mostlyclean-generic\n+mostlyclean-am:  mostlyclean-toolexeclibLTLIBRARIES mostlyclean-compile \\\n+\t\tmostlyclean-libtool mostlyclean-binPROGRAMS \\\n+\t\tmostlyclean-noinstPROGRAMS mostlyclean-tags \\\n+\t\tmostlyclean-depend mostlyclean-generic\n \n mostlyclean: mostlyclean-recursive\n \n-clean-am:  clean-hdr clean-toolexeclibLTLIBRARIES clean-compile \\\n-\t\tclean-libtool clean-binPROGRAMS clean-noinstPROGRAMS \\\n-\t\tclean-tags clean-depend clean-generic mostlyclean-am \\\n-\t\tclean-local\n+clean-am:  clean-toolexeclibLTLIBRARIES clean-compile clean-libtool \\\n+\t\tclean-binPROGRAMS clean-noinstPROGRAMS clean-tags \\\n+\t\tclean-depend clean-generic mostlyclean-am clean-local\n \n clean: clean-recursive\n \n-distclean-am:  distclean-hdr distclean-toolexeclibLTLIBRARIES \\\n-\t\tdistclean-compile distclean-libtool \\\n-\t\tdistclean-binPROGRAMS distclean-noinstPROGRAMS \\\n-\t\tdistclean-tags distclean-depend distclean-generic \\\n-\t\tclean-am\n+distclean-am:  distclean-toolexeclibLTLIBRARIES distclean-compile \\\n+\t\tdistclean-libtool distclean-binPROGRAMS \\\n+\t\tdistclean-noinstPROGRAMS distclean-tags \\\n+\t\tdistclean-depend distclean-generic clean-am\n \t-rm -f libtool\n \n distclean: distclean-recursive\n \t-rm -f config.status\n \n-maintainer-clean-am:  maintainer-clean-hdr \\\n-\t\tmaintainer-clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-am:  maintainer-clean-toolexeclibLTLIBRARIES \\\n \t\tmaintainer-clean-compile maintainer-clean-libtool \\\n \t\tmaintainer-clean-binPROGRAMS \\\n \t\tmaintainer-clean-noinstPROGRAMS maintainer-clean-tags \\\n@@ -4309,9 +4507,9 @@ maintainer-clean-am:  maintainer-clean-hdr \\\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f config.status\n \n-.PHONY: mostlyclean-hdr distclean-hdr clean-hdr maintainer-clean-hdr \\\n-mostlyclean-toolexeclibLTLIBRARIES distclean-toolexeclibLTLIBRARIES \\\n-clean-toolexeclibLTLIBRARIES maintainer-clean-toolexeclibLTLIBRARIES \\\n+.PHONY: mostlyclean-toolexeclibLTLIBRARIES \\\n+distclean-toolexeclibLTLIBRARIES clean-toolexeclibLTLIBRARIES \\\n+maintainer-clean-toolexeclibLTLIBRARIES \\\n uninstall-toolexeclibLTLIBRARIES install-toolexeclibLTLIBRARIES \\\n mostlyclean-compile distclean-compile clean-compile \\\n maintainer-clean-compile mostlyclean-libtool distclean-libtool \\\n@@ -4337,6 +4535,11 @@ installdirs mostlyclean-generic distclean-generic clean-generic \\\n maintainer-clean-generic clean mostlyclean distclean maintainer-clean\n \n \n+$(gtk_c_headers): $(gtk_awt_peer_sources)\n+\t@input=`echo $@ | sed -e 's,jniinclude,,' -e 's,_,.,g' -e 's,.h$$,,'`; \\\n+\techo \"$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\"; \\\n+\t$(GCJH) -jni -d jniinclude -classpath '' -bootclasspath $(top_builddir) $$input\n+\n install-exec-hook:\n \tcd $(DESTDIR)$(libdir) && \\\n \tif test -f libgcjx.la; then \\\n@@ -4377,9 +4580,17 @@ $(c_files): %.lo: %.c\n \n $(c_files): java/lang/fdlibm.h java/lang/ieeefp.h java/lang/mprec.h\n \n+$(gtk_c_files): %.lo: %.c\n+\t$(LTCOMPILE) -c -Ijniinclude -I$(srcdir)/jni/classpath -I$(srcdir)/jni/gtk-peer $(GTK_CFLAGS) $(LIBART_CFLAGS) -o $@ $<\n+\n+$(gtk_c_files): $(gtk_c_headers)\n+\n $(javao_files) $(x_javao_files) $(lib_org_w3c_dom_la_OBJECTS) $(lib_org_xml_sax_la_OBJECTS): %.lo: %.java\n \t$(GCJCOMPILE) -o $@ $<\n \n+$(gtk_awt_peer_sources:.java=.lo): %.lo: %.java\n+\t$(GCJCOMPILE) -fjni -o $@ $<\n+\n libgcj.la: $(libgcj_la_OBJECTS) $(libgcj_la_DEPENDENCIES)\n \t@: $(shell echo Creating list of files to link...) $(shell rm -f libgcj.objectlist || :) $(shell touch libgcj.objectlist) $(foreach object,$(libgcj_la_OBJECTS) $(libgcj_la_LIBADD),$(shell echo $(object) >> libgcj.objectlist))\n \t$(libgcj_la_LINK) -objectlist libgcj.objectlist \\"}, {"sha": "c32821e69a9610781fed3ccaea6096809f566da9", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 566, "deletions": 8, "changes": 574, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,6 +1,6 @@\n-dnl aclocal.m4 generated automatically by aclocal 1.4-p5\n+dnl aclocal.m4 generated automatically by aclocal 1.4\n \n-dnl Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.\n+dnl Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.\n dnl This file is free software; the Free Software Foundation\n dnl gives unlimited permission to copy and/or distribute it,\n dnl with or without modifications, as long as this notice is preserved.\n@@ -271,7 +271,7 @@ AC_DEFUN([AM_LC_MESSAGES],\n dnl Usage:\n dnl AM_INIT_AUTOMAKE(package,version, [no-define])\n \n-AC_DEFUN([AM_INIT_AUTOMAKE],\n+AC_DEFUN(AM_INIT_AUTOMAKE,\n [AC_REQUIRE([AC_PROG_INSTALL])\n PACKAGE=[$1]\n AC_SUBST(PACKAGE)\n@@ -299,7 +299,7 @@ AC_REQUIRE([AC_PROG_MAKE_SET])])\n # Check to make sure that the build environment is sane.\n #\n \n-AC_DEFUN([AM_SANITY_CHECK],\n+AC_DEFUN(AM_SANITY_CHECK,\n [AC_MSG_CHECKING([whether build environment is sane])\n # Just in case\n sleep 1\n@@ -340,7 +340,7 @@ AC_MSG_RESULT(yes)])\n \n dnl AM_MISSING_PROG(NAME, PROGRAM, DIRECTORY)\n dnl The program must properly implement --version.\n-AC_DEFUN([AM_MISSING_PROG],\n+AC_DEFUN(AM_MISSING_PROG,\n [AC_MSG_CHECKING(for working $2)\n # Run test in a subshell; some versions of sh will print an error if\n # an executable is not found, even if stderr is redirected.\n@@ -359,7 +359,7 @@ AC_SUBST($1)])\n \n # serial 1\n \n-AC_DEFUN([AM_MAINTAINER_MODE],\n+AC_DEFUN(AM_MAINTAINER_MODE,\n [AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n   dnl maintainer-mode is disabled by default\n   AC_ARG_ENABLE(maintainer-mode,\n@@ -376,7 +376,7 @@ AC_DEFUN([AM_MAINTAINER_MODE],\n \n # Define a conditional.\n \n-AC_DEFUN([AM_CONDITIONAL],\n+AC_DEFUN(AM_CONDITIONAL,\n [AC_SUBST($1_TRUE)\n AC_SUBST($1_FALSE)\n if $2; then\n@@ -389,7 +389,7 @@ fi])\n \n # Like AC_CONFIG_HEADER, but automatically create stamp file.\n \n-AC_DEFUN([AM_CONFIG_HEADER],\n+AC_DEFUN(AM_CONFIG_HEADER,\n [AC_PREREQ([2.12])\n AC_CONFIG_HEADER([$1])\n dnl When config.status generates a header, we must update the stamp-h file.\n@@ -410,3 +410,561 @@ for am_file in <<$1>>; do\n done<<>>dnl>>)\n changequote([,]))])\n \n+# Configure paths for GTK+\n+# Owen Taylor     97-11-3\n+\n+dnl AM_PATH_GTK([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, MODULES]]]])\n+dnl Test for GTK, and define GTK_CFLAGS and GTK_LIBS\n+dnl\n+AC_DEFUN(AM_PATH_GTK,\n+[dnl \n+dnl Get the cflags and libraries from the gtk-config script\n+dnl\n+AC_ARG_WITH(gtk-prefix,[  --with-gtk-prefix=PFX   Prefix where GTK is installed (optional)],\n+            gtk_config_prefix=\"$withval\", gtk_config_prefix=\"\")\n+AC_ARG_WITH(gtk-exec-prefix,[  --with-gtk-exec-prefix=PFX Exec prefix where GTK is installed (optional)],\n+            gtk_config_exec_prefix=\"$withval\", gtk_config_exec_prefix=\"\")\n+AC_ARG_ENABLE(gtktest, [  --disable-gtktest       Do not try to compile and run a test GTK program],\n+\t\t    , enable_gtktest=yes)\n+\n+  for module in . $4\n+  do\n+      case \"$module\" in\n+         gthread) \n+             gtk_config_args=\"$gtk_config_args gthread\"\n+         ;;\n+      esac\n+  done\n+\n+  if test x$gtk_config_exec_prefix != x ; then\n+     gtk_config_args=\"$gtk_config_args --exec-prefix=$gtk_config_exec_prefix\"\n+     if test x${GTK_CONFIG+set} != xset ; then\n+        GTK_CONFIG=$gtk_config_exec_prefix/bin/gtk-config\n+     fi\n+  fi\n+  if test x$gtk_config_prefix != x ; then\n+     gtk_config_args=\"$gtk_config_args --prefix=$gtk_config_prefix\"\n+     if test x${GTK_CONFIG+set} != xset ; then\n+        GTK_CONFIG=$gtk_config_prefix/bin/gtk-config\n+     fi\n+  fi\n+\n+  AC_PATH_PROG(GTK_CONFIG, gtk-config, no)\n+  min_gtk_version=ifelse([$1], ,0.99.7,$1)\n+  AC_MSG_CHECKING(for GTK - version >= $min_gtk_version)\n+  no_gtk=\"\"\n+  if test \"$GTK_CONFIG\" = \"no\" ; then\n+    no_gtk=yes\n+  else\n+    GTK_CFLAGS=`$GTK_CONFIG $gtk_config_args --cflags`\n+    GTK_LIBS=`$GTK_CONFIG $gtk_config_args --libs`\n+    gtk_config_major_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    gtk_config_minor_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    gtk_config_micro_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_gtktest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n+      LIBS=\"$GTK_LIBS $LIBS\"\n+dnl\n+dnl Now check if the installed GTK is sufficiently new. (Also sanity\n+dnl checks the results of gtk-config to some extent\n+dnl\n+      rm -f conf.gtktest\n+      AC_TRY_RUN([\n+#include <gtk/gtk.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int \n+main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.gtktest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = g_strdup(\"$min_gtk_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_gtk_version\");\n+     exit(1);\n+   }\n+\n+  if ((gtk_major_version != $gtk_config_major_version) ||\n+      (gtk_minor_version != $gtk_config_minor_version) ||\n+      (gtk_micro_version != $gtk_config_micro_version))\n+    {\n+      printf(\"\\n*** 'gtk-config --version' returned %d.%d.%d, but GTK+ (%d.%d.%d)\\n\", \n+             $gtk_config_major_version, $gtk_config_minor_version, $gtk_config_micro_version,\n+             gtk_major_version, gtk_minor_version, gtk_micro_version);\n+      printf (\"*** was found! If gtk-config was correct, then it is best\\n\");\n+      printf (\"*** to remove the old version of GTK+. You may also be able to fix the error\\n\");\n+      printf(\"*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\\n\");\n+      printf(\"*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\\n\");\n+      printf(\"*** required on your system.\\n\");\n+      printf(\"*** If gtk-config was wrong, set the environment variable GTK_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of gtk-config, and remove the file config.cache\\n\");\n+      printf(\"*** before re-running configure\\n\");\n+    } \n+#if defined (GTK_MAJOR_VERSION) && defined (GTK_MINOR_VERSION) && defined (GTK_MICRO_VERSION)\n+  else if ((gtk_major_version != GTK_MAJOR_VERSION) ||\n+\t   (gtk_minor_version != GTK_MINOR_VERSION) ||\n+           (gtk_micro_version != GTK_MICRO_VERSION))\n+    {\n+      printf(\"*** GTK+ header files (version %d.%d.%d) do not match\\n\",\n+\t     GTK_MAJOR_VERSION, GTK_MINOR_VERSION, GTK_MICRO_VERSION);\n+      printf(\"*** library (version %d.%d.%d)\\n\",\n+\t     gtk_major_version, gtk_minor_version, gtk_micro_version);\n+    }\n+#endif /* defined (GTK_MAJOR_VERSION) ... */\n+  else\n+    {\n+      if ((gtk_major_version > major) ||\n+        ((gtk_major_version == major) && (gtk_minor_version > minor)) ||\n+        ((gtk_major_version == major) && (gtk_minor_version == minor) && (gtk_micro_version >= micro)))\n+      {\n+        return 0;\n+       }\n+     else\n+      {\n+        printf(\"\\n*** An old version of GTK+ (%d.%d.%d) was found.\\n\",\n+               gtk_major_version, gtk_minor_version, gtk_micro_version);\n+        printf(\"*** You need a version of GTK+ newer than %d.%d.%d. The latest version of\\n\",\n+\t       major, minor, micro);\n+        printf(\"*** GTK+ is always available from ftp://ftp.gtk.org.\\n\");\n+        printf(\"***\\n\");\n+        printf(\"*** If you have already installed a sufficiently new version, this error\\n\");\n+        printf(\"*** probably means that the wrong copy of the gtk-config shell script is\\n\");\n+        printf(\"*** being found. The easiest way to fix this is to remove the old version\\n\");\n+        printf(\"*** of GTK+, but you can also set the GTK_CONFIG environment to point to the\\n\");\n+        printf(\"*** correct copy of gtk-config. (In this case, you will have to\\n\");\n+        printf(\"*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\\n\");\n+        printf(\"*** so that the correct libraries are found at run-time))\\n\");\n+      }\n+    }\n+  return 1;\n+}\n+],, no_gtk=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_gtk\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$GTK_CONFIG\" = \"no\" ; then\n+       echo \"*** The gtk-config script installed by GTK could not be found\"\n+       echo \"*** If GTK was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the GTK_CONFIG environment variable to the\"\n+       echo \"*** full path to gtk-config.\"\n+     else\n+       if test -f conf.gtktest ; then\n+        :\n+       else\n+          echo \"*** Could not run GTK test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n+          LIBS=\"$LIBS $GTK_LIBS\"\n+          AC_TRY_LINK([\n+#include <gtk/gtk.h>\n+#include <stdio.h>\n+],      [ return ((gtk_major_version) || (gtk_minor_version) || (gtk_micro_version)); ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding GTK or finding the wrong\"\n+          echo \"*** version of GTK. If it is not finding GTK, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"\n+          echo \"***\"\n+          echo \"*** If you have a RedHat 5.0 system, you should remove the GTK package that\"\n+          echo \"*** came with the system with the command\"\n+          echo \"***\"\n+          echo \"***    rpm --erase --nodeps gtk gtk-devel\" ],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means GTK was incorrectly installed\"\n+          echo \"*** or that you have moved GTK since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the gtk-config script: $GTK_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     GTK_CFLAGS=\"\"\n+     GTK_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(GTK_CFLAGS)\n+  AC_SUBST(GTK_LIBS)\n+  rm -f conf.gtktest\n+])\n+\n+# Configure paths for GLIB\n+# Owen Taylor     97-11-3\n+\n+dnl AM_PATH_GLIB([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, MODULES]]]])\n+dnl Test for GLIB, and define GLIB_CFLAGS and GLIB_LIBS, if \"gmodule\" or \n+dnl gthread is specified in MODULES, pass to glib-config\n+dnl\n+AC_DEFUN(AM_PATH_GLIB,\n+[dnl \n+dnl Get the cflags and libraries from the glib-config script\n+dnl\n+AC_ARG_WITH(glib-prefix,[  --with-glib-prefix=PFX   Prefix where GLIB is installed (optional)],\n+            glib_config_prefix=\"$withval\", glib_config_prefix=\"\")\n+AC_ARG_WITH(glib-exec-prefix,[  --with-glib-exec-prefix=PFX Exec prefix where GLIB is installed (optional)],\n+            glib_config_exec_prefix=\"$withval\", glib_config_exec_prefix=\"\")\n+AC_ARG_ENABLE(glibtest, [  --disable-glibtest       Do not try to compile and run a test GLIB program],\n+\t\t    , enable_glibtest=yes)\n+\n+  if test x$glib_config_exec_prefix != x ; then\n+     glib_config_args=\"$glib_config_args --exec-prefix=$glib_config_exec_prefix\"\n+     if test x${GLIB_CONFIG+set} != xset ; then\n+        GLIB_CONFIG=$glib_config_exec_prefix/bin/glib-config\n+     fi\n+  fi\n+  if test x$glib_config_prefix != x ; then\n+     glib_config_args=\"$glib_config_args --prefix=$glib_config_prefix\"\n+     if test x${GLIB_CONFIG+set} != xset ; then\n+        GLIB_CONFIG=$glib_config_prefix/bin/glib-config\n+     fi\n+  fi\n+\n+  for module in . $4\n+  do\n+      case \"$module\" in\n+         gmodule) \n+             glib_config_args=\"$glib_config_args gmodule\"\n+         ;;\n+         gthread) \n+             glib_config_args=\"$glib_config_args gthread\"\n+         ;;\n+      esac\n+  done\n+\n+  AC_PATH_PROG(GLIB_CONFIG, glib-config, no)\n+  min_glib_version=ifelse([$1], ,0.99.7,$1)\n+  AC_MSG_CHECKING(for GLIB - version >= $min_glib_version)\n+  no_glib=\"\"\n+  if test \"$GLIB_CONFIG\" = \"no\" ; then\n+    no_glib=yes\n+  else\n+    GLIB_CFLAGS=`$GLIB_CONFIG $glib_config_args --cflags`\n+    GLIB_LIBS=`$GLIB_CONFIG $glib_config_args --libs`\n+    glib_config_major_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    glib_config_minor_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    glib_config_micro_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_glibtest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $GLIB_CFLAGS\"\n+      LIBS=\"$GLIB_LIBS $LIBS\"\n+dnl\n+dnl Now check if the installed GLIB is sufficiently new. (Also sanity\n+dnl checks the results of glib-config to some extent\n+dnl\n+      rm -f conf.glibtest\n+      AC_TRY_RUN([\n+#include <glib.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int \n+main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.glibtest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = g_strdup(\"$min_glib_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_glib_version\");\n+     exit(1);\n+   }\n+\n+  if ((glib_major_version != $glib_config_major_version) ||\n+      (glib_minor_version != $glib_config_minor_version) ||\n+      (glib_micro_version != $glib_config_micro_version))\n+    {\n+      printf(\"\\n*** 'glib-config --version' returned %d.%d.%d, but GLIB (%d.%d.%d)\\n\", \n+             $glib_config_major_version, $glib_config_minor_version, $glib_config_micro_version,\n+             glib_major_version, glib_minor_version, glib_micro_version);\n+      printf (\"*** was found! If glib-config was correct, then it is best\\n\");\n+      printf (\"*** to remove the old version of GLIB. You may also be able to fix the error\\n\");\n+      printf(\"*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\\n\");\n+      printf(\"*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\\n\");\n+      printf(\"*** required on your system.\\n\");\n+      printf(\"*** If glib-config was wrong, set the environment variable GLIB_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of glib-config, and remove the file config.cache\\n\");\n+      printf(\"*** before re-running configure\\n\");\n+    } \n+  else if ((glib_major_version != GLIB_MAJOR_VERSION) ||\n+\t   (glib_minor_version != GLIB_MINOR_VERSION) ||\n+           (glib_micro_version != GLIB_MICRO_VERSION))\n+    {\n+      printf(\"*** GLIB header files (version %d.%d.%d) do not match\\n\",\n+\t     GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION, GLIB_MICRO_VERSION);\n+      printf(\"*** library (version %d.%d.%d)\\n\",\n+\t     glib_major_version, glib_minor_version, glib_micro_version);\n+    }\n+  else\n+    {\n+      if ((glib_major_version > major) ||\n+        ((glib_major_version == major) && (glib_minor_version > minor)) ||\n+        ((glib_major_version == major) && (glib_minor_version == minor) && (glib_micro_version >= micro)))\n+      {\n+        return 0;\n+       }\n+     else\n+      {\n+        printf(\"\\n*** An old version of GLIB (%d.%d.%d) was found.\\n\",\n+               glib_major_version, glib_minor_version, glib_micro_version);\n+        printf(\"*** You need a version of GLIB newer than %d.%d.%d. The latest version of\\n\",\n+\t       major, minor, micro);\n+        printf(\"*** GLIB is always available from ftp://ftp.gtk.org.\\n\");\n+        printf(\"***\\n\");\n+        printf(\"*** If you have already installed a sufficiently new version, this error\\n\");\n+        printf(\"*** probably means that the wrong copy of the glib-config shell script is\\n\");\n+        printf(\"*** being found. The easiest way to fix this is to remove the old version\\n\");\n+        printf(\"*** of GLIB, but you can also set the GLIB_CONFIG environment to point to the\\n\");\n+        printf(\"*** correct copy of glib-config. (In this case, you will have to\\n\");\n+        printf(\"*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\\n\");\n+        printf(\"*** so that the correct libraries are found at run-time))\\n\");\n+      }\n+    }\n+  return 1;\n+}\n+],, no_glib=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_glib\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$GLIB_CONFIG\" = \"no\" ; then\n+       echo \"*** The glib-config script installed by GLIB could not be found\"\n+       echo \"*** If GLIB was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the GLIB_CONFIG environment variable to the\"\n+       echo \"*** full path to glib-config.\"\n+     else\n+       if test -f conf.glibtest ; then\n+        :\n+       else\n+          echo \"*** Could not run GLIB test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $GLIB_CFLAGS\"\n+          LIBS=\"$LIBS $GLIB_LIBS\"\n+          AC_TRY_LINK([\n+#include <glib.h>\n+#include <stdio.h>\n+],      [ return ((glib_major_version) || (glib_minor_version) || (glib_micro_version)); ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding GLIB or finding the wrong\"\n+          echo \"*** version of GLIB. If it is not finding GLIB, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"\n+          echo \"***\"\n+          echo \"*** If you have a RedHat 5.0 system, you should remove the GTK package that\"\n+          echo \"*** came with the system with the command\"\n+          echo \"***\"\n+          echo \"***    rpm --erase --nodeps gtk gtk-devel\" ],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means GLIB was incorrectly installed\"\n+          echo \"*** or that you have moved GLIB since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the glib-config script: $GLIB_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     GLIB_CFLAGS=\"\"\n+     GLIB_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(GLIB_CFLAGS)\n+  AC_SUBST(GLIB_LIBS)\n+  rm -f conf.glibtest\n+])\n+\n+# Configure paths for LIBART\n+# Raph Levien 98-11-18\n+# stolen from Manish Singh    98-9-30\n+# stolen back from Frank Belew\n+# stolen from Manish Singh\n+# Shamelessly stolen from Owen Taylor\n+\n+dnl AM_PATH_LIBART([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])\n+dnl Test for LIBART, and define LIBART_CFLAGS and LIBART_LIBS\n+dnl\n+AC_DEFUN(AM_PATH_LIBART,\n+[dnl \n+dnl Get the cflags and libraries from the libart-config script\n+dnl\n+AC_ARG_WITH(libart-prefix,[  --with-libart-prefix=PFX   Prefix where LIBART is installed (optional)],\n+            libart_prefix=\"$withval\", libart_prefix=\"\")\n+AC_ARG_WITH(libart-exec-prefix,[  --with-libart-exec-prefix=PFX Exec prefix where LIBART is installed (optional)],\n+            libart_exec_prefix=\"$withval\", libart_exec_prefix=\"\")\n+AC_ARG_ENABLE(libarttest, [  --disable-libarttest       Do not try to compile and run a test LIBART program],\n+\t\t    , enable_libarttest=yes)\n+\n+  if test x$libart_exec_prefix != x ; then\n+     libart_args=\"$libart_args --exec-prefix=$libart_exec_prefix\"\n+     if test x${LIBART_CONFIG+set} != xset ; then\n+        LIBART_CONFIG=$libart_exec_prefix/bin/libart-config\n+     fi\n+  fi\n+  if test x$libart_prefix != x ; then\n+     libart_args=\"$libart_args --prefix=$libart_prefix\"\n+     if test x${LIBART_CONFIG+set} != xset ; then\n+        LIBART_CONFIG=$libart_prefix/bin/libart-config\n+     fi\n+  fi\n+\n+  AC_PATH_PROG(LIBART_CONFIG, libart-config, no)\n+  min_libart_version=ifelse([$1], ,0.2.5,$1)\n+  AC_MSG_CHECKING(for LIBART - version >= $min_libart_version)\n+  no_libart=\"\"\n+  if test \"$LIBART_CONFIG\" = \"no\" ; then\n+    no_libart=yes\n+  else\n+    LIBART_CFLAGS=`$LIBART_CONFIG $libartconf_args --cflags`\n+    LIBART_LIBS=`$LIBART_CONFIG $libartconf_args --libs`\n+\n+    libart_major_version=`$LIBART_CONFIG $libart_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    libart_minor_version=`$LIBART_CONFIG $libart_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    libart_micro_version=`$LIBART_CONFIG $libart_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_libarttest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $LIBART_CFLAGS\"\n+      LIBS=\"$LIBS $LIBART_LIBS\"\n+dnl\n+dnl Now check if the installed LIBART is sufficiently new. (Also sanity\n+dnl checks the results of libart-config to some extent\n+dnl\n+      rm -f conf.libarttest\n+      AC_TRY_RUN([\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <libart_lgpl/libart.h>\n+\n+char*\n+my_strdup (char *str)\n+{\n+  char *new_str;\n+  \n+  if (str)\n+    {\n+      new_str = malloc ((strlen (str) + 1) * sizeof(char));\n+      strcpy (new_str, str);\n+    }\n+  else\n+    new_str = NULL;\n+  \n+  return new_str;\n+}\n+\n+int main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.libarttest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = my_strdup(\"$min_libart_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_libart_version\");\n+     exit(1);\n+   }\n+\n+   if (($libart_major_version > major) ||\n+      (($libart_major_version == major) && ($libart_minor_version > minor)) ||\n+      (($libart_major_version == major) && ($libart_minor_version == minor) && ($libart_micro_version >= micro)))\n+    {\n+      return 0;\n+    }\n+  else\n+    {\n+      printf(\"\\n*** 'libart-config --version' returned %d.%d.%d, but the minimum version\\n\", $libart_major_version, $libart_minor_version, $libart_micro_version);\n+      printf(\"*** of LIBART required is %d.%d.%d. If libart-config is correct, then it is\\n\", major, minor, micro);\n+      printf(\"*** best to upgrade to the required version.\\n\");\n+      printf(\"*** If libart-config was wrong, set the environment variable LIBART_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of libart-config, and remove the file\\n\");\n+      printf(\"*** config.cache before re-running configure\\n\");\n+      return 1;\n+    }\n+}\n+\n+],, no_libart=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_libart\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$LIBART_CONFIG\" = \"no\" ; then\n+       echo \"*** The libart-config script installed by LIBART could not be found\"\n+       echo \"*** If LIBART was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the LIBART_CONFIG environment variable to the\"\n+       echo \"*** full path to libart-config.\"\n+     else\n+       if test -f conf.libarttest ; then\n+        :\n+       else\n+          echo \"*** Could not run LIBART test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $LIBART_CFLAGS\"\n+          LIBS=\"$LIBS $LIBART_LIBS\"\n+          AC_TRY_LINK([\n+#include <stdio.h>\n+#include <libart_lgpl/libart.h>\n+],      [ return 0; ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding LIBART or finding the wrong\"\n+          echo \"*** version of LIBART. If it is not finding LIBART, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means LIBART was incorrectly installed\"\n+          echo \"*** or that you have moved LIBART since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the libart-config script: $LIBART_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     LIBART_CFLAGS=\"\"\n+     LIBART_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(LIBART_CFLAGS)\n+  AC_SUBST(LIBART_LIBS)\n+  rm -f conf.libarttest\n+])\n+"}, {"sha": "e3afa180a482b8c81e0811267eb8ed3760a7a5a3", "filename": "libjava/configure", "status": "modified", "additions": 3743, "deletions": 2920, "changes": 6663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=5aac1dac6279f13c13e4068c4c734c48f0084205"}, {"sha": "f20c474a5508e8cf8fb90567f773e3e5ec4e7686", "filename": "libjava/configure.in", "status": "modified", "additions": 67, "deletions": 40, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -289,6 +289,59 @@ AC_SUBST(ZLIBSPEC)\n ZLIBTESTSPEC=\n AC_SUBST(ZLIBTESTSPEC)\n \n+AC_PATH_XTRA\n+\n+dnl Determine which AWT peer libraries to build\n+AC_ARG_ENABLE(java-awt,\n+[  --enable-java-awt       list of AWT peer implementations to be built])\n+\n+peerlibs=\"`echo ${enable_java_awt} | tr ',' ' '`\"\n+use_xlib_awt=\"\"\n+use_gtk_awt=\"\"\n+# The default toolkit to use is the first one specified.\n+TOOLKIT=\n+AC_SUBST(TOOLKIT)\n+\n+for peer in $peerlibs ; do\n+  case $peer in\n+    xlib)\n+      if test \"$no_x\" = yes; then\n+        echo \"*** xlib peers requested but no X library available\" 1>&2\n+        exit 1\n+      else\n+        use_xlib_awt=\"yes\"\n+\tif test -z \"$TOOLKIT\"; then\n+\t   TOOLKIT=gnu.gnu.awt.xlib.XToolkit\n+\tfi\n+      fi\n+      ;;\n+    gtk)\n+      if test \"$no_x\" = yes; then\n+\t echo \"*** xlib peers requested but no X library available\" 1>&2\n+\t exit 1\n+      else\n+\t use_gtk_awt=yes\n+\t if test -z \"$TOOLKIT\"; then\n+\t    TOOLKIT=gnu.java.awt.peer.gtk.GtkToolkit\n+\t fi\n+\t test -d jniinclude || mkdir jniinclude\n+      fi\n+      ;;\n+    no)\n+      use_xlib_awt=\n+      use_gtk_awt=\n+      break\n+      ;;\n+    *)\n+      echo \"*** unrecognised argument \\\"${peer}\\\" for --enable-java-awt\" 1>&2\n+      exit 1\n+  esac\n+done\n+\n+AM_CONDITIONAL(XLIB_AWT, test \"$use_xlib_awt\" = yes)\n+AM_CONDITIONAL(GTK_AWT, test \"$use_gtk_awt\" = yes)\n+\n+\n dnl FIXME: this should be _libs on some hosts.\n libsubdir=.libs\n \n@@ -721,6 +774,15 @@ else\n       AC_CHECK_LIB(z, deflate, ZLIBSPEC=-lz, ZLIBSPEC=)\n    fi\n \n+   # Test for Gtk stuff, if asked for.\n+   if test \"$use_gtk_awt\" = yes; then\n+      AM_PATH_GTK(1.2.4,,exit 1)\n+      AM_PATH_GLIB(1.2.4,,exit 1,gthread)\n+      dnl XXX Fix me when libart.m4 has the compile test fixed!\n+      enable_libarttest=no\n+      AM_PATH_LIBART(2.1.0,,exit 1)\n+   fi\n+\n    # On Solaris, and maybe other architectures, the Boehm collector\n    # requires -ldl.\n    if test \"$GC\" = boehm; then\n@@ -757,7 +819,8 @@ CPPFLAGS=\"$CPPFLAGS -I`${PWDCMD-pwd}` -I`cd $srcdir && ${PWDCMD-pwd}`\"\n if test ! -f gnu/classpath/Configuration.java; then\n   test -d gnu || mkdir gnu\n   test -d gnu/classpath || mkdir gnu/classpath\n-  sed 's,@LIBGCJDEBUG@,$LIBGCJDEBUG,' \\\n+  sed -e 's,@LIBGCJDEBUG@,$LIBGCJDEBUG,' \\\n+      -e 's,@TOOLKIT@,$TOOLKIT,' \\\n \t< $srcdir/gnu/classpath/Configuration.java.in \\\n \t> gnu/classpath/Configuration.java\n   # We do not want to redirect the output of the grep below to /dev/null,\n@@ -966,42 +1029,6 @@ else\n   multilib_arg=\n fi\n \n-AC_PATH_XTRA\n-\n-dnl Determine which AWT peer libraries to build\n-AC_ARG_ENABLE(java-awt,\n-[  --enable-java-awt       list of AWT peer implementations to be built])\n-\n-peerlibs=\"`echo ${enable_java_awt} | tr ',' ' '`\"\n-use_xlib_awt=\"\"\n-use_gtk_awt=\"\"\n-\n-for peer in $peerlibs ; do\n-  case $peer in\n-    xlib)\n-      if [test \"$no_x\" = yes]; then\n-        echo \"*** xlib peers requested but no X library available\" 1>&2\n-        exit 1\n-      else\n-        use_xlib_awt=\"yes\"\n-      fi\n-      ;;\n-    gtk)\n-      # Nothing, yet...\n-      ;;\n-    no)\n-      use_xlib_awt=\n-      use_gtk_awt=\n-      break\n-      ;;\n-    *)\n-      echo \"*** unrecognised argument \\\"${peer}\\\" for --enable-java-awt\" 1>&2\n-      exit 1\n-  esac\n-done\n-\n-AM_CONDITIONAL(XLIB_AWT, test \"$use_xlib_awt\" = yes)\n-AM_CONDITIONAL(GTK_AWT, test \"$use_gtk_awt\" = yes)\n \n \n here=`${PWDCMD-pwd}`\n@@ -1023,10 +1050,10 @@ esac\n # builddir for the .java files.\n h=`${PWDCMD-pwd}`\n : > deps.mk\n-( (cd $srcdir && find . \\( -name '*.java' -o -name '*.cc' \\) -print) ;\n-  find . \\( -name '*.java' -o -name '*.cc' \\) -print) | \\\n+( (cd $srcdir && find . \\( -name '*.java' -o -name '*.cc' -o -name '*.c' \\) -print) ;\n+  find . \\( -name '*.java' -o -name '*.cc' -o -name '*.c' \\) -print) | \\\n    fgrep -v testsuite | \\\n-   sed -e 's/\\.java/.d/'\\;'s/\\.cc/.d/' | \\\n+   sed -e 's/\\.java/.d/'\\;'s/\\.cc/.d/'\\;'s/\\.c/.d/' | \\\n    while read f; do\n       echo \"include $f\" >> deps.mk\n       test -f $f || {"}, {"sha": "80629ae712c9df78b5d91ae0243333df6f27d866", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -85,10 +85,19 @@ GCLIBS = @GCLIBS@\n GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n+GLIB_CFLAGS = @GLIB_CFLAGS@\n+GLIB_CONFIG = @GLIB_CONFIG@\n+GLIB_LIBS = @GLIB_LIBS@\n+GTK_CFLAGS = @GTK_CFLAGS@\n+GTK_CONFIG = @GTK_CONFIG@\n+GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n INCLTDL = @INCLTDL@\n INTERPRETER = @INTERPRETER@\n JC1GCSPEC = @JC1GCSPEC@\n+LIBART_CFLAGS = @LIBART_CFLAGS@\n+LIBART_CONFIG = @LIBART_CONFIG@\n+LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n LIBFFIINCS = @LIBFFIINCS@\n LIBGCJDEBUG = @LIBGCJDEBUG@\n@@ -118,6 +127,7 @@ THREADLDFLAGS = @THREADLDFLAGS@\n THREADLIBS = @THREADLIBS@\n THREADOBJS = @THREADOBJS@\n THREADSPEC = @THREADSPEC@\n+TOOLKIT = @TOOLKIT@\n VERSION = @VERSION@\n ZINCS = @ZINCS@\n ZLIBS = @ZLIBS@\n@@ -129,6 +139,9 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n tool_include_dir = @tool_include_dir@\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n+toolexecmainlibdir = @toolexecmainlibdir@\n \n AUTOMAKE_OPTIONS = foreign\n "}, {"sha": "b8094bbfe056dbebe841e35160623f9d023e90f3", "filename": "libjava/glib.m4", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fglib.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fglib.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fglib.m4?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,196 @@\n+# Configure paths for GLIB\n+# Owen Taylor     97-11-3\n+\n+dnl AM_PATH_GLIB([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, MODULES]]]])\n+dnl Test for GLIB, and define GLIB_CFLAGS and GLIB_LIBS, if \"gmodule\" or \n+dnl gthread is specified in MODULES, pass to glib-config\n+dnl\n+AC_DEFUN(AM_PATH_GLIB,\n+[dnl \n+dnl Get the cflags and libraries from the glib-config script\n+dnl\n+AC_ARG_WITH(glib-prefix,[  --with-glib-prefix=PFX   Prefix where GLIB is installed (optional)],\n+            glib_config_prefix=\"$withval\", glib_config_prefix=\"\")\n+AC_ARG_WITH(glib-exec-prefix,[  --with-glib-exec-prefix=PFX Exec prefix where GLIB is installed (optional)],\n+            glib_config_exec_prefix=\"$withval\", glib_config_exec_prefix=\"\")\n+AC_ARG_ENABLE(glibtest, [  --disable-glibtest       Do not try to compile and run a test GLIB program],\n+\t\t    , enable_glibtest=yes)\n+\n+  if test x$glib_config_exec_prefix != x ; then\n+     glib_config_args=\"$glib_config_args --exec-prefix=$glib_config_exec_prefix\"\n+     if test x${GLIB_CONFIG+set} != xset ; then\n+        GLIB_CONFIG=$glib_config_exec_prefix/bin/glib-config\n+     fi\n+  fi\n+  if test x$glib_config_prefix != x ; then\n+     glib_config_args=\"$glib_config_args --prefix=$glib_config_prefix\"\n+     if test x${GLIB_CONFIG+set} != xset ; then\n+        GLIB_CONFIG=$glib_config_prefix/bin/glib-config\n+     fi\n+  fi\n+\n+  for module in . $4\n+  do\n+      case \"$module\" in\n+         gmodule) \n+             glib_config_args=\"$glib_config_args gmodule\"\n+         ;;\n+         gthread) \n+             glib_config_args=\"$glib_config_args gthread\"\n+         ;;\n+      esac\n+  done\n+\n+  AC_PATH_PROG(GLIB_CONFIG, glib-config, no)\n+  min_glib_version=ifelse([$1], ,0.99.7,$1)\n+  AC_MSG_CHECKING(for GLIB - version >= $min_glib_version)\n+  no_glib=\"\"\n+  if test \"$GLIB_CONFIG\" = \"no\" ; then\n+    no_glib=yes\n+  else\n+    GLIB_CFLAGS=`$GLIB_CONFIG $glib_config_args --cflags`\n+    GLIB_LIBS=`$GLIB_CONFIG $glib_config_args --libs`\n+    glib_config_major_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    glib_config_minor_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    glib_config_micro_version=`$GLIB_CONFIG $glib_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_glibtest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $GLIB_CFLAGS\"\n+      LIBS=\"$GLIB_LIBS $LIBS\"\n+dnl\n+dnl Now check if the installed GLIB is sufficiently new. (Also sanity\n+dnl checks the results of glib-config to some extent\n+dnl\n+      rm -f conf.glibtest\n+      AC_TRY_RUN([\n+#include <glib.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int \n+main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.glibtest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = g_strdup(\"$min_glib_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_glib_version\");\n+     exit(1);\n+   }\n+\n+  if ((glib_major_version != $glib_config_major_version) ||\n+      (glib_minor_version != $glib_config_minor_version) ||\n+      (glib_micro_version != $glib_config_micro_version))\n+    {\n+      printf(\"\\n*** 'glib-config --version' returned %d.%d.%d, but GLIB (%d.%d.%d)\\n\", \n+             $glib_config_major_version, $glib_config_minor_version, $glib_config_micro_version,\n+             glib_major_version, glib_minor_version, glib_micro_version);\n+      printf (\"*** was found! If glib-config was correct, then it is best\\n\");\n+      printf (\"*** to remove the old version of GLIB. You may also be able to fix the error\\n\");\n+      printf(\"*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\\n\");\n+      printf(\"*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\\n\");\n+      printf(\"*** required on your system.\\n\");\n+      printf(\"*** If glib-config was wrong, set the environment variable GLIB_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of glib-config, and remove the file config.cache\\n\");\n+      printf(\"*** before re-running configure\\n\");\n+    } \n+  else if ((glib_major_version != GLIB_MAJOR_VERSION) ||\n+\t   (glib_minor_version != GLIB_MINOR_VERSION) ||\n+           (glib_micro_version != GLIB_MICRO_VERSION))\n+    {\n+      printf(\"*** GLIB header files (version %d.%d.%d) do not match\\n\",\n+\t     GLIB_MAJOR_VERSION, GLIB_MINOR_VERSION, GLIB_MICRO_VERSION);\n+      printf(\"*** library (version %d.%d.%d)\\n\",\n+\t     glib_major_version, glib_minor_version, glib_micro_version);\n+    }\n+  else\n+    {\n+      if ((glib_major_version > major) ||\n+        ((glib_major_version == major) && (glib_minor_version > minor)) ||\n+        ((glib_major_version == major) && (glib_minor_version == minor) && (glib_micro_version >= micro)))\n+      {\n+        return 0;\n+       }\n+     else\n+      {\n+        printf(\"\\n*** An old version of GLIB (%d.%d.%d) was found.\\n\",\n+               glib_major_version, glib_minor_version, glib_micro_version);\n+        printf(\"*** You need a version of GLIB newer than %d.%d.%d. The latest version of\\n\",\n+\t       major, minor, micro);\n+        printf(\"*** GLIB is always available from ftp://ftp.gtk.org.\\n\");\n+        printf(\"***\\n\");\n+        printf(\"*** If you have already installed a sufficiently new version, this error\\n\");\n+        printf(\"*** probably means that the wrong copy of the glib-config shell script is\\n\");\n+        printf(\"*** being found. The easiest way to fix this is to remove the old version\\n\");\n+        printf(\"*** of GLIB, but you can also set the GLIB_CONFIG environment to point to the\\n\");\n+        printf(\"*** correct copy of glib-config. (In this case, you will have to\\n\");\n+        printf(\"*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\\n\");\n+        printf(\"*** so that the correct libraries are found at run-time))\\n\");\n+      }\n+    }\n+  return 1;\n+}\n+],, no_glib=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_glib\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$GLIB_CONFIG\" = \"no\" ; then\n+       echo \"*** The glib-config script installed by GLIB could not be found\"\n+       echo \"*** If GLIB was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the GLIB_CONFIG environment variable to the\"\n+       echo \"*** full path to glib-config.\"\n+     else\n+       if test -f conf.glibtest ; then\n+        :\n+       else\n+          echo \"*** Could not run GLIB test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $GLIB_CFLAGS\"\n+          LIBS=\"$LIBS $GLIB_LIBS\"\n+          AC_TRY_LINK([\n+#include <glib.h>\n+#include <stdio.h>\n+],      [ return ((glib_major_version) || (glib_minor_version) || (glib_micro_version)); ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding GLIB or finding the wrong\"\n+          echo \"*** version of GLIB. If it is not finding GLIB, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"\n+          echo \"***\"\n+          echo \"*** If you have a RedHat 5.0 system, you should remove the GTK package that\"\n+          echo \"*** came with the system with the command\"\n+          echo \"***\"\n+          echo \"***    rpm --erase --nodeps gtk gtk-devel\" ],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means GLIB was incorrectly installed\"\n+          echo \"*** or that you have moved GLIB since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the glib-config script: $GLIB_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     GLIB_CFLAGS=\"\"\n+     GLIB_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(GLIB_CFLAGS)\n+  AC_SUBST(GLIB_LIBS)\n+  rm -f conf.glibtest\n+])"}, {"sha": "5a4b97e803292cf6f1f81da82cbbe892b3dcf422", "filename": "libjava/gnu/classpath/Configuration.java.in", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fclasspath%2FConfiguration.java.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fclasspath%2FConfiguration.java.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2FConfiguration.java.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,5 +1,5 @@\n /* gnu.classpath.Configuration\n-   Copyright (C) 1998, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2001, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -56,4 +56,7 @@ public interface Configuration\n   boolean HAVE_NATIVE_GET_PROXY_DATA = false;\n   boolean HAVE_NATIVE_GET_PROXY_CLASS = false;\n   boolean HAVE_NATIVE_GENERATE_PROXY_CLASS = false;\n+\n+  // Name of default AWT peer library.\n+  String default_awt_peer_toolkit = \"@TOOLKIT@\";\n }"}, {"sha": "45690b06669a306ff1351447dd2bbd4a2f004991", "filename": "libjava/gnu/java/awt/peer/gtk/GdkFontMetrics.java", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkFontMetrics.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,108 @@\n+/* GdkFontMetrics.java\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+\n+public class GdkFontMetrics extends FontMetrics\n+{\n+  private final int native_state = GtkGenericPeer.getUniqueInteger();\n+\n+  private static final int ASCENT = 0, MAX_ASCENT = 1, \n+                       DESCENT = 2, MAX_DESCENT = 3, \n+                       MAX_ADVANCE = 4;\n+\n+  private int[] metrics;\n+  private native int[] initState (String xlfd, int pts);\n+\n+  public GdkFontMetrics (Font font)\n+  {\n+    super (font);\n+    metrics = initState (((GtkFontPeer)font.getPeer ()).getXLFD (), \n+\t\t\t font.getSize ());\n+  }\n+\n+  native public int stringWidth (String str);\n+\n+  public int charWidth (char ch)\n+  {\n+    return stringWidth (new String (new char[] { ch }));\n+  }\n+\n+  public int charsWidth (char data[], int off, int len)\n+  {\n+    return stringWidth (new String (data, off, len));\n+  }\n+\n+  /* \n+     Sun's Motif implementation always returns 0 or 1 here (???), but\n+     going by the X11 man pages, it seems as though we should return\n+     font.ascent + font.descent.\n+  */\n+  public int getLeading ()\n+  {\n+    return 1;\n+//      return metrics[ASCENT] + metrics[DESCENT];\n+  }\n+\n+  public int getAscent ()\n+  {\n+    return metrics[ASCENT];\n+  }\n+\n+  public int getMaxAscent ()\n+  {\n+    return metrics[MAX_ASCENT];\n+  }\n+\n+  public int getDescent ()\n+  {\n+    return metrics[DESCENT];\n+  }\n+\n+  public int getMaxDescent ()\n+  {\n+    return metrics[MAX_DESCENT];\n+  }\n+\n+  public int getMaxAdvance ()\n+  {\n+    return metrics[MAX_ADVANCE];\n+  }\n+}"}, {"sha": "3e3d04bbb70bf7bd03123198fd88e04ca97a2e1b", "filename": "libjava/gnu/java/awt/peer/gtk/GdkGraphics.java", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,322 @@\n+/* GdkGraphics.java\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.awt.image.*;\n+\n+public class GdkGraphics extends Graphics\n+{\n+  private final int native_state = GtkGenericPeer.getUniqueInteger();\n+\n+  Color color, xorColor;\n+  GtkComponentPeer component;\n+  Font font;\n+  Rectangle clip;\n+\n+  int xOffset = 0;\n+  int yOffset = 0;\n+\n+  static final int GDK_COPY = 0, GDK_XOR = 2;\n+\n+  native int[] initState (GtkComponentPeer component);\n+  native void initState (int width, int height);\n+  native void copyState (GdkGraphics g);\n+\n+  GdkGraphics (GdkGraphics g)\n+  {\n+    color = g.color;\n+    xorColor = g.xorColor;\n+    font = g.font;\n+    clip = new Rectangle (g.clip);\n+    component = g.component;\n+\n+    copyState (g);\n+  }\n+\n+  GdkGraphics (int width, int height)\n+  {\n+    initState (width, height);\n+    color = Color.black;\n+    clip = new Rectangle (0, 0, width, height);\n+    font = new Font (\"Dialog\", Font.PLAIN, 10);\n+  }\n+\n+  GdkGraphics (GtkComponentPeer component)\n+  {\n+    this.component = component;\n+    int rgb[] = initState (component);\n+    color = new Color (rgb[0], rgb[1], rgb[2]);\n+    font = new Font (\"Dialog\", Font.PLAIN, 10);\n+    Dimension d = component.awtComponent.getSize ();\n+    clip = new Rectangle (0, 0, d.width, d.height);\n+  }\n+\n+  public native void clearRect (int x, int y, int width, int height);\n+\n+  public void clipRect (int x, int y, int width, int height)\n+  {\n+    clip = clip.intersection (new Rectangle (x, y, width, height));\n+    setClipRectangle (clip.x, clip.y, clip.width, clip.height);\n+  }\n+\n+  native public void copyArea (int x, int y, int width, int height, \n+\t\t\t       int dx, int dy);\n+\n+  public Graphics create ()\n+  {\n+    return new GdkGraphics (this);\n+  }\n+\n+//    public Graphics create (int x, int y, int width, int height)\n+//    {\n+//      GdkGraphics g = new GdkGraphics (this);\n+//      System.out.println (\"translating by: \" + x +\" \" + y);\n+//      g.translate (x, y);\n+//      g.clipRect (0, 0, width, height);\n+\n+//      return g;\n+//    }\n+  \n+  native public void dispose ();\n+\n+  native void copyPixmap (Graphics g, int x, int y, int width, int height);\n+  public boolean drawImage (Image img, int x, int y, \n+\t\t\t    Color bgcolor, ImageObserver observer)\n+  {\n+    if (img instanceof GtkOffScreenImage)\n+      {\n+\tcopyPixmap (img.getGraphics (), \n+\t\t    x, y, img.getWidth (null), img.getHeight (null));\n+\treturn true;\n+      }\n+\n+    GtkImage image = (GtkImage) img;\n+    new GtkImagePainter (image, this, x, y, -1, -1, bgcolor);\n+    return image.isLoaded ();\n+  }\n+\n+  public boolean drawImage (Image img, int x, int y, ImageObserver observer)\n+  {\n+    if (img instanceof GtkOffScreenImage)\n+      {\n+\tcopyPixmap (img.getGraphics (), \n+\t\t    x, y, img.getWidth (null), img.getHeight (null));\n+\treturn true;\n+      }\n+\n+    return drawImage (img, x, y, component.getBackground (), observer);\n+  }\n+\n+  public boolean drawImage (Image img, int x, int y, int width, int height, \n+\t\t\t    Color bgcolor, ImageObserver observer)\n+  {\n+    if (img instanceof GtkOffScreenImage)\n+      {\n+\tthrow new RuntimeException ();\n+      }\n+\n+    GtkImage image = (GtkImage) img;\n+    new GtkImagePainter (image, this, x, y, width, height, bgcolor);\n+    return image.isLoaded ();\n+  }\n+\n+  public boolean drawImage (Image img, int x, int y, int width, int height, \n+\t\t\t    ImageObserver observer)\n+  {\n+    return drawImage (img, x, y, width, height, component.getBackground (),\n+\t\t      observer);\n+  }\n+\n+  public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, \n+\t\t\t    int sx1, int sy1, int sx2, int sy2, \n+\t\t\t    Color bgcolor, ImageObserver observer)\n+  {\n+    if (img instanceof GtkOffScreenImage)\n+      {\n+\tthrow new RuntimeException ();\n+      }\n+\n+    GtkImage image = (GtkImage) img;\n+    new GtkImagePainter (image, this, dx1, dy1, dx2, dy2, \n+\t\t\t sx1, sy1, sx2, sy2, bgcolor);\n+    return image.isLoaded ();\n+  }\n+\n+  public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, \n+\t\t\t    int sx1, int sy1, int sx2, int sy2, \n+\t\t\t    ImageObserver observer) \n+  {\n+    return drawImage (img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2,\n+\t\t      component.getBackground (), observer);\n+  }\n+\n+  native public void drawLine (int x1, int y1, int x2, int y2);\n+\n+  native public void drawArc (int x, int y, int width, int height,\n+\t\t\t      int startAngle, int arcAngle);\n+  native public void fillArc (int x, int y, int width, int height, \n+\t\t\t      int startAngle, int arcAngle);\n+  native public void drawOval(int x, int y, int width, int height);\n+  native public void fillOval(int x, int y, int width, int height);\n+\n+  native public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints);\n+  native public void fillPolygon(int[] xPoints, int[] yPoints, int nPoints);\n+\n+  native public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints);\n+\n+  native public void drawRect(int x, int y, int width, int height);\n+  native public void fillRect (int x, int y, int width, int height);\n+\n+  native void drawString (String str, int x, int y, String fname, int size);\n+  public void drawString (String str, int x, int y)\n+  {\n+    drawString (str, x, y,\n+\t\t((GtkFontPeer)font.getPeer ()).getXLFD (), font.getSize ());\n+  }\n+\n+  public void drawRoundRect(int x, int y, int width, int height, \n+\t\t\t    int arcWidth, int arcHeight)\n+  {\n+    // System.out.println (\"drawRoundRect called [UNIMPLEMENTED]\");\n+  }\n+\n+  public void fillRoundRect (int x, int y, int width, int height, \n+\t\t\t     int arcWidth, int arcHeight)\n+  {\n+    // System.out.println (\"fillRoundRect called [UNIMPLEMENTED]\");\n+  }\n+\n+  public Shape getClip ()\n+  {\n+    return getClipBounds ();\n+  }\n+\n+  public Rectangle getClipBounds ()\n+  {\n+//      System.out.println (\"returning CLIP: \" + clip);\n+    return new Rectangle (clip.x, clip.y, clip.width, clip.height);\n+  }\n+\n+  public Color getColor ()\n+  {\n+    return color;\n+  }\n+\n+  public Font getFont ()\n+  {\n+    return font;\n+  }\n+\n+  public FontMetrics getFontMetrics (Font font)\n+  {\n+    return new GdkFontMetrics (font);\n+  }\n+\n+  native void setClipRectangle (int x, int y, int width, int height);\n+\n+  public void setClip (int x, int y, int width, int height)\n+  {\n+    clip.x = x;\n+    clip.y = y;\n+    clip.width = width;\n+    clip.height = height;\n+    \n+    setClipRectangle (x, y, width, height);\n+  }\n+\n+  public void setClip (Rectangle clip)\n+  {\n+    setClip (clip.x, clip.y, clip.width, clip.height);\n+  }\n+\n+  public void setClip (Shape clip)\n+  {\n+    setClip (clip.getBounds ());\n+  }\n+\n+  native private void setFGColor (int red, int green, int blue);\n+\n+  public void setColor (Color c)\n+  {\n+    color = c;\n+\n+    if (xorColor == null) /* paint mode */\n+      setFGColor (color.getRed (), color.getGreen (), color.getBlue ());\n+    else\t\t  /* xor mode */\n+      setFGColor (color.getRed   () ^ xorColor.getRed (),\n+\t\t  color.getGreen () ^ xorColor.getGreen (),\n+\t\t  color.getBlue  () ^ xorColor.getBlue ());\n+  }\n+\n+  public void setFont (Font font)\n+  {\n+    this.font = font;\n+  }\n+\n+  native void setFunction (int gdk_func);\n+\n+  public void setPaintMode ()\n+  {\n+    xorColor = null;\n+\n+    setFunction (GDK_COPY);\n+    setFGColor (color.getRed (), color.getGreen (), color.getBlue ());\n+  }\n+\n+  public void setXORMode (Color c)\n+  {\n+    xorColor = c;\n+\n+    setFunction (GDK_XOR);\n+    setFGColor (color.getRed   () ^ xorColor.getRed (),\n+\t\tcolor.getGreen () ^ xorColor.getGreen (),\n+\t\tcolor.getBlue  () ^ xorColor.getBlue ());\n+  }\n+\n+  native public void translateNative (int x, int y);\n+\n+  public void translate (int x, int y)\n+  {\n+    clip.x -= x;\n+    clip.y -= y;\n+\n+    translateNative (x, y);\n+  }\n+}"}, {"sha": "0491856849c96823444ae18c95674e051c5c22b0", "filename": "libjava/gnu/java/awt/peer/gtk/GtkArg.java", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArg.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArg.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArg.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,61 @@\n+/* GtkArg.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+public class GtkArg\n+{\n+  String name;\n+  Object value;\n+\n+  public GtkArg (String name, Object value)\n+  {\n+    this.name = name;\n+    this.value = value;\n+  }\n+\n+  public String getName ()\n+  {\n+    return name;\n+  }\n+\n+  public Object getValue ()\n+  {\n+    return value;\n+  }\n+}"}, {"sha": "c7770472e7e60175b1bac85cf11dc723608c4356", "filename": "libjava/gnu/java/awt/peer/gtk/GtkArgList.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArgList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArgList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkArgList.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,75 @@\n+/* GtkArgList.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.util.Vector;\n+\n+public class GtkArgList extends Vector\n+{\n+  void add (GtkArg arg)\n+  {\n+    addElement (arg);\n+  }\n+\n+  void add (String name, boolean value)\n+  {\n+    addElement (new GtkArg (name, new Boolean (value)));\n+  }\n+    \n+  void add (String name, int value)\n+  {\n+    addElement (new GtkArg (name, new Integer (value)));\n+  }\n+\n+  void add (String name, float value)\n+  {\n+    addElement (new GtkArg (name, new Float (value)));\n+  }\n+\n+  void add (String name, Object value)\n+  {\n+    addElement (new GtkArg (name, value));\n+  }\n+\n+  synchronized void setArgs (GtkComponentPeer cp)\n+  {\n+    for (int i = 0; i < elementCount; i++)\n+      cp.set ((GtkArg)elementData[i]);\n+  }\n+}\n+  "}, {"sha": "94603c0d3c923cda428c60d8c767db83d0272b7a", "filename": "libjava/gnu/java/awt/peer/gtk/GtkButtonPeer.java", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkButtonPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,89 @@\n+/* GtkButtonPeer.java -- Implements ButtonPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.peer.*;\n+\n+public class GtkButtonPeer extends GtkComponentPeer\n+    implements ButtonPeer\n+{\n+  native void create ();\n+\n+  public GtkButtonPeer (Button b)\n+  {\n+    super (b);\n+  }\n+\n+  public void setLabel (String label) \n+  {\n+    set (\"label\", label);\n+  }\n+\n+  public void handleEvent (AWTEvent e)\n+  {\n+    if (e.getID () == MouseEvent.MOUSE_CLICKED && isEnabled () \n+\t&& !modalHasGrab ())\n+      {\n+\tMouseEvent me = (MouseEvent) e;\n+\tif (!me.isConsumed ()\n+\t    && (me.getModifiers () & MouseEvent.BUTTON1_MASK) != 0)\n+\t  postActionEvent (((Button)awtComponent).getActionCommand (), \n+\t\t\t   me.getModifiers ());\n+      }\n+\n+    if (e.getID () == KeyEvent.KEY_PRESSED)\n+      {\n+\tKeyEvent ke = (KeyEvent) e;\n+\tif (!ke.isConsumed () && ke.getKeyCode () == KeyEvent.VK_SPACE)\n+\t  postActionEvent (((Button)awtComponent).getActionCommand (),\n+\t\t\t   ke.getModifiers ());\n+      }\n+\n+    super.handleEvent (e);\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+\n+    args.add (\"label\", ((Button)component).getLabel ());\n+  }\n+}"}, {"sha": "59c28f9fd5f61d22e62617fe44c0703bf0236050", "filename": "libjava/gnu/java/awt/peer/gtk/GtkCanvasPeer.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCanvasPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCanvasPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCanvasPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,92 @@\n+/* GtkCanvasPeer.java\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.PaintEvent;\n+import java.awt.peer.*;\n+\n+public class GtkCanvasPeer extends GtkComponentPeer implements CanvasPeer\n+{\n+  native void create ();\n+\n+  public GtkCanvasPeer (Canvas c)\n+  {\n+    super (c);\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    return new GdkGraphics (this);\n+  }\n+\n+  public void handleEvent (AWTEvent event)\n+  {\n+    int id = event.getID();\n+      \n+    switch (id)\n+      {\n+      case PaintEvent.PAINT:\n+      case PaintEvent.UPDATE:\n+\t{\n+\t  try \n+\t    {\n+\t      Graphics g = getGraphics ();\n+\t      g.setClip (((PaintEvent)event).getUpdateRect());\n+\t\t\n+\t      if (id == PaintEvent.PAINT)\n+\t\tawtComponent.paint (g);\n+\t      else\n+\t\tawtComponent.update (g);\n+\t      \n+\t      g.dispose ();\n+\t    } \n+\t  catch (InternalError e)\n+\t    { \n+\t      System.err.println (e);\n+\t    }\n+\t}\n+\tbreak;\n+      }\n+  }\n+\n+  /* Preferred size for a drawing widget is always what the user requested */\n+  public Dimension getPreferredSize ()\n+  {\n+    return awtComponent.getSize ();\n+  }\n+}"}, {"sha": "9903c310425e5fd46406822ff1c9251d29325e44", "filename": "libjava/gnu/java/awt/peer/gtk/GtkCheckboxGroupPeer.java", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxGroupPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxGroupPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxGroupPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,86 @@\n+/* GtkCheckboxGroupPeer.java - Wrap a CheckboxGroup\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.util.*;\n+\n+// Note that there is no peer interface for a CheckboxGroup.  We\n+// introduce our own in order to make it easier to keep a piece of\n+// native state for each one.\n+public class GtkCheckboxGroupPeer extends GtkGenericPeer\n+{\n+  // This maps from a CheckboxGroup to the native peer.\n+  private static WeakHashMap map = new WeakHashMap ();\n+\n+  // Find the native peer corresponding to a CheckboxGroup.\n+  public static synchronized GtkCheckboxGroupPeer\n+      getCheckboxGroupPeer (CheckboxGroup group)\n+  {\n+    if (group == null)\n+      return null;\n+    GtkCheckboxGroupPeer nat = (GtkCheckboxGroupPeer) map.get (group);\n+    if (nat == null)\n+      {\n+\tnat = new GtkCheckboxGroupPeer ();\n+\tmap.put (group, nat);\n+      }\n+    return nat;\n+  }\n+\n+  private GtkCheckboxGroupPeer ()\n+  {\n+    // We don't need any special state here.  Note that we can't store\n+    // a reference to the java-side CheckboxGroup.  That would mean\n+    // they could never be collected.\n+    super (null);\n+  }\n+\n+  // Dispose of our native resources.\n+  public native void dispose ();\n+\n+  // Remove a given checkbox from this group.\n+  public native void remove (GtkCheckboxPeer box);\n+\n+  // When collected, clean up the native state.\n+  protected void finalize ()\n+  {\n+    dispose ();\n+  }\n+}"}, {"sha": "1bff70696028162e61c5ec7175272d607de22b1f", "filename": "libjava/gnu/java/awt/peer/gtk/GtkCheckboxMenuItemPeer.java", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxMenuItemPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,56 @@\n+/* GtkCheckboxMenuItemPeer.java -- Implements CheckboxMenuItemPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.CheckboxMenuItemPeer;\n+import java.awt.peer.MenuItemPeer;\n+\n+public class GtkCheckboxMenuItemPeer extends GtkMenuItemPeer\n+  implements CheckboxMenuItemPeer\n+{\n+  native void create (String label);\n+\n+  public GtkCheckboxMenuItemPeer (CheckboxMenuItem menu)\n+  {\n+    super (menu);\n+    setState (menu.getState ());\n+  }\n+\n+  native public void setState (boolean t);\n+}"}, {"sha": "48f8804007d4ab7349fb31192f1e4d08b88e92e2", "filename": "libjava/gnu/java/awt/peer/gtk/GtkCheckboxPeer.java", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkCheckboxPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,114 @@\n+/* GtkCheckboxPeer.java -- Implements CheckboxPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkCheckboxPeer extends GtkComponentPeer\n+  implements CheckboxPeer\n+{\n+  // Group from last time it was set.\n+  public GtkCheckboxGroupPeer old_group;\n+\n+  public native void nativeCreate (GtkCheckboxGroupPeer group);\n+  public native void nativeSetCheckboxGroup (GtkCheckboxGroupPeer group);\n+  public native void connectHooks ();\n+\n+  public GtkCheckboxPeer (Checkbox c)\n+  {\n+    super (c);\n+  }\n+\n+  // We can't fully use the ordinary getArgs code here, due to\n+  // oddities of this particular widget.  In particular we must be\n+  // able to switch between a checkbutton and a radiobutton\n+  // dynamically.\n+  public void create ()\n+  {\n+    CheckboxGroup g = ((Checkbox) awtComponent).getCheckboxGroup ();\n+    old_group = GtkCheckboxGroupPeer.getCheckboxGroupPeer (g);\n+    nativeCreate (old_group);\n+  }\n+\n+  public void setState (boolean state)\n+  {\n+    set (\"active\", state);\n+  }\n+\n+  public void setLabel (String label)\n+  {\n+    set (\"label\", label);\n+  }\n+\n+  public void setCheckboxGroup (CheckboxGroup group)\n+  {\n+    GtkCheckboxGroupPeer gp\n+      = GtkCheckboxGroupPeer.getCheckboxGroupPeer (group);\n+    if (gp != old_group)\n+      {\n+\tif (old_group != null)\n+\t  old_group.remove (this);\n+\tnativeSetCheckboxGroup (gp);\n+\told_group = gp;\n+      }\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+    args.add (\"active\", ((Checkbox) component).getState ());\n+    args.add (\"label\", ((Checkbox) component).getLabel ());\n+  }\n+\n+  // Override the superclass postItemEvent so that the peer doesn't\n+  // need information that we have.\n+  public void postItemEvent (Object item, int stateChange)\n+  {\n+    super.postItemEvent (awtComponent, stateChange);\n+  }\n+\n+  public void dispose ()\n+  {\n+    // Notify the group so that the native state can be cleaned up\n+    // appropriately.\n+    if (old_group != null)\n+      old_group.remove (this);\n+    super.dispose ();\n+  }\n+}"}, {"sha": "19e1a56d2e11dfafb538228860c10ccc66d7ea51", "filename": "libjava/gnu/java/awt/peer/gtk/GtkChoicePeer.java", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkChoicePeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,90 @@\n+/* GtkChoicePeer.java -- Implements ChoicePeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+\n+public class GtkChoicePeer extends GtkComponentPeer\n+  implements ChoicePeer\n+{\n+  native void create ();\n+\n+  public GtkChoicePeer (Choice c)\n+  {\n+    super (c);\n+\n+    int count = c.getItemCount ();\n+    if (count > 0)\n+      {\n+\tString items[] = new String[count];\n+\tfor (int i = 0; i < count; i++)\n+\t  items[i] = c.getItem (i);\n+\t  \n+\tappend (items);\n+      }\n+  }\n+\n+  native void append (String items[]);\n+\n+  native public void add (String item, int index);\n+  native public void remove (int index);\n+  native public void select (int position);\n+  \n+  public void addItem (String item, int position)\n+  {\n+    add (item, position);\n+  }\n+  \n+  /*\n+  public void handleEvent (AWTEvent event)\n+  {\n+    if (event instanceof ItemEvent)\n+      ((Choice) awtComponent).select ((String) ((ItemEvent)event).getItem ());\n+    super.handleEvent (event);\n+  }\n+  */\n+\n+  protected void postItemEvent (Object item, int stateChange)\n+  {\n+    if (stateChange == ItemEvent.SELECTED)\n+      ((Choice) awtComponent).select ((String) item);\n+    super.postItemEvent (item, stateChange);\n+  }\n+}"}, {"sha": "d2587d970a159937f5028f53538fc067ad54438d", "filename": "libjava/gnu/java/awt/peer/gtk/GtkClipboard.java", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboard.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboard.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkClipboard.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,167 @@\n+/* GtkClipboard.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.io.*;\n+import java.net.*;\n+import java.util.*;\n+import java.awt.datatransfer.*;\n+import java.awt.image.*;\n+import java.awt.peer.*;\n+\n+public class GtkClipboard extends Clipboard\n+{\n+  /* the number of milliseconds that we'll wait around for the\n+     owner of the GDK_SELECTION_PRIMARY selection to convert \n+     the requested data */\n+  final static int SELECTION_RECEIVED_TIMEOUT = 5000;\n+\n+  /* We currently only support transferring of text between applications */\n+  static String selection;\n+  static Object selectionLock = new Object ();\n+\n+  static boolean hasSelection = false;\n+\n+  protected \n+  GtkClipboard ()\n+  {\n+    super (\"System Clipboard\");\n+    initNativeState ();\n+  }\n+\n+  public Transferable \n+  getContents (Object requestor)\n+  {\n+    synchronized (this)\n+      {\n+\tif (hasSelection)\n+\t  return contents;\n+      }\n+\n+    /* Java doesn't own the selection, so we need to ask X11 */\n+    synchronized (selectionLock)\n+      {\n+\trequestStringConversion ();\n+\ttry \n+\t  {\n+\t    selectionLock.wait (SELECTION_RECEIVED_TIMEOUT);\n+\t  } \n+\tcatch (InterruptedException e)\n+\t  {\n+\t    return null;\n+\t  }\n+\t\n+\treturn (selection == null) ? null : new StringSelection (selection);\n+      }\n+  }\n+\n+  void \n+  stringSelectionReceived (String newSelection)\n+  {\n+    synchronized (selectionLock)\n+      {\n+\tselection = newSelection;\n+\tselectionLock.notify ();\n+      }\n+  }\n+\n+  /* convert Java clipboard data into a String suitable for sending\n+     to another application */\n+  synchronized String\n+  stringSelectionHandler () throws IOException\n+  {\n+    String selection = null;\n+\n+    try {\n+      if (contents.isDataFlavorSupported (DataFlavor.stringFlavor))\n+\tselection = (String)contents.getTransferData (DataFlavor.stringFlavor);\n+      else if (contents.isDataFlavorSupported (DataFlavor.plainTextFlavor))\n+\t{\n+\t  StringBuffer sbuf = new StringBuffer ();\n+\t  InputStreamReader reader;\n+\t  char readBuf[] = new char[512];\n+\t  int numChars;\n+\t  \n+\t  reader = new InputStreamReader \n+\t    ((InputStream) \n+\t     contents.getTransferData (DataFlavor.plainTextFlavor), \"UNICODE\");\n+\t  \n+\t  while (true)\n+\t    {\n+\t      numChars = reader.read (readBuf);\n+\t      if (numChars == -1)\n+\t\tbreak;\n+\t      sbuf.append (readBuf, 0, numChars);\n+\t    }\n+\t  \n+\t  selection = new String (sbuf);\n+\t}\n+    } catch (Exception e) { }\n+    \n+    return selection;\n+  }\n+\n+  public synchronized void\n+  setContents (Transferable contents, ClipboardOwner owner)\n+  {\n+    selectionGet ();\n+\n+    this.contents = contents;\n+    this.owner = owner;\n+\n+    hasSelection = true;\n+  }\n+\n+  synchronized\n+  void selectionClear ()\n+  {\n+    hasSelection = false;\n+\n+    if (owner != null)\n+      {\n+\towner.lostOwnership (this, contents);\n+\towner = null;\n+\tcontents = null;\n+      }\n+  }\n+\n+  native void initNativeState ();\n+  native static void requestStringConversion ();\n+  native static void selectionGet ();\n+}"}, {"sha": "6e3b25290c8473141a143208fa4621cdb0d22c38", "filename": "libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java", "status": "added", "additions": 391, "deletions": 0, "changes": 391, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkComponentPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,391 @@\n+/* GtkComponentPeer.java -- Implements ComponentPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.image.*;\n+import java.awt.peer.ComponentPeer;\n+\n+public class GtkComponentPeer extends GtkGenericPeer\n+  implements ComponentPeer\n+{\n+  Component awtComponent;\n+\n+  /* this isEnabled differs from Component.isEnabled, in that it\n+     knows if a parent is disabled.  In that case Component.isEnabled \n+     may return true, but our isEnabled will always return false */\n+  native boolean isEnabled ();\n+  native static boolean modalHasGrab ();\n+\n+  native int[] gtkWidgetGetForeground ();\n+  native int[] gtkWidgetGetBackground ();\n+  native void gtkWidgetSetVisible (boolean b);\n+  native void gtkWidgetGetDimensions(int[] dim);\n+  native void gtkWidgetGetLocationOnScreen(int[] point);\n+  native void gtkWidgetSetCursor (int type);\n+\n+  void create ()\n+  {\n+    throw new RuntimeException ();\n+  }\n+\n+  native void connectHooks ();\n+\n+  protected GtkComponentPeer (Component awtComponent)\n+  {\n+    super (awtComponent);\n+    this.awtComponent = awtComponent;\n+\n+    /* temporary try/catch block until all peers use this creation method */\n+    try {\n+      create ();\n+      \n+      GtkArgList args = new GtkArgList ();\n+      getArgs (awtComponent, args);\n+      args.setArgs (this);\n+\n+      connectHooks ();\n+\n+      if (awtComponent.getForeground () == null)\n+\tawtComponent.setForeground (getForeground ());\n+      if (awtComponent.getBackground () == null)\n+\tawtComponent.setBackground (getBackground ());\n+      //        if (c.getFont () == null)\n+      //  \tc.setFont (cp.getFont ());\n+      \n+      if (! (awtComponent instanceof Window))\n+\t{\n+\t  setCursor (awtComponent.getCursor ());\n+\t  Rectangle bounds = awtComponent.getBounds ();\n+\t  setBounds (bounds.x, bounds.y, bounds.width, bounds.height);\n+\t}\n+    } catch (RuntimeException ex) { ; }\n+  }\n+\n+  public int checkImage (Image image, int width, int height, \n+\t\t\t ImageObserver observer) \n+  {\n+    GtkImage i = (GtkImage) image;\n+    return i.checkImage ();\n+  }\n+\n+  public Image createImage (ImageProducer producer) \n+  {\n+    return new GtkImage (producer, null);\n+  }\n+\n+  public Image createImage (int width, int height)\n+  {\n+    GdkGraphics g = new GdkGraphics (width, height);\n+    return new GtkOffScreenImage (null, g, width, height);\n+  }\n+\n+  public void disable () \n+  {\n+    setEnabled (false);\n+  }\n+\n+  public void enable () \n+  {\n+    setEnabled (true);\n+  }\n+\n+  public ColorModel getColorModel () \n+  {\n+    return ColorModel.getRGBdefault ();\n+  }\n+\n+  public FontMetrics getFontMetrics (Font font)\n+  {\n+    return new GdkFontMetrics (font);\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    return null;\n+  }\n+\n+  public Point getLocationOnScreen () \n+  { \n+    int point[] = new int[2];\n+    gtkWidgetGetLocationOnScreen (point);\n+    return new Point (point[0], point[1]);\n+  }\n+\n+  public Dimension getMinimumSize () \n+  {\n+    int dim[]=new int[2];\n+    gtkWidgetGetDimensions (dim);\n+    Dimension d = new Dimension (dim[0],dim[1]);\n+    return (d);\n+  }\n+\n+  public Dimension getPreferredSize ()\n+  {\n+    int dim[]=new int[2];\n+    gtkWidgetGetDimensions (dim);\n+    Dimension d = new Dimension (dim[0],dim[1]);\n+    return (d);\n+  }\n+\n+  public Toolkit getToolkit ()\n+  {\n+    return Toolkit.getDefaultToolkit();\n+  }\n+  \n+  public void handleEvent (AWTEvent event)\n+  {\n+  }\n+  \n+  public boolean isFocusTraversable () \n+  {\n+    return true;\n+  }\n+\n+  public Dimension minimumSize () \n+  {\n+    return getMinimumSize();\n+  }\n+\n+  public void paint (Graphics g)\n+  {\n+    awtComponent.paint (g);\n+  }\n+\n+  public Dimension preferredSize()\n+  {\n+    return getPreferredSize();\n+  }\n+\n+  public boolean prepareImage (Image image, int width, int height,\n+\t\t\t       ImageObserver observer) \n+  {\n+    GtkImage i = (GtkImage) image;\n+\n+    if (i.isLoaded ()) return true;\n+\n+    class PrepareImage extends Thread\n+    {\n+      GtkImage image;\n+      ImageObserver observer;\n+\n+      PrepareImage (GtkImage image, ImageObserver observer)\n+      {\n+\tthis.image = image;\n+\tthis.observer = observer;\n+      }\n+      \n+      public void run ()\n+      {\n+\t// XXX: need to return data to image observer\n+\timage.source.startProduction (null);\n+      }\n+    }\n+\n+    new PrepareImage (i, observer).start ();\n+    return false;\n+  }\n+\n+  public void print (Graphics g) \n+  {\n+    throw new RuntimeException ();\n+  }\n+\n+  public void repaint (long tm, int x, int y, int width, int height)\n+  {\n+    q.postEvent (new PaintEvent (awtComponent, PaintEvent.UPDATE,\n+\t\t\t\t new Rectangle (x, y, width, height)));\n+  }\n+\n+  native public void requestFocus ();\n+\n+  public void reshape (int x, int y, int width, int height) \n+  {\n+    setBounds (x, y, width, height);\n+  }\n+\n+  public void setBackground (Color c) \n+  {\n+    // System.out.println (\"setBackground [UNIMPLEMENTED\");\n+  }\n+\n+  native public void setNativeBounds (int x, int y, int width, int height);\n+\n+  public void setBounds (int x, int y, int width, int height)\n+  {\n+    Component parent = awtComponent.getParent ();\n+    \n+    if (parent instanceof Frame)\n+      {\n+\tInsets insets = ((Frame)parent).getInsets ();\n+\t/* convert Java's coordinate space into GTK+'s coordinate space */\n+\tsetNativeBounds (x-insets.left, y-insets.top, width, height);\n+      }\n+    else\n+      setNativeBounds (x, y, width, height);\n+  }\n+\n+  public void setCursor (Cursor cursor) \n+  {\n+    gtkWidgetSetCursor (cursor.getType ());\n+  }\n+\n+  public void setEnabled (boolean b)\n+  {\n+    set (\"sensitive\", b);\n+  }\n+\n+  public void setFont (Font f)\n+  {\n+  }\n+\n+  public void setForeground (Color c) \n+  {\n+    // System.out.println (\"setForeground [UNIMPLEMENTED\");\n+  }\n+\n+  public Color getForeground ()\n+  {\n+    int rgb[] = gtkWidgetGetForeground ();\n+    return new Color (rgb[0], rgb[1], rgb[2]);\n+  }\n+\n+  public Color getBackground ()\n+  {\n+    int rgb[] = gtkWidgetGetBackground ();\n+    return new Color (rgb[0], rgb[1], rgb[2]);\n+  }\n+\n+  public void setVisible (boolean b)\n+  {\n+    set (\"visible\", b);\n+  }\n+  \n+  public void hide () \n+  {\n+    setVisible (false);\n+  }\n+\n+  public void show () \n+  {\n+    setVisible (true);\n+  }\n+\n+  protected void postMouseEvent(int id, long when, int mods, int x, int y, \n+\t\t\t\tint clickCount, boolean popupTrigger) \n+  {\n+    q.postEvent(new MouseEvent(awtComponent, id, when, mods, x, y, \n+\t\t\t       clickCount, popupTrigger));\n+  }\n+\n+  protected void postExposeEvent (int x, int y, int width, int height)\n+  {\n+    q.postEvent (new PaintEvent (awtComponent, PaintEvent.PAINT,\n+\t\t\t\t new Rectangle (x, y, width, height)));\n+  }\n+\n+  protected void postKeyEvent (int id, long when, int mods, \n+\t\t\t       int keyCode, char keyChar)\n+  {\n+    q.postEvent (new KeyEvent (awtComponent, id, when, mods, \n+\t\t\t       keyCode, keyChar));\n+  }\n+  \n+  protected void postFocusEvent (int id, boolean temporary)\n+  {\n+    q.postEvent (new FocusEvent (awtComponent, id, temporary));\n+  }\n+\n+  protected void postItemEvent (Object item, int stateChange)\n+  {\n+    q.postEvent (new ItemEvent ((ItemSelectable)awtComponent, \n+\t\t\t\tItemEvent.ITEM_STATE_CHANGED,\n+\t\t\t\titem, stateChange));\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    args.add (\"visible\", component.isVisible ());\n+    args.add (\"sensitive\", component.isEnabled ());\n+\n+    ComponentPeer p;\n+\n+    do\n+      {\n+\tcomponent = component.getParent ();\n+\tp = component.getPeer ();\n+      } while (p instanceof java.awt.peer.LightweightPeer);\n+    \n+    args.add (\"parent\", p);\n+  }\n+\n+  native void set (String name, String value);\n+  native void set (String name, boolean value);\n+  native void set (String name, int value);\n+  native void set (String name, float value);\n+  native void set (String name, Object value);\n+\n+  void set (GtkArg arg)\n+  {\n+    String name = arg.getName ();\n+    Object value = arg.getValue ();\n+\n+    if (value instanceof Boolean)\n+      set (name, ((Boolean)value).booleanValue ());\n+    else if (value instanceof Integer)\n+      set (name, ((Integer)value).intValue ());\n+    else if (value instanceof Float)\n+      set (name, ((Float)value).floatValue ());\n+    else if (value instanceof String)\n+      set (name, ((String) value));\n+    else\n+      set (name, value);\n+  }\n+\n+  public GraphicsConfiguration getGraphicsConfiguration ()\n+  {\n+    // FIXME: just a stub for now.\n+    return null;\n+  }\n+\n+  public void setEventMask (long mask)\n+  {\n+    // FIXME: just a stub for now.\n+  }\n+}"}, {"sha": "fef88cd6a39f8b7983ab56e572c9ed150fd12823", "filename": "libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkContainerPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,125 @@\n+/* GtkContainerPeer.java -- Implements ContainerPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.ContainerPeer;\n+\n+public class GtkContainerPeer extends GtkComponentPeer\n+  implements ContainerPeer\n+{\n+  Insets insets;\n+  Container c;\n+\n+  public GtkContainerPeer(Container c)\n+  {\n+    super (c);\n+    this.c = c;\n+    insets = new Insets (0, 0, 0, 0);\n+  }\n+\n+  public void beginValidate() \n+  {\n+  }\n+\n+  public void endValidate() \n+  {\n+//      q.postEvent (new PaintEvent (awtComponent, PaintEvent.PAINT,\n+//  \t\t\t\t new Rectangle (x, y, width, height)));\n+//      Graphics gc = getGraphics ();\n+//      if (gc != null)\n+//        {\n+//  \tawtComponent.update (gc);\n+//  \tgc.dispose ();\n+//        }\n+//      System.out.println (\"got here\");\n+//      awtComponent.repaint ();\n+  }\n+\n+  public Insets getInsets() \n+  {\n+    return insets;\n+  }\n+\n+  public Insets insets() \n+  {\n+    return getInsets ();\n+  }\n+\n+  public void setBounds (int x, int y, int width, int height)\n+  {\n+    super.setBounds (x, y, width, height);\n+    awtComponent.validate ();\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    return new GdkGraphics (this);\n+  }\n+\n+  public void handleEvent (AWTEvent event)\n+  {\n+    int id = event.getID();\n+      \n+    switch (id)\n+      {\n+      case PaintEvent.PAINT:\n+      case PaintEvent.UPDATE:\n+\t{\n+\t  try \n+\t    {\n+\t      Graphics g = getGraphics ();\n+\t      g.setClip (((PaintEvent)event).getUpdateRect());\n+\n+\t      if (id == PaintEvent.PAINT)\n+\t\tawtComponent.paint (g);\n+\t      else\n+\t\tawtComponent.update (g);\n+\t      \n+\t      g.dispose ();\n+\t    } \n+\t  catch (InternalError e)\n+\t    { \n+\t      System.err.println (e);\n+\t    }\n+\t}\n+\tbreak;\n+      }\n+  }\n+}"}, {"sha": "b47956d4f217f27803a71d38816dffbbbf050480", "filename": "libjava/gnu/java/awt/peer/gtk/GtkDialogPeer.java", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkDialogPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,76 @@\n+/* GtkDialogPeer.java -- Implements DialogPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.*;\n+import java.awt.event.*;\n+\n+public class GtkDialogPeer extends GtkWindowPeer\n+  implements DialogPeer\n+{\n+  public GtkDialogPeer (Dialog dialog)\n+  {\n+    super (dialog);\n+  }\n+\n+  void create ()\n+  {\n+    create (GTK_WINDOW_DIALOG);\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+\n+    Dialog dialog = (Dialog) component;\n+\n+    args.add (\"modal\", dialog.isModal ());\n+    args.add (\"allow_shrink\", dialog.isResizable ());\n+    args.add (\"allow_grow\", dialog.isResizable ());\n+  }\n+\n+  public void handleEvent (AWTEvent event)\n+  {\n+//     int id = event.getID();\n+    \n+//     if (id == WindowEvent.WINDOW_CLOSING)\n+//       System.out.println (\"got a closing event\");\n+  }\n+\n+}"}, {"sha": "3376787d2e58520c66de18c24efd18815865dddb", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFileDialogPeer.java", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFileDialogPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,70 @@\n+/* GtkFileDialogPeer.java -- Implements FileDialogPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.io.FilenameFilter;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkFileDialogPeer extends GtkDialogPeer implements FileDialogPeer\n+{\n+  native void create ();\n+\n+  public GtkFileDialogPeer (FileDialog fd)\n+  {\n+    super (fd);\n+  }\n+\n+  public void setDirectory (String directory)\n+  {\n+    setFile (directory);\n+  }\n+\n+  public native void setFile (String file);\n+  public native void connectHooks ();\n+\n+  public void setFilenameFilter (FilenameFilter filter)\n+  {\n+    /* GTK has no filters. */\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    return null;\n+  }\n+}"}, {"sha": "47a46e81865bc04ac974c4031e9528fa84d84d72", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFontPeer.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFontPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFontPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFontPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,74 @@\n+/* GtkFontPeer.java -- Implements FontPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.FontPeer;\n+import java.awt.Font;\n+import java.util.ResourceBundle;\n+\n+public class GtkFontPeer implements FontPeer\n+{\n+  private static ResourceBundle bundle;\n+  \n+  static\n+  {\n+    try\n+      {\n+\tbundle = ResourceBundle.getBundle (\"gnu.java.awt.peer.gtk.font\");\n+      }\n+    catch (Throwable ignored)\n+      {\n+\tbundle = null;\n+      }\n+  }\n+\n+  final private String Xname;\n+\n+  public GtkFontPeer (String name, int style)\n+  {\n+    if (bundle != null)\n+      Xname = bundle.getString (name.toLowerCase () + \".\" + style);\n+    else\n+      Xname = \"-*-*-medium-r-normal-*-12-*-*-*-c-*-*-*\";\n+  }\n+\n+  public String getXLFD ()\n+  {\n+    return Xname;\n+  }\n+}"}, {"sha": "e16a570938e759c2e5a2b4c31c9cc6cf73ca3b08", "filename": "libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkFramePeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,132 @@\n+/* GtkFramePeer.java -- Implements FramePeer with GTK\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.*;\n+import java.awt.event.*;\n+\n+public class GtkFramePeer extends GtkWindowPeer\n+    implements FramePeer\n+{\n+  int menuBarHeight = 0;\n+  native int getMenuBarHeight ();\n+\n+  native public void setMenuBarPeer (MenuBarPeer bar);\n+\n+  public void setMenuBar (MenuBar bar)\n+  {\n+    if (bar == null)\n+      setMenuBarPeer (null);\n+    else\n+      setMenuBarPeer ((MenuBarPeer) bar.getPeer ());\n+  }\n+\n+  public GtkFramePeer (Frame frame)\n+  {\n+    super (frame);\n+  }\n+\n+  void create ()\n+  {\n+    create (GTK_WINDOW_TOPLEVEL);\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+\n+    Frame frame = (Frame) component;\n+\n+    args.add (\"title\", frame.getTitle ());\n+    args.add (\"allow_shrink\", frame.isResizable ());\n+    args.add (\"allow_grow\", frame.isResizable ());\n+  }\n+  public void setIconImage (Image image) \n+  {\n+      /* TODO: Waiting on Toolkit Image routines */\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    GdkGraphics g = new GdkGraphics (this);\n+    g.translateNative (-insets.left, -insets.top);\n+    return g;\n+  }\n+\n+  public void setBounds (int x, int y, int width, int height)\n+  {\n+    super.setBounds (0, 0, width - insets.left - insets.right,\n+\t\t     height - insets.top - insets.bottom + menuBarHeight);\n+  }\n+\n+  protected void postConfigureEvent (int x, int y, int width, int height,\n+\t\t\t\t     int top, int left, int bottom, int right)\n+  {\n+    if (((Frame)awtComponent).getMenuBar () != null)\n+      {\n+\tmenuBarHeight = getMenuBarHeight ();\n+\ttop += menuBarHeight;\n+      }\n+\n+    super.postConfigureEvent (0, 0,\n+\t\t\t      width + left + right,\n+\t\t\t      height + top + bottom - menuBarHeight,\n+\t\t\t      top, left, bottom, right);\n+  }\n+\n+  protected void postMouseEvent(int id, long when, int mods, int x, int y, \n+\t\t\t\tint clickCount, boolean popupTrigger)\n+  {\n+    super.postMouseEvent (id, when, mods, \n+\t\t\t  x + insets.left, y + insets.top, \n+\t\t\t  clickCount, popupTrigger);\n+  }\n+\n+  protected void postExposeEvent (int x, int y, int width, int height)\n+  {\n+//      System.out.println (\"x + insets.left:\" + (x + insets.left));\n+//      System.out.println (\"y + insets.top :\" + (y + insets.top));\n+    q.postEvent (new PaintEvent (awtComponent, PaintEvent.PAINT,\n+\t\t\t\t new Rectangle (x + insets.left, \n+\t\t\t\t\t\ty + insets.top, \n+\t\t\t\t\t\twidth, height)));\n+  }\n+}\n+\n+"}, {"sha": "914b7a6cdebdab5008241b6c39fdccf13d90ee22", "filename": "libjava/gnu/java/awt/peer/gtk/GtkGenericPeer.java", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkGenericPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkGenericPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkGenericPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,84 @@\n+/* GtkGenericPeer.java - Has a hashcode.  Yuck.\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.event.*;\n+\n+public class GtkGenericPeer\n+{\n+  final int native_state = getUniqueInteger ();\n+\n+  // Next native state value we will assign.\n+  private static int next_native_state = 0;\n+\n+  // The widget or other java-side object we wrap.\n+  protected Object awtWidget;\n+\n+  // Global event queue.\n+  protected static EventQueue q = null;\n+\n+  // Dispose of our native state.\n+  public native void dispose ();\n+\n+  protected GtkGenericPeer (Object awtWidget)\n+  {\n+    this.awtWidget = awtWidget;\n+  }\n+\n+  public static void enableQueue (EventQueue sq) \n+  {\n+    if (q == null)\n+      q = sq;\n+  }\n+\n+  protected void postActionEvent (String command, int mods) \n+  {\n+    q.postEvent (new ActionEvent (awtWidget, ActionEvent.ACTION_PERFORMED, \n+\t\t\t\t  command, mods));\n+  }\n+\n+  // Return a unique integer for use in the native state mapping\n+  // code.  We can't use a hash code since that is not guaranteed to\n+  // be unique.\n+  static synchronized int getUniqueInteger ()\n+  {\n+    // Let's assume this will never wrap.\n+    return next_native_state++;\n+  }\n+}"}, {"sha": "f0c8bf410efa036b84b0cd8d03ea362418092fc7", "filename": "libjava/gnu/java/awt/peer/gtk/GtkImage.java", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImage.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,286 @@\n+/* GtkImage.java\n+   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.util.*;\n+import java.awt.image.*;\n+\n+public class GtkImage extends Image implements ImageConsumer\n+{\n+  int width = -1, height = -1;\n+  Hashtable props = null;\n+  boolean isLoaded = false;\n+  boolean isCacheable = true;\n+  boolean loading = false;\n+\n+  Vector widthObservers = new Vector ();\n+  Vector heightObservers = new Vector ();\n+  Vector propertyObservers = new Vector ();\n+\n+  ImageProducer source;\n+  Graphics g;\n+\n+  /* Variables in which we stored cached data, if possible.\n+\n+     An image is cached if the following properties are true:\n+     1. The ColorModel passed into setColorModel is the same ColorModel\n+        passed to all invocations of setPixels.\n+     2. The image contains a single frame.\n+\n+  */\n+  int[] pixelCache;\n+  ColorModel model;\n+\n+  public \n+  GtkImage (ImageProducer producer, Graphics g)\n+  {\n+    source = producer;\n+    this.g = g;\n+\n+    source.addConsumer (this);\n+  }\n+  \n+  public synchronized int \n+  getWidth (ImageObserver observer)\n+  {\n+    if (width == -1)\n+      widthObservers.addElement (observer);\n+    \n+    return width;\n+  }\n+  \n+  public synchronized int \n+  getHeight (ImageObserver observer)\n+  {\n+    if (height == -1)\n+      heightObservers.addElement (observer);\n+    \n+    return height;\n+  }\n+  \n+  public ImageProducer \n+  getSource ()\n+  {\n+    return source;\n+  }\n+\n+  public Graphics \n+  getGraphics ()\n+  {\n+    return g;\n+  }\n+  \n+  public synchronized Object \n+  getProperty (String name, ImageObserver observer)\n+  {\n+    if (props == null)\n+      {\n+\tpropertyObservers.addElement (observer);\n+\treturn null;\n+      }\n+    \n+    Object value = props.get (name);\n+    return (value == null) ? UndefinedProperty : value;\n+  }\n+\n+  public synchronized void \n+  flush ()\n+  {\n+    isLoaded = false;\n+    isCacheable = true;\n+    width = height = -1;\n+    props = null;\n+    pixelCache = null;\n+    model = null;\n+\n+    source.removeConsumer (this);\n+    source.addConsumer (this);\n+  }\n+\n+  public boolean\n+  isLoaded ()\n+  {\n+    return isLoaded;\n+  }\n+\n+  /* ImageConsumer methods */\n+\n+  public synchronized void \n+  setDimensions (int width, int height)\n+  {\n+    pixelCache = new int[width*height];\n+\n+    this.width = width;\n+    this.height = height;\n+    \n+    for (int i = 0; i < widthObservers.size (); i++)\n+      {\n+\tImageObserver io = (ImageObserver) widthObservers.elementAt (i);\n+\tio.imageUpdate (this, ImageObserver.WIDTH, -1, -1, width, height);\n+      }\n+\n+    for (int i = 0; i < heightObservers.size (); i++)\n+      {\n+\tImageObserver io = (ImageObserver) heightObservers.elementAt (i);\n+\tio.imageUpdate (this, ImageObserver.HEIGHT, -1, -1, width, height);\n+      }\n+  }\n+\n+  public synchronized void \n+  setProperties (Hashtable props)\n+  {\n+    this.props = props;\n+    \n+    for (int i = 0; i < propertyObservers.size (); i++)\n+      {\n+\tImageObserver io = (ImageObserver) propertyObservers.elementAt (i);\n+\tio.imageUpdate (this, ImageObserver.PROPERTIES, -1, -1, width, height);\n+      }\n+  }\n+\n+  public synchronized void \n+  setColorModel (ColorModel model)\n+  {\n+    if (this.model == null || this.model == model)\n+      this.model = model;\n+    else\n+      isCacheable = false;\n+  }\n+\n+  public synchronized void \n+  setHints (int flags)\n+  {\n+  }\n+\n+  public synchronized void \n+  setPixels (int x, int y, int width, int height, ColorModel cm, byte[] pixels,\n+\t     int offset, int scansize)\n+  {\n+    setPixels (x, y, width, height, cm, convertPixels (pixels), offset,\n+\t       scansize);\n+  }\n+\n+  public synchronized void \n+  setPixels (int x, int y, int width, int height, ColorModel cm, int[] pixels,\n+\t     int offset, int scansize)\n+  {\n+    loading = true;\n+\n+    if (!isCacheable)\n+      return;\n+\n+    if (cm != model || pixelCache == null)\n+      {\n+\tisCacheable = false;\n+\treturn;\n+      }\n+\n+    if (scansize == width)\n+      {\n+\tSystem.arraycopy (pixels, offset, \n+\t\t\t  pixelCache, y * this.width + x,\n+\t\t\t  pixels.length - offset);\n+      }\n+    else\t\t\t// skip over scansize-width for each row\n+      {\n+\tfor (int i = 0; i < height; i++)\n+\t  System.arraycopy (pixels, offset + (i * scansize),\n+\t\t\t    pixelCache, (y + i) * this.width + x,\n+\t\t\t    width);\n+      }\n+  }\n+\n+  public synchronized void \n+  imageComplete (int status)\n+  {\n+    if (status == ImageConsumer.STATICIMAGEDONE && isCacheable)\n+      isLoaded = true;\n+\n+    if (status == ImageConsumer.SINGLEFRAMEDONE)\n+      isCacheable = false;\n+\n+    source.removeConsumer (this);\n+  }\n+\n+  public synchronized void\n+  startProduction (GtkImagePainter painter)\n+  {\n+    if (isLoaded)\n+      {\n+\tpainter.setDimensions (width, height);\n+\tpainter.setPixels (0, 0, width, height, model, pixelCache, 0, width);\n+      }\n+    else\n+      {\n+\tsource.startProduction (painter);\n+\tsource.removeConsumer (painter);\n+      }\n+  }\n+\n+  private int[]\n+  convertPixels (byte[] pixels)\n+  {\n+    int ret[] = new int[pixels.length];\n+\n+    for (int i = 0; i < pixels.length; i++)\n+      ret[i] = pixels[i];\n+    \n+    return ret;\n+  }\n+\n+  synchronized int \n+  checkImage ()\n+  {\n+    int bits = 0;\n+\n+    if (width != -1)\n+      bits |= ImageObserver.WIDTH;\n+    if (height != -1)\n+      bits |= ImageObserver.HEIGHT;\n+    if (props != null)\n+      bits |= ImageObserver.PROPERTIES;\n+    if (loading)\n+      bits |= ImageObserver.SOMEBITS;\n+    if (isLoaded)\n+      bits |= ImageObserver.ALLBITS;\n+\n+    return bits;\n+  }\n+}"}, {"sha": "3ea22cd25af7afc47e7414ccb767f6c65f77e3ca", "filename": "libjava/gnu/java/awt/peer/gtk/GtkImagePainter.java", "status": "added", "additions": 239, "deletions": 0, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImagePainter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImagePainter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkImagePainter.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,239 @@\n+/* GtkImagePainter.java\n+   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.awt.image.*;\n+import java.util.*;\n+\n+public class GtkImagePainter implements Runnable, ImageConsumer\n+{\n+  GtkImage image;\n+  GdkGraphics gc;\n+  int startX, startY;\n+  int redBG;\n+  int greenBG;\n+  int blueBG;\n+  double affine[];\n+  int width, height;\n+  boolean flipX, flipY;\n+  Rectangle clip;\n+  int s_width, s_height;\n+\n+  public\n+  GtkImagePainter (GtkImage image, GdkGraphics gc, int x, int y, \n+\t\t   int width, int height, Color bgcolor)\n+  {\n+    this.image = image;\n+    this.gc = (GdkGraphics) gc.create ();\n+    startX = x;\n+    startY = y;\n+    redBG = bgcolor.getRed ();\n+    greenBG = bgcolor.getGreen ();\n+    blueBG = bgcolor.getBlue ();\n+    this.width = width;\n+    this.height = height;\n+    flipX = flipY = false;\n+    s_width = s_height = 0;\n+    clip = null;\n+\n+    new Thread (this).start ();\n+  }\n+\n+  public\n+  GtkImagePainter (GtkImage image, GdkGraphics gc, \n+\t\t   int dx1, int dy1, int dx2, int dy2,\n+\t\t   int sx1, int sy1, int sx2, int sy2,\n+\t\t   Color bgcolor)\n+  {\n+    this.image = image;\n+    this.gc = (GdkGraphics) gc.create ();\n+    startX = (dx1 < dx2) ? dx1 : dx2;\n+    startY = dy1;\n+    redBG = bgcolor.getRed ();\n+    greenBG = bgcolor.getGreen ();\n+    blueBG = bgcolor.getBlue ();\n+\n+    this.width = Math.abs (dx2 - dx1);\n+    this.height = Math.abs (dy2 - dy1);\n+\n+    flipX = ((dx1 > dx2 && sx2 > sx1)\n+\t     || (dx1 < dx2 && sx2 < sx1));\n+\n+    flipY = ((dy1 > dy2 && sy2 > sy1)\n+\t     || (dy1 < dy2 && sy2 < sy1));\n+\n+    s_width = Math.abs (sx2 - sx1);\n+    s_height = Math.abs (sy2 - sy1);\n+    clip = new Rectangle (sx1, sy1, s_width, s_height);\n+    \n+    new Thread (this).start ();\n+  }\n+\n+  public void\n+  run ()\n+  {\n+    image.startProduction (this);\n+    gc.dispose ();\n+  }\n+\n+  /* Convert pixel data into a format that gdkrgb can understand */\n+  static int[] \n+  convertPixels (int[] pixels, ColorModel model)\n+  {\n+    if (model.equals (ColorModel.getRGBdefault ()))\n+      return pixels;\n+    \n+    int ret[] = new int[pixels.length];\n+\n+    for (int i = 0; i < pixels.length; i++)\n+      ret[i] = model.getRGB (pixels[i]);\n+\n+    return ret;\n+  }\n+\n+  static int[]\n+  convertPixels (byte[] pixels, ColorModel model)\n+  {\n+    int ret[] = new int[pixels.length];\n+\n+    for (int i = 0; i < pixels.length; i++)\n+      ret[i] = model.getRGB (pixels[i]);\n+\n+    return ret;\n+  }\n+\n+  native void\n+  drawPixels (GdkGraphics gc, int bg_red, int bg_green, int bg_blue, \n+\t      int x, int y, int width, int height, int[] pixels, int offset, \n+\t      int scansize, double affine[]);\n+\n+ \n+  public void \n+  setPixels (int x, int y, int width, int height, ColorModel model,\n+\t     int[] pixels, int offset, int scansize)\n+  {\n+    if (clip != null)\n+      {\n+\tRectangle r;\n+\tr = clip.intersection (new Rectangle (x, y, width, height));\n+\tif (r.width == 0 && r.height == 0)\n+\t  return;\n+\n+\toffset += r.y * scansize + r.x;\n+\n+\tr.translate (-Math.abs (clip.x - startX), -Math.abs (clip.y - startY));\n+\n+\twidth = r.width;\n+\theight = r.height;\n+\tx = r.x;\n+\ty = r.y;\n+      }\n+\n+    drawPixels (gc, redBG, greenBG, blueBG,\n+\t        startX + x, startY + y,\n+\t\twidth, height, convertPixels (pixels, model), offset,\n+\t\tscansize, affine);\n+  }\n+\n+  public void \n+  setPixels (int x, int y, int width, int height, ColorModel model, \n+\t     byte[] pixels, int offset, int scansize)\n+  {\n+    setPixels (x, y, width, height, model, convertPixels (pixels, model),\n+\t       offset, scansize);\n+  }\n+\n+  public void \n+  setDimensions (int width, int height)\n+  {\n+    if (!flipX && !flipY && \n+\t((this.width == -1 && this.height == -1)\n+\t || (this.width == width && this.height == height)))\n+      return;\n+\n+    affine = new double[6];\n+    affine[1] = affine[2] = affine[4] = affine[5] = 0;\n+    \n+    if (clip != null)\n+      {\n+\taffine[0] = this.width / (double) s_width;\n+\taffine[3] = this.height / (double) s_height;\n+      }\n+    else\n+      {\n+\taffine[0] = this.width / (double) width;\n+\taffine[3] = this.height / (double) height;\n+      }\n+\n+    if (flipX)\n+      {\n+\taffine[0] = -affine[0];\n+\taffine[4] = this.width;\n+      }\n+\n+    if (flipY)\n+      {\n+\taffine[3] = -affine[3];\n+\taffine[5] = this.height;\n+      }\n+\n+    if (affine[0] == 1 && affine[3] == 1)\n+      affine = null;\n+  }\n+\n+  public void \n+  setProperties (Hashtable props)\n+  {\n+  }\n+\n+  public void \n+  setColorModel (ColorModel model)\n+  {\n+  }\n+\n+  public void \n+  setHints (int flags)\n+  {\n+  }\n+\n+  public void \n+  imageComplete (int status)\n+  {\n+  }\n+}"}, {"sha": "5cd3fb7b3273d40c558eea0e88913aeaf38844ee", "filename": "libjava/gnu/java/awt/peer/gtk/GtkLabelPeer.java", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkLabelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkLabelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkLabelPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,88 @@\n+/* GtkLabelPeer.java -- Implements LabelPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.*;\n+\n+public class GtkLabelPeer extends GtkComponentPeer\n+    implements LabelPeer\n+{\n+  native void create ();\n+\n+  public GtkLabelPeer (Label l)\n+  {\n+    super (l);\n+  }\n+    \n+  public void setText (String text)\n+  {\n+    set (\"label\", text);\n+  }\n+\n+  public void setAlignment (int alignment)\n+  {\n+    set (\"xalign\", getGtkAlignment (alignment));\n+  }\n+\n+  float getGtkAlignment (int alignment)\n+  {\n+    switch (alignment)\n+      {\n+      case Label.LEFT:\n+\treturn 0.0f;\n+      case Label.CENTER:\n+\treturn 0.5f;\n+      case Label.RIGHT:\n+\treturn 1.0f;\n+      }\n+\n+    return 0.0f;\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+\n+    Label label = (Label) component;\n+\n+    args.add (\"label\", label.getText ());\n+    args.add (\"xalign\", getGtkAlignment (label.getAlignment ()));\n+    args.add (\"yalign\", 0.5f);\n+  }\n+}"}, {"sha": "6686457ba4228752cf980be0612212fd4ed4ac59", "filename": "libjava/gnu/java/awt/peer/gtk/GtkListPeer.java", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkListPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,126 @@\n+/* GtkListPeer.java -- Implements ListPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.*;\n+\n+public class GtkListPeer extends GtkComponentPeer\n+  implements ListPeer\n+{\n+//    native void create (ComponentPeer parent, String [] items, boolean mode);\n+\n+  native void create ();\n+  native void connectHooks ();\n+\n+  native void getSize (int rows, int dims[]);\n+\n+  public GtkListPeer (List list)\n+  {\n+    super (list);\n+    \n+    setMultipleMode (list.isMultipleMode ());\n+\n+    if (list.getItemCount () > 0)\n+      append (list.getItems ());\n+  }\n+\n+  native void append (String items[]);\n+\n+  public native void add (String item, int index);\n+  \n+  public void addItem (String item, int index)\n+  {\n+    add (item, index);\n+  }\n+  \n+  public void clear ()\n+  {\n+    removeAll ();\n+  }\n+  \n+  public native void delItems (int start, int end);\n+  public native void deselect (int index);\n+  \n+  public Dimension getMinimumSize (int rows)\n+  {\n+    int dims[] = new int[2];\n+\n+    getSize (rows, dims);\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+\n+  public Dimension getPreferredSize (int rows)\n+  {\n+    int dims[] = new int[2];\n+\n+    getSize (rows, dims);\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+  \n+  public native int[] getSelectedIndexes ();\n+  public native void makeVisible (int index);\n+\n+  public Dimension minimumSize (int rows)\n+  {\n+    return (getMinimumSize (rows));\n+  }\n+\n+  public Dimension preferredSize (int rows)\n+  {\n+    return (getPreferredSize (rows));\n+  }\n+\n+  public void removeAll ()\n+  {\n+    delItems (0, -1);\n+  }\n+\n+  public native void select (int index);\n+  public native void setMultipleMode (boolean b);\n+\n+  public void setMultipleSelections (boolean b)\n+  {\n+    setMultipleMode (b);\n+  }\n+\n+  protected void postItemEvent (int item, int stateChange)\n+  {\n+    postItemEvent (new Integer (item), stateChange);\n+  }\n+}"}, {"sha": "6efa841019776024c1a0d3aac0af812eee980db5", "filename": "libjava/gnu/java/awt/peer/gtk/GtkMainThread.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMainThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMainThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMainThread.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,80 @@\n+/* GtkMainThread.java -- Runs gtk_main()\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+public class GtkMainThread extends GtkGenericPeer implements Runnable\n+{\n+  private static Thread mainThread = null;\n+  private static Object mainThreadLock = new Object();\n+\n+  static native void gtkInit();\n+  native void gtkMain();\n+  \n+  public GtkMainThread() \n+  {\n+    super (null);\n+    synchronized (mainThreadLock) \n+      {\n+\tif (mainThread != null)\n+\t  throw new IllegalStateException();\n+\tmainThread = new Thread(this, \"GtkMain\");\n+      }\n+    \n+    synchronized (this) \n+      {\n+\tmainThread.start();\n+\ttry {\n+\t  wait();\n+\t} catch (InterruptedException e) { }\n+      }\n+  }\n+  \n+  public void run() \n+  {\n+    synchronized (this) \n+      {\n+\tgtkInit();\n+\tnotify();\n+      }\n+    gtkMain();\n+  }\n+}\n+\n+\n+"}, {"sha": "6ceb86414810ba20670a1ba20b65bc5fc0f201f2", "filename": "libjava/gnu/java/awt/peer/gtk/GtkMenuBarPeer.java", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuBarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuBarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuBarPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,69 @@\n+/* GtkMenuBarPeer.java -- Implements MenuBarPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.MenuBarPeer;\n+import java.awt.peer.MenuPeer;\n+\n+public class GtkMenuBarPeer extends GtkMenuComponentPeer\n+  implements MenuBarPeer\n+{\n+\n+  native void create ();\n+  native void addMenu (MenuPeer menu);\n+\n+  public GtkMenuBarPeer (MenuBar target)\n+  {\n+    super (target);\n+    create ();\n+  }\n+\n+  /* In Gnome, help menus are no longer right flushed. */\n+  public void addHelpMenu (Menu menu)\n+  {\n+    addMenu (menu);\n+  }\n+\n+  public void addMenu (Menu menu)\n+  {\n+    addMenu ((MenuPeer) menu.getPeer ());\n+  }\n+\n+  native public void delMenu (int index);\n+}"}, {"sha": "e04ce99932487e9f0325729d43cb007e7015df8c", "filename": "libjava/gnu/java/awt/peer/gtk/GtkMenuComponentPeer.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuComponentPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,54 @@\n+/* GtkMenuComponentPeer.java -- Implements MenuComponentPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.MenuComponentPeer;\n+\n+public class GtkMenuComponentPeer extends GtkGenericPeer\n+  implements MenuComponentPeer\n+{\n+  public GtkMenuComponentPeer (Object awtWidget)\n+  {\n+    super (awtWidget);\n+  }\n+\n+  public void dispose ()\n+  {\n+  }\n+}"}, {"sha": "1428011133bb588d02fa1c5c7a0190718c406114", "filename": "libjava/gnu/java/awt/peer/gtk/GtkMenuItemPeer.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuItemPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuItemPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuItemPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,92 @@\n+/* GtkMenuItemPeer.java -- Implements MenuItemPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.MenuItemPeer;\n+import java.awt.peer.MenuComponentPeer;\n+import java.awt.peer.MenuBarPeer;\n+import java.awt.peer.MenuPeer;\n+\n+public class GtkMenuItemPeer extends GtkMenuComponentPeer\n+  implements MenuItemPeer\n+{\n+  native void create (String label);\n+\n+  public GtkMenuItemPeer (MenuItem item)\n+  {\n+    super (item);\n+    create (item.getLabel ());\n+    setEnabled (item.isEnabled ());\n+    setParent (item);\n+  }\n+\n+  void setParent (MenuItem item)\n+  {\n+    // add ourself differently, based on what type of parent we have\n+    // yes, the typecasting here is nasty.\n+    Object parent = item.getParent ();\n+    if (parent instanceof MenuBar)\n+      {\n+\t((GtkMenuBarPeer)((MenuBar)parent).getPeer ()).addMenu ((MenuPeer) this);\n+      }\n+    else // parent instanceof Menu\n+      {\n+\t((GtkMenuPeer)((Menu)parent).getPeer ()).addItem (this, \n+\t\t\t\t\t\t\t  item.getShortcut ());\n+      }\n+  }\n+\n+  public void disable ()\n+  {\n+    setEnabled (false);\n+  }\n+\n+  public void enable ()\n+  {\n+    setEnabled (true);\n+  }\n+\n+  native public void setEnabled (boolean b);\n+  native public void setLabel (String label);\n+\n+  protected void postMenuActionEvent ()\n+  {\n+    postActionEvent (((MenuItem)awtWidget).getActionCommand (), 0);\n+  }\n+}"}, {"sha": "51733a6f0b6c732531cce90766562134dea26bce", "filename": "libjava/gnu/java/awt/peer/gtk/GtkMenuPeer.java", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkMenuPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,99 @@\n+/* GtkMenuPeer.java -- Implements MenuPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.MenuPeer;\n+import java.awt.peer.MenuItemPeer;\n+\n+public class GtkMenuPeer extends GtkMenuItemPeer\n+  implements MenuPeer\n+{\n+  native void create (String label);\n+  native void addItem (MenuItemPeer item, int key, boolean shiftModifier);\n+  native void setupAccelGroup (GtkGenericPeer container);\n+\n+  public GtkMenuPeer (Menu menu)\n+  {\n+    super (menu);\n+    \n+    MenuContainer parent = menu.getParent ();\n+    if (parent instanceof Menu)\n+      setupAccelGroup ((GtkGenericPeer)((Menu)parent).getPeer ());\n+    else if (parent instanceof Component)\n+      setupAccelGroup ((GtkGenericPeer)((Component)parent).getPeer ());\n+    else\n+      setupAccelGroup (null);\n+  }\n+\n+  public void addItem (MenuItem item)\n+  {\n+    int key = 0;\n+    boolean shiftModifier = false;\n+\n+    MenuShortcut ms = item.getShortcut ();\n+    if (ms != null)\n+      {\n+\tkey = ms.getKey ();\n+\tshiftModifier = ms.usesShiftModifier ();\n+      }\n+\n+    addItem ((MenuItemPeer) item.getPeer (), key, shiftModifier);\n+  }\n+\n+  public void addItem (MenuItemPeer item, MenuShortcut ms)\n+  {\n+    int key = 0;\n+    boolean shiftModifier = false;\n+\n+    if (ms != null)\n+      {\n+\tkey = ms.getKey ();\n+\tshiftModifier = ms.usesShiftModifier ();\n+      }\n+\n+    addItem (item, key, shiftModifier);\n+  }\n+\n+  public void addSeparator ()\n+  {\n+    addItem (new MenuItem (\"-\"));\n+  }\n+\n+  native public void delItem (int index);\n+}"}, {"sha": "135fbf627c3659426153a9ea6a92d581b6ebdc39", "filename": "libjava/gnu/java/awt/peer/gtk/GtkOffScreenImage.java", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkOffScreenImage.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkOffScreenImage.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkOffScreenImage.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,87 @@\n+/* GtkOffScreenImage.java\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.awt.image.*;\n+\n+public class GtkOffScreenImage extends Image\n+{\n+  int width, height;\n+  ImageProducer source;\n+  Graphics g;\n+  \n+  public GtkOffScreenImage (ImageProducer source, Graphics g,\n+\t\t\t    int width, int height)\n+  {\n+    this.width = width;\n+    this.height = height;\n+\n+    this.source = source;\n+    this.g = g;\n+  }\n+\n+  public int getWidth (ImageObserver observer)\n+  {\n+    return width;\n+  }\n+\n+  public int getHeight (ImageObserver observer)\n+  {\n+    return height;\n+  }\n+\n+  public ImageProducer getSource ()\n+  {\n+    return source;\n+  }\n+\n+  public Graphics getGraphics ()\n+  {\n+    return g;\n+  }\n+\n+  public Object getProperty (String name, ImageObserver observer)\n+  {\n+    return Image.UndefinedProperty;\n+  }\n+\n+  public void flush ()\n+  {\n+  }\n+}"}, {"sha": "168e075b28b81cad47dcedcbe0ae150eb142f267", "filename": "libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPanelPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,53 @@\n+/* GtkPanelPeer.java -- Implements PanelPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkPanelPeer extends GtkContainerPeer\n+  implements PanelPeer\n+{\n+  native void create ();\n+  native void connectHooks ();\n+\n+  public GtkPanelPeer (Panel p)\n+  {\n+    super (p);\n+  }\n+}"}, {"sha": "c7a645a7cf469358a6ae39560aa8ad559d009d7d", "filename": "libjava/gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkPopupMenuPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,65 @@\n+/* GtkPopupMenuPeer.java -- Implements PopupMenuPeer with GTK+\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.peer.PopupMenuPeer;\n+\n+public class GtkPopupMenuPeer extends GtkMenuPeer\n+  implements PopupMenuPeer\n+{\n+  public GtkPopupMenuPeer (PopupMenu menu)\n+  {\n+    super (menu);\n+  }\n+\n+  native void setupAccelGroup (GtkGenericPeer container);\n+\n+  void setParent (MenuItem item)\n+  {\n+    // we don't need to \"add\" ourselves to our parent\n+  }\n+\n+  native void show (int x, int y, long time);\n+  public void show (Component origin, int x, int y)\n+  {\n+    Point abs = origin.getLocationOnScreen ();\n+    show (abs.x + x, abs.y + y, 0);\n+  }\n+}"}, {"sha": "9abde2ae44bce113ba79754d794baa5ef8963d83", "filename": "libjava/gnu/java/awt/peer/gtk/GtkScrollPanePeer.java", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollPanePeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,91 @@\n+/* GtkScrollPanePeer.java -- Implements ScrollPanePeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkScrollPanePeer extends GtkContainerPeer\n+  implements ScrollPanePeer\n+{\n+  native void create ();\n+\n+  native void gtkScrolledWindowNew(ComponentPeer parent,\n+\t\t\t\t   int policy, int w, int h, int[] dims);\n+  native void gtkScrolledWindowSetScrollPosition(int x, int y);\n+  native void gtkScrolledWindowSetHScrollIncrement (int u);\n+  native void gtkScrolledWindowSetVScrollIncrement (int u);\n+  native void gtkScrolledWindowSetSize(int w, int h);\n+  \n+  public GtkScrollPanePeer (ScrollPane sp)\n+  {\n+    super (sp);\n+\n+    setPolicy (sp.getScrollbarDisplayPolicy ());\n+  }\n+\n+  native void setPolicy (int policy);\n+  native public void childResized (int width, int height);\n+  native public int getHScrollbarHeight ();\n+  native public int getVScrollbarWidth ();\n+  native public void setScrollPosition (int x, int y);\n+\n+//    public Dimension getPreferredSize ()\n+//    {\n+//      return new Dimension (60, 60);\n+//    }\n+\n+  public void setUnitIncrement (Adjustable adj, int u)\n+  {\n+    if (adj.getOrientation()==Adjustable.HORIZONTAL)\n+      gtkScrolledWindowSetHScrollIncrement (u);\n+    else\n+      gtkScrolledWindowSetVScrollIncrement (u);\n+  }\n+\n+  public void setValue (Adjustable adj, int v)\n+  {\n+//      System.out.println(\"SPP: setVal: \"+adj+\":\"+v);\n+//      Point p=myScrollPane.getScrollPosition ();\n+//      if (adj.getOrientation()==Adjustable.HORIZONTAL)\n+//        gtkScrolledWindowSetScrollPosition (v,p.y);\n+//      else\n+//        gtkScrolledWindowSetScrollPosition (p.x,v);\n+//      adj.setValue(v);\n+  }\n+}"}, {"sha": "07aee679158df1559645e68e6390bfa80e2bcd83", "filename": "libjava/gnu/java/awt/peer/gtk/GtkScrollbarPeer.java", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkScrollbarPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,78 @@\n+/* GtkScrollbarPeer.java -- Implements ScrollbarPeer with GTK+\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.*;\n+import java.awt.peer.*;\n+import java.awt.event.AdjustmentEvent;\n+\n+public class GtkScrollbarPeer extends GtkComponentPeer\n+    implements ScrollbarPeer\n+{\n+  void create ()\n+  {\n+    Scrollbar sb = (Scrollbar) awtComponent;\n+\n+    create (sb.getOrientation (), sb.getValue (),\n+\t    sb.getMinimum (), sb.getMaximum (), \n+\t    sb.getUnitIncrement (), sb.getBlockIncrement (),\n+\t    sb.getVisibleAmount ());\n+  }\n+\n+  native void create (int orientation, int value,\n+\t\t      int min, int max, int stepIncr, int pageIncr,\n+\t\t      int visibleAmount);\n+\n+  native void connectHooks ();\n+\n+  public GtkScrollbarPeer (Scrollbar s)\n+  {\n+    super (s);\n+  }\n+\n+  native public void setLineIncrement (int amount);\n+  native public void setPageIncrement (int amount);\n+  native public void setValues (int value, int visible, int min, int max);\n+\n+  protected void postAdjustmentEvent (int type, int value)\n+  {\n+    q.postEvent (new AdjustmentEvent ((Adjustable)awtComponent, \n+\t\t\t\t      AdjustmentEvent.ADJUSTMENT_VALUE_CHANGED,\n+\t\t\t\t      type, value));\n+  }\n+}"}, {"sha": "7a648b913add22b8a2179b6aeb732f0b98de9171", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextAreaPeer.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextAreaPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,102 @@\n+/* GtkTextAreaPeer.java -- Implements TextAreaPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkTextAreaPeer extends GtkTextComponentPeer\n+  implements TextAreaPeer\n+{\n+  native void create (int scrollbarVisibility);\n+\n+  void create ()\n+  {\n+    create (((TextArea)awtComponent).getScrollbarVisibility ());\n+  }\n+\n+  // native void create (Object parent, String text, int scroll);\n+  native void gtkTextGetSize (int rows, int cols, int dims[]);\n+\n+  public GtkTextAreaPeer (TextArea ta)\n+  {\n+    super (ta);\n+  }\n+\n+  public native void insert (String str, int pos);\n+  public native void replaceRange (String str, int start, int end);\n+\n+  public Dimension getMinimumSize (int rows, int cols)\n+  {\n+    int dims[] = new int[2];\n+\n+    gtkTextGetSize (rows, cols, dims);\n+\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+\n+  public Dimension getPreferredSize (int rows, int cols)\n+  {\n+    int dims[] = new int[2];\n+\n+    gtkTextGetSize (rows, cols, dims);\n+\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+\n+  /* Deprecated */\n+  public Dimension minimumSize (int rows, int cols)\n+  {\n+    return getMinimumSize (rows, cols);\n+  }\n+\n+  public Dimension preferredSize (int rows, int cols)\n+  {\n+    return getPreferredSize (rows, cols);\n+  }\n+\n+  public void replaceText (String str, int start, int end)\n+  {\n+    replaceRange (str, start, end);\n+  }\n+\n+  public void insertText (String str, int pos)\n+  {\n+    insert (str, pos);\n+  }\n+}"}, {"sha": "b9205cc46ca364d00958c3422cad1cb6e7dfdf81", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextComponentPeer.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,79 @@\n+/* GtkTextComponentPeer.java -- Implements TextComponentPeer with GTK\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkTextComponentPeer extends GtkComponentPeer\n+  implements TextComponentPeer\n+{\n+  GtkTextComponentPeer (TextComponent tc)\n+  {\n+    super (tc);\n+\n+    setText (tc.getText ());\n+  }\n+  \n+  public native int getCaretPosition ();\n+  public void setCaretPosition (int pos)\n+  {\n+    set (\"text_position\", pos);\n+  }\n+  public native int getSelectionStart ();\n+  public native int getSelectionEnd ();\n+  public native String getText ();\n+  public native void select (int start, int end);\n+\n+  public void setEditable (boolean state)\n+  {\n+    set (\"editable\", state);\n+  }\n+\n+  public native void setText (String text);\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    super.getArgs (component, args);\n+\n+    TextComponent tc = (TextComponent) component;\n+\n+    args.add (\"text_position\", tc.getCaretPosition ());\n+    args.add (\"editable\", tc.isEditable ());\n+  }\n+}"}, {"sha": "4dc23f8ba55f3a6860c7e4e49e9780496583ba39", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextFieldPeer.java", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,98 @@\n+/* GtkTextFieldPeer.java -- Implements TextFieldPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkTextFieldPeer extends GtkTextComponentPeer\n+  implements TextFieldPeer\n+{\n+\n+//    native void create (ComponentPeer parent, String text);\n+\n+  native void create ();\n+  native void createHooks ();\n+\n+  native void gtkEntryGetSize (int cols, int dims[]);\n+\n+  public GtkTextFieldPeer (TextField tf)\n+  {\n+    super (tf);\n+\n+    if (tf.echoCharIsSet ())\n+      setEchoChar (tf.getEchoChar ());\n+  }\n+\n+  public Dimension getMinimumSize (int cols)\n+  {\n+    int dims[] = new int[2];\n+\n+    gtkEntryGetSize (cols, dims);\n+\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+\n+  public Dimension getPreferredSize (int cols)\n+  {\n+    int dims[] = new int[2];\n+\n+    gtkEntryGetSize (cols, dims);\n+\n+    return (new Dimension (dims[0], dims[1]));\n+  }\n+  \n+  public native void setEchoChar (char c);\n+\n+  /* Deprecated */\n+\n+  public Dimension minimumSize (int cols)\n+  {\n+    return getMinimumSize (cols);\n+  }\n+\n+  public Dimension preferredSize (int cols)\n+  {\n+    return getPreferredSize (cols);\n+  }\n+\n+  public void setEchoCharacter (char c)\n+  {\n+    setEchoChar (c);\n+  }\n+}"}, {"sha": "ffdc910e8a2d25bf4e3eefe6afa962fb0cfe68fd", "filename": "libjava/gnu/java/awt/peer/gtk/GtkToolkit.java", "status": "added", "additions": 329, "deletions": 0, "changes": 329, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkToolkit.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,329 @@\n+/* GtkToolkit.java -- Implements an AWT Toolkit using GTK for peers\n+   Copyright (C) 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+\n+import java.awt.*;\n+import java.awt.datatransfer.*;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.peer.DragSourceContextPeer;\n+import java.awt.im.InputMethodHighlight;\n+import java.awt.image.*;\n+import java.awt.peer.*;\n+import java.net.*;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.MissingResourceException;\n+import java.util.Properties;\n+import gnu.java.awt.image.*;\n+import gnu.classpath.Configuration;\n+\n+/* This class uses a deprecated method java.awt.peer.ComponentPeer.getPeer().\n+   This merits comment.  We are basically calling Sun's bluff on this one.\n+   We think Sun has deprecated it simply to discourage its use as it is \n+   bad programming style.  However, we need to get at a component's peer in\n+   this class.  If getPeer() ever goes away, we can implement a hash table\n+   that will keep up with every window's peer, but for now this is faster. */\n+\n+public class GtkToolkit extends java.awt.Toolkit\n+{\n+  GtkMainThread main;\n+  Hashtable containers = new Hashtable();\n+  static EventQueue q = new EventQueue();\n+  static Clipboard systemClipboard;\n+\n+  static \n+  {\n+    if (Configuration.INIT_LOAD_LIBRARY)\n+      System.loadLibrary(\"gtkpeer\");\n+  }\n+\n+  public GtkToolkit ()\n+  {\n+    main = new GtkMainThread ();\n+    systemClipboard = new GtkClipboard ();\n+    GtkGenericPeer.enableQueue (q);\n+  }\n+  \n+  native public void beep ();\n+  native private void getScreenSizeDimensions (int[] xy);\n+  \n+  public int checkImage (Image image, int width, int height, \n+\t\t\t ImageObserver observer) \n+  {\n+    return ImageObserver.ALLBITS;\n+\n+//      GtkImage i = (GtkImage) image;\n+//      return i.checkImage ();\n+  }\n+\n+  public Image createImage (String filename)\n+  {\n+    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n+    // return new GtkImage (new GdkPixbufDecoder (filename), null);\n+    return null;\n+  }\n+\n+  public Image createImage (URL url)\n+  {\n+    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n+    // return new GtkImage (new GdkPixbufDecoder (url), null);\n+    return null;\n+  }\n+\n+  public Image createImage (ImageProducer producer) \n+  {\n+    return new GtkImage (producer, null);\n+  }\n+\n+  public Image createImage (byte[] imagedata, int imageoffset,\n+\t\t\t    int imagelength) \n+  {\n+    // System.out.println (\"createImage byte[] NOT SUPPORTED\");\n+    return null;\n+  }\n+\n+  public ColorModel getColorModel () \n+  {\n+    return ColorModel.getRGBdefault ();\n+  }\n+\n+  public String[] getFontList () \n+  {\n+    return (new String[] { \"Dialog\", \n+\t\t\t   \"DialogInput\", \n+\t\t\t   \"Monospaced\", \n+\t\t\t   \"Serif\", \n+\t\t\t   \"SansSerif\" });\n+  }\n+\n+  public FontMetrics getFontMetrics (Font font) \n+  {\n+    return new GdkFontMetrics (font);\n+  }\n+\n+  public Image getImage (String filename) \n+  {\n+    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n+    // return new GtkImage (new GdkPixbufDecoder (filename), null);\n+    return null;\n+  }\n+\n+  public Image getImage (URL url) \n+  {\n+    // FIXME - gcj local: GdkPixbufDecoder doesn't work.\n+    // return new GtkImage (new GdkPixbufDecoder (url), null);\n+    return null;\n+  }\n+\n+  public PrintJob getPrintJob (Frame frame, String jobtitle, Properties props) \n+  {\n+    return null;\n+  }\n+\n+  native public int getScreenResolution();\n+\n+  public Dimension getScreenSize () {\n+    int dim[] = new int[2];\n+    getScreenSizeDimensions(dim);\n+    return new Dimension(dim[0], dim[1]);\n+  }\n+\n+  public Clipboard getSystemClipboard() \n+  {\n+    return systemClipboard;\n+  }\n+\n+  public boolean prepareImage (Image image, int width, int height, \n+\t\t\t       ImageObserver observer) \n+  {\n+    return false;\n+  }\n+\n+  native public void sync ();\n+\n+  protected void setComponentState (Component c, GtkComponentPeer cp)\n+  {\n+    /* Make the Component reflect Peer defaults */\n+    if (c.getForeground () == null)\n+      c.setForeground (cp.getForeground ());\n+    if (c.getBackground () == null)\n+      c.setBackground (cp.getBackground ());\n+    //        if (c.getFont () == null)\n+    //  \tc.setFont (cp.getFont ());\n+      \n+    /* Make the Peer reflect the state of the Component */\n+    if (! (c instanceof Window))\n+      {\n+\tcp.setCursor (c.getCursor ());\n+\t\n+\tRectangle bounds = c.getBounds ();\n+\tcp.setBounds (bounds.x, bounds.y, bounds.width, bounds.height);\n+\tcp.setVisible (c.isVisible ());\n+      }\n+  }\n+\n+  protected ButtonPeer createButton (Button b)\n+  {\n+    return new GtkButtonPeer (b);\n+  }\n+\n+  protected CanvasPeer createCanvas (Canvas c) \n+  {\n+    return new GtkCanvasPeer (c);\n+  }\n+\n+  protected CheckboxPeer createCheckbox (Checkbox cb) \n+  {\n+    return new GtkCheckboxPeer (cb);\n+  }\n+\n+  protected CheckboxMenuItemPeer createCheckboxMenuItem (CheckboxMenuItem cmi)\n+  {\n+    return new GtkCheckboxMenuItemPeer (cmi);\n+  }\n+\n+  protected ChoicePeer createChoice (Choice c) \n+  {\n+    return new GtkChoicePeer (c);\n+  }\n+\n+  protected DialogPeer createDialog (Dialog d)\n+  {\n+    return new GtkDialogPeer (d);\n+  }\n+\n+  protected FileDialogPeer createFileDialog (FileDialog fd)\n+  {\n+    return new GtkFileDialogPeer (fd);\n+  }\n+\n+  protected FramePeer createFrame (Frame f)\n+  {\n+    return new GtkFramePeer (f);\n+  }\n+\n+  protected LabelPeer createLabel (Label label) \n+  {\n+    return new GtkLabelPeer (label);\n+  }\n+\n+  protected ListPeer createList (List list)\n+  {\n+    return new GtkListPeer (list);\n+  }\n+\n+  protected MenuPeer createMenu (Menu m) \n+  {\n+    return new GtkMenuPeer (m);\n+  }\n+\n+  protected MenuBarPeer createMenuBar (MenuBar mb) \n+  {\n+    return new GtkMenuBarPeer (mb);\n+  }\n+\n+  protected MenuItemPeer createMenuItem (MenuItem mi) \n+  {\n+    return new GtkMenuItemPeer (mi);\n+  }\n+\n+  protected PanelPeer createPanel (Panel p) \n+  {\n+    return new GtkPanelPeer (p);\n+  }\n+\n+  protected PopupMenuPeer createPopupMenu (PopupMenu target) \n+  {\n+    return new GtkPopupMenuPeer (target);\n+  }\n+\n+  protected ScrollPanePeer createScrollPane (ScrollPane sp) \n+  {\n+    return new GtkScrollPanePeer (sp);\n+  }\n+\n+  protected ScrollbarPeer createScrollbar (Scrollbar sb) \n+  {\n+    return new GtkScrollbarPeer (sb);\n+  }\n+\n+  protected TextAreaPeer createTextArea (TextArea ta) \n+  {\n+    return new GtkTextAreaPeer (ta);\n+  }\n+\n+  protected TextFieldPeer createTextField (TextField tf) \n+  {\n+    return new GtkTextFieldPeer (tf);\n+  }\n+\n+  protected WindowPeer createWindow (Window w)\n+  {\n+    return new GtkWindowPeer (w);\n+  }\n+\n+  protected FontPeer getFontPeer (String name, int style) \n+  {\n+    try {\n+      GtkFontPeer fp = new GtkFontPeer (name, style);\n+      return fp;\n+    } catch (MissingResourceException ex) {\n+      return null;\n+    }\n+  }\n+\n+  protected EventQueue getSystemEventQueueImpl() \n+  {\n+    return q;\n+  }\n+\n+  protected void loadSystemColors (int[] systemColors) \n+  {\n+  }\n+\n+  public DragSourceContextPeer createDragSourceContextPeer(DragGestureEvent e)\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+\n+  public Map mapInputMethodHighlight(InputMethodHighlight highlight)\n+  {\n+    throw new Error(\"not implemented\");\n+  }\n+} // class GtkToolkit"}, {"sha": "7ef667e50ea7851811e0460dc4f24d677ed275b8", "filename": "libjava/gnu/java/awt/peer/gtk/GtkWindowPeer.java", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkWindowPeer.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,111 @@\n+/* GtkWindowPeer.java -- Implements WindowPeer with GTK\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt.peer.gtk;\n+import java.awt.peer.*;\n+import java.awt.*;\n+\n+public class GtkWindowPeer extends GtkContainerPeer\n+  implements WindowPeer\n+{\n+  static protected final int GTK_WINDOW_TOPLEVEL = 0;\n+  static protected final int GTK_WINDOW_DIALOG = 1;\n+  static protected final int GTK_WINDOW_POPUP = 2;\n+\n+  native void create (int type);\n+\n+  void create ()\n+  {\n+    create (GTK_WINDOW_POPUP);\n+  }\n+\n+  native void connectHooks ();\n+\n+  public GtkWindowPeer (Window window)\n+  {\n+    super (window);\n+\n+    Dimension d = window.getSize ();\n+    setBounds (0, 0, d.width, d.height);\n+  }\n+\n+  public void getArgs (Component component, GtkArgList args)\n+  {\n+    args.add (\"visible\", component.isVisible ());\n+    args.add (\"sensitive\", component.isEnabled ());\n+  }\n+  \n+  native public void toBack ();\n+  native public void toFront ();\n+\n+  native public void setBounds (int x, int y, int width, int height);\n+\n+  public void setTitle (String title)\n+  {\n+    set (\"title\", title);\n+  }\n+\n+  native public void setResizable (boolean r);\n+\n+  protected void postConfigureEvent (int x, int y, int width, int height,\n+\t\t\t\t     int top, int left, int bottom, int right)\n+  {\n+    /* \n+       If our borders change (which often happens when we opaque resize),\n+       we need to make sure that a new layout will happen, since Sun\n+       forgets to handle this case.\n+    */\n+    if (insets.top != top\n+\t|| insets.left != left\n+\t|| insets.bottom != bottom\n+\t|| insets.right != right)\n+      {\n+\tawtComponent.invalidate ();\n+      }\n+    \n+    insets.top = top;\n+    insets.left = left;\n+    insets.bottom = bottom;\n+    insets.right = right;\n+\n+    awtComponent.setBounds (x, y, width, height);\n+    awtComponent.validate ();\n+  }\n+  \n+  native public void setVisible (boolean b);\n+}"}, {"sha": "7ecb593f12527772500f1eefda0f0cd00a75ad65", "filename": "libjava/gnu/java/awt/peer/gtk/Test.java", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTest.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTest.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTest.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,299 @@\n+/* Test.java -- Tests the GTK Toolkit\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+import java.util.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.*;\n+import java.awt.datatransfer.*;\n+import gnu.java.awt.image.*;\n+import java.io.*;\n+\n+class Test\n+{\n+  static int xs = 5, ys = 5;\n+\n+  public static void main(String args[])\n+    {\n+      if (args.length == 0)\n+\t{ \n+\t  Properties prop=System.getProperties ();\n+\t  prop.put (\"awt.toolkit\",\"gnu.java.awt.peer.gtk.GtkToolkit\");\n+\t}\n+\n+      final Frame f=new Frame();\n+      f.setTitle (\"Red Hat Classpath\");\n+      \n+//        f.addComponentListener (new ComponentAdapter() {\n+//  \tpublic void componentMoved (ComponentEvent e) {\n+//  \t  System.out.println(\"component moved\");\n+//  \t}\n+//  \tpublic void componentResized (ComponentEvent e) {\n+//  \t  System.out.println(\"component resized\");\n+//  \t}\n+//        });\n+      f.setSize(200,200);\n+\n+      Panel pan=new Panel();\n+\n+      final Label l = new Label (\"Pithy Message:\");\n+      l.setCursor (Cursor.getPredefinedCursor (Cursor.WAIT_CURSOR));\n+      pan.add (l);\n+\n+      TextField tf = new TextField(\"Hello world!\");\n+      pan.add(tf);\n+\n+      final Image img;\n+      img = Toolkit.getDefaultToolkit ().createImage (new XBMDecoder (\"fvwm.xbm\"));\n+\n+\n+      final Canvas ch = new Canvas () { \n+\n+\t  public void update (Graphics g)\n+\t  {\n+\t    System.out.println (\"update called\");\n+\t    super.update (g);\n+\t  }\n+\tpublic void paint (Graphics g) {\n+\t  g.drawString(\"Hello world!\", xs+5, ys+10);\n+\t  g.setColor (Color.blue);\n+\t  g.drawLine (xs,ys,xs+20,ys+20);\n+\n+//  \t  System.out.println (TextArea.SCROLLBARS_BOTH);\n+//  \t  System.out.println (TextArea.SCROLLBARS_HORIZONTAL_ONLY);\n+//  \t  System.out.println (TextArea.SCROLLBARS_VERTICAL_ONLY);\n+\n+//  \t  Font f1 = new Font (\"TimesRoman\", Font.PLAIN, 10);\n+//  \t  System.out.println (f1.getName ());\n+//  \t  System.out.println (f1.getFamily ());\n+\n+//  \t  Font font = new Font (\"Serif\", Font.PLAIN, 18); \n+//  \t  g.setFont (font);\n+//  \t  g.setXORMode (Color.red);\n+\n+\n+//  \t  System.out.println (g.getFontMetrics (font).stringWidth (\"foobar\"));\n+\n+//        System.out.println (g.drawImage (img, 0, 0, this));\n+\t}\n+      };\n+\n+      ch.setSize(60, 60);\n+//        List ch=new List();\n+//        ch.add(\"Ding\");\n+//        ch.add(\"September\");\n+//        ch.add(\"Red\");\n+//        ch.add(\"Quassia\");\n+//        ch.add(\"Pterodactyl\");\n+\n+//        ch.addMouseListener(new MouseAdapter() {\n+//  \tpublic void mousePressed(MouseEvent e) {\n+//  \t  System.out.println(\"mouse pressed ch\");\n+//  \t  System.out.println(\"shift = \" + e.isShiftDown());\n+//  \t  System.out.println(\"meta = \" + e.isMetaDown());\n+//  \t  System.out.println(\"alt = \" + e.isAltDown());\n+//  \t  System.out.println(\"ctrl = \" + e.isControlDown());\n+//  \t  System.out.println(\"x = \" + e.getX());\n+//  \t  System.out.println(\"y = \" + e.getY());\n+//  \t  System.out.println(\"clickcount = \" + e.getClickCount());\n+//  \t  System.out.println(\"when = \" + e.getWhen());\n+//  \t  System.out.println();\n+//  \t}\n+//  \tpublic void mouseReleased(MouseEvent e) {\n+//  \t  System.out.println(\"mouse released ch\");\n+//  \t}\n+//  \tpublic void mouseClicked(MouseEvent e) {\n+//  \t  System.out.println(\"mouse clicked ch\");\n+//  \t}\n+//        });\n+\n+      pan.add(ch);\n+      f.add(pan,\"North\");\n+\n+      final ScrollPane sp=new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);\n+      System.out.println (\"ALWAYS HERE: \" + ScrollPane.SCROLLBARS_ALWAYS);\n+      System.out.println (\"ALWAYS\" + ScrollPane.SCROLLBARS_ALWAYS);\n+      System.out.println (\"NEEDED\" + ScrollPane.SCROLLBARS_AS_NEEDED);\n+      System.out.println (\"NEVER \" + ScrollPane.SCROLLBARS_NEVER);\n+\n+\n+      final Panel p=new Panel();\n+      System.out.println (\"PREFERED: \" + p.getPreferredSize ());\n+      p.add(new Button(\"Stop\"));\n+      System.out.println (\"PREFERED: \" + p.getPreferredSize ());\n+      p.add(new Button(\"evil\"));\n+      System.out.println (\"PREFERED: \" + p.getPreferredSize ());\n+      p.add(new Button(\"hoarders\"));\n+      p.add(new Button(\"use\"));\n+      p.add(new Button(\"GNU\"));\n+      p.add(new Scrollbar(Scrollbar.HORIZONTAL));\n+      System.out.println (\"PREFERED: \" + p.getPreferredSize ());\n+\n+      sp.add(p);\n+      f.add(sp,\"South\");\n+\n+      Panel east_panel = new Panel();\n+      east_panel.setLayout(new GridLayout (0,1));\n+\n+//        CheckboxGroup group = new CheckboxGroup();\n+\n+//        Checkbox cb=new Checkbox(\"one\", group, true);\n+//        east_panel.add(cb);\n+//        cb=new Checkbox(\"two\", group, false);\n+//        east_panel.add(cb);\n+\n+//        cb.addMouseListener(new MouseAdapter() {\n+//  \t  public void mousePressed(MouseEvent e) {\n+//  \t  System.out.println(\"mouse pressed cb\");\n+//  \t  System.out.println(\"shift = \" + e.isShiftDown());\n+//  \t  System.out.println(\"meta = \" + e.isMetaDown());\n+//  \t  System.out.println(\"alt = \" + e.isAltDown());\n+//  \t  System.out.println(\"ctrl = \" + e.isControlDown());\n+//  \t  System.out.println(\"x = \" + e.getX());\n+//  \t  System.out.println(\"y = \" + e.getY());\n+//  \t  System.out.println(\"clickcount = \" + e.getClickCount());\n+//  \t  System.out.println(\"when = \" + e.getWhen());\n+//  \t  System.out.println();\n+//  \t}\n+//  \tpublic void mouseReleased(MouseEvent e) {\n+//  \t  System.out.println(\"mouse released cb\");\n+//  \t}\n+//  \tpublic void mouseClicked(MouseEvent e) {\n+//  \t  System.out.println(\"mouse clicked cb\");\n+//  \t}\n+//  \tpublic void mouseEntered(MouseEvent e) {\n+//  \t  System.out.println(\"mouse entered cb\");\n+//  \t}\n+//  \tpublic void mouseExited(MouseEvent e) {\n+//  \t  System.out.println(\"mouse exited cb\");\n+//  \t}\n+//        });\n+\n+      f.add(east_panel,\"East\");\n+\n+      final Button wb=new Button();\n+      wb.setLabel(\"Destroy Frame on Click\");\n+      wb.addActionListener (new ActionListener () {\n+\tpublic void actionPerformed (ActionEvent e) {\n+\t  ScrollPanePeer peer = (ScrollPanePeer)sp.getPeer ();\n+\t  if (peer != null)\n+\t    {\n+\t      System.out.println (peer.getHScrollbarHeight ());\n+\t      System.out.println (peer.getVScrollbarWidth ());\n+\t    }\n+\n+\t  l.setText (\"Hello World!\");\n+\t  System.out.println (\"PREFERED: \" + p.getPreferredSize ());\n+\n+\t  final Dialog d = new Dialog (f);\n+\t  d.setModal (true);\n+\t  Button b = new Button (\"foobar\");\n+\t  b.addMouseListener (new MouseAdapter () {\n+\t      public void mousePressed (MouseEvent me) {\n+\t\tSystem.out.println (\"I got called\");\n+\t\td.hide ();\n+\n+//  \t\tSystem.out.println (ScrollPane.SCROLLBARS_ALWAYS);\n+//  \t\tSystem.out.println (ScrollPane.SCROLLBARS_AS_NEEDED);\n+//  \t\tSystem.out.println (ScrollPane.SCROLLBARS_NEVER);\n+\t      }\n+\t    });\n+\t  d.add (b);\n+\t  d.pack ();\n+\t  d.show ();\n+\t  System.out.println (\"hello world\");\n+//  \t  System.out.println (\"action listener on wb called\");\n+//  \t  Clipboard clip = Toolkit.getDefaultToolkit ().getSystemClipboard ();\n+//  \t  StringSelection ss = new StringSelection(\"123456789\");\n+//  \t  clip.setContents (ss, ss);\n+//  \t  Transferable t = clip.getContents (this);\n+//  \t  try {\n+//  \t    System.out.println (t.getTransferData (DataFlavor.stringFlavor));\n+//  \t  } catch (Exception ex) {\n+//  \t    ex.printStackTrace ();\n+//  \t  }\n+//  \t  System.exit (0);\n+\t}\n+      });\n+\n+      wb.addMouseListener(new MouseAdapter() {\n+\tpublic void mousePressed(MouseEvent e) {\n+\t  System.out.println(\"mouse pressed wb\");\n+\t  xs++;\n+\t  ys++;\n+\t  ch.repaint ();\n+\t}\n+\tpublic void mouseReleased(MouseEvent e) {\n+\t  System.out.println(\"mouse released wb\");\n+\t}\n+\tpublic void mouseClicked(MouseEvent e) {\n+\t  System.out.println(\"mouse clicked wb\");\n+\t}\n+\tpublic void mouseEntered(MouseEvent e) {\n+\t  System.out.println(\"mouse entered wb\");\n+\t}\n+\tpublic void mouseExited(MouseEvent e) {\n+\t  System.out.println(\"mouse exited wb\");\n+\t}\n+      });\n+\n+      f.add(wb,\"West\");\n+      \n+      f.pack();\n+      f.show();\n+\n+      sp.setScrollPosition (10,0);\n+\n+      Toolkit t = Toolkit.getDefaultToolkit();\n+      /* t.beep(); */\n+      System.out.println(\"screen size: \" + t.getScreenSize());\n+      System.out.println(\"resolution : \" + t.getScreenResolution());\n+//        try {\n+//  \tThread.sleep (5000);\n+//        } catch (InterruptedException e) {}\n+//        f.setSize(500,500);\n+\n+      System.out.println (\"background of canvas: \" + ch.getBackground ());\n+      System.out.println (\"foreground of canvas: \" + ch.getForeground ());\n+\n+      System.out.println(\"done\");\n+    }\n+}\n+\n+\n+"}, {"sha": "48cdce1a1fe6878b0581120c71e97e2d62ab3651", "filename": "libjava/gnu/java/awt/peer/gtk/TestAWT.java", "status": "added", "additions": 571, "deletions": 0, "changes": 571, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTestAWT.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTestAWT.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FTestAWT.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,571 @@\n+/* TestAWT.java -- Tests the AWT like testgtk\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+import java.awt.List;\n+import java.util.*;\n+import java.awt.*;\n+import java.awt.event.*;\n+import java.awt.peer.*;\n+\n+class TestAWT\n+{\n+  public static void main(String args[])\n+  {\n+    if (args.length==0)\n+      {\n+\tProperties prop = System.getProperties ();\n+\tprop.put (\"awt.toolkit\", \"gnu.java.awt.peer.gtk.GtkToolkit\");\n+      }\n+    MainWindow f = new MainWindow();\n+    System.out.println(f.isDisplayable());\n+    f.show();\n+    System.out.println(f.isDisplayable());\n+  }\n+}\n+\n+interface SubWindow\n+{\n+  public void init ();\n+}\n+\n+class PrettyPanel extends Panel\n+{\n+  Insets myInsets;\n+\n+  public PrettyPanel ()\n+  {\n+    myInsets = new Insets (10, 10, 10, 10);\n+  }\n+  public Insets getInsets ()\n+  {\n+    return myInsets;\n+  }\n+}\n+\n+abstract class PrettyFrame extends Frame\n+{\n+  public PrettyFrame ()\n+  {\n+    ((BorderLayout) getLayout ()).setHgap (5);\n+    ((BorderLayout) getLayout ()).setVgap (5);\n+  }\n+\n+//    public Insets getInsets()\n+//    {\n+//      Insets oldInsets = super.getInsets ();\n+//      return new Insets (oldInsets.top+10,\n+//  \t\t       oldInsets.left+10,\n+//  \t\t       oldInsets.bottom+10,\n+//  \t\t       oldInsets.right+10);\n+//    }\n+}\n+\n+abstract class SubFrame extends PrettyFrame implements SubWindow\n+{\n+  boolean initted = false;\n+\n+  public void setVisible (boolean visible)\n+  {\n+    if (!initted && visible)\n+      init();\n+    super.setVisible (visible);\n+  } \n+}\n+\n+class MainWindow extends PrettyFrame implements ActionListener \n+{\n+  Button closeButton;\n+\n+  Hashtable windows;\n+  Vector buttons;\n+\n+  void addSubWindow (String name, SubWindow w)\n+  {\n+    Button b = new Button (name);\n+    b.addActionListener (this);\n+\n+    buttons.addElement (b);\n+    windows.put (b, w);    \n+  }\n+\n+  MainWindow () \n+  {\n+    MenuBar mb = new MenuBar ();\n+    Menu menu = new Menu (\"File\");\n+    Menu submenu = new Menu (\"Testing\");\n+    submenu.add (new CheckboxMenuItem (\"Foobar\"));\n+    menu.add (submenu);\n+    mb.add (menu);\n+\n+    setMenuBar (mb);\n+\n+    add (new Label (\"Classpath v0.0.0\"), \"North\");\n+      \n+    closeButton = new Button (\"Close\");\n+    closeButton.addActionListener (this);\n+    closeButton.setFont (new Font (\"Serif\", Font.BOLD | Font.ITALIC, 18));\n+    add (closeButton, \"South\");\n+\n+    windows = new Hashtable ();\n+    buttons = new Vector ();\n+\n+    addSubWindow (\"Buttons\", new ButtonsWindow ());\n+    addSubWindow (\"Cursors\", new CursorsWindow ());\n+    addSubWindow (\"Dialog\", new DialogWindow (this));\n+    addSubWindow (\"File\", new FileWindow (this));\n+    addSubWindow (\"Labels\", new LabelWindow ());\n+    addSubWindow (\"List\", new ListWindow ());\n+    addSubWindow (\"Radio Buttons\", new RadioWindow ());\n+    addSubWindow (\"TextField\", new TextFieldWindow ());\n+\n+    Panel sp = new Panel();\n+    PrettyPanel p = new PrettyPanel();\n+    p.setLayout (new GridLayout (windows.size(), 1));\n+\n+    for (Enumeration e = buttons.elements (); e.hasMoreElements (); )\n+      {\n+\tp.add ((Button) e.nextElement ());\n+      }\n+\n+    sp.add (p);\n+    add (sp, \"Center\");\n+\n+    setSize (200, 86 + (windows.size ()*22));\n+    setTitle (\"TestAWT\");\n+  }\n+\n+  public void actionPerformed (ActionEvent evt)\n+  {\n+    Button source = (Button) evt.getSource ();\n+      \n+    if (source==closeButton)\n+      {\n+\tSystem.getProperties ().list (System.out);\n+\tdispose();\n+\tSystem.exit (0);\n+      }\n+\n+    Window w = (Window) windows.get (source);\n+    if (w.isVisible ())\n+      w.dispose ();\n+    else \n+      {\n+\tw.setVisible (true);\n+\tw.show();\n+      }\n+  }\n+}\n+\n+class ButtonsWindow extends SubFrame implements ActionListener\n+{\n+  Button b[] = new Button [9];\n+\n+  public void init ()\n+  {\n+    initted = true;\n+    Panel p = new Panel ();\n+    p.setLayout (new GridLayout (0, 3, 5, 5));\n+      \n+    for (int i=0; i<9; i++) \n+      {\n+\tb[i]=new Button (\"button\" + (i+1));\n+\tb[i].addActionListener (this);\n+      }\n+\n+    p.add (b[0]);\n+    p.add (b[6]);\n+    p.add (b[4]);\n+    p.add (b[8]);\n+    p.add (b[1]);\n+    p.add (b[7]);\n+    p.add (b[3]);\n+    p.add (b[5]);\n+    p.add (b[2]);\n+\n+    add (p, \"North\");\n+\n+    Button cb = new Button (\"close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+    add (cb, \"South\");\n+    setTitle (\"Buttons\");\n+  }\n+\n+  public void actionPerformed (ActionEvent evt)\n+  {\n+    Button source = (Button) evt.getSource ();\n+      \n+    for (int i=0; i<9; i++)\n+      {\n+\tif (source == b[i])\n+\t  {\n+\t    int i2=((i+1)==9)?0:(i+1);\n+\t    if (b[i2].isVisible())\n+\t      b[i2].setVisible(false);\n+\t    else \n+\t      b[i2].setVisible(true);\n+\t  }\n+      }\n+  }\n+}\n+\n+\n+class DialogWindow extends Dialog implements SubWindow\n+{\n+  Label text;\n+  boolean initted = false;\n+\n+  public DialogWindow (Frame f)\n+  {\n+    super (f, true);\n+  }\n+\n+  public void setVisible (boolean visible)\n+  {\n+    if (!initted && visible)\n+      init();\n+    super.setVisible (visible);\n+  }\n+\n+  public void init ()\n+  {\n+    text = new Label (\"Dialog Test\");\n+    text.setAlignment (Label.CENTER);\n+\n+    add (text, \"North\");\n+    text.setVisible (false);\n+\n+    Panel p = new PrettyPanel();\n+\n+    Button cb = new Button (\"OK\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) \n+\t{\n+\t  dispose();\n+\t}\n+    });\n+    \n+    p.setLayout (new GridLayout (1, 2));\n+    ((GridLayout) p.getLayout ()).setHgap (5);\n+    ((GridLayout) p.getLayout ()).setVgap (5);\n+    p.add (cb);\n+\n+    Button toggle = new Button (\"Toggle\");\n+    p.add (toggle);\n+\n+    toggle.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) \n+\t{\n+\t  if (text.isVisible ())\n+\t    text.setVisible (false);\n+\t  else \n+\t    text.setVisible (true);\n+\t  doLayout();\n+\t}\n+    });\n+    \n+    add (p, \"South\");\n+    setTitle (\"Dialog\");\n+    setSize (130, 70);\n+  }\n+}\n+\n+class CursorsWindow extends SubFrame implements ItemListener\n+{\n+  Choice cursorChoice;\n+  Canvas cursorCanvas;\n+\n+  public void init ()\n+  {\n+    cursorChoice = new Choice();\n+    cursorChoice.add (\"Default\");\n+    cursorChoice.add (\"Crosshair\");\n+    cursorChoice.add (\"Text\");\n+    cursorChoice.add (\"Wait\");\n+    cursorChoice.add (\"Southwest Resize\");\n+    cursorChoice.add (\"Southeast Resize\");\n+    cursorChoice.add (\"Northwest Resize\");\n+    cursorChoice.add (\"Northeast Resize\");\n+    cursorChoice.add (\"North Resize\");\n+    cursorChoice.add (\"South Resize\");\n+    cursorChoice.add (\"West Resize\");\n+    cursorChoice.add (\"East Resize\");\n+    cursorChoice.add (\"Hand\");\n+    cursorChoice.add (\"Move\");\n+\n+    cursorChoice.addItemListener(this);\n+\n+    add (cursorChoice, \"North\");\n+\n+    cursorCanvas = new Canvas () \n+    { \n+      public void paint (Graphics g) \n+      {\n+\tDimension d = this.getSize();\n+\tg.setColor (Color.white);\n+\tg.fillRect (0, 0, d.width, d.height/2);\n+\tg.setColor (Color.black);\n+\tg.fillRect (0, d.height/2, d.width, d.height/2);\n+\tg.setColor (this.getBackground());\n+\tg.fillRect (d.width/3, d.height/3, d.width/3,\n+\t\t    d.height/3);\n+      }\n+    };\n+\n+    cursorCanvas.setSize (80,80);\n+\n+    add (cursorCanvas, \"Center\");\n+\n+    Button cb = new Button (\"Close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+\n+    add (cb, \"South\");\n+    setTitle (\"Cursors\");\n+    setSize (160, 180);\n+  }\n+\n+  public void itemStateChanged (ItemEvent e)\n+  {\n+    cursorCanvas.setCursor (Cursor.getPredefinedCursor (cursorChoice.getSelectedIndex()));\n+  }\n+}\n+\n+class TextFieldWindow extends SubFrame implements ItemListener\n+{\n+  Checkbox editable, visible, sensitive;\n+  TextField text;\n+\n+  public void init ()\n+  {\n+    initted = true;\n+    text = new TextField (\"hello world\");\n+    add (text, \"North\");\n+\n+    Panel p = new Panel();\n+    p.setLayout (new GridLayout (3, 1));\n+    ((GridLayout) p.getLayout ()).setHgap (5);\n+    ((GridLayout) p.getLayout ()).setVgap (5);\n+\n+    editable = new Checkbox(\"Editable\", true);\n+    p.add (editable);\n+    editable.addItemListener (this);\n+\n+    visible = new Checkbox(\"Visible\", true);\n+    p.add (visible);\n+    visible.addItemListener (this);\n+\n+    sensitive = new Checkbox(\"Sensitive\", true);\n+    p.add (sensitive);\n+    sensitive.addItemListener (this);\n+\n+    add (p, \"Center\");\n+\n+    Button cb = new Button (\"Close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+\n+    add (cb, \"South\");\n+    setTitle (\"TextField\");\n+    setSize (160, 180);\n+  }\n+\n+  public void itemStateChanged (ItemEvent e)\n+  {\n+    boolean on=true;\n+\n+    if (e.getStateChange () == ItemEvent.DESELECTED)\n+      on=false;\n+    if (e.getSource() == editable)\n+      text.setEditable (on);\n+    if (e.getSource() == visible)\n+      if (on)\n+\ttext.setEchoChar ((char) 0);\n+      else\n+\ttext.setEchoChar ('*');\n+    if (e.getSource() == sensitive)\n+      text.setEnabled (on);\n+\t  \n+  }\n+}\n+\n+class FileWindow extends FileDialog implements SubWindow\n+{\n+  boolean initted = false;\n+\n+  public FileWindow (MainWindow mw)\n+  {\n+    super (mw);\n+  }\n+  \n+  public void setVisible (boolean visible)\n+  {\n+    if (!initted && visible)\n+      init();\n+    super.setVisible (visible);\n+  }\n+\n+  public void init() \n+  {\n+    initted = true;\n+  }\n+}\n+\n+class LabelWindow extends SubFrame\n+{\n+  public void init ()\n+  {\n+    initted = true;\n+    \n+    Panel p = new Panel();\n+    p.setLayout (new GridLayout (3, 1));\n+    ((GridLayout) p.getLayout ()).setHgap (5);\n+    ((GridLayout) p.getLayout ()).setVgap (5);\n+\n+    p.add (new Label (\"left justified label\", Label.LEFT));\n+    p.add (new Label (\"center justified label\", Label.CENTER));\n+    p.add (new Label (\"right justified label\", Label.RIGHT));\n+\n+    add (p, \"Center\");\n+\n+    Button cb = new Button (\"Close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+\n+    add (cb, \"South\");\n+    setTitle (\"Labels\");\n+    setSize (160, 180);\n+  }\n+}\n+\n+class ListWindow extends SubFrame\n+{\n+  public void init ()\n+  {\n+    initted = true;\n+\n+    Panel p = new Panel ();\n+    p.setLayout (new GridLayout (3, 1));\n+    \n+    List l = new List (5, true);\n+    for (int i = 0; i < 10; i++)\n+      l.add (\"added item \" + i);\n+\n+    p.add (l);\n+\n+    add (p, \"Center\");\n+\n+    Button cb = new Button (\"Close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+\n+    add (cb, \"South\");\n+    setTitle (\"List\");\n+    setSize (85, 167);\n+  }\n+}    \n+\n+\n+class RadioWindow extends SubFrame\n+{\n+  public void init ()\n+  {\n+    initted = true;\n+\n+    Panel p = new Panel();\n+    p.setLayout (new GridLayout (3, 1));\n+    ((GridLayout) p.getLayout ()).setHgap (5);\n+    ((GridLayout) p.getLayout ()).setVgap (5);\n+\n+    final CheckboxGroup cg = new CheckboxGroup();\n+    final Checkbox[] boxes = new Checkbox[3];\n+    for (int i = 0; i < 3; ++i)\n+      {\n+\tboxes[i] = new Checkbox(\"button\" + i, cg, i == 0);\n+\tp.add(boxes[i]);\n+      }\n+\n+    add (p, \"North\");\n+\n+    p = new Panel();\n+    p.setLayout (new GridLayout (1, 3));\n+    ((GridLayout) p.getLayout ()).setHgap (5);\n+    ((GridLayout) p.getLayout ()).setVgap (5);\n+\n+    for (int i = 0; i < 3; ++i)\n+      {\n+\tfinal int val = i;\n+\tButton tweak = new Button (\"Set \" + i);\n+\ttweak.addActionListener(new ActionListener ()\n+\t  {\n+\t    public void actionPerformed (ActionEvent e)\n+\t    {\n+\t      cg.setSelectedCheckbox(boxes[val]);\n+\t    }\n+\t  });\n+\tp.add(tweak);\n+      }\n+\n+    add (p, \"Center\");\n+\n+    Button cb = new Button (\"Close\");\n+    cb.addActionListener(new ActionListener () {\n+      public void actionPerformed (ActionEvent e) {\n+\tdispose();\n+      }\n+    });\n+\n+    add (cb, \"South\");\n+    setTitle (\"Radio Buttons\");\n+    setSize (85, 167);\n+  }\n+}"}, {"sha": "b8cf4024af6a7ea3b22b66b3eff1216a8c18f40c", "filename": "libjava/gtk.m4", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgtk.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fgtk.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgtk.m4?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,194 @@\n+# Configure paths for GTK+\n+# Owen Taylor     97-11-3\n+\n+dnl AM_PATH_GTK([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND [, MODULES]]]])\n+dnl Test for GTK, and define GTK_CFLAGS and GTK_LIBS\n+dnl\n+AC_DEFUN(AM_PATH_GTK,\n+[dnl \n+dnl Get the cflags and libraries from the gtk-config script\n+dnl\n+AC_ARG_WITH(gtk-prefix,[  --with-gtk-prefix=PFX   Prefix where GTK is installed (optional)],\n+            gtk_config_prefix=\"$withval\", gtk_config_prefix=\"\")\n+AC_ARG_WITH(gtk-exec-prefix,[  --with-gtk-exec-prefix=PFX Exec prefix where GTK is installed (optional)],\n+            gtk_config_exec_prefix=\"$withval\", gtk_config_exec_prefix=\"\")\n+AC_ARG_ENABLE(gtktest, [  --disable-gtktest       Do not try to compile and run a test GTK program],\n+\t\t    , enable_gtktest=yes)\n+\n+  for module in . $4\n+  do\n+      case \"$module\" in\n+         gthread) \n+             gtk_config_args=\"$gtk_config_args gthread\"\n+         ;;\n+      esac\n+  done\n+\n+  if test x$gtk_config_exec_prefix != x ; then\n+     gtk_config_args=\"$gtk_config_args --exec-prefix=$gtk_config_exec_prefix\"\n+     if test x${GTK_CONFIG+set} != xset ; then\n+        GTK_CONFIG=$gtk_config_exec_prefix/bin/gtk-config\n+     fi\n+  fi\n+  if test x$gtk_config_prefix != x ; then\n+     gtk_config_args=\"$gtk_config_args --prefix=$gtk_config_prefix\"\n+     if test x${GTK_CONFIG+set} != xset ; then\n+        GTK_CONFIG=$gtk_config_prefix/bin/gtk-config\n+     fi\n+  fi\n+\n+  AC_PATH_PROG(GTK_CONFIG, gtk-config, no)\n+  min_gtk_version=ifelse([$1], ,0.99.7,$1)\n+  AC_MSG_CHECKING(for GTK - version >= $min_gtk_version)\n+  no_gtk=\"\"\n+  if test \"$GTK_CONFIG\" = \"no\" ; then\n+    no_gtk=yes\n+  else\n+    GTK_CFLAGS=`$GTK_CONFIG $gtk_config_args --cflags`\n+    GTK_LIBS=`$GTK_CONFIG $gtk_config_args --libs`\n+    gtk_config_major_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    gtk_config_minor_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    gtk_config_micro_version=`$GTK_CONFIG $gtk_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_gtktest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n+      LIBS=\"$GTK_LIBS $LIBS\"\n+dnl\n+dnl Now check if the installed GTK is sufficiently new. (Also sanity\n+dnl checks the results of gtk-config to some extent\n+dnl\n+      rm -f conf.gtktest\n+      AC_TRY_RUN([\n+#include <gtk/gtk.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int \n+main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.gtktest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = g_strdup(\"$min_gtk_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_gtk_version\");\n+     exit(1);\n+   }\n+\n+  if ((gtk_major_version != $gtk_config_major_version) ||\n+      (gtk_minor_version != $gtk_config_minor_version) ||\n+      (gtk_micro_version != $gtk_config_micro_version))\n+    {\n+      printf(\"\\n*** 'gtk-config --version' returned %d.%d.%d, but GTK+ (%d.%d.%d)\\n\", \n+             $gtk_config_major_version, $gtk_config_minor_version, $gtk_config_micro_version,\n+             gtk_major_version, gtk_minor_version, gtk_micro_version);\n+      printf (\"*** was found! If gtk-config was correct, then it is best\\n\");\n+      printf (\"*** to remove the old version of GTK+. You may also be able to fix the error\\n\");\n+      printf(\"*** by modifying your LD_LIBRARY_PATH enviroment variable, or by editing\\n\");\n+      printf(\"*** /etc/ld.so.conf. Make sure you have run ldconfig if that is\\n\");\n+      printf(\"*** required on your system.\\n\");\n+      printf(\"*** If gtk-config was wrong, set the environment variable GTK_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of gtk-config, and remove the file config.cache\\n\");\n+      printf(\"*** before re-running configure\\n\");\n+    } \n+#if defined (GTK_MAJOR_VERSION) && defined (GTK_MINOR_VERSION) && defined (GTK_MICRO_VERSION)\n+  else if ((gtk_major_version != GTK_MAJOR_VERSION) ||\n+\t   (gtk_minor_version != GTK_MINOR_VERSION) ||\n+           (gtk_micro_version != GTK_MICRO_VERSION))\n+    {\n+      printf(\"*** GTK+ header files (version %d.%d.%d) do not match\\n\",\n+\t     GTK_MAJOR_VERSION, GTK_MINOR_VERSION, GTK_MICRO_VERSION);\n+      printf(\"*** library (version %d.%d.%d)\\n\",\n+\t     gtk_major_version, gtk_minor_version, gtk_micro_version);\n+    }\n+#endif /* defined (GTK_MAJOR_VERSION) ... */\n+  else\n+    {\n+      if ((gtk_major_version > major) ||\n+        ((gtk_major_version == major) && (gtk_minor_version > minor)) ||\n+        ((gtk_major_version == major) && (gtk_minor_version == minor) && (gtk_micro_version >= micro)))\n+      {\n+        return 0;\n+       }\n+     else\n+      {\n+        printf(\"\\n*** An old version of GTK+ (%d.%d.%d) was found.\\n\",\n+               gtk_major_version, gtk_minor_version, gtk_micro_version);\n+        printf(\"*** You need a version of GTK+ newer than %d.%d.%d. The latest version of\\n\",\n+\t       major, minor, micro);\n+        printf(\"*** GTK+ is always available from ftp://ftp.gtk.org.\\n\");\n+        printf(\"***\\n\");\n+        printf(\"*** If you have already installed a sufficiently new version, this error\\n\");\n+        printf(\"*** probably means that the wrong copy of the gtk-config shell script is\\n\");\n+        printf(\"*** being found. The easiest way to fix this is to remove the old version\\n\");\n+        printf(\"*** of GTK+, but you can also set the GTK_CONFIG environment to point to the\\n\");\n+        printf(\"*** correct copy of gtk-config. (In this case, you will have to\\n\");\n+        printf(\"*** modify your LD_LIBRARY_PATH enviroment variable, or edit /etc/ld.so.conf\\n\");\n+        printf(\"*** so that the correct libraries are found at run-time))\\n\");\n+      }\n+    }\n+  return 1;\n+}\n+],, no_gtk=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_gtk\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$GTK_CONFIG\" = \"no\" ; then\n+       echo \"*** The gtk-config script installed by GTK could not be found\"\n+       echo \"*** If GTK was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the GTK_CONFIG environment variable to the\"\n+       echo \"*** full path to gtk-config.\"\n+     else\n+       if test -f conf.gtktest ; then\n+        :\n+       else\n+          echo \"*** Could not run GTK test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $GTK_CFLAGS\"\n+          LIBS=\"$LIBS $GTK_LIBS\"\n+          AC_TRY_LINK([\n+#include <gtk/gtk.h>\n+#include <stdio.h>\n+],      [ return ((gtk_major_version) || (gtk_minor_version) || (gtk_micro_version)); ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding GTK or finding the wrong\"\n+          echo \"*** version of GTK. If it is not finding GTK, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"\n+          echo \"***\"\n+          echo \"*** If you have a RedHat 5.0 system, you should remove the GTK package that\"\n+          echo \"*** came with the system with the command\"\n+          echo \"***\"\n+          echo \"***    rpm --erase --nodeps gtk gtk-devel\" ],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means GTK was incorrectly installed\"\n+          echo \"*** or that you have moved GTK since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the gtk-config script: $GTK_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     GTK_CFLAGS=\"\"\n+     GTK_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(GTK_CFLAGS)\n+  AC_SUBST(GTK_LIBS)\n+  rm -f conf.gtktest\n+])"}, {"sha": "6eadc2551d3b25dabfdd61cc649e8f2557f990fe", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -85,10 +85,19 @@ GCLIBS = @GCLIBS@\n GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n+GLIB_CFLAGS = @GLIB_CFLAGS@\n+GLIB_CONFIG = @GLIB_CONFIG@\n+GLIB_LIBS = @GLIB_LIBS@\n+GTK_CFLAGS = @GTK_CFLAGS@\n+GTK_CONFIG = @GTK_CONFIG@\n+GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n INCLTDL = @INCLTDL@\n INTERPRETER = @INTERPRETER@\n JC1GCSPEC = @JC1GCSPEC@\n+LIBART_CFLAGS = @LIBART_CFLAGS@\n+LIBART_CONFIG = @LIBART_CONFIG@\n+LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n LIBFFIINCS = @LIBFFIINCS@\n LIBGCJDEBUG = @LIBGCJDEBUG@\n@@ -118,6 +127,7 @@ THREADLDFLAGS = @THREADLDFLAGS@\n THREADLIBS = @THREADLIBS@\n THREADOBJS = @THREADOBJS@\n THREADSPEC = @THREADSPEC@\n+TOOLKIT = @TOOLKIT@\n VERSION = @VERSION@\n ZINCS = @ZINCS@\n ZLIBS = @ZLIBS@\n@@ -129,6 +139,9 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n tool_include_dir = @tool_include_dir@\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n+toolexecmainlibdir = @toolexecmainlibdir@\n \n AUTOMAKE_OPTIONS = foreign\n "}, {"sha": "9f958e79a147daa396684c7aeb6bfae00b1412be", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,4 +1,4 @@\n-/* include/config.h.in.  Generated automatically from configure.in by autoheader 2.13.  */\n+/* include/config.h.in.  Generated automatically from configure.in by autoheader.  */\n \n /* Define if using alloca.c.  */\n #undef C_ALLOCA\n@@ -394,9 +394,6 @@\n /* Define if the compiler is configured for setjmp/longjmp exceptions. */\n #undef SJLJ_EXCEPTIONS\n \n-/* Indicate that linker is not able to 8-byte align static data */\n-#undef JV_LINKER_CANNOT_8BYTE_ALIGN_STATICS\n-\n /* Required define if using POSIX threads */\n #undef _REENTRANT\n "}, {"sha": "225ef5b0edb8e33bcdce79b927dae4436d57a5f5", "filename": "libjava/java/awt/Toolkit.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjava%2Fawt%2FToolkit.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjava%2Fawt%2FToolkit.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FToolkit.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,5 +1,5 @@\n /* Toolkit.java -- AWT Toolkit superclass\n-   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -96,7 +96,7 @@\n {\n   /** The default toolkit name. */\n   private static String default_toolkit_name\n-    = \"gnu.awt.gtk.GtkToolkit\";\n+    = gnu.classpath.Configuration.default_awt_peer_toolkit;\n \n   /**\n    * The toolkit in use.  Once we load it, we don't ever change it"}, {"sha": "dbfe92c71b8ab2a542a02f66d8a2bf738f0589c8", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -1,5 +1,5 @@\n /* Window.java --\n-   Copyright (C) 1999, 2000, 2002 Free Software Foundation\n+   Copyright (C) 1999, 2000, 2002, 2003 Free Software Foundation\n \n This file is part of GNU Classpath.\n \n@@ -141,11 +141,12 @@ public Window(Window owner, GraphicsConfiguration gc)\n         && gc.getDevice().getType() != GraphicsDevice.TYPE_RASTER_SCREEN)\n       throw new IllegalArgumentException (\"gc must be from a screen device\");\n \n-    if (gc == null)\n-      graphicsConfiguration = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-        .getDefaultScreenDevice()\n-        .getDefaultConfiguration();\n-    else\n+    // FIXME: until we implement this, it just causes AWT to crash.\n+//     if (gc == null)\n+//       graphicsConfiguration = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+//         .getDefaultScreenDevice()\n+//         .getDefaultConfiguration();\n+//     else\n       graphicsConfiguration = gc;\n   }\n "}, {"sha": "66c756e0ffdfd0bec9acfe636e78f39202d74b7d", "filename": "libjava/jni/classpath/jcl.c", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjcl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjcl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fjcl.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,134 @@\n+/* jcl.c\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include <stdio.h>\n+#include <jcl.h>\n+#include <malloc.h>\n+\n+static char errstr[4098]; // this way the memory is pre-allocated, so that we do not have to worry if we are out of memory.\n+\n+JNIEXPORT void JNICALL JCL_ThrowException(JNIEnv * env, char * className, char * errMsg) {\n+\tjclass excClass;\n+\tif((*env)->ExceptionOccurred(env)) {\n+\t\t(*env)->ExceptionClear(env);\n+\t}\n+\texcClass = (*env)->FindClass(env, className);\n+\tif(excClass == NULL) {\n+\t\tjclass errExcClass;\n+\t\terrExcClass = (*env)->FindClass(env, \"java/lang/ClassNotFoundException\");\n+\t\tif(errExcClass == NULL) {\n+\t\t\terrExcClass = (*env)->FindClass(env, \"java/lang/InternalError\");\n+\t\t\tif(errExcClass == NULL) {\n+\t\t\t\tsprintf(errstr,\"JCL: Utterly failed to throw exeption %s with message %s.\",className,errMsg);\n+\t\t\t\tfprintf(stderr, errstr);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\tsprintf(errstr,\"JCL: Failed to throw exception %s with message %s: could not find exception class.\", className, errMsg);\n+\t\t(*env)->ThrowNew(env, errExcClass, errstr);\n+\t}\n+\t(*env)->ThrowNew(env, excClass, errMsg);\n+}\n+\n+JNIEXPORT void * JNICALL JCL_malloc(JNIEnv * env, size_t size) {\n+\tvoid * mem = malloc(size);\n+\tif(mem == NULL) {\n+\t\tJCL_ThrowException(env, \"java/lang/OutOfMemoryError\", \"malloc() failed.\");\n+\t\treturn NULL;\n+\t}\n+\treturn mem;\n+}\n+\n+JNIEXPORT void * JNICALL JCL_realloc(JNIEnv *env, void *ptr, size_t size)\n+{\n+  ptr = realloc(ptr, size);\n+  if (ptr == 0)\n+    {\n+      JCL_ThrowException(env, \"java/lang/OutOfMemoryError\",\n+                             \"malloc() failed.\");\n+      return NULL;\n+    }\n+  return(ptr);\n+}\n+\n+JNIEXPORT void JNICALL JCL_free(JNIEnv * env, void * p) {\n+\tif(p != NULL) {\n+\t\tfree(p);\n+\t}\n+}\n+\n+JNIEXPORT char * JNICALL JCL_jstring_to_cstring(JNIEnv * env, jstring s) {\n+\tchar* cstr;\n+\tif(s == NULL) {\n+\t\tJCL_ThrowException(env, \"java/lang/NullPointerException\",\"Null string\");\n+\t\treturn NULL;\n+\t}\n+\tcstr = (char*)(*env)->GetStringUTFChars(env, s, NULL);\n+\tif(cstr == NULL) {\n+\t\tJCL_ThrowException(env, \"java/lang/InternalError\", \"GetStringUTFChars() failed.\");\n+\t\treturn NULL;\n+\t}\n+\treturn cstr;\n+}\n+\n+JNIEXPORT void JNICALL JCL_free_cstring(JNIEnv * env, jstring s, char * cstr) {\n+\t(*env)->ReleaseStringUTFChars(env, s, cstr);\n+}\n+\n+JNIEXPORT jint JNICALL JCL_MonitorEnter(JNIEnv * env, jobject o) {\n+\tjint retval = (*env)->MonitorEnter(env,o);\n+\tif(retval != 0) {\n+\t\tJCL_ThrowException(env, \"java/lang/InternalError\", \"MonitorEnter() failed.\");\n+\t}\n+\treturn retval;\n+}\n+\n+JNIEXPORT jint JNICALL JCL_MonitorExit(JNIEnv * env, jobject o) {\n+\tjint retval = (*env)->MonitorExit(env,o);\n+\tif(retval != 0) {\n+\t\tJCL_ThrowException(env, \"java/lang/InternalError\", \"MonitorExit() failed.\");\n+\t}\n+\treturn retval;\n+}\n+\n+JNIEXPORT jclass JNICALL JCL_FindClass(JNIEnv * env, char * className) {\n+\tjclass retval = (*env)->FindClass(env,className);\n+\tif(retval == NULL) {\n+\t\tJCL_ThrowException(env, \"java/lang/ClassNotFoundException\", className);\n+\t}\n+\treturn retval;\n+}"}, {"sha": "a7d00b47cd3500ef604e608a8dad2efed3d3ea6d", "filename": "libjava/jni/classpath/jcl.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjcl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjcl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fjcl.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,64 @@\n+/* jcl.h\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#ifndef __JCL_H__\n+#define __JCL_H__\n+\n+#include <stddef.h>\n+#include <jni.h>\n+#include <config.h>\n+\n+JNIEXPORT jclass JNICALL JCL_FindClass(JNIEnv * env, char * className);\n+JNIEXPORT void JNICALL JCL_ThrowException(JNIEnv * env, char * className, char * errMsg);\n+JNIEXPORT void * JNICALL JCL_malloc(JNIEnv *env, size_t size);\n+JNIEXPORT void * JNICALL JCL_realloc(JNIEnv *env, void *ptr, size_t size);\n+JNIEXPORT void JNICALL JCL_free(JNIEnv *env, void * p);\n+JNIEXPORT char * JNICALL JCL_jstring_to_cstring(JNIEnv *env, jstring s);\n+JNIEXPORT void JNICALL JCL_free_cstring(JNIEnv *env, jstring s, char * cstr);\n+JNIEXPORT jint JNICALL JCL_MonitorEnter(JNIEnv *env, jobject o);\n+JNIEXPORT jint JNICALL JCL_MonitorExit(JNIEnv *env, jobject o);\n+\n+#define JCL_RETHROW_EXCEPTION(env) if((*(env))->ExceptionOccurred((env)) != NULL) return NULL;\n+\n+/* Simple debug macro */\n+#ifdef DEBUG\n+#define DBG(x) fprintf(stderr, (x));\n+#else\n+#define DBG(x)\n+#endif\n+\n+#endif"}, {"sha": "0c244f285afc04bec002985604542a101504bfea", "filename": "libjava/jni/classpath/jnilink.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjnilink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjnilink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fjnilink.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,117 @@\n+/* JNILINK 1.1: JNI version.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"jnilink.h\"\n+#include <string.h>\n+#include <jcl.h>\n+\n+#include <malloc.h>\n+\n+#define GETCLASS(c) *(jclass*)(c)\n+\n+JNIEXPORT jclass JNICALL\n+LINK_RelinkClass     (JNIEnv * env, linkedClass * c, char * name) {\n+\tjclass found;\n+\tLINK_UnlinkClass(env,*c);\n+\n+\tfound = (*env)->FindClass(env,name);\n+\tif(found == NULL)\n+\t\treturn NULL;\n+\n+\t*c = JCL_malloc(env,sizeof(jclass));\n+\tif(*c == NULL)\n+\t\treturn NULL;\n+\n+\tGETCLASS(*c) = (*env)->NewGlobalRef(env,found);\n+\treturn GETCLASS(*c);\n+}\n+\n+JNIEXPORT jclass JNICALL\n+LINK_RelinkKnownClass(JNIEnv * env, linkedClass * c, jclass newClass) {\n+\tLINK_UnlinkClass(env,*c);\n+\n+\t*c = JCL_malloc(env,sizeof(jclass));\n+\tif(*c == NULL)\n+\t\treturn NULL;\n+\n+\tGETCLASS(*c) = (*env)->NewGlobalRef(env,newClass);\n+\treturn newClass;\n+}\n+\n+JNIEXPORT jmethodID JNICALL\n+LINK_RelinkMethod      (JNIEnv * env, jmethodID * m, linkedClass c,\n+                        char * name, char * sig) {\n+\t*m = (*env)->GetMethodID(env,GETCLASS(c),name,sig);\n+\treturn *m;\n+}\n+\n+JNIEXPORT jmethodID JNICALL\n+LINK_RelinkStaticMethod(JNIEnv * env, jmethodID * m, linkedClass c,\n+                        char * name, char * sig) {\n+\t*m = (*env)->GetStaticMethodID(env,GETCLASS(c),name,sig);\n+\treturn *m;\n+}\n+\n+JNIEXPORT jfieldID JNICALL\n+LINK_RelinkField       (JNIEnv * env, jfieldID * f, linkedClass c,\n+                        char * name, char * sig) {\n+\t*f = (*env)->GetFieldID(env,GETCLASS(c),name,sig);\n+\treturn *f;\n+}\n+\n+JNIEXPORT jfieldID JNICALL\n+LINK_RelinkStaticField (JNIEnv * env, jfieldID * f, linkedClass c,\n+                        char * name, char * sig) {\n+\t*f = (*env)->GetStaticFieldID(env,GETCLASS(c),name,sig);\n+\treturn *f;\n+}\n+\n+\n+/* These are for when the class referencing the symbols is unloaded; it\n+destroys any object references\n+ * the linker might have kept around.\n+ */\n+JNIEXPORT void JNICALL LINK_UnlinkClass       (JNIEnv * env, linkedClass * c) {\n+\tif(*c != NULL) {\n+\t\tif(GETCLASS(*c) != NULL)\n+\t\t\t(*env)->DeleteGlobalRef(env,GETCLASS(*c));\n+\t\tJCL_free(env,*c);\n+\t\t*c = NULL;\n+\t}\n+}\n+"}, {"sha": "448e2b5dfdd21e275f4a65e894111f1c541b8ef0", "filename": "libjava/jni/classpath/jnilink.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjnilink.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fjnilink.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fjnilink.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,86 @@\n+/* JNILINK 1.1: JNI version.\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#ifndef __JNILINK_H__\n+#define __JNILINK_H__\n+\n+#include <jni.h>\n+\n+typedef void* linkedClass;\n+\n+#define LINK_LinkClass(env,c,name)              ((c)==NULL ? LINK_ReallyLinkClass((env),&(c),(name)) : (c))\n+#define LINK_LinkKnownClass(env,c,newClass)     ((c)==NULL ? LINK_ReallyLinkKnownClass((env),&(c),(newClass)) : (c))\n+#define LINK_LinkMethod(env,m,c,name,sig)       ((m)==NULL ? LINK_RelinkMethod((env),&(m),(c),(name),(sig)) : (m))\n+#define LINK_LinkStaticMethod(env,m,c,name,sig) ((m)==NULL ? LINK_RelinkStaticMethod((env),&(m),(c),(name),(sig)) : (m))\n+#define LINK_LinkField(env,f,c,name,sig)        ((m)==NULL ? LINK_RelinkField((env),&(f),(c),(name),(sig)) : (f))\n+#define LINK_LinkStaticField(env,f,c,name,sig)  ((m)==NULL ? LINK_RelinkStaticField((env),&(f),(c),(name),(sig)) : (f))\n+\n+#define LINK_LinkConstructor(env,m,c,sig)       ((m)==NULL ? LINK_RelinkMethod((env),&(m),(c),\"<init>\",(sig)) : (m))\n+\n+JNIEXPORT jclass JNICALL\n+LINK_ReallyLinkClass     (JNIEnv * env, linkedClass * c,\n+                          char * name);\n+JNIEXPORT jclass JNICALL\n+LINK_ReallyLinkKnownClass(JNIEnv * env, linkedClass * c,\n+                          jclass newClass);\n+JNIEXPORT jclass JNICALL\n+LINK_RelinkClass       (JNIEnv * env, linkedClass * c,\n+                        char * name);\n+JNIEXPORT jclass JNICALL\n+LINK_RelinkKnownClass  (JNIEnv * env, linkedClass * c,\n+                        jclass newClass);\n+JNIEXPORT jmethodID JNICALL\n+LINK_RelinkMethod      (JNIEnv * env, jmethodID * m, linkedClass c,\n+                        char * name, char * sig);\n+JNIEXPORT jmethodID JNICALL\n+LINK_RelinkStaticMethod(JNIEnv * env, jmethodID * m, linkedClass c,\n+                        char * name, char * sig);\n+JNIEXPORT jfieldID JNICALL\n+LINK_RelinkField       (JNIEnv * env, jfieldID * f, linkedClass c,\n+                        char * name, char * sig);\n+JNIEXPORT jfieldID JNICALL\n+LINK_RelinkStaticField (JNIEnv * env, jfieldID * f, linkedClass c,\n+                        char * name, char * sig);\n+\n+/* These are for when the class referencing the symbols is unloaded; it\n+destroys any object references\n+ * the linker might have kept around.\n+ */\n+JNIEXPORT void JNICALL LINK_UnlinkClass       (JNIEnv * env, linkedClass * c);\n+\n+#endif"}, {"sha": "746686edd9748112438ea916662c3d6592828ee9", "filename": "libjava/jni/classpath/native_state.c", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fnative_state.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fnative_state.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fnative_state.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,247 @@\n+/* Magical NSA API -- Associate a C ptr with an instance of an object\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include <stdlib.h>\n+#include <jni.h>\n+#include \"native_state.h\"\n+\n+#define DEFAULT_TABLE_SIZE 97\n+\n+struct state_table *\n+init_state_table_with_size (JNIEnv *env, jclass clazz, jint size)\n+{\n+  struct state_table *table;\n+  jfieldID hash;\n+  jclass clazz_g;\n+\n+  hash = (*env)->GetFieldID (env, clazz, \"native_state\", \"I\");\n+  if (hash == NULL)\n+    return NULL;\n+\n+  clazz_g = (*env)->NewGlobalRef (env, clazz);\n+  if (clazz_g == NULL)\n+    return NULL;\n+\n+  table = (struct state_table *) malloc (sizeof (struct state_table));\n+  table->size = size;\n+  table->head = (struct state_node **) calloc (sizeof (struct state_node *),\n+\t\t\t\t\t       table->size);\n+  table->hash = hash;\n+  table->clazz = clazz_g; \n+\n+  return table;\n+}\n+\n+struct state_table *\n+init_state_table (JNIEnv *env, jclass clazz)\n+{\n+  return init_state_table_with_size (env, clazz, DEFAULT_TABLE_SIZE);\n+}\n+\n+static void *\n+remove_node (struct state_node **head, jint obj_id)\n+{\n+  struct state_node *back_ptr = NULL;\n+  struct state_node *node = *head;\n+\n+  while (node != NULL)\n+    {\n+      if (node->key == obj_id)\n+\t{\n+\t  void *return_value;\n+\t  if (back_ptr == NULL)\n+\t    *head = node->next;\n+\t  else\n+\t    back_ptr->next = node->next;\n+\t  return_value = node->c_state;\n+\t  free (node);\n+\t  return return_value;\n+\t}\n+      back_ptr = node;\n+      node = node->next;\n+    }\n+\n+  return NULL;\n+}\n+\t    \n+static void *\n+get_node (struct state_node **head, jint obj_id)\n+{\n+  struct state_node *back_ptr = NULL;\n+  struct state_node *node = *head;\n+\n+  while (node != NULL)\n+    {\n+      if (node->key == obj_id)\n+\t{\n+\t  /* Move the node we found to the front of the list.  */\n+\t  if (back_ptr != NULL)\n+\t    {\n+\t      back_ptr->next = node->next;\n+\t      node->next = *head;\n+\t      *head = node;\n+\t    }\n+\n+\t  /* Return the match.  */\n+\t  return node->c_state;\n+\t}\n+  \n+      back_ptr = node;\n+      node = node->next;\n+    }\n+\n+  return NULL;\n+}\n+\n+static void \n+add_node (struct state_node **head, jint obj_id, void *state)\n+{\n+  struct state_node *node = *head;\n+  struct state_node *back_ptr = NULL;\n+\n+  struct state_node *new_node;\n+\n+  if (node != NULL)\n+    {\n+      while (node->next != NULL && obj_id != node->key) \n+\t{\n+\t  back_ptr = node;\n+\t  node = node->next;\n+\t}\n+\n+      if (node->key == obj_id)\n+\t{\n+\t  /* If we're updating a node, move it to the front of the\n+\t     list.  */\n+\t  if (back_ptr != NULL)\n+\t    {\n+\t      back_ptr->next = node->next;\n+\t      node->next = *head;\n+\t    }\n+\t  node->c_state = state;\n+\t  return;\n+\t}\n+    }\n+\n+  new_node = (struct state_node *) malloc (sizeof (struct state_node));\n+  new_node->key = obj_id;\n+  new_node->c_state = state;\n+  new_node->next = *head;\n+  *head = new_node;\n+}\n+\n+void \n+set_state_oid (JNIEnv *env, jobject lock, struct state_table *table, \n+\t       jint obj_id, void *state)\n+{\n+  jint hash;\n+  \n+  hash = obj_id % table->size;\n+\n+  (*env)->MonitorEnter (env, lock);\n+  add_node (&table->head[hash], obj_id, state);\n+  (*env)->MonitorExit (env, lock);\n+}\n+\n+void *\n+get_state_oid (JNIEnv *env, jobject lock, struct state_table *table,\n+\t       jint obj_id)\n+{\n+  jint hash;\n+  void *return_value;\n+  \n+  hash = obj_id % table->size;\n+\n+  (*env)->MonitorEnter (env, lock);\n+  return_value = get_node (&table->head[hash], obj_id);\n+  (*env)->MonitorExit (env, lock);\n+\n+  return return_value;\n+}\n+\n+void *\n+remove_state_oid (JNIEnv *env, jobject lock, struct state_table *table,\n+\t\t  jint obj_id)\n+{\n+  jint hash;\n+  void *return_value;\n+  \n+  hash = obj_id % table->size;\n+\n+  (*env)->MonitorEnter (env, lock);\n+  return_value = remove_node (&table->head[hash], obj_id);\n+  (*env)->MonitorExit (env, lock);\n+\n+  return return_value;\n+}\n+\n+int\n+set_state (JNIEnv *env, jobject obj, struct state_table *table, void *state)\n+{\n+  jint obj_id;\n+  obj_id = (*env)->GetIntField (env, obj, table->hash);\n+\n+  if ((*env)->ExceptionOccurred (env) != NULL)\n+    return -1;\n+\n+  set_state_oid (env, table->clazz, table, obj_id, state);\n+  return 0;\n+}\n+\n+void *\n+get_state (JNIEnv *env, jobject obj, struct state_table *table)\n+{\n+  jint obj_id;\n+  obj_id = (*env)->GetIntField (env, obj, table->hash);\n+\n+  if ((*env)->ExceptionOccurred (env) != NULL)\n+    return NULL;\n+\n+  return get_state_oid (env, table->clazz, table, obj_id);\n+}\n+\n+void *\n+remove_state_slot (JNIEnv *env, jobject obj, struct state_table *table)\n+{\n+  jint obj_id;\n+  obj_id = (*env)->GetIntField (env, obj, table->hash);\n+\n+  if ((*env)->ExceptionOccurred (env) != NULL)\n+    return NULL;\n+\n+  return remove_state_oid (env, table->clazz, table, obj_id);\n+}"}, {"sha": "25ef6b546f124b19dc674260572f82a3443e8fa5", "filename": "libjava/jni/classpath/native_state.h", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fnative_state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fnative_state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fnative_state.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,71 @@\n+/* Magical NSA API -- Associate a C ptr with an instance of an object\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#ifndef JCL_NATIVE_STATE\n+#define JCL_NATIVE_STATE\n+\n+#include <jni.h>\n+\n+struct state_table\n+{\n+  jint size;\t\t\t/* number of slots, should be prime */\n+  jfieldID hash;\t\t/* field containing System.identityHashCode(this) */\n+  jclass clazz;\t\t\t/* lock aquired for reading/writing nodes */\n+  struct state_node **head;\n+};\n+\n+struct state_node\n+{\n+  jint key;\n+  void *c_state;\n+  struct state_node *next;\n+};\n+\n+struct state_table * init_state_table_with_size (JNIEnv *, jclass, jint);\n+struct state_table * init_state_table (JNIEnv *, jclass);\n+\n+/* lowlevel api */\n+void set_state_oid (JNIEnv *, jobject, struct state_table *, jint, void *);\n+void * get_state_oid (JNIEnv *, jobject, struct state_table *, jint);\n+void * remove_state_oid (JNIEnv *, jobject, struct state_table *, jint);\n+\n+/* highlevel api */\n+int set_state (JNIEnv *, jobject, struct state_table *, void *);\n+void * get_state (JNIEnv *, jobject, struct state_table *);\n+void * remove_state_slot (JNIEnv *, jobject, struct state_table *);\n+\n+#endif"}, {"sha": "c7396e2a9a7046f2dd1f44f882111d947440bbf7", "filename": "libjava/jni/classpath/primlib.c", "status": "added", "additions": 463, "deletions": 0, "changes": 463, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fprimlib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fprimlib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fprimlib.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,463 @@\n+/* primlib.c\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include <jnilink.h>\n+#include <primlib.h>\n+#include <jcl.h>\n+\n+static jclass nativeWrapClass[PRIMLIB_NUMTYPES] = {NULL,NULL,NULL, NULL,NULL,NULL,\n+\t\t\t\t\t\tNULL,NULL,NULL, NULL,NULL,NULL};\n+\n+static jclass nativeTypeClass[PRIMLIB_NUMTYPES] = {NULL,NULL,NULL, NULL,NULL,NULL,\n+\t\t\t\t\t\tNULL,NULL,NULL, NULL,NULL,NULL};\n+\n+static jmethodID nativeWrapClassConstructor[PRIMLIB_NUMTYPES] = {NULL,NULL,NULL, NULL,NULL,NULL,\n+\t\t\t\t\t\tNULL,NULL,NULL, NULL,NULL,NULL};\n+\n+static jmethodID nativeWrapClassAccessor[PRIMLIB_NUMTYPES] = {NULL,NULL,NULL, NULL,NULL,NULL,\n+\t\t\t\t\t\tNULL,NULL,NULL, NULL,NULL,NULL};\n+\n+static char * nativeWrapClassName[PRIMLIB_NUMTYPES] = {\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\t\"java/lang/Boolean\",\n+\t\t\t\t\t\t\t\"java/lang/Byte\",\n+\t\t\t\t\t\t\t\"java/lang/Character\",\n+\t\t\t\t\t\t\t\"java/lang/Short\",\n+\t\t\t\t\t\t\t\"java/lang/Integer\",\n+\t\t\t\t\t\t\t\"java/lang/Long\",\n+\t\t\t\t\t\t\t\"java/lang/Float\",\n+\t\t\t\t\t\t\t\"java/lang/Double\",\n+\t\t\t\t\t\t\t\"java/lang/Void\",\n+\t\t\t\t\t\t\tNULL\n+\t\t\t\t\t\t\t};\n+\n+static char * nativeWrapClassConstructorSig[PRIMLIB_NUMTYPES] = {\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\t\"(Z)V\",\n+\t\t\t\t\t\t\t\"(B)V\",\n+\t\t\t\t\t\t\t\"(C)V\",\n+\t\t\t\t\t\t\t\"(S)V\",\n+\t\t\t\t\t\t\t\"(I)V\",\n+\t\t\t\t\t\t\t\"(J)V\",\n+\t\t\t\t\t\t\t\"(F)V\",\n+\t\t\t\t\t\t\t\"(D)V\",\n+\t\t\t\t\t\t\t\"()V\",\n+\t\t\t\t\t\t\tNULL\n+\t\t\t\t\t\t\t};\n+\n+static char * nativeWrapClassAccessorName[PRIMLIB_NUMTYPES] = {\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\t\"booleanValue\",\n+\t\t\t\t\t\t\t\"byteValue\",\n+\t\t\t\t\t\t\t\"charValue\",\n+\t\t\t\t\t\t\t\"shortValue\",\n+\t\t\t\t\t\t\t\"intValue\",\n+\t\t\t\t\t\t\t\"longValue\",\n+\t\t\t\t\t\t\t\"floatValue\",\n+\t\t\t\t\t\t\t\"doubleValue\",\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL\n+};\n+\n+static char * nativeWrapClassAccessorSig[PRIMLIB_NUMTYPES] = {\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\t\"()Z\",\n+\t\t\t\t\t\t\t\"()B\",\n+\t\t\t\t\t\t\t\"()C\",\n+\t\t\t\t\t\t\t\"()S\",\n+\t\t\t\t\t\t\t\"()I\",\n+\t\t\t\t\t\t\t\"()J\",\n+\t\t\t\t\t\t\t\"()F\",\n+\t\t\t\t\t\t\t\"()D\",\n+\t\t\t\t\t\t\tNULL,\n+\t\t\t\t\t\t\tNULL\n+};\n+\n+\n+JNIEXPORT jclass JNICALL PRIMLIB_GetNativeWrapClass(JNIEnv * env, int reflectType) {\n+\treturn LINK_LinkClass(env,nativeWrapClass[reflectType],nativeWrapClassName[reflectType]);\n+}\n+\n+static jclass ActuallyGetNativeTypeClass(JNIEnv * env, int reflectType) {\n+\tjclass wrapClass;\n+\tjfieldID typeField;\n+\n+\twrapClass = PRIMLIB_GetNativeWrapClass(env, reflectType);\n+\tif(wrapClass == NULL)\n+\t\treturn NULL;\n+\ttypeField = (*env)->GetStaticFieldID(env, wrapClass, \"TYPE\", \"Ljava/lang/Class\");\n+\tif(typeField == NULL)\n+\t\treturn NULL;\n+\treturn (*env)->GetStaticObjectField(env, wrapClass, typeField);\n+}\n+\n+JNIEXPORT jclass JNICALL PRIMLIB_GetNativeTypeClass(JNIEnv * env, int reflectType) {\n+\treturn LINK_LinkKnownClass(env, nativeTypeClass[reflectType], ActuallyGetNativeTypeClass(env,reflectType));\n+}\n+\n+JNIEXPORT jmethodID JNICALL PRIMLIB_GetNativeWrapClassConstructor(JNIEnv * env, int reflectType) {\n+\tPRIMLIB_GetNativeWrapClass(env,reflectType);\n+\treturn LINK_LinkConstructor(env, nativeWrapClassConstructor[reflectType], nativeWrapClass[reflectType], nativeWrapClassConstructorSig[reflectType]);\n+}\n+\n+JNIEXPORT jmethodID JNICALL PRIMLIB_GetNativeWrapClassAccessor(JNIEnv * env, int reflectType) {\n+\tPRIMLIB_GetNativeWrapClass(env,reflectType);\n+\treturn LINK_LinkMethod(env, nativeWrapClassAccessor[reflectType], nativeWrapClass[reflectType], nativeWrapClassAccessorName[reflectType], nativeWrapClassAccessorSig[reflectType]);\n+}\n+\n+\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapBoolean(JNIEnv * env, jboolean b) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_BOOLEAN);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BOOLEAN), construct, b);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapByte   (JNIEnv * env, jbyte b) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_BYTE);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE), construct, b); \n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapChar   (JNIEnv * env, jchar c) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_CHAR);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR), construct, c);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapShort  (JNIEnv * env, jshort s) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_SHORT);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT), construct, s);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapInt    (JNIEnv * env, jint i) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_INT);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT), construct, i);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapLong   (JNIEnv * env, jlong l) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_LONG);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_LONG), construct, l);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapFloat  (JNIEnv * env, jfloat f) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_FLOAT);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_FLOAT), construct, f);\n+}\n+\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapDouble (JNIEnv * env, jdouble d) {\n+\tjmethodID construct = PRIMLIB_GetNativeWrapClassConstructor(env, PRIMLIB_DOUBLE);\n+\tJCL_RETHROW_EXCEPTION(env);\n+\treturn (*env)->NewObject(env, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_DOUBLE), construct, d);\n+}\n+\n+\n+JNIEXPORT jboolean JNICALL PRIMLIB_UnwrapBoolean(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BOOLEAN))) {\n+\t\treturn PRIMLIB_GetBooleanObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn JNI_FALSE;\n+\t}\n+}\n+\n+JNIEXPORT jbyte JNICALL PRIMLIB_UnwrapByte(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jshort JNICALL PRIMLIB_UnwrapShort(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT))) {\n+\t\treturn PRIMLIB_GetShortObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn (jshort)PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jchar JNICALL PRIMLIB_UnwrapChar(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR))) {\n+\t\treturn PRIMLIB_GetCharObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jint JNICALL PRIMLIB_UnwrapInt(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT))) {\n+\t\treturn PRIMLIB_GetIntObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT))) {\n+\t\treturn (jint)PRIMLIB_GetShortObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR))) {\n+\t\treturn (jint)PRIMLIB_GetCharObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn (jint)PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jlong JNICALL PRIMLIB_UnwrapLong(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_LONG))) {\n+\t\treturn PRIMLIB_GetLongObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT))) {\n+\t\treturn (jlong)PRIMLIB_GetIntObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT))) {\n+\t\treturn (jlong)PRIMLIB_GetShortObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR))) {\n+\t\treturn (jlong)PRIMLIB_GetCharObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn (jlong)PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jfloat JNICALL PRIMLIB_UnwrapFloat(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_FLOAT))) {\n+\t\treturn PRIMLIB_GetFloatObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_LONG))) {\n+\t\treturn (jfloat)PRIMLIB_GetLongObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT))) {\n+\t\treturn (jfloat)PRIMLIB_GetIntObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT))) {\n+\t\treturn (jfloat)PRIMLIB_GetShortObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR))) {\n+\t\treturn (jfloat)PRIMLIB_GetCharObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn (jfloat)PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jdouble JNICALL PRIMLIB_UnwrapDouble(JNIEnv * env, jobject obj) {\n+\tif((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_DOUBLE))) {\n+\t\treturn PRIMLIB_GetDoubleObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_FLOAT))) {\n+\t\treturn (jdouble)PRIMLIB_GetFloatObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_LONG))) {\n+\t\treturn (jdouble)PRIMLIB_GetLongObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT))) {\n+\t\treturn (jdouble)PRIMLIB_GetIntObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT))) {\n+\t\treturn (jdouble)PRIMLIB_GetShortObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR))) {\n+\t\treturn (jdouble)PRIMLIB_GetCharObjectValue(env, obj);\n+\t} else if((*env)->IsInstanceOf(env, obj, PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE))) {\n+\t\treturn (jdouble)PRIMLIB_GetByteObjectValue(env, obj);\n+\t} else {\n+\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct type.\");\n+\t\treturn 0;\n+\t}\n+}\n+\n+JNIEXPORT jint JNICALL PRIMLIB_GetReflectiveWrapperType(JNIEnv * env, jobject obj) {\n+\tjclass typeClass;\n+\tif(obj == NULL) {\n+\t\treturn PRIMLIB_NULL;\n+\t}\n+\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_DOUBLE);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_DOUBLE;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_FLOAT);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_FLOAT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_LONG);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_LONG;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_INT);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_INT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_CHAR);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_CHAR;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_SHORT);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_SHORT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BYTE);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_BYTE;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_BOOLEAN);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_BOOLEAN;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeWrapClass(env, PRIMLIB_VOID);\n+\tif((*env)->IsInstanceOf(env, obj, typeClass)) {\n+\t\treturn PRIMLIB_VOID;\n+\t}\n+\treturn PRIMLIB_OBJECT;\n+}\n+\n+JNIEXPORT jint JNICALL PRIMLIB_GetReflectiveType(JNIEnv * env, jclass returnType) {\n+\tjclass typeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_DOUBLE);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_DOUBLE;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_FLOAT);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_FLOAT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_LONG);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_LONG;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_INT);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_INT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_CHAR);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_CHAR;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_SHORT);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_SHORT;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_BYTE);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_BYTE;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_BOOLEAN);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_BOOLEAN;\n+\t}\n+\ttypeClass = PRIMLIB_GetNativeTypeClass(env, PRIMLIB_VOID);\n+\tif((*env)->IsAssignableFrom(env, returnType, typeClass)) {\n+\t\treturn PRIMLIB_VOID;\n+\t}\n+\treturn PRIMLIB_OBJECT;\n+}\n+\n+\n+JNIEXPORT jboolean JNICALL PRIMLIB_GetBooleanObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_BOOLEAN);\n+\treturn (*env)->CallBooleanMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jbyte JNICALL PRIMLIB_GetByteObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_BYTE);\n+\treturn (*env)->CallByteMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jshort JNICALL PRIMLIB_GetShortObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_SHORT);\n+\treturn (*env)->CallShortMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jchar JNICALL PRIMLIB_GetCharObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_CHAR);\n+\treturn (*env)->CallCharMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jint JNICALL PRIMLIB_GetIntObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_INT);\n+\treturn (*env)->CallIntMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jlong JNICALL PRIMLIB_GetLongObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_LONG);\n+\treturn (*env)->CallLongMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jfloat JNICALL PRIMLIB_GetFloatObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_FLOAT);\n+\treturn (*env)->CallFloatMethod(env, obj, acc);\n+}\n+\n+JNIEXPORT jdouble JNICALL PRIMLIB_GetDoubleObjectValue(JNIEnv * env, jobject obj) {\n+\tjmethodID acc = PRIMLIB_GetNativeWrapClassAccessor(env, PRIMLIB_DOUBLE);\n+\treturn (*env)->CallDoubleMethod(env, obj, acc);\n+}\n+\n+\n+\n+JNIEXPORT jvalue JNICALL PRIMLIB_UnwrapJValue(JNIEnv* env, jobject obj, jclass classType) {\n+\tjvalue retval;\n+\tjint objType = PRIMLIB_GetReflectiveType(env, classType);\n+\tif(objType == PRIMLIB_BOOLEAN) {\n+\t\tretval.z = PRIMLIB_UnwrapBoolean(env,obj);\n+\t} else if(objType == PRIMLIB_BYTE) {\n+\t\tretval.b = PRIMLIB_UnwrapByte(env,obj);\n+\t} else if(objType == PRIMLIB_CHAR) {\n+\t\tretval.c = PRIMLIB_UnwrapChar(env,obj);\n+\t} else if(objType == PRIMLIB_SHORT) {\n+\t\tretval.s = PRIMLIB_UnwrapShort(env,obj);\n+\t} else if(objType == PRIMLIB_INT) {\n+\t\tretval.i = PRIMLIB_UnwrapInt(env,obj);\n+\t} else if(objType == PRIMLIB_LONG) {\n+\t\tretval.j = PRIMLIB_UnwrapLong(env,obj);\n+\t} else if(objType == PRIMLIB_FLOAT) {\n+\t\tretval.f = PRIMLIB_UnwrapFloat(env,obj);\n+\t} else if(objType == PRIMLIB_DOUBLE) {\n+\t\tretval.d = PRIMLIB_UnwrapDouble(env,obj);\n+\t} else {\n+\t\tif(obj != NULL && !(*env)->IsInstanceOf(env, obj, classType)) {\n+\t\t\tJCL_ThrowException(env, \"java/lang/IllegalArgumentException\", \"Argument not of correct object type.\");\n+\t\t\treturn retval;\n+\t\t}\n+\t\tretval.l = obj;\n+\t}\n+\treturn retval;\n+}\n+"}, {"sha": "12f3bae9185adc7c7b041460291583fa2978c5d0", "filename": "libjava/jni/classpath/primlib.h", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fprimlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fclasspath%2Fprimlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fclasspath%2Fprimlib.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,102 @@\n+/* primlib.h\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#ifndef __PRIMLIB_H__\n+#define __PRIMLIB_H__\n+\n+#include <jni.h>\n+\n+#define PRIMLIB_UNKNOWN  0\n+#define PRIMLIB_OBJECT   1\n+#define PRIMLIB_BOOLEAN  2\n+#define PRIMLIB_BYTE     3\n+#define PRIMLIB_CHAR     4\n+#define PRIMLIB_SHORT    5\n+#define PRIMLIB_INT      6\n+#define PRIMLIB_LONG     7\n+#define PRIMLIB_FLOAT    8\n+#define PRIMLIB_DOUBLE   9\n+#define PRIMLIB_VOID     10\n+#define PRIMLIB_NULL     11\n+#define PRIMLIB_NUMTYPES 12\n+\n+/* Low-level primitive class accessor functions. */\n+JNIEXPORT jclass JNICALL PRIMLIB_GetNativeWrapClass(JNIEnv * env, int reflectType);\n+JNIEXPORT jclass JNICALL PRIMLIB_GetNativeTypeClass(JNIEnv * env, int reflectType);\n+JNIEXPORT jmethodID JNICALL PRIMLIB_GetNativeWrapClassConstructor(JNIEnv * env, int reflectType);\n+JNIEXPORT jmethodID JNICALL PRIMLIB_GetNativeWrapClassAccessor(JNIEnv * env, int reflectType);\n+\n+/* Type discovery functions: WrapperType finds out j.l.Boolean/Byte/etc., and\n+   Type finds out j.l.Boolean.TYPE, etc.\n+*/\n+JNIEXPORT jint JNICALL PRIMLIB_GetReflectiveWrapperType(JNIEnv * env, jobject obj);\n+JNIEXPORT jint JNICALL PRIMLIB_GetReflectiveType(JNIEnv * env, jclass returnType);\n+\n+/* Constructor functions. */\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapBoolean(JNIEnv * env, jboolean b);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapByte   (JNIEnv * env, jbyte b);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapChar   (JNIEnv * env, jchar c);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapShort  (JNIEnv * env, jshort s);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapInt    (JNIEnv * env, jint i);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapLong   (JNIEnv * env, jlong l);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapFloat  (JNIEnv * env, jfloat f);\n+JNIEXPORT jobject JNICALL PRIMLIB_WrapDouble (JNIEnv * env, jdouble d);\n+\n+/* Widening conversion unwrapping functions. */\n+JNIEXPORT jboolean JNICALL PRIMLIB_UnwrapBoolean(JNIEnv * env, jobject obj);\n+JNIEXPORT jbyte    JNICALL PRIMLIB_UnwrapByte   (JNIEnv * env, jobject obj);\n+JNIEXPORT jshort   JNICALL PRIMLIB_UnwrapShort  (JNIEnv * env, jobject obj);\n+JNIEXPORT jchar    JNICALL PRIMLIB_UnwrapChar   (JNIEnv * env, jobject obj);\n+JNIEXPORT jint     JNICALL PRIMLIB_UnwrapInt    (JNIEnv * env, jobject obj);\n+JNIEXPORT jlong    JNICALL PRIMLIB_UnwrapLong   (JNIEnv * env, jobject obj);\n+JNIEXPORT jfloat   JNICALL PRIMLIB_UnwrapFloat  (JNIEnv * env, jobject obj);\n+JNIEXPORT jdouble  JNICALL PRIMLIB_UnwrapDouble (JNIEnv * env, jobject obj);\n+\n+/* Simple unwrapping functions. Objects *must* be of correct type. */\n+JNIEXPORT jboolean JNICALL PRIMLIB_GetBooleanObjectValue(JNIEnv * env, jobject obj);\n+JNIEXPORT jbyte    JNICALL PRIMLIB_GetByteObjectValue   (JNIEnv * env, jobject obj);\n+JNIEXPORT jshort   JNICALL PRIMLIB_GetShortObjectValue  (JNIEnv * env, jobject obj);\n+JNIEXPORT jchar    JNICALL PRIMLIB_GetCharObjectValue   (JNIEnv * env, jobject obj);\n+JNIEXPORT jint     JNICALL PRIMLIB_GetIntObjectValue    (JNIEnv * env, jobject obj);\n+JNIEXPORT jlong    JNICALL PRIMLIB_GetLongObjectValue   (JNIEnv * env, jobject obj);\n+JNIEXPORT jfloat   JNICALL PRIMLIB_GetFloatObjectValue  (JNIEnv * env, jobject obj);\n+JNIEXPORT jdouble  JNICALL PRIMLIB_GetDoubleObjectValue (JNIEnv * env, jobject obj);\n+\n+/* jvalue conversion: Unwrap obj to the type of classType, with widening conversion. */\n+JNIEXPORT jvalue JNICALL PRIMLIB_UnwrapJValue(JNIEnv* env, jobject obj, jclass classType);\n+\n+#endif"}, {"sha": "03c1e4925d758c162d8e1e69b7dc977498488c2e", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontMetrics.c", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkFontMetrics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkFontMetrics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkFontMetrics.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,102 @@\n+/* gdkfontmetrics.c\n+   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GdkFontMetrics.h\"\n+#include <gdk/gdkx.h>\n+\n+#define ASCENT      0\n+#define MAX_ASCENT  1\n+#define DESCENT     2\n+#define MAX_DESCENT 3\n+#define MAX_ADVANCE 4\n+#define NUM_METRICS 5\n+\n+JNIEXPORT jintArray JNICALL Java_gnu_java_awt_peer_gtk_GdkFontMetrics_initState\n+  (JNIEnv *env, jobject obj, jstring fname, jint size)\n+{\n+  jintArray array;\n+  jint *metrics;\n+  const char *cfname;\n+  char *xlfd;\n+  GdkFont *font;\n+  XFontStruct *xfont;\n+\n+  cfname = (*env)->GetStringUTFChars (env, fname, NULL);\n+  xlfd = g_strdup_printf (cfname, (size * 10));\n+  (*env)->ReleaseStringUTFChars (env, fname, cfname);\n+\n+  array = (*env)->NewIntArray (env, NUM_METRICS);\n+  metrics = (*env)->GetIntArrayElements (env, array, NULL);\n+\n+  gdk_threads_enter ();\n+  font = gdk_font_load (xlfd);\n+  xfont = GDK_FONT_XFONT (font);\n+\n+  metrics[ASCENT]      = font->ascent;\n+  metrics[MAX_ASCENT]  = xfont->max_bounds.ascent;\n+  metrics[DESCENT]     = font->descent;\n+  metrics[MAX_DESCENT] = xfont->max_bounds.descent;\n+  metrics[MAX_ADVANCE] = xfont->max_bounds.width;\n+  gdk_threads_leave ();\n+\n+  g_free (xlfd);\n+  (*env)->ReleaseIntArrayElements (env, array, metrics, 0);\n+\n+  NSA_SET_PTR (env, obj, font);\n+\n+  return array;\n+}\n+\n+JNIEXPORT jint JNICALL Java_gnu_java_awt_peer_gtk_GdkFontMetrics_stringWidth\n+  (JNIEnv *env, jobject obj, jstring str)\n+{\n+  GdkFont *font;\n+  const char *cstr;\n+  jint width;\n+\n+  font = (GdkFont *) NSA_GET_PTR (env, obj);\n+  cstr = (*env)->GetStringUTFChars (env, str, NULL);\n+\n+  gdk_threads_enter ();\n+  width = gdk_string_width (font, cstr);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, str, cstr);\n+\n+  return width;\n+}"}, {"sha": "41e9db6b8fa4c8aadfd648d67e2362ddf9538f66", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c", "status": "added", "additions": 498, "deletions": 0, "changes": 498, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GdkGraphics.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,498 @@\n+/* gdkgraphics.c\n+   Copyright (C) 1999, 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GdkGraphics.h\"\n+#include <gdk/gdkprivate.h>\n+#include <gdk/gdkx.h>\n+\n+#define GDK_STABLE_IS_PIXMAP(d) (((GdkWindowPrivate *)d)->window_type == GDK_WINDOW_PIXMAP)\n+\n+GdkPoint *\n+translate_points (JNIEnv *env, jintArray xpoints, jintArray ypoints, \n+\t\t  jint npoints, jint x_offset, jint y_offset);\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_copyState\n+  (JNIEnv *env, jobject obj, jobject old)\n+{\n+  struct graphics *g, *g_old;\n+\n+  g = (struct graphics *) malloc (sizeof (struct graphics));\n+  g_old = (struct graphics *) NSA_GET_PTR (env, old);\n+\n+  *g = *g_old;\n+\n+  gdk_threads_enter ();\n+\n+  g->gc = gdk_gc_new (g->drawable);\n+  gdk_gc_copy (g->gc, g_old->gc);\n+\n+  if (GDK_STABLE_IS_PIXMAP (g->drawable))\n+    gdk_pixmap_ref (g->drawable);\n+  else /* GDK_IS_WINDOW (g->drawable) */\n+    gdk_window_ref (g->drawable);\n+\n+  gdk_colormap_ref (g->cm);\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, g);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_initState__II\n+  (JNIEnv *env, jobject obj, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) malloc (sizeof (struct graphics));\n+  g->x_offset = g->y_offset = 0;\n+\n+  gdk_threads_enter ();\n+  g->drawable = (GdkDrawable *) gdk_pixmap_new (NULL, width, height, \n+\t\t\t\t\t\tgdk_rgb_get_visual ()->depth);\n+  g->cm = gdk_rgb_get_cmap ();\n+  gdk_colormap_ref (g->cm);\n+  g->gc = gdk_gc_new (g->drawable);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, g);\n+}\n+\n+/* copy the native state of the peer (GtkWidget *) to the native state\n+   of the graphics object */\n+JNIEXPORT jintArray JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_initState__Lgnu_java_awt_peer_gtk_GtkComponentPeer_2\n+  (JNIEnv *env, jobject obj, jobject peer)\n+{\n+  struct graphics *g = (struct graphics *) malloc (sizeof (struct graphics));\n+  void *ptr;\n+  GtkWidget *widget;\n+  GdkColor color;\n+  jintArray array;\n+  jint *rgb;\n+\n+  ptr = NSA_GET_PTR (env, peer);\n+  g->x_offset = g->y_offset = 0;\n+\n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET (ptr);\n+\n+  if (GTK_IS_WINDOW (widget))\n+    {\n+      g->drawable = find_gtk_layout (widget)->bin_window;\n+    }\n+  else if (GTK_IS_LAYOUT (widget))\n+    {\n+      g->drawable = (GdkDrawable *) GTK_LAYOUT (widget)->bin_window;\n+    }\n+  else\n+    {\n+      g->drawable = (GdkDrawable *) widget->window;\n+    }\n+\n+  gdk_window_ref (g->drawable);\n+  g->cm = gtk_widget_get_colormap (widget);\n+  gdk_colormap_ref (g->cm);\n+  g->gc = gdk_gc_new (g->drawable);\n+  gdk_gc_copy (g->gc, widget->style->fg_gc[GTK_STATE_NORMAL]);\n+  color = widget->style->fg[GTK_STATE_NORMAL];\n+\n+  gdk_threads_leave ();\n+\n+  array = (*env)->NewIntArray (env, 3);\n+  rgb = (*env)->GetIntArrayElements (env, array, NULL);\n+  rgb[0] = color.red >> 8;\n+  rgb[1] = color.green >> 8;\n+  rgb[2] = color.blue >> 8;\n+  (*env)->ReleaseIntArrayElements (env, array, rgb, 0);\n+\n+  NSA_SET_PTR (env, obj, g);\n+\n+  return array;\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_dispose\n+  (JNIEnv *env, jobject obj)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_DEL_PTR (env, obj);\n+\n+  if (!g) return;\t\t/* dispose has been called more than once */\n+  \n+  gdk_threads_enter ();\n+  XFlush (GDK_DISPLAY ());\n+\n+  gdk_gc_destroy (g->gc);\n+\n+  if (GDK_STABLE_IS_PIXMAP (g->drawable))\n+    gdk_pixmap_unref (g->drawable);\n+  else /* GDK_IS_WINDOW (g->drawable) */\n+    gdk_window_unref (g->drawable);\n+\n+  gdk_colormap_unref (g->cm);\n+\n+  gdk_threads_leave ();\n+\n+  free (g);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_translateNative\n+  (JNIEnv *env, jobject obj, jint x, jint y)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  g->x_offset += x;\n+  g->y_offset += y;\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawString\n+  (JNIEnv *env, jobject obj, jstring str, jint x, jint y, \n+   jstring fname, jint size)\n+{\n+  struct graphics *g;\n+  const char *cfname, *cstr;\n+  gchar *xlfd;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  \n+  cfname = (*env)->GetStringUTFChars (env, fname, NULL);\n+  xlfd = g_strdup_printf (cfname, (size * 10));\n+  (*env)->ReleaseStringUTFChars (env, fname, cfname);\n+\n+  cstr = (*env)->GetStringUTFChars (env, str, NULL);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_string (g->drawable, gdk_font_load (xlfd), g->gc, \n+\t\t   x + g->x_offset, y + g->y_offset, cstr);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, str, cstr);\n+  g_free (xlfd);\n+}\n+\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawLine\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint x2, jint y2)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_line (g->drawable, g->gc, \n+\t\t x + g->x_offset, y + g->y_offset, \n+\t\t x2 + g->x_offset, y2 + g->y_offset);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_fillRect\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_rectangle (g->drawable, g->gc, TRUE, \n+\t\t      x + g->x_offset, y + g->y_offset, width, height);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawRect\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_rectangle (g->drawable, g->gc, FALSE, \n+\t\t      x + g->x_offset, y + g->y_offset, width, height);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_copyArea\n+  (JNIEnv *env, jobject obj, jint x, jint y, \n+   jint width, jint height, jint dx, jint dy)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_window_copy_area ((GdkWindow *)g->drawable,\n+\t\t\tg->gc,\n+\t\t\tx + g->x_offset + dx, y + g->y_offset + dy,\n+\t\t\t(GdkWindow *)g->drawable,\n+\t\t\tx + g->x_offset, y + g->y_offset,\n+\t\t\twidth, height);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_copyPixmap\n+  (JNIEnv *env, jobject obj, jobject offscreen, \n+   jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g1, *g2;\n+\n+  g1 = (struct graphics *) NSA_GET_PTR (env, obj);\n+  g2 = (struct graphics *) NSA_GET_PTR (env, offscreen);\n+\n+  gdk_threads_enter ();\n+  gdk_window_copy_area ((GdkWindow *)g1->drawable,\n+\t\t\tg1->gc,\n+\t\t\tx + g1->x_offset, y + g1->y_offset,\n+\t\t\t(GdkWindow *)g2->drawable,\n+\t\t\t0 + g2->x_offset, 0 + g2->y_offset, \n+\t\t\twidth, height);\n+  gdk_threads_leave ();\n+}\n+  \n+\n+\n+\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_clearRect\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_window_clear_area ((GdkWindow *)g->drawable, \n+\t\t\t x + g->x_offset, y + g->y_offset, width, height);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_setFunction\n+  (JNIEnv *env, jobject obj, jint func)\n+{\n+  struct graphics *g;\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gdk_gc_set_function (g->gc, func);\n+  gdk_threads_leave ();\n+}\n+\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_setFGColor\n+  (JNIEnv *env, jobject obj, jint red, jint green, jint blue)\n+{\n+  GdkColor color;\n+  struct graphics *g;\n+\n+  color.red = red << 8;\n+  color.green = green << 8;\n+  color.blue = blue << 8;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gdk_color_alloc (g->cm, &color);\n+  gdk_gc_set_foreground (g->gc, &color);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawArc\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height, \n+   jint angle1, jint angle2)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_arc (g->drawable, g->gc, FALSE, \n+\t\tx + g->x_offset, y + g->y_offset, \n+\t\twidth, height, angle1 << 6, angle2 << 6);\n+  gdk_threads_leave ();\n+}  \n+\n+GdkPoint *\n+translate_points (JNIEnv *env, jintArray xpoints, jintArray ypoints, \n+\t\t  jint npoints, jint x_offset, jint y_offset)\n+{\n+  GdkPoint *points;\n+  jint *x, *y;\n+  int i;\n+\n+  /* allocate one more point than necessary, in case we need to tack\n+     on an extra due to the semantics of Java polygons. */\n+  points = g_malloc (sizeof (GdkPoint) * (npoints + 1));\n+  \n+  x = (*env)->GetIntArrayElements (env, xpoints, NULL);\n+  y = (*env)->GetIntArrayElements (env, ypoints, NULL);\n+\n+  for (i = 0; i < npoints; i++)\n+    {\n+      points[i].x = x[i] + x_offset;\n+      points[i].y = y[i] + y_offset;\n+    }\n+\n+  (*env)->ReleaseIntArrayElements (env, xpoints, x, JNI_ABORT);\n+  (*env)->ReleaseIntArrayElements (env, ypoints, y, JNI_ABORT);\n+\n+  return points;\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawPolyline\n+  (JNIEnv *env, jobject obj, jintArray xpoints, jintArray ypoints, \n+   jint npoints)\n+{\n+  struct graphics *g;\n+  GdkPoint *points;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  points = translate_points (env, xpoints, ypoints, npoints,\n+\t\t\t     g->x_offset, g->y_offset);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_lines (g->drawable, g->gc, points, npoints);\n+  gdk_threads_leave ();\n+\n+  g_free (points);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawPolygon\n+  (JNIEnv *env, jobject obj, jintArray xpoints, jintArray ypoints, \n+   jint npoints)\n+{\n+  struct graphics *g;\n+  GdkPoint *points;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  points = translate_points (env, xpoints, ypoints, npoints,\n+\t\t\t     g->x_offset, g->y_offset);\n+\n+  /* make sure the polygon is closed, per Java semantics.\n+     if it's not, we close it. */\n+  if (points[0].x != points[npoints-1].x || points[0].y != points[npoints-1].y)\n+    points[npoints++] = points[0];\n+\n+  gdk_threads_enter ();\n+  gdk_draw_lines (g->drawable, g->gc, points, npoints);\n+  gdk_threads_leave ();\n+\n+  g_free (points);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_fillPolygon\n+  (JNIEnv *env, jobject obj, jintArray xpoints, jintArray ypoints, \n+   jint npoints)\n+{\n+  struct graphics *g;\n+  GdkPoint *points;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+  points = translate_points (env, xpoints, ypoints, npoints,\n+\t\t\t     g->x_offset, g->y_offset);\n+  gdk_threads_enter ();\n+  gdk_draw_polygon (g->drawable, g->gc, TRUE, points, npoints);\n+  gdk_threads_leave ();\n+\n+  g_free (points);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_fillArc\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height, \n+   jint angle1, jint angle2)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_arc (g->drawable, g->gc, TRUE, \n+\t\tx + g->x_offset, y + g->y_offset, \n+\t\twidth, height, angle1 << 6, angle2 << 6);\n+  gdk_threads_leave ();\n+}  \n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_drawOval\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_arc (g->drawable, g->gc, FALSE, \n+\t\tx + g->x_offset, y + g->y_offset, \n+\t\twidth, height, 0, 23040);\n+  gdk_threads_leave ();\n+}  \n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_fillOval\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gdk_draw_arc (g->drawable, g->gc, TRUE, \n+\t\tx + g->x_offset, y + g->y_offset, \n+\t\twidth, height, 0, 23040);\n+  gdk_threads_leave ();\n+}  \n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GdkGraphics_setClipRectangle\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  struct graphics *g;\n+  GdkRectangle rectangle;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, obj);\n+\n+  rectangle.x = x + g->x_offset;\n+  rectangle.y = y + g->y_offset;\n+  rectangle.width = width;\n+  rectangle.height = height;\n+\n+  gdk_threads_enter ();\n+  gdk_gc_set_clip_rectangle (g->gc, &rectangle);\n+  gdk_threads_leave ();\n+}"}, {"sha": "ebebc438ae87f76d3e47a0150aa9dee22671fe3a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkButtonPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,52 @@\n+/* gtkbuttonpeer.c -- Native implementation of GtkButtonPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkButtonPeer.h\"\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkButtonPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer widget;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_type_new (gtk_button_get_type ());\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}"}, {"sha": "cc7cfb8fd300b7203d5424db1686da866565e4cd", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCanvasPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,54 @@\n+/* gtkcanvaspeer.c -- Native implementation of GtkCanvasPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkCanvasPeer.h\"\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkCanvasPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer widget;\n+    \n+  gdk_threads_enter ();\n+  widget = gtk_type_new (gtk_drawing_area_get_type ());\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+"}, {"sha": "94b13666776351121702318df47328964e0d80b6", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,73 @@\n+/* gtkmenuitempeer.c -- Native implementation of GtkMenuItemPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkMenuItemPeer.h\"\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer_create\n+  (JNIEnv *env, jobject obj, jstring label)\n+{\n+  GtkWidget *widget;\n+  const char *str;\n+\n+  str = (*env)->GetStringUTFChars (env, label, NULL);\n+\n+  gdk_threads_enter ();\n+  widget = gtk_check_menu_item_new_with_label (str);\n+  gtk_check_menu_item_set_show_toggle (GTK_CHECK_MENU_ITEM (widget), 1);\n+  gtk_widget_show (widget);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, label, str);\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer_setState\n+  (JNIEnv *env, jobject obj, jboolean state)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gtk_check_menu_item_set_active (GTK_CHECK_MENU_ITEM (ptr), state);\n+  gdk_threads_leave ();\n+}"}, {"sha": "09fa7ef21b5ac8e9e92973d6b384267d2dd1d81a", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,175 @@\n+/* gtkcheckboxpeer.c -- Native implementation of GtkCheckboxPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkCheckboxPeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n+\n+static void item_toggled (GtkToggleButton *item, jobject peer);\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer_dispose\n+  (JNIEnv *env, jobject obj)\n+{\n+  /* The actual underlying widget is owned by a different class.  So\n+     we just clean up the hash table here.  */\n+  NSA_DEL_PTR (env, obj);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer_remove\n+  (JNIEnv *env, jobject obj, jobject checkbox)\n+{\n+  GtkRadioButton *button;\n+  void *ptr;\n+  GSList *list;\n+\n+  ptr = NSA_GET_PTR (env, checkbox);\n+  gdk_threads_enter ();\n+  button = GTK_RADIO_BUTTON (ptr);\n+\n+  /* Update the group to point to some other widget in the group.  We\n+     have to do this because Gtk doesn't have a separate object to\n+     represent a radio button's group.  */\n+  for (list = gtk_radio_button_group (button); list != NULL;\n+       list = list->next)\n+    {\n+      if (list->data != button)\n+\tbreak;\n+    }\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, list ? list->data : NULL);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeCreate\n+  (JNIEnv *env, jobject obj, jobject group)\n+{\n+  GtkWidget *button;\n+\n+  gdk_threads_enter ();\n+\n+  if (group == NULL)\n+    button = gtk_check_button_new_with_label (\"\");\n+  else\n+    {\n+      void *native_group = NSA_GET_PTR (env, group);\n+      button = gtk_radio_button_new_with_label_from_widget (native_group, \"\");\n+      if (native_group == NULL)\n+\t{\n+\t  /* Set the native group so we can use the correct value the\n+\t     next time around.  FIXME: this doesn't work!  */\n+\t  NSA_SET_PTR (env, group, button);\n+\t}\n+    }\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, button);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr = NSA_GET_PTR (env, obj);\n+  jobject peer;\n+\n+  gdk_threads_enter ();\n+\n+  peer = (*env)->NewGlobalRef (env, obj);\n+\n+  /* FIXME: when the widget goes away, we should get rid of the global\n+     reference.  */\n+  gtk_signal_connect (GTK_OBJECT (ptr), \"toggled\",\n+\t\t      GTK_SIGNAL_FUNC (item_toggled), peer);\n+\n+  gdk_threads_leave ();\n+\n+  /* Connect the superclass hooks.  */\n+  Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks (env, obj);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_nativeSetCheckboxGroup\n+  (JNIEnv *env, jobject obj, jobject group)\n+{\n+  GtkRadioButton *button;\n+  void *native_group, *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  /* FIXME: we can't yet switch between a checkbutton and a\n+     radiobutton.  However, AWT requires this.  For now we just\n+     crash.  */\n+\n+  button = GTK_RADIO_BUTTON (ptr);\n+\n+  native_group = NSA_GET_PTR (env, group);\n+  if (native_group == NULL)\n+    gtk_radio_button_set_group (button, NULL);\n+  else\n+    gtk_radio_button_set_group (button,\n+\t\t\t\tgtk_radio_button_group \n+\t\t\t\t(GTK_RADIO_BUTTON (native_group)));\n+\n+  gdk_threads_leave ();\n+\n+  /* If the native group wasn't set on the new CheckboxGroup, then set\n+     it now so that the right thing will happen with the next\n+     radiobutton.  The native state for a CheckboxGroup is a pointer\n+     to one of the widgets in the group.  We are careful to keep this\n+     always pointing at a live widget; whenever a widget is destroyed\n+     (or otherwise removed from the group), the CheckboxGroup peer is\n+     notified.  */\n+  if (native_group == NULL)\n+    NSA_SET_PTR (env, group, native_group);\n+}\n+\n+static void\n+item_toggled (GtkToggleButton *item, jobject peer)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, peer,\n+\t\t\t      postItemEventID,\n+\t\t\t      peer,\n+\t\t\t      item->active ?\n+\t\t\t      (jint) AWT_ITEM_SELECTED :\n+\t\t\t      (jint) AWT_ITEM_DESELECTED);\n+}"}, {"sha": "b3eee27f4c6e4a3481953f5046b25ef8e957d76d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkChoicePeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,204 @@\n+/* gtkchoicepeer.c -- Native implementation of GtkChoicePeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkChoicePeer.h\"\n+\n+static void connect_choice_item_selectable_hook (JNIEnv *env, \n+\t\t\t\t\t\t jobject peer_obj, \n+\t\t\t\t\t\t GtkItem *item, \n+\t\t\t\t\t\t jobject item_obj);\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_create \n+  (JNIEnv *env, jobject obj)\n+{\n+  GtkWidget *menu;\n+  GtkOptionMenu *option_menu;\n+  GtkRequisition child_requisition;\n+\n+  gdk_threads_enter ();\n+  option_menu = GTK_OPTION_MENU (gtk_option_menu_new ());\n+  menu = gtk_menu_new ();\n+  gtk_widget_show (menu);\n+\n+  gtk_option_menu_set_menu (GTK_OPTION_MENU (option_menu), menu);\n+\n+  gtk_widget_size_request (gtk_menu_item_new_with_label (\"\"), \n+\t\t\t   &child_requisition);\n+  option_menu->width = child_requisition.width;\n+  option_menu->height = child_requisition.height;\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, option_menu);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_append \n+  (JNIEnv *env, jobject obj, jobjectArray items)\n+{\n+  gpointer ptr;\n+  GtkMenu *menu;\n+  jsize count, i;\n+  int need_set_history = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  menu = GTK_MENU (gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr)));\n+\n+  if (!gtk_container_children (GTK_CONTAINER (menu)))\n+      need_set_history = 1;\n+\n+  count = (*env)->GetArrayLength (env, items);\n+\n+  for (i = 0; i < count; i++) \n+    {\n+      jobject item;\n+      const char *label;\n+      GtkWidget *menuitem;\n+\n+      item = (*env)->GetObjectArrayElement (env, items, i);\n+      label = (*env)->GetStringUTFChars (env, item, NULL);\n+\n+      menuitem = gtk_menu_item_new_with_label (label);\n+\n+      (*env)->ReleaseStringUTFChars (env, item, label);\n+\n+      gtk_menu_append (menu, menuitem);\n+      gtk_widget_show (menuitem);\n+\n+      connect_choice_item_selectable_hook (env, obj, \n+\t\t\t\t\t   GTK_ITEM (menuitem), item);\n+    }\n+  \n+  if (need_set_history)\n+    gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_add \n+  (JNIEnv *env, jobject obj, jstring item, jint index)\n+{\n+  void *ptr;\n+  const char *label;\n+  GtkWidget *menu, *menuitem;\n+  int need_set_history = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  label = (*env)->GetStringUTFChars (env, item, 0);      \n+\n+  gdk_threads_enter ();\n+  menu = gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr));\n+\n+  if (!gtk_container_children (GTK_CONTAINER (menu)))\n+      need_set_history = 1;\n+\n+  menuitem = gtk_menu_item_new_with_label (label);\n+  gtk_menu_insert (GTK_MENU (menu), menuitem, index);\n+  gtk_widget_show (menuitem);\n+  connect_choice_item_selectable_hook (env, obj, GTK_ITEM (menuitem), item);\n+\n+  if (need_set_history)\n+    gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), 0);\n+\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, item, label);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_remove \n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+  GtkContainer *menu;\n+  GList *children;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  menu = GTK_CONTAINER (gtk_option_menu_get_menu (GTK_OPTION_MENU (ptr)));\n+  children = gtk_container_children (menu);\n+  gtk_container_remove (menu, GTK_WIDGET (g_list_nth (children, index)->data));\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkChoicePeer_select \n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_option_menu_set_history (GTK_OPTION_MENU (ptr), index);\n+  gdk_threads_leave ();\n+}\n+\n+\n+static void\n+item_activate (GtkItem *item, struct item_event_hook_info *ie)\n+{\n+  gdk_threads_leave ();\n+  (*gdk_env)->CallVoidMethod (gdk_env, ie->peer_obj,\n+\t\t\t      postItemEventID,\n+\t\t\t      ie->item_obj,\n+\t\t\t      (jint) AWT_ITEM_SELECTED);\n+  gdk_threads_enter ();\n+}\n+\n+static void\n+connect_choice_item_selectable_hook (JNIEnv *env, jobject peer_obj, \n+\t\t\t\t     GtkItem *item, jobject item_obj)\n+{\n+  struct item_event_hook_info *ie;\n+\n+  ie = (struct item_event_hook_info *) \n+    malloc (sizeof (struct item_event_hook_info));\n+\n+  ie->peer_obj = (*env)->NewGlobalRef (env, peer_obj);\n+  ie->item_obj = (*env)->NewGlobalRef (env, item_obj);\n+\n+  gtk_signal_connect (GTK_OBJECT (item), \"activate\", \n+\t\t      GTK_SIGNAL_FUNC (item_activate), ie);\n+}"}, {"sha": "7c6beecf1b19e538f54c08219f5fee3c2c47757c", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkClipboard.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,180 @@\n+/* gtkclipboard.c\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkClipboard.h\"\n+\n+jmethodID stringSelectionReceivedID;\n+jmethodID stringSelectionHandlerID;\n+jmethodID selectionClearID;\n+\n+void selection_received (GtkWidget *, GtkSelectionData *, guint, gpointer);\n+void selection_get (GtkWidget *, GtkSelectionData *, guint, guint, gpointer);\n+gint selection_clear (GtkWidget *, GdkEventSelection *);\n+\n+GtkWidget *clipboard;\n+jobject cb_obj;\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkClipboard_initNativeState (JNIEnv *env, \n+\t\t\t\t\t\t\t jobject obj)\n+{\n+  if (!stringSelectionReceivedID)\n+    {\n+      jclass gtkclipboard;\n+\n+      gtkclipboard = (*env)->FindClass (env, \n+\t\t\t\t\t\"gnu/java/awt/peer/gtk/GtkClipboard\");\n+      stringSelectionReceivedID = (*env)->GetMethodID (env, gtkclipboard,\n+\t\t\t\t\t\t    \"stringSelectionReceived\",\n+\t\t\t\t\t\t    \"(Ljava/lang/String;)V\");\n+      stringSelectionHandlerID = (*env)->GetMethodID (env, gtkclipboard,\n+\t\t\t\t\t\t      \"stringSelectionHandler\",\n+\t\t\t\t\t\t      \"()Ljava/lang/String;\");\n+      selectionClearID = (*env)->GetMethodID (env, gtkclipboard,\n+\t\t\t\t\t      \"selectionClear\", \"()V\");\n+    }\n+\n+  cb_obj = (*env)->NewGlobalRef (env, obj);\n+\n+  gdk_threads_enter ();\n+  clipboard = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n+\n+  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_received\",\n+\t\t      GTK_SIGNAL_FUNC (selection_received), NULL);\n+\n+  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_clear_event\",\n+\t\t      GTK_SIGNAL_FUNC (selection_clear), NULL);\n+\n+  gtk_selection_add_target (clipboard, GDK_SELECTION_PRIMARY, \n+\t\t\t    GDK_TARGET_STRING, GDK_TARGET_STRING);\n+\n+  gtk_signal_connect (GTK_OBJECT(clipboard), \"selection_get\",\n+                      GTK_SIGNAL_FUNC (selection_get), NULL);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkClipboard_requestStringConversion (JNIEnv *env, \n+\t\t\t\t\t\t\t\t jclass clazz)\n+{\n+  gdk_threads_enter ();\n+  gtk_selection_convert (clipboard, GDK_SELECTION_PRIMARY, \n+\t\t\t GDK_TARGET_STRING, GDK_CURRENT_TIME);\n+  gdk_threads_leave ();\n+}\n+\n+void\n+selection_received (GtkWidget *widget, GtkSelectionData *selection_data, \n+\t\t    guint time, gpointer data)\n+{\n+  /* Check to see if retrieval succeeded  */\n+  if (selection_data->length < 0\n+      || selection_data->type != GDK_SELECTION_TYPE_STRING)\n+    {\n+      (*gdk_env)->CallVoidMethod (gdk_env, cb_obj, stringSelectionReceivedID,\n+\t\t\t\t  NULL);\n+    }\n+  else\n+    {\n+      char *str = (char *) selection_data->data;\n+      \n+      (*gdk_env)->CallVoidMethod (gdk_env, cb_obj, stringSelectionReceivedID,\n+\t\t\t\t  (*gdk_env)->NewStringUTF (gdk_env, str));\n+    }\n+\n+  return;\n+}\n+\n+void\n+selection_get (GtkWidget *widget, \n+               GtkSelectionData *selection_data,\n+               guint      info,\n+               guint      time,\n+               gpointer   data)\n+{\n+  jstring jstr;\n+  const char *utf;\n+  jsize utflen;\n+\n+  jstr = (*gdk_env)->CallObjectMethod (gdk_env, cb_obj, \n+\t\t\t\t       stringSelectionHandlerID);\n+\n+  if (!jstr)\n+    {\n+      gtk_selection_data_set (selection_data, \n+\t\t\t      GDK_TARGET_STRING, 8, NULL, 0);\n+      return;\n+    }\n+\n+  utflen = (*gdk_env)->GetStringUTFLength (gdk_env, jstr);\n+  utf = (*gdk_env)->GetStringUTFChars (gdk_env, jstr, NULL);\n+\n+  gtk_selection_data_set (selection_data, GDK_TARGET_STRING, 8, \n+\t\t\t  (char *)utf, utflen);\n+\n+  (*gdk_env)->ReleaseStringUTFChars (gdk_env, jstr, utf);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkClipboard_selectionGet (JNIEnv *env, \n+\t\t\t\t\t\t      jclass clazz)\n+{\n+  GdkWindow *owner;\n+\n+  gdk_threads_enter ();\n+\n+  /* if we already own the clipboard, we need to tell the old data object\n+     that we're no longer going to be using him */\n+  owner = gdk_selection_owner_get (GDK_SELECTION_PRIMARY);\n+  if (owner && owner == clipboard->window)\n+    (*env)->CallVoidMethod (env, cb_obj, selectionClearID);\n+    \n+  gtk_selection_owner_set (clipboard, GDK_SELECTION_PRIMARY, GDK_CURRENT_TIME);\n+\n+  gdk_threads_leave ();\n+}\n+\n+gint\n+selection_clear (GtkWidget *widget, GdkEventSelection *event)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, cb_obj, selectionClearID);\n+\n+  return TRUE;\n+}"}, {"sha": "5522354e35d36e1831547e7a9e6ff777deeb32f8", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c", "status": "added", "additions": 649, "deletions": 0, "changes": 649, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,649 @@\n+/* gtkcomponentpeer.c -- Native implementation of GtkComponentPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n+#include <gtk/gtkprivate.h>\n+\n+#define GTK_OBJECT_SETV(ptr, arg)                \\\n+  gdk_threads_enter ();                          \\\n+  {                                              \\\n+    GtkArgInfo *info = NULL;                     \\\n+    char *error;                                 \\\n+                                                 \\\n+    error = gtk_object_arg_get_info (GTK_OBJECT_TYPE (ptr), arg.name, &info); \\\n+    if (error)                                   \\\n+      {                                          \\\n+\t/* assume the argument is destined for the container's only child */ \\\n+\tptr = gtk_container_children (GTK_CONTAINER (ptr))->data;            \\\n+      }                                          \\\n+    gtk_object_setv (GTK_OBJECT (ptr), 1, &arg); \\\n+  }                                              \\\n+  gdk_threads_leave ();                          \\\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkGenericPeer_dispose\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_DEL_PTR (env, obj);\n+\n+  /* For now the native state for any object must be a widget.\n+     However, a subclass could override dispose() if required.  */\n+  gdk_threads_enter ();\n+  gtk_widget_destroy (GTK_WIDGET (ptr));\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetSetCursor \n+  (JNIEnv *env, jobject obj, jint type) \n+{\n+  void *ptr;\n+  GtkWidget *widget;\n+  GdkCursorType gdk_cursor_type;\n+  GdkCursor *gdk_cursor;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  switch (type)\n+    {\n+    case AWT_CROSSHAIR_CURSOR:\n+      gdk_cursor_type = GDK_CROSSHAIR;\n+      break;\n+    case AWT_TEXT_CURSOR:\n+      gdk_cursor_type = GDK_XTERM;\n+      break;\n+    case AWT_WAIT_CURSOR:\n+      gdk_cursor_type = GDK_WATCH;\n+      break;\n+    case AWT_SW_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_BOTTOM_LEFT_CORNER;\n+      break;\n+    case AWT_SE_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_BOTTOM_RIGHT_CORNER;\n+      break;\n+    case AWT_NW_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_TOP_LEFT_CORNER;\n+      break;\n+    case AWT_NE_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_TOP_RIGHT_CORNER;\n+      break;\n+    case AWT_N_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_TOP_SIDE;\n+      break;\n+    case AWT_S_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_BOTTOM_SIDE;\n+      break;\n+    case AWT_W_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_LEFT_SIDE;\n+      break;\n+    case AWT_E_RESIZE_CURSOR:\n+      gdk_cursor_type = GDK_RIGHT_SIDE;\n+      break;\n+    case AWT_HAND_CURSOR:\n+      gdk_cursor_type = GDK_HAND2;\n+      break;\n+    case AWT_MOVE_CURSOR:\n+      gdk_cursor_type = GDK_FLEUR;\n+      break;\n+    default:\n+      gdk_cursor_type = GDK_LEFT_PTR;\n+    }\n+      \n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET(ptr);\n+\n+  gdk_cursor = gdk_cursor_new (gdk_cursor_type);\n+  gdk_window_set_cursor (widget->window, gdk_cursor);\n+  gdk_cursor_destroy (gdk_cursor);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_requestFocus\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gtk_widget_grab_focus (GTK_WIDGET (ptr));\n+  gdk_threads_leave ();\n+}\n+\n+\n+/*\n+ * Show a widget (NO LONGER USED)\n+ */\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_setVisible\n+  (JNIEnv *env, jobject obj, jboolean visible)\n+{\n+  GtkWidget *widget;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  widget = GTK_WIDGET (ptr);\n+\n+  if (visible)\n+    gtk_widget_show (widget);\n+  else\n+    gtk_widget_hide (widget);\n+\n+  gdk_flush ();\n+  gdk_threads_leave ();\n+}\n+\n+/*\n+ * Find the origin of a widget's window.\n+ */\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetGetLocationOnScreen\n+  (JNIEnv * env, jobject obj, jintArray jpoint)\n+{\n+  void *ptr;\n+  jint *point;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  point = (*env)->GetIntArrayElements (env, jpoint, 0);\n+\n+  gdk_threads_enter ();\n+  gdk_window_get_origin (GTK_WIDGET (ptr)->window, point, point+1);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseIntArrayElements(env, jpoint, point, 0);\n+}\n+\n+/*\n+ * Find the preferred size of a widget.\n+ */\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetGetDimensions\n+    (JNIEnv *env, jobject obj, jintArray jdims)\n+{\n+    void *ptr;\n+    jint *dims;\n+    GtkRequisition req;\n+\n+    ptr = NSA_GET_PTR (env, obj);\n+    dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n+\n+    gdk_threads_enter ();\n+\n+    gtk_signal_emit_by_name (GTK_OBJECT (ptr), \"size_request\", &req);\n+\n+    dims[0] = req.width;\n+    dims[1] = req.height;\n+\n+    gdk_threads_leave ();\n+\n+    (*env)->ReleaseIntArrayElements(env, jdims, dims, 0);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetSetUsize (JNIEnv *env, \n+    jobject obj, jint w, jint h)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gtk_widget_set_usize (GTK_WIDGET (ptr), w, h);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkFixedNew (JNIEnv *env, \n+    jobject obj, jint width, jint height, jboolean visible)\n+{\n+  GtkWidget *layout;\n+\n+  gdk_threads_enter ();\n+  layout = gtk_layout_new (NULL, NULL);\n+  gtk_widget_realize (layout);\n+  connect_awt_hook (env, obj, 1, GTK_LAYOUT (layout)->bin_window);\n+  set_visible (layout, visible);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, layout);\n+}\n+\n+/*\n+ * Place a widget on the layout widget. \n+ */\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkFixedPut \n+    (JNIEnv *env, jobject obj, jobject container, jint x, jint y)\n+{\n+  GList *child;\n+  GtkWidget *fix;\n+  void *containerptr=NULL;\n+  void *objptr=NULL;\n+\n+  /* We hawe a container which, if it is a window, will have\n+     this component added to its fixed.  If it is a fixed, we add the\n+     component to it. */\n+  \n+  containerptr=NSA_GET_PTR (env, container);\n+  objptr=NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  if (GTK_IS_WINDOW(GTK_OBJECT(containerptr)))\n+    {\n+      child=gtk_container_children (GTK_CONTAINER(containerptr));\n+      \n+      while (child && !GTK_IS_FIXED(child->data))\n+\t{\n+\t  child=g_list_next(child);\n+\t}\n+      \n+      fix=GTK_WIDGET(child->data);\n+      g_list_free(child);\n+    }\n+  else\n+    if (GTK_IS_SCROLLED_WINDOW(GTK_OBJECT(containerptr)))\n+    {\n+      child=gtk_container_children (GTK_CONTAINER (GTK_BIN(containerptr)->child));\n+      \n+      while (child && !GTK_IS_FIXED(child->data))\n+\t{\n+\t  child=g_list_next(child);\n+\t}\n+      \n+      fix=GTK_WIDGET(child->data);\n+\n+      g_list_free(child);\n+    }\n+  else\n+    {\n+      fix=GTK_WIDGET(containerptr);\n+    }\n+  \n+  gtk_fixed_put(GTK_FIXED(fix),GTK_WIDGET(objptr),x,y);\n+  gtk_widget_realize (GTK_WIDGET (objptr));\n+  gtk_widget_show (GTK_WIDGET (objptr));\n+  \n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkFixedMove (JNIEnv *env, \n+    jobject obj, jint x, jint y)\n+{\n+  GtkWidget *widget;\n+  void *ptr=NULL;\n+\n+  /* For some reason, ScrolledWindow tries to scroll its contents\n+     by moving them using this function.  Since we want to use GTK's\n+     nice fast scrolling, we try to second guess it here.  This\n+     might cause problems later.  */\n+  \n+  if (x >= 0 && y >= 0) \n+    {\n+      ptr = NSA_GET_PTR (env, obj);\n+      \n+      gdk_threads_enter ();\n+      widget=GTK_WIDGET (ptr);\n+      if (!GTK_IS_WINDOW (widget))\n+\t  gtk_fixed_move (GTK_FIXED (widget->parent), widget, x, y);\n+      gdk_threads_leave ();\n+    }\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_setNativeBounds\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  GtkWidget *widget;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET (ptr);\n+  if (GTK_IS_VIEWPORT (widget->parent))\n+    {\n+      gtk_widget_set_usize (widget, width, height);\n+    }\n+  else\n+    {\n+      gtk_widget_set_usize (widget, width, height);\n+      gtk_layout_move (GTK_LAYOUT (widget->parent), widget, x, y);\n+    }\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT jintArray JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetGetBackground\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  jintArray array;\n+  int *rgb;\n+  GdkColor bg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  bg = GTK_WIDGET (ptr)->style->bg[GTK_STATE_NORMAL];\n+  gdk_threads_leave ();\n+\n+  array = (*env)->NewIntArray (env, 3);\n+  rgb = (*env)->GetIntArrayElements (env, array, NULL);\n+  /* convert color data from 16 bit values down to 8 bit values */\n+  rgb[0] = bg.red   >> 8;\n+  rgb[1] = bg.green >> 8;\n+  rgb[2] = bg.blue  >> 8;\n+  (*env)->ReleaseIntArrayElements (env, array, rgb, 0);\n+\n+  return array;\n+}\n+\n+JNIEXPORT jintArray JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_gtkWidgetGetForeground\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  jintArray array;\n+  jint *rgb;\n+  GdkColor fg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  fg = GTK_WIDGET (ptr)->style->fg[GTK_STATE_NORMAL];\n+  gdk_threads_leave ();\n+\n+  array = (*env)->NewIntArray (env, 3);\n+  rgb = (*env)->GetIntArrayElements (env, array, NULL);\n+  /* convert color data from 16 bit values down to 8 bit values */\n+  rgb[0] = fg.red   >> 8;\n+  rgb[1] = fg.green >> 8;\n+  rgb[2] = fg.blue  >> 8;\n+  (*env)->ReleaseIntArrayElements (env, array, rgb, 0);\n+\n+  return array;\n+}\n+\n+void\n+set_visible (GtkWidget *widget, jboolean visible)\n+{\n+  if (visible)\n+    gtk_widget_show (widget);\n+  else\n+    gtk_widget_hide (widget);\n+}\n+\n+GtkLayout *\n+find_gtk_layout (GtkWidget *parent)\n+{\n+  if (GTK_IS_WINDOW (parent))\n+    {\n+      GList *children = gtk_container_children \n+\t                  (GTK_CONTAINER (GTK_BIN (parent)->child));\n+\n+      if (GTK_IS_MENU_BAR (children->data))\n+\treturn GTK_LAYOUT (children->next->data);\n+      else /* GTK_IS_LAYOUT (children->data) */\n+\treturn GTK_LAYOUT (children->data);\n+    }\n+\n+  return NULL;\n+}\n+\n+#define WIDGET_CLASS(w)  GTK_WIDGET_CLASS (GTK_OBJECT (w)->klass)\n+\n+void\n+set_parent (GtkWidget *widget, GtkContainer *parent)\n+{\n+  if (GTK_IS_WINDOW (parent))\n+    {\n+      GList *children = gtk_container_children \n+\t                  (GTK_CONTAINER (GTK_BIN (parent)->child));\n+\n+      if (GTK_IS_MENU_BAR (children->data))\n+\tgtk_layout_put (GTK_LAYOUT (children->next->data), widget, 0, 0);\n+      else /* GTK_IS_LAYOUT (children->data) */\n+\tgtk_layout_put (GTK_LAYOUT (children->data), widget, 0, 0);\n+    }\n+  else\n+    if (GTK_IS_SCROLLED_WINDOW (parent))\n+      {\n+/*  \tif (WIDGET_CLASS (widget)->set_scroll_adjustments_signal) */\n+/*  \t  gtk_container_add (GTK_CONTAINER (parent), widget); */\n+/*  \telse */\n+/*  \t  { */\n+\t    gtk_scrolled_window_add_with_viewport \n+\t      (GTK_SCROLLED_WINDOW (parent), widget);\n+\t    gtk_viewport_set_shadow_type (GTK_VIEWPORT (widget->parent), \n+\t\t\t\t\t  GTK_SHADOW_NONE);\n+/*  \t  } */\n+\n+      }\n+/*        gtk_layout_put  */\n+/*  \t(GTK_LAYOUT (GTK_BIN (parent)->child), widget, 0, 0); */\n+\n+/*      if (GTK_IS_SCROLLED_WINDOW (parent)) */\n+/*        gtk_layout_put  */\n+/*  \t(GTK_LAYOUT (GTK_BIN (GTK_BIN (parent)->child)->child), widget, 0, 0); */\n+    else\n+      gtk_layout_put (GTK_LAYOUT (parent), widget, 0, 0);\n+}\n+\n+JNIEXPORT jboolean JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_isEnabled \n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  jboolean ret_val;\n+  \n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  ret_val = GTK_WIDGET_IS_SENSITIVE (GTK_WIDGET (ptr));\n+  gdk_threads_leave ();\n+\n+  return ret_val;\n+}\n+\n+JNIEXPORT jboolean JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_modalHasGrab\n+  (JNIEnv *env, jclass clazz)\n+{\n+  GtkWidget *widget;\n+  jboolean retval;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_grab_get_current ();\n+  retval = (widget && GTK_IS_WINDOW (widget) && GTK_WINDOW (widget)->modal);\n+  gdk_threads_leave ();\n+\n+  return retval;\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_String_2\n+  (JNIEnv *env, jobject obj, jstring jname, jstring jvalue)\n+{\n+  const char *name;\n+  const char *value;\n+  void *ptr;\n+  GtkArg arg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+  value = (*env)->GetStringUTFChars (env, jvalue, NULL);\n+\n+  arg.type = GTK_TYPE_STRING;\n+  arg.name = (char *) name;\n+  GTK_VALUE_STRING (arg) = (char *) value;\n+\n+  GTK_OBJECT_SETV (ptr, arg);  \n+\n+  (*env)->ReleaseStringUTFChars (env, jname, name);\n+  (*env)->ReleaseStringUTFChars (env, jvalue, value);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Z\n+  (JNIEnv *env, jobject obj, jstring jname, jboolean value)\n+{\n+  const char *name;\n+  void *ptr;\n+  GtkArg arg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+\n+  arg.type = GTK_TYPE_BOOL;\n+  arg.name = (char *) name;\n+  GTK_VALUE_BOOL (arg) = value;\n+\n+  GTK_OBJECT_SETV (ptr, arg);  \n+\n+  (*env)->ReleaseStringUTFChars (env, jname, name);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2I\n+  (JNIEnv *env, jobject obj, jstring jname, jint value)\n+{\n+  const char *name;\n+  void *ptr;\n+  GtkArg arg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+\n+  arg.type = GTK_TYPE_INT;\n+  arg.name = (char *) name;\n+  GTK_VALUE_INT (arg) = value;\n+  \n+  GTK_OBJECT_SETV (ptr, arg);  \n+\n+  (*env)->ReleaseStringUTFChars (env, jname, name);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2F\n+  (JNIEnv *env, jobject obj, jstring jname, jfloat value)\n+{\n+  const char *name;\n+  void *ptr;\n+  GtkArg arg;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+\n+  arg.type = GTK_TYPE_FLOAT;\n+  arg.name = (char *) name;\n+  GTK_VALUE_FLOAT (arg) = value;\n+  \n+  GTK_OBJECT_SETV (ptr, arg);  \n+\n+  (*env)->ReleaseStringUTFChars (env, jname, name);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_Object_2\n+  (JNIEnv *env, jobject obj1, jstring jname, jobject obj2)\n+{\n+  const char *name;\n+  void *ptr1, *ptr2;\n+  GtkArg arg;\n+\n+  ptr1 = NSA_GET_PTR (env, obj1);\n+  ptr2 = NSA_GET_PTR (env, obj2);\n+  \n+  name = (*env)->GetStringUTFChars (env, jname, NULL);\n+\n+  /* special case to catch where we need to set the parent */\n+  if (!strcmp (name, \"parent\"))\n+    {\n+      gdk_threads_enter ();\n+      set_parent (GTK_WIDGET (ptr1), GTK_CONTAINER (ptr2));\n+      gdk_threads_leave ();\n+\n+      (*env)->ReleaseStringUTFChars (env, jname, name);\n+      return;\n+    }\n+\n+  arg.type = GTK_TYPE_OBJECT;\n+  arg.name = (char *) name;\n+  GTK_VALUE_OBJECT (arg) = GTK_OBJECT (ptr2);\n+  \n+  GTK_OBJECT_SETV (ptr1, arg);  \n+\n+  (*env)->ReleaseStringUTFChars (env, jname, name);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_create\n+  (JNIEnv *env, jobject obj, jstring jtypename)\n+{\n+  const char *typename;\n+  gpointer widget;\n+\n+  typename = (*env)->GetStringUTFChars (env, jtypename, NULL);\n+\n+  gdk_threads_enter ();\n+  gtk_button_get_type ();\n+  widget = gtk_object_newv (gtk_type_from_name (typename),\n+\t\t\t    0, NULL);\n+/*    widget = gtk_type_new (gtk_type_from_name (typename)); */\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, jtypename, typename);\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+  gdk_threads_leave ();\n+}"}, {"sha": "99ca0934c3dd67658ccb7821d39f62edec4c6139", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "added", "additions": 552, "deletions": 0, "changes": 552, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,552 @@\n+/* gtkevents.c -- GDK/GTK event handlers\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include <X11/Xlib.h>\n+#include <gdk/gdkkeysyms.h>\n+#include <stdarg.h>\n+#include <assert.h>\n+\n+/* A widget can be composed of multipled windows, so we need to hook\n+   events on all of them. */\n+struct event_hook_info\n+{\n+  jobject *peer_obj;\n+  int nwindows;\n+  GdkWindow ***windows;\t\t/* array of pointers to (GdkWindow *) */\n+};\n+\n+static jint\n+button_to_awt_mods (int button)\n+{\n+  switch (button)\n+    {\n+    case 1:\n+      return AWT_BUTTON1_MASK;\n+    case 2:\n+      return AWT_BUTTON2_MASK;\n+    case 3:\n+      return AWT_BUTTON3_MASK;\n+    }\n+\n+  return 0;\n+}\n+\n+static jint\n+state_to_awt_mods (int mods)\n+{\n+  jint result = 0;\n+\n+  if (mods & (GDK_SHIFT_MASK | GDK_LOCK_MASK))\n+    result |= AWT_SHIFT_MASK;\n+  if (mods & GDK_CONTROL_MASK)\n+    result |= AWT_CTRL_MASK;\n+  \n+  return result;\n+}\n+\n+#ifdef __GNUC__\n+__inline\n+#endif\n+static jint\n+keysym_to_awt_keycode (guint keyval)\n+{\n+  guint vk;\n+\n+  vk = gdk_keyval_to_upper (keyval);\n+\n+  if (vk <= 0x41 && vk <= 0x5A)\t/* VK_A through VK_Z */\n+    return vk;\n+\n+  if (vk <= 0x30 && vk <= 39)\t/* VK_0 through VK_9 */\n+    return vk;\n+\n+  switch (vk)\n+    {\n+    case GDK_Alt_L:\n+    case GDK_Alt_R:\n+      return VK_ALT;\n+    case GDK_BackSpace:\n+      return VK_BACK_SPACE;\n+    case GDK_Cancel:\n+      return VK_CANCEL;\n+    case GDK_Caps_Lock:\n+      return VK_CAPS_LOCK;\n+    case GDK_Clear:\n+      return VK_CLEAR;\n+    case GDK_bracketright:\n+      return VK_CLOSE_BRACKET;\n+    case GDK_comma:\n+      return VK_COMMA;\n+    case GDK_Control_L:\n+    case GDK_Control_R:\n+      return VK_CONTROL;\n+    case GDK_KP_Decimal:\n+      return VK_DECIMAL;\n+    case GDK_Delete:\n+      return VK_DELETE;\n+    case GDK_KP_Divide:\n+      return VK_DIVIDE;\n+    case GDK_Down:\n+      return VK_DOWN;\n+    case GDK_End:\n+      return VK_END;\n+    case GDK_Return:\n+      return VK_ENTER;\n+    case GDK_Escape:\n+      return VK_ESCAPE;\n+    case GDK_F1:\n+      return VK_F1;\n+    case GDK_F2:\n+      return VK_F2;\n+    case GDK_F3:\n+      return VK_F3;\n+    case GDK_F4:\n+      return VK_F4;\n+    case GDK_F5:\n+      return VK_F5;\n+    case GDK_F6:\n+      return VK_F6;\n+    case GDK_F7:\n+      return VK_F7;\n+    case GDK_F8:\n+      return VK_F8;\n+    case GDK_F9:\n+      return VK_F9;\n+    case GDK_F10:\n+      return VK_F10;\n+    case GDK_F11:\n+      return VK_F11;\n+    case GDK_F12:\n+      return VK_F12;\n+    case GDK_Help:\n+      return VK_HELP;\n+    case GDK_Home:\n+      return VK_HOME;\n+    case GDK_Insert:\n+      return VK_INSERT;\n+    case GDK_Kanji:\n+      return VK_KANJI;\n+    case GDK_Left:\n+      return VK_LEFT;\n+    case GDK_Meta_L:\n+    case GDK_Meta_R:\n+      return VK_META;\n+    case GDK_KP_Multiply:\n+      return VK_MULTIPLY;\n+    case GDK_Num_Lock:\n+      return VK_NUM_LOCK;\n+    case GDK_KP_0:\n+      return VK_NUMPAD0;\n+    case GDK_KP_1:\n+      return VK_NUMPAD1;\n+    case GDK_KP_2:\n+      return VK_NUMPAD2;\n+    case GDK_KP_3:\n+      return VK_NUMPAD3;\n+    case GDK_KP_4:\n+      return VK_NUMPAD4;\n+    case GDK_KP_5:\n+      return VK_NUMPAD5;\n+    case GDK_KP_6:\n+      return VK_NUMPAD6;\n+    case GDK_KP_7:\n+      return VK_NUMPAD7;\n+    case GDK_KP_8:\n+      return VK_NUMPAD8;\n+    case GDK_KP_9:\n+      return VK_NUMPAD9;\n+    case GDK_bracketleft:\n+      return VK_OPEN_BRACKET;\n+    case GDK_Page_Down:\n+      return VK_PAGE_DOWN;\n+    case GDK_Page_Up:\n+      return VK_PAGE_UP;\n+    case GDK_Pause:\n+      return VK_PAUSE;\n+    case GDK_period:\n+      return VK_PERIOD;\n+    case GDK_Print:\n+      return VK_PRINTSCREEN;\n+    case GDK_quoteright:\n+      return VK_QUOTE;\n+    case GDK_Right:\n+      return VK_RIGHT;\n+    case GDK_Scroll_Lock:\n+      return VK_SCROLL_LOCK;\n+    case GDK_semicolon:\n+      return VK_SEMICOLON;\n+    case GDK_KP_Separator:\n+      return VK_SEPARATOR;\n+    case GDK_Shift_L:\n+    case GDK_Shift_R:\n+      return VK_SHIFT;\n+    case GDK_slash:\n+      return VK_SLASH;\n+    case GDK_space:\n+      return VK_SPACE;\n+    case GDK_KP_Subtract:\n+      return VK_SUBTRACT;\n+    case GDK_Tab:\n+      return VK_TAB;\n+    case GDK_Up:\n+      return VK_UP;\n+\n+    default:\n+      return VK_UNDEFINED;\n+    }\n+}\n+\n+void\n+awt_event_handler (GdkEvent *event)\n+{\n+  jobject *obj_ptr;\n+  static guint32 button_click_time = 0;\n+  static GdkWindow *button_window = NULL;\n+  static guint button_number = -1;\n+  static jint click_count = 1;\n+\n+  /* keep synthetic AWT events from being processed recursively */\n+  if (event->type & SYNTHETIC_EVENT_MASK && event->type != GDK_NOTHING)\n+    {\n+      event->type ^= SYNTHETIC_EVENT_MASK;\n+      gtk_main_do_event (event);\n+      return;\n+    }\n+\n+  /* keep track of clickCount ourselves, since the AWT allows more\n+     than a triple click to occur */\n+  if (event->type == GDK_BUTTON_PRESS)\n+    {\n+      if ((event->button.time < (button_click_time + MULTI_CLICK_TIME))\n+\t  && (event->button.window == button_window)\n+\t  && (event->button.button == button_number))\n+\tclick_count++;\n+      else\n+\tclick_count = 1;\n+      \n+      button_click_time = event->button.time;\n+      button_window = event->button.window;\n+      button_number = event->button.button;\n+    }\n+\n+  /* for all input events, which have a window with a jobject attached,\n+     send the input event off to Java before GTK has a chance to process\n+     the event */\n+  if ((event->type == GDK_BUTTON_PRESS\n+       || event->type == GDK_BUTTON_RELEASE\n+       || event->type == GDK_ENTER_NOTIFY\n+       || event->type == GDK_LEAVE_NOTIFY\n+       || event->type == GDK_CONFIGURE\n+       || event->type == GDK_EXPOSE\n+       || event->type == GDK_KEY_PRESS\n+       || event->type == GDK_FOCUS_CHANGE\n+       || event->type == GDK_MOTION_NOTIFY)\n+      && gdk_property_get (event->any.window,\n+\t\t\t   gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n+\t\t\t   gdk_atom_intern (\"CARDINAL\", FALSE),\n+\t\t\t   0,\n+\t\t\t   sizeof (jobject),\n+\t\t\t   FALSE,\n+\t\t\t   NULL,\n+\t\t\t   NULL,\n+\t\t\t   NULL,\n+\t\t\t   (guchar **)&obj_ptr))\n+    {\n+      switch (event->type)\n+\t{\n+\tcase GDK_BUTTON_PRESS:\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t      AWT_MOUSE_PRESSED, \n+\t\t\t\t      (jlong)event->button.time,\n+\t\t\t\t    state_to_awt_mods (event->button.state) |\n+\t\t\t\t    button_to_awt_mods (event->button.button), \n+\t\t\t\t      (jint)event->button.x,\n+\t\t\t\t      (jint)event->button.y, \n+\t\t\t\t      click_count, \n+\t\t\t\t      (event->button.button == 3) ? JNI_TRUE :\n+\t\t\t\t                                    JNI_FALSE);\n+\n+\t  /*\t  grab_counter++;\n+\t  gdk_pointer_grab (event->any.window,\n+\t\t\t    FALSE,\n+\t\t\t    GDK_POINTER_MOTION_MASK |\n+\t\t\t    GDK_BUTTON_MOTION_MASK |\n+\t\t\t    GDK_BUTTON_PRESS_MASK |\n+\t\t\t    GDK_BUTTON_RELEASE_MASK |\n+\t\t\t    GDK_ENTER_NOTIFY_MASK |\n+\t\t\t    GDK_LEAVE_NOTIFY_MASK,\n+\t\t\t    NULL,\n+\t\t\t    NULL,\n+\t\t\t    event->button.time);*/\n+\t  break;\n+\tcase GDK_BUTTON_RELEASE:\n+\t  {\n+\t    int width, height;\n+\n+\t    /* only ungrab if no other buttons are pressed down */\n+\t    /*\t    if (--grab_counter == 0)\n+\t      gdk_pointer_ungrab (event->button.time);\n+\t    */\n+\t    (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t\tAWT_MOUSE_RELEASED, \n+\t\t\t\t\t(jlong)event->button.time,\n+\t\t\t\t    state_to_awt_mods (event->button.state) |\n+\t\t\t\t    button_to_awt_mods (event->button.button), \n+\t\t\t\t\t(jint)event->button.x,\n+\t\t\t\t\t(jint)event->button.y, \n+\t\t\t\t\tclick_count, JNI_FALSE);\n+\n+\t    /* check to see if the release occured in the window it was pressed\n+\t       in, and if so, generate an AWT click event */\n+\t    gdk_window_get_size (event->any.window, &width, &height);\n+\t    if (event->button.x >= 0\n+\t\t&& event->button.y >= 0\n+\t\t&& event->button.x <= width \n+\t\t&& event->button.y <= height)\n+\t      (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t\t  AWT_MOUSE_CLICKED, \n+\t\t\t\t\t  (jlong)event->button.time,\n+\t\t\t\t   state_to_awt_mods (event->button.state) |\n+\t\t\t\t  button_to_awt_mods (event->button.button), \n+\t\t\t\t\t  (jint)event->button.x,\n+\t\t\t\t\t  (jint)event->button.y, \n+\t\t\t\t\t  click_count, JNI_FALSE);\n+\t    \n+\t  }\n+\t  break;\n+\tcase GDK_MOTION_NOTIFY:\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t      AWT_MOUSE_MOVED,\n+\t\t\t\t      (jlong)event->motion.time,\n+\t\t\t\t      state_to_awt_mods (event->motion.state),\n+\t\t\t\t      (jint)event->motion.x,\n+\t\t\t\t      (jint)event->motion.y,\n+\t\t\t\t      0, JNI_FALSE);\n+\n+\t  if (event->motion.state & (GDK_BUTTON1_MASK\n+\t\t\t\t     | GDK_BUTTON2_MASK\n+\t\t\t\t     | GDK_BUTTON3_MASK\n+\t\t\t\t     | GDK_BUTTON4_MASK\n+\t\t\t\t     | GDK_BUTTON5_MASK))\n+\t    {\n+\t      (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t\t  AWT_MOUSE_DRAGGED,\n+\t\t\t\t\t  (jlong)event->motion.time,\n+\t\t\t\t      state_to_awt_mods (event->motion.state),\n+\t\t\t\t\t  (jint)event->motion.x,\n+\t\t\t\t\t  (jint)event->motion.y,\n+\t\t\t\t\t  0, JNI_FALSE);\n+\t    }\n+\t  break;\n+\tcase GDK_ENTER_NOTIFY:\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t      AWT_MOUSE_ENTERED, \n+\t\t\t\t      (jlong)event->crossing.time,\n+\t\t\t\t    state_to_awt_mods (event->crossing.state), \n+\t\t\t\t      (jint)event->crossing.x,\n+\t\t\t\t      (jint)event->crossing.y, \n+\t\t\t\t      0, JNI_FALSE);\n+\t  break;\n+\tcase GDK_LEAVE_NOTIFY:\n+\t  if (event->crossing.mode == GDK_CROSSING_NORMAL)\n+\t    (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postMouseEventID,\n+\t\t\t\t\tAWT_MOUSE_EXITED, \n+\t\t\t\t\t(jlong)event->crossing.time,\n+\t\t\t\t    state_to_awt_mods (event->crossing.state),\n+\t\t\t\t\t(jint)event->crossing.x,\n+\t\t\t\t\t(jint)event->crossing.y, \n+\t\t\t\t\t0, JNI_FALSE);\n+\t  break;\n+\tcase GDK_CONFIGURE:\n+\t  {\n+\t    GtkWidget *widget;\n+\n+\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n+\t    \n+\t    if (widget && GTK_WIDGET_TOPLEVEL (widget))\n+\t      {\n+\t\tgint top, left, right, bottom;\n+\t\tgint x, y, w, h, wb, d;\n+\n+\t\t/* calculate our insets */\n+\t\tgdk_window_get_root_geometry (event->any.window, \n+\t\t\t\t\t      &x, &y, &w, &h, &wb, &d);\n+\n+\t\t/* We used to compute these based on the configure\n+\t\t   event's fields.  However, that gives strange and\n+\t\t   apparently incorrect results.  */\n+\t\ttop = left = bottom = right = 0;\n+\n+\t\t/* configure events are not posted to the AWT event queue,\n+\t\t   and as such, gdk/gtk will be called back before\n+\t\t   postConfigureEvent returns */\n+\t\tgdk_threads_leave ();\n+\t\t(*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, \n+\t\t\t\t\t    postConfigureEventID,\n+\t\t\t\t\t    (jint)event->configure.x,\n+\t\t\t\t\t    (jint)event->configure.y,\n+\t\t\t\t\t    (jint)event->configure.width,\n+\t\t\t\t\t    (jint)event->configure.height,\n+\t\t\t\t\t    (jint)top,\n+\t\t\t\t\t    (jint)left,\n+\t\t\t\t\t    (jint)bottom,\n+\t\t\t\t\t    (jint)right);\n+\t\tgdk_threads_enter ();\n+\t      }\n+\t  }\n+\t  break;\n+\tcase GDK_EXPOSE:\n+\t  {\n+\t    (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n+\t\t\t\t\tpostExposeEventID,\n+\t\t\t\t\t(jint)event->expose.area.x,\n+\t\t\t\t\t(jint)event->expose.area.y,\n+\t\t\t\t\t(jint)event->expose.area.width,\n+\t\t\t\t\t(jint)event->expose.area.height);\n+\t  }\n+\t  break;\n+\n+\tcase GDK_KEY_PRESS:\n+\t  {\n+\t    GtkWidget *widget;\n+\t    GtkWindow *window;\n+\n+\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n+\n+\t    window = GTK_WINDOW (gtk_widget_get_ancestor (widget, \n+\t\t\t\t\t\t\t  GTK_TYPE_WINDOW));\n+\t    if (window\n+\t\t&& GTK_WIDGET_IS_SENSITIVE (window) \n+\t\t&& window->focus_widget\n+\t\t&& GTK_WIDGET_IS_SENSITIVE (window->focus_widget)\n+\t\t&& window->focus_widget->window)\n+\t      {\n+\t\tgtk_widget_activate (window->focus_widget);\n+\t\tgdk_property_get (window->focus_widget->window,\n+\t\t\t\t  gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n+\t\t\t\t  gdk_atom_intern (\"CARDINAL\", FALSE),\n+\t\t\t\t  0,\n+\t\t\t\t  sizeof (jobject),\n+\t\t\t\t  FALSE,\n+\t\t\t\t  NULL,\n+\t\t\t\t  NULL,\n+\t\t\t\t  NULL,\n+\t\t\t\t  (guchar **)&obj_ptr);\n+\t\t\n+\t\t/*  \t    if (grab  && GTK_WIDGET_HAS_DEFAULT (widget) ) */\n+\t\t/*  \t      { */\n+\t\t(*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n+\t\t\t\t\t    postKeyEventID,\n+\t\t\t\t\t    (jint) AWT_KEY_PRESSED,\n+\t\t\t\t\t    (jlong) event->key.time,\n+\t\t\t\t\t  state_to_awt_mods (event->key.state),\n+\t\t\t\t     keysym_to_awt_keycode (event->key.keyval),\n+\t\t\t\t\t    (jchar) (event->key.length) ? \n+\t\t\t\t\t    event->key.string[0] : \n+\t\t\t\t\t    AWT_KEY_CHAR_UNDEFINED);\n+\t\tif (event->key.length)\n+\t\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n+\t\t\t\t\t      postKeyEventID,\n+\t\t\t\t\t      (jint) AWT_KEY_TYPED,\n+\t\t\t\t\t      (jlong) event->key.time,\n+\t\t\t\t\t  state_to_awt_mods (event->key.state),\n+\t\t\t\t\t      VK_UNDEFINED,\n+\t\t\t\t\t      (jchar) event->key.string[0]);\n+\t      }\n+\t  }\n+\t  break;\n+\tcase GDK_FOCUS_CHANGE:\n+\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n+\t\t\t\t      postFocusEventID,\n+\t\t\t\t      (jint) (event->focus_change.in) ? \n+\t\t\t\t      AWT_FOCUS_GAINED : AWT_FOCUS_LOST,\n+\t\t\t\t      JNI_FALSE);\n+\t  break;\n+\tdefault:\n+\t}\n+      g_free (obj_ptr);\n+    } \n+  \n+  gtk_main_do_event (event);\n+}\n+\n+static void\n+attach_jobject (GdkWindow *window, jobject *obj)\n+{\n+  GdkAtom addr_atom = gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE);\n+  GdkAtom type_atom = gdk_atom_intern (\"CARDINAL\", FALSE);\n+\n+  gdk_window_set_events (window, \n+\t\t\t gdk_window_get_events (window)\n+\t\t\t | GDK_POINTER_MOTION_MASK\n+\t\t\t | GDK_BUTTON_MOTION_MASK\n+\t\t\t | GDK_BUTTON_PRESS_MASK\n+\t\t\t | GDK_BUTTON_RELEASE_MASK\n+\t\t\t | GDK_KEY_PRESS_MASK\n+\t\t\t | GDK_KEY_RELEASE_MASK\n+\t\t\t | GDK_ENTER_NOTIFY_MASK\n+\t\t\t | GDK_LEAVE_NOTIFY_MASK\n+\t\t\t | GDK_STRUCTURE_MASK\n+\t\t\t | GDK_KEY_PRESS_MASK\n+\t\t\t | GDK_FOCUS_CHANGE_MASK);\n+\n+  gdk_property_change (window,\n+\t\t       addr_atom,\n+\t\t       type_atom,\n+\t\t       8,\n+\t\t       GDK_PROP_MODE_REPLACE,\n+\t\t       (guchar *)obj,\n+\t\t       sizeof (jobject));\n+}\n+\n+void\n+connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...)\n+{\n+  int i;\n+  va_list ap;\n+  jobject *obj;\n+\n+  obj = (jobject *) malloc (sizeof (jobject));\n+  *obj = (*env)->NewGlobalRef (env, peer_obj);\n+\n+  va_start (ap, nwindows);\n+  for (i = 0; i < nwindows; i++)\n+    attach_jobject (va_arg (ap, GdkWindow *), obj);\n+  va_end (ap);\n+}"}, {"sha": "2308d1100eddaaa4391a3e36953ffe98650164e3", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,92 @@\n+/* gtkfiledialogpeer.c -- Native implementation of GtkFileDialogPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkFileDialogPeer.h\"\n+\n+/*\n+ * Make a new file selection dialog\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_create \n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer widget;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_type_new (gtk_file_selection_get_type ());\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  /* NOTE: we don't call the superclass connect method here.  */\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+\n+  gdk_threads_leave ();\n+}\n+\n+/*\n+ * Set the filename in the file selection dialog.\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkFileDialogPeer_gtkFileSelectionSetFilename \n+    (JNIEnv *env, jobject obj, jstring filename)\n+{\n+  void *ptr;\n+  const char *str;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+    \n+  str = (*env)->GetStringUTFChars (env, filename, 0);      \n+  gdk_threads_enter ();\n+  gtk_file_selection_set_filename (GTK_FILE_SELECTION (ptr), str);\n+  gdk_threads_leave ();\n+  (*env)->ReleaseStringUTFChars (env, filename, str);\n+}"}, {"sha": "dd446c89489ab4aea40def9e0e1f76dc23e42c30", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkImagePainter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkImagePainter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkImagePainter.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,160 @@\n+/* gtkimagepainter.c\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkImagePainter.h\"\n+#include <libart_lgpl/art_misc.h>\n+#include <libart_lgpl/art_rgb_affine.h>\n+\n+#define SWAPU32(w) \\\n+  (((w) << 24) | (((w) & 0xff00) << 8) | (((w) >> 8) & 0xff00) | ((w) >> 24))\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkImagePainter_drawPixels\n+(JNIEnv *env, jobject obj, jobject gc_obj, jint bg_red, jint bg_green, \n+ jint bg_blue, jint x, jint y, jint width, jint height, jintArray jpixels, \n+ jint offset, jint scansize, jdoubleArray jaffine)\n+{\n+  struct graphics *g;\n+  jint *pixels, *elems;\n+  guchar *packed;\n+  int i;\n+  jsize num_pixels;\n+  guchar *j_rgba, *c_rgb;\n+\n+  g = (struct graphics *) NSA_GET_PTR (env, gc_obj);\n+\n+  elems = (*env)->GetIntArrayElements (env, jpixels, NULL);\n+  num_pixels = (*env)->GetArrayLength (env, jpixels);\n+ \n+  /* get a copy of the pixel data so we can modify it */\n+  pixels = malloc (sizeof (jint) * num_pixels);\n+  memcpy (pixels, elems, sizeof (jint) * num_pixels);\n+ \n+  (*env)->ReleaseIntArrayElements (env, jpixels, elems, 0);\n+\n+#ifndef WORDS_BIGENDIAN\n+  /* convert pixels from 0xBBGGRRAA to 0xAARRGGBB */\n+  for (i = 0; i < num_pixels; i++)\n+    pixels[i] = SWAPU32 ((unsigned)pixels[i]);\n+#endif\n+\n+  packed = (guchar *) malloc (sizeof (guchar) * 3 * num_pixels);\n+  j_rgba = (guchar *) pixels;\n+  c_rgb = packed;\n+\n+  /* copy over pixels in DirectColorModel format to 24 bit RGB image data,\n+     and process the alpha channel */\n+  for (i = 0; i < num_pixels; i++)\n+    {\n+      jint ialpha = *j_rgba++;\n+\n+      switch (ialpha)\n+\t{\n+\tcase 0:\t\t\t/* full transparency */\n+\t  *c_rgb++ = bg_red;\n+\t  *c_rgb++ = bg_green;\n+\t  *c_rgb++ = bg_blue;\n+\t  j_rgba += 3;\n+\t  break;\n+\tcase 255:\t\t/* opaque */\n+\t  *c_rgb++ = *j_rgba++;\n+\t  *c_rgb++ = *j_rgba++;\n+\t  *c_rgb++ = *j_rgba++;\n+\t  break;\n+\tdefault:\t\t/* compositing required */\n+\t  {\n+\t    jfloat alpha = ialpha / 255.0;\n+\t    jfloat comp_alpha = 1.0 - alpha;\n+\t    \n+\t    *c_rgb++ = *j_rgba++ * alpha + bg_red * comp_alpha;\n+\t    *c_rgb++ = *j_rgba++ * alpha + bg_green * comp_alpha;\n+\t    *c_rgb++ = *j_rgba++ * alpha + bg_blue * comp_alpha;\n+\t  }\n+\t  break;\n+\t}\n+    }\n+\n+  if (jaffine)\n+    {\n+      jdouble *affine;\n+      ArtAlphaGamma *alphagamma = NULL;\n+      art_u8 *dst;\n+      int new_width, new_height;\n+      int i;\n+      \n+      affine = (*env)->GetDoubleArrayElements (env, jaffine, NULL);\n+\n+      new_width = abs (width * affine[0]);\n+      new_height = abs (height * affine[3]);\n+\n+      dst = (art_u8 *) malloc (sizeof (art_u8) * 3 * (new_width * new_height));\n+      \n+      art_rgb_affine (dst, \n+\t\t      0, 0,\n+\t\t      new_width, new_height,\n+\t\t      new_width * 3,\n+\t\t      (art_u8 *) packed + offset * 3,\n+\t\t      width, height,\n+\t\t      scansize * 3,\n+\t\t      affine,\n+\t\t      ART_FILTER_NEAREST,\n+\t\t      alphagamma);\n+\n+      (*env)->ReleaseDoubleArrayElements (env, jaffine, affine, JNI_ABORT);\n+      \n+      free (packed);\n+      packed = (guchar *) dst;\n+\n+      width = scansize = new_width;\n+      height = new_height;\n+      offset = 0;\n+    }\n+\n+  gdk_threads_enter ();\n+\n+  gdk_draw_rgb_image (g->drawable,\n+\t\t      g->gc,\n+\t\t      x + g->x_offset, \n+\t\t      y + g->y_offset, \n+\t\t      width, height, GDK_RGB_DITHER_NORMAL,\n+\t\t      packed + offset * 3, scansize * 3);\n+\n+  gdk_threads_leave ();\n+\n+  free (pixels); \n+  free (packed);\n+}"}, {"sha": "9313a8a815b5fb4263799d7bcc4f6273d6cfb9f7", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkLabelPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,57 @@\n+/* gtklabelpeer.c -- Native implementation of GtkLabelPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkLabelPeer.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkLabelPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  GtkWidget *label;\n+  GtkContainer *ebox;\n+\n+  gdk_threads_enter ();\n+  ebox = GTK_CONTAINER (gtk_type_new (gtk_event_box_get_type ()));\n+  label = GTK_WIDGET (gtk_type_new (gtk_label_get_type ()));\n+  gtk_container_add (ebox, label);\n+  gtk_widget_show (label);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, ebox);\n+}"}, {"sha": "5787ce5083eb7a6e943a2df32b87a584eb2b65b5", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c", "status": "added", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,381 @@\n+/* gtklistpeer.c -- Native implementation of GtkListPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkListPeer.h\"\n+\n+static void\n+connect_selectable_hook (JNIEnv *env, jobject peer_obj, GtkCList *list);\n+\n+#define CLIST_FROM_SW(obj) (GTK_CLIST(GTK_SCROLLED_WINDOW (obj)->container.child))\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkListPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  GtkWidget *list, *sw;\n+\n+  gdk_threads_enter ();\n+  list = gtk_clist_new (1);\n+  gtk_widget_show (list);\n+  sw = gtk_scrolled_window_new (NULL, NULL);\n+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n+\t\t\t\t  GTK_POLICY_AUTOMATIC,\n+\t\t\t\t  GTK_POLICY_AUTOMATIC);\n+  gtk_container_add (GTK_CONTAINER (sw), list);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, sw);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkListPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_selectable_hook (env, obj, CLIST_FROM_SW (ptr));\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkListPeer_append \n+  (JNIEnv *env, jobject obj, jobjectArray items)\n+{\n+  void *ptr;\n+  GtkCList *list;\n+  jint count, i;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  count = (*env)->GetArrayLength (env, items);\n+\n+  gdk_threads_enter ();\n+  list = CLIST_FROM_SW (ptr);\n+  for (i = 0; i < count; i++) \n+    {\n+      const char *text;\n+      jobject item;\n+\n+      item = (*env)->GetObjectArrayElement (env, items, i);\n+\n+      text = (*env)->GetStringUTFChars (env, item, NULL);\n+      gtk_clist_append (list, (char **)&text);\n+      (*env)->ReleaseStringUTFChars (env, item, text);\n+    }\n+\n+  gtk_clist_columns_autosize (list);\n+  gdk_threads_leave ();\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkListPeer_old_create\n+  (JNIEnv *env, jobject obj, jobject parent_obj,\n+   jobjectArray items, jboolean mode)\n+{\n+  GtkWidget *list, *sw, *parent;\n+  jsize count, i;\n+\n+  parent = NSA_GET_PTR (env, parent_obj);\n+\n+  count = (*env)->GetArrayLength (env, items);\n+\n+  gdk_threads_enter ();\n+\n+  list = gtk_clist_new (1);\n+  gtk_widget_show (list);\n+\n+  sw = gtk_scrolled_window_new (NULL, NULL);\n+  set_parent (sw, GTK_CONTAINER (parent));\n+  gtk_widget_realize (sw);\n+\n+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n+\t\t\t\t  GTK_POLICY_AUTOMATIC,\n+\t\t\t\t  GTK_POLICY_AUTOMATIC);\n+  gtk_container_add (GTK_CONTAINER (sw), list);\n+\n+  connect_selectable_hook (env, obj, GTK_CLIST (list));\n+  connect_awt_hook (env, obj, 1, list->window);\n+\n+  gtk_clist_set_selection_mode (GTK_CLIST (list),\n+\t\t\t\tmode ? GTK_SELECTION_MULTIPLE : \n+\t\t\t\t       GTK_SELECTION_SINGLE);\n+  \n+  for (i = 0; i < count; i++) \n+    {\n+      const char *text;\n+      jobject item;\n+\n+      item = (*env)->GetObjectArrayElement (env, items, i);\n+\n+      text = (*env)->GetStringUTFChars (env, item, NULL);\n+      gtk_clist_append (GTK_CLIST (list), (char **)&text);\n+      (*env)->ReleaseStringUTFChars (env, item, text);\n+    }\n+\n+  gtk_clist_columns_autosize (GTK_CLIST (list));\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, sw);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_add\n+  (JNIEnv *env, jobject obj, jstring text, jint index)\n+{\n+  void *ptr;\n+  const char *str;\n+    \n+  ptr = NSA_GET_PTR (env, obj);\n+  str = (*env)->GetStringUTFChars (env, text, NULL);\n+\n+  gdk_threads_enter ();\n+  gtk_clist_insert (CLIST_FROM_SW (ptr), index, (char **)&str);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, text, str);\n+}\n+\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_delItems\n+  (JNIEnv *env, jobject obj, jint start, jint end)\n+{\n+  void *ptr;\n+  GtkCList *list;\n+  jint i;\n+    \n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  list = CLIST_FROM_SW (ptr);\n+\n+  if (end == -1)\t\t/* special case for removing all rows */\n+    end = list->rows;\n+\n+  gtk_clist_freeze (list);\n+  for (i = start; i < end; i++)\n+    gtk_clist_remove (list, i);\n+  gtk_clist_thaw (list);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_select\n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+    \n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_clist_select_row (CLIST_FROM_SW (ptr), index, 0);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_deselect\n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_clist_unselect_row (CLIST_FROM_SW (ptr), index, 0);\n+  gdk_threads_leave ();\n+}\n+\n+/* FIXME: magic mojo (that doesn't seem to do anything) */\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_getSize\n+  (JNIEnv *env, jobject obj, jint rows, jintArray jdims)\n+{\n+  void *ptr;\n+  jint *dims;\n+  GtkWidget *list;\n+  GtkScrolledWindow *sw;\n+  GtkRequisition myreq;\n+\n+  dims = (*env)->GetIntArrayElements (env, jdims, NULL);\n+  dims[0] = dims[1] = 0;\n+\n+  if (rows < 3)\n+    rows = 3;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  gdk_threads_enter ();\n+\n+  list = GTK_WIDGET (CLIST_FROM_SW (ptr));\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+\n+  /*\n+  gtk_widget_size_request(GTK_WIDGET (GTK_SCROLLED_WINDOW(sw)->hscrollbar), \n+                                      &myreq);\n+  dims[1]=myreq.height+GTK_SCROLLED_WINDOW_CLASS \n+    (GTK_OBJECT (sw)->klass)->scrollbar_spacing;\n+  */\n+\n+  gtk_signal_emit_by_name (GTK_OBJECT (GTK_SCROLLED_WINDOW(sw)->vscrollbar), \n+\t\t\t   \"size_request\", &myreq);\n+  /*\n+\n+    gtk_widget_size_request(GTK_WIDGET (GTK_SCROLLED_WINDOW(sw)->vscrollbar), \n+                                      &myreq);\n+  */\n+\n+  dims[0]=myreq.width+GTK_SCROLLED_WINDOW_CLASS\n+    (GTK_OBJECT (sw)->klass)->scrollbar_spacing;\n+\n+  gtk_signal_emit_by_name (GTK_OBJECT (list), \"size_request\", &myreq);\n+  \n+  //  gtk_widget_size_request(GTK_WIDGET (list), &myreq);\n+                                      \n+  dims[0] += myreq.width + gdk_char_width (list->style->font, 'W');\n+             \n+  dims[1] += ((rows * (gdk_char_height (list->style->font, 'W')+7))\n+\t      + (2 * (list->style->klass->ythickness)));\n+\t\t \n+  \n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseIntArrayElements (env, jdims, dims, 0);\n+}\n+\n+\n+JNIEXPORT jintArray JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_getSelectedIndexes\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkCList *list;\n+  jintArray selection;\n+  jint *sel;\n+  GList *child;\n+  jint count, i;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  gdk_threads_enter ();\n+\n+  list = CLIST_FROM_SW (ptr);\n+  count = g_list_length (list->selection);\n+\n+  selection = (*env)->NewIntArray (env, count);\n+  sel = (*env)->GetIntArrayElements (env, selection, NULL);  \n+\n+  for (i = 0, child = list->selection; i < count; i++)\n+    {\n+      sel[i] = GPOINTER_TO_INT (child->data);\n+      child = g_list_next (child);\n+    }\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseIntArrayElements (env, selection, sel, 0);\n+\n+  return selection;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_makeVisible\n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_clist_moveto (CLIST_FROM_SW (ptr), index, 0, 0.5, 0.5);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkListPeer_setMultipleMode\n+  (JNIEnv *env, jobject obj, jboolean mode)\n+{\n+  void *ptr;\n+    \n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_clist_set_selection_mode (CLIST_FROM_SW (ptr),\n+\t\t\t\tmode ? GTK_SELECTION_MULTIPLE : \n+\t\t\t\t       GTK_SELECTION_SINGLE);\n+  gdk_threads_leave ();\n+}\n+\n+static void\n+item_select (GtkCList *list, int row, int col, GdkEventButton *event, \n+\t     jobject *peer_obj)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, *peer_obj,\n+\t\t\t      postListItemEventID,\n+\t\t\t      row,\n+\t\t\t      (jint) AWT_ITEM_SELECTED);\n+}\n+\n+static void\n+item_unselect (GtkCList *list, int row, int col, GdkEventButton *event, \n+\t     jobject *peer_obj)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, *peer_obj,\n+\t\t\t      postListItemEventID,\n+\t\t\t      row,\n+\t   \t\t      (jint) AWT_ITEM_DESELECTED);\n+}\n+\n+static void\n+connect_selectable_hook (JNIEnv *env, jobject peer_obj, GtkCList *list)\n+{\n+  jobject *obj;\n+\n+  obj = (jobject *) malloc (sizeof (jobject));\n+  *obj = (*env)->NewGlobalRef (env, peer_obj);\n+\n+  gtk_signal_connect (GTK_OBJECT (list), \"select_row\", \n+\t\t      GTK_SIGNAL_FUNC (item_select), obj);\n+\n+  gtk_signal_connect (GTK_OBJECT (list), \"unselect_row\", \n+\t\t      GTK_SIGNAL_FUNC (item_unselect), obj);\n+}"}, {"sha": "af14f0be8a93bc09697fbb5bbb8af2bc157a41aa", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,163 @@\n+/* gtkmainthread.c -- Native implementation of GtkMainThread\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkMainThread.h\"\n+#include \"gthread-jni.h\"\n+\n+#ifdef JVM_SUN\n+  struct state_table *native_state_table;\n+#endif\n+\n+jmethodID postActionEventID;\n+jmethodID postMenuActionEventID;\n+jmethodID postMouseEventID;\n+jmethodID postConfigureEventID;\n+jmethodID postExposeEventID;\n+jmethodID postKeyEventID;\n+jmethodID postFocusEventID;\n+jmethodID postAdjustmentEventID;\n+jmethodID postItemEventID;\n+jmethodID postListItemEventID;\n+JNIEnv *gdk_env;\n+\n+/*\n+ * Call gtk_init.  It is very important that this happen before any other\n+ * gtk calls.\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkInit (JNIEnv *env, jclass clazz)\n+{\n+  int argc = 1;\n+  char **argv;\n+  char *homedir, *rcpath = NULL;\n+/*    jclass gtkgenericpeer; */\n+  jclass gtkcomponentpeer, gtkwindowpeer, gtkscrollbarpeer, gtklistpeer, gtkmenuitempeer;\n+\n+  NSA_INIT (env, clazz);\n+\n+  /* GTK requires a program's argc and argv variables, and requires that they\n+     be valid.  */\n+\n+  argv = (char **) malloc (sizeof (char *) * 2);\n+  argv[0] = \"\";\n+  argv[1] = NULL;\n+\n+  /* until we have JDK 1.2 JNI, assume we have a VM with threads that \n+     match what GLIB was compiled for */\n+  g_thread_init (NULL);\n+\n+  gtk_init (&argc, &argv);\n+\n+  gdk_rgb_init ();\n+  gtk_widget_set_default_colormap (gdk_rgb_get_cmap ());\n+  gtk_widget_set_default_visual (gdk_rgb_get_visual ());\n+\n+  /* Make sure queued calls don't get sent to GTK/GDK while \n+     we're shutting down. */\n+  atexit (gdk_threads_enter);\n+\n+  gdk_env = env;\n+  gdk_event_handler_set ((GdkEventFunc)awt_event_handler, NULL, NULL);\n+\n+  if ((homedir = getenv (\"HOME\")))\n+    {\n+      rcpath = (char *) malloc (strlen (homedir) + strlen (RC_FILE) + 2);\n+      sprintf (rcpath, \"%s/%s\", homedir, RC_FILE);\n+    }\n+  \n+  gtk_rc_parse ((rcpath) ? rcpath : RC_FILE);\n+\n+  if (rcpath)\n+    free (rcpath);\n+\n+  free (argv);\n+\n+  /* setup cached IDs for posting GTK events to Java */\n+/*    gtkgenericpeer = (*env)->FindClass (env,  */\n+/*  \t\t\t\t      \"gnu/java/awt/peer/gtk/GtkGenericPeer\"); */\n+  gtkcomponentpeer = (*env)->FindClass (env,\n+\t\t\t\t     \"gnu/java/awt/peer/gtk/GtkComponentPeer\");\n+  gtkwindowpeer = (*env)->FindClass (env,\n+\t\t\t\t     \"gnu/java/awt/peer/gtk/GtkWindowPeer\");\n+  gtkscrollbarpeer = (*env)->FindClass (env, \n+\t\t\t\t     \"gnu/java/awt/peer/gtk/GtkScrollbarPeer\");\n+  gtklistpeer = (*env)->FindClass (env, \"gnu/java/awt/peer/gtk/GtkListPeer\");\n+  gtkmenuitempeer = (*env)->FindClass (env, \"gnu/java/awt/peer/gtk/GtkMenuItemPeer\");\n+/*    gdkColor = (*env)->FindClass (env, */\n+/*  \t\t\t\t\"gnu/java/awt/peer/gtk/GdkColor\"); */\n+/*    gdkColorID = (*env)->GetMethodID (env, gdkColor, \"<init>\", \"(III)V\"); */\n+/*    postActionEventID = (*env)->GetMethodID (env, gtkgenericpeer,  */\n+/*  \t\t\t\t\t   \"postActionEvent\",  */\n+/*  \t\t\t\t\t   \"(Ljava/lang/String;I)V\"); */\n+\n+  postMenuActionEventID = (*env)->GetMethodID (env, gtkmenuitempeer,\n+\t\t\t\t\t       \"postMenuActionEvent\",\n+\t\t\t\t\t       \"()V\");\n+  postMouseEventID = (*env)->GetMethodID (env, gtkcomponentpeer, \n+\t\t\t\t\t  \"postMouseEvent\", \"(IJIIIIZ)V\");\n+  postConfigureEventID = (*env)->GetMethodID (env, gtkwindowpeer, \n+\t\t\t\t\t  \"postConfigureEvent\", \"(IIIIIIII)V\");\n+  postExposeEventID = (*env)->GetMethodID (env, gtkcomponentpeer, \n+\t\t\t\t\t  \"postExposeEvent\", \"(IIII)V\");\n+  postKeyEventID = (*env)->GetMethodID (env, gtkcomponentpeer,\n+\t\t\t\t\t\"postKeyEvent\", \"(IJIIC)V\");\n+  postFocusEventID = (*env)->GetMethodID (env, gtkcomponentpeer,\n+\t\t\t\t\t  \"postFocusEvent\", \"(IZ)V\");\n+  postAdjustmentEventID = (*env)->GetMethodID (env, gtkscrollbarpeer,\n+\t\t\t\t\t       \"postAdjustmentEvent\", \n+\t\t\t\t\t       \"(II)V\");\n+  postItemEventID = (*env)->GetMethodID (env, gtkcomponentpeer,\n+\t\t\t\t\t \"postItemEvent\", \n+\t\t\t\t\t \"(Ljava/lang/Object;I)V\");\n+  postListItemEventID = (*env)->GetMethodID (env, gtklistpeer,\n+\t\t\t\t\t     \"postItemEvent\",\n+\t\t\t\t\t     \"(II)V\");\n+}\n+\n+/*\n+ * Run gtk_main and block.\n+ */ \n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkMain (JNIEnv *env, jobject obj)\n+{\n+  gdk_threads_enter ();\n+  gtk_main ();\n+  gdk_threads_leave ();\n+}"}, {"sha": "89818e05fb1df15c067e93c6740494821f5a76a9", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuBarPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,81 @@\n+/* gtkmenubarpeer.c -- Native implementation of GtkMenuBarPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkMenuBarPeer.h\"\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  GtkWidget *widget;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_menu_bar_new ();\n+  gtk_widget_show (widget);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_addMenu\n+  (JNIEnv *env, jobject obj, jobject menupeer)\n+{\n+  void *mbar, *menu;\n+\n+  mbar = NSA_GET_PTR (env, obj);\n+  menu = NSA_GET_PTR (env, menupeer);\n+\n+  gdk_threads_enter ();\n+  gtk_menu_bar_append (GTK_MENU_BAR (mbar), GTK_WIDGET (menu));\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuBarPeer_delMenu\n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+  GList *list;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  list = gtk_container_children (GTK_CONTAINER (ptr));\n+  list = g_list_nth (list, index);\n+  gtk_container_remove (GTK_CONTAINER (ptr), GTK_WIDGET (list->data));\n+  gdk_threads_leave ();\n+}"}, {"sha": "ee3920867a82f1824033125b72016ef301b32a19", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuItemPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,120 @@\n+/* gtkmenuitempeer.c -- Native implementation of GtkMenuItemPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkMenuItemPeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkComponentPeer.h\"\n+\n+static void\n+connect_activate_hook (JNIEnv *, jobject, GtkMenuItem *);\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_create\n+  (JNIEnv *env, jobject obj, jstring label)\n+{\n+  GtkWidget *widget;\n+  const char *str;\n+\n+  str = (*env)->GetStringUTFChars (env, label, NULL);\n+\n+  gdk_threads_enter ();\n+\n+  if (strcmp (str, \"-\") == 0) /* \"-\" signals that we need a separator */\n+    widget = gtk_menu_item_new ();\n+  else\n+    widget = gtk_menu_item_new_with_label (str);\n+\n+  connect_activate_hook (env, obj, GTK_MENU_ITEM (widget));\n+  gtk_widget_show (widget);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, label, str);\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_setLabel\n+  (JNIEnv *env, jobject obj, jstring label)\n+{\n+  void *ptr;\n+  const char *str;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  str = (*env)->GetStringUTFChars (env, label, NULL);\n+\n+  gdk_threads_enter ();\n+\n+  if (strcmp (str, \"-\") == 0) /* \"-\" signals that we need a separator */\n+    gtk_container_remove (GTK_CONTAINER (ptr), GTK_BIN (ptr)->child);\n+  else\n+    {\n+      GtkAccelLabel *accel_label = GTK_ACCEL_LABEL (GTK_BIN (ptr)->child);\n+\n+      gtk_label_set_text (GTK_LABEL (accel_label), str);\n+      gtk_accel_label_refetch (accel_label);\n+    }\n+\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, label, str);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuItemPeer_setEnabled\n+  (JNIEnv *env, jobject obj, jboolean enabled)\n+{\n+/*    Java_gnu_java_awt_peer_gtk_GtkComponentPeer_setEnabled (env, obj, enabled); */\n+}\n+\n+static void\n+item_activate (GtkMenuItem *item, jobject *peer_obj)\n+{\n+  (*gdk_env)->CallVoidMethod (gdk_env, *peer_obj,\n+\t\t\t      postMenuActionEventID);\n+}\n+\n+static void\n+connect_activate_hook (JNIEnv *env, jobject peer_obj, GtkMenuItem *item)\n+{\n+  jobject *obj;\n+\n+  obj = (jobject *) malloc (sizeof (jobject));\n+  *obj = (*env)->NewGlobalRef (env, peer_obj);\n+\n+  gtk_signal_connect (GTK_OBJECT (item), \"activate\", \n+\t\t      GTK_SIGNAL_FUNC (item_activate), obj);\n+}"}, {"sha": "ec8154276cd6fca5844561a39b05f13d12111565", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMenuPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,152 @@\n+/* gtkmenupeer.c -- Native implementation of GtkMenuPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkMenuPeer.h\"\n+\n+static void\n+accel_attach (GtkMenuItem *menu_item, gpointer *user_data)\n+{\n+  GtkAccelGroup *accel;\n+\n+  accel = gtk_menu_get_accel_group (GTK_MENU (menu_item->submenu));\n+  gtk_accel_group_attach (accel, \n+    GTK_OBJECT (gtk_widget_get_toplevel (GTK_WIDGET(menu_item))));\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_setupAccelGroup\n+  (JNIEnv *env, jobject obj, jobject parent)\n+{\n+  void *ptr1, *ptr2;\n+\n+  ptr1 = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  if (!parent)\n+    {\n+      gtk_menu_set_accel_group (GTK_MENU (GTK_MENU_ITEM (ptr1)->submenu), \n+\t\t\t\tgtk_accel_group_new ());\n+\n+      if (GTK_WIDGET_REALIZED (GTK_WIDGET (ptr1)))\n+\taccel_attach (GTK_MENU_ITEM (ptr1), NULL);\n+      else\n+\tgtk_signal_connect (GTK_OBJECT (ptr1),\n+\t\t\t    \"realize\",\n+\t\t\t    GTK_SIGNAL_FUNC (accel_attach), \n+\t\t\t    NULL);\n+    }\n+  else\n+    {\n+      GtkAccelGroup *parent_accel;\n+\n+      ptr2 = NSA_GET_PTR (env, parent);\n+      parent_accel = gtk_menu_get_accel_group (GTK_MENU (GTK_MENU_ITEM (ptr2)->submenu));\n+      \n+      gtk_menu_set_accel_group (GTK_MENU (GTK_MENU_ITEM (ptr1)->submenu),\n+\t\t\t\tparent_accel);\n+    }\n+      \n+  gdk_threads_leave ();\n+}\n+\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_create\n+  (JNIEnv *env, jobject obj, jstring label)\n+{\n+  GtkWidget *menu_title, *menu;\n+  const char *str;\n+\n+  str = (*env)->GetStringUTFChars (env, label, NULL);\n+\n+  gdk_threads_enter ();\n+  menu = gtk_menu_new ();\n+  \n+  menu_title = gtk_menu_item_new_with_label (str);\n+  gtk_menu_item_set_submenu (GTK_MENU_ITEM (menu_title), menu);\n+\n+  gtk_widget_show (menu);\n+  gtk_widget_show (menu_title);\n+\n+  NSA_SET_PTR (env, obj, menu_title);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, label, str);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_addItem\n+  (JNIEnv *env, jobject obj, jobject menuitempeer, jint key, jboolean shift)\n+{\n+  void *ptr1, *ptr2;\n+  GtkMenu *menu;\n+\n+  ptr1 = NSA_GET_PTR (env, obj);\n+  ptr2 = NSA_GET_PTR (env, menuitempeer);\n+\n+  gdk_threads_enter ();\n+\n+  menu = GTK_MENU (GTK_MENU_ITEM (ptr1)->submenu);\n+  gtk_menu_append (menu, GTK_WIDGET (ptr2));\n+\n+  if (key)\n+    {\n+      gtk_widget_add_accelerator (GTK_WIDGET (ptr2), \"activate\",\n+\t\t\t\t  gtk_menu_get_accel_group (menu), key, \n+\t\t\t\t  (GDK_CONTROL_MASK\n+\t\t\t\t   | ((shift) ? GDK_SHIFT_MASK : 0)), \n+\t\t\t\t  GTK_ACCEL_VISIBLE);\n+    }\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkMenuPeer_delItem\n+  (JNIEnv *env, jobject obj, jint index)\n+{\n+  void *ptr;\n+  GList *list;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  list = gtk_container_children (GTK_CONTAINER (ptr));\n+  list = g_list_nth (list, index);\n+  gtk_container_remove (GTK_CONTAINER (ptr), GTK_WIDGET (list->data));\n+  gdk_threads_leave ();\n+}\n+\n+"}, {"sha": "b52c75d5311cbb6578db3e8d4b9bfd80a406e538", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPanelPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,137 @@\n+/* gtkpanelpeer.c -- Native implementation of GtkPanelPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkPanelPeer.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer widget;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_layout_new (NULL, NULL);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+typedef struct _GtkLayoutChild   GtkLayoutChild;\n+\n+struct _GtkLayoutChild {\n+  GtkWidget *widget;\n+  gint x;\n+  gint y;\n+};\n+\n+static\n+void sr (GtkWidget *widget, GtkRequisition *requisition, gpointer user_data)\n+{\n+  GtkLayout *layout;\n+  GtkLayoutChild *child;\n+  GList *children;\n+\n+  layout = GTK_LAYOUT (widget);\n+  requisition->width = GTK_WIDGET (widget)->allocation.width;\n+  requisition->height = GTK_WIDGET (widget)->allocation.height;\n+\n+  children = layout->children;\n+  while (children)\n+    {\n+      child = children->data;\n+      children = children->next;\n+\n+      if (GTK_WIDGET_VISIBLE (child->widget))\n+\t{\n+          requisition->height = MAX (requisition->height,\n+                                     child->y +\n+                                     child->widget->allocation.height);\n+          requisition->width = MAX (requisition->width,\n+                                    child->x +\n+                                    child->widget->allocation.width);\n+\t}\n+    }\n+\n+  requisition->height += GTK_CONTAINER (layout)->border_width * 2;\n+  requisition->width += GTK_CONTAINER (layout)->border_width * 2;\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_awt_hook (env, obj, 1, GTK_LAYOUT (ptr)->bin_window);\n+\n+/*    gtk_signal_connect (GTK_OBJECT (ptr), \"size_request\", GTK_SIGNAL_FUNC (sr), */\n+/*  \t\t      NULL); */\n+  gdk_threads_leave ();\n+}\n+\n+/*\n+ * Make a new panel.\n+ */\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_gtkPanelNew\n+    (JNIEnv *env, jobject obj, jobject parent_obj)\n+{\n+  GtkWidget *layout;\n+  void *parent;\n+\n+  parent = NSA_GET_PTR (env, parent_obj);\n+\n+  gdk_threads_enter ();\n+  layout = gtk_layout_new (NULL, NULL);\n+  \n+  set_parent (layout, GTK_CONTAINER (parent));\n+\n+  gtk_widget_realize (layout);\n+  connect_awt_hook (env, obj, 1, GTK_LAYOUT (layout)->bin_window);\n+  set_visible (layout, 1);\n+\n+  NSA_SET_PTR (env, obj, layout);\n+  gdk_threads_leave ();\n+}\n+\n+"}, {"sha": "66affcff255fd757fd58d441defe2c828fbbac88", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPopupMenuPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPopupMenuPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkPopupMenuPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,93 @@\n+/* gtkpopupmenupeer.c -- Native implementation of GtkPopupMenuPeer\n+   Copyright (C) 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkPopupMenuPeer.h\"\n+\n+struct pos\n+{\n+  gint x;\n+  gint y;\n+};\n+\n+void \n+menu_pos (GtkMenu *menu, gint *x, gint *y, gpointer user_data)\n+{\n+  struct pos *p = (struct pos *) user_data;\n+\n+  *x = p->x;\n+  *y = p->y;\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkPopupMenuPeer_show\n+  (JNIEnv *env, jobject obj, jint x, jint y, jlong time)\n+{\n+  void *ptr;\n+  struct pos *p;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  p = g_malloc (sizeof (struct pos));\n+  p->x = x;\n+  p->y = y;\n+  \n+  gdk_threads_enter ();\n+  gtk_menu_popup (GTK_MENU (GTK_MENU_ITEM (ptr)->submenu), \n+\t\t  NULL, NULL, menu_pos, p, 3, time);\n+  gdk_threads_leave ();\n+\n+  g_free (p);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkPopupMenuPeer_setupAccelGroup\n+  (JNIEnv *env, jobject obj, jobject parent)\n+{\n+  void *ptr1, *ptr2;\n+  GtkMenu *menu;\n+\n+  ptr1 = NSA_GET_PTR (env, obj);\n+  ptr2 = NSA_GET_PTR (env, parent);\n+\n+  gdk_threads_enter ();\n+  menu = GTK_MENU (GTK_MENU_ITEM (ptr1)->submenu);\n+  gtk_menu_set_accel_group (menu, gtk_accel_group_new ());\n+  gtk_accel_group_attach (gtk_menu_get_accel_group (menu),\n+\t\t\t  GTK_OBJECT (gtk_widget_get_toplevel (ptr2)));\n+  gdk_threads_leave ();\n+}"}, {"sha": "4b8787e7d931b2c5c7cf50e00e29ef791feac8cd", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollBarPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,183 @@\n+/* gtkscrollbarpeer.c -- Native implementation of GtkScrollbarPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkScrollbarPeer.h\"\n+\n+struct range_scrollbar\n+{\n+  GtkRange *range;\n+  jobject *scrollbar;\n+};\n+\n+static void \n+post_adjustment_event (GtkAdjustment *adj, struct range_scrollbar *rs)\n+{\n+  jint type;\n+\n+  switch (rs->range->scroll_type)\n+    {\n+    case GTK_SCROLL_STEP_FORWARD:\n+      type = AWT_ADJUSTMENT_UNIT_INCREMENT;\n+      break;\n+    case GTK_SCROLL_STEP_BACKWARD:\n+      type = AWT_ADJUSTMENT_UNIT_DECREMENT;\n+      break;\n+    case GTK_SCROLL_PAGE_FORWARD:\n+      type = AWT_ADJUSTMENT_BLOCK_INCREMENT;\n+      break;\n+    case GTK_SCROLL_PAGE_BACKWARD:\n+      type = AWT_ADJUSTMENT_BLOCK_DECREMENT;\n+      break;\n+    case GTK_SCROLL_JUMP:\n+      type = AWT_ADJUSTMENT_TRACK;\n+      break;\n+    default: /* GTK_SCROLL_NONE */\n+      return;\n+    }\n+  \n+  (*gdk_env)->CallVoidMethod (gdk_env, *(rs->scrollbar), postAdjustmentEventID,\n+\t\t\t      type, (jint) adj->value);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create\n+(JNIEnv *env, jobject obj, jint orientation, jint value, \n+ jint min, jint max, jint step_incr, jint page_incr, jint visible_amount)\n+{\n+  GtkWidget *sb;\n+  GtkObject *adj;\n+\n+  gdk_threads_enter ();\n+  adj = gtk_adjustment_new (value, min, max, \n+\t\t\t    step_incr, page_incr, \n+\t\t\t    visible_amount);\n+\n+  sb = (orientation) ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj)) :\n+                       gtk_hscrollbar_new (GTK_ADJUSTMENT (adj));\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, sb);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  struct range_scrollbar *rs;\n+\n+  rs = (struct range_scrollbar *) malloc (sizeof (struct range_scrollbar));\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+\n+  rs->range = GTK_RANGE (ptr);\n+  rs->scrollbar = (jobject *) malloc (sizeof (jobject));\n+  *(rs->scrollbar) = (*env)->NewGlobalRef (env, obj);\n+  gtk_signal_connect (GTK_OBJECT (GTK_RANGE (ptr)->adjustment), \n+\t\t      \"value_changed\", \n+\t\t      GTK_SIGNAL_FUNC (post_adjustment_event), rs);\n+\n+  connect_awt_hook (env, obj, 4, \n+\t\t    GTK_RANGE (ptr)->trough,\n+\t\t    GTK_RANGE (ptr)->slider,\n+\t\t    GTK_RANGE (ptr)->step_forw,\n+\t\t    GTK_RANGE (ptr)->step_back);\n+  gdk_threads_leave ();\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setLineIncrement\n+    (JNIEnv *env, jobject obj, jint amount)\n+{\n+  void *ptr;\n+  GtkAdjustment *adj;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  adj = GTK_RANGE (ptr)->adjustment;\n+  adj->step_increment = amount;\n+  gtk_adjustment_changed (adj);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setPageIncrement\n+    (JNIEnv *env, jobject obj, jint amount)\n+{\n+  void *ptr;\n+  GtkAdjustment *adj;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  adj = GTK_RANGE (ptr)->adjustment;\n+  adj->page_increment = amount;\n+  gtk_adjustment_changed (adj);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setValues\n+    (JNIEnv *env, jobject obj, jint value, jint visible, jint min, jint max)\n+{\n+  void *ptr;\n+  GtkAdjustment *adj;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  adj = GTK_RANGE (ptr)->adjustment;\n+  adj->value = value;\n+  adj->page_size = visible;\n+  adj->lower = min;\n+  adj->upper = max;\n+  gtk_adjustment_changed (adj);\n+\n+  gdk_threads_leave ();\n+}"}, {"sha": "499b3124d882a1cbe84f66ca904db7ad3a220c20", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "status": "added", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkScrollPanePeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,190 @@\n+/* gtkscrollpanepeer.c -- Native implementation of GtkScrollPanePeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkScrollPanePeer.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_create \n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer window;\n+  GtkWidget *layout;\n+\n+  gdk_threads_enter ();\n+  window = gtk_scrolled_window_new (NULL, NULL);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, window);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_setScrollPosition\n+  (JNIEnv *env, jobject obj, jint x, jint y)\n+{\n+  GtkAdjustment *hadj, *vadj;\n+  GtkScrolledWindow *sw;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+\n+  hadj = gtk_scrolled_window_get_hadjustment (sw);\n+  vadj = gtk_scrolled_window_get_vadjustment (sw);\n+\n+  gtk_adjustment_set_value (hadj, x);\n+  gtk_adjustment_set_value (vadj, y);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_gtkScrolledWindowSetHScrollIncrement\n+  (JNIEnv *env, jobject obj, jint u)\n+{\n+  GtkAdjustment *hadj;\n+  GtkScrolledWindow *sw;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW(ptr);\n+\n+  hadj = gtk_scrolled_window_get_hadjustment (sw);\n+  hadj->step_increment = u;\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_gtkScrolledWindowSetVScrollIncrement\n+  (JNIEnv *env, jobject obj, jint u)\n+{\n+  GtkAdjustment *vadj;\n+  GtkScrolledWindow *sw;\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW(ptr);\n+\n+  vadj = gtk_scrolled_window_get_hadjustment (sw);\n+  vadj->step_increment = u;\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_childResized\n+  (JNIEnv *env, jobject obj, jint width, jint height)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  return;\n+\n+  gdk_threads_enter ();\n+  gtk_widget_set_usize (GTK_BIN (ptr)->child, width, height);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_getHScrollbarHeight\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkScrolledWindow *sw;\n+  jint height;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+  height = (sw->hscrollbar_visible) ? sw->hscrollbar->allocation.height : 0;\n+  gdk_threads_leave ();\n+\n+  return height;\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_getVScrollbarWidth\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkScrolledWindow *sw;\n+  jint width;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+  width = (sw->vscrollbar_visible) ? sw->vscrollbar->allocation.width : 0;\n+  gdk_threads_leave ();\n+\n+  return width;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkScrollPanePeer_setPolicy\n+  (JNIEnv *env, jobject obj, jint policy)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  switch (policy)\n+    {\n+    case AWT_SCROLLPANE_SCROLLBARS_AS_NEEDED:\n+      policy = GTK_POLICY_AUTOMATIC;\n+      break;\n+    case AWT_SCROLLPANE_SCROLLBARS_ALWAYS:\n+      policy = GTK_POLICY_ALWAYS;\n+      break;\n+    case AWT_SCROLLPANE_SCROLLBARS_NEVER:\n+      policy = GTK_POLICY_NEVER;\n+      break;\n+    }\n+\n+  gdk_threads_enter ();\n+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (ptr), policy, policy);\n+  gdk_threads_leave ();\n+}"}, {"sha": "8f58623d573ffb5f6ae71564f0845e7caab77901", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextAreaPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,209 @@\n+/* gtktextareapeer.c -- Native implementation of GtkTextAreaPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkTextAreaPeer.h\"\n+\n+#define TEXT_FROM_SW(obj) (GTK_TEXT(GTK_SCROLLED_WINDOW (obj)->container.child))\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_create\n+  (JNIEnv *env, jobject obj, jint scroll)\n+{\n+  GtkWidget *text, *sw;\n+\n+  gdk_threads_enter ();\n+  text = gtk_text_new (NULL, NULL);\n+  gtk_widget_show (text);\n+\n+  sw = gtk_scrolled_window_new (NULL, NULL);\n+  gtk_container_add (GTK_CONTAINER (sw), text);\n+\n+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n+\n+     /* horizontal scrollbar */\n+     (scroll == AWT_TEXTAREA_SCROLLBARS_BOTH\n+      || scroll == AWT_TEXTAREA_SCROLLBARS_HORIZONTAL_ONLY) ? \n+       GTK_POLICY_ALWAYS : GTK_POLICY_NEVER,\n+\n+     /* vertical scrollbar */\n+     (scroll == AWT_TEXTAREA_SCROLLBARS_BOTH\n+      || scroll == AWT_TEXTAREA_SCROLLBARS_VERTICAL_ONLY) ? \n+       GTK_POLICY_ALWAYS : GTK_POLICY_NEVER);\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, sw);\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_old_create\n+  (JNIEnv *env, jobject obj, jobject parent_obj, \n+   jstring contents, jint scroll)\n+{\n+  GtkWidget *text, *sw;\n+  const char *str;\n+  int pos=0;\n+  void *parent;\n+\n+  parent = NSA_GET_PTR (env, parent_obj);\n+  str = (*env)->GetStringUTFChars (env, contents, NULL);\n+\n+  gdk_threads_enter ();\n+\n+  text = gtk_text_new (NULL, NULL);\n+  gtk_text_set_editable (GTK_TEXT (text), TRUE);\n+\n+  gtk_editable_insert_text (GTK_EDITABLE (text), str,\n+\t\t\t    strlen (str), &pos);\n+\n+  sw = gtk_scrolled_window_new (NULL, NULL);\n+  gtk_container_add (GTK_CONTAINER (sw), text);\n+  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (sw), \n+\n+     /* horizontal scrollbar */\n+     (scroll == AWT_TEXTAREA_SCROLLBARS_BOTH\n+      || scroll == AWT_TEXTAREA_SCROLLBARS_HORIZONTAL_ONLY) ? \n+       GTK_POLICY_ALWAYS : GTK_POLICY_NEVER,\n+\n+     /* vertical scrollbar */\n+     (scroll == AWT_TEXTAREA_SCROLLBARS_BOTH\n+      || scroll == AWT_TEXTAREA_SCROLLBARS_VERTICAL_ONLY) ? \n+       GTK_POLICY_ALWAYS : GTK_POLICY_NEVER);\n+\n+  set_visible (text, TRUE);\n+  set_parent (sw, GTK_CONTAINER (parent));\n+\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, contents, str);\n+\n+  NSA_SET_PTR (env, obj, sw);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_gtkTextGetSize\n+  (JNIEnv *env, jobject obj, jint rows, jint cols, jintArray jdims)\n+{\n+  void *ptr;\n+  jint *dims;\n+  GtkWidget *text;\n+  GtkScrolledWindow *sw;\n+  GtkRequisition myreq;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n+  dims[0] = dims[1] = 0;\n+\n+  gdk_threads_enter ();\n+\n+  text = GTK_WIDGET (TEXT_FROM_SW (ptr));\n+  sw = GTK_SCROLLED_WINDOW (ptr);\n+\n+  gtk_signal_emit_by_name (GTK_OBJECT (GTK_SCROLLED_WINDOW(sw)->hscrollbar), \n+\t\t\t   \"size_request\", &myreq);\n+  //gtk_widget_size_request(GTK_WIDGET (GTK_SCROLLED_WINDOW(sw)->hscrollbar), \n+  //\t\t\t\t      &myreq);\n+  dims[0]=myreq.width+GTK_SCROLLED_WINDOW_CLASS \n+    (GTK_OBJECT (sw)->klass)->scrollbar_spacing;\n+\n+  gtk_signal_emit_by_name (GTK_OBJECT (GTK_SCROLLED_WINDOW(sw)->vscrollbar), \n+\t\t\t   \"size_request\", &myreq);\n+  //gtk_widget_size_request(GTK_WIDGET (GTK_SCROLLED_WINDOW(sw)->vscrollbar), \n+  //\t\t\t\t      &myreq);\n+  dims[1]=myreq.width+GTK_SCROLLED_WINDOW_CLASS \n+    (GTK_OBJECT (sw)->klass)->scrollbar_spacing;\n+  \n+  /* The '1' in the following assignments is from \n+     #define TEXT_BORDER_ROOM         1\n+     in gtktext.c */\n+\n+  dims[0] += ((cols * gdk_char_width (text->style->font, 'W'))\n+\t     + (2 * (text->style->klass->xthickness + 1)));\n+  dims[1] += ((rows * gdk_char_height (text->style->font, 'W'))\n+\t     + (2 * (text->style->klass->ythickness + 1)));\n+\n+  gdk_threads_leave ();\n+  \n+  (*env)->ReleaseIntArrayElements (env, jdims, dims, 0);\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_insert\n+  (JNIEnv *env, jobject obj, jstring contents, jint position)\n+{\n+  void *ptr;\n+  const char *str;\n+  int pos=position;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  str = (*env)->GetStringUTFChars (env, contents, NULL);\n+  \n+  gdk_threads_enter ();\n+  gtk_editable_insert_text (GTK_EDITABLE (TEXT_FROM_SW (ptr)), \n+\t\t\t    str, strlen (str), &pos);\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, contents, str);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextAreaPeer_replaceRange\n+  (JNIEnv *env, jobject obj, jstring contents, jint start, jint end)\n+{\n+  void *ptr;\n+  GtkEditable *text;\n+  const char *str;\n+  int pos = start;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  str = (*env)->GetStringUTFChars (env, contents, NULL);\n+  \n+  gdk_threads_enter ();\n+  \n+  text = GTK_EDITABLE (TEXT_FROM_SW (ptr));\n+  gtk_text_freeze (GTK_TEXT (text));\n+  gtk_editable_delete_text (text, start, end);\n+  gtk_editable_insert_text (text, str, strlen (str), &pos);\n+  gtk_text_thaw (GTK_TEXT (text));\n+\n+  gdk_threads_leave ();\n+  (*env)->ReleaseStringUTFChars (env, contents, str);\n+}\n+"}, {"sha": "0b6db8f18408bf6ebb4d6e5faed1f2aa12088ee9", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,180 @@\n+/* gtktextcomponentpeer.c -- Native implementation of GtkTextComponentPeer\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkTextComponentPeer.h\"\n+\n+#define GET_EDITABLE(obj) (GTK_IS_EDITABLE (obj) ? GTK_EDITABLE (obj) : \\\n+  GTK_EDITABLE (GTK_SCROLLED_WINDOW (obj)->container.child))\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getCaretPosition\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  int pos;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  pos = gtk_editable_get_position (GET_EDITABLE (ptr));\n+  gdk_threads_leave ();\n+  \n+  return pos;\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setCaretPosition\n+  (JNIEnv *env, jobject obj, jint pos)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_editable_set_position (GET_EDITABLE (ptr), pos);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getSelectionStart\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  int pos;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  pos = GET_EDITABLE (ptr)->selection_start_pos;\n+  gdk_threads_leave ();\n+\n+  return pos;\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getSelectionEnd\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  int pos;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  pos = GET_EDITABLE (ptr)->selection_end_pos;\n+  gdk_threads_leave ();\n+\n+  return pos;\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_select\n+  (JNIEnv *env, jobject obj, jint start, jint end)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_editable_select_region (GET_EDITABLE (ptr), start, end);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setEditable\n+  (JNIEnv *env, jobject obj, jboolean state)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_editable_set_editable (GET_EDITABLE (ptr), state);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT jstring JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getText\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  char *contents;\n+  jstring jcontents;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  contents = gtk_editable_get_chars (GET_EDITABLE (ptr), 0, -1);\n+  gdk_threads_leave ();\n+\n+  jcontents = (*env)->NewStringUTF (env, contents);\n+  g_free (contents);\n+\n+  return jcontents;\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setText\n+  (JNIEnv *env, jobject obj, jstring contents)\n+{\n+  void *ptr;\n+  GtkEditable *text;\n+  const char *str;\n+  int pos = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  str = (*env)->GetStringUTFChars (env, contents, NULL);\n+  \n+  gdk_threads_enter ();\n+\n+  text = GET_EDITABLE (ptr);\n+\n+  if (GTK_IS_TEXT (text))\n+    gtk_text_freeze (GTK_TEXT (text));\n+\n+  gtk_editable_delete_text (text, 0, -1);\n+  gtk_editable_insert_text (text, str, strlen (str), &pos);\n+\n+  if (GTK_IS_TEXT (text))\n+    gtk_text_thaw (GTK_TEXT (text));\n+\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseStringUTFChars (env, contents, str);\n+}"}, {"sha": "9085a57937da2bafec5a0792a50f358e01c0af4c", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,150 @@\n+/* gtktextfieldpeer.c -- Native implementation of GtkTextFieldPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkTextFieldPeer.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_create\n+  (JNIEnv *env, jobject obj)\n+{\n+  gpointer widget;\n+\n+  gdk_threads_enter ();\n+  widget = gtk_type_new (gtk_entry_get_type ());\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, widget);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_awt_hook (env, obj, 2, \n+\t\t    GTK_WIDGET (ptr)->window, \n+\t\t    GTK_ENTRY (ptr)->text_area);\n+  gdk_threads_leave ();\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_old_create\n+  (JNIEnv *env, jobject obj, jobject parent_obj, jstring text)\n+{\n+  GtkWidget *entry;\n+  const char *str;\n+  void *parent;\n+\n+  parent = NSA_GET_PTR (env, parent_obj);\n+\n+  str = (*env)->GetStringUTFChars (env, text, NULL);\n+  gdk_threads_enter ();\n+\n+  entry = gtk_entry_new ();\n+  gtk_entry_set_text (GTK_ENTRY (entry), str);\n+\n+  set_parent (entry, GTK_CONTAINER (parent));\n+\n+  gtk_widget_realize (entry);\n+  connect_awt_hook (env, obj, 2, \n+\t\t    entry->window, GTK_ENTRY (entry)->text_area);\n+\n+  NSA_SET_PTR (env, obj, entry);\n+\n+  gdk_threads_leave ();\n+  (*env)->ReleaseStringUTFChars (env, text, str);\n+}\n+\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_gtkEntryGetSize\n+  (JNIEnv *env, jobject obj, jint cols, jintArray jdims)\n+{\n+  void *ptr;\n+  jint *dims;\n+  GtkRequisition myreq;\n+  GtkEntry *entry;\n+  \n+  ptr = NSA_GET_PTR (env, obj);\n+  dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n+  \n+  gdk_threads_enter ();\n+  entry = GTK_ENTRY (ptr);\n+\n+  gtk_signal_emit_by_name (GTK_OBJECT (entry), \"size_request\", &myreq);  \n+  \n+  dims[0]=myreq.width-150 + (cols * \n+\t\t\t     gdk_char_width (GTK_WIDGET (entry)->style->font,\n+\t\t\t\t\t    'W'));\n+  dims[1]=myreq.height;\n+  \n+  gdk_threads_leave ();\n+  \n+  (*env)->ReleaseIntArrayElements (env, jdims, dims, 0);\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_setEchoChar\n+  (JNIEnv *env, jobject obj, jchar c)\n+{\n+  void *ptr;\n+  GtkEntry *entry;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  entry = GTK_ENTRY (ptr);\n+    \n+  if (c!=0)\n+    {\n+/*        gtk_entry_set_echo_char (entry, c); */\n+      gtk_entry_set_visibility (entry, FALSE);\n+    }\n+  else\n+    gtk_entry_set_visibility (entry, TRUE);\n+\n+  gdk_threads_leave ();\n+}"}, {"sha": "1436badea5a09da2eb402f5e96d5685fe34289f1", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkToolkit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkToolkit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkToolkit.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,87 @@\n+/* gtktoolkit.c -- Native portion of GtkToolkit\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkToolkit.h\"\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkToolkit_beep (JNIEnv *env, jobject obj)\n+{\n+  gdk_threads_enter ();\n+  gdk_beep ();\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkToolkit_sync (JNIEnv *env, jobject obj)\n+{\n+  gdk_threads_enter ();\n+  gdk_flush ();\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkToolkit_getScreenSizeDimensions\n+(JNIEnv *env, jobject obj, jintArray jdims)\n+{\n+  jint *dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n+\n+  gdk_threads_enter ();\n+\n+  dims[0] = gdk_screen_width ();\n+  dims[1] = gdk_screen_height ();\n+\n+  gdk_threads_leave ();\n+\n+  (*env)->ReleaseIntArrayElements(env, jdims, dims, 0);\n+}\n+\n+JNIEXPORT jint JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkToolkit_getScreenResolution (JNIEnv *env, \n+\t\t\t\t\t\t\t   jobject obj)\n+{\n+  jint res;\n+\n+  gdk_threads_enter ();\n+\n+  res = gdk_screen_width () / (gdk_screen_width_mm () / 25.4);\n+\n+  gdk_threads_leave ();\n+  return res;\n+}\n+"}, {"sha": "3b7c06bf05717a554ae2bddca5059a2d3fe5610b", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c", "status": "added", "additions": 365, "deletions": 0, "changes": 365, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkWindowPeer.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,365 @@\n+/* gtkwindowpeer.c -- Native implementation of GtkWindowPeer\n+   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gtkpeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkWindowPeer.h\"\n+#include \"gnu_java_awt_peer_gtk_GtkFramePeer.h\"\n+#include <gdk/gdkprivate.h>\n+#include <gdk/gdkx.h>\n+\n+static void setBounds (GtkWidget *, jint, jint, jint, jint);\n+\n+/*\n+ * Make a new window (any type)\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_create \n+  (JNIEnv *env, jobject obj, jint type)\n+{\n+  gpointer window;\n+  GtkWidget *vbox, *layout;\n+\n+  gdk_threads_enter ();\n+  window = gtk_window_new (type);\n+\n+  vbox = gtk_vbox_new (0, 0);\n+  layout = gtk_layout_new (NULL, NULL);\n+  gtk_box_pack_end (GTK_BOX (vbox), layout, 1, 1, 0);\n+  gtk_container_add (GTK_CONTAINER (window), vbox);\n+\n+  gtk_widget_show (layout);\n+  gtk_widget_show (vbox);\n+\n+  gdk_threads_leave ();\n+\n+  NSA_SET_PTR (env, obj, window);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setVisible\n+  (JNIEnv *env, jobject obj, jboolean visible)\n+{\n+  void *ptr;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  if (visible)\n+    gtk_widget_show (GTK_WIDGET (ptr));\n+  else\n+    gtk_widget_hide (GTK_WIDGET (ptr));\n+\n+  XFlush (GDK_DISPLAY ());\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_connectHooks\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GtkWidget *layout;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  layout = GTK_WIDGET (gtk_container_children (GTK_CONTAINER (GTK_BIN (ptr)->child))->data);\n+  gtk_widget_realize (layout);\n+  connect_awt_hook (env, obj, 1, GTK_LAYOUT (layout)->bin_window);\n+  \n+  gtk_widget_realize (GTK_WIDGET (ptr));\n+  connect_awt_hook (env, obj, 1, GTK_WIDGET (ptr)->window);\n+  gdk_threads_leave ();\n+}\n+\n+void\n+setup_window (JNIEnv *env, jobject obj, GtkWidget *window, jint width, \n+\t      jint height, jboolean visible)\n+{\n+  GtkWidget *layout, *vbox;\n+  gint x, y;\n+\n+  gtk_window_set_policy (GTK_WINDOW (window), 1, 1, 0);\n+  gtk_widget_set_usize (window, width, height);\n+\n+  vbox = gtk_vbox_new (0, 0);\n+  layout = gtk_layout_new (NULL, NULL);\n+  gtk_box_pack_end (GTK_BOX (vbox), layout, 1, 1, 0);\n+  gtk_container_add (GTK_CONTAINER (window), vbox);\n+  gtk_widget_realize (layout);\n+  connect_awt_hook (env, obj, 1, GTK_LAYOUT(layout)->bin_window);\n+  gtk_widget_show (layout);\n+  gtk_widget_show (vbox);\n+\n+  gtk_widget_realize (window);\n+/*    setBounds (window, x, y, width, height); */\n+\n+  connect_awt_hook (env, obj, 1, window->window);\n+  set_visible (window, visible);\n+}\n+\n+/*\n+ * Set a frame's title\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setTitle\n+  (JNIEnv *env, jobject obj, jstring title)\n+{\n+  void *ptr;\n+  const char *str;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  str = (*env)->GetStringUTFChars (env, title, NULL);\n+  \n+  gdk_threads_enter ();\n+  gtk_window_set_title (GTK_WINDOW (ptr), str);\n+  gdk_threads_leave ();\n+  \n+  (*env)->ReleaseStringUTFChars (env, title, str);\n+}\n+\n+/*\n+ * Set a window's resizing policy\n+ */\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setResizable\n+  (JNIEnv *env, jobject obj, jboolean resize)\n+{\n+  void *ptr;\n+  \n+  ptr = NSA_GET_PTR (env, obj);\n+  \n+  gdk_threads_enter ();\n+  gtk_window_set_policy (GTK_WINDOW (ptr), resize, resize, 0);\n+  gdk_threads_leave ();\n+}\n+\n+\n+/*\n+ * Lower the z-level of a window. \n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_toBack (JNIEnv *env, \n+    jobject obj)\n+{\n+  void *ptr;\n+  ptr = NSA_GET_PTR (env, obj);\n+    \n+  gdk_threads_enter ();\n+  gdk_window_lower (GTK_WIDGET (ptr)->window);\n+\n+  XFlush (GDK_DISPLAY ());\n+  gdk_threads_leave ();\n+}\n+\n+/*\n+ * Raise the z-level of a window.\n+ */\n+\n+JNIEXPORT void JNICALL \n+Java_gnu_java_awt_peer_gtk_GtkWindowPeer_toFront (JNIEnv *env, \n+    jobject obj)\n+{\n+  void *ptr;\n+  ptr = NSA_GET_PTR (env, obj);\n+    \n+  gdk_threads_enter ();\n+  gdk_window_raise (GTK_WIDGET (ptr)->window);\n+\n+  XFlush (GDK_DISPLAY ());\n+  gdk_threads_leave ();\n+}\n+\n+static void\n+setBounds (GtkWidget *widget, jint x, jint y, jint width, jint height)\n+{\n+  gint current_x, current_y;\n+  gint origin_x, origin_y;\n+\n+/*    gdk_window_get_root_origin (widget->window, &current_x, &current_y); */\n+\n+/*    if (current_x != x || current_y != y) */\n+/*      { */\n+/*        gdk_window_set_hints (widget->window, x, y, 0, 0, 0, 0, GDK_HINT_POS); */\n+/*        gdk_window_move (widget->window, x, y); */\n+/*      } */\n+\n+  gtk_widget_set_usize (widget, width, height);\n+}\n+\n+JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkWindowPeer_setBounds\n+  (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)\n+{\n+  void *ptr;\n+  GtkWidget *widget;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+\n+  widget = GTK_WIDGET (ptr);\n+  setBounds (widget, x, y, width, height);\n+\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkFramePeer_setMenuBarPeer\n+  (JNIEnv *env, jobject obj, jobject menubar)\n+{\n+  void *wptr, *mptr;\n+  GtkBox *box;\n+\n+  if (!menubar) return;\n+\n+  wptr = NSA_GET_PTR (env, obj);\n+  mptr = NSA_GET_PTR (env, menubar);\n+\n+  if (!mptr) return; /* this case should remove a menu */\n+\n+  gdk_threads_enter ();\n+  box = GTK_BOX (GTK_BIN (wptr)->child);\n+  gtk_box_pack_start (box, GTK_WIDGET (mptr), 0, 0, 0);\n+  gdk_threads_leave ();\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkFramePeer_getMenuBarHeight\n+  (JNIEnv *env, jobject obj)\n+{\n+  void *ptr;\n+  GList *children;\n+  jint height = 0;\n+\n+  ptr = NSA_GET_PTR (env, obj);\n+\n+  gdk_threads_enter ();\n+  children = gtk_container_children (GTK_CONTAINER (GTK_BIN (ptr)->child));\n+  if (g_list_length (children) == 2)\n+    {\n+      GtkWidget *menubar = GTK_WIDGET (children->data);\n+      height = menubar->allocation.height;\n+\n+    }\n+  gdk_threads_leave ();\n+\n+  return height;\n+}\n+\n+\n+void\n+gdk_window_get_root_geometry (GdkWindow *window,\n+\t\t\t      gint      *x,\n+\t\t\t      gint      *y,\n+\t\t\t      gint      *width,\n+\t\t\t      gint      *height,\n+\t\t\t      gint      *border,\n+\t\t\t      gint      *depth)\n+{\n+  GdkWindowPrivate *private;\n+  Window xwindow;\n+  Window xparent;\n+  Window root;\n+  Window *children;\n+  unsigned int nchildren;\n+  \n+  g_return_if_fail (window != NULL);\n+  \n+  private = (GdkWindowPrivate*) window;\n+  if (x)\n+    *x = 0;\n+  if (y)\n+    *y = 0;\n+  if (width)\n+    *width = 0;\n+  if (height)\n+    *height = 0;\n+  if (border)\n+    *border = 0;\n+  if (depth)\n+    *depth = 0;\n+\n+  if (private->destroyed)\n+    return;\n+  \n+  while (private->parent && ((GdkWindowPrivate*) private->parent)->parent)\n+    private = (GdkWindowPrivate*) private->parent;\n+  if (private->destroyed)\n+    return;\n+  \n+  xparent = private->xwindow;\n+  do\n+    {\n+      xwindow = xparent;\n+      if (!XQueryTree (private->xdisplay, xwindow,\n+\t\t       &root, &xparent,\n+\t\t       &children, &nchildren))\n+\treturn;\n+      \n+      if (children)\n+\tXFree (children);\n+    }\n+  while (xparent != root);\n+  \n+  if (xparent == root)\n+    {\n+      unsigned int ww, wh, wb, wd;\n+      int wx, wy;\n+      \n+      if (XGetGeometry (private->xdisplay, xwindow, &root, &wx, &wy, &ww, &wh, &wb, &wd))\n+\t{\n+\t  if (x)\n+\t    *x = wx;\n+\t  if (y)\n+\t    *y = wy;\n+\t  if (width)\n+\t    *width = ww;\n+\t  if (height)\n+\t    *height = wh;\n+\t  if (border)\n+\t    *border = wb;\n+\t  if (depth)\n+\t    *depth = wd;\n+\t}\n+    }\n+}\n+"}, {"sha": "9409720f9acebad6b5f1fc0fd73514f44d10077a", "filename": "libjava/jni/gtk-peer/gthread-jni.c", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,169 @@\n+/* gthread-jni.c -- JNI threading routines for GLIB\n+   Copyright (C) 1998 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include \"gthread-jni.h\"\n+\n+/*\n+ * This code has been written specifically to be used with GTK+ 1.2.\n+ * `Real' GLIB threading is not supported.  We fake things where necessary.\n+ * Once we know we're running on a 1.2 VM, we can write a real implementation.\n+ */\n+\n+static GMutex *\n+g_mutex_new_jni_impl (void)\n+{\n+  jclass obj_class;\n+  jobject *mutex;\n+\n+  obj_class = (*gdk_env)->FindClass (gdk_env, \"java/lang/Object\");\n+  if (obj_class == NULL)\n+    return NULL;\n+\n+  mutex = (jobject *) g_malloc (sizeof (jobject));\n+  *mutex = (*gdk_env)->AllocObject (gdk_env, obj_class);\n+  if (*mutex == NULL)\n+    {\n+      g_free (mutex);\n+      return NULL;\n+    }\n+  *mutex = (*gdk_env)->NewGlobalRef (gdk_env, *mutex);\n+\n+  return (GMutex *) mutex;\n+}\n+\n+static void\n+g_mutex_lock_jni_impl (GMutex *mutex)\n+{\n+  if (mutex && mutex == gdk_threads_mutex)\n+    (*gdk_env)->MonitorEnter (gdk_env, *((jobject *)mutex));\n+}\n+\n+static gboolean\n+g_mutex_trylock_jni_impl (GMutex *mutex)\n+{\n+  return FALSE;\n+}\n+\n+static void\n+g_mutex_unlock_jni_impl (GMutex *mutex)\n+{\n+  if (mutex && mutex == gdk_threads_mutex)\n+    (*gdk_env)->MonitorExit (gdk_env, *((jobject *)mutex));\n+}\n+\n+static void\n+g_mutex_free_jni_impl (GMutex *mutex)\n+{\n+  if (mutex && mutex == gdk_threads_mutex)\n+    {\n+      (*gdk_env)->DeleteGlobalRef (gdk_env, *((jobject *)mutex));\n+      g_free (mutex);\n+    }\n+}\n+\n+static GPrivate *\n+g_private_new_jni_impl (GDestroyNotify notify)\n+{\n+  return NULL;\n+}\n+\n+static gpointer\n+g_private_get_jni_impl (GPrivate *private)\n+{\n+  return NULL;\n+}\n+\n+static void\n+g_private_set_jni_impl (GPrivate *private, gpointer data)\n+{\n+}\n+\n+static GCond *\n+g_cond_new_jni_impl ()\n+{\n+  return NULL;\n+}\n+\n+static void\n+g_cond_signal_jni_impl (GCond *cond)\n+{\n+}\n+\n+static void\n+g_cond_broadcast_jni_impl (GCond *cond)\n+{\n+}\n+\n+static void\n+g_cond_wait_jni_impl (GCond *cond, GMutex *mutex)\n+{\n+}\n+\n+static gboolean\n+g_cond_timed_wait_jni_impl (GCond *cond, GMutex *mutex)\n+{\n+  return FALSE;\n+}\n+\n+static void\n+g_cond_free_jni_impl (GCond *cond)\n+{\n+}\n+\n+GThreadFunctions g_thread_jni_functions =\n+{\n+  g_mutex_new_jni_impl,\t      /* mutex_new */\n+  g_mutex_lock_jni_impl,      /* mutex_lock */\n+  g_mutex_trylock_jni_impl,   /* mutex_try_lock */\n+  g_mutex_unlock_jni_impl,    /* mutex_unlock */\n+  g_mutex_free_jni_impl,      /* mutex_free */\n+  g_cond_new_jni_impl,        /* cond_new */\n+  g_cond_signal_jni_impl,     /* cond_signal */\n+  g_cond_broadcast_jni_impl,  /* cond_broadcast */\n+  g_cond_wait_jni_impl,       /* cond_wait */\n+  g_cond_timed_wait_jni_impl, /* cond_timed_wait */\n+  g_cond_free_jni_impl,       /* cond_free */\n+  g_private_new_jni_impl,     /* private_new */\n+  g_private_get_jni_impl,     /* private_get */\n+  g_private_set_jni_impl      /* private_set */\n+};\n+\n+void\n+gdk_threads_wake ()\n+{\n+}"}, {"sha": "0bb5a56f1d8afa2216d750929a4d1bbfd2dd461a", "filename": "libjava/jni/gtk-peer/gthread-jni.h", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,47 @@\n+/* gthread-jni.h\n+   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+#ifndef __GTHREADJNI_H__\n+#define __GTHREADJNI_H__\n+\n+#include <jni.h>\n+#include <glib.h>\n+#include \"gtkpeer.h\"\n+\n+extern GThreadFunctions g_thread_jni_functions;\n+\n+#endif /* __GTHREADJNI_H__ */"}, {"sha": "fa1f19b5a1df7de62369ba19b3b2d8a9362c1875", "filename": "libjava/jni/gtk-peer/gtkpeer.h", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,299 @@\n+/* gtkpeer.h -- Some global variables and #defines\n+   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+#include <gtk/gtk.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <config.h>\n+#include \"native_state.h\"\n+\n+#include <jni.h>\n+\n+#define RC_FILE      \".classpath-gtkrc\"\n+#define JVM_SUN\n+/*\n+  #define JVM_JAPHAR\n+*/\n+\n+#ifndef __GTKPEER_H__\n+#define __GTKPEER_H__\n+\n+#ifdef JVM_SUN\n+\n+extern struct state_table *native_state_table;\n+\n+#define NSA_INIT(env, clazz) \\\n+  native_state_table = init_state_table (env, clazz)\n+\n+#define NSA_GET_PTR(env, obj) \\\n+  get_state (env, obj, native_state_table)\n+\n+#define NSA_SET_PTR(env, obj, ptr) \\\n+  set_state (env, obj, native_state_table, (void *)ptr)\n+\n+#define NSA_DEL_PTR(env, obj) \\\n+  remove_state_slot (env, obj, native_state_table)\n+\n+#endif /* JVM_SUN */\n+\n+struct graphics\n+{\n+  GdkDrawable *drawable;\n+  GdkGC *gc;\n+  GdkColormap *cm;\n+  jint x_offset, y_offset;\n+};\n+\n+#define AWT_DEFAULT_CURSOR 0\n+#define AWT_CROSSHAIR_CURSOR 1\n+#define AWT_TEXT_CURSOR 2\n+#define AWT_WAIT_CURSOR 3\n+#define AWT_SW_RESIZE_CURSOR 4\n+#define AWT_SE_RESIZE_CURSOR 5\n+#define AWT_NW_RESIZE_CURSOR 6\n+#define AWT_NE_RESIZE_CURSOR 7\n+#define AWT_N_RESIZE_CURSOR 8\n+#define AWT_S_RESIZE_CURSOR 9\n+#define AWT_W_RESIZE_CURSOR 10\n+#define AWT_E_RESIZE_CURSOR 11\n+#define AWT_HAND_CURSOR 12\n+#define AWT_MOVE_CURSOR 13\n+\n+#define SYNTHETIC_EVENT_MASK (1 << 10)\n+\n+#define AWT_SHIFT_MASK   (1 << 0)\n+#define AWT_CTRL_MASK    (1 << 1)\n+#define AWT_META_MASK    (1 << 2)\n+#define AWT_ALT_MASK     (1 << 3)\n+\n+#define AWT_BUTTON1_MASK (1 << 4)\n+#define AWT_BUTTON2_MASK AWT_ALT_MASK\n+#define AWT_BUTTON3_MASK AWT_META_MASK\n+\n+#define MULTI_CLICK_TIME   250\n+/* as opposed to a MULTI_PASS_TIME :) */\n+\n+#define AWT_MOUSE_CLICKED  500\n+#define AWT_MOUSE_PRESSED  501\n+#define AWT_MOUSE_RELEASED 502\n+#define AWT_MOUSE_MOVED    503\n+#define AWT_MOUSE_ENTERED  504\n+#define AWT_MOUSE_EXITED   505\n+#define AWT_MOUSE_DRAGGED  506\n+\n+#define AWT_ADJUSTMENT_UNIT_INCREMENT 1\n+#define AWT_ADJUSTMENT_UNIT_DECREMENT 2\n+#define AWT_ADJUSTMENT_BLOCK_DECREMENT 3\n+#define AWT_ADJUSTMENT_BLOCK_INCREMENT 4\n+#define AWT_ADJUSTMENT_TRACK 5\n+\n+#define AWT_SCROLLPANE_SCROLLBARS_AS_NEEDED 0\n+#define AWT_SCROLLPANE_SCROLLBARS_ALWAYS 1\n+#define AWT_SCROLLPANE_SCROLLBARS_NEVER 2\n+\n+#define AWT_LABEL_LEFT 0\n+#define AWT_LABEL_CENTER 1\n+#define AWT_LABEL_RIGHT 2\n+\n+#define AWT_TEXTAREA_SCROLLBARS_BOTH 0\n+#define AWT_TEXTAREA_SCROLLBARS_VERTICAL_ONLY 1\n+#define AWT_TEXTAREA_SCROLLBARS_HORIZONTAL_ONLY 2\n+\n+#define AWT_ITEM_SELECTED 1\n+#define AWT_ITEM_DESELECTED 2\n+     \n+#define AWT_KEY_TYPED    400\n+#define AWT_KEY_PRESSED  401\n+#define AWT_KEY_RELEASED 402\n+\n+#define VK_UNDEFINED   0\n+#define AWT_KEY_CHAR_UNDEFINED 0\n+\n+#define VK_0 48\n+#define VK_1 49\n+#define VK_2 50\n+#define VK_3 51\n+#define VK_4 52\n+#define VK_5 53\n+#define VK_6 54\n+#define VK_7 55\n+#define VK_8 56\n+#define VK_9 57\n+#define VK_A 65\n+#define VK_ACCEPT 30\n+#define VK_ADD 107\n+#define VK_ALT 18\n+#define VK_B 66\n+#define VK_BACK_QUOTE 192\n+#define VK_BACK_SLASH 92\n+#define VK_BACK_SPACE 8\n+#define VK_C 67\n+#define VK_CANCEL 3\n+#define VK_CAPS_LOCK 20\n+#define VK_CLEAR 12 \n+#define VK_CLOSE_BRACKET 93\n+#define VK_COMMA 44\n+#define VK_CONTROL 17\n+#define VK_CONVERT 28\n+#define VK_D 68\n+#define VK_DECIMAL 110\n+#define VK_DELETE 127\n+#define VK_DIVIDE 111\n+#define VK_DOWN 40\n+#define VK_E 69\n+#define VK_END 35\n+#define VK_ENTER 10\n+#define VK_ESCAPE 27\n+#define VK_F 70\n+#define VK_F1 112\n+#define VK_F10 121\n+#define VK_F11 122\n+#define VK_F12 123\n+#define VK_F2 113\n+#define VK_F3 114\n+#define VK_F4 115\n+#define VK_F5 116\n+#define VK_F6 117\n+#define VK_F7 118\n+#define VK_F8 119\n+#define VK_F9 120\n+#define VK_FINAL 24\n+#define VK_G 71\n+#define VK_H 72\n+#define VK_HELP 156\n+#define VK_HOME 36\n+#define VK_I 73\n+#define VK_INSERT 155\n+#define VK_J 74\n+#define VK_K 75\n+#define VK_KANA 21\n+#define VK_KANJI 25\n+#define VK_L 76\n+#define VK_LEFT 37\n+#define VK_M 77\n+#define VK_META 157\n+#define VK_MODECHANGE 31\n+#define VK_MULTIPLY 106\n+#define VK_N 78\n+#define VK_NONCONVERT 29\n+#define VK_NUM_LOCK 144\n+#define VK_NUMPAD0 96\n+#define VK_NUMPAD1 97\n+#define VK_NUMPAD2 98\n+#define VK_NUMPAD3 99\n+#define VK_NUMPAD4 100\n+#define VK_NUMPAD5 101\n+#define VK_NUMPAD6 102\n+#define VK_NUMPAD7 103\n+#define VK_NUMPAD8 104\n+#define VK_NUMPAD9 105\n+#define VK_O 79\n+#define VK_OPEN_BRACKET 91\n+#define VK_P 80\n+#define VK_PAGE_DOWN 34\n+#define VK_PAGE_UP 33\n+#define VK_PAUSE 19\n+#define VK_PERIOD 46\n+#define VK_PRINTSCREEN 154\n+#define VK_Q 81\n+#define VK_QUOTE 222\n+#define VK_R 82\n+#define VK_RIGHT 39\n+#define VK_S 83\n+#define VK_SCROLL_LOCK 145\n+#define VK_SEMICOLON 59\n+#define VK_SEPARATOR 108\n+#define VK_SHIFT 16\n+#define VK_SLASH 47\n+#define VK_SPACE 32\n+#define VK_SUBTRACT 109\n+#define VK_T 84\n+#define VK_TAB 9\n+#define VK_U 85\n+#define VK_UP 38\n+#define VK_V 86\n+#define VK_W 87\n+#define VK_X 88\n+#define VK_Y 89\n+#define VK_Z 90\n+\n+#define AWT_FOCUS_LOST 1004\n+#define AWT_FOCUS_GAINED 1005\n+\n+extern jmethodID postActionEventID;\n+extern jmethodID postMenuActionEventID;\n+extern jmethodID postMouseEventID;\n+extern jmethodID postConfigureEventID;\n+extern jmethodID postExposeEventID;\n+extern jmethodID postKeyEventID;\n+extern jmethodID postFocusEventID;\n+extern jmethodID postAdjustmentEventID;\n+extern jmethodID postItemEventID;\n+extern jmethodID postListItemEventID;\n+extern jmethodID syncAttrsID;\n+extern jclass gdkColor;\n+extern jmethodID gdkColorID;\n+extern JNIEnv *gdk_env;\n+\n+void\n+gdk_window_get_root_geometry (GdkWindow *window,\n+\t\t\t      gint      *x,\n+\t\t\t      gint      *y,\n+\t\t\t      gint      *width,\n+\t\t\t      gint      *height,\n+\t\t\t      gint      *border,\n+\t\t\t      gint      *depth);\n+\n+void awt_event_handler (GdkEvent *event);\n+\n+void connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...);\n+\n+void set_visible (GtkWidget *widget, jboolean visible);\n+void set_parent (GtkWidget *widget, GtkContainer *parent);\n+GtkLayout *find_gtk_layout (GtkWidget *parent);\n+void setup_window (JNIEnv *env, jobject obj, GtkWidget *window, jint width, \n+\t\t   jint height, jboolean visible);\n+\n+struct item_event_hook_info\n+{\n+  jobject peer_obj;\n+  jobject item_obj;\n+};\n+\n+#endif /* __GTKPEER_H */"}, {"sha": "9380a222de67e86876865b8a7019f6e8a452b1cd", "filename": "libjava/libart.m4", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Flibart.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Flibart.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flibart.m4?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -0,0 +1,165 @@\n+# Configure paths for LIBART\n+# Raph Levien 98-11-18\n+# stolen from Manish Singh    98-9-30\n+# stolen back from Frank Belew\n+# stolen from Manish Singh\n+# Shamelessly stolen from Owen Taylor\n+\n+dnl AM_PATH_LIBART([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])\n+dnl Test for LIBART, and define LIBART_CFLAGS and LIBART_LIBS\n+dnl\n+AC_DEFUN(AM_PATH_LIBART,\n+[dnl \n+dnl Get the cflags and libraries from the libart-config script\n+dnl\n+AC_ARG_WITH(libart-prefix,[  --with-libart-prefix=PFX   Prefix where LIBART is installed (optional)],\n+            libart_prefix=\"$withval\", libart_prefix=\"\")\n+AC_ARG_WITH(libart-exec-prefix,[  --with-libart-exec-prefix=PFX Exec prefix where LIBART is installed (optional)],\n+            libart_exec_prefix=\"$withval\", libart_exec_prefix=\"\")\n+AC_ARG_ENABLE(libarttest, [  --disable-libarttest       Do not try to compile and run a test LIBART program],\n+\t\t    , enable_libarttest=yes)\n+\n+  if test x$libart_exec_prefix != x ; then\n+     libart_args=\"$libart_args --exec-prefix=$libart_exec_prefix\"\n+     if test x${LIBART_CONFIG+set} != xset ; then\n+        LIBART_CONFIG=$libart_exec_prefix/bin/libart-config\n+     fi\n+  fi\n+  if test x$libart_prefix != x ; then\n+     libart_args=\"$libart_args --prefix=$libart_prefix\"\n+     if test x${LIBART_CONFIG+set} != xset ; then\n+        LIBART_CONFIG=$libart_prefix/bin/libart-config\n+     fi\n+  fi\n+\n+  AC_PATH_PROG(LIBART_CONFIG, libart-config, no)\n+  min_libart_version=ifelse([$1], ,0.2.5,$1)\n+  AC_MSG_CHECKING(for LIBART - version >= $min_libart_version)\n+  no_libart=\"\"\n+  if test \"$LIBART_CONFIG\" = \"no\" ; then\n+    no_libart=yes\n+  else\n+    LIBART_CFLAGS=`$LIBART_CONFIG $libartconf_args --cflags`\n+    LIBART_LIBS=`$LIBART_CONFIG $libartconf_args --libs`\n+\n+    libart_major_version=`$LIBART_CONFIG $libart_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\1/'`\n+    libart_minor_version=`$LIBART_CONFIG $libart_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\2/'`\n+    libart_micro_version=`$LIBART_CONFIG $libart_config_args --version | \\\n+           sed 's/\\([[0-9]]*\\).\\([[0-9]]*\\).\\([[0-9]]*\\)/\\3/'`\n+    if test \"x$enable_libarttest\" = \"xyes\" ; then\n+      ac_save_CFLAGS=\"$CFLAGS\"\n+      ac_save_LIBS=\"$LIBS\"\n+      CFLAGS=\"$CFLAGS $LIBART_CFLAGS\"\n+      LIBS=\"$LIBS $LIBART_LIBS\"\n+dnl\n+dnl Now check if the installed LIBART is sufficiently new. (Also sanity\n+dnl checks the results of libart-config to some extent\n+dnl\n+      rm -f conf.libarttest\n+      AC_TRY_RUN([\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <libart_lgpl/libart.h>\n+\n+char*\n+my_strdup (char *str)\n+{\n+  char *new_str;\n+  \n+  if (str)\n+    {\n+      new_str = malloc ((strlen (str) + 1) * sizeof(char));\n+      strcpy (new_str, str);\n+    }\n+  else\n+    new_str = NULL;\n+  \n+  return new_str;\n+}\n+\n+int main ()\n+{\n+  int major, minor, micro;\n+  char *tmp_version;\n+\n+  system (\"touch conf.libarttest\");\n+\n+  /* HP/UX 9 (%@#!) writes to sscanf strings */\n+  tmp_version = my_strdup(\"$min_libart_version\");\n+  if (sscanf(tmp_version, \"%d.%d.%d\", &major, &minor, &micro) != 3) {\n+     printf(\"%s, bad version string\\n\", \"$min_libart_version\");\n+     exit(1);\n+   }\n+\n+   if (($libart_major_version > major) ||\n+      (($libart_major_version == major) && ($libart_minor_version > minor)) ||\n+      (($libart_major_version == major) && ($libart_minor_version == minor) && ($libart_micro_version >= micro)))\n+    {\n+      return 0;\n+    }\n+  else\n+    {\n+      printf(\"\\n*** 'libart-config --version' returned %d.%d.%d, but the minimum version\\n\", $libart_major_version, $libart_minor_version, $libart_micro_version);\n+      printf(\"*** of LIBART required is %d.%d.%d. If libart-config is correct, then it is\\n\", major, minor, micro);\n+      printf(\"*** best to upgrade to the required version.\\n\");\n+      printf(\"*** If libart-config was wrong, set the environment variable LIBART_CONFIG\\n\");\n+      printf(\"*** to point to the correct copy of libart-config, and remove the file\\n\");\n+      printf(\"*** config.cache before re-running configure\\n\");\n+      return 1;\n+    }\n+}\n+\n+],, no_libart=yes,[echo $ac_n \"cross compiling; assumed OK... $ac_c\"])\n+       CFLAGS=\"$ac_save_CFLAGS\"\n+       LIBS=\"$ac_save_LIBS\"\n+     fi\n+  fi\n+  if test \"x$no_libart\" = x ; then\n+     AC_MSG_RESULT(yes)\n+     ifelse([$2], , :, [$2])     \n+  else\n+     AC_MSG_RESULT(no)\n+     if test \"$LIBART_CONFIG\" = \"no\" ; then\n+       echo \"*** The libart-config script installed by LIBART could not be found\"\n+       echo \"*** If LIBART was installed in PREFIX, make sure PREFIX/bin is in\"\n+       echo \"*** your path, or set the LIBART_CONFIG environment variable to the\"\n+       echo \"*** full path to libart-config.\"\n+     else\n+       if test -f conf.libarttest ; then\n+        :\n+       else\n+          echo \"*** Could not run LIBART test program, checking why...\"\n+          CFLAGS=\"$CFLAGS $LIBART_CFLAGS\"\n+          LIBS=\"$LIBS $LIBART_LIBS\"\n+          AC_TRY_LINK([\n+#include <stdio.h>\n+#include <libart_lgpl/libart.h>\n+],      [ return 0; ],\n+        [ echo \"*** The test program compiled, but did not run. This usually means\"\n+          echo \"*** that the run-time linker is not finding LIBART or finding the wrong\"\n+          echo \"*** version of LIBART. If it is not finding LIBART, you'll need to set your\"\n+          echo \"*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point\"\n+          echo \"*** to the installed location  Also, make sure you have run ldconfig if that\"\n+          echo \"*** is required on your system\"\n+\t  echo \"***\"\n+          echo \"*** If you have an old version installed, it is best to remove it, although\"\n+          echo \"*** you may also be able to get things to work by modifying LD_LIBRARY_PATH\"],\n+        [ echo \"*** The test program failed to compile or link. See the file config.log for the\"\n+          echo \"*** exact error that occured. This usually means LIBART was incorrectly installed\"\n+          echo \"*** or that you have moved LIBART since it was installed. In the latter case, you\"\n+          echo \"*** may want to edit the libart-config script: $LIBART_CONFIG\" ])\n+          CFLAGS=\"$ac_save_CFLAGS\"\n+          LIBS=\"$ac_save_LIBS\"\n+       fi\n+     fi\n+     LIBART_CFLAGS=\"\"\n+     LIBART_LIBS=\"\"\n+     ifelse([$3], , :, [$3])\n+  fi\n+  AC_SUBST(LIBART_CFLAGS)\n+  AC_SUBST(LIBART_LIBS)\n+  rm -f conf.libarttest\n+])"}, {"sha": "c6046e953b0e486773cbf032ef46009f30fc6035", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5aac1dac6279f13c13e4068c4c734c48f0084205/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=5aac1dac6279f13c13e4068c4c734c48f0084205", "patch": "@@ -85,10 +85,19 @@ GCLIBS = @GCLIBS@\n GCOBJS = @GCOBJS@\n GCSPEC = @GCSPEC@\n GCTESTSPEC = @GCTESTSPEC@\n+GLIB_CFLAGS = @GLIB_CFLAGS@\n+GLIB_CONFIG = @GLIB_CONFIG@\n+GLIB_LIBS = @GLIB_LIBS@\n+GTK_CFLAGS = @GTK_CFLAGS@\n+GTK_CONFIG = @GTK_CONFIG@\n+GTK_LIBS = @GTK_LIBS@\n HASH_SYNC_SPEC = @HASH_SYNC_SPEC@\n INCLTDL = @INCLTDL@\n INTERPRETER = @INTERPRETER@\n JC1GCSPEC = @JC1GCSPEC@\n+LIBART_CFLAGS = @LIBART_CFLAGS@\n+LIBART_CONFIG = @LIBART_CONFIG@\n+LIBART_LIBS = @LIBART_LIBS@\n LIBFFI = @LIBFFI@\n LIBFFIINCS = @LIBFFIINCS@\n LIBGCJDEBUG = @LIBGCJDEBUG@\n@@ -118,6 +127,7 @@ THREADLDFLAGS = @THREADLDFLAGS@\n THREADLIBS = @THREADLIBS@\n THREADOBJS = @THREADOBJS@\n THREADSPEC = @THREADSPEC@\n+TOOLKIT = @TOOLKIT@\n VERSION = @VERSION@\n ZINCS = @ZINCS@\n ZLIBS = @ZLIBS@\n@@ -129,6 +139,9 @@ here = @here@\n libgcj_basedir = @libgcj_basedir@\n mkinstalldirs = @mkinstalldirs@\n tool_include_dir = @tool_include_dir@\n+toolexecdir = @toolexecdir@\n+toolexeclibdir = @toolexeclibdir@\n+toolexecmainlibdir = @toolexecmainlibdir@\n \n AUTOMAKE_OPTIONS = foreign dejagnu\n "}]}