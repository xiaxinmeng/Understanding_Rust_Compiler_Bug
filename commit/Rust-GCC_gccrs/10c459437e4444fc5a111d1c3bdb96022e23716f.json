{"sha": "10c459437e4444fc5a111d1c3bdb96022e23716f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBjNDU5NDM3ZTQ0NDRmYzVhMTExZDFjM2JkYjk2MDIyZTIzNzE2Zg==", "commit": {"author": {"name": "Anthony Green", "email": "green@redhat.com", "date": "2002-02-04T03:03:44Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-02-04T03:03:44Z"}, "message": "output.h (SECTION_OVERRIDE): Define.\n\n2002-02-04  Anthony Green  <green@redhat.com>\n\n\t* output.h (SECTION_OVERRIDE): Define.\n\t* varasm.c (named_section): Obey SECTION_OVERRIDE.\n\njava:\n2002-02-04  Anthony Green  <green@redhat.com>\n\n\t* class.c (build_utf8_ref): Put UTF-8 constants into merged\n\tsections if available.\n\nFrom-SVN: r49469", "tree": {"sha": "9e8245138c4f5a27f756f13a4d867cb52d972455", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8245138c4f5a27f756f13a4d867cb52d972455"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10c459437e4444fc5a111d1c3bdb96022e23716f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c459437e4444fc5a111d1c3bdb96022e23716f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c459437e4444fc5a111d1c3bdb96022e23716f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c459437e4444fc5a111d1c3bdb96022e23716f/comments", "author": {"login": "atgreen", "id": 89993, "node_id": "MDQ6VXNlcjg5OTkz", "avatar_url": "https://avatars.githubusercontent.com/u/89993?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atgreen", "html_url": "https://github.com/atgreen", "followers_url": "https://api.github.com/users/atgreen/followers", "following_url": "https://api.github.com/users/atgreen/following{/other_user}", "gists_url": "https://api.github.com/users/atgreen/gists{/gist_id}", "starred_url": "https://api.github.com/users/atgreen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atgreen/subscriptions", "organizations_url": "https://api.github.com/users/atgreen/orgs", "repos_url": "https://api.github.com/users/atgreen/repos", "events_url": "https://api.github.com/users/atgreen/events{/privacy}", "received_events_url": "https://api.github.com/users/atgreen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14b7105512eb617f5a80c1853ff0f8ab18ad0324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14b7105512eb617f5a80c1853ff0f8ab18ad0324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14b7105512eb617f5a80c1853ff0f8ab18ad0324"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "babb0e450c8304d859d33f55ee6bf5a770d9107c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10c459437e4444fc5a111d1c3bdb96022e23716f", "patch": "@@ -1,3 +1,8 @@\n+2002-02-04  Anthony Green  <green@redhat.com>\n+\n+\t* output.h (SECTION_OVERRIDE): Define.\n+\t* varasm.c (named_section): Obey SECTION_OVERRIDE.\n+\n 2002-02-03  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (arm*-*-netbsdelf*): Placeholder to prevent match"}, {"sha": "f6111e749d2f33e247e4c28f95603e2d633a9686", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=10c459437e4444fc5a111d1c3bdb96022e23716f", "patch": "@@ -1,3 +1,8 @@\n+2002-02-04  Anthony Green  <green@redhat.com>\n+\n+\t* class.c (build_utf8_ref): Put UTF-8 constants into merged\n+\tsections if available.\n+\n 2002-02-04  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* parse.y (java_expand_classes): Fix typo in static field loop."}, {"sha": "367a448c72a49e09fcb2bfb728e0977f4a9088c2", "filename": "gcc/java/class.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=10c459437e4444fc5a111d1c3bdb96022e23716f", "patch": "@@ -967,7 +967,7 @@ build_utf8_ref (name)\n   char buf[60];\n   tree ctype, field = NULL_TREE, str_type, cinit, string;\n   static int utf8_count = 0;\n-  int name_hash;\n+  int name_hash, decl_size;\n   tree ref = IDENTIFIER_UTF8_REF (name);\n   tree decl;\n   if (ref != NULL_TREE)\n@@ -1000,6 +1000,20 @@ build_utf8_ref (name)\n   TREE_READONLY (decl) = 1;\n   TREE_THIS_VOLATILE (decl) = 0;\n   DECL_INITIAL (decl) = cinit;\n+#ifdef HAVE_GAS_SHF_MERGE\n+  /* Ensure decl_size is a multiple of utf8const_type's alignment. */\n+  decl_size = (name_len + 5 + TYPE_ALIGN_UNIT (utf8const_type) - 1)\n+\t       & ~(TYPE_ALIGN_UNIT (utf8const_type) - 1);\n+  if (flag_merge_constants && decl_size < 256)\n+    {\n+      char buf[32];\n+      int flags = (SECTION_OVERRIDE\n+\t\t   | SECTION_MERGE | (SECTION_ENTSIZE & decl_size));\n+      sprintf (buf, \".rodata.jutf8.%d\", decl_size);\n+      named_section_flags (buf, flags);\n+      DECL_SECTION_NAME (decl) = build_string (strlen (buf), buf);\n+    }\n+#endif\n   TREE_CHAIN (decl) = utf8_decl_list;\n   layout_decl (decl, 0);\n   pushdecl (decl);"}, {"sha": "cb5e4d089a1720dadd3030250aad5c43325bf071", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=10c459437e4444fc5a111d1c3bdb96022e23716f", "patch": "@@ -512,7 +512,8 @@ extern void no_asm_to_stream PARAMS ((FILE *));\n #define SECTION_MERGE\t 0x08000\t/* contains mergeable data */\n #define SECTION_STRINGS  0x10000\t/* contains zero terminated strings without\n \t\t\t\t\t   embedded zeros */\n-#define SECTION_MACH_DEP 0x20000\t/* subsequent bits reserved for target */\n+#define SECTION_OVERRIDE 0x20000\t/* allow override of default flags */\n+#define SECTION_MACH_DEP 0x40000\t/* subsequent bits reserved for target */\n \n extern unsigned int get_named_section_flags PARAMS ((const char *));\n extern bool set_named_section_flags\tPARAMS ((const char *, unsigned int));"}, {"sha": "8bd5807c46d32eecc9cabb9aec102e812309d42e", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c459437e4444fc5a111d1c3bdb96022e23716f/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=10c459437e4444fc5a111d1c3bdb96022e23716f", "patch": "@@ -445,11 +445,15 @@ named_section (decl, name, reloc)\n   flags = (* targetm.section_type_flags) (decl, name, reloc);\n \n   /* Sanity check user variables for flag changes.  Non-user\n-     section flag changes will abort in named_section_flags.  */\n+     section flag changes will abort in named_section_flags.\n+     However, don't complain if SECTION_OVERRIDE is set.\n+     We trust that the setter knows that it is safe to ignore\n+     the default flags for this decl.  */\n   if (decl && ! set_named_section_flags (name, flags))\n     {\n-      error_with_decl (decl, \"%s causes a section type conflict\");\n       flags = get_named_section_flags (name);\n+      if ((flags & SECTION_OVERRIDE) == 0)\n+\terror_with_decl (decl, \"%s causes a section type conflict\");\n     }\n \n   named_section_flags (name, flags);"}]}