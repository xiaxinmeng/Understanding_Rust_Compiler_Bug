{"sha": "3d95caa4af11b8aff1745cbe5eab585f5a724c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q5NWNhYTRhZjExYjhhZmYxNzQ1Y2JlNWVhYjU4NWY1YTcyNGM0MA==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-04-21T20:40:31Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-04-21T20:40:31Z"}, "message": "tree.h (GIMPLE_TUPLE_P): Also true for PHI_NODEs.\n\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * tree.h (GIMPLE_TUPLE_P): Also true for PHI_NODEs.\n        (GENERIC_NEXT): New function macro.\n        (PHI_CHAIN): Use phi_node's new chain variable.\n        (tree_phi_node): Change tree_common to tree_base\n        and add the chain field.\n        * tree-phinodes.c (make_phi_node): Don't set\n        TREE_TYPE on the new node.\n        * c-decl.c (lang_tree_node): Use GENERIC_NEXT\n        instead of checking GIMPLE_TUPLE_P in chain_next.\n        * tree-vect-transform.c\n        (get_initial_def_for_induction): Look at\n        PHI_RESULT_TREE for the type of the phi node.\n        (update_vuses_to_preheader): Use PHI_CHAIN\n        instead of TREE_CHAIN on the phi node.\n        * tree-ssa-structalias.c (compute_points_to_sets):\n        Likewise.\n        (ipa_pta_execute): Likewise.\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * cp-tree.h (lang_tree_node): Use GENERIC_NEXT\n        instead of checking GIMPLE_STMT_P in chain_next.\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * ada-tree.h (lang_tree_node): Use GENERIC_NEXT\n        instead of checking GIMPLE_STMT_P in chain_next.\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * f95-lang.c (lang_tree_node): Use GENERIC_NEXT\n        instead of checking GIMPLE_STMT_P in chain_next.\n2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        * java-tree.h (lang_tree_node): Use GENERIC_NEXT\n        instead of checking GIMPLE_STMT_P in chain_next.\n\nFrom-SVN: r124021", "tree": {"sha": "dbb4d8edec51cb4096434d4452385f35a0ef5846", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbb4d8edec51cb4096434d4452385f35a0ef5846"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d95caa4af11b8aff1745cbe5eab585f5a724c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d95caa4af11b8aff1745cbe5eab585f5a724c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d95caa4af11b8aff1745cbe5eab585f5a724c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d95caa4af11b8aff1745cbe5eab585f5a724c40/comments", "author": null, "committer": null, "parents": [{"sha": "84ece8efd21ed73d98de62e4bcf22b4160cd7faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84ece8efd21ed73d98de62e4bcf22b4160cd7faa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84ece8efd21ed73d98de62e4bcf22b4160cd7faa"}], "stats": {"total": 71, "additions": 58, "deletions": 13}, "files": [{"sha": "fe2dbaa4e982b6b24e1666c3c644b6172c03f030", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -1,3 +1,23 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* tree.h (GIMPLE_TUPLE_P): Also true for PHI_NODEs.\n+\t(GENERIC_NEXT): New function macro.\n+\t(PHI_CHAIN): Use phi_node's new chain variable.\n+\t(tree_phi_node): Change tree_common to tree_base\n+\tand add the chain field.\n+\t* tree-phinodes.c (make_phi_node): Don't set\n+\tTREE_TYPE on the new node.\n+\t* c-decl.c (lang_tree_node): Use GENERIC_NEXT\n+\tinstead of checking GIMPLE_TUPLE_P in chain_next.\n+\t* tree-vect-transform.c\n+\t(get_initial_def_for_induction): Look at\n+\tPHI_RESULT_TREE for the type of the phi node.\n+\t(update_vuses_to_preheader): Use PHI_CHAIN\n+\tinstead of TREE_CHAIN on the phi node.\n+\t* tree-ssa-structalias.c (compute_points_to_sets):\n+\tLikewise.\n+\t(ipa_pta_execute): Likewise.\n+\n 2007-04-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/31136"}, {"sha": "eab77158aba233ac6b7c7dd351143de594f7b2d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -1,3 +1,8 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* ada-tree.h (lang_tree_node): Use GENERIC_NEXT\n+\tinstead of checking GIMPLE_STMT_P in chain_next.\n+\n 2007-04-17  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \tPR ada/31576"}, {"sha": "358cecafac85e62d32cd3d793d765e9434cd7543", "filename": "gcc/ada/ada-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fada%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fada%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fada-tree.h?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -36,7 +36,7 @@ enum gnat_tree_code {\n /* Ada uses the lang_decl and lang_type fields to hold a tree.  */\n union lang_tree_node\n   GTY((desc (\"0\"),\n-       chain_next (\"(GIMPLE_STMT_P (&%h.t) ? (union lang_tree_node *) 0 : (union lang_tree_node *)TREE_CHAIN (&%h.t))\")))\n+       chain_next (\"(union lang_tree_node *)GENERIC_NEXT (&%h.generic)\")))\n \n {\n   union tree_node GTY((tag (\"0\"))) t;"}, {"sha": "3af1857179432afc06ea53bea9b4d073c32410e6", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -250,7 +250,7 @@ extern char C_SIZEOF_STRUCT_LANG_IDENTIFIER_isnt_accurate\n \n union lang_tree_node\n   GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : (GIMPLE_TUPLE_P (&%h.generic) ? (union lang_tree_node *) 0 : (union lang_tree_node *) TREE_CHAIN (&%h.generic))\")))\n+       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : ((union lang_tree_node *) GENERIC_NEXT (&%h.generic))\")))\n {\n   union tree_node GTY ((tag (\"0\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\")))"}, {"sha": "326ed7025eb471b70996c28cf3a996133df2538c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -1,3 +1,8 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* cp-tree.h (lang_tree_node): Use GENERIC_NEXT\n+\tinstead of checking GIMPLE_STMT_P in chain_next.\n+\n 2007-04-17  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/31513"}, {"sha": "27f5b8caf895ec860b0343db49fff50102f90f9a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -539,7 +539,7 @@ enum cp_tree_node_structure_enum {\n \n /* The resulting tree type.  */\n union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n-       chain_next (\"(GIMPLE_STMT_P (&%h.generic) ? (union lang_tree_node *) 0 : (union lang_tree_node *)TREE_CHAIN (&%h.generic))\")))\n+       chain_next (\"(union lang_tree_node *)GENERIC_NEXT (&%h.generic)\")))\n {\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;"}, {"sha": "a02a381ecdd616d1547608a8710a66e068ef5e2e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -1,3 +1,8 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* f95-lang.c (lang_tree_node): Use GENERIC_NEXT\n+\tinstead of checking GIMPLE_STMT_P in chain_next.\n+\n 2007-04-17  Tobias Schl\ufffdter  <tobi@gcc.gnu.org>\n \n \t* trans-types.h (gfc_packed): New enum."}, {"sha": "4995e4c543271a08e16ef6e4bc9fb49bd6cf7be0", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -62,7 +62,7 @@ GTY(())\n \n union lang_tree_node\n GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-     chain_next (\"(GIMPLE_STMT_P (&%h.generic) ? (union lang_tree_node *) 0 : (union lang_tree_node *)TREE_CHAIN (&%h.generic))\")))\n+     chain_next (\"(union lang_tree_node *)GENERIC_NEXT (&%h.generic)\")))\n \n {\n   union tree_node GTY((tag (\"0\"),"}, {"sha": "202ffc33763158d17246e45a6807f6ec643d808f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -1,3 +1,8 @@\n+2007-04-21  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\t* java-tree.h (lang_tree_node): Use GENERIC_NEXT\n+\tinstead of checking GIMPLE_STMT_P in chain_next.\n+\n 2007-04-06  Colin Walters  <walters@redhat.com>\n \n \thttps://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=161701"}, {"sha": "d560deeaeda2c28c1817ecf03099f2d581eb98a0", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -667,7 +667,7 @@ struct lang_identifier GTY(())\n /* The resulting tree type.  */\n union lang_tree_node \n   GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"(GIMPLE_STMT_P (&%h.generic) ? (union lang_tree_node *) 0 : (union lang_tree_node *)TREE_CHAIN (&%h.generic))\")))\n+       chain_next (\"(union lang_tree_node *)GENERIC_NEXT (&%h.generic)\")))\n \n {\n   union tree_node GTY ((tag (\"0\"), "}, {"sha": "a758db9afb0372e5fc6965f3377f2494758384f4", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -218,7 +218,6 @@ make_phi_node (tree var, int len)\n   TREE_SET_CODE (phi, PHI_NODE);\n   PHI_NUM_ARGS (phi) = len;\n   PHI_ARG_CAPACITY (phi) = capacity;\n-  TREE_TYPE (phi) = TREE_TYPE (var);\n   if (TREE_CODE (var) == SSA_NAME)\n     SET_PHI_RESULT (phi, var);\n   else"}, {"sha": "50ef512209bd662116f22b95bb4a3c374c5867d4", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -4793,7 +4793,7 @@ compute_points_to_sets (struct alias_info *ai)\n       block_stmt_iterator bsi;\n       tree phi;\n \n-      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t{\n \t  if (is_gimple_reg (PHI_RESULT (phi)))\n \t    {\n@@ -4946,7 +4946,7 @@ ipa_pta_execute (void)\n \t      block_stmt_iterator bsi;\n \t      tree phi;\n \n-\t      for (phi = phi_nodes (bb); phi; phi = TREE_CHAIN (phi))\n+\t      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n \t\t{\n \t\t  if (is_gimple_reg (PHI_RESULT (phi)))\n \t\t    {"}, {"sha": "e5f23a50cb10c992dffeafc80c7d08683569c6af", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -528,7 +528,7 @@ get_initial_def_for_induction (tree iv_phi)\n   stmt_vec_info stmt_vinfo = vinfo_for_stmt (iv_phi);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  tree scalar_type = TREE_TYPE (iv_phi);\n+  tree scalar_type = TREE_TYPE (PHI_RESULT_TREE (iv_phi));\n   tree vectype = get_vectype_for_scalar_type (scalar_type);\n   int nunits =  TYPE_VECTOR_SUBPARTS (vectype);\n   edge pe = loop_preheader_edge (loop);\n@@ -4547,7 +4547,7 @@ update_vuses_to_preheader (tree stmt, struct loop *loop)\n \t  tree phi;\n \t  bool updated = false;\n \n-\t  for (phi = phi_nodes (header_bb); phi; phi = TREE_CHAIN (phi))\n+\t  for (phi = phi_nodes (header_bb); phi; phi = PHI_CHAIN (phi))\n \t    {\n \t      if (SSA_NAME_VAR (PHI_RESULT (phi)) == name_var)\n \t\t{"}, {"sha": "0444ae04c5e303073015520df58ca525c2fbb936", "filename": "gcc/tree.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d95caa4af11b8aff1745cbe5eab585f5a724c40/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3d95caa4af11b8aff1745cbe5eab585f5a724c40", "patch": "@@ -951,7 +951,7 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n   (TREE_CODE_CLASS (TREE_CODE ((NODE))) == tcc_gimple_stmt)\n \n /* Nonzero if NODE is a GIMPLE tuple.  */\n-#define GIMPLE_TUPLE_P(NODE) (GIMPLE_STMT_P (NODE))\n+#define GIMPLE_TUPLE_P(NODE) (GIMPLE_STMT_P (NODE) || TREE_CODE (NODE) == PHI_NODE)\n \n /* A GIMPLE tuple that has a ``locus'' field.  */\n #define GIMPLE_TUPLE_HAS_LOCUS_P(NODE) GIMPLE_STMT_P ((NODE))\n@@ -975,6 +975,11 @@ extern void omp_clause_range_check_failed (const tree, const char *, int,\n    used in hash tables which are saved to a PCH.  */\n #define TREE_HASH(NODE) ((size_t) (NODE) & 0777777)\n \n+/* The TREE_CHAIN but it is able to handle tuples.  */\n+#define GENERIC_NEXT(NODE)\t\t\t\t\t\\\n+  (TREE_CODE (NODE) == PHI_NODE ? PHI_CHAIN (NODE) :\t\t\\\n+     GIMPLE_STMT_P (NODE) ? NULL_TREE : TREE_CHAIN (NODE))\n+\n /* Given an expression as a tree, strip any NON_LVALUE_EXPRs and NOP_EXPRs\n    that don't change the machine mode.  */\n \n@@ -1866,7 +1871,7 @@ struct tree_ssa_name GTY(())\n /* PHI_NODEs for each basic block are chained together in a single linked\n    list.  The head of the list is linked from the block annotation, and\n    the link to the next PHI is in PHI_CHAIN.  */\n-#define PHI_CHAIN(NODE)\t\tTREE_CHAIN (PHI_NODE_CHECK (NODE))\n+#define PHI_CHAIN(NODE)\t\t\tPHI_NODE_CHECK (NODE)->phi.chain\n \n #define PHI_NUM_ARGS(NODE)\t\tPHI_NODE_CHECK (NODE)->phi.num_args\n #define PHI_ARG_CAPACITY(NODE)\t\tPHI_NODE_CHECK (NODE)->phi.capacity\n@@ -1885,7 +1890,8 @@ struct phi_arg_d GTY(())\n \n struct tree_phi_node GTY(())\n {\n-  struct tree_common common;\n+  struct tree_base common;\n+  tree chain;\n   tree result;\n   int num_args;\n   int capacity;"}]}