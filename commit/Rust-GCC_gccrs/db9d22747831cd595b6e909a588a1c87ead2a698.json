{"sha": "db9d22747831cd595b6e909a588a1c87ead2a698", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI5ZDIyNzQ3ODMxY2Q1OTViNmU5MDlhNTg4YTFjODdlYWQyYTY5OA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-09-04T20:10:13Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-09-04T20:10:13Z"}, "message": "Remove -fdeduce-init-list.\n\nFrom-SVN: r275387", "tree": {"sha": "03f05bd02e32a660f7b022ceb6d2b6aea4971358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03f05bd02e32a660f7b022ceb6d2b6aea4971358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db9d22747831cd595b6e909a588a1c87ead2a698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9d22747831cd595b6e909a588a1c87ead2a698", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9d22747831cd595b6e909a588a1c87ead2a698", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9d22747831cd595b6e909a588a1c87ead2a698/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0c7800b29bd48cc0f7685f3c0da2db6fd87ef52c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c7800b29bd48cc0f7685f3c0da2db6fd87ef52c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c7800b29bd48cc0f7685f3c0da2db6fd87ef52c"}], "stats": {"total": 93, "additions": 23, "deletions": 70}, "files": [{"sha": "0f4b61da6b826107dd6c310aa43aef8601811643", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1,3 +1,7 @@\n+2019-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Remove -fdeduce-init-list documentation.\n+\n 2019-09-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR target/32413"}, {"sha": "2720e6453f5c26f02ce6ee45d400b9cf6b91386c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1,3 +1,7 @@\n+2019-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c.opt (fdeduce-init-list): Ignored.\n+\n 2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR c/78736"}, {"sha": "143833d90043046ae2094a0d8a9f26c392c93d88", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1460,8 +1460,8 @@ C ObjC C++ ObjC++\n Emit debug annotations during preprocessing.\n \n fdeduce-init-list\n-C++ ObjC++ Var(flag_deduce_init_list) Init(0)\n--fdeduce-init-list\tenable deduction of std::initializer_list for a template type parameter from a brace-enclosed initializer-list.\n+C++ ObjC++ Ignore\n+Does nothing.  Preserved for backward compatibility.\n \n fdeclone-ctor-dtor\n C++ ObjC++ Var(flag_declone_ctor_dtor) Init(-1)"}, {"sha": "605b3d72e5f919c894268efb60e92e6b0f7a222f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* call.c (build_over_call): Remove -fdeduce-init-list implementation.\n+\t* pt.c (unify): Likewise.\n+\n 2019-09-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91129 - wrong error with binary op in template argument."}, {"sha": "c3045d948c5b5ead85299cc833c6c8c476dbc415", "filename": "gcc/cp/call.c", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -8337,38 +8337,6 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n           && !(flags & LOOKUP_EXPLICIT_TMPL_ARGS))\n         conversion_warning = false;\n \n-      /* Warn about initializer_list deduction that isn't currently in the\n-\t working draft.  */\n-      if (cxx_dialect > cxx98\n-\t  && flag_deduce_init_list\n-\t  && cand->template_decl\n-\t  && is_std_init_list (non_reference (type))\n-\t  && BRACE_ENCLOSED_INITIALIZER_P (arg))\n-\t{\n-\t  tree tmpl = TI_TEMPLATE (cand->template_decl);\n-\t  tree realparm = chain_index (j, DECL_ARGUMENTS (cand->fn));\n-\t  tree patparm = get_pattern_parm (realparm, tmpl);\n-\t  tree pattype = TREE_TYPE (patparm);\n-\t  if (PACK_EXPANSION_P (pattype))\n-\t    pattype = PACK_EXPANSION_PATTERN (pattype);\n-\t  pattype = non_reference (pattype);\n-\n-\t  if (TREE_CODE (pattype) == TEMPLATE_TYPE_PARM\n-\t      && (cand->explicit_targs == NULL_TREE\n-\t\t  || (TREE_VEC_LENGTH (cand->explicit_targs)\n-\t\t      <= TEMPLATE_TYPE_IDX (pattype))))\n-\t    {\n-\t      pedwarn (input_location, 0, \"deducing %qT as %qT\",\n-\t\t       non_reference (TREE_TYPE (patparm)),\n-\t\t       non_reference (type));\n-\t      pedwarn (DECL_SOURCE_LOCATION (cand->fn), 0,\n-\t\t       \"  in call to %qD\", cand->fn);\n-\t      pedwarn (input_location, 0,\n-\t\t       \"  (you can disable this with \"\n-\t\t       \"%<-fno-deduce-init-list%>)\");\n-\t    }\n-\t}\n-\n       /* Set user_conv_p on the argument conversions, so rvalue/base handling\n \t knows not to allow any more UDCs.  This needs to happen after we\n \t process cand->warnings.  */"}, {"sha": "15cc4b20a41ad85d3fb432e0de7b4628d1680051", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -22073,11 +22073,6 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict,\n       unsigned i;\n       tree orig_parm = parm;\n \n-      /* Replace T with std::initializer_list<T> for deduction.  */\n-      if (TREE_CODE (parm) == TEMPLATE_TYPE_PARM\n-\t  && flag_deduce_init_list)\n-\tparm = listify (parm);\n-\n       if (!is_std_init_list (parm)\n \t  && TREE_CODE (parm) != ARRAY_TYPE)\n \t/* We can only deduce from an initializer list argument if the"}, {"sha": "fad19dd75d1741bd004f8d7149a1e6bfff6ce84a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -2550,28 +2550,6 @@ of a loop too many expressions need to be evaluated, the resulting constexpr\n evaluation might take too long.\n The default is 33554432 (1<<25).\n \n-@item -fdeduce-init-list\n-@opindex fdeduce-init-list\n-Enable deduction of a template type parameter as\n-@code{std::initializer_list} from a brace-enclosed initializer list, i.e.@:\n-\n-@smallexample\n-template <class T> auto forward(T t) -> decltype (realfn (t))\n-@{\n-  return realfn (t);\n-@}\n-\n-void f()\n-@{\n-  forward(@{1,2@}); // call forward<std::initializer_list<int>>\n-@}\n-@end smallexample\n-\n-This deduction was implemented as a possible extension to the\n-originally proposed semantics for the C++11 standard, but was not part\n-of the final standard, so it is disabled by default.  This option is\n-deprecated, and may be removed in a future version of G++.\n-\n @item -fno-elide-constructors\n @opindex fno-elide-constructors\n @opindex felide-constructors"}, {"sha": "ecde4ca1c93617bf27f49688f9834d4b7fc82363", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1,3 +1,8 @@\n+2019-09-04  Marek Polacek  <polacek@redhat.com>\n+\n+\t* g++.dg/cpp0x/initlist-deduce.C: Don't use -fdeduce-init-list.  Remove\n+\tdg-warning.  Add dg-error.\n+\n 2019-09-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR c/78736"}, {"sha": "59d98ef6ddaa8b47bfbba6cfcad9538dacbbd8f2", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-deduce.C", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db9d22747831cd595b6e909a588a1c87ead2a698/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-deduce.C?ref=db9d22747831cd595b6e909a588a1c87ead2a698", "patch": "@@ -1,9 +1,4 @@\n-// Test for deduction of T as std::initializer_list.  This isn't currently\n-// supported by the working draft, but is necessary for perfect forwarding\n-// of initializer-lists to things that can take a std::initializer_list.\n-\n-// { dg-options \"-fdeduce-init-list\" }\n-// { dg-do run { target c++11 } }\n+// { dg-do compile { target c++11 } }\n \n #include <initializer_list>\n \n@@ -15,14 +10,13 @@ struct A\n void f (A a) { }\n \n template <class T>\n-auto g (T&& t) -> decltype (f(t)) // { dg-warning \"call\" }\n+auto g (T&& t) -> decltype (f(t))\n {\n   return f(t);\n }\n \n int main()\n {\n-  g({1});\t\t\t// { dg-warning \"deduc\" }\n+  g({1});\t\t\t// { dg-error \"no matching function\" }\n }\n \n-// { dg-prune-output \"-fno-deduce-init-list\" }"}]}