{"sha": "a5a52dbc0976ea588964bd70052c0c9c3f9860c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNTJkYmMwOTc2ZWE1ODg5NjRiZDcwMDUyYzBjOWMzZjk4NjBjOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:51:48Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-04-18T18:51:48Z"}, "message": "(assign_parms, promoted_input_arg, expand_function_start): Use promote_mode.\n\nFrom-SVN: r7068", "tree": {"sha": "9dfdd87a0817eff20451d3f0f37a305897c7ad0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dfdd87a0817eff20451d3f0f37a305897c7ad0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a52dbc0976ea588964bd70052c0c9c3f9860c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a52dbc0976ea588964bd70052c0c9c3f9860c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a52dbc0976ea588964bd70052c0c9c3f9860c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a52dbc0976ea588964bd70052c0c9c3f9860c9/comments", "author": null, "committer": null, "parents": [{"sha": "321e0bbad67fa1cb22575cac934d0e20a7fd74df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/321e0bbad67fa1cb22575cac934d0e20a7fd74df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/321e0bbad67fa1cb22575cac934d0e20a7fd74df"}], "stats": {"total": 44, "additions": 7, "deletions": 37}, "files": [{"sha": "cb9feb8c695ef16b4433805f47f76f13b5fcf009", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a52dbc0976ea588964bd70052c0c9c3f9860c9/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a52dbc0976ea588964bd70052c0c9c3f9860c9/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=a5a52dbc0976ea588964bd70052c0c9c3f9860c9", "patch": "@@ -3196,17 +3196,7 @@ assign_parms (fndecl, second_time)\n \n #ifdef PROMOTE_FUNCTION_ARGS\n       /* Compute the mode in which the arg is actually extended to.  */\n-      if (TREE_CODE (passed_type) == INTEGER_TYPE\n-\t  || TREE_CODE (passed_type) == ENUMERAL_TYPE\n-\t  || TREE_CODE (passed_type) == BOOLEAN_TYPE\n-\t  || TREE_CODE (passed_type) == CHAR_TYPE\n-\t  || TREE_CODE (passed_type) == REAL_TYPE\n-\t  || TREE_CODE (passed_type) == POINTER_TYPE\n-\t  || TREE_CODE (passed_type) == OFFSET_TYPE)\n-\t{\n-\t  unsignedp = TREE_UNSIGNED (passed_type);\n-\t  PROMOTE_MODE (promoted_mode, unsignedp, passed_type);\n-\t}\n+      promoted_mode = promote_mode (passed_type, promoted_mode, &unsignedp, 1);\n #endif\n \n       /* Let machine desc say which reg (if any) the parm arrives in.\n@@ -3486,16 +3476,8 @@ assign_parms (fndecl, second_time)\n \t  int regno;\n \n \t  unsignedp = TREE_UNSIGNED (TREE_TYPE (parm));\n-\t  if (TREE_CODE (TREE_TYPE (parm)) == INTEGER_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == ENUMERAL_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == BOOLEAN_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == CHAR_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == REAL_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == POINTER_TYPE\n-\t      || TREE_CODE (TREE_TYPE (parm)) == OFFSET_TYPE)\n-\t    {\n-\t      PROMOTE_MODE (nominal_mode, unsignedp, TREE_TYPE (parm));\n-\t    }\n+\t  nominal_mode = promote_mode (TREE_TYPE (parm), nominal_mode,\n+\t\t\t\t       &unsignedp, 1);\n \n \t  parmreg = gen_reg_rtx (nominal_mode);\n \t  REG_USERVAR_P (parmreg) = 1;\n@@ -3820,19 +3802,12 @@ promoted_input_arg (regno, pmode, punsignedp)\n   for (arg = DECL_ARGUMENTS (current_function_decl); arg;\n        arg = TREE_CHAIN (arg))\n     if (GET_CODE (DECL_INCOMING_RTL (arg)) == REG\n-\t&& REGNO (DECL_INCOMING_RTL (arg)) == regno\n-\t&& (TREE_CODE (TREE_TYPE (arg)) == INTEGER_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == ENUMERAL_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == CHAR_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == REAL_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == POINTER_TYPE\n-\t    || TREE_CODE (TREE_TYPE (arg)) == OFFSET_TYPE))\n+\t&& REGNO (DECL_INCOMING_RTL (arg)) == regno)\n       {\n \tenum machine_mode mode = TYPE_MODE (TREE_TYPE (arg));\n \tint unsignedp = TREE_UNSIGNED (TREE_TYPE (arg));\n \n-\tPROMOTE_MODE (mode, unsignedp, TREE_TYPE (arg));\n+\tmode = promote_mode (TREE_TYPE (arg), mode, &unsignedp, 1);\n \tif (mode == GET_MODE (DECL_INCOMING_RTL (arg))\n \t    && mode != DECL_MODE (arg))\n \t  {\n@@ -4941,17 +4916,12 @@ expand_function_start (subr, parms_have_cleanups)\n \t after the cleanups are done.  */\n \n       enum machine_mode mode = DECL_MODE (DECL_RESULT (subr));\n+\n #ifdef PROMOTE_FUNCTION_RETURN\n       tree type = TREE_TYPE (DECL_RESULT (subr));\n       int unsignedp = TREE_UNSIGNED (type);\n \n-      if (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == ENUMERAL_TYPE\n-\t  || TREE_CODE (type) == BOOLEAN_TYPE || TREE_CODE (type) == CHAR_TYPE\n-\t  || TREE_CODE (type) == REAL_TYPE || TREE_CODE (type) == POINTER_TYPE\n-\t  || TREE_CODE (type) == OFFSET_TYPE)\n-\t{\n-\t  PROMOTE_MODE (mode, unsignedp, type);\n-\t}\n+      mode = promote_mode (type, mode, &unsignedp, 1);\n #endif\n \n       DECL_RTL (DECL_RESULT (subr)) = gen_reg_rtx (mode);"}]}