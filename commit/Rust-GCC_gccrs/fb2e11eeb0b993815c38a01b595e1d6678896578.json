{"sha": "fb2e11eeb0b993815c38a01b595e1d6678896578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIyZTExZWViMGI5OTM4MTVjMzhhMDFiNTk1ZTFkNjY3ODg5NjU3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T08:06:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-13T08:06:51Z"}, "message": "[multiple changes]\n\n2009-07-13  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj-nmsc.adb: Avoid traversing the list of source files if\n\twe have already processed all locally removed files.\n\n2009-07-13  Jose Ruiz  <ruiz@adacore.com>\n\n\t* gnat_ugn.texi: Fix typo.\n\n2009-07-13  Robert Dewar  <dewar@adacore.com>\n\n\t* freeze.adb: Minor reformatting\n\tMinor code reorganization (use Nkind_In)\n\n\t* exp_ch6.adb: Minor reformatting\n\nFrom-SVN: r149546", "tree": {"sha": "941b05ed8a1c04dc4eeb07191f531dec44e7459c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941b05ed8a1c04dc4eeb07191f531dec44e7459c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb2e11eeb0b993815c38a01b595e1d6678896578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2e11eeb0b993815c38a01b595e1d6678896578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2e11eeb0b993815c38a01b595e1d6678896578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2e11eeb0b993815c38a01b595e1d6678896578/comments", "author": null, "committer": null, "parents": [{"sha": "ffa61a5ee88bced356a16485bdf5702d7ee04b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffa61a5ee88bced356a16485bdf5702d7ee04b1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffa61a5ee88bced356a16485bdf5702d7ee04b1a"}], "stats": {"total": 128, "additions": 75, "deletions": 53}, "files": [{"sha": "c2fd750ed6ddd35e2d807eea98da2daf274d0418", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fb2e11eeb0b993815c38a01b595e1d6678896578", "patch": "@@ -1,3 +1,19 @@\n+2009-07-13  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj-nmsc.adb: Avoid traversing the list of source files if\n+\twe have already processed all locally removed files.\n+\n+2009-07-13  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* gnat_ugn.texi: Fix typo.\n+\n+2009-07-13  Robert Dewar  <dewar@adacore.com>\n+\n+\t* freeze.adb: Minor reformatting\n+\tMinor code reorganization (use Nkind_In)\n+\n+\t* exp_ch6.adb: Minor reformatting\n+\n 2009-07-11  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* checks.adb (Apply_Address_Clause_Check): Remove Size_Warning_Output"}, {"sha": "2d80cbcc62c5853978e48111ed0805e774a3f3ee", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=fb2e11eeb0b993815c38a01b595e1d6678896578", "patch": "@@ -4669,7 +4669,6 @@ package body Exp_Ch6 is\n       if Ekind (Subp) = E_Function then\n          Resolve (N, Etype (Subp));\n       end if;\n-\n    end Expand_Protected_Subprogram_Call;\n \n    --------------------------------"}, {"sha": "231ec877a81d4d8e98cca550fcc7b187cf0df9f7", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=fb2e11eeb0b993815c38a01b595e1d6678896578", "patch": "@@ -1133,8 +1133,7 @@ package body Freeze is\n          Par := Parent (Par);\n       end if;\n \n-      if (Nkind (Par) = N_Object_Declaration\n-            or else Nkind (Par) = N_Assignment_Statement)\n+      if Nkind_In (Par, N_Object_Declaration, N_Assignment_Statement)\n         and then Comes_From_Source (Par)\n       then\n          Temp :=\n@@ -1469,7 +1468,7 @@ package body Freeze is\n       ----------------------------\n \n       function After_Last_Declaration return Boolean is\n-         Spec  : constant Node_Id := Parent (Current_Scope);\n+         Spec : constant Node_Id := Parent (Current_Scope);\n       begin\n          if Nkind (Spec) = N_Package_Specification then\n             if Present (Private_Declarations (Spec)) then\n@@ -1534,9 +1533,7 @@ package body Freeze is\n          --  either a tagged type, or a limited record.\n \n          if Is_Limited_Type (Rec_Type)\n-           and then\n-             (Ada_Version < Ada_05\n-               or else Is_Tagged_Type (Rec_Type))\n+           and then (Ada_Version < Ada_05 or else Is_Tagged_Type (Rec_Type))\n          then\n             return;\n \n@@ -2367,16 +2364,16 @@ package body Freeze is\n            and then Present (Expression (Parent (E)))\n            and then Nkind (Expression (Parent (E))) = N_Aggregate\n            and then\n-            Expand_Atomic_Aggregate (Expression (Parent (E)), Etype (E))\n+             Expand_Atomic_Aggregate (Expression (Parent (E)), Etype (E))\n          then\n             null;\n          end if;\n \n          --  For a subprogram, freeze all parameter types and also the return\n          --  type (RM 13.14(14)). However skip this for internal subprograms.\n          --  This is also the point where any extra formal parameters are\n-         --  created since we now know whether the subprogram will use\n-         --  a foreign convention.\n+         --  created since we now know whether the subprogram will use a\n+         --  foreign convention.\n \n          if Is_Subprogram (E) then\n             if not Is_Internal (E) then\n@@ -2402,12 +2399,10 @@ package body Freeze is\n                         --  If the type of a formal is incomplete, subprogram\n                         --  is being frozen prematurely. Within an instance\n                         --  (but not within a wrapper package) this is an\n-                        --  an artifact of our need to regard the end of an\n+                        --  artifact of our need to regard the end of an\n                         --  instantiation as a freeze point. Otherwise it is\n                         --  a definite error.\n \n-                        --  and then not Is_Wrapper_Package (Current_Scope) ???\n-\n                         if In_Instance then\n                            Set_Is_Frozen (E, False);\n                            return No_List;"}, {"sha": "b7e4bcf16f3aeac9a32917734268e3a58308123d", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=fb2e11eeb0b993815c38a01b595e1d6678896578", "patch": "@@ -13310,7 +13310,7 @@ file. If the order of the source directories is not known statically, it is\n an error to have several files with the same source file name.\n \n Projects can be specified to have no Ada source\n-files: the value of (@code{Source_Dirs} or @code{Source_Files} may be an empty\n+files: the value of @code{Source_Dirs} or @code{Source_Files} may be an empty\n list, or the @code{\"Ada\"} may be absent from @code{Languages}:\n \n @smallexample @c projectfile"}, {"sha": "03acdb0e2ba4b3f9e93557e76da7ab478aa3732d", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb2e11eeb0b993815c38a01b595e1d6678896578/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=fb2e11eeb0b993815c38a01b595e1d6678896578", "patch": "@@ -7796,60 +7796,72 @@ package body Prj.Nmsc is\n          Excluded : File_Found;\n          Proj     : Project_Id;\n       begin\n-         Proj := Project;\n-         while Proj /= No_Project loop\n-            Iter := For_Each_Source (In_Tree, Proj);\n-            while Prj.Element (Iter) /= No_Source loop\n-               Source   := Prj.Element (Iter);\n-               Excluded := Excluded_Sources_Htable.Get\n-                 (Excluded_Sources, Source.File);\n-\n-               if Excluded /= No_File_Found then\n-                  Source.Locally_Removed := True;\n-                  Source.In_Interfaces   := False;\n+         --  Minor optimization: if there are no excluded files, no need to\n+         --  traverse the list of sources. We cannot however also check whether\n+         --  the existing exceptions have \".Found\" set to True (indicating we\n+         --  found them before) because we need to do some final processing on\n+         --  them in any case.\n \n-                  if Current_Verbosity = High then\n-                     Write_Str (\"Removing file \");\n-                     Write_Line\n-                       (Get_Name_String (Excluded.File)\n-                        & \" \" & Get_Name_String (Source.Project.Name));\n+         if Excluded_Sources_Htable.Get_First (Excluded_Sources) /=\n+           No_File_Found\n+         then\n+            Proj := Project;\n+            while Proj /= No_Project loop\n+               Iter := For_Each_Source (In_Tree, Proj);\n+               while Prj.Element (Iter) /= No_Source loop\n+                  Source   := Prj.Element (Iter);\n+                  Excluded := Excluded_Sources_Htable.Get\n+                    (Excluded_Sources, Source.File);\n+\n+                  if Excluded /= No_File_Found then\n+                     Source.Locally_Removed := True;\n+                     Source.In_Interfaces   := False;\n+\n+                     if Current_Verbosity = High then\n+                        Write_Str (\"Removing file \");\n+                        Write_Line\n+                          (Get_Name_String (Excluded.File)\n+                           & \" \" & Get_Name_String (Source.Project.Name));\n+                     end if;\n+\n+                     Excluded_Sources_Htable.Remove\n+                       (Excluded_Sources, Source.File);\n                   end if;\n \n-                  Excluded_Sources_Htable.Remove\n-                    (Excluded_Sources, Source.File);\n-               end if;\n+                  Next (Iter);\n+               end loop;\n \n-               Next (Iter);\n+               Proj := Proj.Extends;\n             end loop;\n-\n-            Proj := Proj.Extends;\n-         end loop;\n+         end if;\n \n          --  If we have any excluded element left, that means we did not find\n          --  the source file\n \n          Excluded := Excluded_Sources_Htable.Get_First (Excluded_Sources);\n          while Excluded /= No_File_Found loop\n+            if not Excluded.Found then\n \n-            --  Check if the file belongs to another imported project to\n-            --  provide a better error message.\n+               --  Check if the file belongs to another imported project to\n+               --  provide a better error message.\n \n-            Src := Find_Source\n-              (In_Tree          => In_Tree,\n-               Project          => Project,\n-               In_Imported_Only => True,\n-               Base_Name        => Excluded.File);\n+               Src := Find_Source\n+                 (In_Tree          => In_Tree,\n+                  Project          => Project,\n+                  In_Imported_Only => True,\n+                  Base_Name        => Excluded.File);\n \n-            Err_Vars.Error_Msg_File_1 := Excluded.File;\n+               Err_Vars.Error_Msg_File_1 := Excluded.File;\n \n-            if Src = No_Source then\n-               Error_Msg\n-                 (Project, In_Tree, \"unknown file {\", Excluded.Location);\n-            else\n-               Error_Msg\n-                 (Project, In_Tree,\n-                  \"cannot remove a source from an imported project: {\",\n-                  Excluded.Location);\n+               if Src = No_Source then\n+                  Error_Msg\n+                    (Project, In_Tree, \"unknown file {\", Excluded.Location);\n+               else\n+                  Error_Msg\n+                    (Project, In_Tree,\n+                     \"cannot remove a source from an imported project: {\",\n+                     Excluded.Location);\n+               end if;\n             end if;\n \n             Excluded := Excluded_Sources_Htable.Get_Next (Excluded_Sources);"}]}