{"sha": "1cc17820c32e8b9886100466bc7ac9ff235b254a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjMTc4MjBjMzJlOGI5ODg2MTAwNDY2YmM3YWM5ZmYyMzViMjU0YQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2011-10-26T13:26:50Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2011-10-26T13:26:50Z"}, "message": "invoke.texi (sink-frequency-threshold): Document.\n\n\t* doc/invoke.texi (sink-frequency-threshold): Document.\n\t* tree-ssa-sink.c: Include params.h.\n\t(select_best_block): New function.\n\t(statement_sink_location): Use it.\n\t* params.def (SINK_FREQUENCY_THRESHOLD): New PARAM.\n\nFrom-SVN: r180524", "tree": {"sha": "e6509855bfff836725b741f182d647ea4a5a829c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6509855bfff836725b741f182d647ea4a5a829c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc17820c32e8b9886100466bc7ac9ff235b254a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc17820c32e8b9886100466bc7ac9ff235b254a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc17820c32e8b9886100466bc7ac9ff235b254a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc17820c32e8b9886100466bc7ac9ff235b254a/comments", "author": null, "committer": null, "parents": [{"sha": "b20577eae4e8e74d9f33e66b9a3b5a8d5b5ddd6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20577eae4e8e74d9f33e66b9a3b5a8d5b5ddd6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20577eae4e8e74d9f33e66b9a3b5a8d5b5ddd6f"}], "stats": {"total": 143, "additions": 102, "deletions": 41}, "files": [{"sha": "af5a87de276fe7fc82d6577333127ac11dd015f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cc17820c32e8b9886100466bc7ac9ff235b254a", "patch": "@@ -1,3 +1,11 @@\n+2011-10-26  Jeff Law  <law@redhat.com>\n+\n+\t* doc/invoke.texi (sink-frequency-threshold): Document.\n+\t* tree-ssa-sink.c: Include params.h.\n+\t(select_best_block): New function.\n+\t(statement_sink_location): Use it.\n+\t* params.def (SINK_FREQUENCY_THRESHOLD): New PARAM.\n+\n 2011-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR target/48108"}, {"sha": "3f7a31f1cbe83e5511b9d641c28200c32557fe39", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1cc17820c32e8b9886100466bc7ac9ff235b254a", "patch": "@@ -880,6 +880,7 @@ See RS/6000 and PowerPC Options.\n -mfaster-structs  -mno-faster-structs  -mflat  -mno-flat @gol\n -mfpu  -mno-fpu  -mhard-float  -msoft-float @gol\n -mhard-quad-float  -msoft-quad-float @gol\n+-mlittle-endian @gol\n -mstack-bias  -mno-stack-bias @gol\n -munaligned-doubles  -mno-unaligned-doubles @gol\n -mv8plus  -mno-v8plus  -mvis  -mno-vis @gol\n@@ -9132,6 +9133,13 @@ partitions.\n The maximum number of namespaces to consult for suggestions when C++\n name lookup fails for an identifier.  The default is 1000.\n \n+@item sink-frequency-threshold\n+The maximum relative execution frequency (in percents) of the target block\n+relative to a statement's original block to allow statement sinking of a\n+statement.  Larger numbers result in more aggressive statement sinking.\n+The default value is 75.  A small positive adjustment is applied for\n+statements with memory operands as those are even more profitable so sink.\n+\n @item max-stores-to-sink\n The maximum number of conditional stores paires that can be sunk.  Set to 0\n if either vectorization (@option{-ftree-vectorize}) or if-conversion\n@@ -17708,6 +17716,11 @@ These @samp{-m} options are supported in addition to the above\n on SPARC-V9 processors in 64-bit environments:\n \n @table @gcctabopt\n+@item -mlittle-endian\n+@opindex mlittle-endian\n+Generate code for a processor running in little-endian mode.  It is only\n+available for a few configurations and most notably not on Solaris and Linux.\n+\n @item -m32\n @itemx -m64\n @opindex m32"}, {"sha": "fa632320056975c45e58a1a0a70fcaa7e07ac757", "filename": "gcc/params.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=1cc17820c32e8b9886100466bc7ac9ff235b254a", "patch": "@@ -566,6 +566,11 @@ DEFPARAM(PARAM_MAX_RELOAD_SEARCH_INSNS,\n \t \"The maximum number of instructions to search backward when looking for equivalent reload\",\n \t 100, 0, 0)\n \n+DEFPARAM(PARAM_SINK_FREQUENCY_THRESHOLD,\n+\t \"sink-frequency-threshold\",\n+\t \"Target block's relative execution frequency (as a percentage) required to sink a statement\",\n+\t 75, 0, 100)\n+\n DEFPARAM(PARAM_MAX_SCHED_REGION_BLOCKS,\n \t \"max-sched-region-blocks\",\n \t \"The maximum number of blocks in a region to be considered for interblock scheduling\","}, {"sha": "d42b46a180135401d733bbe233ff9008f80321dd", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 76, "deletions": 41, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc17820c32e8b9886100466bc7ac9ff235b254a/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=1cc17820c32e8b9886100466bc7ac9ff235b254a", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bitmap.h\"\n #include \"langhooks.h\"\n #include \"cfgloop.h\"\n+#include \"params.h\"\n \n /* TODO:\n    1. Sinking store only using scalar promotion (IE without moving the RHS):\n@@ -258,6 +259,71 @@ nearest_common_dominator_of_uses (gimple stmt, bool *debug_stmts)\n   return commondom;\n }\n \n+/* Given EARLY_BB and LATE_BB, two blocks in a path through the dominator\n+   tree, return the best basic block between them (inclusive) to place\n+   statements.\n+\n+   We want the most control dependent block in the shallowest loop nest.\n+\n+   If the resulting block is in a shallower loop nest, then use it.  Else\n+   only use the resulting block if it has significantly lower execution\n+   frequency than EARLY_BB to avoid gratutious statement movement.  We\n+   consider statements with VOPS more desirable to move.\n+\n+   This pass would obviously benefit from PDO as it utilizes block\n+   frequencies.  It would also benefit from recomputing frequencies\n+   if profile data is not available since frequencies often get out\n+   of sync with reality.  */\n+\n+static basic_block\n+select_best_block (basic_block early_bb,\n+\t\t   basic_block late_bb,\n+\t\t   gimple stmt)\n+{\n+  basic_block best_bb = late_bb;\n+  basic_block temp_bb = late_bb;\n+  int threshold;\n+\n+  while (temp_bb != early_bb)\n+    {\n+      /* If we've moved into a lower loop nest, then that becomes\n+\t our best block.  */\n+      if (temp_bb->loop_depth < best_bb->loop_depth)\n+\tbest_bb = temp_bb;\n+\n+      /* Walk up the dominator tree, hopefully we'll find a shallower\n+ \t loop nest.  */\n+      temp_bb = get_immediate_dominator (CDI_DOMINATORS, temp_bb);\n+    }\n+\n+  /* If we found a shallower loop nest, then we always consider that\n+     a win.  This will always give us the most control dependent block\n+     within that loop nest.  */\n+  if (best_bb->loop_depth < early_bb->loop_depth)\n+    return best_bb;\n+\n+  /* Get the sinking threshold.  If the statement to be moved has memory\n+     operands, then increase the threshold by 7% as those are even more\n+     profitable to avoid, clamping at 100%.  */\n+  threshold = PARAM_VALUE (PARAM_SINK_FREQUENCY_THRESHOLD);\n+  if (gimple_vuse (stmt) || gimple_vdef (stmt))\n+    {\n+      threshold += 7;\n+      if (threshold > 100)\n+\tthreshold = 100;\n+    }\n+\n+  /* If BEST_BB is at the same nesting level, then require it to have\n+     significantly lower execution frequency to avoid gratutious movement.  */\n+  if (best_bb->loop_depth == early_bb->loop_depth\n+      && best_bb->frequency < (early_bb->frequency * threshold / 100.0))\n+    return best_bb;\n+\n+  /* No better block found, so return EARLY_BB, which happens to be the\n+     statement's original block.  */\n+  return early_bb;\n+}\n+\n /* Given a statement (STMT) and the basic block it is currently in (FROMBB),\n    determine the location to sink the statement to, if any.\n    Returns true if there is such location; in that case, TOGSI points to the\n@@ -379,24 +445,10 @@ statement_sink_location (gimple stmt, basic_block frombb,\n       if (!dominated_by_p (CDI_DOMINATORS, commondom, frombb))\n \treturn false;\n \n-      /* It doesn't make sense to move to a dominator that post-dominates\n-\t frombb, because it means we've just moved it into a path that always\n-\t executes if frombb executes, instead of reducing the number of\n-\t executions .  */\n-      if (dominated_by_p (CDI_POST_DOMINATORS, frombb, commondom))\n-\t{\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"Not moving store, common dominator post-dominates from block.\\n\");\n-\t  return false;\n-\t}\n+      commondom = select_best_block (frombb, commondom, stmt);\n \n-      if (commondom == frombb || commondom->loop_depth > frombb->loop_depth)\n-\treturn false;\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"Common dominator of all uses is %d\\n\",\n-\t\t   commondom->index);\n-\t}\n+      if (commondom == frombb)\n+\treturn false;\t\n \n       *togsi = gsi_after_labels (commondom);\n \n@@ -415,13 +467,9 @@ statement_sink_location (gimple stmt, basic_block frombb,\n       if (gimple_code (use) != GIMPLE_PHI)\n \t{\n \t  sinkbb = gimple_bb (use);\n-\t  if (sinkbb == frombb || sinkbb->loop_depth > frombb->loop_depth\n-\t      || sinkbb->loop_father != frombb->loop_father)\n-\t    return false;\n+\t  sinkbb = select_best_block (frombb, gimple_bb (use), stmt);\n \n-\t  /* Move the expression to a post dominator can't reduce the number of\n-\t     executions.  */\n-\t  if (dominated_by_p (CDI_POST_DOMINATORS, frombb, sinkbb))\n+\t  if (sinkbb == frombb)\n \t    return false;\n \n \t  *togsi = gsi_for_stmt (use);\n@@ -431,21 +479,13 @@ statement_sink_location (gimple stmt, basic_block frombb,\n     }\n \n   sinkbb = find_bb_for_arg (use, DEF_FROM_PTR (def_p));\n-  if (!sinkbb)\n-    return false;\n-\n-  /* This will happen when you have\n-     a_3 = PHI <a_13, a_26>\n-\n-     a_26 = VDEF <a_3>\n-\n-     If the use is a phi, and is in the same bb as the def,\n-     we can't sink it.  */\n \n-  if (gimple_bb (use) == frombb)\n+  /* This can happen if there are multiple uses in a PHI.  */\n+  if (!sinkbb)\n     return false;\n-  if (sinkbb == frombb || sinkbb->loop_depth > frombb->loop_depth\n-      || sinkbb->loop_father != frombb->loop_father)\n+  \n+  sinkbb = select_best_block (frombb, sinkbb, stmt);\n+  if (!sinkbb || sinkbb == frombb)\n     return false;\n \n   /* If the latch block is empty, don't make it non-empty by sinking\n@@ -454,11 +494,6 @@ statement_sink_location (gimple stmt, basic_block frombb,\n       && empty_block_p (sinkbb))\n     return false;\n \n-  /* Move the expression to a post dominator can't reduce the number of\n-     executions.  */\n-  if (dominated_by_p (CDI_POST_DOMINATORS, frombb, sinkbb))\n-    return false;\n-\n   *togsi = gsi_after_labels (sinkbb);\n \n   return true;"}]}