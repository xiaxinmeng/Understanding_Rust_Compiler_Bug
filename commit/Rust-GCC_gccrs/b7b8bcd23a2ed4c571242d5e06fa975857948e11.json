{"sha": "b7b8bcd23a2ed4c571242d5e06fa975857948e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdiOGJjZDIzYTJlZDRjNTcxMjQyZDVlMDZmYTk3NTg1Nzk0OGUxMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-08-29T19:03:31Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-08-29T19:03:31Z"}, "message": "cp-tree.h (TYPE_NEEDS_CONSTRUCTING): Remove #if 0'd definition.\n\n\t* cp-tree.h (TYPE_NEEDS_CONSTRUCTING): Remove #if 0'd definition.\n\t(maybe_inject_for_scope_var): Declare it.\n\t(initialize_local_var): Likewise.\n\t* decl.c (maybe_inject_for_scope_var): Make it global.\n\t(initialize_local_var): Likewise.  Move cleanup handling here,\n\tfrom cp_finish_decl.\n\t(make_rtl_for_nonlocal_decl): Use\n\tpush_obstacks_nochange/pop_obstacks, rather than\n\tend_temporary_allocation/resume_temporary_allocation.\n\t(cp_finish_decl): Try to complete the type of a variable when it\n\tis declared.  Move cleanup-handling to initialize_local_var.\n\t(expand_static_init): Use tree-building code, rather than\n\tRTL-building code.\n\t* decl2.c (get_temp_name): Assert non-initializedness of\n\ttemporaries.\n\t* init.c (create_temporary_var): Move RTL-assigning code to ...\n\t(get_temp_regvar): Here.\n\t* pt.c (tsbust_expr): Fix indentation.  Call cp_finish_decl here.\n\t* semantics.c (expand_stmt): Don't call cp_finish_decl here.  Just\n\tcall initialize_local_var to generate initialization code.\n\nFrom-SVN: r28973", "tree": {"sha": "99bba146483ca359f5f8c34914144ca70c2b4ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bba146483ca359f5f8c34914144ca70c2b4ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7b8bcd23a2ed4c571242d5e06fa975857948e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b8bcd23a2ed4c571242d5e06fa975857948e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7b8bcd23a2ed4c571242d5e06fa975857948e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7b8bcd23a2ed4c571242d5e06fa975857948e11/comments", "author": null, "committer": null, "parents": [{"sha": "f84300c4269026fbbdda49b114bfa311e5d71001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f84300c4269026fbbdda49b114bfa311e5d71001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f84300c4269026fbbdda49b114bfa311e5d71001"}], "stats": {"total": 222, "additions": 123, "deletions": 99}, "files": [{"sha": "0fa5c607127618b90cbb53b98def6f6105d7382f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -1,3 +1,26 @@\n+1999-08-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (TYPE_NEEDS_CONSTRUCTING): Remove #if 0'd definition.\n+\t(maybe_inject_for_scope_var): Declare it.\n+\t(initialize_local_var): Likewise.\n+\t* decl.c (maybe_inject_for_scope_var): Make it global.\n+\t(initialize_local_var): Likewise.  Move cleanup handling here,\n+\tfrom cp_finish_decl.\n+\t(make_rtl_for_nonlocal_decl): Use\n+\tpush_obstacks_nochange/pop_obstacks, rather than\n+\tend_temporary_allocation/resume_temporary_allocation.\n+\t(cp_finish_decl): Try to complete the type of a variable when it\n+\tis declared.  Move cleanup-handling to initialize_local_var.\n+\t(expand_static_init): Use tree-building code, rather than\n+\tRTL-building code.\n+\t* decl2.c (get_temp_name): Assert non-initializedness of\n+\ttemporaries.\n+\t* init.c (create_temporary_var): Move RTL-assigning code to ...\n+\t(get_temp_regvar): Here.\n+\t* pt.c (tsbust_expr): Fix indentation.  Call cp_finish_decl here.\n+\t* semantics.c (expand_stmt): Don't call cp_finish_decl here.  Just\n+\tcall initialize_local_var to generate initialization code.\n+\t\n 1999-08-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cp-tree.h (fndecl_as_string, type_as_string,"}, {"sha": "9fca5954794a6152bfe906dc28aef106797e5186", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -1690,13 +1690,6 @@ extern int flag_new_for_scope;\n /* Nonzero for _TYPE means that the _TYPE defines a destructor.  */\n #define TYPE_HAS_DESTRUCTOR(NODE) (TYPE_LANG_FLAG_2(NODE))\n \n-#if 0\n-/* Nonzero for _TYPE node means that creating an object of this type\n-   will involve a call to a constructor.  This can apply to objects\n-   of ARRAY_TYPE if the type of the elements needs a constructor.  */\n-#define TYPE_NEEDS_CONSTRUCTING(NODE) ... defined in ../tree.h ...\n-#endif\n-\n /* Nonzero means that an object of this type can not be initialized using\n    an initializer list.  */\n #define CLASSTYPE_NON_AGGREGATE(NODE) \\\n@@ -2936,6 +2929,8 @@ extern tree start_decl\t\t\t\tPROTO((tree, tree, int, tree, tree));\n extern void start_decl_1\t\t\tPROTO((tree));\n extern void cp_finish_decl\t\t\tPROTO((tree, tree, tree, int, int));\n extern void finish_decl\t\t\t\tPROTO((tree, tree, tree));\n+extern void maybe_inject_for_scope_var          PROTO((tree));\n+extern void initialize_local_var                PROTO((tree, tree, int));\n extern void expand_static_init\t\t\tPROTO((tree, tree));\n extern int complete_array_type\t\t\tPROTO((tree, tree, int));\n extern tree build_ptrmemfunc_type\t\tPROTO((tree));"}, {"sha": "c7b511c4a16146148aa816a74079f9153d805f6e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 58, "deletions": 84, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -196,8 +196,6 @@ static void pop_labels PROTO((tree));\n static void maybe_deduce_size_from_array_init PROTO((tree, tree));\n static void layout_var_decl PROTO((tree, tree *));\n static void maybe_commonize_var PROTO((tree));\n-static void maybe_inject_for_scope_var PROTO((tree));\n-static void initialize_local_var PROTO((tree, tree, tree, int));\n static tree build_cleanup_on_safe_obstack PROTO((tree));\n static void check_initializer PROTO((tree, tree *));\n static void make_rtl_for_nonlocal_decl PROTO((tree, tree, const char *));\n@@ -7669,16 +7667,16 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n      tree init;\n      const char *asmspec;\n {\n-  int was_temp;\n   int toplev;\n   tree type;\n \n   type = TREE_TYPE (decl);\n   toplev = toplevel_bindings_p ();\n-  was_temp = (TREE_STATIC (decl) && TYPE_NEEDS_DESTRUCTOR (type)\n-\t      && allocation_temporary_p ());\n-  if (was_temp)\n-    end_temporary_allocation ();\n+  push_obstacks_nochange ();\n+  if (TREE_STATIC (decl) \n+      && TYPE_NEEDS_DESTRUCTOR (type)\n+      && allocation_temporary_p ())\n+    end_temporary_allocation  ();\n \n   if (TREE_CODE (decl) == VAR_DECL && DECL_VIRTUAL_P (decl))\n     make_decl_rtl (decl, NULL_PTR, toplev);\n@@ -7747,8 +7745,7 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n   else\n     rest_of_decl_compilation (decl, asmspec, toplev, at_eof);\n \n-  if (was_temp)\n-    resume_temporary_allocation ();\n+  pop_obstacks ();\n }\n \n /* The old ARM scoping rules injected variables declared in the\n@@ -7757,7 +7754,7 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n    DECL is a just-declared VAR_DECL; if necessary inject its\n    declaration into the surrounding scope.  */\n \n-static void\n+void\n maybe_inject_for_scope_var (decl)\n      tree decl;\n {\n@@ -7794,24 +7791,41 @@ maybe_inject_for_scope_var (decl)\n \n /* Generate code to initialized DECL (a local variable).  */\n \n-static void\n-initialize_local_var (decl, init, cleanup, flags)\n+void\n+initialize_local_var (decl, init, flags)\n      tree decl;\n      tree init;\n-     tree cleanup;\n      int flags;\n {\n   tree type;\n+  tree cleanup;\n \n   type = TREE_TYPE (decl);\n+\n+  cleanup = build_cleanup_on_safe_obstack (decl);\n+\n+  if (DECL_SIZE (decl) == NULL_TREE && !TREE_STATIC (decl))\n+    {\n+      /* If we used it already as memory, it must stay in memory.  */\n+      DECL_INITIAL (decl) = NULL_TREE;\n+      TREE_ADDRESSABLE (decl) = TREE_USED (decl);\n+    }\n+\n+  if (DECL_RTL (decl))\n+    /* Only a RESULT_DECL should have non-NULL RTL when arriving here.\n+       All other local variables are assigned RTL in this function.  */\n+    my_friendly_assert (TREE_CODE (decl) == RESULT_DECL, 19990828);\n+  else\n+    /* Create RTL for this variable.  */\n+    expand_decl (decl);\n+\n   expand_start_target_temps ();\n \n   if (DECL_SIZE (decl) && type != error_mark_node)\n     {\n       int already_used;\n   \n       /* Compute and store the initial value.  */\n-      expand_decl_init (decl);\n       already_used = TREE_USED (decl) || TREE_USED (type);\n \n       if (init || TYPE_NEEDS_CONSTRUCTING (type))\n@@ -7829,39 +7843,33 @@ initialize_local_var (decl, init, cleanup, flags)\n \t  finish_expr_stmt (build_aggr_init (decl, init, flags));\n \t  pop_momentary ();\n \t}\n+      else\n+\texpand_decl_init (decl);\n \n       /* Set this to 0 so we can tell whether an aggregate which was\n \t initialized was ever used.  Don't do this if it has a\n \t destructor, so we don't complain about the 'resource\n-\t allocation is initialization' idiom.  */\n-      /* Now set attribute((unused)) on types so decls of that type\n-\t will be marked used. (see TREE_USED, above.)  This avoids the\n-\t warning problems this particular code tried to work\n-\t around. */\n-\n+\t allocation is initialization' idiom.  Now set\n+\t attribute((unused)) on types so decls of that type will be\n+\t marked used. (see TREE_USED, above.)  */\n       if (TYPE_NEEDS_CONSTRUCTING (type)\n \t  && ! already_used\n \t  && cleanup == NULL_TREE\n \t  && DECL_NAME (decl))\n \tTREE_USED (decl) = 0;\n-\n-      if (already_used)\n+      else if (already_used)\n \tTREE_USED (decl) = 1;\n     }\n \n   /* Cleanup any temporaries needed for the initial value.  */\n   expand_end_target_temps ();\n \n-  if (DECL_SIZE (decl) && type != error_mark_node)\n-    {\n-      /* Store the cleanup, if there was one.  */\n-      if (cleanup)\n-\t{\n-\t  if (! expand_decl_cleanup (decl, cleanup))\n-\t    cp_error (\"parser lost in parsing declaration of `%D'\",\n-\t\t      decl);\n-\t}\n-    }\n+  /* Record the cleanup required for this declaration.  */\n+  if (DECL_SIZE (decl) \n+      && type != error_mark_node\n+      && cleanup\n+      && !expand_decl_cleanup (decl, cleanup))\n+    cp_error (\"parser lost in parsing declaration of `%D'\", decl);\n }\n \n /* Finish processing of a declaration;\n@@ -7895,7 +7903,6 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n {\n   register tree type;\n   tree ttype = NULL_TREE;\n-  int was_incomplete;\n   int temporary = allocation_temporary_p ();\n   const char *asmspec = NULL;\n   int was_readonly = 0;\n@@ -7935,13 +7942,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n       pop_decl_namespace ();\n     }\n \n-  /* If the type of the thing we are declaring either has\n-     a constructor, or has a virtual function table pointer,\n-     AND its initialization was accepted by `start_decl',\n-     then we stayed on the permanent obstack through the\n-     declaration, otherwise, changed obstacks as GCC would.  */\n-\n-  type = TREE_TYPE (decl);\n+  type = complete_type (TREE_TYPE (decl));\n \n   if (type == error_mark_node)\n     {\n@@ -8039,9 +8040,6 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n   /* Output the assembler code and/or RTL code for variables and functions,\n      unless the type is an undefined structure or union.\n      If not, it will get done when the type is completed.  */\n-\n-  was_incomplete = (DECL_SIZE (decl) == NULL_TREE);\n-\n   if (TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == FUNCTION_DECL\n       || TREE_CODE (decl) == RESULT_DECL)\n     {\n@@ -8078,44 +8076,15 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t}\n       else if (! toplev)\n \t{\n-\t  tree cleanup = build_cleanup_on_safe_obstack (decl);\n-\n-\t  /* This is a declared decl which must live until the\n-\t     end of the binding contour.  It may need a cleanup.  */\n-\n-\t  /* Recompute the RTL of a local array now\n-\t     if it used to be an incomplete type.  */\n-\t  if (was_incomplete && ! TREE_STATIC (decl))\n-\t    {\n-\t      /* If we used it already as memory, it must stay in memory.  */\n-\t      TREE_ADDRESSABLE (decl) = TREE_USED (decl);\n-\t      /* If it's still incomplete now, no init will save it.  */\n-\t      if (DECL_SIZE (decl) == NULL_TREE)\n-\t\tDECL_INITIAL (decl) = NULL_TREE;\n-\t      expand_decl (decl);\n-\t    }\n-\t  else if (! TREE_ASM_WRITTEN (decl)\n-\t\t   && (TYPE_SIZE (type) != NULL_TREE\n-\t\t       || TREE_CODE (type) == ARRAY_TYPE))\n-\t    {\n-\t      /* Do this here, because we did not expand this decl's\n-\t\t rtl in start_decl.  */\n-\t      if (DECL_RTL (decl) == NULL_RTX)\n-\t\texpand_decl (decl);\n-\t      else if (cleanup)\n-\t\t{\n-\t\t  /* XXX: Why don't we use decl here?  */\n-\t\t  /* Ans: Because it was already expanded? */\n-\t\t  if (! expand_decl_cleanup (NULL_TREE, cleanup))\n-\t\t    cp_error (\"parser lost in parsing declaration of `%D'\",\n-\t\t\t      decl);\n-\t\t  /* Cleanup used up here.  */\n-\t\t  cleanup = NULL_TREE;\n-\t\t}\n-\t    }\n-\n+\t  /* This is a local declaration.  */\n \t  maybe_inject_for_scope_var (decl);\n-\t  initialize_local_var (decl, init, cleanup, flags);\n+\t  /* Initialize the local variable.  But, if we're building a\n+\t     statement-tree, we'll do the initialization when we\n+\t     expand the tree.  */\n+\t  if (!building_stmt_tree ())\n+\t    initialize_local_var (decl, init, flags);\n+\t  else if (init || DECL_INITIAL (decl) == error_mark_node)\n+\t    DECL_INITIAL (decl) = init;\n \t}\n     finish_end0:\n \n@@ -8195,6 +8164,7 @@ expand_static_init (decl, init)\n     {\n       /* Emit code to perform this initialization but once.  */\n       tree temp;\n+      tree if_stmt;\n       tree assignment;\n       tree temp_init;\n \n@@ -8229,8 +8199,10 @@ expand_static_init (decl, init)\n       rest_of_decl_compilation (temp, NULL_PTR, 0, 0);\n \n       /* Begin the conditional initialization.  */\n-      expand_start_cond (build_binary_op (EQ_EXPR, temp,\n-\t\t\t\t\t  integer_zero_node), 0);\n+      if_stmt = begin_if_stmt ();\n+      finish_if_stmt_cond (build_binary_op (EQ_EXPR, temp,\n+\t\t\t\t\t    integer_zero_node), \n+\t\t\t   if_stmt);\n \n       /* Do the initialization itself.  */\n       if (TYPE_NEEDS_CONSTRUCTING (TREE_TYPE (decl))\n@@ -8325,10 +8297,12 @@ expand_static_init (decl, init)\n \t\t\t\t       expr_tree_cons (NULL_TREE, \n \t\t\t\t\t\t       cleanup, \n \t\t\t\t\t\t       NULL_TREE));\n-\t  expand_expr_stmt (fcall);\n+\t  finish_expr_stmt (fcall);\n \t}\n \n-      expand_end_cond ();\n+      finish_then_clause (if_stmt);\n+      finish_if_stmt ();\n+\n       /* Resume old (possibly temporary) allocation.  */\n       pop_obstacks ();\n     }"}, {"sha": "5eb4a673f29ca1cca8432394abdf3e7352f58e78", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -2070,7 +2070,8 @@ get_temp_name (type, staticp)\n   if (! toplev)\n     {\n       expand_decl (decl);\n-      expand_decl_init (decl);\n+      my_friendly_assert (DECL_INITIAL (decl) == NULL_TREE,\n+\t\t\t  19990826);\n     }\n   pop_obstacks ();\n "}, {"sha": "9265ff9fe8d1cda9f98adff36ef13d0090a7ddb8", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -2706,8 +2706,6 @@ create_temporary_var (type)\n \n   if (building_stmt_tree ())\n     add_decl_stmt (decl);\n-  else\n-    DECL_RTL (decl) = assign_temp (type, 2, 0, 1);\n \n   return decl;\n }\n@@ -2727,6 +2725,8 @@ get_temp_regvar (type, init)\n \n   decl = create_temporary_var (type);\n   DECL_REGISTER (decl) = 1;\n+  if (!building_stmt_tree ())\n+    DECL_RTL (decl) = assign_temp (type, 2, 0, 1);\n   finish_expr_stmt (build_modify_expr (decl, INIT_EXPR, init));\n \n   return decl;"}, {"sha": "e321c348e9b994701d6d6c9387127b1c607040da", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -7272,13 +7272,15 @@ tsubst_expr (t, args, complain, in_decl)\n \t    decl = tsubst (decl, args, complain, in_decl);\n \t    init = tsubst_expr (init, args, complain, in_decl);\n \t    DECL_INITIAL (decl) = init;\n-\t    /* By marking the declaration as instantiated, we avoid trying\n-\t   to instantiate it.  Since instantiate_decl can't handle\n-\t   local variables, and since we've already done all that\n-\t   needs to be done, that's the right thing to do.  */\n+\t    /* By marking the declaration as instantiated, we avoid\n+\t       trying to instantiate it.  Since instantiate_decl can't\n+\t       handle local variables, and since we've already done\n+\t       all that needs to be done, that's the right thing to\n+\t       do.  */\n \t    if (TREE_CODE (decl) == VAR_DECL)\n \t      DECL_TEMPLATE_INSTANTIATED (decl) = 1;\n \t    maybe_push_decl (decl);\n+\t    cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n \t    add_decl_stmt (decl);\n \t  }\n \tresume_momentary (i);"}, {"sha": "6e0c5b23afc8e25635414d4b82bfa83363950585", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -2046,7 +2046,11 @@ expand_stmt (t)\n \t    if (TREE_CODE (decl) == VAR_DECL)\n \t      DECL_DEAD_FOR_LOCAL (decl) = 0;\n \t    maybe_push_decl (decl);\n-\t    cp_finish_decl (decl, DECL_INITIAL (decl), NULL_TREE, 0, 0);\n+\t    if (TREE_CODE (decl) == VAR_DECL && !TREE_STATIC (decl))\n+\t      {\n+\t\tmaybe_inject_for_scope_var (decl);\n+\t\tinitialize_local_var (decl, DECL_INITIAL (decl), 0);\n+\t      }\n \t  }\n \tresume_momentary (i);\n       }"}, {"sha": "4d2de6198a3696f29ff9ca654cb329740881293a", "filename": "gcc/testsuite/g++.old-deja/g++.pt/crash52.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7b8bcd23a2ed4c571242d5e06fa975857948e11/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fcrash52.C?ref=b7b8bcd23a2ed4c571242d5e06fa975857948e11", "patch": "@@ -0,0 +1,25 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+template <class T>\n+struct S1\n+{\n+  template <class U>\n+  struct S2\n+  { \n+    S2(U);\n+  };\n+\n+  template <class U>\n+  void f(U u)\n+    {\n+      S2<U> s2u(u);\n+    }\n+};\n+\n+void g()\n+{\n+  S1<int> s1;\n+  s1.f(3.0);\n+}\n+"}]}