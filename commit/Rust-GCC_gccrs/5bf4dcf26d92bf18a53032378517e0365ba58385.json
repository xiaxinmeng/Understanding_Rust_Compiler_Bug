{"sha": "5bf4dcf26d92bf18a53032378517e0365ba58385", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmNGRjZjI2ZDkyYmYxOGE1MzAzMjM3ODUxN2UwMzY1YmE1ODM4NQ==", "commit": {"author": {"name": "Dmitry Plotnikov", "email": "dplotnikov@ispras.ru", "date": "2011-12-23T13:53:17Z"}, "committer": {"name": "Alexander Monakov", "email": "amonakov@gcc.gnu.org", "date": "2011-12-23T13:53:17Z"}, "message": "neon.md (float<mode><V_cvtto>2): New.\n\n2011-12-23  Dmitry Plotnikov  <dplotnikov@ispras.ru>\n\n\t* config/arm/neon.md (float<mode><V_cvtto>2): New.\n\t(floatuns<mode><V_cvtto>2): New.\n\t(fix_trunc<mode><V_cvtto>2): New.\n\t(fix_truncuns<mode><V_cvtto>2): New.\n\t* config/arm/iterators.md (V_cvtto): New iterator.\n\ngcc/testsuite/:\n\t* gcc.target/arm/vect-vcvt.c: New test.\n\t* gcc.target/arm/vect-vcvtq.c: New test.\n\t\n\t* gcc.dg/vect/fast-math-pr35982.c: Added vect_strided2 alternative\n\tin final check.\n\t\n\t* lib/target-supports.exp (check_effective_target_vect_intfloat_cvt):\n\tTrue for ARM NEON.\n\t(check_effective_target_vect_uintfloat_cvt): Likewise.\n\t(check_effective_target_vect_floatuint_cvt): Likewise.\n\t(check_effective_target_vect_floatint_cvt): Likewise.\n\nFrom-SVN: r182657", "tree": {"sha": "a230a11a4056486c4c65ff6047c308a5824a80ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a230a11a4056486c4c65ff6047c308a5824a80ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf4dcf26d92bf18a53032378517e0365ba58385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf4dcf26d92bf18a53032378517e0365ba58385", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf4dcf26d92bf18a53032378517e0365ba58385", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf4dcf26d92bf18a53032378517e0365ba58385/comments", "author": null, "committer": null, "parents": [{"sha": "a17e8c059369ccc8a65fef8bdc33af01fb3da864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a17e8c059369ccc8a65fef8bdc33af01fb3da864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a17e8c059369ccc8a65fef8bdc33af01fb3da864"}], "stats": {"total": 146, "additions": 140, "deletions": 6}, "files": [{"sha": "462a8d38815eec7265e25bc692219bab5391e7b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -1,3 +1,11 @@\n+2011-12-23  Dmitry Plotnikov  <dplotnikov@ispras.ru>\n+\n+\t* config/arm/neon.md (float<mode><V_cvtto>2): New.\n+\t(floatuns<mode><V_cvtto>2): New.\n+\t(fix_trunc<mode><V_cvtto>2): New.\n+\t(fix_truncuns<mode><V_cvtto>2): New.\n+\t* config/arm/iterators.md (V_cvtto): New iterator.\n+\n 2011-12-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/50396"}, {"sha": "15672647e51cbe5235079957582e974b8c0b649b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -197,6 +197,10 @@\n (define_mode_attr V_CVTTO [(V2SI \"V2SF\") (V2SF \"V2SI\")\n                (V4SI \"V4SF\") (V4SF \"V4SI\")])\n \n+;; As above but in lower case.\n+(define_mode_attr V_cvtto [(V2SI \"v2sf\") (V2SF \"v2si\")\n+                           (V4SI \"v4sf\") (V4SF \"v4si\")])\n+\n ;; Define element mode for each vector mode.\n (define_mode_attr V_elem [(V8QI \"QI\") (V16QI \"QI\")\n               (V4HI \"HI\") (V8HI \"HI\")"}, {"sha": "d7caa379b85e87f81bb8ca4ccf84b1e840730294", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -2932,6 +2932,50 @@\n   DONE;\n })\n \n+(define_insn \"float<mode><V_cvtto>2\"\n+  [(set (match_operand:<V_CVTTO> 0 \"s_register_operand\" \"=w\")\n+        (float:<V_CVTTO> (match_operand:VCVTI 1 \"s_register_operand\" \"w\")))]\n+  \"TARGET_NEON && !flag_rounding_math\"\n+  \"vcvt.f32.s32\\t%<V_reg>0, %<V_reg>1\"\n+  [(set (attr \"neon_type\")\n+     (if_then_else (match_test \"<Is_d_reg>\")\n+                   (const_string \"neon_fp_vadd_ddd_vabs_dd\")\n+                   (const_string \"neon_fp_vadd_qqq_vabs_qq\")))]\n+)\n+\n+(define_insn \"floatuns<mode><V_cvtto>2\"\n+  [(set (match_operand:<V_CVTTO> 0 \"s_register_operand\" \"=w\")\n+        (unsigned_float:<V_CVTTO> (match_operand:VCVTI 1 \"s_register_operand\" \"w\")))] \n+  \"TARGET_NEON && !flag_rounding_math\"\n+  \"vcvt.f32.u32\\t%<V_reg>0, %<V_reg>1\"\n+  [(set (attr \"neon_type\")\n+     (if_then_else (match_test \"<Is_d_reg>\")\n+                   (const_string \"neon_fp_vadd_ddd_vabs_dd\")\n+                   (const_string \"neon_fp_vadd_qqq_vabs_qq\")))]\n+)\n+\n+(define_insn \"fix_trunc<mode><V_cvtto>2\"\n+  [(set (match_operand:<V_CVTTO> 0 \"s_register_operand\" \"=w\")\n+        (fix:<V_CVTTO> (match_operand:VCVTF 1 \"s_register_operand\" \"w\")))]\n+  \"TARGET_NEON\"\n+  \"vcvt.s32.f32\\t%<V_reg>0, %<V_reg>1\"\n+  [(set (attr \"neon_type\")\n+     (if_then_else (match_test \"<Is_d_reg>\")\n+                   (const_string \"neon_fp_vadd_ddd_vabs_dd\")\n+                   (const_string \"neon_fp_vadd_qqq_vabs_qq\")))]\n+)\n+\n+(define_insn \"fixuns_trunc<mode><V_cvtto>2\"\n+  [(set (match_operand:<V_CVTTO> 0 \"s_register_operand\" \"=w\")\n+        (unsigned_fix:<V_CVTTO> (match_operand:VCVTF 1 \"s_register_operand\" \"w\")))]\n+  \"TARGET_NEON\"\n+  \"vcvt.u32.f32\\t%<V_reg>0, %<V_reg>1\"\n+  [(set (attr \"neon_type\")\n+     (if_then_else (match_test \"<Is_d_reg>\")\n+                   (const_string \"neon_fp_vadd_ddd_vabs_dd\")\n+                   (const_string \"neon_fp_vadd_qqq_vabs_qq\")))]\n+)\n+\n (define_insn \"neon_vcvt<mode>\"\n   [(set (match_operand:<V_CVTTO> 0 \"s_register_operand\" \"=w\")\n \t(unspec:<V_CVTTO> [(match_operand:VCVTF 1 \"s_register_operand\" \"w\")"}, {"sha": "fd1683c76f3a52f0b256912b39a261e02115fb44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -1,3 +1,17 @@\n+2011-12-23  Dmitry Plotnikov  <dplotnikov@ispras.ru>\n+\n+\t* gcc.target/arm/vect-vcvt.c: New test.\n+\t* gcc.target/arm/vect-vcvtq.c: New test.\n+\t\n+\t* gcc.dg/vect/fast-math-pr35982.c: Added vect_strided2 alternative\n+\tin final check.\n+\t\n+\t* lib/target-supports.exp (check_effective_target_vect_intfloat_cvt):\n+\tTrue for ARM NEON.\n+\t(check_effective_target_vect_uintfloat_cvt): Likewise.\n+\t(check_effective_target_vect_floatuint_cvt): Likewise.\n+\t(check_effective_target_vect_floatint_cvt): Likewise.\n+\n 2011-12-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR rtl-optimization/50396"}, {"sha": "0d4c43a7ab50aad40ab51541b590d12131e49e9a", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-pr35982.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-pr35982.c?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -20,7 +20,7 @@ float method2_int16 (struct mem *mem)\n   return avg;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd  } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd  } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_extract_even_odd || vect_strided2 } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { xfail vect_extract_even_odd || vect_strided2 } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "f31d9bfabf94707d857d0d7f1a3f62868c89a589", "filename": "gcc/testsuite/gcc.target/arm/neon/vect-vcvt.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvt.c?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details -mvectorize-with-neon-double\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#define N 32\n+\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float fa[N];\n+int ia[N];\n+\n+int convert()\n+{\n+  int i;\n+\n+  /* int -> float */\n+  for (i = 0; i < N; i++)\n+    fa[i] = (float) ib[i];\n+\n+  /* float -> int */\n+  for (i = 0; i < N; i++)\n+    ia[i] = (int) fa[i];\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f3f01c65e23f38143157fcdd1dbfb55d8bf8cefb", "filename": "gcc/testsuite/gcc.target/arm/neon/vect-vcvtq.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvtq.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvtq.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvect-vcvtq.c?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_neon_ok } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-details\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#define N 32\n+\n+int ib[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45};\n+float fa[N];\n+int ia[N];\n+\n+int convert()\n+{\n+  int i;\n+\n+  /* int -> float */\n+  for (i = 0; i < N; i++)\n+    fa[i] = (float) ib[i];\n+\n+  /* float -> int */\n+  for (i = 0; i < N; i++)\n+    ia[i] = (int) fa[i];\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "ebf69db66b94ff11ad3ee889a350ed6196930e4d", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf4dcf26d92bf18a53032378517e0365ba58385/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=5bf4dcf26d92bf18a53032378517e0365ba58385", "patch": "@@ -1829,7 +1829,9 @@ proc check_effective_target_vect_intfloat_cvt { } {\n         if { [istarget i?86-*-*]\n               || ([istarget powerpc*-*-*]\n                    && ![istarget powerpc-*-linux*paired*])\n-              || [istarget x86_64-*-*] } {\n+              || [istarget x86_64-*-*] \n+              || ([istarget arm*-*-*]\n+                  && [check_effective_target_arm_neon_ok])} {\n            set et_vect_intfloat_cvt_saved 1\n         }\n     }\n@@ -1865,7 +1867,9 @@ proc check_effective_target_vect_uintfloat_cvt { } {\n         if { [istarget i?86-*-*]\n \t      || ([istarget powerpc*-*-*]\n \t\t  && ![istarget powerpc-*-linux*paired*])\n-\t      || [istarget x86_64-*-*] } {\n+\t      || [istarget x86_64-*-*] \n+\t      || ([istarget arm*-*-*]\n+\t\t  && [check_effective_target_arm_neon_ok])} {\n            set et_vect_uintfloat_cvt_saved 1\n         }\n     }\n@@ -1888,7 +1892,9 @@ proc check_effective_target_vect_floatint_cvt { } {\n         if { [istarget i?86-*-*]\n               || ([istarget powerpc*-*-*]\n                    && ![istarget powerpc-*-linux*paired*])\n-              || [istarget x86_64-*-*] } {\n+              || [istarget x86_64-*-*]\n+              || ([istarget arm*-*-*]\n+                  && [check_effective_target_arm_neon_ok])} {\n            set et_vect_floatint_cvt_saved 1\n         }\n     }\n@@ -1908,7 +1914,9 @@ proc check_effective_target_vect_floatuint_cvt { } {\n     } else {\n         set et_vect_floatuint_cvt_saved 0\n         if { ([istarget powerpc*-*-*]\n-\t      && ![istarget powerpc-*-linux*paired*]) } {\n+\t      && ![istarget powerpc-*-linux*paired*])\n+\t    || ([istarget arm*-*-*]\n+\t        && [check_effective_target_arm_neon_ok])} {\n            set et_vect_floatuint_cvt_saved 1\n         }\n     }"}]}