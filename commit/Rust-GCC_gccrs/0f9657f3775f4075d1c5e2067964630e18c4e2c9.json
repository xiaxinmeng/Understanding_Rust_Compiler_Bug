{"sha": "0f9657f3775f4075d1c5e2067964630e18c4e2c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5NjU3ZjM3NzVmNDA3NWQxYzVlMjA2Nzk2NDYzMGUxOGM0ZTJjOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-11-21T13:37:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-11-21T13:37:11Z"}, "message": "re PR tree-optimization/88069 (ICE in check_loop_closed_ssa_def, at tree-ssa-loop-manip.c:709)\n\n2018-11-20  Jeff Law  <law@redhat.com>\n\n\tPR tree-optimization/88069\n\t* tree-ssa-dom.c (record_equivalences_from_phis): Propagate away\n\tdegenerate virtual PHIs.\n\nFrom-SVN: r266343", "tree": {"sha": "801876eb76ccb8ed8cf47d2730564d615eb4bcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/801876eb76ccb8ed8cf47d2730564d615eb4bcda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f9657f3775f4075d1c5e2067964630e18c4e2c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9657f3775f4075d1c5e2067964630e18c4e2c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9657f3775f4075d1c5e2067964630e18c4e2c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9657f3775f4075d1c5e2067964630e18c4e2c9/comments", "author": null, "committer": null, "parents": [{"sha": "ff8e1022cd74e2569354b86b6f0b657cff81bb02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff8e1022cd74e2569354b86b6f0b657cff81bb02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff8e1022cd74e2569354b86b6f0b657cff81bb02"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "967967641f38208fc26e7cf853990064d58e4774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9657f3775f4075d1c5e2067964630e18c4e2c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9657f3775f4075d1c5e2067964630e18c4e2c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f9657f3775f4075d1c5e2067964630e18c4e2c9", "patch": "@@ -1,3 +1,9 @@\n+2018-11-20  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/88069\n+\t* tree-ssa-dom.c (record_equivalences_from_phis): Propagate away\n+\tdegenerate virtual PHIs.\n+\n 2018-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/87317"}, {"sha": "ce840488403bd0bc9b18d4dca36bc45251161ad5", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9657f3775f4075d1c5e2067964630e18c4e2c9/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9657f3775f4075d1c5e2067964630e18c4e2c9/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=0f9657f3775f4075d1c5e2067964630e18c4e2c9", "patch": "@@ -1106,10 +1106,13 @@ record_equivalences_from_phis (basic_block bb)\n {\n   gphi_iterator gsi;\n \n-  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+  for (gsi = gsi_start_phis (bb); !gsi_end_p (gsi); )\n     {\n       gphi *phi = gsi.phi ();\n \n+      /* We might eliminate the PHI, so advance GSI now.  */\n+      gsi_next (&gsi);\n+\n       tree lhs = gimple_phi_result (phi);\n       tree rhs = NULL;\n       size_t i;\n@@ -1159,9 +1162,26 @@ record_equivalences_from_phis (basic_block bb)\n \t this, since this is a true assignment and not an equivalence\n \t inferred from a comparison.  All uses of this ssa name are dominated\n \t by this assignment, so unwinding just costs time and space.  */\n-      if (i == gimple_phi_num_args (phi)\n-\t  && may_propagate_copy (lhs, rhs))\n-\tset_ssa_name_value (lhs, rhs);\n+      if (i == gimple_phi_num_args (phi))\n+\t{\n+\t  if (may_propagate_copy (lhs, rhs))\n+\t    set_ssa_name_value (lhs, rhs);\n+\t  else if (virtual_operand_p (lhs))\n+\t    {\n+\t      gimple *use_stmt;\n+\t      imm_use_iterator iter;\n+\t      use_operand_p use_p;\n+\t      /* For virtual operands we have to propagate into all uses as\n+\t         otherwise we will create overlapping life-ranges.  */\n+\t      FOR_EACH_IMM_USE_STMT (use_stmt, iter, lhs)\n+\t        FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t          SET_USE (use_p, rhs);\n+\t      if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n+\t        SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs) = 1;\n+\t      gimple_stmt_iterator tmp_gsi = gsi_for_stmt (phi);\n+\t      remove_phi_node (&tmp_gsi, true);\n+\t    }\n+\t}\n     }\n }\n "}]}