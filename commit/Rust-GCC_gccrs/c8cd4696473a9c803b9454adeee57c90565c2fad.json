{"sha": "c8cd4696473a9c803b9454adeee57c90565c2fad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhjZDQ2OTY0NzNhOWM4MDNiOTQ1NGFkZWVlNTdjOTA1NjVjMmZhZA==", "commit": {"author": {"name": "Michael Collison", "email": "michael.collison@linaro.org", "date": "2016-08-24T19:31:20Z"}, "committer": {"name": "Michael Collison", "email": "collison@gcc.gnu.org", "date": "2016-08-24T19:31:20Z"}, "message": "arm-modes.def: Add new condition code mode CC_V to represent the overflow bit.\n\n2016-08-24  Michael Collison <michael.collison@linaro.org>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* config/arm/arm-modes.def: Add new condition code mode CC_V\n\tto represent the overflow bit.\n\t* config/arm/arm.c (maybe_get_arm_condition_code):\n\tAdd support for CC_Vmode.\n\t(arm_gen_unlikely_cbranch): New function to generate common\n\trtl conditional branches for overflow patterns.\n\t* config/arm/arm-protos.h: Add prototype for\n\tarm_gen_unlikely_cbranch.\n\t* config/arm/arm.md (addv<mode>4, add<mode>3_compareV,\n\taddsi3_compareV_upper): New patterns to support signed\n\tbuiltin overflow add operations.\n\t(uaddv<mode>4, add<mode>3_compareC, addsi3_compareV_upper):\n\tNew patterns to support unsigned builtin add overflow operations.\n\t(subv<mode>4, sub<mode>3_compare1): New patterns to support signed\n\tbuiltin overflow subtract operations,\n\t(usubv<mode>4): New patterns to support unsigned builtin subtract\n\toverflow operations.\n\t(negvsi3, negvdi3, negdi2_compare, negsi2_carryin_compare): New patterns\n\tto support builtin overflow negate operations.\n\t* gcc.target/arm/builtin_saddl.c: New testcase.\n\t* gcc.target/arm/builtin_saddll.c: New testcase.\n\t* gcc.target/arm/builtin_uaddl.c: New testcase.\n\t* gcc.target/arm/builtin_uaddll.c: New testcase.\n\t* gcc.target/arm/builtin_ssubl.c: New testcase.\n\t* gcc.target/arm/builtin_ssubll.c: New testcase.\n\t* gcc.target/arm/builtin_usubl.c: New testcase.\n\t* gcc.target/arm/builtin_usubll.c: New testcase.\n\n\nCo-Authored-By: Michael Collison <michael.collison@arm.com>\n\nFrom-SVN: r239739", "tree": {"sha": "8a1b828540680a9271b18e9c65d461ce0fb4fb3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a1b828540680a9271b18e9c65d461ce0fb4fb3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8cd4696473a9c803b9454adeee57c90565c2fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cd4696473a9c803b9454adeee57c90565c2fad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8cd4696473a9c803b9454adeee57c90565c2fad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8cd4696473a9c803b9454adeee57c90565c2fad/comments", "author": null, "committer": null, "parents": [{"sha": "d5b5d21260d1036b078cad42ec2fe88754cd8ca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5b5d21260d1036b078cad42ec2fe88754cd8ca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5b5d21260d1036b078cad42ec2fe88754cd8ca3"}], "stats": {"total": 532, "additions": 532, "deletions": 0}, "files": [{"sha": "ef08c0a40fc7cb8db48505bfeac896d51954a4c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -1,3 +1,26 @@\n+2016-08-24  Michael Collison <michael.collison@linaro.org>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* config/arm/arm-modes.def: Add new condition code mode CC_V\n+\tto represent the overflow bit.\n+\t* config/arm/arm.c (maybe_get_arm_condition_code):\n+\tAdd support for CC_Vmode.\n+\t(arm_gen_unlikely_cbranch): New function to generate common\n+\trtl conditional branches for overflow patterns.\n+\t* config/arm/arm-protos.h: Add prototype for\n+\tarm_gen_unlikely_cbranch.\n+\t* config/arm/arm.md (addv<mode>4, add<mode>3_compareV,\n+\taddsi3_compareV_upper): New patterns to support signed\n+\tbuiltin overflow add operations.\n+\t(uaddv<mode>4, add<mode>3_compareC, addsi3_compareV_upper):\n+\tNew patterns to support unsigned builtin add overflow operations.\n+\t(subv<mode>4, sub<mode>3_compare1): New patterns to support signed\n+\tbuiltin overflow subtract operations,\n+\t(usubv<mode>4): New patterns to support unsigned builtin subtract\n+\toverflow operations.\n+\t(negvsi3, negvdi3, negdi2_compare, negsi2_carryin_compare): New patterns\n+\tto support builtin overflow negate operations.\n+\n 2016-08-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \tRevert"}, {"sha": "69231f299898d5ac8d9c24493a17e896e43cefc6", "filename": "gcc/config/arm/arm-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-modes.def?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -59,6 +59,7 @@ CC_MODE (CC_DGEU);\n CC_MODE (CC_DGTU);\n CC_MODE (CC_C);\n CC_MODE (CC_N);\n+CC_MODE (CC_V);\n \n /* Vector modes.  */\n VECTOR_MODES (INT, 4);        /*            V4QI V2HI */"}, {"sha": "374836cbdd52533237b81903c602117dc10ada22", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -54,6 +54,8 @@ extern rtx arm_simd_vect_par_cnst_half (machine_mode mode, bool high);\n extern bool arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n \t\t\t\t\t\t bool high);\n #ifdef RTX_CODE\n+extern void arm_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,\n+\t\t\t\t      rtx label_ref);\n extern bool arm_vector_mode_supported_p (machine_mode);\n extern bool arm_small_register_classes_for_mode_p (machine_mode);\n extern int arm_hard_regno_mode_ok (unsigned int, machine_mode);"}, {"sha": "c775807e76b14c1b364607dc5b9f2266aad9f9b3", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -22992,6 +22992,8 @@ maybe_get_arm_condition_code (rtx comparison)\n \t{\n \tcase LTU: return ARM_CS;\n \tcase GEU: return ARM_CC;\n+\tcase NE: return ARM_CS;\n+\tcase EQ: return ARM_CC;\n \tdefault: return ARM_NV;\n \t}\n \n@@ -23017,6 +23019,14 @@ maybe_get_arm_condition_code (rtx comparison)\n \tdefault: return ARM_NV;\n \t}\n \n+    case CC_Vmode:\n+      switch (comp_code)\n+\t{\n+\tcase NE: return ARM_VS;\n+\tcase EQ: return ARM_VC;\n+\tdefault: return ARM_NV;\n+\t}\n+\n     case CCmode:\n       switch (comp_code)\n \t{\n@@ -30575,4 +30585,23 @@ arm_can_output_mi_thunk (const_tree, HOST_WIDE_INT, HOST_WIDE_INT vcall_offset,\n   return true;\n }\n \n+/* Generate RTL for a conditional branch with rtx comparison CODE in\n+   mode CC_MODE. The destination of the unlikely conditional branch\n+   is LABEL_REF.  */\n+\n+void\n+arm_gen_unlikely_cbranch (enum rtx_code code, machine_mode cc_mode,\n+\t\t\t  rtx label_ref)\n+{\n+  rtx x;\n+  x = gen_rtx_fmt_ee (code, VOIDmode,\n+\t\t      gen_rtx_REG (cc_mode, CC_REGNUM),\n+\t\t      const0_rtx);\n+\n+  x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n+\t\t\t    gen_rtx_LABEL_REF (VOIDmode, label_ref),\n+\t\t\t    pc_rtx);\n+  emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n+}\n+\n #include \"gt-arm.h\""}, {"sha": "318db75ece9615412b48943ba197aae364a78a54", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 325, "deletions": 0, "changes": 325, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -547,6 +547,32 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n+(define_expand \"addv<mode>4\"\n+  [(match_operand:SIDI 0 \"register_operand\")\n+   (match_operand:SIDI 1 \"register_operand\")\n+   (match_operand:SIDI 2 \"register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_add<mode>3_compareV (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"uaddv<mode>4\"\n+  [(match_operand:SIDI 0 \"register_operand\")\n+   (match_operand:SIDI 1 \"register_operand\")\n+   (match_operand:SIDI 2 \"register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_add<mode>3_compareC (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (NE, CC_Cmode, operands[3]);\n+\n+  DONE;\n+})\n+\n (define_expand \"addsi3\"\n   [(set (match_operand:SI          0 \"s_register_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n@@ -624,6 +650,165 @@\n  ]\n )\n \n+(define_insn_and_split \"adddi3_compareV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(ne:CC_V\n+\t  (plus:TI\n+\t    (sign_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t    (sign_extend:TI (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t  (sign_extend:TI (plus:DI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC_C CC_REGNUM)\n+\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t (match_dup 1)))\n+\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (reg:CC_V CC_REGNUM)\n+\t\t   (ne:CC_V\n+\t\t    (plus:DI (plus:DI\n+\t\t\t      (sign_extend:DI (match_dup 4))\n+\t\t\t      (sign_extend:DI (match_dup 5)))\n+\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n+\t\t    (plus:DI (sign_extend:DI\n+\t\t\t      (plus:SI (match_dup 4) (match_dup 5)))\n+\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n+\t     (set (match_dup 3) (plus:SI (plus:SI\n+\t\t\t\t\t  (match_dup 4) (match_dup 5))\n+\t\t\t\t\t (ltu:SI (reg:CC_C CC_REGNUM)\n+\t\t\t\t\t\t (const_int 0))))])]\n+  \"\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[4] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[5] = gen_highpart (SImode, operands[2]);\n+    operands[2] = gen_lowpart (SImode, operands[2]);\n+  }\"\n+ [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n+(define_insn \"addsi3_compareV\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(ne:CC_V\n+\t  (plus:DI\n+\t    (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (sign_extend:DI (plus:SI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"adds%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_sreg\")]\n+)\n+\n+(define_insn \"*addsi3_compareV_upper\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(ne:CC_V\n+\t  (plus:DI\n+\t   (plus:DI\n+\t    (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n+\t  (plus:DI (sign_extend:DI\n+\t\t    (plus:SI (match_dup 1) (match_dup 2)))\n+\t\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI\n+\t (plus:SI (match_dup 1) (match_dup 2))\n+\t (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  \"TARGET_32BIT\"\n+  \"adcs%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"adcs_reg\")]\n+)\n+\n+(define_insn_and_split \"adddi3_compareC\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:TI\n+\t    (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t    (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t  (zero_extend:TI (plus:DI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(plus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC_C CC_REGNUM)\n+\t\t   (compare:CC_C (plus:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t (match_dup 1)))\n+\t      (set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (reg:CC_C CC_REGNUM)\n+\t\t   (ne:CC_C\n+\t\t    (plus:DI (plus:DI\n+\t\t\t      (zero_extend:DI (match_dup 4))\n+\t\t\t      (zero_extend:DI (match_dup 5)))\n+\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n+\t\t    (plus:DI (zero_extend:DI\n+\t\t\t      (plus:SI (match_dup 4) (match_dup 5)))\n+\t\t\t     (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n+\t     (set (match_dup 3) (plus:SI\n+\t\t\t\t (plus:SI (match_dup 4) (match_dup 5))\n+\t\t\t\t (ltu:SI (reg:CC_C CC_REGNUM)\n+\t\t\t\t\t (const_int 0))))])]\n+  \"\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[4] = gen_highpart (SImode, operands[1]);\n+    operands[5] = gen_highpart (SImode, operands[2]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[2] = gen_lowpart (SImode, operands[2]);\n+  }\"\n+ [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n+(define_insn \"*addsi3_compareC_upper\"\n+  [(set (reg:CC_C CC_REGNUM)\n+\t(ne:CC_C\n+\t  (plus:DI\n+\t   (plus:DI\n+\t    (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t    (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))\n+\t  (plus:DI (zero_extend:DI\n+\t\t    (plus:SI (match_dup 1) (match_dup 2)))\n+\t\t   (ltu:DI (reg:CC_C CC_REGNUM) (const_int 0)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI\n+\t (plus:SI (match_dup 1) (match_dup 2))\n+\t (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  \"TARGET_32BIT\"\n+  \"adcs%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"adcs_reg\")]\n+)\n+\n+(define_insn \"addsi3_compareC\"\n+   [(set (reg:CC_C CC_REGNUM)\n+\t (ne:CC_C\n+\t  (plus:DI\n+\t   (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t   (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t  (zero_extend:DI\n+\t   (plus:SI (match_dup 1) (match_dup 2)))))\n+    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t (plus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"adds%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV\n@@ -873,6 +1058,75 @@\n     (set_attr \"type\" \"adcs_reg\")]\n )\n \n+(define_expand \"subv<mode>4\"\n+  [(match_operand:SIDI 0 \"register_operand\")\n+   (match_operand:SIDI 1 \"register_operand\")\n+   (match_operand:SIDI 2 \"register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"usubv<mode>4\"\n+  [(match_operand:SIDI 0 \"register_operand\")\n+   (match_operand:SIDI 1 \"register_operand\")\n+   (match_operand:SIDI 2 \"register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_sub<mode>3_compare1 (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (LTU, CCmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_insn_and_split \"subdi3_compare1\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (match_operand:DI 1 \"register_operand\" \"r\")\n+\t  (match_operand:DI 2 \"register_operand\" \"r\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=&r\")\n+\t(minus:DI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (match_dup 1) (match_dup 2)))\n+\t      (set (match_dup 0) (minus:SI (match_dup 1) (match_dup 2)))])\n+   (parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (match_dup 4) (match_dup 5)))\n+\t     (set (match_dup 3) (minus:SI (minus:SI (match_dup 4) (match_dup 5))\n+\t\t\t       (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))])]\n+  {\n+    operands[3] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[4] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+    operands[5] = gen_highpart (SImode, operands[2]);\n+    operands[2] = gen_lowpart (SImode, operands[2]);\n+   }\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n+(define_insn \"subsi3_compare1\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (match_operand:SI 1 \"register_operand\" \"r\")\n+\t  (match_operand:SI 2 \"register_operand\" \"r\")))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\"\n+  \"subs%?\\\\t%0, %1, %2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_sreg\")]\n+)\n+\n (define_insn \"*subsi3_carryin\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n         (minus:SI (minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"r,I\")\n@@ -4360,6 +4614,63 @@\n \f\n ;; Unary arithmetic insns\n \n+(define_expand \"negvsi3\"\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand:SI 1 \"register_operand\")\n+   (match_operand 2 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_subsi3_compare (operands[0], const0_rtx, operands[1]));\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[2]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"negvdi3\"\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand 2 \"\")]\n+  \"TARGET_ARM\"\n+{\n+  emit_insn (gen_negdi2_compare (operands[0], operands[1]));\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[2]);\n+\n+  DONE;\n+})\n+\n+\n+(define_insn_and_split \"negdi2_compare\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC\n+\t  (const_int 0)\n+\t  (match_operand:DI 1 \"register_operand\" \"0,r\")))\n+   (set (match_operand:DI 0 \"register_operand\" \"=r,&r\")\n+\t(minus:DI (const_int 0) (match_dup 1)))]\n+  \"TARGET_ARM\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (const_int 0) (match_dup 1)))\n+\t      (set (match_dup 0) (minus:SI (const_int 0)\n+\t\t\t\t\t   (match_dup 1)))])\n+   (parallel [(set (reg:CC CC_REGNUM)\n+\t\t   (compare:CC (const_int 0) (match_dup 3)))\n+\t     (set (match_dup 2)\n+\t\t  (minus:SI\n+\t\t   (minus:SI (const_int 0) (match_dup 3))\n+\t\t   (ltu:SI (reg:CC_C CC_REGNUM)\n+\t\t\t   (const_int 0))))])]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+    operands[3] = gen_highpart (SImode, operands[1]);\n+    operands[1] = gen_lowpart (SImode, operands[1]);\n+  }\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"type\" \"multiple\")]\n+)\n+\n (define_expand \"negdi2\"\n  [(parallel\n    [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n@@ -4400,6 +4711,20 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n+(define_insn \"*negsi2_carryin_compare\"\n+  [(set (reg:CC CC_REGNUM)\n+\t(compare:CC (const_int 0)\n+\t\t    (match_operand:SI 1 \"s_register_operand\" \"r\")))\n+   (set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(minus:SI (minus:SI (const_int 0)\n+\t\t\t    (match_dup 1))\n+\t\t  (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  \"TARGET_ARM\"\n+  \"rscs\\\\t%0, %1, #0\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"type\" \"alus_imm\")]\n+)\n+\n (define_expand \"negsi2\"\n   [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n \t(neg:SI (match_operand:SI 1 \"s_register_operand\" \"\")))]"}, {"sha": "2393eb5ce570f7e1575424147ba23211ec2974be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -1,3 +1,15 @@\n+2016-08-24  Michael Collison <michael.collison@linaro.org>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* gcc.target/arm/builtin_saddl.c: New testcase.\n+\t* gcc.target/arm/builtin_saddll.c: New testcase.\n+\t* gcc.target/arm/builtin_uaddl.c: New testcase.\n+\t* gcc.target/arm/builtin_uaddll.c: New testcase.\n+\t* gcc.target/arm/builtin_ssubl.c: New testcase.\n+\t* gcc.target/arm/builtin_ssubll.c: New testcase.\n+\t* gcc.target/arm/builtin_usubl.c: New testcase.\n+\t* gcc.target/arm/builtin_usubll.c: New testcase.\n+\n 2016-08-24  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/77270"}, {"sha": "af85594b9d337c3553ab3fe7225ce362c81a61c0", "filename": "gcc/testsuite/gcc.target/arm/builtin_saddl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddl.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+long overflow_add (long x, long y)\n+{\n+  long r;\n+\n+  int ovr = __builtin_saddl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */"}, {"sha": "62fe6eff01fca5e7d94757bde1f6831ffb7164f0", "filename": "gcc/testsuite/gcc.target/arm/builtin_saddll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_saddll.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+long long overflow_add (long long x, long long y)\n+{\n+  long long r;\n+\n+  int ovr = __builtin_saddll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler \"adcs\" } } */"}, {"sha": "8c5a4c921683af926633cc587dc9ee4331664cf1", "filename": "gcc/testsuite/gcc.target/arm/builtin_ssubl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubl.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+long overflow_sub (long x, long y)\n+{\n+  long r;\n+\n+  int ovr = __builtin_ssubl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */"}, {"sha": "2048d7915ea0faf7b2800e887904bb8f761a4dbf", "filename": "gcc/testsuite/gcc.target/arm/builtin_ssubll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_ssubll.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+long long overflow_sub (long long x, long long y)\n+{\n+  long long r;\n+\n+  int ovr = __builtin_ssubll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+/* { dg-final { scan-assembler \"sbcs\" } } */"}, {"sha": "ac25766c15762441afed96312e92d0ed5be9c8a2", "filename": "gcc/testsuite/gcc.target/arm/builtin_uaddl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddl.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+unsigned long overflow_add (unsigned long x, unsigned long y)\n+{\n+  unsigned long r;\n+\n+  int ovr = __builtin_uaddl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */"}, {"sha": "ec3188e90671bbe50e2c9ca2a99e0dd7f436f839", "filename": "gcc/testsuite/gcc.target/arm/builtin_uaddll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_uaddll.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+unsigned long long overflow_add (unsigned long long x, unsigned long long y)\n+{\n+  unsigned long long r;\n+\n+  int ovr = __builtin_uaddll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"adds\" } } */\n+/* { dg-final { scan-assembler \"adcs\" } } */"}, {"sha": "99782083d4539424b4de3082c8262deb3a67fb37", "filename": "gcc/testsuite/gcc.target/arm/builtin_usubl.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubl.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+unsigned long overflow_sub (unsigned long x, unsigned long y)\n+{\n+  unsigned long r;\n+\n+  int ovr = __builtin_usubl_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */"}, {"sha": "8d64660a813afda5949f0d217c51984336fad3d7", "filename": "gcc/testsuite/gcc.target/arm/builtin_usubll.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8cd4696473a9c803b9454adeee57c90565c2fad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fbuiltin_usubll.c?ref=c8cd4696473a9c803b9454adeee57c90565c2fad", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" }  */\n+/* { dg-require-effective-target arm32 } */\n+extern void overflow_handler ();\n+\n+unsigned long long overflow_sub (unsigned long long x, unsigned long long y)\n+{\n+  unsigned long long r;\n+\n+  int ovr = __builtin_usubll_overflow (x, y, &r);\n+  if (ovr)\n+    overflow_handler ();\n+\n+  return r;\n+}\n+\n+/* { dg-final { scan-assembler \"subs\" } } */\n+/* { dg-final { scan-assembler \"sbcs\" } } */"}]}