{"sha": "22977dce58648cd7da11e07e4373d974e256663a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI5NzdkY2U1ODY0OGNkN2RhMTFlMDdlNDM3M2Q5NzRlMjU2NjYzYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-01-31T22:52:25Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-01-31T22:52:25Z"}, "message": "generation_prohibited.c: Remove, swap can indeed throw (DR 774).\n\n2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/23_containers/array/requirements/exception/\n\tgeneration_prohibited.c: Remove, swap can indeed throw (DR 774).\n\n\t* testsuite/util/exception/safety.h (insert_base<__versa_string>): Fix.\n\t* testsuite/util/testsuite_container_traits.h\n\t(traits<__versa_string>): Enable insert tests.\n\n2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/forward_list.h (forward_list<>::insert_after\n\t(const_iterator, size_type, const _Tp&), insert_after(const_iterator,\n\t_InputIterator, _InputIterator), insert_after(const_iterator,\n\tstd::initializer_list<>)): Fix return type per N3000.\n\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc:\n\tAdjust.\n\t* testsuite/23_containers/forward_list/modifiers/2.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tassign_neg.cc: Adjust dg-error line numbers.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tinsert_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_1_neg.cc: Likewise.\n\t* testsuite/23_containers/forward_list/requirements/dr438/\n\tconstructor_2_neg.cc: Likewise.\n\nFrom-SVN: r156419", "tree": {"sha": "794c9176f6d2862a3944bbddc03e51589f4b58fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/794c9176f6d2862a3944bbddc03e51589f4b58fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22977dce58648cd7da11e07e4373d974e256663a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22977dce58648cd7da11e07e4373d974e256663a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22977dce58648cd7da11e07e4373d974e256663a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22977dce58648cd7da11e07e4373d974e256663a/comments", "author": null, "committer": null, "parents": [{"sha": "7adac79a3d5420b9683e9fe38b2b526f26c2c225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7adac79a3d5420b9683e9fe38b2b526f26c2c225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7adac79a3d5420b9683e9fe38b2b526f26c2c225"}], "stats": {"total": 154, "additions": 88, "deletions": 66}, "files": [{"sha": "e9dc874e1264985cc973e3560faac4b22168a27b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,3 +1,30 @@\n+2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/23_containers/array/requirements/exception/\n+\tgeneration_prohibited.c: Remove, swap can indeed throw (DR 774).\n+\n+\t* testsuite/util/exception/safety.h (insert_base<__versa_string>): Fix.\n+\t* testsuite/util/testsuite_container_traits.h\n+\t(traits<__versa_string>): Enable insert tests.\n+\n+2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/forward_list.h (forward_list<>::insert_after\n+\t(const_iterator, size_type, const _Tp&), insert_after(const_iterator,\n+\t_InputIterator, _InputIterator), insert_after(const_iterator,\n+\tstd::initializer_list<>)): Fix return type per N3000.\n+\t* testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc:\n+\tAdjust.\n+\t* testsuite/23_containers/forward_list/modifiers/2.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tassign_neg.cc: Adjust dg-error line numbers.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tinsert_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_1_neg.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/requirements/dr438/\n+\tconstructor_2_neg.cc: Likewise.\n+\n 2010-01-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tRevert last changes. Also revert, among the previous changes:"}, {"sha": "b90c8cf6d6682b4d80135026a4df30c46f2f72f9", "filename": "libstdc++-v3/include/bits/forward_list.h", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fforward_list.h?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // <forward_list.h> -*- C++ -*-\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -859,25 +859,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  @param  pos  An iterator into the %forward_list.\n        *  @param  n  Number of elements to be inserted.\n        *  @param  val  Data to be inserted.\n+       *  @return  pos.\n        *\n        *  This function will insert a specified number of copies of the\n        *  given data after the location specified by @a pos.\n        *\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-      void\n+      iterator\n       insert_after(const_iterator __pos, size_type __n, const _Tp& __val)\n       {\n         forward_list __tmp(__n, __val, this->get_allocator());\n         splice_after(__pos, std::move(__tmp));\n+\treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n+\t\t\t(__pos._M_node));\n       }\n \n       /**\n        *  @brief  Inserts a range into the %forward_list.\n        *  @param  position  An iterator into the %forward_list.\n        *  @param  first  An input iterator.\n        *  @param  last   An input iterator.\n+       *  @return  pos.\n        *\n        *  This function will insert copies of the data in the range [@a\n        *  first,@a last) into the %forward_list after the location specified\n@@ -887,19 +891,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  does not invalidate iterators and references.\n        */\n       template<typename _InputIterator>\n-        void\n+        iterator\n         insert_after(const_iterator __pos,\n                      _InputIterator __first, _InputIterator __last)\n         {\n           forward_list __tmp(__first, __last, this->get_allocator());\n           splice_after(__pos, std::move(__tmp));\n+\t  return iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n+\t\t\t  (__pos._M_node));\n         }\n \n       /**\n        *  @brief  Inserts the contents of an initializer_list into\n        *          %forward_list after the specified iterator.\n        *  @param  pos  An iterator into the %forward_list.\n        *  @param  il  An initializer_list of value_type.\n+       *  @return  pos.\n        *\n        *  This function will insert copies of the data in the\n        *  initializer_list @a il into the %forward_list before the location\n@@ -908,11 +915,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n        *  This operation is linear in the number of elements inserted and\n        *  does not invalidate iterators and references.\n        */\n-      void\n+      iterator\n       insert_after(const_iterator __pos, std::initializer_list<_Tp> __il)\n       {\n         forward_list __tmp(__il, this->get_allocator());\n         splice_after(__pos, std::move(__tmp));\n+\treturn iterator(__const_pointer_cast<typename _Node_base::_Pointer>\n+\t\t\t(__pos._M_node));\n       }\n \n       /**"}, {"sha": "5ecf8fb2e394e9948b1187976fb98b8294409556", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/exception/generation_prohibited.cc", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7adac79a3d5420b9683e9fe38b2b526f26c2c225/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7adac79a3d5420b9683e9fe38b2b526f26c2c225/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexception%2Fgeneration_prohibited.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexception%2Fgeneration_prohibited.cc?ref=7adac79a3d5420b9683e9fe38b2b526f26c2c225", "patch": "@@ -1,34 +0,0 @@\n-// { dg-options \"-std=gnu++0x -D_GLIBCXX_IS_AGGREGATE\" }\n-// { dg-require-cstdint \"\" }\n-// { dg-do run { xfail *-*-* } }\n-\n-// 2009-09-09  Benjamin Kosnik  <benjamin@redhat.com>\n-\n-// Copyright (C) 2009 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <array>\n-#include <exception/safety.h>\n-\n-// Container requirement testing, exceptional behavior\n-int main()\n-{\n-  typedef __gnu_cxx::throw_value_random value_type;\n-  typedef std::array<value_type, 129> test_type;\n-  __gnu_test::generation_prohibited<test_type> test;\n-  return 0;\n-}"}, {"sha": "d9a437e09e0dc1a3ee9005c30af603842a88d025", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/ext_pointer/modifiers/2.cc", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fext_pointer%2Fmodifiers%2F2.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,7 +38,9 @@ test01()\n   std::forward_list<int, _ExtPtr_allocator<int> > fl(\n     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n-  fl.insert_after(fl.before_begin(), 42);\n+  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n+    = fl.insert_after(fl.before_begin(), 42);\n+  VERIFY(ret == fl.begin());\n   VERIFY(fl.front() == 42);\n }\n \n@@ -49,15 +51,17 @@ test02()\n   std::forward_list<int, _ExtPtr_allocator<int> > fl(\n     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n+  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator pos\n+    = fl.cbegin();\n \n   ++pos;\n   VERIFY(*pos == 1);\n \n   // Note: Calling l.insert_after(pos, 5, 42); without the long five\n   // gets resolved to the iterator range version and fails to compile!\n-  fl.insert_after(pos, 5, 42);\n+  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n+    = fl.insert_after(pos, 5, 42);\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -76,14 +80,16 @@ test03()\n   std::forward_list<int, _ExtPtr_allocator<int> > fl(\n     {0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n-  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator \n-    pos = fl.cbegin();\n+  std::forward_list<int, _ExtPtr_allocator<int> >::const_iterator pos\n+    = fl.cbegin();\n \n   ++pos;\n   VERIFY(*pos == 1);\n \n   int i[3] = {666, 777, 888};\n-  fl.insert_after(pos, i, i+3);\n+  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n+    = fl.insert_after(pos, i, i + 3);\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -107,7 +113,9 @@ test04()\n   ++pos;\n   VERIFY(*pos == 1);\n \n-  fl.insert_after(pos, {-1, -2, -3, -4, -5});\n+  std::forward_list<int, _ExtPtr_allocator<int> >::iterator ret\n+    = fl.insert_after(pos, {-1, -2, -3, -4, -5});\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -123,16 +131,18 @@ test05()\n   std::forward_list<std::string, _ExtPtr_allocator<std::string> > fl(\n     {\"AAA\", \"BBB\", \"CCC\"});\n \n-  std::forward_list<std::string, _ExtPtr_allocator<std::string> >::const_iterator \n-    pos = fl.cbegin();\n+  std::forward_list<std::string, _ExtPtr_allocator<std::string> >::\n+    const_iterator pos = fl.cbegin();\n \n   ++pos;\n   VERIFY(*pos == \"BBB\");\n \n   std::string x( \"XXX\" );\n-  fl.insert_after(pos, std::move(x));\n+  std::forward_list<std::string, _ExtPtr_allocator<std::string> >::iterator ret\n+    = fl.insert_after(pos, std::move(x));\n   VERIFY(*pos == \"BBB\");\n   ++pos;\n+  VERIFY(ret == pos);\n   VERIFY(*pos == \"XXX\");\n   ++pos;\n   VERIFY(*pos == \"CCC\");"}, {"sha": "92678f39d69b3cbb092d30088175e94acb69517e", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/2.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F2.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=gnu++0x\" }\n \n-// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,7 +34,9 @@ test01()\n {\n   std::forward_list<int> fl({0, 1, 2, 3, 4, 5, 6, 7, 8, 9});\n \n-  fl.insert_after(fl.before_begin(), 42);\n+  std::forward_list<int>::iterator ret = fl.insert_after(fl.before_begin(),\n+\t\t\t\t\t\t\t 42);\n+  VERIFY(ret == fl.begin());\n   VERIFY(fl.front() == 42);\n }\n \n@@ -50,7 +52,8 @@ test02()\n \n   // Note: Calling l.insert_after(pos, 5, 42); without the long five\n   // gets resolved to the iterator range version and fails to compile!\n-  fl.insert_after(pos, 5, 42);\n+  std::forward_list<int>::iterator ret = fl.insert_after(pos, 5, 42);\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -73,7 +76,8 @@ test03()\n   VERIFY(*pos == 1);\n \n   int i[3] = {666, 777, 888};\n-  fl.insert_after(pos, i, i+3);\n+  std::forward_list<int>::iterator ret = fl.insert_after(pos, i, i + 3);\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -94,7 +98,9 @@ test04()\n   ++pos;\n   VERIFY(*pos == 1);\n \n-  fl.insert_after(pos, {-1, -2, -3, -4, -5});\n+  std::forward_list<int>::iterator ret\n+    = fl.insert_after(pos, {-1, -2, -3, -4, -5});\n+  VERIFY(ret == pos);\n   VERIFY(*pos == 1);\n \n   ++pos;\n@@ -114,9 +120,11 @@ test05()\n   VERIFY(*pos == \"BBB\");\n \n   std::string x( \"XXX\" );\n-  fl.insert_after(pos, std::move(x));\n+  std::forward_list<std::string>::iterator ret\n+    = fl.insert_after(pos, std::move(x));\n   VERIFY(*pos == \"BBB\");\n   ++pos;\n+  VERIFY(ret == pos);\n   VERIFY(*pos == \"XXX\");\n   ++pos;\n   VERIFY(*pos == \"CCC\");"}, {"sha": "7e6e6492a2ca8f9cd83e00ac3e7d48bc8abc5a07", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fassign_neg.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "439a7b3219189c2a26286da6b612937cc6b1751c", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_1_neg.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "8184b67d750f723b92fe57474d3877ea4fa2e872", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/constructor_2_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Fconstructor_2_neg.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "0bc1a3d58cb1e8129df8e3ba3d541b70e39d48a9", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/requirements/dr438/insert_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Frequirements%2Fdr438%2Finsert_neg.cc?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // { dg-do compile }\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-error \"no matching\" \"\" { target *-*-* } 1196 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 1205 }\n // { dg-excess-errors \"\" }\n \n // Copyright (C) 2009, 2010 Free Software Foundation"}, {"sha": "4be53185b8e52a359896d82739227d70026374e7", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -512,10 +512,12 @@ namespace __gnu_test\n \tinsert_base() : _F_insert_point(&container_type::insert) { }\n       };\n \n-    template<typename _Tp1, typename _Tp2, typename _Tp3>\n-      struct insert_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3>>\n+    template<typename _Tp1, typename _Tp2, typename _Tp3,\n+\t     template <typename, typename, typename> class _Tp4>\n+      struct insert_base<__gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>>\n       {\n-\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3> container_type;\n+\ttypedef __gnu_cxx::__versa_string<_Tp1, _Tp2, _Tp3, _Tp4>\n+\t                                                container_type;\n \ttypedef typename container_type::iterator \titerator;\n \ttypedef typename container_type::value_type \tvalue_type;\n "}, {"sha": "af375153090d7c3f72ec72a3fb08f2843a7fc8b7", "filename": "libstdc++-v3/testsuite/util/testsuite_container_traits.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22977dce58648cd7da11e07e4373d974e256663a/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_container_traits.h?ref=22977dce58648cd7da11e07e4373d974e256663a", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2009, 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the terms\n@@ -135,7 +135,7 @@ namespace __gnu_test\n       typedef std::true_type    is_pointer_aware;\n \n       typedef std::true_type\thas_erase;\n-      //typedef std::true_type\thas_insert;  XXX no vstring<rc>::insert\n+      typedef std::true_type\thas_insert;\n     };\n \n   template<typename _Tp1, typename _Tp2, typename _Tp3, typename _Tp4>"}]}