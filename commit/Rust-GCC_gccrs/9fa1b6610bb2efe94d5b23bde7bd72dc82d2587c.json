{"sha": "9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZhMWI2NjEwYmIyZWZlOTRkNWIyM2JkZTdiZDcyZGM4MmQyNTg3Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-03-29T14:43:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-03-29T14:43:01Z"}, "message": "More underlining of bad arguments (PR c++/85110)\n\nAs of r256448, the C++ frontend underlines many bad arguments in its\ndiagnostics; those where perform_overload_resolution returns a\nnon-NULL candidate, but there's a failure in convert_like_real.\n\nHowever, for the case where perform_overload_resolution fails, but\nthere's a single non-viable candidate, the error is diagnosed by\ncp_build_function_call_vec, and that currently doesn't underline\nthe bad argument:\n\n$ cat test.cc\nvoid callee (int one, const char **two, int three);\n\nvoid\ncaller (const char *fmt)\n{\n  callee (1, fmt, 3);\n}\n\nWe emit:\n\n$ g++ test.cc\ntest.cc: In function 'void caller(const char*)':\ntest.cc:6:20: error: cannot convert 'const char*' to 'const char**' for argument '2' to 'void callee(int, const char**, int)'\n   callee (1, fmt, 3);\n                    ^\n\nIt's going through convert_for_assignment, and\nimplicitly using input_location.\n\nThis patch updates convert_for_assignment for this case, using\nan EXPR_LOCATION if there is one, or falling back to input_location\notherwise, underlining the argument in question:\n\ntest.cc: In function 'void caller(const char*)':\ntest.cc:6:14: error: cannot convert 'const char*' to 'const char**' for argument '2' to 'void callee(int, const char**, int)'\n   callee (1, fmt, 3);\n              ^~~\n\ngcc/cp/ChangeLog:\n\tPR c++/85110\n\t* typeck.c (convert_for_assignment): When complaining due to\n\tconversions for an argument, attempt to use the location of the\n\targument.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/85110\n\t* g++.dg/diagnostic/param-type-mismatch-2.C: New test.\n\nFrom-SVN: r258957", "tree": {"sha": "6c668bbd9b0202aef0d490ddb3cf228f557bb0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c668bbd9b0202aef0d490ddb3cf228f557bb0dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "059cc8aca774e50555bc116436348d2898404685", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059cc8aca774e50555bc116436348d2898404685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059cc8aca774e50555bc116436348d2898404685"}], "stats": {"total": 192, "additions": 190, "deletions": 2}, "files": [{"sha": "344105844a6f665fe978c8500aa7c8e69e342a64", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "patch": "@@ -1,3 +1,10 @@\n+2018-03-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* typeck.c (convert_for_assignment): When complaining due to\n+\tconversions for an argument, attempt to use the location of the\n+\targument.\n+\n 2018-03-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/85028"}, {"sha": "d454c6c5a2956c6dde1381d9c3b2e7a6b952641c", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "patch": "@@ -8782,8 +8782,9 @@ convert_for_assignment (tree type, tree rhs,\n \t\t\t\t\t\t   parmnum, complain, flags);\n \t\t}\n \t      else if (fndecl)\n-\t\terror (\"cannot convert %qH to %qI for argument %qP to %qD\",\n-\t\t       rhstype, type, parmnum, fndecl);\n+\t\terror_at (EXPR_LOC_OR_LOC (rhs, input_location),\n+\t\t\t  \"cannot convert %qH to %qI for argument %qP to %qD\",\n+\t\t\t  rhstype, type, parmnum, fndecl);\n \t      else\n \t\tswitch (errtype)\n \t\t  {"}, {"sha": "912d406b5c4b18b6b1662ac29eb593fdbd64b7af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "patch": "@@ -1,3 +1,8 @@\n+2018-03-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/85110\n+\t* g++.dg/diagnostic/param-type-mismatch-2.C: New test.\n+\n 2018-03-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/85108"}, {"sha": "ae84248b417042f8674713cbbff827882bc6ff8a", "filename": "gcc/testsuite/g++.dg/diagnostic/param-type-mismatch-2.C", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fparam-type-mismatch-2.C?ref=9fa1b6610bb2efe94d5b23bde7bd72dc82d2587c", "patch": "@@ -0,0 +1,175 @@\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+/* A collection of calls where argument 2 is of the wrong type.  */\n+\n+/* decl, with argname.  */\n+\n+extern int callee_1 (int one, const char **two, float three);\n+\n+int test_1 (int first, const char *second, float third)\n+{\n+  return callee_1 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_1 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* decl, without argname.  */\n+\n+extern int callee_2 (int, const char **, float);\n+\n+int test_2 (int first, const char *second, float third)\n+{\n+  return callee_2 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_2\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_2 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* defn, with argname.  */\n+\n+static int callee_3 (int one, const char **two, float three)\n+{\n+  return callee_2 (one, two, three);\n+}\n+\n+int test_3 (int first, const char *second, float third)\n+{\n+  return callee_3 (first, second, third); // { dg-error \"27: cannot convert 'const char\\\\*' to 'const char\\\\*\\\\*' for argument '2' to 'int callee_3\\\\(int, const char\\\\*\\\\*, float\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return callee_3 (first, second, third);\n+                           ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* static member, with argname.  */\n+\n+struct s4 { static int member_1 (int one, const char **two, float three); }; // { dg-line s4_member_1 }\n+\n+int test_4 (int first, const char *second, float third)\n+{\n+  return s4::member_1 (first, second, third); // { dg-error \"no matching function for call to 's4::member_1\\\\(int&, const char\\\\*&, float&\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return s4::member_1 (first, second, third);\n+                                            ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'static int s4::member_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } s4_member_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s4 { static int member_1 (int one, const char **two, float three); };\n+                        ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s4_member_1 }\n+  // TODO: underline the pertinent param\n+}\n+\n+/* non-static member, with argname.  */\n+\n+struct s5 { int member_1 (int one, const char **two, float three); }; // { dg-line s5_member_1 }\n+\n+int test_5 (int first, const char *second, float third)\n+{\n+  s5 inst;\n+  return inst.member_1 (first, second, third); // { dg-error \"no matching function for call to 's5::member_1\\\\(int&, const char\\\\*&, float&\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'int s5::member_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } s5_member_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s5 { int member_1 (int one, const char **two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s5_member_1 }\n+  // TODO: underline the pertinent param\n+}\n+\n+/* non-static member, with argname, via a ptr.  */\n+\n+struct s6 { int member_1 (int one, const char **two, float three); }; // { dg-line s6_member_1 }\n+\n+int test_6 (int first, const char *second, float third, s6 *ptr)\n+{\n+  return ptr->member_1 (first, second, third); // { dg-error \"no matching function for call to 's6::member_1\\\\(int&, const char\\\\*&, float&\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return ptr->member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'int s6::member_1\\\\(int, const char\\\\*\\\\*, float\\\\)'\" \"\" { target *-*-* } s6_member_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s6 { int member_1 (int one, const char **two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s6_member_1 }\n+  // TODO: underline the pertinent param\n+}\n+\n+/* Template function.  */\n+\n+template <typename T>\n+int test_7 (int one, T two, float three); // { dg-line test_7_decl }\n+\n+int test_7 (int first, const char *second, float third)\n+{\n+  return test_7 <const char **> (first, second, third); // { dg-line test_7_usage }\n+  // { dg-error \"no matching function\" \"\" { target *-*-* } test_7_usage }\n+  /* { dg-begin-multiline-output \"\" }\n+   return test_7 <const char **> (first, second, third);\n+                                                      ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'template<class T> int test_7\\\\(int, T, float\\\\)'\" \"\" { target *-*-* } test_7_decl }\n+  /* { dg-begin-multiline-output \"\" }\n+ int test_7 (int one, T two, float three);\n+     ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"template argument deduction/substitution failed:\" \"\" { target *-*-* } test_7_decl }\n+  // { dg-message \"cannot convert 'second' \\\\(type 'const char\\\\*'\\\\) to type 'const char\\\\*\\\\*'\" \"\" { target *-*-* } test_7_usage }\n+  /* { dg-begin-multiline-output \"\" }\n+   return test_7 <const char **> (first, second, third);\n+                                         ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Template class, static function.  */\n+\n+template <typename T>\n+struct s8 { static int member_1 (int one, T two, float three); }; // { dg-line s8_member_1 }\n+\n+int test_8 (int first, const char *second, float third)\n+{\n+  return s8 <const char **>::member_1 (first, second, third); // { dg-error \"no matching function for call to 's8<const char\\\\*\\\\*>::member_1\\\\(int&, const char\\\\*&, float&\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return s8 <const char **>::member_1 (first, second, third);\n+                                                            ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'static int s8<T>::member_1\\\\(int, T, float\\\\)\" \"\" { target *-*-* } s8_member_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s8 { static int member_1 (int one, T two, float three); };\n+                        ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s8_member_1 }\n+  // TODO: underline the pertinent param\n+}\n+\n+/* Template class, non-static function.  */\n+\n+template <typename T>\n+struct s9 { int member_1 (int one, T two, float three); }; // { dg-line s9_member_1 }\n+\n+int test_9 (int first, const char *second, float third)\n+{\n+  s9 <const char **> inst;\n+  return inst.member_1 (first, second, third); // { dg-error \"no matching function for call to 's9<const char\\\\*\\\\*>::member_1\\\\(int&, const char\\\\*&, float&\\\\)'\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   return inst.member_1 (first, second, third);\n+                                             ^\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"candidate: 'int s9<T>::member_1\\\\(int, T, float\\\\)\" \"\" { target *-*-* } s9_member_1 }\n+  /* { dg-begin-multiline-output \"\" }\n+ struct s9 { int member_1 (int one, T two, float three); };\n+                 ^~~~~~~~\n+     { dg-end-multiline-output \"\" } */\n+  // { dg-message \"no known conversion for argument 2 from 'const char\\\\*' to 'const char\\\\*\\\\*'\" \"\" { target *-*-* } s9_member_1 }\n+  // TODO: underline the pertinent param\n+}"}]}