{"sha": "1995a0227d2602718fd0b283a8c7050fdfc701fb", "node_id": "C_kwDOANBUbNoAKDE5OTVhMDIyN2QyNjAyNzE4ZmQwYjI4M2E4YzcwNTBmZGZjNzAxZmI", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-14T00:18:07Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-14T00:18:07Z"}, "message": "Daily bump.", "tree": {"sha": "5bca60b441cfcc03630d7b57c512ee3d8d5865d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bca60b441cfcc03630d7b57c512ee3d8d5865d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1995a0227d2602718fd0b283a8c7050fdfc701fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1995a0227d2602718fd0b283a8c7050fdfc701fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1995a0227d2602718fd0b283a8c7050fdfc701fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1995a0227d2602718fd0b283a8c7050fdfc701fb/comments", "author": null, "committer": null, "parents": [{"sha": "ff85f0afc7d5684378944f88a9bc9b931034788b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff85f0afc7d5684378944f88a9bc9b931034788b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff85f0afc7d5684378944f88a9bc9b931034788b"}], "stats": {"total": 277, "additions": 276, "deletions": 1}, "files": [{"sha": "423cc0add73d888abc2f892e1f2bf1d51de1e0bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1,3 +1,145 @@\n+2022-09-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106877\n+\t* reg-stack.cc (move_for_stack_reg): Check for any_malformed_asm\n+\tin gcc_assert.\n+\n+2022-09-13  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\tRevert:\n+\t2022-09-12  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (TARGET_CONSTANT_OK_FOR_CPROP_P):\n+\tNew macro definition.\n+\t(xtensa_constant_ok_for_cprop_p):\n+\tImplement the hook as mentioned above.\n+\n+2022-09-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/104482\n+\t* config/rs6000/rs6000-c.cc (altivec_resolve_overloaded_builtin): Fix\n+\tthe equality check for argument number, and move this hunk ahead.\n+\n+2022-09-13  Kewen.Lin  <linkw@gcc.gnu.org>\n+\n+\tPR target/105485\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_builtin): Add\n+\tthe handling for unresolved overloaded builtin function.\n+\t(rs6000_expand_builtin): Likewise.\n+\n+2022-09-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.cc (class rs6000_cost_data): Add new members\n+\tm_nstores, m_reduc_factor, m_gather_load and member function\n+\tdetermine_suggested_unroll_factor.\n+\t(rs6000_cost_data::update_target_cost_per_stmt): Update for m_nstores,\n+\tm_reduc_factor and m_gather_load.\n+\t(rs6000_cost_data::determine_suggested_unroll_factor): New function.\n+\t(rs6000_cost_data::finish_cost): Use determine_suggested_unroll_factor.\n+\t* config/rs6000/rs6000.opt (rs6000-vect-unroll-limit): New parameter.\n+\t(rs6000-vect-unroll-issue): Likewise.\n+\t(rs6000-vect-unroll-reduc-threshold): Likewise.\n+\t* doc/invoke.texi (rs6000-vect-unroll-limit): Document new parameter.\n+\n+2022-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/106909\n+\t* gimple-fold.cc (gimple_fold_call): Clear the ctrl-altering\n+\tflag of a unreachable call.\n+\n+2022-09-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106913\n+\t* tree-ssa-uninit.cc (warn_uninitialized_vars): Do not set\n+\tft_reachable on EXIT_BLOCK.\n+\n+2022-09-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.cc (aarch64_classify_vector_mode): Use\n+\tTARGET_FLOAT instead of TARGET_SIMD.\n+\t(aarch64_vectorize_related_mode): Restrict ADVSIMD handling to\n+\tTARGET_SIMD.\n+\t(aarch64_hard_regno_mode_ok): Don't allow tuples of 2 64-bit vectors\n+\tin GPRs.\n+\t(aarch64_classify_address): Treat little-endian structure moves\n+\tlike big-endian for TARGET_FLOAT && !TARGET_SIMD.\n+\t(aarch64_secondary_memory_needed): New function.\n+\t(aarch64_secondary_reload): Handle 128-bit Advanced SIMD vectors\n+\tin the same way as TF, TI and TD.\n+\t(aarch64_rtx_mult_cost): Restrict ADVSIMD handling to TARGET_SIMD.\n+\t(aarch64_rtx_costs): Likewise.\n+\t(aarch64_register_move_cost): Treat a pair of 64-bit vectors\n+\tseparately from a single 128-bit vector.  Handle the cost implied\n+\tby aarch64_secondary_memory_needed.\n+\t(aarch64_simd_valid_immediate): Restrict ADVSIMD handling to\n+\tTARGET_SIMD.\n+\t(aarch64_expand_vec_perm_const_1): Likewise.\n+\t(TARGET_SECONDARY_MEMORY_NEEDED): New macro.\n+\t* config/aarch64/iterators.md (VTX): New iterator.\n+\t* config/aarch64/aarch64.md (arches): Add fp_q as a synonym of simd.\n+\t(arch_enabled): Adjust accordingly.\n+\t(@aarch64_reload_mov<TX:mode>): Extend to...\n+\t(@aarch64_reload_mov<VTX:mode>): ...this.\n+\t* config/aarch64/aarch64-simd.md (mov<mode>): Require TARGET_FLOAT\n+\trather than TARGET_SIMD.\n+\t(movmisalign<mode>): Likewise.\n+\t(load_pair<DREG:mode><DREG2:mode>): Likewise.\n+\t(vec_store_pair<DREG:mode><DREG2:mode>): Likewise.\n+\t(load_pair<VQ:mode><VQ2:mode>): Likewise.\n+\t(vec_store_pair<VQ:mode><VQ2:mode>): Likewise.\n+\t(@aarch64_split_simd_mov<mode>): Likewise.\n+\t(aarch64_get_low<mode>): Likewise.\n+\t(aarch64_get_high<mode>): Likewise.\n+\t(aarch64_get_half<mode>): Likewise.  Canonicalize to a move for\n+\tlowpart extracts.\n+\t(*aarch64_simd_mov<VDMOV:mode>): Require TARGET_FLOAT rather than\n+\tTARGET_SIMD.  Use different w<-w and r<-w instructions for\n+\t!TARGET_SIMD.  Disable immediate moves for !TARGET_SIMD but\n+\tadd an alternative specifically for w<-Z.\n+\t(*aarch64_simd_mov<VQMOV:mode>): Require TARGET_FLOAT rather than\n+\tTARGET_SIMD.  Likewise for the associated define_splits.  Disable\n+\tFPR moves and immediate moves for !TARGET_SIMD but add an alternative\n+\tspecifically for w<-Z.\n+\t(aarch64_simd_mov_from_<mode>high): Require TARGET_FLOAT rather than\n+\tTARGET_SIMD.  Restrict the existing alternatives to TARGET_SIMD\n+\tbut add a new r<-w one for !TARGET_SIMD.\n+\t(*aarch64_get_high<mode>): New pattern.\n+\t(load_pair_lanes<mode>): Require TARGET_FLOAT rather than TARGET_SIMD.\n+\t(store_pair_lanes<mode>): Likewise.\n+\t(*aarch64_combine_internal<mode>): Likewise.  Restrict existing\n+\tw<-w, w<-r and w<-m alternatives to TARGET_SIMD but add a new w<-r\n+\talternative for !TARGET_SIMD.\n+\t(*aarch64_combine_internal_be<mode>): Likewise.\n+\t(aarch64_combinez<mode>): Require TARGET_FLOAT rather than TARGET_SIMD.\n+\tRemove bogus arch attribute.\n+\t(*aarch64_combinez_be<mode>): Likewise.\n+\t(@aarch64_vec_concat<mode>): Require TARGET_FLOAT rather than\n+\tTARGET_SIMD.\n+\t(aarch64_combine<mode>): Likewise.\n+\t(aarch64_rev_reglist<mode>): Likewise.\n+\t(mov<mode>): Likewise.\n+\t(*aarch64_be_mov<VSTRUCT_2D:mode>): Extend to TARGET_FLOAT &&\n+\t!TARGET_SIMD, regardless of endianness.  Extend associated\n+\tdefine_splits in the same way, both for this pattern and the\n+\tones below.\n+\t(*aarch64_be_mov<VSTRUCT_2Qmode>): Likewise.  Restrict w<-w\n+\talternative to TARGET_SIMD.\n+\t(*aarch64_be_movoi): Likewise.\n+\t(*aarch64_be_movci): Likewise.\n+\t(*aarch64_be_movxi): Likewise.\n+\t(*aarch64_be_mov<VSTRUCT_4QD:mode>): Extend to TARGET_FLOAT\n+\t&& !TARGET_SIMD, regardless of endianness.  Restrict w<-w alternative\n+\tto TARGET_SIMD for tuples of 128-bit vectors.\n+\t(*aarch64_be_mov<VSTRUCT_4QD:mode>): Likewise.\n+\t* config/aarch64/aarch64-ldpstp.md: Remove TARGET_SIMD condition\n+\tfrom DREG STP peephole.  Change TARGET_SIMD to TARGET_FLOAT in\n+\tthe VQ and VP_2E LDP and STP peepholes.\n+\n+2022-09-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (movv8di): Remove TARGET_SIMD\n+\tcondition.  Likewise for the related define_split.  Tweak formatting.\n+\n 2022-09-12  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* config/xtensa/xtensa.cc (TARGET_CONSTANT_OK_FOR_CPROP_P):"}, {"sha": "21befd257891d07f3099f224e05fbd1b3ec15831", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1 +1 @@\n-20220913\n+20220914"}, {"sha": "1b9e4722150d8a1c02bcb9a62668c99ed831e4df", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1,3 +1,29 @@\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (mark_used): Remove single-parameter overload.  Add\n+\tdefault argument to the two-parameter overload.\n+\t* decl2.cc (mark_used): Likewise.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (cxx_constant_value): Define two-parameter version\n+\tthat omits the object parameter.\n+\t* decl.cc (build_explicit_specifier): Omit NULL_TREE object\n+\targument to cxx_constant_value.\n+\t* except.cc (build_noexcept_spec): Likewise.\n+\t* pt.cc (expand_integer_pack): Likewise.\n+\t(fold_targs_r): Likewise.\n+\t* semantics.cc (finish_if_stmt_cond): Likewise.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* decl.cc (build_explicit_specifier): Pass complain to\n+\tcxx_constant_value.\n+\t* except.cc (build_noexcept_spec): Likewise.\n+\t* pt.cc (expand_integer_pack): Likewise.\n+\t(tsubst_function_decl): Propagate error_mark_node returned\n+\tfrom build_explicit_specifier.\n+\n 2022-09-12  Patrick Palka  <ppalka@redhat.com>\n \n \t* call.cc (build_conditional_expr): Adjust calls to"}, {"sha": "e537acdf0d4a800c28e34eb982800520993e936d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1,3 +1,50 @@\n+2022-09-13  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR target/106877\n+\t* g++.dg/ext/pr106877.C: New test case.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp1z/noexcept-type26.C: New test.\n+\t* g++.dg/cpp2a/explicit19.C: New test.\n+\t* g++.dg/ext/integer-pack6.C: New test.\n+\n+2022-09-13  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR target/104482\n+\t* gcc.target/powerpc/pr104482.c: New test.\n+\n+2022-09-13  Kewen.Lin  <linkw@gcc.gnu.org>\n+\n+\tPR target/105485\n+\t* g++.target/powerpc/pr105485.C: New test.\n+\n+2022-09-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/ldp_stp_20.c: New test.\n+\t* gcc.target/aarch64/ldp_stp_21.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_22.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_23.c: Likewise.\n+\t* gcc.target/aarch64/ldp_stp_24.c: Likewise.\n+\t* gcc.target/aarch64/movv16qi_1.c (gpr_to_gpr): New function.\n+\t* gcc.target/aarch64/movv8qi_1.c (gpr_to_gpr): Likewise.\n+\t* gcc.target/aarch64/movv16qi_2.c: New test.\n+\t* gcc.target/aarch64/movv16qi_3.c: Likewise.\n+\t* gcc.target/aarch64/movv2di_1.c: Likewise.\n+\t* gcc.target/aarch64/movv2x16qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv2x8qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv3x16qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv3x8qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv4x16qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv4x8qi_1.c: Likewise.\n+\t* gcc.target/aarch64/movv8qi_2.c: Likewise.\n+\t* gcc.target/aarch64/movv8qi_3.c: Likewise.\n+\t* gcc.target/aarch64/vect_unary_2.c: Likewise.\n+\n+2022-09-13  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/acle/ls64_asm_2.c: New test.\n+\n 2022-09-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101906"}, {"sha": "88e88ab85d18ae0a9050008a23e0caf0cb02cf49", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1,3 +1,14 @@\n+2022-09-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/106906\n+\t* env.c (get_icv_member_addr): Cast false to void * before assigning\n+\tit to icv_addr[1], and comment the whole assignment out.\n+\n+2022-09-13  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp.texi (gcn): Move misplaced -march=sm_30 remark to ...\n+\t(nvptx): ... here.\n+\n 2022-09-12  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* libgomp.texi (Offload-Target Specifics: nvptx): Document"}, {"sha": "4f8d8e0fb7a959a7b2baa76550c760c91975d3ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1995a0227d2602718fd0b283a8c7050fdfc701fb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1995a0227d2602718fd0b283a8c7050fdfc701fb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1995a0227d2602718fd0b283a8c7050fdfc701fb", "patch": "@@ -1,3 +1,52 @@\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__slide_caches_nothing): Define.\n+\t(__detail::__slide_caches_last): Define.\n+\t(__detail::__slide_caches_first): Define.\n+\t(slide_view): Define.\n+\t(enable_borrowed_range<slide_view>): Define.\n+\t(slide_view::_Iterator): Define.\n+\t(slide_view::_Sentinel): Define.\n+\t(views::__detail::__can_slide_view): Define.\n+\t(views::_Slide, views::slide): Define.\n+\t* testsuite/std/ranges/adaptors/slide/1.cc: New test.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__detail::__div_ceil): Define.\n+\t(chunk_view): Define.\n+\t(chunk_view::_OuterIter): Define.\n+\t(chunk_view::_OuterIter::value_type): Define.\n+\t(chunk_view::_InnerIter): Define.\n+\t(chunk_view<_Vp>): Define partial specialization for forward\n+\tranges.\n+\t(enable_borrowed_range<chunk_view>): Define.\n+\t(chunk_view<_Vp>::_Iterator): Define.\n+\t(views::__detail::__can_chunk_view): Define.\n+\t(views::_Chunk, views::chunk): Define.\n+\t* testsuite/std/ranges/adaptors/chunk/1.cc: New test.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (join_view::_Iterator::_M_satisfy):\n+\tAdjust resetting _M_inner as per LWG 3569.\n+\t(join_view::_Iterator::_M_inner): Wrap in std::optional\n+\tas per LWG 3569.\n+\t(join_view::_Iterator::_Iterator): Relax constraints as\n+\tper LWG 3569.\n+\t(join_view::_Iterator::operator*): Adjust as per LWG 3569.\n+\t(join_view::_Iterator::operator->): Likewise.\n+\t(join_view::_Iterator::operator++): Likewise.\n+\t(join_view::_Iterator::operator--): Likewise.\n+\t(join_view::_Iterator::iter_move): Likewise.\n+\t(join_view::_Iterator::iter_swap): Likewise.\n+\t* testsuite/std/ranges/adaptors/join.cc (test14): New test.\n+\n+2022-09-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/debug/safe_iterator.h (_GLIBCXX_DEBUG_VERIFY_OPERANDS):\n+\tAdd parentheses to avoid -Wparentheses warning.\n+\n 2022-09-12  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/106320"}]}