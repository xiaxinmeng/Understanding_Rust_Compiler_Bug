{"sha": "2841f5506729cb4b445a8460499a6976cddf52da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0MWY1NTA2NzI5Y2I0YjQ0NWE4NDYwNDk5YTY5NzZjZGRmNTJkYQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-03-24T14:02:17Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-03-24T14:02:17Z"}, "message": "S/390: arch12: Add indirect branch pattern\n\nThis adds support for the branch indirect instruction.\n\ngcc/ChangeLog:\n\n2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/s390.md (\"indirect_jump\"): Turn insn definition into\n\texpander.\n\t(\"*indirect_jump\", \"*indirect2_jump\"): New pattern definitions.\n\nFrom-SVN: r246456", "tree": {"sha": "598e9a714c2b2515f8dfa7a17318f2d5e740e9e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/598e9a714c2b2515f8dfa7a17318f2d5e740e9e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2841f5506729cb4b445a8460499a6976cddf52da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2841f5506729cb4b445a8460499a6976cddf52da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2841f5506729cb4b445a8460499a6976cddf52da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2841f5506729cb4b445a8460499a6976cddf52da/comments", "author": null, "committer": null, "parents": [{"sha": "72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72612e4e9e0eb5dd7d7cb0fc55170cdb7026a952"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "72afffad7f4ee54f4e62fd8c4f4be7c09845f216", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2841f5506729cb4b445a8460499a6976cddf52da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2841f5506729cb4b445a8460499a6976cddf52da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2841f5506729cb4b445a8460499a6976cddf52da", "patch": "@@ -1,3 +1,9 @@\n+2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/s390.md (\"indirect_jump\"): Turn insn definition into\n+\texpander.\n+\t(\"*indirect_jump\", \"*indirect2_jump\"): New pattern definitions.\n+\n 2017-03-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/s390.c (s390_expand_vec_init): Use vllezl"}, {"sha": "32753ef746dc116aeba403a45659643e16f25e92", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2841f5506729cb4b445a8460499a6976cddf52da/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2841f5506729cb4b445a8460499a6976cddf52da/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=2841f5506729cb4b445a8460499a6976cddf52da", "patch": "@@ -9509,20 +9509,46 @@\n ; indirect-jump instruction pattern(s).\n ;\n \n-(define_insn \"indirect_jump\"\n- [(set (pc) (match_operand 0 \"address_operand\" \"ZR\"))]\n+(define_expand \"indirect_jump\"\n+  [(set (pc) (match_operand 0 \"nonimmediate_operand\" \"\"))]\n   \"\"\n {\n-  if (get_attr_op_type (insn) == OP_TYPE_RR)\n-    return \"br\\t%0\";\n+  if (address_operand (operands[0], GET_MODE (operands[0])))\n+    ;\n+  else if (TARGET_ARCH12\n+\t   && GET_MODE (operands[0]) == Pmode\n+\t   && memory_operand (operands[0], Pmode))\n+    ;\n   else\n-    return \"b\\t%a0\";\n-}\n-  [(set (attr \"op_type\")\n-        (if_then_else (match_operand 0 \"register_operand\" \"\")\n-                      (const_string \"RR\") (const_string \"RX\")))\n-   (set_attr \"type\"  \"branch\")\n-   (set_attr \"atype\" \"agen\")])\n+    operands[0] = force_reg (Pmode, operands[0]);\n+})\n+\n+(define_insn \"*indirect_jump\"\n+  [(set (pc)\n+\t(match_operand 0 \"address_operand\" \"a,ZR\"))]\n+ \"\"\n+ \"@\n+  br\\t%0\n+  b\\t%a0\"\n+ [(set_attr \"op_type\" \"RR,RX\")\n+  (set_attr \"type\"  \"branch\")\n+  (set_attr \"atype\" \"agen\")\n+  (set_attr \"cpu_facility\" \"*\")])\n+\n+; FIXME: LRA does not appear to be able to deal with MEMs being\n+; checked against address constraints like ZR above.  So make this a\n+; separate pattern for now.\n+(define_insn \"*indirect2_jump\"\n+  [(set (pc)\n+\t(match_operand 0 \"nonimmediate_operand\" \"a,T\"))]\n+ \"\"\n+ \"@\n+  br\\t%0\n+  bi\\t%0\"\n+ [(set_attr \"op_type\" \"RR,RXY\")\n+  (set_attr \"type\"  \"branch\")\n+  (set_attr \"atype\" \"agen\")\n+  (set_attr \"cpu_facility\" \"*,arch12\")])\n \n ;\n ; casesi instruction pattern(s)."}]}