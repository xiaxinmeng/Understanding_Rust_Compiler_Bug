{"sha": "9b0700571fe390afcca32dcb3b2122640e628c95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIwNzAwNTcxZmUzOTBhZmNjYTMyZGNiM2IyMTIyNjQwZTYyOGM5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-01-10T18:44:39Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2020-01-10T18:44:39Z"}, "message": "[AArch64] Make -msve-vector-bits=128 generate VL-specific code\n\nrelated_vector_mode and compatible_vector_types_p make it possible\nto generate 128-bit SVE code while still maintaining the distinction\nbetween SVE vectors and Advanced SIMD vectors.  We can therefore generate\nVL-specific code for -msve-vector-bits=128 on little-endian targets.\nIn theory we could do the same for big-endian targets, but it could\nhave quite a high overhead; see the comment in the patch for details.\n\n2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* doc/invoke.texi (-msve-vector-bits=): Document that\n\t-msve-vector-bits=128 now generates VL-specific code for\n\tlittle-endian targets.\n\t* config/aarch64/aarch64-sve-builtins.cc (register_builtin_types): Use\n\tbuild_vector_type_for_mode to construct the data vector types.\n\t* config/aarch64/aarch64.c (aarch64_convert_sve_vector_bits): Generate\n\tVL-specific code for -msve-vector-bits=128 on little-endian targets.\n\t(aarch64_simd_container_mode): Always prefer Advanced SIMD modes\n\tfor 128-bit vectors.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/struct_vect_1.c (N): Protect with #ifndef.\n\t* gcc.target/aarch64/sve/pcs/return_1_128.c: New test.\n\t* gcc.target/aarch64/sve/pcs/return_4_128.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/return_5_128.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/return_6_128.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/stack_clash_1_128.c: Likewise.\n\t* gcc.target/aarch64/sve/pcs/stack_clash_2_128.c: Likewise.\n\t* gcc.target/aarch64/sve/single_5.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_25.c: Likewise.\n\t* gcc.target/aarch64/sve/struct_vect_26.c: Likewise.\n\nFrom-SVN: r280125", "tree": {"sha": "7e16f8d2025ae0a29fc52c392753091187110b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e16f8d2025ae0a29fc52c392753091187110b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b0700571fe390afcca32dcb3b2122640e628c95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0700571fe390afcca32dcb3b2122640e628c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b0700571fe390afcca32dcb3b2122640e628c95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b0700571fe390afcca32dcb3b2122640e628c95/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f25e33fa1b62a6f6c8dddf8e6a7961fae6847a0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25e33fa1b62a6f6c8dddf8e6a7961fae6847a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25e33fa1b62a6f6c8dddf8e6a7961fae6847a0e"}], "stats": {"total": 1371, "additions": 1358, "deletions": 13}, "files": [{"sha": "d054902d428f2d1815d96600f41f6d6ec3ad5b92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -1,3 +1,15 @@\n+2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/invoke.texi (-msve-vector-bits=): Document that\n+\t-msve-vector-bits=128 now generates VL-specific code for\n+\tlittle-endian targets.\n+\t* config/aarch64/aarch64-sve-builtins.cc (register_builtin_types): Use\n+\tbuild_vector_type_for_mode to construct the data vector types.\n+\t* config/aarch64/aarch64.c (aarch64_convert_sve_vector_bits): Generate\n+\tVL-specific code for -msve-vector-bits=128 on little-endian targets.\n+\t(aarch64_simd_container_mode): Always prefer Advanced SIMD modes\n+\tfor 128-bit vectors.\n+\n 2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_evpc_sel): Fix gen_vcond_mask"}, {"sha": "cadfa15b6eac491cf49e6956b74180cf4b3bab19", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -3230,11 +3230,15 @@ register_builtin_types ()\n \t}\n       else\n \t{\n-\t  unsigned int elbytes = tree_to_uhwi (TYPE_SIZE_UNIT (eltype));\n+\t  scalar_mode elmode = SCALAR_TYPE_MODE (eltype);\n+\t  unsigned int elbytes = GET_MODE_SIZE (elmode);\n \t  poly_uint64 nunits = exact_div (BYTES_PER_SVE_VECTOR, elbytes);\n-\t  vectype = build_vector_type (eltype, nunits);\n+\t  machine_mode mode\n+\t    = aarch64_sve_data_mode (elmode, nunits).require ();\n+\t  vectype = build_vector_type_for_mode (eltype, mode);\n \t  gcc_assert (VECTOR_MODE_P (TYPE_MODE (vectype))\n-\t\t      && TYPE_MODE (vectype) == TYPE_MODE_RAW (vectype)\n+\t\t      && TYPE_MODE (vectype) == mode\n+\t\t      && TYPE_MODE_RAW (vectype) == mode\n \t\t      && TYPE_ALIGN (vectype) == 128\n \t\t      && known_eq (wi::to_poly_offset (TYPE_SIZE (vectype)),\n \t\t\t\t   BITS_PER_SVE_VECTOR));"}, {"sha": "4288aaa3e3355c72b00b654ddc09b97268d6a6e0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -13937,11 +13937,17 @@ aarch64_get_arch (enum aarch64_arch arch)\n static poly_uint16\n aarch64_convert_sve_vector_bits (aarch64_sve_vector_bits_enum value)\n {\n-  /* For now generate vector-length agnostic code for -msve-vector-bits=128.\n-     This ensures we can clearly distinguish SVE and Advanced SIMD modes when\n-     deciding which .md file patterns to use and when deciding whether\n-     something is a legitimate address or constant.  */\n-  if (value == SVE_SCALABLE || value == SVE_128)\n+  /* 128-bit SVE and Advanced SIMD modes use different register layouts\n+     on big-endian targets, so we would need to forbid subregs that convert\n+     from one to the other.  By default a reinterpret sequence would then\n+     involve a store to memory in one mode and a load back in the other.\n+     Even if we optimize that sequence using reverse instructions,\n+     it would still be a significant potential overhead.\n+\n+     For now, it seems better to generate length-agnostic code for that\n+     case instead.  */\n+  if (value == SVE_SCALABLE\n+      || (value == SVE_128 && BYTES_BIG_ENDIAN))\n     return poly_uint16 (2, 2);\n   else\n     return (int) value / 64;\n@@ -16121,7 +16127,9 @@ aarch64_vq_mode (scalar_mode mode)\n static machine_mode\n aarch64_simd_container_mode (scalar_mode mode, poly_int64 width)\n {\n-  if (TARGET_SVE && known_eq (width, BITS_PER_SVE_VECTOR))\n+  if (TARGET_SVE\n+      && maybe_ne (width, 128)\n+      && known_eq (width, BITS_PER_SVE_VECTOR))\n     return aarch64_full_sve_mode (mode).else_mode (word_mode);\n \n   gcc_assert (known_eq (width, 64) || known_eq (width, 128));"}, {"sha": "ba87fcce672539bd09a9eb93ccaa5649b7217421", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -16262,10 +16262,11 @@ The possible values of @samp{bits} are: @samp{scalable}, @samp{128},\n @samp{256}, @samp{512}, @samp{1024} and @samp{2048}.\n Specifying @samp{scalable} selects vector-length agnostic\n output.  At present @samp{-msve-vector-bits=128} also generates vector-length\n-agnostic output.  All other values generate vector-length specific code.\n-The behavior of these values may change in future releases and no value except\n-@samp{scalable} should be relied on for producing code that is portable across\n-different hardware SVE vector lengths.\n+agnostic output for big-endian targets.  All other values generate\n+vector-length specific code.  The behavior of these values may change\n+in future releases and no value except @samp{scalable} should be\n+relied on for producing code that is portable across different\n+hardware SVE vector lengths.\n \n The default is @samp{-msve-vector-bits=scalable}, which produces\n vector-length agnostic code."}, {"sha": "948eb74edf39c603f5cba1d7e0ad2463d4c2ba52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -1,3 +1,16 @@\n+2020-01-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/struct_vect_1.c (N): Protect with #ifndef.\n+\t* gcc.target/aarch64/sve/pcs/return_1_128.c: New test.\n+\t* gcc.target/aarch64/sve/pcs/return_4_128.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/return_5_128.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/return_6_128.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/stack_clash_1_128.c: Likewise.\n+\t* gcc.target/aarch64/sve/pcs/stack_clash_2_128.c: Likewise.\n+\t* gcc.target/aarch64/sve/single_5.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_25.c: Likewise.\n+\t* gcc.target/aarch64/sve/struct_vect_26.c: Likewise.\n+\n 2020-01-10  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/93132"}, {"sha": "633c15ec65814dc9ecae091ca3779efbb1918907", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_1_128.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_1_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_1_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_1_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do compile { target aarch64_little_endian } } */\n+/* { dg-options \"-O -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+/*\n+** callee_pred:\n+**\tldr\tp0, \\[x0\\]\n+**\tret\n+*/\n+__SVBool_t __attribute__((noipa))\n+callee_pred (__SVBool_t *ptr)\n+{\n+  return *ptr;\n+}\n+\n+#include <arm_sve.h>\n+\n+/*\n+** caller_pred:\n+**\t...\n+**\tbl\tcallee_pred\n+**\tcntp\tx0, p0, p0.b\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+uint64_t __attribute__((noipa))\n+caller_pred (__SVBool_t *ptr1)\n+{\n+  __SVBool_t p = callee_pred (ptr1);\n+  return svcntp_b8 (p, p);\n+}"}, {"sha": "a111b04462f889cfa4b01a6c1c218ffb658e8c11", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_4_128.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_4_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#define CALLEE(SUFFIX, TYPE)\t\t\t\\\n+  TYPE __attribute__((noipa))\t\t\t\\\n+  callee_##SUFFIX (TYPE *ptr)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return *ptr;\t\t\t\t\\\n+  }\n+\n+/*\n+** callee_s8:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1b\tz0\\.b, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s8, __SVInt8_t)\n+\n+/*\n+** callee_u8:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1b\tz0\\.b, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u8, __SVUint8_t)\n+\n+/*\n+** callee_s16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s16, __SVInt16_t)\n+\n+/*\n+** callee_u16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u16, __SVUint16_t)\n+\n+/*\n+** callee_f16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f16, __SVFloat16_t)\n+\n+/*\n+** callee_s32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s32, __SVInt32_t)\n+\n+/*\n+** callee_u32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u32, __SVUint32_t)\n+\n+/*\n+** callee_f32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f32, __SVFloat32_t)\n+\n+/*\n+** callee_s64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s64, __SVInt64_t)\n+\n+/*\n+** callee_u64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u64, __SVUint64_t)\n+\n+/*\n+** callee_f64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f64, __SVFloat64_t)\n+\n+#include <arm_sve.h>\n+\n+#define CALLER(SUFFIX, TYPE)\t\t\t\t\t\\\n+  typeof (svaddv (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n+/*\n+** caller_s8:\n+**\t...\n+**\tbl\tcallee_s8\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.b\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s8, __SVInt8_t)\n+\n+/*\n+** caller_u8:\n+**\t...\n+**\tbl\tcallee_u8\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.b\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u8, __SVUint8_t)\n+\n+/*\n+** caller_s16:\n+**\t...\n+**\tbl\tcallee_s16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.h\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s16, __SVInt16_t)\n+\n+/*\n+** caller_u16:\n+**\t...\n+**\tbl\tcallee_u16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.h\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u16, __SVUint16_t)\n+\n+/*\n+** caller_f16:\n+**\t...\n+**\tbl\tcallee_f16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f16, __SVFloat16_t)\n+\n+/*\n+** caller_s32:\n+**\t...\n+**\tbl\tcallee_s32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.s\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s32, __SVInt32_t)\n+\n+/*\n+** caller_u32:\n+**\t...\n+**\tbl\tcallee_u32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.s\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u32, __SVUint32_t)\n+\n+/*\n+** caller_f32:\n+**\t...\n+**\tbl\tcallee_f32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\ts0, \\1, z0\\.s\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f32, __SVFloat32_t)\n+\n+/*\n+** caller_s64:\n+**\t...\n+**\tbl\tcallee_s64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.d\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s64, __SVInt64_t)\n+\n+/*\n+** caller_u64:\n+**\t...\n+**\tbl\tcallee_u64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.d\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u64, __SVUint64_t)\n+\n+/*\n+** caller_f64:\n+**\t...\n+**\tbl\tcallee_f64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\td0, \\1, z0\\.d\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f64, __SVFloat64_t)"}, {"sha": "5a674b44762aadf52ce03fdda9c4e4fe87a5e57d", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_5_128.c", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_5_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,237 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <arm_sve.h>\n+\n+#define CALLEE(SUFFIX, TYPE)\t\t\t\\\n+  TYPE __attribute__((noipa))\t\t\t\\\n+  callee_##SUFFIX (TYPE *ptr)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return *ptr;\t\t\t\t\\\n+  }\n+\n+/*\n+** callee_s8:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1b\tz0\\.b, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s8, svint8_t)\n+\n+/*\n+** callee_u8:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1b\tz0\\.b, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u8, svuint8_t)\n+\n+/*\n+** callee_s16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s16, svint16_t)\n+\n+/*\n+** callee_u16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u16, svuint16_t)\n+\n+/*\n+** callee_f16:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1h\tz0\\.h, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f16, svfloat16_t)\n+\n+/*\n+** callee_s32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s32, svint32_t)\n+\n+/*\n+** callee_u32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u32, svuint32_t)\n+\n+/*\n+** callee_f32:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1w\tz0\\.s, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f32, svfloat32_t)\n+\n+/*\n+** callee_s64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s64, svint64_t)\n+\n+/*\n+** callee_u64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u64, svuint64_t)\n+\n+/*\n+** callee_f64:\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tld1d\tz0\\.d, \\1/z, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f64, svfloat64_t)\n+\n+#define CALLER(SUFFIX, TYPE)\t\t\t\t\t\\\n+  typeof (svaddv (svptrue_b8 (), *(TYPE *) 0))\t\t\t\\\n+  __attribute__((noipa))\t\t\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1)\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    return svaddv (svptrue_b8 (), callee_##SUFFIX (ptr1));\t\\\n+  }\n+\n+/*\n+** caller_s8:\n+**\t...\n+**\tbl\tcallee_s8\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.b\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s8, svint8_t)\n+\n+/*\n+** caller_u8:\n+**\t...\n+**\tbl\tcallee_u8\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.b\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u8, svuint8_t)\n+\n+/*\n+** caller_s16:\n+**\t...\n+**\tbl\tcallee_s16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.h\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s16, svint16_t)\n+\n+/*\n+** caller_u16:\n+**\t...\n+**\tbl\tcallee_u16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.h\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u16, svuint16_t)\n+\n+/*\n+** caller_f16:\n+**\t...\n+**\tbl\tcallee_f16\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\th0, \\1, z0\\.h\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f16, svfloat16_t)\n+\n+/*\n+** caller_s32:\n+**\t...\n+**\tbl\tcallee_s32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tsaddv\t(d[0-9]+), \\1, z0\\.s\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s32, svint32_t)\n+\n+/*\n+** caller_u32:\n+**\t...\n+**\tbl\tcallee_u32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.s\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u32, svuint32_t)\n+\n+/*\n+** caller_f32:\n+**\t...\n+**\tbl\tcallee_f32\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\ts0, \\1, z0\\.s\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f32, svfloat32_t)\n+\n+/*\n+** caller_s64:\n+**\t...\n+**\tbl\tcallee_s64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.d\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (s64, svint64_t)\n+\n+/*\n+** caller_u64:\n+**\t...\n+**\tbl\tcallee_u64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tuaddv\t(d[0-9]+), \\1, z0\\.d\n+**\tfmov\tx0, \\2\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (u64, svuint64_t)\n+\n+/*\n+** caller_f64:\n+**\t...\n+**\tbl\tcallee_f64\n+**\tptrue\t(p[0-7])\\.b, vl16\n+**\tfaddv\td0, \\1, z0\\.d\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+CALLER (f64, svfloat64_t)"}, {"sha": "a470d9dbcf1e1956e06d101144de519fdae43dcd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/return_6_128.c", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Freturn_6_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,232 @@\n+/* { dg-do compile { target aarch64_little_endian } } */\n+/* { dg-options \"-O -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+typedef int8_t svint8_t __attribute__ ((vector_size (16)));\n+typedef uint8_t svuint8_t __attribute__ ((vector_size (16)));\n+\n+typedef int16_t svint16_t __attribute__ ((vector_size (16)));\n+typedef uint16_t svuint16_t __attribute__ ((vector_size (16)));\n+typedef __fp16 svfloat16_t __attribute__ ((vector_size (16)));\n+\n+typedef int32_t svint32_t __attribute__ ((vector_size (16)));\n+typedef uint32_t svuint32_t __attribute__ ((vector_size (16)));\n+typedef float svfloat32_t __attribute__ ((vector_size (16)));\n+\n+typedef int64_t svint64_t __attribute__ ((vector_size (16)));\n+typedef uint64_t svuint64_t __attribute__ ((vector_size (16)));\n+typedef double svfloat64_t __attribute__ ((vector_size (16)));\n+\n+#define CALLEE(SUFFIX, TYPE)\t\t\t\\\n+  TYPE __attribute__((noipa))\t\t\t\\\n+  callee_##SUFFIX (TYPE *ptr)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return *ptr;\t\t\t\t\\\n+  }\n+\n+/*\n+** callee_s8:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s8, svint8_t)\n+\n+/*\n+** callee_u8:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u8, svuint8_t)\n+\n+/*\n+** callee_s16:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s16, svint16_t)\n+\n+/*\n+** callee_u16:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u16, svuint16_t)\n+\n+/*\n+** callee_f16:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f16, svfloat16_t)\n+\n+/*\n+** callee_s32:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s32, svint32_t)\n+\n+/*\n+** callee_u32:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u32, svuint32_t)\n+\n+/*\n+** callee_f32:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f32, svfloat32_t)\n+\n+/*\n+** callee_s64:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (s64, svint64_t)\n+\n+/*\n+** callee_u64:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (u64, svuint64_t)\n+\n+/*\n+** callee_f64:\n+**\tldr\tq0, \\[x0\\]\n+**\tret\n+*/\n+CALLEE (f64, svfloat64_t)\n+\n+#define CALLER(SUFFIX, TYPE)\t\t\t\\\n+  void __attribute__((noipa))\t\t\t\\\n+  caller_##SUFFIX (TYPE *ptr1, TYPE *ptr2)\t\\\n+  {\t\t\t\t\t\t\\\n+    *ptr2 = callee_##SUFFIX (ptr1);\t\t\\\n+  }\n+\n+/*\n+** caller_s8:\n+**\t...\n+**\tbl\tcallee_s8\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (s8, svint8_t)\n+\n+/*\n+** caller_u8:\n+**\t...\n+**\tbl\tcallee_u8\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (u8, svuint8_t)\n+\n+/*\n+** caller_s16:\n+**\t...\n+**\tbl\tcallee_s16\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (s16, svint16_t)\n+\n+/*\n+** caller_u16:\n+**\t...\n+**\tbl\tcallee_u16\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (u16, svuint16_t)\n+\n+/*\n+** caller_f16:\n+**\t...\n+**\tbl\tcallee_f16\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (f16, svfloat16_t)\n+\n+/*\n+** caller_s32:\n+**\t...\n+**\tbl\tcallee_s32\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (s32, svint32_t)\n+\n+/*\n+** caller_u32:\n+**\t...\n+**\tbl\tcallee_u32\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (u32, svuint32_t)\n+\n+/*\n+** caller_f32:\n+**\t...\n+**\tbl\tcallee_f32\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (f32, svfloat32_t)\n+\n+/*\n+** caller_s64:\n+**\t...\n+**\tbl\tcallee_s64\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (s64, svint64_t)\n+\n+/*\n+** caller_u64:\n+**\t...\n+**\tbl\tcallee_u64\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (u64, svuint64_t)\n+\n+/*\n+** caller_f64:\n+**\t...\n+**\tbl\tcallee_f64\n+**\t...\n+**\tstr\tq0, \\[[^]]*\\]\n+**\t...\n+**\tret\n+*/\n+CALLER (f64, svfloat64_t)"}, {"sha": "0eb7d10f7a0213898da1fc3db6c5cf81b425e20b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/stack_clash_1_128.c", "status": "added", "additions": 184, "deletions": 0, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_1_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_1_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_1_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,184 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mlittle-endian -fshrink-wrap -fstack-clash-protection -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+/*\n+** test_1:\n+**\tsub\tsp, sp, #272\n+**\tstr\tp4, \\[sp\\]\n+**\tstr\tp5, \\[sp, #1, mul vl\\]\n+**\tstr\tp6, \\[sp, #2, mul vl\\]\n+**\tstr\tp7, \\[sp, #3, mul vl\\]\n+**\tstr\tp8, \\[sp, #4, mul vl\\]\n+**\tstr\tp9, \\[sp, #5, mul vl\\]\n+**\tstr\tp10, \\[sp, #6, mul vl\\]\n+**\tstr\tp11, \\[sp, #7, mul vl\\]\n+**\tstr\tz8, \\[sp, #1, mul vl\\]\n+**\tstr\tz9, \\[sp, #2, mul vl\\]\n+**\tstr\tz10, \\[sp, #3, mul vl\\]\n+**\tstr\tz11, \\[sp, #4, mul vl\\]\n+**\tstr\tz12, \\[sp, #5, mul vl\\]\n+**\tstr\tz13, \\[sp, #6, mul vl\\]\n+**\tstr\tz14, \\[sp, #7, mul vl\\]\n+**\tstr\tz15, \\[sp, #8, mul vl\\]\n+**\tstr\tz16, \\[sp, #9, mul vl\\]\n+**\tstr\tz17, \\[sp, #10, mul vl\\]\n+**\tstr\tz18, \\[sp, #11, mul vl\\]\n+**\tstr\tz19, \\[sp, #12, mul vl\\]\n+**\tstr\tz20, \\[sp, #13, mul vl\\]\n+**\tstr\tz21, \\[sp, #14, mul vl\\]\n+**\tstr\tz22, \\[sp, #15, mul vl\\]\n+**\tstr\tz23, \\[sp, #16, mul vl\\]\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tz8, \\[sp, #1, mul vl\\]\n+**\tldr\tz9, \\[sp, #2, mul vl\\]\n+**\tldr\tz10, \\[sp, #3, mul vl\\]\n+**\tldr\tz11, \\[sp, #4, mul vl\\]\n+**\tldr\tz12, \\[sp, #5, mul vl\\]\n+**\tldr\tz13, \\[sp, #6, mul vl\\]\n+**\tldr\tz14, \\[sp, #7, mul vl\\]\n+**\tldr\tz15, \\[sp, #8, mul vl\\]\n+**\tldr\tz16, \\[sp, #9, mul vl\\]\n+**\tldr\tz17, \\[sp, #10, mul vl\\]\n+**\tldr\tz18, \\[sp, #11, mul vl\\]\n+**\tldr\tz19, \\[sp, #12, mul vl\\]\n+**\tldr\tz20, \\[sp, #13, mul vl\\]\n+**\tldr\tz21, \\[sp, #14, mul vl\\]\n+**\tldr\tz22, \\[sp, #15, mul vl\\]\n+**\tldr\tz23, \\[sp, #16, mul vl\\]\n+**\tldr\tp4, \\[sp\\]\n+**\tldr\tp5, \\[sp, #1, mul vl\\]\n+**\tldr\tp6, \\[sp, #2, mul vl\\]\n+**\tldr\tp7, \\[sp, #3, mul vl\\]\n+**\tldr\tp8, \\[sp, #4, mul vl\\]\n+**\tldr\tp9, \\[sp, #5, mul vl\\]\n+**\tldr\tp10, \\[sp, #6, mul vl\\]\n+**\tldr\tp11, \\[sp, #7, mul vl\\]\n+**\tadd\tsp, sp, #?272\n+**\tret\n+*/\n+svbool_t\n+test_1 (void)\n+{\n+  asm volatile (\"\" :::\n+\t\t\"z0\", \"z1\", \"z2\", \"z3\", \"z4\", \"z5\", \"z6\", \"z7\",\n+\t\t\"z8\", \"z9\", \"z10\", \"z11\", \"z12\", \"z13\", \"z14\", \"z15\",\n+\t\t\"z16\", \"z17\", \"z18\", \"z19\", \"z20\", \"z21\", \"z22\", \"z23\",\n+\t\t\"z24\", \"z25\", \"z26\", \"z27\", \"z28\", \"z29\", \"z30\", \"z31\",\n+\t\t\"p0\", \"p1\", \"p2\", \"p3\", \"p4\", \"p5\", \"p6\", \"p7\",\n+\t\t\"p8\", \"p9\", \"p10\", \"p11\", \"p12\", \"p13\", \"p14\", \"p15\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_2:\n+**\tptrue\tp0\\.b, vl16\n+**\tret\n+*/\n+svbool_t\n+test_2 (void)\n+{\n+  asm volatile (\"\" :::\n+\t\t\"z0\", \"z1\", \"z2\", \"z3\", \"z4\", \"z5\", \"z6\", \"z7\",\n+\t\t\"z24\", \"z25\", \"z26\", \"z27\", \"z28\", \"z29\", \"z30\", \"z31\",\n+\t\t\"p0\", \"p1\", \"p2\", \"p3\", \"p12\", \"p13\", \"p14\", \"p15\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_3:\n+**\tsub\tsp, sp, #96\n+**\tstr\tp5, \\[sp\\]\n+**\tstr\tp6, \\[sp, #1, mul vl\\]\n+**\tstr\tp11, \\[sp, #2, mul vl\\]\n+**\tstr\tz8, \\[sp, #1, mul vl\\]\n+**\tstr\tz13, \\[sp, #2, mul vl\\]\n+**\tstr\tz19, \\[sp, #3, mul vl\\]\n+**\tstr\tz20, \\[sp, #4, mul vl\\]\n+**\tstr\tz22, \\[sp, #5, mul vl\\]\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tz8, \\[sp, #1, mul vl\\]\n+**\tldr\tz13, \\[sp, #2, mul vl\\]\n+**\tldr\tz19, \\[sp, #3, mul vl\\]\n+**\tldr\tz20, \\[sp, #4, mul vl\\]\n+**\tldr\tz22, \\[sp, #5, mul vl\\]\n+**\tldr\tp5, \\[sp\\]\n+**\tldr\tp6, \\[sp, #1, mul vl\\]\n+**\tldr\tp11, \\[sp, #2, mul vl\\]\n+**\tadd\tsp, sp, #?96\n+**\tret\n+*/\n+svbool_t\n+test_3 (void)\n+{\n+  asm volatile (\"\" :::\n+\t\t\"z8\", \"z13\", \"z19\", \"z20\", \"z22\",\n+\t\t\"p5\", \"p6\", \"p11\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_4:\n+**\tsub\tsp, sp, #16\n+**\tstr\tp4, \\[sp\\]\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+svbool_t\n+test_4 (void)\n+{\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_5:\n+**\tsub\tsp, sp, #16\n+**\tstr\tz15, \\[sp\\]\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tz15, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+svbool_t\n+test_5 (void)\n+{\n+  asm volatile (\"\" ::: \"z15\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_6:\n+**\tsub\tsp, sp, #16\n+**\tstr\tz15, \\[sp\\]\n+**\tmov\tz0\\.b, #1\n+**\tldr\tz15, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+svint8_t\n+test_6 (svbool_t p0, svbool_t p1, svbool_t p2, svbool_t p3)\n+{\n+  asm volatile (\"\" :: \"Upa\" (p0), \"Upa\" (p1), \"Upa\" (p2), \"Upa\" (p3) : \"z15\");\n+  return svdup_s8 (1);\n+}\n+\n+/*\n+** test_7:\n+**\tsub\tsp, sp, #16\n+**\tstr\tz16, \\[sp\\]\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tz16, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tret\n+*/\n+svbool_t\n+test_7 (void)\n+{\n+  asm volatile (\"\" ::: \"z16\");\n+  return svptrue_b8 ();\n+}"}, {"sha": "50242d5524dc773d3eaaf25c72c3285a644549c7", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pcs/stack_clash_2_128.c", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_2_128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_2_128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpcs%2Fstack_clash_2_128.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,284 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fshrink-wrap -fstack-clash-protection -msve-vector-bits=128 -g\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#pragma GCC aarch64 \"arm_sve.h\"\n+\n+svbool_t take_stack_args (volatile void *, void *, int, int, int,\n+\t\t\t  int, int, int, int);\n+\n+/*\n+** test_1:\n+**\tsub\tsp, sp, #32\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?32\n+**\tret\n+*/\n+svbool_t\n+test_1 (void)\n+{\n+  volatile int x = 1;\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_2:\n+**\tsub\tsp, sp, #64\n+**\tstp\tx24, x25, \\[sp, 16\\]\n+**\tstr\tx26, \\[sp, 32\\]\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tp4, \\[sp\\]\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tadd\tsp, sp, #?64\n+**\tret\n+*/\n+svbool_t\n+test_2 (void)\n+{\n+  volatile int x = 1;\n+  asm volatile (\"\" ::: \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_3:\n+**\tmov\tx12, #?4144\n+**\tsub\tsp, sp, x12\n+**\tstp\tx24, x25, \\[sp, 16\\]\n+**\tstr\tx26, \\[sp, 32\\]\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tldr\tp4, \\[sp\\]\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tadd\tsp, sp, x12\n+**\tret\n+*/\n+svbool_t\n+test_3 (void)\n+{\n+  volatile int x[1024];\n+  asm volatile (\"\" :: \"r\" (x) : \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_4:\n+**\tsub\tsp, sp, #32\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.h, vl8\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?32\n+**\tret\n+*/\n+svbool_t\n+test_4 (void)\n+{\n+  volatile svint32_t b;\n+  b = svdup_s32 (1);\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b16 ();\n+}\n+\n+/*\n+** test_5:\n+**\tsub\tsp, sp, #64\n+**\tstp\tx24, x25, \\[sp, 16\\]\n+**\tstr\tx26, \\[sp, 32\\]\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.h, vl8\n+**\tldr\tp4, \\[sp\\]\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tadd\tsp, sp, #?64\n+**\tret\n+*/\n+svbool_t\n+test_5 (void)\n+{\n+  volatile svint32_t b;\n+  b = svdup_s32 (1);\n+  asm volatile (\"\" ::: \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b16 ();\n+}\n+\n+/*\n+** test_6:\n+**\tstp\tx29, x30, \\[sp, -16\\]!\n+**\tmov\tx29, sp\n+**\tsub\tsp, sp, #16\n+**\tstr\tp4, \\[sp\\]\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tadd\tsp, sp, #?16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx29, x30, \\[sp\\], 16\n+**\tret\n+*/\n+svbool_t\n+test_6 (void)\n+{\n+  take_stack_args (0, 0, 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_7:\n+**\tmov\tx12, #?4128\n+**\tsub\tsp, sp, x12\n+**\tstp\tx29, x30, \\[sp, 16\\]\n+**\tadd\tx29, sp, #?16\n+**\tstr\tp4, \\[sp\\]\n+**\tsub\tsp, sp, #16\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tadd\tsp, sp, #?16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx29, x30, \\[sp\\]\n+**\tmov\tx12, #?4112\n+**\tadd\tsp, sp, x12\n+**\tret\n+*/\n+svbool_t\n+test_7 (void)\n+{\n+  volatile int x[1024];\n+  take_stack_args (x, 0, 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_8:\n+**\tmov\tx12, #?4160\n+**\tsub\tsp, sp, x12\n+**\tstp\tx29, x30, \\[sp, 16\\]\n+**\tadd\tx29, sp, #?16\n+**\tstp\tx24, x25, \\[sp, 32\\]\n+**\tstr\tx26, \\[sp, 48\\]\n+**\tstr\tp4, \\[sp\\]\n+**\tsub\tsp, sp, #16\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tadd\tsp, sp, #?16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tldp\tx29, x30, \\[sp\\]\n+**\tmov\tx12, #?4144\n+**\tadd\tsp, sp, x12\n+**\tret\n+*/\n+svbool_t\n+test_8 (void)\n+{\n+  volatile int x[1024];\n+  take_stack_args (x, 0, 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_9:\n+**\tmov\tx12, #?4128\n+**\tsub\tsp, sp, x12\n+**\tstp\tx29, x30, \\[sp, 16\\]\n+**\tadd\tx29, sp, #?16\n+**\tstr\tp4, \\[sp\\]\n+**\tsub\tsp, sp, #16\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tsub\tsp, x29, #16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx29, x30, \\[sp\\]\n+**\tmov\tx12, #?4112\n+**\tadd\tsp, sp, x12\n+**\tret\n+*/\n+svbool_t\n+test_9 (int n)\n+{\n+  volatile int x[1024];\n+  take_stack_args (x, __builtin_alloca (n), 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_10:\n+**\tmov\tx12, #?4160\n+**\tsub\tsp, sp, x12\n+**\tstp\tx29, x30, \\[sp, 16\\]\n+**\tadd\tx29, sp, #?16\n+**\tstp\tx24, x25, \\[sp, 32\\]\n+**\tstr\tx26, \\[sp, 48\\]\n+**\tstr\tp4, \\[sp\\]\n+**\tsub\tsp, sp, #16\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tsub\tsp, x29, #16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tldp\tx29, x30, \\[sp\\]\n+**\tmov\tx12, #?4144\n+**\tadd\tsp, sp, x12\n+**\tret\n+*/\n+svbool_t\n+test_10 (int n)\n+{\n+  volatile int x[1024];\n+  take_stack_args (x, __builtin_alloca (n), 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b8 ();\n+}\n+\n+/*\n+** test_11:\n+**\tsub\tsp, sp, #65536\n+**\tstr\txzr, \\[sp, 1024\\]\n+**\tmov\tx12, #?64464\n+**\tsub\tsp, sp, x12\n+**\tstp\tx29, x30, \\[sp, 16\\]\n+**\tadd\tx29, sp, #?16\n+**\tstp\tx24, x25, \\[sp, 32\\]\n+**\tstr\tx26, \\[sp, 48\\]\n+**\tstr\tp4, \\[sp\\]\n+**\tsub\tsp, sp, #16\n+**\t...\n+**\tptrue\tp0\\.b, vl16\n+**\tsub\tsp, x29, #16\n+**\tldr\tp4, \\[sp\\]\n+**\tadd\tsp, sp, #?16\n+**\tldp\tx24, x25, \\[sp, 16\\]\n+**\tldr\tx26, \\[sp, 32\\]\n+**\tldp\tx29, x30, \\[sp\\]\n+**\tadd\tsp, sp, #?3008\n+**\tadd\tsp, sp, #?126976\n+**\tret\n+*/\n+svbool_t\n+test_11 (int n)\n+{\n+  volatile int x[0x7ee4];\n+  take_stack_args (x, __builtin_alloca (n), 1, 2, 3, 4, 5, 6, 7);\n+  asm volatile (\"\" ::: \"p4\", \"x24\", \"x25\", \"x26\");\n+  return svptrue_b8 ();\n+}"}, {"sha": "7d16205b28cbc065fe315031bb560821d0df5eb1", "filename": "gcc/testsuite/gcc.target/aarch64/sve/single_5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fsingle_5.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target aarch64_little_endian } } */\n+/* { dg-options \"-O2 -ftree-vectorize -fopenmp-simd -msve-vector-bits=128 -fno-tree-loop-distribute-patterns\" } */\n+\n+#define N 16\n+\n+#include \"single_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.16b, 0x1\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.16b, 0x2\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.8h, 0x3\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.8h, 0x4\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.4s, 0x5\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\tv[0-9]+\\.4s, 0x6\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #7\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tmov\\tz[0-9]+\\.d, #8\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tv[0-9]+\\.8h, 1\\.0e\\+0\\n} 1 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tv[0-9]+\\.4s, 2\\.0e\\+0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tv[0-9]+\\.2d, 3\\.0e\\+0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tstr\\tq[0-9]+,} 11 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tstr\\tq[0-9]+,} 10 } } */\n+\n+/* { dg-final { scan-assembler-not {\\twhile} } } */\n+/* { dg-final { scan-assembler-not {\\tb} } } */\n+/* { dg-final { scan-assembler-not {\\tcmp} } } */\n+/* { dg-final { scan-assembler-not {\\tindex} } } */\n+/* { dg-final { scan-assembler-not {\\tptrue\\t} { xfail *-*-* } } } */"}, {"sha": "8964e784cfee34980eb2062c2acd13569d81dcb9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_1.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -11,7 +11,9 @@\n #define NAME(X) X\n #endif\n \n+#ifndef N\n #define N 1024\n+#endif\n \n void __attribute__ ((noinline, noclone))\n NAME(f2) (TYPE *__restrict a, TYPE *__restrict b, TYPE *__restrict c)"}, {"sha": "bde6d04679cacf44aed2a45313ee4a98419b2854", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_25.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_25.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target { aarch64_little_endian && aarch64_asm_sve_ok } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=128 --save-temps\" } */\n+\n+#include \"struct_vect_14.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld2\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?32\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?48\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?64\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?32\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?48\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t{v[0-9]+\\.16b - v[0-9]+\\.16b}, \\[x[0-9]+\\], #?64\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?32\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tld3\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?48\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tld4\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?64\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tst2\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?32\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?48\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?64\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tld2\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?32\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?48\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?64\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?32\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?48\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t{v[0-9]+\\.8h - v[0-9]+\\.8h}, \\[x[0-9]+\\], #?64\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?32\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?48\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?64\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?32\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?48\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t{v[0-9]+\\.4s - v[0-9]+\\.4s}, \\[x[0-9]+\\], #?64\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?32\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?48\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?64\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?32\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?48\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4\\t{v[0-9]+\\.2d - v[0-9]+\\.2d}, \\[x[0-9]+\\], #?64\\n} 2 } } */"}, {"sha": "cb3588cf4718efa382331dd7bf33e6eb93c62002", "filename": "gcc/testsuite/gcc.target/aarch64/sve/struct_vect_26.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b0700571fe390afcca32dcb3b2122640e628c95/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fstruct_vect_26.c?ref=9b0700571fe390afcca32dcb3b2122640e628c95", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile { target { aarch64_little_endian && aarch64_asm_sve_ok } } } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=128 --save-temps\" } */\n+\n+int n;\n+#define N n\n+\n+#include \"struct_vect_14.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tld2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tld4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7]/z, \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst2b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst3b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+\\]\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tst4b\\t{z[0-9]+.b - z[0-9]+.b}, p[0-7], \\[x[0-9]+, x[0-9]+\\]\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4h\\t{z[0-9]+.h - z[0-9]+.h}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4w\\t{z[0-9]+.s - z[0-9]+.s}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tld2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7]/z, \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst2d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst3d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tst4d\\t{z[0-9]+.d - z[0-9]+.d}, p[0-7], \\[x[0-9]+\\]\\n} 2 } } */"}]}