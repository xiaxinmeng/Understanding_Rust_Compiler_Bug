{"sha": "3292e3767d10f79aea24b3555188f8ce0f286692", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5MmUzNzY3ZDEwZjc5YWVhMjRiMzU1NTE4OGY4Y2UwZjI4NjY5Mg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-01-14T16:41:10Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2014-01-14T16:41:10Z"}, "message": "Consolidate ABI warning into type_natural_mode\n\ngcc/\n\n\tPR target/59794\n\t* config/i386/i386.c (type_natural_mode): Add a bool parameter\n\tto indicate if type is used for function return value.  Warn\n\tABI change if the vector mode isn't available for function\n\treturn value.\n\t(ix86_function_arg_advance): Pass false to type_natural_mode.\n\t(ix86_function_arg): Likewise.\n\t(ix86_gimplify_va_arg): Likewise.\n\t(function_arg_32): Don't warn ABI change.\n\t(ix86_function_value): Pass true to type_natural_mode.\n\t(ix86_return_in_memory): Likewise.\n\t(ix86_struct_value_rtx): Removed.\n\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n\ngcc/testsuite/\n\n\tPR target/59794\n\t* g++.dg/ext/vector23.C: Also prune ABI change for Linux/x86.\n\t* gcc.target/i386/pr39162.c (y): New __m256i variable.\n\t(bar): Change return type to void.  Set y to x.\n\t* gcc.target/i386/pr59794-1.c: New testcase.\n\t* gcc.target/i386/pr59794-2.c: Likewise.\n\t* gcc.target/i386/pr59794-3.c: Likewise.\n\t* gcc.target/i386/pr59794-4.c: Likewise.\n\t* gcc.target/i386/pr59794-5.c: Likewise.\n\t* gcc.target/i386/pr59794-6.c: Likewise.\n\t* gcc.target/i386/pr59794-7.c: Likewise.\n\nFrom-SVN: r206603", "tree": {"sha": "4916bf34b7b639eea8340be060f15788806887b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4916bf34b7b639eea8340be060f15788806887b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3292e3767d10f79aea24b3555188f8ce0f286692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3292e3767d10f79aea24b3555188f8ce0f286692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3292e3767d10f79aea24b3555188f8ce0f286692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3292e3767d10f79aea24b3555188f8ce0f286692/comments", "author": null, "committer": null, "parents": [{"sha": "db93087523a4696d5231798e4371ad189cd309df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db93087523a4696d5231798e4371ad189cd309df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db93087523a4696d5231798e4371ad189cd309df"}], "stats": {"total": 244, "additions": 171, "deletions": 73}, "files": [{"sha": "c8ea16df721ef6d3cf82a917e615728aa0a4922b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -1,3 +1,19 @@\n+2014-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59794\n+\t* config/i386/i386.c (type_natural_mode): Add a bool parameter\n+\tto indicate if type is used for function return value.  Warn\n+\tABI change if the vector mode isn't available for function\n+\treturn value.\n+\t(ix86_function_arg_advance): Pass false to type_natural_mode.\n+\t(ix86_function_arg): Likewise.\n+\t(ix86_gimplify_va_arg): Likewise.\n+\t(function_arg_32): Don't warn ABI change.\n+\t(ix86_function_value): Pass true to type_natural_mode.\n+\t(ix86_return_in_memory): Likewise.\n+\t(ix86_struct_value_rtx): Removed.\n+\t(TARGET_STRUCT_VALUE_RTX): Likewise.\n+\n 2014-01-14  Richard Sandiford  <rsandifo@linux.vnet.ibm.com>\n \n \t* jump.c (redirect_jump_2): Remove REG_CROSSING_JUMP notes when\n@@ -18,7 +34,7 @@\n \n 2014-01-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-       * config/i386/avx512erintrin.h (_mm_rcp28_round_sd): New.\n+\t* config/i386/avx512erintrin.h (_mm_rcp28_round_sd): New.\n \t(_mm_rcp28_round_ss): Ditto.\n \t(_mm_rsqrt28_round_sd): Ditto.\n \t(_mm_rsqrt28_round_ss): Ditto."}, {"sha": "e981bbeff069c17f054425ea2f33bcc513b5281e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 35, "deletions": 69, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -6104,10 +6104,14 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n \n    The midde-end can't deal with the vector types > 16 bytes.  In this\n    case, we return the original mode and warn ABI change if CUM isn't\n-   NULL.  */\n+   NULL. \n+\n+   If INT_RETURN is true, warn ABI change if the vector mode isn't\n+   available for function return value.  */\n \n static enum machine_mode\n-type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n+type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum,\n+\t\t   bool in_return)\n {\n   enum machine_mode mode = TYPE_MODE (type);\n \n@@ -6133,6 +6137,7 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\tif (size == 32 && !TARGET_AVX)\n \t\t  {\n \t\t    static bool warnedavx;\n+\t\t    static bool warnedavx_ret;\n \n \t\t    if (cum\n \t\t\t&& !warnedavx\n@@ -6142,12 +6147,20 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\t\twarning (0, \"AVX vector argument without AVX \"\n \t\t\t\t \"enabled changes the ABI\");\n \t\t      }\n+\t\t    else if (in_return & !warnedavx_ret)\n+\t\t      {\n+\t\t\twarnedavx_ret = true;\n+\t\t\twarning (0, \"AVX vector return without AVX \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n+\n \t\t    return TYPE_MODE (type);\n \t\t  }\n \t\telse if (((size == 8 && TARGET_64BIT) || size == 16)\n \t\t\t && !TARGET_SSE)\n \t\t  {\n \t\t    static bool warnedsse;\n+\t\t    static bool warnedsse_ret;\n \n \t\t    if (cum\n \t\t\t&& !warnedsse\n@@ -6157,10 +6170,19 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\t\twarning (0, \"SSE vector argument without SSE \"\n \t\t\t\t \"enabled changes the ABI\");\n \t\t      }\n+\t\t    else if (!TARGET_64BIT\n+\t\t\t     && in_return\n+\t\t\t     & !warnedsse_ret)\n+\t\t      {\n+\t\t\twarnedsse_ret = true;\n+\t\t\twarning (0, \"SSE vector return without SSE \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n \t\t  }\n \t\telse if ((size == 8 && !TARGET_64BIT) && !TARGET_MMX)\n \t\t  {\n \t\t    static bool warnedmmx;\n+\t\t    static bool warnedmmx_ret;\n \n \t\t    if (cum\n \t\t\t&& !warnedmmx\n@@ -6170,6 +6192,12 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\t\twarning (0, \"MMX vector argument without MMX \"\n \t\t\t\t \"enabled changes the ABI\");\n \t\t      }\n+\t\t    else if (in_return & !warnedmmx_ret)\n+\t\t      {\n+\t\t\twarnedmmx_ret = true;\n+\t\t\twarning (0, \"MMX vector return without MMX \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n \t\t  }\n \t\treturn mode;\n \t      }\n@@ -7097,7 +7125,7 @@ ix86_function_arg_advance (cumulative_args_t cum_v, enum machine_mode mode,\n   words = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n   if (type)\n-    mode = type_natural_mode (type, NULL);\n+    mode = type_natural_mode (type, NULL, false);\n \n   if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n     function_arg_advance_ms_64 (cum, bytes, words);\n@@ -7125,8 +7153,6 @@ function_arg_32 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t\t enum machine_mode orig_mode, const_tree type,\n \t\t HOST_WIDE_INT bytes, HOST_WIDE_INT words)\n {\n-  static bool warnedsse, warnedmmx;\n-\n   /* Avoid the AL settings for the Unix64 ABI.  */\n   if (mode == VOIDmode)\n     return constm1_rtx;\n@@ -7183,12 +7209,6 @@ function_arg_32 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V2DFmode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n-\t  if (!TARGET_SSE && !warnedsse && cum->warn_sse)\n-\t    {\n-\t      warnedsse = true;\n-\t      warning (0, \"SSE vector argument without SSE enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n \t  if (cum->sse_nregs)\n \t    return gen_reg_or_parallel (mode, orig_mode,\n \t\t\t\t        cum->sse_regno + FIRST_SSE_REG);\n@@ -7228,12 +7248,6 @@ function_arg_32 (const CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V1DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n-\t  if (!TARGET_MMX && !warnedmmx && cum->warn_mmx)\n-\t    {\n-\t      warnedmmx = true;\n-\t      warning (0, \"MMX vector argument without MMX enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n \t  if (cum->mmx_nregs)\n \t    return gen_reg_or_parallel (mode, orig_mode,\n \t\t\t\t        cum->mmx_regno + FIRST_MMX_REG);\n@@ -7362,7 +7376,7 @@ ix86_function_arg (cumulative_args_t cum_v, enum machine_mode omode,\n   /* To simplify the code below, represent vector types with a vector mode\n      even if MMX/SSE are not active.  */\n   if (type && TREE_CODE (type) == VECTOR_TYPE)\n-    mode = type_natural_mode (type, cum);\n+    mode = type_natural_mode (type, cum, false);\n \n   if (TARGET_64BIT && (cum ? cum->call_abi : ix86_abi) == MS_ABI)\n     arg = function_arg_ms_64 (cum, mode, omode, named, bytes);\n@@ -7816,7 +7830,7 @@ ix86_function_value (const_tree valtype, const_tree fntype_or_decl,\n   enum machine_mode mode, orig_mode;\n \n   orig_mode = TYPE_MODE (valtype);\n-  mode = type_natural_mode (valtype, NULL);\n+  mode = type_natural_mode (valtype, NULL, true);\n   return ix86_function_value_1 (valtype, fntype_or_decl, orig_mode, mode);\n }\n \n@@ -7935,7 +7949,7 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #ifdef SUBTARGET_RETURN_IN_MEMORY\n   return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n #else\n-  const enum machine_mode mode = type_natural_mode (type, NULL);\n+  const enum machine_mode mode = type_natural_mode (type, NULL, true);\n \n   if (TARGET_64BIT)\n     {\n@@ -7949,52 +7963,6 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n #endif\n }\n \n-/* When returning SSE vector types, we have a choice of either\n-     (1) being abi incompatible with a -march switch, or\n-     (2) generating an error.\n-   Given no good solution, I think the safest thing is one warning.\n-   The user won't be able to use -Werror, but....\n-\n-   Choose the STRUCT_VALUE_RTX hook because that's (at present) only\n-   called in response to actually generating a caller or callee that\n-   uses such a type.  As opposed to TARGET_RETURN_IN_MEMORY, which is called\n-   via aggregate_value_p for general type probing from tree-ssa.  */\n-\n-static rtx\n-ix86_struct_value_rtx (tree type, int incoming ATTRIBUTE_UNUSED)\n-{\n-  static bool warnedsse, warnedmmx;\n-\n-  if (!TARGET_64BIT && type)\n-    {\n-      /* Look at the return type of the function, not the function type.  */\n-      enum machine_mode mode = TYPE_MODE (TREE_TYPE (type));\n-\n-      if (!TARGET_SSE && !warnedsse)\n-\t{\n-\t  if (mode == TImode\n-\t      || (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 16))\n-\t    {\n-\t      warnedsse = true;\n-\t      warning (0, \"SSE vector return without SSE enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n-\t}\n-\n-      if (!TARGET_MMX && !warnedmmx)\n-\t{\n-\t  if (VECTOR_MODE_P (mode) && GET_MODE_SIZE (mode) == 8)\n-\t    {\n-\t      warnedmmx = true;\n-\t      warning (0, \"MMX vector return without MMX enabled \"\n-\t\t       \"changes the ABI\");\n-\t    }\n-\t}\n-    }\n-\n-  return NULL;\n-}\n-\n \f\n /* Create the va_list data type.  */\n \n@@ -8419,7 +8387,7 @@ ix86_gimplify_va_arg (tree valist, tree type, gimple_seq *pre_p,\n   size = int_size_in_bytes (type);\n   rsize = (size + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n \n-  nat_mode = type_natural_mode (type, NULL);\n+  nat_mode = type_natural_mode (type, NULL, false);\n   switch (nat_mode)\n     {\n     case V8SFmode:\n@@ -46819,8 +46787,6 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \n #undef TARGET_PROMOTE_PROTOTYPES\n #define TARGET_PROMOTE_PROTOTYPES hook_bool_const_tree_true\n-#undef TARGET_STRUCT_VALUE_RTX\n-#define TARGET_STRUCT_VALUE_RTX ix86_struct_value_rtx\n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS ix86_setup_incoming_varargs\n #undef TARGET_MUST_PASS_IN_STACK"}, {"sha": "2f033c09ebb64ddb1f628128671e4576603cdc16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -1,3 +1,17 @@\n+2014-01-14  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/59794\n+\t* g++.dg/ext/vector23.C: Also prune ABI change for Linux/x86.\n+\t* gcc.target/i386/pr39162.c (y): New __m256i variable.\n+\t(bar): Change return type to void.  Set y to x.\n+\t* gcc.target/i386/pr59794-1.c: New testcase.\n+\t* gcc.target/i386/pr59794-2.c: Likewise.\n+\t* gcc.target/i386/pr59794-3.c: Likewise.\n+\t* gcc.target/i386/pr59794-4.c: Likewise.\n+\t* gcc.target/i386/pr59794-5.c: Likewise.\n+\t* gcc.target/i386/pr59794-6.c: Likewise.\n+\t* gcc.target/i386/pr59794-7.c: Likewise.\n+\n 2014-01-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58921\n@@ -17,7 +31,7 @@\n \n 2014-01-14  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * gcc.target/i386/avx-1.c: Fix __builtin_ia32_exp2ps_mask,\n+\t* gcc.target/i386/avx-1.c: Fix __builtin_ia32_exp2ps_mask,\n \t__builtin_ia32_exp2pd_mask, __builtin_ia32_rcp28ps_mask,\n \t__builtin_ia32_rcp28pd_mask, __builtin_ia32_rsqrt28ps_mask,\n \t__builtin_ia32_rsqrt28pd_mask. Add __builtin_ia32_rcp28ss_round,"}, {"sha": "c073895f0ca4047cffc827c1f2da3334a01742eb", "filename": "gcc/testsuite/g++.dg/ext/vector23.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector23.C?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -2,6 +2,8 @@\n /* { dg-options \"-std=gnu++1y -Wsign-conversion\" } */\n // Ignore warning on some powerpc-linux configurations.\n // { dg-prune-output \"non-standard ABI extension\" }\n+// Ignore warning on Linux/x86\n+// { dg-prune-output \"changes the ABI\" }\n \n typedef double vecd __attribute__((vector_size(4*sizeof(double))));\n typedef float vecf __attribute__((vector_size(8*sizeof(float))));"}, {"sha": "94f39107db6236a6acfa5aa6266a369783af1543", "filename": "gcc/testsuite/gcc.target/i386/pr39162.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39162.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -4,8 +4,10 @@\n \n typedef long long __m256i __attribute__ ((__vector_size__ (32), __may_alias__));\n \n-__m256i\n+extern __m256i y;\n+\n+void\n bar (__m256i x) /* { dg-warning \"AVX\" \"\" } */\n {\n-  return x;\n+  y = x;\n }"}, {"sha": "46bff01817cecdac74bcadcb69c11e0e59d5fd77", "filename": "gcc/testsuite/gcc.target/i386/pr59794-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-1.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/59794 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx\" } */\n+/* { dg-skip-if \"no MMX vector\" { *-*-mingw* } } */\n+\n+typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+\n+extern __v2si x;\n+\n+extern void bar (__v2si);\n+void\n+foo (void)\n+{\n+  bar (x); /* { dg-message \"warning: MMX vector argument without MMX enabled changes the ABI\" } */\n+}"}, {"sha": "ce30346264348445839b131fe7d33be4ff73822c", "filename": "gcc/testsuite/gcc.target/i386/pr59794-2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-2.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/59794 */\n+/* { dg-options \"-Wno-psabi -O2 -mno-sse\" } */\n+/* { dg-skip-if \"no SSE vector\" { *-*-mingw* } } */\n+\n+typedef double __v2df __attribute__ ((__vector_size__ (16)));\n+\n+extern __v2df x;\n+\n+extern void bar (__v2df);\n+void\n+foo (void)\n+{\n+  bar (x); /* { dg-message \"warning: SSE vector argument without SSE enabled changes the ABI\" } */\n+}"}, {"sha": "deaf676d9fbbdc5cdeb6665d6f23f4acf181dfcd", "filename": "gcc/testsuite/gcc.target/i386/pr59794-3.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-3.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/59794 */\n+/* { dg-options \"-O2 -mno-avx -Wno-psabi\" } */\n+/* { dg-skip-if \"no AVX vector\" { *-*-mingw* } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\n+extern __v8si x;\n+\n+extern void bar (__v8si);\n+void\n+foo (void)\n+{\n+  bar (x); /* { dg-message \"warning: AVX vector argument without AVX enabled changes the ABI\" } */\n+}"}, {"sha": "5ad0b070ad22b87ddad2d3e7bdc741aa2eedcff5", "filename": "gcc/testsuite/gcc.target/i386/pr59794-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-4.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/59794 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -mno-mmx\" } */\n+/* { dg-skip-if \"no MMX vector\" { *-*-mingw* } } */\n+\n+typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+\n+extern __v2si x;\n+\n+__v2si\n+foo (void)\n+{ /* { dg-warning \"MMX vector return without MMX enabled changes the ABI\" } */\n+  return x;\n+}"}, {"sha": "24c88be09449e1b85f51e7f8fc732238b843a572", "filename": "gcc/testsuite/gcc.target/i386/pr59794-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-5.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/59794 */\n+/* { dg-do compile { target { ia32 } } } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+/* { dg-skip-if \"no SSE vector\" { *-*-mingw* } } */\n+\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+extern __v4si x;\n+\n+__v4si\n+foo (void)\n+{ /* { dg-warning \"SSE vector return without SSE enabled changes the ABI\" } */\n+  return x;\n+}"}, {"sha": "c809f957927db42db46f4d6a1b40e45556448a4a", "filename": "gcc/testsuite/gcc.target/i386/pr59794-6.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-6.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,14 @@\n+/* PR target/59794 */\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-sse\" } */\n+/* { dg-skip-if \"no SSE vector\" { *-*-mingw* } } */\n+\n+typedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+extern __v4si x;\n+\n+__v4si\n+foo (void)\n+{ /* { dg-error \"SSE register return with SSE disabled\" } */\n+  return x;\n+}"}, {"sha": "57fd3d276a01749a45c2f4d2684dfe2edb60f2e1", "filename": "gcc/testsuite/gcc.target/i386/pr59794-7.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3292e3767d10f79aea24b3555188f8ce0f286692/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59794-7.c?ref=3292e3767d10f79aea24b3555188f8ce0f286692", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/59794 */\n+/* { dg-options \"-O2 -mno-avx\" } */\n+/* { dg-skip-if \"no AVX vector\" { *-*-mingw* } } */\n+\n+typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\n+extern __v8si x;\n+\n+__v8si\n+foo (void)\n+{ /* { dg-warning \"AVX vector return without AVX enabled changes the ABI\" } */\n+  return x;\n+}"}]}