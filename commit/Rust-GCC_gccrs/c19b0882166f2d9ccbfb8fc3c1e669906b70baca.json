{"sha": "c19b0882166f2d9ccbfb8fc3c1e669906b70baca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE5YjA4ODIxNjZmMmQ5Y2NiZmI4ZmMzYzFlNjY5OTA2YjcwYmFjYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-08T12:23:19Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-03-08T12:23:19Z"}, "message": "Add prototypes for static functions.\n\n(init_libfuncs): Put args in proper order.\n\nFrom-SVN: r3674", "tree": {"sha": "fbc5ecd73201a7a92d1894d180733ebd93a2f702", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbc5ecd73201a7a92d1894d180733ebd93a2f702"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c19b0882166f2d9ccbfb8fc3c1e669906b70baca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19b0882166f2d9ccbfb8fc3c1e669906b70baca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c19b0882166f2d9ccbfb8fc3c1e669906b70baca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c19b0882166f2d9ccbfb8fc3c1e669906b70baca/comments", "author": null, "committer": null, "parents": [{"sha": "12e74c9e4cbbf9431e0deda8c6409518753b95e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12e74c9e4cbbf9431e0deda8c6409518753b95e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12e74c9e4cbbf9431e0deda8c6409518753b95e1"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "5229f9727a173ce7d864f8fbd3ed740abddf95e3", "filename": "gcc/optabs.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c19b0882166f2d9ccbfb8fc3c1e669906b70baca/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c19b0882166f2d9ccbfb8fc3c1e669906b70baca/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c19b0882166f2d9ccbfb8fc3c1e669906b70baca", "patch": "@@ -194,7 +194,19 @@ rtxfun bcc_gen_fctn[NUM_RTX_CODE];\n \n enum insn_code setcc_gen_code[NUM_RTX_CODE];\n \n-static void emit_float_lib_cmp ();\n+static int add_equal_note\tPROTO((rtx, rtx, enum rtx_code, rtx, rtx));\n+static void emit_float_lib_cmp\tPROTO((rtx, rtx, enum rtx_code));\n+static void init_extends\tPROTO((void));\n+static enum insn_code can_fix_p\tPROTO((enum machine_mode, enum machine_mode,\n+\t\t\t\t       int, int *));\n+static enum insn_code can_float_p PROTO((enum machine_mode, enum machine_mode,\n+\t\t\t\t\t int));\n+static rtx ftruncify\tPROTO((rtx));\n+static optab init_optab\tPROTO((enum rtx_code));\n+static void init_libfuncs PROTO((optab, int, int, char *, int));\n+static void init_integral_libfuncs PROTO((optab, char *, int));\n+static void init_floating_libfuncs PROTO((optab, char *, int));\n+static void init_complex_libfuncs PROTO((optab, char *, int));\n \f\n /* Add a REG_EQUAL note to the last insn in SEQ.  TARGET is being set to\n    the result of operation CODE applied to OP0 (and OP1 if it is a binary\n@@ -3920,9 +3932,9 @@ init_optab (code)\n static void\n init_libfuncs (optable, first_mode, last_mode, opname, suffix)\n     register optab optable;\n-    register char *opname;\n     register int first_mode;\n     register int last_mode;\n+    register char *opname;\n     register char suffix;\n {\n   register int mode;"}]}