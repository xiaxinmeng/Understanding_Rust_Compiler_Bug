{"sha": "6b6435ca5c2933e729e4634f29e39215f2751f49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NDM1Y2E1YzI5MzNlNzI5ZTQ2MzRmMjllMzkyMTVmMjc1MWY0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-13T17:26:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-13T17:26:53Z"}, "message": "i386.c (ix86_compute_frame_layout, [...]): Use HOST_WIDE_INT_C macro.\n\n\t* config/i386/i386.c (ix86_compute_frame_layout, ix86_expand_prologue,\n\tix86_expand_split_stack_prologue): Use HOST_WIDE_INT_C macro.\n\t(ix86_split_to_parts): Likewise.  Fix up formatting.\n\nFrom-SVN: r236215", "tree": {"sha": "2f28041afbe9849437b1305f83cf429afde4add1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f28041afbe9849437b1305f83cf429afde4add1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b6435ca5c2933e729e4634f29e39215f2751f49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6435ca5c2933e729e4634f29e39215f2751f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6435ca5c2933e729e4634f29e39215f2751f49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6435ca5c2933e729e4634f29e39215f2751f49/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8d68c5bd56c661bc13206f44c193a3360d8f042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d68c5bd56c661bc13206f44c193a3360d8f042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d68c5bd56c661bc13206f44c193a3360d8f042"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "1c19f925bb196ad1c863f8f4c3ed36ca27583bf5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6435ca5c2933e729e4634f29e39215f2751f49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6435ca5c2933e729e4634f29e39215f2751f49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b6435ca5c2933e729e4634f29e39215f2751f49", "patch": "@@ -1,3 +1,9 @@\n+2016-05-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_compute_frame_layout, ix86_expand_prologue,\n+\tix86_expand_split_stack_prologue): Use HOST_WIDE_INT_C macro.\n+\t(ix86_split_to_parts): Likewise.  Fix up formatting.\n+\n 2016-05-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* tree-ssa-loop-ivopts.c (create_new_ivs): Cast to"}, {"sha": "7f9004f79b3ccb0c3843a540dc24c52d78c3eaa0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b6435ca5c2933e729e4634f29e39215f2751f49/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b6435ca5c2933e729e4634f29e39215f2751f49/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b6435ca5c2933e729e4634f29e39215f2751f49", "patch": "@@ -11960,7 +11960,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n   to_allocate = offset - frame->sse_reg_save_offset;\n \n   if ((!to_allocate && frame->nregs <= 1)\n-      || (TARGET_64BIT && to_allocate >= (HOST_WIDE_INT) 0x80000000))\n+      || (TARGET_64BIT && to_allocate >= HOST_WIDE_INT_C (0x80000000)))\n     frame->save_regs_using_mov = false;\n \n   if (ix86_using_red_zone ()\n@@ -13382,7 +13382,7 @@ ix86_expand_prologue (void)\n \t{\n \t  HOST_WIDE_INT size = allocate;\n \n-\t  if (TARGET_64BIT && size >= (HOST_WIDE_INT) 0x80000000)\n+\t  if (TARGET_64BIT && size >= HOST_WIDE_INT_C (0x80000000))\n \t    size = 0x80000000 - STACK_CHECK_PROTECT - 1;\n \n \t  if (TARGET_STACK_PROBE)\n@@ -14323,7 +14323,7 @@ ix86_expand_split_stack_prologue (void)\n \t     different function: __morestack_large.  We pass the\n \t     argument size in the upper 32 bits of r10 and pass the\n \t     frame size in the lower 32 bits.  */\n-\t  gcc_assert ((allocate & (HOST_WIDE_INT) 0xffffffff) == allocate);\n+\t  gcc_assert ((allocate & HOST_WIDE_INT_C (0xffffffff)) == allocate);\n \t  gcc_assert ((args_size & 0xffffffff) == args_size);\n \n \t  if (split_stack_fn_large == NULL_RTX)\n@@ -24557,20 +24557,17 @@ ix86_split_to_parts (rtx operand, rtx *parts, machine_mode mode)\n \t      real_to_target (l, CONST_DOUBLE_REAL_VALUE (operand), mode);\n \n \t      /* real_to_target puts 32-bit pieces in each long.  */\n-\t      parts[0] =\n-\t\tgen_int_mode\n-\t\t  ((l[0] & (HOST_WIDE_INT) 0xffffffff)\n-\t\t   | ((l[1] & (HOST_WIDE_INT) 0xffffffff) << 32),\n-\t\t   DImode);\n+\t      parts[0] = gen_int_mode ((l[0] & HOST_WIDE_INT_C (0xffffffff))\n+\t\t\t\t       | ((l[1] & HOST_WIDE_INT_C (0xffffffff))\n+\t\t\t\t\t  << 32), DImode);\n \n \t      if (upper_mode == SImode)\n \t        parts[1] = gen_int_mode (l[2], SImode);\n \t      else\n-\t        parts[1] =\n-\t\t  gen_int_mode\n-\t\t    ((l[2] & (HOST_WIDE_INT) 0xffffffff)\n-\t\t     | ((l[3] & (HOST_WIDE_INT) 0xffffffff) << 32),\n-\t\t     DImode);\n+\t        parts[1]\n+\t\t  = gen_int_mode ((l[2] & HOST_WIDE_INT_C (0xffffffff))\n+\t\t\t\t  | ((l[3] & HOST_WIDE_INT_C (0xffffffff))\n+\t\t\t\t     << 32), DImode);\n \t    }\n \t  else\n \t    gcc_unreachable ();"}]}