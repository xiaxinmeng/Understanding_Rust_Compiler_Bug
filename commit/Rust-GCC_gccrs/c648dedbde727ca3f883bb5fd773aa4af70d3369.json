{"sha": "c648dedbde727ca3f883bb5fd773aa4af70d3369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0OGRlZGJkZTcyN2NhM2Y4ODNiYjVmZDc3M2FhNGFmNzBkMzM2OQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2007-01-09T12:46:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2007-01-09T12:46:17Z"}, "message": "i386.md (*sinxf2): Rename to *sinxf2_i387.\n\n        * config/i386/i386.md (*sinxf2): Rename to *sinxf2_i387.\n        (*cosxf2): Rename to cosxf2_i387.\n\n        (*sindf2, *sinsf2): Extend operand 1 to XFmode.  Macroize patterns\n        using X87MODEF12 mode macro. Rename patterns to\n        *sin_extend<mode>xf2_i387.  Use SSE_FLOAT_MODE_P to disable patterns\n        for SSE math.\n        (*cosdf2, *cossf2): Ditto.\n        (sincosdf3, sincossf3): Ditto.  Rewrite corresponding splitters\n        to match extended input operands.\n\n        (sincos<mode>3): New expander.\n\n        (*sinextendsfdf2, *cosextendsfdf2, *sincosextendsfdf3): Remove\n        insn patterns and corresponding splitters.\n\nFrom-SVN: r120620", "tree": {"sha": "999382e5621610576d3c146e3ff254af3d96edf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/999382e5621610576d3c146e3ff254af3d96edf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c648dedbde727ca3f883bb5fd773aa4af70d3369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c648dedbde727ca3f883bb5fd773aa4af70d3369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c648dedbde727ca3f883bb5fd773aa4af70d3369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c648dedbde727ca3f883bb5fd773aa4af70d3369/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "269008262eee91f534468a55b6889d947c619356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/269008262eee91f534468a55b6889d947c619356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/269008262eee91f534468a55b6889d947c619356"}], "stats": {"total": 252, "additions": 88, "deletions": 164}, "files": [{"sha": "642ae649d982eff02c9e65f28351a286b2450105", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c648dedbde727ca3f883bb5fd773aa4af70d3369/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c648dedbde727ca3f883bb5fd773aa4af70d3369/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c648dedbde727ca3f883bb5fd773aa4af70d3369", "patch": "@@ -1,3 +1,21 @@\n+2007-01-09  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*sinxf2): Rename to *sinxf2_i387.\n+\t(*cosxf2): Rename to cosxf2_i387.\n+\n+\t(*sindf2, *sinsf2): Extend operand 1 to XFmode.  Macroize patterns\n+\tusing X87MODEF12 mode macro. Rename patterns to\n+\t*sin_extend<mode>xf2_i387.  Use SSE_FLOAT_MODE_P to disable patterns\n+\tfor SSE math.\n+\t(*cosdf2, *cossf2): Ditto.\n+\t(sincosdf3, sincossf3): Ditto.  Rewrite corresponding splitters\n+\tto match extended input operands.\n+\n+\t(sincos<mode>3): New expander.\n+\n+\t(*sinextendsfdf2, *cosextendsfdf2, *sincosextendsfdf3): Remove\n+\tinsn patterns and corresponding splitters.\n+\n 2007-01-09  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/t-linux (TARGET_LIBGCC2_CFLAGS): Delete."}, {"sha": "fa8ac3b96d3c33b0f7322b7daff3bf94f9a94ff1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 70, "deletions": 164, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c648dedbde727ca3f883bb5fd773aa4af70d3369/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c648dedbde727ca3f883bb5fd773aa4af70d3369/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=c648dedbde727ca3f883bb5fd773aa4af70d3369", "patch": "@@ -15726,39 +15726,7 @@\n   DONE;\n })\n \n-(define_insn \"*sindf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsin\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*sinsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsin\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*sinextendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 1 \"register_operand\" \"0\"))]\n-\t\t   UNSPEC_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsin\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*sinxf2\"\n+(define_insn \"*sinxf2_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_SIN))]\n   \"TARGET_USE_FANCY_MATH_387\n@@ -15767,200 +15735,138 @@\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*cosdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n+(define_insn \"*sin_extend<mode>xf2_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(float_extend:XF\n+\t\t      (match_operand:X87MODEF12 1 \"register_operand\" \"0\"))]\n+\t\t   UNSPEC_SIN))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n-  \"fcos\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*cossf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fcos\"\n+  \"fsin\"\n   [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"SF\")])\n+   (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*cosextendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 1 \"register_operand\" \"0\"))]\n-\t\t   UNSPEC_COS))]\n+(define_insn \"*cosxf2_i387\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"XF\")])\n \n-(define_insn \"*cosxf2\"\n+(define_insn \"*cos_extend<mode>xf2_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")] UNSPEC_COS))]\n+\t(unspec:XF [(float_extend:XF\n+\t\t      (match_operand:X87MODEF12 1 \"register_operand\" \"0\"))]\n+\t\t   UNSPEC_COS))]\n   \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n   \"fcos\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n-;; With sincos pattern defined, sin and cos builtin function will be\n+;; When sincos pattern is defined, sin and cos builtin functions will be\n ;; expanded to sincos pattern with one of its outputs left unused.\n-;; Cse pass  will detected, if two sincos patterns can be combined,\n+;; CSE pass will figure out if two sincos patterns can be combined,\n ;; otherwise sincos pattern will be split back to sin or cos pattern,\n ;; depending on the unused output.\n \n-(define_insn \"sincosdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"=u\")\n-        (unspec:DF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsincos\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"\")\n-\t(unspec:DF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 1) (unspec:DF [(match_dup 2)] UNSPEC_SIN))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"\")\n-\t(unspec:DF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 0) (unspec:DF [(match_dup 2)] UNSPEC_COS))]\n-  \"\")\n-\n-(define_insn \"sincossf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:SF 1 \"register_operand\" \"=u\")\n-        (unspec:SF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && (!TARGET_SSE_MATH || TARGET_MIX_SSE_I387)\n-   && flag_unsafe_math_optimizations\"\n-  \"fsincos\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:SF 1 \"register_operand\" \"\")\n-\t(unspec:SF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n-   && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 1) (unspec:SF [(match_dup 2)] UNSPEC_SIN))]\n-  \"\")\n-\n-(define_split\n-  [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"\")]\n-\t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:SF 1 \"register_operand\" \"\")\n-\t(unspec:SF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n-  \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n-   && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 0) (unspec:SF [(match_dup 2)] UNSPEC_COS))]\n-  \"\")\n-\n-(define_insn \"*sincosextendsfdf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 2 \"register_operand\" \"0\"))]\n+(define_insn \"sincosxf3\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]\n \t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"=u\")\n-        (unspec:DF [(float_extend:DF\n-\t\t     (match_dup 2))] UNSPEC_SINCOS_SIN))]\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+        (unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"TARGET_USE_FANCY_MATH_387\n-   && (!(TARGET_SSE2 && TARGET_SSE_MATH) || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n   \"fsincos\"\n   [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n+   (set_attr \"mode\" \"XF\")])\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 2 \"register_operand\" \"\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"\")]\n \t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"\")\n-        (unspec:DF [(float_extend:DF\n-\t\t     (match_dup 2))] UNSPEC_SINCOS_SIN))]\n+   (set (match_operand:XF 1 \"register_operand\" \"\")\n+\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n    && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 1) (unspec:DF [(float_extend:DF\n-\t\t\t\t   (match_dup 2))] UNSPEC_SIN))]\n+  [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))]\n   \"\")\n \n (define_split\n-  [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t(unspec:DF [(float_extend:DF\n-\t\t     (match_operand:SF 2 \"register_operand\" \"\"))]\n+  [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"\")]\n \t\t   UNSPEC_SINCOS_COS))\n-   (set (match_operand:DF 1 \"register_operand\" \"\")\n-        (unspec:DF [(float_extend:DF\n-\t\t     (match_dup 2))] UNSPEC_SINCOS_SIN))]\n+   (set (match_operand:XF 1 \"register_operand\" \"\")\n+\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n    && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 0) (unspec:DF [(float_extend:DF\n-\t\t\t\t   (match_dup 2))] UNSPEC_COS))]\n+  [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))]\n   \"\")\n \n-(define_insn \"sincosxf3\"\n+(define_insn \"sincos_extend<mode>xf3_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]\n+\t(unspec:XF [(float_extend:XF\n+\t\t      (match_operand:X87MODEF12 2 \"register_operand\" \"0\"))]\n \t\t   UNSPEC_SINCOS_COS))\n    (set (match_operand:XF 1 \"register_operand\" \"=u\")\n-        (unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n+        (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n    && flag_unsafe_math_optimizations\"\n   \"fsincos\"\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"\")]\n+\t(unspec:XF [(float_extend:XF\n+\t\t      (match_operand:X87MODEF12 2 \"register_operand\" \"\"))]\n \t\t   UNSPEC_SINCOS_COS))\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n-\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n+\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[0]))\n    && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_SIN))]\n+  [(set (match_dup 1) (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SIN))]\n   \"\")\n \n (define_split\n   [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"\")]\n+\t(unspec:XF [(float_extend:XF\n+\t\t      (match_operand:X87MODEF12 2 \"register_operand\" \"\"))]\n \t\t   UNSPEC_SINCOS_COS))\n    (set (match_operand:XF 1 \"register_operand\" \"\")\n-\t(unspec:XF [(match_dup 2)] UNSPEC_SINCOS_SIN))]\n+\t(unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_SINCOS_SIN))]\n   \"find_regno_note (insn, REG_UNUSED, REGNO (operands[1]))\n    && !reload_completed && !reload_in_progress\"\n-  [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))]\n+  [(set (match_dup 0) (unspec:XF [(float_extend:XF (match_dup 2))] UNSPEC_COS))]\n   \"\")\n \n+(define_expand \"sincos<mode>3\"\n+  [(use (match_operand:X87MODEF12 0 \"register_operand\" \"\"))\n+   (use (match_operand:X87MODEF12 1 \"register_operand\" \"\"))\n+   (use (match_operand:X87MODEF12 2 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_sincos_extend<mode>xf3_i387 (op0, op1, operands[2]));\n+  emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[0], op0));\n+  emit_insn (gen_truncxf<mode>2_i387_noop_unspec (operands[1], op1));\n+  DONE;\n+})\n+\n (define_insn \"*tandf3_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")]"}]}