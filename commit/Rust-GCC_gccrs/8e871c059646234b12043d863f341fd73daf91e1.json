{"sha": "8e871c059646234b12043d863f341fd73daf91e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU4NzFjMDU5NjQ2MjM0YjEyMDQzZDg2M2YzNDFmZDczZGFmOTFlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-12T11:02:09Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-12T11:02:09Z"}, "message": "(sqrtsf2, sqrtdf2): Change POWERPCSQR to PPCFPX.\n\n(maxsf3, minsf3, maxdf3, mindf3): New patterns using fsel instruction.\n\nFrom-SVN: r6385", "tree": {"sha": "72cb897504d24171b3ca88ce4c8a72f53d586002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72cb897504d24171b3ca88ce4c8a72f53d586002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e871c059646234b12043d863f341fd73daf91e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e871c059646234b12043d863f341fd73daf91e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e871c059646234b12043d863f341fd73daf91e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e871c059646234b12043d863f341fd73daf91e1/comments", "author": null, "committer": null, "parents": [{"sha": "6a7ec0a773b070fb50b6ce4b5397cbd64ace3272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7ec0a773b070fb50b6ce4b5397cbd64ace3272", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7ec0a773b070fb50b6ce4b5397cbd64ace3272"}], "stats": {"total": 194, "additions": 189, "deletions": 5}, "files": [{"sha": "5981e0d260f99075f30b01b7b8a17e57048ca3f7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 189, "deletions": 5, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e871c059646234b12043d863f341fd73daf91e1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e871c059646234b12043d863f341fd73daf91e1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8e871c059646234b12043d863f341fd73daf91e1", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for IBM RISC System 6000 (POWER) for GNU C compiler\n-;;   Copyright (C) 1990, 1991, 1992, 1993 Free Software Foundation, Inc.\n-;;   Contributed by Richard Kenner (kenner@nyu.edu)\n+;;   Copyright (C) 1990, 1991, 1992, 1993, 1994 Free Software Foundation, Inc.\n+;;   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n ;; This file is part of GNU CC.\n \n@@ -2262,13 +2262,13 @@\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPCSQR || TARGET_POWER2\"\n+  \"TARGET_PPCFPX || TARGET_POWER2\"\n   \"\")\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPCSQR\"\n+  \"TARGET_PPCFPX\"\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n@@ -2279,6 +2279,98 @@\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n \n+;; For SMIN, SMAX, UMIN, and UMAX, we use DEFINE_EXPAND's that involve a fsel\n+;; instruction and some auxiliary computations.  Then we just have a single\n+;; DEFINE_INSN for fsel and the define_splits to make them if made by\n+;; combine.\n+(define_expand \"maxsf3\"\n+  [(set (match_dup 3)\n+\t(minus:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"\")))\n+   (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:SF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"TARGET_PPCFPX\"\n+  \"\n+{ operands[3] = gen_reg_rtx (SFmode); }\")\n+(define_split\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(smax:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:SF 2 \"reg_or_short_operand\" \"\")))\n+   (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_PPCFPX\"\n+  [(set (match_dup 3)\n+\t(minus:SF (match_dup 1) (match_dup 2)))\n+   (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:SF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"\")\n+(define_expand \"minsf3\"\n+  [(set (match_dup 3)\n+\t(minus:SF (match_operand:SF 2 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:SF 1 \"gpc_reg_operand\" \"\")))\n+   (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:SF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"TARGET_PPCFPX\"\n+  \"\n+{ operands[3] = gen_reg_rtx (SFmode); }\")\n+(define_split\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(smin:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:SF 2 \"reg_or_short_operand\" \"\")))\n+   (clobber (match_operand:SF 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_PPCFPX\"\n+  [(set (match_dup 3)\n+\t(minus:SF (match_dup 2) (match_dup 1)))\n+   (set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:SF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"\")\n+(define_insn \"\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(if_then_else:SF (ge (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t     (const_int 0))\n+\t\t\t (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t (match_operand:SF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+(define_insn \"\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP\n+\t (if_then_else:SF (ge (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t      (const_int 0))\n+\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:SF 4 \"=f\"))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel. %4,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+(define_insn \"\"\n+  [(set (match_operand:CCFP 4 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP\n+\t (if_then_else:SF (ge (match_operand:SF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t      (const_int 0))\n+\t\t\t  (match_operand:SF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (match_operand:SF 3 \"gpc_reg_operand\" \"f\"))\n+\t (const_int 0)))\n+   (set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(if_then_else:SF (ge (match_dup 1) (const_int 0))\n+\t\t\t (match_dup 2)\n+\t\t\t (match_dup 3)))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel. %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n (define_insn \"negdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(neg:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n@@ -2371,9 +2463,101 @@\n (define_insn \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWERPCSQR || TARGET_POWER2\"\n+  \"TARGET_PPCFPX || TARGET_POWER2\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n+;; For SMIN, SMAX, UMIN, and UMAX, we use DEFINE_EXPAND's that involve a fsel\n+;; instruction and some auxiliary computations.  Then we just have a single\n+;; DEFINE_INSN for fsel and the define_splits to make them if made by\n+;; combine.\n+(define_expand \"maxdf3\"\n+  [(set (match_dup 3)\n+\t(minus:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"\")))\n+   (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:DF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"TARGET_PPCFPX\"\n+  \"\n+{ operands[3] = gen_reg_rtx (DFmode); }\")\n+(define_split\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(smax:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:DF 2 \"reg_or_short_operand\" \"\")))\n+   (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_PPCFPX\"\n+  [(set (match_dup 3)\n+\t(minus:DF (match_dup 1) (match_dup 2)))\n+   (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:DF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"\")\n+(define_expand \"mindf3\"\n+  [(set (match_dup 3)\n+\t(minus:DF (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n+\t\t  (match_operand:DF 1 \"gpc_reg_operand\" \"\")))\n+   (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:DF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"TARGET_PPCFPX\"\n+  \"\n+{ operands[3] = gen_reg_rtx (DFmode); }\")\n+(define_split\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(smin:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n+\t\t (match_operand:DF 2 \"reg_or_short_operand\" \"\")))\n+   (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n+  \"TARGET_PPCFPX\"\n+  [(set (match_dup 3)\n+\t(minus:DF (match_dup 2) (match_dup 1)))\n+   (set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n+\t(if_then_else:DF (ge (match_dup 3)\n+\t\t\t     (const_int 0))\n+\t\t\t (match_dup 1)\n+\t\t\t (match_dup 2)))]\n+  \"\")\n+(define_insn \"\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(if_then_else:DF (ge (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t     (const_int 0))\n+\t\t\t (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t (match_operand:DF 3 \"gpc_reg_operand\" \"f\")))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+(define_insn \"\"\n+  [(set (match_operand:CCFP 0 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP\n+\t (if_then_else:DF (ge (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t      (const_int 0))\n+\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n+\t (const_int 0)))\n+   (clobber (match_scratch:DF 4 \"=f\"))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel. %4,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n+(define_insn \"\"\n+  [(set (match_operand:CCFP 4 \"cc_reg_operand\" \"=y\")\n+\t(compare:CCFP\n+\t (if_then_else:DF (ge (match_operand:DF 1 \"gpc_reg_operand\" \"f\")\n+\t\t\t      (const_int 0))\n+\t\t\t  (match_operand:DF 2 \"gpc_reg_operand\" \"f\")\n+\t\t\t  (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n+\t (const_int 0)))\n+   (set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(if_then_else:DF (ge (match_dup 1) (const_int 0))\n+\t\t\t (match_dup 2)\n+\t\t\t (match_dup 3)))]\n+  \"TARGET_PPCFPX\"\n+  \"fsel. %0,%1,%2,%3\"\n+  [(set_attr \"type\" \"fp\")])\n \f\n ;; Conversions to and from floating-point.\n (define_expand \"floatsidf2\""}]}