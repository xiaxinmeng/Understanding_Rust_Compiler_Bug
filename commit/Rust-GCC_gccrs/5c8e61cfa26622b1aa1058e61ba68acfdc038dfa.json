{"sha": "5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM4ZTYxY2ZhMjY2MjJiMWFhMTA1OGU2MWJhNjhhY2ZkYzAzOGRmYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-01-03T07:19:04Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-01-03T07:19:04Z"}, "message": "poly_int: struct_value_size\n\nThis patch makes calls.c treat struct_value_size (one of the\noperands to a call pattern) as polynomial.\n\n2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* calls.c (emit_call_1, expand_call): Change struct_value_size from\n\ta HOST_WIDE_INT to a poly_int64.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r256162", "tree": {"sha": "52d3eb7929be07cdc3fcea7241d0307add2f89a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52d3eb7929be07cdc3fcea7241d0307add2f89a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa/comments", "author": null, "committer": null, "parents": [{"sha": "95fe7b4862dd3250e4d6b3e2c592b440b79613df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95fe7b4862dd3250e4d6b3e2c592b440b79613df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95fe7b4862dd3250e4d6b3e2c592b440b79613df"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "3f3f0dcd182f690e87178e705af012c1fe51b81c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "patch": "@@ -1,3 +1,10 @@\n+2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* calls.c (emit_call_1, expand_call): Change struct_value_size from\n+\ta HOST_WIDE_INT to a poly_int64.\n+\n 2018-01-03  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "5a0d663277614cf0d7404b4d5b81daee2a25ed83", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c8e61cfa26622b1aa1058e61ba68acfdc038dfa/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=5c8e61cfa26622b1aa1058e61ba68acfdc038dfa", "patch": "@@ -378,7 +378,7 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \t     tree funtype ATTRIBUTE_UNUSED,\n \t     poly_int64 stack_size ATTRIBUTE_UNUSED,\n \t     poly_int64 rounded_stack_size,\n-\t     HOST_WIDE_INT struct_value_size ATTRIBUTE_UNUSED,\n+\t     poly_int64 struct_value_size ATTRIBUTE_UNUSED,\n \t     rtx next_arg_reg ATTRIBUTE_UNUSED, rtx valreg,\n \t     int old_inhibit_defer_pop, rtx call_fusage, int ecf_flags,\n \t     cumulative_args_t args_so_far ATTRIBUTE_UNUSED)\n@@ -438,7 +438,8 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \t\t\t\t\t next_arg_reg, NULL_RTX);\n       else\n \tpat = targetm.gen_sibcall (funmem, rounded_stack_size_rtx,\n-\t\t\t\t   next_arg_reg, GEN_INT (struct_value_size));\n+\t\t\t\t   next_arg_reg,\n+\t\t\t\t   gen_int_mode (struct_value_size, Pmode));\n     }\n   /* If the target has \"call\" or \"call_value\" insns, then prefer them\n      if no arguments are actually popped.  If the target does not have\n@@ -471,7 +472,7 @@ emit_call_1 (rtx funexp, tree fntree ATTRIBUTE_UNUSED, tree fndecl ATTRIBUTE_UNU\n \t\t\t\t      next_arg_reg, NULL_RTX);\n       else\n \tpat = targetm.gen_call (funmem, rounded_stack_size_rtx, next_arg_reg,\n-\t\t\t\tGEN_INT (struct_value_size));\n+\t\t\t\tgen_int_mode (struct_value_size, Pmode));\n     }\n   emit_insn (pat);\n \n@@ -3237,7 +3238,7 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Size of aggregate value wanted, or zero if none wanted\n      or if we are using the non-reentrant PCC calling convention\n      or expecting the value in registers.  */\n-  HOST_WIDE_INT struct_value_size = 0;\n+  poly_int64 struct_value_size = 0;\n   /* Nonzero if called function returns an aggregate in memory PCC style,\n      by returning the address of where to find it.  */\n   int pcc_struct_value = 0;\n@@ -3399,7 +3400,8 @@ expand_call (tree exp, rtx target, int ignore)\n       }\n #else /* not PCC_STATIC_STRUCT_RETURN */\n       {\n-\tstruct_value_size = int_size_in_bytes (rettype);\n+\tif (!poly_int_tree_p (TYPE_SIZE_UNIT (rettype), &struct_value_size))\n+\t  struct_value_size = -1;\n \n \t/* Even if it is semantically safe to use the target as the return\n \t   slot, it may be not sufficiently aligned for the return type.  */"}]}