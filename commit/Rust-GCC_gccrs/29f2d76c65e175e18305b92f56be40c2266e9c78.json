{"sha": "29f2d76c65e175e18305b92f56be40c2266e9c78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjlmMmQ3NmM2NWUxNzVlMTgzMDViOTJmNTZiZTQwYzIyNjZlOWM3OA==", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2020-08-18T20:51:37Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-22T12:11:24Z"}, "message": "[Ada] Implement AI12-0030: Stream attribute availability\n\ngcc/ada/\n\n\t* sem_util.ads, sem_util.adb: Declare and implement a new\n\tpredicate, Derivation_Too_Early_To_Inherit.  This function\n\tindicates whether a given derived type fails to inherit a given\n\tstreaming-related attribute from its parent type because the\n\tdeclaration of the derived type precedes the corresponding\n\tattribute_definition_clause of the parent.\n\t* exp_tss.adb (Find_Inherited_TSS): Call\n\tDerivation_Too_Early_To_Inherit instead of unconditionally\n\tassuming that a parent type's streaming attribute is available\n\tfor inheritance by an immediate descendant type.\n\t* sem_attr.adb (Stream_Attribute_Available): Call\n\tDerivation_Too_Early_To_Inherit instead of unconditionally\n\tassuming that a parent type's streaming attribute is available\n\tfor inheritance by an immediate descendant type.\n\t* exp_attr.adb (Default_Streaming_Unavailable): A new predicate;\n\tgiven a type, indicates whether predefined (as opposed to\n\tuser-defined) streaming operations for the type should be\n\timplemented by raising Program_Error.\n\t(Expand_N_Attribute_Reference): For each of the 4\n\tstreaming-related attributes (i.e., Read, Write, Input, Output),\n\tafter determining that no user-defined implementation is\n\tavailable (including a Stream_Convert pragma), call\n\tDefault_Streaming_Unavailable; if that call returns True, then\n\timplement the streaming operation as \"raise Program_Error;\".", "tree": {"sha": "0f87c8423657c3f90c7e03fab8fd5ab68d436e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f87c8423657c3f90c7e03fab8fd5ab68d436e60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29f2d76c65e175e18305b92f56be40c2266e9c78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f2d76c65e175e18305b92f56be40c2266e9c78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f2d76c65e175e18305b92f56be40c2266e9c78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f2d76c65e175e18305b92f56be40c2266e9c78/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e54783503c30aecb7e36e6034f915ffc479d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e54783503c30aecb7e36e6034f915ffc479d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e54783503c30aecb7e36e6034f915ffc479d33"}], "stats": {"total": 168, "additions": 163, "deletions": 5}, "files": [{"sha": "d3468d5e58f94c40e3041e748c86d4d2f864f637", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=29f2d76c65e175e18305b92f56be40c2266e9c78", "patch": "@@ -136,6 +136,12 @@ package body Exp_Attr is\n    --  special-case code that shuffles partial and full views in the middle\n    --  of semantic analysis and expansion.\n \n+   function Default_Streaming_Unavailable (Typ : Entity_Id) return Boolean;\n+   --\n+   --  In most cases, references to unavailable streaming attributes\n+   --  are rejected at compile time. In some obscure cases involving\n+   --  generics and formal derived types, the problem is dealt with at runtime.\n+\n    procedure Expand_Access_To_Protected_Op\n      (N    : Node_Id;\n       Pref : Node_Id;\n@@ -926,6 +932,24 @@ package body Exp_Attr is\n       end if;\n    end Compile_Stream_Body_In_Scope;\n \n+   -----------------------------------\n+   -- Default_Streaming_Unavailable --\n+   -----------------------------------\n+\n+   function Default_Streaming_Unavailable (Typ : Entity_Id) return Boolean is\n+      Btyp : constant Entity_Id := Implementation_Base_Type (Typ);\n+   begin\n+      if Is_Immutably_Limited_Type (Btyp)\n+        and then not Is_Tagged_Type (Btyp)\n+        and then not (Ekind (Btyp) = E_Record_Type\n+                      and then Present (Corresponding_Concurrent_Type (Btyp)))\n+      then\n+         pragma Assert (In_Instance_Body);\n+         return True;\n+      end if;\n+      return False;\n+   end Default_Streaming_Unavailable;\n+\n    -----------------------------------\n    -- Expand_Access_To_Protected_Op --\n    -----------------------------------\n@@ -3954,6 +3978,18 @@ package body Exp_Attr is\n                Analyze_And_Resolve (N, B_Type);\n                return;\n \n+            --  Limited types\n+\n+            elsif Default_Streaming_Unavailable (U_Type) then\n+               --  Do the same thing here as is done above in the\n+               --  case where a No_Streams restriction is active.\n+\n+               Rewrite (N,\n+                 Make_Raise_Program_Error (Sloc (N),\n+                   Reason => PE_Stream_Operation_Not_Allowed));\n+               Set_Etype (N, B_Type);\n+               return;\n+\n             --  Elementary types\n \n             elsif Is_Elementary_Type (U_Type) then\n@@ -5074,6 +5110,18 @@ package body Exp_Attr is\n                Analyze (N);\n                return;\n \n+            --  Limited types\n+\n+            elsif Default_Streaming_Unavailable (U_Type) then\n+               --  Do the same thing here as is done above in the\n+               --  case where a No_Streams restriction is active.\n+\n+               Rewrite (N,\n+                 Make_Raise_Program_Error (Sloc (N),\n+                   Reason => PE_Stream_Operation_Not_Allowed));\n+               Set_Etype (N, Standard_Void_Type);\n+               return;\n+\n             --  For elementary types, we call the W_xxx routine directly. Note\n             --  that the effect of Write and Output is identical for the case\n             --  of an elementary type (there are no discriminants or bounds).\n@@ -5907,6 +5955,18 @@ package body Exp_Attr is\n                Analyze (N);\n                return;\n \n+            --  Limited types\n+\n+            elsif Default_Streaming_Unavailable (U_Type) then\n+               --  Do the same thing here as is done above in the\n+               --  case where a No_Streams restriction is active.\n+\n+               Rewrite (N,\n+                 Make_Raise_Program_Error (Sloc (N),\n+                   Reason => PE_Stream_Operation_Not_Allowed));\n+               Set_Etype (N, B_Type);\n+               return;\n+\n             --  For elementary types, we call the I_xxx routine using the first\n             --  parameter and then assign the result into the second parameter.\n             --  We set Assignment_OK to deal with the conversion case.\n@@ -7516,6 +7576,18 @@ package body Exp_Attr is\n                Analyze (N);\n                return;\n \n+            --  Limited types\n+\n+            elsif Default_Streaming_Unavailable (U_Type) then\n+               --  Do the same thing here as is done above in the\n+               --  case where a No_Streams restriction is active.\n+\n+               Rewrite (N,\n+                 Make_Raise_Program_Error (Sloc (N),\n+                   Reason => PE_Stream_Operation_Not_Allowed));\n+               Set_Etype (N, U_Type);\n+               return;\n+\n             --  For elementary types, we call the W_xxx routine directly\n \n             elsif Is_Elementary_Type (U_Type) then"}, {"sha": "40943fb9971199b7e294180af616ed19c7ad45f8", "filename": "gcc/ada/exp_tss.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fexp_tss.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fexp_tss.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_tss.adb?ref=29f2d76c65e175e18305b92f56be40c2266e9c78", "patch": "@@ -164,7 +164,13 @@ package body Exp_Tss is\n       --  If Typ is a derived type, it may inherit attributes from an ancestor\n \n       if No (Proc) and then Is_Derived_Type (Btyp) then\n-         Proc := Find_Inherited_TSS (Etype (Btyp), Nam);\n+         if not Derivation_Too_Early_To_Inherit (Btyp, Nam) then\n+            Proc := Find_Inherited_TSS (Etype (Btyp), Nam);\n+         elsif Is_Derived_Type (Etype (Btyp)) then\n+            --  Skip one link in the derivation chain\n+            Proc := Find_Inherited_TSS\n+                      (Etype (Base_Type (Etype (Btyp))), Nam);\n+         end if;\n       end if;\n \n       --  If nothing else, use the TSS of the root type"}, {"sha": "c80cc06804d1696f79b2e1f6c755baea9e6bea39", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=29f2d76c65e175e18305b92f56be40c2266e9c78", "patch": "@@ -12409,11 +12409,17 @@ package body Sem_Attr is\n       --  applies to an ancestor type.\n \n       while Etype (Etyp) /= Etyp loop\n-         Etyp := Etype (Etyp);\n+         declare\n+            Derived_Type : constant Entity_Id := Etyp;\n+         begin\n+            Etyp := Etype (Etyp);\n \n-         if Has_Stream_Attribute_Definition (Etyp, Nam) then\n-            return True;\n-         end if;\n+            if Has_Stream_Attribute_Definition (Etyp, Nam) then\n+               if not Derivation_Too_Early_To_Inherit (Derived_Type, Nam) then\n+                  return True;\n+               end if;\n+            end if;\n+         end;\n       end loop;\n \n       if Ada_Version < Ada_2005 then"}, {"sha": "30c537643f7f84fb74998a750f88fb5df2d2c608", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=29f2d76c65e175e18305b92f56be40c2266e9c78", "patch": "@@ -50,6 +50,7 @@ with Rtsfind;  use Rtsfind;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Attr; use Sem_Attr;\n+with Sem_Cat;  use Sem_Cat;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n with Sem_Disp; use Sem_Disp;\n@@ -7288,6 +7289,71 @@ package body Sem_Util is\n       return Denotes_Discriminant (L) or else Denotes_Discriminant (H);\n    end Depends_On_Discriminant;\n \n+   -------------------------------------\n+   -- Derivation_Too_Early_To_Inherit --\n+   -------------------------------------\n+\n+   function Derivation_Too_Early_To_Inherit\n+     (Typ : Entity_Id; Streaming_Op : TSS_Name_Type) return Boolean is\n+      Btyp        : constant Entity_Id := Implementation_Base_Type (Typ);\n+      Parent_Type : Entity_Id;\n+   begin\n+      if Is_Derived_Type (Btyp) then\n+         Parent_Type := Implementation_Base_Type (Etype (Btyp));\n+         pragma Assert (Parent_Type /= Btyp);\n+         if Has_Stream_Attribute_Definition\n+              (Parent_Type, Streaming_Op)\n+           and then In_Same_Extended_Unit (Btyp, Parent_Type)\n+           and then Instantiation (Get_Source_File_Index (Sloc (Btyp))) =\n+                    Instantiation (Get_Source_File_Index (Sloc (Parent_Type)))\n+         then\n+            declare\n+               --  ??? Avoid code duplication here with\n+               --  Sem_Cat.Has_Stream_Attribute_Definition by introducing a\n+               --  new function to be called from both places?\n+\n+               Rep_Item : Node_Id := First_Rep_Item (Parent_Type);\n+               Real_Rep : Node_Id;\n+               Found    : Boolean := False;\n+            begin\n+               while Present (Rep_Item) loop\n+                  Real_Rep := Rep_Item;\n+\n+                  if Nkind (Rep_Item) = N_Aspect_Specification then\n+                     Real_Rep := Aspect_Rep_Item (Rep_Item);\n+                  end if;\n+\n+                  if Nkind (Real_Rep) = N_Attribute_Definition_Clause then\n+                     case Chars (Real_Rep) is\n+                        when Name_Read =>\n+                           Found := Streaming_Op = TSS_Stream_Read;\n+\n+                        when Name_Write =>\n+                           Found := Streaming_Op = TSS_Stream_Write;\n+\n+                        when Name_Input =>\n+                           Found := Streaming_Op = TSS_Stream_Input;\n+\n+                        when Name_Output =>\n+                           Found := Streaming_Op = TSS_Stream_Output;\n+\n+                        when others =>\n+                           null;\n+                     end case;\n+                  end if;\n+\n+                  if Found then\n+                     return Earlier_In_Extended_Unit (Btyp, Real_Rep);\n+                  end if;\n+\n+                  Next_Rep_Item (Rep_Item);\n+               end loop;\n+            end;\n+         end if;\n+      end if;\n+      return False;\n+   end Derivation_Too_Early_To_Inherit;\n+\n    -------------------------\n    -- Designate_Same_Unit --\n    -------------------------"}, {"sha": "bcc7fd7271a161aa8aa92c1157c1a559e3369b16", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29f2d76c65e175e18305b92f56be40c2266e9c78/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=29f2d76c65e175e18305b92f56be40c2266e9c78", "patch": "@@ -665,6 +665,14 @@ package Sem_Util is\n    --  indication or a scalar subtype where one of the bounds is a\n    --  discriminant.\n \n+   function Derivation_Too_Early_To_Inherit\n+     (Typ : Entity_Id; Streaming_Op : TSS_Name_Type) return Boolean;\n+   --  Returns True if Typ is a derived type, the given Streaming_Op\n+   --  (one of Read, Write, Input, or Output) is explicitly specified\n+   --  for Typ's parent type, and that attribute specification is *not*\n+   --  inherited by Typ because the declaration of Typ precedes that\n+   --  of the attribute specification.\n+\n    function Designate_Same_Unit\n      (Name1 : Node_Id;\n       Name2 : Node_Id) return  Boolean;"}]}