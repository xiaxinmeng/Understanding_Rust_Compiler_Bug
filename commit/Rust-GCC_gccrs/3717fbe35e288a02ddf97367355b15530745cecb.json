{"sha": "3717fbe35e288a02ddf97367355b15530745cecb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcxN2ZiZTM1ZTI4OGEwMmRkZjk3MzY3MzU1YjE1NTMwNzQ1Y2VjYg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-07-19T13:05:35Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-07-19T13:05:35Z"}, "message": "Add v2di support for nvptx\n\n2017-07-19  Tom de Vries  <tom@codesourcery.com>\n\n\t* config/nvptx/nvptx-modes.def: Add V2DImode.\n\t* config/nvptx/nvptx-protos.h (nvptx_data_alignment): Declare.\n\t* config/nvptx/nvptx.c (nvptx_ptx_type_from_mode): Handle V2DImode.\n\t(nvptx_output_mov_insn): Handle lack of mov.b128.\n\t(nvptx_print_operand): Handle 'H' and 'L' codes.\n\t(nvptx_vector_mode_supported): Allow V2DImode.\n\t(nvptx_preferred_simd_mode): New function.\n\t(nvptx_data_alignment): New function.\n\t(TARGET_VECTORIZE_PREFERRED_SIMD_MODE): Redefine to\n\tnvptx_preferred_simd_mode.\n\t* config/nvptx/nvptx.h (STACK_BOUNDARY, BIGGEST_ALIGNMENT): Change from\n\t64 to 128 bits.\n\t(DATA_ALIGNMENT): Define.  Set to nvptx_data_alignment.\n\n\t* config/nvptx/nvptx.md (VECIM): Add V2DI.\n\n\t* gcc.target/nvptx/decl-init.c: Update alignment.\n\t* gcc.target/nvptx/slp-2-run.c: New test.\n\t* gcc.target/nvptx/slp-2.c: New test.\n\t* gcc.target/nvptx/v2di.c: New test.\n\n\t* testsuite/libgomp.oacc-c/vec.c: New test.\n\nFrom-SVN: r250341", "tree": {"sha": "62be9cc7eb642cfb779faad19c47eb9021e2f1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62be9cc7eb642cfb779faad19c47eb9021e2f1fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3717fbe35e288a02ddf97367355b15530745cecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3717fbe35e288a02ddf97367355b15530745cecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3717fbe35e288a02ddf97367355b15530745cecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3717fbe35e288a02ddf97367355b15530745cecb/comments", "author": null, "committer": null, "parents": [{"sha": "b98b34b708e321a292886e2dd368223d32a60e86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98b34b708e321a292886e2dd368223d32a60e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98b34b708e321a292886e2dd368223d32a60e86"}], "stats": {"total": 220, "additions": 214, "deletions": 6}, "files": [{"sha": "bdd1234ac8138cf3d7ee0a54602288e60b077f93", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -1,3 +1,23 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/nvptx/nvptx.md (VECIM): Add V2DI.\n+\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/nvptx/nvptx-modes.def: Add V2DImode.\n+\t* config/nvptx/nvptx-protos.h (nvptx_data_alignment): Declare.\n+\t* config/nvptx/nvptx.c (nvptx_ptx_type_from_mode): Handle V2DImode.\n+\t(nvptx_output_mov_insn): Handle lack of mov.b128.\n+\t(nvptx_print_operand): Handle 'H' and 'L' codes.\n+\t(nvptx_vector_mode_supported): Allow V2DImode.\n+\t(nvptx_preferred_simd_mode): New function.\n+\t(nvptx_data_alignment): New function.\n+\t(TARGET_VECTORIZE_PREFERRED_SIMD_MODE): Redefine to\n+\tnvptx_preferred_simd_mode.\n+\t* config/nvptx/nvptx.h (STACK_BOUNDARY, BIGGEST_ALIGNMENT): Change from\n+\t64 to 128 bits.\n+\t(DATA_ALIGNMENT): Define.  Set to nvptx_data_alignment.\n+\n 2017-07-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* config/nvptx/nvptx-modes.def: New file.  Add V2SImode."}, {"sha": "ff61b363e627c8047cc150a51147671efd142a57", "filename": "gcc/config/nvptx/nvptx-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -1 +1,3 @@\n VECTOR_MODE (INT, SI, 2);  /* V2SI */\n+\n+VECTOR_MODE (INT, DI, 2);  /* V2DI */"}, {"sha": "c3e3b84588bc4a6ddfac241d2d04404a080713c3", "filename": "gcc/config/nvptx/nvptx-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-protos.h?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -41,6 +41,7 @@ extern void nvptx_function_end (FILE *);\n extern void nvptx_output_skip (FILE *, unsigned HOST_WIDE_INT);\n extern void nvptx_output_ascii (FILE *, const char *, unsigned HOST_WIDE_INT);\n extern void nvptx_register_pragmas (void);\n+extern unsigned int nvptx_data_alignment (const_tree, unsigned int);\n \n #ifdef RTX_CODE\n extern void nvptx_expand_oacc_fork (unsigned);"}, {"sha": "d0aa054c71302a6692eb4d2753490d748dc4cf7c", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -238,6 +238,8 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n \n     case V2SImode:\n       return \".v2.u32\";\n+    case V2DImode:\n+      return \".v2.u64\";\n \n     default:\n       gcc_unreachable ();\n@@ -2183,7 +2185,20 @@ nvptx_output_mov_insn (rtx dst, rtx src)\n \t    ? \"%.\\tmov%t0\\t%0, %1;\" : \"%.\\tmov.b%T0\\t%0, %1;\");\n \n   if (GET_MODE_SIZE (dst_inner) == GET_MODE_SIZE (src_inner))\n-    return \"%.\\tmov.b%T0\\t%0, %1;\";\n+    {\n+      if (GET_MODE_BITSIZE (dst_mode) == 128\n+\t  && GET_MODE_BITSIZE (GET_MODE (src)) == 128)\n+\t{\n+\t  /* mov.b128 is not supported.  */\n+\t  if (dst_inner == V2DImode && src_inner == TImode)\n+\t    return \"%.\\tmov.u64\\t%0.x, %L1;\\n\\t%.\\tmov.u64\\t%0.y, %H1;\";\n+\t  else if (dst_inner == TImode && src_inner == V2DImode)\n+\t    return \"%.\\tmov.u64\\t%L0, %1.x;\\n\\t%.\\tmov.u64\\t%H0, %1.y;\";\n+\n+\t  gcc_unreachable ();\n+\t}\n+      return \"%.\\tmov.b%T0\\t%0, %1;\";\n+    }\n \n   return \"%.\\tcvt%t0%t1\\t%0, %1;\";\n }\n@@ -2421,6 +2436,20 @@ nvptx_print_operand (FILE *file, rtx x, int code)\n       fprintf (file, \"%s\", nvptx_ptx_type_from_mode (mode, code == 't'));\n       break;\n \n+    case 'H':\n+    case 'L':\n+      {\n+\trtx inner_x = SUBREG_REG (x);\n+\tmachine_mode inner_mode = GET_MODE (inner_x);\n+\tmachine_mode split = maybe_split_mode (inner_mode);\n+\n+\toutput_reg (file, REGNO (inner_x), split,\n+\t\t    (code == 'H'\n+\t\t     ? GET_MODE_SIZE (inner_mode) / 2\n+\t\t     : 0));\n+      }\n+      break;\n+\n     case 'S':\n       {\n \tnvptx_shuffle_kind kind = (nvptx_shuffle_kind) UINTVAL (x);\n@@ -5439,7 +5468,38 @@ nvptx_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED,\n static bool\n nvptx_vector_mode_supported (machine_mode mode)\n {\n-  return mode == V2SImode;\n+  return (mode == V2SImode\n+\t  || mode == V2DImode);\n+}\n+\n+/* Return the preferred mode for vectorizing scalar MODE.  */\n+\n+static machine_mode\n+nvptx_preferred_simd_mode (machine_mode mode)\n+{\n+  switch (mode)\n+    {\n+    case DImode:\n+      return V2DImode;\n+    case SImode:\n+      return V2SImode;\n+\n+    default:\n+      return default_preferred_simd_mode (mode);\n+    }\n+}\n+\n+unsigned int\n+nvptx_data_alignment (const_tree type, unsigned int basic_align)\n+{\n+  if (TREE_CODE (type) == INTEGER_TYPE)\n+    {\n+      unsigned HOST_WIDE_INT size = tree_to_uhwi (TYPE_SIZE_UNIT (type));\n+      if (size == GET_MODE_SIZE (TImode))\n+\treturn GET_MODE_BITSIZE (maybe_split_mode (TImode));\n+    }\n+\n+  return basic_align;\n }\n \n #undef TARGET_OPTION_OVERRIDE\n@@ -5562,6 +5622,10 @@ nvptx_vector_mode_supported (machine_mode mode)\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P nvptx_vector_mode_supported\n \n+#undef TARGET_VECTORIZE_PREFERRED_SIMD_MODE\n+#define TARGET_VECTORIZE_PREFERRED_SIMD_MODE \\\n+    nvptx_preferred_simd_mode\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nvptx.h\""}, {"sha": "4224acf26e28534c67e41d0c714fc43601049c35", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -52,13 +52,15 @@\n \n /* Alignments in bits.  */\n #define PARM_BOUNDARY 32\n-#define STACK_BOUNDARY 64\n+#define STACK_BOUNDARY 128\n #define FUNCTION_BOUNDARY 32\n-#define BIGGEST_ALIGNMENT 64\n+#define BIGGEST_ALIGNMENT 128\n #define STRICT_ALIGNMENT 1\n \n #define MAX_STACK_ALIGNMENT (1024 * 8)\n \n+#define DATA_ALIGNMENT nvptx_data_alignment\n+\n /* Copied from elf.h and other places.  We'd otherwise use\n    BIGGEST_ALIGNMENT and fail a number of testcases.  */\n #define MAX_OFILE_ALIGNMENT (32768 * 8)"}, {"sha": "41a24b31edd8e633d59ba802c28a3dfd9549c059", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -184,7 +184,7 @@\n (define_mode_iterator SDCM [SC DC])\n (define_mode_iterator BITS [SI SF])\n (define_mode_iterator BITD [DI DF])\n-(define_mode_iterator VECIM [V2SI])\n+(define_mode_iterator VECIM [V2SI V2DI])\n \n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match."}, {"sha": "e0526a5c49c56928888432768e4daff786a9a10f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -1,3 +1,10 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/nvptx/decl-init.c: Update alignment.\n+\t* gcc.target/nvptx/slp-2-run.c: New test.\n+\t* gcc.target/nvptx/slp-2.c: New test.\n+\t* gcc.target/nvptx/v2di.c: New test.\n+\n 2017-07-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.target/nvptx/slp-run.c: New test."}, {"sha": "23008fb209c1365ef32406c475a57094fe459774", "filename": "gcc/testsuite/gcc.target/nvptx/decl-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fdecl-init.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -37,7 +37,7 @@ struct five five2[2] = {{12, 13}, {14, 15}};\n /* { dg-final { scan-assembler \".align 1 .u8 five2\\\\\\[10\\\\\\] = { 12, 13, 0, 0, 0, 14, 15, 0, 0, 0 };\" } } */\n \n int __attribute__((vector_size(16))) vi = {16, 17, 18, 19};\n-/* { dg-final { scan-assembler \".align 8 .u32 vi\\\\\\[4\\\\\\] = { 16, 17, 18, 19 };\" } } */\n+/* { dg-final { scan-assembler \".align 16 .u32 vi\\\\\\[4\\\\\\] = { 16, 17, 18, 19 };\" } } */\n \n typedef int __attribute ((mode(TI))) ti_t;\n "}, {"sha": "f9841a6b11ac3818da033c7de40fe0acdfb45016", "filename": "gcc/testsuite/gcc.target/nvptx/slp-2-run.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2-run.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize\" } */\n+\n+#include \"slp-2.c\"\n+\n+int\n+main(void)\n+{\n+  unsigned int i;\n+  for (i = 0; i < 1000; i += 1)\n+    {\n+      p[i] = i;\n+      p2[i] = 0;\n+    }\n+\n+  foo ();\n+\n+  for (i = 0; i < 1000; i += 1)\n+    if (p2[i] != i)\n+      return 1;\n+\n+  return 0;\n+}"}, {"sha": "66394918d63003120154e7ffea19005b10b590d0", "filename": "gcc/testsuite/gcc.target/nvptx/slp-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-2.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize -save-temps\" } */\n+\n+long long int p[1000] __attribute__((aligned(16)));\n+long long int p2[1000] __attribute__((aligned(16)));\n+\n+void __attribute__((noinline, noclone))\n+foo ()\n+{\n+  long long int a, b;\n+\n+  unsigned int i;\n+  for (i = 0; i < 1000; i += 2)\n+    {\n+      a = p[i];\n+      b = p[i+1];\n+\n+      p2[i] = a;\n+      p2[i+1] = b;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"ld.v2.u64\" } } */\n+/* { dg-final { scan-assembler \"st.v2.u64\" } } */\n+"}, {"sha": "f63ad35d8165b68740daa8869b623009d05729b8", "filename": "gcc/testsuite/gcc.target/nvptx/v2di.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2di.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2di.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2di.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+typedef long long int __v2di __attribute__((__vector_size__(16)));\n+\n+#define TYPE __v2di\n+#include \"vec.inc\"\n+\n+/* { dg-final { scan-assembler \".reg\\\\.v2\\\\.u64\" } } */\n+/* { dg-final { scan-assembler \"ld\\\\.v2\\\\.u64\" } } */\n+/* { dg-final { scan-assembler \"st\\\\.v2\\\\.u64\" } } */\n+/* { dg-final { scan-assembler \"mov\\\\.v2\\\\.u64.*\\\\{ 1, 2 \\\\}\" } } */"}, {"sha": "187f5a3e356da52ecbad41542311c8fd613c43ed", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -1,3 +1,7 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-c/vec.c: New test.\n+\n 2017-07-03  Tom de Vries  <tom@codesourcery.com>\n \n \t* plugin/plugin-hsa.c: Fix secure_getenv.h include."}, {"sha": "79c1c175fe611891fe9384670b452b57bedaf1b6", "filename": "libgomp/testsuite/libgomp.oacc-c/vec.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3717fbe35e288a02ddf97367355b15530745cecb/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3717fbe35e288a02ddf97367355b15530745cecb/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fvec.c?ref=3717fbe35e288a02ddf97367355b15530745cecb", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } { \"\" } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-DACC_MEM_SHARED=0\" } } */\n+/* { dg-additional-options \"-std=c99 -ftree-slp-vectorize -foffload=-ftree-slp-vectorize -foffload=-fdump-tree-slp1 -foffload=-save-temps -save-temps\" } */\n+\n+#include <stdio.h>\n+#include <sys/time.h>\n+\n+long long int p[32 *1000] __attribute__((aligned(16)));\n+long long int p2[32 *1000] __attribute__((aligned(16)));\n+\n+int\n+main (void)\n+{\n+#pragma acc parallel num_gangs(1) num_workers(1) vector_length(32)\n+  {\n+    if (((unsigned long int)p & (0xfULL)) != 0)\n+      __builtin_abort ();\n+    if (((unsigned long int)p2 & (0xfULL)) != 0)\n+      __builtin_abort ();\n+\n+    for (unsigned int k = 0; k < 10000; k += 1)\n+      {\n+#pragma acc loop vector\n+\tfor (unsigned long long int j = 0; j < 32; j += 1)\n+\t  {\n+\t    unsigned long long a, b;\n+\t    unsigned long long *p3, *p4;\n+\t    p3 = (unsigned long long *)((unsigned long long int)p & (~0xfULL));\n+\t    p4 = (unsigned long long *)((unsigned long long int)p2 & (~0xfULL));\n+\n+\t    for (unsigned int i = 0; i < 1000; i += 2)\n+\t      {\n+\t\ta = p3[j * 1000 + i];\n+\t\tb = p3[j * 1000 + i + 1];\n+\t\t\n+\t\tp4[j * 1000 + i] = a;\n+\t\tp4[j * 1000 + i + 1] = b;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  return 0;\n+}\n+\n+/* Todo: make a scan-tree-dump variant that scans vec.o instead.  */\n+/* { dg-final { file copy -force [glob vec.o.*] [regsub \\.o\\. [glob vec.o.*] \\.c\\.] } } */\n+/* { dg-final { scan-tree-dump \"vector\\\\(2\\\\) long long unsigned int\" \"slp1\" } } */"}]}