{"sha": "06ab59dfa0a756ffa178714e54c91835aa484f0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZhYjU5ZGZhMGE3NTZmZmExNzg3MTRlNTRjOTE4MzVhYTQ4NGYwYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-02-11T22:47:30Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchell@gcc.gnu.org", "date": "1998-02-11T22:47:30Z"}, "message": "tree.c (is_overloaded_fn): Use really_overloaded_fn.\n\n\t* tree.c (is_overloaded_fn): Use really_overloaded_fn.\n\t(really_overloaded_fn): Move check here from is_overloaded_fn.\n\t(get_first_fn): Use really_overloaded_fn and is_overloaded_fn.\n\nFrom-SVN: r17863", "tree": {"sha": "14f8e3fb29ce4d25f41901d540f98927afbec181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14f8e3fb29ce4d25f41901d540f98927afbec181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06ab59dfa0a756ffa178714e54c91835aa484f0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ab59dfa0a756ffa178714e54c91835aa484f0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06ab59dfa0a756ffa178714e54c91835aa484f0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06ab59dfa0a756ffa178714e54c91835aa484f0c/comments", "author": null, "committer": null, "parents": [{"sha": "cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc1e5b9ab37880e07285b4a23add86954f1cf0b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc1e5b9ab37880e07285b4a23add86954f1cf0b3"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "8534f1ae0c596cbf1555bb4d8e1386c59007b682", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ab59dfa0a756ffa178714e54c91835aa484f0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ab59dfa0a756ffa178714e54c91835aa484f0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=06ab59dfa0a756ffa178714e54c91835aa484f0c", "patch": "@@ -1,3 +1,9 @@\n+Wed Feb 11 16:42:04 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* tree.c (is_overloaded_fn): Use really_overloaded_fn.\n+\t(really_overloaded_fn): Move check here from is_overloaded_fn. \n+\t(get_first_fn): Use really_overloaded_fn and is_overloaded_fn.\n+\n Mon Feb  9 22:23:31 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* cp-tree.h (push_template_decl): Return the decl passed in, or an"}, {"sha": "1bd60f177b52ce01bc397346ab60f83a20ffffb6", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06ab59dfa0a756ffa178714e54c91835aa484f0c/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06ab59dfa0a756ffa178714e54c91835aa484f0c/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=06ab59dfa0a756ffa178714e54c91835aa484f0c", "patch": "@@ -1299,39 +1299,31 @@ int\n is_overloaded_fn (x)\n      tree x;\n {\n-  if (TREE_CODE (x) == FUNCTION_DECL\n-      || TREE_CODE (x) == TEMPLATE_ID_EXPR\n-      || DECL_FUNCTION_TEMPLATE_P (x))\n-    return 1;\n-\n-  if (TREE_CODE (x) == TREE_LIST\n-      && (TREE_CODE (TREE_VALUE (x)) == FUNCTION_DECL\n-\t  || DECL_FUNCTION_TEMPLATE_P (TREE_VALUE (x))))\n-    return 1;\n-\n-  return 0;\n+  return (TREE_CODE (x) == FUNCTION_DECL\n+\t  || TREE_CODE (x) == TEMPLATE_ID_EXPR\n+\t  || DECL_FUNCTION_TEMPLATE_P (x)\n+\t  || really_overloaded_fn (x));\n }\n \n int\n really_overloaded_fn (x)\n      tree x;\n {     \n-  return TREE_CODE (x) != FUNCTION_DECL \n-    && is_overloaded_fn (x);\n+  return (TREE_CODE (x) == TREE_LIST\n+\t  && (TREE_CODE (TREE_VALUE (x)) == FUNCTION_DECL\n+\t      || DECL_FUNCTION_TEMPLATE_P (TREE_VALUE (x))));\n }\n \n tree\n get_first_fn (from)\n      tree from;\n {\n-  if (TREE_CODE (from) == FUNCTION_DECL\n-      || TREE_CODE (from) == TEMPLATE_ID_EXPR\n-      || DECL_FUNCTION_TEMPLATE_P (from))\n-    return from;\n+  my_friendly_assert (is_overloaded_fn (from), 9);\n \n-  my_friendly_assert (TREE_CODE (from) == TREE_LIST, 9);\n-  \n-  return TREE_VALUE (from);\n+  if (really_overloaded_fn (from))\n+    return TREE_VALUE (from);\n+  else\n+    return from;\n }\n \n int"}]}