{"sha": "e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI1MGYwZGNmZTNjYWVjYWFmOTBmY2IxYTgzMzdkYWVlOTc0YjE2Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-01T18:47:31Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-01T18:47:31Z"}, "message": "PR jit/64018: Add description of error-handling to the JIT tutorial\n\ngcc/jit/ChangeLog:\n\tPR jit/64018\n\t* docs/intro/tutorial02.rst: Spell out lifetime of generated code.\n\tAdd description of error-handling, taken in part from...\n\t* docs/topics/contexts.rst (Error-handling): Expand, and move some\n\tcontent to tutorial02.rst.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\nFrom-SVN: r218243", "tree": {"sha": "d583c5ca073ad2a65202c79023bbc98764b8c063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d583c5ca073ad2a65202c79023bbc98764b8c063"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9838117b0d6537073d830006db15bc981749da97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9838117b0d6537073d830006db15bc981749da97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9838117b0d6537073d830006db15bc981749da97"}], "stats": {"total": 626, "additions": 373, "deletions": 253}, "files": [{"sha": "7dd84f08e17f26662825738c4322fdeb66508468", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "patch": "@@ -1,3 +1,12 @@\n+2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/64018\n+\t* docs/intro/tutorial02.rst: Spell out lifetime of generated code.\n+\tAdd description of error-handling, taken in part from...\n+\t* docs/topics/contexts.rst (Error-handling): Expand, and move some\n+\tcontent to tutorial02.rst.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2014-12-01  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/64020"}, {"sha": "641b556e0694a5d4ac0a0614fb0739e049b6e9fd", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 309, "deletions": 248, "changes": 557, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "patch": "@@ -101,6 +101,7 @@ Tutorial\n \n Tutorial part 2: Creating a trivial machine code function\n \n+* Error-handling:: \n * Options:: \n * Full example:: \n \n@@ -143,7 +144,7 @@ Compilation contexts\n \n * Lifetime-management:: \n * Thread-safety:: \n-* Error-handling:: \n+* Error-handling: Error-handling<2>. \n * Debugging:: \n * Options: Options<2>. \n \n@@ -661,25 +662,72 @@ result: 25\n \n @noindent\n \n+Once we're done with the code, we can release the result:\n+\n+@example\n+gcc_jit_result_release (result);\n+@end example\n+\n+@noindent\n+\n+We can't call @code{square} anymore once we've released @code{result}.\n+\n @menu\n+* Error-handling:: \n * Options:: \n * Full example:: \n \n @end menu\n \n-@node Options,Full example,,Tutorial part 2 Creating a trivial machine code function\n-@anchor{intro/tutorial02 options}@anchor{18}\n+@node Error-handling,Options,,Tutorial part 2 Creating a trivial machine code function\n+@anchor{intro/tutorial02 error-handling}@anchor{18}\n+@subsection Error-handling\n+\n+\n+Various kinds of errors are possible when using the API, such as\n+mismatched types in an assignment.  You can only compile and get code\n+from a context if no errors occur.\n+\n+Errors are printed on stderr; they typically contain the name of the API\n+entrypoint where the error occurred, and pertinent information on the\n+problem:\n+\n+@example\n+./buggy-program: error: gcc_jit_block_add_assignment: mismatching types: assignment to i (type: int) from \"hello world\" (type: const char *)\n+@end example\n+\n+@noindent\n+\n+The API is designed to cope with errors without crashing, so you can get\n+away with having a single error-handling check in your code:\n+\n+@example\n+void *fn_ptr = gcc_jit_result_get_code (result, \"square\");\n+if (!fn_ptr)\n+  @{\n+    fprintf (stderr, \"NULL fn_ptr\");\n+    goto error;\n+  @}\n+@end example\n+\n+@noindent\n+\n+For more information, see the @pxref{19,,error-handling guide}\n+within the Topic eference.\n+\n+@node Options,Full example,Error-handling,Tutorial part 2 Creating a trivial machine code function\n+@anchor{intro/tutorial02 options}@anchor{1a}\n @subsection Options\n \n \n To get more information on what's going on, you can set debugging flags\n-on the context using @pxref{19,,gcc_jit_context_set_bool_option()}.\n+on the context using @pxref{1b,,gcc_jit_context_set_bool_option()}.\n \n @c (I'm deliberately not mentioning\n @c :c:macro:`GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE` here since I think\n @c it's probably more of use to implementors than to users)\n \n-Setting @pxref{1a,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE} will dump a\n+Setting @pxref{1c,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE} will dump a\n C-like representation to stderr when you compile (GCC's \"GIMPLE\"\n representation):\n \n@@ -707,7 +755,7 @@ square (signed int i)\n @noindent\n \n We can see the generated machine code in assembler form (on stderr) by\n-setting @pxref{1b,,GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE} on the context\n+setting @pxref{1d,,GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE} on the context\n before compiling:\n \n @example\n@@ -751,8 +799,8 @@ square:\n \n By default, no optimizations are performed, the equivalent of GCC's\n @cite{-O0} option.  We can turn things up to e.g. @cite{-O3} by calling\n-@pxref{1c,,gcc_jit_context_set_int_option()} with\n-@pxref{1d,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n+@pxref{1e,,gcc_jit_context_set_int_option()} with\n+@pxref{1f,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n \n @example\n gcc_jit_context_set_int_option (\n@@ -788,7 +836,7 @@ square:\n Naturally this has only a small effect on such a trivial function.\n \n @node Full example,,Options,Tutorial part 2 Creating a trivial machine code function\n-@anchor{intro/tutorial02 full-example}@anchor{1e}\n+@anchor{intro/tutorial02 full-example}@anchor{20}\n @subsection Full example\n \n \n@@ -943,7 +991,7 @@ result: 25\n @c <http://www.gnu.org/licenses/>.\n \n @node Tutorial part 3 Loops and variables,Tutorial part 4 Adding JIT-compilation to a toy interpreter,Tutorial part 2 Creating a trivial machine code function,Tutorial\n-@anchor{intro/tutorial03 tutorial-part-3-loops-and-variables}@anchor{1f}@anchor{intro/tutorial03 doc}@anchor{20}\n+@anchor{intro/tutorial03 tutorial-part-3-loops-and-variables}@anchor{21}@anchor{intro/tutorial03 doc}@anchor{22}\n @section Tutorial part 3: Loops and variables\n \n \n@@ -1060,7 +1108,7 @@ gcc_jit_function *func =\n @end menu\n \n @node Expressions lvalues and rvalues,Control flow,,Tutorial part 3 Loops and variables\n-@anchor{intro/tutorial03 expressions-lvalues-and-rvalues}@anchor{21}\n+@anchor{intro/tutorial03 expressions-lvalues-and-rvalues}@anchor{23}\n @subsection Expressions: lvalues and rvalues\n \n \n@@ -1070,8 +1118,8 @@ an assignment: a value that can be computed somehow, and assigned\n @emph{to} a storage area (such as a variable).  It has a specific\n @pxref{a,,gcc_jit_type *}.\n \n-Anothe important class is @pxref{22,,gcc_jit_lvalue *}.\n-A @pxref{22,,gcc_jit_lvalue *}. is something that can of the @emph{left}-hand\n+Anothe important class is @pxref{24,,gcc_jit_lvalue *}.\n+A @pxref{24,,gcc_jit_lvalue *}. is something that can of the @emph{left}-hand\n side of an assignment: a storage area (such as a variable).\n \n In other words, every assignment can be thought of as:\n@@ -1082,7 +1130,7 @@ LVALUE = RVALUE;\n \n @noindent\n \n-Note that @pxref{22,,gcc_jit_lvalue *} is a subclass of\n+Note that @pxref{24,,gcc_jit_lvalue *} is a subclass of\n @pxref{13,,gcc_jit_rvalue *}, where in an assignment of the form:\n \n @example\n@@ -1109,13 +1157,13 @@ gcc_jit_rvalue *expr =\n \n which is a @pxref{13,,gcc_jit_rvalue *}, and the various function\n parameters: @cite{param_i} and @cite{param_n}, instances of\n-@pxref{23,,gcc_jit_param *}, which is a subclass of\n-@pxref{22,,gcc_jit_lvalue *} (and, in turn, of @pxref{13,,gcc_jit_rvalue *}):\n+@pxref{25,,gcc_jit_param *}, which is a subclass of\n+@pxref{24,,gcc_jit_lvalue *} (and, in turn, of @pxref{13,,gcc_jit_rvalue *}):\n we can both read from and write to function parameters within the\n body of a function.\n \n Our new example has a couple of local variables.  We create them by\n-calling @pxref{24,,gcc_jit_function_new_local()}, supplying a type and a\n+calling @pxref{26,,gcc_jit_function_new_local()}, supplying a type and a\n name:\n \n @example\n@@ -1128,7 +1176,7 @@ gcc_jit_lvalue *sum =\n \n @noindent\n \n-These are instances of @pxref{22,,gcc_jit_lvalue *} - they can be read from\n+These are instances of @pxref{24,,gcc_jit_lvalue *} - they can be read from\n and written to.\n \n Note that there is no precanned way to create @emph{and} initialize a variable\n@@ -1144,7 +1192,7 @@ Instead, having added the local to the function, we have to separately add\n an assignment of @cite{0} to @cite{local_i} at the beginning of the function.\n \n @node Control flow,Visualizing the control flow graph,Expressions lvalues and rvalues,Tutorial part 3 Loops and variables\n-@anchor{intro/tutorial03 control-flow}@anchor{25}\n+@anchor{intro/tutorial03 control-flow}@anchor{27}\n @subsection Control flow\n \n \n@@ -1167,8 +1215,8 @@ the body of the loop\n after the loop terminates (@cite{return sum})\n @end enumerate\n \n-so we create these as @pxref{26,,gcc_jit_block *} instances within the\n-@pxref{27,,gcc_jit_function *}:\n+so we create these as @pxref{28,,gcc_jit_block *} instances within the\n+@pxref{29,,gcc_jit_function *}:\n \n @example\n gcc_jit_block *b_initial =\n@@ -1187,8 +1235,8 @@ We now populate each block with statements.\n \n The entry block @cite{b_initial} consists of initializations followed by a jump\n to the conditional.  We assign @cite{0} to @cite{i} and to @cite{sum}, using\n-@pxref{28,,gcc_jit_block_add_assignment()} to add\n-an assignment statement, and using @pxref{29,,gcc_jit_context_zero()} to get\n+@pxref{2a,,gcc_jit_block_add_assignment()} to add\n+an assignment statement, and using @pxref{2b,,gcc_jit_context_zero()} to get\n the constant value @cite{0} for the relevant type for the right-hand side of\n the assignment:\n \n@@ -1220,7 +1268,7 @@ The conditional block is equivalent to the line @cite{while (i < n)} from our\n C example. It contains a single statement: a conditional, which jumps to\n one of two destination blocks depending on a boolean\n @pxref{13,,gcc_jit_rvalue *}, in this case the comparison of @cite{i} and @cite{n}.\n-We build the comparison using @pxref{2a,,gcc_jit_context_new_comparison()}:\n+We build the comparison using @pxref{2c,,gcc_jit_context_new_comparison()}:\n \n @example\n gcc_jit_rvalue *guard =\n@@ -1234,7 +1282,7 @@ gcc_jit_rvalue *guard =\n @noindent\n \n and can then use this to add @cite{b_loop_cond}'s sole statement, via\n-@pxref{2b,,gcc_jit_block_end_with_conditional()}:\n+@pxref{2d,,gcc_jit_block_end_with_conditional()}:\n \n @example\n gcc_jit_block_end_with_conditional (b_loop_cond, NULL, guard);\n@@ -1246,7 +1294,7 @@ Next, we populate the body of the loop.\n \n The C statement @cite{sum += i * i;} is an assignment operation, where an\n lvalue is modified \"in-place\".  We use\n-@pxref{2c,,gcc_jit_block_add_assignment_op()} to handle these operations:\n+@pxref{2e,,gcc_jit_block_add_assignment_op()} to handle these operations:\n \n @example\n /* sum += i * i */\n@@ -1264,7 +1312,7 @@ gcc_jit_block_add_assignment_op (\n @noindent\n \n The @cite{i++} can be thought of as @cite{i += 1}, and can thus be handled in\n-a similar way.  We use @pxref{2d,,gcc_jit_context_one()} to get the constant\n+a similar way.  We use @pxref{2f,,gcc_jit_context_one()} to get the constant\n value @cite{1} (for the relevant type) for the right-hand side\n of the assignment.\n \n@@ -1282,8 +1330,8 @@ gcc_jit_block_add_assignment_op (\n @cartouche\n @quotation Note \n For numeric constants other than 0 or 1, we could use\n-@pxref{2e,,gcc_jit_context_new_rvalue_from_int()} and\n-@pxref{2f,,gcc_jit_context_new_rvalue_from_double()}.\n+@pxref{30,,gcc_jit_context_new_rvalue_from_int()} and\n+@pxref{31,,gcc_jit_context_new_rvalue_from_double()}.\n @end quotation\n @end cartouche\n \n@@ -1349,12 +1397,12 @@ result: 285\n @noindent\n \n @node Visualizing the control flow graph,Full example<2>,Control flow,Tutorial part 3 Loops and variables\n-@anchor{intro/tutorial03 visualizing-the-control-flow-graph}@anchor{30}\n+@anchor{intro/tutorial03 visualizing-the-control-flow-graph}@anchor{32}\n @subsection Visualizing the control flow graph\n \n \n You can see the control flow graph of a function using\n-@pxref{31,,gcc_jit_function_dump_to_dot()}:\n+@pxref{33,,gcc_jit_function_dump_to_dot()}:\n \n @example\n gcc_jit_function_dump_to_dot (func, \"/tmp/sum-of-squares.dot\");\n@@ -1388,7 +1436,7 @@ install it with @cite{yum install python-xdot}):\n @end quotation\n \n @node Full example<2>,,Visualizing the control flow graph,Tutorial part 3 Loops and variables\n-@anchor{intro/tutorial03 full-example}@anchor{32}\n+@anchor{intro/tutorial03 full-example}@anchor{34}\n @subsection Full example\n \n \n@@ -1606,7 +1654,7 @@ loop_test returned: 285\n @c <http://www.gnu.org/licenses/>.\n \n @node Tutorial part 4 Adding JIT-compilation to a toy interpreter,,Tutorial part 3 Loops and variables,Tutorial\n-@anchor{intro/tutorial04 tutorial-part-4-adding-jit-compilation-to-a-toy-interpreter}@anchor{33}@anchor{intro/tutorial04 doc}@anchor{34}\n+@anchor{intro/tutorial04 tutorial-part-4-adding-jit-compilation-to-a-toy-interpreter}@anchor{35}@anchor{intro/tutorial04 doc}@anchor{36}\n @section Tutorial part 4: Adding JIT-compilation to a toy interpreter\n \n \n@@ -1628,7 +1676,7 @@ to it.\n @end menu\n \n @node Our toy interpreter,Compiling to machine code,,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 our-toy-interpreter}@anchor{35}\n+@anchor{intro/tutorial04 our-toy-interpreter}@anchor{37}\n @subsection Our toy interpreter\n \n \n@@ -2036,7 +2084,7 @@ toyvm_function_interpret (toyvm_function *fn, int arg, FILE *trace)\n @end quotation\n \n @node Compiling to machine code,Setting things up,Our toy interpreter,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 compiling-to-machine-code}@anchor{36}\n+@anchor{intro/tutorial04 compiling-to-machine-code}@anchor{38}\n @subsection Compiling to machine code\n \n \n@@ -2056,7 +2104,7 @@ typedef int (*toyvm_compiled_code) (int);\n \n The lifetime of the code is tied to that of a @pxref{16,,gcc_jit_result *}.\n We'll handle this by bundling them up in a structure, so that we can\n-clean them up together by calling @pxref{37,,gcc_jit_result_release()}:\n+clean them up together by calling @pxref{39,,gcc_jit_result_release()}:\n \n @quotation\n \n@@ -2138,7 +2186,7 @@ struct compilation_state\n @end quotation\n \n @node Setting things up,Populating the function,Compiling to machine code,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 setting-things-up}@anchor{38}\n+@anchor{intro/tutorial04 setting-things-up}@anchor{3a}\n @subsection Setting things up\n \n \n@@ -2244,7 +2292,7 @@ add_pop (compilation_state *state,\n @end quotation\n \n We will support single-stepping through the generated code in the\n-debugger, so we need to create @pxref{39,,gcc_jit_location} instances, one\n+debugger, so we need to create @pxref{3b,,gcc_jit_location} instances, one\n per operation in the source code.  These will reference the lines of\n e.g. @code{factorial.toy}.\n \n@@ -2315,7 +2363,7 @@ We create the locals within the function.\n @end quotation\n \n @node Populating the function,Verifying the control flow graph,Setting things up,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 populating-the-function}@anchor{3a}\n+@anchor{intro/tutorial04 populating-the-function}@anchor{3c}\n @subsection Populating the function\n \n \n@@ -2447,7 +2495,7 @@ stack into @code{y} instead erroneously assigned it to @code{x}, leaving @code{y\n uninitialized.\n \n To track this kind of thing down, we can use\n-@pxref{3b,,gcc_jit_block_add_comment()} to add descriptive comments\n+@pxref{3d,,gcc_jit_block_add_comment()} to add descriptive comments\n to the internal representation.  This is invaluable when looking through\n the generated IR for, say @code{factorial}:\n \n@@ -2621,14 +2669,14 @@ to the next block.\n This is analogous to simply incrementing the program counter.\n \n @node Verifying the control flow graph,Compiling the context,Populating the function,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 verifying-the-control-flow-graph}@anchor{3c}\n+@anchor{intro/tutorial04 verifying-the-control-flow-graph}@anchor{3e}\n @subsection Verifying the control flow graph\n \n \n Having finished looping over the blocks, the context is complete.\n \n As before, we can verify that the control flow and statements are sane by\n-using @pxref{31,,gcc_jit_function_dump_to_dot()}:\n+using @pxref{33,,gcc_jit_function_dump_to_dot()}:\n \n @example\n gcc_jit_function_dump_to_dot (state.fn, \"/tmp/factorial.dot\");\n@@ -2652,7 +2700,7 @@ errors in our compiler.\n @end quotation\n \n @node Compiling the context,Single-stepping through the generated code,Verifying the control flow graph,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 compiling-the-context}@anchor{3d}\n+@anchor{intro/tutorial04 compiling-the-context}@anchor{3f}\n @subsection Compiling the context\n \n \n@@ -2854,7 +2902,7 @@ We can now run the result:\n @end quotation\n \n @node Single-stepping through the generated code,Examining the generated code,Compiling the context,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 single-stepping-through-the-generated-code}@anchor{3e}\n+@anchor{intro/tutorial04 single-stepping-through-the-generated-code}@anchor{40}\n @subsection Single-stepping through the generated code\n \n \n@@ -2868,14 +2916,14 @@ It's possible to debug the generated code.  To do this we need to both:\n @item \n Set up source code locations for our statements, so that we can\n meaningfully step through the code.  We did this above by\n-calling @pxref{3f,,gcc_jit_context_new_location()} and using the\n+calling @pxref{41,,gcc_jit_context_new_location()} and using the\n results.\n \n @item \n Enable the generation of debugging information, by setting\n-@pxref{40,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n+@pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n @pxref{8,,gcc_jit_context} via\n-@pxref{19,,gcc_jit_context_set_bool_option()}:\n+@pxref{1b,,gcc_jit_context_set_bool_option()}:\n \n @example\n gcc_jit_context_set_bool_option (\n@@ -2950,15 +2998,15 @@ optimization level in a regular compiler.\n @end cartouche\n \n @node Examining the generated code,Putting it all together,Single-stepping through the generated code,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 examining-the-generated-code}@anchor{41}\n+@anchor{intro/tutorial04 examining-the-generated-code}@anchor{43}\n @subsection Examining the generated code\n \n \n How good is the optimized code?\n \n We can turn up optimizations, by calling\n-@pxref{1c,,gcc_jit_context_set_int_option()} with\n-@pxref{1d,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n+@pxref{1e,,gcc_jit_context_set_int_option()} with\n+@pxref{1f,,GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}:\n \n @example\n gcc_jit_context_set_int_option (\n@@ -3150,7 +3198,7 @@ Note that the stack pushing and popping have been eliminated, as has the\n recursive call (in favor of an iteration).\n \n @node Putting it all together,Behind the curtain How does our code get optimized?,Examining the generated code,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 putting-it-all-together}@anchor{42}\n+@anchor{intro/tutorial04 putting-it-all-together}@anchor{44}\n @subsection Putting it all together\n \n \n@@ -3183,7 +3231,7 @@ compiler result: 55\n @noindent\n \n @node Behind the curtain How does our code get optimized?,,Putting it all together,Tutorial part 4 Adding JIT-compilation to a toy interpreter\n-@anchor{intro/tutorial04 behind-the-curtain-how-does-our-code-get-optimized}@anchor{43}\n+@anchor{intro/tutorial04 behind-the-curtain-how-does-our-code-get-optimized}@anchor{45}\n @subsection Behind the curtain: How does our code get optimized?\n \n \n@@ -3281,7 +3329,7 @@ initial:\n @noindent\n \n We can perhaps better see the code by turning off\n-@pxref{40,,GCC_JIT_BOOL_OPTION_DEBUGINFO} to suppress all those @code{DEBUG}\n+@pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} to suppress all those @code{DEBUG}\n statements, giving:\n \n @example\n@@ -3377,7 +3425,7 @@ instr9:\n \n @noindent\n \n-Note in the above how all the @pxref{26,,gcc_jit_block} instances we\n+Note in the above how all the @pxref{28,,gcc_jit_block} instances we\n created have been consolidated into just 3 blocks in GCC's internal\n representation: @code{initial}, @code{instr4} and @code{instr9}.\n \n@@ -3388,7 +3436,7 @@ representation: @code{initial}, @code{instr4} and @code{instr9}.\n @end menu\n \n @node Optimizing away stack manipulation,Elimination of tail recursion,,Behind the curtain How does our code get optimized?\n-@anchor{intro/tutorial04 optimizing-away-stack-manipulation}@anchor{44}\n+@anchor{intro/tutorial04 optimizing-away-stack-manipulation}@anchor{46}\n @subsubsection Optimizing away stack manipulation\n \n \n@@ -3668,7 +3716,7 @@ instr9:\n @noindent\n \n @node Elimination of tail recursion,,Optimizing away stack manipulation,Behind the curtain How does our code get optimized?\n-@anchor{intro/tutorial04 elimination-of-tail-recursion}@anchor{45}\n+@anchor{intro/tutorial04 elimination-of-tail-recursion}@anchor{47}\n @subsubsection Elimination of tail recursion\n \n \n@@ -3755,7 +3803,7 @@ instr9:\n @c <http://www.gnu.org/licenses/>.\n \n @node Topic Reference,Internals,Tutorial,Top\n-@anchor{topics/index doc}@anchor{46}@anchor{topics/index topic-reference}@anchor{47}\n+@anchor{topics/index doc}@anchor{48}@anchor{topics/index topic-reference}@anchor{49}\n @chapter Topic Reference\n \n \n@@ -3789,7 +3837,7 @@ Compilation contexts\n \n * Lifetime-management:: \n * Thread-safety:: \n-* Error-handling:: \n+* Error-handling: Error-handling<2>. \n * Debugging:: \n * Options: Options<2>. \n \n@@ -3839,7 +3887,7 @@ Source Locations\n \n \n @node Compilation contexts,Objects,,Topic Reference\n-@anchor{topics/contexts compilation-contexts}@anchor{48}@anchor{topics/contexts doc}@anchor{49}\n+@anchor{topics/contexts compilation-contexts}@anchor{4a}@anchor{topics/contexts doc}@anchor{4b}\n @section Compilation contexts\n \n \n@@ -3860,14 +3908,14 @@ Invoking @pxref{15,,gcc_jit_context_compile()} on it gives you a\n @menu\n * Lifetime-management:: \n * Thread-safety:: \n-* Error-handling:: \n+* Error-handling: Error-handling<2>. \n * Debugging:: \n * Options: Options<2>. \n \n @end menu\n \n @node Lifetime-management,Thread-safety,,Compilation contexts\n-@anchor{topics/contexts lifetime-management}@anchor{4a}\n+@anchor{topics/contexts lifetime-management}@anchor{4c}\n @subsection Lifetime-management\n \n \n@@ -3904,7 +3952,7 @@ gcc_jit_context_release (ctxt);\n @end deffn\n \n @geindex gcc_jit_context_new_child_context (C function)\n-@anchor{topics/contexts gcc_jit_context_new_child_context}@anchor{4b}\n+@anchor{topics/contexts gcc_jit_context_new_child_context}@anchor{4d}\n @deffn {C Function} gcc_jit_context * gcc_jit_context_new_child_context (gcc_jit_context@w{ }*parent_ctxt)\n \n Given an existing JIT context, create a child context.\n@@ -3935,8 +3983,8 @@ followed, but it's probably not worth going above 2 or 3 levels, and\n there will likely be a performance hit for such nesting.\n @end deffn\n \n-@node Thread-safety,Error-handling,Lifetime-management,Compilation contexts\n-@anchor{topics/contexts thread-safety}@anchor{4c}\n+@node Thread-safety,Error-handling<2>,Lifetime-management,Compilation contexts\n+@anchor{topics/contexts thread-safety}@anchor{4e}\n @subsection Thread-safety\n \n \n@@ -3945,29 +3993,42 @@ Instances of @pxref{e,,gcc_jit_object *} created via\n only one thread may use a given context at once, but multiple threads\n could each have their own contexts without needing locks.\n \n-Contexts created via @pxref{4b,,gcc_jit_context_new_child_context()} are\n+Contexts created via @pxref{4d,,gcc_jit_context_new_child_context()} are\n related to their parent context.  They can be partitioned by their\n ultimate ancestor into independent \"family trees\".   Only one thread\n within a process may use a given \"family tree\" of such contexts at once,\n and if you're using multiple threads you should provide your own locking\n around entire such context partitions.\n \n-@node Error-handling,Debugging,Thread-safety,Compilation contexts\n-@anchor{topics/contexts error-handling}@anchor{4d}\n+@node Error-handling<2>,Debugging,Thread-safety,Compilation contexts\n+@anchor{topics/contexts error-handling}@anchor{19}@anchor{topics/contexts id1}@anchor{4f}\n @subsection Error-handling\n \n \n-You can only compile and get code from a context if no errors occur.\n-\n-In general, if an error occurs when using an API entrypoint, it returns\n-NULL.  You don't have to check everywhere for NULL results, since the\n-API gracefully handles a NULL being passed in for any argument.\n+Various kinds of errors are possible when using the API, such as\n+mismatched types in an assignment.  You can only compile and get code from\n+a context if no errors occur.\n \n Errors are printed on stderr and can be queried using\n-@pxref{4e,,gcc_jit_context_get_first_error()}.\n+@pxref{50,,gcc_jit_context_get_first_error()}.\n+\n+They typically contain the name of the API entrypoint where the error\n+occurred, and pertinent information on the problem:\n+\n+@example\n+./buggy-program: error: gcc_jit_block_add_assignment: mismatching types: assignment to i (type: int) from \"hello world\" (type: const char *)\n+@end example\n+\n+@noindent\n+\n+In general, if an error occurs when using an API entrypoint, the\n+entrypoint returns NULL.  You don't have to check everywhere for NULL\n+results, since the API handles a NULL being passed in for any\n+argument by issuing another error.  This typically leads to a cascade of\n+followup error messages, but is safe (albeit verbose).\n \n @geindex gcc_jit_context_get_first_error (C function)\n-@anchor{topics/contexts gcc_jit_context_get_first_error}@anchor{4e}\n+@anchor{topics/contexts gcc_jit_context_get_first_error}@anchor{50}\n @deffn {C Function} const char *           gcc_jit_context_get_first_error (gcc_jit_context@w{ }*ctxt)\n \n Returns the first error message that occurred on the context.\n@@ -3978,27 +4039,27 @@ context.\n If no errors occurred, this will be NULL.\n @end deffn\n \n-@node Debugging,Options<2>,Error-handling,Compilation contexts\n-@anchor{topics/contexts debugging}@anchor{4f}\n+@node Debugging,Options<2>,Error-handling<2>,Compilation contexts\n+@anchor{topics/contexts debugging}@anchor{51}\n @subsection Debugging\n \n \n @geindex gcc_jit_context_dump_to_file (C function)\n-@anchor{topics/contexts gcc_jit_context_dump_to_file}@anchor{50}\n+@anchor{topics/contexts gcc_jit_context_dump_to_file}@anchor{52}\n @deffn {C Function} void           gcc_jit_context_dump_to_file (gcc_jit_context@w{ }*ctxt, const char@w{ }*path, int@w{ }update_locations)\n \n To help with debugging: dump a C-like representation to the given path,\n describing what's been set up on the context.\n \n-If \"update_locations\" is true, then also set up @pxref{39,,gcc_jit_location}\n+If \"update_locations\" is true, then also set up @pxref{3b,,gcc_jit_location}\n information throughout the context, pointing at the dump file as if it\n were a source file.  This may be of use in conjunction with\n-@pxref{40,,GCC_JIT_BOOL_OPTION_DEBUGINFO} to allow stepping through the\n+@pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} to allow stepping through the\n code in a debugger.\n @end deffn\n \n @node Options<2>,,Debugging,Compilation contexts\n-@anchor{topics/contexts options}@anchor{51}\n+@anchor{topics/contexts options}@anchor{53}\n @subsection Options\n \n \n@@ -4010,25 +4071,25 @@ code in a debugger.\n @end menu\n \n @node String Options,Boolean options,,Options<2>\n-@anchor{topics/contexts string-options}@anchor{52}\n+@anchor{topics/contexts string-options}@anchor{54}\n @subsubsection String Options\n \n \n @geindex gcc_jit_context_set_str_option (C function)\n-@anchor{topics/contexts gcc_jit_context_set_str_option}@anchor{53}\n+@anchor{topics/contexts gcc_jit_context_set_str_option}@anchor{55}\n @deffn {C Function} void gcc_jit_context_set_str_option (gcc_jit_context@w{ }*ctxt, enum gcc_jit_str_option@w{ }opt, const char@w{ }*value)\n \n Set a string option of the context.\n \n @geindex gcc_jit_str_option (C type)\n-@anchor{topics/contexts gcc_jit_str_option}@anchor{54}\n+@anchor{topics/contexts gcc_jit_str_option}@anchor{56}\n @deffn {C Type} enum gcc_jit_str_option\n @end deffn\n \n There is currently just one string option:\n \n @geindex GCC_JIT_STR_OPTION_PROGNAME (C macro)\n-@anchor{topics/contexts GCC_JIT_STR_OPTION_PROGNAME}@anchor{55}\n+@anchor{topics/contexts GCC_JIT_STR_OPTION_PROGNAME}@anchor{57}\n @deffn {C Macro} GCC_JIT_STR_OPTION_PROGNAME\n \n The name of the program, for use as a prefix when printing error\n@@ -4037,24 +4098,24 @@ messages to stderr.  If @cite{NULL}, or default, \"libgccjit.so\" is used.\n @end deffn\n \n @node Boolean options,Integer options,String Options,Options<2>\n-@anchor{topics/contexts boolean-options}@anchor{56}\n+@anchor{topics/contexts boolean-options}@anchor{58}\n @subsubsection Boolean options\n \n \n @geindex gcc_jit_context_set_bool_option (C function)\n-@anchor{topics/contexts gcc_jit_context_set_bool_option}@anchor{19}\n+@anchor{topics/contexts gcc_jit_context_set_bool_option}@anchor{1b}\n @deffn {C Function} void gcc_jit_context_set_bool_option (gcc_jit_context@w{ }*ctxt, enum gcc_jit_bool_option@w{ }opt, int@w{ }value)\n \n Set a boolean option of the context.\n Zero is \"false\" (the default), non-zero is \"true\".\n \n @geindex gcc_jit_bool_option (C type)\n-@anchor{topics/contexts gcc_jit_bool_option}@anchor{57}\n+@anchor{topics/contexts gcc_jit_bool_option}@anchor{59}\n @deffn {C Type} enum gcc_jit_bool_option\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DEBUGINFO (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DEBUGINFO}@anchor{40}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DEBUGINFO}@anchor{42}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DEBUGINFO\n \n If true, @pxref{15,,gcc_jit_context_compile()} will attempt to do the right\n@@ -4063,11 +4124,11 @@ be able to inspect variables and step through your code.\n \n Note that you can't step through code unless you set up source\n location information for the code (by creating and passing in\n-@pxref{39,,gcc_jit_location} instances).\n+@pxref{3b,,gcc_jit_location} instances).\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}@anchor{58}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}@anchor{5a}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump its initial\n@@ -4105,7 +4166,7 @@ Here's some sample output (from the @cite{square} example):\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE}@anchor{1a}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE}@anchor{1c}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump the \"gimple\"\n@@ -4127,7 +4188,7 @@ square (signed int i)\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE}@anchor{1b}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE}@anchor{1d}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_GENERATED_CODE\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump the final\n@@ -4164,7 +4225,7 @@ square:\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_SUMMARY (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_SUMMARY}@anchor{59}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_SUMMARY}@anchor{5b}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_SUMMARY\n \n If true, @pxref{15,,gcc_jit_context_compile()} will print information to stderr\n@@ -4173,19 +4234,19 @@ the time taken and memory usage of each phase.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING}@anchor{5a}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING}@anchor{5c}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_DUMP_EVERYTHING\n \n If true, @pxref{15,,gcc_jit_context_compile()} will dump copious\n amount of information on what it's doing to various\n files within a temporary directory.  Use\n-@pxref{5b,,GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES} (see below) to\n+@pxref{5d,,GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES} (see below) to\n see the results.  The files are intended to be human-readable,\n but the exact files and their formats are subject to change.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_SELFCHECK_GC (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_SELFCHECK_GC}@anchor{5c}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_SELFCHECK_GC}@anchor{5e}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_SELFCHECK_GC\n \n If true, libgccjit will aggressively run its garbage collector, to\n@@ -4195,7 +4256,7 @@ used when running the selftest suite.\n @end deffn\n \n @geindex GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES (C macro)\n-@anchor{topics/contexts GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES}@anchor{5b}\n+@anchor{topics/contexts GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES}@anchor{5d}\n @deffn {C Macro} GCC_JIT_BOOL_OPTION_KEEP_INTERMEDIATES\n \n If true, the @pxref{8,,gcc_jit_context} will not clean up intermediate files\n@@ -4204,25 +4265,25 @@ written to the filesystem, and will display their location on stderr.\n @end deffn\n \n @node Integer options,,Boolean options,Options<2>\n-@anchor{topics/contexts integer-options}@anchor{5d}\n+@anchor{topics/contexts integer-options}@anchor{5f}\n @subsubsection Integer options\n \n \n @geindex gcc_jit_context_set_int_option (C function)\n-@anchor{topics/contexts gcc_jit_context_set_int_option}@anchor{1c}\n+@anchor{topics/contexts gcc_jit_context_set_int_option}@anchor{1e}\n @deffn {C Function} void gcc_jit_context_set_int_option (gcc_jit_context@w{ }*ctxt, enum gcc_jit_int_option@w{ }opt, int@w{ }value)\n \n Set an integer option of the context.\n \n @geindex gcc_jit_int_option (C type)\n-@anchor{topics/contexts gcc_jit_int_option}@anchor{5e}\n+@anchor{topics/contexts gcc_jit_int_option}@anchor{60}\n @deffn {C Type} enum gcc_jit_int_option\n @end deffn\n \n There is currently just one integer option:\n \n @geindex GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL (C macro)\n-@anchor{topics/contexts GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}@anchor{1d}\n+@anchor{topics/contexts GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL}@anchor{1f}\n @deffn {C Macro} GCC_JIT_INT_OPTION_OPTIMIZATION_LEVEL\n \n How much to optimize the code.\n@@ -4252,7 +4313,7 @@ The default value is 0 (unoptimized).\n @c <http://www.gnu.org/licenses/>.\n \n @node Objects,Types,Compilation contexts,Topic Reference\n-@anchor{topics/objects objects}@anchor{5f}@anchor{topics/objects doc}@anchor{60}\n+@anchor{topics/objects objects}@anchor{61}@anchor{topics/objects doc}@anchor{62}\n @section Objects\n \n \n@@ -4312,7 +4373,7 @@ gcc_jit_object *obj = gcc_jit_type_as_object (int_type);\n The object \"base class\" has the following operations:\n \n @geindex gcc_jit_object_get_context (C function)\n-@anchor{topics/objects gcc_jit_object_get_context}@anchor{61}\n+@anchor{topics/objects gcc_jit_object_get_context}@anchor{63}\n @deffn {C Function} gcc_jit_context *gcc_jit_object_get_context (gcc_jit_object@w{ }*obj)\n \n Which context is \"obj\" within?\n@@ -4368,7 +4429,7 @@ object's context is released.\n @c <http://www.gnu.org/licenses/>.\n \n @node Types,Expressions,Objects,Topic Reference\n-@anchor{topics/types doc}@anchor{62}@anchor{topics/types types}@anchor{63}\n+@anchor{topics/types doc}@anchor{64}@anchor{topics/types types}@anchor{65}\n @section Types\n \n \n@@ -4405,7 +4466,7 @@ See @pxref{b,,gcc_jit_context_get_type()} for the available types.\n \n @item \n derived types can be accessed by using functions such as\n-@pxref{64,,gcc_jit_type_get_pointer()} and @pxref{65,,gcc_jit_type_get_const()}:\n+@pxref{66,,gcc_jit_type_get_pointer()} and @pxref{67,,gcc_jit_type_get_const()}:\n \n @example\n gcc_jit_type *const_int_star = gcc_jit_type_get_pointer (gcc_jit_type_get_const (int_type));\n@@ -4426,7 +4487,7 @@ by creating structures (see below).\n @end menu\n \n @node Standard types,Pointers const and volatile,,Types\n-@anchor{topics/types standard-types}@anchor{66}\n+@anchor{topics/types standard-types}@anchor{68}\n @subsection Standard types\n \n \n@@ -4631,66 +4692,66 @@ C99's @code{_Complex long double}\n @end deffn\n \n @geindex gcc_jit_context_get_int_type (C function)\n-@anchor{topics/types gcc_jit_context_get_int_type}@anchor{67}\n+@anchor{topics/types gcc_jit_context_get_int_type}@anchor{69}\n @deffn {C Function} gcc_jit_type *           gcc_jit_context_get_int_type (gcc_jit_context@w{ }*ctxt, int@w{ }num_bytes, int@w{ }is_signed)\n \n Access the integer type of the given size.\n @end deffn\n \n @node Pointers const and volatile,Structures and unions,Standard types,Types\n-@anchor{topics/types pointers-const-and-volatile}@anchor{68}\n+@anchor{topics/types pointers-const-and-volatile}@anchor{6a}\n @subsection Pointers, @cite{const}, and @cite{volatile}\n \n \n @geindex gcc_jit_type_get_pointer (C function)\n-@anchor{topics/types gcc_jit_type_get_pointer}@anchor{64}\n+@anchor{topics/types gcc_jit_type_get_pointer}@anchor{66}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_pointer (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"T*\".\n @end deffn\n \n @geindex gcc_jit_type_get_const (C function)\n-@anchor{topics/types gcc_jit_type_get_const}@anchor{65}\n+@anchor{topics/types gcc_jit_type_get_const}@anchor{67}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_const (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"const T\".\n @end deffn\n \n @geindex gcc_jit_type_get_volatile (C function)\n-@anchor{topics/types gcc_jit_type_get_volatile}@anchor{69}\n+@anchor{topics/types gcc_jit_type_get_volatile}@anchor{6b}\n @deffn {C Function} gcc_jit_type *gcc_jit_type_get_volatile (gcc_jit_type@w{ }*type)\n \n Given type \"T\", get type \"volatile T\".\n @end deffn\n \n @geindex gcc_jit_context_new_array_type (C function)\n-@anchor{topics/types gcc_jit_context_new_array_type}@anchor{6a}\n+@anchor{topics/types gcc_jit_context_new_array_type}@anchor{6c}\n @deffn {C Function} gcc_jit_type *            gcc_jit_context_new_array_type (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*element_type, int@w{ }num_elements)\n \n Given type \"T\", get type \"T[N]\" (for a constant N).\n @end deffn\n \n @node Structures and unions,,Pointers const and volatile,Types\n-@anchor{topics/types structures-and-unions}@anchor{6b}\n+@anchor{topics/types structures-and-unions}@anchor{6d}\n @subsection Structures and unions\n \n \n @geindex gcc_jit_struct (C type)\n-@anchor{topics/types gcc_jit_struct}@anchor{6c}\n+@anchor{topics/types gcc_jit_struct}@anchor{6e}\n @deffn {C Type} gcc_jit_struct\n @end deffn\n \n A compound type analagous to a C @cite{struct}.\n \n @geindex gcc_jit_field (C type)\n-@anchor{topics/types gcc_jit_field}@anchor{6d}\n+@anchor{topics/types gcc_jit_field}@anchor{6f}\n @deffn {C Type} gcc_jit_field\n @end deffn\n \n-A field within a @pxref{6c,,gcc_jit_struct}.\n+A field within a @pxref{6e,,gcc_jit_struct}.\n \n-You can model C @cite{struct} types by creating @pxref{6c,,gcc_jit_struct *} and\n-@pxref{6d,,gcc_jit_field} instances, in either order:\n+You can model C @cite{struct} types by creating @pxref{6e,,gcc_jit_struct *} and\n+@pxref{6f,,gcc_jit_field} instances, in either order:\n \n \n @itemize *\n@@ -4747,21 +4808,21 @@ gcc_jit_struct_set_fields (node, NULL, 2, fields);\n @end itemize\n \n @geindex gcc_jit_context_new_field (C function)\n-@anchor{topics/types gcc_jit_context_new_field}@anchor{6e}\n+@anchor{topics/types gcc_jit_context_new_field}@anchor{70}\n @deffn {C Function} gcc_jit_field *           gcc_jit_context_new_field (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Construct a new field, with the given type and name.\n @end deffn\n \n @geindex gcc_jit_field_as_object (C function)\n-@anchor{topics/types gcc_jit_field_as_object}@anchor{6f}\n+@anchor{topics/types gcc_jit_field_as_object}@anchor{71}\n @deffn {C Function} gcc_jit_object *           gcc_jit_field_as_object (gcc_jit_field@w{ }*field)\n \n Upcast from field to object.\n @end deffn\n \n @geindex gcc_jit_context_new_struct_type (C function)\n-@anchor{topics/types gcc_jit_context_new_struct_type}@anchor{70}\n+@anchor{topics/types gcc_jit_context_new_struct_type}@anchor{72}\n @deffn {C Function} gcc_jit_struct *gcc_jit_context_new_struct_type (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, const char@w{ }*name, int@w{ }num_fields, gcc_jit_field@w{ }**fields)\n \n @quotation\n@@ -4771,24 +4832,24 @@ Construct a new struct type, with the given name and fields.\n @end deffn\n \n @geindex gcc_jit_context_new_opaque_struct (C function)\n-@anchor{topics/types gcc_jit_context_new_opaque_struct}@anchor{71}\n+@anchor{topics/types gcc_jit_context_new_opaque_struct}@anchor{73}\n @deffn {C Function} gcc_jit_struct *         gcc_jit_context_new_opaque_struct (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, const char@w{ }*name)\n \n Construct a new struct type, with the given name, but without\n specifying the fields.   The fields can be omitted (in which case the\n size of the struct is not known), or later specified using\n-@pxref{72,,gcc_jit_struct_set_fields()}.\n+@pxref{74,,gcc_jit_struct_set_fields()}.\n @end deffn\n \n @geindex gcc_jit_struct_as_type (C function)\n-@anchor{topics/types gcc_jit_struct_as_type}@anchor{73}\n+@anchor{topics/types gcc_jit_struct_as_type}@anchor{75}\n @deffn {C Function} gcc_jit_type *           gcc_jit_struct_as_type (gcc_jit_struct@w{ }*struct_type)\n \n Upcast from struct to type.\n @end deffn\n \n @geindex gcc_jit_struct_set_fields (C function)\n-@anchor{topics/types gcc_jit_struct_set_fields}@anchor{72}\n+@anchor{topics/types gcc_jit_struct_set_fields}@anchor{74}\n @deffn {C Function} void           gcc_jit_struct_set_fields (gcc_jit_struct@w{ }*struct_type, gcc_jit_location@w{ }*loc, int@w{ }num_fields, gcc_jit_field@w{ }**fields)\n \n Populate the fields of a formerly-opaque struct type.\n@@ -4814,7 +4875,7 @@ This can only be called once on a given struct type.\n @c <http://www.gnu.org/licenses/>.\n \n @node Expressions,Creating and using functions,Types,Topic Reference\n-@anchor{topics/expressions expressions}@anchor{74}@anchor{topics/expressions doc}@anchor{75}\n+@anchor{topics/expressions expressions}@anchor{76}@anchor{topics/expressions doc}@anchor{77}\n @section Expressions\n \n \n@@ -4840,7 +4901,7 @@ Lvalues\n \n \n @node Rvalues,Lvalues,,Expressions\n-@anchor{topics/expressions rvalues}@anchor{76}\n+@anchor{topics/expressions rvalues}@anchor{78}\n @subsection Rvalues\n \n \n@@ -4894,7 +4955,7 @@ Every rvalue has an associated type, and the API will check to ensure\n that types match up correctly (otherwise the context will emit an error).\n \n @geindex gcc_jit_rvalue_get_type (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_get_type}@anchor{77}\n+@anchor{topics/expressions gcc_jit_rvalue_get_type}@anchor{79}\n @deffn {C Function} gcc_jit_type *gcc_jit_rvalue_get_type (gcc_jit_rvalue@w{ }*rvalue)\n \n Get the type of this rvalue.\n@@ -4918,20 +4979,20 @@ Upcast the given rvalue to be an object.\n @end menu\n \n @node Simple expressions,Unary Operations,,Rvalues\n-@anchor{topics/expressions simple-expressions}@anchor{78}\n+@anchor{topics/expressions simple-expressions}@anchor{7a}\n @subsubsection Simple expressions\n \n \n @geindex gcc_jit_context_new_rvalue_from_int (C function)\n-@anchor{topics/expressions gcc_jit_context_new_rvalue_from_int}@anchor{2e}\n+@anchor{topics/expressions gcc_jit_context_new_rvalue_from_int}@anchor{30}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_rvalue_from_int (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*numeric_type, int@w{ }value)\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant value.\n @end deffn\n \n @geindex gcc_jit_context_zero (C function)\n-@anchor{topics/expressions gcc_jit_context_zero}@anchor{29}\n+@anchor{topics/expressions gcc_jit_context_zero}@anchor{2b}\n @deffn {C Function} gcc_jit_rvalue *gcc_jit_context_zero (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*numeric_type)\n \n Given a numeric type (integer or floating point), get the rvalue for\n@@ -4945,7 +5006,7 @@ gcc_jit_context_new_rvalue_from_int (ctxt, numeric_type, 0)\n @end deffn\n \n @geindex gcc_jit_context_one (C function)\n-@anchor{topics/expressions gcc_jit_context_one}@anchor{2d}\n+@anchor{topics/expressions gcc_jit_context_one}@anchor{2f}\n @deffn {C Function} gcc_jit_rvalue *gcc_jit_context_one (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*numeric_type)\n \n Given a numeric type (integer or floating point), get the rvalue for\n@@ -4959,22 +5020,22 @@ gcc_jit_context_new_rvalue_from_int (ctxt, numeric_type, 1)\n @end deffn\n \n @geindex gcc_jit_context_new_rvalue_from_double (C function)\n-@anchor{topics/expressions gcc_jit_context_new_rvalue_from_double}@anchor{2f}\n+@anchor{topics/expressions gcc_jit_context_new_rvalue_from_double}@anchor{31}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_context_new_rvalue_from_double (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*numeric_type, double@w{ }value)\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant value.\n @end deffn\n \n @geindex gcc_jit_context_new_rvalue_from_ptr (C function)\n-@anchor{topics/expressions gcc_jit_context_new_rvalue_from_ptr}@anchor{79}\n+@anchor{topics/expressions gcc_jit_context_new_rvalue_from_ptr}@anchor{7b}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_rvalue_from_ptr (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*pointer_type, void@w{ }*value)\n \n Given a pointer type, build an rvalue for the given address.\n @end deffn\n \n @geindex gcc_jit_context_null (C function)\n-@anchor{topics/expressions gcc_jit_context_null}@anchor{7a}\n+@anchor{topics/expressions gcc_jit_context_null}@anchor{7c}\n @deffn {C Function} gcc_jit_rvalue *gcc_jit_context_null (gcc_jit_context@w{ }*ctxt, gcc_jit_type@w{ }*pointer_type)\n \n Given a pointer type, build an rvalue for @code{NULL}.  Essentially this\n@@ -4988,27 +5049,27 @@ gcc_jit_context_new_rvalue_from_ptr (ctxt, pointer_type, NULL)\n @end deffn\n \n @geindex gcc_jit_context_new_string_literal (C function)\n-@anchor{topics/expressions gcc_jit_context_new_string_literal}@anchor{7b}\n+@anchor{topics/expressions gcc_jit_context_new_string_literal}@anchor{7d}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_string_literal (gcc_jit_context@w{ }*ctxt, const char@w{ }*value)\n \n Generate an rvalue for the given NIL-terminated string, of type\n @code{GCC_JIT_TYPE_CONST_CHAR_PTR}.\n @end deffn\n \n @node Unary Operations,Binary Operations,Simple expressions,Rvalues\n-@anchor{topics/expressions unary-operations}@anchor{7c}\n+@anchor{topics/expressions unary-operations}@anchor{7e}\n @subsubsection Unary Operations\n \n \n @geindex gcc_jit_context_new_unary_op (C function)\n-@anchor{topics/expressions gcc_jit_context_new_unary_op}@anchor{7d}\n+@anchor{topics/expressions gcc_jit_context_new_unary_op}@anchor{7f}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_context_new_unary_op (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, enum gcc_jit_unary_op@w{ }op, gcc_jit_type@w{ }*result_type, gcc_jit_rvalue@w{ }*rvalue)\n \n Build a unary operation out of an input rvalue.\n @end deffn\n \n @geindex gcc_jit_unary_op (C type)\n-@anchor{topics/expressions gcc_jit_unary_op}@anchor{7e}\n+@anchor{topics/expressions gcc_jit_unary_op}@anchor{80}\n @deffn {C Type} enum gcc_jit_unary_op\n @end deffn\n \n@@ -5026,23 +5087,23 @@ C equivalent\n \n @item\n \n-@pxref{7f,,GCC_JIT_UNARY_OP_MINUS}\n+@pxref{81,,GCC_JIT_UNARY_OP_MINUS}\n \n @tab\n \n @cite{-(EXPR)}\n \n @item\n \n-@pxref{80,,GCC_JIT_UNARY_OP_BITWISE_NEGATE}\n+@pxref{82,,GCC_JIT_UNARY_OP_BITWISE_NEGATE}\n \n @tab\n \n @cite{~(EXPR)}\n \n @item\n \n-@pxref{81,,GCC_JIT_UNARY_OP_LOGICAL_NEGATE}\n+@pxref{83,,GCC_JIT_UNARY_OP_LOGICAL_NEGATE}\n \n @tab\n \n@@ -5052,7 +5113,7 @@ C equivalent\n \n \n @geindex GCC_JIT_UNARY_OP_MINUS (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_MINUS}@anchor{7f}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_MINUS}@anchor{81}\n @deffn {C Macro} GCC_JIT_UNARY_OP_MINUS\n \n Negate an arithmetic value; analogous to:\n@@ -5067,7 +5128,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_UNARY_OP_BITWISE_NEGATE (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_BITWISE_NEGATE}@anchor{80}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_BITWISE_NEGATE}@anchor{82}\n @deffn {C Macro} GCC_JIT_UNARY_OP_BITWISE_NEGATE\n \n Bitwise negation of an integer value (one's complement); analogous\n@@ -5083,7 +5144,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_UNARY_OP_LOGICAL_NEGATE (C macro)\n-@anchor{topics/expressions GCC_JIT_UNARY_OP_LOGICAL_NEGATE}@anchor{81}\n+@anchor{topics/expressions GCC_JIT_UNARY_OP_LOGICAL_NEGATE}@anchor{83}\n @deffn {C Macro} GCC_JIT_UNARY_OP_LOGICAL_NEGATE\n \n Logical negation of an arithmetic or pointer value; analogous to:\n@@ -5098,7 +5159,7 @@ in C.\n @end deffn\n \n @node Binary Operations,Comparisons,Unary Operations,Rvalues\n-@anchor{topics/expressions binary-operations}@anchor{82}\n+@anchor{topics/expressions binary-operations}@anchor{84}\n @subsubsection Binary Operations\n \n \n@@ -5110,7 +5171,7 @@ Build a binary operation out of two constituent rvalues.\n @end deffn\n \n @geindex gcc_jit_binary_op (C type)\n-@anchor{topics/expressions gcc_jit_binary_op}@anchor{83}\n+@anchor{topics/expressions gcc_jit_binary_op}@anchor{85}\n @deffn {C Type} enum gcc_jit_binary_op\n @end deffn\n \n@@ -5128,7 +5189,7 @@ C equivalent\n \n @item\n \n-@pxref{84,,GCC_JIT_BINARY_OP_PLUS}\n+@pxref{86,,GCC_JIT_BINARY_OP_PLUS}\n \n @tab\n \n@@ -5144,79 +5205,79 @@ C equivalent\n \n @item\n \n-@pxref{85,,GCC_JIT_BINARY_OP_MULT}\n+@pxref{87,,GCC_JIT_BINARY_OP_MULT}\n \n @tab\n \n @cite{x * y}\n \n @item\n \n-@pxref{86,,GCC_JIT_BINARY_OP_DIVIDE}\n+@pxref{88,,GCC_JIT_BINARY_OP_DIVIDE}\n \n @tab\n \n @cite{x / y}\n \n @item\n \n-@pxref{87,,GCC_JIT_BINARY_OP_MODULO}\n+@pxref{89,,GCC_JIT_BINARY_OP_MODULO}\n \n @tab\n \n @cite{x % y}\n \n @item\n \n-@pxref{88,,GCC_JIT_BINARY_OP_BITWISE_AND}\n+@pxref{8a,,GCC_JIT_BINARY_OP_BITWISE_AND}\n \n @tab\n \n @cite{x & y}\n \n @item\n \n-@pxref{89,,GCC_JIT_BINARY_OP_BITWISE_XOR}\n+@pxref{8b,,GCC_JIT_BINARY_OP_BITWISE_XOR}\n \n @tab\n \n @cite{x ^ y}\n \n @item\n \n-@pxref{8a,,GCC_JIT_BINARY_OP_BITWISE_OR}\n+@pxref{8c,,GCC_JIT_BINARY_OP_BITWISE_OR}\n \n @tab\n \n @cite{x | y}\n \n @item\n \n-@pxref{8b,,GCC_JIT_BINARY_OP_LOGICAL_AND}\n+@pxref{8d,,GCC_JIT_BINARY_OP_LOGICAL_AND}\n \n @tab\n \n @cite{x && y}\n \n @item\n \n-@pxref{8c,,GCC_JIT_BINARY_OP_LOGICAL_OR}\n+@pxref{8e,,GCC_JIT_BINARY_OP_LOGICAL_OR}\n \n @tab\n \n @cite{x || y}\n \n @item\n \n-@pxref{8d,,GCC_JIT_BINARY_OP_LSHIFT}\n+@pxref{8f,,GCC_JIT_BINARY_OP_LSHIFT}\n \n @tab\n \n @cite{x << y}\n \n @item\n \n-@pxref{8e,,GCC_JIT_BINARY_OP_RSHIFT}\n+@pxref{90,,GCC_JIT_BINARY_OP_RSHIFT}\n \n @tab\n \n@@ -5226,7 +5287,7 @@ C equivalent\n \n \n @geindex GCC_JIT_BINARY_OP_PLUS (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_PLUS}@anchor{84}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_PLUS}@anchor{86}\n @deffn {C Macro} GCC_JIT_BINARY_OP_PLUS\n \n Addition of arithmetic values; analogous to:\n@@ -5239,7 +5300,7 @@ Addition of arithmetic values; analogous to:\n \n in C.\n \n-For pointer addition, use @pxref{8f,,gcc_jit_context_new_array_access()}.\n+For pointer addition, use @pxref{91,,gcc_jit_context_new_array_access()}.\n @end deffn\n \n \n@@ -5257,7 +5318,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_MULT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_MULT}@anchor{85}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_MULT}@anchor{87}\n @deffn {C Macro} GCC_JIT_BINARY_OP_MULT\n \n Multiplication of a pair of arithmetic values; analogous to:\n@@ -5272,7 +5333,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_DIVIDE (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_DIVIDE}@anchor{86}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_DIVIDE}@anchor{88}\n @deffn {C Macro} GCC_JIT_BINARY_OP_DIVIDE\n \n Quotient of division of arithmetic values; analogous to:\n@@ -5291,7 +5352,7 @@ a floating-point result type indicates floating-point division.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_MODULO (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_MODULO}@anchor{87}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_MODULO}@anchor{89}\n @deffn {C Macro} GCC_JIT_BINARY_OP_MODULO\n \n Remainder of division of arithmetic values; analogous to:\n@@ -5306,7 +5367,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_AND (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_AND}@anchor{88}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_AND}@anchor{8a}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_AND\n \n Bitwise AND; analogous to:\n@@ -5321,7 +5382,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_XOR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_XOR}@anchor{89}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_XOR}@anchor{8b}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_XOR\n \n Bitwise exclusive OR; analogous to:\n@@ -5336,7 +5397,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_BITWISE_OR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_OR}@anchor{8a}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_BITWISE_OR}@anchor{8c}\n @deffn {C Macro} GCC_JIT_BINARY_OP_BITWISE_OR\n \n Bitwise inclusive OR; analogous to:\n@@ -5351,7 +5412,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LOGICAL_AND (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_AND}@anchor{8b}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_AND}@anchor{8d}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LOGICAL_AND\n \n Logical AND; analogous to:\n@@ -5366,7 +5427,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LOGICAL_OR (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_OR}@anchor{8c}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LOGICAL_OR}@anchor{8e}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LOGICAL_OR\n \n Logical OR; analogous to:\n@@ -5381,7 +5442,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_LSHIFT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_LSHIFT}@anchor{8d}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_LSHIFT}@anchor{8f}\n @deffn {C Macro} GCC_JIT_BINARY_OP_LSHIFT\n \n Left shift; analogous to:\n@@ -5396,7 +5457,7 @@ in C.\n @end deffn\n \n @geindex GCC_JIT_BINARY_OP_RSHIFT (C macro)\n-@anchor{topics/expressions GCC_JIT_BINARY_OP_RSHIFT}@anchor{8e}\n+@anchor{topics/expressions GCC_JIT_BINARY_OP_RSHIFT}@anchor{90}\n @deffn {C Macro} GCC_JIT_BINARY_OP_RSHIFT\n \n Right shift; analogous to:\n@@ -5411,19 +5472,19 @@ in C.\n @end deffn\n \n @node Comparisons,Function calls,Binary Operations,Rvalues\n-@anchor{topics/expressions comparisons}@anchor{90}\n+@anchor{topics/expressions comparisons}@anchor{92}\n @subsubsection Comparisons\n \n \n @geindex gcc_jit_context_new_comparison (C function)\n-@anchor{topics/expressions gcc_jit_context_new_comparison}@anchor{2a}\n+@anchor{topics/expressions gcc_jit_context_new_comparison}@anchor{2c}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_comparison (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, enum gcc_jit_comparison@w{ }op, gcc_jit_rvalue@w{ }*a, gcc_jit_rvalue@w{ }*b)\n \n Build a boolean rvalue out of the comparison of two other rvalues.\n @end deffn\n \n @geindex gcc_jit_comparison (C type)\n-@anchor{topics/expressions gcc_jit_comparison}@anchor{91}\n+@anchor{topics/expressions gcc_jit_comparison}@anchor{93}\n @deffn {C Type} enum gcc_jit_comparison\n @end deffn\n \n@@ -5489,28 +5550,28 @@ C equivalent\n \n \n @node Function calls,Type-coercion,Comparisons,Rvalues\n-@anchor{topics/expressions function-calls}@anchor{92}\n+@anchor{topics/expressions function-calls}@anchor{94}\n @subsubsection Function calls\n \n \n @geindex gcc_jit_context_new_call (C function)\n-@anchor{topics/expressions gcc_jit_context_new_call}@anchor{93}\n+@anchor{topics/expressions gcc_jit_context_new_call}@anchor{95}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_call (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_function@w{ }*func, int@w{ }numargs, gcc_jit_rvalue@w{ }**args)\n \n Given a function and the given table of argument rvalues, construct a\n call to the function, with the result as an rvalue.\n \n @cartouche\n @quotation Note \n-@pxref{93,,gcc_jit_context_new_call()} merely builds a\n+@pxref{95,,gcc_jit_context_new_call()} merely builds a\n @pxref{13,,gcc_jit_rvalue} i.e. an expression that can be evaluated,\n perhaps as part of a more complicated expression.\n The call @emph{won't} happen unless you add a statement to a function\n that evaluates the expression.\n \n For example, if you want to call a function and discard the result\n (or to call a function with @code{void} return type), use\n-@pxref{94,,gcc_jit_block_add_eval()}:\n+@pxref{96,,gcc_jit_block_add_eval()}:\n \n @example\n /* Add \"(void)printf (arg0, arg1);\".  */\n@@ -5529,12 +5590,12 @@ gcc_jit_block_add_eval (\n @end deffn\n \n @node Type-coercion,,Function calls,Rvalues\n-@anchor{topics/expressions type-coercion}@anchor{95}\n+@anchor{topics/expressions type-coercion}@anchor{97}\n @subsubsection Type-coercion\n \n \n @geindex gcc_jit_context_new_cast (C function)\n-@anchor{topics/expressions gcc_jit_context_new_cast}@anchor{96}\n+@anchor{topics/expressions gcc_jit_context_new_cast}@anchor{98}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_context_new_cast (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue, gcc_jit_type@w{ }*type)\n \n Given an rvalue of T, construct another rvalue of another type.\n@@ -5559,12 +5620,12 @@ P*  <-> Q*, for pointer types P and Q\n @end deffn\n \n @node Lvalues,Working with pointers structs and unions,Rvalues,Expressions\n-@anchor{topics/expressions lvalues}@anchor{97}\n+@anchor{topics/expressions lvalues}@anchor{99}\n @subsection Lvalues\n \n \n @geindex gcc_jit_lvalue (C type)\n-@anchor{topics/expressions gcc_jit_lvalue}@anchor{22}\n+@anchor{topics/expressions gcc_jit_lvalue}@anchor{24}\n @deffn {C Type} gcc_jit_lvalue\n @end deffn\n \n@@ -5573,21 +5634,21 @@ a storage area (such as a variable).  It is also usable as an rvalue,\n where the rvalue is computed by reading from the storage area.\n \n @geindex gcc_jit_lvalue_as_object (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_as_object}@anchor{98}\n+@anchor{topics/expressions gcc_jit_lvalue_as_object}@anchor{9a}\n @deffn {C Function} gcc_jit_object *           gcc_jit_lvalue_as_object (gcc_jit_lvalue@w{ }*lvalue)\n \n Upcast an lvalue to be an object.\n @end deffn\n \n @geindex gcc_jit_lvalue_as_rvalue (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_as_rvalue}@anchor{99}\n+@anchor{topics/expressions gcc_jit_lvalue_as_rvalue}@anchor{9b}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_lvalue_as_rvalue (gcc_jit_lvalue@w{ }*lvalue)\n \n Upcast an lvalue to be an rvalue.\n @end deffn\n \n @geindex gcc_jit_lvalue_get_address (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_get_address}@anchor{9a}\n+@anchor{topics/expressions gcc_jit_lvalue_get_address}@anchor{9c}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_lvalue_get_address (gcc_jit_lvalue@w{ }*lvalue, gcc_jit_location@w{ }*loc)\n \n Take the address of an lvalue; analogous to:\n@@ -5607,24 +5668,24 @@ in C.\n @end menu\n \n @node Global variables,,,Lvalues\n-@anchor{topics/expressions global-variables}@anchor{9b}\n+@anchor{topics/expressions global-variables}@anchor{9d}\n @subsubsection Global variables\n \n \n @geindex gcc_jit_context_new_global (C function)\n-@anchor{topics/expressions gcc_jit_context_new_global}@anchor{9c}\n+@anchor{topics/expressions gcc_jit_context_new_global}@anchor{9e}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_global (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Add a new global variable of the given type and name to the context.\n @end deffn\n \n @node Working with pointers structs and unions,,Lvalues,Expressions\n-@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{9d}\n+@anchor{topics/expressions working-with-pointers-structs-and-unions}@anchor{9f}\n @subsection Working with pointers, structs and unions\n \n \n @geindex gcc_jit_rvalue_dereference (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{9e}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference}@anchor{a0}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference (gcc_jit_rvalue@w{ }*rvalue, gcc_jit_location@w{ }*loc)\n \n Given an rvalue of pointer type @code{T *}, dereferencing the pointer,\n@@ -5642,7 +5703,7 @@ in C.\n Field access is provided separately for both lvalues and rvalues.\n \n @geindex gcc_jit_lvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{9f}\n+@anchor{topics/expressions gcc_jit_lvalue_access_field}@anchor{a1}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_lvalue_access_field (gcc_jit_lvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -5658,7 +5719,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_access_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{a0}\n+@anchor{topics/expressions gcc_jit_rvalue_access_field}@anchor{a2}\n @deffn {C Function} gcc_jit_rvalue *           gcc_jit_rvalue_access_field (gcc_jit_rvalue@w{ }*struct_, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of struct or union type, access the given field\n@@ -5674,7 +5735,7 @@ in C.\n @end deffn\n \n @geindex gcc_jit_rvalue_dereference_field (C function)\n-@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{a1}\n+@anchor{topics/expressions gcc_jit_rvalue_dereference_field}@anchor{a3}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_rvalue_dereference_field (gcc_jit_rvalue@w{ }*ptr, gcc_jit_location@w{ }*loc, gcc_jit_field@w{ }*field)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -5690,7 +5751,7 @@ in C, itself equivalent to @code{(*EXPR).FIELD}.\n @end deffn\n \n @geindex gcc_jit_context_new_array_access (C function)\n-@anchor{topics/expressions gcc_jit_context_new_array_access}@anchor{8f}\n+@anchor{topics/expressions gcc_jit_context_new_array_access}@anchor{91}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_context_new_array_access (gcc_jit_context@w{ }*ctxt, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*ptr, gcc_jit_rvalue@w{ }*index)\n \n Given an rvalue of pointer type @code{T *}, get at the element @cite{T} at\n@@ -5725,7 +5786,7 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions,Source Locations,Expressions,Topic Reference\n-@anchor{topics/functions doc}@anchor{a2}@anchor{topics/functions creating-and-using-functions}@anchor{a3}\n+@anchor{topics/functions doc}@anchor{a4}@anchor{topics/functions creating-and-using-functions}@anchor{a5}\n @section Creating and using functions\n \n \n@@ -5738,12 +5799,12 @@ in C (or, indeed, to @code{PTR + INDEX}).\n @end menu\n \n @node Params,Functions,,Creating and using functions\n-@anchor{topics/functions params}@anchor{a4}\n+@anchor{topics/functions params}@anchor{a6}\n @subsection Params\n \n \n @geindex gcc_jit_param (C type)\n-@anchor{topics/functions gcc_jit_param}@anchor{23}\n+@anchor{topics/functions gcc_jit_param}@anchor{25}\n @deffn {C Type} gcc_jit_param\n \n A @cite{gcc_jit_param} represents a parameter to a function.\n@@ -5761,33 +5822,33 @@ Parameters are lvalues, and thus are also rvalues (and objects), so the\n following upcasts are available:\n \n @geindex gcc_jit_param_as_lvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{a5}\n+@anchor{topics/functions gcc_jit_param_as_lvalue}@anchor{a7}\n @deffn {C Function} gcc_jit_lvalue *            gcc_jit_param_as_lvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to lvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_rvalue (C function)\n-@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{a6}\n+@anchor{topics/functions gcc_jit_param_as_rvalue}@anchor{a8}\n @deffn {C Function} gcc_jit_rvalue *            gcc_jit_param_as_rvalue (gcc_jit_param@w{ }*param)\n \n Upcasting from param to rvalue.\n @end deffn\n \n @geindex gcc_jit_param_as_object (C function)\n-@anchor{topics/functions gcc_jit_param_as_object}@anchor{a7}\n+@anchor{topics/functions gcc_jit_param_as_object}@anchor{a9}\n @deffn {C Function} gcc_jit_object *            gcc_jit_param_as_object (gcc_jit_param@w{ }*param)\n \n Upcasting from param to object.\n @end deffn\n \n @node Functions,Blocks,Params,Creating and using functions\n-@anchor{topics/functions functions}@anchor{a8}\n+@anchor{topics/functions functions}@anchor{aa}\n @subsection Functions\n \n \n @geindex gcc_jit_function (C type)\n-@anchor{topics/functions gcc_jit_function}@anchor{27}\n+@anchor{topics/functions gcc_jit_function}@anchor{29}\n @deffn {C Type} gcc_jit_function\n \n A @cite{gcc_jit_function} represents a function - either one that we're\n@@ -5801,7 +5862,7 @@ creating ourselves, or one that we're referencing.\n Create a gcc_jit_function with the given name and parameters.\n \n @geindex gcc_jit_function_kind (C type)\n-@anchor{topics/functions gcc_jit_function_kind}@anchor{a9}\n+@anchor{topics/functions gcc_jit_function_kind}@anchor{ab}\n @deffn {C Type} enum gcc_jit_function_kind\n @end deffn\n \n@@ -5811,23 +5872,23 @@ values:\n @quotation\n \n @geindex GCC_JIT_FUNCTION_EXPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{aa}\n+@anchor{topics/functions GCC_JIT_FUNCTION_EXPORTED}@anchor{ac}\n @deffn {C Macro} GCC_JIT_FUNCTION_EXPORTED\n \n Function is defined by the client code and visible\n by name outside of the JIT.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_INTERNAL (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{ab}\n+@anchor{topics/functions GCC_JIT_FUNCTION_INTERNAL}@anchor{ad}\n @deffn {C Macro} GCC_JIT_FUNCTION_INTERNAL\n \n Function is defined by the client code, but is invisible\n outside of the JIT.  Analogous to a \"static\" function.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_IMPORTED (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{ac}\n+@anchor{topics/functions GCC_JIT_FUNCTION_IMPORTED}@anchor{ae}\n @deffn {C Macro} GCC_JIT_FUNCTION_IMPORTED\n \n Function is not defined by the client code; we're merely\n@@ -5836,7 +5897,7 @@ header file.\n @end deffn\n \n @geindex GCC_JIT_FUNCTION_ALWAYS_INLINE (C macro)\n-@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{ad}\n+@anchor{topics/functions GCC_JIT_FUNCTION_ALWAYS_INLINE}@anchor{af}\n @deffn {C Macro} GCC_JIT_FUNCTION_ALWAYS_INLINE\n \n Function is only ever inlined into other functions, and is\n@@ -5853,46 +5914,46 @@ same as GCC_JIT_FUNCTION_INTERNAL.\n @end deffn\n \n @geindex gcc_jit_context_get_builtin_function (C function)\n-@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{ae}\n+@anchor{topics/functions gcc_jit_context_get_builtin_function}@anchor{b0}\n @deffn {C Function} gcc_jit_function *gcc_jit_context_get_builtin_function (gcc_jit_context@w{ }*ctxt, const char@w{ }*name)\n @end deffn\n \n @geindex gcc_jit_function_as_object (C function)\n-@anchor{topics/functions gcc_jit_function_as_object}@anchor{af}\n+@anchor{topics/functions gcc_jit_function_as_object}@anchor{b1}\n @deffn {C Function} gcc_jit_object *           gcc_jit_function_as_object (gcc_jit_function@w{ }*func)\n \n Upcasting from function to object.\n @end deffn\n \n @geindex gcc_jit_function_get_param (C function)\n-@anchor{topics/functions gcc_jit_function_get_param}@anchor{b0}\n+@anchor{topics/functions gcc_jit_function_get_param}@anchor{b2}\n @deffn {C Function} gcc_jit_param *            gcc_jit_function_get_param (gcc_jit_function@w{ }*func, int@w{ }index)\n \n Get the param of the given index (0-based).\n @end deffn\n \n @geindex gcc_jit_function_dump_to_dot (C function)\n-@anchor{topics/functions gcc_jit_function_dump_to_dot}@anchor{31}\n+@anchor{topics/functions gcc_jit_function_dump_to_dot}@anchor{33}\n @deffn {C Function} void             gcc_jit_function_dump_to_dot (gcc_jit_function@w{ }*func, const char@w{ }*path)\n \n Emit the function in graphviz format to the given path.\n @end deffn\n \n @geindex gcc_jit_function_new_local (C function)\n-@anchor{topics/functions gcc_jit_function_new_local}@anchor{24}\n+@anchor{topics/functions gcc_jit_function_new_local}@anchor{26}\n @deffn {C Function} gcc_jit_lvalue *           gcc_jit_function_new_local (gcc_jit_function@w{ }*func, gcc_jit_location@w{ }*loc, gcc_jit_type@w{ }*type, const char@w{ }*name)\n \n Create a new local variable within the function, of the given type and\n name.\n @end deffn\n \n @node Blocks,Statements,Functions,Creating and using functions\n-@anchor{topics/functions blocks}@anchor{b1}\n+@anchor{topics/functions blocks}@anchor{b3}\n @subsection Blocks\n \n \n @geindex gcc_jit_block (C type)\n-@anchor{topics/functions gcc_jit_block}@anchor{26}\n+@anchor{topics/functions gcc_jit_block}@anchor{28}\n @deffn {C Type} gcc_jit_block\n \n A @cite{gcc_jit_block} represents a basic block within a function  i.e. a\n@@ -5910,7 +5971,7 @@ one function.\n @end deffn\n \n @geindex gcc_jit_function_new_block (C function)\n-@anchor{topics/functions gcc_jit_function_new_block}@anchor{b2}\n+@anchor{topics/functions gcc_jit_function_new_block}@anchor{b4}\n @deffn {C Function} gcc_jit_block *            gcc_jit_function_new_block (gcc_jit_function@w{ }*func, const char@w{ }*name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -5920,26 +5981,26 @@ messages.\n @end deffn\n \n @geindex gcc_jit_block_as_object (C function)\n-@anchor{topics/functions gcc_jit_block_as_object}@anchor{b3}\n+@anchor{topics/functions gcc_jit_block_as_object}@anchor{b5}\n @deffn {C Function} gcc_jit_object *            gcc_jit_block_as_object (gcc_jit_block@w{ }*block)\n \n Upcast from block to object.\n @end deffn\n \n @geindex gcc_jit_block_get_function (C function)\n-@anchor{topics/functions gcc_jit_block_get_function}@anchor{b4}\n+@anchor{topics/functions gcc_jit_block_get_function}@anchor{b6}\n @deffn {C Function} gcc_jit_function *            gcc_jit_block_get_function (gcc_jit_block@w{ }*block)\n \n Which function is this block within?\n @end deffn\n \n @node Statements,,Blocks,Creating and using functions\n-@anchor{topics/functions statements}@anchor{b5}\n+@anchor{topics/functions statements}@anchor{b7}\n @subsection Statements\n \n \n @geindex gcc_jit_block_add_eval (C function)\n-@anchor{topics/functions gcc_jit_block_add_eval}@anchor{94}\n+@anchor{topics/functions gcc_jit_block_add_eval}@anchor{96}\n @deffn {C Function} void           gcc_jit_block_add_eval (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue)\n \n Add evaluation of an rvalue, discarding the result\n@@ -5955,7 +6016,7 @@ This is equivalent to this C code:\n @end deffn\n \n @geindex gcc_jit_block_add_assignment (C function)\n-@anchor{topics/functions gcc_jit_block_add_assignment}@anchor{28}\n+@anchor{topics/functions gcc_jit_block_add_assignment}@anchor{2a}\n @deffn {C Function} void           gcc_jit_block_add_assignment (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_lvalue@w{ }*lvalue, gcc_jit_rvalue@w{ }*rvalue)\n \n Add evaluation of an rvalue, assigning the result to the given\n@@ -5971,7 +6032,7 @@ lvalue = rvalue;\n @end deffn\n \n @geindex gcc_jit_block_add_assignment_op (C function)\n-@anchor{topics/functions gcc_jit_block_add_assignment_op}@anchor{2c}\n+@anchor{topics/functions gcc_jit_block_add_assignment_op}@anchor{2e}\n @deffn {C Function} void           gcc_jit_block_add_assignment_op (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_lvalue@w{ }*lvalue, enum gcc_jit_binary_op@w{ }op, gcc_jit_rvalue@w{ }*rvalue)\n \n Add evaluation of an rvalue, using the result to modify an\n@@ -6002,19 +6063,19 @@ gcc_jit_block_add_assignment_op (\n @end deffn\n \n @geindex gcc_jit_block_add_comment (C function)\n-@anchor{topics/functions gcc_jit_block_add_comment}@anchor{3b}\n+@anchor{topics/functions gcc_jit_block_add_comment}@anchor{3d}\n @deffn {C Function} void           gcc_jit_block_add_comment (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, const char@w{ }*text)\n \n Add a no-op textual comment to the internal representation of the\n code.  It will be optimized away, but will be visible in the dumps\n-seen via @pxref{58,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}\n-and @pxref{1a,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE},\n+seen via @pxref{5a,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_TREE}\n+and @pxref{1c,,GCC_JIT_BOOL_OPTION_DUMP_INITIAL_GIMPLE},\n and thus may be of use when debugging how your project's internal\n representation gets converted to the libgccjit IR.\n @end deffn\n \n @geindex gcc_jit_block_end_with_conditional (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_conditional}@anchor{2b}\n+@anchor{topics/functions gcc_jit_block_end_with_conditional}@anchor{2d}\n @deffn {C Function} void           gcc_jit_block_end_with_conditional (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*boolval, gcc_jit_block@w{ }*on_true, gcc_jit_block@w{ }*on_false)\n \n Terminate a block by adding evaluation of an rvalue, branching on the\n@@ -6035,7 +6096,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gcc_jit_block_end_with_jump (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{b6}\n+@anchor{topics/functions gcc_jit_block_end_with_jump}@anchor{b8}\n @deffn {C Function} void           gcc_jit_block_end_with_jump (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_block@w{ }*target)\n \n Terminate a block by adding a jump to the given target block.\n@@ -6050,7 +6111,7 @@ goto target;\n @end deffn\n \n @geindex gcc_jit_block_end_with_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{b7}\n+@anchor{topics/functions gcc_jit_block_end_with_return}@anchor{b9}\n @deffn {C Function} void           gcc_jit_block_end_with_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc, gcc_jit_rvalue@w{ }*rvalue)\n \n Terminate a block by adding evaluation of an rvalue, returning the value.\n@@ -6065,7 +6126,7 @@ return expression;\n @end deffn\n \n @geindex gcc_jit_block_end_with_void_return (C function)\n-@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{b8}\n+@anchor{topics/functions gcc_jit_block_end_with_void_return}@anchor{ba}\n @deffn {C Function} void           gcc_jit_block_end_with_void_return (gcc_jit_block@w{ }*block, gcc_jit_location@w{ }*loc)\n \n Terminate a block by adding a valueless return, for use within a function\n@@ -6098,12 +6159,12 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations,Compilation results,Creating and using functions,Topic Reference\n-@anchor{topics/locations source-locations}@anchor{b9}@anchor{topics/locations doc}@anchor{ba}\n+@anchor{topics/locations source-locations}@anchor{bb}@anchor{topics/locations doc}@anchor{bc}\n @section Source Locations\n \n \n @geindex gcc_jit_location (C type)\n-@anchor{topics/locations gcc_jit_location}@anchor{39}\n+@anchor{topics/locations gcc_jit_location}@anchor{3b}\n @deffn {C Type} gcc_jit_location\n \n A @cite{gcc_jit_location} encapsulates a source code location, so that\n@@ -6114,9 +6175,9 @@ single-step through your language.\n @cite{gcc_jit_location} instances are optional: you can always pass NULL to\n any API entrypoint accepting one.\n \n-You can construct them using @pxref{3f,,gcc_jit_context_new_location()}.\n+You can construct them using @pxref{41,,gcc_jit_context_new_location()}.\n \n-You need to enable @pxref{40,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n+You need to enable @pxref{42,,GCC_JIT_BOOL_OPTION_DEBUGINFO} on the\n @pxref{8,,gcc_jit_context} for these locations to actually be usable by\n the debugger:\n \n@@ -6131,7 +6192,7 @@ gcc_jit_context_set_bool_option (\n @end deffn\n \n @geindex gcc_jit_context_new_location (C function)\n-@anchor{topics/locations gcc_jit_context_new_location}@anchor{3f}\n+@anchor{topics/locations gcc_jit_context_new_location}@anchor{41}\n @deffn {C Function} gcc_jit_location *           gcc_jit_context_new_location (gcc_jit_context@w{ }*ctxt, const char@w{ }*filename, int@w{ }line, int@w{ }column)\n \n Create a @cite{gcc_jit_location} instance representing the given source\n@@ -6144,13 +6205,13 @@ location.\n @end menu\n \n @node Faking it,,,Source Locations\n-@anchor{topics/locations faking-it}@anchor{bb}\n+@anchor{topics/locations faking-it}@anchor{bd}\n @subsection Faking it\n \n \n If you don't have source code for your internal representation, but need\n to debug, you can generate a C-like representation of the functions in\n-your context using @pxref{50,,gcc_jit_context_dump_to_file()}:\n+your context using @pxref{52,,gcc_jit_context_dump_to_file()}:\n \n @example\n gcc_jit_context_dump_to_file (ctxt, \"/tmp/something.c\",\n@@ -6182,7 +6243,7 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compilation results,,Source Locations,Topic Reference\n-@anchor{topics/results compilation-results}@anchor{bc}@anchor{topics/results doc}@anchor{bd}\n+@anchor{topics/results compilation-results}@anchor{be}@anchor{topics/results doc}@anchor{bf}\n @section Compilation results\n \n \n@@ -6211,7 +6272,7 @@ correct type before it can be called.\n @end deffn\n \n @geindex gcc_jit_result_release (C function)\n-@anchor{topics/results gcc_jit_result_release}@anchor{37}\n+@anchor{topics/results gcc_jit_result_release}@anchor{39}\n @deffn {C Function} void           gcc_jit_result_release (gcc_jit_result@w{ }*result)\n \n Once we're done with the code, this unloads the built .so file.\n@@ -6237,7 +6298,7 @@ valid to use the result.\n @c <http://www.gnu.org/licenses/>.\n \n @node Internals,Indices and tables,Topic Reference,Top\n-@anchor{internals/index internals}@anchor{be}@anchor{internals/index doc}@anchor{bf}\n+@anchor{internals/index internals}@anchor{c0}@anchor{internals/index doc}@anchor{c1}\n @chapter Internals\n \n \n@@ -6250,7 +6311,7 @@ valid to use the result.\n @end menu\n \n @node Working on the JIT library,Running the test suite,,Internals\n-@anchor{internals/index working-on-the-jit-library}@anchor{c0}\n+@anchor{internals/index working-on-the-jit-library}@anchor{c2}\n @section Working on the JIT library\n \n \n@@ -6287,7 +6348,7 @@ gcc/libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n Here's what those configuration options mean:\n \n @geindex command line option; --enable-host-shared\n-@anchor{internals/index cmdoption--enable-host-shared}@anchor{c1}\n+@anchor{internals/index cmdoption--enable-host-shared}@anchor{c3}\n @deffn {Option} --enable-host-shared\n \n Configuring with this option means that the compiler is built as\n@@ -6296,15 +6357,15 @@ but it necessary for a shared library.\n @end deffn\n \n @geindex command line option; --enable-languages=jit\n-@anchor{internals/index cmdoption--enable-languages}@anchor{c2}\n+@anchor{internals/index cmdoption--enable-languages}@anchor{c4}\n @deffn {Option} --enable-languages=jit\n \n This specifies which frontends to build.  The JIT library looks like\n a frontend to the rest of the code.\n @end deffn\n \n @geindex command line option; --disable-bootstrap\n-@anchor{internals/index cmdoption--disable-bootstrap}@anchor{c3}\n+@anchor{internals/index cmdoption--disable-bootstrap}@anchor{c5}\n @deffn {Option} --disable-bootstrap\n \n For hacking on the \"jit\" subdirectory, performing a full\n@@ -6314,7 +6375,7 @@ the compiler can still bootstrap itself.\n @end deffn\n \n @geindex command line option; --enable-checking=release\n-@anchor{internals/index cmdoption--enable-checking}@anchor{c4}\n+@anchor{internals/index cmdoption--enable-checking}@anchor{c6}\n @deffn {Option} --enable-checking=release\n \n The compile can perform extensive self-checking as it runs, useful when\n@@ -6325,7 +6386,7 @@ disable this self-checking.\n @end deffn\n \n @node Running the test suite,Environment variables,Working on the JIT library,Internals\n-@anchor{internals/index running-the-test-suite}@anchor{c5}\n+@anchor{internals/index running-the-test-suite}@anchor{c7}\n @section Running the test suite\n \n \n@@ -6383,15 +6444,15 @@ and once a test has been compiled, you can debug it directly:\n @noindent\n \n @node Environment variables,Overview of code structure,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{c6}\n+@anchor{internals/index environment-variables}@anchor{c8}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{c7}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{c9}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -6413,7 +6474,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{c8}\n+@anchor{internals/index envvar-PATH}@anchor{ca}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -6432,7 +6493,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{c9}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{cb}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -6468,7 +6529,7 @@ hello world\n @noindent\n \n @node Overview of code structure,,Environment variables,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{ca}\n+@anchor{internals/index overview-of-code-structure}@anchor{cc}\n @section Overview of code structure\n \n \n@@ -6709,7 +6770,7 @@ the APIs are not yet set in stone, and they shouldn't be used in\n production yet.\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{cb}\n+@anchor{index indices-and-tables}@anchor{cd}\n @unnumbered Indices and tables\n \n "}, {"sha": "b484a9a7311d67eaeaf7dfcfb0f3baeb00e51ef1", "filename": "gcc/jit/docs/intro/tutorial02.rst", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial02.rst?ref=e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "patch": "@@ -218,6 +218,44 @@ then call it:\n \n   result: 25\n \n+Once we're done with the code, we can release the result:\n+\n+.. code-block:: c\n+\n+   gcc_jit_result_release (result);\n+\n+We can't call ``square`` anymore once we've released ``result``.\n+\n+\n+Error-handling\n+**************\n+Various kinds of errors are possible when using the API, such as\n+mismatched types in an assignment.  You can only compile and get code\n+from a context if no errors occur.\n+\n+Errors are printed on stderr; they typically contain the name of the API\n+entrypoint where the error occurred, and pertinent information on the\n+problem:\n+\n+.. code-block:: console\n+\n+  ./buggy-program: error: gcc_jit_block_add_assignment: mismatching types: assignment to i (type: int) from \"hello world\" (type: const char *)\n+\n+The API is designed to cope with errors without crashing, so you can get\n+away with having a single error-handling check in your code:\n+\n+.. code-block:: c\n+\n+   void *fn_ptr = gcc_jit_result_get_code (result, \"square\");\n+   if (!fn_ptr)\n+     {\n+       fprintf (stderr, \"NULL fn_ptr\");\n+       goto error;\n+     }\n+\n+For more information, see the :ref:`error-handling guide <error-handling>`\n+within the Topic eference.\n+\n \n Options\n *******"}, {"sha": "c3f8c527b6c2ab50586864fb27984883ec71d6c9", "filename": "gcc/jit/docs/topics/contexts.rst", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e250f0dcfe3caecaaf90fcb1a8337daee974b16f/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcontexts.rst?ref=e250f0dcfe3caecaaf90fcb1a8337daee974b16f", "patch": "@@ -101,18 +101,30 @@ within a process may use a given \"family tree\" of such contexts at once,\n and if you're using multiple threads you should provide your own locking\n around entire such context partitions.\n \n+.. _error-handling:\n \n Error-handling\n --------------\n-You can only compile and get code from a context if no errors occur.\n-\n-In general, if an error occurs when using an API entrypoint, it returns\n-NULL.  You don't have to check everywhere for NULL results, since the\n-API gracefully handles a NULL being passed in for any argument.\n+Various kinds of errors are possible when using the API, such as\n+mismatched types in an assignment.  You can only compile and get code from\n+a context if no errors occur.\n \n Errors are printed on stderr and can be queried using\n :c:func:`gcc_jit_context_get_first_error`.\n \n+They typically contain the name of the API entrypoint where the error\n+occurred, and pertinent information on the problem:\n+\n+.. code-block:: console\n+\n+  ./buggy-program: error: gcc_jit_block_add_assignment: mismatching types: assignment to i (type: int) from \"hello world\" (type: const char *)\n+\n+In general, if an error occurs when using an API entrypoint, the\n+entrypoint returns NULL.  You don't have to check everywhere for NULL\n+results, since the API handles a NULL being passed in for any\n+argument by issuing another error.  This typically leads to a cascade of\n+followup error messages, but is safe (albeit verbose).\n+\n .. function:: const char *\\\n               gcc_jit_context_get_first_error (gcc_jit_context *ctxt)\n "}]}