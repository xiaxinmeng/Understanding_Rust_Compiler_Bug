{"sha": "46bf3f84b6a117d94ac7479c9e13e05af82d9931", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZiZjNmODRiNmExMTdkOTRhYzc0NzljOWUxM2UwNWFmODJkOTkzMQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-04-10T16:54:14Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-04-10T16:54:14Z"}, "message": "re PR tree-optimization/80153 (ivopt generate wrong code)\n\n\tPR tree-optimization/80153\n\t* tree-ssa-loop-ivopts.c (add_iv_candidate_for_use): Check and \n\tremove POINTER_PLUS_EXPR's base part directly, rather than through\n\taff_tree.\n\nFrom-SVN: r246811", "tree": {"sha": "3fcd5bbc464fcdadacdb3cb3e35520b48db8f151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fcd5bbc464fcdadacdb3cb3e35520b48db8f151"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46bf3f84b6a117d94ac7479c9e13e05af82d9931", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bf3f84b6a117d94ac7479c9e13e05af82d9931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46bf3f84b6a117d94ac7479c9e13e05af82d9931", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46bf3f84b6a117d94ac7479c9e13e05af82d9931/comments", "author": null, "committer": null, "parents": [{"sha": "aac69a62a1b459379367979406430cf282e347af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac69a62a1b459379367979406430cf282e347af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac69a62a1b459379367979406430cf282e347af"}], "stats": {"total": 50, "additions": 18, "deletions": 32}, "files": [{"sha": "6edad210010717a34d4ec020f0d6f9524d95c7c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bf3f84b6a117d94ac7479c9e13e05af82d9931/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bf3f84b6a117d94ac7479c9e13e05af82d9931/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46bf3f84b6a117d94ac7479c9e13e05af82d9931", "patch": "@@ -1,3 +1,10 @@\n+2017-04-10  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/80153\n+\t* tree-ssa-loop-ivopts.c (add_iv_candidate_for_use): Check and \n+\tremove POINTER_PLUS_EXPR's base part directly, rather than through\n+\taff_tree.\n+\n 2017-04-10  Richard Biener  <rguenther@suse.de>\n \t    Bin Cheng  <bin.cheng@arm.com>\n "}, {"sha": "4fc35fab8cbbb814ba63875720e2fe04e1cedd06", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 11, "deletions": 32, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46bf3f84b6a117d94ac7479c9e13e05af82d9931/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46bf3f84b6a117d94ac7479c9e13e05af82d9931/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=46bf3f84b6a117d94ac7479c9e13e05af82d9931", "patch": "@@ -3335,41 +3335,20 @@ add_iv_candidate_for_use (struct ivopts_data *data, struct iv_use *use)\n     }\n \n   /* Record common candidate with base_object removed in base.  */\n-  if (iv->base_object != NULL)\n+  base = iv->base;\n+  STRIP_NOPS (base);\n+  if (iv->base_object != NULL && TREE_CODE (base) == POINTER_PLUS_EXPR)\n     {\n-      unsigned i;\n-      aff_tree aff_base;\n-      tree step, base_object = iv->base_object;\n+      tree step = iv->step;\n \n-      base = iv->base;\n-      step = iv->step;\n-      STRIP_NOPS (base);\n       STRIP_NOPS (step);\n-      STRIP_NOPS (base_object);\n-      tree_to_aff_combination (base, TREE_TYPE (base), &aff_base);\n-      for (i = 0; i < aff_base.n; i++)\n-\t{\n-\t  if (aff_base.elts[i].coef != 1)\n-\t    continue;\n-\n-\t  if (operand_equal_p (aff_base.elts[i].val, base_object, 0))\n-\t    break;\n-\t}\n-      if (i < aff_base.n)\n-\t{\n-\t  aff_combination_remove_elt (&aff_base, i);\n-\t  base = aff_combination_to_tree (&aff_base);\n-\t  basetype = TREE_TYPE (base);\n-\t  if (POINTER_TYPE_P (basetype))\n-\t    basetype = sizetype;\n-\n-\t  step = fold_convert (basetype, step);\n-\t  record_common_cand (data, base, step, use);\n-\t  /* Also record common candidate with offset stripped.  */\n-\t  base = strip_offset (base, &offset);\n-\t  if (offset)\n-\t    record_common_cand (data, base, step, use);\n-\t}\n+      base = TREE_OPERAND (base, 1);\n+      step = fold_convert (sizetype, step);\n+      record_common_cand (data, base, step, use);\n+      /* Also record common candidate with offset stripped.  */\n+      base = strip_offset (base, &offset);\n+      if (offset)\n+\trecord_common_cand (data, base, step, use);\n     }\n \n   /* At last, add auto-incremental candidates.  Make such variables"}]}