{"sha": "21bcd7bedde07878098db00fc4042a85939077a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFiY2Q3YmVkZGUwNzg3ODA5OGRiMDBmYzQwNDJhODU5MzkwNzdhMg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-07-14T13:52:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-07-14T13:52:21Z"}, "message": "gimple.h (stmt_can_terminate_bb_p): New function.\n\n\t* gimple.h (stmt_can_terminate_bb_p): New function.\n\t* tree-cfg.c (need_fake_edge_p): Rename to ...\n\t(stmt_can_terminate_bb_p): ... this; return true if stmt can\n\tthrow external; handle const and pure calls.\n\t* tree-ssa-loop-niter.c (loop_only_exit_p): Use it.\n\nFrom-SVN: r238336", "tree": {"sha": "c64e3b6ecc0d7508eecfd453d8dd19500d078863", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c64e3b6ecc0d7508eecfd453d8dd19500d078863"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21bcd7bedde07878098db00fc4042a85939077a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bcd7bedde07878098db00fc4042a85939077a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bcd7bedde07878098db00fc4042a85939077a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bcd7bedde07878098db00fc4042a85939077a2/comments", "author": null, "committer": null, "parents": [{"sha": "91f35b7f975ae3c36d2719ca15b33421c356fcb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f35b7f975ae3c36d2719ca15b33421c356fcb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f35b7f975ae3c36d2719ca15b33421c356fcb1"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "5830663300f04c3b5417658211b1ca35e0b531eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21bcd7bedde07878098db00fc4042a85939077a2", "patch": "@@ -1,3 +1,11 @@\n+2016-07-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gimple.h (stmt_can_terminate_bb_p): New function.\n+\t* tree-cfg.c (need_fake_edge_p): Rename to ...\n+\t(stmt_can_terminate_bb_p): ... this; return true if stmt can\n+\tthrow external; handle const and pure calls.\n+\t* tree-ssa-loop-niter.c (loop_only_exit_p): Use it.\n+\n 2016-07-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71866"}, {"sha": "980bdf8314c4481e979178d5a23688dd31d5d966", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=21bcd7bedde07878098db00fc4042a85939077a2", "patch": "@@ -1526,6 +1526,7 @@ extern void gimple_seq_set_location (gimple_seq, location_t);\n extern void gimple_seq_discard (gimple_seq);\n extern void maybe_remove_unused_call_args (struct function *, gimple *);\n extern bool gimple_inexpensive_call_p (gcall *);\n+extern bool stmt_can_terminate_bb_p (gimple *);\n \n /* Formal (expression) temporary table handling: multiple occurrences of\n    the same scalar expression are evaluated into the same temporary.  */"}, {"sha": "07280202ba34de394e511a5cca84034b53902597", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=21bcd7bedde07878098db00fc4042a85939077a2", "patch": "@@ -7919,15 +7919,20 @@ gimple_block_ends_with_condjump_p (const_basic_block bb)\n }\n \n \n-/* Return true if we need to add fake edge to exit at statement T.\n-   Helper function for gimple_flow_call_edges_add.  */\n+/* Return true if statement T may terminate execution of BB in ways not\n+   explicitly represtented in the CFG.  */\n \n-static bool\n-need_fake_edge_p (gimple *t)\n+bool\n+stmt_can_terminate_bb_p (gimple *t)\n {\n   tree fndecl = NULL_TREE;\n   int call_flags = 0;\n \n+  /* Eh exception not handled internally terminates execution of the whole\n+     function.  */\n+  if (stmt_can_throw_external (t))\n+    return true;\n+\n   /* NORETURN and LONGJMP calls already have an edge to exit.\n      CONST and PURE calls do not need one.\n      We don't currently check for CONST and PURE here, although\n@@ -7960,6 +7965,13 @@ need_fake_edge_p (gimple *t)\n       edge e;\n       basic_block bb;\n \n+      if (call_flags & (ECF_PURE | ECF_CONST)\n+\t  && !(call_flags & ECF_LOOPING_CONST_OR_PURE))\n+\treturn false;\n+\n+      /* Function call may do longjmp, terminate program or do other things.\n+\t Special case noreturn that have non-abnormal edges out as in this case\n+\t the fact is sufficiently represented by lack of edges out of T.  */\n       if (!(call_flags & ECF_NORETURN))\n \treturn true;\n \n@@ -8024,7 +8036,7 @@ gimple_flow_call_edges_add (sbitmap blocks)\n       if (!gsi_end_p (gsi))\n \tt = gsi_stmt (gsi);\n \n-      if (t && need_fake_edge_p (t))\n+      if (t && stmt_can_terminate_bb_p (t))\n \t{\n \t  edge e;\n \n@@ -8059,7 +8071,7 @@ gimple_flow_call_edges_add (sbitmap blocks)\n \t  do\n \t    {\n \t      stmt = gsi_stmt (gsi);\n-\t      if (need_fake_edge_p (stmt))\n+\t      if (stmt_can_terminate_bb_p (stmt))\n \t\t{\n \t\t  edge e;\n "}, {"sha": "182753cef3da63fc12158ffef0a8704784a6fdd6", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21bcd7bedde07878098db00fc4042a85939077a2/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=21bcd7bedde07878098db00fc4042a85939077a2", "patch": "@@ -2159,7 +2159,6 @@ loop_only_exit_p (const struct loop *loop, const_edge exit)\n   basic_block *body;\n   gimple_stmt_iterator bsi;\n   unsigned i;\n-  gimple *call;\n \n   if (exit != single_exit (loop))\n     return false;\n@@ -2168,17 +2167,8 @@ loop_only_exit_p (const struct loop *loop, const_edge exit)\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n       for (bsi = gsi_start_bb (body[i]); !gsi_end_p (bsi); gsi_next (&bsi))\n-\t{\n-\t  call = gsi_stmt (bsi);\n-\t  if (gimple_code (call) != GIMPLE_CALL)\n-\t    continue;\n-\n-\t  if (gimple_has_side_effects (call))\n-\t    {\n-\t      free (body);\n-\t      return false;\n-\t    }\n-\t}\n+\tif (stmt_can_terminate_bb_p (gsi_stmt (bsi)))\n+\t  return true;\n     }\n \n   free (body);"}]}