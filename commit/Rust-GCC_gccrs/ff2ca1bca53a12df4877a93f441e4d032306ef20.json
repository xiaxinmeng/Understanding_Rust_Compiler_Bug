{"sha": "ff2ca1bca53a12df4877a93f441e4d032306ef20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYyY2ExYmNhNTNhMTJkZjQ4NzdhOTNmNDQxZTRkMDMyMzA2ZWYyMA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2012-04-29T06:59:09Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2012-04-29T06:59:09Z"}, "message": "re PR target/53156 (gcc.target/cris/peep2-andu2.c)\n\n\tPR target/53156\n\t* config/cris/cris.md (andqu): New peephole2.\n\t(andu): Tweak head comment.\n\nFrom-SVN: r186940", "tree": {"sha": "1afcb158b9a08d091e3431247ba36a1a989be6ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1afcb158b9a08d091e3431247ba36a1a989be6ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff2ca1bca53a12df4877a93f441e4d032306ef20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ca1bca53a12df4877a93f441e4d032306ef20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff2ca1bca53a12df4877a93f441e4d032306ef20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff2ca1bca53a12df4877a93f441e4d032306ef20/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a640b5143463b94e08945dd4c3ebf164eb4a6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a640b5143463b94e08945dd4c3ebf164eb4a6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a640b5143463b94e08945dd4c3ebf164eb4a6a3"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "5c0e9737e92452c5015255e4edd831468d2faa41", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ca1bca53a12df4877a93f441e4d032306ef20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ca1bca53a12df4877a93f441e4d032306ef20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff2ca1bca53a12df4877a93f441e4d032306ef20", "patch": "@@ -1,3 +1,9 @@\n+2012-04-29  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\tPR target/53156\n+\t* config/cris/cris.md (andqu): New peephole2.\n+\t(andu): Tweak head comment.\n+\n 2012-04-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \t    Steven Bosscher  <steven@gcc.gnu.org>\n \t    Maxim Kuvyrkov  <maxim@codesourcery.com>"}, {"sha": "92657d12750cb4f5d3d0ada71ee91e48a2108342", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff2ca1bca53a12df4877a93f441e4d032306ef20/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff2ca1bca53a12df4877a93f441e4d032306ef20/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=ff2ca1bca53a12df4877a93f441e4d032306ef20", "patch": "@@ -4936,17 +4936,17 @@\n   \"operands[7]\n      = rtx_equal_p (operands[3], operands[0]) ? operands[4] : operands[3];\")\n \n-;;  I cannot tell GCC (2.1, 2.7.2) how to correctly reload an instruction\n-;; that looks like\n-;;   and.b some_byte,const,reg_32\n-;; where reg_32 is the destination of the \"three-address\" code optimally.\n+;; There seems to be no other way to make GCC (including 4.8/trunk at\n+;; r186932) optimally reload an instruction that looks like\n+;;   and.d reg_or_mem,const_32__65535,other_reg\n+;; where other_reg is the destination.\n ;; It should be:\n-;;   movu.b some_byte,reg_32\n-;;   and.b const,reg_32\n+;;   movu.[bw] reg_or_mem,reg_32\n+;;   and.[bw] trunc_int_for_mode([bw], const_32__65535),reg_32 ;; or andq\n ;; but it turns into:\n-;;   move.b some_byte,reg_32\n-;;   and.d const,reg_32\n-;; Fix it here.\n+;;   move.d reg_or_mem,reg_32\n+;;   and.d const_32__65535,reg_32\n+;; Fix it with these two peephole2's.\n ;; Testcases: gcc.dg/cris-peep2-andu1.c gcc.dg/cris-peep2-andu2.c\n \n (define_peephole2 ; andu (casesi+45)\n@@ -4984,6 +4984,36 @@\n \t\t\t\t\t\t? QImode : amode)));\n })\n \n+;; Since r186861, gcc.dg/cris-peep2-andu2.c trigs this pattern, with which\n+;; we fix up e.g.:\n+;;  movu.b 254,$r9.\n+;;  and.d $r10,$r9\n+;; into:\n+;;  movu.b $r10,$r9\n+;;  andq -2,$r9.\n+;; Only do this for values fitting the quick immediate operand.\n+(define_peephole2 ; andqu (casesi+46)\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(match_operand:SI 1 \"const_int_operand\"))\n+   (set (match_dup 0)\n+\t(and:SI (match_dup 0) (match_operand:SI 2 \"nonimmediate_operand\")))]\n+   ;; Since the size of the memory access will be made different here,\n+   ;; don't do this for a volatile access or a post-incremented address.\n+  \"satisfies_constraint_O (operands[1])\n+   && !side_effects_p (operands[2])\n+   && !reg_overlap_mentioned_p (operands[0], operands[2])\"\n+  [(set (match_dup 0) (match_dup 3))\n+   (set (match_dup 0) (and:SI (match_dup 0) (match_dup 4)))]\n+{\n+  enum machine_mode zmode = INTVAL (operands[2]) <= 255 ? QImode : HImode;\n+  rtx op1\n+    = (REG_S_P (operands[2])\n+       ? gen_rtx_REG (zmode, REGNO (operands[2]))\n+       : adjust_address (operands[2], zmode, 0));\n+  operands[3] = gen_rtx_ZERO_EXTEND (SImode, op1);\n+  operands[4] = GEN_INT (trunc_int_for_mode (INTVAL (operands[1]), QImode));\n+})\n+\n ;; Try and avoid GOTPLT reads escaping a call: transform them into\n ;; PLT.  Curiously (but thankfully), peepholes for instructions\n ;; *without side-effects* that just feed a call (or call_value) are"}]}