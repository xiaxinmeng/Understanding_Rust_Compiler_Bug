{"sha": "b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjljZDdlOWQ4NmE1MWFiYzFiY2YyYmM3ZWVhNDM2OTk0YzZiNjZiZQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-12-23T02:50:24Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-12-23T02:50:24Z"}, "message": "tree-inline.c (struct inline_data): Remove inlined_fns.\n\n2004-12-22  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-inline.c (struct inline_data): Remove inlined_fns.\n\t(expand_call_inline): Remove dead code setting\n\tinlined_fns.\n\t(optimize_inline_calls): Remove dead code setting DECL_INLINED_FNS.\n\t* tree.h (struct tree_decl): Remove inlined_fns.\n\nFrom-SVN: r92529", "tree": {"sha": "64c3100c41bb0f33c672ea021bce73eb31de069f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64c3100c41bb0f33c672ea021bce73eb31de069f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f65b7de376c7284b60167d8400ddbcfddff58db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f65b7de376c7284b60167d8400ddbcfddff58db6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f65b7de376c7284b60167d8400ddbcfddff58db6"}], "stats": {"total": 40, "additions": 8, "deletions": 32}, "files": [{"sha": "00cb8e9a643ccbfc78bb15c577eee02015f6228e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "patch": "@@ -1,3 +1,11 @@\n+2004-12-22  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\t* tree-inline.c (struct inline_data): Remove inlined_fns.\n+\t(expand_call_inline): Remove dead code setting\n+\tinlined_fns.\n+\t(optimize_inline_calls): Remove dead code setting DECL_INLINED_FNS.\n+\t* tree.h (struct tree_decl): Remove inlined_fns.\n+\n 2004-12-22  Roger Sayle  <roger@eyesopen.com>\n \n \t* tree-browser.c: Remove obsolete #ifdef HOST_EBCDIC code."}, {"sha": "3ba728b7a9120e03f3ca2fd1ab65b179b879948e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "patch": "@@ -94,8 +94,6 @@ typedef struct inline_data\n   /* Nonzero if we are currently within the cleanup for a\n      TARGET_EXPR.  */\n   int in_target_cleanup_p;\n-  /* A list of the functions current function has inlined.  */\n-  varray_type inlined_fns;\n   /* We use the same mechanism to build clones that we do to perform\n      inlining.  However, there are a few places where we need to\n      distinguish between those two situations.  This flag is true if\n@@ -1567,19 +1565,6 @@ expand_call_inline (tree *tp, int *walk_subtrees, void *data)\n      recursing into it.  */\n   VARRAY_PUSH_TREE (id->fns, fn);\n \n-  /* Record the function we are about to inline if optimize_function\n-     has not been called on it yet and we don't have it in the list.  */\n-  if (! DECL_INLINED_FNS (fn))\n-    {\n-      int i;\n-\n-      for (i = VARRAY_ACTIVE_SIZE (id->inlined_fns) - 1; i >= 0; i--)\n-\tif (VARRAY_TREE (id->inlined_fns, i) == fn)\n-\t  break;\n-      if (i < 0)\n-\tVARRAY_PUSH_TREE (id->inlined_fns, fn);\n-    }\n-\n   /* Return statements in the function body will be replaced by jumps\n      to the RET_LABEL.  */\n   id->ret_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n@@ -1768,7 +1753,6 @@ optimize_inline_calls (tree fn)\n {\n   inline_data id;\n   tree prev_fn;\n-  tree ifn;\n \n   /* There is no point in performing inlining if errors have already\n      occurred -- and we might crash if we try to inline invalid\n@@ -1793,9 +1777,6 @@ optimize_inline_calls (tree fn)\n \n   prev_fn = lang_hooks.tree_inlining.add_pending_fn_decls (&id.fns, prev_fn);\n \n-  /* Create the list of functions this call will inline.  */\n-  VARRAY_TREE_INIT (id.inlined_fns, 32, \"inlined_fns\");\n-\n   /* Keep track of the low-water mark, i.e., the point where the first\n      real inlining is represented in ID.FNS.  */\n   id.first_inlined_fn = VARRAY_ACTIVE_SIZE (id.fns);\n@@ -1807,11 +1788,6 @@ optimize_inline_calls (tree fn)\n \n   /* Clean up.  */\n   htab_delete (id.tree_pruner);\n-  ifn = make_tree_vec (VARRAY_ACTIVE_SIZE (id.inlined_fns));\n-  if (VARRAY_ACTIVE_SIZE (id.inlined_fns))\n-    memcpy (&TREE_VEC_ELT (ifn, 0), &VARRAY_TREE (id.inlined_fns, 0),\n-\t    VARRAY_ACTIVE_SIZE (id.inlined_fns) * sizeof (tree));\n-  DECL_INLINED_FNS (fn) = ifn;\n \n #ifdef ENABLE_CHECKING\n     {"}, {"sha": "644dff9e753b9be218dea587a8fd33e43db0e806", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b9cd7e9d86a51abc1bcf2bc7eea436994c6b66be", "patch": "@@ -2148,9 +2148,6 @@ struct tree_binfo GTY (())\n #define DECL_VALUE_EXPR(NODE) \\\n   (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl.saved_tree)\n \n-/* List of FUNCTION_DECLs inlined into this function's body.  */\n-#define DECL_INLINED_FNS(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.inlined_fns)\n-\n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as if it were a malloc, meaning it returns a pointer that is\n    not an alias.  */\n@@ -2400,11 +2397,6 @@ struct tree_decl GTY(())\n   /* In a FUNCTION_DECL, this is DECL_SAVED_TREE.\n      In a VAR_DECL or PARM_DECL, this is DECL_VALUE_EXPR.  */\n   tree saved_tree;\n-\n-  /* In a FUNCTION_DECL, these are function data which is to be kept\n-     as long as FUNCTION_DECL is kept.  */\n-  tree inlined_fns;\n-\n   tree vindex;\n   HOST_WIDE_INT pointer_alias_set;\n   /* Points to a structure whose details depend on the language in use.  */"}]}