{"sha": "51b83fdd47de99a9f3927890924c92a1f9c2d8be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTFiODNmZGQ0N2RlOTlhOWYzOTI3ODkwOTI0YzkyYTFmOWMyZDhiZQ==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2013-11-21T23:08:27Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2013-11-21T23:08:27Z"}, "message": "Add minimal line tables at -g1.\n\n    \n2013-11-21  Cary Coutant  <ccoutant@google.com>\n\ngcc/\n\t* dwarf2out.c (want_pubnames): Don't do pubnames for -g1.\n\t(add_linkage_name): Don't add linkage name for -g1.\n\t(decls_for_scope): Process subblocks for -g1.\n\t(dwarf2out_source_line): Output line tables for -g1.\n\t(dwarf2out_finish): Likewise.\n\t* tree-ssa-live.c (remove_unused_scope_block_p): Don't prune\n\tunused scopes for -g1.\n\t* opts.c (common_handle_option): Handle -g same as -g2.\n\t* doc/invoke.texi: Update description for -g1.\n\ngcc/testsuite/\n\t* gcc.dg/debug/dwarf2/mlt1.c: New test.\n\t* gcc.dg/debug/dwarf2/mlt2.c: New test.\n\nFrom-SVN: r205235", "tree": {"sha": "73a75d65ca6bc848d6e672fd80aa39f370dac946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73a75d65ca6bc848d6e672fd80aa39f370dac946"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51b83fdd47de99a9f3927890924c92a1f9c2d8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b83fdd47de99a9f3927890924c92a1f9c2d8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51b83fdd47de99a9f3927890924c92a1f9c2d8be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51b83fdd47de99a9f3927890924c92a1f9c2d8be/comments", "author": null, "committer": null, "parents": [{"sha": "af7d1b7d17315b450db9de5c3d20f8a24a91b39e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7d1b7d17315b450db9de5c3d20f8a24a91b39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7d1b7d17315b450db9de5c3d20f8a24a91b39e"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "fe8ea8ff8f30a8853b9ff490fef8390df58a7e18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -1,3 +1,15 @@\n+2013-11-21  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dwarf2out.c (want_pubnames): Don't do pubnames for -g1.\n+\t(add_linkage_name): Don't add linkage name for -g1.\n+\t(decls_for_scope): Process subblocks for -g1.\n+\t(dwarf2out_source_line): Output line tables for -g1.\n+\t(dwarf2out_finish): Likewise.\n+\t* tree-ssa-live.c (remove_unused_scope_block_p): Don't prune\n+\tunused scopes for -g1.\n+\t* opts.c (common_handle_option): Handle -g same as -g2.\n+\t* doc/invoke.texi: Update description for -g1.\n+\n 2013-11-21  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* doc/extend.texi: Document htm builtins."}, {"sha": "0a26212d82e9bf43ea355ab94cf57881d9308bfe", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -5233,8 +5233,8 @@ Level 0 produces no debug information at all.  Thus, @option{-g0} negates\n \n Level 1 produces minimal information, enough for making backtraces in\n parts of the program that you don't plan to debug.  This includes\n-descriptions of functions and external variables, but no information\n-about local variables and no line numbers.\n+descriptions of functions and external variables, and line number\n+tables, but no information about local variables.\n \n Level 3 includes extra information, such as all the macro definitions\n present in the program.  Some debuggers support macro expansion when"}, {"sha": "1c0effd6c263b5e099243a7e24605ddb0d3cf086", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -8849,6 +8849,8 @@ output_comp_unit (dw_die_ref die, int output_if_empty)\n static inline bool\n want_pubnames (void)\n {\n+  if (debug_info_level <= DINFO_LEVEL_TERSE)\n+    return false;\n   if (debug_generate_pub_sections != -1)\n     return debug_generate_pub_sections;\n   return targetm.want_debug_pub_sections;\n@@ -16563,11 +16565,12 @@ add_src_coords_attributes (dw_die_ref die, tree decl)\n static void\n add_linkage_name (dw_die_ref die, tree decl)\n {\n-  if ((TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n-       && TREE_PUBLIC (decl)\n-       && !DECL_ABSTRACT (decl)\n-       && !(TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n-       && die->die_tag != DW_TAG_member)\n+  if (debug_info_level > DINFO_LEVEL_TERSE\n+      && (TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n+      && TREE_PUBLIC (decl)\n+      && !DECL_ABSTRACT (decl)\n+      && !(TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n+      && die->die_tag != DW_TAG_member)\n     {\n       /* Defer until we have an assembler name set.  */\n       if (!DECL_ASSEMBLER_NAME_SET_P (decl))\n@@ -19963,16 +19966,19 @@ decls_for_scope (tree stmt, dw_die_ref context_die, int depth)\n   /* Output the DIEs to represent all of the data objects and typedefs\n      declared directly within this block but not within any nested\n      sub-blocks.  Also, nested function and tag DIEs have been\n-     generated with a parent of NULL; fix that up now.  */\n-  for (decl = BLOCK_VARS (stmt); decl != NULL; decl = DECL_CHAIN (decl))\n-    process_scope_var (stmt, decl, NULL_TREE, context_die);\n-  for (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (stmt); i++)\n-    process_scope_var (stmt, NULL, BLOCK_NONLOCALIZED_VAR (stmt, i),\n-    \t\t       context_die);\n+     generated with a parent of NULL; fix that up now.  We don't\n+     have to do this if we're at -g1.  */\n+  if (debug_info_level > DINFO_LEVEL_TERSE)\n+    {\n+      for (decl = BLOCK_VARS (stmt); decl != NULL; decl = DECL_CHAIN (decl))\n+\tprocess_scope_var (stmt, decl, NULL_TREE, context_die);\n+      for (i = 0; i < BLOCK_NUM_NONLOCALIZED_VARS (stmt); i++)\n+\tprocess_scope_var (stmt, NULL, BLOCK_NONLOCALIZED_VAR (stmt, i),\n+\t\t\t   context_die);\n+    }\n \n-  /* If we're at -g1, we're not interested in subblocks.  */\n-  if (debug_info_level <= DINFO_LEVEL_TERSE)\n-    return;\n+  /* Even if we're at -g1, we need to process the subblocks in order to get\n+     inlined call information.  */\n \n   /* Output the DIEs to represent all sub-blocks (and the items declared\n      therein) of this block.  */\n@@ -21381,7 +21387,7 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n   unsigned int file_num;\n   dw_line_info_table *table;\n \n-  if (debug_info_level < DINFO_LEVEL_NORMAL || line == 0)\n+  if (debug_info_level < DINFO_LEVEL_TERSE || line == 0)\n     return;\n \n   /* The discriminator column was added in dwarf4.  Simplify the below\n@@ -24073,7 +24079,7 @@ dwarf2out_finish (const char *filename)\n \t}\n     }\n \n-  if (debug_info_level >= DINFO_LEVEL_NORMAL)\n+  if (debug_info_level >= DINFO_LEVEL_TERSE)\n     add_AT_lineptr (main_comp_unit_die, DW_AT_stmt_list,\n \t\t    debug_line_section_label);\n \n@@ -24130,7 +24136,7 @@ dwarf2out_finish (const char *filename)\n       /* Add a pointer to the line table for the main compilation unit\n          so that the debugger can make sense of DW_AT_decl_file\n          attributes.  */\n-      if (debug_info_level >= DINFO_LEVEL_NORMAL)\n+      if (debug_info_level >= DINFO_LEVEL_TERSE)\n         add_AT_lineptr (ctnode->root_die, DW_AT_stmt_list,\n                         (!dwarf_split_debug_info\n                          ? debug_line_section_label"}, {"sha": "5a9d7c81a726669b4a72d325dbe874513d777bae", "filename": "gcc/opts.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -1807,8 +1807,13 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_g:\n-      set_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg, opts, opts_set,\n-\t\t       loc);\n+      /* -g by itself should force -g2.  */\n+      if (*arg == '\\0')\n+\tset_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, \"2\", opts, opts_set,\n+\t\t\t loc);\n+      else\n+\tset_debug_level (NO_DEBUG, DEFAULT_GDB_EXTENSIONS, arg, opts, opts_set,\n+\t\t\t loc);\n       break;\n \n     case OPT_gcoff:"}, {"sha": "2bc0fcc3dea0412cfc4a151d5bd5bda79ff51ff7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -1,3 +1,8 @@\n+2013-11-21  Cary Coutant  <ccoutant@google.com>\n+\n+\t* gcc.dg/debug/dwarf2/mlt1.c: New test.\n+\t* gcc.dg/debug/dwarf2/mlt2.c: New test.\n+\n 2013-11-21  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/59221"}, {"sha": "e46f20af0af381c4286d758cb17fcebce8f8e2c3", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51b83fdd47de99a9f3927890924c92a1f9c2d8be/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=51b83fdd47de99a9f3927890924c92a1f9c2d8be", "patch": "@@ -599,11 +599,11 @@ remove_unused_scope_block_p (tree scope)\n       eliminated.  */\n    else if (!nsubblocks)\n      ;\n-   /* For terse debug info we can eliminate info on unused variables.  */\n-   else if (debug_info_level == DINFO_LEVEL_NONE\n-\t    || debug_info_level == DINFO_LEVEL_TERSE)\n+   /* When not generating debug info we can eliminate info on unused\n+      variables.  */\n+   else if (debug_info_level == DINFO_LEVEL_NONE)\n      {\n-       /* Even for -g0/-g1 don't prune outer scopes from artificial\n+       /* Even for -g0 don't prune outer scopes from artificial\n \t  functions, otherwise diagnostics using tree_nonartificial_location\n \t  will not be emitted properly.  */\n        if (inlined_function_outer_scope_p (scope))"}]}