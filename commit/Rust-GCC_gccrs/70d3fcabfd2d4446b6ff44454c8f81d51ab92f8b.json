{"sha": "70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBkM2ZjYWJmZDJkNDQ0NmI2ZmY0NDQ1NGM4ZjgxZDUxYWI5MmY4Yg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2008-07-03T10:31:03Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2008-07-03T10:31:03Z"}, "message": "re PR bootstrap/33304 (Bootstrap failure on solaris2 using cc due to empty macro arguments)\n\n2008-07-03  Andrew Haley  <aph@redhat.com>\n\n        PR bootstrap/33304\n        * vec.h (VEC_TA): New.\n        (DEF_VEC_I, DEF_VEC_P, DEF_VEC_ALLOC_I, DEF_VEC_ALLOC_P,\n        DEF_VEC_O, DEF_VEC_ALLOC_O: Use VEC_TA.\n        * c-common.c (C_COMMON_FIXED_TYPES_SAT): New macro.\n        (C_COMMON_FIXED_MODE_TYPES_SAT): New macro.\n        (C_COMMON_FIXED_TYPES): Remove first arg.\n        (C_COMMON_FIXED_MODE_TYPES): Likewise.\n        * tree.c (MAKE_FIXED_TYPE_NODE): Break into two macros,\n        MAKE_FIXED_TYPE_NODE and MAKE_FIXED_TYPE_NODE_WIDTH in order\n        not to use empty macro arguments.\n\nFrom-SVN: r137413", "tree": {"sha": "d9226b0dea63dab1260bbce71d51094a417caf69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9226b0dea63dab1260bbce71d51094a417caf69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d92007910f9e9033056d558dd4a49e4828cc0067", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d92007910f9e9033056d558dd4a49e4828cc0067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d92007910f9e9033056d558dd4a49e4828cc0067"}], "stats": {"total": 169, "additions": 111, "deletions": 58}, "files": [{"sha": "ad8bbd045b7e8f606224457572690674fcbd3fc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "patch": "@@ -1,3 +1,17 @@\n+2008-07-03  Andrew Haley  <aph@redhat.com>\n+\n+\tPR bootstrap/33304\n+\t* vec.h (VEC_TA): New.\n+\t(DEF_VEC_I, DEF_VEC_P, DEF_VEC_ALLOC_I, DEF_VEC_ALLOC_P,\n+\tDEF_VEC_O, DEF_VEC_ALLOC_O: Use VEC_TA.\n+\t* c-common.c (C_COMMON_FIXED_TYPES_SAT): New macro.\n+\t(C_COMMON_FIXED_MODE_TYPES_SAT): New macro.\n+\t(C_COMMON_FIXED_TYPES): Remove first arg.\n+\t(C_COMMON_FIXED_MODE_TYPES): Likewise.\n+\t* tree.c (MAKE_FIXED_TYPE_NODE): Break into two macros,\n+\tMAKE_FIXED_TYPE_NODE and MAKE_FIXED_TYPE_NODE_WIDTH in order\n+\tnot to use empty macro arguments.\n+\n 2008-07-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/alpha/vms_tramp.asm, config/arm/crti.asm,"}, {"sha": "3a633843f73ae6e0de76a7e43c48c07c9005d38d", "filename": "gcc/c-common.c", "status": "modified", "additions": 71, "deletions": 47, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "patch": "@@ -2281,53 +2281,77 @@ c_common_signed_or_unsigned_type (int unsignedp, tree type)\n   if (type1 == intQI_type_node || type1 == unsigned_intQI_type_node)\n     return unsignedp ? unsigned_intQI_type_node : intQI_type_node;\n \n-#define C_COMMON_FIXED_TYPES(SAT,NAME) \\\n-  if (type1 == SAT ## short_ ## NAME ## _type_node \\\n-      || type1 == SAT ## unsigned_short_ ## NAME ## _type_node) \\\n-    return unsignedp ? SAT ## unsigned_short_ ## NAME ## _type_node \\\n-\t\t     : SAT ## short_ ## NAME ## _type_node; \\\n-  if (type1 == SAT ## NAME ## _type_node \\\n-      || type1 == SAT ## unsigned_ ## NAME ## _type_node) \\\n-    return unsignedp ? SAT ## unsigned_ ## NAME ## _type_node \\\n-\t\t     : SAT ## NAME ## _type_node; \\\n-  if (type1 == SAT ## long_ ## NAME ## _type_node \\\n-      || type1 == SAT ## unsigned_long_ ## NAME ## _type_node) \\\n-    return unsignedp ? SAT ## unsigned_long_ ## NAME ## _type_node \\\n-\t\t     : SAT ## long_ ## NAME ## _type_node; \\\n-  if (type1 == SAT ## long_long_ ## NAME ## _type_node \\\n-      || type1 == SAT ## unsigned_long_long_ ## NAME ## _type_node) \\\n-    return unsignedp ? SAT ## unsigned_long_long_ ## NAME ## _type_node \\\n-\t\t     : SAT ## long_long_ ## NAME ## _type_node;\n-\n-#define C_COMMON_FIXED_MODE_TYPES(SAT,NAME) \\\n-  if (type1 == SAT ## NAME ## _type_node \\\n-      || type1 == SAT ## u ## NAME ## _type_node) \\\n-    return unsignedp ? SAT ## u ## NAME ## _type_node \\\n-\t\t     : SAT ## NAME ## _type_node;\n-\n-  C_COMMON_FIXED_TYPES (, fract);\n-  C_COMMON_FIXED_TYPES (sat_, fract);\n-  C_COMMON_FIXED_TYPES (, accum);\n-  C_COMMON_FIXED_TYPES (sat_, accum);\n-\n-  C_COMMON_FIXED_MODE_TYPES (, qq);\n-  C_COMMON_FIXED_MODE_TYPES (, hq);\n-  C_COMMON_FIXED_MODE_TYPES (, sq);\n-  C_COMMON_FIXED_MODE_TYPES (, dq);\n-  C_COMMON_FIXED_MODE_TYPES (, tq);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, qq);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, hq);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, sq);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, dq);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, tq);\n-  C_COMMON_FIXED_MODE_TYPES (, ha);\n-  C_COMMON_FIXED_MODE_TYPES (, sa);\n-  C_COMMON_FIXED_MODE_TYPES (, da);\n-  C_COMMON_FIXED_MODE_TYPES (, ta);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, ha);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, sa);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, da);\n-  C_COMMON_FIXED_MODE_TYPES (sat_, ta);\n+#define C_COMMON_FIXED_TYPES(NAME)\t    \\\n+  if (type1 == short_ ## NAME ## _type_node \\\n+      || type1 == unsigned_short_ ## NAME ## _type_node) \\\n+    return unsignedp ? unsigned_short_ ## NAME ## _type_node \\\n+\t\t     : short_ ## NAME ## _type_node; \\\n+  if (type1 == NAME ## _type_node \\\n+      || type1 == unsigned_ ## NAME ## _type_node) \\\n+    return unsignedp ? unsigned_ ## NAME ## _type_node \\\n+\t\t     : NAME ## _type_node; \\\n+  if (type1 == long_ ## NAME ## _type_node \\\n+      || type1 == unsigned_long_ ## NAME ## _type_node) \\\n+    return unsignedp ? unsigned_long_ ## NAME ## _type_node \\\n+\t\t     : long_ ## NAME ## _type_node; \\\n+  if (type1 == long_long_ ## NAME ## _type_node \\\n+      || type1 == unsigned_long_long_ ## NAME ## _type_node) \\\n+    return unsignedp ? unsigned_long_long_ ## NAME ## _type_node \\\n+\t\t     : long_long_ ## NAME ## _type_node;\n+\n+#define C_COMMON_FIXED_MODE_TYPES(NAME) \\\n+  if (type1 == NAME ## _type_node \\\n+      || type1 == u ## NAME ## _type_node) \\\n+    return unsignedp ? u ## NAME ## _type_node \\\n+\t\t     : NAME ## _type_node;\n+\n+#define C_COMMON_FIXED_TYPES_SAT(NAME) \\\n+  if (type1 == sat_ ## short_ ## NAME ## _type_node \\\n+      || type1 == sat_ ## unsigned_short_ ## NAME ## _type_node) \\\n+    return unsignedp ? sat_ ## unsigned_short_ ## NAME ## _type_node \\\n+\t\t     : sat_ ## short_ ## NAME ## _type_node; \\\n+  if (type1 == sat_ ## NAME ## _type_node \\\n+      || type1 == sat_ ## unsigned_ ## NAME ## _type_node) \\\n+    return unsignedp ? sat_ ## unsigned_ ## NAME ## _type_node \\\n+\t\t     : sat_ ## NAME ## _type_node; \\\n+  if (type1 == sat_ ## long_ ## NAME ## _type_node \\\n+      || type1 == sat_ ## unsigned_long_ ## NAME ## _type_node) \\\n+    return unsignedp ? sat_ ## unsigned_long_ ## NAME ## _type_node \\\n+\t\t     : sat_ ## long_ ## NAME ## _type_node; \\\n+  if (type1 == sat_ ## long_long_ ## NAME ## _type_node \\\n+      || type1 == sat_ ## unsigned_long_long_ ## NAME ## _type_node) \\\n+    return unsignedp ? sat_ ## unsigned_long_long_ ## NAME ## _type_node \\\n+\t\t     : sat_ ## long_long_ ## NAME ## _type_node;\n+\n+#define C_COMMON_FIXED_MODE_TYPES_SAT(NAME)\t\\\n+  if (type1 == sat_ ## NAME ## _type_node \\\n+      || type1 == sat_ ## u ## NAME ## _type_node) \\\n+    return unsignedp ? sat_ ## u ## NAME ## _type_node \\\n+\t\t     : sat_ ## NAME ## _type_node;\n+\n+  C_COMMON_FIXED_TYPES (fract);\n+  C_COMMON_FIXED_TYPES_SAT (fract);\n+  C_COMMON_FIXED_TYPES (accum);\n+  C_COMMON_FIXED_TYPES_SAT (accum);\n+\n+  C_COMMON_FIXED_MODE_TYPES (qq);\n+  C_COMMON_FIXED_MODE_TYPES (hq);\n+  C_COMMON_FIXED_MODE_TYPES (sq);\n+  C_COMMON_FIXED_MODE_TYPES (dq);\n+  C_COMMON_FIXED_MODE_TYPES (tq);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (qq);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (hq);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (sq);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (dq);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (tq);\n+  C_COMMON_FIXED_MODE_TYPES (ha);\n+  C_COMMON_FIXED_MODE_TYPES (sa);\n+  C_COMMON_FIXED_MODE_TYPES (da);\n+  C_COMMON_FIXED_MODE_TYPES (ta);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (ha);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (sa);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (da);\n+  C_COMMON_FIXED_MODE_TYPES_SAT (ta);\n \n   /* For ENUMERAL_TYPEs in C++, must check the mode of the types, not\n      the precision; they have precision set to match their range, but"}, {"sha": "97b53bd951c4ad632fa65be3f7e42762b0355667", "filename": "gcc/tree.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "patch": "@@ -7395,7 +7395,16 @@ build_common_tree_nodes_2 (int short_double)\n   complex_long_double_type_node = build_complex_type (long_double_type_node);\n \n /* Make fixed-point nodes based on sat/non-sat and signed/unsigned.  */\n-#define MAKE_FIXED_TYPE_NODE(KIND,WIDTH,SIZE) \\\n+#define MAKE_FIXED_TYPE_NODE(KIND,SIZE) \\\n+  sat_ ## KIND ## _type_node = \\\n+    make_sat_signed_ ## KIND ## _type (SIZE); \\\n+  sat_unsigned_ ## KIND ## _type_node = \\\n+    make_sat_unsigned_ ## KIND ## _type (SIZE); \\\n+  KIND ## _type_node = make_signed_ ## KIND ## _type (SIZE); \\\n+  unsigned_ ## KIND ## _type_node = \\\n+    make_unsigned_ ## KIND ## _type (SIZE);\n+\n+#define MAKE_FIXED_TYPE_NODE_WIDTH(KIND,WIDTH,SIZE) \\\n   sat_ ## WIDTH ## KIND ## _type_node = \\\n     make_sat_signed_ ## KIND ## _type (SIZE); \\\n   sat_unsigned_ ## WIDTH ## KIND ## _type_node = \\\n@@ -7406,10 +7415,10 @@ build_common_tree_nodes_2 (int short_double)\n \n /* Make fixed-point type nodes based on four different widths.  */\n #define MAKE_FIXED_TYPE_NODE_FAMILY(N1,N2) \\\n-  MAKE_FIXED_TYPE_NODE (N1, short_, SHORT_ ## N2 ## _TYPE_SIZE) \\\n-  MAKE_FIXED_TYPE_NODE (N1, , N2 ## _TYPE_SIZE) \\\n-  MAKE_FIXED_TYPE_NODE (N1, long_, LONG_ ## N2 ## _TYPE_SIZE) \\\n-  MAKE_FIXED_TYPE_NODE (N1, long_long_, LONG_LONG_ ## N2 ## _TYPE_SIZE)\n+  MAKE_FIXED_TYPE_NODE_WIDTH (N1, short_, SHORT_ ## N2 ## _TYPE_SIZE) \\\n+  MAKE_FIXED_TYPE_NODE (N1, N2 ## _TYPE_SIZE) \\\n+  MAKE_FIXED_TYPE_NODE_WIDTH (N1, long_, LONG_ ## N2 ## _TYPE_SIZE) \\\n+  MAKE_FIXED_TYPE_NODE_WIDTH (N1, long_long_, LONG_LONG_ ## N2 ## _TYPE_SIZE)\n \n /* Make fixed-point mode nodes based on sat/non-sat and signed/unsigned.  */\n #define MAKE_FIXED_MODE_NODE(KIND,NAME,MODE) \\"}, {"sha": "c07ee221584e2af763704b21f73a85ceb3970348", "filename": "gcc/vec.h", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=70d3fcabfd2d4446b6ff44454c8f81d51ab92f8b", "patch": "@@ -480,6 +480,12 @@ typedef struct VEC(T,A) GTY\t\t\t\t\t\t  \\\n   VEC(T,B) base;\t\t\t\t\t\t\t  \\\n } VEC(T,A)\n \n+#define VEC_TA(T,B,A)\t\t\t\t\t\t\t  \\\n+typedef struct VEC(T,A)\t\t\t\t\t\t\t  \\\n+{\t\t\t\t\t\t\t\t\t  \\\n+  VEC(T,B) base;\t\t\t\t\t\t\t  \\\n+} VEC(T,A)\n+\n /* Convert to base type.  */\n #define VEC_BASE(P)  ((P) ? &(P)->base : 0)\n \n@@ -491,11 +497,11 @@ static inline void VEC_OP (T,must_be,integral_type) (void) \t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n VEC_T(T,base);\t\t\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,none,);\t\t\t\t\t\t  \\\n+VEC_TA(T,base,none);\t\t\t\t\t\t\t  \\\n DEF_VEC_FUNC_P(T)\t\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n #define DEF_VEC_ALLOC_I(T,A)\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,A,);\t\t\t\t\t\t\t  \\\n+VEC_TA(T,base,A);\t\t\t\t\t\t\t  \\\n DEF_VEC_ALLOC_FUNC_I(T,A)\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n \n@@ -507,11 +513,11 @@ static inline void VEC_OP (T,must_be,pointer_type) (void) \t\t  \\\n }\t\t\t\t\t\t\t\t\t  \\\n \t\t\t\t\t\t\t\t\t  \\\n VEC_T_GTY(T,base);\t\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,none,);\t\t\t\t\t\t  \\\n+VEC_TA(T,base,none);\t\t\t\t\t\t\t  \\\n DEF_VEC_FUNC_P(T)\t\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n #define DEF_VEC_ALLOC_P(T,A)\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,A,);\t\t\t\t\t\t\t  \\\n+VEC_TA(T,base,A);\t\t\t\t\t\t\t  \\\n DEF_VEC_ALLOC_FUNC_P(T,A)\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n \n@@ -797,11 +803,11 @@ static inline T *VEC_OP (T,A,safe_insert)\t\t     \t  \t  \\\n /* Vector of object.  */\n #define DEF_VEC_O(T)\t\t\t\t\t\t\t  \\\n VEC_T_GTY(T,base);\t\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,none,);\t\t\t\t\t\t  \\\n+VEC_TA(T,base,none);\t\t\t\t\t\t  \\\n DEF_VEC_FUNC_O(T)\t\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n #define DEF_VEC_ALLOC_O(T,A)\t\t\t\t\t\t  \\\n-VEC_TA_GTY(T,base,A,);\t\t\t\t\t\t\t  \\\n+VEC_TA(T,base,A);\t\t\t\t\t\t\t  \\\n DEF_VEC_ALLOC_FUNC_O(T,A)\t\t\t\t\t\t  \\\n struct vec_swallow_trailing_semi\n "}]}