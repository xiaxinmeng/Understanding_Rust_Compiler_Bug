{"sha": "9807c31af91326988d083436483f9577296e1f9a", "node_id": "C_kwDOANBUbNoAKDk4MDdjMzFhZjkxMzI2OTg4ZDA4MzQzNjQ4M2Y5NTc3Mjk2ZTFmOWE", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2023-01-05T18:15:18Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2023-01-05T18:15:18Z"}, "message": "Fix atomic operations on PA-RISC 2.0 processors.\n\nPA-RISC 2.0 supports out-of-order execution for loads and stores.\nThus, we need to synchonize memory accesses.\n\nThis change revises the lock releases in __exchange_and_add and\n__atomic_add to use an ordered store with release semantics.  We\nalso use an ordered load in the inner spin loop.\n\nWe use the \"ldcw,co\" instruction instead of \"ldcw\" when compiled\nfor PA 2.0.  Most PA 2.0 processors are coherent and can execute\nthe ldcw instruction in cache for improved performance.\n\nFinally, the inner spin loop is revised to immediately branch to\nthe ldcw instruction when it detects the lock is free.\n\n2023-01-05  John David Anglin  <danglin@gcc.gnu.org>\n\nlibstdc++-v3/ChangeLog:\n\n\t* config/cpu/hppa/atomicity.h (_PA_LDCW_INSN): Define.\n\t(__exchange_and_add): Use _PA_LDCW_INSN.  Use ordered store for\n\tlock release.  Revise loop.\n\t(__atomic_add): Likewise.", "tree": {"sha": "309a400a027d826d8a5c5769255e5d50eec47b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/309a400a027d826d8a5c5769255e5d50eec47b57"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9807c31af91326988d083436483f9577296e1f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9807c31af91326988d083436483f9577296e1f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9807c31af91326988d083436483f9577296e1f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9807c31af91326988d083436483f9577296e1f9a/comments", "author": null, "committer": null, "parents": [{"sha": "4413365616e8c6024d1ff4e23309e5012ee33b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4413365616e8c6024d1ff4e23309e5012ee33b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4413365616e8c6024d1ff4e23309e5012ee33b9f"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "658073537a44b55f0d8538e57a716bd731837b54", "filename": "libstdc++-v3/config/cpu/hppa/atomicity.h", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9807c31af91326988d083436483f9577296e1f9a/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9807c31af91326988d083436483f9577296e1f9a/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Fhppa%2Fatomicity.h?ref=9807c31af91326988d083436483f9577296e1f9a", "patch": "@@ -25,6 +25,15 @@\n #include <bits/c++config.h>\n #include <ext/atomicity.h>\n \n+/* Perform ldcw operation in cache when possible.  */\n+#ifndef _PA_LDCW_INSN\n+# ifdef _PA_RISC2_0\n+# define _PA_LDCW_INSN \"ldcw,co\"\n+# else\n+# define _PA_LDCW_INSN \"ldcw\"\n+# endif\n+#endif\n+\n namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -51,19 +60,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     int tmp;\n     volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n \n-    __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+    __asm__ __volatile__ (_PA_LDCW_INSN \" 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n-\t\t\t  \"ldw 0(%1),%0\\n\\t\"\n-\t\t\t  \"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t  \"ldw,ma 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,<> 0,%0,.-12\\n\\t\"\n \t\t\t  \"nop\\n\\t\"\n-\t\t\t  \"b,n .-20\"\n+\t\t\t  \"b,n .-12\"\n \t\t\t  : \"=&r\" (tmp)\n \t\t\t  : \"r\" (&lock)\n \t\t\t  : \"memory\");\n \n     result = *__mem;\n     *__mem = result + __val;\n-    __asm__ __volatile__ (\"stw %1,0(%0)\"\n+    __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n     return result;\n   }\n@@ -75,18 +84,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     int tmp;\n     volatile int& lock = _Atomicity_lock<0>::_S_atomicity_lock;\n \n-    __asm__ __volatile__ (\"ldcw 0(%1),%0\\n\\t\"\n+    __asm__ __volatile__ (_PA_LDCW_INSN \" 0(%1),%0\\n\\t\"\n \t\t\t  \"cmpib,<>,n 0,%0,.+20\\n\\t\"\n-\t\t\t  \"ldw 0(%1),%0\\n\\t\"\n-\t\t\t  \"cmpib,= 0,%0,.-4\\n\\t\"\n+\t\t\t  \"ldw,ma 0(%1),%0\\n\\t\"\n+\t\t\t  \"cmpib,<> 0,%0,.-12\\n\\t\"\n \t\t\t  \"nop\\n\\t\"\n-\t\t\t  \"b,n .-20\"\n+\t\t\t  \"b,n .-12\"\n \t\t\t  : \"=&r\" (tmp)\n \t\t\t  : \"r\" (&lock)\n \t\t\t  : \"memory\");\n \n     *__mem += __val;\n-    __asm__ __volatile__ (\"stw %1,0(%0)\"\n+    __asm__ __volatile__ (\"stw,ma %1,0(%0)\"\n \t\t\t  : : \"r\" (&lock), \"r\" (tmp) : \"memory\");\n   }\n "}]}