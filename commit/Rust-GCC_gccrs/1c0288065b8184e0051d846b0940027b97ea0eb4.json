{"sha": "1c0288065b8184e0051d846b0940027b97ea0eb4", "node_id": "C_kwDOANBUbNoAKDFjMDI4ODA2NWI4MTg0ZTAwNTFkODQ2YjA5NDAwMjdiOTdlYTBlYjQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-26T11:55:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-08-26T14:29:03Z"}, "message": "libstdc++: Simplify std::error_code and std::error_condition\n\nThis removes the redundant operator=(E) from std::error_code and\nstd::error_condition. Without that overload, assignment from a custom\ntype will use the templated constructor to create a temporary and then\nuse the trivial copy assignment operator. With the overloaded\nassignment, we have to check the constraints twice as often, because\nthat overload and its constraints are checked for simple copy\nassignments (including the one in the overloaded assignment operator\nitself!)\n\nAlso add tests that ADL is used as per LWG 3629.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/system_error (error_code::_Check): New alias\n\ttemplate for constructor SFINAE constraint.\n\t(error_code::error_code(ErrorCodeEnum)): Use it.\n\t(error_code::operator=(ErrorCodeEnum)): Remove.\n\t(error_condition::_Check): New alias template for constraint.\n\t(error_condition::error_condition(ErrorConditionEnum)): Use it.\n\t(error_condition::operator=(ErrorConditionEnum)): Remove.\n\t* testsuite/19_diagnostics/error_code/cons/1.cc: Check\n\tconstructor taking user-defined error enum.\n\t* testsuite/19_diagnostics/error_condition/cons/1.cc: Likewise.", "tree": {"sha": "a58df9efcff99cc36775375840ce35fc4eb9be9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58df9efcff99cc36775375840ce35fc4eb9be9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c0288065b8184e0051d846b0940027b97ea0eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0288065b8184e0051d846b0940027b97ea0eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0288065b8184e0051d846b0940027b97ea0eb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0288065b8184e0051d846b0940027b97ea0eb4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0b969df794d0401ccb9279d44302d1e4729f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0b969df794d0401ccb9279d44302d1e4729f15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0b969df794d0401ccb9279d44302d1e4729f15"}], "stats": {"total": 100, "additions": 75, "deletions": 25}, "files": [{"sha": "050439427cc410332413dd8a44780ac388e22655", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=1c0288065b8184e0051d846b0940027b97ea0eb4", "patch": "@@ -216,18 +216,26 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    */\n   class error_code\n   {\n+    template<typename _ErrorCodeEnum>\n+      using _Check\n+\t= __enable_if_t<is_error_code_enum<_ErrorCodeEnum>::value>;\n+\n   public:\n     error_code() noexcept\n     : _M_value(0), _M_cat(&system_category()) { }\n \n     error_code(int __v, const error_category& __cat) noexcept\n     : _M_value(__v), _M_cat(&__cat) { }\n \n-    template<typename _ErrorCodeEnum, typename = typename\n-\t     enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>\n+    /// Initialize with a user-defined type, by calling make_error_code.\n+    template<typename _ErrorCodeEnum,\n+\t     typename = _Check<_ErrorCodeEnum>>\n       error_code(_ErrorCodeEnum __e) noexcept\n       { *this = make_error_code(__e); }\n \n+    error_code(const error_code&) = default;\n+    error_code& operator=(const error_code&) = default;\n+\n     void\n     assign(int __v, const error_category& __cat) noexcept\n     {\n@@ -239,13 +247,6 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     clear() noexcept\n     { assign(0, system_category()); }\n \n-    // DR 804.\n-    template<typename _ErrorCodeEnum>\n-      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,\n-\t\t\t error_code&>::type\n-      operator=(_ErrorCodeEnum __e) noexcept\n-      { return *this = make_error_code(__e); }\n-\n     /// The error value.\n     [[__nodiscard__]]\n     int\n@@ -345,6 +346,10 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n    */\n   class error_condition\n   {\n+    template<typename _ErrorConditionEnum>\n+      using _Check\n+\t= __enable_if_t<is_error_condition_enum<_ErrorConditionEnum>::value>;\n+\n   public:\n     /// Initialize with a zero (no error) value and the generic category.\n     error_condition() noexcept\n@@ -354,11 +359,15 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n     error_condition(int __v, const error_category& __cat) noexcept\n     : _M_value(__v), _M_cat(&__cat) { }\n \n-    template<typename _ErrorConditionEnum, typename = typename\n-\t enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>\n+    /// Initialize with a user-defined type, by calling make_error_condition.\n+    template<typename _ErrorConditionEnum,\n+\t     typename = _Check<_ErrorConditionEnum>>\n       error_condition(_ErrorConditionEnum __e) noexcept\n       { *this = make_error_condition(__e); }\n \n+    error_condition(const error_condition&) = default;\n+    error_condition& operator=(const error_condition&) = default;\n+\n     /// Set the value and category.\n     void\n     assign(int __v, const error_category& __cat) noexcept\n@@ -367,13 +376,6 @@ _GLIBCXX_END_INLINE_ABI_NAMESPACE(_V2)\n       _M_cat = &__cat;\n     }\n \n-    // DR 804.\n-    template<typename _ErrorConditionEnum>\n-      typename enable_if<is_error_condition_enum\n-\t\t\t <_ErrorConditionEnum>::value, error_condition&>::type\n-      operator=(_ErrorConditionEnum __e) noexcept\n-      { return *this = make_error_condition(__e); }\n-\n     /// Reset the value and category to the default-constructed state.\n     void\n     clear() noexcept"}, {"sha": "d48d5c1ffe87aa680945193e49eb1459a4b47edf", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_code/cons/1.cc", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_code%2Fcons%2F1.cc?ref=1c0288065b8184e0051d846b0940027b97ea0eb4", "patch": "@@ -22,23 +22,46 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n+namespace adl\n+{\n+  struct Error { };\n+\n+  const Error err;\n+\n+  struct category : std::error_category\n+  {\n+    const char* name() const noexcept override { return \"adl\"; }\n+    std::string message(int) const { return \"\"; }\n+  };\n+\n+  const category cat;\n+\n+  std::error_code\n+  make_error_code(Error) { return std::error_code(999, cat); }\n+}\n+\n+template<> struct std::is_error_code_enum<adl::Error> : std::true_type { };\n+\n int main()\n {\n-  // 1\n+  // 1 error_code()\n   std::error_code e1;\n   VERIFY( e1.value() == 0 );\n   VERIFY( e1.category() == std::system_category() );\n \n-  // 2\n+  // 2 error_code(int, const error_category&)\n   const __gnu_test::test_category cat;\n   std::error_code e2(e1.value(), cat);\n   VERIFY( e2.value() == e1.value() );\n   VERIFY( e2.category() == cat );\n \n-  // 3\n+  // 3 error_code(const error_code&)\n   std::error_code e3(std::make_error_code(std::errc::operation_not_supported));\n   VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n   VERIFY( e3.category() == std::generic_category() );\n \n-  return 0;\n+  // 4 error_code(ErrorCodeEnum)\n+  std::error_code e4(adl::err);\n+  VERIFY( e4.value() == 999 );\n+  VERIFY( e4.category() == adl::cat );\n }"}, {"sha": "c353b0266ee2f87e9b3fca645965722b3aa2b70d", "filename": "libstdc++-v3/testsuite/19_diagnostics/error_condition/cons/1.cc", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c0288065b8184e0051d846b0940027b97ea0eb4/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F19_diagnostics%2Ferror_condition%2Fcons%2F1.cc?ref=1c0288065b8184e0051d846b0940027b97ea0eb4", "patch": "@@ -21,23 +21,48 @@\n #include <system_error>\n #include <testsuite_error.h>\n \n+namespace adl\n+{\n+  struct Error { };\n+\n+  const Error err;\n+\n+  struct category : std::error_category\n+  {\n+    const char* name() const noexcept override { return \"adl\"; }\n+    std::string message(int) const { return \"\"; }\n+  };\n+\n+  const category cat;\n+\n+  std::error_condition\n+  make_error_condition(Error) { return std::error_condition(999, cat); }\n+}\n+\n+template<> struct std::is_error_condition_enum<adl::Error> : std::true_type { };\n+\n void test01()\n {\n-  // 1\n+  // 1 error_condition()\n   std::error_condition e1;\n   VERIFY( e1.value() == 0 );\n   VERIFY( e1.category() == std::generic_category() );\n \n-  // 2\n+  // 2 error_condition(int, const error_category&)\n   const __gnu_test::test_category cat;\n   std::error_condition e2(e1.value(), cat);\n   VERIFY( e2.value() == e1.value() );\n   VERIFY( e2.category() == cat );\n \n-  // 3\n+  // 3 error_condition(const error_condition&)\n   std::error_condition e3(std::errc::operation_not_supported);\n   VERIFY( e3.value() == int(std::errc::operation_not_supported) );\n   VERIFY( e3.category() == std::generic_category() );\n+\n+  // 4 error_condition(ErrorConditionEnum)\n+  std::error_condition e4(adl::err);\n+  VERIFY( e4.value() == 999 );\n+  VERIFY( e4.category() == adl::cat );\n }\n \n int main()"}]}