{"sha": "c218f6e89d7bee930ad705642cf069262432990a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIxOGY2ZTg5ZDdiZWU5MzBhZDcwNTY0MmNmMDY5MjYyNDMyOTkwYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-08-26T17:06:31Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-08-26T17:06:31Z"}, "message": "Fix ARM ICE for register var asm (\"pc\") (PR target/60606).\n\n\tPR target/60606\n\tPR target/61330\n\t* varasm.c (make_decl_rtl): Clear DECL_ASSEMBLER_NAME and\n\tDECL_HARD_REGISTER and return for invalid register specifications.\n\t* cfgexpand.c (expand_one_var): If expand_one_hard_reg_var clears\n\tDECL_HARD_REGISTER, call expand_one_error_var.\n\t* config/arm/arm.c (arm_hard_regno_mode_ok): Do not allow\n\tCC_REGNUM with non-MODE_CC modes.\n\t(arm_regno_class): Return NO_REGS for PC_REGNUM.\n\ntestsuite:\n\t* gcc.dg/torture/pr60606-1.c, gcc.target/arm/pr60606-2.c,\n\tgcc.target/arm/pr60606-3.c, gcc.target/arm/pr60606-4.c: New tests.\n\nFrom-SVN: r214526", "tree": {"sha": "2f34eb8a53683a3f2846042c1e5dfe9d0d5c16ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f34eb8a53683a3f2846042c1e5dfe9d0d5c16ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c218f6e89d7bee930ad705642cf069262432990a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c218f6e89d7bee930ad705642cf069262432990a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c218f6e89d7bee930ad705642cf069262432990a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c218f6e89d7bee930ad705642cf069262432990a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43f4a446c24f8a950442c0d432788704a0531bf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f4a446c24f8a950442c0d432788704a0531bf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f4a446c24f8a950442c0d432788704a0531bf3"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "93d29a228373304570648243b9873a997094aad9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -1,3 +1,15 @@\n+2014-08-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR target/60606\n+\tPR target/61330\n+\t* varasm.c (make_decl_rtl): Clear DECL_ASSEMBLER_NAME and\n+\tDECL_HARD_REGISTER and return for invalid register specifications.\n+\t* cfgexpand.c (expand_one_var): If expand_one_hard_reg_var clears\n+\tDECL_HARD_REGISTER, call expand_one_error_var.\n+\t* config/arm/arm.c (arm_hard_regno_mode_ok): Do not allow\n+\tCC_REGNUM with non-MODE_CC modes.\n+\t(arm_regno_class): Return NO_REGS for PC_REGNUM.\n+\n 2014-08-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61271"}, {"sha": "34e57b923d751f5c7b1a5be2a79a3fb20e6346f8", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -1307,7 +1307,12 @@ expand_one_var (tree var, bool toplevel, bool really_expand)\n   else if (TREE_CODE (var) == VAR_DECL && DECL_HARD_REGISTER (var))\n     {\n       if (really_expand)\n-        expand_one_hard_reg_var (var);\n+\t{\n+\t  expand_one_hard_reg_var (var);\n+\t  if (!DECL_HARD_REGISTER (var))\n+\t    /* Invalid register specification.  */\n+\t    expand_one_error_var (var);\n+\t}\n     }\n   else if (use_register_for_decl (var))\n     {"}, {"sha": "11e0655ca6761003e3e18bb08ef924f3431815be", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -22970,6 +22970,9 @@ arm_hard_regno_mode_ok (unsigned int regno, enum machine_mode mode)\n \t    || (TARGET_HARD_FLOAT && TARGET_VFP\n \t\t&& regno == VFPCC_REGNUM));\n \n+  if (regno == CC_REGNUM && GET_MODE_CLASS (mode) != MODE_CC)\n+    return false;\n+\n   if (TARGET_THUMB1)\n     /* For the Thumb we only allow values bigger than SImode in\n        registers 0 - 6, so that there is always a second low\n@@ -23066,6 +23069,9 @@ arm_modes_tieable_p (enum machine_mode mode1, enum machine_mode mode2)\n enum reg_class\n arm_regno_class (int regno)\n {\n+  if (regno == PC_REGNUM)\n+    return NO_REGS;\n+\n   if (TARGET_THUMB1)\n     {\n       if (regno == STACK_POINTER_REGNUM)"}, {"sha": "3290e7da34ee8bed4e125194f3242a13059644bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -1,3 +1,10 @@\n+2014-08-26  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR target/60606\n+\tPR target/61330\n+\t* gcc.dg/torture/pr60606-1.c, gcc.target/arm/pr60606-2.c,\n+\tgcc.target/arm/pr60606-3.c, gcc.target/arm/pr60606-4.c: New tests.\n+\n 2014-08-26  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gfortran.dg/bessel_7.f90: Bump allowed precision to avoid"}, {"sha": "c4afae774544dde1448fd37aa348bcd066acacf3", "filename": "gcc/testsuite/gcc.dg/torture/pr60606-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60606-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60606-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr60606-1.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffat-lto-objects\" } */\n+\n+int\n+f (void)\n+{\n+  register unsigned int r asm (\"no-such-register\"); /* { dg-error \"invalid register name\" } */\n+  return r;\n+}"}, {"sha": "7baf88126f8f9e79eca0e9a18669b43665d12183", "filename": "gcc/testsuite/gcc.target/arm/pr60606-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-2.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int\n+f (void)\n+{\n+  register unsigned pc asm (\"pc\"); /* { dg-error \"not general enough\" } */\n+  \n+  return pc > 0x12345678;\n+}"}, {"sha": "60ae27db53d7d45ac5f5851bb65c403b80f1aac6", "filename": "gcc/testsuite/gcc.target/arm/pr60606-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-3.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int\n+f (void)\n+{\n+  register unsigned int r asm (\"cc\"); /* { dg-error \"not general enough|suitable for data type\" } */\n+  return r;\n+}"}, {"sha": "5288777a77bfd53a7968eea16de64eb722cd0eab", "filename": "gcc/testsuite/gcc.target/arm/pr60606-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr60606-4.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+int\n+f (void)\n+{\n+  register unsigned int r[50] asm (\"r1\"); /* { dg-error \"suitable for a register\" } */\n+  return r[1];\n+}"}, {"sha": "ce99a13817115fd056e0795fdceed065d59a2af1", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c218f6e89d7bee930ad705642cf069262432990a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c218f6e89d7bee930ad705642cf069262432990a", "patch": "@@ -1371,6 +1371,11 @@ make_decl_rtl (tree decl)\n \t  /* As a register variable, it has no section.  */\n \t  return;\n \t}\n+      /* Avoid internal errors from invalid register\n+\t specifications.  */\n+      SET_DECL_ASSEMBLER_NAME (decl, NULL_TREE);\n+      DECL_HARD_REGISTER (decl) = 0;\n+      return;\n     }\n   /* Now handle ordinary static variables and functions (in memory).\n      Also handle vars declared register invalidly.  */"}]}