{"sha": "3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I4ZTBjOTEyOWIwZWQzZmUyZTRhYTViYzQ2NmRmNTM0OGUyZDVmZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-02-11T23:39:41Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-11T23:39:41Z"}, "message": "optabs.h (enum optab_index): Add new OTI_log10 and OTI_log2.\n\n2004-02-11  Uros Bizjak  <uros@kss-loka.si>\n\n\t* optabs.h (enum optab_index): Add new OTI_log10 and OTI_log2.\n\t(log10_optab, log2_optab): Define corresponding macros.\n\t* optabs.c (init_optabs): Initialize log10_optab and log2_optab.\n\t* genopinit.c (optabs): Implement log10_optab and log2_optab\n\tusing log10?f2 and log2?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOG10{,F,L}\n\tusing log10_optab, and BUILT_IN_LOG2{,F,L} using log2_optab.\n\t(expand_builtin): Expand BUILT_IN_LOG10{,F,L} and BUILT_IN_LOG2{,F,L}\n\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (log10sf2, log10df2, log10xf2, log2sf2,\n\tlog2df2, log2xf2): New patterns to implement log10, log10f, log10l,\n\tlog2, log2f and log2l built-ins as inline x87 intrinsics.\n\n\t* gcc.dg/builtins-33.c: New test.\n\nFrom-SVN: r77675", "tree": {"sha": "159c66f75d67ab22ee9d79a474ed9f6f66eab4ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/159c66f75d67ab22ee9d79a474ed9f6f66eab4ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/comments", "author": null, "committer": null, "parents": [{"sha": "a6abdce327180878f4753126647b351026b2dcd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6abdce327180878f4753126647b351026b2dcd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6abdce327180878f4753126647b351026b2dcd0"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "22d06d6ee8a3cf8eb5e19851aa088ea490288c53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -1,3 +1,19 @@\n+2004-02-11  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_log10 and OTI_log2.\n+\t(log10_optab, log2_optab): Define corresponding macros.\n+\t* optabs.c (init_optabs): Initialize log10_optab and log2_optab.\n+\t* genopinit.c (optabs): Implement log10_optab and log2_optab\n+\tusing log10?f2 and log2?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle BUILT_IN_LOG10{,F,L}\n+\tusing log10_optab, and BUILT_IN_LOG2{,F,L} using log2_optab.\n+\t(expand_builtin): Expand BUILT_IN_LOG10{,F,L} and BUILT_IN_LOG2{,F,L}\n+\tusing expand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (log10sf2, log10df2, log10xf2, log2sf2,\n+\tlog2df2, log2xf2): New patterns to implement log10, log10f, log10l,\n+\tlog2, log2f and log2l built-ins as inline x87 intrinsics.\n+\n 2004-02-11  Richard Henderson  <rth@redhat.com>\n \n \t* flow.c (insn_dead_p): A clobber of a dead hard register is a"}, {"sha": "a5520a3b97c4dd0a9062487fd4c22f5849d961be", "filename": "gcc/builtins.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -1662,6 +1662,14 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n       errno_set = true; builtin_optab = log_optab; break;\n+    case BUILT_IN_LOG10:\n+    case BUILT_IN_LOG10F:\n+    case BUILT_IN_LOG10L:\n+      errno_set = true; builtin_optab = log10_optab; break;\n+    case BUILT_IN_LOG2:\n+    case BUILT_IN_LOG2F:\n+    case BUILT_IN_LOG2L:\n+      errno_set = true; builtin_optab = log2_optab; break;\n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n     case BUILT_IN_TANL:\n@@ -5130,6 +5138,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_LOG:\n     case BUILT_IN_LOGF:\n     case BUILT_IN_LOGL:\n+    case BUILT_IN_LOG10:\n+    case BUILT_IN_LOG10F:\n+    case BUILT_IN_LOG10L:\n+    case BUILT_IN_LOG2:\n+    case BUILT_IN_LOG2F:\n+    case BUILT_IN_LOG2L:\n     case BUILT_IN_TAN:\n     case BUILT_IN_TANF:\n     case BUILT_IN_TANL:"}, {"sha": "70c21f8fb981a2a20a5f4820d12f49bde8ad4329", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -15154,6 +15154,88 @@\n   emit_move_insn (operands[2], temp);\n })\n \n+(define_expand \"log10sf2\"\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:SF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (3); /* fldlg2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"log10df2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:DF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (3); /* fldlg2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"log10xf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:XF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+\n+  operands[2] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (3); /* fldlg2 */\n+  emit_move_insn (operands[2], temp);\n+})\n+\n+(define_expand \"log2sf2\"\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:SF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n+\n+})\n+\n+(define_expand \"log2df2\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:DF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"log2xf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n+\t      (clobber (match_scratch:XF 3 \"\"))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+  emit_move_insn (operands[2], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n (define_insn \"*fscale_sfxf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")"}, {"sha": "cbdc3dd8d777a3206b1d3d99eb989a7de8f12a3a", "filename": "gcc/genopinit.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -126,6 +126,8 @@ static const char * const optabs[] =\n   \"cos_optab->handlers[$A].insn_code = CODE_FOR_$(cos$a2$)\",\n   \"exp_optab->handlers[$A].insn_code = CODE_FOR_$(exp$a2$)\",\n   \"log_optab->handlers[$A].insn_code = CODE_FOR_$(log$a2$)\",\n+  \"log10_optab->handlers[$A].insn_code = CODE_FOR_$(log10$a2$)\",  \n+  \"log2_optab->handlers[$A].insn_code = CODE_FOR_$(log2$a2$)\",  \n   \"tan_optab->handlers[$A].insn_code = CODE_FOR_$(tan$a2$)\",\n   \"atan_optab->handlers[$A].insn_code = CODE_FOR_$(atan$a2$)\",\n   \"strlen_optab->handlers[$A].insn_code = CODE_FOR_$(strlen$a$)\","}, {"sha": "7a47a6fd61cf7577dc938e1ff118d8c95f270721", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -5263,6 +5263,8 @@ init_optabs (void)\n   cos_optab = init_optab (UNKNOWN);\n   exp_optab = init_optab (UNKNOWN);\n   log_optab = init_optab (UNKNOWN);\n+  log10_optab = init_optab (UNKNOWN);\n+  log2_optab = init_optab (UNKNOWN);\n   tan_optab = init_optab (UNKNOWN);\n   atan_optab = init_optab (UNKNOWN);\n   strlen_optab = init_optab (UNKNOWN);"}, {"sha": "496ba1a6fc8e21a41a2beb034a726df1b160941f", "filename": "gcc/optabs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -156,6 +156,10 @@ enum optab_index\n   OTI_exp,\n   /* Natural Logarithm */\n   OTI_log,\n+  /* Base-10 Logarithm */\n+  OTI_log10,\n+  /* Base-2 Logarithm */\n+  OTI_log2,\n   /* Rounding functions */\n   OTI_floor,\n   OTI_ceil,\n@@ -260,6 +264,8 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define cos_optab (optab_table[OTI_cos])\n #define exp_optab (optab_table[OTI_exp])\n #define log_optab (optab_table[OTI_log])\n+#define log10_optab (optab_table[OTI_log10])\n+#define log2_optab (optab_table[OTI_log2])\n #define floor_optab (optab_table[OTI_floor])\n #define ceil_optab (optab_table[OTI_ceil])\n #define btrunc_optab (optab_table[OTI_trunc])"}, {"sha": "7c1aa663a8fc7642cf876650263b2735031f40df", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -1,3 +1,7 @@\n+2004-02-11  Uros Bizjak  <uros@kss-loka.si>\n+\n+\t* gcc.dg/builtins-33.c: New test.\n+\n 2004-02-11  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* gcc.dg/pr14092-1.c: Use intptr_t for the cast."}, {"sha": "758978f0600ab97f4a556c5c0ad2a029ee8d4695", "filename": "gcc/testsuite/gcc.dg/builtins-33.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-33.c?ref=3b8e0c9129b0ed3fe2e4aa5bc466df5348e2d5fd", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check that log10, log10f, log10l, log2, log2f and log2l\n+   built-in functions compile.\n+\n+   Written by Uros Bizjak, 11th February 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double log10(double);\n+extern double log2(double);\n+extern float log10f(float);\n+extern float log2f(float);\n+extern long double log10l(long double);\n+extern long double log2l(long double);\n+\n+\n+double test1(double x)\n+{\n+  return log10(x);\n+}\n+\n+double test2(double x)\n+{\n+  return log2(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return log10f(x);\n+}\n+\n+float test2f(float x)\n+{\n+  return log2f(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return log10l(x);\n+}\n+\n+long double test2l(long double x)\n+{\n+  return log2l(x);\n+}\n+"}]}