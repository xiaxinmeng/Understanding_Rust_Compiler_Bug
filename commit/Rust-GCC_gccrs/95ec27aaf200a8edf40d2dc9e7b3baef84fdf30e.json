{"sha": "95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlYzI3YWFmMjAwYThlZGY0MGQyZGM5ZTdiM2JhZWY4NGZkZjMwZQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-04-06T21:44:09Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2003-04-06T21:44:09Z"}, "message": "hashtable.c (gcc_obstack_init): Delete this function and everything related to it.\n\n2003-04-06  Steven Bosscher  <steven@gcc.gnu.org>\n\n\t* hashtable.c (gcc_obstack_init): Delete this function\n\tand everything related to it.\n\t* hashtable.h: Remove prototype.\n\t* bitmap.c (bitmap_element_allocate): Cleanup redundant\n\tdefines.  Cleanup some unnecessary whitespace.\n\t* defaults.h (obstack_chunk_alloc): Redefine with\n\tappropriate casts for libiberty obstacks.\n\t(obstack_chunk_free): Ditto.\n\t(OBSTACK_CHUNK_SIZE): Define, default to 0.\n\t(gcc_obstack_init): Define as a call to _obstack_begin.\n\t* tree.c (print_obstack_statistics): Delete this unused\n\tfunction.\n\t* tree.h (obstack): Don't forward-declare.\n\t(print_obstack_statistics): Delete prototype.\n\t(print_obstack_name): Ditto.\n\t(gcc_obstack_init): Ditto.\n\t* rtl.h (gcc_obstack_init): Ditto.\n\t* java/jv-scan.c (gcc_obstack_init): Delete this\n\tfunction, its prototype and related defines.\n\t* java/jvgenmain.c (gcc_obstack_init): Delete this\n\tfunction, and related defines.\n\t* java/parse-scan.y (obstack_chunk_alloc): Don't define.\n\t(obstack_chunk_free): Ditto\n\nFrom-SVN: r65308", "tree": {"sha": "7049cd5a93a5c7b5d3d7721a23bd9ce4c33110ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7049cd5a93a5c7b5d3d7721a23bd9ce4c33110ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/comments", "author": null, "committer": null, "parents": [{"sha": "62e64b0b86d3e084eb7eddebf7187ae19efd9c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e64b0b86d3e084eb7eddebf7187ae19efd9c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e64b0b86d3e084eb7eddebf7187ae19efd9c7d"}], "stats": {"total": 159, "additions": 38, "deletions": 121}, "files": [{"sha": "6cf593c99cce4b0a5c8fa815edeb36edc8c98f23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -1,3 +1,29 @@\n+2003-04-06  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* hashtable.c (gcc_obstack_init): Delete this function\n+\tand everything related to it.\n+\t* hashtable.h: Remove prototype.\n+\t* bitmap.c (bitmap_element_allocate): Cleanup redundant\n+\tdefines.  Cleanup some unnecessary whitespace.\n+\t* defaults.h (obstack_chunk_alloc): Redefine with\n+\tappropriate casts for libiberty obstacks.\n+\t(obstack_chunk_free): Ditto.\n+\t(OBSTACK_CHUNK_SIZE): Define, default to 0.\n+\t(gcc_obstack_init): Define as a call to _obstack_begin.\n+\t* tree.c (print_obstack_statistics): Delete this unused\n+\tfunction.\n+\t* tree.h (obstack): Don't forward-declare.\n+\t(print_obstack_statistics): Delete prototype.\n+\t(print_obstack_name): Ditto.\n+\t(gcc_obstack_init): Ditto.\n+\t* rtl.h (gcc_obstack_init): Ditto.\n+\t* java/jv-scan.c (gcc_obstack_init): Delete this\n+\tfunction, its prototype and related defines.\n+\t* java/jvgenmain.c (gcc_obstack_init): Delete this\n+\tfunction, and related defines.\n+\t* java/parse-scan.y (obstack_chunk_alloc): Don't define.\n+\t(obstack_chunk_free): Ditto\n+\n 2003-04-06  Geoffrey Keating  <geoffk@apple.com>\n \n \t* dbxout.c (dbxout_handle_pch): Move prototype out from"}, {"sha": "f631543963ce135af0cd0d180fe8cedba336dc70", "filename": "gcc/bitmap.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -125,29 +125,17 @@ bitmap_element_allocate (head)\n \t  if (!bitmap_obstack_init)\n \t    {\n \t      bitmap_obstack_init = TRUE;\n-\t      \n-\t      /* Let particular systems override the size of a chunk.  */\n-#ifndef OBSTACK_CHUNK_SIZE\n-#define OBSTACK_CHUNK_SIZE 0\n-#endif\n-\t      /* Let them override the alloc and free routines too.  */\n-#ifndef OBSTACK_CHUNK_ALLOC\n-#define OBSTACK_CHUNK_ALLOC xmalloc\n-#endif\n-#ifndef OBSTACK_CHUNK_FREE\n-#define OBSTACK_CHUNK_FREE free\n-#endif\n-\t      \n+\n #if !defined(__GNUC__) || (__GNUC__ < 2)\n #define __alignof__(type) 0\n #endif\n-\t      \n+\n \t      obstack_specify_allocation (&bitmap_obstack, OBSTACK_CHUNK_SIZE,\n \t\t\t\t\t  __alignof__ (bitmap_element),\n-\t\t\t\t\t  (void *(*) PARAMS ((long))) OBSTACK_CHUNK_ALLOC,\n-\t\t\t\t\t  (void (*) PARAMS ((void *))) OBSTACK_CHUNK_FREE);\n+\t\t\t\t\t  obstack_chunk_alloc,\n+\t\t\t\t\t  obstack_chunk_free);\n \t    }\n-\t  \n+\n \t  element = (bitmap_element *) obstack_alloc (&bitmap_obstack,\n \t\t\t\t\t\t      sizeof (bitmap_element));\n \t}"}, {"sha": "05e0c92137199ed00102e2039375b399ccec1438", "filename": "gcc/defaults.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -27,8 +27,13 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GET_ENVIRONMENT(VALUE, NAME) do { (VALUE) = getenv (NAME); } while (0)\n #endif\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n+#define obstack_chunk_alloc\t((void *(*) (long)) xmalloc)\n+#define obstack_chunk_free\t((void (*) (void *)) free)\n+#define OBSTACK_CHUNK_SIZE\t0\n+#define gcc_obstack_init(OBSTACK)\t\t\t\\\n+  _obstack_begin ((OBSTACK), OBSTACK_CHUNK_SIZE, 0,\t\\\n+\t\t  obstack_chunk_alloc,\t\t\t\\\n+\t\t  obstack_chunk_free)\n \n /* Define default standard character escape sequences.  */\n #ifndef TARGET_BELL"}, {"sha": "63df6ff96a062eaaf0fc8328af479edcb009cf58", "filename": "gcc/hashtable.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fhashtable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fhashtable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.c?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -35,28 +35,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n static unsigned int calc_hash PARAMS ((const unsigned char *, unsigned int));\n static void ht_expand PARAMS ((hash_table *));\n \n-/* Let particular systems override the size of a chunk.  */\n-#ifndef OBSTACK_CHUNK_SIZE\n-#define OBSTACK_CHUNK_SIZE 0\n-#endif\n-  /* Let them override the alloc and free routines too.  */\n-#ifndef OBSTACK_CHUNK_ALLOC\n-#define OBSTACK_CHUNK_ALLOC xmalloc\n-#endif\n-#ifndef OBSTACK_CHUNK_FREE\n-#define OBSTACK_CHUNK_FREE free\n-#endif\n-\n-/* Initialize an obstack.  */\n-void\n-gcc_obstack_init (obstack)\n-     struct obstack *obstack;\n-{\n-  _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) PARAMS ((long))) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) PARAMS ((void *))) OBSTACK_CHUNK_FREE);\n-}\n-\n /* Calculate the hash of the string STR of length LEN.  */\n \n static unsigned int"}, {"sha": "20445d7d321cc065f751bfa00901e758ffc26bb2", "filename": "gcc/hashtable.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhashtable.h?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -58,8 +58,6 @@ struct ht\n   unsigned int collisions;\n };\n \n-extern void gcc_obstack_init PARAMS ((struct obstack *));\n-\n /* Initialize the hashtable with 2 ^ order entries.  */\n extern hash_table *ht_create PARAMS ((unsigned int order));\n "}, {"sha": "7e0e81320e5f00cbc3c84b6cde9f0a6f8f8f2012", "filename": "gcc/java/jv-scan.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fjv-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fjv-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjv-scan.c?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -42,7 +42,6 @@ Boston, MA 02111-1307, USA.  */\n extern void fatal_error (const char *s, ...)\n      ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n void warning (const char *s, ...) ATTRIBUTE_PRINTF_1;\n-void gcc_obstack_init (struct obstack *obstack);\n void report (void);\n \n static void usage (void) ATTRIBUTE_NORETURN;\n@@ -262,22 +261,3 @@ warning (const char *s, ...)\n   fputc ('\\n', stderr);\n   va_end (ap);\n }\n-\n-void\n-gcc_obstack_init (struct obstack *obstack)\n-{\n-  /* Let particular systems override the size of a chunk.  */\n-#ifndef OBSTACK_CHUNK_SIZE\n-#define OBSTACK_CHUNK_SIZE 0\n-#endif\n-  /* Let them override the alloc and free routines too.  */\n-#ifndef OBSTACK_CHUNK_ALLOC\n-#define OBSTACK_CHUNK_ALLOC xmalloc\n-#endif\n-#ifndef OBSTACK_CHUNK_FREE\n-#define OBSTACK_CHUNK_FREE free\n-#endif\n-  _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) (long)) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) (void *)) OBSTACK_CHUNK_FREE);\n-}"}, {"sha": "1bf2d77cb52012694dc45da50974329384210124", "filename": "gcc/java/jvgenmain.c", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fjvgenmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fjvgenmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvgenmain.c?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -39,25 +39,6 @@ static char * do_mangle_classname (const char *string);\n struct obstack  name_obstack;\n struct obstack *mangle_obstack = &name_obstack;\n \n-void\n-gcc_obstack_init (struct obstack *obstack)\n-{\n-  /* Let particular systems override the size of a chunk.  */\n-#ifndef OBSTACK_CHUNK_SIZE\n-#define OBSTACK_CHUNK_SIZE 0\n-#endif\n-  /* Let them override the alloc and free routines too.  */\n-#ifndef OBSTACK_CHUNK_ALLOC\n-#define OBSTACK_CHUNK_ALLOC xmalloc\n-#endif\n-#ifndef OBSTACK_CHUNK_FREE\n-#define OBSTACK_CHUNK_FREE free\n-#endif\n-  _obstack_begin (obstack, OBSTACK_CHUNK_SIZE, 0,\n-\t\t  (void *(*) (long)) OBSTACK_CHUNK_ALLOC,\n-\t\t  (void (*) (void *)) OBSTACK_CHUNK_FREE);\n-}\n-\n static void usage (const char *) ATTRIBUTE_NORETURN;\n \n static void"}, {"sha": "0c8795f2b1d414cce5346baf1df5e0d330a609a4", "filename": "gcc/java/parse-scan.y", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fparse-scan.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Fjava%2Fparse-scan.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse-scan.y?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -45,9 +45,6 @@ definitions and other extensions.  */\n #include \"obstack.h\"\n #include \"toplev.h\"\n \n-#define obstack_chunk_alloc xmalloc\n-#define obstack_chunk_free free\n-\n extern char *input_filename;\n extern FILE *finput, *out;\n "}, {"sha": "9174bf71f43e252ace3d06d0fe59f3d80657bc9b", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -1932,10 +1932,6 @@ extern int no_new_pseudos;\n \n extern int rtx_to_tree_code\tPARAMS ((enum rtx_code));\n \n-/* In tree.c */\n-struct obstack;\n-extern void gcc_obstack_init\t\tPARAMS ((struct obstack *));\n-\n /* In cse.c */\n struct cse_basic_block_data;\n "}, {"sha": "19dfc5ad09a2f115f8d4113140f55c4e10a0a4b0", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -4255,29 +4255,6 @@ get_callee_fndecl (call)\n   return NULL_TREE;\n }\n \n-/* Print debugging information about the obstack O, named STR.  */\n-\n-void\n-print_obstack_statistics (str, o)\n-     const char *str;\n-     struct obstack *o;\n-{\n-  struct _obstack_chunk *chunk = o->chunk;\n-  int n_chunks = 1;\n-  int n_alloc = 0;\n-\n-  n_alloc += o->next_free - chunk->contents;\n-  chunk = chunk->prev;\n-  while (chunk)\n-    {\n-      n_chunks += 1;\n-      n_alloc += chunk->limit - &chunk->contents[0];\n-      chunk = chunk->prev;\n-    }\n-  fprintf (stderr, \"obstack %s: %u bytes, %d chunks\\n\",\n-\t   str, n_alloc, n_chunks);\n-}\n-\n /* Print debugging information about tree nodes generated during the compile,\n    and any language-specific information.  */\n "}, {"sha": "e276a877b74d06698cb35360ba920f15b83ececa", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=95ec27aaf200a8edf40d2dc9e7b3baef84fdf30e", "patch": "@@ -2941,8 +2941,6 @@ extern int alias_sets_conflict_p\t\tPARAMS ((HOST_WIDE_INT,\n extern int readonly_fields_p\t\t\tPARAMS ((tree));\n extern int objects_must_conflict_p\t\tPARAMS ((tree, tree));\n \n-struct obstack;\n-\n /* In tree.c */\n extern int really_constant_p\t\tPARAMS ((tree));\n extern int int_fits_type_p\t\tPARAMS ((tree, tree));\n@@ -2959,20 +2957,13 @@ extern void type_hash_add\t\tPARAMS ((unsigned int, tree));\n extern unsigned int type_hash_list\tPARAMS ((tree));\n extern int simple_cst_list_equal\tPARAMS ((tree, tree));\n extern void dump_tree_statistics\tPARAMS ((void));\n-extern void print_obstack_statistics\tPARAMS ((const char *,\n-\t\t\t\t\t\tstruct obstack *));\n-#ifdef BUFSIZ\n-extern void print_obstack_name\t\tPARAMS ((char *, FILE *,\n-\t\t\t\t\t\t const char *));\n-#endif\n extern void expand_function_end\t\tPARAMS ((const char *, int, int));\n extern void expand_function_start\tPARAMS ((tree, int));\n extern void expand_pending_sizes        PARAMS ((tree));\n \n extern int real_onep\t\t\tPARAMS ((tree));\n extern int real_twop\t\t\tPARAMS ((tree));\n extern int real_minus_onep\t\tPARAMS ((tree));\n-extern void gcc_obstack_init\t\tPARAMS ((struct obstack *));\n extern void init_ttree\t\t\tPARAMS ((void));\n extern void build_common_tree_nodes\tPARAMS ((int));\n extern void build_common_tree_nodes_2\tPARAMS ((int));"}]}