{"sha": "304cfd9a7ba76b86fb3c947465c7999597476c42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA0Y2ZkOWE3YmE3NmI4NmZiM2M5NDc0NjVjNzk5OTU5NzQ3NmM0Mg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-26T18:09:09Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-11-26T18:09:09Z"}, "message": "compiler: If type defined as type, forward hash/equal functions.\n\nFixes http://golang.org/issue/6789 .\n\nFrom-SVN: r205404", "tree": {"sha": "3744faa04dd4a58015cf879b79eb21588aaf4339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3744faa04dd4a58015cf879b79eb21588aaf4339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/304cfd9a7ba76b86fb3c947465c7999597476c42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304cfd9a7ba76b86fb3c947465c7999597476c42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/304cfd9a7ba76b86fb3c947465c7999597476c42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/304cfd9a7ba76b86fb3c947465c7999597476c42/comments", "author": null, "committer": null, "parents": [{"sha": "08af82b017a63c7a91937af2d6c72232a53de47d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08af82b017a63c7a91937af2d6c72232a53de47d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08af82b017a63c7a91937af2d6c72232a53de47d"}], "stats": {"total": 109, "additions": 107, "deletions": 2}, "files": [{"sha": "8c5d038a0b19080da570933fef517dc1f221fc39", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 100, "deletions": 2, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304cfd9a7ba76b86fb3c947465c7999597476c42/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304cfd9a7ba76b86fb3c947465c7999597476c42/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=304cfd9a7ba76b86fb3c947465c7999597476c42", "patch": "@@ -1833,7 +1833,9 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n \t\t\t\t\t       bloc);\n   gogo->start_block(bloc);\n \n-  if (this->struct_type() != NULL)\n+  if (name != NULL && name->real_type()->named_type() != NULL)\n+    this->write_named_hash(gogo, name, hash_fntype, equal_fntype);\n+  else if (this->struct_type() != NULL)\n     this->struct_type()->write_hash_function(gogo, name, hash_fntype,\n \t\t\t\t\t     equal_fntype);\n   else if (this->array_type() != NULL)\n@@ -1851,7 +1853,9 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n \t\t\t\t\t\tfalse, bloc);\n   gogo->start_block(bloc);\n \n-  if (this->struct_type() != NULL)\n+  if (name != NULL && name->real_type()->named_type() != NULL)\n+    this->write_named_equal(gogo, name);\n+  else if (this->struct_type() != NULL)\n     this->struct_type()->write_equal_function(gogo, name);\n   else if (this->array_type() != NULL)\n     this->array_type()->write_equal_function(gogo, name);\n@@ -1864,6 +1868,100 @@ Type::write_specific_type_functions(Gogo* gogo, Named_type* name,\n   gogo->finish_function(bloc);\n }\n \n+// Write a hash function that simply calls the hash function for a\n+// named type.  This is used when one named type is defined as\n+// another.  This ensures that this case works when the other named\n+// type is defined in another package and relies on calling hash\n+// functions defined only in that package.\n+\n+void\n+Type::write_named_hash(Gogo* gogo, Named_type* name,\n+\t\t       Function_type* hash_fntype, Function_type* equal_fntype)\n+{\n+  Location bloc = Linemap::predeclared_location();\n+\n+  Named_type* base_type = name->real_type()->named_type();\n+  go_assert(base_type != NULL);\n+\n+  // The pointer to the type we are going to hash.  This is an\n+  // unsafe.Pointer.\n+  Named_object* key_arg = gogo->lookup(\"key\", NULL);\n+  go_assert(key_arg != NULL);\n+\n+  // The size of the type we are going to hash.\n+  Named_object* keysz_arg = gogo->lookup(\"key_size\", NULL);\n+  go_assert(keysz_arg != NULL);\n+\n+  Named_object* hash_fn;\n+  Named_object* equal_fn;\n+  name->real_type()->type_functions(gogo, base_type, hash_fntype, equal_fntype,\n+\t\t\t\t    &hash_fn, &equal_fn);\n+\n+  // Call the hash function for the base type.\n+  Expression* key_ref = Expression::make_var_reference(key_arg, bloc);\n+  Expression* keysz_ref = Expression::make_var_reference(keysz_arg, bloc);\n+  Expression_list* args = new Expression_list();\n+  args->push_back(key_ref);\n+  args->push_back(keysz_ref);\n+  Expression* func = Expression::make_func_reference(hash_fn, NULL, bloc);\n+  Expression* call = Expression::make_call(func, args, false, bloc);\n+\n+  // Return the hash of the base type.\n+  Expression_list* vals = new Expression_list();\n+  vals->push_back(call);\n+  Statement* s = Statement::make_return_statement(vals, bloc);\n+  gogo->add_statement(s);\n+}\n+\n+// Write an equality function that simply calls the equality function\n+// for a named type.  This is used when one named type is defined as\n+// another.  This ensures that this case works when the other named\n+// type is defined in another package and relies on calling equality\n+// functions defined only in that package.\n+\n+void\n+Type::write_named_equal(Gogo* gogo, Named_type* name)\n+{\n+  Location bloc = Linemap::predeclared_location();\n+\n+  // The pointers to the types we are going to compare.  These have\n+  // type unsafe.Pointer.\n+  Named_object* key1_arg = gogo->lookup(\"key1\", NULL);\n+  Named_object* key2_arg = gogo->lookup(\"key2\", NULL);\n+  go_assert(key1_arg != NULL && key2_arg != NULL);\n+\n+  Named_type* base_type = name->real_type()->named_type();\n+  go_assert(base_type != NULL);\n+\n+  // Build temporaries with the base type.\n+  Type* pt = Type::make_pointer_type(base_type);\n+\n+  Expression* ref = Expression::make_var_reference(key1_arg, bloc);\n+  ref = Expression::make_cast(pt, ref, bloc);\n+  Temporary_statement* p1 = Statement::make_temporary(pt, ref, bloc);\n+  gogo->add_statement(p1);\n+\n+  ref = Expression::make_var_reference(key2_arg, bloc);\n+  ref = Expression::make_cast(pt, ref, bloc);\n+  Temporary_statement* p2 = Statement::make_temporary(pt, ref, bloc);\n+  gogo->add_statement(p2);\n+\n+  // Compare the values for equality.\n+  Expression* t1 = Expression::make_temporary_reference(p1, bloc);\n+  t1 = Expression::make_unary(OPERATOR_MULT, t1, bloc);\n+\n+  Expression* t2 = Expression::make_temporary_reference(p2, bloc);\n+  t2 = Expression::make_unary(OPERATOR_MULT, t2, bloc);\n+\n+  Expression* cond = Expression::make_binary(OPERATOR_EQEQ, t1, t2, bloc);\n+\n+  // Return the equality comparison.\n+  Expression_list* vals = new Expression_list();\n+  vals->push_back(cond);\n+  Statement* s = Statement::make_return_statement(vals, bloc);\n+  gogo->add_statement(s);\n+}\n+\n // Return a composite literal for the type descriptor for a plain type\n // of kind RUNTIME_TYPE_KIND named NAME.\n "}, {"sha": "1bd8ce6cf8f3c8f71abf18e93e2d55b6a2fb2b86", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/304cfd9a7ba76b86fb3c947465c7999597476c42/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/304cfd9a7ba76b86fb3c947465c7999597476c42/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=304cfd9a7ba76b86fb3c947465c7999597476c42", "patch": "@@ -1138,6 +1138,13 @@ class Type\n \t\t\t  Function_type* equal_fntype, Named_object** hash_fn,\n \t\t\t  Named_object** equal_fn);\n \n+  void\n+  write_named_hash(Gogo*, Named_type*, Function_type* hash_fntype,\n+\t\t   Function_type* equal_fntype);\n+\n+  void\n+  write_named_equal(Gogo*, Named_type*);\n+\n   // Build a composite literal for the uncommon type information.\n   Expression*\n   uncommon_type_constructor(Gogo*, Type* uncommon_type,"}]}