{"sha": "4c4dfe21df4c4147d9c676a8c768cc303491293e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0ZGZlMjFkZjRjNDE0N2Q5YzY3NmE4Yzc2OGNjMzAzNDkxMjkzZQ==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-13T15:56:29Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-11-18T09:21:26Z"}, "message": "libphobos: Merge upstream phobos 7948e0967.\n\nRemoves deprecated functions from std.string module.\n\nReviewed-on: https://github.com/dlang/phobos/pull/7694\n\nlibphobos/ChangeLog:\n\n\t* src/MERGE: Merge upstream phobos 7948e0967.", "tree": {"sha": "4ed6b0f6178613aafe47f50a59e8074cecf25829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ed6b0f6178613aafe47f50a59e8074cecf25829"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c4dfe21df4c4147d9c676a8c768cc303491293e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4dfe21df4c4147d9c676a8c768cc303491293e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c4dfe21df4c4147d9c676a8c768cc303491293e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c4dfe21df4c4147d9c676a8c768cc303491293e/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba009860aec4619f2424f5bdee812f14572dc3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba009860aec4619f2424f5bdee812f14572dc3cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba009860aec4619f2424f5bdee812f14572dc3cc"}], "stats": {"total": 269, "additions": 1, "deletions": 268}, "files": [{"sha": "de86ff5b65b5b792a97f7ecb175aebd2992826c6", "filename": "libphobos/src/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4dfe21df4c4147d9c676a8c768cc303491293e/libphobos%2Fsrc%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4dfe21df4c4147d9c676a8c768cc303491293e/libphobos%2Fsrc%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMERGE?ref=4c4dfe21df4c4147d9c676a8c768cc303491293e", "patch": "@@ -1,4 +1,4 @@\n-021ae0df76727a32809a29887095ab7093489ea3\n+7948e096735adbc093333da789fc28feadce24b0\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/phobos repository."}, {"sha": "1128a0903046b01b62e6cfd77a089ba65db17b65", "filename": "libphobos/src/std/string.d", "status": "modified", "additions": 0, "deletions": 267, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c4dfe21df4c4147d9c676a8c768cc303491293e/libphobos%2Fsrc%2Fstd%2Fstring.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c4dfe21df4c4147d9c676a8c768cc303491293e/libphobos%2Fsrc%2Fstd%2Fstring.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2Fstd%2Fstring.d?ref=4c4dfe21df4c4147d9c676a8c768cc303491293e", "patch": "@@ -5174,273 +5174,6 @@ body\n     assert(buffer.data == \"h5 rd\");\n }\n \n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-bool inPattern(S)(dchar c, in S pattern) @safe pure @nogc\n-if (isSomeString!S)\n-{\n-    bool result = false;\n-    int range = 0;\n-    dchar lastc;\n-\n-    foreach (size_t i, dchar p; pattern)\n-    {\n-        if (p == '^' && i == 0)\n-        {\n-            result = true;\n-            if (i + 1 == pattern.length)\n-                return (c == p);    // or should this be an error?\n-        }\n-        else if (range)\n-        {\n-            range = 0;\n-            if (lastc <= c && c <= p || c == p)\n-                return !result;\n-        }\n-        else if (p == '-' && i > result && i + 1 < pattern.length)\n-        {\n-            range = 1;\n-            continue;\n-        }\n-        else if (c == p)\n-            return !result;\n-        lastc = p;\n-    }\n-    return result;\n-}\n-\n-\n-deprecated\n-@safe pure @nogc unittest\n-{\n-    import std.conv : to;\n-    import std.exception : assertCTFEable;\n-\n-    assertCTFEable!(\n-    {\n-    assert(inPattern('x', \"x\") == 1);\n-    assert(inPattern('x', \"y\") == 0);\n-    assert(inPattern('x', string.init) == 0);\n-    assert(inPattern('x', \"^y\") == 1);\n-    assert(inPattern('x', \"yxxy\") == 1);\n-    assert(inPattern('x', \"^yxxy\") == 0);\n-    assert(inPattern('x', \"^abcd\") == 1);\n-    assert(inPattern('^', \"^^\") == 0);\n-    assert(inPattern('^', \"^\") == 1);\n-    assert(inPattern('^', \"a^\") == 1);\n-    assert(inPattern('x', \"a-z\") == 1);\n-    assert(inPattern('x', \"A-Z\") == 0);\n-    assert(inPattern('x', \"^a-z\") == 0);\n-    assert(inPattern('x', \"^A-Z\") == 1);\n-    assert(inPattern('-', \"a-\") == 1);\n-    assert(inPattern('-', \"^A-\") == 0);\n-    assert(inPattern('a', \"z-a\") == 1);\n-    assert(inPattern('z', \"z-a\") == 1);\n-    assert(inPattern('x', \"z-a\") == 0);\n-    });\n-}\n-\n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-bool inPattern(S)(dchar c, S[] patterns) @safe pure @nogc\n-if (isSomeString!S)\n-{\n-    foreach (string pattern; patterns)\n-    {\n-        if (!inPattern(c, pattern))\n-        {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-size_t countchars(S, S1)(S s, in S1 pattern) @safe pure @nogc\n-if (isSomeString!S && isSomeString!S1)\n-{\n-    size_t count;\n-    foreach (dchar c; s)\n-    {\n-        count += inPattern(c, pattern);\n-    }\n-    return count;\n-}\n-\n-deprecated\n-@safe pure @nogc unittest\n-{\n-    import std.conv : to;\n-    import std.exception : assertCTFEable;\n-\n-    assertCTFEable!(\n-    {\n-    assert(countchars(\"abc\", \"a-c\") == 3);\n-    assert(countchars(\"hello world\", \"or\") == 3);\n-    });\n-}\n-\n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-S removechars(S)(S s, in S pattern) @safe pure\n-if (isSomeString!S)\n-{\n-    import std.utf : encode;\n-\n-    Unqual!(typeof(s[0]))[] r;\n-    bool changed = false;\n-\n-    foreach (size_t i, dchar c; s)\n-    {\n-        if (inPattern(c, pattern))\n-        {\n-            if (!changed)\n-            {\n-                changed = true;\n-                r = s[0 .. i].dup;\n-            }\n-            continue;\n-        }\n-        if (changed)\n-        {\n-            encode(r, c);\n-        }\n-    }\n-    if (changed)\n-        return r;\n-    else\n-        return s;\n-}\n-\n-deprecated\n-@safe pure unittest\n-{\n-    import std.conv : to;\n-    import std.exception : assertCTFEable;\n-\n-    assertCTFEable!(\n-    {\n-    assert(removechars(\"abc\", \"a-c\").length == 0);\n-    assert(removechars(\"hello world\", \"or\") == \"hell wld\");\n-    assert(removechars(\"hello world\", \"d\") == \"hello worl\");\n-    assert(removechars(\"hah\", \"h\") == \"a\");\n-    });\n-}\n-\n-deprecated\n-@safe pure unittest\n-{\n-    assert(removechars(\"abc\", \"x\") == \"abc\");\n-}\n-\n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-S squeeze(S)(S s, in S pattern = null)\n-{\n-    import std.utf : encode, stride;\n-\n-    Unqual!(typeof(s[0]))[] r;\n-    dchar lastc;\n-    size_t lasti;\n-    int run;\n-    bool changed;\n-\n-    foreach (size_t i, dchar c; s)\n-    {\n-        if (run && lastc == c)\n-        {\n-            changed = true;\n-        }\n-        else if (pattern is null || inPattern(c, pattern))\n-        {\n-            run = 1;\n-            if (changed)\n-            {\n-                if (r is null)\n-                    r = s[0 .. lasti].dup;\n-                encode(r, c);\n-            }\n-            else\n-                lasti = i + stride(s, i);\n-            lastc = c;\n-        }\n-        else\n-        {\n-            run = 0;\n-            if (changed)\n-            {\n-                if (r is null)\n-                    r = s[0 .. lasti].dup;\n-                encode(r, c);\n-            }\n-        }\n-    }\n-    return changed ? ((r is null) ? s[0 .. lasti] : cast(S) r) : s;\n-}\n-\n-deprecated\n-@system pure unittest\n-{\n-    import std.conv : to;\n-    import std.exception : assertCTFEable;\n-\n-    assertCTFEable!(\n-    {\n-    string s;\n-\n-    assert(squeeze(\"hello\") == \"helo\");\n-\n-    s = \"abcd\";\n-    assert(squeeze(s) is s);\n-    s = \"xyzz\";\n-    assert(squeeze(s).ptr == s.ptr); // should just be a slice\n-\n-    assert(squeeze(\"hello goodbyee\", \"oe\") == \"hello godbye\");\n-    });\n-}\n-\n-//@@@DEPRECATED_2.086@@@\n-deprecated(\"This function is obsolete. It is available in https://github.com/dlang/undeaD if necessary.\")\n-S1 munch(S1, S2)(ref S1 s, S2 pattern) @safe pure @nogc\n-{\n-    size_t j = s.length;\n-    foreach (i, dchar c; s)\n-    {\n-        if (!inPattern(c, pattern))\n-        {\n-            j = i;\n-            break;\n-        }\n-    }\n-    scope(exit) s = s[j .. $];\n-    return s[0 .. j];\n-}\n-\n-///\n-deprecated\n-@safe pure @nogc unittest\n-{\n-    string s = \"123abc\";\n-    string t = munch(s, \"0123456789\");\n-    assert(t == \"123\" && s == \"abc\");\n-    t = munch(s, \"0123456789\");\n-    assert(t == \"\" && s == \"abc\");\n-}\n-\n-deprecated\n-@safe pure @nogc unittest\n-{\n-    string s = \"123\u20acabc\";\n-    string t = munch(s, \"0123456789\");\n-    assert(t == \"123\" && s == \"\u20acabc\");\n-    t = munch(s, \"0123456789\");\n-    assert(t == \"\" && s == \"\u20acabc\");\n-    t = munch(s, \"\u00a3$\u20ac\u00a5\");\n-    assert(t == \"\u20ac\" && s == \"abc\");\n-}\n-\n-\n /**********************************************\n  * Return string that is the 'successor' to s[].\n  * If the rightmost character is a-zA-Z0-9, it is incremented within"}]}