{"sha": "301e2a16c443924c90e0d038862e957165dd899d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAxZTJhMTZjNDQzOTI0YzkwZTBkMDM4ODYyZTk1NzE2NWRkODk5ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-01-23T15:48:08Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-04T09:11:19Z"}, "message": "[Ada] New package Ada.Task_Initialization\n\n2020-06-04  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* Makefile.rtl: add a-tasini object\n\t* impunit.adb (Non_Imp_File_Names_95): Add s-tasini.\n\t* libgnarl/a-tasini.ads, libgnarl/a-tasini.adb: New files.\n\t* libgnarl/s-taskin.ads (Global_Initialization_Handler): New.\n\t* libgnarl/s-tassta.adb (Task_Wrapper): Call\n\tGlobal_Initialization_Handler if non null.", "tree": {"sha": "8a6e08af1b2c1f9536342dbdb0b69ae1e922a55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a6e08af1b2c1f9536342dbdb0b69ae1e922a55d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/301e2a16c443924c90e0d038862e957165dd899d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301e2a16c443924c90e0d038862e957165dd899d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301e2a16c443924c90e0d038862e957165dd899d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301e2a16c443924c90e0d038862e957165dd899d/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9531ffdaafe38f8cf07481430daba035e855bdf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9531ffdaafe38f8cf07481430daba035e855bdf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9531ffdaafe38f8cf07481430daba035e855bdf4"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "b09159e7e9acbb924ce6aaa392e65f3c0797d5c7", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -39,6 +39,7 @@ GNATRTL_TASKING_OBJS= \\\n   a-sytaco$(objext) \\\n   a-tasatt$(objext) \\\n   a-taside$(objext) \\\n+  a-tasini$(objext) \\\n   a-taster$(objext) \\\n   g-boubuf$(objext) \\\n   g-boumai$(objext) \\"}, {"sha": "7561a198a36be2a99b2abfb0c88727c215d9505f", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -181,6 +181,7 @@ package body Impunit is\n     (\"a-ssicst\", F),  -- Ada.Streams.Stream_IO.C_Streams\n     (\"a-suteio\", F),  -- Ada.Strings.Unbounded.Text_IO\n     (\"a-swuwti\", F),  -- Ada.Strings.Wide_Unbounded.Wide_Text_IO\n+    (\"a-tasini\", F),  -- Ada.Task_Initialization\n     (\"a-tiocst\", F),  -- Ada.Text_IO.C_Streams\n     (\"a-wtcstr\", F),  -- Ada.Wide_Text_IO.C_Streams\n "}, {"sha": "b1f898f54169d8596eb67ca9b0dce84107b515cc", "filename": "gcc/ada/libgnarl/a-tasini.adb", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fa-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fa-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-tasini.adb?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -0,0 +1,46 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--              A D A . T A S K _ I N I T I A L I Z A T I O N               --\n+--                                                                          --\n+--                                  B o d y                                 --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+with Ada.Unchecked_Conversion;\n+with System.Tasking;\n+\n+package body Ada.Task_Initialization is\n+\n+   function To_STIH is new Ada.Unchecked_Conversion\n+     (Initialization_Handler, System.Tasking.Initialization_Handler);\n+\n+   --------------------------------\n+   -- Set_Initialization_Handler --\n+   --------------------------------\n+\n+   procedure Set_Initialization_Handler (Handler : Initialization_Handler) is\n+   begin\n+      System.Tasking.Global_Initialization_Handler := To_STIH (Handler);\n+   end Set_Initialization_Handler;\n+\n+end Ada.Task_Initialization;"}, {"sha": "867f8c519946beb75de0f4628f3ffd90232ffc65", "filename": "gcc/ada/libgnarl/a-tasini.ads", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fa-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fa-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fa-tasini.ads?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -0,0 +1,42 @@\n+------------------------------------------------------------------------------\n+--                                                                          --\n+--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --\n+--                                                                          --\n+--              A D A . T A S K _ I N I T I A L I Z A T I O N               --\n+--                                                                          --\n+--                                  S p e c                                 --\n+--                                                                          --\n+--             Copyright (C) 2020, Free Software Foundation, Inc.           --\n+--                                                                          --\n+-- GNARL is free software; you can  redistribute it  and/or modify it under --\n+-- terms of the  GNU General Public License as published  by the Free Soft- --\n+-- ware  Foundation;  either version 3,  or (at your option) any later ver- --\n+-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n+-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n+-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --\n+--                                                                          --\n+-- As a special exception under Section 7 of GPL version 3, you are granted --\n+-- additional permissions described in the GCC Runtime Library Exception,   --\n+-- version 3.1, as published by the Free Software Foundation.               --\n+--                                                                          --\n+-- You should have received a copy of the GNU General Public License and    --\n+-- a copy of the GCC Runtime Library Exception along with this program;     --\n+-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --\n+-- <http://www.gnu.org/licenses/>.                                          --\n+--                                                                          --\n+------------------------------------------------------------------------------\n+\n+--  This package provides a way to set up a global initialization handler\n+--  when tasks start.\n+\n+package Ada.Task_Initialization is\n+   pragma Preelaborate (Task_Initialization);\n+\n+   type Initialization_Handler is access procedure;\n+\n+   procedure Set_Initialization_Handler (Handler : Initialization_Handler);\n+   --  Set the global task initialization handler to Handler\n+\n+private\n+   pragma Favor_Top_Level (Initialization_Handler);\n+end Ada.Task_Initialization;"}, {"sha": "db1e3b9df326c3b416f43aceb6ec7a05bd2234b7", "filename": "gcc/ada/libgnarl/s-taskin.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -368,6 +368,14 @@ package System.Tasking is\n    --  Used to represent protected procedures to be executed when task\n    --  terminates.\n \n+   type Initialization_Handler is access procedure;\n+   pragma Favor_Top_Level (Initialization_Handler);\n+   --  Use to represent procedures to be executed at task initialization.\n+\n+   Global_Initialization_Handler : Initialization_Handler := null;\n+   pragma Atomic (Global_Initialization_Handler);\n+   --  Global handler called when each task initializes.\n+\n    ------------------------------------\n    -- Dispatching domain definitions --\n    ------------------------------------"}, {"sha": "c5940270f6b2bdd3e8d9140d79373d27a0746f76", "filename": "gcc/ada/libgnarl/s-tassta.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/301e2a16c443924c90e0d038862e957165dd899d/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tassta.adb?ref=301e2a16c443924c90e0d038862e957165dd899d", "patch": "@@ -1187,6 +1187,12 @@ package body System.Tasking.Stages is\n          --  we do not call Set_Jmpbuf_Address (which needs Self) before we\n          --  set Self in Enter_Task\n \n+         --  Call the initialization hook if any\n+\n+         if Global_Initialization_Handler /= null then\n+            Global_Initialization_Handler.all;\n+         end if;\n+\n          --  Call the task body procedure\n \n          --  The task body is called with abort still deferred. That"}]}