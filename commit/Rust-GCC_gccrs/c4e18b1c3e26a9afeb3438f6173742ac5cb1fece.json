{"sha": "c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlMThiMWMzZTI2YTlhZmViMzQzOGY2MTczNzQyYWM1Y2IxZmVjZQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2004-10-14T22:30:47Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2004-10-14T22:30:47Z"}, "message": "darwin.h (ASM_SPEC): Delete.\n\n2004-10-14  Geoffrey Keating  <geoffk@apple.com>\n\n\t* config/rs6000/darwin.h (ASM_SPEC): Delete.\n\t(TARGET_ASM_FILE_START): Define.\n\t* config/darwin.h (ASM_SPEC): Define.\n\t* config/rs6000/t-darwin (TARGET_LIBGCC2_CFLAGS): Don't supply\n\t-mlong-double-128, it's the default.  Update comment about reason\n\tfor force_cpusubtype_ALL.\n\t* config/rs6000/darwin-vecsave.asm: Supply .machine.\n\t* config/rs6000/darwin-world.asm: Likewise.\n\t* config/rs6000/rs6000.c (rs6000_darwin_file_start): New.\n\t(symbolic_operand): Delete #if 0ed code.\n\nIndex: testsuite/ChangeLog\n2004-10-14  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/darwin-misaligned.c: Don't supply -force_cpusubtype_ALL.\n\t* gcc.dg/macho-lo-sum.c: Likewise.\n\nFrom-SVN: r89059", "tree": {"sha": "dba4d9aad9ce3804ce46881c8ca0170a427c0bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba4d9aad9ce3804ce46881c8ca0170a427c0bec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b77aa1f774128032e69cfa52a5c4726b5029d313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77aa1f774128032e69cfa52a5c4726b5029d313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77aa1f774128032e69cfa52a5c4726b5029d313"}], "stats": {"total": 129, "additions": 86, "deletions": 43}, "files": [{"sha": "2475f9f2c271a35b833eda9aa7f55d7c7610d7c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -1,3 +1,16 @@\n+2004-10-14  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* config/rs6000/darwin.h (ASM_SPEC): Delete.\n+\t(TARGET_ASM_FILE_START): Define.\n+\t* config/darwin.h (ASM_SPEC): Define.\n+\t* config/rs6000/t-darwin (TARGET_LIBGCC2_CFLAGS): Don't supply\n+\t-mlong-double-128, it's the default.  Update comment about reason\n+\tfor force_cpusubtype_ALL.\n+\t* config/rs6000/darwin-vecsave.asm: Supply .machine.\n+\t* config/rs6000/darwin-world.asm: Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_darwin_file_start): New.\n+\t(symbolic_operand): Delete #if 0ed code.\n+\n 2004-10-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* stmt.c (add_case_node): Make sure that we have integer"}, {"sha": "029342878f66fc828f0443ade6590e4cb6bf6071", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -330,6 +330,9 @@ extern const char *darwin_fix_and_continue_switch;\n    to put anything in ENDFILE_SPEC.  */\n /* #define ENDFILE_SPEC \"\" */\n \n+/* Default Darwin ASM_SPEC, very simple.  */\n+#define ASM_SPEC \"-arch %(darwin_arch)\"\n+\n /* We use Dbx symbol format.  */\n \n #define DBX_DEBUGGING_INFO 1"}, {"sha": "b060c36830b28383aebaf7a56150fa10ffc047e5", "filename": "gcc/config/rs6000/darwin-vecsave.asm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-vecsave.asm?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -41,6 +41,7 @@\n    (4 bytes) to do the operation; for Vector regs, 2 instructions are\n    required (8 bytes.).   */\n \n+\t.machine ppc7400\n .text\n \t.align 2\n "}, {"sha": "1af21d553753a80ee48fb7418590689ede4ac8ec", "filename": "gcc/config/rs6000/darwin-world.asm", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-world.asm?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -34,6 +34,7 @@\n  *  executable file might be covered by the GNU General Public License.\n  */ \n \n+\t.machine ppc7400\n .data\n \t.align 2\n "}, {"sha": "7f499792bd3db3877759c03b36407f0bd732cc15", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -132,19 +132,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n %{!static:%{!mdynamic-no-pic:-fPIC}}\"\n \n-/* It's virtually impossible to predict all the possible combinations\n-   of -mcpu and -maltivec and whatnot, so just supply\n-   -force_cpusubtype_ALL if any are seen.  Radar 3492132 against the\n-   assembler is asking for a .machine directive so we could get this\n-   really right.  */\n-#define ASM_SPEC \"-arch ppc \\\n-  %{Zforce_cpusubtype_ALL:-force_cpusubtype_ALL} \\\n-  %{!Zforce_cpusubtype_ALL:%{maltivec|mcpu=*|mpowerpc64:-force_cpusubtype_ALL}}\"\n-\n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS\t\t\t\\\n   { \"darwin_arch\", \"ppc\" },\n \n+/* Output a .machine directive.  */\n+#undef TARGET_ASM_FILE_START\n+#define TARGET_ASM_FILE_START rs6000_darwin_file_start\n+\n /* The \"-faltivec\" option should have been called \"-maltivec\" all\n    along.  -ffix-and-continue and -findirect-data is for compatibility\n    for old compilers.  */"}, {"sha": "3026e59c0bedac24ffda07c316fb279e0582f22b", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 53, "deletions": 28, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -754,6 +754,7 @@ static void macho_branch_islands (void);\n static void add_compiler_branch_island (tree, tree, int);\n static int no_previous_def (tree function_name);\n static tree get_prev_label (tree function_name);\n+static void rs6000_darwin_file_start (void);\n #endif\n \n static tree rs6000_build_builtin_va_list (void);\n@@ -1713,6 +1714,7 @@ rs6000_file_start (void)\n \tputc ('\\n', file);\n     }\n }\n+\n \f\n /* Return nonzero if this function is known to have a null epilogue.  */\n \n@@ -16859,32 +16861,6 @@ rs6000_fatal_bad_address (rtx op)\n \n #if TARGET_MACHO\n \n-#if 0\n-/* Returns 1 if OP is either a symbol reference or a sum of a symbol\n-   reference and a constant.  */\n-\n-int\n-symbolic_operand (rtx op)\n-{\n-  switch (GET_CODE (op))\n-    {\n-    case SYMBOL_REF:\n-    case LABEL_REF:\n-      return 1;\n-    case CONST:\n-      op = XEXP (op, 0);\n-      return (GET_CODE (op) == SYMBOL_REF ||\n-\t      (GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n-\t       || GET_CODE (XEXP (op, 0)) == LABEL_REF)\n-\t      && GET_CODE (XEXP (op, 1)) == CONST_INT);\n-    default:\n-      return 0;\n-    }\n-}\n-#endif\n-\n-#if TARGET_MACHO\n-\n static tree branch_island_list = 0;\n \n /* Remember to generate a branch island for far calls to the given\n@@ -17060,8 +17036,6 @@ output_call (rtx insn, rtx *operands, int dest_operand_number,\n   return buf;\n }\n \n-#endif /* TARGET_MACHO */\n-\n /* Generate PIC and indirect symbol stubs.  */\n \n void\n@@ -17197,6 +17171,57 @@ toc_section (void)\n {\n }\n \n+/* Output a .machine directive for the Darwin assembler, and call\n+   the generic start_file routine.  */\n+\n+static void\n+rs6000_darwin_file_start (void)\n+{\n+  static const struct \n+  {\n+    const char *arg;\n+    const char *name;\n+    int if_set;\n+  } mapping[] = {\n+    { \"970\", \"ppc970\", MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64 },\n+    { \"power4\", \"ppc970\", 0 },\n+    { \"G5\", \"ppc970\", 0 },\n+    { \"7450\", \"ppc7450\", 0 },\n+    { \"7400\", \"ppc7400\", MASK_ALTIVEC },\n+    { \"G4\", \"ppc7400\", 0 },\n+    { \"750\", \"ppc750\", 0 },\n+    { \"740\", \"ppc750\", 0 },\n+    { \"G3\", \"ppc750\", 0 },\n+    { \"604e\", \"ppc604e\", 0 },\n+    { \"604\", \"ppc604\", 0 },\n+    { \"603e\", \"ppc603\", 0 },\n+    { \"603\", \"ppc603\", 0 },\n+    { \"601\", \"ppc601\", 0 },\n+    { NULL, \"ppc\", 0 } };\n+  const char *cpu_id = \"\";\n+  size_t i;\n+  \n+  rs6000_file_start();\n+\n+  /* Determine the argument to -mcpu=.  Default to G3 if not specified.  */\n+  for (i = 0; i < ARRAY_SIZE (rs6000_select); i++)\n+    if (rs6000_select[i].set_arch_p && rs6000_select[i].string\n+\t&& rs6000_select[i].string[0] != '\\0')\n+      cpu_id = rs6000_select[i].string;\n+\n+  /* Look through the mapping array.  Pick the first name that either\n+     matches the argument, has a bit set in IF_SET that is also set\n+     in the target flags, or has a NULL name.  */\n+\n+  i = 0;\n+  while (mapping[i].arg != NULL\n+\t && strcmp (mapping[i].arg, cpu_id) != 0\n+\t && (mapping[i].if_set & target_flags) == 0)\n+    i++;\n+\n+  fprintf (asm_out_file, \"\\t.machine %s\\n\", mapping[i].name);\n+}\n+\n #endif /* TARGET_MACHO */\n \n #if TARGET_ELF"}, {"sha": "3e890884129bfcec742a9bcd1e131cf7286b589c", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -7,7 +7,7 @@ LIB2FUNCS_STATIC_EXTRA = \\\n \t$(srcdir)/config/rs6000/darwin-vecsave.asm  \\\n \t$(srcdir)/config/rs6000/darwin-world.asm\n \n-# Enable AltiVec instructions when assembling the aforementioned .asm files.\n-# For libgcc, we always want 128-bit long double, since a libgcc built with\n-# that will work without it.\n-TARGET_LIBGCC2_CFLAGS = -mlong-double-128 -Wa,-force_cpusubtype_ALL\n+# The .asm files above are designed to run on all processors,\n+# even though they use AltiVec instructions.  -Wa is used because\n+# -force_cpusubtype_ALL doesn't work with -dynamiclib.\n+TARGET_LIBGCC2_CFLAGS = -Wa,-force_cpusubtype_ALL"}, {"sha": "f0ff7e39b903bbcb31ed8f9c12a89ef9a0ab7f7a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -1,3 +1,8 @@\n+2004-10-14  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/darwin-misaligned.c: Don't supply -force_cpusubtype_ALL.\n+\t* gcc.dg/macho-lo-sum.c: Likewise.\n+\n 2004-10-14  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/ppc-spe64-1.c: New test."}, {"sha": "9e53b7b22241e90b8fdc25843ec2f027c03ffea3", "filename": "gcc/testsuite/gcc.dg/darwin-misaligned.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-misaligned.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-misaligned.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdarwin-misaligned.c?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target powerpc*-*-darwin* } } */\n-/* { dg-options \"-O2 -force_cpusubtype_ALL -mpowerpc64\" } */\n+/* { dg-options \"-O2 -mpowerpc64\" } */\n \n typedef struct Nlm_rect {\n   short sh1;"}, {"sha": "9e0b8656c235bf6c1e052bc899374e657eccdbe0", "filename": "gcc/testsuite/gcc.dg/macho-lo-sum.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2Fgcc.dg%2Fmacho-lo-sum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e18b1c3e26a9afeb3438f6173742ac5cb1fece/gcc%2Ftestsuite%2Fgcc.dg%2Fmacho-lo-sum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmacho-lo-sum.c?ref=c4e18b1c3e26a9afeb3438f6173742ac5cb1fece", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target powerpc*-*-darwin* } } */\n-/* { dg-options \"-O2 -force_cpusubtype_ALL -mpowerpc64 -mdynamic-no-pic\" } */\n+/* { dg-options \"-O2 -mpowerpc64 -mdynamic-no-pic\" } */\n \n long long knight_attacks[64];\n long long InitializeAttackBoards(void);"}]}