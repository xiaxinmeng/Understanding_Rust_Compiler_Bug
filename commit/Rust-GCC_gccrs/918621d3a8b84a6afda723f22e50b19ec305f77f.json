{"sha": "918621d3a8b84a6afda723f22e50b19ec305f77f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE4NjIxZDNhOGI4NGE2YWZkYTcyM2YyMmU1MGIxOWVjMzA1Zjc3Zg==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-06-03T15:06:01Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-06-03T15:06:01Z"}, "message": "[PATCH AArch64 2/2] Correct signedness of builtins, remove casts from arm_neon.h\n\n\t* gcc/config/aarch64/aarch64-builtins.c\n\t(aarch64_types_binop_ssu_qualifiers): New static data.\n\t(TYPES_BINOP_SSU): Define.\n\t* gcc/config/aarch64/aarch64-simd-builtins.def (suqadd, ushl, urshl,\n\turshr_n, ushll_n): Use appropriate unsigned qualifiers.\n\t* gcc/config/aarch64/arm_neon.h (vrshl_u8, vrshl_u16, vrshl_u32,\n\tvrshl_u64, vrshlq_u8, vrshlq_u16, vrshlq_u32, vrshlq_u64, vrshld_u64,\n\tvrshr_n_u8, vrshr_n_u16, vrshr_n_u32, vrshr_n_u64, vrshrq_n_u8,\n\tvrshrq_n_u16, vrshrq_n_u32, vrshrq_n_u64, vrshrd_n_u64, vshll_n_u8,\n\tvshll_n_u16, vshll_n_u32, vuqadd_s8, vuqadd_s16, vuqadd_s32,\n\tvuqadd_s64, vuqaddq_s8, vuqaddq_s16, vuqaddq_s32, vuqaddq_s64,\n\tvuqaddb_s8, vuqaddh_s16, vuqadds_s32, vuqaddd_s64): Add signedness\n\tsuffix to builtin function name, remove cast.\n\t(vshl_s8, vshl_s16, vshl_s32, vshl_s64, vshl_u8, vshl_u16, vshl_u32,\n\tvshl_u64, vshlq_s8, vshlq_s16, vshlq_s32, vshlq_s64, vshlq_u8,\n\tvshlq_u16, vshlq_u32, vshlq_u64, vshld_s64, vshld_u64): Remove cast.\n\nFrom-SVN: r211186", "tree": {"sha": "3a1bbdccf797487b382919f4bdc3b4898b5ec329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a1bbdccf797487b382919f4bdc3b4898b5ec329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/918621d3a8b84a6afda723f22e50b19ec305f77f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918621d3a8b84a6afda723f22e50b19ec305f77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/918621d3a8b84a6afda723f22e50b19ec305f77f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/918621d3a8b84a6afda723f22e50b19ec305f77f/comments", "author": null, "committer": null, "parents": [{"sha": "de10bcced9188d068a5448917141171e393b9cc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de10bcced9188d068a5448917141171e393b9cc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de10bcced9188d068a5448917141171e393b9cc9"}], "stats": {"total": 135, "additions": 79, "deletions": 56}, "files": [{"sha": "f8a3f87e02c4ae7871d75dfc582219ec3e31b87b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=918621d3a8b84a6afda723f22e50b19ec305f77f", "patch": "@@ -1,3 +1,22 @@\n+2014-06-03  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\t* gcc/config/aarch64/aarch64-builtins.c\n+\t(aarch64_types_binop_ssu_qualifiers): New static data.\n+\t(TYPES_BINOP_SSU): Define.\n+\t* gcc/config/aarch64/aarch64-simd-builtins.def (suqadd, ushl, urshl,\n+\turshr_n, ushll_n): Use appropriate unsigned qualifiers.\n+\t* gcc/config/aarch64/arm_neon.h (vrshl_u8, vrshl_u16, vrshl_u32,\n+\tvrshl_u64, vrshlq_u8, vrshlq_u16, vrshlq_u32, vrshlq_u64, vrshld_u64,\n+\tvrshr_n_u8, vrshr_n_u16, vrshr_n_u32, vrshr_n_u64, vrshrq_n_u8,\n+\tvrshrq_n_u16, vrshrq_n_u32, vrshrq_n_u64, vrshrd_n_u64, vshll_n_u8,\n+\tvshll_n_u16, vshll_n_u32, vuqadd_s8, vuqadd_s16, vuqadd_s32,\n+\tvuqadd_s64, vuqaddq_s8, vuqaddq_s16, vuqaddq_s32, vuqaddq_s64,\n+\tvuqaddb_s8, vuqaddh_s16, vuqadds_s32, vuqaddd_s64): Add signedness\n+\tsuffix to builtin function name, remove cast.\n+\t(vshl_s8, vshl_s16, vshl_s32, vshl_s64, vshl_u8, vshl_u16, vshl_u32,\n+\tvshl_u64, vshlq_s8, vshlq_s16, vshlq_s32, vshlq_s64, vshlq_u8,\n+\tvshlq_u16, vshlq_u32, vshlq_u64, vshld_s64, vshld_u64): Remove cast.\n+\n 2014-06-03  Alan Lawrence  <alan.lawrence@arm.com>\n \n \t* gcc/config/aarch64/aarch64-builtins.c"}, {"sha": "fe4d39283b05f244b400f62d4e44097f51b237d7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=918621d3a8b84a6afda723f22e50b19ec305f77f", "patch": "@@ -181,6 +181,10 @@ aarch64_types_binop_uus_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_unsigned, qualifier_unsigned, qualifier_none };\n #define TYPES_BINOP_UUS (aarch64_types_binop_uus_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_binop_ssu_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned };\n+#define TYPES_BINOP_SSU (aarch64_types_binop_ssu_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_binopp_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_poly, qualifier_poly, qualifier_poly };\n #define TYPES_BINOPP (aarch64_types_binopp_qualifiers)"}, {"sha": "faa0858e3be437fe645fa0a4aa70e4c250ebc02c", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=918621d3a8b84a6afda723f22e50b19ec305f77f", "patch": "@@ -86,7 +86,7 @@\n   BUILTIN_VSDQ_I (BINOP, sqsub, 0)\n   BUILTIN_VSDQ_I (BINOPU, uqsub, 0)\n   /* Implemented by aarch64_<sur>qadd<mode>.  */\n-  BUILTIN_VSDQ_I (BINOP, suqadd, 0)\n+  BUILTIN_VSDQ_I (BINOP_SSU, suqadd, 0)\n   BUILTIN_VSDQ_I (BINOP_UUS, usqadd, 0)\n \n   /* Implemented by aarch64_get_dreg<VSTRUCT:mode><VDC:mode>.  */\n@@ -201,25 +201,25 @@\n   BUILTIN_VSDQ_I_DI (BINOP, ashl, 3)\n   /* Implemented by aarch64_<sur>shl<mode>.  */\n   BUILTIN_VSDQ_I_DI (BINOP, sshl, 0)\n-  BUILTIN_VSDQ_I_DI (BINOP, ushl, 0)\n+  BUILTIN_VSDQ_I_DI (BINOP_UUS, ushl, 0)\n   BUILTIN_VSDQ_I_DI (BINOP, srshl, 0)\n-  BUILTIN_VSDQ_I_DI (BINOP, urshl, 0)\n+  BUILTIN_VSDQ_I_DI (BINOP_UUS, urshl, 0)\n \n   BUILTIN_VDQ_I (SHIFTIMM, ashr, 3)\n   VAR1 (SHIFTIMM, ashr_simd, 0, di)\n   BUILTIN_VDQ_I (SHIFTIMM, lshr, 3)\n   VAR1 (USHIFTIMM, lshr_simd, 0, di)\n   /* Implemented by aarch64_<sur>shr_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0)\n-  BUILTIN_VSDQ_I_DI (SHIFTIMM, urshr_n, 0)\n+  BUILTIN_VSDQ_I_DI (USHIFTIMM, urshr_n, 0)\n   /* Implemented by aarch64_<sur>sra_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTACC, ssra_n, 0)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, usra_n, 0)\n   BUILTIN_VSDQ_I_DI (SHIFTACC, srsra_n, 0)\n   BUILTIN_VSDQ_I_DI (USHIFTACC, ursra_n, 0)\n   /* Implemented by aarch64_<sur>shll_n<mode>.  */\n   BUILTIN_VDW (SHIFTIMM, sshll_n, 0)\n-  BUILTIN_VDW (SHIFTIMM, ushll_n, 0)\n+  BUILTIN_VDW (USHIFTIMM, ushll_n, 0)\n   /* Implemented by aarch64_<sur>shll2_n<mode>.  */\n   BUILTIN_VQW (SHIFTIMM, sshll2_n, 0)\n   BUILTIN_VQW (SHIFTIMM, ushll2_n, 0)"}, {"sha": "e1c27f76a6018f7e50f8883fc1470efa959ab010", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/918621d3a8b84a6afda723f22e50b19ec305f77f/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=918621d3a8b84a6afda723f22e50b19ec305f77f", "patch": "@@ -21445,25 +21445,25 @@ vrshl_s64 (int64x1_t __a, int64x1_t __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vrshl_u8 (uint8x8_t __a, int8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_urshlv8qi ((int8x8_t) __a, __b);\n+  return __builtin_aarch64_urshlv8qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vrshl_u16 (uint16x4_t __a, int16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_urshlv4hi ((int16x4_t) __a, __b);\n+  return __builtin_aarch64_urshlv4hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vrshl_u32 (uint32x2_t __a, int32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_urshlv2si ((int32x2_t) __a, __b);\n+  return __builtin_aarch64_urshlv2si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vrshl_u64 (uint64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_urshldi ((int64x1_t) __a, __b);\n+  return __builtin_aarch64_urshldi_uus (__a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n@@ -21493,25 +21493,25 @@ vrshlq_s64 (int64x2_t __a, int64x2_t __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vrshlq_u8 (uint8x16_t __a, int8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_urshlv16qi ((int8x16_t) __a, __b);\n+  return __builtin_aarch64_urshlv16qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vrshlq_u16 (uint16x8_t __a, int16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_urshlv8hi ((int16x8_t) __a, __b);\n+  return __builtin_aarch64_urshlv8hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vrshlq_u32 (uint32x4_t __a, int32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_urshlv4si ((int32x4_t) __a, __b);\n+  return __builtin_aarch64_urshlv4si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vrshlq_u64 (uint64x2_t __a, int64x2_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_urshlv2di ((int64x2_t) __a, __b);\n+  return __builtin_aarch64_urshlv2di_uus (__a, __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n@@ -21523,7 +21523,7 @@ vrshld_s64 (int64x1_t __a, int64x1_t __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vrshld_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_urshldi (__a, __b);\n+  return __builtin_aarch64_urshldi_uus (__a, __b);\n }\n \n /* vrshr */\n@@ -21555,25 +21555,25 @@ vrshr_n_s64 (int64x1_t __a, const int __b)\n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vrshr_n_u8 (uint8x8_t __a, const int __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_urshr_nv8qi ((int8x8_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv8qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vrshr_n_u16 (uint16x4_t __a, const int __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_urshr_nv4hi ((int16x4_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv4hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vrshr_n_u32 (uint32x2_t __a, const int __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_urshr_nv2si ((int32x2_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv2si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vrshr_n_u64 (uint64x1_t __a, const int __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_urshr_ndi ((int64x1_t) __a, __b);\n+  return __builtin_aarch64_urshr_ndi_uus (__a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n@@ -21603,25 +21603,25 @@ vrshrq_n_s64 (int64x2_t __a, const int __b)\n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vrshrq_n_u8 (uint8x16_t __a, const int __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_urshr_nv16qi ((int8x16_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv16qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vrshrq_n_u16 (uint16x8_t __a, const int __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_urshr_nv8hi ((int16x8_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv8hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vrshrq_n_u32 (uint32x4_t __a, const int __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_urshr_nv4si ((int32x4_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv4si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vrshrq_n_u64 (uint64x2_t __a, const int __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_urshr_nv2di ((int64x2_t) __a, __b);\n+  return __builtin_aarch64_urshr_nv2di_uus (__a, __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n@@ -21633,7 +21633,7 @@ vrshrd_n_s64 (int64x1_t __a, const int __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vrshrd_n_u64 (uint64x1_t __a, const int __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_urshr_ndi (__a, __b);\n+  return __builtin_aarch64_urshr_ndi_uus (__a, __b);\n }\n \n /* vrsra */\n@@ -21936,109 +21936,109 @@ vshld_n_u64 (uint64x1_t __a, const int __b)\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vshl_s8 (int8x8_t __a, int8x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_sshlv8qi (__a, __b);\n+  return __builtin_aarch64_sshlv8qi (__a, __b);\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vshl_s16 (int16x4_t __a, int16x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_sshlv4hi (__a, __b);\n+  return __builtin_aarch64_sshlv4hi (__a, __b);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vshl_s32 (int32x2_t __a, int32x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_sshlv2si (__a, __b);\n+  return __builtin_aarch64_sshlv2si (__a, __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vshl_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (int64x1_t) __builtin_aarch64_sshldi (__a, __b);\n+  return __builtin_aarch64_sshldi (__a, __b);\n }\n \n __extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n vshl_u8 (uint8x8_t __a, int8x8_t __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_ushlv8qi ((int8x8_t) __a, __b);\n+  return __builtin_aarch64_ushlv8qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n vshl_u16 (uint16x4_t __a, int16x4_t __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_ushlv4hi ((int16x4_t) __a, __b);\n+  return __builtin_aarch64_ushlv4hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n vshl_u32 (uint32x2_t __a, int32x2_t __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_ushlv2si ((int32x2_t) __a, __b);\n+  return __builtin_aarch64_ushlv2si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vshl_u64 (uint64x1_t __a, int64x1_t __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_ushldi ((int64x1_t) __a, __b);\n+  return __builtin_aarch64_ushldi_uus (__a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vshlq_s8 (int8x16_t __a, int8x16_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_sshlv16qi (__a, __b);\n+  return __builtin_aarch64_sshlv16qi (__a, __b);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vshlq_s16 (int16x8_t __a, int16x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_sshlv8hi (__a, __b);\n+  return __builtin_aarch64_sshlv8hi (__a, __b);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vshlq_s32 (int32x4_t __a, int32x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_sshlv4si (__a, __b);\n+  return __builtin_aarch64_sshlv4si (__a, __b);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vshlq_s64 (int64x2_t __a, int64x2_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_sshlv2di (__a, __b);\n+  return __builtin_aarch64_sshlv2di (__a, __b);\n }\n \n __extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n vshlq_u8 (uint8x16_t __a, int8x16_t __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_ushlv16qi ((int8x16_t) __a, __b);\n+  return __builtin_aarch64_ushlv16qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vshlq_u16 (uint16x8_t __a, int16x8_t __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_ushlv8hi ((int16x8_t) __a, __b);\n+  return __builtin_aarch64_ushlv8hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vshlq_u32 (uint32x4_t __a, int32x4_t __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_ushlv4si ((int32x4_t) __a, __b);\n+  return __builtin_aarch64_ushlv4si_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vshlq_u64 (uint64x2_t __a, int64x2_t __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_ushlv2di ((int64x2_t) __a, __b);\n+  return __builtin_aarch64_ushlv2di_uus (__a, __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vshld_s64 (int64x1_t __a, int64x1_t __b)\n {\n-  return (int64x1_t) __builtin_aarch64_sshldi (__a, __b);\n+  return __builtin_aarch64_sshldi (__a, __b);\n }\n \n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vshld_u64 (uint64x1_t __a, uint64x1_t __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_ushldi (__a, __b);\n+  return __builtin_aarch64_ushldi_uus (__a, __b);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n@@ -22098,19 +22098,19 @@ vshll_n_s32 (int32x2_t __a, const int __b)\n __extension__ static __inline uint16x8_t __attribute__ ((__always_inline__))\n vshll_n_u8 (uint8x8_t __a, const int __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_ushll_nv8qi ((int8x8_t) __a, __b);\n+  return __builtin_aarch64_ushll_nv8qi_uus (__a, __b);\n }\n \n __extension__ static __inline uint32x4_t __attribute__ ((__always_inline__))\n vshll_n_u16 (uint16x4_t __a, const int __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_ushll_nv4hi ((int16x4_t) __a, __b);\n+  return __builtin_aarch64_ushll_nv4hi_uus (__a, __b);\n }\n \n __extension__ static __inline uint64x2_t __attribute__ ((__always_inline__))\n vshll_n_u32 (uint32x2_t __a, const int __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_ushll_nv2si ((int32x2_t) __a, __b);\n+  return __builtin_aarch64_ushll_nv2si_uus (__a, __b);\n }\n \n /* vshr */\n@@ -24409,73 +24409,73 @@ vtstd_u64 (uint64x1_t __a, uint64x1_t __b)\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vuqadd_s8 (int8x8_t __a, uint8x8_t __b)\n {\n-  return (int8x8_t) __builtin_aarch64_suqaddv8qi (__a, (int8x8_t) __b);\n+  return __builtin_aarch64_suqaddv8qi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vuqadd_s16 (int16x4_t __a, uint16x4_t __b)\n {\n-  return (int16x4_t) __builtin_aarch64_suqaddv4hi (__a, (int16x4_t) __b);\n+  return __builtin_aarch64_suqaddv4hi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n vuqadd_s32 (int32x2_t __a, uint32x2_t __b)\n {\n-  return (int32x2_t) __builtin_aarch64_suqaddv2si (__a, (int32x2_t) __b);\n+  return __builtin_aarch64_suqaddv2si_ssu (__a,  __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vuqadd_s64 (int64x1_t __a, uint64x1_t __b)\n {\n-  return (int64x1_t) __builtin_aarch64_suqadddi (__a, (int64x1_t) __b);\n+  return __builtin_aarch64_suqadddi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n vuqaddq_s8 (int8x16_t __a, uint8x16_t __b)\n {\n-  return (int8x16_t) __builtin_aarch64_suqaddv16qi (__a, (int8x16_t) __b);\n+  return __builtin_aarch64_suqaddv16qi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n vuqaddq_s16 (int16x8_t __a, uint16x8_t __b)\n {\n-  return (int16x8_t) __builtin_aarch64_suqaddv8hi (__a, (int16x8_t) __b);\n+  return __builtin_aarch64_suqaddv8hi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n vuqaddq_s32 (int32x4_t __a, uint32x4_t __b)\n {\n-  return (int32x4_t) __builtin_aarch64_suqaddv4si (__a, (int32x4_t) __b);\n+  return __builtin_aarch64_suqaddv4si_ssu (__a,  __b);\n }\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))\n vuqaddq_s64 (int64x2_t __a, uint64x2_t __b)\n {\n-  return (int64x2_t) __builtin_aarch64_suqaddv2di (__a, (int64x2_t) __b);\n+  return __builtin_aarch64_suqaddv2di_ssu (__a,  __b);\n }\n \n __extension__ static __inline int8x1_t __attribute__ ((__always_inline__))\n vuqaddb_s8 (int8x1_t __a, uint8x1_t __b)\n {\n-  return (int8x1_t) __builtin_aarch64_suqaddqi (__a, (int8x1_t) __b);\n+  return __builtin_aarch64_suqaddqi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int16x1_t __attribute__ ((__always_inline__))\n vuqaddh_s16 (int16x1_t __a, uint16x1_t __b)\n {\n-  return (int16x1_t) __builtin_aarch64_suqaddhi (__a, (int16x1_t) __b);\n+  return __builtin_aarch64_suqaddhi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int32x1_t __attribute__ ((__always_inline__))\n vuqadds_s32 (int32x1_t __a, uint32x1_t __b)\n {\n-  return (int32x1_t) __builtin_aarch64_suqaddsi (__a, (int32x1_t) __b);\n+  return __builtin_aarch64_suqaddsi_ssu (__a,  __b);\n }\n \n __extension__ static __inline int64x1_t __attribute__ ((__always_inline__))\n vuqaddd_s64 (int64x1_t __a, uint64x1_t __b)\n {\n-  return (int64x1_t) __builtin_aarch64_suqadddi (__a, (int64x1_t) __b);\n+  return __builtin_aarch64_suqadddi_ssu (__a,  __b);\n }\n \n #define __DEFINTERLEAVE(op, rettype, intype, funcsuffix, Q) \t\t\\"}]}