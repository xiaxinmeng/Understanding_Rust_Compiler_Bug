{"sha": "742ed2f3daf7e24066154963409f867acf10e8a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyZWQyZjNkYWY3ZTI0MDY2MTU0OTYzNDA5Zjg2N2FjZjEwZThhOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-06-08T10:12:09Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-06-08T10:12:09Z"}, "message": "2003-06-08  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/Socket.java\n\t(Socket): Dont initialize inputShutdown and outputShutdown twice,\n\tcall bind() and connect() to actually do the bind and connect tasks.\n\t(bind): Connect to canonical address if bindpoint is null, create\n\tsocket and bind it to bindpoint.\n\t(connect): Check for exceptions.\n\nFrom-SVN: r67618", "tree": {"sha": "076b1d41bea49b88e8f54b25b466cf2cef10072a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/076b1d41bea49b88e8f54b25b466cf2cef10072a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/742ed2f3daf7e24066154963409f867acf10e8a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742ed2f3daf7e24066154963409f867acf10e8a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/742ed2f3daf7e24066154963409f867acf10e8a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/742ed2f3daf7e24066154963409f867acf10e8a9/comments", "author": null, "committer": null, "parents": [{"sha": "f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e2125825d5e69ddb10d2232af4ca0e94ecf26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61e2125825d5e69ddb10d2232af4ca0e94ecf26"}], "stats": {"total": 129, "additions": 65, "deletions": 64}, "files": [{"sha": "bdfd7753ef7edb8968e30f18ab60983e141b3d31", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742ed2f3daf7e24066154963409f867acf10e8a9/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742ed2f3daf7e24066154963409f867acf10e8a9/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=742ed2f3daf7e24066154963409f867acf10e8a9", "patch": "@@ -1,3 +1,12 @@\n+2003-06-08  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/Socket.java\n+\t(Socket): Dont initialize inputShutdown and outputShutdown twice,\n+\tcall bind() and connect() to actually do the bind and connect tasks.\n+\t(bind): Connect to canonical address if bindpoint is null, create\n+\tsocket and bind it to bindpoint.\n+\t(connect): Check for exceptions.\n+\n 2003-06-08  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/DatagramSocket.java"}, {"sha": "8535fa9ef61152b6b6c1f35a79dad2d212f6569a", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 56, "deletions": 64, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/742ed2f3daf7e24066154963409f867acf10e8a9/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/742ed2f3daf7e24066154963409f867acf10e8a9/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=742ed2f3daf7e24066154963409f867acf10e8a9", "patch": "@@ -281,8 +281,6 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n                  boolean stream) throws IOException\n   {\n     this();\n-    this.inputShutdown = false;\n-    this.outputShutdown = false;\n \n     if (impl == null)\n       throw new IOException(\"Cannot initialize Socket implementation\");\n@@ -291,59 +289,13 @@ private Socket(InetAddress raddr, int rport, InetAddress laddr, int lport,\n     if (sm != null)\n       sm.checkConnect(raddr.getHostName(), rport);\n \n-    // create socket\n-    impl.create(stream);\n+    // bind/connect socket\n+    bind (new InetSocketAddress (laddr, lport));\n+    connect (new InetSocketAddress (raddr, rport));\n \n     // FIXME: JCL p. 1586 says if localPort is unspecified, bind to any port,\n     // i.e. '0' and if localAddr is unspecified, use getLocalAddress() as\n     // that default.  JDK 1.2 doc infers not to do a bind.\n-    \n-    // bind/connect to address/port\n-    if (laddr != null)\n-      {\n-        try\n-\t  {\n-            impl.bind(laddr, lport);\n-          }\n-\tcatch (IOException exception)\n-          {\n-            impl.close();\n-            throw exception;\n-          }\n-        catch (RuntimeException exception)\n-          {\n-            impl.close();\n-            throw exception;\n-          }\n-        catch (Error error)\n-          {\n-            impl.close();\n-            throw error;\n-          }\n-      }\n-\n-    if (raddr != null)\n-      {\n-        try\n-          {\n-            impl.connect(raddr, rport);\n-          }\n-        catch (IOException exception)\n-          {\n-            impl.close();\n-            throw exception;\n-          }\n-        catch (RuntimeException exception)\n-          {\n-            impl.close();\n-            throw exception;\n-          }\n-        catch (Error error)\n-          {\n-            impl.close();\n-            throw error;\n-          }\n-      }\n   }\n \n   /**\n@@ -362,12 +314,40 @@ public void bind (SocketAddress bindpoint) throws IOException\n   {\n     if (closed)\n       throw new SocketException (\"Socket is closed\");\n+\n+    // XXX: JDK 1.4.1 API documentation says that if bindpoint is null the\n+    // socket will be bound to an ephemeral port and a valid local address.\n+    if (bindpoint == null)\n+      bindpoint = new InetSocketAddress (InetAddress.ANY_IF, 0);\n     \n     if ( !(bindpoint instanceof InetSocketAddress))\n       throw new IllegalArgumentException ();\n \n     InetSocketAddress tmp = (InetSocketAddress) bindpoint;\n-    impl.bind (tmp.getAddress(), tmp.getPort());\n+    \n+    // create socket\n+    impl.create (true);\n+    \n+    // bind to address/port\n+    try\n+      {\n+        impl.bind (tmp.getAddress(), tmp.getPort());\n+      }\n+    catch (IOException exception)\n+      {\n+        impl.close ();\n+        throw exception;\n+      }\n+    catch (RuntimeException exception)\n+      {\n+        impl.close ();\n+        throw exception;\n+      }\n+    catch (Error error)\n+      {\n+        impl.close ();\n+        throw error;\n+      }\n   }\n   \n   /**\n@@ -385,16 +365,7 @@ public void bind (SocketAddress bindpoint) throws IOException\n   public void connect (SocketAddress endpoint)\n     throws IOException\n   {\n-    if (closed)\n-      throw new SocketException (\"Socket is closed\");\n-    \n-    if (! (endpoint instanceof InetSocketAddress))\n-      throw new IllegalArgumentException (\"Address type not supported\");\n-\n-    if (ch != null && !ch.isBlocking ())\n-      throw new IllegalBlockingModeException ();\n-    \n-    impl.connect (endpoint, 0);\n+    connect (endpoint, 0);\n   }\n \n   /**\n@@ -423,8 +394,29 @@ public void connect (SocketAddress endpoint, int timeout)\n \n     if (ch != null && !ch.isBlocking ())\n       throw new IllegalBlockingModeException ();\n-    \n-    impl.connect (endpoint, timeout);\n+  \n+    if (!isBound ())\n+      bind (null);\n+\n+    try\n+      {\n+        impl.connect (endpoint, timeout);\n+      }\n+    catch (IOException exception)\n+      {\n+        impl.close ();\n+        throw exception;\n+      }\n+    catch (RuntimeException exception)\n+      {\n+        impl.close ();\n+        throw exception;\n+      }\n+    catch (Error error)\n+      {\n+        impl.close ();\n+        throw error;\n+      }\n   }\n \n   /**"}]}