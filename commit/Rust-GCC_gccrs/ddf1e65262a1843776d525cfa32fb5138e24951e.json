{"sha": "ddf1e65262a1843776d525cfa32fb5138e24951e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmMWU2NTI2MmExODQzNzc2ZDUyNWNmYTMyZmI1MTM4ZTI0OTUxZQ==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2001-06-12T23:09:09Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2001-06-12T23:09:09Z"}, "message": "porting.texi: Add documentation about libstdc++-v3-specific macros that are currently...\n\n\tlibstdc++/2071\n\t* porting.texi: Add documentation about libstdc++-v3-specific\n\tmacros that are currently included in os_defines.h files.\n\n\t* config/basic_file_stdio.h (sys_getc): New method.\n\t(sys_ungetc): New method.\n\t* include/bits/basic_file.h: (sys_getc): New method signature.\n\t(sys_ungetc): New method signature.\n\n\t* include/bits/fstream.tcc (underflow): Add conditional code\n\tpaths which avoid using short seeks on streams (especially\n\tuseful when the stream might be interactive or a pipe).  At\n\tthe moment, this alternate path only avoids seeking when the\n\t``buffer size'' of underflow() is 1 since the C standard only\n\tguarantees buffer space for one ungetc (this technique could\n\tbe extended since *-*-solaris* supports buffering for 4 calls\n\tto ungetc and *-*-*bsd* supports buffering limited only by\n\tmemory resources).  Also, _GLIBCPP_AVOID_FSEEK must be defined\n\tin a port's os_defines.h file for this alternate path to even\n\tbe considered.  As a bonus, the idiom of using getc/ungetc\n\trequires no system calls whereas fseek maps to one or two\n\tsystem call(s) on many platforms.\n\n\t* config/os/bsd/freebsd/bits/os_defines.h (_GLIBCPP_AVOID_FSEEK):\n\tDefine it.\n\t* config/os/solaris/solaris2.5/bits/os_defines.h\n\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n\t* config/os/solaris/solaris2.6/bits/os_defines.h\n\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n\t* config/os/solaris/solaris2.7/bits/os_defines.h\n\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n\nFrom-SVN: r43278", "tree": {"sha": "c1c7768a7c3fa4e6421e9078340dd04bd57fa444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1c7768a7c3fa4e6421e9078340dd04bd57fa444"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf1e65262a1843776d525cfa32fb5138e24951e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf1e65262a1843776d525cfa32fb5138e24951e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf1e65262a1843776d525cfa32fb5138e24951e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf1e65262a1843776d525cfa32fb5138e24951e/comments", "author": null, "committer": null, "parents": [{"sha": "1d855e87fd1e2a8c68d86128616f4c2170800544", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d855e87fd1e2a8c68d86128616f4c2170800544", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d855e87fd1e2a8c68d86128616f4c2170800544"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "5f3e3d7be81feb6bb09213ccf08090a8873472fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -1,3 +1,37 @@\n+2001-06-12  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\tlibstdc++/2071\n+\t* porting.texi: Add documentation about libstdc++-v3-specific\n+\tmacros that are currently included in os_defines.h files.\n+\n+\t* config/basic_file_stdio.h (sys_getc): New method.\n+\t(sys_ungetc): New method.\n+\t* include/bits/basic_file.h: (sys_getc): New method signature.\n+\t(sys_ungetc): New method signature.\n+\n+\t* include/bits/fstream.tcc (underflow): Add conditional code\n+\tpaths which avoid using short seeks on streams (especially\n+\tuseful when the stream might be interactive or a pipe).  At\n+\tthe moment, this alternate path only avoids seeking when the\n+\t``buffer size'' of underflow() is 1 since the C standard only\n+\tguarantees buffer space for one ungetc (this technique could\n+\tbe extended since *-*-solaris* supports buffering for 4 calls\n+\tto ungetc and *-*-*bsd* supports buffering limited only by\n+\tmemory resources).  Also, _GLIBCPP_AVOID_FSEEK must be defined\n+\tin a port's os_defines.h file for this alternate path to even\n+\tbe considered.  As a bonus, the idiom of using getc/ungetc\n+\trequires no system calls whereas fseek maps to one or two\n+\tsystem call(s) on many platforms.\n+\n+\t* config/os/bsd/freebsd/bits/os_defines.h (_GLIBCPP_AVOID_FSEEK):\n+\tDefine it.\n+\t* config/os/solaris/solaris2.5/bits/os_defines.h\n+\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n+\t* config/os/solaris/solaris2.6/bits/os_defines.h\n+\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n+\t* config/os/solaris/solaris2.7/bits/os_defines.h\n+\t(_GLIBCPP_AVOID_FSEEK): Likewise.\n+\n 2001-06-12   Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_COMPILER_VERSION): Change to"}, {"sha": "edf4d98baa9340d18bce22b174880c12bd2d4677", "filename": "libstdc++-v3/config/basic_file_stdio.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbasic_file_stdio.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -91,6 +91,20 @@ namespace std\n \n       return __ret;\n     }\n+\n+  template<typename _CharT>\n+    _CharT\n+    __basic_file<_CharT>::sys_getc()\n+    {\n+      return getc (_M_cfile);\n+    }\n+\n+  template<typename _CharT>\n+    _CharT\n+    __basic_file<_CharT>::sys_ungetc(_CharT __s)\n+    {\n+      return ungetc (__s, _M_cfile);\n+    }\n   \n   template<typename _CharT>\n     __basic_file<_CharT>* "}, {"sha": "3a6803f8f3d6158b82bdd786edb172663c57530f", "filename": "libstdc++-v3/config/os/bsd/freebsd/bits/os_defines.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fbits%2Fos_defines.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -35,6 +35,7 @@\n /* System-specific #define, typedefs, corrections, etc, go here.  This\n    file will come before all others. */\n \n+#define _GLIBCPP_AVOID_FSEEK 1\n \n #endif\n "}, {"sha": "5a756b4210d5215cb848803d0cc3115190f0ea6c", "filename": "libstdc++-v3/config/os/solaris/solaris2.5/bits/os_defines.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.5%2Fbits%2Fos_defines.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -1,4 +1,4 @@\n-// Specific definitions for Solaris 2.6  -*- C++ -*-\n+// Specific definitions for Solaris 2.5  -*- C++ -*-\n \n // Copyright (C) 2000 Free Software Foundation, Inc.\n //\n@@ -33,6 +33,9 @@\n \n /* System-specific #define, typedefs, corrections, etc, go here.  This\n    file will come before all others. */\n+\n+#define _GLIBCPP_AVOID_FSEEK 1\n+\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t\n@@ -43,5 +46,3 @@\n #define _G_USING_THUNKS 0\n \n #endif\n-\n-"}, {"sha": "961e29d55d090195ec6aabee5dacca1874f939ab", "filename": "libstdc++-v3/config/os/solaris/solaris2.6/bits/os_defines.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.6%2Fbits%2Fos_defines.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -33,6 +33,9 @@\n \n /* System-specific #define, typedefs, corrections, etc, go here.  This\n    file will come before all others. */\n+\n+#define _GLIBCPP_AVOID_FSEEK 1\n+\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t\n@@ -43,5 +46,3 @@\n #define _G_USING_THUNKS 0\n \n #endif\n-\n-"}, {"sha": "8ed386765f60661d47864c58c542e0897b3b9afd", "filename": "libstdc++-v3/config/os/solaris/solaris2.7/bits/os_defines.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fsolaris%2Fsolaris2.7%2Fbits%2Fos_defines.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -31,6 +31,11 @@\n #ifndef _GLIBCPP_OS_DEFINES\n #  define _GLIBCPP_OS_DEFINES\n \n+/* System-specific #define, typedefs, corrections, etc, go here.  This\n+   file will come before all others. */\n+\n+#define _GLIBCPP_AVOID_FSEEK 1\n+\n // These are typedefs which libio assumes are already in place (because\n // they really are, under Linux).\n #define __off_t     off_t\n@@ -40,6 +45,4 @@\n // Without this all the libio vtbls are offset wrongly.\n #define _G_USING_THUNKS 0\n \n-\n #endif\n-"}, {"sha": "65081a0af10b1c0942a04e77c49d21f488305b23", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -147,6 +147,12 @@ namespace std\n       __basic_file*\n       sys_open(__c_file_type* __file, ios_base::openmode __mode);\n \n+      _CharT\n+      sys_getc();\n+\n+      _CharT\n+      sys_ungetc(_CharT);\n+\n       __basic_file* \n       close(); \n "}, {"sha": "7a41ba789f6f8fde2816c005a56328741abc4d4e", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -261,6 +261,10 @@ namespace std\n \t    {\n \t      if (__testout)\n \t\t_M_really_overflow();\n+#if _GLIBCPP_AVOID_FSEEK\n+\t      else if ((_M_in_cur - _M_in_beg) == 1)\n+\t\t_M_file->sys_getc();\n+#endif\n \t      else \n \t\t_M_file->seekoff(_M_in_cur - _M_in_beg, \n \t\t\t\t ios_base::cur, ios_base::in);\n@@ -276,12 +280,21 @@ namespace std\n \t\t  if (__testout)\n \t\t    _M_out_cur = _M_in_cur;\n \t\t  __ret = traits_type::to_int_type(*_M_in_cur);\n+#if _GLIBCPP_AVOID_FSEEK\n+\t\t  if (__size == 1)\n+\t\t    _M_file->sys_ungetc(*_M_in_cur);\n+\t\t  else\n+\t\t    {\n+#endif\n \t\t  streamoff __p = _M_file->seekoff(0 - __size, ios_base::cur, \n \t\t\t\t\t\t   ios_base::in);\n \t\t  if (__p == -1)\n \t\t    {\n \t\t      // XXX Something is wrong, do error checking.\n \t\t    }\n+#if _GLIBCPP_AVOID_FSEEK\n+\t\t    }\n+#endif\n \t\t}\t   \n \t    }\n \t}"}, {"sha": "87111e709b8ea2819a54866387715c08bc5b2038", "filename": "libstdc++-v3/porting.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf1e65262a1843776d525cfa32fb5138e24951e/libstdc%2B%2B-v3%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fporting.texi?ref=ddf1e65262a1843776d525cfa32fb5138e24951e", "patch": "@@ -141,6 +141,19 @@ need to define.  You will need to add them to the\n target.  It will not work to simply define these macros in\n @file{os_defines.h}.\n \n+At this time, there are two libstdc++-v3-specific macros which may be\n+defined.  @code{_G_USING_THUNKS} may be defined to 0 to express that the\n+port doesn't use thunks (although it is unclear that this is still\n+useful since libio support isn't currently working and the g++ v3 ABI\n+invalidates the assumption that some ports don't use thunks).\n+@code{_GLIBCPP_AVOID_FSEEK} may be defined if seeking on an interactive\n+stream (or one hooked to a pipe) is not allowed by the OS.  In this\n+case, getc()/ungetc() will be used at some key locations in the library\n+implementation instead of fseek().  Currently, the code path to avoid\n+fseek() is only enabled when the seek size is 1 character away from the\n+current stream position.  This is known to improve *-unknown-freebsd*\n+and sparc-sun-solaris2.*.\n+\n Finally, you should bracket the entire file in an include-guard, like\n this:\n "}]}