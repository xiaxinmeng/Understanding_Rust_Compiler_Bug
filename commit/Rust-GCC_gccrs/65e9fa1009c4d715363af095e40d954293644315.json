{"sha": "65e9fa1009c4d715363af095e40d954293644315", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlOWZhMTAwOWM0ZDcxNTM2M2FmMDk1ZTQwZDk1NDI5MzY0NDMxNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-31T22:43:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-31T22:43:36Z"}, "message": "* cse.c (delete_trivially_dead_insn): Don't iterate.\n\nFrom-SVN: r94498", "tree": {"sha": "2249e41ab8a2583dd2f7801ca7b005192ea32e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2249e41ab8a2583dd2f7801ca7b005192ea32e47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e9fa1009c4d715363af095e40d954293644315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e9fa1009c4d715363af095e40d954293644315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e9fa1009c4d715363af095e40d954293644315", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e9fa1009c4d715363af095e40d954293644315/comments", "author": null, "committer": null, "parents": [{"sha": "0530bc70fbab2126ca2510ca18b61d01f949f38d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0530bc70fbab2126ca2510ca18b61d01f949f38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0530bc70fbab2126ca2510ca18b61d01f949f38d"}], "stats": {"total": 96, "additions": 47, "deletions": 49}, "files": [{"sha": "4fa04ff95c267f69c006a605f07452c5a02fde57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e9fa1009c4d715363af095e40d954293644315/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e9fa1009c4d715363af095e40d954293644315/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65e9fa1009c4d715363af095e40d954293644315", "patch": "@@ -1,3 +1,7 @@\n+2005-01-31  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* cse.c (delete_trivially_dead_insn): Don't iterate.\n+\n 2005-01-31  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/rs6000/rs6000.md (copysignsf3): New expand."}, {"sha": "ca0bade14675309457369b8ab8650757a1e2a51c", "filename": "gcc/cse.c", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e9fa1009c4d715363af095e40d954293644315/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e9fa1009c4d715363af095e40d954293644315/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=65e9fa1009c4d715363af095e40d954293644315", "patch": "@@ -7268,73 +7268,67 @@ delete_trivially_dead_insns (rtx insns, int nreg)\n   int *counts;\n   rtx insn, prev;\n   int in_libcall = 0, dead_libcall = 0;\n-  int ndead = 0, nlastdead, niterations = 0;\n+  int ndead = 0;\n \n   timevar_push (TV_DELETE_TRIVIALLY_DEAD);\n   /* First count the number of times each register is used.  */\n   counts = xcalloc (nreg, sizeof (int));\n   for (insn = next_real_insn (insns); insn; insn = next_real_insn (insn))\n     count_reg_usage (insn, counts, 1);\n \n-  do\n-    {\n-      nlastdead = ndead;\n-      niterations++;\n-      /* Go from the last insn to the first and delete insns that only set unused\n-\t registers or copy a register to itself.  As we delete an insn, remove\n-\t usage counts for registers it uses.\n-\n-\t The first jump optimization pass may leave a real insn as the last\n-\t insn in the function.   We must not skip that insn or we may end\n-\t up deleting code that is not really dead.  */\n-      insn = get_last_insn ();\n-      if (! INSN_P (insn))\n-\tinsn = prev_real_insn (insn);\n+  /* Go from the last insn to the first and delete insns that only set unused\n+     registers or copy a register to itself.  As we delete an insn, remove\n+     usage counts for registers it uses.\n \n-      for (; insn; insn = prev)\n-\t{\n-\t  int live_insn = 0;\n+     The first jump optimization pass may leave a real insn as the last\n+     insn in the function.   We must not skip that insn or we may end\n+     up deleting code that is not really dead.  */\n+  insn = get_last_insn ();\n+  if (! INSN_P (insn))\n+    insn = prev_real_insn (insn);\n \n-\t  prev = prev_real_insn (insn);\n+  for (; insn; insn = prev)\n+    {\n+      int live_insn = 0;\n \n-\t  /* Don't delete any insns that are part of a libcall block unless\n-\t     we can delete the whole libcall block.\n+      prev = prev_real_insn (insn);\n \n-\t     Flow or loop might get confused if we did that.  Remember\n-\t     that we are scanning backwards.  */\n-\t  if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n-\t    {\n-\t      in_libcall = 1;\n-\t      live_insn = 1;\n-\t      dead_libcall = dead_libcall_p (insn, counts);\n-\t    }\n-\t  else if (in_libcall)\n-\t    live_insn = ! dead_libcall;\n-\t  else\n-\t    live_insn = insn_live_p (insn, counts);\n+      /* Don't delete any insns that are part of a libcall block unless\n+\t we can delete the whole libcall block.\n+\n+\t Flow or loop might get confused if we did that.  Remember\n+\t that we are scanning backwards.  */\n+      if (find_reg_note (insn, REG_RETVAL, NULL_RTX))\n+\t{\n+\t  in_libcall = 1;\n+\t  live_insn = 1;\n+\t  dead_libcall = dead_libcall_p (insn, counts);\n+\t}\n+      else if (in_libcall)\n+\tlive_insn = ! dead_libcall;\n+      else\n+\tlive_insn = insn_live_p (insn, counts);\n \n-\t  /* If this is a dead insn, delete it and show registers in it aren't\n-\t     being used.  */\n+      /* If this is a dead insn, delete it and show registers in it aren't\n+\t being used.  */\n \n-\t  if (! live_insn)\n-\t    {\n-\t      count_reg_usage (insn, counts, -1);\n-\t      delete_insn_and_edges (insn);\n-\t      ndead++;\n-\t    }\n+      if (! live_insn)\n+\t{\n+\t  count_reg_usage (insn, counts, -1);\n+\t  delete_insn_and_edges (insn);\n+\t  ndead++;\n+\t}\n \n-\t  if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n-\t    {\n-\t      in_libcall = 0;\n-\t      dead_libcall = 0;\n-\t    }\n+      if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n+\t{\n+\t  in_libcall = 0;\n+\t  dead_libcall = 0;\n \t}\n     }\n-  while (ndead != nlastdead);\n \n   if (dump_file && ndead)\n-    fprintf (dump_file, \"Deleted %i trivially dead insns; %i iterations\\n\",\n-\t     ndead, niterations);\n+    fprintf (dump_file, \"Deleted %i trivially dead insns\\n\",\n+\t     ndead);\n   /* Clean up.  */\n   free (counts);\n   timevar_pop (TV_DELETE_TRIVIALLY_DEAD);"}]}