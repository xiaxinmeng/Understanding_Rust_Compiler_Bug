{"sha": "d8edd89988bcbe163b36257caae575b82eedad86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlZGQ4OTk4OGJjYmUxNjNiMzYyNTdjYWFlNTc1YjgyZWVkYWQ4Ng==", "commit": {"author": {"name": "Ian Bolton", "email": "ian.bolton@arm.com", "date": "2013-06-04T15:32:22Z"}, "committer": {"name": "Ian Bolton", "email": "ibolton@gcc.gnu.org", "date": "2013-06-04T15:32:22Z"}, "message": "AArch64 - Improve MOVI handling (1/5)\n\nFrom-SVN: r199652", "tree": {"sha": "db369ad1ecd0e9eaf6a09f10cc4eac50f3b04c22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db369ad1ecd0e9eaf6a09f10cc4eac50f3b04c22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8edd89988bcbe163b36257caae575b82eedad86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8edd89988bcbe163b36257caae575b82eedad86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8edd89988bcbe163b36257caae575b82eedad86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8edd89988bcbe163b36257caae575b82eedad86/comments", "author": null, "committer": null, "parents": [{"sha": "5cc19c62469ac106abc24b9a684132eb7c77b92d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cc19c62469ac106abc24b9a684132eb7c77b92d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cc19c62469ac106abc24b9a684132eb7c77b92d"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "f66fd83105ea9da6a59b2dcf43d24642179d3c48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edd89988bcbe163b36257caae575b82eedad86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edd89988bcbe163b36257caae575b82eedad86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d8edd89988bcbe163b36257caae575b82eedad86", "patch": "@@ -1,3 +1,11 @@\n+2013-06-04  Ian Bolton  <ian.bolton@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_simd_valid_immediate): Change\n+\treturn type to bool for prototype.\n+\t(aarch64_legitimate_constant_p): Check for true instead of not -1.\n+\t(aarch64_simd_valid_immediate): Fix up each return to return a bool.\n+\t(aarch64_simd_immediate_valid_for_move): Update retval for bool.\n+\n 2013-06-04  Catherine Moore  <clm@codesourcery.com>\n \n \t* config/mips/mips.opt (meva): New."}, {"sha": "85cae15978062ecca53ad6956c8a341643bd8919", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8edd89988bcbe163b36257caae575b82eedad86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8edd89988bcbe163b36257caae575b82eedad86/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d8edd89988bcbe163b36257caae575b82eedad86", "patch": "@@ -103,7 +103,7 @@ static bool aarch64_vfp_is_call_or_return_candidate (enum machine_mode,\n static void aarch64_elf_asm_constructor (rtx, int) ATTRIBUTE_UNUSED;\n static void aarch64_elf_asm_destructor (rtx, int) ATTRIBUTE_UNUSED;\n static void aarch64_override_options_after_change (void);\n-static int aarch64_simd_valid_immediate (rtx, enum machine_mode, int, rtx *,\n+static bool aarch64_simd_valid_immediate (rtx, enum machine_mode, int, rtx *,\n \t\t\t\t\t int *, unsigned char *, int *, int *);\n static bool aarch64_vector_mode_supported_p (enum machine_mode);\n static unsigned bit_count (unsigned HOST_WIDE_INT);\n@@ -5153,7 +5153,7 @@ aarch64_legitimate_constant_p (enum machine_mode mode, rtx x)\n      we now decompose CONST_INTs according to expand_mov_immediate.  */\n   if ((GET_CODE (x) == CONST_VECTOR\n        && aarch64_simd_valid_immediate (x, mode, false,\n-\t\t\t\t\tNULL, NULL, NULL, NULL, NULL) != -1)\n+\t\t\t\t\tNULL, NULL, NULL, NULL, NULL))\n       || CONST_INT_P (x) || aarch64_valid_floating_const (mode, x))\n \treturn !targetm.cannot_force_const_mem (mode, x);\n \n@@ -6144,11 +6144,8 @@ aarch64_vect_float_const_representable_p (rtx x)\n   return aarch64_float_const_representable_p (x0);\n }\n \n-/* TODO: This function returns values similar to those\n-   returned by neon_valid_immediate in gcc/config/arm/arm.c\n-   but the API here is different enough that these magic numbers\n-   are not used.  It should be sufficient to return true or false.  */\n-static int\n+/* Return true for valid and false for invalid.  */\n+static bool\n aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n \t\t\t      rtx *modconst, int *elementwidth,\n \t\t\t      unsigned char *elementchar,\n@@ -6184,24 +6181,21 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n \n       if (!(simd_imm_zero\n \t    || aarch64_vect_float_const_representable_p (op)))\n-\treturn -1;\n+\treturn false;\n \n-\tif (modconst)\n-\t  *modconst = CONST_VECTOR_ELT (op, 0);\n+      if (modconst)\n+\t*modconst = CONST_VECTOR_ELT (op, 0);\n \n-\tif (elementwidth)\n-\t  *elementwidth = elem_width;\n+      if (elementwidth)\n+\t*elementwidth = elem_width;\n \n-\tif (elementchar)\n-\t  *elementchar = sizetochar (elem_width);\n+      if (elementchar)\n+\t*elementchar = sizetochar (elem_width);\n \n-\tif (shift)\n-\t  *shift = 0;\n+      if (shift)\n+\t*shift = 0;\n \n-\tif (simd_imm_zero)\n-\t  return 19;\n-\telse\n-\t  return 18;\n+      return true;\n     }\n \n   /* Splat vector constant out into a byte vector.  */\n@@ -6299,7 +6293,7 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n   if (immtype == -1\n       || (immtype >= 12 && immtype <= 15)\n       || immtype == 18)\n-    return -1;\n+    return false;\n \n \n   if (elementwidth)\n@@ -6351,7 +6345,7 @@ aarch64_simd_valid_immediate (rtx op, enum machine_mode mode, int inverse,\n         }\n     }\n \n-  return immtype;\n+  return (immtype >= 0);\n #undef CHECK\n }\n \n@@ -6369,11 +6363,11 @@ aarch64_simd_immediate_valid_for_move (rtx op, enum machine_mode mode,\n   int tmpwidth;\n   unsigned char tmpwidthc;\n   int tmpmvn = 0, tmpshift = 0;\n-  int retval = aarch64_simd_valid_immediate (op, mode, 0, &tmpconst,\n+  bool retval = aarch64_simd_valid_immediate (op, mode, 0, &tmpconst,\n \t\t\t\t\t     &tmpwidth, &tmpwidthc,\n \t\t\t\t\t     &tmpmvn, &tmpshift);\n \n-  if (retval == -1)\n+  if (!retval)\n     return 0;\n \n   if (modconst)"}]}