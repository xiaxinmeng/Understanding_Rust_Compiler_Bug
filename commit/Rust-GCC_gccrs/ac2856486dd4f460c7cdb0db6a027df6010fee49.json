{"sha": "ac2856486dd4f460c7cdb0db6a027df6010fee49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyODU2NDg2ZGQ0ZjQ2MGM3Y2RiMGRiNmEwMjdkZjYwMTBmZWU0OQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-09T06:58:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-09T06:58:42Z"}, "message": "tree-vrp.c (extract_range_from_binary_expr): If both ranges are range_int_cst_p with non-negative minimum...\n\n\t* tree-vrp.c (extract_range_from_binary_expr) <BIT_AND_EXPR>: If\n\tboth ranges are range_int_cst_p with non-negative minimum,\n\ttry harder to derive smaller range.\n\n\t* gcc.dg/tree-ssa/vrp50.c: New test.\n\t* gcc.dg/vect/slp-perm-4.c (main): Make sure loop isn't vectorized.\n\nFrom-SVN: r161984", "tree": {"sha": "eb7d0b98a599a0401264449c3b05d3acece12741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb7d0b98a599a0401264449c3b05d3acece12741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2856486dd4f460c7cdb0db6a027df6010fee49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2856486dd4f460c7cdb0db6a027df6010fee49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2856486dd4f460c7cdb0db6a027df6010fee49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2856486dd4f460c7cdb0db6a027df6010fee49/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79a3f089cc926c3355c93a3f01db1f02ba7a9e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a3f089cc926c3355c93a3f01db1f02ba7a9e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a3f089cc926c3355c93a3f01db1f02ba7a9e04"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "e8e4f1b542fd1eae6f9ede8a102748520f6b125a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac2856486dd4f460c7cdb0db6a027df6010fee49", "patch": "@@ -1,3 +1,9 @@\n+2010-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vrp.c (extract_range_from_binary_expr) <BIT_AND_EXPR>: If\n+\tboth ranges are range_int_cst_p with non-negative minimum,\n+\ttry harder to derive smaller range.\n+\n 2010-07-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* genrecog.c: Include diagnostic-core.h before toplev.h."}, {"sha": "f6e5b37ca6ab8e4158a7fece997d76017b4ea46a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac2856486dd4f460c7cdb0db6a027df6010fee49", "patch": "@@ -1,3 +1,8 @@\n+2010-07-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/tree-ssa/vrp50.c: New test.\n+\t* gcc.dg/vect/slp-perm-4.c (main): Make sure loop isn't vectorized.\n+\n 2010-07-08  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44649"}, {"sha": "bf21672c61afc41ba36abc007f55d447724db603", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp50.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp50.c?ref=ac2856486dd4f460c7cdb0db6a027df6010fee49", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+int\n+foo (unsigned int i, unsigned int j)\n+{\n+  i &= 15;\n+  j &= 15;\n+  i += 1024;\n+  j += 2048;\n+  i &= j;\n+  return i < 16;\n+}\n+\n+int\n+bar (int i)\n+{\n+  int c = 2;\n+  c &= i > 6;\n+  return c == 0;\n+}\n+\n+int baz (int x, int y)\n+{\n+  x &= 15;\n+  y &= 15;\n+  x += 4;\n+  y += 16;\n+  x &= y;\n+  return x < 20;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Folding predicate i_\\[^\\n\\r\\]* to 1\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate c_\\[^\\n\\r\\]* to 1\" \"vrp1\" } } */\n+/* { dg-final { scan-tree-dump \"Folding predicate x_\\[^\\n\\r\\]* to 1\" \"vrp1\" } } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */"}, {"sha": "858cecf0d9cbe92847375d182024dfafa990bf5b", "filename": "gcc/testsuite/gcc.dg/vect/slp-perm-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-perm-4.c?ref=ac2856486dd4f460c7cdb0db6a027df6010fee49", "patch": "@@ -69,6 +69,7 @@ int main (int argc, const char* argv[])\n       if (input[i] > 200)\n         abort();\n       output[i] = 0;\n+      __asm__ volatile (\"\");\n     }\n \n   foo (input, output);"}, {"sha": "2aac9aca5f6d0ca2eb03877ab712e41b76687c39", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2856486dd4f460c7cdb0db6a027df6010fee49/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ac2856486dd4f460c7cdb0db6a027df6010fee49", "patch": "@@ -2578,6 +2578,58 @@ extract_range_from_binary_expr (value_range_t *vr,\n \n       if (vr0_int_cst_singleton_p && vr1_int_cst_singleton_p)\n \tmin = max = int_const_binop (code, vr0.max, vr1.max, 0);\n+      else if (range_int_cst_p (&vr0)\n+\t       && range_int_cst_p (&vr1)\n+\t       && tree_int_cst_sgn (vr0.min) >= 0\n+\t       && tree_int_cst_sgn (vr1.min) >= 0)\n+\t{\n+\t  double_int vr0_mask = tree_to_double_int (vr0.min);\n+\t  double_int vr1_mask = tree_to_double_int (vr1.min);\n+\t  double_int maxd, diff;\n+\t  tree mask;\n+\n+\t  min = build_int_cst (expr_type, 0);\n+\t  /* Compute non-zero bits mask from both ranges.  */\n+\t  if (!vr0_int_cst_singleton_p)\n+\t    {\n+\t      maxd = tree_to_double_int (vr0.max);\n+\t      diff = double_int_sub (maxd, vr0_mask);\n+\t      if (diff.high)\n+\t\t{\n+\t\t  diff.low = ~(unsigned HOST_WIDE_INT)0;\n+\t\t  diff.high = ((HOST_WIDE_INT) 2\n+\t\t\t       << floor_log2 (diff.high)) - 1;\n+\t\t}\n+\t      else\n+\t\tdiff.low = ((HOST_WIDE_INT) 2 << floor_log2 (diff.low)) - 1;\n+\t      vr0_mask = double_int_ior (vr0_mask,\n+\t\t\t\t\t double_int_ior (maxd, diff));\n+\t    }\n+\t  if (!vr1_int_cst_singleton_p)\n+\t    {\n+\t      maxd = tree_to_double_int (vr1.max);\n+\t      diff = double_int_sub (maxd, vr1_mask);\n+\t      if (diff.high)\n+\t\t{\n+\t\t  diff.low = ~(unsigned HOST_WIDE_INT)0;\n+\t\t  diff.high = ((HOST_WIDE_INT) 2\n+\t\t\t       << floor_log2 (diff.high)) - 1;\n+\t\t}\n+\t      else\n+\t\tdiff.low = ((HOST_WIDE_INT) 2 << floor_log2 (diff.low)) - 1;\n+\t      vr1_mask = double_int_ior (vr1_mask,\n+\t\t\t\t\t double_int_ior (maxd, diff));\n+\t    }\n+\t  mask = double_int_to_tree (expr_type,\n+\t\t\t\t     double_int_and (vr0_mask, vr1_mask));\n+\t  max = vr0.max;\n+\t  if (tree_int_cst_lt (vr1.max, max))\n+\t    max = vr1.max;\n+\t  if (!TREE_OVERFLOW (mask)\n+\t      && tree_int_cst_lt (mask, max)\n+\t      && tree_int_cst_sgn (mask) >= 0)\n+\t    max = mask;\n+\t}\n       else if (vr0_int_cst_singleton_p\n \t       && tree_int_cst_sgn (vr0.max) >= 0)\n \t{"}]}