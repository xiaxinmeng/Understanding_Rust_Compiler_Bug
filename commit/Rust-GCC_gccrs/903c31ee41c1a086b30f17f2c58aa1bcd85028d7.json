{"sha": "903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzYzMxZWU0MWMxYTA4NmIzMGYxN2YyYzU4YWExYmNkODUwMjhkNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2010-09-21T11:42:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-09-21T11:42:06Z"}, "message": "i386.c (ix86_split_ashl): Rename single_width variable to half_width.\n\n\t* config/i386/i386.c (ix86_split_ashl): Rename single_width variable\n\tto half_width.  Use GET_MODE_BITSIZE to calculate mode size.\n\t(ix86_split_ashr): Ditto.\n\t(ix86_split_lshr): Ditto.\n\nFrom-SVN: r164476", "tree": {"sha": "b50e3cee20ac85344c17bcae36523f2fb686dc9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b50e3cee20ac85344c17bcae36523f2fb686dc9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903c31ee41c1a086b30f17f2c58aa1bcd85028d7/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce2b1d68a387994dab9de5e862c809be3d39326c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2b1d68a387994dab9de5e862c809be3d39326c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2b1d68a387994dab9de5e862c809be3d39326c"}], "stats": {"total": 47, "additions": 27, "deletions": 20}, "files": [{"sha": "97f25e7332294d36d21c208bf4e4c0af8768e786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c31ee41c1a086b30f17f2c58aa1bcd85028d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c31ee41c1a086b30f17f2c58aa1bcd85028d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "patch": "@@ -1,3 +1,10 @@\n+2010-09-21  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_split_ashl): Rename single_width variable\n+\tto half_width.  Use GET_MODE_BITSIZE to calculate mode size.\n+\t(ix86_split_ashr): Ditto.\n+\t(ix86_split_lshr): Ditto.\n+\n 2010-09-21  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/45580"}, {"sha": "de1564afb9461e0f0ba67317a1e667f59332c8a7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903c31ee41c1a086b30f17f2c58aa1bcd85028d7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903c31ee41c1a086b30f17f2c58aa1bcd85028d7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=903c31ee41c1a086b30f17f2c58aa1bcd85028d7", "patch": "@@ -18079,23 +18079,23 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n {\n   rtx (*gen_ashl3)(rtx, rtx, rtx);\n   rtx (*gen_shld)(rtx, rtx, rtx);\n+  int half_width = GET_MODE_BITSIZE (mode) >> 1;\n \n   rtx low[2], high[2];\n   int count;\n-  const int single_width = mode == DImode ? 32 : 64;\n \n   if (CONST_INT_P (operands[2]))\n     {\n       split_double_mode (mode, operands, 2, low, high);\n-      count = INTVAL (operands[2]) & (single_width * 2 - 1);\n+      count = INTVAL (operands[2]) & (GET_MODE_BITSIZE (mode) - 1);\n \n-      if (count >= single_width)\n+      if (count >= half_width)\n \t{\n \t  emit_move_insn (high[0], low[1]);\n \t  emit_move_insn (low[0], const0_rtx);\n \n-\t  if (count > single_width)\n-\t    ix86_expand_ashl_const (high[0], count - single_width, mode);\n+\t  if (count > half_width)\n+\t    ix86_expand_ashl_const (high[0], count - half_width, mode);\n \t}\n       else\n \t{\n@@ -18124,7 +18124,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, enum machine_mode mode)\n \n \t  ix86_expand_clear (low[0]);\n \t  ix86_expand_clear (high[0]);\n-\t  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (single_width)));\n+\t  emit_insn (gen_testqi_ccz_1 (operands[2], GEN_INT (half_width)));\n \n \t  d = gen_lowpart (QImode, low[0]);\n \t  d = gen_rtx_STRICT_LOW_PART (VOIDmode, d);\n@@ -18231,34 +18231,34 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n   rtx (*gen_ashr3)(rtx, rtx, rtx)\n     = mode == DImode ? gen_ashrsi3 : gen_ashrdi3;\n   rtx (*gen_shrd)(rtx, rtx, rtx);\n+  int half_width = GET_MODE_BITSIZE (mode) >> 1;\n \n   rtx low[2], high[2];\n   int count;\n-  const int single_width = mode == DImode ? 32 : 64;\n \n   if (CONST_INT_P (operands[2]))\n     {\n       split_double_mode (mode, operands, 2, low, high);\n-      count = INTVAL (operands[2]) & (single_width * 2 - 1);\n+      count = INTVAL (operands[2]) & (GET_MODE_BITSIZE (mode) - 1);\n \n-      if (count == single_width * 2 - 1)\n+      if (count == GET_MODE_BITSIZE (mode) - 1)\n \t{\n \t  emit_move_insn (high[0], high[1]);\n \t  emit_insn (gen_ashr3 (high[0], high[0],\n-\t\t\t\tGEN_INT (single_width - 1)));\n+\t\t\t\tGEN_INT (half_width - 1)));\n \t  emit_move_insn (low[0], high[0]);\n \n \t}\n-      else if (count >= single_width)\n+      else if (count >= half_width)\n \t{\n \t  emit_move_insn (low[0], high[1]);\n \t  emit_move_insn (high[0], low[0]);\n \t  emit_insn (gen_ashr3 (high[0], high[0],\n-\t\t\t\tGEN_INT (single_width - 1)));\n+\t\t\t\tGEN_INT (half_width - 1)));\n \n-\t  if (count > single_width)\n+\t  if (count > half_width)\n \t    emit_insn (gen_ashr3 (low[0], low[0],\n-\t\t\t\t  GEN_INT (count - single_width)));\n+\t\t\t\t  GEN_INT (count - half_width)));\n \t}\n       else\n \t{\n@@ -18290,7 +18290,7 @@ ix86_split_ashr (rtx *operands, rtx scratch, enum machine_mode mode)\n \n \t  emit_move_insn (scratch, high[0]);\n \t  emit_insn (gen_ashr3 (scratch, scratch,\n-\t\t\t\tGEN_INT (single_width - 1)));\n+\t\t\t\tGEN_INT (half_width - 1)));\n \t  emit_insn (gen_x86_shift_adj_1 (low[0], high[0], operands[2],\n \t\t\t\t\t  scratch));\n \t}\n@@ -18310,24 +18310,24 @@ ix86_split_lshr (rtx *operands, rtx scratch, enum machine_mode mode)\n   rtx (*gen_lshr3)(rtx, rtx, rtx)\n     = mode == DImode ? gen_lshrsi3 : gen_lshrdi3;\n   rtx (*gen_shrd)(rtx, rtx, rtx);\n+  int half_width = GET_MODE_BITSIZE (mode) >> 1;\n \n   rtx low[2], high[2];\n   int count;\n-  const int single_width = mode == DImode ? 32 : 64;\n \n   if (CONST_INT_P (operands[2]))\n     {\n       split_double_mode (mode, operands, 2, low, high);\n-      count = INTVAL (operands[2]) & (single_width * 2 - 1);\n+      count = INTVAL (operands[2]) & (GET_MODE_BITSIZE (mode) - 1);\n \n-      if (count >= single_width)\n+      if (count >= half_width)\n \t{\n \t  emit_move_insn (low[0], high[1]);\n \t  ix86_expand_clear (high[0]);\n \n-\t  if (count > single_width)\n+\t  if (count > half_width)\n \t    emit_insn (gen_lshr3 (low[0], low[0],\n-\t\t\t\t  GEN_INT (count - single_width)));\n+\t\t\t\t  GEN_INT (count - half_width)));\n \t}\n       else\n \t{"}]}