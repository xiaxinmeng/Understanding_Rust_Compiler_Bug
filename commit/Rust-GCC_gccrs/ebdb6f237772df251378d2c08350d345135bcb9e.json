{"sha": "ebdb6f237772df251378d2c08350d345135bcb9e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJkYjZmMjM3NzcyZGYyNTEzNzhkMmMwODM1MGQzNDUxMzViY2I5ZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2018-08-23T09:47:34Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2018-08-23T09:47:34Z"}, "message": "PR target/86951 arm - Handle speculation barriers on pre-armv7 CPUs\n\nThe AArch32 instruction sets prior to Armv7 do not define the ISB and\nDSB instructions that are needed to form a speculation barrier.  While\nI do not know of any instances of cores based on those instruction\nsets being vulnerable to speculative side channel attacks it is\npossible to run code built for those ISAs on more recent hardware\nwhere they would become vulnerable.\n\nThis patch works around this by using a library call added to libgcc.\nThat code can then take any platform-specific actions necessary to\nensure safety.\n\nFor the moment I've only handled two cases: the library code being\nbuilt for armv7 or later anyway and running on Linux.\n\nOn Linux we can handle this by calling the kernel function that will\nflush a small amount of cache.  Such a sequence ends with a ISB+DSB\nsequence if running on an Armv7 or later CPU.\n\ngcc:\n\n\tPR target/86951\n\t* config/arm/arm-protos.h (arm_emit_speculation_barrier): New\n\tprototype.\n\t* config/arm/arm.c (speculation_barrier_libfunc): New static\n\tvariable.\n\t(arm_init_libfuncs): Initialize it.\n\t(arm_emit_speculation_barrier): New function.\n\t* config/arm/arm.md (speculation_barrier): Call\n\tarm_emit_speculation_barrier for architectures that do not have \n\tDSB or ISB.\n\t(speculation_barrier_insn): Only match on Armv7 or later.\n\nlibgcc:\n\n\tPR target/86951\n\t* config/arm/lib1funcs.asm (speculation_barrier): New function.\n\t* config/arm/t-arm (LIB1ASMFUNCS): Add it to list of functions\n\tto build.\n\nFrom-SVN: r263806", "tree": {"sha": "6a3c701b592c1d8f41cc87152a53e5dda03dd473", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6a3c701b592c1d8f41cc87152a53e5dda03dd473"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebdb6f237772df251378d2c08350d345135bcb9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdb6f237772df251378d2c08350d345135bcb9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebdb6f237772df251378d2c08350d345135bcb9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebdb6f237772df251378d2c08350d345135bcb9e/comments", "author": null, "committer": null, "parents": [{"sha": "60d91c7fae77fe6b7bd50a8b400a045b813e330f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60d91c7fae77fe6b7bd50a8b400a045b813e330f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60d91c7fae77fe6b7bd50a8b400a045b813e330f"}], "stats": {"total": 100, "additions": 93, "deletions": 7}, "files": [{"sha": "7b7c79bbb7df6c6636eb60a27351d0e54e12d319", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -1,3 +1,17 @@\n+2018-08-23  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/86951\n+\t* config/arm/arm-protos.h (arm_emit_speculation_barrier): New\n+\tprototype.\n+\t* config/arm/arm.c (speculation_barrier_libfunc): New static\n+\tvariable.\n+\t(arm_init_libfuncs): Initialize it.\n+\t(arm_emit_speculation_barrier): New function.\n+\t* config/arm/arm.md (speculation_barrier): Call\n+\tarm_emit_speculation_barrier for architectures that do not have\n+\tDSB or ISB.\n+\t(speculation_barrier_insn): Only match on Armv7 or later.\n+\n 2018-08-23  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/87024"}, {"sha": "0dfb3ac59a6ad33a46256aac5243d8ea46f55131", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -56,6 +56,8 @@ extern void arm_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update\n extern rtx arm_simd_vect_par_cnst_half (machine_mode mode, bool high);\n extern bool arm_simd_check_vect_par_cnst_half_p (rtx op, machine_mode mode,\n \t\t\t\t\t\t bool high);\n+extern void arm_emit_speculation_barrier_function (void);\n+\n #ifdef RTX_CODE\n extern void arm_gen_unlikely_cbranch (enum rtx_code, machine_mode cc_mode,\n \t\t\t\t      rtx label_ref);"}, {"sha": "c081216decd04e94069940f096b8c70b001f4beb", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -2466,8 +2466,9 @@ arm_set_fixed_conv_libfunc (convert_optab optable, machine_mode to,\n   set_conv_libfunc (optable, to, from, buffer);\n }\n \n-/* Set up library functions unique to ARM.  */\n+static GTY(()) rtx speculation_barrier_libfunc;\n \n+/* Set up library functions unique to ARM.  */\n static void\n arm_init_libfuncs (void)\n {\n@@ -2753,6 +2754,8 @@ arm_init_libfuncs (void)\n \n   if (TARGET_AAPCS_BASED)\n     synchronize_libfunc = init_one_libfunc (\"__sync_synchronize\");\n+\n+  speculation_barrier_libfunc = init_one_libfunc (\"__speculation_barrier\");\n }\n \n /* On AAPCS systems, this is the \"struct __va_list\".  */\n@@ -31528,6 +31531,16 @@ arm_constant_alignment (const_tree exp, HOST_WIDE_INT align)\n   return align;\n }\n \n+/* Emit a speculation barrier on target architectures that do not have\n+   DSB/ISB directly.  Such systems probably don't need a barrier\n+   themselves, but if the code is ever run on a later architecture, it\n+   might become a problem.  */\n+void\n+arm_emit_speculation_barrier_function ()\n+{\n+  emit_library_call (speculation_barrier_libfunc, LCT_NORMAL, VOIDmode);\n+}\n+\n #if CHECKING_P\n namespace selftest {\n "}, {"sha": "270b8e454b3431b81d20fc26506c2c043933b09b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -12016,18 +12016,24 @@\n   [(unspec_volatile [(const_int 0)] VUNSPEC_SPECULATION_BARRIER)]\n   \"TARGET_EITHER\"\n   \"\n-    /* Don't emit anything for Thumb1 and suppress the warning from the\n-       generic expansion.  */\n-    if (!TARGET_32BIT)\n-       DONE;\n+  /* For thumb1 (except Armv8 derivatives), and for pre-Armv7 we don't\n+     have a usable barrier (and probably don't need one in practice).\n+     But to be safe if such code is run on later architectures, call a\n+     helper function in libgcc that will do the thing for the active\n+     system.  */\n+  if (!(arm_arch7 || arm_arch8))\n+    {\n+      arm_emit_speculation_barrier_function ();\n+      DONE;\n+    }\n   \"\n )\n \n ;; Generate a hard speculation barrier when we have not enabled speculation\n ;; tracking.\n (define_insn \"*speculation_barrier_insn\"\n   [(unspec_volatile [(const_int 0)] VUNSPEC_SPECULATION_BARRIER)]\n-  \"TARGET_32BIT\"\n+  \"arm_arch7 || arm_arch8\"\n   \"isb\\;dsb\\\\tsy\"\n   [(set_attr \"type\" \"block\")\n    (set_attr \"length\" \"8\")]"}, {"sha": "280bd10286823a3785de64a67959a2098f286b18", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -1,3 +1,10 @@\n+2018-08-23  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/86951\n+\t* config/arm/lib1funcs.asm (speculation_barrier): New function.\n+\t* config/arm/t-arm (LIB1ASMFUNCS): Add it to list of functions\n+\tto build.\n+\n 2018-08-22  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/unwind-dw2-fde-darwin.c "}, {"sha": "ff06d504a4c940e1fe04cb9b17d5eece131ccc16", "filename": "libgcc/config/arm/lib1funcs.S", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2Fconfig%2Farm%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Flib1funcs.S?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -1533,6 +1533,50 @@ LSYM(Lover12):\n #error \"This is only for ARM EABI GNU/Linux\"\n #endif\n #endif /* L_clear_cache */\n+\n+#ifdef L_speculation_barrier\n+\tFUNC_START speculation_barrier\n+#if __ARM_ARCH >= 7\n+\tisb\n+\tdsb sy\n+#elif defined __ARM_EABI__ && defined __linux__\n+\t/* We don't have a speculation barrier directly for this\n+\t   platform/architecture variant.  But we can use a kernel\n+\t   clear_cache service routine which will emit such instructions\n+\t   if run on a later version of the architecture.  We don't\n+\t   really want to flush the cache, but we must give it a valid\n+\t   address, so just clear pc..pc+1.  */\n+#if defined __thumb__ && !defined __thumb2__\n+\tpush\t{r7}\n+\tmov\tr7, #0xf\n+\tlsl\tr7, #16\n+\tadd\tr7, #2\n+\tadr\tr0, . + 4\n+\tadd\tr1, r0, #1\n+\tmov\tr2, #0\n+\tsvc\t0\n+\tpop\t{r7}\n+#else\n+\tdo_push\t{r7}\n+#ifdef __ARM_ARCH_6T2__\n+\tmovw\tr7, #2\n+\tmovt\tr7, #0xf\n+#else\n+\tmov\tr7, #0xf0000\n+\tadd\tr7, r7, #2\n+#endif\n+\tadd\tr0, pc, #0\t/* ADR.  */\n+\tadd\tr1, r0, #1\n+\tmov\tr2, #0\n+\tsvc\t0\n+\tdo_pop\t{r7}\n+#endif /* Thumb1 only */\n+#else\n+#warning \"No speculation barrier defined for this platform\"\n+#endif\n+\tRET\n+\tFUNC_END speculation_barrier\n+#endif\n /* ------------------------------------------------------------------------ */\n /* Dword shift operations.  */\n /* All the following Dword shift variants rely on the fact that"}, {"sha": "274bf2a8ef33c5e8a8ee2b246aba92d30297abe1", "filename": "libgcc/config/arm/t-arm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebdb6f237772df251378d2c08350d345135bcb9e/libgcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Farm%2Ft-arm?ref=ebdb6f237772df251378d2c08350d345135bcb9e", "patch": "@@ -1,6 +1,6 @@\n LIB1ASMSRC = arm/lib1funcs.S\n LIB1ASMFUNCS = _thumb1_case_sqi _thumb1_case_uqi _thumb1_case_shi \\\n-\t_thumb1_case_uhi _thumb1_case_si\n+\t_thumb1_case_uhi _thumb1_case_si _speculation_barrier\n \n HAVE_CMSE:=$(findstring __ARM_FEATURE_CMSE,$(shell $(gcc_compile_bare) -dM -E - </dev/null))\n ifneq ($(shell $(gcc_compile_bare) -E -mcmse - </dev/null 2>/dev/null),)"}]}