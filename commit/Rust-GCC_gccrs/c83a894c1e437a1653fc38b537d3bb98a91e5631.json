{"sha": "c83a894c1e437a1653fc38b537d3bb98a91e5631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzYTg5NGMxZTQzN2ExNjUzZmMzOGI1MzdkM2JiOThhOTFlNTYzMQ==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2016-06-03T12:48:21Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2016-06-03T12:48:21Z"}, "message": "[1/3] Split vect_get_vec_def_for_operand into two\n\n2016-06-03  Alan Hayward  <alan.hayward@arm.com>\n\n[1/3] Split vect_get_vec_def_for_operand into two\n\ngcc/\n\t* tree-vectorizer.h (vect_get_vec_def_for_operand_1): New\n\t* tree-vect-stmts.c (vect_get_vec_def_for_operand_1): New\n\t(vect_get_vec_def_for_operand): Split out code.\n\nFrom-SVN: r237063", "tree": {"sha": "1276dd14880f6db84764f834f1d88f4ca2d6e26e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1276dd14880f6db84764f834f1d88f4ca2d6e26e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83a894c1e437a1653fc38b537d3bb98a91e5631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83a894c1e437a1653fc38b537d3bb98a91e5631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83a894c1e437a1653fc38b537d3bb98a91e5631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83a894c1e437a1653fc38b537d3bb98a91e5631/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5abc59784181358f0125ac67bbff25016cadf3ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5abc59784181358f0125ac67bbff25016cadf3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5abc59784181358f0125ac67bbff25016cadf3ff"}], "stats": {"total": 125, "additions": 71, "deletions": 54}, "files": [{"sha": "9d75bca4c1c26899c21da9764dd2e10c868600b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83a894c1e437a1653fc38b537d3bb98a91e5631", "patch": "@@ -1,3 +1,9 @@\n+2016-06-03  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* tree-vectorizer.h (vect_get_vec_def_for_operand_1): New\n+\t* tree-vect-stmts.c (vect_get_vec_def_for_operand_1): New\n+\t(vect_get_vec_def_for_operand): Split out code.\n+\n 2016-06-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (define_peepholes for two mfcr's): Delete."}, {"sha": "231bf4e0e1c86d7487dc72cf5363184e6496a65a", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 64, "deletions": 54, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c83a894c1e437a1653fc38b537d3bb98a91e5631", "patch": "@@ -1305,73 +1305,25 @@ vect_init_vector (gimple *stmt, tree val, tree type, gimple_stmt_iterator *gsi)\n   return new_temp;\n }\n \n+/* Function vect_get_vec_def_for_operand_1.\n \n-/* Function vect_get_vec_def_for_operand.\n-\n-   OP is an operand in STMT.  This function returns a (vector) def that will be\n-   used in the vectorized stmt for STMT.\n-\n-   In the case that OP is an SSA_NAME which is defined in the loop, then\n-   STMT_VINFO_VEC_STMT of the defining stmt holds the relevant def.\n-\n-   In case OP is an invariant or constant, a new stmt that creates a vector def\n-   needs to be introduced.  VECTYPE may be used to specify a required type for\n-   vector invariant.  */\n+   For a defining stmt DEF_STMT of a scalar stmt, return a vector def with type\n+   DT that will be used in the vectorized stmt.  */\n \n tree\n-vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n+vect_get_vec_def_for_operand_1 (gimple *def_stmt, enum vect_def_type dt)\n {\n   tree vec_oprnd;\n   gimple *vec_stmt;\n-  gimple *def_stmt;\n   stmt_vec_info def_stmt_info = NULL;\n-  stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n-  tree stmt_vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n-  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n-  enum vect_def_type dt;\n-  bool is_simple_use;\n-  tree vector_type;\n-\n-  if (dump_enabled_p ())\n-    {\n-      dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"vect_get_vec_def_for_operand: \");\n-      dump_generic_expr (MSG_NOTE, TDF_SLIM, op);\n-      dump_printf (MSG_NOTE, \"\\n\");\n-    }\n-\n-  is_simple_use = vect_is_simple_use (op, loop_vinfo, &def_stmt, &dt);\n-  gcc_assert (is_simple_use);\n-  if (dump_enabled_p ())\n-    {\n-      int loc_printed = 0;\n-      if (def_stmt)\n-        {\n-          if (loc_printed)\n-            dump_printf (MSG_NOTE, \"  def_stmt =  \");\n-          else\n-            dump_printf_loc (MSG_NOTE, vect_location, \"  def_stmt =  \");\n-\t  dump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n-        }\n-    }\n \n   switch (dt)\n     {\n     /* operand is a constant or a loop invariant.  */\n     case vect_constant_def:\n     case vect_external_def:\n-      {\n-\tif (vectype)\n-\t  vector_type = vectype;\n-\telse if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE\n-\t\t && VECTOR_BOOLEAN_TYPE_P (stmt_vectype))\n-\t  vector_type = build_same_sized_truth_vector_type (stmt_vectype);\n-\telse\n-\t  vector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n-\n-\tgcc_assert (vector_type);\n-        return vect_init_vector (stmt, op, vector_type, NULL);\n-      }\n+      /* Code should use vect_get_vec_def_for_operand.  */\n+      gcc_unreachable ();\n \n     /* operand is defined inside the loop.  */\n     case vect_internal_def:\n@@ -1424,6 +1376,64 @@ vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n }\n \n \n+/* Function vect_get_vec_def_for_operand.\n+\n+   OP is an operand in STMT.  This function returns a (vector) def that will be\n+   used in the vectorized stmt for STMT.\n+\n+   In the case that OP is an SSA_NAME which is defined in the loop, then\n+   STMT_VINFO_VEC_STMT of the defining stmt holds the relevant def.\n+\n+   In case OP is an invariant or constant, a new stmt that creates a vector def\n+   needs to be introduced.  VECTYPE may be used to specify a required type for\n+   vector invariant.  */\n+\n+tree\n+vect_get_vec_def_for_operand (tree op, gimple *stmt, tree vectype)\n+{\n+  gimple *def_stmt;\n+  enum vect_def_type dt;\n+  bool is_simple_use;\n+  stmt_vec_info stmt_vinfo = vinfo_for_stmt (stmt);\n+  loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n+\n+  if (dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location,\n+                       \"vect_get_vec_def_for_operand: \");\n+      dump_generic_expr (MSG_NOTE, TDF_SLIM, op);\n+      dump_printf (MSG_NOTE, \"\\n\");\n+    }\n+\n+  is_simple_use = vect_is_simple_use (op, loop_vinfo, &def_stmt, &dt);\n+  gcc_assert (is_simple_use);\n+  if (def_stmt && dump_enabled_p ())\n+    {\n+      dump_printf_loc (MSG_NOTE, vect_location, \"  def_stmt =  \");\n+      dump_gimple_stmt (MSG_NOTE, TDF_SLIM, def_stmt, 0);\n+    }\n+\n+  if (dt == vect_constant_def || dt == vect_external_def)\n+    {\n+      tree stmt_vectype = STMT_VINFO_VECTYPE (stmt_vinfo);\n+      tree vector_type;\n+\n+      if (vectype)\n+\tvector_type = vectype;\n+      else if (TREE_CODE (TREE_TYPE (op)) == BOOLEAN_TYPE\n+\t       && VECTOR_BOOLEAN_TYPE_P (stmt_vectype))\n+\tvector_type = build_same_sized_truth_vector_type (stmt_vectype);\n+      else\n+\tvector_type = get_vectype_for_scalar_type (TREE_TYPE (op));\n+\n+      gcc_assert (vector_type);\n+      return vect_init_vector (stmt, op, vector_type, NULL);\n+    }\n+  else\n+    return vect_get_vec_def_for_operand_1 (def_stmt, dt);\n+}\n+\n+\n /* Function vect_get_vec_def_for_stmt_copy\n \n    Return a vector-def for an operand.  This function is used when the"}, {"sha": "18f9f7a9ef9c829f9b09d560b539042970209cb4", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83a894c1e437a1653fc38b537d3bb98a91e5631/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=c83a894c1e437a1653fc38b537d3bb98a91e5631", "patch": "@@ -994,6 +994,7 @@ extern unsigned record_stmt_cost (stmt_vector_for_cost *, int,\n extern void vect_finish_stmt_generation (gimple *, gimple *,\n                                          gimple_stmt_iterator *);\n extern bool vect_mark_stmts_to_be_vectorized (loop_vec_info);\n+extern tree vect_get_vec_def_for_operand_1 (gimple *, enum vect_def_type);\n extern tree vect_get_vec_def_for_operand (tree, gimple *, tree = NULL);\n extern tree vect_init_vector (gimple *, tree, tree,\n                               gimple_stmt_iterator *);"}]}