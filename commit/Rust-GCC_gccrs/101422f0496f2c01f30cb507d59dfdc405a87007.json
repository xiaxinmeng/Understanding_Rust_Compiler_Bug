{"sha": "101422f0496f2c01f30cb507d59dfdc405a87007", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAxNDIyZjA0OTZmMmMwMWYzMGNiNTA3ZDU5ZGZkYzQwNWE4NzAwNw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-05-12T11:16:33Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-05-12T11:16:33Z"}, "message": "Add TLS checks to ObjC\n\n\t* objc-obj-c++-shared/Object1.m: New.\n\t* objc.dg/torture: New directory.\n\t* objc.dg/torture/tls: Ditto.\n\t* objc.dg/tls: Ditto.\n\t* objc.dg/torture/tls/trivial.m: New test.\n\t* objc.dg/torture/tls/thr-init-2.m: New test.\n\t* objc.dg/torture/tls/thr-init-3.m: New test.\n\t* objc.dg/torture/tls/thr-init.m: New test.\n\t* objc.dg/torture/tls/diag-1.m: New test.\n\t* objc.dg/torture/tls/tls.exp: New.\n\t* objc.dg/torture/trivial.m: New test.\n\t* objc.dg/torture/dg-torture.exp: New.\n\t* objc.dg/tls/diag-3.m: New test.\n\t* objc.dg/tls/diag-4.m: New test.\n\t* objc.dg/tls/diag-5.m: New test.\n\t* objc.dg/tls/init-1.m: New test.\n\t* objc.dg/tls/init-2.m: New test.\n\t* objc.dg/tls/tls.exp: New.\n\t* objc.dg/tls/diag-2.m: New test.\n\t* lib/objc.exp: Respond to dg-additional-files.\n\nFrom-SVN: r159311", "tree": {"sha": "3f279e5da47116dc02dc0ef1a197d37ed281fe1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f279e5da47116dc02dc0ef1a197d37ed281fe1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/101422f0496f2c01f30cb507d59dfdc405a87007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101422f0496f2c01f30cb507d59dfdc405a87007", "html_url": "https://github.com/Rust-GCC/gccrs/commit/101422f0496f2c01f30cb507d59dfdc405a87007", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/101422f0496f2c01f30cb507d59dfdc405a87007/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623a6941fa3db376bde6179eb7ca2f3b37b89518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623a6941fa3db376bde6179eb7ca2f3b37b89518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623a6941fa3db376bde6179eb7ca2f3b37b89518"}], "stats": {"total": 304, "additions": 300, "deletions": 4}, "files": [{"sha": "d8ea55ea61f0ebc0acc909aea806c440985d6b1d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -1,3 +1,26 @@\n+2010-05-12  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-obj-c++-shared/Object1.m: New.\n+\t* objc.dg/torture: New directory.\n+\t* objc.dg/torture/tls: Ditto.\n+\t* objc.dg/tls: Ditto.\n+\t* objc.dg/torture/tls/trivial.m: New test.\n+\t* objc.dg/torture/tls/thr-init-2.m: New test.\n+\t* objc.dg/torture/tls/thr-init-3.m: New test.\n+\t* objc.dg/torture/tls/thr-init.m: New test.\n+\t* objc.dg/torture/tls/diag-1.m: New test.\n+\t* objc.dg/torture/tls/tls.exp: New.\n+\t* objc.dg/torture/trivial.m: New test.\n+\t* objc.dg/torture/dg-torture.exp: New.\n+\t* objc.dg/tls/diag-3.m: New test.\n+\t* objc.dg/tls/diag-4.m: New test.\n+\t* objc.dg/tls/diag-5.m: New test.\n+\t* objc.dg/tls/init-1.m: New test.\n+\t* objc.dg/tls/init-2.m: New test.\n+\t* objc.dg/tls/tls.exp: New.\n+\t* objc.dg/tls/diag-2.m: New test.\n+\t* lib/objc.exp: Respond to dg-additional-files.\n+\n 2010-05-12  Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* gcc.target/m68k/20100512-1.c: New."}, {"sha": "f435a75af061c8e4cd7ca27cdde0ee5617f74b1d", "filename": "gcc/testsuite/objc-obj-c++-shared/Object1.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc-obj-c%2B%2B-shared%2FObject1.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,11 @@\n+#import \"Object1.h\"\n+/* This will generate the code if required - as determined by\n+   the headr above.  It is kept like this to keep one code file\n+   shared between dg-xxxx tests that can ask for an extra source\n+   and the objc/{compile,execute}/xxx tests that have to include\n+   the implementation explicitly.\n+   \n+   For cases/targets that don't require the generation of the\n+   Object implementation, this should result in an empty object.\n+*/\n+#import \"Object1-implementation.h\""}, {"sha": "52433a43ee9c1255a139d5e2cc4e11e2a553d0b0", "filename": "gcc/testsuite/objc.dg/dg.exp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdg.exp?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -27,14 +27,15 @@ if ![info exists DEFAULT_CFLAGS] then {\n # Initialize `dg'.\n dg-init\n \n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n # Main loop.\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[m\\]]] \\\n-\t\"-fgnu-runtime\" $DEFAULT_CFLAGS\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_CFLAGS\n \n # darwin targets can also run code with the NeXT runtime.\n if [istarget \"*-*-darwin*\" ] {\n-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[m\\]]] \\\n-\t\"-fnext-runtime\" $DEFAULT_CFLAGS\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_CFLAGS\n }\n \n # All done."}, {"sha": "4f22281eb9c9d87d10908aafe36caba88386ba60", "filename": "gcc/testsuite/objc.dg/tls/diag-2.m", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-2.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,26 @@\n+/* Invalid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread extern int g1;\t\t/* { dg-error \"'__thread' before 'extern'\" } */\n+__thread static int g2;\t\t/* { dg-error \"'__thread' before 'static'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate '__thread'\" } */\n+typedef __thread int g4;\t/* { dg-error \" '__thread' used with 'typedef'\" } */\n+\n+void foo()\n+{\n+  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared '__thread'\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"'__thread' used with 'auto'\" } */\n+  __thread extern int l3;\t/* { dg-error \"'__thread' before 'extern'\" } */\n+  register __thread int l4;\t/* { dg-error \"'__thread' used with 'register'\" } */\n+}\n+\n+__thread void f1 ();\t\t/* { dg-error \"invalid storage class for function 'f1'\" } */\n+extern __thread void f2 ();\t/* { dg-error \"invalid storage class for function 'f2'\" } */\n+static __thread void f3 ();\t/* { dg-error \"invalid storage class for function 'f3'\" } */\n+__thread void f4 () { }\t\t/* { dg-error \"function definition declared '__thread'\" } */\n+\n+void bar(__thread int p1);\t/* { dg-error \"(invalid in parameter)|(specified for parameter)\" } */\n+\n+struct A {\n+  __thread int i;\t\t/* { dg-error \"expected specifier-qualifier-list before '__thread'\" } */\n+};"}, {"sha": "c71f66fb8f5d9df3475da9b55570d84d18c780a5", "filename": "gcc/testsuite/objc.dg/tls/diag-3.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-3.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,11 @@\n+/* Report invalid extern and __thread combinations. */\n+/* { dg-require-effective-target tls } */\n+\n+extern int j;\t\t/* { dg-message \"previous declaration of 'j' was here\" } */\n+__thread int j;\t\t/* { dg-error \"follows non-thread-local\" } */\n+\n+extern __thread int i;\t/* { dg-message \"previous declaration of 'i' was here\" } */\n+int i;\t\t\t/* { dg-error \"follows thread-local\" } */\n+\n+extern __thread int k;\t/* This is fine. */\n+__thread int k;"}, {"sha": "38a5b3abadf65e8d9a6b6791f797edc34c81aeb4", "filename": "gcc/testsuite/objc.dg/tls/diag-4.m", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-4.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,10 @@\n+/* Invalid __thread specifiers.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread typedef int g4;\t/* { dg-error \"'__thread' used with 'typedef'\" } */\n+\n+void foo()\n+{\n+  __thread auto int l2;\t\t/* { dg-error \"'__thread' used with 'auto'\" } */\n+  __thread register int l4;\t/* { dg-error \"'__thread' used with 'register'\" } */\n+}"}, {"sha": "ac78cb2951d5e6bbb4010b8b112a2ebf0c78c31c", "filename": "gcc/testsuite/objc.dg/tls/diag-5.m", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Fdiag-5.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,4 @@\n+/* __thread specifiers on empty declarations.  */\n+/* { dg-require-effective-target tls } */\n+\n+__thread struct foo; /* { dg-warning \"useless '__thread' in empty declaration\" } */"}, {"sha": "fa4208dce0c1cac31e44f54446e70bfb5ef69678", "filename": "gcc/testsuite/objc.dg/tls/init-1.m", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-1.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,5 @@\n+/* Invalid initializations.  */\n+/* { dg-require-effective-target tls } */\n+\n+extern __thread int i;\n+int *p = &i;\t/* { dg-error \"initializer element is not constant\" } */"}, {"sha": "69733cc3c1c81973a89693b301a339691c68c7ad", "filename": "gcc/testsuite/objc.dg/tls/init-2.m", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Finit-2.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,14 @@\n+/* Invalid initializations.  */\n+/* { dg-require-effective-target tls } */\n+\n+extern __thread int i;\n+__thread int *p = &i;\t/* { dg-error \"initializer element is not constant\" } */\n+\n+extern int f();\n+__thread int j = f();\t/* { dg-error \"initializer element is not constant\" } */\n+\n+struct S\n+{\n+  S(); \t\t\t/* { dg-error \"expected specifier-qualifier-list before 'S'\" } */\n+};\n+__thread S s;\t\t/* { dg-error \"expected\" } two errors here */"}, {"sha": "5b30a70ff490669ef890ecf920822240cd85ae50", "filename": "gcc/testsuite/objc.dg/tls/tls.exp", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftls%2Ftls.exp?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,26 @@\n+\n+# Load support procs.\n+load_lib objc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+# Main loop.\n+dg-runtest $tests \"-fgnu-runtime\" $DEFAULT_CFLAGS\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  dg-runtest $tests \"-fnext-runtime\" $DEFAULT_CFLAGS\n+}\n+\n+# All done.\n+dg-finish"}, {"sha": "4b1869e9c0072657f0deffe7eb1ea11311021c5a", "filename": "gcc/testsuite/objc.dg/torture/dg-torture.exp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fdg-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fdg-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Fdg-torture.exp?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,17 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib objc-dg.exp\n+\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+objc-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  objc-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "7c3245d9f91c097123591d8a5c99bc8d06c34d14", "filename": "gcc/testsuite/objc.dg/torture/tls/diag-1.m", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fdiag-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fdiag-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fdiag-1.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,12 @@\n+// Valid __thread specifiers.\n+// { dg-require-effective-target tls }\n+\n+__thread int g1;\n+extern __thread int g2;\n+static __thread int g3;\n+\n+void foo()\n+{\n+  extern __thread int l1;\n+  static __thread int l2;\n+}"}, {"sha": "e597a5de4feb8a43cb5c99a9ec0773258fcbb341", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init-2.m", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-2.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,42 @@\n+// { dg-require-effective-target tls }\n+// { dg-do run }\n+\n+extern void _exit(int);\n+\n+__thread int glb =1 ;\n+\n+static __thread int fstat = 2;\n+\n+int fa(int a)\n+{\n+static __thread int as = 3;\n+  as += a ;\n+  return as;\n+}\n+\n+int fb(int b)\n+{\n+static __thread int bs = 4;\n+  bs += b ;\n+  glb = bs;\n+  return bs;\n+}\n+\n+int main (int ac, char *av[])\n+{\n+  int a = 1;\n+  \n+  a = fa(fstat);\n+  if ( a != 5 ) \n+    _exit (-(__LINE__)) ;\n+\n+  a = fa(glb);\n+  if ( a != 6 ) \n+    _exit (-(__LINE__)) ;\n+\n+  a = fb(a);  \n+  if ( a != 10 || glb != 10 ) \n+    _exit (-(__LINE__)) ;\n+  \n+  return 0;\n+}"}, {"sha": "27e35a42e4cada3a0e937cb9a8cd41b2b6b10609", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init-3.m", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init-3.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-require-effective-target tls } */\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#include \"../../../objc-obj-c++-shared/Object1.h\"\n+extern void _exit(int);\n+\n+@interface tsObj: Object {\n+  int ai ;\n+}\n+\n+- (int) fa:(int) n;\n+\n+@end\n+\n+@implementation tsObj\n+\n+- (int) fa:(int) n\n+{\n+static __thread int as = 3;\n+  as += n ;\n+  return as ;\n+}\n+\n+@end\n+\n+int main (int ac, char *av[])\n+{\n+  int a ;\n+  tsObj *to = [tsObj new];\n+  \n+  a = [to fa:5];\n+  if ( a != 8 ) \n+    _exit (-(__LINE__)) ;\n+  \n+  return 0;\n+}"}, {"sha": "c15949ed8882ee7fcd43a397c5e56b6990e74a1d", "filename": "gcc/testsuite/objc.dg/torture/tls/thr-init.m", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Fthr-init.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-require-effective-target tls } */\n+/* { dg-do run } */\n+\n+extern void _exit(int);\n+\n+static __thread int fstat ;\n+\n+static __thread int fstat = 1;\n+\n+static __thread int fstat ;\n+\n+int test_code(int b)\n+{\n+  fstat += b ;\n+  return fstat;\n+}\n+\n+int main (int ac, char *av[])\n+{\n+  int a = test_code(1);\n+  \n+  if ( a != 2 || fstat != 2 ) _exit (-(__LINE__)) ;\n+  \n+  return 0;\n+}"}, {"sha": "4b1869e9c0072657f0deffe7eb1ea11311021c5a", "filename": "gcc/testsuite/objc.dg/torture/tls/tls.exp", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftls.exp?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,17 @@\n+# This harness is for tests that should be run at all optimisation levels.\n+\n+load_lib objc-dg.exp\n+\n+dg-init\n+\n+# Gather a list of all tests.\n+set tests [lsort [glob -nocomplain $srcdir/$subdir/*.m]]\n+\n+objc-dg-runtest $tests \"-fgnu-runtime\"\n+\n+# darwin targets can also run code with the NeXT runtime.\n+if [istarget \"*-*-darwin*\" ] {\n+  objc-dg-runtest $tests \"-fnext-runtime\"\n+}\n+\n+dg-finish"}, {"sha": "e2b8f45b84543d3b1ccce19342d915e195b7d1b5", "filename": "gcc/testsuite/objc.dg/torture/tls/trivial.m", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftls%2Ftrivial.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,3 @@\n+// { dg-require-effective-target tls }\n+\n+__thread int i;"}, {"sha": "a1ac22ed481384ef53986be52de962a5f59b7d92", "filename": "gcc/testsuite/objc.dg/torture/trivial.m", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/101422f0496f2c01f30cb507d59dfdc405a87007/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Ftorture%2Ftrivial.m?ref=101422f0496f2c01f30cb507d59dfdc405a87007", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-xfail-run-if \"Needs OBJC2 ABI\" { *-*-darwin* && { lp64 && { ! objc2 } } } { \"-fnext-runtime\" } { \"\" } } */\n+/* { dg-additional-sources \"../../objc-obj-c++-shared/Object1.m\" } */\n+\n+#import \"../../objc-obj-c++-shared/Object1.h\"\n+\n+int main(void)\n+{\n+  [Object class];\n+  return 0;\n+}"}]}