{"sha": "fd960af2df5a437302039f248a542354ee4cddcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5NjBhZjJkZjVhNDM3MzAyMDM5ZjI0OGE1NDIzNTRlZTRjZGRjZg==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-10-28T09:46:29Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-10-28T09:46:29Z"}, "message": "Allow to override Asan shadow offset.\n\n2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n\t* asan.c (set_asan_shadow_offset): New function.\n\t(asan_shadow_offset): Likewise.\n\t(asan_emit_stack_protection): Call asan_shadow_offset.\n\t(build_shadow_mem_access): Likewise.\n\t* asan.h (set_asan_shadow_offset): Declare.\n\t* common.opt (fasan-shadow-offset): New option.\n\t(frandom-seed): Fixed parameter name.\n\t* doc/invoke.texi (fasan-shadow-offset): Describe new option.\n\t(frandom-seed): Fixed parameter name.\n\t* opts-global.c (handle_common_deferred_options): Handle\n\t-fasan-shadow-offset.\n\t* opts.c (common_handle_option): Likewise.\n\ngcc/testsuite/\n\t* c-c++-common/asan/shadow-offset-1.c: New test.\n\nFrom-SVN: r216773", "tree": {"sha": "504a2ebd7e810c8a58584e3f9ab605bd37f3a29f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/504a2ebd7e810c8a58584e3f9ab605bd37f3a29f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd960af2df5a437302039f248a542354ee4cddcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd960af2df5a437302039f248a542354ee4cddcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd960af2df5a437302039f248a542354ee4cddcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd960af2df5a437302039f248a542354ee4cddcf/comments", "author": null, "committer": null, "parents": [{"sha": "ea41822adfb3ea39ba43e033acd1f745abd79083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea41822adfb3ea39ba43e033acd1f745abd79083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea41822adfb3ea39ba43e033acd1f745abd79083"}], "stats": {"total": 110, "additions": 101, "deletions": 9}, "files": [{"sha": "6076258968d508e650a130cb165ca312cc2115ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -1,3 +1,18 @@\n+2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* asan.c (set_asan_shadow_offset): New function.\n+\t(asan_shadow_offset): Likewise.\n+\t(asan_emit_stack_protection): Call asan_shadow_offset.\n+\t(build_shadow_mem_access): Likewise.\n+\t* asan.h (set_asan_shadow_offset): Declare.\n+\t* common.opt (fasan-shadow-offset): New option.\n+\t(frandom-seed): Fixed parameter name.\n+\t* doc/invoke.texi (fasan-shadow-offset): Describe new option.\n+\t(frandom-seed): Fixed parameter name.\n+\t* opts-global.c (handle_common_deferred_options): Handle\n+\t-fasan-shadow-offset.\n+\t* opts.c (common_handle_option): Likewise.\n+\n 2014-10-27  Jiong Wang <jiong.wang@arm.com>\n \n \tPR target/63442"}, {"sha": "9080fc3a373d55359a2c293342db6fcc497861ce", "filename": "gcc/asan.c", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -249,6 +249,43 @@ along with GCC; see the file COPYING3.  If not see\n    A destructor function that calls the runtime asan library function\n    _asan_unregister_globals is also installed.  */\n \n+static unsigned HOST_WIDE_INT asan_shadow_offset_value;\n+static bool asan_shadow_offset_computed;\n+\n+/* Sets shadow offset to value in string VAL.  */\n+\n+bool\n+set_asan_shadow_offset (const char *val)\n+{\n+  char *endp;\n+  \n+  errno = 0;\n+#ifdef HAVE_LONG_LONG\n+  asan_shadow_offset_value = strtoull (val, &endp, 0);\n+#else\n+  asan_shadow_offset_value = strtoul (val, &endp, 0);\n+#endif\n+  if (!(*val != '\\0' && *endp == '\\0' && errno == 0))\n+    return false;\n+\n+  asan_shadow_offset_computed = true;\n+\n+  return true;\n+}\n+\n+/* Returns Asan shadow offset.  */\n+\n+static unsigned HOST_WIDE_INT\n+asan_shadow_offset ()\n+{\n+  if (!asan_shadow_offset_computed)\n+    {\n+      asan_shadow_offset_computed = true;\n+      asan_shadow_offset_value = targetm.asan_shadow_offset ();\n+    }\n+  return asan_shadow_offset_value;\n+}\n+\n alias_set_type asan_shadow_set = -1;\n \n /* Pointer types to 1 resp. 2 byte integers in shadow memory.  A separate\n@@ -1135,7 +1172,7 @@ asan_emit_stack_protection (rtx base, rtx pbase, unsigned int alignb,\n \t\t\t      NULL_RTX, 1, OPTAB_DIRECT);\n   shadow_base\n     = plus_constant (Pmode, shadow_base,\n-\t\t     targetm.asan_shadow_offset ()\n+\t\t     asan_shadow_offset ()\n \t\t     + (base_align_bias >> ASAN_SHADOW_SHIFT));\n   gcc_assert (asan_shadow_set != -1\n \t      && (ASAN_RED_ZONE_SIZE >> ASAN_SHADOW_SHIFT) == 4);\n@@ -1514,7 +1551,7 @@ insert_if_then_before_iter (gimple cond,\n }\n \n /* Build\n-   (base_addr >> ASAN_SHADOW_SHIFT) + targetm.asan_shadow_offset ().  */\n+   (base_addr >> ASAN_SHADOW_SHIFT) + asan_shadow_offset ().  */\n \n static tree\n build_shadow_mem_access (gimple_stmt_iterator *gsi, location_t location,\n@@ -1531,7 +1568,7 @@ build_shadow_mem_access (gimple_stmt_iterator *gsi, location_t location,\n   gimple_set_location (g, location);\n   gsi_insert_after (gsi, g, GSI_NEW_STMT);\n \n-  t = build_int_cst (uintptr_type, targetm.asan_shadow_offset ());\n+  t = build_int_cst (uintptr_type, asan_shadow_offset ());\n   g = gimple_build_assign_with_ops (PLUS_EXPR,\n \t\t\t\t    make_ssa_name (uintptr_type, NULL),\n \t\t\t\t    gimple_assign_lhs (g), t);"}, {"sha": "eadf0290d1cd62b2b786cc6cc56f7836424b7133", "filename": "gcc/asan.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fasan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fasan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.h?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -36,7 +36,7 @@ extern gimple_stmt_iterator create_cond_insert_point\n extern alias_set_type asan_shadow_set;\n \n /* Shadow memory is found at\n-   (address >> ASAN_SHADOW_SHIFT) + targetm.asan_shadow_offset ().  */\n+   (address >> ASAN_SHADOW_SHIFT) + asan_shadow_offset ().  */\n #define ASAN_SHADOW_SHIFT\t3\n \n /* Red zone size, stack and global variables are padded by ASAN_RED_ZONE_SIZE\n@@ -76,4 +76,6 @@ asan_red_zone_size (unsigned int size)\n   return c ? 2 * ASAN_RED_ZONE_SIZE - c : ASAN_RED_ZONE_SIZE;\n }\n \n+extern bool set_asan_shadow_offset (const char *);\n+\n #endif /* TREE_ASAN */"}, {"sha": "334d586d2027ebca2de3e20cfa6dedca58c2ea83", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -883,6 +883,10 @@ fsanitize=\n Common Driver Report Joined\n Select what to sanitize\n \n+fasan-shadow-offset=\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n+-fasan-shadow-offset=<number>\tUse custom shadow memory offset.\n+\n fsanitize-recover=\n Common Report Joined\n After diagnosing undefined behavior attempt to continue execution\n@@ -1808,7 +1812,7 @@ Common Var(common_deferred_options) Defer\n \n frandom-seed=\n Common Joined RejectNegative Var(common_deferred_options) Defer\n--frandom-seed=<string>\tMake compile reproducible using <string>\n+-frandom-seed=<number>\tMake compile reproducible using <number>\n \n ; This switch causes the command line that was used to create an\n ; object file to be recorded into the object file.  The exact format"}, {"sha": "a4901f6fbacbd784494414a83debc92e66f24885", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -297,7 +297,7 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n -fsanitize=@var{style} -fsanitize-recover -fsanitize-recover=@var{style} @gol\n--fsanitize-undefined-trap-on-error @gol\n+-fasan-shadow-offset=@var{number} -fsanitize-undefined-trap-on-error @gol\n -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n@@ -342,7 +342,7 @@ Objective-C and Objective-C++ Dialects}.\n -fmem-report -fpre-ipa-mem-report -fpost-ipa-mem-report -fprofile-arcs @gol\n -fopt-info @gol\n -fopt-info-@var{options}@r{[}=@var{file}@r{]} @gol\n--frandom-seed=@var{string} -fsched-verbose=@var{n} @gol\n+-frandom-seed=@var{number} -fsched-verbose=@var{n} @gol\n -fsel-sched-verbose -fsel-sched-dump-cfg -fsel-sched-pipelining-verbose @gol\n -fstack-usage  -ftest-coverage  -ftime-report -fvar-tracking @gol\n -fvar-tracking-assignments  -fvar-tracking-assignments-toggle @gol\n@@ -5641,6 +5641,12 @@ While @option{-ftrapv} causes traps for signed overflows to be emitted,\n @option{-fsanitize=undefined} gives a diagnostic message.\n This currently works only for the C family of languages.\n \n+@item -fasan-shadow-offset=@var{number}\n+@opindex fasan-shadow-offset\n+This option forces GCC to use custom shadow offset in AddressSanitizer checks.\n+It is useful for experimenting with different shadow memory layouts in\n+Kernel AddressSanitizer.\n+\n @item -fsanitize-recover@r{[}=@var{opts}@r{]}\n @opindex fsanitize-recover\n @opindex fno-sanitize-recover\n@@ -6804,7 +6810,7 @@ the first option takes effect and the subsequent options are\n ignored. Thus only the @file{vec.miss} is produced which contains\n dumps from the vectorizer about missed opportunities.\n \n-@item -frandom-seed=@var{string}\n+@item -frandom-seed=@var{number}\n @opindex frandom-seed\n This option provides a seed that GCC uses in place of\n random numbers in generating certain symbol names\n@@ -6813,7 +6819,7 @@ place unique stamps in coverage data files and the object files that\n produce them.  You can use the @option{-frandom-seed} option to produce\n reproducibly identical object files.\n \n-The @var{string} should be different for every file you compile.\n+The @var{number} should be different for every file you compile.\n \n @item -fsched-verbose=@var{n}\n @opindex fsched-verbose"}, {"sha": "149abc41a16929ac80aeb8f25e7a545361c0cb75", "filename": "gcc/opts-global.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -50,6 +50,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"tree-pass.h\"\n #include \"context.h\"\n+#include \"asan.h\"\n \n typedef const char *const_char_p; /* For DEF_VEC_P.  */\n \n@@ -434,6 +435,14 @@ handle_common_deferred_options (void)\n \t  stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (opt->arg));\n \t  break;\n \n+\tcase OPT_fasan_shadow_offset_:\n+\t  if (!(flag_sanitize & SANITIZE_KERNEL_ADDRESS))\n+\t    error (\"-fasan-shadow-offset should only be used \"\n+\t\t   \"with -fsanitize=kernel-address\");\n+\t  if (!set_asan_shadow_offset (opt->arg))\n+\t     error (\"unrecognized shadow offset %qs\", opt->arg);\n+\t  break;\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "db30b6548fa00ae2e2430d6d2b80906387b2ff92", "filename": "gcc/opts.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -1646,6 +1646,10 @@ common_handle_option (struct gcc_options *opts,\n \tbreak;\n       }\n \n+    case OPT_fasan_shadow_offset_:\n+      /* Deferred.  */\n+      break;\n+\n     case OPT_fsanitize_recover:\n       if (value)\n \topts->x_flag_sanitize_recover"}, {"sha": "77254a06d783ea39d6bd8fda807de6cb948fb0ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -1,3 +1,7 @@\n+2014-10-28  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* c-c++-common/asan/shadow-offset-1.c: New test.\n+\n 2014-10-27  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gcc.dg/plugin/ggcplug.c: Shuffle includes to include"}, {"sha": "2ca0fd641f206593a0293c6cb49f0b71a7b4205e", "filename": "gcc/testsuite/c-c++-common/asan/shadow-offset-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fshadow-offset-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd960af2df5a437302039f248a542354ee4cddcf/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fshadow-offset-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fshadow-offset-1.c?ref=fd960af2df5a437302039f248a542354ee4cddcf", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fno-sanitize=address -fsanitize=kernel-address --param asan-instrumentation-with-call-threshold=100 -fasan-shadow-offset=12345 -fdump-tree-sanopt\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+ \n+int f (int *p)\n+{\n+  return *p;\n+}\n+\n+/* { dg-final { scan-tree-dump \"12345\" \"sanopt\" }  } */\n+/* { dg-final { cleanup-tree-dump \"sanopt\" } } */"}]}