{"sha": "5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlODkxYTQzYzQ3ZjBjODE4NWVmNjViZGM5YmM0N2Y4MzI5N2UyZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-02-29T14:01:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-02-29T14:01:09Z"}, "message": "tree-ssa-pre.c (get_sccvn_value): Create missing VNs via vn_lookup_or_add.\n\n2008-02-29  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (get_sccvn_value): Create missing VNs via\n\tvn_lookup_or_add.\n\t* tree-ssa-sccnv.c (visit_reference_op_store): Use the rhs\n\tvalue for comparing for a store match.\n\t(simplify_unary_expression): Do nothing for SSA_NAMEs.\n\t(try_to_simplify): Do not do a full-blown reference lookup.\n\nFrom-SVN: r132768", "tree": {"sha": "da42da694c0bb4e404d6d58f8d105fa4104a0958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da42da694c0bb4e404d6d58f8d105fa4104a0958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0a5fe1104e1a3d5a582248a434777951c0199837", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a5fe1104e1a3d5a582248a434777951c0199837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a5fe1104e1a3d5a582248a434777951c0199837"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "5094c331a94fd387510cc0c5af39b23011574435", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "patch": "@@ -1,3 +1,12 @@\n+2008-02-29  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (get_sccvn_value): Create missing VNs via\n+\tvn_lookup_or_add.\n+\t* tree-ssa-sccnv.c (visit_reference_op_store): Use the rhs\n+\tvalue for comparing for a store match.\n+\t(simplify_unary_expression): Do nothing for SSA_NAMEs.\n+\t(try_to_simplify): Do not do a full-blown reference lookup.\n+\n 2008-02-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.c (sh_scalar_mode_supported_p): New function."}, {"sha": "a488257fdd4aa73ff39111b896d09d5f055eec7e", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "patch": "@@ -3256,7 +3256,9 @@ get_sccvn_value (tree name)\n \t\t!ZERO_SSA_OPERANDS (defstmt2, SSA_OP_ALL_VIRTUALS))\n \t      gcc_assert (defstmt);\n \t  }\n-\t  valvh = vn_lookup_or_add_with_stmt (val, defstmt);\n+\t  /* We lookup with the LHS, so do not use vn_lookup_or_add_with_stmt\n+\t     here, as that will result in useless reference lookups.  */\n+\t  valvh = vn_lookup_or_add (val);\n \t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))"}, {"sha": "929354e763d3699b4817d350e8c106a4be6b3790", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be891a43c47f0c8185ef65bdc9bc47f83297e2d/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=5be891a43c47f0c8185ef65bdc9bc47f83297e2d", "patch": "@@ -1231,6 +1231,8 @@ visit_reference_op_store (tree lhs, tree op, tree stmt)\n     {\n       if (TREE_CODE (result) == SSA_NAME)\n \tresult = SSA_VAL (result);\n+      if (TREE_CODE (op) == SSA_NAME)\n+\top = SSA_VAL (op);\n       resultsame = expressions_equal_p (result, op);\n     }\n \n@@ -1527,13 +1529,10 @@ simplify_unary_expression (tree rhs)\n static tree\n try_to_simplify (tree stmt, tree rhs)\n {\n+  /* For stores we can end up simplifying a SSA_NAME rhs.  Just return\n+     in this case, there is no point in doing extra work.  */\n   if (TREE_CODE (rhs) == SSA_NAME)\n-    {\n-      if (is_gimple_min_invariant (SSA_VAL (rhs)))\n-\treturn SSA_VAL (rhs);\n-      else if (VN_INFO (rhs)->has_constants)\n-\treturn VN_INFO (rhs)->expr;\n-    }\n+    return rhs;\n   else\n     {\n       switch (TREE_CODE_CLASS (TREE_CODE (rhs)))\n@@ -1550,13 +1549,11 @@ try_to_simplify (tree stmt, tree rhs)\n \n \t    /* Fallthrough. */\n \tcase tcc_reference:\n-\t  {\n-\t    tree result = vn_reference_lookup (rhs,\n-\t\t\t\t\t       shared_vuses_from_stmt (stmt));\n-\t    if (result)\n-\t      return result;\n-\t  }\n-\t  /* Fallthrough for some codes.  */\n+\t  /* Do not do full-blown reference lookup here.\n+\t     ???  But like for tcc_declaration, we should simplify\n+\t\t  from constant initializers.  */\n+\n+\t  /* Fallthrough for some codes that can operate on registers.  */\n \t  if (!(TREE_CODE (rhs) == REALPART_EXPR\n \t        || TREE_CODE (rhs) == IMAGPART_EXPR))\n \t    break;"}]}