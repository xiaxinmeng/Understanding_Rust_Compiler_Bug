{"sha": "fd078f5215762192c5e69e0f37093cf911ecbc22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwNzhmNTIxNTc2MjE5MmM1ZTY5ZTBmMzcwOTNjZjkxMWVjYmMyMg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2005-06-09T11:12:44Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2005-06-09T11:12:44Z"}, "message": "bfin.opt (mlong-calls): New.\n\n\t* config/bfin/bfin.opt (mlong-calls): New.\n\t* config/bfin/predicates.md (call_insn_operand): Disallow SYMBOL_REF\n\tif TARGET_LONG_CALLS.\n\nFrom-SVN: r100796", "tree": {"sha": "fe8ccb11ce1b2fe737334fb959df8b84f7295bfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe8ccb11ce1b2fe737334fb959df8b84f7295bfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd078f5215762192c5e69e0f37093cf911ecbc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd078f5215762192c5e69e0f37093cf911ecbc22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd078f5215762192c5e69e0f37093cf911ecbc22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd078f5215762192c5e69e0f37093cf911ecbc22/comments", "author": null, "committer": null, "parents": [{"sha": "74118f1510492b19b9574089d9bd8080fc8c84c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74118f1510492b19b9574089d9bd8080fc8c84c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74118f1510492b19b9574089d9bd8080fc8c84c0"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "ea4d25d0400e58eb56f3d373ab21a362573488b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd078f5215762192c5e69e0f37093cf911ecbc22", "patch": "@@ -1,3 +1,9 @@\n+2005-06-09  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* config/bfin/bfin.opt (mlong-calls): New.\n+\t* config/bfin/predicates.md (call_insn_operand): Disallow SYMBOL_REF\n+\tif TARGET_LONG_CALLS.\n+\n 2005-06-09  Richard Henderson  <rth@redhat.com>\n \n \tPR tree-opt/20610"}, {"sha": "e8458907fecd6a93efd16e768fad004065e9dab2", "filename": "gcc/config/bfin/bfin.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2Fconfig%2Fbfin%2Fbfin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.opt?ref=fd078f5215762192c5e69e0f37093cf911ecbc22", "patch": "@@ -38,3 +38,7 @@ Enabled ID based shared library\n mshared-library-id=\n Target RejectNegative Joined UInteger Var(bfin_library_id)\n ID of shared library to build\n+\n+mlong-calls\n+Target Report Mask(LONG_CALLS)\n+Avoid generating pc-relative calls; use indirection"}, {"sha": "a1f66daa34d01db7bd03cecc0d6533c9d17c25be", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd078f5215762192c5e69e0f37093cf911ecbc22/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=fd078f5215762192c5e69e0f37093cf911ecbc22", "patch": "@@ -119,7 +119,7 @@\n ;; reg + const, which the patterns can't handle.\n ;; We only allow SYMBOL_REF if !flag_pic.\n (define_predicate \"call_insn_operand\"\n-  (ior (and (match_test \"!flag_pic\") (match_code \"symbol_ref\"))\n+  (ior (and (match_test \"!flag_pic && !TARGET_LONG_CALLS\") (match_code \"symbol_ref\"))\n        (match_operand 0 \"register_no_elim_operand\")))\n \n ;; Test for an operator valid in a conditional branch"}]}