{"sha": "6c7e3b1fe2889136348984edeca7f9ae71d40027", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM3ZTNiMWZlMjg4OTEzNjM0ODk4NGVkZWNhN2Y5YWU3MWQ0MDAyNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-10-29T14:57:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-29T14:57:52Z"}, "message": "re PR tree-optimization/87790 (ICE in vect_get_vec_def_for_operand_1, at tree-vect-stmts.c:1475)\n\n2018-10-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/87790\n\t* tree-vect-slp.c (vect_mark_slp_stmts): Simplify.\n\t(vect_make_slp_decision): Adjust.\n\t(vect_slp_analyze_bb_1): Likewise.\n\t(vect_detect_hybrid_slp_stmts): Properly union SLP type over\n\tedges.\n\n\t* gcc.dg/pr87790.c: New testcase.\n\nFrom-SVN: r265593", "tree": {"sha": "c44ef768f9ec0572e1d5c3cdf2954b34aa384cb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c44ef768f9ec0572e1d5c3cdf2954b34aa384cb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c7e3b1fe2889136348984edeca7f9ae71d40027", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7e3b1fe2889136348984edeca7f9ae71d40027", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c7e3b1fe2889136348984edeca7f9ae71d40027", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c7e3b1fe2889136348984edeca7f9ae71d40027/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87a5ccfb7cbabcf510f7909387a16cc0f73931f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87a5ccfb7cbabcf510f7909387a16cc0f73931f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87a5ccfb7cbabcf510f7909387a16cc0f73931f3"}], "stats": {"total": 72, "additions": 51, "deletions": 21}, "files": [{"sha": "14eee689ce2e8e02456dfdee4953d17af4c0431b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c7e3b1fe2889136348984edeca7f9ae71d40027", "patch": "@@ -1,3 +1,12 @@\n+2018-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87790\n+\t* tree-vect-slp.c (vect_mark_slp_stmts): Simplify.\n+\t(vect_make_slp_decision): Adjust.\n+\t(vect_slp_analyze_bb_1): Likewise.\n+\t(vect_detect_hybrid_slp_stmts): Properly union SLP type over\n+\tedges.\n+\n 2018-10-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/87785"}, {"sha": "fa6d53717ab154823f3abd563c2c2547258bf58a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6c7e3b1fe2889136348984edeca7f9ae71d40027", "patch": "@@ -1,3 +1,8 @@\n+2018-10-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/87790\n+\t* gcc.dg/pr87790.c: New testcase.\n+\n 2018-10-29  Martin Liska  <mliska@suse.cz>\n \n \t* g++.dg/gcov/gcov-8.C: Do not check intermediate format."}, {"sha": "4fa14860ad74f14e42c3b37ec0229752ca42d8dc", "filename": "gcc/testsuite/gcc.dg/pr87790.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87790.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87790.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87790.c?ref=6c7e3b1fe2889136348984edeca7f9ae71d40027", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-require-profiling \"-fprofile-generate\" } */\n+/* { dg-options \"-Ofast -fprofile-generate\" } */\n+/* { dg-additional-options \"-march=znver1\" { target { x86_64-*-* i?86-*-* } } } */\n+\n+int a, b;\n+void c(int d[][8])\n+{\n+  int e, f;\n+  for (; b; b++) {\n+    e = d[b][0] % 4 * 21;\n+    if (e >= 21)\n+      e--;\n+    a = d[b][0] - e;\n+    f = 1;\n+    for (; f != 8; f++)\n+      d[b][f] = a;\n+  }\n+}"}, {"sha": "a1db0dfde86e44ee5ce6d1b55914e733f4457fe6", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c7e3b1fe2889136348984edeca7f9ae71d40027/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=6c7e3b1fe2889136348984edeca7f9ae71d40027", "patch": "@@ -1469,14 +1469,10 @@ vect_print_slp_tree (dump_flags_t dump_kind, dump_location_t loc,\n   vect_print_slp_tree (dump_kind, loc, node, visited);\n }\n \n-/* Mark the tree rooted at NODE with MARK (PURE_SLP or HYBRID).\n-   If MARK is HYBRID, it refers to a specific stmt in NODE (the stmt at index\n-   J).  Otherwise, MARK is PURE_SLP and J is -1, which indicates that all the\n-   stmts in NODE are to be marked.  */\n+/* Mark the tree rooted at NODE with PURE_SLP.  */\n \n static void\n-vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j,\n-\t\t     hash_set<slp_tree> &visited)\n+vect_mark_slp_stmts (slp_tree node, hash_set<slp_tree> &visited)\n {\n   int i;\n   stmt_vec_info stmt_info;\n@@ -1489,18 +1485,17 @@ vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j,\n     return;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n-    if (j < 0 || i == j)\n-      STMT_SLP_TYPE (stmt_info) = mark;\n+    STMT_SLP_TYPE (stmt_info) = pure_slp;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_mark_slp_stmts (child, mark, j, visited);\n+    vect_mark_slp_stmts (child, visited);\n }\n \n static void\n-vect_mark_slp_stmts (slp_tree node, enum slp_vect_type mark, int j)\n+vect_mark_slp_stmts (slp_tree node)\n {\n   hash_set<slp_tree> visited;\n-  vect_mark_slp_stmts (node, mark, j, visited);\n+  vect_mark_slp_stmts (node, visited);\n }\n \n /* Mark the statements of the tree rooted at NODE as relevant (vect_used).  */\n@@ -2216,7 +2211,7 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n       /* Mark all the stmts that belong to INSTANCE as PURE_SLP stmts.  Later we\n \t call vect_detect_hybrid_slp () to find stmts that need hybrid SLP and\n \t loop-based vectorization.  Such stmts will be marked as HYBRID.  */\n-      vect_mark_slp_stmts (SLP_INSTANCE_TREE (instance), pure_slp, -1);\n+      vect_mark_slp_stmts (SLP_INSTANCE_TREE (instance));\n       decided_to_slp++;\n     }\n \n@@ -2240,7 +2235,7 @@ vect_make_slp_decision (loop_vec_info loop_vinfo)\n \n static void\n vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype,\n-\t\t\t      hash_set<slp_tree> &visited)\n+\t\t\t      hash_map<slp_tree, unsigned> &visited)\n {\n   stmt_vec_info stmt_vinfo = SLP_TREE_SCALAR_STMTS (node)[i];\n   imm_use_iterator imm_iter;\n@@ -2250,15 +2245,16 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype,\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_vinfo);\n   int j;\n \n-  if (visited.add (node))\n-    return;\n+  /* We need to union stype over the incoming graph edges but we still\n+     want to limit recursion to stay O(N+E).  */\n+  bool only_edge = (++visited.get_or_insert (node) < node->refcnt);\n \n   /* Propagate hybrid down the SLP tree.  */\n   if (stype == hybrid)\n     ;\n   else if (HYBRID_SLP_STMT (stmt_vinfo))\n     stype = hybrid;\n-  else\n+  else if (!only_edge)\n     {\n       /* Check if a pure SLP stmt has uses in non-SLP stmts.  */\n       gcc_checking_assert (PURE_SLP_STMT (stmt_vinfo));\n@@ -2300,15 +2296,16 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype,\n       STMT_SLP_TYPE (stmt_vinfo) = hybrid;\n     }\n \n-  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n-    if (SLP_TREE_DEF_TYPE (child) != vect_external_def)\n-      vect_detect_hybrid_slp_stmts (child, i, stype, visited);\n+  if (!only_edge)\n+    FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n+      if (SLP_TREE_DEF_TYPE (child) != vect_external_def)\n+\tvect_detect_hybrid_slp_stmts (child, i, stype, visited);\n }\n \n static void\n vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n {\n-  hash_set<slp_tree> visited;\n+  hash_map<slp_tree, unsigned> visited;\n   vect_detect_hybrid_slp_stmts (node, i, stype, visited);\n }\n \n@@ -2894,7 +2891,7 @@ vect_slp_analyze_bb_1 (gimple_stmt_iterator region_begin,\n \n       /* Mark all the statements that we want to vectorize as pure SLP and\n \t relevant.  */\n-      vect_mark_slp_stmts (SLP_INSTANCE_TREE (instance), pure_slp, -1);\n+      vect_mark_slp_stmts (SLP_INSTANCE_TREE (instance));\n       vect_mark_slp_stmts_relevant (SLP_INSTANCE_TREE (instance));\n \n       i++;"}]}