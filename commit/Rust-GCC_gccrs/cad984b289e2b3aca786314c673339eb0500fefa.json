{"sha": "cad984b289e2b3aca786314c673339eb0500fefa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FkOTg0YjI4OWUyYjNhY2E3ODYzMTRjNjczMzM5ZWIwNTAwZmVmYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T11:42:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T11:42:02Z"}, "message": "Dump the list of merged alias pairs\n\nThis patch dumps the final (merged) list of alias pairs.  It also adds:\n\n- WAW and RAW versions of vect-alias-check-8.c\n- a \"well-ordered\" version of vect-alias-check-9.c (i.e. all reads\n  before any writes)\n- a test with mixed steps in the same alias pair\n\nI also tweaked the test value in vect-alias-check-9.c so that the\nresult was less likely to be accidentally correct if the alias\nisn't honoured.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-data-ref.c (dump_alias_pair): New function.\n\t(prune_runtime_alias_test_list): Use it to dump each merged alias pair.\n\ngcc/testsuite/\n\t* gcc.dg/vect/vect-alias-check-8.c: Test for the RAW flag.\n\t* gcc.dg/vect/vect-alias-check-9.c: Test for the ARBITRARY flag.\n\t(TEST_VALUE): Use a higher value for early iterations.\n\t* gcc.dg/vect/vect-alias-check-14.c: New test.\n\t* gcc.dg/vect/vect-alias-check-15.c: Likewise.\n\t* gcc.dg/vect/vect-alias-check-16.c: Likewise.\n\t* gcc.dg/vect/vect-alias-check-17.c: Likewise.\n\nFrom-SVN: r278352", "tree": {"sha": "f9bf6f1e4ae2f4c520a791502f40eea306cbc31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9bf6f1e4ae2f4c520a791502f40eea306cbc31b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cad984b289e2b3aca786314c673339eb0500fefa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad984b289e2b3aca786314c673339eb0500fefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cad984b289e2b3aca786314c673339eb0500fefa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cad984b289e2b3aca786314c673339eb0500fefa/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "52c29905259363ce2b78dd7aa8a25cf531cddb3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52c29905259363ce2b78dd7aa8a25cf531cddb3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52c29905259363ce2b78dd7aa8a25cf531cddb3a"}], "stats": {"total": 271, "additions": 270, "deletions": 1}, "files": [{"sha": "31b5afce86f31f56239067435ac3119e003cae83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -1,3 +1,8 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-data-ref.c (dump_alias_pair): New function.\n+\t(prune_runtime_alias_test_list): Use it to dump each merged alias pair.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-data-ref.h (DR_ALIAS_MIXED_STEPS): New flag."}, {"sha": "eb6060c8e923afbe5c21eaba8b46f3a3ec8e49d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -1,3 +1,13 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-alias-check-8.c: Test for the RAW flag.\n+\t* gcc.dg/vect/vect-alias-check-9.c: Test for the ARBITRARY flag.\n+\t(TEST_VALUE): Use a higher value for early iterations.\n+\t* gcc.dg/vect/vect-alias-check-14.c: New test.\n+\t* gcc.dg/vect/vect-alias-check-15.c: Likewise.\n+\t* gcc.dg/vect/vect-alias-check-16.c: Likewise.\n+\t* gcc.dg/vect/vect-alias-check-17.c: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/scatter_store_1.c (TEST_LOOP): Start at 0."}, {"sha": "35b16b70b91e33ef90d44e5584acc643ba9dacb4", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-14.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-14.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -0,0 +1,62 @@\n+#define N 200\n+#define M 4\n+\n+typedef signed char sc;\n+typedef unsigned char uc;\n+typedef signed short ss;\n+typedef unsigned short us;\n+typedef int si;\n+typedef unsigned int ui;\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+\n+#define FOR_EACH_TYPE(M) \\\n+  M (sc) M (uc) \\\n+  M (ss) M (us) \\\n+  M (si) M (ui) \\\n+  M (sll) M (ull) \\\n+  M (float) M (double)\n+\n+#define TEST_VALUE(I) ((I) * 17 / 2)\n+\n+#define ADD_TEST(TYPE)\t\t\t\t\\\n+  void __attribute__((noinline, noclone))\t\\\n+  test_##TYPE (TYPE *a, TYPE *b)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; i += 2)\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tTYPE b0 = b[i + 0];\t\t\t\\\n+\tTYPE b1 = b[i + 1];\t\t\t\\\n+\ta[i + 0] = b0 + 2;\t\t\t\\\n+\ta[i + 1] = b1 + 3;\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+#define DO_TEST(TYPE)\t\t\t\t\t\t\\\n+  for (int j = 0; j < M; ++j)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      TYPE a[N + M];\t\t\t\t\t\t\\\n+      for (int i = 0; i < N + M; ++i)\t\t\t\t\\\n+\ta[i] = TEST_VALUE (i);\t\t\t\t\t\\\n+      test_##TYPE (a + j, a);\t\t\t\t\t\\\n+      for (int i = 0; i < N; i += 2)\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE base1 = j == 0 ? TEST_VALUE (i) : a[i];\t\t\\\n+\t  TYPE base2 = j <= 1 ? TEST_VALUE (i + 1) : a[i + 1];\t\\\n+\t  if (a[i + j] != (TYPE) (base1 + 2)\t\t\t\\\n+\t      || a[i + j + 1] != (TYPE) (base2 + 3))\t\t\\\n+\t    __builtin_abort ();\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\n+\n+FOR_EACH_TYPE (ADD_TEST)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_TYPE (DO_TEST)\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {flags: *WAR\\n} \"vect\" { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-not {flags: [^\\n]*ARBITRARY\\n} \"vect\" } } */"}, {"sha": "d868c43130fcf00d79ac19fd89d4780574bfbfab", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-15.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-15.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -0,0 +1,59 @@\n+#define N 200\n+#define DIST 32\n+\n+typedef signed char sc;\n+typedef unsigned char uc;\n+typedef signed short ss;\n+typedef unsigned short us;\n+typedef int si;\n+typedef unsigned int ui;\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+\n+#define FOR_EACH_TYPE(M) \\\n+  M (sc) M (uc) \\\n+  M (ss) M (us) \\\n+  M (si) M (ui) \\\n+  M (sll) M (ull) \\\n+  M (float) M (double)\n+\n+#define ADD_TEST(TYPE)\t\t\t\t\\\n+  void __attribute__((noinline, noclone))\t\\\n+  test_##TYPE (TYPE *x, TYPE *y)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tx[i] = i;\t\t\t\t\\\n+\ty[i] = 42 - i * 2;\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  }\n+\n+#define DO_TEST(TYPE)\t\t\t\t\t\t\\\n+  for (int i = 0; i < DIST * 2; ++i)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      TYPE a[N + DIST * 2] = {};\t\t\t\t\\\n+      test_##TYPE (a + DIST, a + i);\t\t\t\t\\\n+      for (int j = 0; j < N + DIST * 2; ++j)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE expected = 0;\t\t\t\t\t\\\n+\t  if (i > DIST && j >= i && j < i + N)\t\t\t\\\n+\t    expected = 42 - (j - i) * 2;\t\t\t\\\n+\t  if (j >= DIST && j < DIST + N)\t\t\t\\\n+\t    expected = j - DIST;\t\t\t\t\\\n+\t  if (i <= DIST && j >= i && j < i + N)\t\t\t\\\n+\t    expected = 42 - (j - i) * 2;\t\t\t\\\n+\t  if (expected != a[j])\t\t\t\t\t\\\n+\t    __builtin_abort ();\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\n+\n+FOR_EACH_TYPE (ADD_TEST)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_TYPE (DO_TEST)\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {flags: *WAW\\n} \"vect\" { target vect_int } } } */"}, {"sha": "97ab77e725775089d990f890e7c45305ec6f1082", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-16.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-16.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -0,0 +1,64 @@\n+#define N 200\n+#define DIST 32\n+\n+typedef signed char sc;\n+typedef unsigned char uc;\n+typedef signed short ss;\n+typedef unsigned short us;\n+typedef int si;\n+typedef unsigned int ui;\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+\n+#define FOR_EACH_TYPE(M) \\\n+  M (sc) M (uc) \\\n+  M (ss) M (us) \\\n+  M (si) M (ui) \\\n+  M (sll) M (ull) \\\n+  M (float) M (double)\n+\n+#define TEST_VALUE(I) ((I) * 13 / 2)\n+\n+#define ADD_TEST(TYPE)\t\t\t\t\\\n+  TYPE __attribute__((noinline, noclone))\t\\\n+  test_##TYPE (TYPE *x, TYPE *y)\t\t\\\n+  {\t\t\t\t\t\t\\\n+    TYPE res = 0;\t\t\t\t\\\n+    for (int i = 0; i < N; ++i)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tx[i] = i;\t\t\t\t\\\n+\tres += y[i];\t\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+    return res;\t\t\t\t\t\\\n+  }\n+\n+#define DO_TEST(TYPE)\t\t\t\t\t\t\\\n+  for (int i = 0; i < DIST * 2; ++i)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      TYPE a[N + DIST * 2];\t\t\t\t\t\\\n+      for (int j = 0; j < N + DIST * 2; ++j)\t\t\t\\\n+\ta[j] = TEST_VALUE (j);\t\t\t\t\t\\\n+      TYPE res = test_##TYPE (a + DIST, a + i);\t\t\t\\\n+      for (int j = 0; j < N; ++j)\t\t\t\t\\\n+\tif (a[j + DIST] != (TYPE) j)\t\t\t\t\\\n+\t  __builtin_abort ();\t\t\t\t\t\\\n+      TYPE expected_res = 0;\t\t\t\t\t\\\n+      for (int j = i; j < i + N; ++j)\t\t\t\t\\\n+\tif (i <= DIST && j >= DIST && j < DIST + N)\t\t\\\n+\t  expected_res += j - DIST;\t\t\t\t\\\n+\telse\t\t\t\t\t\t\t\\\n+\t  expected_res += TEST_VALUE (j);\t\t\t\\\n+      if (expected_res != res)\t\t\t\t\t\\\n+\t__builtin_abort ();\t\t\t\t\t\\\n+    }\n+\n+FOR_EACH_TYPE (ADD_TEST)\n+\n+int\n+main (void)\n+{\n+  FOR_EACH_TYPE (DO_TEST)\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump {flags: *RAW\\n} \"vect\" { target vect_int } } } */"}, {"sha": "0c8bec3c5e3f0f2b085c4ec27464df14fd5d87dc", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-17.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-17.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_load_lanes } */\n+\n+struct s { int x[100]; };\n+\n+void\n+f (struct s *s1, int a, int b)\n+{\n+  for (int i = 0; i < 32; ++i)\n+    s1->x[a + i] = s1->x[b + i * 2] + s1->x[b + i * 3];\n+}\n+\n+/* { dg-final { scan-tree-dump {flags: *[^\\n]*MIXED_STEPS} \"vect\" } } */"}, {"sha": "df1969850ecc9f24f55902511d4f841e5b189104", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-8.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -58,3 +58,5 @@ main (void)\n   FOR_EACH_TYPE (DO_TEST)\n   return 0;\n }\n+\n+/* { dg-final { scan-tree-dump {flags: *WAR\\n} \"vect\" { target vect_int } } } */"}, {"sha": "f771462c6b9a9ba28f5e5f300dd8c3d9c9bc3afa", "filename": "gcc/testsuite/gcc.dg/vect/vect-alias-check-9.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-alias-check-9.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -17,7 +17,7 @@ typedef unsigned long long ull;\n   M (sll) M (ull) \\\n   M (float) M (double)\n \n-#define TEST_VALUE(I) ((I) * 5 / 2)\n+#define TEST_VALUE(I) ((I) * 17 / 2)\n \n #define ADD_TEST(TYPE)\t\t\t\t\\\n   void __attribute__((noinline, noclone))\t\\\n@@ -51,3 +51,5 @@ main (void)\n   FOR_EACH_TYPE (DO_TEST)\n   return 0;\n }\n+\n+/* { dg-final { scan-tree-dump {flags: [^\\n]*ARBITRARY\\n} \"vect\" { target vect_int } } } */"}, {"sha": "7fc401f2a59dc858c32d5e7c16d51cc6522a9759", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cad984b289e2b3aca786314c673339eb0500fefa/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=cad984b289e2b3aca786314c673339eb0500fefa", "patch": "@@ -1452,6 +1452,54 @@ comp_dr_with_seg_len_pair (const void *pa_, const void *pb_)\n   return 0;\n }\n \n+/* Dump information about ALIAS_PAIR, indenting each line by INDENT.  */\n+\n+static void\n+dump_alias_pair (dr_with_seg_len_pair_t *alias_pair, const char *indent)\n+{\n+  dump_printf (MSG_NOTE, \"%sreference:      %T vs. %T\\n\", indent,\n+\t       DR_REF (alias_pair->first.dr),\n+\t       DR_REF (alias_pair->second.dr));\n+\n+  dump_printf (MSG_NOTE, \"%ssegment length: %T\", indent,\n+\t       alias_pair->first.seg_len);\n+  if (!operand_equal_p (alias_pair->first.seg_len,\n+\t\t\talias_pair->second.seg_len, 0))\n+    dump_printf (MSG_NOTE, \" vs. %T\", alias_pair->second.seg_len);\n+\n+  dump_printf (MSG_NOTE, \"\\n%saccess size:    \", indent);\n+  dump_dec (MSG_NOTE, alias_pair->first.access_size);\n+  if (maybe_ne (alias_pair->first.access_size, alias_pair->second.access_size))\n+    {\n+      dump_printf (MSG_NOTE, \" vs. \");\n+      dump_dec (MSG_NOTE, alias_pair->second.access_size);\n+    }\n+\n+  dump_printf (MSG_NOTE, \"\\n%salignment:      %d\", indent,\n+\t       alias_pair->first.align);\n+  if (alias_pair->first.align != alias_pair->second.align)\n+    dump_printf (MSG_NOTE, \" vs. %d\", alias_pair->second.align);\n+\n+  dump_printf (MSG_NOTE, \"\\n%sflags:         \", indent);\n+  if (alias_pair->flags & DR_ALIAS_RAW)\n+    dump_printf (MSG_NOTE, \" RAW\");\n+  if (alias_pair->flags & DR_ALIAS_WAR)\n+    dump_printf (MSG_NOTE, \" WAR\");\n+  if (alias_pair->flags & DR_ALIAS_WAW)\n+    dump_printf (MSG_NOTE, \" WAW\");\n+  if (alias_pair->flags & DR_ALIAS_ARBITRARY)\n+    dump_printf (MSG_NOTE, \" ARBITRARY\");\n+  if (alias_pair->flags & DR_ALIAS_SWAPPED)\n+    dump_printf (MSG_NOTE, \" SWAPPED\");\n+  if (alias_pair->flags & DR_ALIAS_UNSWAPPED)\n+    dump_printf (MSG_NOTE, \" UNSWAPPED\");\n+  if (alias_pair->flags & DR_ALIAS_MIXED_STEPS)\n+    dump_printf (MSG_NOTE, \" MIXED_STEPS\");\n+  if (alias_pair->flags == 0)\n+    dump_printf (MSG_NOTE, \" <none>\");\n+  dump_printf (MSG_NOTE, \"\\n\");\n+}\n+\n /* Merge alias checks recorded in ALIAS_PAIRS and remove redundant ones.\n    FACTOR is number of iterations that each data reference is accessed.\n \n@@ -1655,6 +1703,8 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n      dr_with_seg_len_pair_t.  If we ended up combining swapped and\n      unswapped pairs into the same check, we have to invalidate any\n      RAW, WAR and WAW information for it.  */\n+  if (dump_enabled_p ())\n+    dump_printf (MSG_NOTE, \"merged alias checks:\\n\");\n   FOR_EACH_VEC_ELT (*alias_pairs, i, alias_pair)\n     {\n       unsigned int swap_mask = (DR_ALIAS_SWAPPED | DR_ALIAS_UNSWAPPED);\n@@ -1664,6 +1714,8 @@ prune_runtime_alias_test_list (vec<dr_with_seg_len_pair_t> *alias_pairs,\n       else if (swapped != DR_ALIAS_UNSWAPPED)\n \talias_pair->flags |= DR_ALIAS_ARBITRARY;\n       alias_pair->flags &= ~swap_mask;\n+      if (dump_enabled_p ())\n+\tdump_alias_pair (alias_pair, \"  \");\n     }\n }\n "}]}