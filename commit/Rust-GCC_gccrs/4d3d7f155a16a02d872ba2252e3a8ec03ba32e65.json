{"sha": "4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQzZDdmMTU1YTE2YTAyZDg3MmJhMjI1MmUzYThlYzAzYmEzMmU2NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-05T21:15:26Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-06-05T21:15:26Z"}, "message": "i386.md (*movdf_internal_rex64): Remove MODE_TI handling.\n\n\t* config/i386/i386.md (*movdf_internal_rex64) <case 8,9,10>:\n\tRemove MODE_TI handling.  Remove SSE1 handling in attribute \"mode\"\n\tcalculation.\n\t(*movdf_internal_rex64) <case 6,7,8>: Remove MODE_TI handling.\n\tSimplify MODE_V1DF and MODE_V2SF handling.\n\t(*movsf_internal): Remove x constraint from alternative 7 of operand 1.\n\tSimplify MODE_SF handling.\n\nFrom-SVN: r174664", "tree": {"sha": "780689413f5c56809f39406476e1914c9355841b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/780689413f5c56809f39406476e1914c9355841b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65/comments", "author": null, "committer": null, "parents": [{"sha": "8d231ff273dc0d9d4937be8cd0c5ee53a000cf7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d231ff273dc0d9d4937be8cd0c5ee53a000cf7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d231ff273dc0d9d4937be8cd0c5ee53a000cf7a"}], "stats": {"total": 69, "additions": 29, "deletions": 40}, "files": [{"sha": "c1f2a35529bb6f4e2df53edd5400f4b5b88f49ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "patch": "@@ -1,3 +1,13 @@\n+2011-06-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movdf_internal_rex64) <case 8,9,10>:\n+\tRemove MODE_TI handling.  Remove SSE1 handling in attribute \"mode\"\n+\tcalculation.\n+\t(*movdf_internal_rex64) <case 6,7,8>: Remove MODE_TI handling.\n+\tSimplify MODE_V1DF and MODE_V2SF handling.\n+\t(*movsf_internal): Remove x constraint from alternative 7 of operand 1.\n+\tSimplify MODE_SF handling.\n+\n 2011-06-04  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimization/48893\n@@ -149,8 +159,7 @@\n \n \t* config/arm/arm-cores.def (strongarm, strongarm110, strongarm1100)\n \t(strongarm1110): Use strongarm tuning.\n-\t* config/arm/arm-protos.h (tune_params): Add max_insns_skipped\n-\tfield.\n+\t* config/arm/arm-protos.h (tune_params): Add max_insns_skipped field.\n \t* config/arm/arm.c (arm_strongarm_tune): New.\n \t(arm_slowmul_tune, arm_fastmul_tune, arm_xscale_tune, arm_9e_tune)\n \t(arm_v6t2_tune, arm_cortex_tune, arm_cortex_a5_tune)"}, {"sha": "58de87b17521a58f4f9ba048ea701647d37efc78", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 38, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d3d7f155a16a02d872ba2252e3a8ec03ba32e65/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4d3d7f155a16a02d872ba2252e3a8ec03ba32e65", "patch": "@@ -2956,9 +2956,6 @@\n     case 10:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_TI:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2DF:\n \t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n@@ -2970,8 +2967,7 @@\n \tcase MODE_DF:\n \t  if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n \t    return \"vmovsd\\t{%1, %0, %0|%0, %0, %1}\";\n-\t  else\n-\t    return \"%vmovsd\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovsd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V1DF:\n \t  return \"%vmovlpd\\t{%1, %d0|%d0, %1}\";\n \tcase MODE_V2SF:\n@@ -3014,13 +3010,6 @@\n \t       (eq_attr \"alternative\" \"3,4,5,6,11,12\")\n \t\t (const_string \"DI\")\n \n-\t       /* For SSE1, we have many fewer alternatives.  */\n-\t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t (cond [(eq_attr \"alternative\" \"7,8\")\n-\t\t\t  (const_string \"V4SF\")\n-\t\t       ]\n-\t\t   (const_string \"V2SF\"))\n-\n \t       /* xorps is one byte shorter.  */\n \t       (eq_attr \"alternative\" \"7\")\n \t\t (cond [(ne (symbol_ref \"optimize_function_for_size_p (cfun)\")\n@@ -3099,9 +3088,6 @@\n     case 8:\n       switch (get_attr_mode (insn))\n \t{\n-\tcase MODE_TI:\n-\t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n-\t    return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2DF:\n \t  if (!TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL)\n \t    return \"%vmovapd\\t{%1, %0|%0, %1}\";\n@@ -3113,18 +3099,11 @@\n \tcase MODE_DF:\n \t  if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n \t    return \"vmovsd\\t{%1, %0, %0|%0, %0, %1}\";\n-\t  else\n-\t    return \"%vmovsd\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovsd\\t{%1, %0|%0, %1}\";\n \tcase MODE_V1DF:\n-\t  if (TARGET_AVX && REG_P (operands[0]))\n-\t    return \"vmovlpd\\t{%1, %0, %0|%0, %0, %1}\";\n-\t  else\n-\t    return \"%vmovlpd\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovlpd\\t{%1, %d0|%d0, %1}\";\n \tcase MODE_V2SF:\n-\t  if (TARGET_AVX && REG_P (operands[0]))\n-\t    return \"vmovlps\\t{%1, %0, %0|%0, %0, %1}\";\n-\t  else\n-\t    return \"%vmovlps\\t{%1, %0|%0, %1}\";\n+\t  return \"%vmovlps\\t{%1, %d0|%d0, %1}\";\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -3150,9 +3129,9 @@\n \n \t       /* For SSE1, we have many fewer alternatives.  */\n \t       (eq (symbol_ref \"TARGET_SSE2\") (const_int 0))\n-\t\t (cond [(eq_attr \"alternative\" \"5,6\")\n-\t\t\t  (const_string \"V4SF\")\n-\t\t       ]\n+\t\t (if_then_else\n+\t\t   (eq_attr \"alternative\" \"5,6\")\n+\t\t   (const_string \"V4SF\")\n \t\t   (const_string \"V2SF\"))\n \n \t       /* xorps is one byte shorter.  */\n@@ -3195,9 +3174,9 @@\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=f,m,f,?r ,?m,x,x,x ,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n+\t  \"=f,m,f,?r ,?m,x,x,x,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"fm,f,G,rmF,Fr,C,x,xm,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n+\t  \"fm,f,G,rmF,Fr,C,x,m,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -3228,23 +3207,24 @@\n     case 6:\n       if (get_attr_mode (insn) == MODE_V4SF)\n \treturn \"%vmovaps\\t{%1, %0|%0, %1}\";\n-      else\n-\treturn \"%vmovss\\t{%1, %d0|%d0, %1}\";\n+\n     case 7:\n-      if (TARGET_AVX && REG_P (operands[1]))\n-\treturn \"vmovss\\t{%1, %0, %0|%0, %0, %1}\";\n-      else\n-\treturn \"%vmovss\\t{%1, %0|%0, %1}\";\n     case 8:\n+      if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n+\treturn \"vmovss\\t{%1, %0, %0|%0, %0, %1}\";\n       return \"%vmovss\\t{%1, %0|%0, %1}\";\n \n-    case 9: case 10: case 14: case 15:\n+    case 9:\n+    case 10:\n+    case 14:\n+    case 15:\n       return \"movd\\t{%1, %0|%0, %1}\";\n \n     case 11:\n       return \"movq\\t{%1, %0|%0, %1}\";\n \n-    case 12: case 13:\n+    case 12:\n+    case 13:\n       return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n     default:"}]}