{"sha": "e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkNWQxOWVjNGY4NGI2N2FjNjkzZmVmNWIyYWRkN2RjOWNmMDU2ZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-09-03T08:40:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-03T08:40:30Z"}, "message": "[AArch64] Add support for __jcvt intrinsic\n\nThis patch implements the __jcvt ACLE intrinsic [1] that maps down to the FJCVTZS [2] instruction from Armv8.3-a.\nNo fancy mode iterators or nothing. Just a single builtin, UNSPEC and define_insn and the associate plumbing.\nThis patch also defines __ARM_FEATURE_JCVT to indicate when the intrinsic is available.\n\n[1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics\n[2] https://developer.arm.com/docs/ddi0596/latest/simd-and-floating-point-instructions-alphabetic-order/fjcvtzs-floating-point-javascript-convert-to-signed-fixed-point-rounding-toward-zero\n\n\t* config/aarch64/aarch64.md (UNSPEC_FJCVTZS): Define.\n\t(aarch64_fjcvtzs): New define_insn.\n\t* config/aarch64/aarch64.h (TARGET_JSCVT): Define.\n\t* config/aarch64/aarch64-builtins.c (aarch64_builtins):\n\tAdd AARCH64_JSCVT.\n\t(aarch64_init_builtins): Initialize __builtin_aarch64_jcvtzs.\n\t(aarch64_expand_builtin): Handle AARCH64_JSCVT.\n\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n\t__ARM_FEATURE_JCVT where appropriate.\n\t* config/aarch64/arm_acle.h (__jcvt): Define.\n\n\t* gcc.target/aarch64/acle/jcvt_1.c: New test.\n\nFrom-SVN: r275335", "tree": {"sha": "da0fa9437aebefb73cdec6a95102c3e49a02f89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da0fa9437aebefb73cdec6a95102c3e49a02f89c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10bd1d964ef12daa9f92ff0b8d1e5f600aa63f7b"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "401cfdae47187f51fb30de875f0ed8d142b9bb8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -1,3 +1,16 @@\n+2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (UNSPEC_FJCVTZS): Define.\n+\t(aarch64_fjcvtzs): New define_insn.\n+\t* config/aarch64/aarch64.h (TARGET_JSCVT): Define.\n+\t* config/aarch64/aarch64-builtins.c (aarch64_builtins):\n+\tAdd AARCH64_JSCVT.\n+\t(aarch64_init_builtins): Initialize __builtin_aarch64_jcvtzs.\n+\t(aarch64_expand_builtin): Handle AARCH64_JSCVT.\n+\t* config/aarch64/aarch64-c.c (aarch64_update_cpp_builtins): Define\n+\t__ARM_FEATURE_JCVT where appropriate.\n+\t* config/aarch64/arm_acle.h (__jcvt): Define.\n+\n 2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md (\"unspec\"): Add UNSPEC_FRINT32Z,"}, {"sha": "9f261043e8aca48a088198ea7e1b09f3f89d575c", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -438,6 +438,8 @@ enum aarch64_builtins\n   /* Special cased Armv8.3-A Complex FMA by Lane quad Builtins.  */\n   AARCH64_SIMD_FCMLA_LANEQ_BUILTIN_BASE,\n   AARCH64_SIMD_FCMLA_LANEQ_BUILTINS\n+  /* Builtin for Arm8.3-a Javascript conversion instruction.  */\n+  AARCH64_JSCVT,\n   /* TME builtins.  */\n   AARCH64_TME_BUILTIN_TSTART,\n   AARCH64_TME_BUILTIN_TCOMMIT,\n@@ -1130,6 +1132,12 @@ aarch64_init_builtins (void)\n   aarch64_init_crc32_builtins ();\n   aarch64_init_builtin_rsqrt ();\n \n+  tree ftype_jcvt\n+    = build_function_type_list (intSI_type_node, double_type_node, NULL);\n+  aarch64_builtin_decls[AARCH64_JSCVT]\n+    = add_builtin_function (\"__builtin_aarch64_jcvtzs\", ftype_jcvt,\n+\t\t\t    AARCH64_JSCVT, BUILT_IN_MD, NULL, NULL_TREE);\n+\n   /* Initialize pointer authentication builtins which are backed by instructions\n      in NOP encoding space.\n \n@@ -1682,6 +1690,16 @@ aarch64_expand_builtin (tree exp,\n \n       return target;\n \n+    case AARCH64_JSCVT:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = force_reg (DFmode, expand_normal (arg0));\n+      if (!target)\n+\ttarget = gen_reg_rtx (SImode);\n+      else\n+\ttarget = force_reg (SImode, target);\n+      emit_insn (GEN_FCN (CODE_FOR_aarch64_fjcvtzs) (target, op0));\n+      return target;\n+\n     case AARCH64_SIMD_BUILTIN_FCMLA_LANEQ0_V2SF:\n     case AARCH64_SIMD_BUILTIN_FCMLA_LANEQ90_V2SF:\n     case AARCH64_SIMD_BUILTIN_FCMLA_LANEQ180_V2SF:"}, {"sha": "137aa18af4620d4cefce1dfe5d92e4df67a278ba", "filename": "gcc/config/aarch64/aarch64-c.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-c.c?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -110,6 +110,7 @@ aarch64_update_cpp_builtins (cpp_reader *pfile)\n   aarch64_def_or_undef (TARGET_CRC32, \"__ARM_FEATURE_CRC32\", pfile);\n   aarch64_def_or_undef (TARGET_DOTPROD, \"__ARM_FEATURE_DOTPROD\", pfile);\n   aarch64_def_or_undef (TARGET_COMPLEX, \"__ARM_FEATURE_COMPLEX\", pfile);\n+  aarch64_def_or_undef (TARGET_JSCVT, \"__ARM_FEATURE_JCVT\", pfile);\n \n   cpp_undef (pfile, \"__AARCH64_CMODEL_TINY__\");\n   cpp_undef (pfile, \"__AARCH64_CMODEL_SMALL__\");"}, {"sha": "7bbeed453cf87382b1776ff52991b5cf6ab9204e", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -288,6 +288,9 @@ extern unsigned aarch64_architecture_version;\n /* ARMv8.3-A features.  */\n #define TARGET_ARMV8_3\t(AARCH64_ISA_V8_3)\n \n+/* Javascript conversion instruction from Armv8.3-a.  */\n+#define TARGET_JSCVT\t(TARGET_FLOAT && AARCH64_ISA_V8_3)\n+\n /* Armv8.3-a Complex number extension to AdvSIMD extensions.  */\n #define TARGET_COMPLEX (TARGET_SIMD && TARGET_ARMV8_3)\n "}, {"sha": "e4f9005c27f6f57efba31004389dbed9fd91a360", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -141,6 +141,7 @@\n     UNSPEC_CRC32X\n     UNSPEC_FCVTZS\n     UNSPEC_FCVTZU\n+    UNSPEC_FJCVTZS\n     UNSPEC_FRINT32Z\n     UNSPEC_FRINT32X\n     UNSPEC_FRINT64Z\n@@ -6887,6 +6888,15 @@\n   [(set_attr \"length\" \"0\")]\n )\n \n+(define_insn \"aarch64_fjcvtzs\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(unspec:SI [(match_operand:DF 1 \"register_operand\" \"w\")]\n+\t\t   UNSPEC_FJCVTZS))]\n+  \"TARGET_JSCVT\"\n+  \"fjcvtzs\\\\t%w0, %d1\"\n+  [(set_attr \"type\" \"f_cvtf2i\")]\n+)\n+\n ;; Pointer authentication patterns are always provided.  In architecture\n ;; revisions prior to ARMv8.3-A these HINT instructions operate as NOPs.\n ;; This lets the user write portable software which authenticates pointers"}, {"sha": "147dfe0585cbae6b2d53ca3ead3edddf49d779a5", "filename": "gcc/config/aarch64/arm_acle.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Fconfig%2Faarch64%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_acle.h?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -33,6 +33,16 @@\n extern \"C\" {\n #endif\n \n+#pragma GCC push_options\n+#pragma GCC target (\"arch=armv8.3-a\")\n+__extension__ static __inline int32_t __attribute__ ((__always_inline__))\n+__jcvt (double __a)\n+{\n+  return __builtin_aarch64_jcvtzs (__a);\n+}\n+\n+#pragma GCC pop_options\n+\n #pragma GCC push_options\n #pragma GCC target (\"arch=armv8.5-a\")\n __extension__ static __inline float __attribute__ ((__always_inline__))"}, {"sha": "40d11f9dfd853ddd4d316220373c25201fef8d40", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -1,3 +1,7 @@\n+2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/acle/jcvt_1.c: New test.\n+\n 2019-09-03  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/acle/rintnzx_1.c: New test."}, {"sha": "0c900b1b57c7f1416ed1e0355a5722228262ea99", "filename": "gcc/testsuite/gcc.target/aarch64/acle/jcvt_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Facle%2Fjcvt_1.c?ref=e1d5d19ec4f84b67ac693fef5b2add7dc9cf056d", "patch": "@@ -0,0 +1,15 @@\n+/* Test the __jcvt ACLE intrinsic.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=armv8.3-a\" } */\n+\n+#include <arm_acle.h>\n+\n+#ifdef __ARM_FEATURE_JCVT\n+int32_t\n+test_jcvt (double a)\n+{\n+  return __jcvt (a);\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-times \"fjcvtzs\\tw\\[0-9\\]+, d\\[0-9\\]+\\n\" 1 } } */"}]}