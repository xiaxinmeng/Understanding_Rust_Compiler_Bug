{"sha": "6da0839af39d0d319e12dec89c1668549220799b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRhMDgzOWFmMzlkMGQzMTllMTJkZWM4OWMxNjY4NTQ5MjIwNzk5Yg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2008-01-16T07:12:00Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2008-01-16T07:12:00Z"}, "message": "re PR fortran/34796 (Too strict error checking for assumed-shaped array)\n\n2008-01-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34796\n        * interface.c (compare_parameter): Allow AS_DEFERRED array\n        elements and reject attr.pointer array elemenents.\n        (get_expr_storage_size): Return storage size of elements of\n        assumed-shape and pointer arrays.\n\n2008-01-16  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34796\n        * gfortran.dg/argument_checking_13.f90: New.\n        * gfortran.dg/argument_checking_14.f90: New.\n\nFrom-SVN: r131566", "tree": {"sha": "3d6e8689ec77a9327690a7762e86387c72efb959", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6e8689ec77a9327690a7762e86387c72efb959"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6da0839af39d0d319e12dec89c1668549220799b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da0839af39d0d319e12dec89c1668549220799b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6da0839af39d0d319e12dec89c1668549220799b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6da0839af39d0d319e12dec89c1668549220799b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e6fbb140ba03f2fc058c9efdbb83ec00fac83881", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fbb140ba03f2fc058c9efdbb83ec00fac83881", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fbb140ba03f2fc058c9efdbb83ec00fac83881"}], "stats": {"total": 190, "additions": 187, "deletions": 3}, "files": [{"sha": "35944a27b33283cfed907f2fedac145fb2f55d8c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6da0839af39d0d319e12dec89c1668549220799b", "patch": "@@ -1,3 +1,11 @@\n+2008-01-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34796\n+\t* interface.c (compare_parameter): Allow AS_DEFERRED array\n+\telements and reject attr.pointer array elemenents.\n+\t(get_expr_storage_size): Return storage size of elements of\n+\tassumed-shape and pointer arrays.\n+\n 2008-01-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Initialize GOMP builtins"}, {"sha": "e0e3ff61f3418a40ec6416c496cc2b1789755cc7", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=6da0839af39d0d319e12dec89c1668549220799b", "patch": "@@ -1520,7 +1520,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n       && (ref == NULL\n           || (actual->expr_type == EXPR_VARIABLE\n \t      && (actual->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n-\t\t  || actual->symtree->n.sym->as->type == AS_DEFERRED))))\n+\t\t  || actual->symtree->n.sym->attr.pointer))))\n     {\n       if (where && (gfc_option.allow_std & GFC_STD_F2003) == 0)\n \t{\n@@ -1546,7 +1546,7 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n   if (actual->expr_type == EXPR_VARIABLE\n       && actual->symtree->n.sym->as\n       && (actual->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n-\t  || actual->symtree->n.sym->as->type == AS_DEFERRED))\n+\t  || actual->symtree->n.sym->attr.pointer))\n     {\n       if (where)\n \tgfc_error (\"Element of assumed-shaped array passed to dummy \"\n@@ -1638,6 +1638,7 @@ get_expr_storage_size (gfc_expr *e)\n {\n   int i;\n   long int strlen, elements;\n+  long int substrlen = 0;\n   gfc_ref *ref;\n \n   if (e == NULL)\n@@ -1672,6 +1673,16 @@ get_expr_storage_size (gfc_expr *e)\n \n   for (ref = e->ref; ref; ref = ref->next)\n     {\n+      if (ref->type == REF_SUBSTRING && ref->u.ss.start\n+\t  && ref->u.ss.start->expr_type == EXPR_CONSTANT)\n+\t{\n+\t  int len = strlen;\n+\t  if (ref->u.ss.end && ref->u.ss.end->expr_type == EXPR_CONSTANT)\n+\t    len = mpz_get_ui (ref->u.ss.end->value.integer);\n+\t  substrlen = len - mpz_get_ui (ref->u.ss.start->value.integer) + 1;\n+\t  continue;\n+\t}\n+\n       if (ref->type == REF_ARRAY && ref->u.ar.type == AR_SECTION\n \t  && ref->u.ar.start && ref->u.ar.end && ref->u.ar.stride\n \t  && ref->u.ar.as->upper)\n@@ -1729,13 +1740,21 @@ get_expr_storage_size (gfc_expr *e)\n \t    else\n \t      return 0;\n \t  }\n+      else if (ref->type == REF_ARRAY && ref->u.ar.type == AR_ELEMENT\n+\t       && e->expr_type == EXPR_VARIABLE\n+\t       && (e->symtree->n.sym->as->type == AS_ASSUMED_SHAPE\n+                  || e->symtree->n.sym->attr.pointer))\n+\telements = 1;\n       else\n         /* TODO: Determine the number of remaining elements in the element\n-           sequence for array element designators.\n+           sequence for array element designators. See PR 32616.\n            See also get_array_index in data.c.  */\n \treturn 0;\n     }\n \n+  if (substrlen)\n+    return elements*substrlen;\n+\n   return elements*strlen;\n }\n "}, {"sha": "7a2d834e6417305833e65970497a9c983fb69781", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6da0839af39d0d319e12dec89c1668549220799b", "patch": "@@ -1,3 +1,9 @@\n+2008-01-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34796\n+\t* gfortran.dg/argument_checking_13.f90: New.\n+\t* gfortran.dg/argument_checking_14.f90: New.\n+\n 2008-01-15  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \t\n \tPR libfortran/34671"}, {"sha": "ae3fd22b443fb87fb568d61c3e5c6c6d63d455ed", "filename": "gcc/testsuite/gfortran.dg/argument_checking_13.f90", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_13.f90?ref=6da0839af39d0d319e12dec89c1668549220799b", "patch": "@@ -0,0 +1,83 @@\n+! { dg-do compile }\n+!\n+! PR fortran/34796\n+!\n+! Argument checks:\n+! - elements of deferred-shape arrays (= non-dummies) are allowed\n+!   as the memory is contiguous\n+! - while assumed-shape arrays (= dummy arguments) and pointers are\n+!   not (strides can make them non-contiguous)\n+! and\n+! - if the memory is non-contigous, character arguments have as\n+!   storage size only the size of the element itself, check for\n+!   too short actual arguments.\n+!\n+subroutine test1(assumed_sh_dummy, pointer_dummy)\n+implicit none\n+interface\n+  subroutine rlv1(y)\n+    real   :: y(3)\n+  end subroutine rlv1\n+end interface\n+\n+real          :: assumed_sh_dummy(:,:,:)\n+real, pointer :: pointer_dummy(:,:,:)\n+\n+real, allocatable :: deferred(:,:,:)\n+real, pointer     :: ptr(:,:,:)\n+call rlv1(deferred(1,1,1))         ! valid since contiguous\n+call rlv1(ptr(1,1,1))              ! { dg-error \"Element of assumed-shaped array\" }\n+call rlv1(assumed_sh_dummy(1,1,1)) ! { dg-error \"Element of assumed-shaped array\" }\n+call rlv1(pointer_dummy(1,1,1))    ! { dg-error \"Element of assumed-shaped array\" }\n+end\n+\n+subroutine test2(assumed_sh_dummy, pointer_dummy)\n+implicit none\n+interface\n+  subroutine rlv2(y)\n+    character   :: y(3)\n+  end subroutine rlv2\n+end interface\n+\n+character(3)          :: assumed_sh_dummy(:,:,:)\n+character(3), pointer :: pointer_dummy(:,:,:)\n+\n+character(3), allocatable :: deferred(:,:,:)\n+character(3), pointer     :: ptr(:,:,:)\n+call rlv2(deferred(1,1,1))         ! Valid since contiguous\n+call rlv2(ptr(1,1,1))              ! Valid F2003\n+call rlv2(assumed_sh_dummy(1,1,1)) ! Valid F2003\n+call rlv2(pointer_dummy(1,1,1))    ! Valid F2003\n+\n+! The following is kind of ok: The memory access it valid\n+! We warn nonetheless as the result is not what is intented\n+! and also formally wrong.\n+! Using (1:string_length) would be ok.\n+call rlv2(ptr(1,1,1)(1:1))              ! { dg-warning \"contains too few elements\" }\n+call rlv2(assumed_sh_dummy(1,1,1)(1:2)) ! { dg-warning \"contains too few elements\" }\n+call rlv2(pointer_dummy(1,1,1)(1:3))    ! Valid F2003\n+end\n+\n+subroutine test3(assumed_sh_dummy, pointer_dummy)\n+implicit none\n+interface\n+  subroutine rlv3(y)\n+    character   :: y(3)\n+  end subroutine rlv3\n+end interface\n+\n+character(2)          :: assumed_sh_dummy(:,:,:)\n+character(2), pointer :: pointer_dummy(:,:,:)\n+\n+character(2), allocatable :: deferred(:,:,:)\n+character(2), pointer     :: ptr(:,:,:)\n+call rlv3(deferred(1,1,1))         ! Valid since contiguous\n+call rlv3(ptr(1,1,1))              ! { dg-warning \"contains too few elements\" }\n+call rlv3(assumed_sh_dummy(1,1,1)) ! { dg-warning \"contains too few elements\" }\n+call rlv3(pointer_dummy(1,1,1))    ! { dg-warning \"contains too few elements\" }\n+\n+call rlv3(deferred(1,1,1)(1:2))         ! Valid since contiguous\n+call rlv3(ptr(1,1,1)(1:2))              ! { dg-warning \"contains too few elements\" }\n+call rlv3(assumed_sh_dummy(1,1,1)(1:2)) ! { dg-warning \"contains too few elements\" }\n+call rlv3(pointer_dummy(1,1,1)(1:2))    ! { dg-warning \"contains too few elements\" }\n+end"}, {"sha": "4c32b253a5e13ca2a60ce0f679289ec8b96f9ef0", "filename": "gcc/testsuite/gfortran.dg/argument_checking_14.f90", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6da0839af39d0d319e12dec89c1668549220799b/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fargument_checking_14.f90?ref=6da0839af39d0d319e12dec89c1668549220799b", "patch": "@@ -0,0 +1,68 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/34796\n+!\n+! This checks for Fortran 2003 extensions.\n+!\n+! Argument checks:\n+! - elements of deferred-shape arrays (= non-dummies) are allowed\n+!   as the memory is contiguous\n+! - while assumed-shape arrays (= dummy arguments) and pointers are\n+!   not (strides can make them non-contiguous)\n+! and\n+! - if the memory is non-contigous, character arguments have as\n+!   storage size only the size of the element itself, check for\n+!   too short actual arguments.\n+!\n+subroutine test2(assumed_sh_dummy, pointer_dummy)\n+implicit none\n+interface\n+  subroutine rlv2(y)\n+    character   :: y(3)\n+  end subroutine rlv2\n+end interface\n+\n+character(3)          :: assumed_sh_dummy(:,:,:)\n+character(3), pointer :: pointer_dummy(:,:,:)\n+\n+character(3), allocatable :: deferred(:,:,:)\n+character(3), pointer     :: ptr(:,:,:)\n+call rlv2(deferred(1,1,1))         ! Valid since contiguous\n+call rlv2(ptr(1,1,1))              ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv2(assumed_sh_dummy(1,1,1)) ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv2(pointer_dummy(1,1,1))    ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+\n+! The following is kind of ok: The memory access it valid\n+! We warn nonetheless as the result is not what is intented\n+! and also formally wrong.\n+! Using (1:string_length) would be ok.\n+call rlv2(deferred(1,1,1)(1:3))         ! OK\n+call rlv2(ptr(1,1,1)(1:1))              ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv2(assumed_sh_dummy(1,1,1)(1:2)) ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv2(pointer_dummy(1,1,1)(1:3))    ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+end\n+\n+subroutine test3(assumed_sh_dummy, pointer_dummy)\n+implicit none\n+interface\n+  subroutine rlv3(y)\n+    character   :: y(2)\n+  end subroutine rlv3\n+end interface\n+\n+character(2)          :: assumed_sh_dummy(:,:,:)\n+character(2), pointer :: pointer_dummy(:,:,:)\n+\n+character(2), allocatable :: deferred(:,:,:)\n+character(2), pointer     :: ptr(:,:,:)\n+call rlv3(deferred(1,1,1))         ! Valid since contiguous\n+call rlv3(ptr(1,1,1))              ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv3(assumed_sh_dummy(1,1,1)) ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv3(pointer_dummy(1,1,1))    ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+\n+call rlv3(deferred(1,1,1)(1:2))         ! Valid since contiguous\n+call rlv3(ptr(1,1,1)(1:2))              ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv3(assumed_sh_dummy(1,1,1)(1:2)) ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+call rlv3(pointer_dummy(1,1,1)(1:2))    ! { dg-error \"Fortran 2003: Scalar CHARACTER actual\" }\n+end"}]}