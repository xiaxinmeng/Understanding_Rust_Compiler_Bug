{"sha": "cb995de62aa6484dba4f9807ee3c8d2959a40c46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2I5OTVkZTYyYWE2NDg0ZGJhNGY5ODA3ZWUzYzhkMjk1OWE0MGM0Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-28T13:10:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-29T13:49:19Z"}, "message": "aarch64: Reimplement vaddlv* intrinsics using builtins\n\nThis patch reimplements the vaddlv* intrinsics using builtins.\nThe vaddlv_s32 and vaddlv_u32 intrinsics actually perform a pairwise\nSADDLP/UADDLP instead of a SADDLV/UADDLV but because they only use\ntwo elements it has the same semantics.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-simd-builtins.def (saddlv, uaddlv):\n\tDefine builtins.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>addlv<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vaddlv_s8): Reimplement using\n\tbuiltin.\n\t(vaddlv_s16): Likewise.\n\t(vaddlv_u8): Likewise.\n\t(vaddlv_u16): Likewise.\n\t(vaddlvq_s8): Likewise.\n\t(vaddlvq_s16): Likewise.\n\t(vaddlvq_s32): Likewise.\n\t(vaddlvq_u8): Likewise.\n\t(vaddlvq_u16): Likewise.\n\t(vaddlvq_u32): Likewise.\n\t(vaddlv_s32): Likewise.\n\t(vaddlv_u32): Likewise.\n\t* config/aarch64/iterators.md (VDQV_L): New mode iterator.\n\t(unspec): Add UNSPEC_SADDLV, UNSPEC_UADDLV.\n\t(Vwstype): New mode attribute.\n\t(Vwsuf): Likewise.\n\t(VWIDE_S): Likewise.\n\t(USADDLV): New int iterator.\n\t(su): Handle UNSPEC_SADDLV, UNSPEC_UADDLV.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/simd/vaddlv_1.c: New test.", "tree": {"sha": "ad8d0d7b7a8db0da9f31d841ace5f36042415e81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad8d0d7b7a8db0da9f31d841ace5f36042415e81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb995de62aa6484dba4f9807ee3c8d2959a40c46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb995de62aa6484dba4f9807ee3c8d2959a40c46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb995de62aa6484dba4f9807ee3c8d2959a40c46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb995de62aa6484dba4f9807ee3c8d2959a40c46/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e053f96a9f57bb73a47bdd96512ed1c83ff84c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e053f96a9f57bb73a47bdd96512ed1c83ff84c04"}], "stats": {"total": 170, "additions": 104, "deletions": 66}, "files": [{"sha": "77ba04382b47f3040b334ec751ef44a6e9c501d6", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=cb995de62aa6484dba4f9807ee3c8d2959a40c46", "patch": "@@ -149,6 +149,10 @@\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n \n+  /* Implemented by aarch64_<su>addlv<mode>.  */\n+  BUILTIN_VDQV_L (UNOP, saddlv, 0, NONE)\n+  BUILTIN_VDQV_L (UNOPU, uaddlv, 0, NONE)\n+\n   /* Implemented by aarch64_<su>abd<mode>.  */\n   BUILTIN_VDQ_BHSI (BINOP, sabd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOPU, uabd, 0, NONE)"}, {"sha": "91077f0a05d100d5f3b4628416fd0e3d8666a626", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=cb995de62aa6484dba4f9807ee3c8d2959a40c46", "patch": "@@ -2695,6 +2695,15 @@\n   [(set_attr \"type\" \"neon_reduc_add<q>\")]\n )\n \n+(define_insn \"aarch64_<su>addlv<mode>\"\n+ [(set (match_operand:<VWIDE_S> 0 \"register_operand\" \"=w\")\n+       (unspec:<VWIDE_S> [(match_operand:VDQV_L 1 \"register_operand\" \"w\")]\n+\t\t    USADDLV))]\n+ \"TARGET_SIMD\"\n+ \"<su>addl<vp>\\\\t%<Vwstype>0<Vwsuf>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+)\n+\n ;; ADDV with result zero-extended to SI/DImode (for popcount).\n (define_insn \"aarch64_zero_extend<GPI:mode>_reduc_plus_<VDQV_E:mode>\"\n  [(set (match_operand:GPI 0 \"register_operand\" \"=w\")"}, {"sha": "198a5930180d40134b047dc0498663bdd96959e2", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 66, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=cb995de62aa6484dba4f9807ee3c8d2959a40c46", "patch": "@@ -7077,120 +7077,70 @@ __extension__ extern __inline int16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_s8 (int8x8_t __a)\n {\n-  int16_t __result;\n-  __asm__ (\"saddlv %h0,%1.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlvv8qi (__a);\n }\n \n __extension__ extern __inline int32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_s16 (int16x4_t __a)\n {\n-  int32_t __result;\n-  __asm__ (\"saddlv %s0,%1.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlvv4hi (__a);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_u8 (uint8x8_t __a)\n {\n-  uint16_t __result;\n-  __asm__ (\"uaddlv %h0,%1.8b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlvv8qi_uu (__a);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_u16 (uint16x4_t __a)\n {\n-  uint32_t __result;\n-  __asm__ (\"uaddlv %s0,%1.4h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlvv4hi_uu (__a);\n }\n \n __extension__ extern __inline int16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_s8 (int8x16_t __a)\n {\n-  int16_t __result;\n-  __asm__ (\"saddlv %h0,%1.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlvv16qi (__a);\n }\n \n __extension__ extern __inline int32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_s16 (int16x8_t __a)\n {\n-  int32_t __result;\n-  __asm__ (\"saddlv %s0,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlvv8hi (__a);\n }\n \n __extension__ extern __inline int64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_s32 (int32x4_t __a)\n {\n-  int64_t __result;\n-  __asm__ (\"saddlv %d0,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_saddlvv4si (__a);\n }\n \n __extension__ extern __inline uint16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_u8 (uint8x16_t __a)\n {\n-  uint16_t __result;\n-  __asm__ (\"uaddlv %h0,%1.16b\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlvv16qi_uu (__a);\n }\n \n __extension__ extern __inline uint32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_u16 (uint16x8_t __a)\n {\n-  uint32_t __result;\n-  __asm__ (\"uaddlv %s0,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlvv8hi_uu (__a);\n }\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlvq_u32 (uint32x4_t __a)\n {\n-  uint64_t __result;\n-  __asm__ (\"uaddlv %d0,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uaddlvv4si_uu (__a);\n }\n \n __extension__ extern __inline float32x2_t\n@@ -10281,18 +10231,14 @@ __extension__ extern __inline int64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_s32 (int32x2_t __a)\n {\n-  int64_t __result;\n-  __asm__ (\"saddlp %0.1d, %1.2s\" : \"=w\"(__result) : \"w\"(__a) : );\n-  return __result;\n+  return __builtin_aarch64_saddlvv2si (__a);\n }\n \n __extension__ extern __inline uint64_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaddlv_u32 (uint32x2_t __a)\n {\n-  uint64_t __result;\n-  __asm__ (\"uaddlp %0.1d, %1.2s\" : \"=w\"(__result) : \"w\"(__a) : );\n-  return __result;\n+  return __builtin_aarch64_uaddlvv2si_uu (__a);\n }\n \n __extension__ extern __inline int16x4_t"}, {"sha": "2aa58c17a7fdac252c7aed8570c281ca8aa0f220", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=cb995de62aa6484dba4f9807ee3c8d2959a40c46", "patch": "@@ -215,6 +215,9 @@\n ;; Advanced SIMD modes for Integer reduction across lanes (zero/sign extended).\n (define_mode_iterator VDQV_E [V8QI V16QI V4HI V8HI])\n \n+;; Advanced SIMD modes for Integer widening reduction across lanes.\n+(define_mode_iterator VDQV_L [V8QI V16QI V4HI V8HI V4SI V2SI])\n+\n ;; All double integer narrow-able modes.\n (define_mode_iterator VDN [V4HI V2SI DI])\n \n@@ -492,6 +495,8 @@\n     UNSPEC_FMINV\t; Used in aarch64-simd.md.\n     UNSPEC_FADDV\t; Used in aarch64-simd.md.\n     UNSPEC_ADDV\t\t; Used in aarch64-simd.md.\n+    UNSPEC_SADDLV\t; Used in aarch64-simd.md.\n+    UNSPEC_UADDLV\t; Used in aarch64-simd.md.\n     UNSPEC_SMAXV\t; Used in aarch64-simd.md.\n     UNSPEC_SMINV\t; Used in aarch64-simd.md.\n     UNSPEC_UMAXV\t; Used in aarch64-simd.md.\n@@ -1303,6 +1308,20 @@\n \t\t\t  (V8HI \"4s\") (V4SI \"2d\")\n \t\t\t  (V8HF \"4s\") (V4SF \"2d\")])\n \n+;; Widened scalar register suffixes.\n+(define_mode_attr Vwstype [(V8QI \"h\") (V4HI \"s\")\n+\t\t\t  (V2SI \"\") (V16QI \"h\")\n+\t\t\t  (V8HI \"s\") (V4SI \"d\")])\n+;; Add a .1d for V2SI.\n+(define_mode_attr Vwsuf [(V8QI \"\") (V4HI \"\")\n+\t\t\t  (V2SI \".1d\") (V16QI \"\")\n+\t\t\t  (V8HI \"\") (V4SI \"\")])\n+\n+;; Scalar mode of widened vector reduction.\n+(define_mode_attr VWIDE_S [(V8QI \"HI\") (V4HI \"SI\")\n+\t\t\t  (V2SI \"DI\") (V16QI \"HI\")\n+\t\t\t  (V8HI \"SI\") (V4SI \"DI\")])\n+\n ;; Widened mode with half the element register suffixes for VD_BHSI/VQW/VQ_HSF.\n (define_mode_attr Vwhalf [(V8QI \"4h\") (V4HI \"2s\")\n \t\t\t  (V2SI \"1d\") (V16QI \"8h\")\n@@ -2184,6 +2203,8 @@\n \n (define_int_iterator SVE_INT_ADDV [UNSPEC_SADDV UNSPEC_UADDV])\n \n+(define_int_iterator USADDLV [UNSPEC_SADDLV UNSPEC_UADDLV])\n+\n (define_int_iterator LOGICALF [UNSPEC_ANDF UNSPEC_IORF UNSPEC_XORF])\n \n (define_int_iterator HADDSUB [UNSPEC_SHADD UNSPEC_UHADD\n@@ -2934,6 +2955,8 @@\n ;; \"s\" for signed operations and \"u\" for unsigned ones.\n (define_int_attr su [(UNSPEC_SADDV \"s\")\n \t\t     (UNSPEC_UADDV \"u\")\n+\t\t     (UNSPEC_SADDLV \"s\")\n+\t\t     (UNSPEC_UADDLV \"u\")\n \t\t     (UNSPEC_UNPACKSHI \"s\")\n \t\t     (UNSPEC_UNPACKUHI \"u\")\n \t\t     (UNSPEC_UNPACKSLO \"s\")"}, {"sha": "d4afaab5ba5fa276078ba54f85cc30f359cbb766", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vaddlv_1.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvaddlv_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb995de62aa6484dba4f9807ee3c8d2959a40c46/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvaddlv_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvaddlv_1.c?ref=cb995de62aa6484dba4f9807ee3c8d2959a40c46", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+\n+#include <arm_neon.h>\n+\n+#define FUNC(IT, OT, S)\t\\\n+OT\t\t\t\\\n+foo_##S (IT a)\t\t\\\n+{\t\t\t\\\n+  return vaddlv_##S (a);\\\n+}\n+\n+FUNC (int8x8_t, int16_t, s8)\n+/* { dg-final { scan-assembler-times {saddlv\\th0, v0\\.8b} 1} }  */\n+\n+FUNC (int16x4_t, int32_t, s16)\n+/* { dg-final { scan-assembler-times {saddlv\\ts0, v0\\.4h} 1} }  */\n+\n+FUNC (int32x2_t, int64_t, s32)\n+/* { dg-final { scan-assembler-times {saddlp\\tv0\\.1d, v0\\.2s} 1} }  */\n+\n+FUNC (uint8x8_t, uint16_t, u8)\n+/* { dg-final { scan-assembler-times {uaddlv\\th0, v0\\.8b} 1} }  */\n+\n+FUNC (uint16x4_t, uint32_t, u16)\n+/* { dg-final { scan-assembler-times {uaddlv\\ts0, v0\\.4h} 1} }  */\n+\n+FUNC (uint32x2_t, uint64_t, u32)\n+/* { dg-final { scan-assembler-times {uaddlp\\tv0.1d, v0\\.2s} 1} }  */\n+\n+#define FUNCQ(IT, OT, S)\t\\\n+OT\t\t\t\t\\\n+fooq_##S (IT a)\t\t\t\\\n+{\t\t\t\t\\\n+  return vaddlvq_##S (a);\t\\\n+}\n+\n+FUNCQ (int8x16_t, int16_t, s8)\n+/* { dg-final { scan-assembler-times {saddlv\\th0, v0\\.16b} 1} }  */\n+\n+FUNCQ (int16x8_t, int32_t, s16)\n+/* { dg-final { scan-assembler-times {saddlv\\ts0, v0\\.8h} 1} }  */\n+\n+FUNCQ (int32x4_t, int64_t, s32)\n+/* { dg-final { scan-assembler-times {saddlv\\td0, v0\\.4s} 1} }  */\n+\n+FUNCQ (uint8x16_t, uint16_t, u8)\n+/* { dg-final { scan-assembler-times {uaddlv\\th0, v0\\.16b} 1} }  */\n+\n+FUNCQ (uint16x8_t, uint32_t, u16)\n+/* { dg-final { scan-assembler-times {uaddlv\\ts0, v0\\.8h} 1} }  */\n+\n+FUNCQ (uint32x4_t, uint64_t, u32)\n+/* { dg-final { scan-assembler-times {uaddlv\\td0, v0\\.4s} 1} }  */\n+"}]}