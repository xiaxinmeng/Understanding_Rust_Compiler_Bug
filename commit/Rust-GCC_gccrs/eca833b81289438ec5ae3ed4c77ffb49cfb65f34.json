{"sha": "eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNhODMzYjgxMjg5NDM4ZWM1YWUzZWQ0Yzc3ZmZiNDljZmI2NWYzNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-02T17:13:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-02T17:13:33Z"}, "message": "libstdc++: Make debug containers prefer copy ctor to base ctor (PR 90102)\n\nWhen given a type which can convert to any container-like type, the\nC(const C&) copy constructor and C(const C::_Base&) converting\nconstructor are ambiguous. This change replaces the converting\nconstructor's parameter with a reference_wrapper-like type so that\ncalling that constructor requires an additional user-defined conversion.\nThis gives it a lower rank than the copy constructor, avoiding the\nambiguity.\n\nWhile testing this change I discovered that __gnu_debug::forward_list\ndoesn't have a convering constructor from the std::forward_list base, so\nthis adds it.\n\nWe should probably consider whether the converting constructors should\nbe 'explicit' but I'm not changing that now.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/90102\n\t* include/debug/deque (deque(const _Base&)): Replace parameter\n\twith a struct that wraps a const _Base&.\n\t* include/debug/forward_list (forward_list(_Base_ref)): New\n\tconstructor.\n\t* include/debug/list (list(const _Base&)): Replace parameter\n\twith a struct that wraps a const _Base&.\n\t* include/debug/map.h (map(const _Base&)): Likewise.\n\t* include/debug/multimap.h (multimap(const _Base&)): Likewise.\n\t* include/debug/multiset.h (multiset(const _Base&)): Likewise.\n\t* include/debug/set.h (set(const _Base&)): Likewise.\n\t* include/debug/unordered_map (unordered_map(const _Base&))\n\t(unordered_multimap(const _Base&)): Likewise.\n\t* include/debug/unordered_set (unordered_set(const _Base&))\n\t(unordered_multiset(const _Base&)): Likewise.\n\t* testsuite/23_containers/vector/cons/destructible_debug_neg.cc:\n\tAdjust dg-error line number.\n\t* include/debug/vector (vector(const _Base&)): Likewise.\n\t* testsuite/23_containers/deque/debug/90102.cc: New test.\n\t* testsuite/23_containers/forward_list/debug/90102.cc: New test.\n\t* testsuite/23_containers/list/debug/90102.cc: New test.\n\t* testsuite/23_containers/map/debug/90102.cc: New test.\n\t* testsuite/23_containers/multimap/debug/90102.cc: New test.\n\t* testsuite/23_containers/multiset/debug/90102.cc: New test.\n\t* testsuite/23_containers/set/debug/90102.cc: New test.\n\t* testsuite/23_containers/unordered_map/debug/90102.cc: New test.\n\t* testsuite/23_containers/unordered_multimap/debug/90102.cc: New test.\n\t* testsuite/23_containers/unordered_multiset/debug/90102.cc: New test.\n\t* testsuite/23_containers/unordered_set/debug/90102.cc: New test.\n\t* testsuite/23_containers/vector/debug/90102.cc: New test.", "tree": {"sha": "9f49b2888696face116b83afe12701008b497b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f49b2888696face116b83afe12701008b497b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95827968e5f3e472bbef0ad8b65b0a7537c9cee3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95827968e5f3e472bbef0ad8b65b0a7537c9cee3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95827968e5f3e472bbef0ad8b65b0a7537c9cee3"}], "stats": {"total": 570, "additions": 545, "deletions": 25}, "files": [{"sha": "2bb990238708a24f96934dc1723f5490836c0f45", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -64,6 +64,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates deque(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n@@ -143,8 +153,8 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __a)\n \t{ }\n \n-      deque(const _Base& __x)\n-      : _Base(__x) { }\n+      deque(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       deque&"}, {"sha": "fc6bf6359e908b96550c1b18781afedc541d3ce6", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -201,6 +201,14 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::reference\t\treference;\n       typedef typename _Base::const_reference\tconst_reference;\n@@ -265,6 +273,8 @@ namespace __debug\n \n       ~forward_list() = default;\n \n+      forward_list(_Base_ref __x) : _Base(__x._M_ref) { }\n+\n       forward_list&\n       operator=(const forward_list&) = default;\n "}, {"sha": "8f2a8cb0f01514ef74d40464a7b88f4f435fa91f", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -65,6 +65,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates list(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n@@ -144,8 +154,8 @@ namespace __debug\n \t\t__gnu_debug::__base(__last), __a)\n \t{ }\n \n-      list(const _Base& __x)\n-      : _Base(__x) { }\n+      list(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       list&"}, {"sha": "03eb0cbe332d289bba022425f23fbcfb31df5d6a", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -59,6 +59,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates map(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -126,8 +136,8 @@ namespace __debug\n       ~map() = default;\n #endif\n \n-      map(const _Base& __x)\n-      : _Base(__x) { }\n+      map(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n       explicit map(const _Compare& __comp,\n \t\t   const _Allocator& __a = _Allocator())"}, {"sha": "e8d420e2196b289a53373a8e1de9229a2b942e1d", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -59,6 +59,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates multimap(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -138,8 +148,8 @@ namespace __debug\n \t\t__gnu_debug::__base(__last),\n \t      __comp, __a) { }\n \n-      multimap(const _Base& __x)\n-      : _Base(__x) { }\n+      multimap(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       multimap&"}, {"sha": "152ebcd6870dcb1a3efeef9b78c692335497f9a8", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -58,6 +58,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates multiset(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -138,8 +148,8 @@ namespace __debug\n \t\t__gnu_debug::__base(__last),\n \t\t__comp, __a) { }\n \n-      multiset(const _Base& __x)\n-      : _Base(__x) { }\n+      multiset(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       multiset&"}, {"sha": "85bc89e9915a9b986ba90404feb64ae061516249", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -58,6 +58,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates set(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       // types:\n       typedef _Key\t\t\t\t\tkey_type;\n@@ -137,8 +147,8 @@ namespace __debug\n \t\t__gnu_debug::__base(__last),\n \t\t__comp, __a) { }\n \n-      set(const _Base& __x)\n-      : _Base(__x) { }\n+      set(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       set&"}, {"sha": "7d55174f63b32966b73bd60991a869476f35cace", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -81,6 +81,14 @@ namespace __debug\n       template<typename _ItT, typename _SeqT>\n \tfriend class ::__gnu_debug::_Safe_local_iterator;\n \n+      // Reference wrapper for base class. See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -121,8 +129,8 @@ namespace __debug\n \n       unordered_map(const unordered_map&) = default;\n \n-      unordered_map(const _Base& __x)\n-      : _Base(__x) { }\n+      unordered_map(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n       unordered_map(unordered_map&&) = default;\n \n@@ -776,6 +784,14 @@ namespace __debug\n       template<typename _ItT, typename _SeqT>\n \tfriend class ::__gnu_debug::_Safe_local_iterator;\n \n+      // Reference wrapper for base class. See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -816,8 +832,8 @@ namespace __debug\n \n       unordered_multimap(const unordered_multimap&) = default;\n \n-      unordered_multimap(const _Base& __x)\n-      : _Base(__x) { }\n+      unordered_multimap(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n       unordered_multimap(unordered_multimap&&) = default;\n "}, {"sha": "37031da947e0018f0840b7516238e5663f3ada93", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -78,6 +78,14 @@ namespace __debug\n       template<typename _ItT, typename _SeqT>\n \tfriend class ::__gnu_debug::_Safe_local_iterator;\n \n+      // Reference wrapper for base class. See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -118,8 +126,8 @@ namespace __debug\n \n       unordered_set(const unordered_set&) = default;\n \n-      unordered_set(const _Base& __x)\n-      : _Base(__x) { }\n+      unordered_set(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n       unordered_set(unordered_set&&) = default;\n \n@@ -646,6 +654,14 @@ namespace __debug\n       template<typename _ItT, typename _SeqT>\n \tfriend class ::__gnu_debug::_Safe_local_iterator;\n \n+      // Reference wrapper for base class. See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::size_type\t\t\tsize_type;\n       typedef typename _Base::hasher\t\t\thasher;\n@@ -686,8 +702,8 @@ namespace __debug\n \n       unordered_multiset(const unordered_multiset&) = default;\n \n-      unordered_multiset(const _Base& __x)\n-      : _Base(__x) { }\n+      unordered_multiset(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n       unordered_multiset(unordered_multiset&&) = default;\n "}, {"sha": "47466169f8e0287ccf6b55dc771be1c793049c48", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -135,6 +135,16 @@ namespace __debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // Reference wrapper for base class. Disambiguates vector(const _Base&)\n+      // from copy constructor by requiring a user-defined conversion.\n+      // See PR libstdc++/90102.\n+      struct _Base_ref\n+      {\n+\t_Base_ref(const _Base& __r) : _M_ref(__r) { }\n+\n+\tconst _Base& _M_ref;\n+      };\n+\n     public:\n       typedef typename _Base::reference\t\t\treference;\n       typedef typename _Base::const_reference\t\tconst_reference;\n@@ -207,8 +217,8 @@ namespace __debug\n       : _Base(__x, __a) { }\n \n       vector(vector&& __x, const allocator_type& __a)\n-\tnoexcept( noexcept(\n-\t  _Base(std::declval<_Base&&>()), std::declval<const allocator_type&>()) )\n+      noexcept(noexcept(\n+\t_Base(std::declval<_Base&&>()), std::declval<const allocator_type&>()))\n       : _Safe(std::move(__x._M_safe()), __a),\n \t_Base(std::move(__x._M_base()), __a),\n \t_Safe_vector(std::move(__x)) { }\n@@ -221,8 +231,8 @@ namespace __debug\n #endif\n \n       /// Construction from a normal-mode vector\n-      vector(const _Base& __x)\n-      : _Base(__x) { }\n+      vector(_Base_ref __x)\n+      : _Base(__x._M_ref) { }\n \n #if __cplusplus < 201103L\n       vector&"}, {"sha": "80141a38ab851c6d5530b7cf5c152c48cc2c5fc0", "filename": "libstdc++-v3/testsuite/23_containers/deque/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/deque>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::deque<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::deque<int> d(static_cast<std::deque<int>>(a));"}, {"sha": "a382bde98a8744cdc95e6caa736137506c1eea71", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/forward_list>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::forward_list<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::forward_list<int> d(static_cast<std::forward_list<int>>(a));"}, {"sha": "49a23dc9d73915e651434f6b0fae940d34a534ff", "filename": "libstdc++-v3/testsuite/23_containers/list/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/list>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::list<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::list<int> d(static_cast<std::list<int>>(a));"}, {"sha": "d50617f743a0eafa908789ae074ca090125c6fac", "filename": "libstdc++-v3/testsuite/23_containers/map/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/map>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::map<int, int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::map<int, int> d(static_cast<std::map<int, int>>(a));"}, {"sha": "f11e3fe332b4163851af1b8aa11c426ff83598f8", "filename": "libstdc++-v3/testsuite/23_containers/multimap/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/map>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::multimap<int, int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::multimap<int, int> d(static_cast<std::multimap<int, int>>(a));"}, {"sha": "32ff73863c491db09754aaa9bcb806aa51adf9b5", "filename": "libstdc++-v3/testsuite/23_containers/multiset/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/set>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::multiset<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::multiset<int> d(static_cast<std::multiset<int>>(a));"}, {"sha": "1da9f62bc81e72a8fd8cd85260a6114afca992ae", "filename": "libstdc++-v3/testsuite/23_containers/set/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/set>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::set<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::set<int> d(static_cast<std::set<int>>(a));"}, {"sha": "da7f3901e8b34a26ba0875bc057831904d79c2ac", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/unordered_map>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::unordered_map<int, int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::unordered_map<int, int> d(static_cast<std::unordered_map<int, int>>(a));"}, {"sha": "398e7265491fb0a2c19c0f6812bae60f6e258bf0", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/unordered_map>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::unordered_multimap<int, int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::unordered_multimap<int, int> d(static_cast<std::unordered_multimap<int, int>>(a));"}, {"sha": "a257acf7d9d80bba39b57e731ab7ad3f95086909", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/unordered_set>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::unordered_multiset<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::unordered_multiset<int> d(static_cast<std::unordered_multiset<int>>(a));"}, {"sha": "49f352f55d7d9fbc19ac7bc4ff8906da3ab32be9", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/unordered_set>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::unordered_set<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::unordered_set<int> d(static_cast<std::unordered_set<int>>(a));"}, {"sha": "9e58f0f4ddd782edc6826a0e652b82c8f9634940", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/destructible_debug_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2Fdestructible_debug_neg.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -46,7 +46,7 @@ test02()\n // { dg-error \"value type is destructible\" \"\" { target *-*-* } 0 }\n \n // In Debug Mode the \"required from here\" errors come from <debug/vector>\n-// { dg-error \"required from here\" \"\" { target *-*-* } 163 }\n+// { dg-error \"required from here\" \"\" { target *-*-* } 173 }\n \n // Needed because of PR c++/92193\n // { dg-prune-output \"deleted function\" }"}, {"sha": "19eb1fabafe80d4430e2bceae3a03565abb48992", "filename": "libstdc++-v3/testsuite/23_containers/vector/debug/90102.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F90102.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eca833b81289438ec5ae3ed4c77ffb49cfb65f34/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F90102.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fdebug%2F90102.cc?ref=eca833b81289438ec5ae3ed4c77ffb49cfb65f34", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <debug/vector>\n+\n+// PR libstdc++/90102\n+\n+struct AnyCont\n+{\n+  template<class Cont, class Check = decltype(std::declval<Cont>().clear())>\n+  operator Cont () const;\n+} a;\n+\n+// This should use copy constructor, not be ambiguous\n+__gnu_debug::vector<int> c(a);\n+\n+// Ensure construction from base container still works\n+__gnu_debug::vector<int> d(static_cast<std::vector<int>>(a));"}]}