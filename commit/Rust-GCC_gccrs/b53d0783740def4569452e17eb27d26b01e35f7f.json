{"sha": "b53d0783740def4569452e17eb27d26b01e35f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUzZDA3ODM3NDBkZWY0NTY5NDUyZTE3ZWIyN2QyNmIwMWUzNWY3Zg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2005-04-19T10:24:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-04-19T10:24:40Z"}, "message": "FontMetrics.java: Reformatted.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/FontMetrics.java: Reformatted.\n\t(getFontRenderContext): Handle case when java.awt.Graphics context is\n\tgiven.\n\n2005-04-19  Michael Koch  <konqueror@gmx.de>\n\n\t* java/awt/FontMetrics.java\n\t(getStringBounds): New methods.\n\nFrom-SVN: r98398", "tree": {"sha": "96e41127f4864662ea81eea7b61ced84a0ed719b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96e41127f4864662ea81eea7b61ced84a0ed719b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b53d0783740def4569452e17eb27d26b01e35f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53d0783740def4569452e17eb27d26b01e35f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b53d0783740def4569452e17eb27d26b01e35f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b53d0783740def4569452e17eb27d26b01e35f7f/comments", "author": null, "committer": null, "parents": [{"sha": "fd6032914064dd701cf3a044682802ef36ed18d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6032914064dd701cf3a044682802ef36ed18d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6032914064dd701cf3a044682802ef36ed18d6"}], "stats": {"total": 712, "additions": 343, "deletions": 369}, "files": [{"sha": "d122fb0b8848896b5ab02e9244e79ff0a72b9e4c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53d0783740def4569452e17eb27d26b01e35f7f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53d0783740def4569452e17eb27d26b01e35f7f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b53d0783740def4569452e17eb27d26b01e35f7f", "patch": "@@ -1,3 +1,15 @@\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/FontMetrics.java: Reformatted.\n+\t(getFontRenderContext): Handle case when java.awt.Graphics context is\n+\tgiven.\n+\n+2005-04-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/awt/FontMetrics.java\n+\t(getStringBounds): New methods.\n+\n+\n 2005-04-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/security/x509/X509Certificate.java"}, {"sha": "c1d19846b605b45aa8b053848abc7e45725b1001", "filename": "libjava/java/awt/FontMetrics.java", "status": "modified", "additions": 331, "deletions": 369, "changes": 700, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b53d0783740def4569452e17eb27d26b01e35f7f/libjava%2Fjava%2Fawt%2FFontMetrics.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b53d0783740def4569452e17eb27d26b01e35f7f/libjava%2Fjava%2Fawt%2FFontMetrics.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFontMetrics.java?ref=b53d0783740def4569452e17eb27d26b01e35f7f", "patch": "@@ -1,5 +1,5 @@\n /* FontMetrics.java -- Information about about a fonts display characteristics\n-   Copyright (C) 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2002, 2005  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -40,6 +40,7 @@\n \n import java.awt.font.FontRenderContext;\n import java.awt.font.LineMetrics;\n+import java.awt.geom.Rectangle2D;\n import java.text.CharacterIterator;\n \n // FIXME: I leave many methods basically unimplemented.  This\n@@ -49,7 +50,7 @@\n   * This class returns information about the display characteristics of\n   * a font.  It is abstract, and concrete subclasses should implement at\n   * least the following methods:\n-  * <p>\n+  *\n   * <ul>\n   * <li>getAscent()</li>\n   * <li>getDescent()</li>\n@@ -63,401 +64,362 @@\n   */\n public abstract class FontMetrics implements java.io.Serializable\n {\n+  // Serialization constant.\n+  private static final long serialVersionUID = 1681126225205050147L;\n+\n+  /**\n+   * This is the font for which metrics will be returned.\n+   */\n+  protected Font font;\n+\n+  /**\n+   * Initializes a new instance of <code>FontMetrics</code> for the\n+   * specified font.\n+   *\n+   * @param font The font to return metric information for.\n+   */\n+  protected FontMetrics(Font font)\n+  {\n+    this.font = font;\n+  }\n \n-/*\n- * Static Variables\n- */\n-\n-// Serialization constant\n-private static final long serialVersionUID = 1681126225205050147L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * This is the font for which metrics will be returned.\n-  */\n-protected Font font;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * Initializes a new instance of <code>FontMetrics</code> for the\n-  * specified font.\n-  *\n-  * @param font The font to return metric information for.\n-  */\n-protected\n-FontMetrics(Font font)\n-{\n-  this.font = font;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * Returns the font that this object is creating metric information fo.\n-  *\n-  * @return The font for this object.\n-  */\n-public Font\n-getFont()\n-{\n-  return(font);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the leading, or spacing between lines, for this font.\n-  *\n-  * @return The font leading.\n-  */\n-public int\n-getLeading()\n-{\n-  return(0);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the ascent of the font, which is the distance from the base\n-  * to the top of the majority of characters in the set.  Some characters\n-  * can exceed this value however.\n-  *\n-  * @return The font ascent.\n-  */\n-public int\n-getAscent()\n-{\n-  return(1);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the descent of the font, which is the distance from the base\n-  * to the bottom of the majority of characters in the set.  Some characters\n-  * can exceed this value however.\n-  *\n-  * @return The font descent.\n-  */\n-public int\n-getDescent()\n-{\n-  return(1);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the height of a line in this font.  This will be the sum\n-  * of the leading, the ascent, and the descent.\n-  *\n-  * @return The height of the font.\n-  */\n-public int\n-getHeight()\n-{\n-  return(getAscent() + getDescent() + getLeading());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * Returns the maximum ascent value.  This is the maximum distance any\n-  * character in the font rised above the baseline.\n-  *\n-  * @return The maximum ascent for this font.\n-  */\n-public int\n-getMaxAscent()\n-{\n-  return(getAscent());\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * Returns the font that this object is creating metric information fo.\n+   *\n+   * @return The font for this object.\n+   */\n+  public Font getFont()\n+  {\n+    return font;\n+  }\n \n-/**\n-  * Returns the maximum descent value.  This is the maximum distance any\n-  * character in the font extends below the baseline.\n-  *\n-  * @return The maximum descent for this font.\n-  */\n-public int\n-getMaxDescent()\n-{\n-  return getMaxDecent ();\n-}\n+  /**\n+   * Returns the leading, or spacing between lines, for this font.\n+   *\n+   * @return The font leading.\n+   */\n+  public int getLeading()\n+  {\n+    return 0;\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the ascent of the font, which is the distance from the base\n+   * to the top of the majority of characters in the set.  Some characters\n+   * can exceed this value however.\n+   *\n+   * @return The font ascent.\n+   */\n+  public int getAscent()\n+  {\n+    return 1;\n+  }\n \n-/**\n-  * Returns the maximum descent value.  This is the maximum distance any\n-  * character in the font extends below the baseline.\n-  *\n-  * @return The maximum descent for this font.\n-  *\n-  * @deprecated This method is deprecated in favor of\n-  * <code>getMaxDescent()</code>.\n-  */\n-public int\n-getMaxDecent()\n-{\n-  return getDescent ();\n-}\n+  /**\n+   * Returns the descent of the font, which is the distance from the base\n+   * to the bottom of the majority of characters in the set.  Some characters\n+   * can exceed this value however.\n+   *\n+   * @return The font descent.\n+   */\n+  public int getDescent()\n+  {\n+    return 1;\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the height of a line in this font.  This will be the sum\n+   * of the leading, the ascent, and the descent.\n+   *\n+   * @return The height of the font.\n+   */\n+  public int getHeight()\n+  {\n+    return getAscent() + getDescent() + getLeading();\n+  }\n \n-/**\n-  * Returns the width of the widest character in the font.\n-  *\n-  * @return The width of the widest character in the font.\n-  */\n-public int\n-getMaxAdvance()\n-{\n-  return(-1);\n-}\n+  /**\n+   * Returns the maximum ascent value.  This is the maximum distance any\n+   * character in the font rised above the baseline.\n+   *\n+   * @return The maximum ascent for this font.\n+   */\n+  public int getMaxAscent()\n+  {\n+    return getAscent();\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the maximum descent value.  This is the maximum distance any\n+   * character in the font extends below the baseline.\n+   *\n+   * @return The maximum descent for this font.\n+   */\n+  public int getMaxDescent()\n+  {\n+    return getMaxDecent();\n+  }\n \n-/**\n-  * Returns the width of the specified character.\n-  *\n-  * @param ch The character to return the width of.\n-  *\n-  * @return The width of the specified character.\n-  */\n-public int\n-charWidth(int ch)\n-{\n-  return(charWidth((char)ch));\n-}\n+  /**\n+   * Returns the maximum descent value.  This is the maximum distance any\n+   * character in the font extends below the baseline.\n+   *\n+   * @return The maximum descent for this font.\n+   *\n+   * @deprecated This method is deprecated in favor of\n+   * <code>getMaxDescent()</code>.\n+   */\n+  public int getMaxDecent()\n+  {\n+    return getDescent();\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the width of the widest character in the font.\n+   *\n+   * @return The width of the widest character in the font.\n+   */\n+  public int getMaxAdvance()\n+  {\n+    return -1;\n+  }\n \n-/**\n-  * Returns the width of the specified character.\n-  *\n-  * @param ch The character to return the width of.\n-  *\n-  * @return The width of the specified character.\n-  */\n-public int\n-charWidth(char ch)\n-{\n-  return(1);\n-}\n+  /**\n+   * Returns the width of the specified character.\n+   *\n+   * @param ch The character to return the width of.\n+   *\n+   * @return The width of the specified character.\n+   */\n+  public int charWidth(int ch)\n+  {\n+    return charWidth((char) ch);\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the width of the specified character.\n+   *\n+   * @param ch The character to return the width of.\n+   *\n+   * @return The width of the specified character.\n+   */\n+  public int charWidth(char ch)\n+  {\n+    return 1;\n+  }\n \n-/**\n-  * Returns the total width of the specified string\n-  *\n-  * @param str The string to return the width of.\n-  *\n-  * @return The width of the string.\n-  */\n-public int\n-stringWidth(String str)\n-{\n-  char[] buf = new char[str.length()];\n-  str.getChars(0, str.length(), buf, 0);\n+  /**\n+   * Returns the total width of the specified string\n+   *\n+   * @param str The string to return the width of.\n+   *\n+   * @return The width of the string.\n+   */\n+  public int stringWidth(String str)\n+  {\n+    char[] buf = new char[str.length()];\n+    str.getChars(0, str.length(), buf, 0);\n \n-  return(charsWidth(buf, 0, buf.length));\n-}\n+    return charsWidth(buf, 0, buf.length);\n+  }\n \n-/*************************************************************************/\n+  /**\n+   * Returns the total width of the specified character array.\n+   *\n+   * @param buf The character array containing the data.\n+   * @param offset The offset into the array to start calculating from.\n+   * @param len The total number of bytes to process.\n+   *\n+   * @return The width of the requested characters.\n+   */\n+  public int charsWidth(char[] buf, int offset, int len)\n+  {\n+    int total_width = 0;\n+    for (int i = offset; i < len; i++)\n+      total_width += charWidth(buf[i]);\n+    return total_width;\n+  }\n \n-/**\n-  * Returns the total width of the specified character array.\n-  *\n-  * @param buf The character array containing the data.\n-  * @param offset The offset into the array to start calculating from.\n-  * @param len The total number of bytes to process.\n-  *\n-  * @return The width of the requested characters.\n-  */\n-public int\n-charsWidth(char buf[], int offset, int len)\n-{\n-  int total_width = 0;\n-  for (int i = offset; i < len; i++)\n-    total_width += charWidth(buf[i]);\n-  return(total_width);\n-}\n+  /**\n+   * Returns the total width of the specified byte array.\n+   *\n+   * @param buf The byte array containing the data.\n+   * @param offset The offset into the array to start calculating from.\n+   * @param len The total number of bytes to process.\n+   *\n+   * @return The width of the requested characters.\n+   */\n+  public int bytesWidth(byte[] buf, int offset, int len)\n+  {\n+    int total_width = 0;\n+    for (int i = offset; i < len; i++)\n+      total_width = charWidth((char) buf[i]);\n \n-/*************************************************************************/\n+    return total_width;\n+  }\n \n-/**\n-  * Returns the total width of the specified byte array.\n-  *\n-  * @param buf The byte array containing the data.\n-  * @param offset The offset into the array to start calculating from.\n-  * @param len The total number of bytes to process.\n-  *\n-  * @return The width of the requested characters.\n-  */\n-public int\n-bytesWidth(byte buf[], int offset, int len)\n-{\n-  int total_width = 0;\n-  for (int i = offset; i < len; i++)\n-    total_width = charWidth((char)buf[i]);\n+  /**\n+   * Returns the widths of the first 256 characters in the font.\n+   *\n+   * @return The widths of the first 256 characters in the font.\n+   */\n+  public int[] getWidths()\n+  {\n+    int[] result = new int[256];\n+    for (char i = 0; i < 256; i++)\n+      result[i] = charWidth(i);\n+    return result;\n+  }\n \n-  return(total_width);\n-}\n+  /**\n+   * Returns a string representation of this object.\n+   *\n+   * @return A string representation of this object.\n+   */\n+  public String toString()\n+  {\n+    return (this.getClass() + \"[font=\" + font + \",ascent=\" + getAscent()\n+            + \",descent=\" + getDescent() + \",height=\" + getHeight() + \"]\");\n+  }\n \n-/*************************************************************************/\n+  // Generic FontRenderContext used when getLineMetrics is called with a\n+  // plain Graphics object.\n+  private static final FontRenderContext gRC = new FontRenderContext(null,\n+                                                                     false,\n+                                                                     false);\n+\n+  /**\n+   * Returns a {@link LineMetrics} object constructed with the\n+   * specified text and the {@link FontRenderContext} of the Graphics\n+   * object when it is an instance of Graphics2D or a generic\n+   * FontRenderContext with a null transform, not anti-aliased and not\n+   * using fractional metrics.\n+   *\n+   * @param text The string to calculate metrics from.\n+   * @param g The Graphics object that will be used.\n+   *\n+   * @return A new {@link LineMetrics} object.\n+   */\n+  public LineMetrics getLineMetrics(String text, Graphics g)\n+  {\n+    return getLineMetrics(text, 0, text.length(), g);\n+  }\n \n-/**\n-  * Returns the widths of the first 256 characters in the font.\n-  *\n-  * @return The widths of the first 256 characters in the font.\n-  */\n-public int[]\n-getWidths()\n-{\n-  int [] result = new int[256];\n-  for(char i = 0; i < 256; i++)\n+  /**\n+   * Returns a {@link LineMetrics} object constructed with the\n+   * specified text and the {@link FontRenderContext} of the Graphics\n+   * object when it is an instance of Graphics2D or a generic\n+   * FontRenderContext with a null transform, not anti-aliased and not\n+   * using fractional metrics.\n+   *\n+   * @param text The string to calculate metrics from.\n+   * @param begin Index of first character in <code>text</code> to measure.\n+   * @param limit Index of last character in <code>text</code> to measure.\n+   * @param g The Graphics object that will be used.\n+   *\n+   * @return A new {@link LineMetrics} object.\n+   *\n+   * @throws IndexOutOfBoundsException if the range [begin, limit] is\n+   * invalid in <code>text</code>.\n+   */\n+  public LineMetrics getLineMetrics(String text, int begin, int limit,\n+                                    Graphics g)\n   {\n-    result[i]= charWidth(i);\n+    FontRenderContext rc;\n+    if (g instanceof Graphics2D)\n+      rc = ((Graphics2D) g).getFontRenderContext();\n+    else\n+      rc = gRC;\n+    return font.getLineMetrics(text, begin, limit, rc);\n   }\n-  return(result);\n-}\n \n-/*************************************************************************/\n+  /**\n+   * Returns a {@link LineMetrics} object constructed with the\n+   * specified text and the {@link FontRenderContext} of the Graphics\n+   * object when it is an instance of Graphics2D or a generic\n+   * FontRenderContext with a null transform, not anti-aliased and not\n+   * using fractional metrics.\n+   *\n+   * @param chars The string to calculate metrics from.\n+   * @param begin Index of first character in <code>text</code> to measure.\n+   * @param limit Index of last character in <code>text</code> to measure.\n+   * @param g The Graphics object that will be used.\n+   *\n+   * @return A new {@link LineMetrics} object.\n+   *\n+   * @throws IndexOutOfBoundsException if the range [begin, limit] is\n+   * invalid in <code>text</code>.\n+   */\n+  public LineMetrics getLineMetrics(char[] chars, int begin, int limit,\n+                                    Graphics g)\n+  {\n+    FontRenderContext rc;\n+    if (g instanceof Graphics2D)\n+      rc = ((Graphics2D) g).getFontRenderContext();\n+    else\n+      rc = gRC;\n+    return font.getLineMetrics(chars, begin, limit, rc);\n+  }\n \n-/**\n-  * Returns a string representation of this object.\n-  *\n-  * @return A string representation of this object.\n-  */\n-public String\n-toString()\n-{\n-  return (this.getClass() + \"[font=\" + font + \",ascent=\" + getAscent() \n-\t  + \",descent=\" + getDescent() + \",height=\" + getHeight() + \"]\");\n-}\n+  /**\n+   * Returns a {@link LineMetrics} object constructed with the\n+   * specified text and the {@link FontRenderContext} of the Graphics\n+   * object when it is an instance of Graphics2D or a generic\n+   * FontRenderContext with a null transform, not anti-aliased and not\n+   * using fractional metrics.\n+   *\n+   * @param ci An iterator over the string to calculate metrics from.\n+   * @param begin Index of first character in <code>text</code> to measure.\n+   * @param limit Index of last character in <code>text</code> to measure.\n+   * @param g The Graphics object that will be used.\n+   *\n+   * @return A new {@link LineMetrics} object.\n+   *\n+   * @throws IndexOutOfBoundsException if the range [begin, limit] is\n+   * invalid in <code>text</code>.\n+   */\n+  public LineMetrics getLineMetrics(CharacterIterator ci, int begin,\n+                                    int limit, Graphics g)\n+  {\n+    FontRenderContext rc;\n+    if (g instanceof Graphics2D)\n+      rc = ((Graphics2D) g).getFontRenderContext();\n+    else\n+      rc = gRC;\n+    return font.getLineMetrics(ci, begin, limit, rc);\n+  }\n \n+  public Rectangle2D getStringBounds(String str, Graphics context)\n+  {\n+    return font.getStringBounds(str, getFontRenderContext(context));\n+  }\n \n-// Generic FontRenderContext used when getLineMetrics is called with a\n-// plain Graphics object.\n-private static final FontRenderContext gRC = new FontRenderContext(null,\n-\t\t\t\t\t\t\t\t   false,\n-\t\t\t\t\t\t\t\t   false);\n+  public Rectangle2D getStringBounds(String str, int beginIndex, int limit,\n+                                     Graphics context)\n+  {\n+    return font.getStringBounds(str, beginIndex, limit,\n+                                getFontRenderContext(context));\n+  }\n \n-/**\n-  * Returns a {@link LineMetrics} object constructed with the\n-  * specified text and the {@link FontRenderContext} of the Graphics\n-  * object when it is an instance of Graphics2D or a generic\n-  * FontRenderContext with a null transform, not anti-aliased and not\n-  * using fractional metrics.\n-  *\n-  * @param text The string to calculate metrics from.\n-  * @param g The Graphics object that will be used.\n-  *\n-  * @return A new {@link LineMetrics} object.\n-  */\n-public LineMetrics getLineMetrics(String text, Graphics g)\n-{\n-  return getLineMetrics(text, 0, text.length(), g);\n-}\n+  public Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit,\n+                                     Graphics context)\n+  {\n+    return font.getStringBounds(chars, beginIndex, limit,\n+                                getFontRenderContext(context));\n+  }\n \n-/**\n- * Returns a {@link LineMetrics} object constructed with the\n- * specified text and the {@link FontRenderContext} of the Graphics\n- * object when it is an instance of Graphics2D or a generic\n- * FontRenderContext with a null transform, not anti-aliased and not\n- * using fractional metrics.\n- *\n- * @param text The string to calculate metrics from.\n- * @param begin Index of first character in <code>text</code> to measure.\n- * @param limit Index of last character in <code>text</code> to measure.\n- * @param g The Graphics object that will be used.\n- *\n- * @return A new {@link LineMetrics} object.\n- *\n- * @throws IndexOutOfBoundsException if the range [begin, limit] is\n- * invalid in <code>text</code>.\n- */\n-public LineMetrics getLineMetrics(String text, int begin, \n-\t\t\t\t  int limit, Graphics g)\n-{\n-  FontRenderContext rc;\n-  if (g instanceof Graphics2D)\n-    rc = ((Graphics2D) g).getFontRenderContext();\n-  else\n-    rc = gRC;\n-  return font.getLineMetrics(text, begin, limit, rc);\n-}\n+  public Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex,\n+                                     int limit, Graphics context)\n+  {\n+    return font.getStringBounds(ci, beginIndex, limit,\n+                                getFontRenderContext(context));\n+  }\n \n-/**\n- * Returns a {@link LineMetrics} object constructed with the\n- * specified text and the {@link FontRenderContext} of the Graphics\n- * object when it is an instance of Graphics2D or a generic\n- * FontRenderContext with a null transform, not anti-aliased and not\n- * using fractional metrics.\n- *\n- * @param chars The string to calculate metrics from.\n- * @param begin Index of first character in <code>text</code> to measure.\n- * @param limit Index of last character in <code>text</code> to measure.\n- * @param g The Graphics object that will be used.\n- *\n- * @return A new {@link LineMetrics} object.\n- *\n- * @throws IndexOutOfBoundsException if the range [begin, limit] is\n- * invalid in <code>text</code>.\n- */\n-public LineMetrics getLineMetrics(char[] chars, int begin, \n-\t\t\t\t  int limit, Graphics g)\n-{\n-  FontRenderContext rc;\n-  if (g instanceof Graphics2D)\n-    rc = ((Graphics2D) g).getFontRenderContext();\n-  else\n-    rc = gRC;\n-  return font.getLineMetrics(chars, begin, limit, rc);\n-}\n+  private FontRenderContext getFontRenderContext(Graphics context)\n+  {\n+    if (context instanceof Graphics2D)\n+      return ((Graphics2D) context).getFontRenderContext();\n \n-/**\n- * Returns a {@link LineMetrics} object constructed with the\n- * specified text and the {@link FontRenderContext} of the Graphics\n- * object when it is an instance of Graphics2D or a generic\n- * FontRenderContext with a null transform, not anti-aliased and not\n- * using fractional metrics.\n- *\n- * @param ci An iterator over the string to calculate metrics from.\n- * @param begin Index of first character in <code>text</code> to measure.\n- * @param limit Index of last character in <code>text</code> to measure.\n- * @param g The Graphics object that will be used.\n- *\n- * @return A new {@link LineMetrics} object.\n- *\n- * @throws IndexOutOfBoundsException if the range [begin, limit] is\n- * invalid in <code>text</code>.\n- */\n-public LineMetrics getLineMetrics(CharacterIterator ci, int begin, \n-\t\t\t\t  int limit, Graphics g)\n-{\n-  FontRenderContext rc;\n-  if (g instanceof Graphics2D)\n-    rc = ((Graphics2D) g).getFontRenderContext();\n-  else\n-    rc = gRC;\n-  return font.getLineMetrics(ci, begin, limit, rc);\n-}\n+    return gRC;\n+  }\n }"}]}