{"sha": "0ab81d9cc73303c376a0014774ab6058d40a25a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFiODFkOWNjNzMzMDNjMzc2YTAwMTQ3NzRhYjYwNThkNDBhMjVhMA==", "commit": {"author": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-15T11:35:21Z"}, "committer": {"name": "Mihail Ionescu", "email": "mihail.ionescu@arm.com", "date": "2020-01-16T15:12:01Z"}, "message": "[PATCH, GCC/ARM, 8/10] Do lazy store & load inline when calling nscall function\n\nThis patch adds two new patterns for the VLSTM and VLLDM instructions.\ncmse_nonsecure_call_inline_register_clear is then modified to\ngenerate VLSTM and VLLDM respectively before and after calls to\nfunctions with the cmse_nonsecure_call attribute in order to have lazy\nsaving, clearing and restoring of VFP registers. Since these\ninstructions do not do writeback of the base register, the stack is adjusted\nprior the lazy store and after the lazy load with appropriate frame\ndebug notes to describe the effect on the CFA register.\n\nAs with CLRM, VSCCLRM and VSTR/VLDR, the instruction is modeled as an\nunspecified operation to the memory pointed to by the base register.\n\n*** gcc/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* config/arm/arm.c (arm_add_cfa_adjust_cfa_note): Declare early.\n\t(cmse_nonsecure_call_inline_register_clear): Define new lazy_fpclear\n\tvariable as true when floating-point ABI is not hard.  Replace\n\tcheck against TARGET_HARD_FLOAT_ABI by checks against lazy_fpclear.\n\tGenerate VLSTM and VLLDM instruction respectively before and\n\tafter a function call to cmse_nonsecure_call function.\n\t* config/arm/unspecs.md (VUNSPEC_VLSTM): Define unspec.\n\t(VUNSPEC_VLLDM): Likewise.\n\t* config/arm/vfp.md (lazy_store_multiple_insn): New define_insn.\n\t(lazy_load_multiple_insn): Likewise.\n\n*** gcc/testsuite/ChangeLog ***\n\n2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Add check for VLSTM and\n\tVLLDM.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: Likewise.\n\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: Likewise.", "tree": {"sha": "3899d6792e134524941f0f809d93e5fbd2c7f887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3899d6792e134524941f0f809d93e5fbd2c7f887"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ab81d9cc73303c376a0014774ab6058d40a25a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab81d9cc73303c376a0014774ab6058d40a25a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ab81d9cc73303c376a0014774ab6058d40a25a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ab81d9cc73303c376a0014774ab6058d40a25a0/comments", "author": null, "committer": null, "parents": [{"sha": "1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e4f3696a24aa0fcdca2dcadc2c7fc83ba6b2e5d"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "fac36a41debaa8fb0e2c6873a915d8cde671e5e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -1,6 +1,20 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* config/arm/arm.c (arm_add_cfa_adjust_cfa_note): Declare early.\n+\t(cmse_nonsecure_call_inline_register_clear): Define new lazy_fpclear\n+\tvariable as true when floating-point ABI is not hard.  Replace\n+\tcheck against TARGET_HARD_FLOAT_ABI by checks against lazy_fpclear.\n+\tGenerate VLSTM and VLLDM instruction respectively before and\n+\tafter a function call to cmse_nonsecure_call function.\n+\t* config/arm/unspecs.md (VUNSPEC_VLSTM): Define unspec.\n+\t(VUNSPEC_VLLDM): Likewise.\n+\t* config/arm/vfp.md (lazy_store_multiple_insn): New define_insn.\n+\t(lazy_load_multiple_insn): Likewise.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* config/arm/arm.c (vfp_emit_fstmd): Declare early.\n \t(arm_emit_vfp_multi_reg_pop): Likewise.\n \t(cmse_nonsecure_call_inline_register_clear): Abstract number of VFP"}, {"sha": "5e93f52f856d31fece589577dff8dac644200662", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -186,6 +186,7 @@ static int arm_register_move_cost (machine_mode, reg_class_t, reg_class_t);\n static int arm_memory_move_cost (machine_mode, reg_class_t, bool);\n static void emit_constant_insn (rtx cond, rtx pattern);\n static rtx_insn *emit_set_insn (rtx, rtx);\n+static void arm_add_cfa_adjust_cfa_note (rtx, int, rtx, rtx);\n static rtx emit_multi_reg_push (unsigned long, unsigned long);\n static void arm_emit_multi_reg_pop (unsigned long);\n static int vfp_emit_fstmd (int, int);\n@@ -18283,6 +18284,9 @@ cmse_nonsecure_call_inline_register_clear (void)\n       FOR_BB_INSNS (bb, insn)\n \t{\n \t  bool clear_callee_saved = TARGET_HAVE_FPCXT_CMSE;\n+\t  /* frame = VFP regs + FPSCR + VPR.  */\n+\t  unsigned lazy_store_stack_frame_size\n+\t    = (LAST_VFP_REGNUM - FIRST_VFP_REGNUM + 1 + 2) * UNITS_PER_WORD;\n \t  unsigned long callee_saved_mask\n \t    = ((1 << (LAST_HI_REGNUM + 1)) - 1)\n \t    & ~((1 << (LAST_ARG_REGNUM + 1)) - 1);\n@@ -18300,7 +18304,7 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t  CUMULATIVE_ARGS args_so_far_v;\n \t  cumulative_args_t args_so_far;\n \t  tree arg_type, fntype;\n-\t  bool first_param = true;\n+\t  bool first_param = true, lazy_fpclear = !TARGET_HARD_FLOAT_ABI;\n \t  function_args_iterator args_iter;\n \t  uint32_t padding_bits_to_clear[4] = {0U, 0U, 0U, 0U};\n \n@@ -18334,7 +18338,7 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t     -mfloat-abi=hard.  For -mfloat-abi=softfp we will be using the\n \t     lazy store and loads which clear both caller- and callee-saved\n \t     registers.  */\n-\t  if (TARGET_HARD_FLOAT_ABI)\n+\t  if (!lazy_fpclear)\n \t    {\n \t      auto_sbitmap float_bitmap (maxregno + 1);\n \n@@ -18418,8 +18422,23 @@ cmse_nonsecure_call_inline_register_clear (void)\n \t\t disabled for pop (see below).  */\n \t      RTX_FRAME_RELATED_P (push_insn) = 0;\n \n+\t      /* Lazy store multiple.  */\n+\t      if (lazy_fpclear)\n+\t\t{\n+\t\t  rtx imm;\n+\t\t  rtx_insn *add_insn;\n+\n+\t\t  imm = gen_int_mode (- lazy_store_stack_frame_size, SImode);\n+\t\t  add_insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t\t\t    stack_pointer_rtx, imm));\n+\t\t  arm_add_cfa_adjust_cfa_note (add_insn,\n+\t\t\t\t\t       - lazy_store_stack_frame_size,\n+\t\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t\t       stack_pointer_rtx);\n+\t\t  emit_insn (gen_lazy_store_multiple_insn (stack_pointer_rtx));\n+\t\t}\n \t      /* Save VFP callee-saved registers.  */\n-\t      if (TARGET_HARD_FLOAT_ABI)\n+\t      else\n \t\t{\n \t\t  vfp_emit_fstmd (D7_VFP_REGNUM + 1,\n \t\t\t\t  (max_fp_regno - D7_VFP_REGNUM) / 2);\n@@ -18445,8 +18464,21 @@ cmse_nonsecure_call_inline_register_clear (void)\n \n \t      start_sequence ();\n \n+\t      /* Lazy load multiple done as part of libcall in Armv8-M.  */\n+\t      if (lazy_fpclear)\n+\t\t{\n+\t\t  rtx imm = gen_int_mode (lazy_store_stack_frame_size, SImode);\n+\t\t  emit_insn (gen_lazy_load_multiple_insn (stack_pointer_rtx));\n+\t\t  rtx_insn *add_insn =\n+\t\t    emit_insn (gen_addsi3 (stack_pointer_rtx,\n+\t\t\t\t\t   stack_pointer_rtx, imm));\n+\t\t  arm_add_cfa_adjust_cfa_note (add_insn,\n+\t\t\t\t\t       lazy_store_stack_frame_size,\n+\t\t\t\t\t       stack_pointer_rtx,\n+\t\t\t\t\t       stack_pointer_rtx);\n+\t\t}\n \t      /* Restore VFP callee-saved registers.  */\n-\t      if (TARGET_HARD_FLOAT_ABI)\n+\t      else\n \t\t{\n \t\t  int nb_callee_saved_vfp_regs =\n \t\t    (max_fp_regno - D7_VFP_REGNUM) / 2;"}, {"sha": "8f4a705f43efdb6baf03b39cee589cf728620687", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -243,6 +243,10 @@\n   VUNSPEC_CLRM_APSR\t; Represent the clearing of APSR with clrm instruction.\n   VUNSPEC_VSCCLRM_VPR\t; Represent the clearing of VPR with vscclrm\n \t\t\t; instruction.\n+  VUNSPEC_VLSTM\t\t; Represent the lazy store multiple with vlstm\n+\t\t\t; instruction.\n+  VUNSPEC_VLLDM\t\t; Represent the lazy load multiple with vlldm\n+\t\t\t; instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "930ef462947bd7a3138b90d75b11fab2fd87f87a", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -1673,6 +1673,30 @@\n    (set_attr \"type\" \"mov_reg\")]\n )\n \n+(define_insn \"lazy_store_multiple_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"+&rk\")\n+\t(post_dec:SI (match_dup 0)))\n+   (unspec_volatile [(const_int 0)\n+\t\t     (mem:SI (post_dec:SI (match_dup 0)))]\n+\t\t    VUNSPEC_VLSTM)]\n+  \"use_cmse && reload_completed\"\n+  \"vlstm%?\\\\t%0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"store_4\")]\n+)\n+\n+(define_insn \"lazy_load_multiple_insn\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"+&rk\")\n+\t(post_inc:SI (match_dup 0)))\n+   (unspec_volatile:SI [(const_int 0)\n+\t\t\t(mem:SI (match_dup 0))]\n+\t\t       VUNSPEC_VLLDM)]\n+  \"use_cmse && reload_completed\"\n+  \"vlldm%?\\\\t%0\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"load_4\")]\n+)\n+\n (define_insn_and_split \"*cmpsf_split_vfp\"\n   [(set (reg:CCFP CC_REGNUM)\n \t(compare:CCFP (match_operand:SF 0 \"s_register_operand\"  \"t\")"}, {"sha": "6653b728a1549cb173871f3a754e110feff88216", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -1,6 +1,19 @@\n 2020-01-16  Mihail-Calin Ionescu <mihail.ionescu@arm.com>\n 2020-01-16  Thomas Preud'homme <thomas.preudhomme@arm.com>\n \n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c: Add check for VLSTM and\n+\tVLLDM.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c: Likewise.\n+\t* gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c: Likewise.\n+\n+2020-01-16  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n+2020-01-16  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n \t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-13.c: Add check for\n \tVPUSH and VPOP and update expectation for VSCCLRM.\n \t* gcc.target/arm/cmse/mainline/8_1m/hard-sp/cmse-7.c: Likewise."}, {"sha": "52d22427de79c6a76fbe32b8df7f76b4b286249c", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-13.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-13.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -11,7 +11,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r1, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */"}, {"sha": "40026d5ee1cc62b4acf48be9619ccd69ef4ead7b", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-7.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-7.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -8,7 +8,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */"}, {"sha": "6edc1f6ed7e6bc27024056375db4a2d30c3ea3c4", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/soft/cmse-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoft%2Fcmse-8.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -10,7 +10,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n /* { dg-final { scan-assembler-not \"vmov\" } } */\n /* { dg-final { scan-assembler-not \"vmsr\" } } */"}, {"sha": "8d05576add940c277e5a13f7aab99e6807c1553d", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-7.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-7.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -9,7 +9,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "1f0a14742781b7340685338901dbfab9b700b779", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp-sp/cmse-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp-sp%2Fcmse-8.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -11,7 +11,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "842794181087ddbd5ce59680035a0cb61ce5682e", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-13.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-13.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -12,7 +12,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr2, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr3, r4\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r1, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "38c9d5457034d2427413bcce7e7be6bad80f7a67", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-7.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-7.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -9,7 +9,9 @@\n /* { dg-final { scan-assembler \"lsrs\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"lsls\\tr4, r4, #1\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r0, r1, r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}, {"sha": "6a17bd322fcc4e7e00ea289ee7373db9d8c37a87", "filename": "gcc/testsuite/gcc.target/arm/cmse/mainline/8_1m/softfp/cmse-8.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ab81d9cc73303c376a0014774ab6058d40a25a0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fcmse%2Fmainline%2F8_1m%2Fsoftfp%2Fcmse-8.c?ref=0ab81d9cc73303c376a0014774ab6058d40a25a0", "patch": "@@ -11,7 +11,9 @@\n /* { dg-final { scan-assembler-not \"mov\\tr0, r4\" } } */\n /* { dg-final { scan-assembler-not \"mov\\tr1, r4\" } } */\n /* { dg-final { scan-assembler \"push\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n+/* { dg-final { scan-assembler \"vlstm\\tsp\" } } */\n /* { dg-final { scan-assembler \"clrm\\t\\{r2, r3, r5, r6, r7, r8, r9, r10, fp, ip, APSR\\}\" } } */\n+/* { dg-final { scan-assembler \"vlldm\\tsp\" } } */\n /* { dg-final { scan-assembler \"pop\\t\\{r4, r5, r6, r7, r8, r9, r10, fp\\}\" } } */\n \n /* Now we check that we use the correct intrinsic to call.  */"}]}