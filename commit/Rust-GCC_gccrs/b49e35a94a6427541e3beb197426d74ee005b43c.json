{"sha": "b49e35a94a6427541e3beb197426d74ee005b43c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ5ZTM1YTk0YTY0Mjc1NDFlM2JlYjE5NzQyNmQ3NGVlMDA1YjQzYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-11T18:06:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-11T18:06:37Z"}, "message": "nvptx.h (RETURN_ADDR_REGNO): Delete.\n\n\t* config/nvptx/nvptx.h (RETURN_ADDR_REGNO): Delete.\n\t(OUTGOING_ARG_POINTER_REGNUM): Delete.\n\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Delete.\n\t(REGISTER_NAMES): Name static chain regs.\n\t* config/nvptx/nvptx.c (nvptx_function_arg): Add ARG_UNUSED, merge\n\tifs.\n\t(nvptx_incoming_arg): Merge ifs.\n\t(nvptx_function_arg_boundary): Reimplement to avoid mixing units.\n\t(nvptx_function_value): Tail call nvptx_libcall_value.\n\t(nvptx_pass_by_reference): Add ARG_UNUSED.\n\t(nvptx_static_chain): Use conditional op.\n\t(nvptx_handle_kernel_attribute): Use VOID_TYPE_P.\n\nFrom-SVN: r231572", "tree": {"sha": "7d9fc1f351751a7d18e6329667c64e619aa346b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d9fc1f351751a7d18e6329667c64e619aa346b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b49e35a94a6427541e3beb197426d74ee005b43c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49e35a94a6427541e3beb197426d74ee005b43c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b49e35a94a6427541e3beb197426d74ee005b43c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b49e35a94a6427541e3beb197426d74ee005b43c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2515981da02db8ce6c7f8378dbed3f0c52085714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2515981da02db8ce6c7f8378dbed3f0c52085714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2515981da02db8ce6c7f8378dbed3f0c52085714"}], "stats": {"total": 94, "additions": 53, "deletions": 41}, "files": [{"sha": "35fb19c0f796976a3fc48d29482d418643d9e1cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b49e35a94a6427541e3beb197426d74ee005b43c", "patch": "@@ -1,3 +1,18 @@\n+2015-12-11  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.h (RETURN_ADDR_REGNO): Delete.\n+\t(OUTGOING_ARG_POINTER_REGNUM): Delete.\n+\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Delete.\n+\t(REGISTER_NAMES): Name static chain regs.\n+\t* config/nvptx/nvptx.c (nvptx_function_arg): Add ARG_UNUSED, merge\n+\tifs.\n+\t(nvptx_incoming_arg): Merge ifs.\n+\t(nvptx_function_arg_boundary): Reimplement to avoid mixing units.\n+\t(nvptx_function_value): Tail call nvptx_libcall_value.\n+\t(nvptx_pass_by_reference): Add ARG_UNUSED.\n+\t(nvptx_static_chain): Use conditional op.\n+\t(nvptx_handle_kernel_attribute): Use VOID_TYPE_P.\n+\n 2015-12-11  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n "}, {"sha": "44b0c302d6d69689880b2c58a0c4b34d0ad4cf6e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=b49e35a94a6427541e3beb197426d74ee005b43c", "patch": "@@ -392,15 +392,13 @@ arg_promotion (machine_mode mode)\n /* Implement TARGET_FUNCTION_ARG.  */\n \n static rtx\n-nvptx_function_arg (cumulative_args_t, machine_mode mode,\n+nvptx_function_arg (cumulative_args_t ARG_UNUSED (cum_v), machine_mode mode,\n \t\t    const_tree, bool named)\n {\n-  if (mode == VOIDmode)\n+  if (mode == VOIDmode || !named)\n     return NULL_RTX;\n \n-  if (named)\n-    return gen_reg_rtx (mode);\n-  return NULL_RTX;\n+  return gen_reg_rtx (mode);\n }\n \n /* Implement TARGET_FUNCTION_INCOMING_ARG.  */\n@@ -410,10 +408,8 @@ nvptx_function_incoming_arg (cumulative_args_t cum_v, machine_mode mode,\n \t\t\t     const_tree, bool named)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n-  if (mode == VOIDmode)\n-    return NULL_RTX;\n \n-  if (!named)\n+  if (mode == VOIDmode || !named)\n     return NULL_RTX;\n \n   /* No need to deal with split modes here, the only case that can\n@@ -433,6 +429,7 @@ nvptx_function_arg_advance (cumulative_args_t cum_v,\n \t\t\t    bool ARG_UNUSED (named))\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n+\n   cum->count++;\n }\n \n@@ -449,6 +446,7 @@ static bool\n nvptx_strict_argument_naming (cumulative_args_t cum_v)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n+\n   return cum->fntype == NULL_TREE || stdarg_p (cum->fntype);\n }\n \n@@ -459,22 +457,30 @@ nvptx_function_arg_boundary (machine_mode mode, const_tree type)\n {\n   unsigned int boundary = type ? TYPE_ALIGN (type) : GET_MODE_BITSIZE (mode);\n \n-  if (boundary > BITS_PER_WORD)\n-    return 2 * BITS_PER_WORD;\n-\n-  if (mode == BLKmode)\n+  if (boundary > UNITS_PER_WORD * BITS_PER_UNIT)\n+    boundary = UNITS_PER_WORD * BITS_PER_UNIT;\n+  else if (mode == BLKmode)\n     {\n       HOST_WIDE_INT size = int_size_in_bytes (type);\n-      if (size > 4)\n-        return 2 * BITS_PER_WORD;\n-      if (boundary < BITS_PER_WORD)\n-        {\n-          if (size >= 3)\n-            return BITS_PER_WORD;\n-          if (size >= 2)\n-            return 2 * BITS_PER_UNIT;\n-        }\n+\n+      if (size > UNITS_PER_WORD)\n+\tboundary = UNITS_PER_WORD;\n+      else\n+\t{\n+\t  /* Keep rounding up until only 1 bit set.  */\n+\t  unsigned lsb = (unsigned) size;\n+\n+\t  boundary = 0;\n+\t  do\n+\t    {\n+\t      boundary += lsb;\n+\t      lsb = boundary & -boundary;\n+\t    }\n+\t  while (boundary != lsb);\n+\t}\n+      boundary *= BITS_PER_UNIT;\n     }\n+\n   return boundary;\n }\n \n@@ -487,6 +493,7 @@ nvptx_libcall_value (machine_mode mode, const_rtx)\n     /* Pretend to return in a hard reg for early uses before pseudos can be\n        generated.  */\n     return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n+\n   return gen_reg_rtx (mode);\n }\n \n@@ -503,11 +510,8 @@ nvptx_function_value (const_tree type, const_tree func ATTRIBUTE_UNUSED,\n \t\t\t\t\t     &unsignedp, NULL_TREE, 1);\n   if (outgoing)\n     return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n-  if (cfun->machine->start_call == NULL_RTX)\n-    /* Pretend to return in a hard reg for early uses before pseudos can be\n-       generated.  */\n-    return gen_rtx_REG (mode, NVPTX_RETURN_REGNUM);\n-  return gen_reg_rtx (mode);\n+\n+  return nvptx_libcall_value (mode, NULL_RTX);\n }\n \n /* Implement TARGET_FUNCTION_VALUE_REGNO_P.  */\n@@ -522,8 +526,8 @@ nvptx_function_value_regno_p (const unsigned int regno)\n    reference in memory.  */\n \n static bool\n-nvptx_pass_by_reference (cumulative_args_t, machine_mode mode,\n-\t\t\t const_tree type, bool)\n+nvptx_pass_by_reference (cumulative_args_t ARG_UNUSED (cum), machine_mode mode,\n+\t\t\t const_tree type, bool ARG_UNUSED (named))\n {\n   return !PASS_IN_REG_P (mode, type);\n }\n@@ -572,10 +576,9 @@ nvptx_static_chain (const_tree fndecl, bool incoming_p)\n   if (!DECL_STATIC_CHAIN (fndecl))\n     return NULL;\n \n-  if (incoming_p)\n-    return gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM);\n-  else\n-    return gen_rtx_REG (Pmode, OUTGOING_STATIC_CHAIN_REGNUM);\n+\n+  return gen_rtx_REG (Pmode, (incoming_p ? STATIC_CHAIN_REGNUM\n+\t\t\t      : OUTGOING_STATIC_CHAIN_REGNUM));\n }\n \n /* Helper for write_arg.  Emit a single PTX argument of MODE, either\n@@ -3829,8 +3832,7 @@ nvptx_handle_kernel_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       error (\"%qE attribute only applies to functions\", name);\n       *no_add_attrs = true;\n     }\n-\n-  else if (TREE_TYPE (TREE_TYPE (decl)) != void_type_node)\n+  else if (!VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n     {\n       error (\"%qE attribute requires a void return type\", name);\n       *no_add_attrs = true;"}, {"sha": "33b2c72d9d9e640de4ef64691821db72b86c4bc3", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b49e35a94a6427541e3beb197426d74ee005b43c/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=b49e35a94a6427541e3beb197426d74ee005b43c", "patch": "@@ -153,10 +153,8 @@ enum reg_class\n #define NVPTX_RETURN_REGNUM 4\n #define FRAME_POINTER_REGNUM 15\n #define ARG_POINTER_REGNUM 14\n-#define RETURN_ADDR_REGNO 13\n \n #define STATIC_CHAIN_REGNUM 12\n-#define OUTGOING_ARG_POINTER_REGNUM 11\n #define OUTGOING_STATIC_CHAIN_REGNUM 10\n \n #define FIRST_PARM_OFFSET(FNDECL) ((void)(FNDECL), 0)\n@@ -251,13 +249,10 @@ struct GTY(()) machine_function\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"\\t// #NO_APP \\n\"\n \n-#define ASM_OUTPUT_COMMON(stream, name, size, rounded)\n-#define ASM_OUTPUT_LOCAL(stream, name, size, rounded)\n-\n #define REGISTER_NAMES\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n-    \"%hr0\", \"%outargs\", \"%hfp\", \"%hr3\", \"%retval\", \"%retval_in\", \"%hr6\", \"%hr7\",\t\\\n-    \"%hr8\", \"%hr9\", \"%hr10\", \"%hr11\", \"%hr12\", \"%hr13\", \"%argp\", \"%frame\" \\\n+    \"%hr0\", \"%outargs\", \"%hfp\", \"%hr3\", \"%retval\", \"%hr5\", \"%hr6\", \"%hr7\",\t\\\n+    \"%hr8\", \"%hr9\", \"%chain_out\", \"%hr11\", \"%chain_in\", \"%hr13\", \"%argp\", \"%frame\" \\\n   }\n \n #define DBX_REGISTER_NUMBER(N) N"}]}