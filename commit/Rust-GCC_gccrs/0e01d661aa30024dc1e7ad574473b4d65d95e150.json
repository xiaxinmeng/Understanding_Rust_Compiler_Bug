{"sha": "0e01d661aa30024dc1e7ad574473b4d65d95e150", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUwMWQ2NjFhYTMwMDI0ZGMxZTdhZDU3NDQ3M2I0ZDY1ZDk1ZTE1MA==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2003-03-10T21:51:02Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2003-03-10T21:51:02Z"}, "message": "m68hc11.md (\"*addhi3_68hc12\"): Accept any constant when adding to X and Y since leax/leay are fast.\n\n\t* config/m68hc11/m68hc11.md (\"*addhi3_68hc12\"): Accept any constant\n\twhen adding to X and Y since leax/leay are fast.\n\t(\"*addhi3\"): Accept 'I' constraint when adding to address register.\n\t(\"rotlhi3\"): Operand 1 must be a register_operand.\n\t(peephole2): New peephole to optimize some adds.\n\t* config/m68hc11/m68hc11.h (CONST_OK_FOR_LETTER_P): Use 'I' constraint\n\tto represent -2 .. 2 small integer range.\n\nFrom-SVN: r64127", "tree": {"sha": "9e15ec492f91c32505421967bbb38a6c1c83c621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e15ec492f91c32505421967bbb38a6c1c83c621"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e01d661aa30024dc1e7ad574473b4d65d95e150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e01d661aa30024dc1e7ad574473b4d65d95e150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e01d661aa30024dc1e7ad574473b4d65d95e150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e01d661aa30024dc1e7ad574473b4d65d95e150/comments", "author": null, "committer": null, "parents": [{"sha": "ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5b570e5727129dffc9a9e8cf2613f1c2b3ea9b"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "9d2762f801b6e40766ead74ef5251f0f5bbf6651", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0e01d661aa30024dc1e7ad574473b4d65d95e150", "patch": "@@ -1,3 +1,13 @@\n+2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"*addhi3_68hc12\"): Accept any constant\n+\twhen adding to X and Y since leax/leay are fast.\n+\t(\"*addhi3\"): Accept 'I' constraint when adding to address register.\n+\t(\"rotlhi3\"): Operand 1 must be a register_operand.\n+\t(peephole2): New peephole to optimize some adds.\n+\t* config/m68hc11/m68hc11.h (CONST_OK_FOR_LETTER_P): Use 'I' constraint\n+\tto represent -2 .. 2 small integer range.\n+\n 2003-03-10  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.c (m68hc11_gen_rotate): Set carry before"}, {"sha": "3aa6a8eb4f7276af5655823fea1a1ce184e11677", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=0e01d661aa30024dc1e7ad574473b4d65d95e150", "patch": "@@ -856,6 +856,7 @@ extern enum reg_class m68hc11_tmp_regs_class;\n    (C) == 'L' ? ((VALUE) >= -65536 && (VALUE) <= 65535) : \\\n    (C) == 'M' ? ((VALUE) & 0x0ffffL) == 0 : \\\n    (C) == 'N' ? ((VALUE) == 1 || (VALUE) == -1) : \\\n+   (C) == 'I' ? ((VALUE) >= -2 && (VALUE) <= 2) : \\\n    (C) == 'O' ? (VALUE) == 16 : \\\n    (C) == 'P' ? ((VALUE) <= 2 && (VALUE) >= -8) : 0)\n "}, {"sha": "99c11b6dc5998c55fcb6fb1953ec63a06220fcc6", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e01d661aa30024dc1e7ad574473b4d65d95e150/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=0e01d661aa30024dc1e7ad574473b4d65d95e150", "patch": "@@ -2089,9 +2089,9 @@\n }\")\n \n (define_insn \"*addhi3_68hc12\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=xy,d,xy*z*w,xy*z*w,xy*z\")\n+  [(set (match_operand:HI 0 \"register_operand\" \"=xyd,d,xy*z*w,xy*z*w,xy*z\")\n         (plus:HI (match_operand:HI 1 \"register_operand\" \"%0,0,0,xy*zw,0\")\n-                 (match_operand:HI 2 \"general_operand\" \"N,im*A*wu,id,id,!mu*A\")))]\n+                 (match_operand:HI 2 \"general_operand\" \"i,m*A*wu,id,id,!mu*A\")))]\n   \"TARGET_M6812\"\n   \"*\n {\n@@ -2278,9 +2278,9 @@\n }\")\n \n (define_insn \"*addhi3\"\n-  [(set (match_operand:HI 0 \"hard_reg_operand\" \"=A,d,!A,d*A,!d*A\")\n-\t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0,0,0,0\")\n-\t\t (match_operand:HI 2 \"general_operand\" \"N,i,I,mi*A*d,!u*d*w\")))]\n+  [(set (match_operand:HI 0 \"hard_reg_operand\" \"=A,dA,d,!A,d*A,!d*A\")\n+\t(plus:HI (match_operand:HI 1 \"general_operand\" \"%0,0,0,0,0,0\")\n+\t\t (match_operand:HI 2 \"general_operand\" \"N,I,i,I,mi*A*d,!u*d*w\")))]\n   \"TARGET_M6811\"\n   \"*\n {\n@@ -5812,7 +5812,7 @@\n \n (define_expand \"rotlhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(rotate:HI (match_operand:HI 1 \"general_operand\" \"\")\n+\t(rotate:HI (match_operand:HI 1 \"register_operand\" \"\")\n \t           (match_operand:HI 2 \"general_operand\" \"\")))]\n    \"\"\n    \"\n@@ -6783,6 +6783,29 @@\n    (set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 2))]\n   \"\")\n \n+;;\n+;; Replace a \"ldd <mem>; addd #N; std <mem>\" into a\n+;; \"ldx <mem>; leax; stx <mem>\" if we have a free X/Y register\n+;; and the constant is small.\n+;;\n+(define_peephole2\n+  [(set (match_operand:HI 0 \"hard_reg_operand\" \"\")\n+\t(match_operand:HI 1 \"general_operand\" \"\"))\n+   (set (match_dup 0) (plus:HI (match_dup 0)\n+\t\t\t       (match_operand:HI 2 \"const_int_operand\" \"\")))\n+   (set (match_operand:HI 3 \"nonimmediate_operand\" \"\")\n+        (match_dup 0))\n+   (match_scratch:HI 4 \"xy\")]\n+  \"D_REG_P (operands[0])\n+   && (TARGET_M6812 \n+       || (INTVAL (operands[2]) >= -2 && INTVAL (operands[2]) <= 2))\n+   && peep2_reg_dead_p (3, operands[0])\"\n+  [(set (match_dup 4) (match_dup 1))\n+   (set (match_dup 4) (plus:HI (match_dup 4) (match_dup 2)))\n+   (set (match_dup 3) (match_dup 4))]\n+  \"if (reg_mentioned_p (operands[4], operands[1])) FAIL;\n+   if (reg_mentioned_p (operands[4], operands[3])) FAIL;\")\n+\n ;;\n ;; This peephole catches the address computations generated by the reload\n ;; pass. "}]}