{"sha": "253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUzZjEwNDVhMWVlYjk0ZTc1MGRmNGVjMGY1OTA0YTNjY2Y3ZGIwOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-18T22:56:37Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-18T22:56:37Z"}, "message": "we32k-protos.h: New file.\n\n        * we32k-protos.h: New file.\n\n        * we32k.c: Fix compile time warnings.\n\n        * we32k.h: Move prototypes to we32k-protos.h.  Fix compile time\n        warnings.\n\nFrom-SVN: r31491", "tree": {"sha": "491dba135e6b2f4c45a9b6a98e9ca52e320fd419", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/491dba135e6b2f4c45a9b6a98e9ca52e320fd419"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/comments", "author": null, "committer": null, "parents": [{"sha": "962f1324bd59c7d4119626f3bbd9d396bfdf1eb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/962f1324bd59c7d4119626f3bbd9d396bfdf1eb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/962f1324bd59c7d4119626f3bbd9d396bfdf1eb2"}], "stats": {"total": 72, "additions": 55, "deletions": 17}, "files": [{"sha": "95741993c25772181932b102a02778c55649a527", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "patch": "@@ -1,3 +1,12 @@\n+2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* we32k-protos.h: New file.\n+\n+\t* we32k.c: Fix compile time warnings.\n+\t\n+\t* we32k.h: Move prototypes to we32k-protos.h.  Fix compile time\n+\twarnings.\n+\n 2000-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* calls.c (emit_call_1): Mark parameter with ATTRIBUTE_UNUSED."}, {"sha": "cb11868a7e262efcbda95d9c7c642c466ea4d39f", "filename": "gcc/config/we32k/we32k-protos.h", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k-protos.h?ref=253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "patch": "@@ -0,0 +1,26 @@\n+/* Definitions of target machine for GNU compiler.  AT&T we32000 version.\n+   Copyright (C) 2000\n+   Free Software Foundation, Inc.\n+   Contributed by John Wehle (john@feith1.uucp)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+extern void output_move_double PARAMS ((rtx *));\n+extern void output_push_double PARAMS ((rtx *));\n+#endif /* RTX_CODE */"}, {"sha": "3359704cc2416eb90d089e9d88685ec440ca4dac", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for AT&T we32000 Family.\n-   Copyright (C) 1991, 1992, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 92, 97-99, 2000 Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n \n This file is part of GNU CC.\n@@ -22,9 +22,13 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+#include \"insn-config.h\"\n #include \"rtl.h\"\n #include \"function.h\"\n #include \"real.h\"\n+#include \"recog.h\"\n+#include \"output.h\"\n+#include \"tm_p.h\"\n \n void\n output_move_double (operands)\n@@ -120,7 +124,7 @@ output_push_double (operands)\n     lsw_operands[0] = adj_offsettable_operand (operands[0], 4);\n   else if (GET_CODE (operands[0]) == CONST_DOUBLE)\n     {\n-      lsw_operands[0] = GEN_INT CONST_DOUBLE_HIGH (operands[0]));\n+      lsw_operands[0] = GEN_INT (CONST_DOUBLE_HIGH (operands[0]));\n       operands[0] = GEN_INT (CONST_DOUBLE_LOW (operands[0]));\n     }\n   else if (GET_CODE (operands[0]) == CONST_INT)"}, {"sha": "73a81e0338d2fff86fcaa1c7e515dadd2160ef4e", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/253f1045a1eeb94e750df4ec0f5904a3ccf7db09/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=253f1045a1eeb94e750df4ec0f5904a3ccf7db09", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.  AT&T we32000 version.\n-   Copyright (C) 1991, 92, 93, 94, 95, 96, 98, 1999\n+   Copyright (C) 1991, 92, 93, 94, 95, 96, 98, 99, 2000\n    Free Software Foundation, Inc.\n    Contributed by John Wehle (john@feith1.uucp)\n \n@@ -42,7 +42,7 @@ extern int target_flags;\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-  { { \"\", TARGET_DEFAULT}}\n+  { { \"\", TARGET_DEFAULT, 0}}\n \n #define TARGET_DEFAULT 0\n \n@@ -226,9 +226,9 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n \n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t\t\t\t\\\n- 0,\t\t\t/* NO_REGS */\t\t\\\n- 0x000017ff,\t\t/* GENERAL_REGS */\t\\\n- 0x0000ffff,\t\t/* ALL_REGS */\t\t\\\n+ {0},\t\t\t/* NO_REGS */\t\t\\\n+ {0x000017ff},\t\t/* GENERAL_REGS */\t\\\n+ {0x0000ffff},\t\t/* ALL_REGS */\t\t\\\n }\n \n /* The same information, inverted:\n@@ -810,7 +810,7 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n /* AT&T's assembler can't handle floating constants written as floating.\n    However, when cross-compiling, always use that in case format differs.  */\n \n-#ifdef CROSS_COMPILER\n+#ifdef CROSS_COMPILE\n \n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\\n   fprintf (FILE, \"\\t.double 0r%.20g\\n\", (VALUE))\n@@ -823,16 +823,16 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n #define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\\n do { union { double d; long l[2];} tem;\t\t\t\t\\\n      tem.d = (VALUE);\t\t\t\t\t\t\\\n-     fprintf (FILE, \"\\t.word 0x%x, 0x%x\\n\", tem.l[0], tem.l[1]);\\\n+     fprintf (FILE, \"\\t.word 0x%lx, 0x%lx\\n\", tem.l[0], tem.l[1]);\\\n    } while (0)\n \n #define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\\\n do { union { float f; long l;} tem;\t\t\t\t\\\n      tem.f = (VALUE);\t\t\t\t\t\t\\\n-     fprintf (FILE, \"\\t.word 0x%x\\n\", tem.l);\t\t\t\\\n+     fprintf (FILE, \"\\t.word 0x%lx\\n\", tem.l);\t\t\t\\\n    } while (0)\n \n-#endif /* not CROSS_COMPILER */\n+#endif /* not CROSS_COMPILE */\n \n /* This is how to output an assembler line defining an `int' constant.  */\n \n@@ -860,9 +860,9 @@ do { union { float f; long l;} tem;\t\t\t\t\\\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)  \\\n do {\t\t\t\t\t\t\t\\\n-  unsigned char *s;\t\t\t\t\t\\\n+  const unsigned char *s;\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\\n-  for (i = 0, s = (unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n+  for (i = 0, s = (const unsigned char *)(PTR); i < (LEN); s++, i++)\t\\\n     {\t\t\t\t\t\t\t\\\n       if ((i % 8) == 0)\t\t\t\t\t\\\n \tfprintf ((FILE),\"%s\\t.byte\\t\",(i?\"\\n\":\"\"));\t\\\n@@ -907,7 +907,7 @@ do {\t\t\t\t\t\t\t\\\n /* The `space' pseudo in the text segment outputs nop insns rather than 0s,\n    so we must output 0s explicitly in the text segment.  */\n \n-#define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n+#define ASM_OUTPUT_SKIP(FILE,SIZE) do { \\\n   if (in_text_section ())                                           \t    \\\n     {\t\t\t\t\t\t\t\t\t    \\\n       int i;\t\t\t\t\t\t\t\t    \\\n@@ -923,7 +923,7 @@ do {\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t    \\\n     }\t\t\t\t\t\t\t\t\t    \\\n   else\t\t\t\t\t\t\t\t\t    \\\n-    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (SIZE))\n+    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (SIZE)); } while (0)\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -981,8 +981,7 @@ do {\t\t\t\t\t\t\t\\\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE) 0\n \n #define PRINT_OPERAND(FILE, X, CODE)  \\\n-{ int i;\t\t\t\t\t\t\t\t\\\n-  if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n+{ if (GET_CODE (X) == REG)\t\t\t\t\t\t\\\n     fprintf (FILE, \"%%%s\", reg_names[REGNO (X)]);\t\t\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\"}]}