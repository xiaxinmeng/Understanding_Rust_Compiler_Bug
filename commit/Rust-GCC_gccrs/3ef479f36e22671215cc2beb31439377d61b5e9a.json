{"sha": "3ef479f36e22671215cc2beb31439377d61b5e9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VmNDc5ZjM2ZTIyNjcxMjE1Y2MyYmViMzE0MzkzNzdkNjFiNWU5YQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-12T23:49:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-06-12T23:49:32Z"}, "message": "compiler: implement Go 1.1 spec of terminating statements.\n\nFrom-SVN: r200047", "tree": {"sha": "e34bc73af1eeffbad85a7b517e037cc2f0fe9f5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e34bc73af1eeffbad85a7b517e037cc2f0fe9f5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ef479f36e22671215cc2beb31439377d61b5e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef479f36e22671215cc2beb31439377d61b5e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ef479f36e22671215cc2beb31439377d61b5e9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ef479f36e22671215cc2beb31439377d61b5e9a/comments", "author": null, "committer": null, "parents": [{"sha": "4b02c96265fb52f9f1b19a6fcb350693b52f4135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b02c96265fb52f9f1b19a6fcb350693b52f4135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b02c96265fb52f9f1b19a6fcb350693b52f4135"}], "stats": {"total": 178, "additions": 136, "deletions": 42}, "files": [{"sha": "c0b3fef72392f608dc58fbd88d96308ae9591357", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=3ef479f36e22671215cc2beb31439377d61b5e9a", "patch": "@@ -44,7 +44,7 @@ go_create_gogo(int int_type_size, int pointer_size, const char *pkgpath,\n GO_EXTERN_C\n void\n go_parse_input_files(const char** filenames, unsigned int filename_count,\n-\t\t     bool only_check_syntax, bool require_return_statement)\n+\t\t     bool only_check_syntax, bool)\n {\n   go_assert(filename_count > 0);\n \n@@ -84,6 +84,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Finalize method lists and build stub methods for named types.\n   ::gogo->finalize_methods();\n \n+  // Check that functions have a terminating statement.\n+  ::gogo->check_return_statements();\n+\n   // Now that we have seen all the names, lower the parse tree into a\n   // form which is easier to use.\n   ::gogo->lower_parse_tree();\n@@ -104,10 +107,6 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   if (only_check_syntax)\n     return;\n \n-  // Check that functions have return statements.\n-  if (require_return_statement)\n-    ::gogo->check_return_statements();\n-\n   // Export global identifiers as appropriate.\n   ::gogo->do_exports();\n "}, {"sha": "c9c62cedaaf632fa66423458ed26f4fabaded5e7", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 111, "deletions": 35, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=3ef479f36e22671215cc2beb31439377d61b5e9a", "patch": "@@ -1707,8 +1707,8 @@ Expression_statement::do_check_types(Gogo*)\n     this->expr_->discarding_value();\n }\n \n-// An expression statement may fall through unless it is a call to a\n-// function which does not return.\n+// An expression statement is only a terminating statement if it is\n+// a call to panic.\n \n bool\n Expression_statement::do_may_fall_through() const\n@@ -1717,22 +1717,28 @@ Expression_statement::do_may_fall_through() const\n   if (call != NULL)\n     {\n       const Expression* fn = call->fn();\n-      const Func_expression* fe = fn->func_expression();\n-      if (fe != NULL)\n+      // panic is still an unknown named object.\n+      const Unknown_expression* ue = fn->unknown_expression();\n+      if (ue != NULL)\n \t{\n-\t  const Named_object* no = fe->named_object();\n+\t  Named_object* no = ue->named_object();\n \n-\t  Function_type* fntype;\n-\t  if (no->is_function())\n-\t    fntype = no->func_value()->type();\n-\t  else if (no->is_function_declaration())\n-\t    fntype = no->func_declaration_value()->type();\n-\t  else\n-\t    fntype = NULL;\n-\n-\t  // The builtin function panic does not return.\n-\t  if (fntype != NULL && fntype->is_builtin() && no->name() == \"panic\")\n-\t    return false;\n+          if (no->is_unknown())\n+            no = no->unknown_value()->real_named_object();\n+          if (no != NULL)\n+            {\n+              Function_type* fntype;\n+              if (no->is_function())\n+                fntype = no->func_value()->type();\n+              else if (no->is_function_declaration())\n+                fntype = no->func_declaration_value()->type();\n+              else\n+                fntype = NULL;\n+\n+              // The builtin function panic does not return.\n+              if (fntype != NULL && fntype->is_builtin() && no->name() == \"panic\")\n+                return false;\n+            }\n \t}\n     }\n   return true;\n@@ -3700,9 +3706,6 @@ class Constant_switch_statement : public Statement\n   void\n   do_check_types(Gogo*);\n \n-  bool\n-  do_may_fall_through() const;\n-\n   Bstatement*\n   do_get_backend(Translate_context*);\n \n@@ -3746,22 +3749,6 @@ Constant_switch_statement::do_check_types(Gogo*)\n     this->set_is_error();\n }\n \n-// Return whether this switch may fall through.\n-\n-bool\n-Constant_switch_statement::do_may_fall_through() const\n-{\n-  if (this->clauses_ == NULL)\n-    return true;\n-\n-  // If we have a break label, then some case needed it.  That implies\n-  // that the switch statement as a whole can fall through.\n-  if (this->break_label_ != NULL)\n-    return true;\n-\n-  return this->clauses_->may_fall_through();\n-}\n-\n // Convert to GENERIC.\n \n Bstatement*\n@@ -3911,6 +3898,22 @@ Switch_statement::do_dump_statement(Ast_dump_context* ast_dump_context) const\n   ast_dump_context->ostream() << std::endl;\n }\n \n+// Return whether this switch may fall through.\n+\n+bool\n+Switch_statement::do_may_fall_through() const\n+{\n+  if (this->clauses_ == NULL)\n+    return true;\n+\n+  // If we have a break label, then some case needed it.  That implies\n+  // that the switch statement as a whole can fall through.\n+  if (this->break_label_ != NULL)\n+    return true;\n+\n+  return this->clauses_->may_fall_through();\n+}\n+\n // Make a switch statement.\n \n Switch_statement*\n@@ -4050,6 +4053,17 @@ Type_case_clauses::Type_case_clause::lower(Type* switch_val_type,\n     }\n }\n \n+// Return true if this type clause may fall through to the statements\n+// following the switch.\n+\n+bool\n+Type_case_clauses::Type_case_clause::may_fall_through() const\n+{\n+  if (this->statements_ == NULL)\n+    return true;\n+  return this->statements_->may_fall_through();\n+}\n+\n // Dump the AST representation for a type case clause\n \n void\n@@ -4148,6 +4162,25 @@ Type_case_clauses::lower(Type* switch_val_type, Block* b,\n \t\t\tNULL);\n }\n \n+// Return true if these clauses may fall through to the statements\n+// following the switch statement.\n+\n+bool\n+Type_case_clauses::may_fall_through() const\n+{\n+  bool found_default = false;\n+  for (Type_clauses::const_iterator p = this->clauses_.begin();\n+       p != this->clauses_.end();\n+       ++p)\n+    {\n+      if (p->may_fall_through())\n+\treturn true;\n+      if (p->is_default())\n+\tfound_default = true;\n+    }\n+  return !found_default;\n+}\n+\n // Dump the AST representation for case clauses (from a switch statement)\n \n void\n@@ -4237,6 +4270,22 @@ Type_switch_statement::do_lower(Gogo*, Named_object*, Block* enclosing,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Return whether this switch may fall through.\n+\n+bool\n+Type_switch_statement::do_may_fall_through() const\n+{\n+  if (this->clauses_ == NULL)\n+    return true;\n+\n+  // If we have a break label, then some case needed it.  That implies\n+  // that the switch statement as a whole can fall through.\n+  if (this->break_label_ != NULL)\n+    return true;\n+\n+  return this->clauses_->may_fall_through();\n+}\n+\n // Return the break label for this type switch statement, creating it\n // if necessary.\n \n@@ -4954,6 +5003,19 @@ Select_statement::do_lower(Gogo* gogo, Named_object* function,\n   return Statement::make_block_statement(b, loc);\n }\n \n+// Whether the select statement itself may fall through to the following\n+// statement.\n+\n+bool\n+Select_statement::do_may_fall_through() const\n+{\n+  // A select statement is terminating if no break statement\n+  // refers to it and all of its clauses are terminating.\n+  if (this->break_label_ != NULL)\n+    return true;\n+  return this->clauses_->may_fall_through();\n+}\n+\n // Return the backend representation for a select statement.\n \n Bstatement*\n@@ -5114,6 +5176,20 @@ For_statement::set_break_continue_labels(Unnamed_label* break_label,\n   this->continue_label_ = continue_label;\n }\n \n+// Whether the overall statement may fall through.\n+\n+bool\n+For_statement::do_may_fall_through() const\n+{\n+  // A for loop is terminating if it has no condition and\n+  // no break statement.\n+  if(this->cond_ != NULL)\n+    return true;\n+  if(this->break_label_ != NULL)\n+    return true;\n+  return false;\n+}\n+\n // Dump the AST representation for a for statement.\n \n void"}, {"sha": "ee5be875aa0ff2c261176a1bd9703a18c804b829", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ef479f36e22671215cc2beb31439377d61b5e9a/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=3ef479f36e22671215cc2beb31439377d61b5e9a", "patch": "@@ -894,8 +894,7 @@ class Select_statement : public Statement\n   { this->clauses_->check_types(); }\n \n   bool\n-  do_may_fall_through() const\n-  { return this->clauses_->may_fall_through(); }\n+  do_may_fall_through() const;\n \n   Bstatement*\n   do_get_backend(Translate_context*);\n@@ -1086,6 +1085,9 @@ class For_statement : public Statement\n   Statement*\n   do_lower(Gogo*, Named_object*, Block*, Statement_inserter*);\n \n+  bool\n+  do_may_fall_through() const;\n+\n   Bstatement*\n   do_get_backend(Translate_context*)\n   { go_unreachable(); }\n@@ -1399,6 +1401,9 @@ class Switch_statement : public Statement\n   void\n   do_dump_statement(Ast_dump_context*) const;\n \n+  bool\n+  do_may_fall_through() const;\n+\n  private:\n   // The value to switch on.  This may be NULL.\n   Expression* val_;\n@@ -1449,6 +1454,11 @@ class Type_case_clauses\n   lower(Type*, Block*, Temporary_statement* descriptor_temp,\n \tUnnamed_label* break_label) const;\n \n+  // Return true if these clauses may fall through to the statements\n+  // following the switch statement.\n+  bool\n+  may_fall_through() const;\n+\n   // Dump the AST representation to a dump context.\n   void\n   dump_clauses(Ast_dump_context*) const;\n@@ -1493,6 +1503,12 @@ class Type_case_clauses\n     lower(Type*, Block*, Temporary_statement* descriptor_temp,\n \t  Unnamed_label* break_label, Unnamed_label** stmts_label) const;\n \n+    // Return true if this clause may fall through to execute the\n+    // statements following the switch statement.  This is not the\n+    // same as whether this clause falls through to the next clause.\n+    bool\n+    may_fall_through() const;\n+\n     // Dump the AST representation to a dump context.\n     void\n     dump_clause(Ast_dump_context*) const;\n@@ -1556,6 +1572,9 @@ class Type_switch_statement : public Statement\n   void\n   do_dump_statement(Ast_dump_context*) const;\n \n+  bool\n+  do_may_fall_through() const;\n+\n  private:\n   // The variable holding the value we are switching on.\n   Named_object* var_;"}]}