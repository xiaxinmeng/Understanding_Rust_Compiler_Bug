{"sha": "b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJkYjkyMjAwMmQ2ZDk1Y2MwZmMyZjc5NjVjOWE1YmE4MWM2Y2Y1YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-09-05T08:36:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-09-05T08:36:39Z"}, "message": "re PR tree-optimization/28905 (ICE in compare_name_with_value, at tree-vrp.c:3557)\n\n2006-09-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/28905\n\t* tree-vrp.c (fix_equivalence_set): Manually implement\n\t!value_ranges_intersect_p to also handle symbolic ranges.\n\n\t* gcc.c-torture/compile/pr28905.c: New testcase.\n\nFrom-SVN: r116696", "tree": {"sha": "f69d8afa798891dbc042ce2310e6980818a89056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f69d8afa798891dbc042ce2310e6980818a89056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f393e7f57d2643b83b30603568bd7260a6451731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f393e7f57d2643b83b30603568bd7260a6451731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f393e7f57d2643b83b30603568bd7260a6451731"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "30a49bb379fed9dbd2677f60abf60b3e11e122db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "patch": "@@ -1,3 +1,9 @@\n+2006-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28905\n+\t* tree-vrp.c (fix_equivalence_set): Manually implement\n+\t!value_ranges_intersect_p to also handle symbolic ranges.\n+\n 2006-09-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/28935"}, {"sha": "a1946dddf419709e8de95778a390d515715119b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "patch": "@@ -1,3 +1,8 @@\n+2006-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/28905\n+\t* gcc.c-torture/compile/pr28905.c: New testcase.\n+\n 2006-09-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/28935"}, {"sha": "83a381ab8c9ba7707512e6feeda107c274eac707", "filename": "gcc/testsuite/gcc.c-torture/compile/pr28905.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28905.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28905.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr28905.c?ref=b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "patch": "@@ -0,0 +1,11 @@\n+/* We used to ICE here because after VRP we ended up with\n+   non-compatible ranges in a value-range equivalences set.  */\n+void code_comment (int size)\n+{\n+  int i;\n+  for (i = 0; i < size; i++)\n+    if (i)\n+      if (i < 0)\n+        if (i < 0)\n+          return;\n+}"}, {"sha": "a2127446a85263f6c3b2b1deaeeeda3ed89ba965", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b2db922002d6d95cc0fc2f7965c9a5ba81c6cf5a", "patch": "@@ -774,14 +774,18 @@ fix_equivalence_set (value_range_t *vr_p)\n       value_range_t *equiv_vr = vr_value[i];\n \n       if (equiv_vr->type == VR_VARYING\n-\t  || equiv_vr->type == VR_UNDEFINED\n-\t  || symbolic_range_p (equiv_vr))\n+\t  || equiv_vr->type == VR_UNDEFINED)\n \tcontinue;\n \n-      if (equiv_vr->type == VR_RANGE\n-\t  && vr_p->type == VR_RANGE\n-\t  && !value_ranges_intersect_p (vr_p, equiv_vr))\n-\tbitmap_set_bit (to_remove, i);\n+      if (vr_p->type == VR_RANGE\n+\t  && equiv_vr->type == VR_RANGE)\n+\t{\n+\t  /* Two ranges have an empty intersection if their end points\n+\t     are outside of the other range.  */\n+\t  if (compare_values (equiv_vr->min, vr_p->max) == 1\n+\t      || compare_values (equiv_vr->max, vr_p->min) == -1)\n+\t    bitmap_set_bit (to_remove, i);\n+\t}\n       else if ((equiv_vr->type == VR_RANGE && vr_p->type == VR_ANTI_RANGE)\n \t       || (equiv_vr->type == VR_ANTI_RANGE && vr_p->type == VR_RANGE))\n \t{"}]}