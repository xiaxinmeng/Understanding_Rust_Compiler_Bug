{"sha": "f46d32dd29b7623915e31b0508e2e925526fa7d8", "node_id": "C_kwDOANBUbNoAKGY0NmQzMmRkMjliNzYyMzkxNWUzMWIwNTA4ZTJlOTI1NTI2ZmE3ZDg", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-02T21:33:49Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-12-03T20:07:55Z"}, "message": "Fortran: improve checking of array specifications\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/103505\n\t* array.c (match_array_element_spec): Try to simplify array\n\telement specifications to improve early checking.\n\t* expr.c (gfc_try_simplify_expr): New.  Try simplification of an\n\texpression via gfc_simplify_expr.  When an error occurs, roll\n\tback.\n\t* gfortran.h (gfc_try_simplify_expr): Declare it.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/103505\n\t* gfortran.dg/pr103505.f90: New test.\n\nCo-authored-by: Steven G. Kargl <kargl@gcc.gnu.org>", "tree": {"sha": "c4b1148f1ca7351c74dd2fa8e00262ad61f6925d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4b1148f1ca7351c74dd2fa8e00262ad61f6925d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46d32dd29b7623915e31b0508e2e925526fa7d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46d32dd29b7623915e31b0508e2e925526fa7d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46d32dd29b7623915e31b0508e2e925526fa7d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46d32dd29b7623915e31b0508e2e925526fa7d8/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abd7712f91c99690f8b0046ea168b2782afbac69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd7712f91c99690f8b0046ea168b2782afbac69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd7712f91c99690f8b0046ea168b2782afbac69"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "5762c8d92d45568b7ec83ea36fd2cd537c6f4f2e", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=f46d32dd29b7623915e31b0508e2e925526fa7d8", "patch": "@@ -492,6 +492,8 @@ match_array_element_spec (gfc_array_spec *as)\n   if (!gfc_expr_check_typed (*upper, gfc_current_ns, false))\n     return AS_UNKNOWN;\n \n+  gfc_try_simplify_expr (*upper, 0);\n+\n   if (((*upper)->expr_type == EXPR_CONSTANT\n \t&& (*upper)->ts.type != BT_INTEGER) ||\n       ((*upper)->expr_type == EXPR_FUNCTION\n@@ -524,6 +526,8 @@ match_array_element_spec (gfc_array_spec *as)\n   if (!gfc_expr_check_typed (*upper, gfc_current_ns, false))\n     return AS_UNKNOWN;\n \n+  gfc_try_simplify_expr (*upper, 0);\n+\n   if (((*upper)->expr_type == EXPR_CONSTANT\n \t&& (*upper)->ts.type != BT_INTEGER) ||\n       ((*upper)->expr_type == EXPR_FUNCTION"}, {"sha": "87089321a3b7ffeeb5a8fb5f802d2d0e145f4a97", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f46d32dd29b7623915e31b0508e2e925526fa7d8", "patch": "@@ -2331,6 +2331,31 @@ gfc_simplify_expr (gfc_expr *p, int type)\n }\n \n \n+/* Try simplification of an expression via gfc_simplify_expr.\n+   When an error occurs (arithmetic or otherwise), roll back.  */\n+\n+bool\n+gfc_try_simplify_expr (gfc_expr *e, int type)\n+{\n+  gfc_expr *n;\n+  bool t, saved_div0;\n+\n+  if (e == NULL || e->expr_type == EXPR_CONSTANT)\n+    return true;\n+\n+  saved_div0 = gfc_seen_div0;\n+  gfc_seen_div0 = false;\n+  n = gfc_copy_expr (e);\n+  t = gfc_simplify_expr (n, type) && !gfc_seen_div0;\n+  if (t)\n+    gfc_replace_expr (e, n);\n+  else\n+    gfc_free_expr (n);\n+  gfc_seen_div0 = saved_div0;\n+  return t;\n+}\n+\n+\n /* Returns the type of an expression with the exception that iterator\n    variables are automatically integers no matter what else they may\n    be declared as.  */"}, {"sha": "24ad3ed4d06068ade7ae5952492e86ac5a186c7e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f46d32dd29b7623915e31b0508e2e925526fa7d8", "patch": "@@ -3585,6 +3585,7 @@ void gfc_free_ref_list (gfc_ref *);\n void gfc_type_convert_binary (gfc_expr *, int);\n bool gfc_is_constant_expr (gfc_expr *);\n bool gfc_simplify_expr (gfc_expr *, int);\n+bool gfc_try_simplify_expr (gfc_expr *, int);\n int gfc_has_vector_index (gfc_expr *);\n \n gfc_expr *gfc_get_expr (void);"}, {"sha": "522e53efcb24cfb1a1f11908737f6424729b5e87", "filename": "gcc/testsuite/gfortran.dg/pr103505.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103505.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46d32dd29b7623915e31b0508e2e925526fa7d8/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103505.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr103505.f90?ref=f46d32dd29b7623915e31b0508e2e925526fa7d8", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do compile }\n+! PR fortran/103505 - this used to ICE in compare_bound_mpz_t\n+! Testcase by G.Steinmetz\n+\n+program p\n+  integer, parameter :: a((2.))   = [4,8] ! { dg-error \"scalar INTEGER\" }\n+  integer, parameter :: z(1:(2.)) = [4,8] ! { dg-error \"scalar INTEGER\" }\n+  print *, a(1:1)                         ! { dg-error \"Syntax error\" }\n+end"}]}