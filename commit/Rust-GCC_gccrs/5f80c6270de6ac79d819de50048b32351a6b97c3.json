{"sha": "5f80c6270de6ac79d819de50048b32351a6b97c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4MGM2MjcwZGU2YWM3OWQ4MTlkZTUwMDQ4YjMyMzUxYTZiOTdjMw==", "commit": {"author": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-20T15:19:05Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@localhost.localdomain", "date": "2021-08-20T15:19:05Z"}, "message": "Further improvements to constant shifts for the H8\n\ngcc/\n\t* config/h8300/h8300.c (shift_alg_hi): Improve arithmetic shift right\n\tby 15 bits for H8/300H and H8/S.  Improve logical shifts by 12\n\tbits for H8/S.\n\t(shift_alg_si): Improve arithmetic right shift by 28-30 bits for\n\tH8/300H.  Improve arithmetic shift right by 15 bits for H8/S.\n\tImprove logical shifts by 27 bits for H8/S.\n\t(get_shift_alg): Corresponding changes.\n\t(h8300_option_override): Revert to loops for -Os when profitable.", "tree": {"sha": "6b9836882bb6119b799c89d2ac2a3d29cd7c988d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b9836882bb6119b799c89d2ac2a3d29cd7c988d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f80c6270de6ac79d819de50048b32351a6b97c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f80c6270de6ac79d819de50048b32351a6b97c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f80c6270de6ac79d819de50048b32351a6b97c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f80c6270de6ac79d819de50048b32351a6b97c3/comments", "author": null, "committer": null, "parents": [{"sha": "29b2fd371f18169141e20b90effa7205db68fb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29b2fd371f18169141e20b90effa7205db68fb11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29b2fd371f18169141e20b90effa7205db68fb11"}], "stats": {"total": 38, "additions": 32, "deletions": 6}, "files": [{"sha": "8ccacecba79e1bd30c4089ead96848b18c737809", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f80c6270de6ac79d819de50048b32351a6b97c3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f80c6270de6ac79d819de50048b32351a6b97c3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5f80c6270de6ac79d819de50048b32351a6b97c3", "patch": "@@ -213,9 +213,9 @@ static enum shift_alg shift_alg_hi[2][3][16] = {\n     /*  0    1    2    3    4    5    6    7  */\n     /*  8    9   10   11   12   13   14   15  */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+      SPC, SPC, SPC, SPC, ROT, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+      SPC, SPC, SPC, SPC, ROT, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n   }\n@@ -237,9 +237,9 @@ static enum shift_alg shift_alg_si[2][3][32] = {\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, INL, INL, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n   },\n   {\n     /* TARGET_H8300S  */\n@@ -256,7 +256,7 @@ static enum shift_alg shift_alg_si[2][3][32] = {\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n     { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, INL, INL, INL, INL, LOP,\n+      INL, INL, INL, INL, INL, INL, INL, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC,\n       SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n   }\n@@ -372,6 +372,9 @@ h8300_option_override (void)\n       shift_alg_si[H8_300H][SHIFT_ASHIFTRT][25] = SHIFT_LOOP;\n       shift_alg_si[H8_300H][SHIFT_ASHIFTRT][26] = SHIFT_LOOP;\n       shift_alg_si[H8_300H][SHIFT_ASHIFTRT][27] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][28] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][29] = SHIFT_LOOP;\n+      shift_alg_si[H8_300H][SHIFT_ASHIFTRT][30] = SHIFT_LOOP;\n \n       /* H8S */\n       shift_alg_hi[H8_S][SHIFT_ASHIFTRT][14] = SHIFT_LOOP;\n@@ -3830,6 +3833,10 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t}\n       else if (count == 15)\n \t{\n+\t  /* The basic idea here is to use the shift-by-16 idiom to make things\n+\t     small and efficient.  Of course, that loses one bit that we need,\n+\t     so we stuff the bit into C, shift by 16, then rotate the bit\n+\t     back in.  */\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n@@ -3841,7 +3848,9 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      info->cc_special = OLD_CC_SET_ZNV;\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n-\t      gcc_unreachable ();\n+\t      info->special = \"shll.w\\t%f0\\n\\tmov.w\\t%e0,%f0\\n\\texts.l\\t%S0\\n\\trotxl.l\\t%S0\";\n+\t      info->cc_special = OLD_CC_SET_ZNV;\n+\t      goto end;\n \t    }\n \t}\n       else if (count >= 16 && count <= 23)\n@@ -3863,6 +3872,23 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t      goto end;\n \t    }\n \t}\n+      else if (TARGET_H8300S && count == 27)\n+\t{\n+\t  switch (shift_type)\n+\t    {\n+\t    case SHIFT_ASHIFT:\n+\t      info->special = \"sub.w\\t%e0,%e0\\n\\trotr.l\\t#2,%S0\\n\\trotr.l\\t#2,%S0\\n\\trotr.l\\t%S0\\n\\tsub.w\\t%f0,%f0\";\n+\t      goto end;\n+\t    case SHIFT_LSHIFTRT:\n+\t      info->special = \"sub.w\\t%f0,%f0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t#2,%S0\\n\\trotl.l\\t%S0\\n\\textu.l\\t%S0\";\n+\t      goto end;\n+\t    case SHIFT_ASHIFTRT:\n+\t      info->remainder = count - 24;\n+\t      info->special = \"mov.w\\t%e0,%f0\\n\\tmov.b\\t%t0,%s0\\n\\texts.w\\t%f0\\n\\texts.l\\t%S0\";\n+\t      info->cc_special = OLD_CC_SET_ZNV;\n+\t      goto end;\n+\t    }\n+\t}\n       else if (count >= 24 && count <= 27)\n \t{\n \t  info->remainder = count - 24;"}]}