{"sha": "ceda2c69d52197199c97e8fe054abd7d17e5378f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2VkYTJjNjlkNTIxOTcxOTljOTdlOGZlMDU0YWJkN2QxN2U1Mzc4Zg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-01-19T16:49:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-01-19T16:49:50Z"}, "message": "re PR ipa/66223 (Diagnostic of pure virtual function call broken, including __cxa_pure_virtual)\n\n\n\tPR ipa/66223\n\t* ipa-devirt.c (is_cxa_pure_virtual_p): New function.\n\t(maybe_record_node): Record cxa_pure_virtual as the only possible\n\ttarget if there are not ohter candidates.\n\t(possible_polymorphic_call_target_p): Accept cxa_pure_virtual.\n\n\t* g++.dg/ipa/devirt-50.C: New testcase.\n\nFrom-SVN: r232572", "tree": {"sha": "56b15965ef3ed95b347438b20a83a9f117a03cf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56b15965ef3ed95b347438b20a83a9f117a03cf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ceda2c69d52197199c97e8fe054abd7d17e5378f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceda2c69d52197199c97e8fe054abd7d17e5378f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceda2c69d52197199c97e8fe054abd7d17e5378f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceda2c69d52197199c97e8fe054abd7d17e5378f/comments", "author": null, "committer": null, "parents": [{"sha": "b1b6d906cd37ca1dc8246e29818d39a5949389c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1b6d906cd37ca1dc8246e29818d39a5949389c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1b6d906cd37ca1dc8246e29818d39a5949389c0"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "5c4a13258f925e323f6fb040c05497a2c76e8dd9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ceda2c69d52197199c97e8fe054abd7d17e5378f", "patch": "@@ -1,3 +1,11 @@\n+2016-01-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/66223\n+\t* ipa-devirt.c (is_cxa_pure_virtual_p): New function.\n+\t(maybe_record_node): Record cxa_pure_virtual as the only possible\n+\ttarget if there are not ohter candidates.\n+\t(possible_polymorphic_call_target_p): Accept cxa_pure_virtual.\n+\n 2016-01-19  Richard Biener  <rguenther@suse.de>\n \n \t* hsa-gen.c (get_memory_order_name): Use MEMMODEL_ constants."}, {"sha": "736858e7236730dc1989fde59cdd6c791e6902cf", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=ceda2c69d52197199c97e8fe054abd7d17e5378f", "patch": "@@ -2327,6 +2327,17 @@ referenced_from_vtable_p (struct cgraph_node *node)\n   return found;\n }\n \n+/* Return if TARGET is cxa_pure_virtual.  */\n+\n+static bool\n+is_cxa_pure_virtual_p (tree target)\n+{\n+  return target && TREE_CODE (TREE_TYPE (target)) != METHOD_TYPE\n+\t && DECL_NAME (target)\n+\t && !strcmp (IDENTIFIER_POINTER (DECL_NAME (target)),\n+\t\t     \"__cxa_pure_virtual\");\n+}\n+\n /* If TARGET has associated node, record it in the NODES array.\n    CAN_REFER specify if program can refer to the target directly.\n    if TARGET is unknown (NULL) or it can not be inserted (for example because\n@@ -2341,11 +2352,12 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n {\n   struct cgraph_node *target_node, *alias_target;\n   enum availability avail;\n+  bool pure_virtual = is_cxa_pure_virtual_p (target);\n \n-  /* cxa_pure_virtual and __builtin_unreachable do not need to be added into\n+  /* __builtin_unreachable do not need to be added into\n      list of targets; the runtime effect of calling them is undefined.\n      Only \"real\" virtual methods should be accounted.  */\n-  if (target && TREE_CODE (TREE_TYPE (target)) != METHOD_TYPE)\n+  if (target && TREE_CODE (TREE_TYPE (target)) != METHOD_TYPE && !pure_virtual)\n     return;\n \n   if (!can_refer)\n@@ -2388,6 +2400,7 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n      ??? Maybe it would make sense to be more aggressive for LTO even\n      elsewhere.  */\n   if (!flag_ltrans\n+      && !pure_virtual\n       && type_in_anonymous_namespace_p (DECL_CONTEXT (target))\n       && (!target_node\n           || !referenced_from_vtable_p (target_node)))\n@@ -2401,6 +2414,20 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n     {\n       gcc_assert (!target_node->global.inlined_to);\n       gcc_assert (target_node->real_symbol_p ());\n+      /* Only add pure virtual if it is the only possible target.  This way\n+\t we will preserve the diagnostics about pure virtual called in many\n+\t cases without disabling optimization in other.  */\n+      if (pure_virtual)\n+\t{\n+\t  if (nodes.length ())\n+\t    return;\n+\t}\n+      /* If we found a real target, take away cxa_pure_virtual.  */\n+      else if (!pure_virtual && nodes.length () == 1\n+\t       && is_cxa_pure_virtual_p (nodes[0]->decl))\n+\tnodes.pop ();\n+      if (pure_virtual && nodes.length ())\n+\treturn;\n       if (!inserted->add (target))\n \t{\n \t  cached_polymorphic_call_targets->add (target_node);\n@@ -3328,6 +3355,9 @@ possible_polymorphic_call_target_p (tree otr_type,\n           || fcode == BUILT_IN_TRAP))\n     return true;\n \n+  if (is_cxa_pure_virtual_p (n->decl))\n+    return true;\n+\n   if (!odr_hash)\n     return true;\n   targets = possible_polymorphic_call_targets (otr_type, otr_token, ctx, &final);"}, {"sha": "b0a44cd3efc0a58baf1827549c1866b927576dd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ceda2c69d52197199c97e8fe054abd7d17e5378f", "patch": "@@ -1,3 +1,8 @@\n+2016-01-19  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/66223\n+\t* g++.dg/ipa/devirt-50.C: New testcase.\n+\n 2016-01-19  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/68965"}, {"sha": "32071cfba06ae3ea8cd908b26cdac314982439c4", "filename": "gcc/testsuite/g++.dg/ipa/devirt-50.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-50.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ceda2c69d52197199c97e8fe054abd7d17e5378f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-50.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-50.C?ref=ceda2c69d52197199c97e8fe054abd7d17e5378f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\"  } */\n+struct B {\n+        B* self;\n+        B() : self( this ) { self->f(); }\n+        virtual void f() = 0;\n+    };\n+\n+    struct D : B\n+    {\n+        void f() {}\n+    };\n+\n+    int main()\n+    {\n+        D d;\n+    }\n+\n+/* { dg-final { scan-tree-dump \"cxa_pure_virtual\" \"optimized\"} } */"}]}