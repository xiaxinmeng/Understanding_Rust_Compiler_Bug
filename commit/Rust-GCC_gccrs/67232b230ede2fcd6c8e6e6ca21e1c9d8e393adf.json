{"sha": "67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyMzJiMjMwZWRlMmZjZDZjOGU2ZTZjYTIxZTFjOWQ4ZTM5M2FkZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T11:18:50Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-01-23T11:18:50Z"}, "message": "(simplify_comparison): Fix typo in last change.\n\nFrom-SVN: r6407", "tree": {"sha": "3c69fc7d6d05e7e85de9bc6ec33fe414f2fefe89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c69fc7d6d05e7e85de9bc6ec33fe414f2fefe89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf/comments", "author": null, "committer": null, "parents": [{"sha": "5cb7368c6660cfdf7b878553e3f871b2a13c91a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7368c6660cfdf7b878553e3f871b2a13c91a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb7368c6660cfdf7b878553e3f871b2a13c91a2"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "d6993672925ada5d3072fabc33541e30bbd7b10f", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=67232b230ede2fcd6c8e6e6ca21e1c9d8e393adf", "patch": "@@ -8451,21 +8451,20 @@ simplify_comparison (code, pop0, pop1)\n \t shift.  We can if the shift is a rotate or if the bits shifted out of\n \t this shift are known to be zero for both inputs and if the type of\n \t comparison is compatible with the shift.  */\n-      else if (GET_CODE (op0) == GET_CODE (op1)\n-\t       && GET_MODE_BITSIZE (GET_MODE (op0)) <= HOST_BITS_PER_WIDE_INT\n-\t       && ((GET_CODE (op0) == ROTATE && (code == NE || code == EQ))\n-\t\t   || ((GET_CODE (op0) == LSHIFTRT\n-\t\t\t|| GET_CODE (op0) == ASHIFT\n-\t\t\t|| GET_CODE (op0) == LSHIFT)\n-\t\t       && (code != GT && code != LT\n-\t\t\t   && code != GE && code != LE))\n-\t\t   || (GET_CODE (op0) == ASHIFTRT\n-\t\t       && (code != GTU && code != LTU\n-\t\t\t   && code != GEU && code != GEU)))\n-\t       && GET_CODE (XEXP (op0, 1)) == CONST_INT\n-\t       && INTVAL (XEXP (op0, 1)) >= 0\n-\t       && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT\n-\t       && XEXP (op0, 1) == XEXP (op1, 1))\n+      if (GET_CODE (op0) == GET_CODE (op1)\n+\t  && GET_MODE_BITSIZE (GET_MODE (op0)) <= HOST_BITS_PER_WIDE_INT\n+\t  && ((GET_CODE (op0) == ROTATE && (code == NE || code == EQ))\n+\t      || ((GET_CODE (op0) == LSHIFTRT\n+\t\t   || GET_CODE (op0) == ASHIFT\n+\t\t   || GET_CODE (op0) == LSHIFT)\n+\t\t  && (code != GT && code != LT && code != GE && code != LE))\n+\t      || (GET_CODE (op0) == ASHIFTRT\n+\t\t  && (code != GTU && code != LTU\n+\t\t      && code != GEU && code != GEU)))\n+\t  && GET_CODE (XEXP (op0, 1)) == CONST_INT\n+\t  && INTVAL (XEXP (op0, 1)) >= 0\n+\t  && INTVAL (XEXP (op0, 1)) < HOST_BITS_PER_WIDE_INT\n+\t  && XEXP (op0, 1) == XEXP (op1, 1))\n \t{\n \t  enum machine_mode mode = GET_MODE (op0);\n \t  unsigned HOST_WIDE_INT mask = GET_MODE_MASK (mode);"}]}