{"sha": "e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "node_id": "C_kwDOANBUbNoAKGUwMTUzMGVjMWUzM2Y3ZGY5YzJhY2QwNDg5ZDZkMWY3NjZjYjE5MjE", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-02-13T00:09:39Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-02-21T09:05:50Z"}, "message": "c: [PR104506] Fix ICE after error due to change of type to error_mark_node\n\nThe problem here is we end up with an error_mark_node when calling\nuseless_type_conversion_p and that ICEs. STRIP_NOPS/tree_nop_conversion\nhas had a check for the inner type being an error_mark_node since g9a6bb3f78c96\n(2000). This just adds the check also to tree_ssa_useless_type_conversion.\nSTRIP_USELESS_TYPE_CONVERSION is mostly used inside the gimplifier\nand the places where it is used outside of the gimplifier would not\nbe adding too much overhead.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\nThanks,\nAndrew Pinski\n\n\tPR c/104506\n\ngcc/ChangeLog:\n\n\t* tree-ssa.cc (tree_ssa_useless_type_conversion):\n\tCheck the inner type before calling useless_type_conversion_p.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr104506-1.c: New test.\n\t* gcc.dg/pr104506-2.c: New test.\n\t* gcc.dg/pr104506-3.c: New test.", "tree": {"sha": "cbbef6e7711559b184bee3974a42b4361357f383", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbbef6e7711559b184bee3974a42b4361357f383"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42f1e7734412c64e45a0fb0e519d40e144d6f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42f1e7734412c64e45a0fb0e519d40e144d6f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42f1e7734412c64e45a0fb0e519d40e144d6f9d"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "5eb71911b71660f9473908fff9ccae6236da3836", "filename": "gcc/testsuite/gcc.dg/pr104506-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-1.c?ref=e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11\" } */\n+/* PR c/104506: we used to ICE after the error of\n+   changing the type.  */\n+\n+void\n+foo (double x)\n+/* { dg-message \"note: previous definition\" \"previous definition\" { target *-*-* } .-1 } */\n+{\n+  (void)x;\n+  int x; /* { dg-error \"redeclared as different kind of symbol\" } */\n+}"}, {"sha": "3c3aaaac4f830ae72945489fce55551b64d74eda", "filename": "gcc/testsuite/gcc.dg/pr104506-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-2.c?ref=e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu11\" } */\n+/* PR c/104506: we used to ICE after the error of\n+   changing the type.  */\n+void\n+foo (double x)\n+/* { dg-message \"note: previous definition\" \"previous definition\" { target *-*-* } .-1 } */\n+{\n+  x;\n+  int x; /* { dg-error \"redeclared as different kind of symbol\" } */\n+}"}, {"sha": "b14deb5cf25f195af3004a1168006d31569bda9a", "filename": "gcc/testsuite/gcc.dg/pr104506-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr104506-3.c?ref=e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* PR c/104506: we used to ICE after the error of\n+   changing the type.  */\n+double x;\n+/* { dg-message \"note: previous declaration\" \"previous declaration\" { target *-*-* } .-1 } */\n+void\n+foo (void)\n+{\n+  x;\n+}\n+int x; /* { dg-error \"conflicting types\" } */"}, {"sha": "423dd871d9e5ee9fbe711766f4a8de4076122b4d", "filename": "gcc/tree-ssa.cc", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftree-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e01530ec1e33f7df9c2acd0489d6d1f766cb1921/gcc%2Ftree-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.cc?ref=e01530ec1e33f7df9c2acd0489d6d1f766cb1921", "patch": "@@ -1256,18 +1256,24 @@ delete_tree_ssa (struct function *fn)\n bool\n tree_ssa_useless_type_conversion (tree expr)\n {\n+  tree outer_type, inner_type;\n+\n   /* If we have an assignment that merely uses a NOP_EXPR to change\n      the top of the RHS to the type of the LHS and the type conversion\n      is \"safe\", then strip away the type conversion so that we can\n      enter LHS = RHS into the const_and_copies table.  */\n-  if (CONVERT_EXPR_P (expr)\n-      || TREE_CODE (expr) == VIEW_CONVERT_EXPR\n-      || TREE_CODE (expr) == NON_LVALUE_EXPR)\n-    return useless_type_conversion_p\n-      (TREE_TYPE (expr),\n-       TREE_TYPE (TREE_OPERAND (expr, 0)));\n+  if (!CONVERT_EXPR_P (expr)\n+      && TREE_CODE (expr) != VIEW_CONVERT_EXPR\n+      && TREE_CODE (expr) != NON_LVALUE_EXPR)\n+    return false;\n \n-  return false;\n+  outer_type = TREE_TYPE (expr);\n+  inner_type = TREE_TYPE (TREE_OPERAND (expr, 0));\n+\n+  if (inner_type == error_mark_node)\n+    return false;\n+\n+  return useless_type_conversion_p (outer_type, inner_type);\n }\n \n /* Strip conversions from EXP according to"}]}