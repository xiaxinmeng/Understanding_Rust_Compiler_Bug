{"sha": "455c08cb645ee4c1e64faa02e1d5e137bd66619a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU1YzA4Y2I2NDVlZTRjMWU2NGZhYTAyZTFkNWUxMzdiZDY2NjE5YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-08-07T19:01:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-07T19:01:09Z"}, "message": "re PR middle-end/21894 (Invalid operand to binary operator with nested function)\n\n        PR 21894\n        * tree-nested.c (convert_local_reference): Save and restore val_only\n        around component_ref and friends.  Clear walk_subtrees by default.\n\nFrom-SVN: r102832", "tree": {"sha": "63297c2ddb66e06eb687d562d3b0737c555b8572", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63297c2ddb66e06eb687d562d3b0737c555b8572"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/455c08cb645ee4c1e64faa02e1d5e137bd66619a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455c08cb645ee4c1e64faa02e1d5e137bd66619a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/455c08cb645ee4c1e64faa02e1d5e137bd66619a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/455c08cb645ee4c1e64faa02e1d5e137bd66619a/comments", "author": null, "committer": null, "parents": [{"sha": "febfc59a9523bc59d2cf4112bb394f2ee1da83ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febfc59a9523bc59d2cf4112bb394f2ee1da83ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febfc59a9523bc59d2cf4112bb394f2ee1da83ea"}], "stats": {"total": 73, "additions": 48, "deletions": 25}, "files": [{"sha": "f4e7a4f3f0cac16c12200b7166887bdaa931123e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=455c08cb645ee4c1e64faa02e1d5e137bd66619a", "patch": "@@ -1,3 +1,9 @@\n+2005-08-06  Richard Henderson  <rth@redhat.com>\n+\n+\tPR 21894\n+\t* tree-nested.c (convert_local_reference): Save and restore val_only\n+\taround component_ref and friends.  Clear walk_subtrees by default.\n+\n 2005-08-06  Peter O'Gorman  <peter@pogma.com>\n \n \tPR 21366"}, {"sha": "6e61b323b6ff05546c8a39c03e296c19cbdc3a86", "filename": "gcc/testsuite/gcc.c-torture/compile/nested-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fnested-2.c?ref=455c08cb645ee4c1e64faa02e1d5e137bd66619a", "patch": "@@ -0,0 +1,16 @@\n+/* PR 21105 */\n+\n+void\n+CheckFile ()\n+{\n+  char tagname[10];\n+  char *a = tagname;\n+\n+  int validate ()\n+  {\n+    return (a == tagname + 4);\n+  }\n+\n+  if (a == tagname)\n+    validate ();\n+}"}, {"sha": "45c9bfee2e004b56317f344f4496a4fd5f3854dd", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/455c08cb645ee4c1e64faa02e1d5e137bd66619a/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=455c08cb645ee4c1e64faa02e1d5e137bd66619a", "patch": "@@ -950,7 +950,9 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n   struct walk_stmt_info *wi = data;\n   struct nesting_info *info = wi->info;\n   tree t = *tp, field, x;\n+  bool save_val_only;\n \n+  *walk_subtrees = 0;\n   switch (TREE_CODE (t))\n     {\n     case VAR_DECL:\n@@ -989,34 +991,31 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n       break;\n \n     case ADDR_EXPR:\n-      {\n-\tbool save_val_only = wi->val_only;\n-\n-\twi->val_only = false;\n-\twi->is_lhs = false;\n-\twi->changed = false;\n-\twalk_tree (&TREE_OPERAND (t, 0), convert_local_reference, wi, NULL);\n-\twi->val_only = save_val_only;\n+      save_val_only = wi->val_only;\n+      wi->val_only = false;\n+      wi->is_lhs = false;\n+      wi->changed = false;\n+      walk_tree (&TREE_OPERAND (t, 0), convert_local_reference, wi, NULL);\n+      wi->val_only = save_val_only;\n \n-\t/* If we converted anything ... */\n-\tif (wi->changed)\n-\t  {\n-\t    tree save_context;\n+      /* If we converted anything ... */\n+      if (wi->changed)\n+\t{\n+\t  tree save_context;\n \n-\t    /* Then the frame decl is now addressable.  */\n-\t    TREE_ADDRESSABLE (info->frame_decl) = 1;\n+\t  /* Then the frame decl is now addressable.  */\n+\t  TREE_ADDRESSABLE (info->frame_decl) = 1;\n \t    \n-\t    save_context = current_function_decl;\n-\t    current_function_decl = info->context;\n-\t    recompute_tree_invarant_for_addr_expr (t);\n-\t    current_function_decl = save_context;\n-\n-\t    /* If we are in a context where we only accept values, then\n-\t       compute the address into a temporary.  */\n-\t    if (save_val_only)\n-\t      *tp = tsi_gimplify_val (wi->info, t, &wi->tsi);\n-\t  }\n-      }\n+\t  save_context = current_function_decl;\n+\t  current_function_decl = info->context;\n+\t  recompute_tree_invarant_for_addr_expr (t);\n+\t  current_function_decl = save_context;\n+\n+\t  /* If we are in a context where we only accept values, then\n+\t     compute the address into a temporary.  */\n+\t  if (save_val_only)\n+\t    *tp = tsi_gimplify_val (wi->info, t, &wi->tsi);\n+\t}\n       break;\n \n     case REALPART_EXPR:\n@@ -1028,6 +1027,7 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n       /* Go down this entire nest and just look at the final prefix and\n \t anything that describes the references.  Otherwise, we lose track\n \t of whether a NOP_EXPR or VIEW_CONVERT_EXPR needs a simple value.  */\n+      save_val_only = wi->val_only;\n       wi->val_only = true;\n       wi->is_lhs = false;\n       for (; handled_component_p (t); tp = &TREE_OPERAND (t, 0), t = *tp)\n@@ -1055,6 +1055,7 @@ convert_local_reference (tree *tp, int *walk_subtrees, void *data)\n \t}\n       wi->val_only = false;\n       walk_tree (tp, convert_local_reference, wi, NULL);\n+      wi->val_only = save_val_only;\n       break;\n \n     default:"}]}