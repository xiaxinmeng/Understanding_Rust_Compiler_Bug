{"sha": "a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlNGFiYWMyNmI4MTVmZTBiMGQ0MjE5MzBiZmRmZDI5MDFhZGZlMw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-14T10:19:54Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-14T12:43:38Z"}, "message": "d: Remove setting of target-specific global.params flags from front-end\n\nNow that all dependencies on these flags have been removed, there's no\nneed to test and set them.\n\ngcc/d/ChangeLog:\n\n\t* d-builtins.cc (d_add_builtin_version): Remove all setting of\n\ttarget-specific global.params.\n\t* typeinfo.cc (create_typeinfo): Don't add argType fields to\n\tTypeInfo_Struct.", "tree": {"sha": "c72316568a3ddbdf54cd09df14b10dad5534a317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72316568a3ddbdf54cd09df14b10dad5534a317"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e4abac26b815fe0b0d421930bfdfd2901adfe3/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b63eb17d863ac080cf3c7df08233054b09d3747", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b63eb17d863ac080cf3c7df08233054b09d3747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b63eb17d863ac080cf3c7df08233054b09d3747"}], "stats": {"total": 24, "additions": 1, "deletions": 23}, "files": [{"sha": "400bce0a14163be31b2eeefb22d65494892462f2", "filename": "gcc/d/d-builtins.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e4abac26b815fe0b0d421930bfdfd2901adfe3/gcc%2Fd%2Fd-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e4abac26b815fe0b0d421930bfdfd2901adfe3/gcc%2Fd%2Fd-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-builtins.cc?ref=a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "patch": "@@ -418,25 +418,6 @@ d_eval_constant_expression (const Loc &loc, tree cst)\n void\n d_add_builtin_version (const char* ident)\n {\n-  /* For now, we need to tell the D frontend what platform is being targeted.\n-     This should be removed once the frontend has been fixed.  */\n-  if (strcmp (ident, \"linux\") == 0)\n-    global.params.isLinux = true;\n-  else if (strcmp (ident, \"OSX\") == 0)\n-    global.params.isOSX = true;\n-  else if (strcmp (ident, \"Windows\") == 0)\n-    global.params.isWindows = true;\n-  else if (strcmp (ident, \"FreeBSD\") == 0)\n-    global.params.isFreeBSD = true;\n-  else if (strcmp (ident, \"OpenBSD\") == 0)\n-    global.params.isOpenBSD = true;\n-  else if (strcmp (ident, \"Solaris\") == 0)\n-    global.params.isSolaris = true;\n-  /* The is64bit field only refers to x86_64 target.  */\n-  else if (strcmp (ident, \"X86_64\") == 0)\n-    global.params.is64bit = true;\n-  /* No other fields are required to be set for the frontend.  */\n-\n   VersionCondition::addPredefinedGlobalIdent (ident);\n }\n "}, {"sha": "503480b491d9ac81d8cea080dc7ae87711d8cc0f", "filename": "gcc/d/typeinfo.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e4abac26b815fe0b0d421930bfdfd2901adfe3/gcc%2Fd%2Ftypeinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e4abac26b815fe0b0d421930bfdfd2901adfe3/gcc%2Fd%2Ftypeinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypeinfo.cc?ref=a5e4abac26b815fe0b0d421930bfdfd2901adfe3", "patch": "@@ -1562,17 +1562,14 @@ create_typeinfo (Type *type, Module *mod)\n \tcase TK_STRUCT_TYPE:\n \t  if (!tinfo_types[tk])\n \t    {\n-\t      /* Some ABIs add extra TypeInfo fields on the end.  */\n-\t      tree argtype = global.params.is64bit ? ptr_type_node : NULL_TREE;\n-\n \t      ident = Identifier::idPool (\"TypeInfo_Struct\");\n \t      make_internal_typeinfo (tk, ident,\n \t\t\t\t      array_type_node, array_type_node,\n \t\t\t\t      ptr_type_node, ptr_type_node,\n \t\t\t\t      ptr_type_node, ptr_type_node,\n \t\t\t\t      d_uint_type, ptr_type_node,\n \t\t\t\t      ptr_type_node, d_uint_type,\n-\t\t\t\t      ptr_type_node, argtype, argtype, NULL);\n+\t\t\t\t      ptr_type_node, NULL);\n \t    }\n \t  t->vtinfo = TypeInfoStructDeclaration::create (t);\n \t  break;"}]}