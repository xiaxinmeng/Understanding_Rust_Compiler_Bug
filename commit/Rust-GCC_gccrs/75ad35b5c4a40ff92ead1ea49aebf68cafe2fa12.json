{"sha": "75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhZDM1YjVjNGE0MGZmOTJlYWQxZWE0OWFlYmY2OGNhZmUyZmExMg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-11-30T20:52:27Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-11-30T20:52:27Z"}, "message": "re PR libgcc/83112 (Silence warnings from PowerPC libgcc float128-ifunc.c compilation)\n\n2017-11-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR libgcc/83112\n\t* config/rs6000/float128-ifunc.c (__addkf3_resolve): Use the\n\tcorrect type for all ifunc resolvers to silence -Wattribute-alias\n\twarnings.  Eliminate the forward declaration of the resolver\n\tfunctions which is no longer needed.\n\t(__subkf3_resolve): Likewise.\n\t(__mulkf3_resolve): Likewise.\n\t(__divkf3_resolve): Likewise.\n\t(__negkf2_resolve): Likewise.\n\t(__eqkf2_resolve): Likewise.\n\t(__nekf2_resolve): Likewise.\n\t(__gekf2_resolve): Likewise.\n\t(__gtkf2_resolve): Likewise.\n\t(__lekf2_resolve): Likewise.\n\t(__ltkf2_resolve): Likewise.\n\t(__unordkf2_resolve): Likewise.\n\t(__extendsfkf2_resolve): Likewise.\n\t(__extenddfkf2_resolve): Likewise.\n\t(__trunckfsf2_resolve): Likewise.\n\t(__trunckfdf2_resolve): Likewise.\n\t(__fixkfsi_resolve): Likewise.\n\t(__fixkfdi_resolve): Likewise.\n\t(__fixunskfsi_resolve): Likewise.\n\t(__fixunskfdi_resolve): Likewise.\n\t(__floatsikf_resolve): Likewise.\n\t(__floatdikf_resolve): Likewise.\n\t(__floatunsikf_resolve): Likewise.\n\t(__floatundikf_resolve): Likewise.\n\t(__extendkftf2_resolve): Likewise.\n\t(__trunctfkf2_resolve): Likewise.\n\n\tPR libgcc/83103\n\t* config/rs6000/quad-float128.h (TF): Don't define if long double\n\tis IEEE 128-bit floating point.\n\t(TCtype): Define as either TCmode or KCmode, depending on whether\n\tlong double is IEEE 128-bit floating point.\n\t(__mulkc3_sw): Add declarations for software/hardware versions of\n\tcomplex multiply/divide.\n\t(__divkc3_sw): Likewise.\n\t(__mulkc3_hw): Likewise.\n\t(__divkc3_hw): Likewise.\n\t* config/rs6000/_mulkc3.c (_mulkc3): If we are building ifunc\n\thandlers to switch between using software emulation and hardware\n\tfloat128 instructions, build the complex multiply/divide functions\n\tfor both software and hardware support.\n\t* config/rs6000/_divkc3.c (_divkc3): Likewise.\n\t* config/rs6000/float128-ifunc.c (__mulkc3_resolve): Likewise.\n\t(__divkc3_resolve): Likewise.\n\t(__mulkc3): Likewise.\n\t(__divkc3): Likewise.\n\t* config/rs6000/t-float128-hw (fp128_hardfp_src): Likewise.\n\t(fp128_hw_src): Likewise.\n\t(fp128_hw_static_obj): Likewise.\n\t(fp128_hw_shared_obj): Likewise.\n\t(_mulkc3-hw.c): Create _mulkc3-hw.c and _divkc3-hw.c from\n\t_mulkc3.c and _divkc3.c, changing the function name.\n\t(_divkc3-hw.c): Likewise.\n\t* config/rs6000/t-float128 (clean-float128): Delete _mulkc3-hw.c\n\tand _divkc3-hw.c.\n\nFrom-SVN: r255282", "tree": {"sha": "b277160d7e0659864c2d1be168ce1c559f1fbded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b277160d7e0659864c2d1be168ce1c559f1fbded"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/comments", "author": null, "committer": null, "parents": [{"sha": "fb0e72c8c06acbc30759e707d807c35758c6961c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0e72c8c06acbc30759e707d807c35758c6961c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0e72c8c06acbc30759e707d807c35758c6961c"}], "stats": {"total": 250, "additions": 166, "deletions": 84}, "files": [{"sha": "e103ace8fcf545db742f86fd08ae44a193d40353", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -1,3 +1,65 @@\n+2017-11-30  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR libgcc/83112\n+\t* config/rs6000/float128-ifunc.c (__addkf3_resolve): Use the\n+\tcorrect type for all ifunc resolvers to silence -Wattribute-alias\n+\twarnings.  Eliminate the forward declaration of the resolver\n+\tfunctions which is no longer needed.\n+\t(__subkf3_resolve): Likewise.\n+\t(__mulkf3_resolve): Likewise.\n+\t(__divkf3_resolve): Likewise.\n+\t(__negkf2_resolve): Likewise.\n+\t(__eqkf2_resolve): Likewise.\n+\t(__nekf2_resolve): Likewise.\n+\t(__gekf2_resolve): Likewise.\n+\t(__gtkf2_resolve): Likewise.\n+\t(__lekf2_resolve): Likewise.\n+\t(__ltkf2_resolve): Likewise.\n+\t(__unordkf2_resolve): Likewise.\n+\t(__extendsfkf2_resolve): Likewise.\n+\t(__extenddfkf2_resolve): Likewise.\n+\t(__trunckfsf2_resolve): Likewise.\n+\t(__trunckfdf2_resolve): Likewise.\n+\t(__fixkfsi_resolve): Likewise.\n+\t(__fixkfdi_resolve): Likewise.\n+\t(__fixunskfsi_resolve): Likewise.\n+\t(__fixunskfdi_resolve): Likewise.\n+\t(__floatsikf_resolve): Likewise.\n+\t(__floatdikf_resolve): Likewise.\n+\t(__floatunsikf_resolve): Likewise.\n+\t(__floatundikf_resolve): Likewise.\n+\t(__extendkftf2_resolve): Likewise.\n+\t(__trunctfkf2_resolve): Likewise.\n+\n+\tPR libgcc/83103\n+\t* config/rs6000/quad-float128.h (TF): Don't define if long double\n+\tis IEEE 128-bit floating point.\n+\t(TCtype): Define as either TCmode or KCmode, depending on whether\n+\tlong double is IEEE 128-bit floating point.\n+\t(__mulkc3_sw): Add declarations for software/hardware versions of\n+\tcomplex multiply/divide.\n+\t(__divkc3_sw): Likewise.\n+\t(__mulkc3_hw): Likewise.\n+\t(__divkc3_hw): Likewise.\n+\t* config/rs6000/_mulkc3.c (_mulkc3): If we are building ifunc\n+\thandlers to switch between using software emulation and hardware\n+\tfloat128 instructions, build the complex multiply/divide functions\n+\tfor both software and hardware support.\n+\t* config/rs6000/_divkc3.c (_divkc3): Likewise.\n+\t* config/rs6000/float128-ifunc.c (__mulkc3_resolve): Likewise.\n+\t(__divkc3_resolve): Likewise.\n+\t(__mulkc3): Likewise.\n+\t(__divkc3): Likewise.\n+\t* config/rs6000/t-float128-hw (fp128_hardfp_src): Likewise.\n+\t(fp128_hw_src): Likewise.\n+\t(fp128_hw_static_obj): Likewise.\n+\t(fp128_hw_shared_obj): Likewise.\n+\t(_mulkc3-hw.c): Create _mulkc3-hw.c and _divkc3-hw.c from\n+\t_mulkc3.c and _divkc3.c, changing the function name.\n+\t(_divkc3-hw.c): Likewise.\n+\t* config/rs6000/t-float128 (clean-float128): Delete _mulkc3-hw.c\n+\tand _divkc3-hw.c.\n+\n 2017-11-26  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/cpuinfo.c (get_intel_cpu): Handle cannonlake."}, {"sha": "5c477f4d0b886857d457ece752ce56454e0330fa", "filename": "libgcc/config/rs6000/_divkc3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2F_divkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_divkc3.c?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -33,6 +33,10 @@ typedef __complex float KCtype __attribute__ ((mode (KC)));\n #define isinf __builtin_isinf\n #define isfinite __builtin_isfinite\n \n+#if defined(FLOAT128_HW_INSNS) && !defined(__divkc3)\n+#define __divkc3 __divkc3_sw\n+#endif\n+\n KCtype\n __divkc3 (KFtype a, KFtype b, KFtype c, KFtype d)\n {"}, {"sha": "a88fae216613cd5243b4a6ce47f844783ac402ff", "filename": "libgcc/config/rs6000/_mulkc3.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2F_mulkc3.c?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -31,6 +31,10 @@ typedef __complex float KCtype __attribute__ ((mode (KC)));\n #define isnan __builtin_isnan\n #define isinf __builtin_isinf\n \n+#if defined(FLOAT128_HW_INSNS) && !defined(__mulkc3)\n+#define __mulkc3 __mulkc3_sw\n+#endif\n+\n KCtype\n __mulkc3 (KFtype a, KFtype b, KFtype c, KFtype d)\n {"}, {"sha": "651472f3ae874456dc15a826403c81c0429b33c2", "filename": "libgcc/config/rs6000/float128-ifunc.c", "status": "modified", "additions": 69, "deletions": 78, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ffloat128-ifunc.c?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -54,190 +54,175 @@\n    128-bit integer types and 128-bit IEEE floating point, or vice versa.  So\n    use the emulator functions for these conversions.  */\n \n-static void *__addkf3_resolve (void);\n-static void *__subkf3_resolve (void);\n-static void *__mulkf3_resolve (void);\n-static void *__divkf3_resolve (void);\n-static void *__negkf2_resolve (void);\n-static void *__eqkf2_resolve (void);\n-static void *__nekf2_resolve (void);\n-static void *__gekf2_resolve (void);\n-static void *__gtkf2_resolve (void);\n-static void *__lekf2_resolve (void);\n-static void *__ltkf2_resolve (void);\n-static void *__unordkf2_resolve (void);\n-static void *__extendsfkf2_resolve (void);\n-static void *__extenddfkf2_resolve (void);\n-static void *__trunckfsf2_resolve (void);\n-static void *__trunckfdf2_resolve (void);\n-static void *__fixkfsi_resolve (void);\n-static void *__fixkfdi_resolve (void);\n-static void *__fixunskfsi_resolve (void);\n-static void *__fixunskfdi_resolve (void);\n-static void *__floatsikf_resolve (void);\n-static void *__floatdikf_resolve (void);\n-static void *__floatunsikf_resolve (void);\n-static void *__floatundikf_resolve (void);\n-static void *__extendkftf2_resolve (void);\n-static void *__trunctfkf2_resolve (void);\n-\n-static void *\n+static __typeof__ (__addkf3_sw) *\n __addkf3_resolve (void)\n {\n-  return (void *) SW_OR_HW (__addkf3_sw, __addkf3_hw);\n+  return SW_OR_HW (__addkf3_sw, __addkf3_hw);\n }\n \n-static void *\n+static __typeof__ (__subkf3_sw) *\n __subkf3_resolve (void)\n {\n-  return (void *) SW_OR_HW (__subkf3_sw, __subkf3_hw);\n+  return SW_OR_HW (__subkf3_sw, __subkf3_hw);\n }\n \n-static void *\n+static __typeof__ (__mulkf3_sw) *\n __mulkf3_resolve (void)\n {\n-  return (void *) SW_OR_HW (__mulkf3_sw, __mulkf3_hw);\n+  return SW_OR_HW (__mulkf3_sw, __mulkf3_hw);\n }\n \n-static void *\n+static __typeof__ (__divkf3_sw) *\n __divkf3_resolve (void)\n {\n-  return (void *) SW_OR_HW (__divkf3_sw, __divkf3_hw);\n+  return SW_OR_HW (__divkf3_sw, __divkf3_hw);\n }\n \n-static void *\n+static __typeof__ (__negkf2_sw) *\n __negkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__negkf2_sw, __negkf2_hw);\n+  return SW_OR_HW (__negkf2_sw, __negkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__floatsikf_sw) *\n __floatsikf_resolve (void)\n {\n-  return (void *) SW_OR_HW (__floatsikf_sw, __floatsikf_hw);\n+  return SW_OR_HW (__floatsikf_sw, __floatsikf_hw);\n }\n \n-static void *\n+static __typeof__ (__floatdikf_sw) *\n __floatdikf_resolve (void)\n {\n-  return (void *) SW_OR_HW (__floatdikf_sw, __floatdikf_hw);\n+  return SW_OR_HW (__floatdikf_sw, __floatdikf_hw);\n }\n \n-static void *\n+static __typeof__ (__floatunsikf_sw) *\n __floatunsikf_resolve (void)\n {\n-  return (void *) SW_OR_HW (__floatunsikf_sw, __floatunsikf_hw);\n+  return SW_OR_HW (__floatunsikf_sw, __floatunsikf_hw);\n }\n \n-static void *\n+static __typeof__ (__floatundikf_sw) *\n __floatundikf_resolve (void)\n {\n-  return (void *) SW_OR_HW (__floatundikf_sw, __floatundikf_hw);\n+  return SW_OR_HW (__floatundikf_sw, __floatundikf_hw);\n }\n \n-static void *\n+static __typeof__ (__fixkfsi_sw) *\n __fixkfsi_resolve (void)\n {\n-  return (void *) SW_OR_HW (__fixkfsi_sw, __fixkfsi_hw);\n+  return SW_OR_HW (__fixkfsi_sw, __fixkfsi_hw);\n }\n \n-static void *\n+static __typeof__ (__fixkfdi_sw) *\n __fixkfdi_resolve (void)\n {\n-  return (void *) SW_OR_HW (__fixkfdi_sw, __fixkfdi_hw);\n+  return SW_OR_HW (__fixkfdi_sw, __fixkfdi_hw);\n }\n \n-static void *\n+static __typeof__ (__fixunskfsi_sw) *\n __fixunskfsi_resolve (void)\n {\n-  return (void *) SW_OR_HW (__fixunskfsi_sw, __fixunskfsi_hw);\n+  return SW_OR_HW (__fixunskfsi_sw, __fixunskfsi_hw);\n }\n \n-static void *\n+static __typeof__ (__fixunskfdi_sw) *\n __fixunskfdi_resolve (void)\n {\n-  return (void *) SW_OR_HW (__fixunskfdi_sw, __fixunskfdi_hw);\n+  return SW_OR_HW (__fixunskfdi_sw, __fixunskfdi_hw);\n }\n \n-static void *\n+static __typeof__ (__extendsfkf2_sw) *\n __extendsfkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__extendsfkf2_sw, __extendsfkf2_hw);\n+  return SW_OR_HW (__extendsfkf2_sw, __extendsfkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__extenddfkf2_sw) *\n __extenddfkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__extenddfkf2_sw, __extenddfkf2_hw);\n+  return SW_OR_HW (__extenddfkf2_sw, __extenddfkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__trunckfsf2_sw) *\n __trunckfsf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__trunckfsf2_sw, __trunckfsf2_hw);\n+  return SW_OR_HW (__trunckfsf2_sw, __trunckfsf2_hw);\n }\n \n-static void *\n+static __typeof__ (__trunckfdf2_sw) *\n __trunckfdf2_resolve (void)\n {\n   return (void *) SW_OR_HW (__trunckfdf2_sw, __trunckfdf2_hw);\n }\n \n-static void *\n+static __typeof__ (__extendkftf2_sw) *\n __extendkftf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__extendkftf2_sw, __extendkftf2_hw);\n+  return SW_OR_HW (__extendkftf2_sw, __extendkftf2_hw);\n }\n \n-static void *\n+static __typeof__ (__trunctfkf2_sw) *\n __trunctfkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__trunctfkf2_sw, __trunctfkf2_hw);\n+  return SW_OR_HW (__trunctfkf2_sw, __trunctfkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__mulkc3_sw) *\n+__mulkc3_resolve (void)\n+{\n+  return SW_OR_HW (__mulkc3_sw, __mulkc3_hw);\n+}\n+\n+static __typeof__ (__divkc3_sw) *\n+__divkc3_resolve (void)\n+{\n+  return SW_OR_HW (__divkc3_sw, __divkc3_hw);\n+}\n+\n+static __typeof__ (__eqkf2_sw) *\n __eqkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__eqkf2_sw, __eqkf2_hw);\n+  return SW_OR_HW (__eqkf2_sw, __eqkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__gekf2_sw) *\n __gekf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__gekf2_sw, __gekf2_hw);\n+  return SW_OR_HW (__gekf2_sw, __gekf2_hw);\n }\n \n-static void *\n+static __typeof__ (__lekf2_sw) *\n __lekf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__lekf2_sw, __lekf2_hw);\n+  return SW_OR_HW (__lekf2_sw, __lekf2_hw);\n }\n \n-static void *\n+static __typeof__ (__unordkf2_sw) *\n __unordkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__unordkf2_sw, __unordkf2_hw);\n+  return SW_OR_HW (__unordkf2_sw, __unordkf2_hw);\n }\n \n /* Resolve __nekf2, __gtkf2, __ltkf2 like __eqkf2, __gekf2, and __lekf2, since\n    the functions return the same values.  */\n \n-static void *\n+static __typeof__ (__eqkf2_sw) *\n __nekf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__eqkf2_sw, __eqkf2_hw);\n+  return SW_OR_HW (__eqkf2_sw, __eqkf2_hw);\n }\n \n-static void *\n+static __typeof__ (__eqkf2_sw) *\n __gtkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__gekf2_sw, __gekf2_hw);\n+  return SW_OR_HW (__gekf2_sw, __gekf2_hw);\n }\n \n-static void *\n+static __typeof__ (__eqkf2_sw) *\n __ltkf2_resolve (void)\n {\n-  return (void *) SW_OR_HW (__lekf2_sw, __lekf2_hw);\n+  return SW_OR_HW (__lekf2_sw, __lekf2_hw);\n }\n \n \n@@ -320,3 +305,9 @@ IBM128_TYPE __extendkftf2 (TFtype)\n \n TFtype __trunctfkf2 (IBM128_TYPE)\n   __attribute__ ((__ifunc__ (\"__trunctfkf2_resolve\")));\n+\n+TCtype __mulkc3 (TFtype, TFtype, TFtype, TFtype)\n+  __attribute__ ((__ifunc__ (\"__mulkc3_resolve\")));\n+\n+TCtype __divkc3 (TFtype, TFtype, TFtype, TFtype)\n+  __attribute__ ((__ifunc__ (\"__divkc3_resolve\")));"}, {"sha": "2516c6162faf5892890fad0ff62326e09eedf5d5", "filename": "libgcc/config/rs6000/quad-float128.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fquad-float128.h?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -30,13 +30,20 @@\n /* quad.h defines the TFtype type by:\n    typedef float TFtype __attribute__ ((mode (TF)));\n \n-   This define forces it to use KFmode (aka, ieee 128-bit floating point).  */\n+   This define forces it to use KFmode (aka, ieee 128-bit floating point).\n+   However, when the compiler's default is changed so that long double is IEEE\n+   128-bit floating point, we need to go back to using TFmode and TCmode.  */\n+#ifndef __LONG_DOUBLE_IEEE128__\n #define TF KF\n \n /* We also need TCtype to represent complex ieee 128-bit float for\n    __mulkc3 and __divkc3.  */\n typedef __complex float TCtype __attribute__ ((mode (KC)));\n \n+#else\n+typedef __complex float TCtype __attribute__ ((mode (TC)));\n+#endif\n+\n /* Force the use of the VSX instruction set.  */\n #if defined(_ARCH_PPC) && (!defined(__VSX__) || !defined(__FLOAT128__))\n #pragma GCC target (\"vsx,float128\")\n@@ -88,6 +95,8 @@ extern TFtype __floatunsikf_sw (USItype_ppc);\n extern TFtype __floatundikf_sw (UDItype_ppc);\n extern IBM128_TYPE __extendkftf2_sw (TFtype);\n extern TFtype __trunctfkf2_sw (IBM128_TYPE);\n+extern TCtype __mulkc3_sw (TFtype, TFtype, TFtype, TFtype);\n+extern TCtype __divkc3_sw (TFtype, TFtype, TFtype, TFtype);\n \n #ifdef _ARCH_PPC64\n /* We do not provide ifunc resolvers for __fixkfti, __fixunskfti, __floattikf,\n@@ -128,6 +137,8 @@ extern TFtype __floatunsikf_hw (USItype_ppc);\n extern TFtype __floatundikf_hw (UDItype_ppc);\n extern IBM128_TYPE __extendkftf2_hw (TFtype);\n extern TFtype __trunctfkf2_hw (IBM128_TYPE);\n+extern TCtype __mulkc3_hw (TFtype, TFtype, TFtype, TFtype);\n+extern TCtype __divkc3_hw (TFtype, TFtype, TFtype, TFtype);\n \n /* Ifunc function declarations, to automatically switch between software\n    emulation and hardware support.  */"}, {"sha": "41ad527c55bd9d80779aba08b7f44732ee65048e", "filename": "libgcc/config/rs6000/t-float128", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ft-float128", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ft-float128", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -86,7 +86,7 @@ test:\n \tfor x in $(fp128_obj); do echo \"    $$x\"; done;\n \n clean-float128:\n-\trm -rf $(fp128_softfp_src)\n+\t-rm -f $(fp128_softfp_src) $(fp128_hardfp_src)\n \t@$(MULTICLEAN) multi-clean DO=clean-float128\n \n # For now, only put it in the static library"}, {"sha": "7ab106932be35d9f5067e5ae679b9439465b54e8", "filename": "libgcc/config/rs6000/t-float128-hw", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ft-float128-hw?ref=75ad35b5c4a40ff92ead1ea49aebf68cafe2fa12", "patch": "@@ -5,10 +5,12 @@\n FLOAT128_HW_INSNS\t= -DFLOAT128_HW_INSNS\n \n # New functions for hardware support\n-fp128_hw_funcs\t\t= float128-hw\n-fp128_hw_src\t\t= $(srcdir)/config/rs6000/float128-hw.c\n-fp128_hw_static_obj\t= float128-hw$(objext)\n-fp128_hw_shared_obj\t= float128-hw_s$(objext)\n+fp128_hardfp_src\t= _mulkc3-hw.c _divkc3-hw.c\n+fp128_hw_funcs\t\t= float128-hw _mulkc3-hw _divkc3-hw\n+fp128_hw_src\t\t= $(srcdir)/config/rs6000/float128-hw.c _mulkc3-hw.c \\\n+\t\t\t  _divkc3-hw.c\n+fp128_hw_static_obj\t= $(addsuffix $(objext),$(fp128_hw_funcs))\n+fp128_hw_shared_obj\t= $(addsuffix _s$(objext),$(fp128_hw_funcs))\n fp128_hw_obj\t\t= $(fp128_hw_static_obj) $(fp128_hw_shared_obj)\n \n fp128_ifunc_funcs\t= float128-ifunc\n@@ -33,3 +35,11 @@ $(fp128_hw_obj)\t\t : $(srcdir)/config/rs6000/t-float128-hw\n \n $(fp128_ifunc_obj)\t : INTERNAL_CFLAGS += $(FP128_CFLAGS_SW)\n $(fp128_ifunc_obj)\t : $(srcdir)/config/rs6000/t-float128-hw\n+\n+_mulkc3-hw.c: $(srcdir)/config/rs6000/_mulkc3.c\n+\t(echo \"#define __mulkc3 __mulkc3_hw\"; \\\n+\t cat $(srcdir)/config/rs6000/_mulkc3.c) > _mulkc3-hw.c\n+\n+_divkc3-hw.c: $(srcdir)/config/rs6000/_divkc3.c\n+\t(echo \"#define __divkc3 __divkc3_hw\"; \\\n+\t cat $(srcdir)/config/rs6000/_divkc3.c) > _divkc3-hw.c"}]}