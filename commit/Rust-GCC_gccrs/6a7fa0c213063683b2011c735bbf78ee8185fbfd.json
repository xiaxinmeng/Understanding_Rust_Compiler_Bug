{"sha": "6a7fa0c213063683b2011c735bbf78ee8185fbfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3ZmEwYzIxMzA2MzY4M2IyMDExYzczNWJiZjc4ZWU4MTg1ZmJmZA==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2018-08-06T09:38:29Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2018-08-06T09:38:29Z"}, "message": "Add func to check if register is clobbered by clobber_high\n\ngcc/\n\t* rtl.h (reg_is_clobbered_by_clobber_high): Add declarations.\n\t* rtlanal.c (reg_is_clobbered_by_clobber_high): Add function.\n\nFrom-SVN: r263328", "tree": {"sha": "7e88dabc4b2041dc9eeedc5bafb3835656b42851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e88dabc4b2041dc9eeedc5bafb3835656b42851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a7fa0c213063683b2011c735bbf78ee8185fbfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7fa0c213063683b2011c735bbf78ee8185fbfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7fa0c213063683b2011c735bbf78ee8185fbfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7fa0c213063683b2011c735bbf78ee8185fbfd/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "14196e023fa2a07f86e864a9492e7cf3950d5ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14196e023fa2a07f86e864a9492e7cf3950d5ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14196e023fa2a07f86e864a9492e7cf3950d5ce9"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "36f604d76fcae4bb0fc106107fb72e6d731c8bc4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a7fa0c213063683b2011c735bbf78ee8185fbfd", "patch": "@@ -1,3 +1,8 @@\n+2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* rtl.h (reg_is_clobbered_by_clobber_high): Add declarations.\n+\t* rtlanal.c (reg_is_clobbered_by_clobber_high): Add function.\n+\n 2018-08-06  Alan Hayward  <alan.hayward@arm.com>\n \n \t* emit-rtl.c (verify_rtx_sharing): Check for CLOBBER_HIGH."}, {"sha": "d549b0aad0b13de42cb2fd148c002625b90d8c3c", "filename": "gcc/rtl.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6a7fa0c213063683b2011c735bbf78ee8185fbfd", "patch": "@@ -3467,6 +3467,16 @@ extern bool tablejump_p (const rtx_insn *, rtx_insn **, rtx_jump_table_data **);\n extern int computed_jump_p (const rtx_insn *);\n extern bool tls_referenced_p (const_rtx);\n extern bool contains_mem_rtx_p (rtx x);\n+extern bool reg_is_clobbered_by_clobber_high (unsigned int, machine_mode,\n+\t\t\t\t\t      const_rtx);\n+\n+/* Convenient wrapper for reg_is_clobbered_by_clobber_high.  */\n+inline bool\n+reg_is_clobbered_by_clobber_high (const_rtx x, const_rtx clobber_high_op)\n+{\n+  return reg_is_clobbered_by_clobber_high (REGNO (x), GET_MODE (x),\n+\t\t\t\t\t   clobber_high_op);\n+}\n \n /* Overload for refers_to_regno_p for checking a single register.  */\n inline bool"}, {"sha": "1cab1545744c265f457524860955aaac940efb3d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7fa0c213063683b2011c735bbf78ee8185fbfd/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=6a7fa0c213063683b2011c735bbf78ee8185fbfd", "patch": "@@ -6551,3 +6551,32 @@ tls_referenced_p (const_rtx x)\n       return true;\n   return false;\n }\n+\n+/* Return true if reg REGNO with mode REG_MODE would be clobbered by the\n+   clobber_high operand in CLOBBER_HIGH_OP.  */\n+\n+bool\n+reg_is_clobbered_by_clobber_high (unsigned int regno, machine_mode reg_mode,\n+\t\t\t\t  const_rtx clobber_high_op)\n+{\n+  unsigned int clobber_regno = REGNO (clobber_high_op);\n+  machine_mode clobber_mode = GET_MODE (clobber_high_op);\n+  unsigned char regno_nregs = hard_regno_nregs (regno, reg_mode);\n+\n+  /* Clobber high should always span exactly one register.  */\n+  gcc_assert (REG_NREGS (clobber_high_op) == 1);\n+\n+  /* Clobber high needs to match with one of the registers in X.  */\n+  if (clobber_regno < regno || clobber_regno >= regno + regno_nregs)\n+    return false;\n+\n+  gcc_assert (reg_mode != BLKmode && clobber_mode != BLKmode);\n+\n+  if (reg_mode == VOIDmode)\n+    return clobber_mode != VOIDmode;\n+\n+  /* Clobber high will clobber if its size might be greater than the size of\n+     register regno.  */\n+  return maybe_gt (exact_div (GET_MODE_SIZE (reg_mode), regno_nregs),\n+\t\t GET_MODE_SIZE (clobber_mode));\n+}"}]}