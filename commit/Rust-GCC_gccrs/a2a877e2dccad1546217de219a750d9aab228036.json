{"sha": "a2a877e2dccad1546217de219a750d9aab228036", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJhODc3ZTJkY2NhZDE1NDYyMTdkZTIxOWE3NTBkOWFhYjIyODAzNg==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-10-17T17:16:27Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-10-17T17:16:27Z"}, "message": "c-typeck.c (default_function_array_conversion): Always create &a[0] for array types.\n\n2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * c-typeck.c (default_function_array_conversion): Always create\n        &a[0] for array types.\n        (build_unary_op): Do not fold &a[x] into a + x.\n\nFrom-SVN: r89173", "tree": {"sha": "47983b969b359dc5bcf2833cd081e8cc52562e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47983b969b359dc5bcf2833cd081e8cc52562e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2a877e2dccad1546217de219a750d9aab228036", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a877e2dccad1546217de219a750d9aab228036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a877e2dccad1546217de219a750d9aab228036", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a877e2dccad1546217de219a750d9aab228036/comments", "author": null, "committer": null, "parents": [{"sha": "974ede64c7e132be9878cce6f9e269feb319e7f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974ede64c7e132be9878cce6f9e269feb319e7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974ede64c7e132be9878cce6f9e269feb319e7f8"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "1b9cf8b0846f9bc3f39466ec3ebbc08aaec8966b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a877e2dccad1546217de219a750d9aab228036/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a877e2dccad1546217de219a750d9aab228036/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2a877e2dccad1546217de219a750d9aab228036", "patch": "@@ -1,3 +1,9 @@\n+2004-10-17  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* c-typeck.c (default_function_array_conversion): Always create\n+\t&a[0] for array types.\n+\t(build_unary_op): Do not fold &a[x] into a + x.\n+\n 2004-10-17  Jakub Jelinek  <jakub@redhat.com>\n \n \t* pointer-set.c (hash1): Use integer part of 2^64 / phi"}, {"sha": "87f585baddb13fa7aaf6f23b13aad889a9b9be8e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2a877e2dccad1546217de219a750d9aab228036/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2a877e2dccad1546217de219a750d9aab228036/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=a2a877e2dccad1546217de219a750d9aab228036", "patch": "@@ -1263,21 +1263,9 @@ default_function_array_conversion (tree exp)\n \n       ptrtype = build_pointer_type (restype);\n \n-      if (TREE_CODE (exp) == VAR_DECL)\n-\t{\n-\t  /* We are making an ADDR_EXPR of ptrtype.  This is a valid\n-\t     ADDR_EXPR because it's the best way of representing what\n-\t     happens in C when we take the address of an array and place\n-\t     it in a pointer to the element type.  */\n-\t  adr = build1 (ADDR_EXPR, ptrtype, exp);\n-\t  if (!c_mark_addressable (exp))\n-\t    return error_mark_node;\n-\t  TREE_SIDE_EFFECTS (adr) = 0;   /* Default would be, same as EXP.  */\n-\t  return adr;\n-\t}\n       /* This way is better for a COMPONENT_REF since it can\n \t simplify the offset for a component.  */\n-      adr = build_unary_op (ADDR_EXPR, exp, 1);\n+      adr = build_unary_op (ADDR_EXPR, build_array_ref (exp, integer_zero_node), 1);\n       return convert (ptrtype, adr);\n     }\n   return exp;\n@@ -2631,13 +2619,12 @@ build_unary_op (enum tree_code code, tree xarg, int flag)\n \t  return TREE_OPERAND (arg, 0);\n \t}\n \n-      /* For &x[y], return x+y */\n+      /* For &x[y], just return &x[y] */\n       if (TREE_CODE (arg) == ARRAY_REF)\n \t{\n \t  if (!c_mark_addressable (TREE_OPERAND (arg, 0)))\n \t    return error_mark_node;\n-\t  return build_binary_op (PLUS_EXPR, TREE_OPERAND (arg, 0),\n-\t\t\t\t  TREE_OPERAND (arg, 1), 1);\n+          return build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (arg)), arg);\n \t}\n \n       /* Anything not already handled and not a true memory reference"}]}