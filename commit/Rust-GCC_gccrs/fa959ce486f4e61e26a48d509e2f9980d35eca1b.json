{"sha": "fa959ce486f4e61e26a48d509e2f9980d35eca1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE5NTljZTQ4NmY0ZTYxZTI2YTQ4ZDUwOWUyZjk5ODBkMzVlY2ExYg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2006-05-09T15:40:12Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2006-05-09T15:40:12Z"}, "message": "config.host (<i[34567]86-*-*, [...]): Set host_extra_gcc_objs and host_xmake_file.\n\n\t* config.host (<i[34567]86-*-*, x86_64-*-*>): Set\n\thost_extra_gcc_objs and host_xmake_file.\n\t(<*-*-linux*>): Don't overwrite host_xmake_file.\n\t* gcc.c (static_spec_functions): Add EXTRA_SPEC_FUNCTIONS.\n\t* config/i386/i386.h (EXTRA_SPEC_FUNCTIONS): Define.\n\t(host_detect_local_cpu): Declare.\n\t(CC1_CPU_SPEC): Add -march=native and -mtune=native cases.\n\t* config/i386/i386.c (override_options): Handle -mtune=native\n\tas -mtune=generic.\n\t* config/i386/x-i386: New file.\n\t* config/i386/driver-i386.c: New file.\n\t* doc/invoke.texi (<i386 and x86-64 Options>): Describe\n\tcpu-type \"native\".\n\nFrom-SVN: r113655", "tree": {"sha": "edfdcf7946b106c46521aab6bfcb76f775a8a190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edfdcf7946b106c46521aab6bfcb76f775a8a190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa959ce486f4e61e26a48d509e2f9980d35eca1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa959ce486f4e61e26a48d509e2f9980d35eca1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa959ce486f4e61e26a48d509e2f9980d35eca1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa959ce486f4e61e26a48d509e2f9980d35eca1b/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f9c3744b7f05d9e60ff8776111ad9049b55d863a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c3744b7f05d9e60ff8776111ad9049b55d863a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c3744b7f05d9e60ff8776111ad9049b55d863a"}], "stats": {"total": 240, "additions": 237, "deletions": 3}, "files": [{"sha": "802de2cec44c2d4573146d153ec5f52da518f23a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -1,3 +1,19 @@\n+2006-05-09  Michael Matz  <matz@suse.de>\n+\n+\t* config.host (<i[34567]86-*-*, x86_64-*-*>): Set\n+\thost_extra_gcc_objs and host_xmake_file.\n+\t(<*-*-linux*>): Don't overwrite host_xmake_file.\n+\t* gcc.c (static_spec_functions): Add EXTRA_SPEC_FUNCTIONS.\n+\t* config/i386/i386.h (EXTRA_SPEC_FUNCTIONS): Define.\n+\t(host_detect_local_cpu): Declare.\n+\t(CC1_CPU_SPEC): Add -march=native and -mtune=native cases.\n+\t* config/i386/i386.c (override_options): Handle -mtune=native\n+\tas -mtune=generic.\n+\t* config/i386/x-i386: New file.\n+\t* config/i386/driver-i386.c: New file.\n+\t* doc/invoke.texi (<i386 and x86-64 Options>): Describe\n+\tcpu-type \"native\".\n+\n 2006-05-09  Dirk Mueller  <dmueller@suse.de>\n \tRichard Guenther  <rguenther@suse.de>\n "}, {"sha": "b0925a2cab36cbbc6459b991800f341b0a85287b", "filename": "gcc/config.host", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -94,6 +94,17 @@ case ${target} in\n     ;;\n esac\n \n+case ${host} in\n+  i[34567]86-*-* \\\n+  | x86_64-*-* )\n+    # include the support for -march=native only when not cross compiling\n+    if test x${host} = x${target} ; then\n+      host_extra_gcc_objs=\"driver-i386.o\"\n+      host_xmake_file=\"${host_xmake_file} i386/x-i386\"\n+    fi\n+    ;;\n+esac\n+\n # Machine-specific settings.\n case ${host} in\n   alpha*-dec-*vms*)\n@@ -186,7 +197,7 @@ case ${host} in\n     ;;\n   *-*-linux*)\n     out_host_hook_obj=host-linux.o\n-    host_xmake_file=x-linux\n+    host_xmake_file=\"${host_xmake_file} x-linux\"\n     ;;\n   ia64-*-hpux*)\n     use_long_long_for_widest_fast_int=yes"}, {"sha": "f13abd11dc5e6decc1c808d5e47a3d512b527e6d", "filename": "gcc/config/i386/driver-i386.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -0,0 +1,174 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2006 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include <stdlib.h>\n+\n+#ifndef CROSS_COMPILE\n+/* This file shouldn't even be included in a cross compiler, but\n+   let's be sure.  */\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+\n+#ifdef GCC_VERSION\n+#define cpuid(num,a,b,c,d) \\\n+  asm volatile (\"xchgl %%ebx, %1; cpuid; xchgl %%ebx, %1\" \\\n+\t\t: \"=a\" (a), \"=r\" (b), \"=c\" (c), \"=d\" (d)  \\\n+\t\t: \"0\" (num))\n+\n+#define bit_CMPXCHG8B (1 << 8)\n+#define bit_CMOV (1 << 15)\n+#define bit_MMX (1 << 23)\n+#define bit_SSE (1 << 25)\n+#define bit_SSE2 (1 << 26)\n+\n+#define bit_SSE3 (1 << 0)\n+#define bit_CMPXCHG16B (1 << 13)\n+\n+#define bit_3DNOW (1 << 31)\n+#define bit_3DNOWP (1 << 30)\n+#define bit_LM (1 << 29)\n+\n+/* This will be called by the spec parser in gcc.c when it sees\n+   a %:local_cpu_detect(args) construct.  Currently it will be called\n+   with either \"arch\" or \"tune\" as argument depending on if -march=native\n+   or -mtune=native is to be substituted.\n+\n+   It returns a string containing new command line parameters to be\n+   put at the place of the above two options, depending on what CPU\n+   this is executed.  E.g. \"-march=k8\" on an AMD64 machine\n+   for -march=native.\n+\n+   ARGC and ARGV are set depending on the actual arguments given\n+   in the spec.  */\n+const char *host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu = \"i386\";\n+  unsigned int eax, ebx, ecx, edx;\n+  unsigned int max_level;\n+  unsigned int vendor;\n+  unsigned int ext_level;\n+  unsigned char has_mmx = 0, has_3dnow = 0, has_3dnowp = 0, has_sse = 0;\n+  unsigned char has_sse2 = 0, has_sse3 = 0, has_cmov = 0;\n+  unsigned char has_longmode = 0;\n+  unsigned char is_amd = 0;\n+  unsigned int family = 0;\n+  if (argc < 1\n+      || (strcmp (argv[0], \"arch\")\n+\t  && strcmp (argv[0], \"tune\")))\n+    return NULL;\n+\n+#ifndef __x86_64__\n+  /* See if we can use cpuid.  */\n+  asm volatile (\"pushfl; pushfl; popl %0; movl %0,%1; xorl %2,%0;\"\n+\t\t\"pushl %0; popfl; pushfl; popl %0; popfl\"\n+\t\t: \"=&r\" (eax), \"=&r\" (ebx)\n+\t\t: \"i\" (0x00200000));\n+\n+  if (((eax ^ ebx) & 0x00200000) == 0)\n+    goto done;\n+#endif\n+\n+  cpu = \"i586\";\n+\n+  /* Check the highest input value for eax.  */\n+  cpuid (0, eax, ebx, ecx, edx);\n+  max_level = eax;\n+  /* We only look at the first four characters.  */\n+  vendor = ebx;\n+  if (max_level == 0)\n+    goto done;\n+\n+  cpuid (1, eax, ebx, ecx, edx);\n+  has_cmov = !!(edx & bit_CMOV);\n+  has_mmx = !!(edx & bit_MMX);\n+  has_sse = !!(edx & bit_SSE);\n+  has_sse2 = !!(edx & bit_SSE2);\n+  has_sse3 = !!(ecx & bit_SSE3);\n+  /* We don't care for extended family.  */\n+  family = (eax >> 8) & ~(1 << 4);\n+\n+  cpuid (0x80000000, eax, ebx, ecx, edx);\n+  ext_level = eax;\n+  if (ext_level >= 0x80000000)\n+    {\n+      cpuid (0x80000001, eax, ebx, ecx, edx);\n+      has_3dnow = !!(edx & bit_3DNOW);\n+      has_3dnowp = !!(edx & bit_3DNOWP);\n+      has_longmode = !!(edx & bit_LM);\n+    }\n+\n+  is_amd = vendor == *(unsigned int*)\"Auth\";\n+\n+  if (is_amd)\n+    {\n+      if (has_mmx)\n+        cpu = \"k6\";\n+      if (has_3dnow)\n+        cpu = \"k6-3\";\n+      if (has_3dnowp)\n+        cpu = \"athlon\";\n+      if (has_sse)\n+\tcpu = \"athlon-4\";\n+      if (has_sse2 || has_longmode)\n+        cpu = \"k8\";\n+    }\n+  else\n+    {\n+      if (family == 5)\n+        {\n+          if (has_mmx)\n+            cpu = \"pentium-mmx\";\n+\t}\n+      else if (has_mmx)\n+        cpu = \"pentium2\";\n+      if (has_sse)\n+        cpu = \"pentium3\";\n+      if (has_sse2)\n+\t{\n+\t  if (family == 6)\n+\t    /* It's a pentiumpro with sse2 --> pentium-m */\n+            cpu = \"pentium-m\";\n+\t  else\n+\t    /* Would have to look at extended family, but it's at least\n+\t       an pentium4 core.  */\n+\t    cpu = \"pentium4\";\n+\t}\n+      if (has_sse3)\n+        {\n+\t  if (has_longmode)\n+\t    cpu = \"nocona\";\n+\t  else \n+            cpu = \"prescott\";\n+\t}\n+    }\n+\n+done:\n+  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n+}\n+#else\n+/* If we aren't compiling with GCC we just provide a minimal\n+   default value.  */\n+const char *host_detect_local_cpu (int argc, const char **argv)\n+{\n+  return concat (\"-m\", argv[0], \"=i386\", NULL);\n+}\n+#endif\n+#endif"}, {"sha": "c81dee81152952973baf2bff76c5fbe482953896", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -1565,7 +1565,11 @@ override_options (void)\n   if (ix86_tune_string)\n     {\n       if (!strcmp (ix86_tune_string, \"generic\")\n-\t  || !strcmp (ix86_tune_string, \"i686\"))\n+\t  || !strcmp (ix86_tune_string, \"i686\")\n+\t  /* As special support for cross compilers we read -mtune=native\n+\t     as -mtune=generic.  With native compilers we won't see the\n+\t     -mtune=native, as it was changed by the driver.  */\n+\t  || !strcmp (ix86_tune_string, \"native\"))\n \t{\n \t  if (TARGET_64BIT)\n \t    ix86_tune_string = \"generic64\";"}, {"sha": "a3a1129a5e3c1e42a9f2770ed260590090b702a6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -273,6 +273,14 @@ extern int x86_prefetch_sse;\n #define OPTIMIZATION_OPTIONS(LEVEL, SIZE) \\\n   optimization_options ((LEVEL), (SIZE))\n \n+/* -march=native handling only makes sense with a native compiler.  */\n+#ifndef CROSS_COMPILE\n+/* In driver-i386.c.  */\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+#define EXTRA_SPEC_FUNCTIONS \\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+#endif\n+\n /* Support for configure-time defaults of some command line options.  */\n #define OPTION_DEFAULT_SPECS \\\n   {\"arch\", \"%{!march=*:-march=%(VALUE)}\"}, \\\n@@ -282,7 +290,7 @@ extern int x86_prefetch_sse;\n /* Specs for the compiler proper */\n \n #ifndef CC1_CPU_SPEC\n-#define CC1_CPU_SPEC \"\\\n+#define CC1_CPU_SPEC_1 \"\\\n %{!mtune*: \\\n %{m386:mtune=i386 \\\n %n`-m386' is deprecated. Use `-march=i386' or `-mtune=i386' instead.\\n} \\\n@@ -299,6 +307,14 @@ extern int x86_prefetch_sse;\n %n`-mintel-syntax' is deprecated. Use `-masm=intel' instead.\\n} \\\n %{mno-intel-syntax:-masm=att \\\n %n`-mno-intel-syntax' is deprecated. Use `-masm=att' instead.\\n}\"\n+\n+#ifdef CROSS_COMPILE\n+#define CC1_CPU_SPEC CC1_CPU_SPEC_1\n+#else\n+#define CC1_CPU_SPEC CC1_CPU_SPEC_1 \\\n+\"%{march=native:%<march=native %:local_cpu_detect(arch)} \\\n+%{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#endif\n #endif\n \f\n /* Target CPU builtins.  */"}, {"sha": "2c35e5b5aed7349d23d595461bbdb0eaf43a606e", "filename": "gcc/config/i386/x-i386", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fx-i386", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fconfig%2Fi386%2Fx-i386", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-i386?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -0,0 +1,3 @@\n+driver-i386.o : $(srcdir)/config/i386/driver-i386.c \\\n+  $(CONFIG_H) $(SYSTEM_H)\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}, {"sha": "bf1fe7cf87cda11a22d4d6eb8d8ecdc0909229fb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -9176,6 +9176,13 @@ indicates the instruction set the compiler can use, and there is no\n generic instruction set applicable to all processors.  In contrast,\n @option{-mtune} indicates the processor (or, in this case, collection of\n processors) for which the code is optimized.\n+@item native\n+This selects the CPU to tune for at compilation time by determining\n+the processor type of the compiling machine.  Using @option{-mtune=native}\n+will produce code optimized for the local machine under the constraints\n+of the selected instruction set.  Using @option{-march=native} will\n+enable all instruction subsets supported by the local machine (hence\n+the result might not run on different machines).\n @item i386\n Original Intel's i386 CPU@.\n @item i486"}, {"sha": "7e5733cc75aabb53f192198a2e22dbe05a52b3e0", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa959ce486f4e61e26a48d509e2f9980d35eca1b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fa959ce486f4e61e26a48d509e2f9980d35eca1b", "patch": "@@ -1601,6 +1601,9 @@ static const struct spec_function static_spec_functions[] =\n   { \"replace-outfile\",\t\treplace_outfile_spec_function },\n   { \"version-compare\",\t\tversion_compare_spec_function },\n   { \"include\",\t\t\tinclude_spec_function },\n+#ifdef EXTRA_SPEC_FUNCTIONS\n+  EXTRA_SPEC_FUNCTIONS\n+#endif\n   { 0, 0 }\n };\n "}]}