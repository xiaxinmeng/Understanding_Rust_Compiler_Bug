{"sha": "892c7427ee234c04852e90d9ce32913a429adf9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODkyYzc0MjdlZTIzNGMwNDg1MmU5MGQ5Y2UzMjkxM2E0MjlhZGY5ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-05-11T14:39:20Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2020-05-11T14:40:18Z"}, "message": "[Fortran] Fix/modify present() handling for assumed-shape optional (PR 94672)\n\ngcc/fortran/\n2020-05-07  Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR fortran/94672\n\t* trans.h (gfc_conv_expr_present): Add use_saved_decl=false argument.\n\t* trans-expr.c (gfc_conv_expr_present): Likewise; use DECL directly\n\tand only if use_saved_decl is true, use the actual PARAM_DECL arg (saved\n\tdescriptor).\n\t* trans-array.c (gfc_trans_dummy_array_bias): Set local 'arg.0'\n\tvariable to NULL if 'arg' is not present.\n\t* trans-openmp.c (gfc_omp_check_optional_argument): Simplify by checking\n\t'arg.0' instead of the true PARM_DECL.\n\t(gfc_omp_finish_clause): Remove setting 'arg.0' to NULL.\n\ngcc/testsuite/\n2020-05-07  Jakub Jelinek  <jakub@redhat.com>\n\t    Tobias Burnus  <tobias@codesourcery.com>\n\n\tPR fortran/94672\n\t* gfortran.dg/gomp/pr94672.f90: New.\n\t* gfortran.dg/missing_optional_dummy_6a.f90: Update scan-tree.", "tree": {"sha": "fa62cc00f73ebbf6a0380d06175041a35bd3cffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa62cc00f73ebbf6a0380d06175041a35bd3cffb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/892c7427ee234c04852e90d9ce32913a429adf9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892c7427ee234c04852e90d9ce32913a429adf9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892c7427ee234c04852e90d9ce32913a429adf9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892c7427ee234c04852e90d9ce32913a429adf9d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa4317866bf3e9f42f3b8e3b1b1ec113ed1f818d"}], "stats": {"total": 226, "additions": 173, "deletions": 53}, "files": [{"sha": "a1a625abc1d1c53a4e44a7d2891f3a83c296b29e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -1,6 +1,19 @@\n+2020-05-11  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94672\n+\t* trans.h (gfc_conv_expr_present): Add use_saved_decl=false argument.\n+\t* trans-expr.c (gfc_conv_expr_present): Likewise; use DECL directly\n+\tand only if use_saved_decl is true, use the actual PARAM_DECL arg (saved\n+\tdescriptor).\n+\t* trans-array.c (gfc_trans_dummy_array_bias): Set local 'arg.0'\n+\tvariable to NULL if 'arg' is not present.\n+\t* trans-openmp.c (gfc_omp_check_optional_argument): Simplify by checking\n+\t'arg.0' instead of the true PARM_DECL.\n+\t(gfc_omp_finish_clause): Remove setting 'arg.0' to NULL.\n+\n 2020-05-11  Janus Weil  <janus@gcc.gnu.org>\n \t    Dominique d'Humieres  <dominiq@lps.ens.fr>\n-    \n+\n \tPR fortran/59107\n \t* gfortran.h: Rename field resolved as resolve_symbol_called\n \tand assign two 2 bits instead of 1."}, {"sha": "434960c5bc7982f21a926bb9151655df64169ccb", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -6787,9 +6787,11 @@ gfc_trans_dummy_array_bias (gfc_symbol * sym, tree tmpdesc,\n \t\t      && sym->attr.dummy));\n   if (optional_arg)\n     {\n-      tmp = gfc_conv_expr_present (sym);\n-      stmtInit = build3_v (COND_EXPR, tmp, stmtInit,\n-\t\t\t   build_empty_stmt (input_location));\n+      tree zero_init = fold_convert (TREE_TYPE (tmpdesc), null_pointer_node);\n+      zero_init = fold_build2_loc (input_location, MODIFY_EXPR, void_type_node,\n+\t\t\t\t   tmpdesc, zero_init);\n+      tmp = gfc_conv_expr_present (sym, true);\n+      stmtInit = build3_v (COND_EXPR, tmp, stmtInit, zero_init);\n     }\n \n   /* Cleanup code.  */"}, {"sha": "33fc061d89b8eb9cd712d1597d265ffcd0ada1d5", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -1712,12 +1712,12 @@ gfc_make_safe_expr (gfc_se * se)\n    Also used for arguments to procedures with multiple entry points.  */\n \n tree\n-gfc_conv_expr_present (gfc_symbol * sym)\n+gfc_conv_expr_present (gfc_symbol * sym, bool use_saved_desc)\n {\n-  tree decl, cond;\n+  tree decl, orig_decl, cond;\n \n   gcc_assert (sym->attr.dummy);\n-  decl = gfc_get_symbol_decl (sym);\n+  orig_decl = decl = gfc_get_symbol_decl (sym);\n \n   /* Intrinsic scalars with VALUE attribute which are passed by value\n      use a hidden argument to denote the present status.  */\n@@ -1744,10 +1744,13 @@ gfc_conv_expr_present (gfc_symbol * sym)\n       return cond;\n     }\n \n-  if (TREE_CODE (decl) != PARM_DECL)\n+  /* Assumed-shape arrays use a local variable for the array data;\n+     the actual PARAM_DECL is in a saved decl.  As the local variable\n+     is NULL, it can be checked instead, unless use_saved_desc is\n+     requested.  */\n+\n+  if (use_saved_desc && TREE_CODE (decl) != PARM_DECL)\n     {\n-      /* Array parameters use a temporary descriptor, we want the real\n-         parameter.  */\n       gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl))\n              || GFC_ARRAY_TYPE_P (TREE_TYPE (decl)));\n       decl = GFC_DECL_SAVED_DESCRIPTOR (decl);\n@@ -1761,9 +1764,12 @@ gfc_conv_expr_present (gfc_symbol * sym)\n      we thus also need to check the array descriptor.  For BT_CLASS, it\n      can also occur for scalars and F2003 due to type->class wrapping and\n      class->class wrapping.  Note further that BT_CLASS always uses an\n-     array descriptor for arrays, also for explicit-shape/assumed-size.  */\n+     array descriptor for arrays, also for explicit-shape/assumed-size.\n+     For assumed-rank arrays, no local variable is generated, hence,\n+     the following also applies with !use_saved_desc.  */\n \n-  if (!sym->attr.allocatable\n+  if ((use_saved_desc || TREE_CODE (orig_decl) == PARM_DECL)\n+      && !sym->attr.allocatable\n       && ((sym->ts.type != BT_CLASS && !sym->attr.pointer)\n \t  || (sym->ts.type == BT_CLASS\n \t      && !CLASS_DATA (sym)->attr.allocatable"}, {"sha": "42ecd0a9cbb422a1c5248ef91868dd53ecee62c1", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 4, "deletions": 38, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -90,16 +90,13 @@ gfc_omp_check_optional_argument (tree decl, bool for_present_check)\n   if (!DECL_LANG_SPECIFIC (decl))\n     return NULL_TREE;\n \n-  bool is_array_type = false;\n+  tree orig_decl = decl;\n \n   /* For assumed-shape arrays, a local decl with arg->data is used.  */\n   if (TREE_CODE (decl) != PARM_DECL\n       && (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (decl))\n \t  || GFC_ARRAY_TYPE_P (TREE_TYPE (decl))))\n-    {\n-      is_array_type = true;\n-      decl = GFC_DECL_SAVED_DESCRIPTOR (decl);\n-    }\n+    decl = GFC_DECL_SAVED_DESCRIPTOR (decl);\n \n   if (decl == NULL_TREE\n       || TREE_CODE (decl) != PARM_DECL\n@@ -132,23 +129,8 @@ gfc_omp_check_optional_argument (tree decl, bool for_present_check)\n       return decl;\n     }\n \n-  tree cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n-\t\t\t       decl, null_pointer_node);\n-\n-  /* Fortran regards unallocated allocatables/disassociated pointer which\n-     are passed to a nonallocatable, nonpointer argument as not associated;\n-     cf. F2018, 15.5.2.12, Paragraph 1.  */\n-  if (is_array_type)\n-    {\n-      tree cond2 = build_fold_indirect_ref_loc (input_location, decl);\n-      cond2 = gfc_conv_array_data (cond2);\n-      cond2 = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n-\t\t\t       cond2, null_pointer_node);\n-      cond = fold_build2_loc (input_location, TRUTH_ANDIF_EXPR,\n-\t\t\t      boolean_type_node, cond, cond2);\n-    }\n-\n-  return cond;\n+  return fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t  orig_decl, null_pointer_node);\n }\n \n \n@@ -1287,22 +1269,6 @@ gfc_omp_finish_clause (tree c, gimple_seq *pre_p)\n \treturn;\n       tree orig_decl = decl;\n \n-      /* For nonallocatable, nonpointer arrays, a temporary variable is\n-\t generated, but this one is only defined if the variable is present;\n-\t hence, we now set it to NULL to avoid accessing undefined variables.\n-\t We cannot use a temporary variable here as otherwise the replacement\n-\t of the variables in omp-low.c will not work.  */\n-      if (present && GFC_ARRAY_TYPE_P (TREE_TYPE (decl)))\n-\t{\n-\t  tree tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n-\t\t\t\t      void_type_node, decl, null_pointer_node);\n-\t  tree cond = fold_build1_loc (input_location, TRUTH_NOT_EXPR,\n-\t\t\t\t       boolean_type_node, present);\n-\t  tmp = build3_loc (input_location, COND_EXPR, void_type_node,\n-\t\t\t    cond, tmp, NULL_TREE);\n-\t  gimplify_and_add (tmp, pre_p);\n-\t}\n-\n       c4 = build_omp_clause (OMP_CLAUSE_LOCATION (c), OMP_CLAUSE_MAP);\n       OMP_CLAUSE_SET_MAP_KIND (c4, GOMP_MAP_POINTER);\n       OMP_CLAUSE_DECL (c4) = decl;"}, {"sha": "bd96cdf86fc16c142baf69c14940c692968e695a", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -561,7 +561,7 @@ void gfc_trans_common (gfc_namespace *);\n void gfc_conv_structure (gfc_se *, gfc_expr *, int);\n \n /* Return an expression which determines if a dummy parameter is present.  */\n-tree gfc_conv_expr_present (gfc_symbol *);\n+tree gfc_conv_expr_present (gfc_symbol *, bool use_saved_decl = false);\n /* Convert a missing, dummy argument into a null or zero.  */\n void gfc_conv_missing_dummy (gfc_se *, gfc_expr *, gfc_typespec, int);\n "}, {"sha": "e6070f1bc7e48ef17885c9ebff62c21fd53f0865", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -1,3 +1,10 @@\n+2020-05-11  Jakub Jelinek  <jakub@redhat.com>\n+\t    Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/94672\n+\t* gfortran.dg/gomp/pr94672.f90: New.\n+\t* gfortran.dg/missing_optional_dummy_6a.f90: Update scan-tree.\n+\n 2020-05-11  Felix Yang  <felix.yang@huawei.com>\n \n \tPR target/94991"}, {"sha": "7b89c5df2499e13a20fef54dfc3e7b614468c947", "filename": "gcc/testsuite/gfortran.dg/gomp/pr94672.f90", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr94672.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr94672.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr94672.f90?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -0,0 +1,127 @@\n+! { dg-do compile }\n+\n+SUBROUTINE foo(n,array)\n+    IMPLICIT NONE\n+    INTEGER, INTENT (IN) :: n\n+    REAL, INTENT(INOUT),OPTIONAL:: array(:)\n+    INTEGER:: i\n+\n+    !$OMP PARALLEL DO DEFAULT(none) SHARED(array,n) PRIVATE(i)\n+    DO i = 1,n\n+       IF (PRESENT(array)) THEN\n+          array(i) = array(i) + i\n+       ENDIF\n+    ENDDO\n+    !$OMP END PARALLEL DO\n+END SUBROUTINE foo\n+\n+subroutine s1 (array)\n+  real, optional :: array(:)\n+  !$omp parallel default(none) firstprivate (array)\n+  if (present (array)) array(:) = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s2 (array)\n+  real, optional :: array(:)\n+  !$omp parallel default(none) shared (array)\n+  !$omp master\n+  if (present (array)) array(:) = 3\n+  !$omp end master\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s3 (array)\n+  real, optional :: array(:)\n+  !$omp parallel default(none) private (array)\n+  if (present (array)) array(:) = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s4 (arg)\n+  real, optional :: arg\n+  !$omp parallel default(none) firstprivate (arg)\n+  if (present (arg)) arg = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s5 (arg)\n+  real, optional :: arg\n+  !$omp parallel default(none) shared (arg)\n+  !$omp master\n+  if (present (arg)) arg = 3\n+  !$omp end master\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s6 (arg)\n+  real, optional :: arg\n+  !$omp parallel default(none) private (arg)\n+  if (present (arg)) arg = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s7 (arg)\n+  real, value, optional :: arg\n+  !$omp parallel default(none) firstprivate (arg)\n+  if (present (arg)) arg = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s8 (arg)\n+  real, value, optional :: arg\n+  !$omp parallel default(none) shared (arg)\n+  !$omp master\n+  if (present (arg)) arg = 3\n+  !$omp end master\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s9 (arg)\n+  real, value, optional :: arg\n+  !$omp parallel default(none) private (arg)\n+  if (present (arg)) arg = 3\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine s10 (arg)\n+  real, optional :: arg(..)\n+  !$omp parallel default(none) private (arg)\n+  if (present (arg)) stop 10\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine w1 (array)\n+  real, optional :: array(:)\n+  !$omp parallel default(none)     ! { dg-error \"enclosing 'parallel'\" }\n+  if (.not.present (array)) stop 1 ! { dg-error \"'array' not specified in enclosing 'parallel'\" }\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine w2 (array2)\n+  real, optional :: array2(*)\n+  !$omp parallel default(none)      ! { dg-error \"enclosing 'parallel'\" \"TODO\" { xfail *-*-* } }\n+  if (.not.present (array2)) stop 2 ! { dg-error \"'array2' not specified in enclosing 'parallel'\" \"TODO\" { xfail *-*-* } }\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine w3 (arg)\n+  real, optional :: arg\n+  !$omp parallel default(none)    ! { dg-error \"enclosing 'parallel'\" }\n+  if (.not.present (arg)) stop 3  ! { dg-error \"'arg' not specified in enclosing 'parallel'\" }\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine w4 (arg2)\n+  real, value, optional :: arg2\n+  !$omp parallel default(none)     ! { dg-error \"enclosing 'parallel\" \"TODO\" { xfail *-*-* } }\n+  if (.not.present (arg2)) stop 4  ! { dg-error \"'arg2' not specified in enclosing 'parallel'\" \"TODO\" { xfail *-*-*} }\n+  !$omp end parallel\n+end subroutine\n+\n+subroutine w5 (array3)\n+  real, optional :: array3(..)\n+  !$omp parallel default(none)      ! { dg-error \"enclosing 'parallel'\" }\n+  if (.not.present (array3)) stop 5 ! { dg-error \"'array3' not specified in enclosing 'parallel'\" }\n+  !$omp end parallel\n+end subroutine"}, {"sha": "c08c97a2c7ebac58d98fce59bde8aaf7c523daa9", "filename": "gcc/testsuite/gfortran.dg/missing_optional_dummy_6a.f90", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/892c7427ee234c04852e90d9ce32913a429adf9d/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_6a.f90?ref=892c7427ee234c04852e90d9ce32913a429adf9d", "patch": "@@ -53,7 +53,6 @@ end program test\n ! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(es1\" 0 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(es1\" 1 \"original\" } }\n \n-! { dg-final { scan-tree-dump-times \"= as1 != 0B\" 2 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"= as1.0 != 0B\" 2 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"assumed_shape2 \\\\(as1\" 0 \"original\" } }\n ! { dg-final { scan-tree-dump-times \"explicit_shape2 \\\\(as1\" 0 \"original\" } }\n-"}]}