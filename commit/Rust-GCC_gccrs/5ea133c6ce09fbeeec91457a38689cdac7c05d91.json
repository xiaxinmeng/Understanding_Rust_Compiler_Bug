{"sha": "5ea133c6ce09fbeeec91457a38689cdac7c05d91", "node_id": "C_kwDOANBUbNoAKDVlYTEzM2M2Y2UwOWZiZWVlYzkxNDU3YTM4Njg5Y2RhYzdjMDVkOTE", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-28T16:26:38Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-11T13:38:13Z"}, "message": "[Ada] Fix for atomic wrongly rejected on object of discriminated type\n\ngcc/ada/\n\n\t* gcc-interface/decl.c (promote_object_alignment): Add GNU_SIZE\n\tparameter and use it for the size of the object if not null.\n\t(gnat_to_gnu_entity) <E_Variable>: Perform the automatic alignment\n\tpromotion for objects whose nominal subtype is of variable size.\n\t(gnat_to_gnu_field): Adjust call to promote_object_alignment.", "tree": {"sha": "6db0f0702ea1a0371a6647b3aa3f8f3cbcbe33e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6db0f0702ea1a0371a6647b3aa3f8f3cbcbe33e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ea133c6ce09fbeeec91457a38689cdac7c05d91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea133c6ce09fbeeec91457a38689cdac7c05d91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ea133c6ce09fbeeec91457a38689cdac7c05d91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ea133c6ce09fbeeec91457a38689cdac7c05d91/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92961bdf2dfc63965a05302aac6c907065bd2c27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92961bdf2dfc63965a05302aac6c907065bd2c27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92961bdf2dfc63965a05302aac6c907065bd2c27"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "2ed1f3ec602e20fe4243e265b706d31f09e0d8f8", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ea133c6ce09fbeeec91457a38689cdac7c05d91/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ea133c6ce09fbeeec91457a38689cdac7c05d91/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=5ea133c6ce09fbeeec91457a38689cdac7c05d91", "patch": "@@ -239,7 +239,7 @@ static tree validate_size (Uint, tree, Entity_Id, enum tree_code, bool, bool,\n \t\t\t   const char *, const char *);\n static void set_rm_size (Uint, tree, Entity_Id);\n static unsigned int validate_alignment (Uint, Entity_Id, unsigned int);\n-static unsigned int promote_object_alignment (tree, Entity_Id);\n+static unsigned int promote_object_alignment (tree, tree, Entity_Id);\n static void check_ok_for_atomic_type (tree, Entity_Id, bool);\n static tree create_field_decl_from (tree, tree, tree, tree, tree,\n \t\t\t\t    vec<subst_pair>);\n@@ -897,7 +897,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   or a reference to another object, and the size of its type is a\n \t   constant, set the alignment to the smallest one which is not\n \t   smaller than the size, with an appropriate cap.  */\n-\tif (!gnu_size && align == 0\n+\tif (!Known_Esize (gnat_entity)\n+\t    && !Known_Alignment (gnat_entity)\n \t    && (Is_Full_Access (gnat_entity)\n \t\t|| (!Optimize_Alignment_Space (gnat_entity)\n \t\t    && kind != E_Exception\n@@ -908,8 +909,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t\t    && !imported_p\n \t\t    && No (gnat_renamed_obj)\n \t\t    && No (Address_Clause (gnat_entity))))\n-\t    && TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST)\n-\t  align = promote_object_alignment (gnu_type, gnat_entity);\n+\t    && (TREE_CODE (TYPE_SIZE (gnu_type)) == INTEGER_CST || gnu_size))\n+\t  align = promote_object_alignment (gnu_type, gnu_size, gnat_entity);\n \n \t/* If the object is set to have atomic components, find the component\n \t   type and validate it.\n@@ -7322,7 +7323,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   if (Is_Full_Access (gnat_field))\n     {\n       const unsigned int align\n-\t= promote_object_alignment (gnu_field_type, gnat_field);\n+\t= promote_object_alignment (gnu_field_type, NULL_TREE, gnat_field);\n       if (align > 0)\n \tgnu_field_type\n \t  = maybe_pad_type (gnu_field_type, NULL_TREE, align, gnat_field,\n@@ -9393,11 +9394,11 @@ validate_alignment (Uint alignment, Entity_Id gnat_entity, unsigned int align)\n   return align;\n }\n \n-/* Promote the alignment of GNU_TYPE corresponding to GNAT_ENTITY.  Return\n-   a positive value on success or zero on failure.  */\n+/* Promote the alignment of GNU_TYPE for an object with GNU_SIZE corresponding\n+   to GNAT_ENTITY.  Return a positive value on success or zero on failure.  */\n \n static unsigned int\n-promote_object_alignment (tree gnu_type, Entity_Id gnat_entity)\n+promote_object_alignment (tree gnu_type, tree gnu_size, Entity_Id gnat_entity)\n {\n   unsigned int align, size_cap, align_cap;\n \n@@ -9418,14 +9419,17 @@ promote_object_alignment (tree gnu_type, Entity_Id gnat_entity)\n       align_cap = get_mode_alignment (ptr_mode);\n     }\n \n+  if (!gnu_size)\n+    gnu_size = TYPE_SIZE (gnu_type);\n+\n   /* Do the promotion within the above limits.  */\n-  if (!tree_fits_uhwi_p (TYPE_SIZE (gnu_type))\n-      || compare_tree_int (TYPE_SIZE (gnu_type), size_cap) > 0)\n+  if (!tree_fits_uhwi_p (gnu_size)\n+      || compare_tree_int (gnu_size, size_cap) > 0)\n     align = 0;\n-  else if (compare_tree_int (TYPE_SIZE (gnu_type), align_cap) > 0)\n+  else if (compare_tree_int (gnu_size, align_cap) > 0)\n     align = align_cap;\n   else\n-    align = ceil_pow2 (tree_to_uhwi (TYPE_SIZE (gnu_type)));\n+    align = ceil_pow2 (tree_to_uhwi (gnu_size));\n \n   /* But make sure not to under-align the object.  */\n   if (align <= TYPE_ALIGN (gnu_type))"}]}