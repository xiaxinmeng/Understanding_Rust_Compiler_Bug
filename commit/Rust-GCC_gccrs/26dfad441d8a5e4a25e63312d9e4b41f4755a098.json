{"sha": "26dfad441d8a5e4a25e63312d9e4b41f4755a098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkZmFkNDQxZDhhNWU0YTI1ZTYzMzEyZDllNGI0MWY0NzU1YTA5OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-06T01:54:07Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-06T01:54:07Z"}, "message": "PrintWriter.java: Merged comments from Classpath.\n\n\t* java/io/PrintWriter.java: Merged comments from Classpath.\n\t(printlnUnsynchronized): Removed.\n\t(println()): Print the separator.\n\t(println): Call println(), not printlnUnsynchronized.\n\t(out): Now protected, to match spec.\n\nFrom-SVN: r35512", "tree": {"sha": "9e0bbb37fda696c052ea78d97be79acaa8533860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e0bbb37fda696c052ea78d97be79acaa8533860"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26dfad441d8a5e4a25e63312d9e4b41f4755a098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dfad441d8a5e4a25e63312d9e4b41f4755a098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26dfad441d8a5e4a25e63312d9e4b41f4755a098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26dfad441d8a5e4a25e63312d9e4b41f4755a098/comments", "author": null, "committer": null, "parents": [{"sha": "1ed67a71e484ebd5f41f27b31414169b3fd6078f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ed67a71e484ebd5f41f27b31414169b3fd6078f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ed67a71e484ebd5f41f27b31414169b3fd6078f"}], "stats": {"total": 315, "additions": 286, "deletions": 29}, "files": [{"sha": "c0eddf326a2205ad46094f480a6553b7a6983b36", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dfad441d8a5e4a25e63312d9e4b41f4755a098/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dfad441d8a5e4a25e63312d9e4b41f4755a098/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=26dfad441d8a5e4a25e63312d9e4b41f4755a098", "patch": "@@ -1,3 +1,11 @@\n+2000-08-05  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java/io/PrintWriter.java: Merged comments from Classpath.\n+\t(printlnUnsynchronized): Removed.\n+\t(println()): Print the separator.\n+\t(println): Call println(), not printlnUnsynchronized.\n+\t(out): Now protected, to match spec.\n+\n 2000-08-04  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/io/StreamTokenizer.java (TT_NONE): Now private."}, {"sha": "156affc39db682c2e5fe85d3736c20ed2f781306", "filename": "libjava/java/io/PrintWriter.java", "status": "modified", "additions": 278, "deletions": 29, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26dfad441d8a5e4a25e63312d9e4b41f4755a098/libjava%2Fjava%2Fio%2FPrintWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26dfad441d8a5e4a25e63312d9e4b41f4755a098/libjava%2Fjava%2Fio%2FPrintWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintWriter.java?ref=26dfad441d8a5e4a25e63312d9e4b41f4755a098", "patch": "@@ -9,9 +9,22 @@\n package java.io;\n \n /**\n- * @author Per Bothner <bothner@cygnus.com>\n- * @date April 17, 1998.  \n- */\n+  * This class prints Java primitive values and objects to a stream as\n+  * text.  None of the methods in this class throw an exception.  However,\n+  * errors can be detected by calling the <code>checkError()</code> method.\n+  * Additionally, this stream can be designated as \"autoflush\" when \n+  * created so that any writes are automatically flushed to the underlying\n+  * output sink whenever one of the <code>println</code> methods is\n+  * called.  (Note that this differs from the <code>PrintStream</code>\n+  * class which also auto-flushes when it encounters a newline character\n+  * in the chars written).\n+  *\n+  * @version 0.0\n+  *\n+  * @author Per Bothner <bothner@cygnus.com>\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @date April 17, 1998.  \n+  */\n /* Written using \"Java Class Libraries\", 2nd edition, plus online\n  * API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n@@ -20,43 +33,109 @@\n \n public class PrintWriter extends Writer\n {\n+  /**\n+   * <code>true</code> if auto-flush is enabled, <code>false</code> otherwise\n+   */\n   private boolean autoflush;\n+\n+  /**\n+   * This boolean indicates whether or not an error has ever occured\n+   * on this stream.\n+   */\n   private boolean error;\n-  Writer out;\n \n+  /**\n+   * This is the underlying <code>Writer</code> we are sending output\n+   * to\n+   */\n+  protected Writer out;\n+\n+  /**\n+   * This method intializes a new <code>PrintWriter</code> object to write\n+   * to the specified output sink.  The form of the constructor does not\n+   * enable auto-flush functionality.\n+   *\n+   * @param wr The <code>Writer</code> to write to.\n+   */\n   public PrintWriter(Writer wr)\n   {\n     super(wr);\n     this.out = wr;\n   }\n \n+  /**\n+   * This method intializes a new <code>PrintWriter</code> object to write\n+   * to the specified output sink.  This constructor also allows \"auto-flush\"\n+   * functionality to be specified where the stream will be flushed after\n+   * every line is terminated or newline character is written.\n+   *\n+   * @param wr The <code>Writer</code> to write to.\n+   * @param autoflush <code>true</code> to flush the stream after every line, <code>false</code> otherwise\n+   */\n   public PrintWriter(Writer wr, boolean autoflush)\n   {\n     super(wr);\n     this.out = wr;\n     this.autoflush = autoflush;\n   }\n \n+  /**\n+   * This method initializes a new <code>PrintWriter</code> object to write\n+   * to the specified <code>OutputStream</code>.  Characters will be converted\n+   * to chars using the system default encoding.  Auto-flush functionality\n+   * will not be enabled.\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   */\n   public PrintWriter(OutputStream out)\n   {\n     super();\n     this.out = new OutputStreamWriter(out);\n     this.lock = this.out;\n   }\n \n+  /**\n+   * This method initializes a new <code>PrintWriter</code> object to write\n+   * to the specified <code>OutputStream</code>.  Characters will be converted\n+   * to chars using the system default encoding.  This form of the \n+   * constructor allows auto-flush functionality to be enabled if desired\n+   *\n+   * @param out The <code>OutputStream</code> to write to\n+   * @param autoflush <code>true</code> to flush the stream after every <code>println</code> call, <code>false</code> otherwise.\n+   */\n   public PrintWriter(OutputStream out, boolean autoflush)\n   {\n     this(out);\n     this.autoflush = autoflush;\n   }\n-  protected void setError() { error = true; }\n \n+  /**\n+   * This method can be called by subclasses to indicate that an error\n+   * has occurred and should be reported by <code>checkError</code>.\n+   */\n+  protected void setError()\n+  {\n+    error = true;\n+  }\n+\n+  /**\n+   * This method checks to see if an error has occurred on this stream.  Note\n+   * that once an error has occurred, this method will continue to report\n+   * <code>true</code> forever for this stream.  Before checking for an\n+   * error condition, this method flushes the stream.\n+   *\n+   * @return <code>true</code> if an error has occurred, <code>false</code> otherwise\n+   */\n   public boolean checkError()\n   {\n     flush();\n     return error;\n   }\n \n+  /**\n+   * This method flushes any buffered chars to the underlying stream and\n+   * then flushes that stream as well.\n+   */\n   public void flush()\n   {\n     try\n@@ -69,6 +148,9 @@ public void flush()\n       }\n   }\n \n+  /**\n+   * This method closes this stream and all underlying streams.\n+   */\n   public void close()\n   {\n     try\n@@ -81,6 +163,12 @@ public void close()\n       }\n   }\n \n+  /**\n+   * This method prints a <code>String</code> to the stream.  The actual\n+   * value printed depends on the system default encoding.\n+   *\n+   * @param str The <code>String</code> to print.\n+   */\n   public void print(String str)\n   {\n     try\n@@ -93,163 +181,296 @@ public void print(String str)\n       }\n   }\n \n+  /**\n+   * This method prints a char to the stream.  The actual value printed is\n+   * determined by the character encoding in use.\n+   *\n+   * @param ch The <code>char</code> value to be printed\n+   */\n   public void print(char ch)\n   {\n     write((int) ch);\n   }\n \n+  /**\n+   * This method prints an array of characters to the stream.  The actual\n+   * value printed depends on the system default encoding.\n+   *\n+   * @param charArray The array of characters to print.\n+   */\n   public void print(char[] charArray)\n   {\n     write(charArray, 0, charArray.length);\n   }\n \n+  /**\n+   * This methods prints a boolean value to the stream.  <code>true</code>\n+   * values are printed as \"true\" and <code>false</code> values are printed\n+   * as \"false\".\n+   *\n+   * @param bool The <code>boolean</code> value to print\n+   */\n   public void print(boolean bool)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write (bool ? \"true\" : \"false\");\n   }\n \n+  /**\n+   * This method prints an integer to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * @param inum The <code>int</code> value to be printed\n+   */\n   public void print(int inum)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write(Integer.toString(inum));\n   }\n \n+  /**\n+   * This method prints a long to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * @param lnum The <code>long</code> value to be printed\n+   */\n   public void print(long lnum)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write(Long.toString(lnum));\n   }\n \n+  /**\n+   * This method prints a float to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * @param fnum The <code>float</code> value to be printed\n+   */\n   public void print(float fnum)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write(Float.toString(fnum));\n   }\n \n+  /**\n+   * This method prints a double to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * @param dnum The <code>double</code> value to be printed\n+   */\n   public void print(double dnum)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write(Double.toString(dnum));\n   }\n \n+  /**\n+   * This method prints an <code>Object</code> to the stream.  The actual\n+   * value printed is determined by calling the <code>String.valueOf()</code>\n+   * method.\n+   *\n+   * @param obj The <code>Object</code> to print.\n+   */\n   public void print(Object obj)\n   {\n     // We purposely call write() and not print() here.  This preserves\n     // compatibility with JDK 1.2.\n     write(obj == null ? \"null\" : obj.toString());\n   }\n \n+  /**\n+   * This is the system dependent line separator\n+   */\n   private static final char[] line_separator\n   = System.getProperty(\"line.separator\").toCharArray();\n \n+  /**\n+   * This method prints a line separator sequence to the stream.  The value\n+   * printed is determined by the system property <xmp>line.separator</xmp>\n+   * and is not necessarily the Unix '\\n' newline character.\n+   */\n   public void println()\n   {\n     synchronized (lock)\n       {\n-\tprintlnUnsynchronized();\n-      }\n-  }\n-\n-  private void printlnUnsynchronized()\n-  {\n-    try\n-      {\n-\twrite(line_separator, 0, line_separator.length);\n-\tif (autoflush)\n-\t  out.flush();\n-      }\n-    catch (IOException ex)\n-      {\n-\terror = true;\n+\ttry\n+\t  {\n+\t    write(line_separator, 0, line_separator.length);\n+\t    if (autoflush)\n+\t      out.flush();\n+\t  }\n+\tcatch (IOException ex)\n+\t  {\n+\t    error = true;\n+\t  }\n       }\n   }\n \n+  /**\n+   * This methods prints a boolean value to the stream.  <code>true</code>\n+   * values are printed as \"true\" and <code>false</code> values are printed\n+   * as \"false\".\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param bool The <code>boolean</code> value to print\n+   */\n   public void println(boolean bool)\n   {\n     synchronized (lock)\n       {\n \tprint(bool);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n+\n+  /**\n+   * This method prints an integer to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param inum The <code>int</code> value to be printed\n+   */\n   public void println(int inum)\n   {\n     synchronized (lock)\n       {\n \tprint(inum);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints a long to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param lnum The <code>long</code> value to be printed\n+   */\n   public void println(long lnum)\n   {\n     synchronized (lock)\n       {\n \tprint(lnum);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints a float to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param fnum The <code>float</code> value to be printed\n+   */\n   public void println(float fnum)\n   {\n     synchronized (lock)\n       {\n \tprint(fnum);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints a double to the stream.  The value printed is\n+   * determined using the <code>String.valueOf()</code> method.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param dnum The <code>double</code> value to be printed\n+   */\n   public void println(double dnum)\n   {\n     synchronized (lock)\n       {\n \tprint(dnum);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints an <code>Object</code> to the stream.  The actual\n+   * value printed is determined by calling the <code>String.valueOf()</code>\n+   * method.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param obj The <code>Object</code> to print.\n+   */\n   public void println(Object obj)\n   {\n     synchronized (lock)\n       {\n \tprint(obj);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints a <code>String</code> to the stream.  The actual\n+   * value printed depends on the system default encoding.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param str The <code>String</code> to print.\n+   */\n   public void println(String str)\n   {\n     synchronized (lock)\n       {\n \tprint(str);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints a char to the stream.  The actual value printed is\n+   * determined by the character encoding in use.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param ch The <code>char</code> value to be printed\n+   */\n   public void println(char ch)\n   {\n     synchronized (lock)\n       {\n \tprint(ch);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method prints an array of characters to the stream.  The actual\n+   * value printed depends on the system default encoding.\n+   *\n+   * This method prints a line termination sequence after printing the value.\n+   *\n+   * @param charArray The array of characters to print.\n+   */\n   public void println(char[] charArray)\n   {\n     synchronized (lock)\n       {\n \tprint(charArray);\n-\tprintlnUnsynchronized();\n+\tprintln();\n       }\n   }\n \n+  /**\n+   * This method writes a single char to the stream. \n+   * \n+   * @param ch The char to be written, passed as a int\n+   */\n   public void write(int ch)\n   {\n     try\n@@ -262,6 +483,14 @@ public void write(int ch)\n       }\n   }\n \n+  /**\n+   * This method writes <code>count</code> chars from the specified array \n+   * starting at index <code>offset</code> into the array.\n+   *\n+   * @param charArray The array of chars to write\n+   * @param offset The index into the array to start writing from\n+   * @param count The number of chars to write\n+  */\n   public void write(char[] charArray, int offset, int count)\n   {\n     try\n@@ -274,6 +503,15 @@ public void write(char[] charArray, int offset, int count)\n       }\n   }\n \n+  /**\n+   * This method writes <code>count</code> chars from the specified\n+   * <code>String</code> to the output starting at character position\n+   * <code>offset</code> into the <code>String</code>\n+   *\n+   * @param str The <code>String</code> to write chars from\n+   * @param offset The offset into the <code>String</code> to start writing from\n+   * @param count The number of chars to write.\n+   */\n   public void write(String str, int offset, int count)\n   {\n     try\n@@ -286,11 +524,22 @@ public void write(String str, int offset, int count)\n       }\n   }\n \n+  /**\n+   * This method write all the chars in the specified array to the output.\n+   *\n+   * @param charArray The array of characters to write\n+   */\n   public void write(char[] charArray)\n   {\n     write(charArray, 0, charArray.length);\n   }  \n \n+  /**\n+   * This method writes the contents of the specified <code>String</code>\n+   * to the underlying stream.\n+   *\n+   * @param str The <code>String</code> to write\n+   */\n   public void write(String str)\n   {\n     write(str, 0, str.length());"}]}