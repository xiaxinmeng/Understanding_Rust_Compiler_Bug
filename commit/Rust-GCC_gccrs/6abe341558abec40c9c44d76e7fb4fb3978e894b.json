{"sha": "6abe341558abec40c9c44d76e7fb4fb3978e894b", "node_id": "C_kwDOANBUbNoAKDZhYmUzNDE1NThhYmVjNDBjOWM0NGQ3NmU3ZmI0ZmIzOTc4ZTg5NGI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-14T15:19:32Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-14T20:07:48Z"}, "message": "libstdc++: Check lengths first in operator== for basic_string [PR62187]\n\nAs confirmed by LWG 2852, the calls to traits_type::compare do not need\nto be obsvervable, so we can make operator== compare string lengths\nfirst and return immediately for non-equal lengths. This avoids doing a\nslow string comparison for \"abc...xyz\" == \"abc...xy\". Previously we only\ndid this optimization for std::char_traits<char>, but we can enable it\nunconditionally thanks to LWG 2852.\n\nFor comparisons with a const char* we can call traits_type::length right\naway to do the same optimization. That strlen call can be folded away\nfor constant arguments, making it very efficient.\n\nFor the pre-C++20 operator== and operator!= overloads we can swap the\norder of the arguments to take advantage of the operator== improvements.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/62187\n\t* include/bits/basic_string.h (operator==): Always compare\n\tlengths before checking string contents.\n\t[!__cpp_lib_three_way_comparison] (operator==, operator!=):\n\tReorder arguments.", "tree": {"sha": "70cced94b085f2c16a8eae9081e68db42407f5d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70cced94b085f2c16a8eae9081e68db42407f5d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6abe341558abec40c9c44d76e7fb4fb3978e894b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe341558abec40c9c44d76e7fb4fb3978e894b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6abe341558abec40c9c44d76e7fb4fb3978e894b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6abe341558abec40c9c44d76e7fb4fb3978e894b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b65779f46f16b4fffd0591f5e58722c1e7cde8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b65779f46f16b4fffd0591f5e58722c1e7cde8d"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "57247e306dc5878b6b45c6195f82eacb77e47630", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6abe341558abec40c9c44d76e7fb4fb3978e894b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6abe341558abec40c9c44d76e7fb4fb3978e894b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=6abe341558abec40c9c44d76e7fb4fb3978e894b", "patch": "@@ -3627,17 +3627,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n     _GLIBCXX_NOEXCEPT\n-    { return __lhs.compare(__rhs) == 0; }\n-\n-  template<typename _CharT>\n-    _GLIBCXX20_CONSTEXPR\n-    inline\n-    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type\n-    operator==(const basic_string<_CharT>& __lhs,\n-\t       const basic_string<_CharT>& __rhs) _GLIBCXX_NOEXCEPT\n-    { return (__lhs.size() == __rhs.size()\n-\t      && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),\n-\t\t\t\t\t\t    __lhs.size())); }\n+    {\n+      return __lhs.size() == __rhs.size()\n+\t       && !_Traits::compare(__lhs.data(), __rhs.data(), __lhs.size());\n+    }\n \n   /**\n    *  @brief  Test equivalence of string and C string.\n@@ -3650,7 +3643,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \t       const _CharT* __rhs)\n-    { return __lhs.compare(__rhs) == 0; }\n+    {\n+      return __lhs.size() == _Traits::length(__rhs)\n+\t       && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());\n+    }\n \n #if __cpp_lib_three_way_comparison\n   /**\n@@ -3691,7 +3687,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator==(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    { return __rhs.compare(__lhs) == 0; }\n+    { return __rhs == __lhs; }\n \n   // operator !=\n   /**\n@@ -3717,7 +3713,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n     inline bool\n     operator!=(const _CharT* __lhs,\n \t       const basic_string<_CharT, _Traits, _Alloc>& __rhs)\n-    { return !(__lhs == __rhs); }\n+    { return !(__rhs == __lhs); }\n \n   /**\n    *  @brief  Test difference of string and C string."}]}