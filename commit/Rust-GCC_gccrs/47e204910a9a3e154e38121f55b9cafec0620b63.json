{"sha": "47e204910a9a3e154e38121f55b9cafec0620b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdlMjA0OTEwYTlhM2UxNTRlMzgxMjFmNTViOWNhZmVjMDYyMGI2Mw==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2005-03-12T10:44:06Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2005-03-12T10:44:06Z"}, "message": "Index: libcpp/ChangeLog\n2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n\n\t* directives.c (glue_header_name): Update call to cpp_spell_token.\n\t* internal.h (_cpp_interpret_identifier): New.\n\t* charset.c (_cpp_interpret_identifier): New.\n\t(_cpp_valid_ucn): Allow UCN version of '$'.\n\t* lex.c (lex_identifier): Add extra parameter to indicate if initial\n\tcharacter was '$' or '\\'.  Support identifiers with UCNs.\n\t(forms_identifier_p): Allow UCNs.\n\t(_cpp_lex_direct): Pass extra parameter to lex_identifier.\n\t(utf8_to_ucn): New.\n\t(cpp_spell_token): Add FORSTRING parameter.  Use it.\n\t(cpp_token_as_text): Update call to cpp_spell_token.\n\t(cpp_output_token): Write UCNs back out.\n\t(stringify_arg): Update call to cpp_spell_token.\n\t(paste_tokens): Likewise.\n\t(cpp_macro_definition): Likewise.\n\t* macro.c (stringify_arg): Likewise.\n\t(paste_tokens): Likewise.\n\t(cpp_macro_definition): Likewise.\n\t* include/cpplib.h: Add parameter to cpp_spell_token.\n\nIndex: gcc/ChangeLog\n2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n\n\t* c-lex.c (c_lex_with_flags): Add parameter to call to\n\tcpp_spell_token.\n\nIndex: gcc/testsuite/ChangeLog\n2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n\n\t* gcc.dg/ucnid-1.c: New.\n\t* gcc.dg/ucnid-2.c: New.\n\t* gcc.dg/ucnid-3.c: New.\n\t* gcc.dg/ucnid-4.c: New.\n\t* gcc.dg/ucnid-5.c: New.\n\t* gcc.dg/ucnid-6.c: New.\n\t* gcc.dg/cpp/ucnid-1.c: New.\n\t* gcc.dg/cpp/ucnid-2.c: New.\n\t* gcc.dg/cpp/ucnid-3.c: New.\n\t* g++.dg/other/ucnid-1.C: New.\n\nFrom-SVN: r96333", "tree": {"sha": "96b619db02d90b96e5dc09601db8bd7a58e95367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96b619db02d90b96e5dc09601db8bd7a58e95367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47e204910a9a3e154e38121f55b9cafec0620b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e204910a9a3e154e38121f55b9cafec0620b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47e204910a9a3e154e38121f55b9cafec0620b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47e204910a9a3e154e38121f55b9cafec0620b63/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5269bfe2809931ca62a0bcd8cad1bed7e78e5b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5269bfe2809931ca62a0bcd8cad1bed7e78e5b32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5269bfe2809931ca62a0bcd8cad1bed7e78e5b32"}], "stats": {"total": 477, "additions": 434, "deletions": 43}, "files": [{"sha": "b22a17ea8c07859a831ae84361eaba84772c5291", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -1,3 +1,8 @@\n+2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* c-lex.c (c_lex_with_flags): Add parameter to call to \n+\tcpp_spell_token.\n+\n 2005-03-11  Per Bothner  <per@bothner.com>\n \n \t* c-tree.h (struct c_declarator): New id_loc field."}, {"sha": "5be65f16f2bd3ec05bbb979448111684c9544a8d", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -425,7 +425,7 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags)\n       {\n \tunsigned char name[4];\n \t\n-\t*cpp_spell_token (parse_in, tok, name) = 0;\n+\t*cpp_spell_token (parse_in, tok, name, true) = 0;\n \t\n \terror (\"stray %qs in program\", name);\n       }"}, {"sha": "5e748ada5857beef5ce8c64fdbfbb684641f4598", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -1,3 +1,16 @@\n+2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.dg/ucnid-1.c: New.\n+\t* gcc.dg/ucnid-2.c: New.\n+\t* gcc.dg/ucnid-3.c: New.\n+\t* gcc.dg/ucnid-4.c: New.\n+\t* gcc.dg/ucnid-5.c: New.\n+\t* gcc.dg/ucnid-6.c: New.\n+\t* gcc.dg/cpp/ucnid-1.c: New.\n+\t* gcc.dg/cpp/ucnid-2.c: New.\n+\t* gcc.dg/cpp/ucnid-3.c: New.\n+\t* g++.dg/other/ucnid-1.C: New.\n+\n 2005-03-12  Geoffrey Keating  <geoffk@apple.com>\n \n \t* gcc.dg/vmx/darwin-abi-3.c: Delete."}, {"sha": "a5884bc8888764cb415eee0a804d5381f78b10ea", "filename": "gcc/testsuite/g++.dg/other/ucnid-1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fucnid-1.C?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+#include <cstdlib>\n+\n+int \\u00C0(void) { return 1; }\n+int \\u00C1(void) { return 2; }\n+int \\U000000C2(void) { return 3; }\n+int wh\\u00ff(void) { return 4; }\n+int a\\u00c4b\\u0441\\U000003b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0() != 1)\n+    abort ();\n+  if (\\u00c1() != 2)\n+    abort ();\n+  if (\\u00C2() != 3)\n+    abort ();\n+  if (wh\\u00ff() != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "bc516cae92ebdb078fffed49995cface57a01f20", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-1.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+void abort (void);\n+\n+#define \\u00C0 1\n+#define \\u00C1 2\n+#define \\U000000C2 3\n+#define wh\\u00ff 4\n+#define a\\u00c4b\\u0441\\U000003b4e 5\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0 != 1)\n+    abort ();\n+  if (\\u00c1 != 2)\n+    abort ();\n+  if (\\u00C2 != 3)\n+    abort ();\n+  if (wh\\u00ff != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "616680a969ee0d1066f641b0944215cd26553aaa", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-2.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define str(t) #t\n+\n+int main (void)\n+{\n+  const char s[] = str (\\u30b2);\n+\n+  if (strcmp (s, \"\\u30b2\") != 0)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "a910037c31627705f09508da093a9e5956e2dfb4", "filename": "gcc/testsuite/gcc.dg/cpp/ucnid-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fucnid-3.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#define paste(x, y) x ## y\n+\n+int paste(\\u00aa, \\u0531) = 3;\n+"}, {"sha": "a8d49a3e16d05e7b6bdacaca51a3e9e6b52262d2", "filename": "gcc/testsuite/gcc.dg/ucnid-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-1.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+void abort (void);\n+\n+int main (void)\n+{\n+  int \\u00C0 = 1;\n+  int \\u00C1 = 2;\n+  int \\U000000C2 = 3;\n+  int wh\\u00ff = 4;\n+  int a\\u00c4b\\u0441\\U000003b4e = 5;\n+  \n+  if (\\u00C0 != 1)\n+    abort ();\n+  if (\\u00c1 != 2)\n+    abort ();\n+  if (\\u00C2 != 3)\n+    abort ();\n+  if (wh\\u00ff != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "8288514ecd6749477e4b1c1cfe0b72ebd3f35e59", "filename": "gcc/testsuite/gcc.dg/ucnid-2.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-2.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+void abort (void);\n+\n+static int \\u00C0 = 1;\n+static int \\u00C1 = 2;\n+static int \\U000000C2 = 3;\n+static int wh\\u00ff = 4;\n+static int a\\u00c4b\\u0441\\U000003b4e = 5;\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0 != 1)\n+    abort ();\n+  if (\\u00c1 != 2)\n+    abort ();\n+  if (\\u00C2 != 3)\n+    abort ();\n+  if (wh\\u00ff != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "66e84141fdf1d522bf25a5fddc23cbb2b3de39dd", "filename": "gcc/testsuite/gcc.dg/ucnid-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-3.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+void abort (void);\n+\n+int \\u00C0 = 1;\n+int \\u00C1 = 2;\n+int \\U000000C2 = 3;\n+int wh\\u00ff = 4;\n+int a\\u00c4b\\u0441\\U000003b4e = 5;\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0 != 1)\n+    abort ();\n+  if (\\u00c1 != 2)\n+    abort ();\n+  if (\\u00C2 != 3)\n+    abort ();\n+  if (wh\\u00ff != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "35725a35f9408e937c8b767e6986057713a7eb63", "filename": "gcc/testsuite/gcc.dg/ucnid-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-4.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99\" } */\n+void abort (void);\n+\n+int \\u00C0(void) { return 1; }\n+int \\u00C1(void) { return 2; }\n+int \\U000000C2(void) { return 3; }\n+int wh\\u00ff(void) { return 4; }\n+int a\\u00c4b\\u0441\\U000003b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0() != 1)\n+    abort ();\n+  if (\\u00c1() != 2)\n+    abort ();\n+  if (\\u00C2() != 3)\n+    abort ();\n+  if (wh\\u00ff() != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "08cd9c2bf7d57c13dcbe8a3c2fc4c433ff0362cb", "filename": "gcc/testsuite/gcc.dg/ucnid-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-5.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -fdollars-in-identifiers\" } */\n+void abort (void);\n+\n+int a$b(void) { return 1; }\n+\n+int main (void)\n+{\n+  \n+  if (a\\u0024b() != 1)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "61c8c3e089a4a97598995c8d2d14337243f88e5c", "filename": "gcc/testsuite/gcc.dg/ucnid-6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-6.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do run } */\n+/* { dg-options \"-std=c99 -save-temps\" } */\n+void abort (void);\n+\n+int \\u00C0(void) { return 1; }\n+int \\u00C1(void) { return 2; }\n+int \\U000000C2(void) { return 3; }\n+int wh\\u00ff(void) { return 4; }\n+int a\\u00c4b\\u0441\\U000003b4e(void) { return 5; }\n+\n+int main (void)\n+{\n+  \n+  if (\\u00C0() != 1)\n+    abort ();\n+  if (\\u00c1() != 2)\n+    abort ();\n+  if (\\u00C2() != 3)\n+    abort ();\n+  if (wh\\u00ff() != 4)\n+    abort ();\n+  if (a\\u00c4b\\u0441\\U000003b4e() != 5)\n+    abort ();\n+  \n+  return 0;\n+}"}, {"sha": "5190599b9b0759a06a3e3e6af774c3d44369d2cf", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -1,3 +1,25 @@\n+2005-03-11  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* directives.c (glue_header_name): Update call to cpp_spell_token.\n+\t* internal.h (_cpp_interpret_identifier): New.\n+\t* charset.c (_cpp_interpret_identifier): New.\n+\t(_cpp_valid_ucn): Allow UCN version of '$'.\n+\t* lex.c (lex_identifier): Add extra parameter to indicate if initial\n+\tcharacter was '$' or '\\'.  Support identifiers with UCNs.\n+\t(forms_identifier_p): Allow UCNs.\n+\t(_cpp_lex_direct): Pass extra parameter to lex_identifier.\n+\t(utf8_to_ucn): New.\n+\t(cpp_spell_token): Add FORSTRING parameter.  Use it.\n+\t(cpp_token_as_text): Update call to cpp_spell_token.\n+\t(cpp_output_token): Write UCNs back out.\n+\t(stringify_arg): Update call to cpp_spell_token.\n+\t(paste_tokens): Likewise.\n+\t(cpp_macro_definition): Likewise.\n+\t* macro.c (stringify_arg): Likewise.\n+\t(paste_tokens): Likewise.\n+\t(cpp_macro_definition): Likewise.\n+\t* include/cpplib.h: Add parameter to cpp_spell_token.\n+\n 2005-03-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/20282"}, {"sha": "cd25f10a2e69fae2f969a6e2fc0a54d37547a2c4", "filename": "libcpp/charset.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -907,6 +907,15 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n \t\t (int) (str - base), base);\n       result = 1;\n     }\n+  else if (identifier_pos && result == 0x24 \n+\t   && CPP_OPTION (pfile, dollars_in_ident))\n+    {\n+      if (CPP_OPTION (pfile, warn_dollars) && !pfile->state.skipping)\n+\t{\n+\t  CPP_OPTION (pfile, warn_dollars) = 0;\n+\t  cpp_error (pfile, CPP_DL_PEDWARN, \"'$' in identifier or number\");\n+\t}\n+    }\n   else if (identifier_pos)\n     {\n       int validity = ucn_valid_in_identifier (pfile, result);\n@@ -1414,7 +1423,60 @@ cpp_interpret_charconst (cpp_reader *pfile, const cpp_token *token,\n \n   return result;\n }\n+\f\n+/* Convert an identifier denoted by ID and LEN, which might contain\n+   UCN escapes, to the source character set, either UTF-8 or\n+   UTF-EBCDIC.  Assumes that the identifier is actually a valid identifier.  */\n+cpp_hashnode *\n+_cpp_interpret_identifier (cpp_reader *pfile, const uchar *id, size_t len)\n+{\n+  /* It turns out that a UCN escape always turns into fewer characters\n+     than the escape itself, so we can allocate a temporary in advance.  */\n+  uchar * buf = alloca (len + 1);\n+  uchar * bufp = buf;\n+  size_t idp;\n+  \n+  for (idp = 0; idp < len; idp++)\n+    if (id[idp] != '\\\\')\n+      *bufp++ = id[idp];\n+    else\n+      {\n+\tunsigned length = id[idp+1] == 'u' ? 4 : 8;\n+\tcppchar_t value = 0;\n+\tsize_t bufleft = len - (bufp - buf);\n+\tint rval;\n+\n+\tidp += 2;\n+\twhile (length && idp < len && ISXDIGIT (id[idp]))\n+\t  {\n+\t    value = (value << 4) + hex_value (id[idp]);\n+\t    idp++;\n+\t    length--;\n+\t  }\n+\tidp--;\n+\n+\t/* Special case for EBCDIC: if the identifier contains\n+\t   a '$' specified using a UCN, translate it to EBCDIC.  */\n+\tif (value == 0x24)\n+\t  {\n+\t    *bufp++ = '$';\n+\t    continue;\n+\t  }\n+\n+\trval = one_cppchar_to_utf8 (value, &bufp, &bufleft);\n+\tif (rval)\n+\t  {\n+\t    errno = rval;\n+\t    cpp_errno (pfile, CPP_DL_ERROR,\n+\t\t       \"converting UCN to source character set\");\n+\t    break;\n+\t  }\n+      }\n \n+  return CPP_HASHNODE (ht_lookup (pfile->hash_table, \n+\t\t\t\t  buf, bufp - buf, HT_ALLOC));\n+}\n+\f\n /* Convert an input buffer (containing the complete contents of one\n    source file) from INPUT_CHARSET to the source character set.  INPUT\n    points to the input buffer, SIZE is its allocated size, and LEN is"}, {"sha": "957e879caec72642cc7bc3919d0fa14e22650c37", "filename": "libcpp/directives.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -608,7 +608,8 @@ glue_header_name (cpp_reader *pfile)\n       if (token->flags & PREV_WHITE)\n \tbuffer[total_len++] = ' ';\n \n-      total_len = (cpp_spell_token (pfile, token, (uchar *) &buffer[total_len])\n+      total_len = (cpp_spell_token (pfile, token, (uchar *) &buffer[total_len],\n+\t\t\t\t    true)\n \t\t   - (uchar *) buffer);\n     }\n "}, {"sha": "ccf8bff47e427887a9885cfa5ce29a5c53050f50", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -637,7 +637,7 @@ extern unsigned int cpp_errors (cpp_reader *);\n extern unsigned int cpp_token_len (const cpp_token *);\n extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);\n extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,\n-\t\t\t\t       unsigned char *);\n+\t\t\t\t       unsigned char *, bool);\n extern void cpp_register_pragma (cpp_reader *, const char *, const char *,\n \t\t\t\t void (*) (cpp_reader *), bool);\n extern void cpp_handle_deferred_pragma (cpp_reader *, const cpp_string *);"}, {"sha": "af823d766b36790c035ec273248e5f581bca44d6", "filename": "libcpp/internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -571,6 +571,9 @@ extern unsigned char *_cpp_convert_input (cpp_reader *, const char *,\n \t\t\t\t\t  unsigned char *, size_t, size_t,\n \t\t\t\t\t  off_t *);\n extern const char *_cpp_default_encoding (void);\n+extern cpp_hashnode * _cpp_interpret_identifier (cpp_reader *pfile,\n+\t\t\t\t\t\t const unsigned char *id,\n+\t\t\t\t\t\t size_t len);\n \n /* Utility routines and macros.  */\n #define DSC(str) (const unsigned char *)str, sizeof str - 1"}, {"sha": "8398c7ca06122480e4718fbc246080987e3faa77", "filename": "libcpp/lex.c", "status": "modified", "additions": 103, "deletions": 35, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -53,7 +53,7 @@ static const struct token_spelling token_spellings[N_TTYPES] = { TTYPE_TABLE };\n static void add_line_note (cpp_buffer *, const uchar *, unsigned int);\n static int skip_line_comment (cpp_reader *);\n static void skip_whitespace (cpp_reader *, cppchar_t);\n-static cpp_hashnode *lex_identifier (cpp_reader *, const uchar *);\n+static cpp_hashnode *lex_identifier (cpp_reader *, const uchar *, bool);\n static void lex_number (cpp_reader *, cpp_string *);\n static bool forms_identifier_p (cpp_reader *, int);\n static void lex_string (cpp_reader *, cpp_token *, const uchar *);\n@@ -453,7 +453,7 @@ forms_identifier_p (cpp_reader *pfile, int first)\n     }\n \n   /* Is this a syntactically valid UCN?  */\n-  if (0 && *buffer->cur == '\\\\'\n+  if (*buffer->cur == '\\\\'\n       && (buffer->cur[1] == 'u' || buffer->cur[1] == 'U'))\n     {\n       buffer->cur += 2;\n@@ -467,39 +467,39 @@ forms_identifier_p (cpp_reader *pfile, int first)\n \n /* Lex an identifier starting at BUFFER->CUR - 1.  */\n static cpp_hashnode *\n-lex_identifier (cpp_reader *pfile, const uchar *base)\n+lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn)\n {\n   cpp_hashnode *result;\n-  const uchar *cur, *limit;\n+  const uchar *cur;\n   unsigned int len;\n   unsigned int hash = HT_HASHSTEP (0, *base);\n \n   cur = pfile->buffer->cur;\n-  for (;;)\n+  if (! starts_ucn)\n+    while (ISIDNUM (*cur))\n+      {\n+\thash = HT_HASHSTEP (hash, *cur);\n+\tcur++;\n+      }\n+  pfile->buffer->cur = cur;\n+  if (starts_ucn || forms_identifier_p (pfile, false))\n     {\n-      /* N.B. ISIDNUM does not include $.  */\n-      while (ISIDNUM (*cur))\n-\t{\n-\t  hash = HT_HASHSTEP (hash, *cur);\n-\t  cur++;\n-\t}\n-\n-      pfile->buffer->cur = cur;\n-      if (!forms_identifier_p (pfile, false))\n-\tbreak;\n-\n-      limit = pfile->buffer->cur;\n-      while (cur < limit)\n-\t{\n-\t  hash = HT_HASHSTEP (hash, *cur);\n-\t  cur++;\n-\t}\n+      /* Slower version for identifiers containing UCNs (or $).  */\n+      do {\n+\twhile (ISIDNUM (*pfile->buffer->cur))\n+\t  pfile->buffer->cur++;\n+      } while (forms_identifier_p (pfile, false));\n+      result = _cpp_interpret_identifier (pfile, base,\n+\t\t\t\t\t  pfile->buffer->cur - base);\n     }\n-  len = cur - base;\n-  hash = HT_HASHFINISH (hash, len);\n+  else\n+    {\n+      len = cur - base;\n+      hash = HT_HASHFINISH (hash, len);\n \n-  result = (cpp_hashnode *)\n-    ht_lookup_with_hash (pfile->hash_table, base, len, hash, HT_ALLOC);\n+      result = (cpp_hashnode *)\n+\tht_lookup_with_hash (pfile->hash_table, base, len, hash, HT_ALLOC);\n+    }\n \n   /* Rarely, identifiers require diagnostics when lexed.  */\n   if (__builtin_expect ((result->flags & NODE_DIAGNOSTIC)\n@@ -922,7 +922,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n     case 'S': case 'T': case 'U': case 'V': case 'W': case 'X':\n     case 'Y': case 'Z':\n       result->type = CPP_NAME;\n-      result->val.node = lex_identifier (pfile, buffer->cur - 1);\n+      result->val.node = lex_identifier (pfile, buffer->cur - 1, false);\n \n       /* Convert named operators to their proper types.  */\n       if (result->val.node->flags & NODE_OPERATOR)\n@@ -1155,7 +1155,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \tif (forms_identifier_p (pfile, true))\n \t  {\n \t    result->type = CPP_NAME;\n-\t    result->val.node = lex_identifier (pfile, base);\n+\t    result->val.node = lex_identifier (pfile, base, true);\n \t    break;\n \t  }\n \tbuffer->cur++;\n@@ -1180,19 +1180,56 @@ cpp_token_len (const cpp_token *token)\n     {\n     default:\t\tlen = 4;\t\t\t\tbreak;\n     case SPELL_LITERAL:\tlen = token->val.str.len;\t\tbreak;\n-    case SPELL_IDENT:\tlen = NODE_LEN (token->val.node);\tbreak;\n+    case SPELL_IDENT:\tlen = NODE_LEN (token->val.node) * 10;\tbreak;\n     }\n \n   return len;\n }\n \n+/* Parse UTF-8 out of NAMEP and place a \\U escape in BUFFER.\n+   Return the number of bytes read out of NAME.  (There are always\n+   10 bytes written to BUFFER.)  */\n+\n+static size_t\n+utf8_to_ucn (unsigned char *buffer, const unsigned char *name)\n+{\n+  int j;\n+  int ucn_len = 0;\n+  int ucn_len_c;\n+  unsigned t;\n+  unsigned long utf32;\n+  \n+  /* Compute the length of the UTF-8 sequence.  */\n+  for (t = *name; t & 0x80; t <<= 1)\n+    ucn_len++;\n+  \n+  utf32 = *name & (0x7F >> ucn_len);\n+  for (ucn_len_c = 1; ucn_len_c < ucn_len; ucn_len_c++)\n+    {\n+      utf32 = (utf32 << 6) | (*++name & 0x3F);\n+      \n+      /* Ill-formed UTF-8.  */\n+      if ((*name & ~0x3F) != 0x80)\n+\tabort ();\n+    }\n+  \n+  *buffer++ = '\\\\';\n+  *buffer++ = 'U';\n+  for (j = 7; j >= 0; j--)\n+    *buffer++ = \"0123456789abcdef\"[(utf32 >> (4 * j)) & 0xF];\n+  return ucn_len;\n+}\n+\n+\n /* Write the spelling of a token TOKEN to BUFFER.  The buffer must\n    already contain the enough space to hold the token's spelling.\n    Returns a pointer to the character after the last character written.\n+   FORSTRING is true if this is to be the spelling after translation\n+   phase 1 (this is different for UCNs).\n    FIXME: Would be nice if we didn't need the PFILE argument.  */\n unsigned char *\n cpp_spell_token (cpp_reader *pfile, const cpp_token *token,\n-\t\t unsigned char *buffer)\n+\t\t unsigned char *buffer, bool forstring)\n {\n   switch (TOKEN_SPELL (token))\n     {\n@@ -1216,8 +1253,26 @@ cpp_spell_token (cpp_reader *pfile, const cpp_token *token,\n \n     spell_ident:\n     case SPELL_IDENT:\n-      memcpy (buffer, NODE_NAME (token->val.node), NODE_LEN (token->val.node));\n-      buffer += NODE_LEN (token->val.node);\n+      if (forstring)\n+\t{\n+\t  memcpy (buffer, NODE_NAME (token->val.node),\n+\t\t  NODE_LEN (token->val.node));\n+\t  buffer += NODE_LEN (token->val.node);\n+\t}\n+      else\n+\t{\n+\t  size_t i;\n+\t  const unsigned char * name = NODE_NAME (token->val.node);\n+\t  \n+\t  for (i = 0; i < NODE_LEN (token->val.node); i++)\n+\t    if (name[i] & ~0x7F)\n+\t      {\n+\t\ti += utf8_to_ucn (buffer, name + i) - 1;\n+\t\tbuffer += 10;\n+\t      }\n+\t    else\n+\t      *buffer++ = NODE_NAME (token->val.node)[i];\n+\t}\n       break;\n \n     case SPELL_LITERAL:\n@@ -1242,7 +1297,7 @@ cpp_token_as_text (cpp_reader *pfile, const cpp_token *token)\n   unsigned int len = cpp_token_len (token) + 1;\n   unsigned char *start = _cpp_unaligned_alloc (pfile, len), *end;\n \n-  end = cpp_spell_token (pfile, token, start);\n+  end = cpp_spell_token (pfile, token, start, false);\n   end[0] = '\\0';\n \n   return start;\n@@ -1286,8 +1341,21 @@ cpp_output_token (const cpp_token *token, FILE *fp)\n \n     spell_ident:\n     case SPELL_IDENT:\n-      fwrite (NODE_NAME (token->val.node), 1, NODE_LEN (token->val.node), fp);\n-    break;\n+      {\n+\tsize_t i;\n+\tconst unsigned char * name = NODE_NAME (token->val.node);\n+\t\n+\tfor (i = 0; i < NODE_LEN (token->val.node); i++)\n+\t  if (name[i] & ~0x7F)\n+\t    {\n+\t      unsigned char buffer[10];\n+\t      i += utf8_to_ucn (buffer, name + i) - 1;\n+\t      fwrite (buffer, 1, 10, fp);\n+\t    }\n+\t  else\n+\t    fputc (NODE_NAME (token->val.node)[i], fp);\n+      }\n+      break;\n \n     case SPELL_LITERAL:\n       fwrite (token->val.str.text, 1, token->val.str.len, fp);"}, {"sha": "441b3b32ed30e12909cb2e2e821452c6eafefc14", "filename": "libcpp/macro.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47e204910a9a3e154e38121f55b9cafec0620b63/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=47e204910a9a3e154e38121f55b9cafec0620b63", "patch": "@@ -380,12 +380,12 @@ stringify_arg (cpp_reader *pfile, macro_arg *arg)\n \t{\n \t  _cpp_buff *buff = _cpp_get_buff (pfile, len);\n \t  unsigned char *buf = BUFF_FRONT (buff);\n-\t  len = cpp_spell_token (pfile, token, buf) - buf;\n+\t  len = cpp_spell_token (pfile, token, buf, true) - buf;\n \t  dest = cpp_quote_string (dest, buf, len);\n \t  _cpp_release_buff (pfile, buff);\n \t}\n       else\n-\tdest = cpp_spell_token (pfile, token, dest);\n+\tdest = cpp_spell_token (pfile, token, dest, true);\n \n       if (token->type == CPP_OTHER && token->val.str.text[0] == '\\\\')\n \tbackslash_count++;\n@@ -422,15 +422,15 @@ paste_tokens (cpp_reader *pfile, const cpp_token **plhs, const cpp_token *rhs)\n   lhs = *plhs;\n   len = cpp_token_len (lhs) + cpp_token_len (rhs) + 1;\n   buf = alloca (len);\n-  end = cpp_spell_token (pfile, lhs, buf);\n+  end = cpp_spell_token (pfile, lhs, buf, false);\n \n   /* Avoid comment headers, since they are still processed in stage 3.\n      It is simpler to insert a space here, rather than modifying the\n      lexer to ignore comments in some circumstances.  Simply returning\n      false doesn't work, since we want to clear the PASTE_LEFT flag.  */\n   if (lhs->type == CPP_DIV && rhs->type != CPP_EQ)\n     *end++ = ' ';\n-  end = cpp_spell_token (pfile, rhs, end);\n+  end = cpp_spell_token (pfile, rhs, end, false);\n   *end = '\\n';\n \n   cpp_push_buffer (pfile, buf, end - buf, /* from_stage3 */ true);\n@@ -1751,7 +1751,7 @@ cpp_macro_definition (cpp_reader *pfile, const cpp_hashnode *node)\n \t      buffer += NODE_LEN (macro->params[token->val.arg_no - 1]);\n \t    }\n \t  else\n-\t    buffer = cpp_spell_token (pfile, token, buffer);\n+\t    buffer = cpp_spell_token (pfile, token, buffer, false);\n \n \t  if (token->flags & PASTE_LEFT)\n \t    {"}]}