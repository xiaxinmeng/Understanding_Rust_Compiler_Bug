{"sha": "c048d56d7e1750c411ffc7f67415beab926c1d05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA0OGQ1NmQ3ZTE3NTBjNDExZmZjN2Y2NzQxNWJlYWI5MjZjMWQwNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-20T14:03:34Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-20T14:03:34Z"}, "message": "class.c, [...]: Fix comment typos.\n\n\t* class.c, gjavah.c, lang.c: Fix comment typos.\n\t* gcj.texi: Fix typos.\n\nFrom-SVN: r79744", "tree": {"sha": "7b1e1d68050cd2ac5999513fc27276e739d856d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b1e1d68050cd2ac5999513fc27276e739d856d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c048d56d7e1750c411ffc7f67415beab926c1d05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c048d56d7e1750c411ffc7f67415beab926c1d05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c048d56d7e1750c411ffc7f67415beab926c1d05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c048d56d7e1750c411ffc7f67415beab926c1d05/comments", "author": null, "committer": null, "parents": [{"sha": "9c024d9c08822b3241c9cb91b2f2e40ac19b75d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c024d9c08822b3241c9cb91b2f2e40ac19b75d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c024d9c08822b3241c9cb91b2f2e40ac19b75d5"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "a0e95a70c77aeb33dc47f52783d038f9bc358f7c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=c048d56d7e1750c411ffc7f67415beab926c1d05", "patch": "@@ -1,3 +1,8 @@\n+2004-03-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* class.c, gjavah.c, lang.c: Fix comment typos.\n+\t* gcj.texi: Fix typos.\n+\n 2004-03-19  Per Bothner  <per@bothner.com>\n \n \t* gcj.texi (Code Generation):  Document new flags and assert defaults."}, {"sha": "66bdeb934fd834d8ab1a1641957cf92157345cfb", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c048d56d7e1750c411ffc7f67415beab926c1d05", "patch": "@@ -201,7 +201,7 @@ add_assume_compiled (const char *ident, int excludep)\n   add_class_flag (&assume_compiled_tree, ident, excludep);\n }\n \n-/* The default value returned by enable_asserstions. */\n+/* The default value returned by enable_assertions. */\n \n #define DEFAULT_ENABLE_ASSERT (flag_emit_class_files || optimize == 0)\n \n@@ -240,7 +240,7 @@ assume_compiled (const char *ident)\n bool\n enable_assertions (tree klass)\n {\n-  /* Check if command-line specifies whether we should check asserrtions. */\n+  /* Check if command-line specifies whether we should check assertions. */\n \n   if (klass != NULL_TREE && DECL_NAME (klass) && enable_assert_tree != NULL)\n     {"}, {"sha": "a42e203a617bdb856dbf3afb98cf940ab6fa6665", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=c048d56d7e1750c411ffc7f67415beab926c1d05", "patch": "@@ -435,15 +435,15 @@ optimization off, regardless of the optimization level in use.\n @item --disable-assertions[=@var{class-or-package}]\n Don't include code for checking assertions in the compiled code.\n If @code{=@var{class-or-package}} is missing disables assertion code\n-generation for all classes, unless overrideen by a more\n+generation for all classes, unless overridden by a more\n specific @code{--enable-assertions} flag.\n If @var{class-or-package} is a class name, only disables generating\n assertion checks within the named class or its inner classes.\n If @var{class-or-package} is a package name, disables generating\n assertion checks within the named package or a subpackage.\n \n By default, assertions are enabled when generating class files\n-or when not optimizaing, and disabled when generating optimized binaries.\n+or when not optimizing, and disabled when generating optimized binaries.\n \n @item --enable-assertions[=@var{class-or-package}]\n Generates code to check assertions.  The option is perhaps misnamed,"}, {"sha": "0a09ab6c1378cc9b3bfba7de7bfd233e09c64955", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=c048d56d7e1750c411ffc7f67415beab926c1d05", "patch": "@@ -1416,7 +1416,7 @@ print_c_decl (FILE* stream, JCF* jcf, int name_index, int signature_index,\n \t}\n \n       /* Force the alignment of the first data member.  This is\n-\t because the \"new\" C++ ABI changed the alignemnt of non-POD\n+\t because the \"new\" C++ ABI changed the alignment of non-POD\n \t classes.  gcj, however, still uses the \"old\" alignment.  */\n       if (is_first_data_member && ! (flags & ACC_STATIC) && ! is_method)\n \t{"}, {"sha": "4856e5f9c6e1714d77f0b3ad8aaf2e3861524396", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c048d56d7e1750c411ffc7f67415beab926c1d05/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=c048d56d7e1750c411ffc7f67415beab926c1d05", "patch": "@@ -949,7 +949,7 @@ merge_init_test_initialization (void **entry, void *x)\n   \n   However, what if the method that is suppoed to do the initialization\n   is itself inlined in the caller?  When expanding the called method\n-  we'll assume that the class initalization has already been done,\n+  we'll assume that the class initialization has already been done,\n   because the DECL_INITIAL of the init_test_decl is set.\n   \n   To fix this we remove the DECL_INITIAL (in the caller scope) of all"}]}