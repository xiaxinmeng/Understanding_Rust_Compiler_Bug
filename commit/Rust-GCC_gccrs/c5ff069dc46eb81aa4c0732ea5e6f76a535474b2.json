{"sha": "c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVmZjA2OWRjNDZlYjgxYWE0YzA3MzJlYTVlNmY3NmE1MzU0NzRiMg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2005-02-20T17:01:32Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2005-02-20T17:01:32Z"}, "message": "re PR middle-end/18785 (isdigit builtin function fails with EBCDIC character sets)\n\n\tPR 18785\nlibcpp:\n\t* charset.c (LAST_POSSIBLY_BASIC_SOURCE_CHAR): New helper macro.\n\t(cpp_host_to_exec_charset): New function.\n\t* include/cpplib.h: Declare cpp_host_to_exec_charset.\n\ngcc:\n\t* langhooks.h (struct lang_hooks): Add to_target_charset.\n\t* langhooks.c (lhd_to_target_charset): New function.\n\t* langhooks-def.h: Declare lhd_to_target_charset.\n\t(LANG_HOOKS_TO_TARGET_CHARSET): New macro.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* c-common.c (c_common_to_target_charset): New function.\n\t* c-common.h: Declare it.\n\t* c-objc-common.h (LANG_HOOKS_TO_TARGET_CHARSET): Set to\n\tc_common_to_target_charset.\n\n\t* defaults.c (TARGET_BELL, TARGET_BS, TARGET_CR, TARGET_DIGIT0)\n\t(TARGET_ESC, TARGET_FF, TARGET_NEWLINE, TARGET_TAB, TARGET_VT):\n\tDelete definitions.\n\t* system.h: Poison them.\n\t* doc/tm.texi: Don't discuss them.\n\t* builtins.c (fold_builtin_isdigit): Use lang_hooks.to_target_charset.\n\t* c-pretty-print.c (pp_c_integer_constant): Don't use pp_c_char.\n\t(pp_c_char): Do not attempt to generate letter escapes for\n\tnewline, tab, etc.\n\t* config/arm/arm.c (output_ascii_pseudo_op): Likewise.\n\t* config/mips/mips.c (mips_output_ascii): Likewise.\ngcc/cp:\n\t* cp-objcp-common.h (LANG_HOOKS_TO_TARGET_CHARSET): Set to\n\tc_common_to_target_charset.  Delete bogus comment.\ngcc/testsuite:\n\t* gcc.dg/charset/builtin1.c: New test.\n\nFrom-SVN: r95304", "tree": {"sha": "60cdafb935d90504cac1d3437ff96f90d70b9c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60cdafb935d90504cac1d3437ff96f90d70b9c09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/comments", "author": null, "committer": null, "parents": [{"sha": "5920b5d2e8ead646a8cbb66847a4586b4db16ad6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5920b5d2e8ead646a8cbb66847a4586b4db16ad6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5920b5d2e8ead646a8cbb66847a4586b4db16ad6"}], "stats": {"total": 695, "additions": 370, "deletions": 325}, "files": [{"sha": "bdc63518d3253fd3c1420b4f5c5ce686e86ac53a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -1,12 +1,37 @@\n+2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18785\n+\t* langhooks.h (struct lang_hooks): Add to_target_charset.\n+\t* langhooks.c (lhd_to_target_charset): New function.\n+\t* langhooks-def.h: Declare lhd_to_target_charset.\n+\t(LANG_HOOKS_TO_TARGET_CHARSET): New macro.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* c-common.c (c_common_to_target_charset): New function.\n+\t* c-common.h: Declare it.\n+\t* c-objc-common.h (LANG_HOOKS_TO_TARGET_CHARSET): Set to\n+\tc_common_to_target_charset.\n+\n+\t* defaults.c (TARGET_BELL, TARGET_BS, TARGET_CR, TARGET_DIGIT0)\n+\t(TARGET_ESC, TARGET_FF, TARGET_NEWLINE, TARGET_TAB, TARGET_VT):\n+\tDelete definitions.\n+\t* system.h: Poison them.\n+\t* doc/tm.texi: Don't discuss them.\n+\t* builtins.c (fold_builtin_isdigit): Use lang_hooks.to_target_charset.\n+\t* c-pretty-print.c (pp_c_integer_constant): Don't use pp_c_char.\n+\t(pp_c_char): Do not attempt to generate letter escapes for\n+\tnewline, tab, etc.\n+\t* config/arm/arm.c (output_ascii_pseudo_op): Likewise.\n+\t* config/mips/mips.c (mips_output_ascii): Likewise.\n+\n 2005-02-20  Dorit Naishlos  <dorit@il.ibm.com>\n \n \tPR tree-optimization/19951\n \t* tree-vect-analyze.c (vect_analyze_loop_form): Check if loop exit edge\n \tis abnormal.\n-\t\n+\n 2005-02-19  Steven Bosscher  <stevenb@suse.de>\n \n-\tPR middle-end/19698 \n+\tPR middle-end/19698\n \t* function.h (struct function): New field `max_loop_depth'.\n \t* cfgloop.c (establish_preds): Update maximum loop depth seen so far.\n \t(flow_loops_find): Reset the max loop depth count before finding loops."}, {"sha": "f0dd878d36b9d99063b04962cad423ce9dcd8f20", "filename": "gcc/builtins.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -7623,11 +7623,18 @@ fold_builtin_isdigit (tree arglist)\n   else\n     {\n       /* Transform isdigit(c) -> (unsigned)(c) - '0' <= 9.  */\n-      /* According to the C standard, isdigit is unaffected by locale.  */\n-      tree arg = TREE_VALUE (arglist);\n-      arg = fold_convert (unsigned_type_node, arg);\n+      /* According to the C standard, isdigit is unaffected by locale.\n+\t However, it definitely is affected by the target character set.  */\n+      tree arg;\n+      unsigned HOST_WIDE_INT target_digit0\n+\t= lang_hooks.to_target_charset ('0');\n+\n+      if (target_digit0 == 0)\n+\treturn NULL_TREE;\n+\n+      arg = fold_convert (unsigned_type_node, TREE_VALUE (arglist));\n       arg = build2 (MINUS_EXPR, unsigned_type_node, arg,\n-\t\t    build_int_cst (unsigned_type_node, TARGET_DIGIT0));\n+\t\t    build_int_cst (unsigned_type_node, target_digit0));\n       arg = build2 (LE_EXPR, integer_type_node, arg,\n \t\t    build_int_cst (unsigned_type_node, 9));\n       arg = fold (arg);"}, {"sha": "a4dfdd84136bd3370ca6faf4d1dcc337f2d4f2f6", "filename": "gcc/c-common.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -5620,6 +5620,27 @@ c_warn_unused_result (tree *top_p)\n     }\n }\n \n+/* Convert a character from the host to the target execution character\n+   set.  cpplib handles this, mostly.  */\n+\n+HOST_WIDE_INT\n+c_common_to_target_charset (HOST_WIDE_INT c)\n+{\n+  /* Character constants in GCC proper are sign-extended under -fsigned-char,\n+     zero-extended under -fno-signed-char.  cpplib insists that characters\n+     and character constants are always unsigned.  Hence we must convert\n+     back and forth.  */\n+  cppchar_t uc = ((cppchar_t)c) & ((((cppchar_t)1) << CHAR_BIT)-1);\n+\n+  uc = cpp_host_to_exec_charset (parse_in, uc);\n+\n+  if (flag_signed_char)\n+    return ((HOST_WIDE_INT)uc) << (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE)\n+\t\t\t       >> (HOST_BITS_PER_WIDE_INT - CHAR_TYPE_SIZE);\n+  else\n+    return uc;\n+}\n+\n /* Build the result of __builtin_offsetof.  EXPR is a nested sequence of\n    component references, with an INDIRECT_REF at the bottom; much like\n    the traditional rendering of offsetof as a macro.  Returns the folded"}, {"sha": "91be602066b40d292ba6bd00495391e623390e84", "filename": "gcc/c-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -688,12 +688,14 @@ extern bool c_promoting_integer_type_p (tree);\n extern int self_promoting_args_p (tree);\n extern tree strip_array_types (tree);\n extern tree strip_pointer_operator (tree);\n+extern HOST_WIDE_INT c_common_to_target_charset (HOST_WIDE_INT);\n \n /* This is the basic parsing function.  */\n extern void c_parse_file (void);\n /* This is misnamed, it actually performs end-of-compilation processing.  */\n extern void finish_file\t(void);\n \n+\n /* These macros provide convenient access to the various _STMT nodes.  */\n \n /* Nonzero if this statement should be considered a full-expression,"}, {"sha": "c0eb844c06e30d132597eac06eb55a8023e9c984", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -117,6 +117,8 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #define LANG_HOOKS_TYPE_PROMOTES_TO c_type_promotes_to\n #undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n+#undef LANG_HOOKS_TO_TARGET_CHARSET\n+#define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n \n /* The C front end's scoping structure is very different from\n    that expected by the language-independent code; it is best"}, {"sha": "aff29d975807afb76600f5456a18eeb5bd7030ec", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 26, "deletions": 39, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -712,50 +712,37 @@ pp_c_function_definition (c_pretty_printer *pp, tree t)\n \f\n /* Expressions.  */\n \n-/* Print out a c-char.  */\n+/* Print out a c-char.  This is called solely for characters which are\n+   in the *target* execution character set.  We ought to convert them\n+   back to the *host* execution character set before printing, but we\n+   have no way to do this at present.  A decent compromise is to print\n+   all characters as if they were in the host execution character set,\n+   and not attempt to recover any named escape characters, but render\n+   all unprintables as octal escapes.  If the host and target character\n+   sets are the same, this produces relatively readable output.  If they\n+   are not the same, strings may appear as gibberish, but that's okay\n+   (in fact, it may well be what the reader wants, e.g. if they are looking\n+   to see if conversion to the target character set happened correctly).\n+\n+   A special case: we need to prefix \\, \", and ' with backslashes.  It is\n+   correct to do so for the *host*'s \\, \", and ', because the rest of the\n+   file appears in the host character set.  */\n \n static void\n pp_c_char (c_pretty_printer *pp, int c)\n {\n-  switch (c)\n+  if (ISPRINT (c))\n     {\n-    case TARGET_NEWLINE:\n-      pp_string (pp, \"\\\\n\");\n-      break;\n-    case TARGET_TAB:\n-      pp_string (pp, \"\\\\t\");\n-      break;\n-    case TARGET_VT:\n-      pp_string (pp, \"\\\\v\");\n-      break;\n-    case TARGET_BS:\n-      pp_string (pp, \"\\\\b\");\n-      break;\n-    case TARGET_CR:\n-      pp_string (pp, \"\\\\r\");\n-      break;\n-    case TARGET_FF:\n-      pp_string (pp, \"\\\\f\");\n-      break;\n-    case TARGET_BELL:\n-      pp_string (pp, \"\\\\a\");\n-      break;\n-    case '\\\\':\n-      pp_string (pp, \"\\\\\\\\\");\n-      break;\n-    case '\\'':\n-      pp_string (pp, \"\\\\'\");\n-      break;\n-    case '\\\"':\n-      pp_string (pp, \"\\\\\\\"\");\n-      break;\n-    default:\n-      if (ISPRINT (c))\n-\tpp_character (pp, c);\n-      else\n-\tpp_scalar (pp, \"\\\\%03o\", (unsigned) c);\n-      break;\n+      switch (c)\n+\t{\n+\tcase '\\\\': pp_string (pp, \"\\\\\\\\\"); break;\n+\tcase '\\'': pp_string (pp, \"\\\\\\'\"); break;\n+\tcase '\\\"': pp_string (pp, \"\\\\\\\"\"); break;\n+\tdefault:   pp_character (pp, c);\n+\t}\n     }\n+  else\n+    pp_scalar (pp, \"\\\\%03o\", (unsigned) c);\n }\n \n /* Print out a STRING literal.  */\n@@ -785,7 +772,7 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n     {\n       if (tree_int_cst_sgn (i) < 0)\n         {\n-          pp_c_char (pp, '-');\n+          pp_character (pp, '-');\n           i = build_int_cst_wide (NULL_TREE,\n \t\t\t\t  -TREE_INT_CST_LOW (i),\n \t\t\t\t  ~TREE_INT_CST_HIGH (i)"}, {"sha": "f8907befd61f0561800422b93471a038b346f470", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 49, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -8657,8 +8657,14 @@ int_log2 (HOST_WIDE_INT power)\n   return shift;\n }\n \n-/* Output a .ascii pseudo-op, keeping track of lengths.  This is because\n-   /bin/as is horribly restrictive.  */\n+/* Output a .ascii pseudo-op, keeping track of lengths.  This is\n+   because /bin/as is horribly restrictive.  The judgement about\n+   whether or not each character is 'printable' (and can be output as\n+   is) or not (and must be printed with an octal escape) must be made\n+   with reference to the *host* character set -- the situation is\n+   similar to that discussed in the comments above pp_c_char in\n+   c-pretty-print.c.  */\n+\n #define MAX_ASCII_LEN 51\n \n void\n@@ -8679,57 +8685,20 @@ output_ascii_pseudo_op (FILE *stream, const unsigned char *p, int len)\n \t  len_so_far = 0;\n \t}\n \n-      switch (c)\n+      if (ISPRINT (c))\n \t{\n-\tcase TARGET_TAB:\n-\t  fputs (\"\\\\t\", stream);\n-\t  len_so_far += 2;\n-\t  break;\n-\n-\tcase TARGET_FF:\n-\t  fputs (\"\\\\f\", stream);\n-\t  len_so_far += 2;\n-\t  break;\n-\n-\tcase TARGET_BS:\n-\t  fputs (\"\\\\b\", stream);\n-\t  len_so_far += 2;\n-\t  break;\n-\n-\tcase TARGET_CR:\n-\t  fputs (\"\\\\r\", stream);\n-\t  len_so_far += 2;\n-\t  break;\n-\n-\tcase TARGET_NEWLINE:\n-\t  fputs (\"\\\\n\", stream);\n-\t  c = p [i + 1];\n-\t  if ((c >= ' ' && c <= '~')\n-\t      || c == TARGET_TAB)\n-\t    /* This is a good place for a line break.  */\n-\t    len_so_far = MAX_ASCII_LEN;\n-\t  else\n-\t    len_so_far += 2;\n-\t  break;\n-\n-\tcase '\\\"':\n-\tcase '\\\\':\n-\t  putc ('\\\\', stream);\n-\t  len_so_far++;\n-\t  /* Drop through.  */\n-\n-\tdefault:\n-\t  if (c >= ' ' && c <= '~')\n+\t  if (c == '\\\\' || c == '\\\"')\n \t    {\n-\t      putc (c, stream);\n+\t      putc ('\\\\', stream);\n \t      len_so_far++;\n \t    }\n-\t  else\n-\t    {\n-\t      fprintf (stream, \"\\\\%03o\", c);\n-\t      len_so_far += 4;\n-\t    }\n-\t  break;\n+\t  putc (c, stream);\n+\t  len_so_far++;\n+\t}\n+      else\n+\t{\n+\t  fprintf (stream, \"\\\\%03o\", c);\n+\t  len_so_far += 4;\n \t}\n     }\n "}, {"sha": "acd6ae0a704f270768071d2884d118223825f050", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -5135,56 +5135,20 @@ mips_output_ascii (FILE *stream, const char *string_param, size_t len,\n     {\n       register int c = string[i];\n \n-      switch (c)\n+      if (ISPRINT (c))\n \t{\n-\tcase '\\\"':\n-\tcase '\\\\':\n-\t  putc ('\\\\', stream);\n-\t  putc (c, stream);\n-\t  cur_pos += 2;\n-\t  break;\n-\n-\tcase TARGET_NEWLINE:\n-\t  fputs (\"\\\\n\", stream);\n-\t  if (i+1 < len\n-\t      && (((c = string[i+1]) >= '\\040' && c <= '~')\n-\t\t  || c == TARGET_TAB))\n-\t    cur_pos = 32767;\t\t/* break right here */\n-\t  else\n-\t    cur_pos += 2;\n-\t  break;\n-\n-\tcase TARGET_TAB:\n-\t  fputs (\"\\\\t\", stream);\n-\t  cur_pos += 2;\n-\t  break;\n-\n-\tcase TARGET_FF:\n-\t  fputs (\"\\\\f\", stream);\n-\t  cur_pos += 2;\n-\t  break;\n-\n-\tcase TARGET_BS:\n-\t  fputs (\"\\\\b\", stream);\n-\t  cur_pos += 2;\n-\t  break;\n-\n-\tcase TARGET_CR:\n-\t  fputs (\"\\\\r\", stream);\n-\t  cur_pos += 2;\n-\t  break;\n-\n-\tdefault:\n-\t  if (c >= ' ' && c < 0177)\n+\t  if (c == '\\\\' || c == '\\\"')\n \t    {\n-\t      putc (c, stream);\n+\t      putc ('\\\\', stream);\n \t      cur_pos++;\n \t    }\n-\t  else\n-\t    {\n-\t      fprintf (stream, \"\\\\%03o\", c);\n-\t      cur_pos += 4;\n-\t    }\n+\t  putc (c, stream);\n+\t  cur_pos++;\n+\t}\n+      else\n+\t{\n+\t  fprintf (stream, \"\\\\%03o\", c);\n+\t  cur_pos += 4;\n \t}\n \n       if (cur_pos > 72 && i+1 < len)"}, {"sha": "e190787041be776205474e5247ea8f188090b47a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 116, "deletions": 110, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -1,3 +1,9 @@\n+2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18785\n+\t* cp-objcp-common.h (LANG_HOOKS_TO_TARGET_CHARSET): Set to\n+\tc_common_to_target_charset.  Delete bogus comment.\n+\n 2005-02-18  Richard Henderson  <rth@redhat.com>\n \n \tPR libstdc++/10606\n@@ -91,8 +97,8 @@\n 2005-02-11  Richard Henderson  <rth@redhat.com>\n \n \tPR c++/19632\n-        * pt.c (get_mostly_instantiated_function_type): Save and restore\n-        flag_access_control instead of push/pop_access_scope.\n+\t* pt.c (get_mostly_instantiated_function_type): Save and restore\n+\tflag_access_control instead of push/pop_access_scope.\n \n 2005-02-10  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -203,13 +209,13 @@\n \t* cp-tree.h (builtin_valid_in_constant_expr_p): Declare.\n \t* parser.c (cp_parser_postfix_expression): Accept function call in\n \tconstant expression if builtin_valid_in_constant_expr_p is true\n-\tfor that function. \n+\tfor that function.\n \t* pt.c (value_dependent_expression_p): Handle CALL_EXPRs properly.\n \t* semantics.c (finish_id_expression): Accept function call in constant\n \texpression if builtin_valid_in_constant_expr_p is true for that\n-\tfunction. \n+\tfunction.\n \t* tree.c (builtin_valid_in_constant_expr_p): New.\n-\t\n+\n 2005-02-02  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/17413\n@@ -242,7 +248,7 @@\n 2005-02-01  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* parser.c (cp_parser_template_id): Revert comment patch too.\n-\t\n+\n \tPR c++/18757\n \tPR c++/19366\n \tPR c++/19499\n@@ -326,7 +332,7 @@\n \n \tPR c++/19349\n \t* name-lookup.c (pushdecl_namespace_level): Avoid accessing free'd\n-\tmemory. \n+\tmemory.\n \n 2005-01-28  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -399,7 +405,7 @@\n \n \t* typeck.c (comptypes): Handle return code from objc_comptypes\n \tcorrectly.\n-\t\n+\n 2005-01-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cp-tree.h, name-lookup.h: Remove unused prototypes.\n@@ -562,8 +568,8 @@\n \tnames.\n \t(cp_parser_member_declaration): Adjust call to make_id_declarator.\n \t(cp_parser_check_declarator_template_parameters): Do not expect a\n-\tSCOPE_REF. \n-\t\n+\tSCOPE_REF.\n+\n \t* decl.c (duplicate_decls): Call ggc_free on declarations we will\n \tnot be needing any longer.\n \n@@ -617,7 +623,7 @@\n \t* call.c (build_this): In templates, do not bother with\n \tbuild_unary_op.\n \t* typeck.c (unary_complex_lvalue): In a template, always refuse\n-\tsimplifications. \n+\tsimplifications.\n \n \tPR c++/18492\n \t* cp-gimplify.c (cp_genericize): Relax assertion.\n@@ -627,7 +633,7 @@\n \n \tPR c++/18257\n \t* rtti.c (emit_support_tinfos): On systems without weak symbols,\n-\temit the runtime library type-info objects as non-COMDAT. \n+\temit the runtime library type-info objects as non-COMDAT.\n \n 2004-12-21  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -670,14 +676,14 @@\n \t* error.c (dump_expr): <STRING_CST case> Add parens, if needed.\n \n \t* cp-tree.def (TEMPLATE_TYPE_PARM,\n-\tBOUND_TEMPLATE_TEMPLATE_PARM, TYPE_OF_TYPE, TYPENAME_TYPE): Reorder \n+\tBOUND_TEMPLATE_TEMPLATE_PARM, TYPE_OF_TYPE, TYPENAME_TYPE): Reorder\n \tfor better code efficiency.\n \t* cp-tree.h (CLASS_TYPE_P): Short circuit IS_AGGR_TYPE check.\n \t(CAN_HAVE_FULL_LANG_DECL_P): Reorder for better optimization.\n \t(INTEGRAL_CODE_P, CP_INTEGRAL_TYPE_P,\n \tINTEGRAL_OR_ENUMERATION_TYPE_P, SCALAR_TYPE_P,\n \tCP_AGGREGATE_TYPE_P, TYPE_PTROB_P, TYPE_REF_OBJ_P,\n-\tTYPE_PTROBV_P): Likewise. \n+\tTYPE_PTROBV_P): Likewise.\n \n \tPR c++/18975\n \t* method.c (do_build_copy_constructor): Refactor. Don't const\n@@ -689,7 +695,7 @@\n \tPR c++/19044\n \t* decl.c (make_rtl_for_nonlocal_decl): Use\n \tset_builtin_user_assembler_name.\n-\t\n+\n 2004-12-19  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (note_decl_for_pch): New function.\n@@ -826,7 +832,7 @@\n \tPR c++/18514\n \t* name-lookup.c (do_nonmember_using_decl): A real function\n \tdeclaration takes precedence over an anticipated declaration.\n-\t\n+\n 2004-12-09  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* parser.c (cp_parser_member_declaration): Fix comment typo.\n@@ -855,7 +861,7 @@\n 2004-12-08  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/18100\n-\t* decl.c (lookup_and_check_tag): Diagnose nested class with \n+\t* decl.c (lookup_and_check_tag): Diagnose nested class with\n \tthe same name as enclosing class.\n \n 2004-12-08  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -1044,7 +1050,7 @@\n \tmake_typename_type.\n \t(tsubst_decl): Do not pre-substitute the type of the declaration.\n \t(tsubst): Hand off declarations more quickly.  Adjust call to\n-\tmake_typename_type. \n+\tmake_typename_type.\n \n \tPR c++/18512\n \t* parser.c (cp_parser_postfix_dot_deref_expression): Robustify.\n@@ -1140,7 +1146,7 @@\n \t(lookup_type_scope): Adjust declaration.\n \t* decl.c (lookup_and_check_tag, xref_tag, xref_tag_from_type):\n \tChange bool parameter GLOBALIZED to TAG_SCOPE parameter SCOPE.\n-\t(start_enum): Likewise.  Add assertion test that NAME is \n+\t(start_enum): Likewise.  Add assertion test that NAME is\n \tIDENTIFIER_NODE.  Use anonymous name for dummy ENUMERAL_TYPE in\n \tcase of error.\n \t* cp-tree.h (xref_tag, xref_tag_from_type): Adjust declarations.\n@@ -1280,7 +1286,7 @@\n \tPR c++/18407\n \t* pt.c (tsubst_copy_and_build): Handle qualified names used from a\n \tderived class correctly.\n-\t\n+\n \t* decl2.c (import_export_decl): Fix typo in comment.\n \t* tree.c (pod_type_p): Likewise.\n \n@@ -1290,7 +1296,7 @@\n \n 2004-11-10  Adam Nemet  <anemet@lnxw.com>\n \n-\tPR middle-end/18160  \n+\tPR middle-end/18160\n \t* typeck.c (cxx_mark_addressable): Issue an error if address of an\n \texplicit register variable is requested.\n \n@@ -1328,7 +1334,7 @@\n \tsearch.c, typeck2.c: Fix comment formatting.\n \n 2004-11-04  Ulrich Weigand  <uweigand@de.ibm.com>\n-\t\n+\n \tPR tree-optimization/18184\n \t* cp-objcp-common.c (cxx_types_compatible_p): Do not treat pointers\n \tof different modes or alias-all flags as equivalent.\n@@ -1380,34 +1386,34 @@\n 2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 9/n\n-\t* typeck.c (build_x_unary_op, convert_member_func_to_ptr, \n+\t* typeck.c (build_x_unary_op, convert_member_func_to_ptr,\n \tget_delta_difference):  Use new quotation style.\n \t* repo.c (reopen_repo_file_for_write): Likewise.\n \t* pt.c (do_type_instantiation): Likewise.\n-\t* parser.c (cp_parser_diagnose_invalid_type_name): \n-\t* name-lookup.c (push_overloaded_decl, set_decl_namespace): \n+\t* parser.c (cp_parser_diagnose_invalid_type_name):\n+\t* name-lookup.c (push_overloaded_decl, set_decl_namespace):\n \t* error.c (cp_print_error_function,\n \tprint_instantiation_full_context): Likewise.\n-\t* decl.c (define_label, grok_reference_init, \n-\tmaybe_deduce_size_from_array_init, revert_static_member_fn): \n+\t* decl.c (define_label, grok_reference_init,\n+\tmaybe_deduce_size_from_array_init, revert_static_member_fn):\n \t* decl2.c (check_classfn): Likewise.\n-\t* class.c (add_method, check_field_decls, layout_class_type, \n+\t* class.c (add_method, check_field_decls, layout_class_type,\n \tresolve_address_of_overloaded_function): Likewise.\n \t* call.c (build_x_va_arg, build_over_call): Likewise.\n \n 2004-10-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 8/n\n-\t* cvt.c (cp_convert_to_pointer, warn_ref_binding, \n-\tconvert_to_reference, ocp_convert, convert_to_void \n+\t* cvt.c (cp_convert_to_pointer, warn_ref_binding,\n+\tconvert_to_reference, ocp_convert, convert_to_void\n \tcp_convert_to_pointer): Use new quotation style.\n \n 2004-10-31  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15172\n \t* typeck2.c (store_init_value): Use split_nonconstant_init even\n \tfor types that require construction.\n-\t\n+\n 1004-10-28  Matt Austern  <austern@apple.com>\n \n \tPR c++/17542\n@@ -1416,7 +1422,7 @@\n \tand remove static qualifier.\n \t* decl.c (shadow_tag): Warn about ignored attributes in class/struct/\n \tunion/enum declaration.\n-\t\n+\n 2004-10-29  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* pt.c: Fix a comment typo.\n@@ -1439,7 +1445,7 @@\n \tPR c++/14124\n \t* decl.c (finish_enum): Handle packed attribute.\n \t* parser.c (cp_parser_enum_specifier): Process trailing attributes.\n-\t\n+\n 2004-10-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17132\n@@ -1579,7 +1585,7 @@\n \t(build_reinterpret_cast_1): Add for_reinterpret_cast_p parameter.\n \tAllow function pointer conversions that DR195 suggests.\n \t(build_reinterpret_cast, build_c_cast): Update\n-\tbuild_reinterpret_cast_1 calls. \n+\tbuild_reinterpret_cast_1 calls.\n \n 2004-10-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n@@ -1700,7 +1706,7 @@\n \t* parser.c (cp_parser_simple_declaration): Do not diagnose invalid\n \ttype names if we have already found a valid type.\n \t(cp_parser_member_declaration): Likewise.\n-\t\n+\n \tPR c++/17916\n \t* parser.c (cp_parser_member_specification_opt): Handle\n \tCPP_PRAGMA.\n@@ -1733,7 +1739,7 @@\n \t* pt.c (struct pair_fn_data): Use pointer_set_t, not htab_t\n \t(for_each_template_parm): Convert from htab_t to pointer_set_t.\n \t* tree.c (cp_walk_subtrees): Last argument is pointer_set_t* now.\n-\t\n+\n 2004-10-13  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/17661\n@@ -1765,7 +1771,7 @@\n 2004-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/15786\n-\t* parser.c (cp_parser_declarator): Add member_p parameter. \n+\t* parser.c (cp_parser_declarator): Add member_p parameter.\n \t(cp_parser_condition): Adjust calls to cp_parser_declarator.\n \t(cp_parser_explicit_instantiation): Likewise.\n \t(cp_parser_init_declarator): Likewise.\n@@ -1849,34 +1855,34 @@\n 2004-10-10  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 7/n\n-\t* typeck.c (composite_pointer_type_r, composite_pointer_type, \n-\tcxx_sizeof_or_alignof_type, cxx_sizeof_or_alignof_expr, \n-\tstring_conv_p, build_class_member_access_expr, \n-\tbuild_class_member_access_expr, lookup_destructor, \n-\tfinish_class_member_access_expr, build_indirect_ref, \n-\tget_member_function_from_ptrfunc, build_function_call, \n-\tconvert_arguments, build_binary_op, pointer_diff, build_unary_op, \n-\tcheck_for_casting_away_constness, build_static_cast, \n-\tbuild_reinterpret_cast, build_const_cast, build_c_cast, \n-\tbuild_modify_expr, get_delta_difference, build_ptrmemfunc, \n-\tdubious_conversion_warnings, convert_for_assignment, \n-\tconvert_for_initialization, \n-\tmaybe_warn_about_returning_address_of_local, check_return_expr): \n+\t* typeck.c (composite_pointer_type_r, composite_pointer_type,\n+\tcxx_sizeof_or_alignof_type, cxx_sizeof_or_alignof_expr,\n+\tstring_conv_p, build_class_member_access_expr,\n+\tbuild_class_member_access_expr, lookup_destructor,\n+\tfinish_class_member_access_expr, build_indirect_ref,\n+\tget_member_function_from_ptrfunc, build_function_call,\n+\tconvert_arguments, build_binary_op, pointer_diff, build_unary_op,\n+\tcheck_for_casting_away_constness, build_static_cast,\n+\tbuild_reinterpret_cast, build_const_cast, build_c_cast,\n+\tbuild_modify_expr, get_delta_difference, build_ptrmemfunc,\n+\tdubious_conversion_warnings, convert_for_assignment,\n+\tconvert_for_initialization,\n+\tmaybe_warn_about_returning_address_of_local, check_return_expr):\n \tUse quoting marks.\n \n-\t* typeck2.c (error_not_base_type, readonly_error, \n-\tabstract_virtuals_error, cxx_incomplete_type_diagnostic, \n-\tstore_init_value, digest_init, build_x_arrow, \n+\t* typeck2.c (error_not_base_type, readonly_error,\n+\tabstract_virtuals_error, cxx_incomplete_type_diagnostic,\n+\tstore_init_value, digest_init, build_x_arrow,\n \tbuild_m_component_ref, require_complete_eh_spec_types): Likewise.\n \n-\t* tree.c (cp_build_qualified_type_real, \n+\t* tree.c (cp_build_qualified_type_real,\n \thandle_java_interface_attribute, handle_init_priority_attribute):\n \tLikewise.\n \n-\t* semantics.c (finish_asm_stmt, finish_non_static_data_member, \n-\tfinish_pseudo_destructor_expr, \n-\tcheck_template_template_default_arg, begin_class_definition, \n-\tfinish_base_specifier, qualified_name_lookup_error, \n+\t* semantics.c (finish_asm_stmt, finish_non_static_data_member,\n+\tfinish_pseudo_destructor_expr,\n+\tcheck_template_template_default_arg, begin_class_definition,\n+\tfinish_base_specifier, qualified_name_lookup_error,\n \tfinish_id_expression, finish_typeof): Likewise.\n \n \t* search.c (lookup_base, check_final_overrider,\n@@ -1912,7 +1918,7 @@\n \tPR c++/17685\n \t* decl.c (grokdeclarator): Disallow declarations of operators as\n \tnon-functions.\n-\t\n+\n 2004-10-08  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/17868\n@@ -2018,20 +2024,20 @@\n 2004-10-05  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 6/n\n-\t* pt.c (finish_member_template_decl, check_specialization_scope, \n-\tmaybe_process_partial_specialization, determine_specialization, \n-\tcheck_explicit_specialization, maybe_check_template_type, \n-\tprocess_partial_specialization, check_default_tmpl_args, \n-\tpush_template_decl_real, redeclare_class_template, \n-\tconvert_nontype_argument, coerce_template_parms, \n-\tlookup_template_class, push_tinst_level, \n-\tinstantiate_class_template, tsubst_arg_types, \n-\ttsubst_function_type, tsubst, tsubst_qualified_id, \n-\ttsubst_copy_and_build, check_instantiated_args, \n-\tdo_decl_instantiation, do_type_instantiation, \n-\tinvalid_nontype_parm_type_p, check_specialization_namespace, \n-\tconvert_template_argument, determine_specialization, \n-\tcheck_template_shadow, tsubst_decl \n+\t* pt.c (finish_member_template_decl, check_specialization_scope,\n+\tmaybe_process_partial_specialization, determine_specialization,\n+\tcheck_explicit_specialization, maybe_check_template_type,\n+\tprocess_partial_specialization, check_default_tmpl_args,\n+\tpush_template_decl_real, redeclare_class_template,\n+\tconvert_nontype_argument, coerce_template_parms,\n+\tlookup_template_class, push_tinst_level,\n+\tinstantiate_class_template, tsubst_arg_types,\n+\ttsubst_function_type, tsubst, tsubst_qualified_id,\n+\ttsubst_copy_and_build, check_instantiated_args,\n+\tdo_decl_instantiation, do_type_instantiation,\n+\tinvalid_nontype_parm_type_p, check_specialization_namespace,\n+\tconvert_template_argument, determine_specialization,\n+\tcheck_template_shadow, tsubst_decl\n \tinstantiate_pending_templates): Use quoting marks.\n \n 2004-10-05  Nathan Sidwell  <nathan@codesourcery.com>\n@@ -2043,41 +2049,41 @@\n 2004-10-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 5/n\n-\t* parser.c (cp_parser_name_lookup_error, \n-\tcp_parser_diagnose_invalid_type_name, \n-\tcp_parser_primary_expression, cp_parser_unqualified_id, \n-\tcp_parser_nested_name_specifier_opt, cp_parser_labeled_statement, \n-\tcp_parser_jump_statement, cp_parser_simple_declaration, \n-\tcp_parser_decl_specifier_seq, cp_parser_mem_initializer_id, \n-\tcp_parser_type_parameter, cp_parser_template_id, \n-\tcp_parser_template_name, cp_parser_direct_declarator, \n-\tcp_parser_parameter_declaration_list, cp_parser_class_head, \n-\tcp_parser_base_specifier, cp_parser_lookup_name, \n-\tcp_parser_late_parsing_default_args, \n-\tcp_parser_optional_template_keyword \n-\tcp_parser_elaborated_type_specifier, cp_parser_check_class_key, \n+\t* parser.c (cp_parser_name_lookup_error,\n+\tcp_parser_diagnose_invalid_type_name,\n+\tcp_parser_primary_expression, cp_parser_unqualified_id,\n+\tcp_parser_nested_name_specifier_opt, cp_parser_labeled_statement,\n+\tcp_parser_jump_statement, cp_parser_simple_declaration,\n+\tcp_parser_decl_specifier_seq, cp_parser_mem_initializer_id,\n+\tcp_parser_type_parameter, cp_parser_template_id,\n+\tcp_parser_template_name, cp_parser_direct_declarator,\n+\tcp_parser_parameter_declaration_list, cp_parser_class_head,\n+\tcp_parser_base_specifier, cp_parser_lookup_name,\n+\tcp_parser_late_parsing_default_args,\n+\tcp_parser_optional_template_keyword\n+\tcp_parser_elaborated_type_specifier, cp_parser_check_class_key,\n \tcp_parser_check_access_in_redeclaration): Use quoting marks.\n \n-\t* name-lookup.c (supplement_binding, pushdecl, \n-\tcheck_for_out_of_scope_variable, validate_nonmember_using_decl, \n-\tdo_nonmember_using_decl, lookup_tag, set_decl_namespace, \n-\tpush_namespace, do_namespace_alias, do_using_directive, \n+\t* name-lookup.c (supplement_binding, pushdecl,\n+\tcheck_for_out_of_scope_variable, validate_nonmember_using_decl,\n+\tdo_nonmember_using_decl, lookup_tag, set_decl_namespace,\n+\tpush_namespace, do_namespace_alias, do_using_directive,\n \tambiguous_decl, lookup_namespace_name, add_function): Likewise.\n \n \t* method.c (use_thunk): Likewise.\n \n-\t* lex.c (unqualified_name_lookup_error, \n+\t* lex.c (unqualified_name_lookup_error,\n \tunqualified_fn_lookup_error): Likewise.\n \n 2004-10-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \tConvert diagnostics to use quoting flag q 4/n\n-\t* except.c (decl_is_java_type, build_throw, \n-\tis_admissible_throw_operand, check_handlers_1, check_handlers): \n+\t* except.c (decl_is_java_type, build_throw,\n+\tis_admissible_throw_operand, check_handlers_1, check_handlers):\n \tUse quoting formats.\n \t* friend.c (add_friend, make_friend_class, do_friend): Likewise.\n-\t* init.c (sort_mem_initializers, emit_mem_initializers, \n-\tmember_init_ok_or_else, expand_member_init, is_aggr_type, \n+\t* init.c (sort_mem_initializers, emit_mem_initializers,\n+\tmember_init_ok_or_else, expand_member_init, is_aggr_type,\n \tbuild_offset_ref, build_java_class_ref): Likewise.\n \n 2004-10-03  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n@@ -2086,20 +2092,20 @@\n \t* decl.c (pop_label, duplicate_decls, redeclaration_error_message,\n \tredeclaration_error_message, lookup_label, check_goto,\n \tmake_typename_type, make_unbound_class_template,\n-\tfixup_anonymous_aggr, check_tag_decl, start_decl, start_decl_1, \n-\tgrok_reference_init, layout_var_decl, maybe_commonize_var, \n-\tcheck_for_uninitialized_const_var, reshape_init_array, \n+\tfixup_anonymous_aggr, check_tag_decl, start_decl, start_decl_1,\n+\tgrok_reference_init, layout_var_decl, maybe_commonize_var,\n+\tcheck_for_uninitialized_const_var, reshape_init_array,\n \treshape_init, check_initializer, cp_finish_decl,\n-\tmember_function_or_else, bad_specifiers, grokfndecl, grokvardecl, \n-\tcheck_static_variable_definition, compute_array_index_type, \n-\tcreate_array_type_for_decl, check_special_function_return_type, \n-\tgrokdeclarator, check_default_argument, grokparms, \n-\tgrok_ctor_properties, grok_op_properties, \n-\tcheck_elaborated_type_specifier, xref_tag, finish_enum, \n-\tbuild_enumerator, check_function_type, start_preparsed_function, \n+\tmember_function_or_else, bad_specifiers, grokfndecl, grokvardecl,\n+\tcheck_static_variable_definition, compute_array_index_type,\n+\tcreate_array_type_for_decl, check_special_function_return_type,\n+\tgrokdeclarator, check_default_argument, grokparms,\n+\tgrok_ctor_properties, grok_op_properties,\n+\tcheck_elaborated_type_specifier, xref_tag, finish_enum,\n+\tbuild_enumerator, check_function_type, start_preparsed_function,\n \tstore_parm_decls): Use quoting formats.\n-\t* decl2.c (grok_array_decl, delete_sanity, check_member_template, \n-\tcheck_java_method, check_classfn, finish_static_data_member_decl, \n+\t* decl2.c (grok_array_decl, delete_sanity, check_member_template,\n+\tcheck_java_method, check_classfn, finish_static_data_member_decl,\n \tgrokfield, grokbitfield, grok_function_init,\n \tbuild_anon_union_vars, coerce_new_type, coerce_delete_type,\n \tcheck_default_args): Likewise.\n@@ -2224,7 +2230,7 @@\n \theader that was implicitly extern \"C\".\n \t(cp_parser_declaration_seq_opt): Push/pop lang context as\n \trequired by the token's and parser's implicit_extern_c.\n-\t\n+\n 2004-09-27  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17585\n@@ -2246,11 +2252,11 @@\n \t(dfs_depth_post, dfs_depth_q): Remove.\n \t(find_final_overrider): Use number of vbase classes as depth\n \tbound.\n-\t\n+\n \t* cp-tree.h (types_overlap_p): Remove.\n \t* search.c (struct overlap_info): Remove.\n \t(dfs_check_overlap, dfs_no_overlap_yet, types_overlap_p): Remove.\n-\t\n+\n \t* pt.c (GTB_VIA_VIRTUAL, GTB_IGNORE_TYPE): Remove.\n \t(get_template_base_recursive): Remove. Replace with ...\n \t(get_template_base_r): ... this."}, {"sha": "9baba3fc4caea4fe3875364cd75bdc4e781ffb84", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -159,6 +159,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n #undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n+#undef LANG_HOOKS_TO_TARGET_CHARSET\n+#define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n #undef LANG_HOOKS_GIMPLIFY_EXPR\n #define LANG_HOOKS_GIMPLIFY_EXPR cp_gimplify_expr\n "}, {"sha": "0347121eac5fd928d461d562e71ed093f8dbe273", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -36,19 +36,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \t\t  obstack_chunk_alloc,\t\t\t\\\n \t\t  obstack_chunk_free)\n \n-/* Define default standard character escape sequences.  */\n-#ifndef TARGET_BELL\n-#  define TARGET_BELL 007\n-#  define TARGET_BS 010\n-#  define TARGET_CR 015\n-#  define TARGET_DIGIT0 060\n-#  define TARGET_ESC 033\n-#  define TARGET_FF 014\n-#  define TARGET_NEWLINE 012\n-#  define TARGET_TAB 011\n-#  define TARGET_VT 013\n-#endif\n-\n /* Store in OUTPUT a string (made with alloca) containing an\n    assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "b50c1a57b6d6f2b6296d607bc029c494bdb3556c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -31,7 +31,6 @@ through the macros defined in the @file{.h} file.\n * Per-Function Data::   Defining data structures for per-function information.\n * Storage Layout::      Defining sizes and alignments of data.\n * Type Layout::         Defining sizes and properties of basic user data types.\n-* Escape Sequences::    Defining the value of target character escape sequences\n * Registers::           Naming and describing the hardware registers.\n * Register Classes::    Defining the classes of hardware registers.\n * Stack and Calling::   Defining which way the stack grows and by how much.\n@@ -1816,42 +1815,6 @@ specified by @code{TARGET_VTABLE_ENTRY_ALIGN}), set this to the number\n of words in each data entry.\n @end defmac\n \n-@node Escape Sequences\n-@section Target Character Escape Sequences\n-@cindex escape sequences\n-\n-By default, GCC assumes that the C character escape sequences and other\n-characters take on their ASCII values for the target.  If this is not\n-correct, you must explicitly define all of the macros below.  All of\n-them must evaluate to constants; they are used in @code{case}\n-statements.\n-\n-@findex TARGET_BELL\n-@findex TARGET_BS\n-@findex TARGET_CR\n-@findex TARGET_DIGIT0\n-@findex TARGET_ESC\n-@findex TARGET_FF\n-@findex TARGET_NEWLINE\n-@findex TARGET_TAB\n-@findex TARGET_VT\n-@multitable {@code{TARGET_NEWLINE}} {Escape} {ASCII character}\n-@item Macro                 @tab Escape             @tab ASCII character\n-@item @code{TARGET_BELL}    @tab @kbd{\\a}           @tab @code{07}, @code{BEL}\n-@item @code{TARGET_BS}      @tab @kbd{\\b}           @tab @code{08}, @code{BS}\n-@item @code{TARGET_CR}      @tab @kbd{\\r}           @tab @code{0D}, @code{CR}\n-@item @code{TARGET_DIGIT0}  @tab @kbd{0}            @tab @code{30}, @code{ZERO}\n-@item @code{TARGET_ESC}     @tab @kbd{\\e}, @kbd{\\E} @tab @code{1B}, @code{ESC}\n-@item @code{TARGET_FF}      @tab @kbd{\\f}           @tab @code{0C}, @code{FF}\n-@item @code{TARGET_NEWLINE} @tab @kbd{\\n}           @tab @code{0A}, @code{LF}\n-@item @code{TARGET_TAB}     @tab @kbd{\\t}           @tab @code{09}, @code{HT}\n-@item @code{TARGET_VT}      @tab @kbd{\\v}           @tab @code{0B}, @code{VT}\n-@end multitable\n-\n-@noindent\n-Note that the @kbd{\\e} and @kbd{\\E} escapes are GNU extensions, not\n-part of the C standard.\n-\n @node Registers\n @section Register Usage\n @cindex register usage"}, {"sha": "fc6decaaf8598335490996988277b5583379cc07", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -68,6 +68,7 @@ extern bool lhd_decl_ok_for_sibcall (tree);\n extern const char *lhd_comdat_group (tree);\n extern tree lhd_expr_size (tree);\n extern size_t lhd_tree_size (enum tree_code);\n+extern HOST_WIDE_INT lhd_to_target_charset (HOST_WIDE_INT);\n \n /* Declarations of default tree inlining hooks.  */\n extern tree lhd_tree_inlining_walk_subtrees (tree *, int *, walk_tree_fn,\n@@ -122,6 +123,7 @@ extern int lhd_gimplify_expr (tree *, tree *, tree *);\n #define LANG_HOOKS_TREE_SIZE\t\tlhd_tree_size\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tbuiltin_function\n+#define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n \n #define LANG_HOOKS_FUNCTION_INIT\tlhd_do_nothing_f\n #define LANG_HOOKS_FUNCTION_FINAL\tlhd_do_nothing_f\n@@ -285,6 +287,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_CALLEE_FNDECL, \\\n   LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n   LANG_HOOKS_EXPR_SIZE, \\\n+  LANG_HOOKS_TO_TARGET_CHARSET, \\\n   LANG_HOOKS_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_COMMON_ATTRIBUTE_TABLE, \\\n   LANG_HOOKS_FORMAT_ATTRIBUTE_TABLE, \\"}, {"sha": "c29168c4f0ab3df2d9f419344312b73580e2acfc", "filename": "gcc/langhooks.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -546,3 +546,9 @@ lhd_make_node (enum tree_code code)\n {\n   return make_node (code);\n }\n+\n+HOST_WIDE_INT\n+lhd_to_target_charset (HOST_WIDE_INT c)\n+{\n+  return c;\n+}"}, {"sha": "a3dc6fa89fabe8edacf9538fabf739ee9a168074", "filename": "gcc/langhooks.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -374,6 +374,15 @@ struct lang_hooks\n      semantics in cases that it doesn't want to handle specially.  */\n   tree (*expr_size) (tree);\n \n+  /* Convert a character from the host's to the target's character\n+     set.  The character should be in what C calls the \"basic source\n+     character set\" (roughly, the set of characters defined by plain\n+     old ASCII).  The default is to return the character unchanged,\n+     which is correct in most circumstances.  Note that both argument\n+     and result should be sign-extended under -fsigned-char,\n+     zero-extended under -fno-signed-char.  */\n+  HOST_WIDE_INT (*to_target_charset) (HOST_WIDE_INT);\n+\n   /* Pointers to machine-independent attribute tables, for front ends\n      using attribs.c.  If one is NULL, it is ignored.  Respectively, a\n      table of attributes specific to the language, a table of"}, {"sha": "fd7c64bd4dba356b5aedda4175d83b6434b0681e", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -660,7 +660,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tPUT_SDB_SRC_FILE STABS_GCC_MARKER DBX_OUTPUT_FUNCTION_END\t   \\\n \tDBX_OUTPUT_GCC_MARKER DBX_FINISH_SYMBOL SDB_GENERATE_FAKE\t   \\\n \tNON_SAVING_SETJMP TARGET_LATE_RTL_PROLOGUE_EPILOGUE\t\t   \\\n-\tCASE_DROPS_THROUGH\n+\tCASE_DROPS_THROUGH TARGET_BELL TARGET_BS TARGET_CR TARGET_DIGIT0   \\\n+        TARGET_ESC TARGET_FF TARGET_NEWLINE TARGET_TAB TARGET_VT\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "bfcbe971fbb670f72c694481354b0d8f4c7afa38", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -1,3 +1,8 @@\n+2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18785\n+\t* gcc.dg/charset/builtin1.c: New test.\n+\n 2005-02-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/19299\n@@ -13,7 +18,7 @@\n 2005-02-19  Devang Patel  <dpatel@apple.com>\n \n \t* gcc.dg/cpp/mac-eol-at-eof.c: New test.\n-\t\n+\n 2005-02-19  Steven G. Kargl  <kargls@comcast.net>\n \n \t* gfortran.dg/achar_1.f90: New test.\n@@ -47,8 +52,8 @@\n \n 2005-01-20  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n \n-        PR c++/19508\n-        * g++.dg/ext/attrib20.C: New test.\n+\tPR c++/19508\n+\t* g++.dg/ext/attrib20.C: New test.\n \n 2004-02-18  Andrew Pinski  <pinskia@physics.uc.edu>\n \n@@ -315,9 +320,9 @@\n \tno longer optimize.\n \t* gcc.dg/builtins-47.c: New testcase.\n \n-2005-02-07  Leehod Baruch  <leehod@il.ibm.com> \n+2005-02-07  Leehod Baruch  <leehod@il.ibm.com>\n \t    Dorit Naishlos  <dorit@il.ibm.com>\n-\t\n+\n \t* testsuite/gcc.dg/vect/vect.exp: Add -ftree-vectorizer-verbose=3.\n \n 2005-02-06  Richard Sandiford  <rsandifo@redhat.com>\n@@ -346,7 +351,7 @@\n 2005-02-03  Dorit Naishlos  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-85.c: Remove xfail.\n-\t* gcc.dg/vect/vect-86.c: Remove xfail. \n+\t* gcc.dg/vect/vect-86.c: Remove xfail.\n \t* gcc.dg/vect/vect-87.c: Remove xfail.\n \t* gcc.dg/vect/vect-88.c: Remove xfail.\n \n@@ -370,7 +375,7 @@\n \tPR c++/19628\n \t* g++/ext/builtin7.C: New.\n \t* g++/ext/builtin8.C: New.\n-\t\n+\n 2005-02-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/18502\n@@ -524,7 +529,7 @@\n \t* g++.dg/template/static10.C: New test.\n \n \tPR c++/19395\n-\t* g++.dg/parse/error24.C: New test. \n+\t* g++.dg/parse/error24.C: New test.\n \n \tPR c++/19367\n \t* g++.dg/lookup/builtin1.C: New test.\n@@ -645,7 +650,7 @@\n \n 2005-01-26  Greg Parker  <gparker@apple.com>\n \tStuart Hastings  <stuart@apple.com>\n-\t\n+\n \t* gcc.c-torture/execute/20050125-1.c: New.\n \n 2005-01-18  Jan Hubicka  <jh@suse.cz>\n@@ -958,7 +963,7 @@\n \t* ada/acats/tests/c3/c92005b.ada: Likewise.\n \t* ada/acats/tests/c3/cxb3012.a: Likewise.\n \t* ada/acats/norun.lst: Add c380004 and c953002, add PR\n-\t\n+\n 2005-01-09  Paul Brook  <paul@codesourcery.com>\n \n \t* gfortran.dg/common_2.f90: New file."}, {"sha": "c15c06ed73cb8814e843719affcb27bf6755bdb7", "filename": "gcc/testsuite/gcc.dg/charset/builtin1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcharset%2Fbuiltin1.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -0,0 +1,25 @@\n+/* isdigit(c) can be optimized to ((unsigned)c) - '0' <= 9, but only if\n+   we know the correct value of '0'.  PR 18785.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fno-inline -fexec-charset=IBM-1047\" } */\n+\n+extern int isdigit(int);\n+extern void abort(void);\n+\n+static int str1(void) { return '1'; }\n+static int strA(void) { return 'A'; }\n+\n+int\n+main(void)\n+{\n+  if (!isdigit('1'))\n+    abort();\n+  if (isdigit('A'))\n+    abort();\n+  if (!isdigit(str1()))\n+    abort();\n+  if (isdigit(strA()))\n+    abort();\n+  return 0;\n+}"}, {"sha": "5e6ad289e3653ebbef2201e9f02873beb246c945", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -1,8 +1,15 @@\n+2005-02-20  Zack Weinberg  <zack@codesourcery.com>\n+\n+\tPR 18785\n+\t* charset.c (LAST_POSSIBLY_BASIC_SOURCE_CHAR): New helper macro.\n+\t(cpp_host_to_exec_charset): New function.\n+\t* include/cpplib.h: Declare cpp_host_to_exec_charset.\n+\n 2005-02-19  Devang Patel  <dpatel@apple.com>\n \n \t* charset.c (_cpp_convert_input): Check '\\r' before inserting\n \t'\\n' at the end.\n-\t\n+\n 2005-02-15  Eric Christopher  <echristo@redhat.com>\n \n \tPR preprocessor/19077\n@@ -41,7 +48,7 @@\n \t* include/cpplib.h (c_lang): Fix comment to say cpp_create_reader.\n \n \t* include/cpplib.h: Also update copyright years.\n-\t\n+\n 2005-01-03  Geoffrey Keating  <geoffk@apple.com>\n \n \t* files.c (_cpp_find_file): Add files found by search_path_exhausted\n@@ -64,7 +71,7 @@\n \n 2004-11-28  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n-\tPR preprocessor/17610 \n+\tPR preprocessor/17610\n \t* directives.c (do_include_common): Error out if an empty filename\n \tis given for #include (or #include_next or #import).\n \n@@ -87,7 +94,7 @@\n \t* configure: Regenerate.\n \n 2004-11-23  Daniel Jacobowitz  <dan@codesourcery.com>\n-            Joseph Myers  <joseph@codesourcery.com>\n+\t    Joseph Myers  <joseph@codesourcery.com>\n \n \t* internal.h (struct lexer_state): Add in_deferred_pragma.\n \t* directives.c (struct pragma_entry): Add allow_expansion.\n@@ -100,7 +107,7 @@\n \t* include/cpplib.h (cpp_register_pragma): Update prototype.\n \n 2004-11-18  Daniel Jacobowitz  <dan@codesourcery.com>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \t* configure.ac (i[34567]86-*-solaris2.1[0-9]*): Set\n \tneed_64bit_hwint=yes.\n@@ -115,7 +122,7 @@\n \tRemove local srcdir path from generated file.\n \n 2004-11-04  Zack Weinberg  <zack@codesourcery.com>\n-            Gerald Pfeifer  <gerald@pfeifer.com>\n+\t    Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* internal.h (HAVE_ICONV): Undefine if we do not have HAVE_ICONV_H\n \tas well."}, {"sha": "6b6c360f73d5702fc0442c3fc82b67fa3fcfea11", "filename": "libcpp/charset.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -81,8 +81,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n \n #if HOST_CHARSET == HOST_CHARSET_ASCII\n #define SOURCE_CHARSET \"UTF-8\"\n+#define LAST_POSSIBLY_BASIC_SOURCE_CHAR 0x7e\n #elif HOST_CHARSET == HOST_CHARSET_EBCDIC\n #define SOURCE_CHARSET \"UTF-EBCDIC\"\n+#define LAST_POSSIBLY_BASIC_SOURCE_CHAR 0xFF\n #else\n #error \"Unrecognized basic host character set\"\n #endif\n@@ -714,6 +716,63 @@ _cpp_destroy_iconv (cpp_reader *pfile)\n     }\n }\n \n+/* Utility routine for use by a full compiler.  C is a character taken\n+   from the *basic* source character set, encoded in the host's\n+   execution encoding.  Convert it to (the target's) execution\n+   encoding, and return that value.\n+\n+   Issues an internal error if C's representation in the narrow\n+   execution character set fails to be a single-byte value (C99\n+   5.2.1p3: \"The representation of each member of the source and\n+   execution character sets shall fit in a byte.\")  May also issue an\n+   internal error if C fails to be a member of the basic source\n+   character set (testing this exactly is too hard, especially when\n+   the host character set is EBCDIC).  */\n+cppchar_t\n+cpp_host_to_exec_charset (cpp_reader *pfile, cppchar_t c)\n+{\n+  uchar sbuf[1];\n+  struct _cpp_strbuf tbuf;\n+\n+  /* This test is merely an approximation, but it suffices to catch\n+     the most important thing, which is that we don't get handed a\n+     character outside the unibyte range of the host character set.  */\n+  if (c > LAST_POSSIBLY_BASIC_SOURCE_CHAR)\n+    {\n+      cpp_error (pfile, CPP_DL_ICE,\n+\t\t \"character 0x%lx is not in the basic source character set\\n\",\n+\t\t (unsigned long)c);\n+      return 0;\n+    }\n+\n+  /* Being a character in the unibyte range of the host character set,\n+     we can safely splat it into a one-byte buffer and trust that that\n+     is a well-formed string.  */\n+  sbuf[0] = c;\n+\n+  /* This should never need to reallocate, but just in case... */\n+  tbuf.asize = 1;\n+  tbuf.text = xmalloc (tbuf.asize);\n+  tbuf.len = 0;\n+\n+  if (!APPLY_CONVERSION (pfile->narrow_cset_desc, sbuf, 1, &tbuf))\n+    {\n+      cpp_errno (pfile, CPP_DL_ICE, \"converting to execution character set\");\n+      return 0;\n+    }\n+  if (tbuf.len != 1)\n+    {\n+      cpp_error (pfile, CPP_DL_ICE,\n+\t\t \"character 0x%lx is not unibyte in execution character set\",\n+\t\t (unsigned long)c);\n+      return 0;\n+    }\n+  c = tbuf.text[0];\n+  free(tbuf.text);\n+  return c;\n+}\n+\n+\f\n \n /* Utility routine that computes a mask of the form 0000...111... with\n    WIDTH 1-bits.  */\n@@ -727,8 +786,6 @@ width_to_mask (size_t width)\n     return ((size_t) 1 << width) - 1;\n }\n \n-\f\n-\n /* Returns 1 if C is valid in an identifier, 2 if C is valid except at\n    the start of an identifier, and 0 if C is not valid in an\n    identifier.  We assume C has already gone through the checks of"}, {"sha": "70f8d895afdcb7faa57bc07f84b4283c1bb8a8bd", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5ff069dc46eb81aa4c0732ea5e6f76a535474b2/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=c5ff069dc46eb81aa4c0732ea5e6f76a535474b2", "patch": "@@ -659,6 +659,9 @@ extern bool cpp_interpret_string_notranslate (cpp_reader *,\n \t\t\t\t\t      const cpp_string *, size_t,\n \t\t\t\t\t      cpp_string *, bool);\n \n+/* Convert a host character constant to the execution character set.  */\n+extern cppchar_t cpp_host_to_exec_charset (cpp_reader *, cppchar_t);\n+\n /* Used to register macros and assertions, perhaps from the command line.\n    The text is the same as the command line argument.  */\n extern void cpp_define (cpp_reader *, const char *);\n@@ -743,12 +746,6 @@ cpp_num cpp_num_sign_extend (cpp_num, size_t);\n #define CPP_DL_WARNING_P(l)\t(CPP_DL_EXTRACT (l) >= CPP_DL_WARNING \\\n \t\t\t\t && CPP_DL_EXTRACT (l) <= CPP_DL_PEDWARN)\n \n-/* N.B. The error-message-printer prototypes have not been nicely\n-   formatted because exgettext needs to see 'msgid' on the same line\n-   as the name of the function in order to work properly.  Only the\n-   string argument gets a name in an effort to keep the lines from\n-   getting ridiculously oversized.  */\n-\n /* Output a diagnostic of some kind.  */\n extern void cpp_error (cpp_reader *, int, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;"}]}