{"sha": "070588f06e3c7677a21d2e0bdce7253229daa83b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDcwNTg4ZjA2ZTNjNzY3N2EyMWQyZTBiZGNlNzI1MzIyOWRhYTgzYg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-05-03T13:28:33Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-05-03T13:28:33Z"}, "message": "c-decl.c (pending_invalid_xref_file): Remove.\n\n\t* c-decl.c (pending_invalid_xref_file): Remove.\n\t(pending_invalid_xref_line): Remove.\n\t(pending_invalid_xref_location): New.\n\t(lookup_label): Use location_t and input_location directly.\n\t(lookup_tag): Likewise.\n\t(pending_xref_error): Likewise.\n\t(c_expand_body_1): Likewise.\n\t* c-common.c (x_expand_start_cond): Likewise.\n\t* c-semantics.c (genrtl_for_stmt): Likewise.\n\t(find_reachable_label): Likewise.\n\t* expr.c (expand_expr): Likewise.\n\t* integrate.c (output_inline_function): Likewise.\n\t* tree-inline.c (find_alloca_call): Likewise.\n\t(find_builtin_longjmp_call): Likewise.\n\t* gcc.c (input_filename): Make static.\n\nFrom-SVN: r66425", "tree": {"sha": "0d918b616faeef5dd3dd6d2c0124b405c528a109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d918b616faeef5dd3dd6d2c0124b405c528a109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/070588f06e3c7677a21d2e0bdce7253229daa83b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070588f06e3c7677a21d2e0bdce7253229daa83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/070588f06e3c7677a21d2e0bdce7253229daa83b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/070588f06e3c7677a21d2e0bdce7253229daa83b/comments", "author": null, "committer": null, "parents": [{"sha": "5dc5d13c708ac848d6e30e22546ca2062732bd57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc5d13c708ac848d6e30e22546ca2062732bd57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc5d13c708ac848d6e30e22546ca2062732bd57"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "41b878c1ef1a05505b55f678955ea9c7c8c97115", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -1,3 +1,21 @@\n+2003-05-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* c-decl.c (pending_invalid_xref_file): Remove.\n+\t(pending_invalid_xref_line): Remove.\n+\t(pending_invalid_xref_location): New.\n+\t(lookup_label): Use location_t and input_location directly.\n+\t(lookup_tag): Likewise.\n+\t(pending_xref_error): Likewise.\n+\t(c_expand_body_1): Likewise.\n+\t* c-common.c (x_expand_start_cond): Likewise.\n+\t* c-semantics.c (genrtl_for_stmt): Likewise.\n+\t(find_reachable_label): Likewise.\n+\t* expr.c (expand_expr): Likewise.\n+\t* integrate.c (output_inline_function): Likewise.\n+\t* tree-inline.c (find_alloca_call): Likewise.\n+\t(find_builtin_longjmp_call): Likewise.\n+\t* gcc.c (input_filename): Make static.\n+\t\n 2003-05-03  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.md: Fix comment typo."}, {"sha": "e24bd3c87c69db08efdd4f46d35a8d2d8cc7021e", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -918,8 +918,7 @@ c_expand_start_cond (cond, compstmt_count, if_stmt)\n \n   /* Record this if statement.  */\n   if_stack[if_stack_pointer].compstmt_count = compstmt_count;\n-  if_stack[if_stack_pointer].locus.file = input_filename;\n-  if_stack[if_stack_pointer].locus.line = input_line;\n+  if_stack[if_stack_pointer].locus = input_location;\n   if_stack[if_stack_pointer].needs_warning = 0;\n   if_stack[if_stack_pointer].if_stmt = if_stmt;\n   if_stack_pointer++;"}, {"sha": "11f7499c7748c076da9760386628257eaccb608e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -65,8 +65,7 @@ enum decl_context\n \n tree pending_invalid_xref;\n /* File and line to appear in the eventual error message.  */\n-const char *pending_invalid_xref_file;\n-int pending_invalid_xref_line;\n+location_t pending_invalid_xref_location;\n \n /* While defining an enum type, this is 1 plus the last enumerator\n    constant value.  Note that will do not have to save this or `enum_overflow'\n@@ -2019,8 +2018,7 @@ lookup_label (id)\n \n   /* Say where one reference is to the label,\n      for the sake of the error if it is not defined.  */\n-  DECL_SOURCE_LINE (decl) = input_line;\n-  DECL_SOURCE_FILE (decl) = input_filename;\n+  DECL_SOURCE_LOCATION (decl) = input_location;\n \n   IDENTIFIER_LABEL_VALUE (id) = decl;\n \n@@ -2183,8 +2181,7 @@ lookup_tag (code, name, thislevel_only)\n     {\n       /* Definition isn't the kind we were looking for.  */\n       pending_invalid_xref = name;\n-      pending_invalid_xref_file = input_filename;\n-      pending_invalid_xref_line = input_line;\n+      pending_invalid_xref_location = input_location;\n \n       /* If in the same binding level as a declaration as a tag\n \t of a different type, this must not be allowed to\n@@ -2205,8 +2202,8 @@ void\n pending_xref_error ()\n {\n   if (pending_invalid_xref != 0)\n-    error_with_file_and_line (pending_invalid_xref_file,\n-\t\t\t      pending_invalid_xref_line,\n+    error_with_file_and_line (pending_invalid_xref_location.file,\n+\t\t\t      pending_invalid_xref_location.line,\n \t\t\t      \"`%s' defined as wrong kind of tag\",\n \t\t\t      IDENTIFIER_POINTER (pending_invalid_xref));\n   pending_invalid_xref = 0;\n@@ -6337,9 +6334,8 @@ c_expand_body_1 (fndecl, nested_p)\n \n   /* Initialize the RTL code for the function.  */\n   current_function_decl = fndecl;\n-  input_filename = DECL_SOURCE_FILE (fndecl);\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n   init_function_start (fndecl, input_filename, DECL_SOURCE_LINE (fndecl));\n-  input_line = DECL_SOURCE_LINE (fndecl);\n \n   /* This function is being processed in whole-function mode.  */\n   cfun->x_whole_function_mode_p = 1;"}, {"sha": "59620ca3d0fd0690230b93c55c9daa0f97ad632e", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -543,8 +543,7 @@ genrtl_for_stmt (t)\n      tree t;\n {\n   tree cond = FOR_COND (t);\n-  const char *saved_filename;\n-  int saved_lineno;\n+  location_t saved_loc;\n \n   if (NEW_FOR_SCOPE_P (t))\n     genrtl_do_pushlevel ();\n@@ -562,8 +561,7 @@ genrtl_for_stmt (t)\n \n   /* Save the filename and line number so that we expand the FOR_EXPR\n      we can reset them back to the saved values.  */\n-  saved_filename = input_filename;\n-  saved_lineno = input_line;\n+  saved_loc = input_location;\n \n   /* Expand the condition.  */\n   if (cond && !integer_nonzerop (cond))\n@@ -578,8 +576,7 @@ genrtl_for_stmt (t)\n   expand_stmt (FOR_BODY (t));\n \n   /* Expand the increment expression.  */\n-  input_filename = saved_filename;\n-  input_line = saved_lineno;\n+  input_location = saved_loc;\n   emit_line_note (input_filename, input_line);\n   if (FOR_EXPR (t))\n     {\n@@ -952,11 +949,9 @@ static tree\n find_reachable_label (exp)\n      tree exp;\n {\n-  int line = input_line;\n-  const char *file = input_filename;\n+  location_t saved_loc = input_location;\n   tree ret = walk_tree (&exp, find_reachable_label_1, NULL, NULL);\n-  input_filename = file;\n-  input_line = line;\n+  input_location = saved_loc;\n   return ret;\n }\n "}, {"sha": "bc316b32f5657bc047b03688ac62188e0622810b", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -6932,16 +6932,14 @@ expand_expr (exp, target, tmode, modifier)\n     case EXPR_WITH_FILE_LOCATION:\n       {\n \trtx to_return;\n-\tconst char *saved_input_filename = input_filename;\n-\tint saved_lineno = input_line;\n+\tlocation_t saved_loc = input_location;\n \tinput_filename = EXPR_WFL_FILENAME (exp);\n \tinput_line = EXPR_WFL_LINENO (exp);\n \tif (EXPR_WFL_EMIT_LINE_NOTE (exp))\n \t  emit_line_note (input_filename, input_line);\n \t/* Possibly avoid switching back and forth here.  */\n \tto_return = expand_expr (EXPR_WFL_NODE (exp), target, tmode, modifier);\n-\tinput_filename = saved_input_filename;\n-\tinput_line = saved_lineno;\n+\tinput_location = saved_loc;\n \treturn to_return;\n       }\n "}, {"sha": "ec6c83a90e7175382890a0b33c3d3db05e1b202f", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -4150,7 +4150,7 @@ set_collect_gcc_options ()\n    sans all directory names, and basename_length is the number\n    of characters starting there excluding the suffix .c or whatever.  */\n \n-const char *input_filename;\n+static const char *input_filename;\n static int input_file_number;\n size_t input_filename_length;\n static int basename_length;"}, {"sha": "3c0b42ae01e8ce8a9ab193c771c5d56b21859a1e", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -3040,8 +3040,7 @@ output_inline_function (fndecl)\n \n   /* Make sure warnings emitted by the optimizers (e.g. control reaches\n      end of non-void function) is not wildly incorrect.  */\n-  input_filename = DECL_SOURCE_FILE (fndecl);\n-  input_line = DECL_SOURCE_LINE (fndecl);\n+  input_location = DECL_SOURCE_LOCATION (fndecl);\n \n   /* Compile this function all the way down to assembly code.  As a\n      side effect this destroys the saved RTL representation, but"}, {"sha": "065952b0e27aa5982832d0bff52670bb387a72e2", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -2130,9 +2130,9 @@ check_global_declarations (vec, len)\n     }\n }\n \n-/* Save the current INPUT_FILENAME and LINENO on the top entry in the\n+/* Save the current INPUT_LOCATION on the top entry in the\n    INPUT_FILE_STACK.  Push a new entry for FILE and LINE, and set the\n-   INPUT_FILENAME and LINENO accordingly.  */\n+   INPUT_LOCATION accordingly.  */\n \n void\n push_srcloc (file, line)\n@@ -2154,8 +2154,8 @@ push_srcloc (file, line)\n }\n \n /* Pop the top entry off the stack of presently open source files.\n-   Restore the INPUT_FILENAME and LINENO from the new topmost entry on\n-   the stack.  */\n+   Restore the INPUT_LOCATION from the new topmost entry on the\n+   stack.  */\n \n void\n pop_srcloc ()"}, {"sha": "d2cf66a364c9d383ed955391307cfe7514fc24be", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/070588f06e3c7677a21d2e0bdce7253229daa83b/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=070588f06e3c7677a21d2e0bdce7253229daa83b", "patch": "@@ -900,11 +900,9 @@ static tree\n find_alloca_call (exp)\n      tree exp;\n {\n-  int line = input_line;\n-  const char *file = input_filename;\n+  location_t saved_loc = input_location;\n   tree ret = walk_tree (&exp, find_alloca_call_1, NULL, NULL);\n-  input_line = line;\n-  input_filename = file;\n+  input_location = saved_loc;\n   return ret;\n }\n \n@@ -931,11 +929,9 @@ static tree\n find_builtin_longjmp_call (exp)\n      tree exp;\n {\n-  int line = input_line;\n-  const char *file = input_filename;\n+  location_t saved_loc = input_location;\n   tree ret = walk_tree (&exp, find_builtin_longjmp_call_1, NULL, NULL);\n-  input_line = line;\n-  input_filename = file;\n+  input_location = saved_loc;\n   return ret;\n }\n "}]}