{"sha": "517b1da2746f0abd2151331e18673898fd8dc367", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE3YjFkYTI3NDZmMGFiZDIxNTEzMzFlMTg2NzM4OThmZDhkYzM2Nw==", "commit": {"author": {"name": "Joey Ye", "email": "joey.ye@arm.com", "date": "2013-04-15T07:41:27Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2013-04-15T07:41:27Z"}, "message": "arm.c (thumb1_final_prescan_insn): Assert lr save for real far jump.\n\n2013-04-15  Joey Ye  <joey.ye@arm.com>\n\n    * config/arm/arm.c (thumb1_final_prescan_insn): Assert lr save\n    for real far jump.\n    (thumb_far_jump_used_p): Count instruction size and set\n    far_jump_used.\n\ntestsuite:\n    * gcc.target/arm/thumb1-far-jump-1.c: New test.\n    * gcc.target/arm/thumb1-far-jump-2.c: New test.\n\nFrom-SVN: r197956", "tree": {"sha": "df5a6b0d5b2fa9c82cf54232d1868739e59ac29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df5a6b0d5b2fa9c82cf54232d1868739e59ac29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/517b1da2746f0abd2151331e18673898fd8dc367", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517b1da2746f0abd2151331e18673898fd8dc367", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517b1da2746f0abd2151331e18673898fd8dc367", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517b1da2746f0abd2151331e18673898fd8dc367/comments", "author": {"login": "joeye-arm", "id": 38510878, "node_id": "MDQ6VXNlcjM4NTEwODc4", "avatar_url": "https://avatars.githubusercontent.com/u/38510878?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joeye-arm", "html_url": "https://github.com/joeye-arm", "followers_url": "https://api.github.com/users/joeye-arm/followers", "following_url": "https://api.github.com/users/joeye-arm/following{/other_user}", "gists_url": "https://api.github.com/users/joeye-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/joeye-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joeye-arm/subscriptions", "organizations_url": "https://api.github.com/users/joeye-arm/orgs", "repos_url": "https://api.github.com/users/joeye-arm/repos", "events_url": "https://api.github.com/users/joeye-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/joeye-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c21f34f1e19c0503bb56852233c969a7b107e080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c21f34f1e19c0503bb56852233c969a7b107e080", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c21f34f1e19c0503bb56852233c969a7b107e080"}], "stats": {"total": 130, "additions": 130, "deletions": 0}, "files": [{"sha": "6d664610d2ec141974ee27b94aa7f03a136bbcb7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=517b1da2746f0abd2151331e18673898fd8dc367", "patch": "@@ -1,3 +1,10 @@\n+2013-04-15  Joey Ye  <joey.ye@arm.com>\n+\n+\t* config/arm/arm.c (thumb1_final_prescan_insn): Assert lr save\n+\tfor real far jump.\n+\t(thumb_far_jump_used_p): Count instruction size and set\n+\tfar_jump_used.\n+\n 2013-04-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* reorg.c (fill_simple_delay_slots): Reindent block of code."}, {"sha": "e0667849c70d0ab6b5a44e54ff4ff6137a476ca2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=517b1da2746f0abd2151331e18673898fd8dc367", "patch": "@@ -22713,6 +22713,11 @@ thumb1_final_prescan_insn (rtx insn)\n       else if (conds != CONDS_NOCOND)\n \tcfun->machine->thumb1_cc_insn = NULL_RTX;\n     }\n+\n+    /* Check if unexpected far jump is used.  */\n+    if (cfun->machine->lr_save_eliminated\n+        && get_attr_far_jump (insn) == FAR_JUMP_YES)\n+      internal_error(\"Unexpected thumb1 far jump\");\n }\n \n int\n@@ -22738,6 +22743,8 @@ static int\n thumb_far_jump_used_p (void)\n {\n   rtx insn;\n+  bool far_jump = false;\n+  unsigned int func_size = 0;\n \n   /* This test is only important for leaf functions.  */\n   /* assert (!leaf_function_p ()); */\n@@ -22788,6 +22795,26 @@ thumb_far_jump_used_p (void)\n     {\n       if (JUMP_P (insn) && get_attr_far_jump (insn) == FAR_JUMP_YES)\n \t{\n+\t  far_jump = true;\n+\t}\n+      func_size += get_attr_length (insn);\n+    }\n+\n+  /* Attribute far_jump will always be true for thumb1 before\n+     shorten_branch pass.  So checking far_jump attribute before\n+     shorten_branch isn't much useful.\n+\n+     Following heuristic tries to estimate more accruately if a far jump\n+     may finally be used.  The heuristic is very conservative as there is\n+     no chance to roll-back the decision of not to use far jump.\n+\n+     Thumb1 long branch offset is -2048 to 2046.  The worst case is each\n+     2-byte insn is assiociated with a 4 byte constant pool.  Using\n+     function size 2048/3 as the threshold is conservative enough.  */\n+  if (far_jump)\n+    {\n+      if ((func_size * 3) >= 2048)\n+        {\n \t  /* Record the fact that we have decided that\n \t     the function does use far jumps.  */\n \t  cfun->machine->far_jump_used = 1;"}, {"sha": "c8d46d5bd630a1ce6c4f95208b3191550724e432", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=517b1da2746f0abd2151331e18673898fd8dc367", "patch": "@@ -1,3 +1,8 @@\n+2013-04-15  Joey Ye  <joey.ye@arm.com>\n+\n+\t* gcc.target/arm/thumb1-far-jump-1.c: New test.\n+\t* gcc.target/arm/thumb1-far-jump-2.c: New test.\n+\n 2013-04-14  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/56816"}, {"sha": "eb16d2fc99e6cbdcbaebd0f712d7df94e2c6ca91", "filename": "gcc/testsuite/gcc.target/arm/thumb1-far-jump-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-1.c?ref=517b1da2746f0abd2151331e18673898fd8dc367", "patch": "@@ -0,0 +1,34 @@\n+/* Check for thumb1 far jump. Shouldn't save lr for small leaf functions\n+ * even with a branch in it.  */\n+/* { dg-options \"-Os\" } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1 } } } */\n+\n+void f()\n+{\n+  for (;;);\n+}\n+\n+volatile int g;\n+void f2(int i)\n+{\n+  if (i) g=0;\n+}\n+\n+void f3(int i)\n+{\n+  if (i) {\n+    g=0;\n+    g=1;\n+    g=2;\n+    g=3;\n+    g=4;\n+    g=5;\n+    g=6;\n+    g=7;\n+    g=8;\n+    g=9;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-not \"push.*lr\" } } */\n+"}, {"sha": "c6878f8ef8bffd426c8895389bdfa41254efcd3a", "filename": "gcc/testsuite/gcc.target/arm/thumb1-far-jump-2.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/517b1da2746f0abd2151331e18673898fd8dc367/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fthumb1-far-jump-2.c?ref=517b1da2746f0abd2151331e18673898fd8dc367", "patch": "@@ -0,0 +1,57 @@\n+/* Check for thumb1 far jump. This is the extreme case that far jump\n+ * will be used with minimum number of instructions. By passing this case\n+ * it means the heuristic of saving lr for far jump meets the most extreme\n+ * requirement.  */\n+/* { dg-options \"-Os\" } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1 } } } */\n+\n+volatile register r4 asm(\"r4\");\n+void f3(int i)\n+{\n+#define GO(n) \\\n+  extern volatile int g_##n; \\\n+  r4=(int)&g_##n;\n+\n+#define GO8(n) \\\n+  GO(n##_0) \\\n+  GO(n##_1) \\\n+  GO(n##_2) \\\n+  GO(n##_3) \\\n+  GO(n##_4) \\\n+  GO(n##_5) \\\n+  GO(n##_6) \\\n+  GO(n##_7)\n+\n+#define GO64(n) \\\n+  GO8(n##_0) \\\n+  GO8(n##_1) \\\n+  GO8(n##_2) \\\n+  GO8(n##_3) \\\n+  GO8(n##_4) \\\n+  GO8(n##_5) \\\n+  GO8(n##_6) \\\n+  GO8(n##_7) \\\n+\n+#define GO498(n) \\\n+  GO64(n##_0) \\\n+  GO64(n##_1) \\\n+  GO64(n##_2) \\\n+  GO64(n##_3) \\\n+  GO64(n##_4) \\\n+  GO64(n##_5) \\\n+  GO64(n##_6) \\\n+  GO8(n##_0) \\\n+  GO8(n##_1) \\\n+  GO8(n##_2) \\\n+  GO8(n##_3) \\\n+  GO8(n##_4) \\\n+  GO8(n##_5) \\\n+  GO(n##_0) \\\n+  GO(n##_1) \\\n+\n+  if (i) {\n+    GO498(0);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler \"push.*lr\" } } */"}]}