{"sha": "d458c53a6f37c8c49aa854d12e6867b4d914555f", "node_id": "C_kwDOANBUbNoAKGQ0NThjNTNhNmYzN2M4YzQ5YWE4NTRkMTJlNjg2N2I0ZDkxNDU1NWY", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T16:55:53Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-05T16:55:53Z"}, "message": "PR rtl-optimization/96692: ((A|B)^C)^A using andn with -mbmi on x86.\n\nThis patch addresses PR rtl-optimization/96692 on x86_64, by providing\na set of combine splitters to convert the three operation ((A|B)^C)^D\ninto a two operation sequence using andn when either A or B is the same\nregister as C or D.  This is essentially a reassociation problem that's\nonly a win if the target supports an and-not instruction (as with -mbmi).\n\nHence for the new test case:\n\nint f(int a, int b, int c)\n{\n    return (a ^ b) ^ (a | c);\n}\n\nGCC on x86_64-pc-linux-gnu wth -O2 -mbmi would previously generate:\n\n        xorl    %edi, %esi\n        orl     %edx, %edi\n        movl    %esi, %eax\n        xorl    %edi, %eax\n        ret\n\nbut with this patch now generates:\n\n        andn    %edx, %edi, %eax\n        xorl    %esi, %eax\n        ret\n\n2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR rtl-optimization/96692\n\t* config/i386/i386.md (define_split): Split ((A | B) ^ C) ^ D\n\tas (X & ~Y) ^ Z on target BMI when either C or D is A or B.\n\ngcc/testsuite/ChangeLog\n\tPR rtl-optimization/96692\n\t* gcc.target/i386/bmi-andn-4.c: New test case.", "tree": {"sha": "5e24d77a022f050ca511d2749fe820a549c13937", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e24d77a022f050ca511d2749fe820a549c13937"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d458c53a6f37c8c49aa854d12e6867b4d914555f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d458c53a6f37c8c49aa854d12e6867b4d914555f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d458c53a6f37c8c49aa854d12e6867b4d914555f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d458c53a6f37c8c49aa854d12e6867b4d914555f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "069f46c71e9432eda3d48a366e5c2a750cf8d612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/069f46c71e9432eda3d48a366e5c2a750cf8d612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/069f46c71e9432eda3d48a366e5c2a750cf8d612"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "d11475489fc6cc6ceaeddb3b2c7309e847f36bc4", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d458c53a6f37c8c49aa854d12e6867b4d914555f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d458c53a6f37c8c49aa854d12e6867b4d914555f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d458c53a6f37c8c49aa854d12e6867b4d914555f", "patch": "@@ -10522,6 +10522,82 @@\n    (set (match_dup 0) (match_op_dup 1\n                         [(and:SI (match_dup 3) (match_dup 2))\n \t\t\t (const_int 0)]))])\n+\n+;; Variant 1 of 4: Split ((A | B) ^ A) ^ C as (B & ~A) ^ C.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(xor:SWI48\n+\t   (xor:SWI48\n+\t      (ior:SWI48 (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t (match_operand:SWI48 2 \"nonimmediate_operand\"))\n+\t      (match_dup 1))\n+\t   (match_operand:SWI48 3 \"nonimmediate_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  [(parallel\n+      [(set (match_dup 4) (and:SWI48 (not:SWI48 (match_dup 1)) (match_dup 2)))\n+       (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+      [(set (match_dup 0) (xor:SWI48 (match_dup 4) (match_dup 3)))\n+       (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n+;; Variant 2 of 4: Split ((A | B) ^ B) ^ C as (A & ~B) ^ C.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(xor:SWI48\n+\t   (xor:SWI48\n+\t      (ior:SWI48 (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t (match_operand:SWI48 2 \"register_operand\"))\n+\t      (match_dup 2))\n+\t   (match_operand:SWI48 3 \"nonimmediate_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  [(parallel\n+      [(set (match_dup 4) (and:SWI48 (not:SWI48 (match_dup 2)) (match_dup 1)))\n+       (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+      [(set (match_dup 0) (xor:SWI48 (match_dup 4) (match_dup 3)))\n+       (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n+;; Variant 3 of 4: Split ((A | B) ^ C) ^ A as (B & ~A) ^ C.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(xor:SWI48\n+\t   (xor:SWI48\n+\t      (ior:SWI48 (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t (match_operand:SWI48 2 \"nonimmediate_operand\"))\n+\t      (match_operand:SWI48 3 \"nonimmediate_operand\"))\n+\t   (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  [(parallel\n+      [(set (match_dup 4) (and:SWI48 (not:SWI48 (match_dup 1)) (match_dup 2)))\n+       (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+      [(set (match_dup 0) (xor:SWI48 (match_dup 4) (match_dup 3)))\n+       (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n+;; Variant 4 of 4: Split ((A | B) ^ C) ^ B as (A & ~B) ^ C.\n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(xor:SWI48\n+\t   (xor:SWI48\n+\t      (ior:SWI48 (match_operand:SWI48 1 \"register_operand\")\n+\t\t\t (match_operand:SWI48 2 \"register_operand\"))\n+\t      (match_operand:SWI48 3 \"nonimmediate_operand\"))\n+\t   (match_dup 2)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  [(parallel\n+      [(set (match_dup 4) (and:SWI48 (not:SWI48 (match_dup 2)) (match_dup 1)))\n+       (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+      [(set (match_dup 0) (xor:SWI48 (match_dup 4) (match_dup 3)))\n+       (clobber (reg:CC FLAGS_REG))])]\n+  \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n \f\n ;; Logical inclusive and exclusive OR instructions\n "}, {"sha": "fb89529869457d2331629f5b948f46d6af345bb0", "filename": "gcc/testsuite/gcc.target/i386/bmi-andn-4.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d458c53a6f37c8c49aa854d12e6867b4d914555f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d458c53a6f37c8c49aa854d12e6867b4d914555f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-andn-4.c?ref=d458c53a6f37c8c49aa854d12e6867b4d914555f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+\n+int f(int a, int b, int c)\n+{\n+    return (a ^ b) ^ (a | c);\n+}\n+\n+/* { dg-final { scan-assembler \"andn\\[ \\\\t\\]+\" } } */"}]}