{"sha": "1aae372ea5a890452d51da3e0d798e8d97f92638", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhZTM3MmVhNWE4OTA0NTJkNTFkYTNlMGQ3OThlOGQ5N2Y5MjYzOA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2001-09-06T16:48:48Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-09-06T16:48:48Z"}, "message": "Joern Rennecke (amylaar@cygnus.com)\n\nThu Sep  6 11:16:35 2001  Jeffrey A Law  (law@cygnus.com)\n\t\t\t  Joern Rennecke (amylaar@cygnus.com)\n\n\t* h8300-protos.h (h8300_return_addr_rtx): New prototype.\n\t* h8300.c (initial_offset): Handle offset between RP and FP.\n\t(h8300_return_addr_rtx): New function.\n\t* h8300.h (FIRST_PSEUDO_REGISTER): Bump now that we have a\n\treturn register.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Corresponding changes.\n\t(REG_ALLOC_ORDER, RETURN_ADDRESS_POINTER_REGNUM): Likewise.\n\t(REG_CLASS_CONTENTS, ELIMINABLE_REGS): Likewise.\n\t(CAN_ELIMINATE, REGISTER_NAMES):\n\t(RETURN_ADDR_RTX): Call h8300_return_addr_rtx.\n\nCo-Authored-By: Joern Rennecke <amylaar@cygnus.com>\n\nFrom-SVN: r45441", "tree": {"sha": "6e79bd04e722e4cfd11cde76207d760d72c13d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e79bd04e722e4cfd11cde76207d760d72c13d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aae372ea5a890452d51da3e0d798e8d97f92638", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aae372ea5a890452d51da3e0d798e8d97f92638", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aae372ea5a890452d51da3e0d798e8d97f92638", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aae372ea5a890452d51da3e0d798e8d97f92638/comments", "author": null, "committer": null, "parents": [{"sha": "5234e23b11138cf83cc55185c79b5fe2918e1066", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5234e23b11138cf83cc55185c79b5fe2918e1066", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5234e23b11138cf83cc55185c79b5fe2918e1066"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "b5bb57aea12cf7c3d64cf9d0c71712f9c6100fbc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1aae372ea5a890452d51da3e0d798e8d97f92638", "patch": "@@ -1,3 +1,17 @@\n+Thu Sep  6 11:16:35 2001  Jeffrey A Law  (law@cygnus.com)\n+\t\t\t  Joern Rennecke (amylaar@cygnus.com)\n+\n+\t* h8300-protos.h (h8300_return_addr_rtx): New prototype.\n+\t* h8300.c (initial_offset): Handle offset between RP and FP.\n+\t(h8300_return_addr_rtx): New function.\n+\t* h8300.h (FIRST_PSEUDO_REGISTER): Bump now that we have a\n+\treturn register.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Corresponding changes.\n+\t(REG_ALLOC_ORDER, RETURN_ADDRESS_POINTER_REGNUM): Likewise.\n+\t(REG_CLASS_CONTENTS, ELIMINABLE_REGS): Likewise.\n+\t(CAN_ELIMINATE, REGISTER_NAMES):\n+\t(RETURN_ADDR_RTX): Call h8300_return_addr_rtx.\n+\n 2001-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tRemove TYPE_NONCOPIED_PARTS."}, {"sha": "00623d92d05880ae929c90abff61e081a9d68b9f", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=1aae372ea5a890452d51da3e0d798e8d97f92638", "patch": "@@ -58,6 +58,9 @@ extern int bit_memory_operand PARAMS ((rtx, enum machine_mode));\n extern int eq_operator PARAMS ((rtx, enum machine_mode));\n extern int bit_operator PARAMS ((rtx, enum machine_mode));\n extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n+\n+/* Used in builtins.c */\n+extern rtx h8300_return_addr_rtx PARAMS ((int, rtx));\n #endif /* RTX_CODE */\n \n #ifdef TREE_CODE"}, {"sha": "7ad2489b963336470f4a762e2c2c48a978915dfe", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=1aae372ea5a890452d51da3e0d798e8d97f92638", "patch": "@@ -1516,6 +1516,8 @@ initial_offset (from, to)\n \n   if (from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n     offset = UNITS_PER_WORD + frame_pointer_needed * UNITS_PER_WORD;\n+  else if (from == RETURN_ADDRESS_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+    offset = frame_pointer_needed * UNITS_PER_WORD;\n   else\n     {\n       int regno;\n@@ -1536,6 +1538,26 @@ initial_offset (from, to)\n   return offset;\n }\n \n+rtx\n+h8300_return_addr_rtx (count, frame)\n+     int count;\n+     rtx frame;\n+{\n+  rtx ret;\n+\n+  if (count == 0)\n+    ret = gen_rtx_MEM (Pmode,\n+\t\t       gen_rtx_REG (Pmode, RETURN_ADDRESS_POINTER_REGNUM));\n+  else if (flag_omit_frame_pointer)\n+    return (rtx) 0;\n+  else\n+    ret = gen_rtx_MEM (Pmode,\n+\t\t       memory_address (Pmode,\n+\t\t\t\t       plus_constant (frame, UNITS_PER_WORD)));\n+  set_mem_alias_set (ret, get_frame_alias_set ());\n+  return ret;\n+}\n+\n /* Update the condition code from the insn.  */\n \n void"}, {"sha": "b14469fa914df8021b37cad2a39c82fa61d58184", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aae372ea5a890452d51da3e0d798e8d97f92638/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1aae372ea5a890452d51da3e0d798e8d97f92638", "patch": "@@ -270,13 +270,13 @@ extern int target_flags;\n    eliminated during reloading in favor of either the stack or frame\n    pointer.  */\n \n-#define FIRST_PSEUDO_REGISTER 10\n+#define FIRST_PSEUDO_REGISTER 11\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.  */\n \n #define FIXED_REGISTERS \\\n-  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1}\n+  { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1}\n \n /* 1 for registers not available across function calls.\n    These must include the FIXED_REGISTERS and also any\n@@ -289,10 +289,10 @@ extern int target_flags;\n    H8 destroys r0,r1,r2,r3.  */\n \n #define CALL_USED_REGISTERS \\\n-  { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 }\n+  { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 }\n \n #define REG_ALLOC_ORDER \\\n-  { 2, 3, 0, 1, 4, 5, 6, 8, 7, 9}\n+  { 2, 3, 0, 1, 4, 5, 6, 8, 7, 9, 10}\n \n #define CONDITIONAL_REGISTER_USAGE\t\t\\\n {\t\t\t\t\t\t\\\n@@ -359,6 +359,16 @@ extern int target_flags;\n \n /* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM 3\n+\n+/* Fake register that holds the address on the stack of the\n+   current function's return address.  */\n+#define RETURN_ADDRESS_POINTER_REGNUM 10\n+\n+/* A C expression whose value is RTL representing the value of the return\n+   address for the frame COUNT steps up from the current frame.\n+   FRAMEADDR is already the frame pointer of the COUNT frame, assuming\n+   a stack layout with the frame pointer as the first saved register.  */\n+#define RETURN_ADDR_RTX(COUNT, FRAME) h8300_return_addr_rtx ((COUNT), (FRAME))\n \f\n /* Define the classes of registers for register constraints in the\n    machine description.  Also define ranges of constants.\n@@ -397,9 +407,9 @@ enum reg_class {\n \n #define REG_CLASS_CONTENTS  \t\t\t\\\n {      {0},\t\t/* No regs      */\t\\\n-   {0x2ff},\t\t/* GENERAL_REGS */    \t\\\n+   {0x6ff},\t\t/* GENERAL_REGS */    \t\\\n    {0x100},\t\t/* MAC_REGS */    \t\\\n-   {0x3ff},\t\t/* ALL_REGS \t*/\t\\\n+   {0x7ff},\t\t/* ALL_REGS \t*/\t\\\n }\n \n /* The same information, inverted:\n@@ -555,21 +565,24 @@ enum reg_class {\n    pointer register.  Secondly, the argument pointer register can always be\n    eliminated; it is replaced with either the stack or frame pointer. */\n \n-#define ELIMINABLE_REGS\t\t\t\t\\\n-{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\\\n- { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},   \\\n+#define ELIMINABLE_REGS\t\t\t\t\t\\\n+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\t\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, STACK_POINTER_REGNUM},\\\n+ { RETURN_ADDRESS_POINTER_REGNUM, FRAME_POINTER_REGNUM},\\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}}\n \n /* Given FROM and TO register numbers, say whether this elimination is allowed.\n    Frame pointer elimination is automatically handled.\n \n    For the h8300, if frame pointer elimination is being done, we would like to\n-   convert ap into sp, not fp.\n+   convert ap and rp into sp, not fp.\n \n    All other eliminations are valid.  */\n \n #define CAN_ELIMINATE(FROM, TO)\t\t\t\t\t\\\n- ((FROM) == ARG_POINTER_REGNUM && (TO) == STACK_POINTER_REGNUM\t\\\n+ ((((FROM) == ARG_POINTER_REGNUM || (FROM) == RETURN_ADDRESS_POINTER_REGNUM) \\\n+   && (TO) == STACK_POINTER_REGNUM)\t\t\t\t\\\n   ? ! frame_pointer_needed\t\t\t\t\t\\\n   : 1)\n \n@@ -1176,7 +1189,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n \n #define REGISTER_NAMES \\\n-{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\" }\n+{ \"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"sp\", \"mac\", \"ap\", \"rap\" }\n \n #define ADDITIONAL_REGISTER_NAMES \\\n { {\"er0\", 0}, {\"er1\", 1}, {\"er2\", 2}, {\"er3\", 3}, {\"er4\", 4}, \\"}]}