{"sha": "aae9da9bdebeb345aee79125441c16dd94ae70db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFlOWRhOWJkZWJlYjM0NWFlZTc5MTI1NDQxYzE2ZGQ5NGFlNzBkYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-12T08:58:58Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-12T08:58:58Z"}, "message": "Add new verification for profile-count.h.\n\n2018-01-12  Martin Liska  <mliska@suse.cz>\n\n\t* profile-count.h (enum profile_quality): Use 0 as invalid\n\tenum value of profile_quality.\n\nFrom-SVN: r256565", "tree": {"sha": "3a25f9e1b44e361d0c04c857053cec5e2b74c7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a25f9e1b44e361d0c04c857053cec5e2b74c7cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aae9da9bdebeb345aee79125441c16dd94ae70db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae9da9bdebeb345aee79125441c16dd94ae70db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aae9da9bdebeb345aee79125441c16dd94ae70db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aae9da9bdebeb345aee79125441c16dd94ae70db/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b710b08a8c9534239f1356ed039147d23c00b253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b710b08a8c9534239f1356ed039147d23c00b253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b710b08a8c9534239f1356ed039147d23c00b253"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "3dff3ed65ce95077ed43360e2abdfd8576b760b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae9da9bdebeb345aee79125441c16dd94ae70db/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae9da9bdebeb345aee79125441c16dd94ae70db/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aae9da9bdebeb345aee79125441c16dd94ae70db", "patch": "@@ -1,3 +1,8 @@\n+2018-01-12  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile-count.h (enum profile_quality): Use 0 as invalid\n+\tenum value of profile_quality.\n+\n 2018-01-12  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* doc/invoke.texi (NDS32 Options): Add -mext-perf, -mext-perf2 and"}, {"sha": "7a43917ebbc896eb2f2d6a893e45cdf2c114d568", "filename": "gcc/profile-count.h", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aae9da9bdebeb345aee79125441c16dd94ae70db/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aae9da9bdebeb345aee79125441c16dd94ae70db/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=aae9da9bdebeb345aee79125441c16dd94ae70db", "patch": "@@ -30,27 +30,27 @@ enum profile_quality {\n      or may not match reality.  It is local to function and can not be compared\n      inter-procedurally.  Never used by probabilities (they are always local).\n    */\n-  profile_guessed_local = 0,\n+  profile_guessed_local = 1,\n   /* Profile was read by feedback and was 0, we used local heuristics to guess\n      better.  This is the case of functions not run in profile fedback.\n      Never used by probabilities.  */\n-  profile_guessed_global0 = 1,\n+  profile_guessed_global0 = 2,\n \n   /* Same as profile_guessed_global0 but global count is adjusted 0.  */\n-  profile_guessed_global0adjusted = 2,\n+  profile_guessed_global0adjusted = 3,\n \n   /* Profile is based on static branch prediction heuristics.  It may or may\n      not reflect the reality but it can be compared interprocedurally\n      (for example, we inlined function w/o profile feedback into function\n       with feedback and propagated from that).\n      Never used by probablities.  */\n-  profile_guessed = 3,\n+  profile_guessed = 4,\n   /* Profile was determined by autofdo.  */\n-  profile_afdo = 4,\n+  profile_afdo = 5,\n   /* Profile was originally based on feedback but it was adjusted\n      by code duplicating optimization.  It may not precisely reflect the\n      particular code path.  */\n-  profile_adjusted = 5,\n+  profile_adjusted = 6,\n   /* Profile was read from profile feedback or determined by accurate static\n      method.  */\n   profile_precise = 7\n@@ -505,6 +505,8 @@ class GTY((user)) profile_probability\n   /* Return false if profile_probability is bogus.  */\n   bool verify () const\n     {\n+      gcc_checking_assert (profile_guessed_local <= m_quality\n+\t\t\t   && m_quality <= profile_precise);\n       if (m_val == uninitialized_probability)\n \treturn m_quality == profile_guessed;\n       else if (m_quality < profile_guessed)\n@@ -784,6 +786,8 @@ class GTY(()) profile_count\n   /* Return false if profile_count is bogus.  */\n   bool verify () const\n     {\n+      gcc_checking_assert (profile_guessed_local <= m_quality\n+\t\t\t   && m_quality <= profile_precise);\n       return m_val != uninitialized_count || m_quality == profile_guessed_local;\n     }\n "}]}