{"sha": "64dc013853b5a414bfe70727010942e3f872c402", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRkYzAxMzg1M2I1YTQxNGJmZTcwNzI3MDEwOTQyZTNmODcyYzQwMg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-08T13:20:49Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-11T09:12:22Z"}, "message": "aarch64: Reimplement vmovl*/vmovn* intrinsics using __builtin_convertvector\n\n__builtin_convertvector seems well-suited to implementing the vmovl and\nvmovn intrinsics that widen and narrow\nthe integer elements in a vector.\n\nThis removes some more inline assembly from the intrinsics.\n\ngcc/\n\t* config/aarch64/arm_neon.h (vmovl_s8): Reimplement using\n\t__builtin_convertvector.\n\t(vmovl_s16): Likewise.\n\t(vmovl_s32): Likewise.\n\t(vmovl_u8): Likewise.\n\t(vmovl_u16): Likewise.\n\t(vmovl_u32): Likewise.\n\t(vmovn_s16): Likewise.\n\t(vmovn_s32): Likewise.\n\t(vmovn_s64): Likewise.\n\t(vmovn_u16): Likewise.\n\t(vmovn_u32): Likewise.\n\t(vmovn_u64): Likewise.", "tree": {"sha": "fb2ba674df12bf74dd0e9f9448c92f03f56901e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb2ba674df12bf74dd0e9f9448c92f03f56901e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64dc013853b5a414bfe70727010942e3f872c402", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dc013853b5a414bfe70727010942e3f872c402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dc013853b5a414bfe70727010942e3f872c402", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dc013853b5a414bfe70727010942e3f872c402/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e275dccfc2467b3fe39012a3dd2a80bac257dd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e275dccfc2467b3fe39012a3dd2a80bac257dd0"}], "stats": {"total": 84, "additions": 12, "deletions": 72}, "files": [{"sha": "d3a81dac4757e7757dfa5c1a2a4189d834a1457b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64dc013853b5a414bfe70727010942e3f872c402/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64dc013853b5a414bfe70727010942e3f872c402/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=64dc013853b5a414bfe70727010942e3f872c402", "patch": "@@ -8709,72 +8709,42 @@ __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s8 (int8x8_t __a)\n {\n-  int16x8_t __result;\n-  __asm__ (\"sshll %0.8h,%1.8b,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int16x8_t);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s16 (int16x4_t __a)\n {\n-  int32x4_t __result;\n-  __asm__ (\"sshll %0.4s,%1.4h,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int32x4_t);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_s32 (int32x2_t __a)\n {\n-  int64x2_t __result;\n-  __asm__ (\"sshll %0.2d,%1.2s,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int64x2_t);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u8 (uint8x8_t __a)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"ushll %0.8h,%1.8b,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint16x8_t);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u16 (uint16x4_t __a)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"ushll %0.4s,%1.4h,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint32x4_t);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovl_u32 (uint32x2_t __a)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"ushll %0.2d,%1.2s,#0\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint64x2_t);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -8853,72 +8823,42 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s16 (int16x8_t __a)\n {\n-  int8x8_t __result;\n-  __asm__ (\"xtn %0.8b,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int8x8_t);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s32 (int32x4_t __a)\n {\n-  int16x4_t __result;\n-  __asm__ (\"xtn %0.4h,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int16x4_t);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_s64 (int64x2_t __a)\n {\n-  int32x2_t __result;\n-  __asm__ (\"xtn %0.2s,%1.2d\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, int32x2_t);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u16 (uint16x8_t __a)\n {\n-  uint8x8_t __result;\n-  __asm__ (\"xtn %0.8b,%1.8h\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint8x8_t);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u32 (uint32x4_t __a)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"xtn %0.4h,%1.4s\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint16x4_t);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmovn_u64 (uint64x2_t __a)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"xtn %0.2s,%1.2d\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_convertvector (__a, uint32x2_t);\n }\n \n #define vmull_high_lane_s16(a, b, c)                                    \\"}]}