{"sha": "37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdlYTBiN2U3NDFjZmM2ODY2OWU4YTZkNDYwYmZjNWY4YmZiMzFiYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2007-03-02T01:55:06Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2007-03-02T01:55:06Z"}, "message": "target.h (init_dwarf_reg_sizes_extra): New target hook.\n\n\t* target.h (init_dwarf_reg_sizes_extra): New target hook.\n\t* target-def.h (TARGET_INIT_DWARF_REG_SIZES_EXTRA): New default.\n\t* doc/tm.texi (TARGET_INIT_DWARF_REG_SIZES_EXTRA): Document.\n\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): Call this\n\thook.\n\t* config/rs6000/rs6000.c (TARGET_INIT_DWARF_REG_SIZES_EXTRA,\n\trs6000_init_dwarf_reg_sizes_extra): New.\n\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Support\n\tSPE register high parts.\n\ntestsuite:\n\t* gcc.target/powerpc/spe-unwind-1.c, g++.dg/eh/simd-5.C: New\n\ttests.\n\nFrom-SVN: r122468", "tree": {"sha": "c1e2ef7127a2f1f85055feb6b8c5cb896632aad0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e2ef7127a2f1f85055feb6b8c5cb896632aad0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c4d24932ed29249ebb8ba1a3cff0679b9d2f58a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4d24932ed29249ebb8ba1a3cff0679b9d2f58a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4d24932ed29249ebb8ba1a3cff0679b9d2f58a"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "fc055f55d62e1d14f2548e49ca6804fc91162344", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -1,3 +1,15 @@\n+2007-03-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* target.h (init_dwarf_reg_sizes_extra): New target hook.\n+\t* target-def.h (TARGET_INIT_DWARF_REG_SIZES_EXTRA): New default.\n+\t* doc/tm.texi (TARGET_INIT_DWARF_REG_SIZES_EXTRA): Document.\n+\t* dwarf2out.c (expand_builtin_init_dwarf_reg_sizes): Call this\n+\thook.\n+\t* config/rs6000/rs6000.c (TARGET_INIT_DWARF_REG_SIZES_EXTRA,\n+\trs6000_init_dwarf_reg_sizes_extra): New.\n+\t* config/rs6000/linux-unwind.h (ppc_fallback_frame_state): Support\n+\tSPE register high parts.\n+\n 2007-03-01  Brooks Moses  <brooks.moses@codesourcery.com>\n \n \t* Makefile.in: Add install-pdf target as"}, {"sha": "b6262510a7b0a53764d416e3bdbde8214c2a273e", "filename": "gcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -301,6 +301,17 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n       fs->regs.reg[VRSAVE_REGNO].loc.offset = (long) &vregs->vsave - new_cfa;\n     }\n \n+  /* If we have SPE register high-parts... we check at compile-time to\n+     avoid expanding the code for all other PowerPC.  */\n+#ifdef __SPE__\n+  for (i = 0; i < 32; i++)\n+    {\n+      fs->regs.reg[i + FIRST_PSEUDO_REGISTER - 1].how = REG_SAVED_OFFSET;\n+      fs->regs.reg[i + FIRST_PSEUDO_REGISTER - 1].loc.offset\n+\t= (long) &regs->vregs - new_cfa + 4 * i;\n+    }\n+#endif\n+\n   return _URC_NO_REASON;\n }\n "}, {"sha": "b9614b8ff279eb3a764126ad22cffa854764b6fa", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -765,6 +765,7 @@ static rtx generate_set_vrsave (rtx, rs6000_stack_t *, int);\n int easy_vector_constant (rtx, enum machine_mode);\n static bool rs6000_is_opaque_type (tree);\n static rtx rs6000_dwarf_register_span (rtx);\n+static void rs6000_init_dwarf_reg_sizes_extra (tree);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n static void rs6000_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static rtx rs6000_tls_get_addr (void);\n@@ -1028,6 +1029,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_DWARF_REGISTER_SPAN\n #define TARGET_DWARF_REGISTER_SPAN rs6000_dwarf_register_span\n \n+#undef TARGET_INIT_DWARF_REG_SIZES_EXTRA\n+#define TARGET_INIT_DWARF_REG_SIZES_EXTRA rs6000_init_dwarf_reg_sizes_extra\n+\n /* On rs6000, function arguments are promoted, as are function return\n    values.  */\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n@@ -20657,6 +20661,30 @@ rs6000_dwarf_register_span (rtx reg)\n \t\t\t\t   gen_rtx_REG (SImode, regno + 1200)));\n }\n \n+/* Fill in sizes for SPE register high parts in table used by unwinder.  */\n+\n+static void\n+rs6000_init_dwarf_reg_sizes_extra (tree address)\n+{\n+  if (TARGET_SPE)\n+    {\n+      int i;\n+      enum machine_mode mode = TYPE_MODE (char_type_node);\n+      rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n+      rtx mem = gen_rtx_MEM (BLKmode, addr);\n+      rtx value = gen_int_mode (4, mode);\n+\n+      for (i = 1201; i < 1232; i++)\n+\t{\n+\t  int column = DWARF_REG_TO_UNWIND_COLUMN (i);\n+\t  HOST_WIDE_INT offset\n+\t    = DWARF_FRAME_REGNUM (column) * GET_MODE_SIZE (mode);\n+\n+\t  emit_move_insn (adjust_address (mem, mode, offset), value);\n+\t}\n+    }\n+}\n+\n /* Map internal gcc register numbers to DWARF2 register numbers.  */\n \n unsigned int"}, {"sha": "2d9ef64eb4798f28e1a727ca9a8094b6d8a79680", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -8168,6 +8168,15 @@ register in Dwarf.  Otherwise, this hook should return @code{NULL_RTX}.\n If not defined, the default is to return @code{NULL_RTX}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_INIT_DWARF_REG_SIZES_EXTRA (tree @var{address})\n+If some registers are represented in Dwarf-2 unwind information in\n+multiple pieces, define this hook to fill in information about the\n+sizes of those pieces in the table used by the unwinder at runtime.\n+It will be called by @code{expand_builtin_init_dwarf_reg_sizes} after\n+filling in a single size corresponding to each hard register;\n+@var{address} is the address of the table.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_ASM_TTYPE (rtx @var{sym})\n This hook is used to output a reference from a frame unwinding table to\n the type_info object identified by @var{sym}.  It should return @code{true}"}, {"sha": "029d1c207f5834c132a73ca6ca2b0a7be6c16b46", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -498,6 +498,8 @@ expand_builtin_init_dwarf_reg_sizes (tree address)\n #ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n   init_return_column_size (mode, mem, DWARF_ALT_FRAME_RETURN_COLUMN);\n #endif\n+\n+  targetm.init_dwarf_reg_sizes_extra (address);\n }\n \n /* Convert a DWARF call frame info. operation to its string name */"}, {"sha": "c9d5180840d25352c34b6026b16965056de08013", "filename": "gcc/target-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -190,6 +190,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n #endif\n \n #define TARGET_DWARF_REGISTER_SPAN hook_rtx_rtx_null\n+#define TARGET_INIT_DWARF_REG_SIZES_EXTRA hook_void_tree\n \n #ifndef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START default_file_start\n@@ -688,6 +689,7 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_ALLOCATE_INITIAL_VALUE,\t\t\\\n   TARGET_DWARF_REGISTER_SPAN,                   \\\n+  TARGET_INIT_DWARF_REG_SIZES_EXTRA,\t\t\\\n   TARGET_FIXED_CONDITION_CODE_REGS,\t\t\\\n   TARGET_CC_MODES_COMPATIBLE,\t\t\t\\\n   TARGET_MACHINE_DEPENDENT_REORG,\t\t\\"}, {"sha": "d312c9f88f1ce8600fa666395f238c130e477be9", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -601,6 +601,12 @@ struct gcc_target\n      hook should return NULL_RTX.  */\n   rtx (* dwarf_register_span) (rtx);\n \n+  /* If expand_builtin_init_dwarf_reg_sizes needs to fill in table\n+     entries not corresponding directly to registers below\n+     FIRST_PSEUDO_REGISTER, this hook should generate the necessary\n+     code, given the address of the table.  */\n+  void (* init_dwarf_reg_sizes_extra) (tree);\n+\n   /* Fetch the fixed register(s) which hold condition codes, for\n      targets where it makes sense to look for duplicate assignments to\n      the condition codes.  This should return true if there is such a"}, {"sha": "3247f94b11935427e0cd3859fa43d73b39f74027", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -1,3 +1,8 @@\n+2007-03-02  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.target/powerpc/spe-unwind-1.c, g++.dg/eh/simd-5.C: New\n+\ttests.\n+\n 2007-03-01  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/prefetch-4.c: New test."}, {"sha": "d83d31392c67eb6462d0b2d9723e3ed3ebd8af28", "filename": "gcc/testsuite/g++.dg/eh/simd-5.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Feh%2Fsimd-5.C?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -0,0 +1,44 @@\n+// Test EH with V2SI SIMD registers actually restores correct values.\n+// Origin: Joseph Myers <joseph@codesourcery.com>\n+// { dg-options \"-O\" }\n+// { dg-do run { target powerpc_spe } }\n+\n+extern \"C\" void abort (void);\n+extern \"C\" int memcmp (const void *, const void *, __SIZE_TYPE__);\n+typedef int __attribute__((vector_size (8))) v2si;\n+\n+v2si a = { 1, 2 };\n+v2si b = { 3, 4 };\n+v2si c = { 4, 6 };\n+volatile v2si r;\n+v2si r2;\n+\n+void\n+f ()\n+{\n+  register v2si v asm(\"r15\");\n+  v = __builtin_spe_evaddw (b, c);\n+  asm volatile (\"\" : \"+r\" (v));\n+  r = v;\n+  throw 1;\n+}\n+\n+int\n+main ()\n+{\n+  register v2si v asm(\"r15\");\n+  v = __builtin_spe_evaddw (a, b);\n+  asm volatile (\"\" : \"+r\" (v));\n+  try\n+    {\n+      f ();\n+    }\n+  catch (int)\n+    {\n+      r = v;\n+      r2 = r;\n+      if (memcmp (&r2, &c, sizeof (v2si)))\n+\tabort ();\n+    }\n+  return 0;\n+}"}, {"sha": "84d4bf28803f2da00b4b37e088dfcfaca6c30cc0", "filename": "gcc/testsuite/gcc.target/powerpc/spe-unwind-1.c", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c?ref=37ea0b7e741cfc68669e8a6d460bfc5f8bfb31ba", "patch": "@@ -0,0 +1,116 @@\n+/* Verify that unwinding can find SPE registers in signal frames.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { target { powerpc*-*-linux* && powerpc_spe } } } */\n+/* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n+\n+#include <unwind.h>\n+#include <stdlib.h>\n+#include <signal.h>\n+#include <string.h>\n+\n+int count;\n+char *null;\n+int found_reg;\n+\n+typedef int v2si __attribute__((__vector_size__(8)));\n+\n+v2si v1 = { 123, 234 };\n+v2si v2 = { 345, 456 };\n+\n+static _Unwind_Reason_Code\n+force_unwind_stop (int version, _Unwind_Action actions,\n+                   _Unwind_Exception_Class exc_class,\n+                   struct _Unwind_Exception *exc_obj,\n+                   struct _Unwind_Context *context,\n+                   void *stop_parameter)\n+{\n+  unsigned int reg;\n+  if (actions & _UA_END_OF_STACK)\n+    abort ();\n+  if (_Unwind_GetGR (context, 1215) == 123)\n+    found_reg = 1;\n+  return _URC_NO_REASON;\n+}\n+\n+static void force_unwind ()\n+{\n+  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n+  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n+  exc->exception_cleanup = 0;\n+\n+#ifndef __USING_SJLJ_EXCEPTIONS__\n+  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n+#else\n+  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n+#endif\n+\n+  abort ();\n+}\n+\n+static void counter (void *p __attribute__((unused)))\n+{\n+  ++count;\n+}\n+\n+static void handler (void *p __attribute__((unused)))\n+{\n+  if (count != 2)\n+    abort ();\n+  if (!found_reg)\n+    abort ();\n+  exit (0);\n+}\n+\n+static int __attribute__((noinline)) fn5 ()\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  force_unwind ();\n+  return 0;\n+}\n+\n+static void fn4 (int sig)\n+{\n+  char dummy __attribute__((cleanup (counter)));\n+  /* Clobber high part without compiler's knowledge so the only saved\n+     copy is from the signal frame.  */\n+  asm volatile (\"evmergelo 15,15,15\");\n+  fn5 ();\n+  null = NULL;\n+}\n+\n+static void fn3 ()\n+{\n+  abort ();\n+}\n+\n+static int __attribute__((noinline)) fn2 ()\n+{\n+  register v2si r15 asm(\"r15\");\n+  r15 = v1;\n+  asm volatile (\"\" : \"+r\" (r15));\n+  *null = 0;\n+  fn3 ();\n+  return 0;\n+}\n+\n+static int __attribute__((noinline)) fn1 ()\n+{\n+  signal (SIGSEGV, fn4);\n+  signal (SIGBUS, fn4);\n+  fn2 ();\n+  return 0;\n+}\n+\n+static int __attribute__((noinline)) fn0 ()\n+{\n+  char dummy __attribute__((cleanup (handler)));\n+  fn1 ();\n+  null = 0;\n+  return 0;\n+}\n+\n+int main()\n+{ \n+  fn0 ();\n+  abort ();\n+}"}]}