{"sha": "94c5db545027930ae1bea5523c346c13eefdeb78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjNWRiNTQ1MDI3OTMwYWUxYmVhNTUyM2MzNDZjMTNlZWZkZWI3OA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-16T21:31:37Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-16T21:31:37Z"}, "message": "i370.c (ascebc, ebcasc): Wrap in macros controlling usage.\n\n\t* i370.c (ascebc, ebcasc): Wrap in macros controlling usage.\n\t(i370_output_function_prologue): Fix format specifier warnings.\n\t* i370.h (PRINT_OPERAND): Likewise.\n\nFrom-SVN: r66884", "tree": {"sha": "de802b2e35153f15acf935aac68c5820cf4c6b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de802b2e35153f15acf935aac68c5820cf4c6b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94c5db545027930ae1bea5523c346c13eefdeb78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c5db545027930ae1bea5523c346c13eefdeb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c5db545027930ae1bea5523c346c13eefdeb78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c5db545027930ae1bea5523c346c13eefdeb78/comments", "author": null, "committer": null, "parents": [{"sha": "1bdfacf6ea02d9aed8b945aa79dd4482050ea858", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bdfacf6ea02d9aed8b945aa79dd4482050ea858", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bdfacf6ea02d9aed8b945aa79dd4482050ea858"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "d241d5a87dfb434be604bba4a37be8911d1560a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=94c5db545027930ae1bea5523c346c13eefdeb78", "patch": "@@ -1,5 +1,9 @@\n 2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* i370.c (ascebc, ebcasc): Wrap in macros controlling usage.\n+\t(i370_output_function_prologue): Fix format specifier warnings.\n+\t* i370.h (PRINT_OPERAND): Likewise.\n+\n \t* fr30.c (fr30_print_operand): Fix format specifier warnings.\n \n \t* dsp16xx.c (print_operand_address): Fix format specifier warning."}, {"sha": "5dc63018eea5682935dd538be78f9fd0378bbce6", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=94c5db545027930ae1bea5523c346c13eefdeb78", "patch": "@@ -173,6 +173,7 @@ static const char *const mvs_function_table[MVS_FUNCTION_TABLE_LENGTH] =\n #endif /* TARGET_HLASM */\n /* ===================================================== */\n \n+#if defined(TARGET_EBCDIC) && !defined(HOST_EBCDIC)\n /* ASCII to EBCDIC conversion table.  */\n static const unsigned char ascebc[256] =\n {\n@@ -225,7 +226,10 @@ static const unsigned char ascebc[256] =\n      0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F,\n      0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0x3F, 0xFF\n };\n+#endif /* TARGET_EBCDIC && ! HOST_EBCDIC */\n+\n \n+#if defined(HOST_EBCDIC) && !defined(TARGET_EBCDIC)\n /* EBCDIC to ASCII conversion table.  */\n static const unsigned char ebcasc[256] =\n {\n@@ -294,6 +298,7 @@ static const unsigned char ebcasc[256] =\n  /*F8   8     9                                     */\n      0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF\n };\n+#endif /* HOST_EBCDIC && ! TARGET_EBCDIC */\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_HLASM\n@@ -1302,8 +1307,9 @@ i370_output_function_prologue (f, l)\n   fprintf (f, \"* Function %s prologue\\n\", mvs_function_name);\n   fprintf (f, \"FDSE%03d\\tDSECT\\n\", function_label_index);\n   fprintf (f, \"\\tDS\\tD\\n\");\n-  fprintf (f, \"\\tDS\\tCL(%d)\\n\", STACK_POINTER_OFFSET + l\n-\t\t\t+ current_function_outgoing_args_size);\n+  fprintf (f, \"\\tDS\\tCL(\" HOST_WIDE_INT_PRINT_DEC \")\\n\",\n+\t   STACK_POINTER_OFFSET + l\n+\t   + current_function_outgoing_args_size);\n   fprintf (f, \"\\tORG\\tFDSE%03d\\n\", function_label_index);\n   fprintf (f, \"\\tDS\\tCL(120+8)\\n\");\n   fprintf (f, \"\\tORG\\n\");\n@@ -1491,7 +1497,8 @@ i370_output_function_prologue (f, frame_size)\n   aligned_size = (stackframe_size + 7) >> 3;\n   aligned_size <<= 3;\n   \n-  fprintf (f, \"# arg_size=0x%x frame_size=0x%x aligned size=0x%x\\n\", \n+  fprintf (f, \"# arg_size=0x%x frame_size=\" HOST_WIDE_INT_PRINT_HEX\n+\t   \" aligned size=0x%x\\n\", \n      current_function_outgoing_args_size, frame_size, aligned_size);\n \n   fprintf (f, \"\\t.using\\t.,r15\\n\");"}, {"sha": "48ade28b5bbbc94f18efc945831d58d487fb964f", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c5db545027930ae1bea5523c346c13eefdeb78/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=94c5db545027930ae1bea5523c346c13eefdeb78", "patch": "@@ -1249,7 +1249,7 @@ enum reg_class\n \t  if (CODE == 'O')\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (GET_CODE (addr) == PLUS)\t\t\t\t\\\n-\t\tfprintf (FILE, \"%d\", INTVAL (XEXP (addr, 1)));\t\t\\\n+\t\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, INTVAL (XEXP (addr, 1))); \\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfprintf (FILE, \"0\");\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n@@ -1274,21 +1274,21 @@ enum reg_class\n \tbreak;\t\t\t\t\t\t\t\t\\\n       case CONST_INT:\t\t\t\t\t        \t\\\n \tif (CODE == 'B')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%d\", INTVAL (XV) & 0xff);\t\t\t\\\n+\t  fprintf (FILE, \"%d\", (int) (INTVAL (XV) & 0xff));\t\t\\\n \telse if (CODE == 'X')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%02X\", INTVAL (XV) & 0xff);\t\t\t\\\n+\t  fprintf (FILE, \"%02X\", (int) (INTVAL (XV) & 0xff));\t\t\\\n \telse if (CODE == 'h')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%d\", (INTVAL (XV) << 16) >> 16);\t\t\\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (INTVAL (XV) << 16) >> 16); \\\n \telse if (CODE == 'H')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 2;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=H'%d'\", (INTVAL (XV) << 16) >> 16);\t\\\n+\t    fprintf (FILE, \"=H'\" HOST_WIDE_INT_PRINT_DEC \"'\", (INTVAL (XV) << 16) >> 16); \\\n \t  }\t\t\t\t\t\t\t\t\\\n \telse if (CODE == 'K')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n             /* auto sign-extension of signed 16-bit to signed 32-bit */\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=F'%d'\", (INTVAL (XV) << 16) >> 16);\t\\\n+\t    fprintf (FILE, \"=F'\" HOST_WIDE_INT_PRINT_DEC \"'\", (INTVAL (XV) << 16) >> 16); \\\n \t  }\t\t\t\t\t\t\t\t\\\n \telse if (CODE == 'W')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n@@ -1304,7 +1304,7 @@ enum reg_class\n \telse\t\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=F'%d'\", INTVAL (XV));\t\t\t\\\n+\t    fprintf (FILE, \"=F'\" HOST_WIDE_INT_PRINT_DEC \"'\", INTVAL (XV)); \\\n \t  }\t\t\t\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       case CONST_DOUBLE:\t\t\t\t\t\t\\\n@@ -1362,8 +1362,8 @@ enum reg_class\n \t\tfprintf (FILE, \"=V(\");\t\t\t\t\t\\\n \t\tASM_OUTPUT_LABELREF (FILE,\t\t\t\t\\\n \t\t\t\t  XSTR (XEXP (XEXP (XV, 0), 0), 0));\t\\\n-\t\tfprintf (FILE, \")\\n\\tA\\t%s,=F'%d'\", curreg,\t\t\\\n-\t\t\t\t  INTVAL (XEXP (XEXP (XV, 0), 1)));\t\\\n+\t\tfprintf (FILE, \")\\n\\tA\\t%s,=F'\" HOST_WIDE_INT_PRINT_DEC \"'\", \\\n+\t\t\t curreg, INTVAL (XEXP (XEXP (XV, 0), 1)));\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t    else\t\t\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\\n@@ -1543,7 +1543,7 @@ enum reg_class\n \t  if (CODE == 'O')\t\t\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n \t      if (GET_CODE (addr) == PLUS)\t\t\t\t\\\n-\t\tfprintf (FILE, \"%d\", INTVAL (XEXP (addr, 1)));\t\t\\\n+\t\tfprintf (FILE, HOST_WIDE_INT_PRINT_DEC, INTVAL (XEXP (addr, 1))); \\\n \t      else\t\t\t\t\t\t\t\\\n \t\tfprintf (FILE, \"0\");\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n@@ -1568,21 +1568,23 @@ enum reg_class\n \tbreak;\t\t\t\t\t\t\t\t\\\n       case CONST_INT:\t\t\t\t\t        \t\\\n \tif (CODE == 'B')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%d\", INTVAL (XV) & 0xff);\t\t\t\\\n+\t  fprintf (FILE, \"%d\", (int) (INTVAL (XV) & 0xff));\t\t\\\n \telse if (CODE == 'X')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%02X\", INTVAL (XV) & 0xff);\t\t\t\\\n+\t  fprintf (FILE, \"%02X\", (int) (INTVAL (XV) & 0xff));\t\t\\\n \telse if (CODE == 'h')\t\t\t\t\t\t\\\n-\t  fprintf (FILE, \"%d\", (INTVAL (XV) << 16) >> 16);\t\t\\\n+\t  fprintf (FILE, HOST_WIDE_INT_PRINT_DEC, (INTVAL (XV) << 16) >> 16); \\\n \telse if (CODE == 'H')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 2;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=H'%d'\", (INTVAL (XV) << 16) >> 16);\t\\\n+\t    fprintf (FILE, \"=H'\" HOST_WIDE_INT_PRINT_DEC \"'\",\t\t\\\n+\t\t     (INTVAL (XV) << 16) >> 16);\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \telse if (CODE == 'K')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n             /* auto sign-extension of signed 16-bit to signed 32-bit */\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=F'%d'\", (INTVAL (XV) << 16) >> 16);\t\\\n+\t    fprintf (FILE, \"=F'\" HOST_WIDE_INT_PRINT_DEC \"'\",\t\t\\\n+\t\t     (INTVAL (XV) << 16) >> 16);\t\t\t\\\n \t  }\t\t\t\t\t\t\t\t\\\n \telse if (CODE == 'W')\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n@@ -1598,7 +1600,7 @@ enum reg_class\n \telse\t\t\t\t\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n \t    mvs_page_lit += 4;\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"=F'%d'\", INTVAL (XV));\t\t\t\\\n+\t    fprintf (FILE, \"=F'\" HOST_WIDE_INT_PRINT_DEC \"'\", INTVAL (XV)); \\\n \t  }\t\t\t\t\t\t\t\t\\\n \tbreak;\t\t\t\t\t\t\t\t\\\n       case CONST_DOUBLE:\t\t\t\t\t\t\\\n@@ -1656,8 +1658,8 @@ enum reg_class\n \t\tfprintf (FILE, \"=V(\");\t\t\t\t\t\\\n \t\tASM_OUTPUT_LABELREF (FILE,\t\t\t\t\\\n \t\t\t\t  XSTR (XEXP (XEXP (XV, 0), 0), 0));\t\\\n-\t\tfprintf (FILE, \")\\n\\tA\\t%s,=F'%d'\", curreg,\t\t\\\n-\t\t\t\t  INTVAL (XEXP (XEXP (XV, 0), 1)));\t\\\n+\t\tfprintf (FILE, \")\\n\\tA\\t%s,=F'\" HOST_WIDE_INT_PRINT_DEC \"'\", \\\n+\t\t\t curreg, INTVAL (XEXP (XEXP (XV, 0), 1)));\t\\\n \t      }\t\t\t\t\t\t\t\t\\\n \t    else\t\t\t\t\t\t\t\\\n \t      {\t\t\t\t\t\t\t\t\\"}]}