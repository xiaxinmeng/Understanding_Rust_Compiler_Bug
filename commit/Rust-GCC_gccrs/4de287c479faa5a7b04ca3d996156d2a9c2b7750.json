{"sha": "4de287c479faa5a7b04ca3d996156d2a9c2b7750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGRlMjg3YzQ3OWZhYTVhN2IwNGNhM2Q5OTYxNTZkMmE5YzJiNzc1MA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-07-07T09:47:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-07T09:47:00Z"}, "message": "sem_ch8.adb (Find_Direct_Name): Handle properly the case of a generic package that contains local declarations...\n\n2005-07-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Direct_Name): Handle properly the case of a\n\tgeneric package that contains local declarations with the same name.\n\t(Analyze_Object_Renaming): Check wrong renaming of incomplete type.\n\nFrom-SVN: r101698", "tree": {"sha": "17cf32b970fecd92cb908363433f3b7e1167079e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17cf32b970fecd92cb908363433f3b7e1167079e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4de287c479faa5a7b04ca3d996156d2a9c2b7750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de287c479faa5a7b04ca3d996156d2a9c2b7750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de287c479faa5a7b04ca3d996156d2a9c2b7750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de287c479faa5a7b04ca3d996156d2a9c2b7750/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28be29ce520375d392b5d7aa19f4dbd4e728f7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28be29ce520375d392b5d7aa19f4dbd4e728f7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28be29ce520375d392b5d7aa19f4dbd4e728f7e8"}], "stats": {"total": 93, "additions": 63, "deletions": 30}, "files": [{"sha": "f15bd748aff30846ceede44e4f3b0cedfc2136a1", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 63, "deletions": 30, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4de287c479faa5a7b04ca3d996156d2a9c2b7750/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4de287c479faa5a7b04ca3d996156d2a9c2b7750/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4de287c479faa5a7b04ca3d996156d2a9c2b7750", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -726,6 +726,16 @@ package body Sem_Ch8 is\n       end if;\n \n       T2 := Etype (Nam);\n+\n+      --  (Ada 2005: AI-326): Handle wrong use of incomplete type\n+\n+      if Nkind (Nam) = N_Explicit_Dereference\n+        and then Ekind (Etype (T2)) = E_Incomplete_Type\n+      then\n+         Error_Msg_N (\"invalid use of incomplete type\", Id);\n+         return;\n+      end if;\n+\n       Set_Ekind (Id, E_Variable);\n       Init_Size_Align (Id);\n \n@@ -861,7 +871,7 @@ package body Sem_Ch8 is\n          if Present (Renamed_Object (Old_P)) then\n             Set_Renamed_Object (New_P,  Renamed_Object (Old_P));\n          else\n-            Set_Renamed_Object (New_P,  Old_P);\n+            Set_Renamed_Object (New_P, Old_P);\n          end if;\n \n          Set_Has_Completion (New_P);\n@@ -1349,16 +1359,16 @@ package body Sem_Ch8 is\n          Check_Fully_Conformant (New_S, Rename_Spec);\n          Set_Public_Status (New_S);\n \n-         --  Indicate that the entity in the declaration functions like\n-         --  the corresponding body, and is not a new entity. The body will\n-         --  be constructed later at the freeze point, so indicate that\n-         --  the completion has not been seen yet.\n+         --  Indicate that the entity in the declaration functions like the\n+         --  corresponding body, and is not a new entity. The body will be\n+         --  constructed later at the freeze point, so indicate that the\n+         --  completion has not been seen yet.\n \n          Set_Ekind (New_S, E_Subprogram_Body);\n          New_S := Rename_Spec;\n          Set_Has_Completion (Rename_Spec, False);\n \n-         --  Ada 2005: check overriding indicator.\n+         --  Ada 2005: check overriding indicator\n \n          if Must_Override (Specification (N))\n            and then not Is_Overriding_Operation (Rename_Spec)\n@@ -1385,10 +1395,10 @@ package body Sem_Ch8 is\n          end if;\n       end if;\n \n-      --  There is no need for elaboration checks on the new entity, which\n-      --  may be called before the next freezing point where the body will\n-      --  appear. Elaboration checks refer to the real entity, not the one\n-      --  created by the renaming declaration.\n+      --  There is no need for elaboration checks on the new entity, which may\n+      --  be called before the next freezing point where the body will appear.\n+      --  Elaboration checks refer to the real entity, not the one created by\n+      --  the renaming declaration.\n \n       Set_Kill_Elaboration_Checks (New_S, True);\n \n@@ -1399,8 +1409,8 @@ package body Sem_Ch8 is\n       elsif Nkind (Nam) = N_Selected_Component then\n \n          --  Renamed entity is an entry or protected subprogram. For those\n-         --  cases an explicit body is built (at the point of freezing of\n-         --  this entity) that contains a call to the renamed entity.\n+         --  cases an explicit body is built (at the point of freezing of this\n+         --  entity) that contains a call to the renamed entity.\n \n          Analyze_Renamed_Entry (N, New_S, Present (Rename_Spec));\n          return;\n@@ -1430,9 +1440,8 @@ package body Sem_Ch8 is\n \n       end if;\n \n-      --  Most common case: subprogram renames subprogram. No body is\n-      --  generated in this case, so we must indicate that the declaration\n-      --  is complete as is.\n+      --  Most common case: subprogram renames subprogram. No body is generated\n+      --  in this case, so we must indicate the declaration is complete as is.\n \n       if No (Rename_Spec) then\n          Set_Has_Completion (New_S);\n@@ -1441,6 +1450,7 @@ package body Sem_Ch8 is\n       --  Find the renamed entity that matches the given specification. Disable\n       --  Ada_83 because there is no requirement of full conformance between\n       --  renamed entity and new entity, even though the same circuit is used.\n+\n       --  This is a bit of a kludge, which introduces a really irregular use of\n       --  Ada_Version[_Explicit]. Would be nice to find cleaner way to do this\n       --  ???\n@@ -3274,10 +3284,9 @@ package body Sem_Ch8 is\n             elsif\n               Is_Predefined_File_Name (Unit_File_Name (Current_Sem_Unit))\n             then\n-               --  A use-clause in the body of a system file creates a\n-               --  conflict with some entity in a user scope, while rtsfind\n-               --  is active. Keep only the entity that comes from another\n-               --  predefined unit.\n+               --  A use-clause in the body of a system file creates conflict\n+               --  with some entity in a user scope, while rtsfind is active.\n+               --  Keep only the entity coming from another predefined unit.\n \n                E2 := E;\n                while Present (E2) loop\n@@ -3291,7 +3300,7 @@ package body Sem_Ch8 is\n                   E2 := Homonym (E2);\n                end loop;\n \n-               --  Entity must exist because predefined unit is correct.\n+               --  Entity must exist because predefined unit is correct\n \n                raise Program_Error;\n \n@@ -3334,15 +3343,39 @@ package body Sem_Ch8 is\n          E2 := Homonym (E);\n          while Present (E2) loop\n             if Is_Immediately_Visible (E2) then\n-               for J in Level + 1 .. Scope_Stack.Last loop\n-                  if Scope_Stack.Table (J).Entity = Scope (E2)\n-                    or else Scope_Stack.Table (J).Entity = E2\n-                  then\n-                     Level := J;\n-                     E := E2;\n-                     exit;\n-                  end if;\n-               end loop;\n+\n+               --  If a generic package contains a local declaration that\n+               --  has the same name as the generic, there may be a visibility\n+               --  conflict in an instance, where the local declaration must\n+               --  also hide the name of the corresponding package renaming.\n+               --  We check explicitly for a package declared by a renaming,\n+               --  whose renamed entity is an instance that is on the scope\n+               --  stack, and that contains a homonym in the same scope. Once\n+               --  we have found it, we know that the package renaming is not\n+               --  immediately visible, and that the identifier denotes the\n+               --  other entity (and its homonyms if overloaded).\n+\n+               if Scope (E) = Scope (E2)\n+                 and then Ekind (E) = E_Package\n+                 and then Present (Renamed_Object (E))\n+                 and then Is_Generic_Instance (Renamed_Object (E))\n+                 and then In_Open_Scopes (Renamed_Object (E))\n+                 and then Comes_From_Source (N)\n+               then\n+                  Set_Is_Immediately_Visible (E, False);\n+                  E := E2;\n+\n+               else\n+                  for J in Level + 1 .. Scope_Stack.Last loop\n+                     if Scope_Stack.Table (J).Entity = Scope (E2)\n+                       or else Scope_Stack.Table (J).Entity = E2\n+                     then\n+                        Level := J;\n+                        E := E2;\n+                        exit;\n+                     end if;\n+                  end loop;\n+               end if;\n             end if;\n \n             E2 := Homonym (E2);"}]}