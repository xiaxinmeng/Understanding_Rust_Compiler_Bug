{"sha": "187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg3ZGEyY2UzMWYxM2IyZjc1ZDViYjc4MGUzMGVlMzY0ZWFkOWQxZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-08T17:08:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-08T20:21:31Z"}, "message": "libstdc++: Implement operator<< for std::unique_ptr (LWG 2948)\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/unique_ptr.h (operator<<): Define for C++20.\n\t* testsuite/20_util/unique_ptr/io/lwg2948.cc: New test.", "tree": {"sha": "482cad27ff516b46352fe99b3e484627c7475cc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/482cad27ff516b46352fe99b3e484627c7475cc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187da2ce31f13b2f75d5bb780e30ee364ead9d1d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fceefeee9a10cfba621d215f011a58badc246ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fceefeee9a10cfba621d215f011a58badc246ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fceefeee9a10cfba621d215f011a58badc246ad"}], "stats": {"total": 111, "additions": 109, "deletions": 2}, "files": [{"sha": "d0e4cefadd7e3d5407ef0f091410bd780b19292e", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187da2ce31f13b2f75d5bb780e30ee364ead9d1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187da2ce31f13b2f75d5bb780e30ee364ead9d1d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "patch": "@@ -39,6 +39,7 @@\n #include <bits/functional_hash.h>\n #if __cplusplus > 201703L\n # include <compare>\n+# include <ostream>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -934,7 +935,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>\n     { };\n \n-#if __cplusplus > 201103L\n+#if __cplusplus >= 201402L\n   /// @relates unique_ptr @{\n #define __cpp_lib_make_unique 201304\n \n@@ -971,7 +972,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline typename _MakeUniq<_Tp>::__invalid_type\n     make_unique(_Args&&...) = delete;\n   // @} relates unique_ptr\n-#endif\n+#endif // C++14\n+\n+#if __cplusplus > 201703L && __cpp_concepts\n+  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+  // 2948. unique_ptr does not define operator<< for stream output\n+  /// Stream output operator for unique_ptr\n+  template<typename _CharT, typename _Traits, typename _Tp, typename _Dp>\n+    inline basic_ostream<_CharT, _Traits>&\n+    operator<<(basic_ostream<_CharT, _Traits>& __os,\n+\t       const unique_ptr<_Tp, _Dp>& __p)\n+    requires requires { __os << __p.get(); }\n+    {\n+      __os << __p.get();\n+      return __os;\n+    }\n+#endif // C++20\n \n   // @} group pointer_abstractions\n "}, {"sha": "3f4e4dfabe7c2e8a00e88f8ebc18e29dc673f4c5", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/io/lwg2948.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/187da2ce31f13b2f75d5bb780e30ee364ead9d1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fio%2Flwg2948.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/187da2ce31f13b2f75d5bb780e30ee364ead9d1d/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fio%2Flwg2948.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fio%2Flwg2948.cc?ref=187da2ce31f13b2f75d5bb780e30ee364ead9d1d", "patch": "@@ -0,0 +1,91 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+template<typename S, typename T>\n+  concept streamable = requires (S& o, const T& p) { o << p; };\n+\n+template<typename T, typename D>\n+  bool\n+  check(const std::unique_ptr<T, D>& p)\n+  {\n+    std::ostringstream ss1, ss2;\n+    ss1 << p;\n+    ss2 << p.get();\n+    return ss1.str() == ss2.str();\n+  }\n+\n+void\n+test01()\n+{\n+  static_assert( streamable<std::ostream, std::unique_ptr<int>> );\n+\n+  std::unique_ptr<int> p;\n+  VERIFY( check(p) );\n+  p = std::make_unique<int>();\n+  VERIFY( check(p) );\n+}\n+\n+template<typename>\n+  struct deleter\n+  {\n+    struct pointer\n+    {\n+      pointer() { }\n+      pointer(std::nullptr_t) { }\n+      explicit operator bool() const { return false; }\n+      bool operator==(pointer) const { return true; }\n+    };\n+\n+    void operator()(pointer) const { }\n+  };\n+\n+template<typename C, typename Traits>\n+  int\n+  operator<<(std::basic_ostream<C, Traits>& o, typename deleter<C>::pointer&&)\n+  {\n+    o << C{'P'};\n+    return 1; // no requirement that this operator returns the stream\n+  }\n+\n+template<typename D>\n+  using Unique_ptr = std::unique_ptr<typename D::pointer, D>;\n+\n+static_assert( streamable<std::ostream, Unique_ptr<deleter<char>>> );\n+static_assert( ! streamable<std::ostream, Unique_ptr<deleter<wchar_t>>> );\n+static_assert( ! streamable<std::wostream, Unique_ptr<deleter<char>>> );\n+static_assert( streamable<std::wostream, Unique_ptr<deleter<wchar_t>>> );\n+\n+void\n+test02()\n+{\n+  Unique_ptr<deleter<char>> p;\n+  VERIFY( check(p) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}