{"sha": "c39d77f252e895306ef88c1efb3eff04e4232554", "node_id": "C_kwDOANBUbNoAKGMzOWQ3N2YyNTJlODk1MzA2ZWY4OGMxZWZiM2VmZjA0ZTQyMzI1NTQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-30T08:35:39Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-11-30T08:35:39Z"}, "message": "x86_64: PR target/100711: Splitters for pandn\n\nThis patch addresses PR target/100711 by introducing define_split\npatterns so that not/broadcast/pand may be simplified (by combine)\nto broadcast/pandn.  This introduces two splitters one for optimizing\npandn on TARGET_SSE for V4SI and V2DI, and another for vpandn on\nTARGET_AVX2 for V16QI, V8HI, V32QI, V16HI and V8SI.  Each splitter\nhas its own new testcase.\n\nI've also confirmed that not/broadcast/pandn is already getting\nsimplified to broadcast/pand by the middle-end optimizers.\n\n2021-11-30  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog\n\tPR target/100711\n\t* config/i386/sse.md (define_split): New splitters to simplify\n\tnot;vec_duplicate;and as vec_duplicate;andn.\n\ngcc/testsuite/ChangeLog\n\tPR target/100711\n\t* gcc.target/i386/pr100711-1.c: New test case.\n\t* gcc.target/i386/pr100711-2.c: New test case.", "tree": {"sha": "90de97dc9fdbc692cb7dbdf8e06eac36b77d9021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90de97dc9fdbc692cb7dbdf8e06eac36b77d9021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c39d77f252e895306ef88c1efb3eff04e4232554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39d77f252e895306ef88c1efb3eff04e4232554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c39d77f252e895306ef88c1efb3eff04e4232554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c39d77f252e895306ef88c1efb3eff04e4232554/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b962469a01b017ae2e7ef2865a40e37094ceec4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b962469a01b017ae2e7ef2865a40e37094ceec4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b962469a01b017ae2e7ef2865a40e37094ceec4b"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "08bdcddc1111b21952c56ff68765fb5ed3951a4e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=c39d77f252e895306ef88c1efb3eff04e4232554", "patch": "@@ -16323,6 +16323,38 @@\n \t      ]\n \t      (const_string \"<sseinsnmode>\")))])\n \n+;; PR target/100711: Split notl; vpbroadcastd; vpand as vpbroadcastd; vpandn\n+(define_split\n+  [(set (match_operand:VI48_128 0 \"register_operand\")\n+\t(and:VI48_128\n+\t  (vec_duplicate:VI48_128\n+\t    (not:<ssescalarmode>\n+\t      (match_operand:<ssescalarmode> 1 \"register_operand\")))\n+\t  (match_operand:VI48_128 2 \"vector_operand\")))]\n+  \"TARGET_SSE\"\n+  [(set (match_dup 3)\n+\t(vec_duplicate:VI48_128 (match_dup 1)))\n+   (set (match_dup 0)\n+\t(and:VI48_128 (not:VI48_128 (match_dup 3))\n+\t\t      (match_dup 2)))]\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\")\n+\n+;; PR target/100711: Split notl; vpbroadcastd; vpand as vpbroadcastd; vpandn\n+(define_split\n+  [(set (match_operand:VI124_AVX2 0 \"register_operand\")\n+\t(and:VI124_AVX2\n+\t  (vec_duplicate:VI124_AVX2\n+\t    (not:<ssescalarmode>\n+\t      (match_operand:<ssescalarmode> 1 \"register_operand\")))\n+\t  (match_operand:VI124_AVX2 2 \"vector_operand\")))]\n+  \"TARGET_AVX2\"\n+  [(set (match_dup 3)\n+\t(vec_duplicate:VI124_AVX2 (match_dup 1)))\n+   (set (match_dup 0)\n+\t(and:VI124_AVX2 (not:VI124_AVX2 (match_dup 3))\n+\t\t\t(match_dup 2)))]\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\")\n+\n (define_insn \"*andnot<mode>3_mask\"\n   [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n \t(vec_merge:VI48_AVX512VL"}, {"sha": "c6928f248f36fee29cfbb8cec942ee821a86154e", "filename": "gcc/testsuite/gcc.target/i386/pr100711-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-1.c?ref=c39d77f252e895306ef88c1efb3eff04e4232554", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+typedef int v4si __attribute__((vector_size (16)));\n+typedef long long v2di __attribute__((vector_size (16)));\n+\n+v4si foo (int a, v4si b)\n+{\n+    return (__extension__ (v4si) {~a, ~a, ~a, ~a}) & b;\n+}\n+\n+v2di bar (long long a, v2di b)\n+{\n+    return (__extension__ (v2di) {~a, ~a}) & b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"pandn\" 2 } } */"}, {"sha": "ccaf1688e1923503e96dfe528b2de4f60f3a8f73", "filename": "gcc/testsuite/gcc.target/i386/pr100711-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c39d77f252e895306ef88c1efb3eff04e4232554/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100711-2.c?ref=c39d77f252e895306ef88c1efb3eff04e4232554", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2\" } */\n+\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+\n+v16qi foo_v16qi (char a, v16qi b)\n+{\n+    return (__extension__ (v16qi) {~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,\n+                                   ~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a}) & b;\n+}\n+\n+v8hi foo_v8hi (short a, v8hi b)\n+{\n+    return (__extension__ (v8hi) {~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,}) & b;\n+}\n+\n+v4si foo_v4si (int a, v4si b)\n+{\n+    return (__extension__ (v4si) {~a, ~a, ~a, ~a}) & b;\n+}\n+\n+v32qi foo_v32qi (char a, v32qi b)\n+{\n+    return (__extension__ (v32qi) {~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,\n+                                   ~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,\n+                                   ~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,\n+                                   ~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a}) & b;\n+}\n+\n+v16hi foo_v16hi (short a, v16hi b)\n+{\n+    return (__extension__ (v16hi) {~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,\n+                                   ~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a}) & b;\n+}\n+\n+v8si foo_v8si (int a, v8si b)\n+{\n+    return (__extension__ (v8si) {~a, ~a, ~a, ~a, ~a, ~a, ~a, ~a,}) & b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpandn\" 6 } } */"}]}