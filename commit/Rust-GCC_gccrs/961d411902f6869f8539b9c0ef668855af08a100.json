{"sha": "961d411902f6869f8539b9c0ef668855af08a100", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxZDQxMTkwMmY2ODY5Zjg1MzliOWMwZWY2Njg4NTVhZjA4YTEwMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "crux@pool.informatik.rwth-aachen.de", "date": "1998-10-01T19:00:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-01T19:00:52Z"}, "message": "regmove.c (regmove_optimize): Add variable old_max_uid.\n\n        * regmove.c (regmove_optimize): Add variable old_max_uid.\n        At the end of the function, update basic_block_end.\n\nFrom-SVN: r22724", "tree": {"sha": "6c5b09b31e6a4d39b4498c5e90c9b043bfa812a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c5b09b31e6a4d39b4498c5e90c9b043bfa812a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/961d411902f6869f8539b9c0ef668855af08a100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961d411902f6869f8539b9c0ef668855af08a100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/961d411902f6869f8539b9c0ef668855af08a100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/961d411902f6869f8539b9c0ef668855af08a100/comments", "author": null, "committer": null, "parents": [{"sha": "6f82f64bf664a17bc60f8f9e171212ed5df3a0ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f82f64bf664a17bc60f8f9e171212ed5df3a0ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f82f64bf664a17bc60f8f9e171212ed5df3a0ab"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "4905914731d4f5ee512f9410c137f4257b410a82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961d411902f6869f8539b9c0ef668855af08a100/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961d411902f6869f8539b9c0ef668855af08a100/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=961d411902f6869f8539b9c0ef668855af08a100", "patch": "@@ -1,3 +1,8 @@\n+Thu Oct  1 19:58:30 1998  Bernd Schmidt <crux@Pool.Informatik.RWTH-Aachen.DE>\n+\n+\t* regmove.c (regmove_optimize): Add variable old_max_uid.\n+\tAt the end of the function, update basic_block_end.\n+\n Thu Oct  1 17:58:25 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* dwarf2out.c (expand_builtin_dwarf_reg_size): Use"}, {"sha": "41235f137041f6d0c81d6d90f0b0125c6cffb4dc", "filename": "gcc/regmove.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/961d411902f6869f8539b9c0ef668855af08a100/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/961d411902f6869f8539b9c0ef668855af08a100/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=961d411902f6869f8539b9c0ef668855af08a100", "patch": "@@ -917,6 +917,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n      int nregs;\n      FILE *regmove_dump_file;\n {\n+  int old_max_uid = get_max_uid ();\n   rtx insn;\n   struct match match;\n   int pass;\n@@ -926,8 +927,8 @@ regmove_optimize (f, nregs, regmove_dump_file)\n   regno_src_regno = (int *)alloca (sizeof *regno_src_regno * nregs);\n   for (i = nregs; --i >= 0; ) regno_src_regno[i] = -1;\n \n-  regmove_bb_head = (int *)alloca (sizeof (int) * (get_max_uid () + 1));\n-  for (i = get_max_uid (); i >= 0; i--) regmove_bb_head[i] = -1;\n+  regmove_bb_head = (int *)alloca (sizeof (int) * (old_max_uid + 1));\n+  for (i = old_max_uid; i >= 0; i--) regmove_bb_head[i] = -1;\n   for (i = 0; i < n_basic_blocks; i++)\n     regmove_bb_head[INSN_UID (basic_block_head[i])] = i;\n \n@@ -1384,6 +1385,19 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t}\n     }\n #endif /* REGISTER_CONSTRAINTS */\n+\n+  /* In fixup_match_1, some insns may have been inserted after basic block\n+     ends.  Fix that here.  */\n+  for (i = 0; i < n_basic_blocks; i++)\n+    {\n+      rtx end = basic_block_end[i];\n+      rtx new = end;\n+      rtx next = NEXT_INSN (new);\n+      while (next != 0 && INSN_UID (next) >= old_max_uid\n+\t     && (i == n_basic_blocks - 1 || basic_block_head[i + 1] != next))\n+\tnew = next, next = NEXT_INSN (new);\n+      basic_block_end[i] = new;\n+    }\n }\n \n /* Returns the INSN_CODE for INSN if its pattern has matching constraints for"}]}