{"sha": "4cda703ebcfebec0d79f43c98cfca11e911d5b64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNkYTcwM2ViY2ZlYmVjMGQ3OWY0M2M5OGNmY2ExMWU5MTFkNWI2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-02T03:14:44Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-02T03:14:44Z"}, "message": "PR c++/85764 - bogus 'this' not captured error.\n\n\t* lambda.c (resolvable_dummy_lambda): Use nonlambda_method_basetype.\n\t(nonlambda_method_basetype): Handle NSDMI.\n\nFrom-SVN: r261101", "tree": {"sha": "46665a006f15c20cb88feaca29b8d593d401eca6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46665a006f15c20cb88feaca29b8d593d401eca6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cda703ebcfebec0d79f43c98cfca11e911d5b64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cda703ebcfebec0d79f43c98cfca11e911d5b64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cda703ebcfebec0d79f43c98cfca11e911d5b64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cda703ebcfebec0d79f43c98cfca11e911d5b64/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "946d79a61ca8c7dd2872c43fffaec432fe7b46e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946d79a61ca8c7dd2872c43fffaec432fe7b46e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946d79a61ca8c7dd2872c43fffaec432fe7b46e6"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "bbf76eabb15e66f46dac78c333ed257d1f4850a5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4cda703ebcfebec0d79f43c98cfca11e911d5b64", "patch": "@@ -1,5 +1,9 @@\n 2018-06-01  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/85764 - bogus 'this' not captured error.\n+\t* lambda.c (resolvable_dummy_lambda): Use nonlambda_method_basetype.\n+\t(nonlambda_method_basetype): Handle NSDMI.\n+\n \tCWG 1581: When are constexpr member functions defined?\n \t* constexpr.c (instantiate_cx_fn_r, instantiate_constexpr_fns): New.\n \t(cxx_eval_outermost_constant_expr): Call instantiate_constexpr_fns."}, {"sha": "231490fbe4ee500ae1568431332135a8c5341273", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=4cda703ebcfebec0d79f43c98cfca11e911d5b64", "patch": "@@ -884,7 +884,7 @@ resolvable_dummy_lambda (tree object)\n       && current_class_type\n       && LAMBDA_TYPE_P (current_class_type)\n       && lambda_function (current_class_type)\n-      && DERIVED_FROM_P (type, current_nonlambda_class_type ()))\n+      && DERIVED_FROM_P (type, nonlambda_method_basetype()))\n     return CLASSTYPE_LAMBDA_EXPR (current_class_type);\n \n   return NULL_TREE;\n@@ -949,30 +949,37 @@ current_nonlambda_function (void)\n   return fn;\n }\n \n-/* Returns the method basetype of the innermost non-lambda function, or\n-   NULL_TREE if none.  */\n+/* Returns the method basetype of the innermost non-lambda function, including\n+   a hypothetical constructor if inside an NSDMI, or NULL_TREE if none.  */\n \n tree\n nonlambda_method_basetype (void)\n {\n-  tree fn, type;\n   if (!current_class_ref)\n     return NULL_TREE;\n \n-  type = current_class_type;\n+  tree type = current_class_type;\n   if (!type || !LAMBDA_TYPE_P (type))\n     return type;\n \n-  /* Find the nearest enclosing non-lambda function.  */\n-  fn = TYPE_NAME (type);\n-  do\n-    fn = decl_function_context (fn);\n-  while (fn && LAMBDA_FUNCTION_P (fn));\n-\n-  if (!fn || !DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n-    return NULL_TREE;\n-\n-  return TYPE_METHOD_BASETYPE (TREE_TYPE (fn));\n+  while (true)\n+    {\n+      tree lam = CLASSTYPE_LAMBDA_EXPR (type);\n+      tree ex = LAMBDA_EXPR_EXTRA_SCOPE (lam);\n+      if (ex && TREE_CODE (ex) == FIELD_DECL)\n+\t/* Lambda in an NSDMI.  */\n+\treturn DECL_CONTEXT (ex);\n+\n+      tree fn = TYPE_CONTEXT (type);\n+      if (!fn || TREE_CODE (fn) != FUNCTION_DECL\n+\t  || !DECL_NONSTATIC_MEMBER_FUNCTION_P (fn))\n+\t/* No enclosing non-lambda method.  */\n+\treturn NULL_TREE;\n+      if (!LAMBDA_FUNCTION_P (fn))\n+\t/* Found an enclosing non-lambda method.  */\n+\treturn TYPE_METHOD_BASETYPE (TREE_TYPE (fn));\n+      type = DECL_CONTEXT (fn);\n+    }\n }\n \n /* Like current_scope, but looking through lambdas.  */"}, {"sha": "d27ed713fff173762f1a996c56f5afd176aa6bf3", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-this2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cda703ebcfebec0d79f43c98cfca11e911d5b64/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-this2.C?ref=4cda703ebcfebec0d79f43c98cfca11e911d5b64", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/85764\n+// { dg-do compile { target c++14 } }\n+\n+template<typename Key>\n+class trie {\n+    static void for_each(int & f, trie const & n, Key & prefix) {\n+        [&](trie const & c) {\n+          for_each(f, c, prefix);\n+        };\n+    }\n+    void for_each(int & f) const {\n+    }\n+};"}]}