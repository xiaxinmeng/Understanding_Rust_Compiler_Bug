{"sha": "7c9201514989cce06b05850f55f3bcd0e3d5e18b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5MjAxNTE0OTg5Y2NlMDZiMDU4NTBmNTVmM2JjZDBlM2Q1ZTE4Yg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-02T16:35:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-02T16:35:09Z"}, "message": "stl_function.h: Additional minor tweaks.\n\n2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/stl_function.h: Additional minor tweaks.\n\t* include/bits/stl_multiset.h: Likewise.\n\n\t* include/bits/stl_queue.h: Minor tweaks.\n\nFrom-SVN: r77125", "tree": {"sha": "5e7945035abeb3a4e4053bdb726b67dbc7a07669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7945035abeb3a4e4053bdb726b67dbc7a07669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9201514989cce06b05850f55f3bcd0e3d5e18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9201514989cce06b05850f55f3bcd0e3d5e18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9201514989cce06b05850f55f3bcd0e3d5e18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9201514989cce06b05850f55f3bcd0e3d5e18b/comments", "author": null, "committer": null, "parents": [{"sha": "238b11b597a0d7e5dd60422ba68d0c013040464e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/238b11b597a0d7e5dd60422ba68d0c013040464e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/238b11b597a0d7e5dd60422ba68d0c013040464e"}], "stats": {"total": 98, "additions": 64, "deletions": 34}, "files": [{"sha": "76a709401448d713f1fa2746a0d2d9c9feea7579", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7c9201514989cce06b05850f55f3bcd0e3d5e18b", "patch": "@@ -1,3 +1,10 @@\n+2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/stl_function.h: Additional minor tweaks.\n+\t* include/bits/stl_multiset.h: Likewise.\n+\n+\t* include/bits/stl_queue.h: Minor tweaks.\n+\n 2004-02-02  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/13976 (continued)"}, {"sha": "fed4124661a45cc2411fe1ce83a7d0c941c5c4c5", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=7c9201514989cce06b05850f55f3bcd0e3d5e18b", "patch": "@@ -315,7 +315,8 @@ namespace std\n     protected:\n       _Predicate _M_pred;\n     public:\n-      explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}\n+      explicit\n+      unary_negate(const _Predicate& __x) : _M_pred(__x) {}\n       \n       bool\n       operator()(const typename _Predicate::argument_type& __x) const\n@@ -338,7 +339,8 @@ namespace std\n     protected:\n       _Predicate _M_pred;\n     public:\n-      explicit binary_negate(const _Predicate& __x)\n+      explicit\n+      binary_negate(const _Predicate& __x)\n       : _M_pred(__x) { }\n \n       bool\n@@ -483,7 +485,8 @@ namespace std\n     public:\n       pointer_to_unary_function() {}\n       \n-      explicit pointer_to_unary_function(_Result (*__x)(_Arg))\n+      explicit\n+      pointer_to_unary_function(_Result (*__x)(_Arg))\n       : _M_ptr(__x) {}\n \n       _Result\n@@ -507,7 +510,8 @@ namespace std\n     public:\n       pointer_to_binary_function() {}\n \n-      explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) \n+      explicit\n+      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) \n       : _M_ptr(__x) {}\n \n       _Result\n@@ -587,7 +591,8 @@ namespace std\n     class mem_fun_t : public unary_function<_Tp*, _Ret>\n     {\n     public:\n-      explicit mem_fun_t(_Ret (_Tp::*__pf)())\n+      explicit\n+      mem_fun_t(_Ret (_Tp::*__pf)())\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -602,7 +607,8 @@ namespace std\n     class const_mem_fun_t : public unary_function<const _Tp*, _Ret>\n     {\n     public:\n-      explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const)\n+      explicit\n+      const_mem_fun_t(_Ret (_Tp::*__pf)() const)\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -617,7 +623,8 @@ namespace std\n     class mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n     public:\n-      explicit mem_fun_ref_t(_Ret (_Tp::*__pf)())\n+      explicit\n+      mem_fun_ref_t(_Ret (_Tp::*__pf)())\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -632,7 +639,8 @@ namespace std\n     class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>\n     {\n     public:\n-      explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)\n+      explicit\n+      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -647,7 +655,8 @@ namespace std\n     class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>\n     {\n     public:\n-      explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) \n+      explicit\n+      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) \n       : _M_f(__pf) {}\n \n       _Ret\n@@ -662,7 +671,8 @@ namespace std\n     class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>\n     {\n     public:\n-      explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)\n+      explicit\n+      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -677,7 +687,8 @@ namespace std\n     class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n     public:\n-      explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))\n+      explicit\n+      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -692,7 +703,8 @@ namespace std\n     class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>\n     {\n     public:\n-      explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)\n+      explicit\n+      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)\n       : _M_f(__pf) {}\n \n       _Ret\n@@ -707,7 +719,8 @@ namespace std\n     class mem_fun_t<void, _Tp> : public unary_function<_Tp*, void>\n     {\n     public:\n-      explicit mem_fun_t(void (_Tp::*__pf)())\n+      explicit\n+      mem_fun_t(void (_Tp::*__pf)())\n       : _M_f(__pf) {}\n \n       void\n@@ -722,7 +735,8 @@ namespace std\n     class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*, void>\n     {\n     public:\n-      explicit const_mem_fun_t(void (_Tp::*__pf)() const)\n+      explicit\n+      const_mem_fun_t(void (_Tp::*__pf)() const)\n       : _M_f(__pf) {}\n \n       void\n@@ -737,7 +751,8 @@ namespace std\n     class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp, void>\n     {\n     public:\n-      explicit mem_fun_ref_t(void (_Tp::*__pf)())\n+      explicit\n+      mem_fun_ref_t(void (_Tp::*__pf)())\n       : _M_f(__pf) {}\n \n       void\n@@ -752,7 +767,8 @@ namespace std\n     class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp, void>\n     {\n     public:\n-      explicit const_mem_fun_ref_t(void (_Tp::*__pf)() const)\n+      explicit\n+      const_mem_fun_ref_t(void (_Tp::*__pf)() const)\n       : _M_f(__pf) {}\n \n       void\n@@ -767,7 +783,8 @@ namespace std\n     class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*, _Arg, void>\n     {\n     public:\n-      explicit mem_fun1_t(void (_Tp::*__pf)(_Arg))\n+      explicit\n+      mem_fun1_t(void (_Tp::*__pf)(_Arg))\n       : _M_f(__pf) {}\n     \n       void\n@@ -783,8 +800,9 @@ namespace std\n     : public binary_function<const _Tp*, _Arg, void>\n     {\n     public:\n-      explicit const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const)\n-\t: _M_f(__pf) {}\n+      explicit\n+      const_mem_fun1_t(void (_Tp::*__pf)(_Arg) const)\n+      : _M_f(__pf) {}\n       \n       void\n       operator()(const _Tp* __p, _Arg __x) const\n@@ -799,7 +817,8 @@ namespace std\n     : public binary_function<_Tp, _Arg, void>\n     {\n     public:\n-      explicit mem_fun1_ref_t(void (_Tp::*__pf)(_Arg))\n+      explicit\n+      mem_fun1_ref_t(void (_Tp::*__pf)(_Arg))\n       : _M_f(__pf) {}\n \n       void\n@@ -815,7 +834,8 @@ namespace std\n     : public binary_function<_Tp, _Arg, void>\n     {\n     public:\n-      explicit const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const)\n+      explicit\n+      const_mem_fun1_ref_t(void (_Tp::*__pf)(_Arg) const)\n       : _M_f(__pf) {}\n \n       void"}, {"sha": "5a8b29f0b879206e8247f11a10ac452d36351864", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=7c9201514989cce06b05850f55f3bcd0e3d5e18b", "patch": "@@ -144,8 +144,9 @@ namespace __gnu_norm\n       multiset()\n       : _M_t(_Compare(), allocator_type()) { }\n \n-      explicit multiset(const _Compare& __comp,\n-\t\t\tconst allocator_type& __a = allocator_type())\n+      explicit\n+      multiset(const _Compare& __comp,\n+\t       const allocator_type& __a = allocator_type())\n       : _M_t(__comp, __a) { }\n \n       /**"}, {"sha": "529b87641a6b67d4826c39796a8b950634145f7c", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9201514989cce06b05850f55f3bcd0e3d5e18b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=7c9201514989cce06b05850f55f3bcd0e3d5e18b", "patch": "@@ -1,6 +1,6 @@\n // Queue implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -112,9 +112,9 @@ namespace std\n       __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)\n       __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n   \n-\ttemplate<typename _Tp1, typename _Seq1>\n-          friend bool \n-          operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n+      template<typename _Tp1, typename _Seq1>\n+        friend bool \n+        operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);\n \n       template<typename _Tp1, typename _Seq1>\n         friend bool \n@@ -149,11 +149,13 @@ namespace std\n        *  Returns true if the %queue is empty.\n        */\n       bool\n-      empty() const { return c.empty(); }\n+      empty() const\n+      { return c.empty(); }\n       \n       /**  Returns the number of elements in the %queue.  */\n       size_type\n-      size() const { return c.size(); }\n+      size() const\n+      { return c.size(); }\n       \n       /**\n        *  Returns a read/write reference to the data at the first\n@@ -209,7 +211,8 @@ namespace std\n        *  underlying sequence.\n        */\n       void\n-      push(const value_type& __x) { c.push_back(__x); }\n+      push(const value_type& __x)\n+      { c.push_back(__x); }\n       \n       /**\n        *  @brief  Removes first element.\n@@ -292,8 +295,7 @@ namespace std\n     operator>=(const queue<_Tp,_Sequence>& __x, \n \t       const queue<_Tp,_Sequence>& __y)\n     { return !(__x < __y); }\n-  \n-  \n+    \n   /**\n    *  @brief  A standard container automatically sorting its contents.\n    *\n@@ -333,7 +335,7 @@ namespace std\n    *  the elements for you.  (How could it know to do so?)\n   */\n   template<typename _Tp, typename _Sequence = vector<_Tp>,\n-            typename _Compare  = less<typename _Sequence::value_type> >\n+\t   typename _Compare  = less<typename _Sequence::value_type> >\n     class priority_queue\n     {\n       // concept requirements\n@@ -344,7 +346,7 @@ namespace std\n       __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)\n       __glibcxx_class_requires4(_Compare, bool, _Tp,_Tp,_BinaryFunctionConcept)\n   \n-\tpublic:\n+    public:\n       typedef typename _Sequence::value_type                value_type;\n       typedef typename _Sequence::reference                 reference;\n       typedef typename _Sequence::const_reference           const_reference;"}]}