{"sha": "fefe561e809323e473448eb6a3631d3db31f2717", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmZTU2MWU4MDkzMjNlNDczNDQ4ZWI2YTM2MzFkM2RiMzFmMjcxNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-24T11:34:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-24T11:34:06Z"}, "message": "basic_string.h (assign(const basic_string&, size_type, size_type)): Define inline here.\n\n2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (assign(const basic_string&,\n\tsize_type, size_type)): Define inline here.\n\t(replace(size_type, size_type, const basic_string&,\n\tsize_type, size_type)): Ditto.\n\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n\t_InputIterator, __false_type)): Only declare.\n\t(_M_replace(iterator, iterator, _InputIterator,\n\t_InputIterator)): Remove.\n\t* include/bits/basic_string.tcc (assign(const basic_string&,\n\tsize_type, size_type)): Move inline.\n\t(replace(size_type, size_type, const basic_string&,\n\tsize_type, size_type)): Ditto.\n\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n\t_InputIterator, __false_type)): Define, now does also what\n\t_M_replace did before.\n\t* src/string-inst.cc (_M_replace): Don't instantiate.\n\n\t* include/bits/basic_string.tcc (find(const _CharT*,\n\tsize_type, size_type)): Tidy.\n\t(rfind(_CharT, size_type)): Ditto.\n\t(find_first_not_of(const _CharT*, size_type, size_type)): Ditto.\n\t(find_first_not_of(_CharT, size_type)): Ditto.\n\t(find_last_not_of(const _CharT*, size_type, size_type)): Ditto.\n\t(find_last_not_of(_CharT, size_type)): Ditto.\n\nFrom-SVN: r76508", "tree": {"sha": "4e1c1b77a0ef67db596859fbb4c004d8cfe99c74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e1c1b77a0ef67db596859fbb4c004d8cfe99c74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fefe561e809323e473448eb6a3631d3db31f2717", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefe561e809323e473448eb6a3631d3db31f2717", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fefe561e809323e473448eb6a3631d3db31f2717", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fefe561e809323e473448eb6a3631d3db31f2717/comments", "author": null, "committer": null, "parents": [{"sha": "5473cfa7fd6c83fc6f7f1575dad275690aa29ded", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5473cfa7fd6c83fc6f7f1575dad275690aa29ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5473cfa7fd6c83fc6f7f1575dad275690aa29ded"}], "stats": {"total": 158, "additions": 72, "deletions": 86}, "files": [{"sha": "2f1da9ecab386270c9db3da606b3ab7c9dd16d30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fefe561e809323e473448eb6a3631d3db31f2717", "patch": "@@ -1,3 +1,30 @@\n+2004-01-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (assign(const basic_string&,\n+\tsize_type, size_type)): Define inline here.\n+\t(replace(size_type, size_type, const basic_string&,\n+\tsize_type, size_type)): Ditto.\n+\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n+\t_InputIterator, __false_type)): Only declare.\n+\t(_M_replace(iterator, iterator, _InputIterator,\n+\t_InputIterator)): Remove.\n+\t* include/bits/basic_string.tcc (assign(const basic_string&,\n+\tsize_type, size_type)): Move inline.\n+\t(replace(size_type, size_type, const basic_string&,\n+\tsize_type, size_type)): Ditto.\n+\t(_M_replace_dispatch(iterator, iterator, _InputIterator,\n+\t_InputIterator, __false_type)): Define, now does also what\n+\t_M_replace did before.\n+\t* src/string-inst.cc (_M_replace): Don't instantiate.\n+\n+\t* include/bits/basic_string.tcc (find(const _CharT*,\n+\tsize_type, size_type)): Tidy.\n+\t(rfind(_CharT, size_type)): Ditto.\n+\t(find_first_not_of(const _CharT*, size_type, size_type)): Ditto.\n+\t(find_first_not_of(_CharT, size_type)): Ditto.\n+\t(find_last_not_of(const _CharT*, size_type, size_type)): Ditto.\n+\t(find_last_not_of(_CharT, size_type)): Ditto.\n+\n 2004-01-23  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/13838"}, {"sha": "9e37583506091cda370c7d720dff5d3a35179e31", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=fefe561e809323e473448eb6a3631d3db31f2717", "patch": "@@ -794,7 +794,10 @@ namespace std\n        *  of available characters in @a str, the remainder of @a str is used.\n        */\n       basic_string&\n-      assign(const basic_string& __str, size_type __pos, size_type __n);\n+      assign(const basic_string& __str, size_type __pos, size_type __n)\n+      { return this->assign(__str._M_data()\n+\t\t\t    + __str._M_check(__pos, \"basic_string::assign\"),\n+\t\t\t    __str._M_limit(__pos, __n)); }\n \n       /**\n        *  @brief  Set value to a C substring.\n@@ -1127,7 +1130,10 @@ namespace std\n       */\n       basic_string&\n       replace(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t      size_type __pos2, size_type __n2);\n+\t      size_type __pos2, size_type __n2)\n+      { return this->replace(__pos1, __n1, __str._M_data()\n+\t\t\t     + __str._M_check(__pos2, \"basic_string::replace\"),\n+\t\t\t     __str._M_limit(__pos2, __n2)); }\n \n       /**\n        *  @brief  Replace characters with value of a C substring.\n@@ -1357,17 +1363,11 @@ namespace std\n       template<class _InputIterator>\n \tbasic_string&\n \t_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t\t    _InputIterator __k2, __false_type)\n-        { return _M_replace(__i1, __i2, __k1, __k2); }\n+\t\t\t    _InputIterator __k2, __false_type);\n \n       basic_string&\n       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);\n \n-      template<class _InputIterator>\n-        basic_string&\n-        _M_replace(iterator __i1, iterator __i2, _InputIterator __k1,\n-\t\t   _InputIterator __k2);\n-\n       basic_string&\n       _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,\n \t\t      size_type __n2);"}, {"sha": "a7638dfe57c63f0b47a7512590e658792ca8139a", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 36, "deletions": 73, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=fefe561e809323e473448eb6a3631d3db31f2717", "patch": "@@ -267,16 +267,6 @@ namespace std\n       return *this;\n     }\n \n-   template<typename _CharT, typename _Traits, typename _Alloc>\n-     basic_string<_CharT, _Traits, _Alloc>&\n-     basic_string<_CharT, _Traits, _Alloc>::\n-     assign(const basic_string& __str, size_type __pos, size_type __n)\n-     {\n-       return this->assign(__str._M_data()\n-\t\t\t   + __str._M_check(__pos, \"basic_string::assign\"),\n-\t\t\t   __str._M_limit(__pos, __n));\n-     }\n-\n    template<typename _CharT, typename _Traits, typename _Alloc>\n      basic_string<_CharT, _Traits, _Alloc>&\n      basic_string<_CharT, _Traits, _Alloc>::\n@@ -581,7 +571,7 @@ namespace std\n                               __requested_cap : 2*this->_M_capacity, __alloc);\n       else\n         __r = _Rep::_S_create(__requested_cap, __alloc);\n-      \n+\n       if (this->_M_length)\n \ttraits_type::copy(__r->_M_refdata(), _M_refdata(),\n \t\t\t  this->_M_length);\n@@ -605,33 +595,17 @@ namespace std\n       // else nothing (in particular, avoid calling _M_mutate() unnecessarily.)\n     }\n \n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_string<_CharT, _Traits, _Alloc>&\n-    basic_string<_CharT, _Traits, _Alloc>::\n-    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n-\t\t   _CharT __c)\n-    {\n-      if (this->max_size() - (this->size() - __n1) < __n2)\n-\t__throw_length_error(\"basic_string::_M_replace_aux\");\n-      _M_mutate(__pos1, __n1, __n2);\n-      if (__n2)\n-\ttraits_type::assign(_M_data() + __pos1, __n2, __c);\n-      return *this;\n-    }\n-\n-  // This is the general replace helper. It buffers internally and then calls\n-  // _M_replace_safe.\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     template<typename _InputIterator>\n       basic_string<_CharT, _Traits, _Alloc>&\n       basic_string<_CharT, _Traits, _Alloc>::\n-      _M_replace(iterator __i1, iterator __i2, _InputIterator __k1, \n-\t\t _InputIterator __k2)\n+      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1, \n+\t\t\t  _InputIterator __k2, __false_type)\n       {\n \tconst basic_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;\n \tif (this->max_size() - (this->size() - __n1) < __s.size())\n-\t  __throw_length_error(\"basic_string::_M_replace\");\n+\t  __throw_length_error(\"basic_string::_M_replace_dispatch\");\n \treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n \t\t\t       __s.size());\n       }\n@@ -653,12 +627,15 @@ namespace std\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     basic_string<_CharT, _Traits, _Alloc>&\n     basic_string<_CharT, _Traits, _Alloc>::\n-    replace(size_type __pos1, size_type __n1, const basic_string& __str,\n-\t    size_type __pos2, size_type __n2)\n+    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,\n+\t\t   _CharT __c)\n     {\n-      return this->replace(__pos1, __n1, __str._M_data()\n-\t\t\t   + __str._M_check(__pos2, \"basic_string::replace\"),\n-\t\t\t   __str._M_limit(__pos2, __n2));\n+      if (this->max_size() - (this->size() - __n1) < __n2)\n+\t__throw_length_error(\"basic_string::_M_replace_aux\");\n+      _M_mutate(__pos1, __n1, __n2);\n+      if (__n2)\n+\ttraits_type::assign(_M_data() + __pos1, __n2, __c);\n+      return *this;\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -756,13 +733,11 @@ namespace std\n     find(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n       const size_type __size = this->size();\n-      size_t __xpos = __pos;\n       const _CharT* __data = _M_data();\n-      for (; __xpos + __n <= __size; ++__xpos)\n-\tif (traits_type::compare(__data + __xpos, __s, __n) == 0)\n-\t  return __xpos;\n+      for (; __pos + __n <= __size; ++__pos)\n+\tif (traits_type::compare(__data + __pos, __s, __n) == 0)\n+\t  return __pos;\n       return npos;\n     }\n \n@@ -790,7 +765,6 @@ namespace std\n     rfind(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n       const size_type __size = this->size();\n       if (__n <= __size)\n \t{\n@@ -814,13 +788,10 @@ namespace std\n       const size_type __size = this->size();\n       if (__size)\n \t{\n-\t  size_t __xpos = __size - 1;\n-\t  if (__xpos > __pos)\n-\t    __xpos = __pos;\n-      \n-\t  for (++__xpos; __xpos-- > 0; )\n-\t    if (traits_type::eq(_M_data()[__xpos], __c))\n-\t      return __xpos;\n+\t  __pos = std::min(size_type(__size - 1), __pos);\n+\t  for (++__pos; __pos-- > 0; )\n+\t    if (traits_type::eq(_M_data()[__pos], __c))\n+\t      return __pos;\n \t}\n       return npos;\n     }\n@@ -831,7 +802,6 @@ namespace std\n     find_first_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n       for (; __n && __pos < this->size(); ++__pos)\n \t{\n \t  const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);\n@@ -847,7 +817,6 @@ namespace std\n     find_last_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n       size_type __size = this->size();\n       if (__size && __n)\n \t{ \n@@ -869,11 +838,9 @@ namespace std\n     find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n-      size_t __xpos = __pos;\n-      for (; __xpos < this->size(); ++__xpos)\n-\tif (!traits_type::find(__s, __n, _M_data()[__xpos]))\n-\t  return __xpos;\n+      for (; __pos < this->size(); ++__pos)\n+\tif (!traits_type::find(__s, __n, _M_data()[__pos]))\n+\t  return __pos;\n       return npos;\n     }\n \n@@ -882,10 +849,9 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_first_not_of(_CharT __c, size_type __pos) const\n     {\n-      size_t __xpos = __pos;\n-      for (; __xpos < this->size(); ++__xpos)\n-\tif (!traits_type::eq(_M_data()[__xpos], __c))\n-\t  return __xpos;\n+      for (; __pos < this->size(); ++__pos)\n+\tif (!traits_type::eq(_M_data()[__pos], __c))\n+\t  return __pos;\n       return npos;\n     }\n \n@@ -895,18 +861,16 @@ namespace std\n     find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const\n     {\n       __glibcxx_requires_string_len(__s, __n);\n-\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__size)\n \t{ \n-\t  if (--__size > __pos) \n-\t    __size = __pos;\n+\t  __pos = std::min(size_type(__size - 1), __pos);\n \t  do\n \t    {\n-\t      if (!traits_type::find(__s, __n, _M_data()[__size]))\n-\t\treturn __size;\n+\t      if (!traits_type::find(__s, __n, _M_data()[__pos]))\n+\t\treturn __pos;\n \t    } \n-\t  while (__size--);\n+\t  while (__pos--);\n \t}\n       return npos;\n     }\n@@ -916,17 +880,16 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     find_last_not_of(_CharT __c, size_type __pos) const\n     {\n-      size_type __size = this->size();\n+      const size_type __size = this->size();\n       if (__size)\n-\t{ \n-\t  if (--__size > __pos) \n-\t    __size = __pos;\n+\t{\n+\t  __pos = std::min(size_type(__size - 1), __pos);\n \t  do\n \t    {\n-\t      if (!traits_type::eq(_M_data()[__size], __c))\n-\t\treturn __size;\n+\t      if (!traits_type::eq(_M_data()[__pos], __c))\n+\t\treturn __pos;\n \t    } \n-\t  while (__size--);\n+\t  while (__pos--);\n \t}\n       return npos;\n     }"}, {"sha": "e01dbcaedbf01d78f31c9109af51fb42d5d5ce08", "filename": "libstdc++-v3/src/string-inst.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fefe561e809323e473448eb6a3631d3db31f2717/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstring-inst.cc?ref=fefe561e809323e473448eb6a3631d3db31f2717", "patch": "@@ -63,10 +63,6 @@ namespace std\n   template \n     S::basic_string(S::iterator, S::iterator, const allocator<C>&);\n \n-  template\n-    S&\n-    S::_M_replace(S::iterator, S::iterator, const C*, const C*);  \n-\n   template \n     C* \n     S::_S_construct(S::iterator, S::iterator, "}]}