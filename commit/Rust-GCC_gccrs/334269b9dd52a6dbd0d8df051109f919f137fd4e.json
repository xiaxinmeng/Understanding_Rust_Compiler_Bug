{"sha": "334269b9dd52a6dbd0d8df051109f919f137fd4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0MjY5YjlkZDUyYTZkYmQwZDhkZjA1MTEwOWY5MTlmMTM3ZmQ0ZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-04-08T23:42:06Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-04-08T23:42:06Z"}, "message": "re PR target/20814 (ICE in extract_insn for test vmx/varargs-1.c)\n\n        PR target/20814\n        * config/rs6000/predicates.md (altivec_register_operand): Accept\n        SUBREG.\n        (and64_operand): Do not limit CONST_INT to mask64_operand.\n        (and64_2_operand): Do not limit CONST_INT to mask64_1or2_operand.\n        (and_operand): Do not limit CONST_INT to mask_operand.\n\nFrom-SVN: r97872", "tree": {"sha": "750745dc1f7a0a46ca626e431462df26a80c62ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/750745dc1f7a0a46ca626e431462df26a80c62ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/334269b9dd52a6dbd0d8df051109f919f137fd4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334269b9dd52a6dbd0d8df051109f919f137fd4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/334269b9dd52a6dbd0d8df051109f919f137fd4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/334269b9dd52a6dbd0d8df051109f919f137fd4e/comments", "author": null, "committer": null, "parents": [{"sha": "de2ab0ca8b09521af6a0d0fb8b13029e119fba58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2ab0ca8b09521af6a0d0fb8b13029e119fba58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2ab0ca8b09521af6a0d0fb8b13029e119fba58"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "269275c3ee5cbb025660ed11083f41b77978394c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334269b9dd52a6dbd0d8df051109f919f137fd4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334269b9dd52a6dbd0d8df051109f919f137fd4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=334269b9dd52a6dbd0d8df051109f919f137fd4e", "patch": "@@ -1,3 +1,12 @@\n+2005-04-08  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/20814\n+\t* config/rs6000/predicates.md (altivec_register_operand): Accept\n+\tSUBREG. \n+\t(and64_operand): Do not limit CONST_INT to mask64_operand.\n+\t(and64_2_operand): Do not limit CONST_INT to mask64_1or2_operand.\n+\t(and_operand): Do not limit CONST_INT to mask_operand.\n+\n 2005-04-09  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR rtl-optimization/20466"}, {"sha": "e29297a0faf405d3b0c2b592a6f3a72ea68b5336", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/334269b9dd52a6dbd0d8df051109f919f137fd4e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/334269b9dd52a6dbd0d8df051109f919f137fd4e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=334269b9dd52a6dbd0d8df051109f919f137fd4e", "patch": "@@ -34,9 +34,11 @@\n   \n ;; Return 1 if op is an Altivec register.\n (define_predicate \"altivec_register_operand\"\n-  (and (match_code \"reg\")\n-       (match_test \"ALTIVEC_REGNO_P (REGNO (op))\n-\t\t    || REGNO (op) > LAST_VIRTUAL_REGISTER\")))\n+  (and (match_code \"reg,subreg\")\n+       (and (match_operand 0 \"register_operand\")\n+\t    (match_test \"GET_CODE (op) != REG\n+\t\t\t || ALTIVEC_REGNO_P (REGNO (op))\n+\t\t\t || REGNO (op) > LAST_VIRTUAL_REGISTER\"))))\n \n ;; Return 1 if op is XER register.\n (define_predicate \"xer_operand\"\n@@ -531,29 +533,27 @@\n ;; Return 1 if the operand is either a non-special register or a constant\n ;; that can be used as the operand of a PowerPC64 logical AND insn.\n (define_predicate \"and64_operand\"\n-  (if_then_else (match_code \"const_int\")\n-    (match_operand 0 \"mask64_operand\")\n-    (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n-      (match_operand 0 \"gpc_reg_operand\")\n-      (match_operand 0 \"logical_operand\"))))\n+  (ior (match_operand 0 \"mask64_operand\")\n+       (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n+\t (match_operand 0 \"gpc_reg_operand\")\n+\t (match_operand 0 \"logical_operand\"))))\n \n ;; Like and64_operand, but also match constants that can be implemented\n ;; with two rldicl or rldicr insns.\n (define_predicate \"and64_2_operand\"\n-  (if_then_else (match_code \"const_int\")\n-    (match_test \"mask64_1or2_operand (op, mode, true)\")\n-    (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n-      (match_operand 0 \"gpc_reg_operand\")\n-      (match_operand 0 \"logical_operand\"))))\n+  (ior (and (match_code \"const_int\")\n+\t    (match_test \"mask64_1or2_operand (op, mode, true)\"))\n+       (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n+\t (match_operand 0 \"gpc_reg_operand\")\n+\t (match_operand 0 \"logical_operand\"))))\n \n ;; Return 1 if the operand is either a non-special register or a\n ;; constant that can be used as the operand of a logical AND.\n (define_predicate \"and_operand\"\n-  (if_then_else (match_code \"const_int\")\n-    (match_operand 0 \"mask_operand\")\n-    (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n-      (match_operand 0 \"gpc_reg_operand\")\n-      (match_operand 0 \"logical_operand\"))))\n+  (ior (match_operand 0 \"mask_operand\")\n+       (if_then_else (match_test \"fixed_regs[CR0_REGNO]\")\n+\t (match_operand 0 \"gpc_reg_operand\")\n+\t (match_operand 0 \"logical_operand\"))))\n \n ;; Return 1 if the operand is a general non-special register or memory operand.\n (define_predicate \"reg_or_mem_operand\""}]}