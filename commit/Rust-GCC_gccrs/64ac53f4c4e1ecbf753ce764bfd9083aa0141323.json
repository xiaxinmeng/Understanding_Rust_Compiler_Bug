{"sha": "64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRhYzUzZjRjNGUxZWNiZjc1M2NlNzY0YmZkOTA4M2FhMDE0MTMyMw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-07-09T07:55:06Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-09T07:55:06Z"}, "message": "[Ada] Reformat comments\n\nReplace \".  \" (i.e. a period followed by two spaces) with \". \"; this is\nmeant to avoid distraction when reading comments, except for the license\nsection, where apparently this makes the formating nicer. Some comments\nhave been refilled, in particular those that could fit into fewer lines.\n\nAlso, some occurences of this patter in code has also been removed, e.g.\nin \"J in 1 ..  3\".\n\n2019-07-09  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* ali.ads, bindo-graphs.adb, bindo-validators.adb, clean.adb,\n\tdoc/gnat_ugn/elaboration_order_handling_in_gnat.rst, einfo.ads,\n\texp_aggr.adb, exp_ch13.adb, exp_ch4.adb, exp_ch5.adb,\n\texp_ch6.adb, exp_ch7.adb, exp_ch9.adb, exp_pakd.adb,\n\tfname-uf.ads, gnatlink.adb, inline.adb, lib.ads, make.adb,\n\tnamet.ads, opt.ads, par-ch4.adb, par-ch6.adb, par-labl.adb,\n\tprep.adb, sem_aggr.adb, sem_ch13.adb, sem_ch4.adb, sem_ch5.adb,\n\tsem_ch6.adb, sem_ch6.ads, sem_ch7.adb, sem_ch8.adb, sem_dim.adb,\n\tsem_disp.adb, sem_prag.adb, sem_res.adb, sem_warn.adb,\n\tsinfo.ads: Replace \".  \" with \". \". Minor reformatting and typo\n\tcorrections.\n\t* gnat_ugn.texi: Generate.\n\nFrom-SVN: r273287", "tree": {"sha": "b267213befbe7b37e58f6f10173e1a9b7977fa39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b267213befbe7b37e58f6f10173e1a9b7977fa39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75cfda8b4aa2cee4e62bcbc74f08f7628224b860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75cfda8b4aa2cee4e62bcbc74f08f7628224b860"}], "stats": {"total": 251, "additions": 132, "deletions": 119}, "files": [{"sha": "a2c6066c0e2a8f1cbc541a847d99ad5c7b039b17", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1,3 +1,18 @@\n+2019-07-09  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* ali.ads, bindo-graphs.adb, bindo-validators.adb, clean.adb,\n+\tdoc/gnat_ugn/elaboration_order_handling_in_gnat.rst, einfo.ads,\n+\texp_aggr.adb, exp_ch13.adb, exp_ch4.adb, exp_ch5.adb,\n+\texp_ch6.adb, exp_ch7.adb, exp_ch9.adb, exp_pakd.adb,\n+\tfname-uf.ads, gnatlink.adb, inline.adb, lib.ads, make.adb,\n+\tnamet.ads, opt.ads, par-ch4.adb, par-ch6.adb, par-labl.adb,\n+\tprep.adb, sem_aggr.adb, sem_ch13.adb, sem_ch4.adb, sem_ch5.adb,\n+\tsem_ch6.adb, sem_ch6.ads, sem_ch7.adb, sem_ch8.adb, sem_dim.adb,\n+\tsem_disp.adb, sem_prag.adb, sem_res.adb, sem_warn.adb,\n+\tsinfo.ads: Replace \".  \" with \". \". Minor reformatting and typo\n+\tcorrections.\n+\t* gnat_ugn.texi: Generate.\n+\n 2019-07-09  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* bindo.ads: Move type Precedence_Kind from the private to the"}, {"sha": "fc6e5921f1728a32eeaf8882c15adaff7ad8777e", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -226,7 +226,7 @@ package ALI is\n \n       No_Component_Reordering : Boolean;\n       --  Set to True if file was compiled with a configuration pragma file\n-      --  containing pragma No_Component_Reordering.  Not set if 'P' appears\n+      --  containing pragma No_Component_Reordering. Not set if 'P' appears\n       --  in Ignore_Lines.\n \n       No_Object : Boolean;"}, {"sha": "26b0c27f71fa2b8f72957efa3831e62e1941d3cf", "filename": "gcc/ada/bindo-graphs.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fbindo-graphs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fbindo-graphs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-graphs.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1321,7 +1321,7 @@ package body Bindo.Graphs is\n          Edge : Library_Graph_Edge_Id) return Boolean;\n       pragma Inline (Is_Static_Successor_Edge);\n       --  Determine whether the successor of invocation edge Edge represents a\n-      --  unit that was compile with the static model.\n+      --  unit that was compiled with the static model.\n \n       function Links_Vertices_In_Same_Component\n         (G    : Library_Graph;"}, {"sha": "b711a91a31804a1afe1fcdffebb16ef120183b7f", "filename": "gcc/ada/bindo-validators.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fbindo-validators.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fbindo-validators.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-validators.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -378,7 +378,7 @@ package body Bindo.Validators is\n          --  Validate each unit in the elaboration order against the set of\n          --  units that need to be elaborated.\n \n-         for Index in Unit_Id_Tables.First ..  Unit_Id_Tables.Last (Order) loop\n+         for Index in Unit_Id_Tables.First .. Unit_Id_Tables.Last (Order) loop\n             Validate_Unit\n               (U_Id     => Order.Table (Index),\n                Elab_Set => Elab_Set);"}, {"sha": "565d22e50c903eecbfcac4e45b61e97e5819e02b", "filename": "gcc/ada/clean.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fclean.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fclean.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fclean.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -854,7 +854,7 @@ package body Clean is\n                               then\n                                  Project_File_Name :=\n                                    new String'\n-                                     (Prj (Prj'First + 1 ..  Prj'Last));\n+                                     (Prj (Prj'First + 1 .. Prj'Last));\n                               else\n                                  Project_File_Name := new String'(Prj);\n                               end if;"}, {"sha": "eb0f905d3ed83144948f5b85af37c3fb8e95d8fb", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -184,7 +184,7 @@ factors:\n \n * preelaborability of units\n \n-* presence of elaboration control pragmas\n+* presence of elaboration-control pragmas\n \n * invocations performed in elaboration code\n \n@@ -255,7 +255,7 @@ successfully elaborated.\n Ada states that a total elaboration order must exist, but it does not define\n what this order is. A compiler is thus tasked with choosing a suitable\n elaboration order which satisfies the dependencies imposed by |with| clauses,\n-unit categorization, elaboration control pragmas, and invocations performed in\n+unit categorization, elaboration-control pragmas, and invocations performed in\n elaboration code. Ideally an order that avoids ABE problems should be chosen,\n however a compiler may not always find such an order due to complications with\n respect to control and data flow.\n@@ -265,7 +265,7 @@ respect to control and data flow.\n Checking the Elaboration Order\n ==============================\n \n-To avoid placing the entire elaboration order burden on the programmer, Ada \n+To avoid placing the entire elaboration-order burden on the programmer, Ada \n provides three lines of defense:\n \n * *Static semantics*\n@@ -545,7 +545,7 @@ depend on.\n   be elaborated prior to ``Client``.\n \n   Removing pragma ``Elaborate_All`` could result in the following incorrect\n-  elaboration order\n+  elaboration order:\n \n   ::\n \n@@ -617,19 +617,19 @@ elaboration order and to diagnose elaboration problems.\n   - All code within all units in a partition is considered to be elaboration\n     code.\n \n-  - Some of the invocations in elaboration code may not take place at runtime\n+  - Some of the invocations in elaboration code may not take place at run time\n     due to conditional execution.\n \n   GNAT performs extensive diagnostics on a unit-by-unit basis for all scenarios\n   that invoke internal targets. In addition, GNAT generates run-time checks for\n   all external targets and for all scenarios that may exhibit ABE problems.\n \n   The elaboration order is obtained by honoring all |with| clauses, purity and\n-  preelaborability of units, and elaboration control pragmas. The dynamic model\n+  preelaborability of units, and elaboration-control pragmas. The dynamic model\n   attempts to take all invocations in elaboration code into account. If an\n   invocation leads to a circularity, GNAT ignores the invocation based on the\n   assumptions stated above. An order obtained using the dynamic model may fail\n-  an ABE check at runtime when GNAT ignored an invocation.\n+  an ABE check at run time when GNAT ignored an invocation.\n \n   The dynamic model is enabled with compiler switch :switch:`-gnatE`.\n \n@@ -643,15 +643,15 @@ elaboration order and to diagnose elaboration problems.\n   - Only code at the library level and in package body statements within all\n     units in a partition is considered to be elaboration code.\n \n-  - All invocations in elaboration will take place at runtime, regardless of\n+  - All invocations in elaboration will take place at run time, regardless of\n     conditional execution.\n \n   GNAT performs extensive diagnostics on a unit-by-unit basis for all scenarios\n   that invoke internal targets. In addition, GNAT generates run-time checks for\n   all external targets and for all scenarios that may exhibit ABE problems.\n \n   The elaboration order is obtained by honoring all |with| clauses, purity and\n-  preelaborability of units, presence of elaboration control pragmas, and all\n+  preelaborability of units, presence of elaboration-control pragmas, and all\n   invocations in elaboration code. An order obtained using the static model is\n   guaranteed to be ABE problem-free, excluding dispatching calls and\n   access-to-subprogram types.\n@@ -846,9 +846,9 @@ Elaboration Circularities\n An **elaboration circularity** occurs whenever the elaboration of a set of\n units enters a deadlocked state, where each unit is waiting for another unit\n to be elaborated. This situation may be the result of improper use of |with|\n-clauses, elaboration control pragmas, or invocations in elaboration code.\n+clauses, elaboration-control pragmas, or invocations in elaboration code.\n \n-The following example showcases an elaboration circularity.\n+The following example exhibits an elaboration circularity.\n \n   ::\n \n@@ -941,7 +941,7 @@ too much modification, especially in the case of complex legacy code.\n When faced with an elaboration circularity, the programmer should also consider\n the tactics given in the suggestions section of the circularity diagnostic.\n Depending on the units involved in the circularity, their |with| clauses,\n-purity, preelaborability, presence of elaboration control pragmas and\n+purity, preelaborability, presence of elaboration-control pragmas and\n invocations at elaboration time, the binder may suggest one or more of the\n following tactics to eliminate the circularity:\n \n@@ -951,8 +951,8 @@ following tactics to eliminate the circularity:\n \n      remove pragma Elaborate for unit \"...\" in unit \"...\"\n \n-  This tactic is suggested when the binder has determine that pragma\n-  ``Elaborate``\n+  This tactic is suggested when the binder has determined that pragma\n+  ``Elaborate``:\n \n   - Prevents a set of units from being elaborated.\n \n@@ -971,7 +971,7 @@ following tactics to eliminate the circularity:\n      remove pragma Elaborate_All for unit \"...\" in unit \"...\"\n \n   This tactic is suggested when the binder has determined that pragma\n-  ``Elaborate_All``\n+  ``Elaborate_All``:\n \n   - Prevents a set of units from being elaborated.\n \n@@ -1002,7 +1002,7 @@ following tactics to eliminate the circularity:\n      remove pragma Elaborate_Body in unit \"...\"\n \n   This tactic is suggested when the binder has determined that pragma\n-  ``Elaborate_Body``\n+  ``Elaborate_Body``:\n \n   - Prevents a set of units from being elaborated.\n \n@@ -1021,7 +1021,7 @@ following tactics to eliminate the circularity:\n      use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\n \n   This tactic is suggested when the binder has determined that a task\n-  activation at elaboration time\n+  activation at elaboration time:\n \n   - Prevents a set of units from being elaborated.\n \n@@ -1038,7 +1038,7 @@ following tactics to eliminate the circularity:\n      use the dynamic elaboration model (compiler switch -gnatE)\n \n   This tactic is suggested when the binder has determined that an invocation at\n-  elaboration time\n+  elaboration time:\n \n   - Prevents a set of units from being elaborated.\n \n@@ -1070,43 +1070,43 @@ following tactics to eliminate the circularity:\n   The programmer should analyze this information to determine which units\n   should be compiled with the dynamic model.\n \n-* Forced dependency elimination\n+* Forced-dependency elimination\n \n   ::\n \n      remove the dependency of unit \"...\" on unit \"...\" from the argument of switch -f\n \n   This tactic is suggested when the binder has determined that a dependency\n-  present in the forced delboration order file indicated by binder switch\n-  :switch:`-f`\n+  present in the forced-elaboration-order file indicated by binder switch\n+  :switch:`-f`:\n \n   - Prevents a set of units from being elaborated.\n \n   - The removal of the dependency will enable the successful ordering of the\n     units.\n \n-  The programmer should edit the forced elaboration order file, remove the\n+  The programmer should edit the forced-elaboration-order file, remove the\n   dependency, and rebind the program.\n \n-* All forced dependency elimination\n+* All forced-dependency elimination\n \n   ::\n \n      remove switch -f\n \n-  This tactic is suggested in case editing the forced elaboration order file is\n+  This tactic is suggested in case editing the forced-elaboration-order file is\n   not an option.\n \n   The programmer should remove binder switch :switch:`-f` from the binder\n   arguments, and rebind.\n \n-* Multiple circularities diagnostic\n+* Multiple-circularities diagnostic\n \n   ::\n \n      diagnose all circularities (binder switch -d_C)\n \n-  By default, the binder will diagnose only the highest precedence circularity.\n+  By default, the binder will diagnose only the highest-precedence circularity.\n   If the program contains multiple circularities, the binder will suggest the\n   use of binder switch :switch:`-d_C` in order to obtain the diagnostics of all\n   circularities.\n@@ -1118,16 +1118,16 @@ If none of the tactics suggested by the binder eliminate the elaboration\n circularity, the programmer should consider using one of the legacy elaboration\n models, in the following order:\n \n-* Use the pre-20.x legacy elaboration order model, with binder switch\n+* Use the pre-20.x legacy elaboration-order model, with binder switch\n   :switch:`-H`.\n \n * Use both pre-18.x and pre-20.x legacy elaboration models, with compiler\n   switch :switch:`-gnatH` and binder switch :switch:`-H`.\n \n-* Use the relaxed static elaboration model, with compiler switches\n+* Use the relaxed static-elaboration model, with compiler switches\n   :switch:`-gnatH` :switch:`-gnatJ` and binder switch :switch:`-H`.\n \n-* Use the relaxed dynamic elaboration model, with compiler switches\n+* Use the relaxed dynamic-elaboration model, with compiler switches\n   :switch:`-gnatH` :switch:`-gnatJ` :switch:`-gnatE` and binder switch\n   :switch:`-H`.\n \n@@ -1304,7 +1304,7 @@ options:\n * If none of the steps outlined above resolve the circularity, use a more\n   permissive elaboration model, in the following order:\n \n-  - Use the pre-20.x legacy elaboration order model, with binder switch\n+  - Use the pre-20.x legacy elaboration-order model, with binder switch\n     :switch:`-H`.\n \n   - Use both pre-18.x and pre-20.x legacy elaboration models, with compiler"}, {"sha": "f69a94a8b0e5e07149ea266d3c12067ab7dcafd8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -320,7 +320,7 @@ package Einfo is\n --  an attempt to set the attribute on a subtype will raise an assert error.\n \n --  Other attributes are noted as applying to the [implementation base type\n---  only].  These are representation attributes which must always apply to a\n+--  only]. These are representation attributes which must always apply to a\n --  full non-private type, and where the attributes are always on the full\n --  type. The attribute can be referenced on a subtype (and automatically\n --  retrieves the value from the implementation base type). However, it is an"}, {"sha": "c944db6b41ebae2bcc4e810ae72a4b5fbce9c411", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -192,7 +192,7 @@ package body Exp_Aggr is\n \n    procedure Convert_To_Assignments (N : Node_Id; Typ : Entity_Id);\n    --  Transform a record aggregate into a sequence of assignments performed\n-   --  component by component.  N is an N_Aggregate or N_Extension_Aggregate.\n+   --  component by component. N is an N_Aggregate or N_Extension_Aggregate.\n    --  Typ is the type of the record aggregate.\n \n    procedure Expand_Record_Aggregate\n@@ -8751,7 +8751,7 @@ package body Exp_Aggr is\n          Val   := 0;\n          Packed_Num := 0;\n \n-         --  Account for endianness.  See corresponding comment in\n+         --  Account for endianness. See corresponding comment in\n          --  Packed_Array_Aggregate_Handled concerning the following.\n \n          if Bytes_Big_Endian"}, {"sha": "f3c2c01240ba2a389703a301587ff15f37b50d75", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -232,7 +232,7 @@ package body Exp_Ch13 is\n                         Convert_To (RTE (RE_Size_Type), Expression (N)));\n \n                   --  If the clause is not generated by an aspect, insert\n-                  --  the assignment here.  Freezing rules ensure that this\n+                  --  the assignment here. Freezing rules ensure that this\n                   --  is safe, or clause will have been rejected already.\n \n                   if Is_List_Member (N) then\n@@ -724,7 +724,7 @@ package body Exp_Ch13 is\n       end if;\n \n       --  If the record representation clause has no components, then\n-      --  completely remove it.  Note that we also have to remove\n+      --  completely remove it. Note that we also have to remove\n       --  ourself from the Rep Item list.\n \n       if Is_Empty_List (Component_Clauses (N)) then"}, {"sha": "99bde93e18625a43d022bfebfcad7ba2d73ba915", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -7404,7 +7404,7 @@ package body Exp_Ch4 is\n                --     Obj1 : Enclosing_Non_UU_Type;\n                --     Obj2 : Enclosing_Non_UU_Type (1);\n \n-               --     ...  Obj1 = Obj2 ...\n+               --     ... Obj1 = Obj2 ...\n \n                --     Generated code:\n "}, {"sha": "f1d12cbb50b7029986ec7d3017f3dd7b5996f542", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -3919,7 +3919,7 @@ package body Exp_Ch5 is\n    --      --  Default_Iterator aspect of Vector. This increments Lock,\n    --      --  disallowing tampering with cursors. Unfortunately, it does not\n    --      --  increment Busy. The result of Iterate is Limited_Controlled;\n-   --      --  finalization will decrement Lock.  This is a build-in-place\n+   --      --  finalization will decrement Lock. This is a build-in-place\n    --      --  dispatching call to Iterate.\n \n    --      Cur : Cursor := First (Iter); -- or Last"}, {"sha": "364acd97c73eedbf2c16d83534f2c79c7dd91648", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -3203,7 +3203,7 @@ package body Exp_Ch6 is\n                            --  ???\n \n                            --  A further case that requires special handling\n-                           --  is the common idiom E.all'access.  If E is a\n+                           --  is the common idiom E.all'access. If E is a\n                            --  formal of the enclosing subprogram, the\n                            --  accessibility of the expression is that of E.\n \n@@ -8525,7 +8525,7 @@ package body Exp_Ch6 is\n          --  The presence of an address clause complicates the build-in-place\n          --  expansion because the indicated address must be processed before\n          --  the indirect call is generated (including the definition of a\n-         --  local pointer to the object).  The address clause may come from\n+         --  local pointer to the object). The address clause may come from\n          --  an aspect specification or from an explicit attribute\n          --  specification appearing after the object declaration. These two\n          --  cases require different processing."}, {"sha": "2ca4109444f6d8e7b97c78ed9682f4261fe858d1", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -393,7 +393,7 @@ package body Exp_Ch7 is\n    --  name. Before generating the proper call to one of these operations we\n    --  check whether Typ is known to be controlled at the point of definition.\n    --  If it is not then we must retrieve the hidden operation of the parent\n-   --  and use it instead.  This is one case that might be solved more cleanly\n+   --  and use it instead. This is one case that might be solved more cleanly\n    --  once Overriding pragmas or declarations are in place.\n \n    function Contains_Subprogram (Blk : Entity_Id) return Boolean;"}, {"sha": "7eb6eb5ba81fee79ea19443e79b3ec5e29865215", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -477,12 +477,11 @@ package body Exp_Ch9 is\n    --    <actualN> := P.<formalN>;\n \n    procedure Reset_Scopes_To (Bod : Node_Id; E : Entity_Id);\n-   --  Reset the scope of declarations and blocks at the top level of Bod\n-   --  to be E. Bod is either a block or a subprogram body.  Used after\n-   --  expanding various kinds of entry bodies into their corresponding\n-   --  constructs. This is needed during unnesting to determine whether a\n-   --  body generated for an entry or an accept alternative includes uplevel\n-   --  references.\n+   --  Reset the scope of declarations and blocks at the top level of Bod to\n+   --  be E. Bod is either a block or a subprogram body. Used after expanding\n+   --  various kinds of entry bodies into their corresponding constructs. This\n+   --  is needed during unnesting to determine whether a body generated for an\n+   --  entry or an accept alternative includes uplevel references.\n \n    function Trivial_Accept_OK return Boolean;\n    --  If there is no DO-END block for an accept, or if the DO-END block has\n@@ -12943,10 +12942,9 @@ package body Exp_Ch9 is\n \n       Analyze (N);\n \n-      --  Some items in Decls used to be in the N_Block in  E_Call that\n-      --  is constructed in Expand_Entry_Call, and are now in the new\n-      --  Block into which N has been rewritten.  Adjust their scopes\n-      --  to reflect that.\n+      --  Some items in Decls used to be in the N_Block in E_Call that is\n+      --  constructed in Expand_Entry_Call, and are now in the new Block\n+      --  into which N has been rewritten. Adjust their scopes to reflect that.\n \n       if Nkind (E_Call) = N_Block_Statement then\n          Obj := First_Entity (Entity (Identifier (E_Call)));"}, {"sha": "2f45a727ae44364758d1d0be84ff78f7c3688e00", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1127,7 +1127,7 @@ package body Exp_Pakd is\n \n       --  If we are building the initialization procedure for a packed array,\n       --  and Initialize_Scalars is enabled, each component assignment is an\n-      --  out-of-range value by design.  Compile this value without checks,\n+      --  out-of-range value by design. Compile this value without checks,\n       --  because a call to the array init_proc must not raise an exception.\n \n       --  Condition is not consistent with description above, Within_Init_Proc"}, {"sha": "3e62c47093acf013c6b34ab1fb1161f60b9daf86", "filename": "gcc/ada/fname-uf.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Ffname-uf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Ffname-uf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname-uf.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -105,7 +105,7 @@ package Fname.UF is\n       Dot : String_Ptr;\n       Cas : Casing_Type);\n    --  This is called to process a Source_File_Name pragma whose first\n-   --  argument is a file name pattern string.  Pat is this pattern string,\n+   --  argument is a file name pattern string. Pat is this pattern string,\n    --  which contains an asterisk to correspond to the unit. Typ is one of\n    --  'b'/'s'/'u' for body/spec/subunit, Dot is the separator string\n    --  for child/subunit names, and Cas is one of Lower/Upper/Mixed"}, {"sha": "124c289c86665a3fcb60b7a2e46d0db534107b0e", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -27455,7 +27455,7 @@ purity of units\n preelaborability of units\n \n @item \n-presence of elaboration control pragmas\n+presence of elaboration-control pragmas\n \n @item \n invocations performed in elaboration code\n@@ -27537,7 +27537,7 @@ body of Main\n Ada states that a total elaboration order must exist, but it does not define\n what this order is. A compiler is thus tasked with choosing a suitable\n elaboration order which satisfies the dependencies imposed by @emph{with} clauses,\n-unit categorization, elaboration control pragmas, and invocations performed in\n+unit categorization, elaboration-control pragmas, and invocations performed in\n elaboration code. Ideally an order that avoids ABE problems should be chosen,\n however a compiler may not always find such an order due to complications with\n respect to control and data flow.\n@@ -27547,7 +27547,7 @@ respect to control and data flow.\n @section Checking the Elaboration Order\n \n \n-To avoid placing the entire elaboration order burden on the programmer, Ada\n+To avoid placing the entire elaboration-order burden on the programmer, Ada\n provides three lines of defense:\n \n \n@@ -27870,7 +27870,7 @@ Note that there are several allowable suborders for the specs and bodies of\n be elaborated prior to @code{Client}.\n \n Removing pragma @code{Elaborate_All} could result in the following incorrect\n-elaboration order\n+elaboration order:\n \n @example\n spec of Math\n@@ -27960,7 +27960,7 @@ All code within all units in a partition is considered to be elaboration\n code.\n \n @item \n-Some of the invocations in elaboration code may not take place at runtime\n+Some of the invocations in elaboration code may not take place at run time\n due to conditional execution.\n @end itemize\n \n@@ -27969,11 +27969,11 @@ that invoke internal targets. In addition, GNAT generates run-time checks for\n all external targets and for all scenarios that may exhibit ABE problems.\n \n The elaboration order is obtained by honoring all @emph{with} clauses, purity and\n-preelaborability of units, and elaboration control pragmas. The dynamic model\n+preelaborability of units, and elaboration-control pragmas. The dynamic model\n attempts to take all invocations in elaboration code into account. If an\n invocation leads to a circularity, GNAT ignores the invocation based on the\n assumptions stated above. An order obtained using the dynamic model may fail\n-an ABE check at runtime when GNAT ignored an invocation.\n+an ABE check at run time when GNAT ignored an invocation.\n \n The dynamic model is enabled with compiler switch @code{-gnatE}.\n @end itemize\n@@ -27997,7 +27997,7 @@ Only code at the library level and in package body statements within all\n units in a partition is considered to be elaboration code.\n \n @item \n-All invocations in elaboration will take place at runtime, regardless of\n+All invocations in elaboration will take place at run time, regardless of\n conditional execution.\n @end itemize\n \n@@ -28006,7 +28006,7 @@ that invoke internal targets. In addition, GNAT generates run-time checks for\n all external targets and for all scenarios that may exhibit ABE problems.\n \n The elaboration order is obtained by honoring all @emph{with} clauses, purity and\n-preelaborability of units, presence of elaboration control pragmas, and all\n+preelaborability of units, presence of elaboration-control pragmas, and all\n invocations in elaboration code. An order obtained using the static model is\n guaranteed to be ABE problem-free, excluding dispatching calls and\n access-to-subprogram types.\n@@ -28249,9 +28249,9 @@ rules.\n An @strong{elaboration circularity} occurs whenever the elaboration of a set of\n units enters a deadlocked state, where each unit is waiting for another unit\n to be elaborated. This situation may be the result of improper use of @emph{with}\n-clauses, elaboration control pragmas, or invocations in elaboration code.\n+clauses, elaboration-control pragmas, or invocations in elaboration code.\n \n-The following example showcases an elaboration circularity.\n+The following example exhibits an elaboration circularity.\n \n @quotation\n \n@@ -28357,7 +28357,7 @@ too much modification, especially in the case of complex legacy code.\n When faced with an elaboration circularity, the programmer should also consider\n the tactics given in the suggestions section of the circularity diagnostic.\n Depending on the units involved in the circularity, their @emph{with} clauses,\n-purity, preelaborability, presence of elaboration control pragmas and\n+purity, preelaborability, presence of elaboration-control pragmas and\n invocations at elaboration time, the binder may suggest one or more of the\n following tactics to eliminate the circularity:\n \n@@ -28371,8 +28371,8 @@ Pragma Elaborate elimination\n remove pragma Elaborate for unit \"...\" in unit \"...\"\n @end example\n \n-This tactic is suggested when the binder has determine that pragma\n-@code{Elaborate}\n+This tactic is suggested when the binder has determined that pragma\n+@code{Elaborate}:\n \n \n @itemize -\n@@ -28399,7 +28399,7 @@ remove pragma Elaborate_All for unit \"...\" in unit \"...\"\n @end example\n \n This tactic is suggested when the binder has determined that pragma\n-@code{Elaborate_All}\n+@code{Elaborate_All}:\n \n \n @itemize -\n@@ -28439,7 +28439,7 @@ remove pragma Elaborate_Body in unit \"...\"\n @end example\n \n This tactic is suggested when the binder has determined that pragma\n-@code{Elaborate_Body}\n+@code{Elaborate_Body}:\n \n \n @itemize -\n@@ -28465,7 +28465,7 @@ use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\n @end example\n \n This tactic is suggested when the binder has determined that a task\n-activation at elaboration time\n+activation at elaboration time:\n \n \n @itemize -\n@@ -28488,7 +28488,7 @@ use the dynamic elaboration model (compiler switch -gnatE)\n @end example\n \n This tactic is suggested when the binder has determined that an invocation at\n-elaboration time\n+elaboration time:\n \n \n @itemize -\n@@ -28534,15 +28534,15 @@ The programmer should analyze this information to determine which units\n should be compiled with the dynamic model.\n \n @item \n-Forced dependency elimination\n+Forced-dependency elimination\n \n @example\n remove the dependency of unit \"...\" on unit \"...\" from the argument of switch -f\n @end example\n \n This tactic is suggested when the binder has determined that a dependency\n-present in the forced delboration order file indicated by binder switch\n-@code{-f}\n+present in the forced-elaboration-order file indicated by binder switch\n+@code{-f}:\n \n \n @itemize -\n@@ -28555,30 +28555,30 @@ The removal of the dependency will enable the successful ordering of the\n units.\n @end itemize\n \n-The programmer should edit the forced elaboration order file, remove the\n+The programmer should edit the forced-elaboration-order file, remove the\n dependency, and rebind the program.\n \n @item \n-All forced dependency elimination\n+All forced-dependency elimination\n \n @example\n remove switch -f\n @end example\n \n-This tactic is suggested in case editing the forced elaboration order file is\n+This tactic is suggested in case editing the forced-elaboration-order file is\n not an option.\n \n The programmer should remove binder switch @code{-f} from the binder\n arguments, and rebind.\n \n @item \n-Multiple circularities diagnostic\n+Multiple-circularities diagnostic\n \n @example\n diagnose all circularities (binder switch -d_C)\n @end example\n \n-By default, the binder will diagnose only the highest precedence circularity.\n+By default, the binder will diagnose only the highest-precedence circularity.\n If the program contains multiple circularities, the binder will suggest the\n use of binder switch @code{-d_C} in order to obtain the diagnostics of all\n circularities.\n@@ -28595,19 +28595,19 @@ models, in the following order:\n @itemize *\n \n @item \n-Use the pre-20.x legacy elaboration order model, with binder switch\n+Use the pre-20.x legacy elaboration-order model, with binder switch\n @code{-H}.\n \n @item \n Use both pre-18.x and pre-20.x legacy elaboration models, with compiler\n switch @code{-gnatH} and binder switch @code{-H}.\n \n @item \n-Use the relaxed static elaboration model, with compiler switches\n+Use the relaxed static-elaboration model, with compiler switches\n @code{-gnatH} @code{-gnatJ} and binder switch @code{-H}.\n \n @item \n-Use the relaxed dynamic elaboration model, with compiler switches\n+Use the relaxed dynamic-elaboration model, with compiler switches\n @code{-gnatH} @code{-gnatJ} @code{-gnatE} and binder switch\n @code{-H}.\n @end itemize\n@@ -28833,7 +28833,7 @@ permissive elaboration model, in the following order:\n @itemize -\n \n @item \n-Use the pre-20.x legacy elaboration order model, with binder switch\n+Use the pre-20.x legacy elaboration-order model, with binder switch\n @code{-H}.\n \n @item "}, {"sha": "69462e9afccca62560ba5aebeddfce35d860b18d", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -459,7 +459,7 @@ procedure Gnatlink is\n \n                      when 'v' =>\n \n-                        --  Support \"double\" verbose mode.  Second -v\n+                        --  Support \"double\" verbose mode. Second -v\n                         --  gets sent to the linker and binder phases.\n \n                         if Verbose_Mode then\n@@ -2068,7 +2068,7 @@ begin\n    end Link_Step;\n \n    --  Only keep the binder output file and it's associated object\n-   --  file if compiling with the -g option.  These files are only\n+   --  file if compiling with the -g option. These files are only\n    --  useful if debugging.\n \n    if not Debug_Flag_Present then"}, {"sha": "5b7fefc0c7eda2255070e15aad7b71d6a50f6b21", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1751,7 +1751,7 @@ package body Inline is\n          --  occurrences of pragmas referencing the formals are removed since\n          --  they have no meaning when the body is inlined and the formals are\n          --  rewritten (the analysis of the non-inlined body will handle these\n-         --  pragmas).  A new internal name is associated with Body_To_Inline.\n+         --  pragmas). A new internal name is associated with Body_To_Inline.\n \n          ------------------------------\n          -- Generate_Subprogram_Body --"}, {"sha": "504120e082e5cdd33dff612dd5ca41798ac1efbb", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -993,7 +993,7 @@ private\n    --  clause. The First entry is the main unit. The second entry, if present\n    --  is a unit on which the first unit depends, etc. This stack is used to\n    --  generate error messages showing the dependency chain if a file is not\n-   --  found, or whether a true circular dependency exists.  The Load_Unit\n+   --  found, or whether a true circular dependency exists. The Load_Unit\n    --  function makes an entry in this table when it is called, and removes\n    --  the entry just before it returns.\n "}, {"sha": "805addb1d3d897b4e1e101dafb9916c8e3590923", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -502,7 +502,7 @@ package body Make is\n    --  linker). For the sake of convenience, some program specific switches\n    --  can be passed directly on the gnatmake command line. This procedure\n    --  records these switches so that gnatmake can pass them to the right\n-   --  program.  S is the switch to be added at the end of the command line\n+   --  program. S is the switch to be added at the end of the command line\n    --  for Program if Append_Switch is True. If Append_Switch is False S is\n    --  added at the beginning of the command line.\n "}, {"sha": "bdd3dad04acec78f1717dfde5f0db8688da15513", "filename": "gcc/ada/namet.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fnamet.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fnamet.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnamet.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -431,7 +431,7 @@ package Namet is\n    --  Uhh encoding (hh = hex code), other 16-bit wide character values are\n    --  stored using the Whhhh (hhhh = hex code) encoding, and other 32-bit wide\n    --  wide character values are stored using the WWhhhhhhhh (hhhhhhhh = hex\n-   --  code).  Note that this procedure does not fold upper case letters (they\n+   --  code). Note that this procedure does not fold upper case letters (they\n    --  are stored using the Uhh encoding).\n \n    procedure Set_Character_Literal_Name"}, {"sha": "4c1cf6ff453b89c67da8f040feead9e978b61c08", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1984,7 +1984,7 @@ package Opt is\n    --  set by the command line switches -gnat83/95/2005/2012, and possibly\n    --  modified by the use of configuration pragmas Ada_*. This switch is used\n    --  to set the initial value for Ada_Version mode at the start of analysis\n-   --  of a unit.  Note however that the setting of this flag is ignored for\n+   --  of a unit. Note however that the setting of this flag is ignored for\n    --  internal and predefined units (which are always compiled in the most up\n    --  to date version of Ada).\n "}, {"sha": "b9b0214df13d9cba313a94b7af78c512b42f9a39", "filename": "gcc/ada/par-ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch4.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -2262,7 +2262,7 @@ package body Ch4 is\n          --  capacity-exceeded error. The purpose of this trick is to avoid\n          --  creating a deeply nested tree, which would cause deep recursion\n          --  during semantics, causing stack overflow. This way, we can handle\n-         --  enormous concatenations in the normal case of predefined \"&\".  We\n+         --  enormous concatenations in the normal case of predefined \"&\". We\n          --  first build up the normal tree, and then rewrite it if\n          --  appropriate.\n "}, {"sha": "0fc7109e3511b7f4fd8fd7f20e190a3a7ddd7568", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1442,7 +1442,7 @@ package body Ch6 is\n                   Look_Ahead : loop\n \n                      --  If we run into a semicolon, then assume that a\n-                     --  colon was missing, e.g.  Parms (X Y; ...). Also\n+                     --  colon was missing, e.g. Parms (X Y; ...). Also\n                      --  assume missing colon on EOF (a real disaster)\n                      --  and on a right paren, e.g. Parms (X Y), and also\n                      --  on an assignment symbol, e.g. Parms (X Y := ..)"}, {"sha": "899905efdf57eb7b2ed97b75cfc4d800eeb0f692", "filename": "gcc/ada/par-labl.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-labl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fpar-labl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-labl.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -79,7 +79,7 @@ procedure Labl is\n       --  then we have an error.\n \n       --  Note that in the worst case, this is quadratic in the number\n-      --  of labels.  However, labels are not all that common, and this\n+      --  of labels. However, labels are not all that common, and this\n       --  is only called for explicit labels.\n \n       --  ???Nonetheless, the efficiency could be improved. For example,"}, {"sha": "8549f790a4b3d01c7d7d950b8c648e4cf91d03ab", "filename": "gcc/ada/prep.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fprep.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fprep.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprep.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -825,7 +825,7 @@ package body Prep is\n    ------------------\n \n    procedure List_Symbols (Foreword : String) is\n-      Order : array (0 ..  Integer (Symbol_Table.Last (Mapping)))\n+      Order : array (0 .. Integer (Symbol_Table.Last (Mapping)))\n                  of Symbol_Id;\n       --  After alphabetical sorting, this array stores the indexes of the\n       --  symbols in the order they are displayed."}, {"sha": "2143cc4fcab415095dd7d3ace2b5e557d41cc557", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -904,7 +904,7 @@ package body Sem_Aggr is\n \n       --  If the aggregate has box-initialized components, its type must be\n       --  frozen so that initialization procedures can properly be called\n-      --  in the resolution that follows.  The replacement of boxes with\n+      --  in the resolution that follows. The replacement of boxes with\n       --  initialization calls is properly an expansion activity but it must\n       --  be done during resolution.\n "}, {"sha": "1ccbb52e18b6fd45fedb8495f97c1a7a45234fc6", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -11562,7 +11562,7 @@ package body Sem_Ch13 is\n \n    begin\n       --  A representation item is either subtype-specific (Size and Alignment\n-      --  clauses) or type-related (all others).  Subtype-specific aspects may\n+      --  clauses) or type-related (all others). Subtype-specific aspects may\n       --  differ for different subtypes of the same type (RM 13.1.8).\n \n       --  A derived type inherits each type-related representation aspect of\n@@ -12623,7 +12623,7 @@ package body Sem_Ch13 is\n       function Is_Derived_Type_With_Constraint return Boolean;\n       --  Check whether T is a derived type with an explicit constraint, in\n       --  which case the constraint has frozen the type and the item is too\n-      --  late.  This compensates for the fact that for derived scalar types\n+      --  late. This compensates for the fact that for derived scalar types\n       --  we freeze the base type unconditionally on account of a long-standing\n       --  issue in gigi.\n "}, {"sha": "b937fc453258b35ac5936526401198c52b4f3df1", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1699,7 +1699,7 @@ package body Sem_Ch4 is\n \n       --  If the case expression is a formal object of mode in out, then\n       --  treat it as having a nonstatic subtype by forcing use of the base\n-      --  type (which has to get passed to Check_Case_Choices below).  Also\n+      --  type (which has to get passed to Check_Case_Choices below). Also\n       --  use base type when the case expression is parenthesized.\n \n       if Paren_Count (Expr) > 0\n@@ -7806,7 +7806,7 @@ package body Sem_Ch4 is\n                   --  In_Parameter, but for now we examine the formal that\n                   --  corresponds to the indexing, and assume that variable\n                   --  indexing is required if some interpretation has an\n-                  --  assignable formal at that position.  Still does not\n+                  --  assignable formal at that position. Still does not\n                   --  cover the most complex cases ???\n \n                   if Is_Overloaded (Name (Parent (Par))) then"}, {"sha": "b77bd7e77685223bf0cc2492c2e7b763e370e73d", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -3080,7 +3080,7 @@ package body Sem_Ch5 is\n \n          else\n             --  A quantified expression that appears in a pre/post condition\n-            --  is preanalyzed several times.  If the range is given by an\n+            --  is preanalyzed several times. If the range is given by an\n             --  attribute reference it is rewritten as a range, and this is\n             --  done even with expansion disabled. If the type is already set\n             --  do not reanalyze, because a range with static bounds may be\n@@ -3904,7 +3904,7 @@ package body Sem_Ch5 is\n       --  If the expander is not active then we want to analyze the loop body\n       --  now even in the Ada 2012 iterator case, since the rewriting will not\n       --  be done. Insert the loop variable in the current scope, if not done\n-      --  when analysing the iteration scheme.  Set its kind properly to detect\n+      --  when analysing the iteration scheme. Set its kind properly to detect\n       --  improper uses in the loop body.\n \n       --  In GNATprove mode, we do one of the above depending on the kind of\n@@ -3998,7 +3998,7 @@ package body Sem_Ch5 is\n \n       --  Variables referenced within a loop subject to possible OpenACC\n       --  offloading may be implicitly written to as part of the OpenACC\n-      --  transaction.  Clear flags possibly conveying that they are constant,\n+      --  transaction. Clear flags possibly conveying that they are constant,\n       --  set for example when the code does not explicitly assign them.\n \n       if Is_OpenAcc_Environment (Stmt) then\n@@ -4062,7 +4062,7 @@ package body Sem_Ch5 is\n                end if;\n \n             --  If we failed to find a label, it means the implicit declaration\n-            --  of the label was hidden.  A for-loop parameter can do this to\n+            --  of the label was hidden. A for-loop parameter can do this to\n             --  a label with the same name inside the loop, since the implicit\n             --  label declaration is in the innermost enclosing body or block\n             --  statement."}, {"sha": "f98e60fc432a219061a66dd514d34d6567ad654e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -10155,7 +10155,7 @@ package body Sem_Ch6 is\n \n                         --  Here, S is \"function ... return T;\" declared in\n                         --  the private part, not overriding some visible\n-                        --  operation.  That's illegal in the tagged case\n+                        --  operation. That's illegal in the tagged case\n                         --  (but not if the private type is untagged).\n \n                         if ((Present (Partial_View)"}, {"sha": "f069947da268676c4bffa49ddbb48d05b287cfba", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -100,7 +100,7 @@ package Sem_Ch6 is\n       Overridden_Subp : Entity_Id;\n       Is_Primitive    : Boolean);\n    --  Verify the consistency of an overriding_indicator given for subprogram\n-   --  declaration, body, renaming, or instantiation.  Overridden_Subp is set\n+   --  declaration, body, renaming, or instantiation. Overridden_Subp is set\n    --  if the scope where we are introducing the subprogram contains a\n    --  type-conformant subprogram that becomes hidden by the new subprogram.\n    --  Is_Primitive indicates whether the subprogram is primitive."}, {"sha": "e97f15ebc0085f2b8e84a33c535cdbf037ecc140", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1757,7 +1757,7 @@ package body Sem_Ch7 is\n          end if;\n \n       --  There may be inherited private subprograms that need to be declared,\n-      --  even in the absence of an explicit private part.  If there are any\n+      --  even in the absence of an explicit private part. If there are any\n       --  public declarations in the package and the package is a public child\n       --  unit, then an implicit private part is assumed.\n "}, {"sha": "03b6235dce1efcbe8a41f0591c24f352a5ffd2a4", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -8733,7 +8733,7 @@ package body Sem_Ch8 is\n          if Scope_Stack.Last > Scope_Stack.First then\n             SST.Component_Alignment_Default :=\n               Scope_Stack.Table\n-                (Scope_Stack.Last - 1).  Component_Alignment_Default;\n+                (Scope_Stack.Last - 1).Component_Alignment_Default;\n \n          --  Otherwise, this is the first scope being pushed on the scope\n          --  stack. Inherit the component alignment from the configuration"}, {"sha": "2bcccd22cc880a5294d729408f47864470466b70", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -115,7 +115,7 @@ package body Sem_Dim is\n \n    type Symbol_Array is\n      array (Dimension_Position range\n-              Low_Position_Bound ..  High_Position_Bound) of String_Id;\n+              Low_Position_Bound .. High_Position_Bound) of String_Id;\n    --  Store the symbols of all units within a system\n \n    No_Symbols : constant Symbol_Array := (others => No_String);\n@@ -151,7 +151,7 @@ package body Sem_Dim is\n \n    type Dimension_Type is\n      array (Dimension_Position range\n-              Low_Position_Bound ..  High_Position_Bound) of Rational;\n+              Low_Position_Bound .. High_Position_Bound) of Rational;\n \n    Null_Dimension : constant Dimension_Type := (others => Zero);\n \n@@ -2906,7 +2906,7 @@ package body Sem_Dim is\n          New_Aspects  := Empty_List;\n \n          List_Of_Dims := New_List;\n-         for Position in Dims_Of_N'First ..  System.Count loop\n+         for Position in Dims_Of_N'First .. System.Count loop\n             Dim_Power := Dims_Of_N (Position);\n             Append_To (List_Of_Dims,\n                Make_Op_Divide (Loc,\n@@ -3023,7 +3023,7 @@ package body Sem_Dim is\n    --  System.Dim.Float_IO or System.Dim.Integer_IO, the default string\n    --  parameter is rewritten to include the unit symbol (or the dimension\n    --  symbols if not a defined quantity) in the output of a dimensioned\n-   --  object.  If a value is already supplied by the user for the parameter\n+   --  object. If a value is already supplied by the user for the parameter\n    --  Symbol, it is used as is.\n \n    --  Case 1. Item is dimensionless"}, {"sha": "5deba186e41b99ac217b9c309ac6a38af784363c", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -596,7 +596,7 @@ package body Sem_Disp is\n                --  We need to determine whether the context of the call\n                --  provides a tag to make the call dispatching. This requires\n                --  the call to be the actual in an enclosing call, and that\n-               --  actual must be controlling.  If the call is an operand of\n+               --  actual must be controlling. If the call is an operand of\n                --  equality, the other operand must not ve abstract.\n \n                if not Is_Tagged_Type (Typ)"}, {"sha": "7a4857ff108f532eb3584a46eccfee9f83a8ac0e", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -25787,7 +25787,7 @@ package body Sem_Prag is\n \n                --  Otherwise we have a call to an overridden primitive, and we\n                --  will create a common class-wide clone for the body of\n-               --  original operation and its eventual inherited versions.  If\n+               --  original operation and its eventual inherited versions. If\n                --  the original operation dispatches on result it is never\n                --  inherited and there is no need for a clone. There is not\n                --  need for a clone either in GNATprove mode, as cases that"}, {"sha": "d505bc5ef9830c726bd5b2d0cb2fa2db6acfc420", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -159,7 +159,7 @@ package body Sem_Res is\n       Typ     : Entity_Id;\n       Is_Comp : Boolean);\n    --  Internal procedure for Resolve_Op_Concat to resolve one operand of\n-   --  concatenation operator.  The operand is either of the array type or of\n+   --  concatenation operator. The operand is either of the array type or of\n    --  the component type. If the operand is an aggregate, and the component\n    --  type is composite, this is ambiguous if component type has aggregates.\n "}, {"sha": "16a772af88ba12af1c9db25a3cd873e2c1b28b19", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -2698,7 +2698,7 @@ package body Sem_Warn is\n \n       --  Flag any unused with clauses. For a subunit, check only the units\n       --  in its context, not those of the parent, which may be needed by other\n-      --  subunits.  We will get the full warnings when we compile the parent,\n+      --  subunits. We will get the full warnings when we compile the parent,\n       --  but the following is helpful when compiling a subunit by itself.\n \n       if Nkind (Unit (Cunit (Main_Unit))) = N_Subunit then"}, {"sha": "6310016ee1c67390161adff889e44697efa9ecc9", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64ac53f4c4e1ecbf753ce764bfd9083aa0141323/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=64ac53f4c4e1ecbf753ce764bfd9083aa0141323", "patch": "@@ -1252,7 +1252,7 @@ package Sinfo is\n    --    conversion node is introduced to represent the required check.\n \n    --    A special case arises for the arguments of the Pred/Succ attributes.\n-   --    Here the range check needed is against First + 1 ..  Last (Pred) or\n+   --    Here the range check needed is against First + 1 .. Last (Pred) or\n    --    First .. Last - 1 (Succ) of the corresponding base type. Essentially\n    --    these checks are what would be performed within the implicit body of\n    --    the functions that correspond to these attributes. In these cases,"}]}