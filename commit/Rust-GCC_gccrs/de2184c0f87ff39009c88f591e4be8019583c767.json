{"sha": "de2184c0f87ff39009c88f591e4be8019583c767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUyMTg0YzBmODdmZjM5MDA5Yzg4ZjU5MWU0YmU4MDE5NTgzYzc2Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-03T12:20:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-03T12:20:28Z"}, "message": "re PR tree-optimization/46286 (ICE in do_complex_constraint, at tree-ssa-structalias.c:1882)\n\n2010-11-03  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46286\n\t* tree-ssa-structalias.c (get_constraint_for_1): Avoid referencing\n\tre-allocated vector data.\n\nFrom-SVN: r166241", "tree": {"sha": "dd6ceff8e833ad9425c409f0ba7747c4569b0689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd6ceff8e833ad9425c409f0ba7747c4569b0689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de2184c0f87ff39009c88f591e4be8019583c767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2184c0f87ff39009c88f591e4be8019583c767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2184c0f87ff39009c88f591e4be8019583c767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2184c0f87ff39009c88f591e4be8019583c767/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "72fdf9e9c4c469d8ca5abf63c7ace0c6a7569f49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72fdf9e9c4c469d8ca5abf63c7ace0c6a7569f49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72fdf9e9c4c469d8ca5abf63c7ace0c6a7569f49"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "8f34c23031fe0fb97a93fcc4d8d89c9139458025", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2184c0f87ff39009c88f591e4be8019583c767/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2184c0f87ff39009c88f591e4be8019583c767/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de2184c0f87ff39009c88f591e4be8019583c767", "patch": "@@ -1,3 +1,9 @@\n+2010-11-03  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46286\n+\t* tree-ssa-structalias.c (get_constraint_for_1): Avoid referencing\n+\tre-allocated vector data.\n+\n 2010-11-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/46285"}, {"sha": "45efd55b7555572a5da56541372c2bd6fcaa7eb1", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2184c0f87ff39009c88f591e4be8019583c767/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2184c0f87ff39009c88f591e4be8019583c767/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=de2184c0f87ff39009c88f591e4be8019583c767", "patch": "@@ -3339,20 +3339,20 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t  {\n \t  case MEM_REF:\n \t    {\n-\t      struct constraint_expr *c;\n+\t      struct constraint_expr cs;\n \t      varinfo_t vi, curr;\n \t      tree off = double_int_to_tree (sizetype, mem_ref_offset (t));\n \t      get_constraint_for_ptr_offset (TREE_OPERAND (t, 0), off, results);\n \t      do_deref (results);\n \n \t      /* If we are not taking the address then make sure to process\n \t\t all subvariables we might access.  */\n-\t      c = VEC_last (ce_s, *results);\n+\t      cs = *VEC_last (ce_s, *results);\n \t      if (address_p\n-\t\t  || c->type != SCALAR)\n+\t\t  || cs.type != SCALAR)\n \t\treturn;\n \n-\t      vi = get_varinfo (c->var);\n+\t      vi = get_varinfo (cs.var);\n \t      curr = vi->next;\n \t      if (!vi->is_full_var\n \t\t  && curr)\n@@ -3366,7 +3366,6 @@ get_constraint_for_1 (tree t, VEC (ce_s, heap) **results, bool address_p,\n \t\t    {\n \t\t      if (curr->offset - vi->offset < size)\n \t\t\t{\n-\t\t\t  struct constraint_expr cs = *c;\n \t\t\t  cs.var = curr->id;\n \t\t\t  VEC_safe_push (ce_s, heap, *results, &cs);\n \t\t\t}"}]}