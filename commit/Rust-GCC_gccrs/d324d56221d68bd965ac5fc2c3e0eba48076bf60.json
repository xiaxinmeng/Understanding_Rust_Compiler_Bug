{"sha": "d324d56221d68bd965ac5fc2c3e0eba48076bf60", "node_id": "C_kwDOANBUbNoAKGQzMjRkNTYyMjFkNjhiZDk2NWFjNWZjMmMzZTBlYmE0ODA3NmJmNjA", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-01-18T03:29:15Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-01-27T12:33:28Z"}, "message": "RISC-V: Finalize testcases for final version VSETVL PASS.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-14.c: Adjust for final implementation.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-23.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-30.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-44.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-47.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-50.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-51.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-6.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-65.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-66.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-67.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-68.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-70.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-71.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-9.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c: Ditto.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_multiple-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-73.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-74.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/avl_single-75.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvl-9.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-1.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-10.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-11.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-12.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-13.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-14.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-15.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-16.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-17.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-18.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-19.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-2.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-20.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-3.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-4.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-5.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-6.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-7.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-8.c: New test.\n\t* gcc.target/riscv/rvv/vsetvl/vsetvlmax-9.c: New test.", "tree": {"sha": "b6c7add3e419b385ac82f850bbdc680cd0e3559a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6c7add3e419b385ac82f850bbdc680cd0e3559a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d324d56221d68bd965ac5fc2c3e0eba48076bf60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d324d56221d68bd965ac5fc2c3e0eba48076bf60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d324d56221d68bd965ac5fc2c3e0eba48076bf60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d324d56221d68bd965ac5fc2c3e0eba48076bf60/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b6b9c680bc43c19b24a2e01ddc99f2c061e0511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6b9c680bc43c19b24a2e01ddc99f2c061e0511", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6b9c680bc43c19b24a2e01ddc99f2c061e0511"}], "stats": {"total": 1947, "additions": 1787, "deletions": 160}, "files": [{"sha": "ea0faf66818d8e00f65e08d6377a40e2214c6625", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-1.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "664f3479f04b9fa191298b79f6dd87e5d7935658", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-10.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-10.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + i + 1, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 1, v1, vl);\n+\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8 (in + i + 2, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 2, v2, vl);\n+\n+      vint8mf8_t v3 = __riscv_vle8_v_i8mf8 (in + i + 3, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 3, v3, vl);\n+\n+      vint8mf8_t v4 = __riscv_vle8_v_i8mf8 (in + i + 4, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 4, v4, vl);\n+\n+      vint8mf8_t v5 = __riscv_vle8_v_i8mf8 (in + i + 5, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v5, vl);\n+\n+      vint8mf8_t v6 = __riscv_vle8_v_i8mf8 (in + i + 6, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 6, v6, vl);\n+\n+      vint8mf8_t v7 = __riscv_vle8_v_i8mf8 (in + i + 7, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 7, v7, vl);\n+\n+      vint8mf8_t v8 = __riscv_vle8_v_i8mf8 (in + i + 8, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 8, v8, vl);\n+\n+      vint8mf8_t v9 = __riscv_vle8_v_i8mf8 (in + i + 9, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 9, v9, vl);\n+\n+      vint8mf8_t v10 = __riscv_vle8_v_i8mf8 (in + i + 10, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 10, v10, vl);\n+\n+      vint8mf8_t v11 = __riscv_vle8_v_i8mf8 (in + i + 11, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 11, v11, vl);\n+\n+      vint8mf8_t v12 = __riscv_vle8_v_i8mf8 (in + i + 12, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 12, v12, vl);\n+\n+      vint8mf8_t v13 = __riscv_vle8_v_i8mf8 (in + i + 13, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 13, v13, vl);\n+\n+      vint8mf8_t v14 = __riscv_vle8_v_i8mf8 (in + i + 14, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 14, v14, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "91812c90d7b788890c8bcf0349324194efc7f100", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-11.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-11.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf2_t v2 = __riscv_vle8_v_i8mf2 (in + i + 100, vl);\n+      __riscv_vse8_v_i8mf2 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a7a62bd2a3f2b5a0b4de8ac29fcd98647f8f3989", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-12.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-12.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+"}, {"sha": "fb1cbc5e17657cdbb1eb991ec9353c3f2b9db1b2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-13.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 200, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5ede182c36d3a2f04bff5ca4b368440aa6293362", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-14.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int m, int cond, int cond2)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = 4000;\n+    break;\n+  }\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+  \n+  size_t vl2;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl2 = 100;\n+    break;\n+  case 2:\n+    vl2 = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl2 = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+  vl2 = 4000;\n+    break;\n+  }\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl2);\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 200, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl2);\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "884d69ccde328ab00534c441f3ded25e26f92cdc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-15.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-15.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int m, int cond, int cond2)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = 4000;\n+    break;\n+  }\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+  \n+  size_t vl2;\n+  switch (cond2)\n+  {\n+  case 1:\n+    vl2 = 100;\n+    break;\n+  case 2:\n+    vl2 = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl2 = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl2 = 4000;\n+    break;\n+  }\n+\n+  for (size_t i = 0; i < m; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl2);\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 200, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl2);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c8352bb92232c2d696d635f6673ac3d5cae19d34", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-16.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-16.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int m, int cond, int cond2)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = 4000;\n+    break;\n+  }\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+  \n+  size_t vl2;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl2 = 100;\n+    break;\n+  case 2:\n+    vl2 = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl2 = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+  vl = 3000;\n+    break;\n+  }\n+\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl2);\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 200, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 200, v2, vl2);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "9c0af9a34f3e412f5de6eafc287a18b44b88ec2d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-2.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int n, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a39638879a4de2b70fbca23637a7b5d4d45f54d4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-3.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "f41ddb75001adfbaf4d9b19b22ea70e108cf74d4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "374b7af107385d04e8cae7496ab4c41c20fd87f6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-5.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    vl++;\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "efd1e4efdaa2e284f3189870ed24c333a3696cf9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    vl++;\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+  }\n+}\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e855f86b9a3db9684cefa9d5d9971a058576eac0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-7.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-7.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+    vl++;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "316a4ce6193415b5744200b717446fddc5ea71a2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-8.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-8.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    break;\n+  }\n+  for (int i = 0; i < l; i++){\n+    for (int j = 0; j < m; j++){\n+      for (int k = 0; k < n; k++)\n+        {\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j, v, vl);\n+        }\n+    }\n+    vl++;\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "60d3f0906c53397f074780a81009ef6a5ee19676", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_multiple-9.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_multiple-9.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (void * restrict in, void * restrict out, int l, int n, int m, int cond)\n+{\n+  size_t vl;\n+  switch (cond)\n+  {\n+  case 1:\n+    vl = 100;\n+    break;\n+  case 2:\n+    vl = *(size_t*)(in + 100);\n+    break;\n+  case 3:\n+    {\n+      size_t new_vl = *(size_t*)(in + 500);\n+      size_t new_vl2 = *(size_t*)(in + 600);\n+      vl = new_vl + new_vl2 + 777;\n+      break;\n+    }\n+  default:\n+    vl = vl + 4000;\n+    break;\n+  }\n+  for (int i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v1 = __riscv_vle8_v_i8mf8 (in + i + 1, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 1, v1, vl);\n+\n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8 (in + i + 2, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 2, v2, vl);\n+\n+      vint8mf8_t v3 = __riscv_vle8_v_i8mf8 (in + i + 3, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 3, v3, vl);\n+\n+      vint8mf8_t v4 = __riscv_vle8_v_i8mf8 (in + i + 4, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 4, v4, vl);\n+\n+      vint8mf8_t v5 = __riscv_vle8_v_i8mf8 (in + i + 5, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 5, v5, vl);\n+\n+      vint8mf8_t v6 = __riscv_vle8_v_i8mf8 (in + i + 6, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 6, v6, vl);\n+\n+      vint8mf8_t v7 = __riscv_vle8_v_i8mf8 (in + i + 7, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 7, v7, vl);\n+\n+      vint8mf8_t v8 = __riscv_vle8_v_i8mf8 (in + i + 8, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 8, v8, vl);\n+\n+      vint8mf8_t v9 = __riscv_vle8_v_i8mf8 (in + i + 9, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 9, v9, vl);\n+\n+      vint8mf8_t v10 = __riscv_vle8_v_i8mf8 (in + i + 10, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 10, v10, vl);\n+\n+      vint8mf8_t v11 = __riscv_vle8_v_i8mf8 (in + i + 11, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 11, v11, vl);\n+\n+      vint8mf8_t v12 = __riscv_vle8_v_i8mf8 (in + i + 12, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 12, v12, vl);\n+\n+      vint8mf8_t v13 = __riscv_vle8_v_i8mf8 (in + i + 13, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 13, v13, vl);\n+\n+      vint8mf8_t v14 = __riscv_vle8_v_i8mf8 (in + i + 14, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 14, v14, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "426754309e866334a78361dbb1148eb1dafbfe0a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -23,5 +23,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6c2584c6ba2ec8495b9352e4fa25e0f96773dd79", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-23.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,6 +29,6 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int m, int cond)\n \n /* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,101} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,102} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b5267b748e47f3d74c6a0a47670d8ef329af7112", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-30.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-30.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -25,5 +25,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int m, unsigned cond\n     }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*mu} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "470c99e4ec4164694e34b4df0199816f0f923b75", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-44.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-44.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -15,5 +15,4 @@ void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "935e1b10630dd6209825390ec80cf6834b2e21d7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-47.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-47.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -31,5 +31,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0c8764334b6818725963affdbee877edc9df5f94", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-50.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-50.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -18,6 +18,6 @@ void f(void *base, void *out, void *mask_in, size_t m) {\n     }\n   }\n }\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "d2ceab4c1c88023d3236c0dfe8866d4b90d2f108", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-51.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-51.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -21,5 +21,5 @@ void f(void *base, void *out, void *mask_in, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "db2f75008856ef121c50beaa612d085a57de968a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-6.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -17,6 +17,6 @@ void f (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:\\s+ble\\s+[a-x0-9]+,\\s*zero,\\.L[0-9]+\\s+\\.L[0-9]+\\:\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+li\\s+[a-x0-9]+,0\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-O2\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c440b9b176b30f78e054bcf2174a753ac94b7e07", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-65.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-65.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,5 +29,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "dfbb744d166e03599d3bd280de38138768113912", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-66.c", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-66.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -3,44 +3,19 @@\n \n #include \"riscv_vector.h\"\n \n-void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n+void f2 (void * restrict in, void * restrict out, int l, int n, int m, size_t vl)\n {\n-  size_t vl = 555;\n-  \n-  if (cond) {\n-    for (int i = 0; i < l; i++){\n-      for (int j = 0; j < m; j++){\n-        for (int k = 0; k < n; k++)\n-          {\n-            vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n-            __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n-          }\n-      }\n-    }\n-  } else {\n-    out[999] = out[999] * in[999];\n-  }\n-  \n-  for (int i = 0; i < l; i++){\n-    for (int j = 0; j < m; j++){\n-      for (int k = 0; k < n; k++)\n-        {\n-          out[i+j+k+10000000] = out[i+j+k+10000000] + in[i+j+k+10000000];\n-        }\n-    }\n-  }\n-\n   for (int i = 0; i < l; i++){\n     for (int j = 0; j < m; j++){\n       for (int k = 0; k < n; k++)\n         {\n-          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k + 10000, vl);\n-          v = __riscv_vle8_v_i8mf8_tu (v, in + i + j + k + 20000, vl);\n-          __riscv_vse8_v_i8mf8 (out + i + j + k + 10000, v, vl);\n+          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+          __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n         }\n     }\n+    vl++;\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {add\\s+\\s*[a-x0-9]+,\\s*[a-x0-9]+,\\s*[a-x0-9]+\\s+vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b9f49b90de1827de5e702f7dd1b4bb01fec99fa9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-67.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-67.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -21,6 +21,7 @@ void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "da6e5a8cc72148bd6656dbd9945ffb4af42d44bf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-68.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-68.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -21,5 +21,6 @@ void f2 (void * restrict in, void * restrict out, int l, int n, int m)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*44} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d9c35cbb65d265a3c34f4d31dec8934506e760fe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-70.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-70.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -6,14 +6,19 @@\n void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t cond)\n {\n   size_t vl = 555;\n-  for (int i = 0; i < l; i++){\n-    for (int j = 0; j < m; j++){\n-      for (int k = 0; k < n; k++)\n-        {\n-          vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n-          __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n-        }\n+  \n+  if (cond) {\n+    for (int i = 0; i < l; i++){\n+      for (int j = 0; j < m; j++){\n+        for (int k = 0; k < n; k++)\n+          {\n+            vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + j + k, vl);\n+            __riscv_vse8_v_i8mf8 (out + i + j + k, v, vl);\n+          }\n+      }\n     }\n+  } else {\n+    out[999] = out[999] * in[999];\n   }\n   \n   for (int i = 0; i < l; i++){\n@@ -37,5 +42,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "06706d6bac3ae800a3b023a236535fb2f9f75dda", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-71.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-71.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -50,5 +50,5 @@ void f (int8_t * restrict in, int8_t * restrict out, int l, int n, int m, size_t\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "cd9bb80292267ff4d04d384fa6ee096d843403e4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-73.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-73.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl, size_t vl2)\n+{\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl2);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl2);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl2);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "568615aa7f79d5616b81ab2a367ef4beecada73e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-74.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-74.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl, size_t vl2)\n+{\n+  if (cond)\n+    vl = 101;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "b7680ec98fc262c3e272add93fea461dc0bfab83", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-75.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-75.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f (int8_t * restrict in, int8_t * restrict out, int n, int cond, size_t vl, size_t vl2)\n+{\n+  if (cond)\n+    vl = 101;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i + 300, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 300, v, vl);\n+    }\n+  \n+  vl = 101;\n+  for (size_t i = 0; i < n; i++)\n+    {\n+      vint8mf8_t v = __riscv_vle8_v_i8mf8 (in + i, vl);\n+      __riscv_vse8_v_i8mf8 (out + i, v, vl);\n+      \n+      vint8mf8_t v2 = __riscv_vle8_v_i8mf8_tu (v, in + i + 100, vl);\n+      __riscv_vse8_v_i8mf8 (out + i + 100, v2, vl);\n+    }\n+}\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "8f47258d80b32ee78d7a4bd3c496d67f621f13a4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/avl_single-9.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Favl_single-9.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -54,3 +54,4 @@ void f (void * restrict in, void * restrict out, int l, int n, int m)\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {li\\s+[a-x0-9]+,32} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "61bf57b5d4270888c39af557dd60769192f12eda", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-2.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -26,4 +26,4 @@ void f (int8_t * restrict in, int8_t * restrict out, int n, int n2)\n }\n \n /* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*9,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3da7b8722c234c82aedbf7e4ddd74cd3811e4825", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-3.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -19,4 +19,4 @@ void f(void *base, void *out, void *mask_in, size_t vl, size_t m) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "2a9616eb7ea2a88cd7bd26615d4d18fe57ad2f65", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_bb_prop-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_bb_prop-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -21,5 +21,5 @@ void f(void *base, void *out, void *mask_in, size_t vl, size_t m, size_t n) {\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e16,\\s*mf4,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*4,\\s*e8,\\s*mf8,\\s*tu,\\s*mu} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n "}, {"sha": "1671bb573f618b8340fd63cefc5d13beb9f5d601", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-4.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -30,9 +30,7 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli} 5 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "c4e25f4600ad9f13af34987bddd77d98f6fadc0d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/imm_conflict-5.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fimm_conflict-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -37,9 +37,7 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetivli} 5 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*5,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*19,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetivli\\s+zero,\\s*8,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\"  no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b819029603cbc5eb9e1c450de9723448e7f7ace4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_back_prop-13.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_back_prop-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -22,8 +22,8 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n     *(vfloat32mf2_t*)(out + i + 500) = v;\n   }\n   for (int i = 0; i < n; i++) {\n-    vfloat64m1_t v = *(vfloat64m1_t*)(in + 500 + i);\n-    *(vfloat64m1_t*)(out + i + 600) = v;\n+    vuint32mf2_t v = *(vuint32mf2_t*)(in + 500 + i);\n+    *(vuint32mf2_t*)(out + i + 600) = v;\n   }\n \n   if (cond == 0)\n@@ -58,7 +58,7 @@ void f (int32_t * restrict in, int32_t * restrict out, int n, int cond, int cond\n   }\n }\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */"}, {"sha": "d7c74fe81375a8c3df18a6c964f09863c278fb6d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-13.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -210,12 +210,6 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "9ea35cf7e3220f26150b3e826da2f8ffc89e49eb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-14.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -210,12 +210,6 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "5c4a03108fb02cdb6db99704cec59da93475adb7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-15.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-15.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -38,4 +38,3 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fe7870e40ede91ce7feff2ba5ea75b464538faf9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-16.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-16.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -248,10 +248,3 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "d564b065daace3aa8d076a5775c8ce5cfb4287bb", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-21.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-21.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -147,9 +147,9 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "fe32d83eb81ca8c9a39b54cd653407241066fd52", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-22.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-22.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -147,9 +147,9 @@ void f6 (int * restrict in, int * restrict out, int n, int cond)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "3271557f589060803ac87ba99827dbe674823b07", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-23.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -27,4 +27,4 @@ void f (int * restrict in, int * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "233bb0bff5436853dfad9fd6eebc70b4cd62044f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-24.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-24.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -171,10 +171,10 @@ void f7 (int * restrict in, int * restrict out, int n, int cond)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "83b7aafebb39fb64b15aa332e6ad360d8c33c49d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-5.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -156,12 +156,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "d3be701188129da109614053b8fb5cc421df6c36", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-6.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -156,12 +156,12 @@ void f6 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle8\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle16\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "c3f8684c3acab92ad4db990df052d4062aa0b9f5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-7.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (int8_t * restrict in, int8_t * restrict out, int n)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vle32\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "24875936d262a0eb0dcf7810b1ee754632823f2a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_bb_prop-8.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_bb_prop-8.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -185,10 +185,10 @@ void f7 (int8_t * restrict in, int8_t * restrict out, int n)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9][0-9][0-9]\\:\\s+vlm\\.v\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-O1\" } } } } */"}, {"sha": "7a8bb8e93edd7d102fde82fa54c9f56e30f00ca7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-1.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize\" } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-tree-vectorize -fno-schedule-insns -fno-schedule-insns2\" } */\n \n #include \"riscv_vector.h\"\n \n@@ -18,6 +18,6 @@ void f (int32_t * restrict in, int32_t * restrict out, size_t n, size_t cond, si\n }\n \n /* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+j\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "d365e4ac3c9987bbd72aec21427eba8071400729", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_conflict-6.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_conflict-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -19,7 +19,6 @@ void f (int32_t * in, int32_t * out, int n, int cond)\n   }\n }\n \n-/* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+:} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {\\.L[0-9]+:\\s+vle8\\.v} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "aaafa02b508d9dfa798ce81b5021d24d7bf6877f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-1.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "200bec7935a7c8952f2a31112ba681fa88f39440", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-10.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-10.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,3 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "f8bf5ebbd0fa3232ba1c431cfa9ef3f98d63cd2e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-11.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "691ff249b2e124ad659a17d06a3b4a80374c2bf7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-12.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "b922c43bcab5d91f725705285db63a1c290e62da", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "d1be90a7c669ca773fd6a89f9859b5bd05a94a42", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-14.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -180,10 +180,4 @@ void f7 (void * restrict in, void * restrict out, int n, int cond)\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n \n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+\\:} 1 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "4acf12c12762632c7344d14735458a5eda96c68a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-2.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "2dda69041f5ca4000dd70feada864be93d7c4528", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-3.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "9e57b0d1357b40482a433abe832b1daa510223b3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "ae342cff8a7a972353160ae606fca0cfc7052020", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "6a5a9cc80fbbb616cf556a9344265dbe0d8a4b54", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "76cbfec151a996355c6fefb694717f8f6ee5fbe4", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-7.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "0f48bdba0409197f7d9aab49c62683c206f7311a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-8.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "712a3ee255282918b69990d0f7a744df748a95e2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_miss_default-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_miss_default-9.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -29,4 +29,4 @@ void f (void * restrict in, void * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 4 { target { no-opts \"-O0\"   no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n-/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]\\:} 1 { target { no-opts \"-O0\"    no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n+"}, {"sha": "cdbe856ae84899bb486dfcaa5b2da6a5e96333ca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vlmax_switch_vtype-10.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvlmax_switch_vtype-10.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -42,6 +42,5 @@ void foo (int8_t * restrict in, int8_t * restrict out, int n, int cond)\n }\n \n /* { dg-final { scan-assembler-times {vsetvli} 9 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n-/* { dg-final { scan-assembler-times {\\s*\\.L[0-9]+:\\s*vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+\\.L[0-9]+} 1 { target { no-opts \"-O0\" no-opts \"-O1\"  no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" no-opts \"-flto\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]} 3 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */\n /* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-Os\" no-opts \"-funroll-loops\" no-opts \"-g\" } } } } */"}, {"sha": "b82e2490815fd625eeaca7f614d76a44b7169f12", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-1.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m, vbool64_t mask) {\n+  size_t avl = __riscv_vsetvl_e8mf8(vl);\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "3c7e0ec27b65a10af8ffca8aa93fdb06ef1f0a35", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-10.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-10.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(void *in1, void *in2, void *in3, void *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e16m1(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvl_e16m1(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvl_e16m1(vl));\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvl_e16m1(vl));\n+    \n+    vint8mf2_t a2 = __riscv_vle8_v_i8mf2(in1 + 100, __riscv_vsetvl_e8m1(vl));\n+    vint8mf2_t b2 = __riscv_vle8_v_i8mf2_tu(a2, in2 + 100, __riscv_vsetvl_e8m1(vl));\n+    vint8mf2_t c2 = __riscv_vle8_v_i8mf2_tu(b2, in3 + 100, __riscv_vsetvl_e8m1(vl));\n+    __riscv_vse8_v_i8mf2(out + 100, c2, __riscv_vsetvl_e8m1(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fa825f031f90bcbd3fbe043a30bacc105cf9ec49", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-11.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-11.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = __riscv_vsetvl_e16mf2(avl);\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fc7e1cb249e2ddcf9def359a6cb7080f313db4b1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-12.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-12.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = 3;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6157a2c7f12f97315b24d3ebb6f4c3b25015f8ef", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-13.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = 55;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "40d4af00419773787b6c03e2a2e94bdb56603266", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-14.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond){\n+    vl = __riscv_vsetvl_e32m1(avl);\n+    vint16mf2_t v = *(vint16mf2_t*)(in1 + 1000);\n+    *(vint16mf2_t*)(out + 1000) = v;\n+  }\n+  else\n+    vl = 55;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c677a81d7069020e729104895f506530362681cf", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-15.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-15.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = __riscv_vsetvl_e16mf2(avl) >> 4;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {srli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*4} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "37a9039af854f43eccc87398398e4d34f69997e7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-16.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-16.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  size_t avl;\n+  if (m > 100)\n+    avl = __riscv_vsetvl_e8mf8(vl << 10);\n+  else\n+    avl = __riscv_vsetvl_e8mf8(vl);\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "ee58f9bbdfcf9dc981c16a0194a10a9d05a2d864", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-17.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-17.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int vl) {\n+  \n+  vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e8mf8 (vl));\n+  vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvl_e8mf4 (vl));\n+  vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvl_e8m1 (vl));\n+  __riscv_vse32_v_i32m1(out, c, __riscv_vsetvl_e8mf2 (vl));\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 8 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "df4fdf24a4a1bea2984e19102ee31d3142011801", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-18.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-18.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m, size_t n) {\n+  vint8mf4_t v1 = *(vint8mf4_t*) (base + 100000);\n+  size_t avl = __riscv_vsetvl_e8mf8(vl);\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    if (n > 100) {\n+      __riscv_vse8_v_i8mf4(out + i, v1, avl);\n+    } else {\n+      __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 5 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "87ef3acc24daabe41984b30a3b331eb8a019ac9a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-19.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-19.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = __riscv_vsetvl_e32m1(avl) << 5;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*5} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "fb8f14ec4f0ea10c20cc4f115e5c1123086db020", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-2.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  size_t avl;\n+  if (m > 100)\n+    avl = __riscv_vsetvl_e8mf8(vl << 10);\n+  else\n+    avl = __riscv_vsetvl_e8mf8(vl);\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d3f4a271ccfaa38abaf5ec6428059733cf83d83d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-20.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-20.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond, int avl) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvl_e32m1(avl);\n+  else\n+    vl = (__riscv_vsetvl_e32m1(avl) << 5) + 100;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*5} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {addi\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*100} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "98306cc5dfa8a4cc548cd8be87c42380453953ca", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-3.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  size_t avl;\n+  if (m > 100)\n+    avl = __riscv_vsetvl_e8mf8(vl << 10);\n+  else\n+    avl = __riscv_vsetvl_e8mf8(vl);\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    v0 = __riscv_vle8_v_i8mf8_tu(v0,base + i, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "548958cf764ab40ad1076d1f560bea2dcbadd6e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  size_t avl;\n+  if (m > 100)\n+    avl = __riscv_vsetvl_e8mf8(vl << 10);\n+  else\n+    avl = vl;\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    v0 = __riscv_vle8_v_i8mf8_tu(v0,base + i, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*10} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "35ffe7e410fb8c963620781a0ba30ee38ff2df18", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-5.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e32m1(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvl_e32m1(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvl_e32m1(vl));\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvl_e32m1(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "180ef07e5789a19d59f84c0b1d89ffaeb09b82fe", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e32m1(vl));\n+    __riscv_vse32_v_i32m1(out, a, __riscv_vsetvl_e32m1(vl));\n+  }\n+  \n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1 + 100, __riscv_vsetvl_e32m1(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2 + 100, __riscv_vsetvl_e32m1(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3 + 100, __riscv_vsetvl_e32m1(vl));\n+    __riscv_vse32_v_i32m1(out + 100, c, __riscv_vsetvl_e32m1(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "84d948b28dd6c9717c4c6bf0bfcf973c325f1292", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-7.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-7.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvl_e16mf2(vl));\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvl_e16mf2(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "6f4c792c645fe7caf9bc4e7f4092447f53e0c55d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-8.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e16mf2(vl));\n+    __riscv_vse32_v_i32m1(out, a, __riscv_vsetvl_e16mf2(vl));\n+  }\n+  \n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1 + 100, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2 + 100, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3 + 100, __riscv_vsetvl_e16mf2(vl));\n+    __riscv_vse32_v_i32m1(out + 100, c, __riscv_vsetvl_e16mf2(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 2 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "d07152ce7812cc5b12e344bc4d3792c36b93d42c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvl-9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvl-9.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(void *in1, void *in2, void *in3, void *out, size_t n, size_t vl) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvl_e16mf2(vl));\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvl_e16mf2(vl));\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvl_e16mf2(vl));\n+    \n+    vint8mf4_t a2 = __riscv_vle8_v_i8mf4(in1 + 100, __riscv_vsetvl_e32m1(vl));\n+    vint8mf4_t b2 = __riscv_vle8_v_i8mf4_tu(a2, in2 + 100, __riscv_vsetvl_e32m1(vl));\n+    vint8mf4_t c2 = __riscv_vle8_v_i8mf4_tu(b2, in3 + 100, __riscv_vsetvl_e32m1(vl));\n+    __riscv_vse8_v_i8mf4(out + 100, c2, __riscv_vsetvl_e32m1(vl));\n+  }\n+}\n+\n+/* { dg-final { scan-assembler {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "49e0a53f14aa63b5ba2a5fa90a66ce8bd9d7c6e1", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-1.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e32m1());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e32m1());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e32m1());\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e32m1());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle32\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5b5a31b0eb6036e344565229771bed2570b5ee39", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-10.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-10.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = 3;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "e880c2ccdc23b08a56a5eeb48f34708b4923fd8f", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-11.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-11.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = 55;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c141f8bede23323abad5ad2ed3b39defcb61f290", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-12.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-12.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond) {\n+    vl = __riscv_vsetvlmax_e32m1();\n+    vint16mf2_t v = *(vint16mf2_t*)(in1 + 1000);\n+    *(vint16mf2_t*)(out + 1000) = v;\n+  }\n+  else\n+    vl = 55;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1b92cb876cca76144d1dcd966d1c4305f5ab79f2", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-13.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-13.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond) {\n+    vl = __riscv_vsetvlmax_e32m1();\n+    vint8mf8_t v = *(vint8mf8_t*)(in1 + 1000);\n+    *(vint8mf8_t*)(out + 1000) = v;\n+  }\n+  else\n+    vl = 55;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "170172d17bdca521bed80fa95e50c634e2527fa6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-14.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-14.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m) {\n+  size_t avl = __riscv_vsetvlmax_e8mf8();\n+\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    v0 = __riscv_vle8_v_i8mf8_tu(v0, base + i + 100, avl);\n+    __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {\\.L[0-9]+\\:\\s+vle8\\.v\\s+v[0-9]+,\\s*0\\s*\\([a-x0-9]+\\)} 1 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "12151bc519b87af89f0c65b4353b2b4d7027ac21", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-15.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-15.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = __riscv_vsetvlmax_e16mf2() << 5;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 3 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*5} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "6cce6fe4282ef3f34d84e2aa5c7d65c215c1e26e", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-16.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e8mf8 ());\n+  vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e8mf4 ());\n+  vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e8m1 ());\n+  __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e8mf2 ());\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "d28d6f866c4cce0aa891f4a15673d276d4332718", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-17.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-17.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  for (int i = 0; i < n; i++){\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1 + i, __riscv_vsetvlmax_e8mf8 ());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2 + i, __riscv_vsetvlmax_e8mf4 ());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3 + i, __riscv_vsetvlmax_e8m1 ());\n+    __riscv_vse32_v_i32m1(out + i, c, __riscv_vsetvlmax_e8mf2 ());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 7 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "c1c18c3e13c320ee422ed06ae29c55678a763a53", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-18.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-18.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f(int8_t *base, int8_t *out, size_t vl, size_t m, size_t n) {\n+  vint8mf4_t v1 = *(vint8mf4_t*) (base + 100000);\n+  size_t avl = __riscv_vsetvlmax_e8mf8();\n+  for (size_t i = 0; i < m; i++) {\n+    vint8mf8_t v0 = __riscv_vle8_v_i8mf8(base + i, avl);\n+    if (n > 100) {\n+      __riscv_vse8_v_i8mf4(out + i + 100, v1, avl);\n+    } else {\n+      __riscv_vse8_v_i8mf8(out + i, v0, avl);\n+    }\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-Os\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1d77efb95399469c7e225fc25a0ad568836637fd", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-19.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-19.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = __riscv_vsetvlmax_e32m1() << 5;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {slli\\s+[a-x0-9]+,\\s*[a-x0-9]+,\\s*5} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "482a48314e29125b795d1956462f034378facb72", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-2.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e32m1());\n+    __riscv_vse32_v_i32m1(out, a, __riscv_vsetvlmax_e32m1());\n+  }\n+  \n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1 + 100, __riscv_vsetvlmax_e32m1());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2 + 100, __riscv_vsetvlmax_e32m1());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3 + 100, __riscv_vsetvlmax_e32m1());\n+    __riscv_vse32_v_i32m1(out + 100, c, __riscv_vsetvlmax_e32m1());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "1102d7ec8302b7f6421f5ee3c470e377a3bb49cc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-20.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-20.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  for (size_t i = 0; i < n; i += 1) {\n+    size_t vl = __riscv_vsetvlmax_e32m1();\n+    vint16mf2_t v = *(vint16mf2_t*)(in1 + 1000);\n+    *(vint16mf2_t*)(out + 1000) = v;\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-O1\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n\\ No newline at end of file"}, {"sha": "cc0135ffb8d4f5afd05d2d817eeab9aa04100b80", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-3.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e16mf2());\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e16mf2());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "3b9865e3bab9346354d645da07d53ee48e595ce0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-4.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e16mf2());\n+    __riscv_vse32_v_i32m1(out, a, __riscv_vsetvlmax_e16mf2());\n+  }\n+  \n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1 + 100, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2 + 100, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3 + 100, __riscv_vsetvlmax_e16mf2());\n+    __riscv_vse32_v_i32m1(out + 100, c, __riscv_vsetvlmax_e16mf2());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0a3a5a3d2d7e56072951bdd4d1c9f463e6a685b6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-5.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(void *in1, void *in2, void *in3, void *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e16mf2());\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e16mf2());\n+    \n+    vint8mf4_t a2 = __riscv_vle8_v_i8mf4(in1 + 100, __riscv_vsetvlmax_e32m1());\n+    vint8mf4_t b2 = __riscv_vle8_v_i8mf4_tu(a2, in2 + 100, __riscv_vsetvlmax_e32m1());\n+    vint8mf4_t c2 = __riscv_vle8_v_i8mf4_tu(b2, in3 + 100, __riscv_vsetvlmax_e32m1());\n+    __riscv_vse8_v_i8mf4(out + 100, c2, __riscv_vsetvlmax_e32m1());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "c32f15d8224c5f261a02566d84131acd57f12be9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-6.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-6.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(void *in1, void *in2, void *in3, void *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e16mf2());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e16mf2());\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e16mf2());\n+    \n+    vint8mf2_t a2 = __riscv_vle8_v_i8mf2(in1 + 100, __riscv_vsetvlmax_e8mf2());\n+    vint8mf2_t b2 = __riscv_vle8_v_i8mf2_tu(a2, in2 + 100, __riscv_vsetvlmax_e8mf2());\n+    vint8mf2_t c2 = __riscv_vle8_v_i8mf2_tu(b2, in3 + 100, __riscv_vsetvlmax_e8mf2());\n+    __riscv_vse8_v_i8mf2(out + 100, c2, __riscv_vsetvlmax_e8mf2());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "0ee04ee04c9360c667af7dd064cbe836e3b4577d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-7.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(void *in1, void *in2, void *in3, void *out, size_t n) {\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, __riscv_vsetvlmax_e16m1());\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, __riscv_vsetvlmax_e16m1());\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, __riscv_vsetvlmax_e16m1());\n+    __riscv_vse32_v_i32m1(out, c, __riscv_vsetvlmax_e16m1());\n+    \n+    vint8mf2_t a2 = __riscv_vle8_v_i8mf2(in1 + 100, __riscv_vsetvlmax_e8m1());\n+    vint8mf2_t b2 = __riscv_vle8_v_i8mf2_tu(a2, in2 + 100, __riscv_vsetvlmax_e8m1());\n+    vint8mf2_t c2 = __riscv_vle8_v_i8mf2_tu(b2, in3 + 100, __riscv_vsetvlmax_e8m1());\n+    __riscv_vse8_v_i8mf2(out + 100, c2, __riscv_vsetvlmax_e8m1());\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 4 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "a0335a346450c6d0adebc6996e9a489cbc810062", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-8.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = __riscv_vsetvlmax_e16mf2();\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}, {"sha": "5b5a31b0eb6036e344565229771bed2570b5ee39", "filename": "gcc/testsuite/gcc.target/riscv/rvv/vsetvl/vsetvlmax-9.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d324d56221d68bd965ac5fc2c3e0eba48076bf60/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fvsetvl%2Fvsetvlmax-9.c?ref=d324d56221d68bd965ac5fc2c3e0eba48076bf60", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void foo(int32_t *in1, int32_t *in2, int32_t *in3, int32_t *out, size_t n, int cond) {\n+  \n+  size_t vl;\n+  if (cond)\n+    vl = __riscv_vsetvlmax_e32m1();\n+  else\n+    vl = 3;\n+  for (size_t i = 0; i < n; i += 1) {\n+    vint32m1_t a = __riscv_vle32_v_i32m1(in1, vl);\n+    vint32m1_t b = __riscv_vle32_v_i32m1_tu(a, in2, vl);\n+    vint32m1_t c = __riscv_vle32_v_i32m1_tu(b, in3, vl);\n+    __riscv_vse32_v_i32m1(out, c, vl);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+[a-x0-9]+,\\s*zero,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]} 1 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */\n+/* { dg-final { scan-assembler-times {vsetvli} 2 { target { no-opts \"-O0\" no-opts \"-g\" no-opts \"-funroll-loops\" } } } } */"}]}