{"sha": "4e849a74a8512cb313831a5929501ac2a735b7e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGU4NDlhNzRhODUxMmNiMzEzODMxYTU5Mjk1MDFhYzJhNzM1YjdlMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-06T11:20:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-06T13:30:14Z"}, "message": "Prepare removal of SLP_INSTANCE_GROUP_SIZE\n\nThis removes trivial instances of SLP_INSTANCE_GROUP_SIZE and refrains\nfrom using a \"SLP instance\" which nowadays is just one of the possibly\nmany entries into the SLP graph.\n\n2020-05-06  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (vect_transform_slp_perm_load): Adjust.\n\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n\tRemove slp_instance parameter, just iterate over all scalar stmts.\n\t(vect_slp_analyze_instance_dependence): Adjust and likewise.\n\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Remove unused BB\n\tparameter.\n\t(vect_schedule_slp): Just iterate over all scalar stmts.\n\t(vect_supported_load_permutation_p): Adjust.\n\t(vect_transform_slp_perm_load): Remove slp_instance parameter,\n\tinstead use the number of lanes in the node as group size.\n\t* tree-vect-stmts.c (vect_model_load_cost): Get vectorization\n\tfactor instead of slp_instance as parameter.\n\t(vectorizable_load): Adjust.", "tree": {"sha": "305e6d48028c8d2c68c43c8c56c490694672822e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/305e6d48028c8d2c68c43c8c56c490694672822e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e849a74a8512cb313831a5929501ac2a735b7e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e849a74a8512cb313831a5929501ac2a735b7e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e849a74a8512cb313831a5929501ac2a735b7e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e849a74a8512cb313831a5929501ac2a735b7e1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f1fc0625cd3c0492c2e66a32ae75dbedc06731", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f1fc0625cd3c0492c2e66a32ae75dbedc06731", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f1fc0625cd3c0492c2e66a32ae75dbedc06731"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "9e5a434a231e27f65dda18812370edf6e4af4f2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e849a74a8512cb313831a5929501ac2a735b7e1", "patch": "@@ -1,3 +1,19 @@\n+2020-05-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vect_transform_slp_perm_load): Adjust.\n+\t* tree-vect-data-refs.c (vect_slp_analyze_node_dependences):\n+\tRemove slp_instance parameter, just iterate over all scalar stmts.\n+\t(vect_slp_analyze_instance_dependence): Adjust and likewise.\n+\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Remove unused BB\n+\tparameter.\n+\t(vect_schedule_slp): Just iterate over all scalar stmts.\n+\t(vect_supported_load_permutation_p): Adjust.\n+\t(vect_transform_slp_perm_load): Remove slp_instance parameter,\n+\tinstead use the number of lanes in the node as group size.\n+\t* tree-vect-stmts.c (vect_model_load_cost): Get vectorization\n+\tfactor instead of slp_instance as parameter.\n+\t(vectorizable_load): Adjust.\n+\n 2020-05-06  Andreas Schwab  <schwab@suse.de>\n \n \t* config/aarch64/driver-aarch64.c: Include \"aarch64-protos.h\"."}, {"sha": "d41ba49fabfe17a8abf573f139705ed364174b94", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=4e849a74a8512cb313831a5929501ac2a735b7e1", "patch": "@@ -695,16 +695,15 @@ vect_slp_analyze_data_ref_dependence (vec_info *vinfo,\n    disambiguating the loads.  */\n \n static bool\n-vect_slp_analyze_node_dependences (vec_info *vinfo,\n-\t\t\t\t   slp_instance instance, slp_tree node,\n+vect_slp_analyze_node_dependences (vec_info *vinfo, slp_tree node,\n \t\t\t\t   vec<stmt_vec_info> stores,\n \t\t\t\t   stmt_vec_info last_store_info)\n {\n   /* This walks over all stmts involved in the SLP load/store done\n      in NODE verifying we can sink them up to the last stmt in the\n      group.  */\n   stmt_vec_info last_access_info = vect_find_last_scalar_stmt_in_slp (node);\n-  for (unsigned k = 0; k < SLP_INSTANCE_GROUP_SIZE (instance); ++k)\n+  for (unsigned k = 0; k < SLP_TREE_SCALAR_STMTS (node).length (); ++k)\n     {\n       stmt_vec_info access_info = SLP_TREE_SCALAR_STMTS (node)[k];\n       if (access_info == last_access_info)\n@@ -794,13 +793,12 @@ vect_slp_analyze_instance_dependence (vec_info *vinfo, slp_instance instance)\n   stmt_vec_info last_store_info = NULL;\n   if (store)\n     {\n-      if (! vect_slp_analyze_node_dependences (vinfo, instance, store,\n-\t\t\t\t\t       vNULL, NULL))\n+      if (! vect_slp_analyze_node_dependences (vinfo, store, vNULL, NULL))\n \treturn false;\n \n       /* Mark stores in this instance and remember the last one.  */\n       last_store_info = vect_find_last_scalar_stmt_in_slp (store);\n-      for (unsigned k = 0; k < SLP_INSTANCE_GROUP_SIZE (instance); ++k)\n+      for (unsigned k = 0; k < SLP_TREE_SCALAR_STMTS (store).length (); ++k)\n \tgimple_set_visited (SLP_TREE_SCALAR_STMTS (store)[k]->stmt, true);\n     }\n \n@@ -811,7 +809,7 @@ vect_slp_analyze_instance_dependence (vec_info *vinfo, slp_instance instance)\n   slp_tree load;\n   unsigned int i;\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (instance), i, load)\n-    if (! vect_slp_analyze_node_dependences (vinfo, instance, load,\n+    if (! vect_slp_analyze_node_dependences (vinfo, load,\n \t\t\t\t\t     store\n \t\t\t\t\t     ? SLP_TREE_SCALAR_STMTS (store)\n \t\t\t\t\t     : vNULL, last_store_info))\n@@ -822,7 +820,7 @@ vect_slp_analyze_instance_dependence (vec_info *vinfo, slp_instance instance)\n \n   /* Unset the visited flag.  */\n   if (store)\n-    for (unsigned k = 0; k < SLP_INSTANCE_GROUP_SIZE (instance); ++k)\n+    for (unsigned k = 0; k < SLP_TREE_SCALAR_STMTS (store).length (); ++k)\n       gimple_set_visited (SLP_TREE_SCALAR_STMTS (store)[k]->stmt, false);\n \n   return res;"}, {"sha": "c097840b09ab73a09a8db89cd3d59a14fa1b4f7d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=4e849a74a8512cb313831a5929501ac2a735b7e1", "patch": "@@ -2018,7 +2018,7 @@ vect_supported_load_permutation_p (vec_info *vinfo, slp_instance slp_instn)\n \t      vec<tree> tem;\n \t      unsigned n_perms;\n \t      if (!vect_transform_slp_perm_load (vinfo, node, tem, NULL,\n-\t\t\t\t\t\t 1, slp_instn, true, &n_perms))\n+\t\t\t\t\t\t 1, true, &n_perms))\n \t\t{\n \t\t  if (dump_enabled_p ())\n \t\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION,\n@@ -2044,7 +2044,7 @@ vect_supported_load_permutation_p (vec_info *vinfo, slp_instance slp_instn)\n   FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n     if (node->load_permutation.exists ()\n \t&& !vect_transform_slp_perm_load (vinfo, node, vNULL, NULL, test_vf,\n-\t\t\t\t\t  slp_instn, true, &n_perms))\n+\t\t\t\t\t  true, &n_perms))\n       return false;\n \n   return true;\n@@ -2930,7 +2930,7 @@ vect_slp_analyze_operations (vec_info *vinfo)\n    update LIFE according to uses of NODE.  */\n \n static void \n-vect_bb_slp_scalar_cost (vec_info *vinfo, basic_block bb,\n+vect_bb_slp_scalar_cost (vec_info *vinfo,\n \t\t\t slp_tree node, vec<bool, va_heap> *life,\n \t\t\t stmt_vector_for_cost *cost_vec,\n \t\t\t hash_set<slp_tree> &visited)\n@@ -3002,7 +3002,7 @@ vect_bb_slp_scalar_cost (vec_info *vinfo, basic_block bb,\n \t  /* Do not directly pass LIFE to the recursive call, copy it to\n \t     confine changes in the callee to the current child/subtree.  */\n \t  subtree_life.safe_splice (*life);\n-\t  vect_bb_slp_scalar_cost (vinfo, bb, child, &subtree_life, cost_vec,\n+\t  vect_bb_slp_scalar_cost (vinfo, child, &subtree_life, cost_vec,\n \t\t\t\t   visited);\n \t  subtree_life.truncate (0);\n \t}\n@@ -3028,7 +3028,7 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n     {\n       auto_vec<bool, 20> life;\n       life.safe_grow_cleared (SLP_INSTANCE_GROUP_SIZE (instance));\n-      vect_bb_slp_scalar_cost (bb_vinfo, BB_VINFO_BB (bb_vinfo),\n+      vect_bb_slp_scalar_cost (bb_vinfo,\n \t\t\t       SLP_INSTANCE_TREE (instance),\n \t\t\t       &life, &scalar_costs, visited);\n     }\n@@ -3866,13 +3866,12 @@ bool\n vect_transform_slp_perm_load (vec_info *vinfo,\n \t\t\t      slp_tree node, vec<tree> dr_chain,\n \t\t\t      gimple_stmt_iterator *gsi, poly_uint64 vf,\n-\t\t\t      slp_instance slp_node_instance, bool analyze_only,\n-\t\t\t      unsigned *n_perms)\n+\t\t\t      bool analyze_only, unsigned *n_perms)\n {\n   stmt_vec_info stmt_info = SLP_TREE_SCALAR_STMTS (node)[0];\n   int vec_index = 0;\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  unsigned int group_size = SLP_INSTANCE_GROUP_SIZE (slp_node_instance);\n+  unsigned int group_size = SLP_TREE_SCALAR_STMTS (node).length ();\n   unsigned int mask_element;\n   machine_mode mode;\n \n@@ -4351,8 +4350,7 @@ vect_schedule_slp (vec_info *vinfo)\n       if (is_a <loop_vec_info> (vinfo))\n \tvect_remove_slp_scalar_calls (vinfo, root);\n \n-      for (j = 0; SLP_TREE_SCALAR_STMTS (root).iterate (j, &store_info)\n-                  && j < SLP_INSTANCE_GROUP_SIZE (instance); j++)\n+      for (j = 0; SLP_TREE_SCALAR_STMTS (root).iterate (j, &store_info); j++)\n         {\n \t  if (!STMT_VINFO_DATA_REF (store_info))\n \t    break;"}, {"sha": "38285871de63ca1db5b10fdf7b2e3e2d7f4e5da6", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=4e849a74a8512cb313831a5929501ac2a735b7e1", "patch": "@@ -1174,9 +1174,8 @@ vect_get_store_cost (vec_info *vinfo, stmt_vec_info stmt_info, int ncopies,\n \n static void\n vect_model_load_cost (vec_info *vinfo,\n-\t\t      stmt_vec_info stmt_info, unsigned ncopies,\n+\t\t      stmt_vec_info stmt_info, unsigned ncopies, poly_uint64 vf,\n \t\t      vect_memory_access_type memory_access_type,\n-\t\t      slp_instance instance,\n \t\t      slp_tree slp_node,\n \t\t      stmt_vector_for_cost *cost_vec)\n {\n@@ -1198,10 +1197,8 @@ vect_model_load_cost (vec_info *vinfo,\n       unsigned n_perms;\n       unsigned assumed_nunits\n \t= vect_nunits_for_cost (STMT_VINFO_VECTYPE (first_stmt_info));\n-      unsigned slp_vf = (ncopies * assumed_nunits) / instance->group_size; \n       vect_transform_slp_perm_load (vinfo, slp_node, vNULL, NULL,\n-\t\t\t\t    slp_vf, instance, true,\n-\t\t\t\t    &n_perms);\n+\t\t\t\t    vf, true, &n_perms);\n       inside_cost += record_stmt_cost (cost_vec, n_perms, vec_perm,\n \t\t\t\t       first_stmt_info, 0, vect_body);\n       /* And adjust the number of loads performed.  This handles\n@@ -8839,8 +8836,8 @@ vectorizable_load (vec_info *vinfo,\n \t\t\t\t  memory_access_type, &gs_info, mask);\n \n       STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n-      vect_model_load_cost (vinfo, stmt_info, ncopies, memory_access_type,\n-\t\t\t    slp_node_instance, slp_node, cost_vec);\n+      vect_model_load_cost (vinfo, stmt_info, ncopies, vf, memory_access_type,\n+\t\t\t    slp_node, cost_vec);\n       return true;\n     }\n \n@@ -9137,7 +9134,7 @@ vectorizable_load (vec_info *vinfo,\n \t{\n \t  unsigned n_perms;\n \t  vect_transform_slp_perm_load (vinfo, slp_node, dr_chain, gsi, vf,\n-\t\t\t\t\tslp_node_instance, false, &n_perms);\n+\t\t\t\t\tfalse, &n_perms);\n \t}\n       return true;\n     }\n@@ -9896,8 +9893,7 @@ vectorizable_load (vec_info *vinfo,\n         {\n \t  unsigned n_perms;\n           if (!vect_transform_slp_perm_load (vinfo, slp_node, dr_chain, gsi, vf,\n-                                             slp_node_instance, false,\n-\t\t\t\t\t     &n_perms))\n+\t\t\t\t\t     false, &n_perms))\n             {\n               dr_chain.release ();\n               return false;"}, {"sha": "da6d37ac199feef6e6b6df7be92dabc1fae4da9f", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e849a74a8512cb313831a5929501ac2a735b7e1/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=4e849a74a8512cb313831a5929501ac2a735b7e1", "patch": "@@ -1852,7 +1852,7 @@ extern tree cse_and_gimplify_to_preheader (loop_vec_info, tree);\n extern void vect_free_slp_instance (slp_instance, bool);\n extern bool vect_transform_slp_perm_load (vec_info *, slp_tree, vec<tree>,\n \t\t\t\t\t  gimple_stmt_iterator *, poly_uint64,\n-\t\t\t\t\t  slp_instance, bool, unsigned *);\n+\t\t\t\t\t  bool, unsigned *);\n extern bool vect_slp_analyze_operations (vec_info *);\n extern void vect_schedule_slp (vec_info *);\n extern opt_result vect_analyze_slp (vec_info *, unsigned);"}]}