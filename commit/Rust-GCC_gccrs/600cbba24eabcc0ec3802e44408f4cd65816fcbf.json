{"sha": "600cbba24eabcc0ec3802e44408f4cd65816fcbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjAwY2JiYTI0ZWFiY2MwZWMzODAyZTQ0NDA4ZjRjZDY1ODE2ZmNiZg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-21T12:49:26Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-21T12:49:26Z"}, "message": "In libobjc/: 2010-12-21 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc-private/module-abi-8.h (struct objc_symtab): Declare 'refs'\n\tto be 'struct objc_selector *' and not 'SEL'.\n\t* init.c (__objc_exec_class): Call\n\t__objc_register_selectors_from_module instead of iterating over\n\teach selector and calling __sel_register_typed_name for each.\n\t* objc-private/selector.h: Declare\n\t__objc_register_selectors_from_module instead of\n\t__sel_register_typed_name.\n\t* selector.c (__objc_register_selectors_from_module): New.\n\t(__sel_register_typed_name): Made static.\n\nFrom-SVN: r168113", "tree": {"sha": "da80c7ab199492b7389004929895a22823b5f659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da80c7ab199492b7389004929895a22823b5f659"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/600cbba24eabcc0ec3802e44408f4cd65816fcbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600cbba24eabcc0ec3802e44408f4cd65816fcbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600cbba24eabcc0ec3802e44408f4cd65816fcbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600cbba24eabcc0ec3802e44408f4cd65816fcbf/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bebf8772de79a91c76ad95274228f5e27a5ed140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebf8772de79a91c76ad95274228f5e27a5ed140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebf8772de79a91c76ad95274228f5e27a5ed140"}], "stats": {"total": 86, "additions": 61, "deletions": 25}, "files": [{"sha": "6935ac79213d99026a4142cefce39bca0834da07", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=600cbba24eabcc0ec3802e44408f4cd65816fcbf", "patch": "@@ -1,3 +1,16 @@\n+2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc-private/module-abi-8.h (struct objc_symtab): Declare 'refs'\n+\tto be 'struct objc_selector *' and not 'SEL'.\n+\t* init.c (__objc_exec_class): Call\n+\t__objc_register_selectors_from_module instead of iterating over\n+\teach selector and calling __sel_register_typed_name for each.\n+\t* objc-private/selector.h: Declare\n+\t__objc_register_selectors_from_module instead of\n+\t__sel_register_typed_name.\n+\t* selector.c (__objc_register_selectors_from_module): New.\n+\t(__sel_register_typed_name): Made static.\n+\t\n 2010-12-21  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* linking.m: Do not include objc/NXConstStr.h."}, {"sha": "0e0d372adad699c29fb42ec628aed2657e2dd148", "filename": "libobjc/init.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=600cbba24eabcc0ec3802e44408f4cd65816fcbf", "patch": "@@ -549,7 +549,7 @@ __objc_exec_class (struct objc_module *module)\n   struct objc_list **cell;\n \n   /* The table of selector references for this module.  */\n-  SEL selectors = symtab->refs; \n+  struct objc_selector *selectors = symtab->refs;\n \n   int i;\n \n@@ -585,22 +585,9 @@ __objc_exec_class (struct objc_module *module)\n   objc_mutex_lock (__objc_runtime_mutex);\n   __objc_module_list = list_cons (module, __objc_module_list);\n \n-  /* Replace referenced selectors from names to SEL's.  */\n+  /* Replace referenced selectors from names to SELs.  */\n   if (selectors)\n-    {\n-      for (i = 0; selectors[i].sel_id; ++i)\n-\t{\n-\t  const char *name, *type;\n-\t  name = (char *) selectors[i].sel_id;\n-\t  type = (char *) selectors[i].sel_types;\n-\t  /* Constructors are constant static data so we can safely\n-\t     store pointers to them in the runtime\n-\t     structures. is_const == YES.  */\n-\t  __sel_register_typed_name (name, type, \n-\t\t\t\t     (struct objc_selector *) &(selectors[i]),\n-\t\t\t\t     YES);\n-\t}\n-    }\n+    __objc_register_selectors_from_module (selectors);\n \n   /* Parse the classes in the load module and gather selector\n      information.  */"}, {"sha": "0c9574bb49911f59fd35f82ed780eed5305a8a0a", "filename": "libobjc/objc-private/module-abi-8.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fobjc-private%2Fmodule-abi-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fmodule-abi-8.h?ref=600cbba24eabcc0ec3802e44408f4cd65816fcbf", "patch": "@@ -48,10 +48,16 @@ struct objc_static_instances\n struct objc_symtab\n {\n   unsigned long sel_ref_cnt;  /* Unused (always set to 0). */\n-  SEL      refs;              /* The table of selectors referenced in\n+  struct objc_selector *refs; /* The table of selectors referenced in\n                                  this module.  This is terminated by a\n                                  selector with NULL sel_id and NULL\n-                                 sel_types.  */\n+                                 sel_types.  Note that we use the type\n+                                 'struct objc_selector *' and not\n+                                 'SEL' (which is 'const struct\n+                                 objc_selector *') because the sel_id\n+                                 of these selectors is patched up by\n+                                 the runtime when the module is\n+                                 loaded.  */\n   unsigned short cls_def_cnt; /* Number of classes compiled (defined)\n                                  in the module. */\n   unsigned short cat_def_cnt; /* Number of categories compiled"}, {"sha": "39fa6b6897a33428b604832366728982e356a49b", "filename": "libobjc/objc-private/selector.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fobjc-private%2Fselector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fobjc-private%2Fselector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fselector.h?ref=600cbba24eabcc0ec3802e44408f4cd65816fcbf", "patch": "@@ -43,6 +43,7 @@ void __objc_register_selectors_from_class(Class);\n void __objc_register_selectors_from_list (struct objc_method_list *);\n void __objc_register_selectors_from_description_list\n (struct objc_method_description_list *method_list);\n+void __objc_register_selectors_from_module (struct objc_selector *selectors);\n \n /* Return whether a selector is mapped or not (\"mapped\" meaning that\n    it has been inserted into the selector table).  This is private as\n@@ -57,10 +58,6 @@ BOOL sel_is_mapped (SEL aSel);\n SEL\n sel_get_any_uid (const char *name);\n \n-SEL\n-__sel_register_typed_name (const char *name, const char *types, \n-\t\t\t   struct objc_selector *orig, BOOL is_const);\n-\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "699e52ee966ea48fbb0a0237de0c068a8295bf4a", "filename": "libobjc/selector.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fselector.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/600cbba24eabcc0ec3802e44408f4cd65816fcbf/libobjc%2Fselector.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fselector.c?ref=600cbba24eabcc0ec3802e44408f4cd65816fcbf", "patch": "@@ -43,6 +43,11 @@ static cache_ptr      __objc_selector_hash  = 0; /* name -> uid !T:MUTEX */\n /* Number of selectors stored in each of the above tables.  */\n unsigned int __objc_selector_max_index = 0;     /* !T:MUTEX */\n \n+/* Forward-declare an internal function.  */\n+static SEL\n+__sel_register_typed_name (const char *name, const char *types,\n+\t\t\t   struct objc_selector *orig, BOOL is_const);\n+\n void __objc_init_selector_tables (void)\n {\n   __objc_selector_array = sarray_new (SELECTOR_HASH_SIZE, 0);\n@@ -53,6 +58,29 @@ void __objc_init_selector_tables (void)\n \t\t     (compare_func_type) objc_compare_strings);\n }  \n \n+/* Register a bunch of selectors from the table of selectors in a\n+   module.  'selectors' should not be NULL.  The list is terminated by\n+   a selectors with a NULL sel_id.  The selectors are assumed to\n+   contain the 'name' in the sel_id field; this is replaced with the\n+   final selector id after they are registered.  */\n+void\n+__objc_register_selectors_from_module (struct objc_selector *selectors)\n+{\n+  int i;\n+\n+  for (i = 0; selectors[i].sel_id; ++i)\n+    {\n+      const char *name, *type;\n+      name = (char *) selectors[i].sel_id;\n+      type = (char *) selectors[i].sel_types;\n+      /* Constructors are constant static data and we can safely store\n+\t pointers to them in the runtime structures, so we set\n+\t is_const == YES.  */\n+      __sel_register_typed_name (name, type, (struct objc_selector *) &(selectors[i]),\n+\t\t\t\t /* is_const */ YES);\n+    }\n+}\n+\n /* This routine is given a class and records all of the methods in its\n    class structure in the record table.  */\n void\n@@ -403,11 +431,16 @@ pool_alloc_selector(void)\n /* Store the passed selector name in the selector record and return\n    its selector value (value returned by sel_get_uid).  Assume that\n    the calling function has locked down __objc_runtime_mutex.  The\n-   is_const parameter tells us if the name and types parameters are\n+   'is_const' parameter tells us if the name and types parameters are\n    really constant or not.  If YES then they are constant and we can\n    just store the pointers.  If NO then we need to copy name and types\n-   because the pointers may disappear later on.  */\n-SEL\n+   because the pointers may disappear later on.  If the 'orig'\n+   parameter is not NULL, then we are registering a selector from a\n+   module, and 'orig' is that selector.  In this case, we can put the\n+   selector in the tables if needed, and orig->sel_id is updated with\n+   the selector ID of the registered selector, and 'orig' is\n+   returned.  */\n+static SEL\n __sel_register_typed_name (const char *name, const char *types, \n \t\t\t   struct objc_selector *orig, BOOL is_const)\n {"}]}