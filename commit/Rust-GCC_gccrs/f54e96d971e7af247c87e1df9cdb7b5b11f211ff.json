{"sha": "f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0ZTk2ZDk3MWU3YWYyNDdjODdlMWRmOWNkYjdiNWIxMWYyMTFmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-02T21:48:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-02T21:48:20Z"}, "message": "stl_bvector.h (hash<vector<bool, [...]): Move definition...\n\n2010-03-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_bvector.h (hash<vector<bool, _Alloc>>::\n\toperator()(const vector<bool, _Alloc>&)): Move definition...\n\t* include/bits/vector.tcc: ... here.\n\nFrom-SVN: r157178", "tree": {"sha": "43623e7ec37cce68b51fe6b3b00445dc881b132f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43623e7ec37cce68b51fe6b3b00445dc881b132f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54e96d971e7af247c87e1df9cdb7b5b11f211ff/comments", "author": null, "committer": null, "parents": [{"sha": "d903b2a134a3a58bb5e36dba31eaa5659302ec55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d903b2a134a3a58bb5e36dba31eaa5659302ec55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d903b2a134a3a58bb5e36dba31eaa5659302ec55"}], "stats": {"total": 82, "additions": 45, "deletions": 37}, "files": [{"sha": "db81761ca7ddf82c8e1d2c01a858d69581f49199", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54e96d971e7af247c87e1df9cdb7b5b11f211ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54e96d971e7af247c87e1df9cdb7b5b11f211ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "patch": "@@ -1044,42 +1044,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const;\n     };\n \n-  template<typename _Alloc>\n-    size_t\n-    hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>::\n-    operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const\n-    {\n-      size_t __hash = 0;\n-      using _GLIBCXX_STD_D::_S_word_bit;\n-      using _GLIBCXX_STD_D::_Bit_type;\n-\n-      const size_t __words = __b.size() / _S_word_bit;\n-      if (__words)\n-\t{\n-\t  const char* __data\n-\t    = reinterpret_cast<const char*>(__b._M_impl._M_start._M_p);\n-\t  const size_t __size = __words * sizeof(_Bit_type);\n-\t  __hash = std::_Fnv_hash::hash(__data, __size);\n-\t}\n-\n-      const size_t __extrabits = __b.size() % _S_word_bit;\n-      if (__extrabits)\n-\t{\n-\t  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;\n-\t  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);\n-\n-\t  const char* __data = reinterpret_cast<const char*>(&__hiword);\n-\t  const size_t __size\n-\t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n-\t  if (__words)\n-\t    __hash = std::_Fnv_hash::hash(__data, __size, __hash);\n-\t  else\n-\t    __hash = std::_Fnv_hash::hash(__data, __size);\n-\t}\n-\n-      return __hash;\n-    }\n-\n _GLIBCXX_END_NAMESPACE\n \n #endif // __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "984f83f3c9ebf0450e3f85a255baea2cbb374b05", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54e96d971e7af247c87e1df9cdb7b5b11f211ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54e96d971e7af247c87e1df9cdb7b5b11f211ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=f54e96d971e7af247c87e1df9cdb7b5b11f211ff", "patch": "@@ -1,6 +1,6 @@\n // Vector implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -678,4 +678,48 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \n _GLIBCXX_END_NESTED_NAMESPACE\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _Alloc>\n+    size_t\n+    hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>::\n+    operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const\n+    {\n+      size_t __hash = 0;\n+      using _GLIBCXX_STD_D::_S_word_bit;\n+      using _GLIBCXX_STD_D::_Bit_type;\n+\n+      const size_t __words = __b.size() / _S_word_bit;\n+      if (__words)\n+\t{\n+\t  const char* __data\n+\t    = reinterpret_cast<const char*>(__b._M_impl._M_start._M_p);\n+\t  const size_t __size = __words * sizeof(_Bit_type);\n+\t  __hash = std::_Fnv_hash::hash(__data, __size);\n+\t}\n+\n+      const size_t __extrabits = __b.size() % _S_word_bit;\n+      if (__extrabits)\n+\t{\n+\t  _Bit_type __hiword = *__b._M_impl._M_finish._M_p;\n+\t  __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);\n+\n+\t  const char* __data = reinterpret_cast<const char*>(&__hiword);\n+\t  const size_t __size\n+\t    = (__extrabits + __CHAR_BIT__ - 1) / __CHAR_BIT__;\n+\t  if (__words)\n+\t    __hash = std::_Fnv_hash::hash(__data, __size, __hash);\n+\t  else\n+\t    __hash = std::_Fnv_hash::hash(__data, __size);\n+\t}\n+\n+      return __hash;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n #endif /* _VECTOR_TCC */"}]}