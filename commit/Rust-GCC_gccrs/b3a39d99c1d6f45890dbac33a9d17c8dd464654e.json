{"sha": "b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhMzlkOTljMWQ2ZjQ1ODkwZGJhYzMzYTlkMTdjOGRkNDY0NjU0ZQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-13T13:25:20Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-01-13T13:25:20Z"}, "message": "Merge branch 'master' of https://github.com/redbrain/gccrs", "tree": {"sha": "8dd6eab91e751b6ead8d1066bff353f5a0a28810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dd6eab91e751b6ead8d1066bff353f5a0a28810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a39d99c1d6f45890dbac33a9d17c8dd464654e/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc94b7de4614100b63e17a50692a23feab1c139f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc94b7de4614100b63e17a50692a23feab1c139f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc94b7de4614100b63e17a50692a23feab1c139f"}, {"sha": "05b9f235566d7d361709c5bc44e7c36598515946", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05b9f235566d7d361709c5bc44e7c36598515946", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05b9f235566d7d361709c5bc44e7c36598515946"}], "stats": {"total": 58, "additions": 36, "deletions": 22}, "files": [{"sha": "0c7670dbfe11e4ffbb60a1d30bb1cf7440b3f890", "filename": "README.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a39d99c1d6f45890dbac33a9d17c8dd464654e/README.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a39d99c1d6f45890dbac33a9d17c8dd464654e/README.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/README.md?ref=b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "patch": "@@ -1,22 +1,22 @@\n-![C/C++ CI](https://github.com/philberty/gccrs/workflows/C/C++%20CI/badge.svg)\n+![C/C++ CI](https://github.com/Rust-GCC/gccrs/workflows/C/C++%20CI/badge.svg)\n ![Docker Build](https://img.shields.io/docker/cloud/build/philberty/gccrs)\n ![Docker Pulls](https://img.shields.io/docker/pulls/philberty/gccrs)\n [![project chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://gcc-rust.zulipchat.com/)\n # GCC Rust\n ![GCC Rust](logo.png?raw=true \"GCC rust Logo\")\n \n-This is a full alternative implementaion of the Rust language ontop of GCC which the goal\n+gccrs is a full alternative implementation of the Rust language ontop of GCC with the goal\n to become fully upstream with the GNU toolchain.\n \n The origin of this project was a community effort several years ago where Rust was still at version 0.9;\n the language was subject to so much change that it became difficult for a community effort to play catch up.\n-Now that the language is in a stable state, it is a good time to create alternative compilers. The developers of\n+Now that the language is stable, it is an excellent time to create alternative compilers. The developers of\n the project are keen \u201cRustaceans\u201d with a desire to give back to the Rust community and to learn what GCC is capable\n of when it comes to a modern language.\n \n-## Development Enviroment\n+## Development Environment\n \n-Fetch dependancies for ubuntu:\n+Fetch dependencies for Ubuntu:\n \n ```bash\n $ apt install build-essential libgmp3-dev libmpfr-dev libmpc-dev flex bison autogen gcc-multilib dejagnu\n@@ -28,8 +28,8 @@ Clone the repository\n $ git clone git@github.com:Rust-GCC/gccrs.git\n ```\n \n-Compilation script. It is important to remember that GNU toolchain projects are designed to be built outside of its source directory\n-this is why a build directory is created.\n+Compilation script. It is important to remember that GNU toolchain projects are designed to be built outside of their source directory\n+which is why a build directory is created.\n \n ```bash\n $ mkdir gccrs-build\n@@ -40,47 +40,47 @@ $ make\n \n Running the compiler itself without make install we can simply invoke the compiler proper:\n \n-```\n+```bash\n $ gdb --args ./gcc/rust1 test.rs -frust-dump-parse -Warray-bounds -dumpbase test.rs -mtune=generic -march=x86-64 -O0 -version -fdump-tree-gimple -o test.s -L/lib/x86_64-linux-gnu -L/lib/../lib64 -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib64\n ```\n \n To invoking the compiler driver (gccrs) we need to:\n \n-```\n+```bash\n $ make install\n ```\n \n Then invoke the compiler as expected:\n \n-```\n+```bash\n $ gccrs -g -O2 -c test.rs -o test.o\n $ gccrs -o test test.o\n ```\n \n ## Testsuite\n \n-The test suite can be invoked via:\n+Invoke the test suite via:\n \n-```\n+```bash\n $ make check-rust\n ```\n \n-Test cases can be found within gcc/testsuite/rust.test please feel free to contribute your specific\n-test cases referencing any issues on github.\n+Test cases are located within [gcc/testsuite/rust.test](gcc/testsuite/rust.test) please feel free to contribute your specific\n+test cases referencing any issues on Github.\n \n ## Docker image\n \n There is a docker image hosted over on: \n \n https://hub.docker.com/repository/docker/philberty/gccrs\n \n-```\n+```bash\n $ docker pull philberty/gccrs\n ```\n \n Or you can build your own image:\n \n-```\n+```bash\n $ docker build . -t gccrs-dev\n $ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n     gccrs-dev:latest gccrs -g -O2 -c \\\n@@ -89,14 +89,14 @@ $ docker run --rm -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp \\\n \n ## Contributing\n \n-Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones and this means we require\n-contribtions to have copyright assignment in place. Please see: https://gcc.gnu.org/contribute.html\n+Please be aware this project is designed to be pushed upstream to GCC when we reach some milestones, and this means we require\n+contributions to have copyright assignment in place. Please see https://gcc.gnu.org/contribute.html.\n \n-Not all contributions must be code, we would love to see new test cases or bugs and issues to be reported. Feel free to add any comments on open PRs\n+Not all contributions must be code; we would love to see new test cases or bugs and issues to be reported. Feel free to add any comments on open PRs\n \n ## Community\n \n-We can be found on all usual Rust channels such as Zulip but we also have our own channels:\n+We can be found on all usual Rust channels such as Zulip, but we also have our own channels:\n \n  * GCC Rust Zulip: https://gcc-rust.zulipchat.com/\n  * Twitter: https://twitter.com/gcc_rust"}, {"sha": "c5fe9a2b50c49e1660859e38a7396ce6221c5eb5", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a39d99c1d6f45890dbac33a9d17c8dd464654e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a39d99c1d6f45890dbac33a9d17c8dd464654e/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=b3a39d99c1d6f45890dbac33a9d17c8dd464654e", "patch": "@@ -138,10 +138,24 @@ class CompileItem : public HIRCompileBase\n     // convert to the actual function type\n     auto compiled_fn_type = TyTyCompile::compile (ctx->get_backend (), fnType);\n \n+    unsigned int flags = 0;\n+    bool is_main_fn = function.function_name.compare (\"main\") == 0;\n+\n+    // if its the main fn or pub visibility mark its as DECL_PUBLIC\n+    // please see https://github.com/Rust-GCC/gccrs/pull/137\n+    if (is_main_fn || function.has_visibility ())\n+      flags |= Backend::function_is_visible;\n+\n+    std::string asm_name = function.function_name;\n+    if (!is_main_fn)\n+      {\n+\t// FIXME need name mangling\n+\tasm_name = \"__\" + function.function_name;\n+      }\n+\n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, function.function_name,\n-\t\t\t\t       \"\" /* asm_name */, 0 /* flags */,\n-\t\t\t\t       function.get_locus ());\n+\t\t\t\t       asm_name, flags, function.get_locus ());\n     ctx->insert_function_decl (function.get_mappings ().get_hirid (), fndecl);\n \n     // setup the params"}]}