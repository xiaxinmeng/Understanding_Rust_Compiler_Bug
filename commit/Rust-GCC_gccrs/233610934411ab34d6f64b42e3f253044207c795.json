{"sha": "233610934411ab34d6f64b42e3f253044207c795", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMzNjEwOTM0NDExYWIzNGQ2ZjY0YjQyZTNmMjUzMDQ0MjA3Yzc5NQ==", "commit": {"author": {"name": "Matt Thomas", "email": "matt@3am-software.com", "date": "2002-06-21T23:58:47Z"}, "committer": {"name": "Jason Thorpe", "email": "thorpej@gcc.gnu.org", "date": "2002-06-21T23:58:47Z"}, "message": "vax.c (vax_output_function_prologue): Use REGISTER_PREFIX.\n\n2002-06-21  Matt Thomas  <matt@3am-software.com>\n\n* config/vax/vax.c (vax_output_function_prologue): Use\nREGISTER_PREFIX.  Fix some indentation.\n* config/vax/vax.h (FUNCTION_PROFILER): Use reg_names[].\n(VAX_ISTREAM_SYNC): Define.\n(INITIALIZE_TRAMPOLINE): Use VAX_ISTREAM_SYNC.  Move the\ni-stream sync to the end.\n(REGISTER_PREFIX): Define as \"\".\n(ASM_OUTPUT_MI_THUNK): Use REGISTER_PREFIX.\n\nFrom-SVN: r54894", "tree": {"sha": "fa1c095ae471f90fb6ed60af98722481efaca9f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa1c095ae471f90fb6ed60af98722481efaca9f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/233610934411ab34d6f64b42e3f253044207c795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233610934411ab34d6f64b42e3f253044207c795", "html_url": "https://github.com/Rust-GCC/gccrs/commit/233610934411ab34d6f64b42e3f253044207c795", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/233610934411ab34d6f64b42e3f253044207c795/comments", "author": null, "committer": null, "parents": [{"sha": "1c655a0dcccd7347b447c74e86a2d4fb5375c199", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c655a0dcccd7347b447c74e86a2d4fb5375c199", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c655a0dcccd7347b447c74e86a2d4fb5375c199"}], "stats": {"total": 54, "additions": 36, "deletions": 18}, "files": [{"sha": "3d92e27698ce02d9e0573f35cdf31db2af406dd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233610934411ab34d6f64b42e3f253044207c795/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233610934411ab34d6f64b42e3f253044207c795/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=233610934411ab34d6f64b42e3f253044207c795", "patch": "@@ -1,3 +1,14 @@\n+2002-06-21  Matt Thomas  <matt@3am-software.com>\n+\n+\t* config/vax/vax.c (vax_output_function_prologue): Use\n+\tREGISTER_PREFIX.  Fix some indentation. \n+\t* config/vax/vax.h (FUNCTION_PROFILER): Use reg_names[].\n+\t(VAX_ISTREAM_SYNC): Define.\n+\t(INITIALIZE_TRAMPOLINE): Use VAX_ISTREAM_SYNC.  Move the\n+\ti-stream sync to the end. \n+\t(REGISTER_PREFIX): Define as \"\".  \n+\t(ASM_OUTPUT_MI_THUNK): Use REGISTER_PREFIX.\n+\n 2002-06-21  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* config.gcc (ns32k-*-netbsd*): Remove from list of obsolete"}, {"sha": "2114281f13b21132357432dae0e8c1d995c5328e", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233610934411ab34d6f64b42e3f253044207c795/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233610934411ab34d6f64b42e3f253044207c795/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=233610934411ab34d6f64b42e3f253044207c795", "patch": "@@ -120,14 +120,16 @@ vax_output_function_prologue (file, size)\n \t}\n \n       if (is_main)\n-\tfprintf (file, \"\\t%s\\n\\t%s\\n\", \"clrl -(sp)\", \"jsb _C$MAIN_ARGS\");\n+\tfprintf (file, \"\\tclrl -(%ssp)\\n\\tjsb _C$MAIN_ARGS\\n\",\n+\t         REGISTER_PREFIX);\n     }\n \n-    size -= STARTING_FRAME_OFFSET;\n-    if (size >= 64)\n-      fprintf (file, \"\\tmovab %d(sp),sp\\n\", -size);\n-    else if (size)\n-      fprintf (file, \"\\tsubl2 $%d,sp\\n\", size);\n+  size -= STARTING_FRAME_OFFSET;\n+  if (size >= 64)\n+    fprintf (file, \"\\tmovab %d(%ssp),%ssp\\n\", -size, REGISTER_PREFIX,\n+\t     REGISTER_PREFIX);\n+  else if (size)\n+    fprintf (file, \"\\tsubl2 $%d,%ssp\\n\", size, REGISTER_PREFIX);\n }\n \n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */"}, {"sha": "1d6bdd29cc59d1e9ae75dd14d7ee726ca51462e9", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/233610934411ab34d6f64b42e3f253044207c795/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/233610934411ab34d6f64b42e3f253044207c795/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=233610934411ab34d6f64b42e3f253044207c795", "patch": "@@ -456,7 +456,8 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    for profiling a function entry.  */\n \n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n-   fprintf (FILE, \"\\tmovab LP%d,r0\\n\\tjsb mcount\\n\", (LABELNO));\n+   fprintf (FILE, \"\\tmovab LP%d,%s\\n\\tjsb mcount\\n\", (LABELNO), \\\n+\t    reg_names[0]);\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n@@ -501,17 +502,19 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    FNADDR is an RTX for the address of the function's pure code.\n    CXT is an RTX for the static chain value for the function.  */\n \n+/* Allow this be overriden with the correct register prefixes.  */\n+#define VAX_ISTREAM_SYNC \"movpsl -(sp)\\n\\tpushal 1(pc)\\n\\trei\"\n+\n /* We copy the register-mask from the function's pure code\n    to the start of the trampoline.  */\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  emit_insn (gen_rtx_ASM_INPUT (VOIDmode,\t\t\t\t\\\n-\t\t\t\t\"movpsl -(sp)\\n\\tpushal 1(pc)\\n\\trei\")); \\\n   emit_move_insn (gen_rtx_MEM (HImode, TRAMP),\t\t\t\t\\\n \t\t  gen_rtx_MEM (HImode, FNADDR));\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 4)), CXT);\\\n+  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 4)), CXT);\t\\\n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 11)),\t\\\n \t\t  plus_constant (FNADDR, 2));\t\t\t\t\\\n+  emit_insn (gen_rtx_ASM_INPUT (VOIDmode, VAX_ISTREAM_SYNC));\t\t\\\n }\n \n /* Byte offset of return address in a stack frame.  The \"saved PC\" field\n@@ -1015,8 +1018,10 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n /* How to refer to registers in assembler output.\n-   This sequence is indexed by compiler's hard-register-number (see above).  */\n+   This sequence is indexed by compiler's hard-register-number (see above).\n+   The register names will be prefixed by REGISTER_PREFIX, if any.  */\n \n+#define REGISTER_PREFIX \"\"\n #define REGISTER_NAMES \\\n {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \\\n  \"r9\", \"r10\", \"r11\", \"ap\", \"fp\", \"sp\", \"pc\"}\n@@ -1143,13 +1148,13 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \taddl2\t$DELTA, 4(ap)\t#adjust first argument\n \tjmp\tFUNCTION+2\t#jump beyond FUNCTION's entry mask\n  */\n-#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION) \\\n-do {\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.word 0x0ffc\\n\");\t\t\\\n-  fprintf (FILE, \"\\taddl2 $%d,4(ap)\\n\", DELTA);\t\\\n-  fprintf (FILE, \"\\tjmp \");\t\t\t\\\n-  assemble_name (FILE,  XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0)); \\\n-  fprintf (FILE, \"+2\\n\");\t\t\t\\\n+#define ASM_OUTPUT_MI_THUNK(FILE, THUNK_FNDECL, DELTA, FUNCTION)\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  fprintf (FILE, \"\\t.word 0x0ffc\\n\");\t\t\t\t\t\\\n+  fprintf (FILE, \"\\taddl2 $%d,4(%sap)\\n\", DELTA, REGISTER_PREFIX);\t\\\n+  fprintf (FILE, \"\\tjmp \");\t\t\t\t\t\t\\\n+  assemble_name (FILE,  XSTR (XEXP (DECL_RTL (FUNCTION), 0), 0));\t\\\n+  fprintf (FILE, \"+2\\n\");\t\t\t\t\t\t\\\n } while (0)\n \n /* Print an instruction operand X on file FILE."}]}