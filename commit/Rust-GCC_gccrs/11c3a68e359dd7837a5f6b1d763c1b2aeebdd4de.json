{"sha": "11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFjM2E2OGUzNTlkZDc4MzdhNWY2YjFkNzYzYzFiMmFlZWJkZDRkZQ==", "commit": {"author": {"name": "Bruce Korb", "email": "bkorb@gnu.org", "date": "2015-01-28T20:21:34Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2015-01-28T20:21:34Z"}, "message": "checksums and test-text\n\n* fixincl.tpl: add a check sum acceptance test\n* fixlib.h: enumerate it\n* fixincl.c: handle it\n* README: document it and document the handling of test_text\n\nFrom-SVN: r220215", "tree": {"sha": "045391ebc71da413dfec8d0297a183b2e2608bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/045391ebc71da413dfec8d0297a183b2e2608bea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/comments", "author": {"login": "brkorb", "id": 1242936, "node_id": "MDQ6VXNlcjEyNDI5MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1242936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brkorb", "html_url": "https://github.com/brkorb", "followers_url": "https://api.github.com/users/brkorb/followers", "following_url": "https://api.github.com/users/brkorb/following{/other_user}", "gists_url": "https://api.github.com/users/brkorb/gists{/gist_id}", "starred_url": "https://api.github.com/users/brkorb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brkorb/subscriptions", "organizations_url": "https://api.github.com/users/brkorb/orgs", "repos_url": "https://api.github.com/users/brkorb/repos", "events_url": "https://api.github.com/users/brkorb/events{/privacy}", "received_events_url": "https://api.github.com/users/brkorb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "040968a88a1e9a8e4dd5f760e3fb4cabe5a63979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/040968a88a1e9a8e4dd5f760e3fb4cabe5a63979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/040968a88a1e9a8e4dd5f760e3fb4cabe5a63979"}], "stats": {"total": 311, "additions": 208, "deletions": 103}, "files": [{"sha": "afed2f8fd2289383031f367254c554f79284f9a6", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -1,3 +1,18 @@\n+2015-01-24  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* README: add some clarification on use of test_text\n+\n+2014-12-21  Bruce Korb  <bkorb@gnu.org>\n+\n+\t* fixincludes/fixincl.tpl: add handling for \"sum\" selection\n+\tcriteria and clean up layout\n+\t* fixincludes/fixlib.h: enumerate TT_CKSUM test type\n+\t* fixincludes/fixincl.c (fix_applies): add code to handle\n+\tthe new test type\n+\t(cksum_test): function to handle it\n+\t* fixincludes/README: doc it and remove explanations from\n+\tmore than a decade ago.\n+\n 2014-12-15  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* server.c (server_setup): Check return value of"}, {"sha": "98480165d10afeb1e14cbd55ee9cb10799dd03df", "filename": "fixincludes/README", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FREADME?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -1,24 +1,4 @@\n \n-FIXINCLUDES OPERATION\n-=====================\n-\n-See also:  http://autogen.SourceForge.net/fixinc.html\n-\n-The set of fixes required was distilled down to just the data required\n-to specify what needed to happen for each fix.  Those data were edited\n-into a file named fixincludes/inclhack.def.  A program called AutoGen\n-(http://autogen.SourceForge.net) uses these definitions to instantiate\n-several different templates that then produces code for a fixinclude\n-program (fixincl.x) and a shell script to test its functioning.  On\n-certain platforms (viz. those that do not have functional bidirectional\n-pipes), the fixincl program is split into two.  This should only concern\n-you on DOS and BeOS.\n-\n-Regards,\n-\tBruce <bkorb@gnu.org>\n-\n-\n-\n GCC MAINTAINER INFORMATION\n ==========================\n \n@@ -48,6 +28,15 @@ To make your fix, you will need to do several things:\n     There is no real possibility that these fixes will fail.\n     If they do, you will surely know straight away.\n \n+    NOTE:  \"test_text\" is interpreted by the shell as it gets\n+    copied into the test header.  THEREFORE you must quote\n+    dollar sign characters and back quotes -- unless you mean\n+    for them to be interpreted by the shell.\n+\n+    e.g. the math_huge_val_from_dbl_max test_text needs to\n+    put text into both float.h and math.h, so it includes a\n+    back-quoted script to add text to float.h.\n+\n 5.  Go into the fixincludes build directory and type, \"make check\".\n     You are guaranteed to have issues printed out as a result.\n     Look at the diffs produced.  Make sure you have not clobbered\n@@ -82,7 +71,7 @@ MAKING CHANGES TO INCLHACK.DEF\n 3.  It is relatively expensive to fire off a process to fix a source\n     file, therefore write apply tests to avoid unnecessary fix\n     processes.  The preferred apply tests are \"select\", \"bypass\", \"mach\"\n-    and \"c-test\" because they are performed internally:\n+    \"sum\", and \"c-test\" because they are performed internally:\n \n     * select - Run a regex on the contents of the file being considered.\n                All such regex-es must match.  Matching is done with\n@@ -91,6 +80,19 @@ MAKING CHANGES TO INCLHACK.DEF\n     * bypass - Run a regex on the contents of the file being considered.\n                No such regex may match.\n \n+    * sum    - Select a specific version of a file that has a matching\n+               check sum.  The BSD version of checksum [\"sum(1BSD)\"]\n+               is used.  Each \"sum\" entry should contain exactly three\n+               space separated tokens:  the sum, some number and the\n+               basename of the file.  The \"some number\" is ignored.\n+               If there are multiple \"sum\" entries, only one needs to\n+               match in order to pass.  For example:\n+\n+                   sum = '1234 3 foobar.h';\n+\n+               specifies that the \"foobar.h\" header in any directory\n+               will match if it has the checksum 1234.\n+\n     * c_test - call a function in fixtests.c.  See that file.\n \n     * files  - the \"fnmatch\" pattern of the file(s) to examine for"}, {"sha": "16e77eec2678f2f3a105bd8978f0b559cb58381f", "filename": "fixincludes/fixincl.c", "status": "modified", "additions": 113, "deletions": 46, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.c?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -597,6 +597,63 @@ egrep_test (char* pz_data, tTestDesc* p_test)\n   return SKIP_FIX;\n }\n \n+/* * * * * * * * * * * * *\n+\n+  cksum_test   check the sum of the candidate file\n+  Input:  the original file contents and the file name\n+  Result: APPLY_FIX if the check sum matches, SKIP_FIX otherwise\n+\n+  The caller may choose to reverse meaning if the sense of the test\n+  is inverted.  */\n+\n+static int\n+cksum_test (char * pz_data, tTestDesc * p_test, char * fname)\n+{\n+  unsigned int cksum;\n+\n+  /*\n+   * Testing is off in normal operation mode.\n+   * So, in testing mode, APPLY_FIX is always returned.\n+   */\n+  if (fixinc_mode != TESTING_OFF)\n+    return APPLY_FIX;\n+\n+  {\n+    char * fnm = strrchr(fname, '/');\n+    if (fnm != NULL)\n+      fname = fnm + 1;\n+    \n+    errno = 0;\n+    cksum = (unsigned int)strtoul(p_test->pz_test_text, &fnm, 10);\n+    if (errno != 0)\n+      return SKIP_FIX;\n+\n+    if (! ISSPACE(*fnm++))\n+      return SKIP_FIX;\n+    while (ISSPACE(*fnm)) fnm++;\n+\n+    if (! ISDIGIT(*fnm++))\n+      return SKIP_FIX;\n+    while (ISDIGIT(*fnm)) fnm++;\n+\n+    if (! ISSPACE(*fnm++))\n+      return SKIP_FIX;\n+    while (ISSPACE(*fnm)) fnm++;\n+\n+    if (strcmp(fnm, fname) != 0)\n+      return SKIP_FIX;\n+  }\n+\n+  {\n+    unsigned int sum = 0;\n+    while (*pz_data != NUL) {\n+      sum = (sum >> 1) + ((sum & 1) << 15) + (unsigned)(*pz_data++);\n+      sum &= 0xFFFF;\n+    }\n+\n+    return (sum == cksum) ? APPLY_FIX : SKIP_FIX;\n+  }\n+}\n \n /* * * * * * * * * * * * *\n \n@@ -794,7 +851,7 @@ fix_with_system (tFixDesc* p_fixd,\n   if (p_fixd->fd_flags & FD_SUBROUTINE)\n     {\n       static const char z_applyfix_prog[] =\n-\t\"/../fixincludes/applyfix\" EXE_EXT;\n+        \"/../fixincludes/applyfix\" EXE_EXT;\n \n       struct stat buf;\n       argsize = 32\n@@ -812,20 +869,20 @@ fix_with_system (tFixDesc* p_fixd,\n       strcpy (pz_scan, z_applyfix_prog);\n \n       /* IF we can't find the \"applyfix\" executable file at the first guess,\n-\t try one level higher up  */\n+         try one level higher up  */\n       if (stat (pz_cmd, &buf) == -1)\n-\t{\n-\t  strcpy (pz_scan, \"/..\");\n-\t  strcpy (pz_scan+3, z_applyfix_prog);\n-\t}\n+        {\n+          strcpy (pz_scan, \"/..\");\n+          strcpy (pz_scan+3, z_applyfix_prog);\n+        }\n \n       pz_scan += strlen (pz_scan);\n \n       /*\n        *  Now add the fix number and file names that may be needed\n        */\n       sprintf (pz_scan, \" %ld '%s' '%s' '%s'\", (long) (p_fixd - fixDescList),\n-\t       pz_fix_file, pz_file_source, pz_temp_file);\n+               pz_fix_file, pz_file_source, pz_temp_file);\n     }\n   else /* NOT an \"internal\" fix: */\n     {\n@@ -899,25 +956,25 @@ fix_with_system (tFixDesc* p_fixd,\n       for (;;)\n         {\n           tCC*   pArg = *(ppArgs++);\n-\t  char*  pz_scan_save;\n+          char*  pz_scan_save;\n           if (pArg == NULL)\n             break;\n           *(pz_scan++) = ' ';\n           pz_scan = make_raw_shell_str( pz_scan_save = pz_scan, pArg,\n-\t\t\t\t\tparg_size - (pz_scan - pz_cmd) );\n-\t  /*\n-\t   *  Make sure we don't overflow the buffer due to sloppy\n-\t   *  size estimation.\n-\t   */\n-\t  while (pz_scan == (char*)NULL)\n-\t    {\n-\t      size_t already_filled = pz_scan_save - pz_cmd;\n-\t      pz_cmd = xrealloc (pz_cmd, argsize += 100);\n-\t      pz_scan_save = pz_scan = pz_cmd + already_filled;\n-\t      parg_size += 100;\n-\t      pz_scan = make_raw_shell_str( pz_scan, pArg,\n-\t\t\t\t\t    parg_size - (pz_scan - pz_cmd) );\n-\t    }\n+                                        parg_size - (pz_scan - pz_cmd) );\n+          /*\n+           *  Make sure we don't overflow the buffer due to sloppy\n+           *  size estimation.\n+           */\n+          while (pz_scan == (char*)NULL)\n+            {\n+              size_t already_filled = pz_scan_save - pz_cmd;\n+              pz_cmd = xrealloc (pz_cmd, argsize += 100);\n+              pz_scan_save = pz_scan = pz_cmd + already_filled;\n+              parg_size += 100;\n+              pz_scan = make_raw_shell_str( pz_scan, pArg,\n+                                            parg_size - (pz_scan - pz_cmd) );\n+            }\n         }\n \n       /*\n@@ -960,7 +1017,7 @@ start_fixer (int read_fd, tFixDesc* p_fixd, char* pz_fix_file)\n     {\n       tSCC z_cmd_fmt[] = \"file='%s'\\n%s\";\n       pz_cmd = XNEWVEC (char, strlen (p_fixd->patch_args[2])\n-\t\t\t+ sizeof (z_cmd_fmt) + strlen (pz_fix_file));\n+                        + sizeof (z_cmd_fmt) + strlen (pz_fix_file));\n       sprintf (pz_cmd, z_cmd_fmt, pz_fix_file, p_fixd->patch_args[2]);\n       pz_cmd_save = p_fixd->patch_args[2];\n       p_fixd->patch_args[2] = pz_cmd;\n@@ -1007,7 +1064,15 @@ start_fixer (int read_fd, tFixDesc* p_fixd, char* pz_fix_file)\n   return read_fd;\n }\n #endif\n-\n+#ifdef DEBUG\n+# define NOTE_SKIP(_ttyp)  do {                                         \\\n+            if (VLEVEL( VERB_EVERYTHING ))                              \\\n+              fprintf (stderr, z_failed, _ttyp, p_fixd->fix_name,       \\\n+                       pz_fname, p_fixd->test_ct - test_ct);            \\\n+          } while (0)\n+#else\n+# define NOTE_SKIP(_ttyp)\n+#endif\n \n /* * * * * * * * * * * * *\n  *\n@@ -1022,6 +1087,8 @@ fix_applies (tFixDesc* p_fixd)\n   const char *pz_scan = p_fixd->file_list;\n   int test_ct;\n   tTestDesc *p_test;\n+  t_bool saw_sum_test   = BOOL_FALSE;\n+  t_bool one_sum_passed = BOOL_FALSE;\n \n #ifdef SEPARATE_FIX_PROC\n   /*\n@@ -1055,6 +1122,7 @@ fix_applies (tFixDesc* p_fixd)\n     }\n \n   /*  FOR each test, see if it fails.\n+      \"sum\" fails only if all \"sum\" tests fail.\n       IF it does fail, then we go on to the next test */\n \n   for (p_test = p_fixd->p_test_desc, test_ct = p_fixd->test_ct;\n@@ -1065,52 +1133,51 @@ fix_applies (tFixDesc* p_fixd)\n         {\n         case TT_TEST:\n           if (test_test (p_test, pz_curr_file) != APPLY_FIX) {\n-#ifdef DEBUG\n-            if (VLEVEL( VERB_EVERYTHING ))\n-              fprintf (stderr, z_failed, \"TEST\", p_fixd->fix_name,\n-                       pz_fname, p_fixd->test_ct - test_ct);\n-#endif\n+            NOTE_SKIP(\"TEST\");\n             return BOOL_FALSE;\n           }\n           break;\n \n         case TT_EGREP:\n           if (egrep_test (pz_curr_data, p_test) != APPLY_FIX) {\n-#ifdef DEBUG\n-            if (VLEVEL( VERB_EVERYTHING ))\n-              fprintf (stderr, z_failed, \"EGREP\", p_fixd->fix_name,\n-                       pz_fname, p_fixd->test_ct - test_ct);\n-#endif\n+            NOTE_SKIP(\"EGREP\");\n             return BOOL_FALSE;\n           }\n           break;\n \n         case TT_NEGREP:\n           if (egrep_test (pz_curr_data, p_test) == APPLY_FIX) {\n-#ifdef DEBUG\n-            if (VLEVEL( VERB_EVERYTHING ))\n-              fprintf (stderr, z_failed, \"NEGREP\", p_fixd->fix_name,\n-                       pz_fname, p_fixd->test_ct - test_ct);\n-#endif\n+            NOTE_SKIP(\"NEGREP\");\n             /*  Negated sense  */\n             return BOOL_FALSE;\n           }\n           break;\n \n+        case TT_CKSUM:\n+\t  if (one_sum_passed)\n+\t    break; // no need to check any more.\n+\n+          saw_sum_test = BOOL_TRUE;\n+          if (cksum_test (pz_curr_data, p_test, pz_curr_file) != APPLY_FIX) {\n+            NOTE_SKIP(\"CKSUM\");\n+          } else {\n+            one_sum_passed = BOOL_TRUE;\n+          }\n+          break;\n+\n         case TT_FUNCTION:\n           if (run_test (p_test->pz_test_text, pz_curr_file, pz_curr_data)\n               != APPLY_FIX) {\n-#ifdef DEBUG\n-            if (VLEVEL( VERB_EVERYTHING ))\n-              fprintf (stderr, z_failed, \"FTEST\", p_fixd->fix_name,\n-                       pz_fname, p_fixd->test_ct - test_ct);\n-#endif\n+            NOTE_SKIP(\"FTEST\");\n             return BOOL_FALSE;\n           }\n           break;\n         }\n     }\n \n+  if (saw_sum_test)\n+    return one_sum_passed;\n+\n   return BOOL_TRUE;\n }\n \n@@ -1185,7 +1252,7 @@ test_for_changes (int read_fd)\n           /*  IF there are matched data, write the matched part now. */\n           if ((char*)pz_cmp != pz_curr_data)\n             fwrite (pz_curr_data, (size_t)((char*)pz_cmp - pz_curr_data),\n-\t\t\t\t\t1, out_fp);\n+                    1, out_fp);\n \n           /*  Emit the current unmatching character */\n           putc (ch, out_fp);\n@@ -1248,7 +1315,7 @@ process (void)\n #endif\n   if (VLEVEL( VERB_PROGRESS ) && have_tty)\n     fprintf (stderr, \"%6lu %-50s   \\r\",\n-\t     (unsigned long) data_map_size, pz_curr_file);\n+             (unsigned long) data_map_size, pz_curr_file);\n \n # ifndef SEPARATE_FIX_PROC\n   process_chain_head = NOPROCESS;"}, {"sha": "5096a8246f39047dd60bf78c10640cb21043a6a8", "filename": "fixincludes/fixincl.tpl", "status": "modified", "additions": 52, "deletions": 31, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.tpl?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -1,6 +1,9 @@\n [= AutoGen5 Template -*- Mode: C -*-\n x=fixincl.x =]\n-[= (dne \" * \" \"/* \")=]\n+[=\n+ (if (version-compare >= autogen-version \"5.18\")\n+     (dne \"-D\" \" * \" \"/* \")\n+     (dne \" * \" \"/* \") ) =]\n  */\n /* DO NOT SVN-MERGE THIS FILE, EITHER [=\n    (define re-ct 0) (define max-mach 0) (define ct 0)\n@@ -63,32 +66,32 @@ tSCC z[=(. Hack)=]Name[] =\n  *  File name selection pattern\n  */[=\n \n-  IF (exist? \"files\")=]\n+  IF (exist? \"files\")   =]\n tSCC z[=(. Hack)=]List[] =\n   \"[=  (join \"\\\\0\" (stack \"files\")) =]\\0\";[=\n \n-  ELSE =]\n+  ELSE                  =]\n #define z[=(. Hack)=]List (char*)NULL[=\n   ENDIF (exist? \"files\") =]\n /*\n  *  Machine/OS name selection pattern\n  */[=\n \n-  IF (exist? \"mach\")=]\n+  IF (exist? \"mach\")    =]\n tSCC* apz[=(. Hack)=]Machs[] = {[=\n     (set! ct 0) =][=\n \n-    FOR mach =]\n+    FOR mach            =]\n         [=\n       (set! tmp (get \"mach\"))\n       (set! ct (+ ct (string-length tmp) 5))\n       (kr-string tmp)=],[=\n-    ENDFOR=]\n+    ENDFOR              =]\n         (const char*)NULL };[=\n \n     (if (> ct max-mach) (set! max-mach ct)) =][=\n \n-  ELSE =]\n+  ELSE                  =]\n #define apz[=(. Hack)=]Machs (const char**)NULL[=\n   ENDIF (exist? \"mach\") =][=\n \n@@ -97,43 +100,57 @@ tSCC* apz[=(. Hack)=]Machs[] = {[=\n /*\n  *  content selection pattern - do fix if pattern found\n  */[=\n-    FOR select =]\n+    FOR select          =]\n tSCC z[=(. Hack)=]Select[=(for-index)=][] =\n        [=(kr-string (get \"select\"))=];[=\n-    ENDFOR select =][=\n-  ENDIF =][=\n+    ENDFOR select       =][=\n+  ENDIF                 =][=\n \n-  IF (exist? \"bypass\")=]\n+  IF (exist? \"bypass\")  =]\n \n /*\n  *  content bypass pattern - skip fix if pattern found\n  */[=\n-    FOR bypass =]\n+    FOR bypass          =]\n tSCC z[=(. Hack)=]Bypass[=(for-index)=][] =\n        [=(kr-string (get \"bypass\"))=];[=\n-    ENDFOR bypass =][=\n-  ENDIF =][=\n+    ENDFOR bypass       =][=\n+  ENDIF                 =][=\n+\n+  IF (exist? \"sum\")=][=\n+     (if (not (exist? \"files\"))\n+         (error \"specifying a 'sum' requires specifying 'files'\"))\n+     =]\n \n-  IF (exist? \"test\")=]\n+/*\n+ *  file selection - do fix if checksum matches\n+ */[=\n+    FOR sum             =]\n+tSCC z[=(. Hack)=]Sum[=(for-index)=][] =\n+       [=(kr-string (get \"sum\"))=];[=\n+    ENDFOR sum          =][=\n+  ENDIF                 =][=\n+\n+  IF (exist? \"test\")    =]\n \n /*\n  *  perform the 'test' shell command - do fix on success\n  */[=\n-    FOR test =]\n+    FOR test            =]\n tSCC z[=(. Hack)=]Test[=(for-index)=][] =\n        [=(kr-string (get \"test\"))=];[=\n-    ENDFOR  =][=\n-  ENDIF     =][=\n+    ENDFOR              =][=\n+  ENDIF                 =][=\n \n-  IF (exist? \"c_test\")=]\n+  IF (exist? \"c_test\")  =]\n \n /*\n  *  perform the C function call test\n  */[=\n-    FOR c_test =]\n+    FOR c_test          =]\n tSCC z[=(. Hack)=]FTst[=(for-index)=][] = \"[=c_test=]\";[=\n-    ENDFOR c_test =][=\n-  ENDIF =][=\n+    ENDFOR c_test       =][=\n+  ENDIF                 =][=\n \n   IF (set! ct (+ (count \"select\") (count \"bypass\") \n               (count \"test\") (count \"c_test\")))\n@@ -145,24 +162,28 @@ tSCC z[=(. Hack)=]FTst[=(for-index)=][] = \"[=c_test=]\";[=\n   ELSE =]\n \n #define    [=(. HACK)=]_TEST_CT  [=(. ct)=][=\n-\t(set! re-ct (+ re-ct (count \"select\") (count \"bypass\"))) =]\n+        (set! re-ct (+ re-ct (count \"select\") (count \"bypass\"))) =]\n static tTestDesc a[=(. Hack)=]Tests[] = {[=\n \n-    FOR test =]\n+    FOR test            =]\n   { TT_TEST,     z[=(. Hack)=]Test[=(for-index)=],   0 /* unused */ },[=\n-    ENDFOR test =][=\n+    ENDFOR test         =][=\n \n-    FOR c_test =]\n+    FOR c_test          =]\n   { TT_FUNCTION, z[=(. Hack)=]FTst[=(for-index)=],   0 /* unused */ },[=\n-    ENDFOR c_test =][=\n+    ENDFOR c_test       =][=\n \n-    FOR bypass =]\n+    FOR bypass          =]\n   { TT_NEGREP,   z[=(. Hack)=]Bypass[=(for-index)=], (regex_t*)NULL },[=\n-    ENDFOR bypass =][=\n+    ENDFOR bypass       =][=\n \n-    FOR select =]\n+    FOR select          =]\n   { TT_EGREP,    z[=(. Hack)=]Select[=(for-index)=], (regex_t*)NULL },[=\n-    ENDFOR select =] };[=\n+    ENDFOR select       =][=\n+\n+    FOR sum             =]\n+  { TT_CKSUM,    z[=(. Hack)=]Sum[=(for-index)=], 0 /* unused */ },[=\n+    ENDFOR sum          =] };[=\n   ENDIF =]\n \n /*"}, {"sha": "ea868369e98c236c6b272afc66a0d048f2402d36", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -1,12 +1,12 @@\n /*  -*- buffer-read-only: t -*- vi: set ro:\n- * \n+ *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n- * \n- * It has been AutoGen-ed  October 21, 2014 at 10:18:16 AM by AutoGen 5.16.2\n+ *\n+ * It has been AutoGen-ed  December 20, 2014 at 03:22:33 PM by AutoGen 5.18.5pre6\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Oct 21 10:18:17 CEST 2014\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Dec 20 15:22:33 PST 2014\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *"}, {"sha": "03277454c22ed385639c17778674835083abeeca", "filename": "fixincludes/fixlib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de/fixincludes%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixlib.h?ref=11c3a68e359dd7837a5f6b1d763c1b2aeebdd4de", "patch": "@@ -161,7 +161,7 @@ ENV_TABLE\n     */\n typedef enum\n {\n-  TT_TEST, TT_EGREP, TT_NEGREP, TT_FUNCTION\n+  TT_TEST, TT_EGREP, TT_NEGREP, TT_FUNCTION, TT_CKSUM\n } te_test_type;\n \n typedef struct test_desc tTestDesc;"}]}