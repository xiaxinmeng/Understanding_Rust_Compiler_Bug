{"sha": "1d6228454c4bca003c6ecedad67866515503b910", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2MjI4NDU0YzRiY2EwMDNjNmVjZWRhZDY3ODY2NTE1NTAzYjkxMA==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-03T14:46:00Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-04T13:56:50Z"}, "message": "aarch64: Use RTL builtins for [su]mull_high_n intrinsics\n\nRewrite [su]mull_high_n Neon intrinsics to use RTL builtins rather\nthan inline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-02-03  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mull_hi_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md\n\t(aarch64_<su>mull_hi_n<mode>_insn): Define.\n\t(aarch64_<su>mull_hi_n<mode>): Define.\n\t* config/aarch64/arm_neon.h (vmull_high_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmull_high_n_s32): Likewise.\n\t(vmull_high_n_u16): Likewise.\n\t(vmull_high_n_u32): Likewise.", "tree": {"sha": "b7e41f4de1dd3085a3f6a129f9e785544eb9a68c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7e41f4de1dd3085a3f6a129f9e785544eb9a68c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d6228454c4bca003c6ecedad67866515503b910", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6228454c4bca003c6ecedad67866515503b910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6228454c4bca003c6ecedad67866515503b910", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6228454c4bca003c6ecedad67866515503b910/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7002a33d1ba81e4577d965fb9daaee146b31faa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7002a33d1ba81e4577d965fb9daaee146b31faa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7002a33d1ba81e4577d965fb9daaee146b31faa8"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "4dac8e0d79bdf887e37e89f09c0beeeebbfd45aa", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1d6228454c4bca003c6ecedad67866515503b910", "patch": "@@ -300,6 +300,9 @@\n   BUILTIN_VD_HSI (BINOP, smull_n, 0, NONE)\n   BUILTIN_VD_HSI (BINOPU, umull_n, 0, NONE)\n \n+  BUILTIN_VQ_HSI (BINOP, smull_hi_n, 0, NONE)\n+  BUILTIN_VQ_HSI (BINOPU, umull_hi_n, 0, NONE)\n+\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_lane_, 0, NONE)\n   BUILTIN_VD_HSI (QUADOP_LANE, vec_smlal_lane_, 0, NONE)\n   BUILTIN_VD_HSI (TERNOP_LANE, vec_smult_laneq_, 0, NONE)"}, {"sha": "1d1ba379c28c052f53fc6c45573f3319ee5784f0", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=1d6228454c4bca003c6ecedad67866515503b910", "patch": "@@ -2266,6 +2266,33 @@\n   [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n )\n \n+(define_insn \"aarch64_<su>mull_hi_n<mode>_insn\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+\t(mult:<VWIDE>\n+\t  (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>\n+\t    (match_operand:VQ_HSI 1 \"register_operand\" \"w\")\n+\t    (match_operand:VQ_HSI 3 \"vect_par_cnst_hi_half\" \"\")))\n+\t  (ANY_EXTEND:<VWIDE>\n+\t    (vec_duplicate:<VCOND>\n+\t      (match_operand:<VEL> 2 \"register_operand\" \"<h_con>\")))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mull2\\\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mul_<Vetype>_scalar_long\")]\n+)\n+\n+(define_expand \"aarch64_<su>mull_hi_n<mode>\"\n+  [(match_operand:<VWIDE> 0 \"register_operand\")\n+   (ANY_EXTEND:<VWIDE> (match_operand:VQ_HSI 1 \"register_operand\"))\n+   (match_operand:<VEL> 2 \"register_operand\")]\n+ \"TARGET_SIMD\"\n+ {\n+   rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, <nunits>, true);\n+   emit_insn (gen_aarch64_<su>mull_hi_n<mode>_insn (operands[0], operands[1],\n+\t\t\t\t\t\t    operands[2], p));\n+   DONE;\n+ }\n+)\n+\n ;; vmlal_lane_s16 intrinsics\n (define_insn \"aarch64_vec_<su>mlal_lane<Qlane>\"\n   [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")"}, {"sha": "fffd7b7bd2f7a3781f22cb6702b341d4318b1036", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d6228454c4bca003c6ecedad67866515503b910/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1d6228454c4bca003c6ecedad67866515503b910", "patch": "@@ -8275,48 +8275,28 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_n_s16 (int16x8_t __a, int16_t __b)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smull2 %0.4s,%1.8h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smull_hi_nv8hi (__a, __b);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_n_s32 (int32x4_t __a, int32_t __b)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smull2 %0.2d,%1.4s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smull_hi_nv4si (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_n_u16 (uint16x8_t __a, uint16_t __b)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umull2 %0.4s,%1.8h,%2.h[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"x\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umull_hi_nv8hi_uuu (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmull_high_n_u32 (uint32x4_t __a, uint32_t __b)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umull2 %0.2d,%1.4s,%2.s[0]\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a), \"w\"(__b)\n-           : /* No clobbers */);\n-  return __result;\n+ return __builtin_aarch64_umull_hi_nv4si_uuu (__a, __b);\n }\n \n __extension__ extern __inline poly16x8_t"}]}