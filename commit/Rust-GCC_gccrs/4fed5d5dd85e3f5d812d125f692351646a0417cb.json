{"sha": "4fed5d5dd85e3f5d812d125f692351646a0417cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlZDVkNWRkODVlM2Y1ZDgxMmQxMjVmNjkyMzUxNjQ2YTA0MTdjYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-09T22:08:45Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-06-10T13:36:02Z"}, "message": "c++: Fix ICE with delayed parsing of noexcept-specifier [PR95562]\n\nHere we ICE because a DEFERRED_PARSE expression leaked to tsubst_copy.\nWe create these expressions for deferred noexcept-specifiers in\ncp_parser_save_noexcept; they are supposed to be re-parsed in\ncp_parser_late_noexcept_specifier.  In this case we never got around\nto re-parsing it because the noexcept-specifier was attached to a\npointer to a function, not to a function declaration.  But we should\nnot have delayed the parsing here in the first place; we already\navoid delaying the parsing for alias-decls, typedefs, and friend\nfunction declarations.  (Clang++ also doesn't delay the parsing\nfor pointers to function.)\n\ngcc/cp/ChangeLog:\n\n\tPR c++/95562\n\t* parser.c (cp_parser_direct_declarator): Clear\n\tCP_PARSER_FLAGS_DELAY_NOEXCEPT if the declarator kind is not\n\tcdk_id.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/95562\n\t* g++.dg/cpp0x/noexcept60.C: New test.", "tree": {"sha": "e63cab13fc0b63a916193c7171b407ccdd66de2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e63cab13fc0b63a916193c7171b407ccdd66de2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fed5d5dd85e3f5d812d125f692351646a0417cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fed5d5dd85e3f5d812d125f692351646a0417cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fed5d5dd85e3f5d812d125f692351646a0417cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fed5d5dd85e3f5d812d125f692351646a0417cb/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db262f29a4b1495885b1f23335b6dc363bf1143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db262f29a4b1495885b1f23335b6dc363bf1143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db262f29a4b1495885b1f23335b6dc363bf1143"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "bc66e6e5c50815e5259ee4f23894bf67a63a240d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fed5d5dd85e3f5d812d125f692351646a0417cb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fed5d5dd85e3f5d812d125f692351646a0417cb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4fed5d5dd85e3f5d812d125f692351646a0417cb", "patch": "@@ -21283,6 +21283,11 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t    /* DR 1207: 'this' is in scope after the cv-quals.  */\n \t\t    inject_this_parameter (current_class_type, cv_quals);\n \n+\t\t  /* If it turned out that this is e.g. a pointer to a\n+\t\t     function, we don't want to delay noexcept parsing.  */\n+\t\t  if (declarator == NULL || declarator->kind != cdk_id)\n+\t\t    flags &= ~CP_PARSER_FLAGS_DELAY_NOEXCEPT;\n+\n \t\t  /* Parse the exception-specification.  */\n \t\t  exception_specification\n \t\t    = cp_parser_exception_specification_opt (parser,"}, {"sha": "d8efe1a24cb49c840b09498787cf42e4fab7579d", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept60.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fed5d5dd85e3f5d812d125f692351646a0417cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept60.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fed5d5dd85e3f5d812d125f692351646a0417cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept60.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept60.C?ref=4fed5d5dd85e3f5d812d125f692351646a0417cb", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/95562\n+// { dg-do compile { target c++11 } }\n+\n+template <bool Nothrow>\n+struct Functions\n+{\n+  void (*func)(void*) noexcept(Nothrow);\n+};\n+\n+void test()\n+{\n+  Functions<true> f{};\n+}"}]}