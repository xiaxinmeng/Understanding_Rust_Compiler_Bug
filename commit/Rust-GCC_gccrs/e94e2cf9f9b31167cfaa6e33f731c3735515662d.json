{"sha": "e94e2cf9f9b31167cfaa6e33f731c3735515662d", "node_id": "C_kwDOANBUbNoAKGU5NGUyY2Y5ZjliMzExNjdjZmFhNmUzM2Y3MzFjMzczNTUxNTY2MmQ", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-07T13:40:24Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2021-11-16T18:07:50Z"}, "message": "fortran: Delete redundant missing_arg_type field\n\nNow that we can get information about an actual arg's associated\ndummy using the associated_dummy attribute, the field missing_arg_type\ncontains redundant information.\nThis removes it.\n\ngcc/fortran/ChangeLog:\n\t* gfortran.h (gfc_actual_arglist::missing_arg_type): Remove.\n\t* interface.c (gfc_compare_actual_formal): Remove\n\tmissing_arg_type initialization.\n\t* intrinsic.c (sort_actual): Ditto.\n\t* trans-expr.c (gfc_conv_procedure_call): Use associated_dummy\n\tand gfc_dummy_arg_get_typespec to get the dummy argument type.", "tree": {"sha": "7cd1ff08df23f7d6ea72defae5e62f80c9b2d934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cd1ff08df23f7d6ea72defae5e62f80c9b2d934"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e94e2cf9f9b31167cfaa6e33f731c3735515662d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94e2cf9f9b31167cfaa6e33f731c3735515662d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e94e2cf9f9b31167cfaa6e33f731c3735515662d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e94e2cf9f9b31167cfaa6e33f731c3735515662d/comments", "author": null, "committer": null, "parents": [{"sha": "5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9d16db96f2fcb47a00a7ce7e2d0e51400b47ab"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "bf6177058272b1adb86f817538942b0e9957b3fa", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=e94e2cf9f9b31167cfaa6e33f731c3735515662d", "patch": "@@ -1210,11 +1210,6 @@ typedef struct gfc_actual_arglist\n   /* Alternate return label when the expr member is null.  */\n   struct gfc_st_label *label;\n \n-  /* This is set to the type of an eventual omitted optional\n-     argument. This is used to determine if a hidden string length\n-     argument has to be added to a function call.  */\n-  bt missing_arg_type;\n-\n   gfc_param_spec_type spec_type;\n \n   struct gfc_expr *expr;"}, {"sha": "12574f8f037158cdb835b8045e8ff3aa5b7c7313", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=e94e2cf9f9b31167cfaa6e33f731c3735515662d", "patch": "@@ -3715,11 +3715,6 @@ gfc_compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n   if (*ap == NULL && n > 0)\n     *ap = new_arg[0];\n \n-  /* Note the types of omitted optional arguments.  */\n-  for (a = *ap, f = formal; a; a = a->next, f = f->next)\n-    if (a->expr == NULL && a->label == NULL)\n-      a->missing_arg_type = f->sym->ts.type;\n-\n   return true;\n }\n "}, {"sha": "3682f9ae21f2a462d62b7500a775ac0c07f1fb8d", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=e94e2cf9f9b31167cfaa6e33f731c3735515662d", "patch": "@@ -4406,10 +4406,7 @@ sort_actual (const char *name, gfc_actual_arglist **ap,\n \t}\n \n       if (a == NULL)\n-\t{\n-\t  a = gfc_get_actual_arglist ();\n-\t  a->missing_arg_type = f->ts.type;\n-\t}\n+\ta = gfc_get_actual_arglist ();\n \n       a->associated_dummy = get_intrinsic_dummy_arg (f);\n "}, {"sha": "bc502c0f43c668b50ab535dd161586b369a337e4", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e94e2cf9f9b31167cfaa6e33f731c3735515662d/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=e94e2cf9f9b31167cfaa6e33f731c3735515662d", "patch": "@@ -6157,7 +6157,10 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t{\n \t\t  /* Pass a NULL pointer for an absent arg.  */\n \t\t  parmse.expr = null_pointer_node;\n-\t\t  if (arg->missing_arg_type == BT_CHARACTER)\n+\t\t  gfc_dummy_arg * const dummy_arg = arg->associated_dummy;\n+\t\t  if (dummy_arg\n+\t\t      && gfc_dummy_arg_get_typespec (*dummy_arg).type\n+\t\t\t == BT_CHARACTER)\n \t\t    parmse.string_length = build_int_cst (gfc_charlen_type_node,\n \t\t\t\t\t\t\t  0);\n \t\t}\n@@ -6174,7 +6177,9 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t  || !CLASS_DATA (fsym)->attr.allocatable));\n \t  gfc_init_se (&parmse, NULL);\n \t  parmse.expr = null_pointer_node;\n-\t  if (arg->missing_arg_type == BT_CHARACTER)\n+\t  if (arg->associated_dummy\n+\t      && gfc_dummy_arg_get_typespec (*arg->associated_dummy).type\n+\t\t == BT_CHARACTER)\n \t    parmse.string_length = build_int_cst (gfc_charlen_type_node, 0);\n \t}\n       else if (fsym && fsym->ts.type == BT_CLASS"}]}