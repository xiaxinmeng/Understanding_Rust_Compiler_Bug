{"sha": "65471f09e9f0b192927ca980c2676044209adbba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjU0NzFmMDllOWYwYjE5MjkyN2NhOTgwYzI2NzYwNDQyMDlhZGJiYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-11-08T21:48:47Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-11-08T21:48:47Z"}, "message": "PR c++/92215 - flawed diagnostic for bit-field with non-integral type.\n\nI noticed that for code like\n\n  struct S {\n    int *foo : 3;\n  };\n\nwe generate nonsensical\n\n  r.C:2:8: error: function definition does not declare parameters\n      2 |   int *foo : 3;\n\nIt talks about a function because after parsing the declspecs of 'foo' we don't\nsee either ':' or \"name :\", so we think it's not a bit-field decl.  So we parse\nthe declarator and since a ctor-initializer begins with a ':', we try to parse\nit as a function body, generating the awful diagnostic.  With this patch, we\nissue:\n\n  r.C:2:8: error: bit-field \u2018foo\u2019 has non-integral type \u2018int*\u2019\n      2 |   int *foo : 3;\n\n\t* parser.c (cp_parser_member_declaration): Add a diagnostic for\n\tbit-fields with non-integral types.\n\n\t* g++.dg/diagnostic/bitfld4.C: New test.\n\nFrom-SVN: r277991", "tree": {"sha": "6d694656d3c7fcabd191af27068af367ce3d3dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d694656d3c7fcabd191af27068af367ce3d3dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65471f09e9f0b192927ca980c2676044209adbba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65471f09e9f0b192927ca980c2676044209adbba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65471f09e9f0b192927ca980c2676044209adbba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65471f09e9f0b192927ca980c2676044209adbba/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a2dbbda892ac9e26fd7ebf6167363c58e5ed726b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2dbbda892ac9e26fd7ebf6167363c58e5ed726b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2dbbda892ac9e26fd7ebf6167363c58e5ed726b"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "170ce30e7a5c7bbeedd4afdaa29a7f20030a2bd2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=65471f09e9f0b192927ca980c2676044209adbba", "patch": "@@ -1,3 +1,9 @@\n+2019-11-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92215 - flawed diagnostic for bit-field with non-integral type.\n+\t* parser.c (cp_parser_member_declaration): Add a diagnostic for\n+\tbit-fields with non-integral types.\n+\n 2019-11-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* init.c (build_vec_delete_1): Fix a comment typo - mist -> must."}, {"sha": "1c95d7e9a5aff1085a1654206eb0e5d51ddd7fe2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=65471f09e9f0b192927ca980c2676044209adbba", "patch": "@@ -25037,6 +25037,31 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  else\n \t\t    initializer = cp_parser_initializer (parser, &x, &x);\n \t\t}\n+\t      /* Detect invalid bit-field cases such as\n+\n+\t\t   int *p : 4;\n+\t\t   int &&r : 3;\n+\n+\t\t and similar.  */\n+\t      else if (cp_lexer_next_token_is (parser->lexer, CPP_COLON)\n+\t\t       /* If there were no type specifiers, it was a\n+\t\t\t  constructor.  */\n+\t\t       && decl_specifiers.any_type_specifiers_p)\n+\t\t{\n+\t\t  /* This is called for a decent diagnostic only.  */\n+\t\t  tree d = grokdeclarator (declarator, &decl_specifiers,\n+\t\t\t\t\t   BITFIELD, /*initialized=*/false,\n+\t\t\t\t\t   &attributes);\n+\t\t  error_at (DECL_SOURCE_LOCATION (d),\n+\t\t\t    \"bit-field %qD has non-integral type %qT\",\n+\t\t\t    d, TREE_TYPE (d));\n+\t\t  cp_parser_skip_to_end_of_statement (parser);\n+\t\t  /* Avoid \"extra ;\" pedwarns.  */\n+\t\t  if (cp_lexer_next_token_is (parser->lexer,\n+\t\t\t\t\t      CPP_SEMICOLON))\n+\t\t    cp_lexer_consume_token (parser->lexer);\n+\t\t  goto out;\n+\t\t}\n \t      /* Otherwise, there is no initializer.  */\n \t      else\n \t\tinitializer = NULL_TREE;"}, {"sha": "83145ae68055de64b369d8166a3aac91a973bea3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65471f09e9f0b192927ca980c2676044209adbba", "patch": "@@ -1,3 +1,8 @@\n+2019-11-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/92215 - flawed diagnostic for bit-field with non-integral type.\n+\t* g++.dg/diagnostic/bitfld4.C: New test.\n+\n 2019-11-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92058 - constinit malfunction in static data member."}, {"sha": "d6aa9a5513ccb8b242d3d509c2a25a66ef2739d9", "filename": "gcc/testsuite/g++.dg/diagnostic/bitfld4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65471f09e9f0b192927ca980c2676044209adbba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fbitfld4.C?ref=65471f09e9f0b192927ca980c2676044209adbba", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/92215 - flawed diagnostic for bit-field with non-integral type.\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  int *f1 : 3; // { dg-error \"bit-field .f1. has non-integral type .int\\\\*.\" }\n+  int &f2 : 3; // { dg-error \"bit-field .f2. has non-integral type .int&.\" }\n+  int &&f3 : 3; // { dg-error \"bit-field .f3. has non-integral type .int&&.\" }\n+  int f4[1] : 3; // { dg-error \"bit-field .f4. has non-integral type .int \\\\\\[1\\\\\\].\" }\n+  int *f5 __attribute__((deprecated)) : 3; // { dg-error \"bit-field .f5. has non-integral type .int\\\\*.\" }\n+  int f6[1] __attribute__((deprecated)) : 3; // { dg-error \"bit-field .f6. has non-integral type .int \\\\\\[1\\\\\\].\" }\n+  int &f7 __attribute__((deprecated)): 3; // { dg-error \"bit-field .f7. has non-integral type .int&.\" }\n+  int ****: 3; // { dg-error \"expected\" }\n+  int *f9[1] : 3; // { dg-error \"bit-field .f9. has non-integral type .int\\\\* \\\\\\[1\\\\\\].\" }\n+  int (*f10)() : 3; // { dg-error \"bit-field .f10. has non-integral type .int \\\\(\\\\*\\\\)\\\\(\\\\).\" }\n+  int [][2] : 3; // { dg-error \"expected\" }\n+};"}]}