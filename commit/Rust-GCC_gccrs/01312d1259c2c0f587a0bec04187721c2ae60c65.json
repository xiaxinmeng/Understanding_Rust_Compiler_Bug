{"sha": "01312d1259c2c0f587a0bec04187721c2ae60c65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzMTJkMTI1OWMyYzBmNTg3YTBiZWMwNDE4NzcyMWMyYWU2MGM2NQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-28T13:07:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-28T13:07:46Z"}, "message": "File.java: Import needed classes instead of whole packages...\n\n2003-03-28  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/File.java:\n\tImport needed classes instead of whole packages, merged class\n\tdocumentation with classpath, moved constants and variables to top of\n\tclass.\n\t* java/io/PrintStream.java:\n\tMerged class documentation with classpath, moved constants and\n\tvariables to top of class.\n\t* java/io/RandomAccessFile.java\n\t(RandomAccessFile): Merged with classpath.\n\t(read): Merged with classpath).\n\t(read*): Reformatted.\n\nFrom-SVN: r64974", "tree": {"sha": "bef34f4b573bf6125d7f8d8f5c575c2d3c552a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bef34f4b573bf6125d7f8d8f5c575c2d3c552a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01312d1259c2c0f587a0bec04187721c2ae60c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01312d1259c2c0f587a0bec04187721c2ae60c65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01312d1259c2c0f587a0bec04187721c2ae60c65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01312d1259c2c0f587a0bec04187721c2ae60c65/comments", "author": null, "committer": null, "parents": [{"sha": "bcfaead06e1abd3796619d853aee8ae762976e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcfaead06e1abd3796619d853aee8ae762976e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcfaead06e1abd3796619d853aee8ae762976e15"}], "stats": {"total": 172, "additions": 108, "deletions": 64}, "files": [{"sha": "a338a090e306b63cde601b4a545b9fdf751574c3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=01312d1259c2c0f587a0bec04187721c2ae60c65", "patch": "@@ -1,3 +1,17 @@\n+2003-03-28  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/File.java:\n+\tImport needed classes instead of whole packages, merged class\n+\tdocumentation with classpath, moved constants and variables to top of\n+\tclass.\n+\t* java/io/PrintStream.java:\n+\tMerged class documentation with classpath, moved constants and\n+\tvariables to top of class.\n+\t* java/io/RandomAccessFile.java\n+\t(RandomAccessFile): Merged with classpath.\n+\t(read): Merged with classpath).\n+\t(read*): Reformatted.\n+\n 2003-03-28  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/FileDescriptor.java"}, {"sha": "61dedff98f9238b6fafcc874cceccacd33daa6cb", "filename": "libjava/java/io/File.java", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFile.java?ref=01312d1259c2c0f587a0bec04187721c2ae60c65", "patch": "@@ -38,22 +38,49 @@\n \n package java.io;\n \n-import java.util.*;\n-import java.net.*;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n import gnu.gcj.runtime.FileDeleter;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n-\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.3.\n  */\n \n+/**\n+ * This class represents a file or directory on a local disk.  It provides\n+ * facilities for dealing with a variety of systems that use various\n+ * types of path separators (\"/\" versus \"\\\", for example).  It also\n+ * contains method useful for creating and deleting files and directories.\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public class File implements Serializable, Comparable\n {\n+  private static final long serialVersionUID = 301077366599181567L;\n+\t\n+  // QUERY arguments to access function.\n+  private final static int READ = 0;\n+  private final static int WRITE = 1;\n+  private final static int EXISTS = 2;\n+\n+  // QUERY arguments to stat function.\n+  private final static int DIRECTORY = 0;\n+  private final static int ISFILE = 1;\n+  private final static int ISHIDDEN = 2;\n+\n+  // QUERY arguments to attr function.\n+  private final static int MODIFIED = 0;\n+  private final static int LENGTH = 1;\n+  \n+  private final native long attr (int query);\n+  // On OSF1 V5.0, `stat' is a macro.  It is easiest to use the name\n+  // `_stat' instead.  We do the same thing for `_access' just in\n+  // case.\n+  private final native boolean _access (int query);\n+  private final native boolean _stat (int query);\n+\n   public boolean canRead ()\n   {\n     checkRead();\n@@ -612,26 +639,4 @@ private void readObject (ObjectInputStream ois)\n       path = path.replace (oldSeparatorChar, separatorChar);\n   }\n \n-  // QUERY arguments to access function.\n-  private final static int READ = 0;\n-  private final static int WRITE = 1;\n-  private final static int EXISTS = 2;\n-\n-  // QUERY arguments to stat function.\n-  private final static int DIRECTORY = 0;\n-  private final static int ISFILE = 1;\n-  private final static int ISHIDDEN = 2;\n-\n-  // QUERY arguments to attr function.\n-  private final static int MODIFIED = 0;\n-  private final static int LENGTH = 1;\n-  \n-  private final native long attr (int query);\n-  // On OSF1 V5.0, `stat' is a macro.  It is easiest to use the name\n-  // `_stat' instead.  We do the same thing for `_access' just in\n-  // case.\n-  private final native boolean _access (int query);\n-  private final native boolean _stat (int query);\n-\n-  private static final long serialVersionUID = 301077366599181567L;\n }"}, {"sha": "9563305969d8088839e7ace719216e8b5f488782", "filename": "libjava/java/io/PrintStream.java", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FPrintStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FPrintStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPrintStream.java?ref=01312d1259c2c0f587a0bec04187721c2ae60c65", "patch": "@@ -37,24 +37,55 @@\n \n \n package java.io;\n-import gnu.gcj.convert.UnicodeToBytes;\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+import gnu.gcj.convert.UnicodeToBytes;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Believed complete and correct to 1.3\n  */\n \n+/**\n+ * This class prints Java primitive values and object to a stream as\n+ * text.  None of the methods in this class throw an exception.  However,\n+ * errors can be detected by calling the <code>checkError()</code> method.\n+ * Additionally, this stream can be designated as \"autoflush\" when \n+ * created so that any writes are automatically flushed to the underlying\n+ * output sink when the current line is terminated.\n+ * <p>\n+ * <b>Note that this class is deprecated</b>.  It exists for backward  \n+ * compatibility only.  New code should be written to use \n+ * <code>PrintWriter</code> instead.  \n+ * <p>\n+ * This class converts char's into byte's using the system default encoding.\n+ *\n+ * @deprecated\n+ *\n+ * @author Aaron M. Renn <arenn@urbanophile.com>\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n public class PrintStream extends FilterOutputStream\n {\n   /* Notice the implementation is quite similar to OutputStreamWriter.\n    * This leads to some minor duplication, because neither inherits\n    * from the other, and we want to maximize performance. */\n \n+  // Line separator string.\n+  private static final char[] line_separator\n+    = System.getProperty(\"line.separator\").toCharArray();\n+  \n+  UnicodeToBytes converter;\n+\n+  // Work buffer of characters for converter.\n+  char[] work = new char[100];\n+  // Work buffer of bytes where we temporarily keep converter output.\n+  byte[] work_bytes = new byte[100];\n+\n+  // True if error occurred.\n+  private boolean error;\n+  // True if auto-flush.\n+  private boolean auto_flush;\n+\n   public PrintStream (OutputStream out)\n   {\n     this(out, false);\n@@ -312,19 +343,4 @@ public void write (byte[] buffer, int offset, int count)\n       }\n   }\n \n-  UnicodeToBytes converter;\n-\n-  // Work buffer of characters for converter.\n-  char[] work = new char[100];\n-  // Work buffer of bytes where we temporarily keep converter output.\n-  byte[] work_bytes = new byte[100];\n-\n-  // True if error occurred.\n-  private boolean error;\n-  // True if auto-flush.\n-  private boolean auto_flush;\n-\n-  // Line separator string.\n-  private static final char[] line_separator\n-    = System.getProperty(\"line.separator\").toCharArray();\n }"}, {"sha": "afe54a664419145f504ba3a00b17b979f5a02267", "filename": "libjava/java/io/RandomAccessFile.java", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01312d1259c2c0f587a0bec04187721c2ae60c65/libjava%2Fjava%2Fio%2FRandomAccessFile.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FRandomAccessFile.java?ref=01312d1259c2c0f587a0bec04187721c2ae60c65", "patch": "@@ -87,7 +87,8 @@ public class RandomAccessFile implements DataOutput, DataInput\n    * is not allowed\n    * @exception IOException If any other error occurs\n    */\n-  public RandomAccessFile (File file, String mode) throws FileNotFoundException\n+  public RandomAccessFile (File file, String mode)\n+    throws FileNotFoundException\n   {\n     this (file.getPath(), mode);\n   }\n@@ -102,7 +103,7 @@ public RandomAccessFile (File file, String mode) throws FileNotFoundException\n    * opening the file to determine whether or not this file is allowed to\n    * be read or written.\n    *\n-   * @param name The name of the file to read and/or write\n+   * @param fileName The name of the file to read and/or write\n    * @param mode \"r\" for read only or \"rw\" for read-write access to the file\n    *\n    * @exception IllegalArgumentException If <code>mode</code> has an \n@@ -114,6 +115,11 @@ public RandomAccessFile (File file, String mode) throws FileNotFoundException\n   public RandomAccessFile (String fileName, String mode)\n     throws FileNotFoundException\n   {\n+    // Check the mode\n+    if (!mode.equals(\"r\") && !mode.equals(\"rw\") && !mode.equals(\"rws\") &&\n+        !mode.equals(\"rwd\"))\n+      throw new IllegalArgumentException(\"Bad mode value: \" + mode);\n+  \n     int fdmode;\n     if (mode.compareTo (\"r\") == 0)\n       fdmode = FileDescriptor.READ;\n@@ -122,12 +128,14 @@ else if (mode.compareTo (\"rw\") == 0)\n     else\n       throw new IllegalArgumentException (\"invalid mode: \" + mode);\n \n+    // The obligatory SecurityManager stuff\n     SecurityManager s = System.getSecurityManager();\n     if (s != null)\n       {\n-\ts.checkRead(fileName);\n-\tif ((fdmode & FileDescriptor.WRITE) != 0)\n-\t  s.checkWrite(fileName);\n+        s.checkRead(fileName);\n+\n+        if ((fdmode & FileDescriptor.WRITE) != 0)\n+          s.checkWrite(fileName);\n       }\n \n     fd = new FileDescriptor (fileName, fdmode);\n@@ -159,6 +167,7 @@ public final FileDescriptor getFD () throws IOException\n   {\n     if (! fd.valid())\n       throw new IOException ();\n+\n     return fd;\n   }\n \n@@ -231,12 +240,12 @@ public int read () throws IOException\n    */\n   public int read (byte[] buffer) throws IOException\n   {\n-    return in.read(buffer);\n+    return in.read (buffer);\n   }\n \n   /**\n-   * This methods reads up to <code>len</code> bytes from the file into the s\n-   * pecified array starting at position <code>offset</code> into the array.\n+   * This methods reads up to <code>len</code> bytes from the file into the\n+   * specified array starting at position <code>offset</code> into the array.\n    *\n    * @param buf The array to read the bytes into\n    * @param offset The index into the array to start storing bytes\n@@ -246,9 +255,9 @@ public int read (byte[] buffer) throws IOException\n    *\n    * @exception IOException If an error occurs\n    */\n-  public int read (byte[] buffer, int offset, int count) throws IOException\n+  public int read (byte[] buffer, int offset, int len) throws IOException\n   {\n-    return in.read(buffer, offset, count);\n+    return in.read (buffer, offset, len);\n   }\n \n   /**\n@@ -270,7 +279,7 @@ public int read (byte[] buffer, int offset, int count) throws IOException\n    */\n   public final boolean readBoolean () throws IOException\n   {\n-    return in.readBoolean();\n+    return in.readBoolean ();\n   }\n \n   /**\n@@ -290,7 +299,7 @@ public final boolean readBoolean () throws IOException\n    */\n   public final byte readByte () throws IOException\n   {\n-    return in.readByte();\n+    return in.readByte ();\n   }\n \n   /**\n@@ -347,7 +356,7 @@ public final char readChar () throws IOException\n    */\n   public final double readDouble () throws IOException\n   {\n-    return in.readDouble();\n+    return in.readDouble ();\n   }\n \n   /**\n@@ -412,7 +421,7 @@ public final void readFully (byte[] buffer) throws IOException\n   public final void readFully (byte[] buffer, int offset, int count)\n     throws IOException\n   {\n-    in.readFully(buffer, offset, count);\n+    in.readFully (buffer, offset, count);\n   }\n \n   /**\n@@ -477,7 +486,7 @@ public final int readInt () throws IOException\n    */\n   public final String readLine () throws IOException\n   {\n-    return in.readLine();\n+    return in.readLine ();\n   }\n \n   /**"}]}