{"sha": "058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU4ZWRjZGJkYzljNzk1MmVmMGZkNmMxNGU3MGVmYjFiZGIyNDVmZQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2002-08-14T07:14:03Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2002-08-14T07:14:03Z"}, "message": "invoke.texi: Document -mlong-calls for 68HC12.\n\n\t* doc/invoke.texi: Document -mlong-calls for 68HC12.\n\n\t* config/m68hc11/m68hc11.h (CPP_SPEC): Pass -D__USE_RTC__ when\n\t-mlong-calls is specified.\n\t(ASM_DECLARE_FUNCTION_NAME): Define to generate .far and .interrupt\n\tassembler directives.\n\t(TARGET_LONG_CALL, MASK_LONG_CALL): Declare.\n\t(TARGET_SWITCHES): Add -mlong-calls options.\n\t(current_function_far): Declare.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_initial_elimination_offset): Take\n\tinto account the page register saved on the stack.\n\t(m68hc11_override_options): Take into account -mlong-calls option.\n\t(m68hc11_asm_file_start): Put a mode for the ELF flags ABI.\n\n\t* config/m68hc11/m68hc11.md (\"*return_32bit\"): Return rtc\n\tif the function is going to be in 68HC12 banked memory (-mlong-calls).\n\t(\"*return_16bit\"): Likewise.\n\t(\"*return_void\"): Likewise.\n\t(\"call\", \"call_value\"): Use call for a far function call.\n\nFrom-SVN: r56275", "tree": {"sha": "68e7163ba12d60d0805008ee763d28f913df3bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68e7163ba12d60d0805008ee763d28f913df3bcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/comments", "author": null, "committer": null, "parents": [{"sha": "c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c79043f3f4ddfaf0d50a9ec52fc05c37fd645447"}], "stats": {"total": 113, "additions": 106, "deletions": 7}, "files": [{"sha": "9a64e05a7d50150b84044cbac65c3e48a87a4851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "patch": "@@ -1,3 +1,26 @@\n+2002-08-14  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* doc/invoke.texi: Document -mlong-calls for 68HC12.\n+\n+\t* config/m68hc11/m68hc11.h (CPP_SPEC): Pass -D__USE_RTC__ when\n+\t-mlong-calls is specified.\n+\t(ASM_DECLARE_FUNCTION_NAME): Define to generate .far and .interrupt \n+\tassembler directives.\n+\t(TARGET_LONG_CALL, MASK_LONG_CALL): Declare.\n+\t(TARGET_SWITCHES): Add -mlong-calls options.\n+\t(current_function_far): Declare.\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_initial_elimination_offset): Take\n+\tinto account the page register saved on the stack.\n+\t(m68hc11_override_options): Take into account -mlong-calls option.\n+\t(m68hc11_asm_file_start): Put a mode for the ELF flags ABI.\n+\n+\t* config/m68hc11/m68hc11.md (\"*return_32bit\"): Return rtc\n+\tif the function is going to be in 68HC12 banked memory (-mlong-calls).\n+\t(\"*return_16bit\"): Likewise.\n+\t(\"*return_void\"): Likewise.\n+\t(\"call\", \"call_value\"): Use call for a far function call.\n+\n 2002-08-14  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* toplev.c (parse_options_and_default_flags): Don't call"}, {"sha": "d52289fc3147b59dd04e10ae3cb268a72d23267f", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "patch": "@@ -101,6 +101,10 @@ int current_function_interrupt;\n /* Set to 1 by expand_prologue() when the function is a trap handler.  */\n int current_function_trap;\n \n+/* Set to 1 when the current function is placed in 68HC12 banked\n+   memory and must return with rtc.  */\n+int current_function_far;\n+\n /* Min offset that is valid for the indirect addressing mode.  */\n HOST_WIDE_INT m68hc11_min_offset = 0;\n \n@@ -283,6 +287,9 @@ m68hc11_override_options ()\n       target_flags |= MASK_NO_DIRECT_MODE;\n       if (m68hc11_soft_reg_count == 0)\n \tm68hc11_soft_reg_count = \"0\";\n+\n+      if (TARGET_LONG_CALLS)\n+        current_function_far = 1;\n     }\n   return 0;\n }\n@@ -1277,6 +1284,11 @@ m68hc11_initial_elimination_offset (from, to)\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && from == ARG_POINTER_REGNUM)\n     size = 7;\n+\n+  /* For a function using 'call/rtc' we must take into account the\n+     page register which is pushed in the call.  */\n+  else if (current_function_far && from == ARG_POINTER_REGNUM)\n+    size = 1;\n   else\n     size = 0;\n \n@@ -5500,6 +5512,11 @@ m68hc11_asm_file_start (out, main_file)\n   print_options (out);\n   fprintf (out, \";;;-----------------------------------------\\n\");\n   output_file_directive (out, main_file);\n+\n+  if (TARGET_SHORT)\n+    fprintf (out, \"\\t.mode mshort\\n\");\n+  else\n+    fprintf (out, \"\\t.mode mlong\\n\");\n }\n \n "}, {"sha": "32a9b6351ef28342f1919a33afb5daf1bdc0efb3", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "patch": "@@ -66,7 +66,8 @@ Boston, MA 02111-1307, USA.\n  %{!mshort:-D__INT__=32}\\\n  %{m68hc12:-Dmc6812 -DMC6812 -Dmc68hc12}\\\n  %{!m68hc12:-Dmc6811 -DMC6811 -Dmc68hc11}\\\n- %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\"\n+ %{fshort-double:-D__HAVE_SHORT_DOUBLE__}\\\n+ %{mlong-calls:-D__USE_RTC__}\"\n #endif\n \n #undef STARTFILE_SPEC\n@@ -119,6 +120,7 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n #define MASK_M6811              0010\n #define MASK_M6812              0020\n #define MASK_NO_DIRECT_MODE     0040\n+#define MASK_LONG_CALLS         0200\n \n #define TARGET_OP_TIME\t\t(optimize && optimize_size == 0)\n #define TARGET_SHORT            (target_flags & MASK_SHORT)\n@@ -127,6 +129,7 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n #define TARGET_AUTO_INC_DEC     (target_flags & MASK_AUTO_INC_DEC)\n #define TARGET_NO_DIRECT_MODE   (target_flags & MASK_NO_DIRECT_MODE)\n #define TARGET_RELAX            (TARGET_NO_DIRECT_MODE)\n+#define TARGET_LONG_CALLS       (target_flags & MASK_LONG_CALLS)\n \n /* Default target_flags if no switches specified.  */\n #ifndef TARGET_DEFAULT\n@@ -159,6 +162,10 @@ extern short *reg_renumber;\t/* def in local_alloc.c */\n     N_(\"Auto pre/post decrement increment allowed\")},\t\t\\\n   { \"noauto-incdec\", - MASK_AUTO_INC_DEC,\t\t\t\\\n     N_(\"Auto pre/post decrement increment not allowed\")},\t\\\n+  { \"long-calls\", MASK_LONG_CALLS,\t\t\t\t\\\n+    N_(\"Use call and rtc for function calls and returns\")},\t\\\n+  { \"nolong-calls\", - MASK_LONG_CALLS,\t\t\t\t\\\n+    N_(\"Use jsr and rts for function calls and returns\")},\t\\\n   { \"relax\", MASK_NO_DIRECT_MODE,                               \\\n     N_(\"Do not use direct addressing mode for soft registers\")},\\\n   { \"68hc11\", MASK_M6811,\t\t\t\t\t\\\n@@ -1549,6 +1556,45 @@ do {                                                                    \\\n    no longer contain unusual constructs.  */\n #define ASM_APP_OFF \t\t\"; End of inline assembler code\\n#NO_APP\\n\"\n \n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.\n+\n+   For 68HC12 we mark functions that return with 'rtc'.  The linker\n+   will ensure that a 'call' is really made (instead of 'jsr').\n+   The debugger needs this information to correctly compute the stack frame.\n+\n+   For 68HC11/68HC12 we also mark interrupt handlers for gdb to\n+   compute the correct stack frame.  */\n+\n+#undef ASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\\\n+  do\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"%s\", TYPE_ASM_OP);\t\t\\\n+      assemble_name (FILE, NAME);\t\t\t\\\n+      putc (',', FILE);\t\t\t\t\t\\\n+      fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\\\n+      putc ('\\n', FILE);\t\t\t\t\\\n+      \t\t\t\t\t\t\t\\\n+      if (TARGET_M6812 && current_function_far)\t\t\\\n+        {\t\t\t\t\t\t\\\n+          fprintf (FILE, \"\\t.far\\t\");\t\t\t\\\n+\t  assemble_name (FILE, NAME);\t\t\t\\\n+\t  putc ('\\n', FILE);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      else if (current_function_interrupt\t\t\\\n+\t       || current_function_trap)\t\t\\\n+        {\t\t\t\t\t\t\\\n+\t  fprintf (FILE, \"\\t.interrupt\\t\");\t\t\\\n+\t  assemble_name (FILE, NAME);\t\t\t\\\n+\t  putc ('\\b', FILE);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\\\n+      ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\\\n+      ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\\\n+    }\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* Output #ident as a .ident.  */\n \n /* output external reference */\n@@ -1703,3 +1749,4 @@ extern int debug_m6811;\n extern int z_replacement_completed;\n extern int current_function_interrupt;\n extern int current_function_trap;\n+extern int current_function_far;"}, {"sha": "3c0f197e967e1b77510acec8f04f615ab524c72e", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "patch": "@@ -6279,12 +6279,14 @@\n   \"\"\n  \"*\n {\n+  int far_call = current_function_far;\n+\n   if (GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n     {\n       if (SYMBOL_REF_FLAG (XEXP (operands[0], 0)) == 1)\n         return \\\"swi\\\";\n       else\n-        return \\\"bsr\\\\t%0\\\";\n+        return far_call ? \\\"call\\\\t%0\\\" : \\\"bsr\\\\t%0\\\";\n     }\n   else\n     {\n@@ -6299,12 +6301,14 @@\n   \"\"\n  \"*\n {\n+  int far_call = current_function_far;\n+\n   if (GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n     {\n       if (SYMBOL_REF_FLAG (XEXP (operands[1], 0)) == 1)\n         return \\\"swi\\\";\n       else\n-        return \\\"bsr\\\\t%1\\\";\n+        return far_call ? \\\"call\\\\t%1\\\" : \\\"bsr\\\\t%1\\\";\n     }\n   else\n     {\n@@ -6418,7 +6422,7 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return \\\"rts\\\";\n+  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n }\")\n \n (define_insn \"*return_16bit\"\n@@ -6435,7 +6439,7 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return \\\"rts\\\";\n+  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n }\")\n \n (define_insn \"*return_32bit\"\n@@ -6452,7 +6456,7 @@\n     return \\\"\\\";\n   if (current_function_interrupt || current_function_trap)\n     return \\\"rti\\\";\n-  return \\\"rts\\\";\n+  return current_function_far ? \\\"rtc\\\" : \\\"rts\\\";\n }\")\n \n (define_insn \"indirect_jump\""}, {"sha": "1aa156fdd8679755f7eeb10e0643f618bdb65421", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=058edcdbdc9c7952ef0fd6c14e70efb1bdb245fe", "patch": "@@ -338,7 +338,7 @@ in the following sections.\n @emph{M68hc1x Options}\n @gccoptlist{\n -m6811  -m6812  -m68hc11  -m68hc12 @gol\n--mauto-incdec  -mshort  -msoft-reg-count=@var{count}}\n+-mauto-incdec  -mlong-calls  -mshort  -msoft-reg-count=@var{count}}\n \n @emph{VAX Options}\n @gccoptlist{\n@@ -5171,6 +5171,14 @@ when the compiler is configured for 68HC12-based systems.\n Enable the use of 68HC12 pre and post auto-increment and auto-decrement\n addressing modes.\n \n+@item -mlong-calls\n+@itemx -mno-long-calls\n+@opindex mlong-calls\n+@opindex mno-long-calls\n+Treat all calls as being far away (near).  If calls are assumed to be\n+far away, the compiler will use the @code{call} instruction to\n+call a function and the @code{rtc} instruction for returning.\n+\n @item -mshort\n @opindex mshort\n Consider type @code{int} to be 16 bits wide, like @code{short int}."}]}