{"sha": "3ae472c234e4d4fb0898b3e82b36c8ac72822824", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlNDcyYzIzNGU0ZDRmYjA4OThiM2U4MmIzNmM4YWM3MjgyMjgyNA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-09-11T03:21:22Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-09-11T03:21:22Z"}, "message": "re PR middle-end/17024 (ICE in fold_cond_expr_with_comparison, at fold-const.c:4324)\n\n\n\tPR middle-end/17024\n\t* fold-const.c (fold_cond_expr_with_comparison): Handle unordered\n\tfloating point comparison operators.  Change aborts to gcc_asserts.\n\n\t* gcc.dg/pr17024-1.c: New test case.\n\nFrom-SVN: r87339", "tree": {"sha": "d8c850b7dd662237f8d13d195a77666abb0e2beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8c850b7dd662237f8d13d195a77666abb0e2beb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae472c234e4d4fb0898b3e82b36c8ac72822824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae472c234e4d4fb0898b3e82b36c8ac72822824", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae472c234e4d4fb0898b3e82b36c8ac72822824", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae472c234e4d4fb0898b3e82b36c8ac72822824/comments", "author": null, "committer": null, "parents": [{"sha": "dc9d0b14b764ae39d8421cb83c0a3d34f16e12fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9d0b14b764ae39d8421cb83c0a3d34f16e12fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9d0b14b764ae39d8421cb83c0a3d34f16e12fc"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "ab280adb6477380e7f4e241cf412c47bc8353a95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3ae472c234e4d4fb0898b3e82b36c8ac72822824", "patch": "@@ -1,3 +1,9 @@\n+2004-09-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17024\n+\t* fold-const.c (fold_cond_expr_with_comparison): Handle unordered\n+\tfloating point comparison operators.  Change aborts to gcc_asserts.\n+\n 2004-09-10  Geoffrey Keating  <geoffk@apple.com>\n \n \t* final.c (output_asm_insn): Correct problem with -fverbose-asm."}, {"sha": "d0720e9f0239d08e07f195dd68bde5782e700c66", "filename": "gcc/fold-const.c", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=3ae472c234e4d4fb0898b3e82b36c8ac72822824", "patch": "@@ -4162,17 +4162,28 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n     switch (comp_code)\n       {\n       case EQ_EXPR:\n+      case UNEQ_EXPR:\n \ttem = fold_convert (arg1_type, arg1);\n \treturn pedantic_non_lvalue (fold_convert (type, negate_expr (tem)));\n       case NE_EXPR:\n+      case LTGT_EXPR:\n \treturn pedantic_non_lvalue (fold_convert (type, arg1));\n+      case UNGE_EXPR:\n+      case UNGT_EXPR:\n+\tif (flag_trapping_math)\n+\t  break;\n+\t/* Fall through.  */\n       case GE_EXPR:\n       case GT_EXPR:\n \tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n \t  arg1 = fold_convert (lang_hooks.types.signed_type\n \t\t\t       (TREE_TYPE (arg1)), arg1);\n \ttem = fold (build1 (ABS_EXPR, TREE_TYPE (arg1), arg1));\n \treturn pedantic_non_lvalue (fold_convert (type, tem));\n+      case UNLE_EXPR:\n+      case UNLT_EXPR:\n+\tif (flag_trapping_math)\n+\t  break;\n       case LE_EXPR:\n       case LT_EXPR:\n \tif (TYPE_UNSIGNED (TREE_TYPE (arg1)))\n@@ -4181,7 +4192,8 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \ttem = fold (build1 (ABS_EXPR, TREE_TYPE (arg1), arg1));\n \treturn negate_expr (fold_convert (type, tem));\n       default:\n-\tgcc_unreachable ();\n+\tgcc_assert (TREE_CODE_CLASS (comp_code) == '<');\n+\tbreak;\n       }\n \n   /* A != 0 ? A : 0 is simply A, unless A is -0.  Likewise\n@@ -4245,6 +4257,8 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \t  return pedantic_non_lvalue (fold_convert (type, arg1));\n \tcase LE_EXPR:\n \tcase LT_EXPR:\n+\tcase UNLE_EXPR:\n+\tcase UNLT_EXPR:\n \t  /* In C++ a ?: expression can be an lvalue, so put the\n \t     operand which will be used if they are equal first\n \t     so that we can convert this back to the\n@@ -4253,31 +4267,37 @@ fold_cond_expr_with_comparison (tree type, tree arg0, tree arg1, tree arg2)\n \t    {\n \t      comp_op0 = fold_convert (comp_type, comp_op0);\n \t      comp_op1 = fold_convert (comp_type, comp_op1);\n-\t      tem = fold (build2 (MIN_EXPR, comp_type,\n-\t\t\t\t  (comp_code == LE_EXPR\n-\t\t\t\t   ? comp_op0 : comp_op1),\n-\t\t\t\t  (comp_code == LE_EXPR\n-\t\t\t\t   ? comp_op1 : comp_op0)));\n+\t      tem = (comp_code == LE_EXPR || comp_code == UNLE_EXPR)\n+\t\t    ? fold (build2 (MIN_EXPR, comp_type, comp_op0, comp_op1))\n+\t\t    : fold (build2 (MIN_EXPR, comp_type, comp_op1, comp_op0));\n \t      return pedantic_non_lvalue (fold_convert (type, tem));\n \t    }\n \t  break;\n \tcase GE_EXPR:\n \tcase GT_EXPR:\n+\tcase UNGE_EXPR:\n+\tcase UNGT_EXPR:\n \t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg1))))\n \t    {\n \t      comp_op0 = fold_convert (comp_type, comp_op0);\n \t      comp_op1 = fold_convert (comp_type, comp_op1);\n-\t      tem = fold (build2 (MAX_EXPR, comp_type,\n-\t\t\t\t  (comp_code == GE_EXPR\n-\t\t\t\t   ? comp_op0 : comp_op1),\n-\t\t\t\t  (comp_code == GE_EXPR\n-\t\t\t\t   ? comp_op1 : comp_op0)));\n-\t      tem = fold (build2 (MAX_EXPR, comp_type, comp_op0, comp_op1));\n+\t      tem = (comp_code == GE_EXPR || comp_code == UNGE_EXPR)\n+\t\t    ? fold (build2 (MAX_EXPR, comp_type, comp_op0, comp_op1))\n+\t\t    : fold (build2 (MAX_EXPR, comp_type, comp_op1, comp_op0));\n \t      return pedantic_non_lvalue (fold_convert (type, tem));\n \t    }\n \t  break;\n+\tcase UNEQ_EXPR:\n+\t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg1))))\n+\t    return pedantic_non_lvalue (fold_convert (type, arg2));\n+\t  break;\n+\tcase LTGT_EXPR:\n+\t  if (!HONOR_NANS (TYPE_MODE (TREE_TYPE (arg1))))\n+\t    return pedantic_non_lvalue (fold_convert (type, arg1));\n+\t  break;\n \tdefault:\n-\t  gcc_unreachable ();\n+\t  gcc_assert (TREE_CODE_CLASS (comp_code) == '<');\n+\t  break;\n \t}\n     }\n "}, {"sha": "d899403219e6da8def3de78ff016a94f66a2a9bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3ae472c234e4d4fb0898b3e82b36c8ac72822824", "patch": "@@ -1,3 +1,8 @@\n+2004-09-10  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/17024\n+\t* gcc.dg/pr17024-1.c: New test case.\n+\n 2004-09-10  Eric Christopher  <echristo@redhat.com>\n \n \t* gcc.dg/20040910-1.c: New test."}, {"sha": "d8bdf012b9dbb07febedf652dad7d877fd6b578b", "filename": "gcc/testsuite/gcc.dg/pr17024-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17024-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae472c234e4d4fb0898b3e82b36c8ac72822824/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17024-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr17024-1.c?ref=3ae472c234e4d4fb0898b3e82b36c8ac72822824", "patch": "@@ -0,0 +1,15 @@\n+/* PR middle-end/17024 */\n+/* { dg-do compile } */\n+/* { dg-options \"-funsafe-math-optimizations\" } */\n+\n+#define MAX2(a,b) (((a)>(b)) ? (a) : (b))\n+\n+void C(double);\n+\n+void i(int k)\n+{\n+\tdouble c[1];\n+\tC(MAX2(0.,c[k]));\n+\treturn;\n+}\n+"}]}