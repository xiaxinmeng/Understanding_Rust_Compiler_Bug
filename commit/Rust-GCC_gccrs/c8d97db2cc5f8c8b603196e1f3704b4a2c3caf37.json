{"sha": "c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhkOTdkYjJjYzVmOGM4YjYwMzE5NmUxZjM3MDRiNGEyYzNjYWYzNw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2013-11-05T14:13:56Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2013-11-05T14:13:56Z"}, "message": "tree-outof-ssa.c (queue_phi_copy_p): Combine phi_ssa_name_p from gimple.h and the rest of the condition in...\n\n\n2013-11-05  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* tree-outof-ssa.c (queue_phi_copy_p): Combine phi_ssa_name_p from \n\tgimple.h and the rest of the condition in eliminate_build.\n\t(eliminate_build): Call new routine.\n\t* gimple.h (phi_ssa_name_p): Delete.\n\nFrom-SVN: r204393", "tree": {"sha": "fa68845ee02d5d3d6eeca638d0ed925c3481f017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa68845ee02d5d3d6eeca638d0ed925c3481f017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/comments", "author": null, "committer": null, "parents": [{"sha": "ecbffdd88f3f073ded32f1cd632dfb1bfc5d7c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecbffdd88f3f073ded32f1cd632dfb1bfc5d7c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecbffdd88f3f073ded32f1cd632dfb1bfc5d7c38"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "6dd16fc34f1b9e36b05d46f38765636fd7989720", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "patch": "@@ -1,3 +1,10 @@\n+2013-11-05  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-outof-ssa.c (queue_phi_copy_p): Combine phi_ssa_name_p from \n+\tgimple.h and the rest of the condition in eliminate_build.\n+\t(eliminate_build): Call new routine.\n+\t* gimple.h (phi_ssa_name_p): Delete.\n+\n 2013-11-05  Trevor Saunders  <tsaunders@mozilla.com>\n \n \t* vec.c (vec_prefix::calculate_allocation): Don't try to handle the"}, {"sha": "90773c00524ec0901d936d9847470738ec33fdec", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "patch": "@@ -3633,19 +3633,6 @@ gimple_phi_set_arg (gimple gs, unsigned index, struct phi_arg_d * phiarg)\n   gs->gimple_phi.args[index] = *phiarg;\n }\n \n-/* PHI nodes should contain only ssa_names and invariants.  A test\n-   for ssa_name is definitely simpler; don't let invalid contents\n-   slip in in the meantime.  */\n-\n-static inline bool\n-phi_ssa_name_p (const_tree t)\n-{\n-  if (TREE_CODE (t) == SSA_NAME)\n-    return true;\n-  gcc_checking_assert (is_gimple_min_invariant (t));\n-  return false;\n-}\n-\n /* Return the PHI nodes for basic block BB, or NULL if there are no\n    PHI nodes.  */\n "}, {"sha": "4dc3f9e4a8d9cf8ac26eb877cb9861f79899dc4e", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=c8d97db2cc5f8c8b603196e1f3704b4a2c3caf37", "patch": "@@ -548,6 +548,23 @@ eliminate_name (elim_graph g, int T)\n   elim_graph_add_node (g, T);\n }\n \n+/* Return true if this phi argument T should have a copy queued when using\n+   var_map MAP.  PHI nodes should contain only ssa_names and invariants.  A\n+   test for ssa_name is definitely simpler, but don't let invalid contents\n+   slip through in the meantime.  */\n+\n+static inline bool\n+queue_phi_copy_p (var_map map, tree t)\n+{\n+  if (TREE_CODE (t) == SSA_NAME)\n+    { \n+      if (var_to_partition (map, t) == NO_PARTITION)\n+        return true;\n+      return false;\n+    }\n+  gcc_checking_assert (is_gimple_min_invariant (t));\n+  return true;\n+}\n \n /* Build elimination graph G for basic block BB on incoming PHI edge\n    G->e.  */\n@@ -577,9 +594,7 @@ eliminate_build (elim_graph g)\n       /* If this argument is a constant, or a SSA_NAME which is being\n \t left in SSA form, just queue a copy to be emitted on this\n \t edge.  */\n-      if (!phi_ssa_name_p (Ti)\n-\t  || (TREE_CODE (Ti) == SSA_NAME\n-\t      && var_to_partition (g->map, Ti) == NO_PARTITION))\n+      if (queue_phi_copy_p (g->map, Ti))\n         {\n \t  /* Save constant copies until all other copies have been emitted\n \t     on this edge.  */"}]}