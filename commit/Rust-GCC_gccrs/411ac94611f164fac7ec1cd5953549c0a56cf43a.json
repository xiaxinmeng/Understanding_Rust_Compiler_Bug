{"sha": "411ac94611f164fac7ec1cd5953549c0a56cf43a", "node_id": "C_kwDOANBUbNoAKDQxMWFjOTQ2MTFmMTY0ZmFjN2VjMWNkNTk1MzU0OWMwYTU2Y2Y0M2E", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-17T10:59:25Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-12-17T10:59:33Z"}, "message": "slp: check that the operation we're combing is a boolean operation [PR103741]\n\nIt seems I forgot to check that the operation we're combing when masking the\npredicated together are actually predicates types.\n\nWithout it we end up accidentally trying to combine a value and a mask.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103741\n\t* tree-vect-stmts.c (vectorizable_operation): Check for boolean.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/103741\n\t* gcc.target/aarch64/pr103741.c: New test.", "tree": {"sha": "3ee42ce679f2ff1b2d227e42c686313bc0022eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ee42ce679f2ff1b2d227e42c686313bc0022eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/411ac94611f164fac7ec1cd5953549c0a56cf43a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411ac94611f164fac7ec1cd5953549c0a56cf43a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411ac94611f164fac7ec1cd5953549c0a56cf43a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411ac94611f164fac7ec1cd5953549c0a56cf43a/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "574c09da48a5a0ff4c32dd4577eaf65bac8c94a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/574c09da48a5a0ff4c32dd4577eaf65bac8c94a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/574c09da48a5a0ff4c32dd4577eaf65bac8c94a0"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "ef3ae66ebe5e5a44e7bea7be22b6378bc23cc538", "filename": "gcc/testsuite/gcc.target/aarch64/pr103741.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411ac94611f164fac7ec1cd5953549c0a56cf43a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103741.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411ac94611f164fac7ec1cd5953549c0a56cf43a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103741.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr103741.c?ref=411ac94611f164fac7ec1cd5953549c0a56cf43a", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-march=armv8-a+sve -O1\" } */\n+\n+long int m, n;\n+\n+int\n+qux (int z)\n+{\n+  return 4 >> z ? z : 0;\n+}\n+\n+int\n+bar (long int y)\n+{\n+  return y ? 3 : 2;\n+}\n+\n+__attribute__ ((simd)) int\n+foo (int x)\n+{\n+  long int a = x & m;\n+  int b = bar (x) / n;\n+\n+  return qux (b) == a;\n+}\n+"}, {"sha": "ad90cdb0473a337207d6ba54c1dd0a2ecc50ab8d", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/411ac94611f164fac7ec1cd5953549c0a56cf43a/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/411ac94611f164fac7ec1cd5953549c0a56cf43a/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=411ac94611f164fac7ec1cd5953549c0a56cf43a", "patch": "@@ -6361,7 +6361,9 @@ vectorizable_operation (vec_info *vinfo,\n \t  /* When combining two masks check if either of them is elsewhere\n \t     combined with a loop mask, if that's the case we can mark that the\n \t     new combined mask doesn't need to be combined with a loop mask.  */\n-\t  if (masked_loop_p && code == BIT_AND_EXPR)\n+\t  if (masked_loop_p\n+\t      && code == BIT_AND_EXPR\n+\t      && VECTOR_BOOLEAN_TYPE_P (vectype))\n \t    {\n \t      if (loop_vinfo->scalar_cond_masked_set.contains ({ op0,\n \t\t\t\t\t\t\t\t ncopies}))"}]}