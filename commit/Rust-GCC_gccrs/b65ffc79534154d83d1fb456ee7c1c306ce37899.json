{"sha": "b65ffc79534154d83d1fb456ee7c1c306ce37899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1ZmZjNzk1MzQxNTRkODNkMWZiNDU2ZWU3YzFjMzA2Y2UzNzg5OQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2016-06-27T11:27:17Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2016-06-27T11:27:17Z"}, "message": "[ARM][testsuite] Add missing guards to fp16 AdvSIMD tests\n\n2016-06-27  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vget_lane.c: Add ifdef\n\taround fp16 code.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f16_indices_1.c:\n\tAdd arm_neon_fp16_ok effective target.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f16_indices_1.c: Likewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f16_indices_1.c: Likewise.\n\nFrom-SVN: r237798", "tree": {"sha": "a5d282cbf49f7eaadd6b3896f49872a26ea58801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d282cbf49f7eaadd6b3896f49872a26ea58801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65ffc79534154d83d1fb456ee7c1c306ce37899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65ffc79534154d83d1fb456ee7c1c306ce37899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65ffc79534154d83d1fb456ee7c1c306ce37899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65ffc79534154d83d1fb456ee7c1c306ce37899/comments", "author": null, "committer": null, "parents": [{"sha": "74a1b6ffefeda7945b1764658952f7e4c832cd09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a1b6ffefeda7945b1764658952f7e4c832cd09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a1b6ffefeda7945b1764658952f7e4c832cd09"}], "stats": {"total": 110, "additions": 109, "deletions": 1}, "files": [{"sha": "cdf3f0be28a6825513d0a6798a6f0e774955979a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -1,3 +1,25 @@\n+2016-06-27  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vget_lane.c: Add ifdef\n+\taround fp16 code.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f16_indices_1.c:\n+\tAdd arm_neon_fp16_ok effective target.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f16_indices_1.c: Likewise.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f16_indices_1.c: Likewise.\n+\n 2016-06-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* gcc.dg/predict-12.c: New testcase."}, {"sha": "ee6d6503ad622c936be2f6c7468db845398a6c2e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vget_lane.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvget_lane.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -54,10 +54,12 @@ void exec_vget_lane (void)\n     uint32_t var_int32;\n     float32_t var_float32;\n   } var_int32_float32;\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   union {\n     uint16_t var_int16;\n     float16_t var_float16;\n   } var_int16_float16;\n+#endif\n \n #define TEST_VGET_LANE_FP(Q, T1, T2, W, N, L)\t\t\t\t   \\\n   VAR(var, T1, W) = vget##Q##_lane_##T2##W(VECT_VAR(vector, T1, W, N), L); \\"}, {"sha": "787664e156429c34ed2dfddcbfcc92200916816e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x4x2_t\n f_vld2_lane_f16 (float16_t * p, float16x4x2_t v)"}, {"sha": "ce0569b8286732897fc45f0c5a2849bb378757f8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x8x2_t\n f_vld2q_lane_f16 (float16_t * p, float16x8x2_t v)"}, {"sha": "5f2bd0a93fd0f4c1ada199c92ac008f9d492d5f2", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x4x3_t\n f_vld3_lane_f16 (float16_t * p, float16x4x3_t v)"}, {"sha": "1fa19a1d94fb180261def14eb4db36a0f90ae0cf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x8x3_t\n f_vld3q_lane_f16 (float16_t * p, float16x8x3_t v)"}, {"sha": "1f446455e587c7cf9ecbabfe6c1326ebb3d3c946", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x4x4_t\n f_vld4_lane_f16 (float16_t * p, float16x4x4_t v)"}, {"sha": "53d4a3e7c12e5543ea3c63f1623160abadea93df", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n float16x8x4_t\n f_vld4q_lane_f16 (float16_t * p, float16x8x4_t v)"}, {"sha": "127e1aa4c10913339f8717dd1296f8c2f5ace0e9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -665,9 +665,11 @@ void exec_vreinterpret (void)\n \n   /* Initialize input \"vector\" from \"buffer\".  */\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   VLOAD(vector, buffer, , float, f, 16, 4);\n-  VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 16, 8);\n+#endif\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n   VLOAD(vector, buffer, q, float, f, 32, 4);\n \n   /* vreinterpret_s8_xx.  */\n@@ -680,7 +682,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, int, s, 8, 8, uint, u, 64, 1, expected_s8_7);\n   TEST_VREINTERPRET(, int, s, 8, 8, poly, p, 8, 8, expected_s8_8);\n   TEST_VREINTERPRET(, int, s, 8, 8, poly, p, 16, 4, expected_s8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, int, s, 8, 8, float, f, 16, 4, expected_s8_10);\n+#endif\n \n   /* vreinterpret_s16_xx.  */\n   TEST_VREINTERPRET(, int, s, 16, 4, int, s, 8, 8, expected_s16_1);\n@@ -692,7 +696,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, int, s, 16, 4, uint, u, 64, 1, expected_s16_7);\n   TEST_VREINTERPRET(, int, s, 16, 4, poly, p, 8, 8, expected_s16_8);\n   TEST_VREINTERPRET(, int, s, 16, 4, poly, p, 16, 4, expected_s16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, int, s, 16, 4, float, f, 16, 4, expected_s16_10);\n+#endif\n \n   /* vreinterpret_s32_xx.  */\n   TEST_VREINTERPRET(, int, s, 32, 2, int, s, 8, 8, expected_s32_1);\n@@ -704,7 +710,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, int, s, 32, 2, uint, u, 64, 1, expected_s32_7);\n   TEST_VREINTERPRET(, int, s, 32, 2, poly, p, 8, 8, expected_s32_8);\n   TEST_VREINTERPRET(, int, s, 32, 2, poly, p, 16, 4, expected_s32_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, int, s, 32, 2, float, f, 16, 4, expected_s32_10);\n+#endif\n \n   /* vreinterpret_s64_xx.  */\n   TEST_VREINTERPRET(, int, s, 64, 1, int, s, 8, 8, expected_s64_1);\n@@ -716,7 +724,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, int, s, 64, 1, uint, u, 64, 1, expected_s64_7);\n   TEST_VREINTERPRET(, int, s, 64, 1, poly, p, 8, 8, expected_s64_8);\n   TEST_VREINTERPRET(, int, s, 64, 1, poly, p, 16, 4, expected_s64_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, int, s, 64, 1, float, f, 16, 4, expected_s64_10);\n+#endif\n \n   /* vreinterpret_u8_xx.  */\n   TEST_VREINTERPRET(, uint, u, 8, 8, int, s, 8, 8, expected_u8_1);\n@@ -728,7 +738,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, uint, u, 8, 8, uint, u, 64, 1, expected_u8_7);\n   TEST_VREINTERPRET(, uint, u, 8, 8, poly, p, 8, 8, expected_u8_8);\n   TEST_VREINTERPRET(, uint, u, 8, 8, poly, p, 16, 4, expected_u8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, uint, u, 8, 8, float, f, 16, 4, expected_u8_10);\n+#endif\n \n   /* vreinterpret_u16_xx.  */\n   TEST_VREINTERPRET(, uint, u, 16, 4, int, s, 8, 8, expected_u16_1);\n@@ -740,7 +752,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, uint, u, 16, 4, uint, u, 64, 1, expected_u16_7);\n   TEST_VREINTERPRET(, uint, u, 16, 4, poly, p, 8, 8, expected_u16_8);\n   TEST_VREINTERPRET(, uint, u, 16, 4, poly, p, 16, 4, expected_u16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, uint, u, 16, 4, float, f, 16, 4, expected_u16_10);\n+#endif\n \n   /* vreinterpret_u32_xx.  */\n   TEST_VREINTERPRET(, uint, u, 32, 2, int, s, 8, 8, expected_u32_1);\n@@ -752,7 +766,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, uint, u, 32, 2, uint, u, 64, 1, expected_u32_7);\n   TEST_VREINTERPRET(, uint, u, 32, 2, poly, p, 8, 8, expected_u32_8);\n   TEST_VREINTERPRET(, uint, u, 32, 2, poly, p, 16, 4, expected_u32_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, uint, u, 32, 2, float, f, 16, 4, expected_u32_10);\n+#endif\n \n   /* vreinterpret_u64_xx.  */\n   TEST_VREINTERPRET(, uint, u, 64, 1, int, s, 8, 8, expected_u64_1);\n@@ -764,7 +780,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, uint, u, 64, 1, uint, u, 32, 2, expected_u64_7);\n   TEST_VREINTERPRET(, uint, u, 64, 1, poly, p, 8, 8, expected_u64_8);\n   TEST_VREINTERPRET(, uint, u, 64, 1, poly, p, 16, 4, expected_u64_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, uint, u, 64, 1, float, f, 16, 4, expected_u64_10);\n+#endif\n \n   /* vreinterpret_p8_xx.  */\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, int, s, 8, 8, expected_p8_1);\n@@ -776,7 +794,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, uint, u, 32, 2, expected_p8_7);\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, uint, u, 64, 1, expected_p8_8);\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, poly, p, 16, 4, expected_p8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, float, f, 16, 4, expected_p8_10);\n+#endif\n \n   /* vreinterpret_p16_xx.  */\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, int, s, 8, 8, expected_p16_1);\n@@ -788,7 +808,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, uint, u, 32, 2, expected_p16_7);\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, uint, u, 64, 1, expected_p16_8);\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, poly, p, 8, 8, expected_p16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, float, f, 16, 4, expected_p16_10);\n+#endif\n \n   /* vreinterpretq_s8_xx.  */\n   TEST_VREINTERPRET(q, int, s, 8, 16, int, s, 16, 8, expected_q_s8_1);\n@@ -800,7 +822,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, int, s, 8, 16, uint, u, 64, 2, expected_q_s8_7);\n   TEST_VREINTERPRET(q, int, s, 8, 16, poly, p, 8, 16, expected_q_s8_8);\n   TEST_VREINTERPRET(q, int, s, 8, 16, poly, p, 16, 8, expected_q_s8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, int, s, 8, 16, float, f, 16, 8, expected_q_s8_10);\n+#endif\n \n   /* vreinterpretq_s16_xx.  */\n   TEST_VREINTERPRET(q, int, s, 16, 8, int, s, 8, 16, expected_q_s16_1);\n@@ -812,7 +836,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, int, s, 16, 8, uint, u, 64, 2, expected_q_s16_7);\n   TEST_VREINTERPRET(q, int, s, 16, 8, poly, p, 8, 16, expected_q_s16_8);\n   TEST_VREINTERPRET(q, int, s, 16, 8, poly, p, 16, 8, expected_q_s16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, int, s, 16, 8, float, f, 16, 8, expected_q_s16_10);\n+#endif\n \n   /* vreinterpretq_s32_xx.  */\n   TEST_VREINTERPRET(q, int, s, 32, 4, int, s, 8, 16, expected_q_s32_1);\n@@ -824,7 +850,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, int, s, 32, 4, uint, u, 64, 2, expected_q_s32_7);\n   TEST_VREINTERPRET(q, int, s, 32, 4, poly, p, 8, 16, expected_q_s32_8);\n   TEST_VREINTERPRET(q, int, s, 32, 4, poly, p, 16, 8, expected_q_s32_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, int, s, 32, 4, float, f, 16, 8, expected_q_s32_10);\n+#endif\n \n   /* vreinterpretq_s64_xx.  */\n   TEST_VREINTERPRET(q, int, s, 64, 2, int, s, 8, 16, expected_q_s64_1);\n@@ -836,7 +864,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, int, s, 64, 2, uint, u, 64, 2, expected_q_s64_7);\n   TEST_VREINTERPRET(q, int, s, 64, 2, poly, p, 8, 16, expected_q_s64_8);\n   TEST_VREINTERPRET(q, int, s, 64, 2, poly, p, 16, 8, expected_q_s64_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, int, s, 64, 2, float, f, 16, 8, expected_q_s64_10);\n+#endif\n \n   /* vreinterpretq_u8_xx.  */\n   TEST_VREINTERPRET(q, uint, u, 8, 16, int, s, 8, 16, expected_q_u8_1);\n@@ -848,7 +878,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, uint, u, 8, 16, uint, u, 64, 2, expected_q_u8_7);\n   TEST_VREINTERPRET(q, uint, u, 8, 16, poly, p, 8, 16, expected_q_u8_8);\n   TEST_VREINTERPRET(q, uint, u, 8, 16, poly, p, 16, 8, expected_q_u8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, uint, u, 8, 16, float, f, 16, 8, expected_q_u8_10);\n+#endif\n \n   /* vreinterpretq_u16_xx.  */\n   TEST_VREINTERPRET(q, uint, u, 16, 8, int, s, 8, 16, expected_q_u16_1);\n@@ -860,7 +892,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, uint, u, 16, 8, uint, u, 64, 2, expected_q_u16_7);\n   TEST_VREINTERPRET(q, uint, u, 16, 8, poly, p, 8, 16, expected_q_u16_8);\n   TEST_VREINTERPRET(q, uint, u, 16, 8, poly, p, 16, 8, expected_q_u16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, uint, u, 16, 8, float, f, 16, 8, expected_q_u16_10);\n+#endif\n \n   /* vreinterpretq_u32_xx.  */\n   TEST_VREINTERPRET(q, uint, u, 32, 4, int, s, 8, 16, expected_q_u32_1);\n@@ -872,7 +906,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, uint, u, 32, 4, uint, u, 64, 2, expected_q_u32_7);\n   TEST_VREINTERPRET(q, uint, u, 32, 4, poly, p, 8, 16, expected_q_u32_8);\n   TEST_VREINTERPRET(q, uint, u, 32, 4, poly, p, 16, 8, expected_q_u32_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, uint, u, 32, 4, float, f, 16, 8, expected_q_u32_10);\n+#endif\n \n   /* vreinterpretq_u64_xx.  */\n   TEST_VREINTERPRET(q, uint, u, 64, 2, int, s, 8, 16, expected_q_u64_1);\n@@ -884,7 +920,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, uint, u, 64, 2, uint, u, 32, 4, expected_q_u64_7);\n   TEST_VREINTERPRET(q, uint, u, 64, 2, poly, p, 8, 16, expected_q_u64_8);\n   TEST_VREINTERPRET(q, uint, u, 64, 2, poly, p, 16, 8, expected_q_u64_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, uint, u, 64, 2, float, f, 16, 8, expected_q_u64_10);\n+#endif\n \n   /* vreinterpretq_p8_xx.  */\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, int, s, 8, 16, expected_q_p8_1);\n@@ -896,7 +934,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, uint, u, 32, 4, expected_q_p8_7);\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, uint, u, 64, 2, expected_q_p8_8);\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, poly, p, 16, 8, expected_q_p8_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, float, f, 16, 8, expected_q_p8_10);\n+#endif\n \n   /* vreinterpretq_p16_xx.  */\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, int, s, 8, 16, expected_q_p16_1);\n@@ -908,7 +948,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, uint, u, 32, 4, expected_q_p16_7);\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, uint, u, 64, 2, expected_q_p16_8);\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, poly, p, 8, 16, expected_q_p16_9);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, float, f, 16, 8, expected_q_p16_10);\n+#endif\n \n   /* vreinterpret_f32_xx.  */\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, int, s, 8, 8, expected_f32_1);\n@@ -921,7 +963,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, uint, u, 64, 1, expected_f32_8);\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, poly, p, 8, 8, expected_f32_9);\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, poly, p, 16, 4, expected_f32_10);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, float, f, 16, 4, expected_f32_11);\n+#endif\n \n   /* vreinterpretq_f32_xx.  */\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, int, s, 8, 16, expected_q_f32_1);\n@@ -934,7 +978,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, uint, u, 64, 2, expected_q_f32_8);\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, poly, p, 8, 16, expected_q_f32_9);\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, poly, p, 16, 8, expected_q_f32_10);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, float, f, 16, 8, expected_q_f32_11);\n+#endif\n \n   /* vreinterpret_xx_f32.  */\n   TEST_VREINTERPRET(, int, s, 8, 8, float, f, 32, 2, expected_xx_f32_1);\n@@ -947,7 +993,9 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(, uint, u, 64, 1, float, f, 32, 2, expected_xx_f32_8);\n   TEST_VREINTERPRET_POLY(, poly, p, 8, 8, float, f, 32, 2, expected_xx_f32_9);\n   TEST_VREINTERPRET_POLY(, poly, p, 16, 4, float, f, 32, 2, expected_xx_f32_10);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(, float, f, 16, 4, float, f, 32, 2, expected_xx_f32_11);\n+#endif\n \n   /* vreinterpretq_xx_f32.  */\n   TEST_VREINTERPRET(q, int, s, 8, 16, float, f, 32, 4, expected_q_xx_f32_1);\n@@ -960,6 +1008,7 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET(q, uint, u, 64, 2, float, f, 32, 4, expected_q_xx_f32_8);\n   TEST_VREINTERPRET_POLY(q, poly, p, 8, 16, float, f, 32, 4, expected_q_xx_f32_9);\n   TEST_VREINTERPRET_POLY(q, poly, p, 16, 8, float, f, 32, 4, expected_q_xx_f32_10);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, float, f, 32, 4, expected_q_xx_f32_11);\n \n   /* vreinterpret_f16_xx.  */\n@@ -985,6 +1034,7 @@ void exec_vreinterpret (void)\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, uint, u, 64, 2, expected_q_f16_8);\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, poly, p, 8, 16, expected_q_f16_9);\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, poly, p, 16, 8, expected_q_f16_10);\n+#endif\n }\n \n int main (void)"}, {"sha": "808641524c47b2c245ee2f10e74a784a7bccefc9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p128.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p128.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -86,7 +86,9 @@ int main (void)\n \n   TEST_MACRO_128BITS_VARIANTS_2_5(VLOAD, vreint_vector, buffer);\n   VLOAD(vreint_vector, buffer, q, poly, p, 64, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   VLOAD(vreint_vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vreint_vector, buffer, q, float, f, 32, 4);\n \n   /* vreinterpretq_p128_* tests.  */\n@@ -115,7 +117,9 @@ int main (void)\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, uint, u, 64, 2, vreint_expected_q_p128_u64);\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, poly, p, 8, 16, vreint_expected_q_p128_p8);\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, poly, p, 16, 8, vreint_expected_q_p128_p16);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, float, f, 16, 8, vreint_expected_q_p128_f16);\n+#endif\n   TEST_VREINTERPRET128(q, poly, p, 128, 1, float, f, 32, 4, vreint_expected_q_p128_f32);\n \n   /* vreinterpretq_*_p128 tests.  */\n@@ -153,7 +157,9 @@ int main (void)\n   TEST_VREINTERPRET_FROM_P128(q, uint, u, 64, 2, poly, p, 128, 1, vreint_expected_q_u64_p128);\n   TEST_VREINTERPRET_FROM_P128(q, poly, p, 8, 16, poly, p, 128, 1, vreint_expected_q_p8_p128);\n   TEST_VREINTERPRET_FROM_P128(q, poly, p, 16, 8, poly, p, 128, 1, vreint_expected_q_p16_p128);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP_FROM_P128(q, float, f, 16, 8, poly, p, 128, 1, vreint_expected_q_f16_p128);\n+#endif\n   TEST_VREINTERPRET_FP_FROM_P128(q, float, f, 32, 4, poly, p, 128, 1, vreint_expected_q_f32_p128);\n \n   return 0;"}, {"sha": "1d8cf9aa69f0b5b0717e98de613e3c350d6395d4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vreinterpret_p64.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvreinterpret_p64.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -132,8 +132,10 @@ int main (void)\n   TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vreint_vector, buffer);\n   VLOAD(vreint_vector, buffer, , poly, p, 64, 1);\n   VLOAD(vreint_vector, buffer, q, poly, p, 64, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   VLOAD(vreint_vector, buffer, , float, f, 16, 4);\n   VLOAD(vreint_vector, buffer, q, float, f, 16, 8);\n+#endif\n   VLOAD(vreint_vector, buffer, , float, f, 32, 2);\n   VLOAD(vreint_vector, buffer, q, float, f, 32, 4);\n \n@@ -150,7 +152,9 @@ int main (void)\n   TEST_VREINTERPRET(, poly, p, 64, 1, uint, u, 64, 1, vreint_expected_p64_u64);\n   TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 8, 8, vreint_expected_p64_p8);\n   TEST_VREINTERPRET(, poly, p, 64, 1, poly, p, 16, 4, vreint_expected_p64_p16);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(, poly, p, 64, 1, float, f, 16, 4, vreint_expected_p64_f16);\n+#endif\n   TEST_VREINTERPRET(, poly, p, 64, 1, float, f, 32, 2, vreint_expected_p64_f32);\n \n   /* vreinterpretq_p64_* tests.  */\n@@ -166,7 +170,9 @@ int main (void)\n   TEST_VREINTERPRET(q, poly, p, 64, 2, uint, u, 64, 2, vreint_expected_q_p64_u64);\n   TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 8, 16, vreint_expected_q_p64_p8);\n   TEST_VREINTERPRET(q, poly, p, 64, 2, poly, p, 16, 8, vreint_expected_q_p64_p16);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET(q, poly, p, 64, 2, float, f, 16, 8, vreint_expected_q_p64_f16);\n+#endif\n   TEST_VREINTERPRET(q, poly, p, 64, 2, float, f, 32, 4, vreint_expected_q_p64_f32);\n \n   /* vreinterpret_*_p64 tests.  */\n@@ -183,7 +189,9 @@ int main (void)\n   TEST_VREINTERPRET(, uint, u, 64, 1, poly, p, 64, 1, vreint_expected_u64_p64);\n   TEST_VREINTERPRET(, poly, p, 8, 8, poly, p, 64, 1, vreint_expected_p8_p64);\n   TEST_VREINTERPRET(, poly, p, 16, 4, poly, p, 64, 1, vreint_expected_p16_p64);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(, float, f, 16, 4, poly, p, 64, 1, vreint_expected_f16_p64);\n+#endif\n   TEST_VREINTERPRET_FP(, float, f, 32, 2, poly, p, 64, 1, vreint_expected_f32_p64);\n   TEST_VREINTERPRET(q, int, s, 8, 16, poly, p, 64, 2, vreint_expected_q_s8_p64);\n   TEST_VREINTERPRET(q, int, s, 16, 8, poly, p, 64, 2, vreint_expected_q_s16_p64);\n@@ -195,7 +203,9 @@ int main (void)\n   TEST_VREINTERPRET(q, uint, u, 64, 2, poly, p, 64, 2, vreint_expected_q_u64_p64);\n   TEST_VREINTERPRET(q, poly, p, 8, 16, poly, p, 64, 2, vreint_expected_q_p8_p64);\n   TEST_VREINTERPRET(q, poly, p, 16, 8, poly, p, 64, 2, vreint_expected_q_p16_p64);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n   TEST_VREINTERPRET_FP(q, float, f, 16, 8, poly, p, 64, 2, vreint_expected_q_f16_p64);\n+#endif\n   TEST_VREINTERPRET_FP(q, float, f, 32, 4, poly, p, 64, 2, vreint_expected_q_f32_p64);\n \n   return 0;"}, {"sha": "6c4ccf2ba02c0c0c566ecfad272d52750f676fee", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst2_lane_f16 (float16_t * p, float16x4x2_t v)"}, {"sha": "a2f7abbc422deb81c8a29a660b5f61127d9bfd45", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst2q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst2q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst2q_lane_f16 (float16_t * p, float16x8x2_t v)"}, {"sha": "1538f6507eede02261c96e3e3ccc2b36385b2619", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst3_lane_f16 (float16_t * p, float16x4x3_t v)"}, {"sha": "8901c801b4bb4a1962c9b67e51ebdc6097ba1eee", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst3q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst3q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst3q_lane_f16 (float16_t * p, float16x8x3_t v)"}, {"sha": "141e6b5db8a930e639521f11a989c82d81395cf6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst4_lane_f16 (float16_t * p, float16x4x4_t v)"}, {"sha": "2f18cd1d2f2eb83ed8905175e3e9a9d680f341e5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vst4q_lane_f16_indices_1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvst4q_lane_f16_indices_1.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -2,6 +2,7 @@\n \n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_neon_fp16_ok { target { arm*-*-* } } } */\n \n void\n f_vst4q_lane_f16 (float16_t * p, float16x8x4_t v)"}, {"sha": "f5bf3bd325fa05e330d766dc0a93582d6c12e8c8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vstX_lane.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65ffc79534154d83d1fb456ee7c1c306ce37899/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2FvstX_lane.c?ref=b65ffc79534154d83d1fb456ee7c1c306ce37899", "patch": "@@ -256,7 +256,9 @@ VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 32, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, uint, 64, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 8, 2);\n VECT_VAR_DECL_INIT(buffer_vld2_lane, poly, 16, 2);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 16, 2);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld2_lane, float, 32, 2);\n \n /* Input buffers for vld3_lane.  */\n@@ -270,7 +272,9 @@ VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 32, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, uint, 64, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 8, 3);\n VECT_VAR_DECL_INIT(buffer_vld3_lane, poly, 16, 3);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 16, 3);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld3_lane, float, 32, 3);\n \n /* Input buffers for vld4_lane.  */\n@@ -284,7 +288,9 @@ VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 32, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, uint, 64, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 8, 4);\n VECT_VAR_DECL_INIT(buffer_vld4_lane, poly, 16, 4);\n+#if defined (__ARM_FP16_FORMAT_IEEE) || defined (__ARM_FP16_FORMAT_ALTERNATIVE)\n VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 16, 4);\n+#endif\n VECT_VAR_DECL_INIT(buffer_vld4_lane, float, 32, 4);\n \n void exec_vstX_lane (void)"}]}