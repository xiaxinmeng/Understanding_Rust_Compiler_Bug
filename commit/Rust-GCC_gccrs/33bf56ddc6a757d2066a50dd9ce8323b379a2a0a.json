{"sha": "33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzNiZjU2ZGRjNmE3NTdkMjA2NmE1MGRkOWNlODMyM2IzNzlhMmEwYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-07-28T21:55:12Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-07-28T21:56:24Z"}, "message": "middle-end: Parity and popcount folding optimizations.\n\nThis patch implements several constant folding optimizations\nfor __builtin_parity and friends.  We canonicalize popcount(x)&1\nas parity(x) in gimple, and potentially convert back again when\nwe expand to RTL.  parity(~x) is simplified to parity(x), which\nis true for all integer modes with an even number of bits.\nBut probably most usefully, parity(x)^parity(y) can be simplified\nto a parity(x^y), requiring only a single libcall or popcount.\n\nThis patch optimizes popcount and parity of an argument known to have\nat most a single bit set, to be that single bit.  Hence, popcount(x&8)\nis simplified to (x>>3)&1.   This generalizes the existing optimization\nof popcount(x&1) being simplified to x&1, which is cleaned up with\nthis patch.\n\n2020-07-28  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Richard Biener  <rguenther@suse.de>\n\ngcc/ChangeLog\n\t* match.pd (popcount(x)&1 -> parity(x)): New simplification.\n\t(parity(~x) -> parity(x)): New simplification.\n\t(parity(x)^parity(y) -> parity(x^y)): New simplification.\n\t(parity(x&1) -> x&1): New simplification.\n\t(popcount(x) -> x>>C): New simplification.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-popcount-5.c: New test.\n\t* gcc.dg/fold-parity-1.c: Likewise.\n\t* gcc.dg/fold-parity-2.c: Likewise.\n\t* gcc.dg/fold-parity-3.c: Likewise.\n\t* gcc.dg/fold-parity-4.c: Likewise.\n\t* gcc.dg/fold-parity-5.c: Likewise.", "tree": {"sha": "c874ed6ad71a51bca6395d031550dd4595a65a8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c874ed6ad71a51bca6395d031550dd4595a65a8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3665bd1111c1799c0421490b5e655f977570354", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3665bd1111c1799c0421490b5e655f977570354", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3665bd1111c1799c0421490b5e655f977570354"}], "stats": {"total": 209, "additions": 196, "deletions": 13}, "files": [{"sha": "a052c9e3dbcc49e32df6f0c39f68f9b725d317c3", "filename": "gcc/match.pd", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -5964,25 +5964,51 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (IFN_FMA @0 @1 @2))))\n \n /* POPCOUNT simplifications.  */\n-(for popcount (BUILT_IN_POPCOUNT BUILT_IN_POPCOUNTL BUILT_IN_POPCOUNTLL\n-\t       BUILT_IN_POPCOUNTIMAX)\n-  /* popcount(X&1) is nop_expr(X&1).  */\n-  (simplify\n-    (popcount @0)\n-    (if (tree_nonzero_bits (@0) == 1)\n-      (convert @0)))\n-  /* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */\n-  (simplify\n-    (plus (popcount:s @0) (popcount:s @1))\n-    (if (wi::bit_and (tree_nonzero_bits (@0), tree_nonzero_bits (@1)) == 0)\n-      (popcount (bit_ior @0 @1))))\n-  /* popcount(X) == 0 is X == 0, and related (in)equalities.  */\n+/* popcount(X) + popcount(Y) is popcount(X|Y) when X&Y must be zero.  */\n+(simplify\n+  (plus (POPCOUNT:s @0) (POPCOUNT:s @1))\n+  (if (wi::bit_and (tree_nonzero_bits (@0), tree_nonzero_bits (@1)) == 0)\n+    (POPCOUNT (bit_ior @0 @1))))\n+\n+/* popcount(X) == 0 is X == 0, and related (in)equalities.  */\n+(for popcount (POPCOUNT)\n   (for cmp (le eq ne gt)\n        rep (eq eq ne ne)\n     (simplify\n       (cmp (popcount @0) integer_zerop)\n       (rep @0 { build_zero_cst (TREE_TYPE (@0)); }))))\n \n+/* Canonicalize POPCOUNT(x)&1 as PARITY(X).  */\n+(simplify\n+  (bit_and (POPCOUNT @0) integer_onep)\n+  (PARITY @0))\n+\n+/* PARITY simplifications.  */\n+/* parity(~X) is parity(X).  */\n+(simplify\n+  (PARITY (bit_not @0))\n+  (PARITY @0))\n+\n+/* parity(X)^parity(Y) is parity(X^Y).  */\n+(simplify\n+  (bit_xor (PARITY:s @0) (PARITY:s @1))\n+  (PARITY (bit_xor @0 @1)))\n+\n+/* Common POPCOUNT/PARITY simplifications.  */\n+/* popcount(X&C1) is (X>>C2)&1 when C1 == 1<<C2.  Same for parity(X&C1).  */\n+(for pfun (POPCOUNT PARITY)\n+  (simplify\n+    (pfun @0)\n+    (with { wide_int nz = tree_nonzero_bits (@0); }\n+      (switch\n+\t(if (nz == 1)\n+\t  (convert @0))\n+\t(if (wi::popcount (nz) == 1)\n+\t  (with { tree utype = unsigned_type_for (TREE_TYPE (@0)); }\n+\t    (convert (rshift:utype (convert:utype @0)\n+\t\t\t\t   { build_int_cst (integer_type_node,\n+\t\t\t\t\t\t    wi::ctz (nz)); }))))))))\n+\n #if GIMPLE\n /* 64- and 32-bits branchless implementations of popcount are detected:\n "}, {"sha": "3ba56c7fccb0b608259b47c02b0e5baa3bdd4819", "filename": "gcc/testsuite/gcc.dg/fold-parity-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-1.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-original\" } */\n+\n+int foo(unsigned int x)\n+{\n+  return __builtin_popcount(x) & 1;\n+}\n+\n+int fool(unsigned long x)\n+{\n+  return __builtin_popcountl(x) & 1;\n+}\n+\n+int fooll(unsigned long long x)\n+{\n+  return __builtin_popcountll(x) & 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_popcount\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_parity\" 3 \"original\" } } */\n+"}, {"sha": "8c7acbfd15a141670bbb3b814072094f83171bc8", "filename": "gcc/testsuite/gcc.dg/fold-parity-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-2.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo(unsigned int x)\n+{\n+  return __builtin_parity(~x);\n+}\n+\n+int fool(unsigned long x)\n+{\n+  return __builtin_parityl(~x);\n+}\n+\n+int fooll(unsigned long long x)\n+{\n+  return __builtin_parityll(~x);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"~\" 0 \"optimized\" } } */\n+"}, {"sha": "e0355cca4a54aea48ca6bcef71a08e10b1031688", "filename": "gcc/testsuite/gcc.dg/fold-parity-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-3.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo(unsigned int x)\n+{\n+  return __builtin_parity(x&1);\n+}\n+\n+int fool(unsigned long x)\n+{\n+  return __builtin_parityl(x&1);\n+}\n+\n+int fooll(unsigned long long x)\n+{\n+  return __builtin_parityll(x&1);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_parity\" 0 \"optimized\" } } */\n+"}, {"sha": "5dfedab9180b236fc5181a314cafbd3f668c8029", "filename": "gcc/testsuite/gcc.dg/fold-parity-4.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-4.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int foo(unsigned int x, unsigned int y)\n+{\n+  return __builtin_parity(x) ^ __builtin_parity(y);\n+}\n+\n+int fool(unsigned long x, unsigned long y)\n+{\n+  return __builtin_parityl(x) ^ __builtin_parityl(y);\n+}\n+\n+int fooll(unsigned long long x, unsigned long long y)\n+{\n+  return __builtin_parityll(x) ^ __builtin_parityll(y);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"__builtin_parity\" 3 \"optimized\" } } */\n+"}, {"sha": "69d3a6a54ca7b39e63e8bfb1434bcab3501d2d40", "filename": "gcc/testsuite/gcc.dg/fold-parity-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-parity-5.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test_and4(unsigned int a)\n+{\n+  return __builtin_parity(a&4);\n+}\n+\n+int test_and4l(unsigned long b)\n+{\n+  return __builtin_parityl(b&4);\n+}\n+\n+int test_and4ll(unsigned long long c)\n+{\n+  return __builtin_parityll(c&4);\n+}\n+\n+int test_shift(unsigned int d)\n+{\n+  int bits = 8*sizeof(unsigned int)-1;\n+  return __builtin_parity(d<<31);\n+}\n+\n+int test_shiftl(unsigned long e)\n+{\n+  int bits = 8*sizeof(unsigned long)-1;\n+  return __builtin_parityl(e<<bits);\n+}\n+\n+int test_shiftll(unsigned long long f)\n+{\n+  int bits = 8*sizeof(unsigned long long)-1;\n+  return __builtin_parityll(f<<bits);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"parity\" 0 \"optimized\" } } */\n+"}, {"sha": "943726f090229042c938d80e2cf131daf229dd47", "filename": "gcc/testsuite/gcc.dg/fold-popcount-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33bf56ddc6a757d2066a50dd9ce8323b379a2a0a/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-popcount-5.c?ref=33bf56ddc6a757d2066a50dd9ce8323b379a2a0a", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+int test_and4(unsigned int a)\n+{\n+  return __builtin_popcount(a&4);\n+}\n+\n+int test_and4l(unsigned long b)\n+{\n+  return __builtin_popcountl(b&4);\n+}\n+\n+int test_and4ll(unsigned long long c)\n+{\n+  return __builtin_popcountll(c&4);\n+}\n+\n+int test_shift(unsigned int d)\n+{\n+  int bits = 8*sizeof(unsigned int)-1;\n+  return __builtin_popcount(d<<31);\n+}\n+\n+int test_shiftl(unsigned long e)\n+{\n+  int bits = 8*sizeof(unsigned long)-1;\n+  return __builtin_popcountl(e<<bits);\n+}\n+\n+int test_shiftll(unsigned long long f)\n+{\n+  int bits = 8*sizeof(unsigned long long)-1;\n+  return __builtin_popcountll(f<<bits);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"popcount\" 0 \"optimized\" } } */\n+"}]}