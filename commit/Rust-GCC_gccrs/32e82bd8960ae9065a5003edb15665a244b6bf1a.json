{"sha": "32e82bd8960ae9065a5003edb15665a244b6bf1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlODJiZDg5NjBhZTkwNjVhNTAwM2VkYjE1NjY1YTI0NGI2YmYxYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2005-04-26T00:14:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2005-04-26T00:14:35Z"}, "message": "libiberty.h (unlock_std_streams): New.\n\ninclude:\n\t* libiberty.h (unlock_std_streams): New.\n\nlibiberty:\n\t* fopen_unlocked.c (unlock_std_streams): New.\n\n\t* functions.texi: Regenerate.\n\nFrom-SVN: r98746", "tree": {"sha": "f51981e350ce82938172a24c2eac8c527d04158f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f51981e350ce82938172a24c2eac8c527d04158f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e82bd8960ae9065a5003edb15665a244b6bf1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e82bd8960ae9065a5003edb15665a244b6bf1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e82bd8960ae9065a5003edb15665a244b6bf1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e82bd8960ae9065a5003edb15665a244b6bf1a/comments", "author": null, "committer": null, "parents": [{"sha": "c2cab3e97ae95a873e8c8e8501b4196b653749e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2cab3e97ae95a873e8c8e8501b4196b653749e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2cab3e97ae95a873e8c8e8501b4196b653749e5"}], "stats": {"total": 63, "additions": 52, "deletions": 11}, "files": [{"sha": "e82f470a062e59c968ba02e9ed459f937dc6d5b3", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e82bd8960ae9065a5003edb15665a244b6bf1a/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e82bd8960ae9065a5003edb15665a244b6bf1a/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=32e82bd8960ae9065a5003edb15665a244b6bf1a", "patch": "@@ -1,3 +1,7 @@\n+2005-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* libiberty.h (unlock_std_streams): New.\n+\n 2005-04-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* hashtab.h, libiberty.h, objalloc.h, splay-tree.h, ternary.h:"}, {"sha": "215e832bb57f10b5d91f54202fd9603e01ed2e3b", "filename": "include/libiberty.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e82bd8960ae9065a5003edb15665a244b6bf1a/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e82bd8960ae9065a5003edb15665a244b6bf1a/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=32e82bd8960ae9065a5003edb15665a244b6bf1a", "patch": "@@ -54,6 +54,12 @@ extern \"C\" {\n \n extern void unlock_stream (FILE *);\n \n+/* If the OS supports it, ensure that the standard I/O streams, stdin,\n+   stdout and stderr are setup to avoid any multi-threaded locking.\n+   Otherwise do nothing.  */\n+\n+extern void unlock_std_streams (void);\n+\n /* Open and return a FILE pointer.  If the OS supports it, ensure that\n    the stream is setup to avoid any multi-threaded locking.  Otherwise\n    return the FILE pointer unchanged.  */"}, {"sha": "9956cf5dd29857f6a1583ac6d26cb76a3a73ecaf", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=32e82bd8960ae9065a5003edb15665a244b6bf1a", "patch": "@@ -1,3 +1,9 @@\n+2005-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* fopen_unlocked.c (unlock_std_streams): New.\n+\t\n+\t* functions.texi: Regenerate.\n+\n 2005-04-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* fopen_unlocked.c (unlock_stream): New."}, {"sha": "84e3be54b28acac5cc639ea89799d89a8678b5a1", "filename": "libiberty/fopen_unlocked.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2Ffopen_unlocked.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2Ffopen_unlocked.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffopen_unlocked.c?ref=32e82bd8960ae9065a5003edb15665a244b6bf1a", "patch": "@@ -28,6 +28,14 @@ pointer unchanged.  If the @var{stream} is @code{NULL} do nothing.\n \n @end deftypefn\n \n+@deftypefn Extension void unlock_std_streams (void)\n+\n+If the OS supports it, ensure that the standard I/O streams,\n+@code{stdin}, @code{stdout} and @code{stderr} are setup to avoid any\n+multi-threaded locking.  Otherwise do nothing.\n+\n+@end deftypefn\n+\n @deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n@@ -80,11 +88,19 @@ unlock_1 (FILE *const fp ATTRIBUTE_UNUSED)\n }\n \n void\n-unlock_stream(FILE *fp)\n+unlock_stream (FILE *fp)\n {\n   unlock_1 (fp);\n }\n \n+void\n+unlock_std_streams (void)\n+{\n+  unlock_1 (stdin);\n+  unlock_1 (stdout);\n+  unlock_1 (stderr);\n+}\n+\n FILE *\n fopen_unlocked (const char *path, const char *mode)\t\t\n {"}, {"sha": "ac97726805ae4587e0baa3597910e7c795527f80", "filename": "libiberty/functions.texi", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2Ffunctions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e82bd8960ae9065a5003edb15665a244b6bf1a/libiberty%2Ffunctions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffunctions.texi?ref=32e82bd8960ae9065a5003edb15665a244b6bf1a", "patch": "@@ -176,7 +176,7 @@ the possibility of a GCC built-in function.\n \n @end deftypefn\n \n-@c asprintf.c:29\n+@c asprintf.c:32\n @deftypefn Extension int asprintf (char **@var{resptr}, const char *@var{format}, ...)\n \n Like @code{sprintf}, but instead of passing a pointer to a buffer, you\n@@ -237,7 +237,7 @@ is respectively less than, matching, or greater than the array member.\n \n @end deftypefn\n \n-@c argv.c:121\n+@c argv.c:124\n @deftypefn Extension char** buildargv (char *@var{sp})\n \n Given a pointer to a string, parse the string extracting fields\n@@ -318,7 +318,7 @@ pointer encountered.  Pointers to empty strings are ignored.\n \n @end deftypefn\n \n-@c argv.c:49\n+@c argv.c:52\n @deftypefn Extension char** dupargv (char **@var{vector})\n \n Duplicate an argument vector.  Simply scans through @var{vector},\n@@ -362,7 +362,7 @@ and inode numbers.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:40\n+@c fopen_unlocked.c:48\n @deftypefn Extension FILE * fdopen_unlocked (int @var{fildes}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fdopen}.  If the\n@@ -431,7 +431,7 @@ Ignores case when performing the comparison.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:31\n+@c fopen_unlocked.c:39\n @deftypefn Extension FILE * fopen_unlocked (const char *@var{path}, const char * @var{mode})\n \n Opens and returns a @code{FILE} pointer via @code{fopen}.  If the\n@@ -441,7 +441,7 @@ unchanged.\n \n @end deftypefn\n \n-@c argv.c:94\n+@c argv.c:97\n @deftypefn Extension void freeargv (char **@var{vector})\n \n Free an argument vector that was built using @code{buildargv}.  Simply\n@@ -451,7 +451,7 @@ itself.\n \n @end deftypefn\n \n-@c fopen_unlocked.c:49\n+@c fopen_unlocked.c:57\n @deftypefn Extension FILE * freopen_unlocked (const char * @var{path}, const char * @var{mode}, FILE * @var{stream})\n \n Opens and returns a @code{FILE} pointer via @code{freopen}.  If the\n@@ -510,7 +510,7 @@ that @var{tz} be NULL.  Returns 0 on success, -1 on failure.\n \n @end deftypefn\n \n-@c hex.c:30\n+@c hex.c:33\n @deftypefn Extension void hex_init (void)\n \n Initializes the array mapping the current character set to\n@@ -520,7 +520,7 @@ default ASCII-based table will normally be used on ASCII systems.\n \n @end deftypefn\n \n-@c hex.c:39\n+@c hex.c:42\n @deftypefn Extension int hex_p (int @var{c})\n \n Evaluates to non-zero if the given character is a valid hex character,\n@@ -529,7 +529,7 @@ or zero if it is not.  Note that the value you pass will be cast to\n \n @end deftypefn\n \n-@c hex.c:47\n+@c hex.c:50\n @deftypefn Extension {unsigned int} hex_value (int @var{c})\n \n Returns the numeric equivalent of the given character when interpreted\n@@ -1201,6 +1201,15 @@ was made to unlink the file because it is special.\n \n @end deftypefn\n \n+@c fopen_unlocked.c:31\n+@deftypefn Extension void unlock_std_streams (void)\n+\n+If the OS supports it, ensure that the standard I/O streams,\n+@code{stdin}, @code{stdout} and @code{stderr} are setup to avoid any\n+multi-threaded locking.  Otherwise do nothing.\n+\n+@end deftypefn\n+\n @c fopen_unlocked.c:23\n @deftypefn Extension void unlock_stream (FILE * @var{stream})\n "}]}