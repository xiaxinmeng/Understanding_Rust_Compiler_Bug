{"sha": "00dc7877ee02634d4837d024e36b55bef6b9d49c", "node_id": "C_kwDOANBUbNoAKDAwZGM3ODc3ZWUwMjYzNGQ0ODM3ZDAyNGUzNmI1NWJlZjZiOWQ0OWM", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-18T08:06:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-18T09:27:56Z"}, "message": "tree-optimization/104064 - UBSAN issue in vect dataref analysis\n\nSince we order DRs after DR_INIT we know the difference will be\npositive and thus can avoid signed overflow issues by using\nunsigned arithmetic to produce the known unsigned result.\n\n2022-01-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/104064\n\t* tree-vect-data-refs.cc (vect_analyze_data_ref_accesses): Check\n\tDR_INIT fits in a signed HWI, represent the difference from the\n\tfirst DR in unsigned.", "tree": {"sha": "f0a89f33e9515536acaac397db675ba7fd87466f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0a89f33e9515536acaac397db675ba7fd87466f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00dc7877ee02634d4837d024e36b55bef6b9d49c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dc7877ee02634d4837d024e36b55bef6b9d49c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00dc7877ee02634d4837d024e36b55bef6b9d49c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00dc7877ee02634d4837d024e36b55bef6b9d49c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "09223baf71890b34ebed004560fafbd60691530d", "filename": "gcc/tree-vect-data-refs.cc", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00dc7877ee02634d4837d024e36b55bef6b9d49c/gcc%2Ftree-vect-data-refs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00dc7877ee02634d4837d024e36b55bef6b9d49c/gcc%2Ftree-vect-data-refs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.cc?ref=00dc7877ee02634d4837d024e36b55bef6b9d49c", "patch": "@@ -3172,8 +3172,8 @@ vect_analyze_data_ref_accesses (vec_info *vinfo,\n \t    break;\n \n \t  /* Check that the DR_INITs are compile-time constants.  */\n-\t  if (TREE_CODE (DR_INIT (dra)) != INTEGER_CST\n-\t      || TREE_CODE (DR_INIT (drb)) != INTEGER_CST)\n+\t  if (!tree_fits_shwi_p (DR_INIT (dra))\n+\t      || !tree_fits_shwi_p (DR_INIT (drb)))\n \t    break;\n \n \t  /* Different .GOMP_SIMD_LANE calls still give the same lane,\n@@ -3203,15 +3203,18 @@ vect_analyze_data_ref_accesses (vec_info *vinfo,\n \t    {\n \t      /* If init_b == init_a + the size of the type * k, we have an\n \t\t interleaving, and DRA is accessed before DRB.  */\n-\t      HOST_WIDE_INT type_size_a = tree_to_uhwi (sza);\n+\t      unsigned HOST_WIDE_INT type_size_a = tree_to_uhwi (sza);\n \t      if (type_size_a == 0\n-\t\t  || (init_b - init_a) % type_size_a != 0)\n+\t\t  || (((unsigned HOST_WIDE_INT)init_b - init_a)\n+\t\t      % type_size_a != 0))\n \t\tbreak;\n \n \t      /* If we have a store, the accesses are adjacent.  This splits\n \t\t groups into chunks we support (we don't support vectorization\n \t\t of stores with gaps).  */\n-\t      if (!DR_IS_READ (dra) && init_b - init_prev != type_size_a)\n+\t      if (!DR_IS_READ (dra)\n+\t\t  && (((unsigned HOST_WIDE_INT)init_b - init_prev)\n+\t\t      != type_size_a))\n \t\tbreak;\n \n \t      /* If the step (if not zero or non-constant) is smaller than the\n@@ -3222,7 +3225,7 @@ vect_analyze_data_ref_accesses (vec_info *vinfo,\n \t\t  unsigned HOST_WIDE_INT step\n \t\t    = absu_hwi (tree_to_shwi (DR_STEP (dra)));\n \t\t  if (step != 0\n-\t\t      && step <= (unsigned HOST_WIDE_INT)(init_b - init_a))\n+\t\t      && step <= ((unsigned HOST_WIDE_INT)init_b - init_a))\n \t\t    break;\n \t\t}\n \t    }"}]}