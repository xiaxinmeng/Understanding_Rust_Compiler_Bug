{"sha": "32e209e4f9619ea1c18a56d758d445326c5421b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlMjA5ZTRmOTYxOWVhMWMxOGE1NmQ3NThkNDQ1MzI2YzU0MjFiNA==", "commit": {"author": {"name": "Cyrille Comar", "email": "comar@adacore.com", "date": "2005-11-15T14:05:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-11-15T14:05:45Z"}, "message": "gnat_ugn.texi: Document that -fstack-check is needed for strict compliance with the Ada 95...\n\n2005-11-14  Cyrille Comar  <comar@adacore.com>\n\t    Robert Dewar  <dewar@adacore.com>\n\t    Vincent Celier  <celier@adacore.com>\n\t    Ben Brosgol  <brosgol@adacore.com>\n\t    Jose Ruiz  <ruiz@adacore.com>\n\t    Pascal Obry  <obry@adacore.com>\n\n\t* gnat_ugn.texi: \n\tDocument that -fstack-check is needed for strict compliance with the\n\tAda 95 Reference Manual.\n\tCorrect reference to VAX systems to meet HP guidelines\n\tAdd documentation for new gnatmake switches -vl, -vm and -vh\n\tReplace DEC Ada by HP Ada\n\tReplace DIGITAL by HP\n\tRemove empty section on tools in compatibility section\n\tClarify the Windows convention semantics.\n\tDocument the Win32 calling convention.\n\tThe Stdcall, Win32 and DLL convention are synonyms.\n\tAdd a note in -gnatR description about zero size record components\n\tNote on new >= and <= warnings for -gnatwc\n\tDocument that equal sign after -gnatm is optional.\n\tNote that strip is working fine on DLL built with a Library\n\tProject. The restriction apply only to DLL built with gnatdll.\n\tUpdate section about the way to debug a DLL.\n\tUpdate information about the DLL convention.\n\tDocument -C switch for gnatprep\n\tDocument new attribute Library_ALI_Dir\n\tUpdate elaboration doc to include implicit Elaborate pragmas now\n\tgenerated for subprogram instantiations.\n\tDocument limitation on executable names that include spaces for --GCC,\n\t--GNATBIND, and --GNATLINK switches.\n\tDocument that -w causes -gnatws to be added at start of gcc switches\n\n\t* gnat_rm.texi: Document that -mieee is needed for generating infinite\n\tand NaN values in case of overflow on machines that are not fully\n\tcompliant with the IEEE floating-point standard.\n\tCreate a section describing the set of compiler options needed for\n\tstrict compliance with the Ada 95 Reference Manual.\n\tAdd documentation for pragma Obsolescent applied to a package\n\tClarify potential issues of mixed language programs related to the\n\tI/O buffering enabling in the elaboration of the GNAT runtime.\n\tAdd extra documentation for pragma Restrictions (No_Elaboration_Code)\n\tThis documentation only patch adds extra documentsion for pragma\n\tRestrictions (No_Elaboration_Code), explaining why it is not possible\n\tto document this restriction in terms of allowed source constructs.\n\tDocument string literal form of pragma Warnings\n\tDocument new attribute Library_ALI_Dir\n\tAdd documentation on stable attributes in project files that was missing\n\n\t* gnat-style.texi: Indicate that paragraphs within a single comment\n\tshould be separated by empty comment lines\n\n\t* ug_words: Added replacements for -gnat95 and -gnat05 (/95 and\n\t/05 respectively)\n\n\t* bindusg.adb: Minor cleanup, put -m before -M for consistency\n\nFrom-SVN: r107015", "tree": {"sha": "8d5355da7b88811e672c12f0b28bd25448556609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5355da7b88811e672c12f0b28bd25448556609"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32e209e4f9619ea1c18a56d758d445326c5421b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e209e4f9619ea1c18a56d758d445326c5421b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e209e4f9619ea1c18a56d758d445326c5421b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e209e4f9619ea1c18a56d758d445326c5421b4/comments", "author": {"login": "CyrilleComar", "id": 18616717, "node_id": "MDQ6VXNlcjE4NjE2NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/18616717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CyrilleComar", "html_url": "https://github.com/CyrilleComar", "followers_url": "https://api.github.com/users/CyrilleComar/followers", "following_url": "https://api.github.com/users/CyrilleComar/following{/other_user}", "gists_url": "https://api.github.com/users/CyrilleComar/gists{/gist_id}", "starred_url": "https://api.github.com/users/CyrilleComar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CyrilleComar/subscriptions", "organizations_url": "https://api.github.com/users/CyrilleComar/orgs", "repos_url": "https://api.github.com/users/CyrilleComar/repos", "events_url": "https://api.github.com/users/CyrilleComar/events{/privacy}", "received_events_url": "https://api.github.com/users/CyrilleComar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa63543913b12c7774820c8761b935be8ad0ea64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa63543913b12c7774820c8761b935be8ad0ea64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa63543913b12c7774820c8761b935be8ad0ea64"}], "stats": {"total": 1155, "additions": 798, "deletions": 357}, "files": [{"sha": "667c982efb9c5019f8b86372c6590ba5db781242", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=32e209e4f9619ea1c18a56d758d445326c5421b4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -132,17 +132,17 @@ begin\n    Write_Str (\"renamed to xyzinit/final, implies -n\");\n    Write_Eol;\n \n-   --  Line for -M switch\n-\n-   Write_Str (\"  -Mxyz     Rename generated main program from main to xyz\");\n-   Write_Eol;\n-\n    --  Line for -m switch\n \n    Write_Str (\"  -mnnn     Limit number of detected error\");\n    Write_Str (\"s to nnn (1-999999)\");\n    Write_Eol;\n \n+   --  Line for -M switch\n+\n+   Write_Str (\"  -Mxyz     Rename generated main program from main to xyz\");\n+   Write_Eol;\n+\n    --  Line for -n switch\n \n    Write_Str (\"  -n        No Ada main program (foreign main routine)\");"}, {"sha": "c681b5286a11d5e1f1e6d57138c7c9b8917ab8c4", "filename": "gcc/ada/gnat-style.texi", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat-style.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat-style.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat-style.texi?ref=32e209e4f9619ea1c18a56d758d445326c5421b4", "patch": "@@ -5,9 +5,9 @@\n @c                                                                            o\n @c                           GNAT DOCUMENTATION                               o\n @c                                                                            o\n-@c                      G N A T   C O D I N G   S T Y L E                     o\n+@c                     G N A T   C O D I N G   S T Y L E                      o\n @c                                                                            o\n-@c          Copyright (C) 1992-2005 Ada Core Technologies, Inc.               o\n+@c                     Copyright (C) 1992-2005, AdaCore                       o\n @c                                                                            o\n @c  GNAT is free software;  you can  redistribute it  and/or modify it under  o\n @c  terms of the  GNU General Public License as published  by the Free Soft-  o\n@@ -262,7 +262,8 @@ the first letter of the comment).\n When declarations are commented with ``hanging'' comments, i.e.@:\n comments after the declaration, there is no blank line before the\n comment, and if it is absolutely necessary to have blank lines within\n-the comments these blank lines @emph{do} have a @code{--} (unlike the\n+the comments, e.g. to make paragraph separations within a single comment,\n+these blank lines @emph{do} have a @code{--} (unlike the\n normal rule, which is to use entirely blank lines for separating\n comment paragraphs).  The comment starts at same level of indentation\n as code it is commenting."}, {"sha": "6c60f418ec3b40aea50c33329bce04d2e12d7b1f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 366, "deletions": 53, "changes": 419, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=32e209e4f9619ea1c18a56d758d445326c5421b4", "patch": "@@ -399,6 +399,7 @@ Implementation of Specific Ada Features\n * GNAT Implementation of Shared Passive Packages::\n * Code Generation for Array Aggregates::\n * The Size of Discriminated Records with Default Discriminants::\n+* Strict Conformance to the Ada 95 Reference Manual::\n \n Project File Reference\n \n@@ -2036,7 +2037,7 @@ description of the @code{GNAT LIBRARY} command in the OpenVMS version\n of the GNAT Users Guide for details on the use of this command.\n \n The two argument form specifies the representation to be used for\n-the specified floating-poin type. On all systems other than OpenVMS,\n+the specified floating-point type. On all systems other than OpenVMS,\n the argument must\n be @code{IEEE_Float} and the pragma has no effect. On OpenVMS, the\n argument may be @code{VAX_Float} to specify the use of the VAX float\n@@ -2597,8 +2598,7 @@ therefore cannot be @code{with}'ed by a restricted unit.\n This is used for a unit licensed under the GNAT modified GPL that includes\n a special exception paragraph that specifically permits the inclusion of\n the unit in programs without requiring the entire program to be released\n-under the GPL@.  This is the license used for the GNAT run-time which ensures\n-that the run-time can be used freely in any program without GPL concerns.\n+under the GPL@.\n \n @item Restricted\n This is used for a unit that is restricted in that it is not permitted to\n@@ -2927,7 +2927,7 @@ statement sequence is a call to such a procedure.\n Syntax:\n \n @smallexample @c ada\n-ppragma No_Strict_Aliasing [([Entity =>] type_LOCAL_NAME)];\n+pragma No_Strict_Aliasing [([Entity =>] type_LOCAL_NAME)];\n @end smallexample\n \n @noindent\n@@ -2937,8 +2937,8 @@ strict aliasing optimization for the given type.  The form with no\n arguments is a configuration pragma which applies to all access types\n declared in units to which the pragma applies. For a detailed\n description of the strict aliasing optimization, and the situations\n-in which it must be suppressed, see section \"Optimization and Strict Aliasing\"\n-in the @value{EDITION} User's Guide.\n+in which it must be suppressed, see section\n+``Optimization and Strict Aliasing'' in the @value{EDITION} User's Guide.\n \n @node Pragma Normalize_Scalars\n @unnumberedsec Pragma Normalize_Scalars\n@@ -3028,28 +3028,34 @@ pragma Obsolescent [(static_string_EXPRESSION [,Ada_05])];\n @end smallexample\n \n @noindent\n-This pragma must occur immediately following a subprogram\n-declaration. It indicates that the associated function or procedure\n+This pragma can occur immediately following a subprogram\n+declaration in which  indicates that the associated function or procedure\n is considered obsolescent and should not be used. Typically this is\n used when an API must be modified by eventually removing or modifying\n existing subprograms. The pragma can be used at an intermediate stage\n when the subprogram is still present, but will be removed later.\n \n-The effect of this pragma is to output a warning message that the\n+The effect of this pragma is to output a warning message on\n+a call to a program thus marked that the\n subprogram is obsolescent if the appropriate warning option in the\n compiler is activated. If a parameter is present, then a second\n warning message is given containing this text.\n-\n In addition, a call to such a program is considered a violation of\n pragma Restrictions (No_Obsolescent_Features).\n \n+This pragma can also be used as a program unit pragma for a package,\n+in which case it indicates that the entire package is considered\n+obsolescent. In this case a client @code{with}'ing such a package\n+violates the restriction, and the @code{with} statement is\n+flagged with warnings if the warning option is set.\n+\n If the optional second parameter is present (which must be exactly\n the identifier Ada_05, no other argument is allowed), then the\n indication of obsolescence applies only when compiling in Ada 2005\n mode. This is primarily intended for dealing with the situations\n-in the predefined library where subprograms have become defined\n-as obsolescent in Ada 2005 (e.g. in Ada.Characters.Handling), but\n-may be used anywhere.\n+in the predefined library where subprograms or packages\n+have become definedas obsolescent in Ada 2005\n+(e.g. in Ada.Characters.Handling), but may be used anywhere.\n \n @node Pragma Passive\n @unnumberedsec Pragma Passive\n@@ -4273,6 +4279,7 @@ Syntax:\n \n @smallexample @c ada\n pragma Warnings (On | Off [, local_NAME]);\n+pragma Warnings (static_string_EXPRESSION);\n @end smallexample\n \n @noindent\n@@ -4290,6 +4297,66 @@ the specified entity.  This suppression is effective from the point where\n it occurs till the end of the extended scope of the variable (similar to\n the scope of @code{Suppress}).\n \n+The form with a static_string_EXPRESSION argument provides more precise\n+control over which warnings are active. The string is a list of letters\n+specifying which warnings are to be activated and which deactivated. The\n+code for these letters is the same as the string used in the command\n+line switch controlling warnings. The following is a brief summary. For\n+full details see the GNAT Users Guide:\n+\n+@smallexample\n+a   turn on all optional warnings (except d,h,l)\n+A   turn off all optional warnings\n+b   turn on warnings for bad fixed value (not multiple of small)\n+B   turn off warnings for bad fixed value (not multiple of small)\n+c   turn on warnings for constant conditional\n+C   turn off warnings for constant conditional\n+d   turn on warnings for implicit dereference\n+D   turn off warnings for implicit dereference\n+e   treat all warnings as errors\n+f   turn on warnings for unreferenced formal\n+F   turn off warnings for unreferenced formal\n+g   turn on warnings for unrecognized pragma\n+G   turn off warnings for unrecognized pragma\n+h   turn on warnings for hiding variable\n+H   turn off warnings for hiding variable\n+i   turn on warnings for implementation unit\n+I   turn off warnings for implementation unit\n+j   turn on warnings for obsolescent (annex J) feature\n+J   turn off warnings for obsolescent (annex J) feature\n+k   turn on warnings on constant variable\n+K   turn off warnings on constant variable\n+l   turn on warnings for missing elaboration pragma\n+L   turn off warnings for missing elaboration pragma\n+m   turn on warnings for variable assigned but not read\n+M   turn off warnings for variable assigned but not read\n+n   normal warning mode (cancels s/e)\n+o   turn on warnings for address clause overlay\n+O   turn off warnings for address clause overlay\n+p   turn on warnings for ineffective pragma Inline\n+P   turn off warnings for ineffective pragma Inline\n+r   turn on warnings for redundant construct\n+R   turn off warnings for redundant construct\n+s   suppress all warnings\n+u   turn on warnings for unused entity\n+U   turn off warnings for unused entity\n+v   turn on warnings for unassigned variable\n+V   turn off warnings for unassigned variable\n+x   turn on warnings for export/import\n+X   turn off warnings for export/import\n+y   turn on warnings for Ada 2005 incompatibility\n+Y   turn off warnings for Ada 2005 incompatibility\n+z   turn on size/align warnings for unchecked conversion\n+Z   turn off size/align warnings for unchecked conversion\n+@end smallexample\n+\n+@noindent\n+The specified warnings will be in effect until the end of the program\n+or another pragma Warnings is encountered. The effect of the pragma is\n+cumulative. Initially the set of warnings is the standard default set\n+as possibly modified by compiler switches. Then each pragma Warning\n+modifies this set of warnings as specified.\n+\n @node Pragma Weak_External\n @unnumberedsec Pragma Weak_External\n @findex Weak_External\n@@ -7475,10 +7542,28 @@ but for which no elaboration code is generated.  Generally, it is\n the case that preelaborable units will meet the restrictions, with\n the exception of large aggregates initialized with an others_clause,\n and exception declarations (which generate calls to a run-time\n-registry procedure).  Note that this restriction is enforced on\n+registry procedure).  This restriction is enforced on\n a unit by unit basis, it need not be obeyed consistently\n throughout a partition.\n \n+It is not possible to precisely document\n+the constructs which are compatible with this restriction, since,\n+unlike most other restrictions, this is not a restriction on the\n+source code, but a restriction on the generated object code. For\n+example, if the source contains a declaration:\n+\n+@smallexample\n+   Val : constant Integer := X;\n+@end smallexample\n+\n+@noindent\n+where X is not a static constant, it may be possible, depending\n+on complex optimization circuitry, for the compiler to figure\n+out the value of X at compile time, in which case this initialization\n+can be done by the loader, and requires no initialization code. It\n+is not possible to document the precise conditions under which the\n+optimizer can figure this out.\n+\n @item No_Entry_Queue\n @findex No_Entry_Queue\n This restriction is a declaration that any protected entry compiled in\n@@ -8271,9 +8356,15 @@ overflow situations, when the @code{Machine_Overflows} attribute of the\n result type is @code{False}.  See G.2.1(13).\n @end cartouche\n @noindent\n-Infinite and Nan values are produced as dictated by the IEEE\n+Infinite and NaN values are produced as dictated by the IEEE\n floating-point standard.\n \n+Note that on machines that are not fully compliant with the IEEE\n+floating-point standard, such as Alpha, the @option{-mieee} compiler flag\n+must be used for achieving IEEE confirming behavior (although at the cost\n+of a significant performance penalty), so infinite and NaN values are\n+properly generated.\n+\n @sp 1\n @cartouche\n @noindent\n@@ -10399,8 +10490,9 @@ purposes the description in the Ada 95\n reference manual, or appropriate Ada\n text book, will be sufficient for making use of these facilities.\n \n-In the case of the input-output facilities, @xref{The Implementation of\n-Standard I/O}, gives details on exactly how GNAT interfaces to the\n+In the case of the input-output facilities,\n+@xref{The Implementation of Standard I/O},\n+gives details on exactly how GNAT interfaces to the\n file system.  For the remaining packages, the Ada 95 reference manual\n should be sufficient.  The following is a list of the packages included,\n together with a brief description of the functionality that is provided.\n@@ -10979,10 +11071,16 @@ All input/output operations use @code{fread}/@code{fwrite}.\n @end itemize\n \n @noindent\n-There is no internal buffering of any kind at the Ada library level.  The\n-only buffering is that provided at the system level in the\n-implementation of the C library routines that support streams.  This\n-facilitates shared use of these streams by mixed language programs.\n+There is no internal buffering of any kind at the Ada library level. The only\n+buffering is that provided at the system level in the implementation of the\n+library routines that support streams. This facilitates shared use of these\n+streams by mixed language programs. Note though that system level buffering is\n+explictly enabled at elaboration of the standard I/O packages and that can have\n+an impact on mixed language programs, in particular those using I/O before\n+calling the Ada elaboration routine (e.g. adainit). It is recommended to call\n+the Ada elaboration routine before performing any I/O or when impractical, flush\n+the common I/O streams and in particular Standard_Output before elaborating the\n+Ada code.\n \n @node FORM Strings\n @section FORM Strings\n@@ -13480,6 +13578,7 @@ facilities.\n * GNAT Implementation of Shared Passive Packages::\n * Code Generation for Array Aggregates::\n * The Size of Discriminated Records with Default Discriminants::\n+* Strict Conformance to the Ada 95 Reference Manual::\n @end menu\n \n @node Machine Code Insertions\n@@ -14113,7 +14212,33 @@ aliasing all views of the object (which may be manipulated by different tasks,\n say) must be consistent, so it is imperative that the object, once created,\n remain invariant.\n \n+@node Strict Conformance to the Ada 95 Reference Manual\n+@section Strict Conformance to the Ada 95 Reference Manual\n+\n+@noindent\n+The dynamic semantics defined by the Ada 95 Reference Manual impose a set of\n+run-time checks to be generated. By default, the GNAT compiler will insert many\n+run-time checks into the compiled code, including most of those required by the\n+Ada 95 Reference Manual. However, there are three checks that are not enabled\n+in the default mode for efficiency reasons: arithmetic overflow checking for\n+integer operations (including division by zero), checks for access before\n+elaboration on subprogram calls, and stack overflow checking (most operating\n+systems do not perform this check by default).\n+\n+Strict conformance to the Ada 95 Reference Manual can be achieved by adding\n+three compiler options for overflow checking for integer operations\n+(@option{-gnato}), dynamic checks for access-before-elaboration on subprogram\n+calls and generic instantiations (@option{-gnatE}), and stack overflow\n+checking (@option{-fstack-check}).\n \n+Note that the result of a floating point arithmetic operation in overflow and\n+invalid situations, when the @code{Machine_Overflows} attribute of the result\n+type is @code{False}, is to generate IEEE NaN and infinite values. This is the\n+case for machines compliant with the IEEE floating-point standard, but on\n+machines that are not fully compliant with this standard, such as Alpha, the\n+@option{-mieee} compiler flag must be used for achieving IEEE confirming\n+behavior (although at the cost of a significant performance penalty), so\n+infinite and and NaN values are properly generated.\n \n \n @node Project File Reference\n@@ -14431,7 +14556,55 @@ for building shared libraries.\n Expression must be a path name. The attribute defines the\n directory in which the sources of the interfaces of a Stand-alone Library will\n be copied.  The directory must exist, must be distinct from the project's\n-object directory and source directories, and must be writable.\n+object directory and source directories of all project in the project tree,\n+and must be writable.\n+\n+@item  Library_Src_Dir\n+Expression must be a path name. The attribute defines the\n+directory in which the ALI files of a Library will\n+be copied.  The directory must exist, must be distinct from the project's\n+object directory and source directoriesof all project in the project tree,\n+and must be writable.\n+\n+@item  Library_Symbol_File\n+Expression must be a single string. Its value is the single file name of a\n+symbol file to be created when building a stand-alone library when the\n+symbol policy is either \"compliant\", \"controlled\" or \"restricted\",\n+on platforms that support symbol control, such as VMS.\n+\n+@item   Library_Reference_Symbol_File\n+Expression must be a single string. Its value is the single file name of a\n+reference symbol file that is read when the symbol policy is either\n+\"compliant\" or \"controlled\", on platforms that support symbol control,\n+such as VMS, when building a stand-alone library.\n+\n+@item  Library_Symbol_Policy\n+Expression must be a single string. Its case-insensitive value can only be\n+\"autonomous\", \"default\", \"compliant\", \"controlled\" or \"restricted\".\n+\n+This attribute is not taken into account on all platforms. It controls the\n+policy for exported symbols and, on some platforms (like VMS) that have the\n+notions of major and minor IDs built in the library files, it controls\n+the setting of these IDs.\n+\n+\"autonomous\" or \"default\": exported symbols are not controlled.\n+\n+\"compliant\": if attribute Library_Reference_Symbol_File is not defined, then\n+it is equivalent to policy \"autonomous\". If there are exported symbols in\n+the reference symbol file that are not in the object files of the interfaces,\n+the major ID of the library is increased. If there are symbols in the\n+object files of the interfaces that are not in the reference symbol file,\n+these symbols are put at the end of the list in the newly created symbol file\n+and the minor ID is increased.\n+\n+\"controlled\": the attribute Library_Reference_Symbol_File must be difined.\n+The library will fail to build if the exported symbols in the object files of\n+the interfaces do not match exactly the symbol in the symbol file.\n+\n+\"restricted\": The attribute Library_Symbol_File must be defined. The library\n+will fail to build if there are symbols in the symbol file that are not in\n+the exported symbols of the object files of the interfaces. Additional symbols\n+in the object files are not added to the symbol file.\n \n @item  Main\n Expression must be a list of strings that are legal file names.\n@@ -14443,6 +14616,12 @@ command, one or several executables are built and placed in the Exec_Dir.\n If the gnatmake command does not include explicit file names, the executables\n that are built correspond to the files specified by this attribute.\n \n+@item  Externally_Built\n+Expression must be a single string. Its value must be either \"true\" of \"false\",\n+case-insensitive. The default is \"false\". When the value of this attribute is\n+\"true\", no attempt is made to compile the sources or to build the library,\n+when the project is a library project.\n+\n @item Main_Language\n This is a simple attribute. Its value is a string that specifies the\n language of the main program.\n@@ -14700,27 +14879,20 @@ This is an associative array attribute. Its\n domain is a set of language names. Its range is a string list that\n specifies the compilation options to be used when compiling a component\n written in that language, for which no file-specific switches have been\n-specified..\n+specified.\n \n @item  Switches\n This is an associative array attribute. Its domain is\n a set of file names. Its range is a string list that specifies the\n compilation options to be used when compiling the named file. If a file\n is not specified in the Switches attribute, it is compiled with the\n-settings specified by Default_Switches.\n+options specified by Default_Switches of its language, if defined.\n \n @item  Local_Configuration_Pragmas.\n This is a simple attribute, whose\n value is a path name that designates a file containing configuration pragmas\n to be used for all invocations of the compiler for immediate sources of the\n project.\n-\n-@item Executable\n-This is an associative array attribute. Its domain is\n-a set of main source file names. Its range is a simple string that specifies\n-the executable file name to be used when linking the specified main source.\n-If a main source is not specified in the Executable attribute, the executable\n-file name is deducted from the main source file name.\n @end table\n \n @subsection package Builder\n@@ -14732,25 +14904,36 @@ following attributes apply to package @code{Builder}:\n \n @table @code\n @item Default_Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when building a main\n+written in that language, for which no file-specific switches have been\n+specified.\n \n @item Switches\n-As above.\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when building the named main file. If a main file\n+is not specified in the Switches attribute, it is built with the\n+options specified by Default_Switches of its language, if defined.\n \n @item Global_Configuration_Pragmas\n This is a simple attribute, whose\n value is a path name that designates a file that contains configuration pragmas\n to be used in every build of an executable. If both local and global\n configuration pragmas are specified, a compilation makes use of both sets.\n \n+\n @item Executable\n-This is an associative array attribute, defined over\n-compilation unit names. The image is a string that is the name of the\n-executable file corresponding to the main source file index.\n+This is an associative array attribute. Its domain is\n+a set of main source file names. Its range is a simple string that specifies\n+the executable file name to be used when linking the specified main source.\n+If a main source is not specified in the Executable attribute, the executable\n+file name is deducted from the main source file name.\n This attribute has no effect if its value is the empty string.\n \n @item Executable_Suffix\n-This is a simple attribute whose value is a suffix to be added to\n+This is a simple attribute whose value is the suffix to be added to\n the executables that don't have an attribute Executable specified.\n @end table\n \n@@ -14763,7 +14946,8 @@ The following attributes apply to package @code{Gnatls}:\n \n @table @code\n @item Switches\n-As above.\n+This is a single attribute with a string list value. Each non empty string\n+in the list is an option when invoking @code{gnatls}.\n @end table\n \n @subsection package Binder\n@@ -14775,9 +14959,18 @@ The following attributes apply to package @code{Binder}:\n \n @table @code\n @item     Default_Switches\n-As above.\n-@item     Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when binding a main\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when binding the named main file. If a main file\n+is not specified in the Switches attribute, it is boundt with the\n+options specified by Default_Switches of its language, if defined.\n @end table\n \n @subsection package Linker\n@@ -14789,9 +14982,24 @@ The following attributes apply to package @code{Linker}:\n \n @table @code\n @item     Default_Switches\n-As above\n-@item     Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when linking a main\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when linking the named main file. If a main file\n+is not specified in the Switches attribute, it is linked with the\n+options specified by Default_Switches of its language, if defined.\n+\n+@item  Linker_Options\n+This is a string list attribute. Its value specifies additional options that\n+be givent to the linker when linking an executable. This attribute is not\n+used in the main project, only in projects imported directly or indirectly.\n+\n @end table\n \n @subsection package Cross_Reference\n@@ -14804,9 +15012,19 @@ The following attributes apply to package @code{Cross_Reference}:\n \n @table @code\n @item     Default_Switches\n-As above.\n-@item     Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatxref} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatxref} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatxref} will\n+be called with the options specified by Default_Switches of its language,\n+if defined.\n @end table\n \n @subsection package   Finder\n@@ -14818,9 +15036,19 @@ The following attributes apply to package @code{Finder}:\n \n @table @code\n @item     Default_Switches\n-As above.\n-@item     Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatfind} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatfind} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatfind} will\n+be called with the options specified by Default_Switches of its language,\n+if defined.\n @end table\n \n @subsection package Pretty_Printer\n@@ -14833,9 +15061,94 @@ The following attributes apply to package @code{Pretty_Printer}:\n \n @table @code\n @item     Default_switches\n-As above.\n-@item     Switches\n-As above.\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatpp} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatpp} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatpp} will\n+be called with the options specified by Default_Switches of its language,\n+if defined.\n+@end table\n+\n+@subsection package gnatstub\n+\n+@noindent\n+The attributes of package @code{gnatstub}\n+specify the tool options to be used\n+when invoking the tool @command{gnatstub}.\n+The following attributes apply to package @code{gnatstub}:\n+\n+@table @code\n+@item     Default_switches\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatstub} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatstub} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatpp} will\n+be called with the options specified by Default_Switches of its language,\n+if defined.\n+@end table\n+\n+@subsection package Eliminate\n+\n+@noindent\n+The attributes of package @code{Eliminate}\n+specify the tool options to be used\n+when invoking the tool @command{gnatelim}.\n+The following attributes apply to package @code{Eliminate}:\n+\n+@table @code\n+@item     Default_switches\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatelim} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatelim} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatelim} will\n+be called with the options specified by Default_Switches of its language,\n+if defined.\n+@end table\n+\n+@subsection package Metrics\n+\n+@noindent\n+The attributes of package @code{Metrics}\n+specify the tool options to be used\n+when invoking the tool @command{gnatmetric}.\n+The following attributes apply to package @code{Metrics}:\n+\n+@table @code\n+@item     Default_switches\n+This is an associative array attribute. Its\n+domain is a set of language names. Its range is a string list that\n+specifies options to be used when calling @command{gnatmetric} on a source\n+written in that language, for which no file-specific switches have been\n+specified.\n+\n+@item Switches\n+This is an associative array attribute. Its domain is\n+a set of file names. Its range is a string list that specifies\n+options to be used when calling @command{gnatmetric} on the named main source.\n+If a source is not specified in the Switches attribute, @command{gnatmetric}\n+will be called with the options specified by Default_Switches of its language,\n+if defined.\n @end table\n \n @subsection  package IDE"}, {"sha": "496438ad20a75afbaedf689fe16b927d6d8872c9", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 420, "deletions": 295, "changes": 715, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=32e209e4f9619ea1c18a56d758d445326c5421b4", "patch": "@@ -7,7 +7,7 @@\n @c                                                                            o\n @c                             G N A T _ U G N                                o\n @c                                                                            o\n-@c          Copyright (C) 1992-2005 Ada Core Technologies, Inc.               o\n+@c                     Copyright (C) 1992-2005, AdaCore                       o\n @c                                                                            o\n @c  GNAT is free software;  you can  redistribute it  and/or modify it under  o\n @c  terms of the  GNU General Public License as published  by the Free Soft-  o\n@@ -195,7 +195,7 @@ AdaCore@*\n * Other Utility Programs::\n * Running and Debugging Ada Programs::\n @ifset vms\n-* Compatibility with DEC Ada::\n+* Compatibility with HP Ada::\n @end ifset\n * Platform-Specific Information for the Run-Time Libraries::\n * Example of Binder Output File::\n@@ -508,15 +508,15 @@ Running and Debugging Ada Programs\n @end ifset\n \n @ifset vms\n-Compatibility with DEC Ada\n+Compatibility with HP Ada\n \n * Ada 95 Compatibility::\n * Differences in the Definition of Package System::\n * Language-Related Features::\n * The Package STANDARD::\n * The Package SYSTEM::\n * Tasking and Task-Related Features::\n-* Implementation of Tasks in DEC Ada for OpenVMS Alpha Systems::\n+* Implementation of Tasks in HP Ada for OpenVMS Alpha Systems::\n * Pragmas and Pragma-Related Features::\n * Library of Predefined Units::\n * Bindings::\n@@ -526,7 +526,6 @@ Compatibility with DEC Ada\n * Program Compilation and Library Management::\n * Input-Output::\n * Implementation Limits::\n-* Tools::\n \n Language-Related Features\n \n@@ -538,7 +537,7 @@ Language-Related Features\n * Address Clauses::\n * Other Representation Clauses::\n \n-Implementation of Tasks in DEC Ada for OpenVMS Alpha Systems\n+Implementation of Tasks in HP Ada for OpenVMS Alpha Systems\n \n * Assigning Task IDs::\n * Task IDs and Delays::\n@@ -604,7 +603,7 @@ Compatibility and Porting Guide\n \n * Compatibility with Ada 83::\n * Implementation-dependent characteristics::\n-* Compatibility with DEC Ada 83::\n+* Compatibility with HP Ada 83::\n * Compatibility with Other Ada 95 Systems::\n * Representation Clauses::\n @ifset vms\n@@ -798,10 +797,12 @@ Ada programs.\n \n @ifset vms\n @item\n-@ref{Compatibility with DEC Ada}, details the compatibility of GNAT with\n-DEC Ada 83 @footnote{``DEC Ada'' refers to the legacy product originally\n+@ref{Compatibility with HP Ada}, details the compatibility of GNAT with\n+HP Ada 83 @footnote{``HP Ada'' refers to the legacy product originally\n developed by Digital Equipment Corporation and currently supported by HP.}\n-for OpenVMS Alpha.\n+for OpenVMS Alpha. This product was formerly known as DEC Ada, and for\n+historical compatibility reasons, the relevant libraries still use the\n+DEC prefix.\n @end ifset\n \n @item\n@@ -2915,7 +2916,7 @@ involving variant records, access parameters, tasks, or protected types,\n are unlikely to be able to be passed.\n \n Note that in the case of GNAT running\n-on a platform that supports DEC Ada 83, a higher degree of compatibility\n+on a platform that supports HP Ada 83, a higher degree of compatibility\n can be guaranteed, and in particular records are layed out in an identical\n manner in the two compilers. Note also that if output from two different\n compilers is mixed, the program is responsible for dealing with elaboration\n@@ -2926,8 +2927,8 @@ elaboration of the GNAT components. Consult the documentation of the other\n Ada compiler for further details on elaboration.\n \n However, it is not possible to mix the tasking run time of GNAT and\n-DEC Ada 83, All the tasking operations must either be entirely within\n-GNAT compiled sections of the program, or entirely within DEC Ada 83\n+HP Ada 83, All the tasking operations must either be entirely within\n+GNAT compiled sections of the program, or entirely within HP Ada 83\n compiled sections of the program.\n \n @cindex Interfacing to Assembly\n@@ -3048,21 +3049,21 @@ implemented as a single machine instruction.\n @findex Stdcall\n @cindex Convention Stdcall\n @item Stdcall\n-This is relevant only to NT/Win95 implementations of GNAT,\n-and specifies that the Stdcall calling sequence will be used, as defined\n-by the NT API. Nevertheless, to ease building cross-platform bindings this\n-convention will be handled as a C calling convention on non Windows\n-platforms.\n+This is relevant only to Windows XP/2000/NT/95 implementations of GNAT,\n+and specifies that the @code{Stdcall} calling sequence will be used,\n+as defined by the NT API. Nevertheless, to ease building\n+cross-platform bindings this convention will be handled as a @code{C} calling\n+convention on non Windows platforms.\n \n @findex DLL\n @cindex Convention DLL\n @item DLL\n-This is equivalent to Stdcall.\n+This is equivalent to @code{Stdcall}.\n \n @findex Win32\n @cindex Convention Win32\n @item Win32\n-This is equivalent to Stdcall.\n+This is equivalent to @code{Stdcall}.\n @end ifset\n \n @findex Stubbed\n@@ -3872,7 +3873,7 @@ Output full source listing with embedded error messages.\n Limit number of detected error or warning messages to @var{n}\n where @var{n} is in the range 1..999_999. The default setting if\n no switch is given is 9999. Compilation is terminated if this\n-limit is exceeded.\n+limit is exceeded. The equal sign here is optional.\n \n @item -gnatn\n @cindex @option{-gnatn} (@command{gcc})\n@@ -4130,6 +4131,13 @@ Execute @var{ver} version of the compiler. This is the @command{gcc}\n version, not the GNAT version.\n @end ifclear\n \n+@item ^-w^NO_BACK_END_WARNINGS^\n+@cindex @option{-w} (@command{gcc})\n+Turn off warnings generated by the back end of the compiler. Use of\n+this switch also causes the default for front end warnings to be set\n+to suppress (as though @option{-gnatws} had appeared at the start of\n+the options.\n+\n @end table\n \n @ifclear vms\n@@ -4295,7 +4303,7 @@ file) as well as the verbose\n format message or full listing (which as usual is written to\n @file{stdout} (the standard output file).\n \n-@item -gnatm^^=^@var{n}\n+@item -gnatm=@var{n}\n @cindex @option{-gnatm} (@command{gcc})\n @ifclear vms\n The @code{m} stands for maximum.\n@@ -4311,6 +4319,10 @@ fatal error: maximum errors reached\n compilation abandoned\n @end smallexample\n \n+@noindent\n+Note that the equal sign is optional, so the switches\n+@option{-gnatm2} and @option{-gnatm=2} are equivalent.\n+\n @item -gnatf\n @cindex @option{-gnatf} (@command{gcc})\n @cindex Error messages, suppressing\n@@ -4615,6 +4627,13 @@ not get issued for the use of boolean variables or constants whose\n values are known at compile time, since this is a standard technique\n for conditional compilation in Ada, and this would generate too many\n ``false positive'' warnings.\n+\n+This warning option also activates a special test for comparisons using\n+the operators >= and <=. If the compiler can tell that only the equality\n+condition is posible, then it will warn that the > or < part of the test\n+is useless and that the operator could be replaced by =. An example would\n+be comparing a Natural variable <= 0.\n+\n This warning can also be turned on using @option{-gnatwa}.\n \n @item -gnatwC\n@@ -4767,9 +4786,9 @@ This switch disables warnings on variables that could be declared constants.\n @cindex @option{-gnatwl} (@command{gcc})\n @cindex Elaboration, warnings\n This switch activates warnings on missing\n-@code{pragma Elaborate_All} statements.\n+@code{Elaborate_All} and @code{Elaborate} pragmas.\n See the section in this guide on elaboration checking for details on\n-when such pragma should be used. Warnings are also generated if you\n+when such pragmas should be used. Warnings are also generated if you\n are using the static mode of elaboration, and a @code{pragma Elaborate}\n is encountered. The default is that such warnings\n are not generated.\n@@ -4778,9 +4797,9 @@ This warning is not automatically turned on by the use of @option{-gnatwa}.\n @item -gnatwL\n @emph{Suppress warnings for missing elaboration pragmas.}\n @cindex @option{-gnatwL} (@command{gcc})\n-This switch suppresses warnings on missing pragma Elaborate_All statements.\n+This switch suppresses warnings on missing Elaborate and Elaborate_All pragmas.\n See the section in this guide on elaboration checking for details on\n-when such pragma should be used.\n+when such pragmas should be used.\n \n @item -gnatwm\n @emph{Activate warnings on modified but unreferenced variables.}\n@@ -4994,9 +5013,11 @@ warnings about uninitialized variables.\n \n @item ^-w^/NO_BACK_END_WARNINGS^\n @cindex @option{-w}\n-This switch suppresses warnings from the @option{^gcc^GCC^} back end. It may\n-be used in conjunction with @option{-gnatws} to ensure that all warnings\n-are suppressed during the entire compilation process.\n+This switch suppresses warnings from the @option{^gcc^GCC^} back end. The\n+code generator detects a number of warning situations that are missed\n+by the @option{GNAT} front end, and this switch can be used to suppress them.\n+The use of this switch also sets the default front end warning mode to\n+@option{-gnatws}, that is, front end warnings suppressed as well.\n \n @end table\n \n@@ -5686,15 +5707,17 @@ clears any previously set style checks.\n @cindex Access before elaboration\n @cindex Checks, division by zero\n @cindex Checks, access before elaboration\n+@cindex Checks, stack overflow checking\n \n @noindent\n If you compile with the default options, GNAT will insert many run-time\n checks into the compiled code, including code that performs range\n checking against constraints, but not arithmetic overflow checking for\n-integer operations (including division by zero) or checks for access\n-before elaboration on subprogram calls. All other run-time checks, as\n-required by the Ada 95 Reference Manual, are generated by default.\n-The following @command{gcc} switches refine this default behavior:\n+integer operations (including division by zero), checks for access\n+before elaboration on subprogram calls, or stack overflow checking. All\n+other run-time checks, as required by the Ada 95 Reference Manual, are\n+generated by default. The following @command{gcc} switches refine this\n+default behavior:\n \n @table @option\n @c !sort!\n@@ -5802,6 +5825,13 @@ Enables dynamic checks for access-before-elaboration\n on subprogram calls and generic instantiations.\n For full details of the effect and use of this switch,\n @xref{Compiling Using gcc}.\n+\n+@item -fstack-check\n+@cindex @option{-fstack-check} (@command{gcc})\n+@cindex Stack Overflow Checking\n+@cindex Checks, stack overflow checking\n+Activates stack overflow checking. For full details of the effect and use of\n+this switch see @ref{Stack Overflow Checking}.\n @end table\n \n @findex Unsuppress\n@@ -6406,6 +6436,9 @@ If _FILE is added at the end of an option\n then the output is to a file with the name @file{file_REP} where\n file is the name of the corresponding source file.\n @end ifset\n+Note that it is possible for record components to have zero size. In\n+this case, the component clause uses an obvious extension of permitted\n+Ada syntax, for example @code{at 0 range 0 .. -1}.\n \n @item -gnatS\n @cindex @option{-gnatS} (@command{gcc})\n@@ -6783,7 +6816,7 @@ Normally, define this value as a logical name containing a comma separated\n list of directory names.\n \n This variable can also be defined by means of an environment string\n-(an argument to the DEC C exec* set of functions).\n+(an argument to the HP C exec* set of functions).\n \n Logical Name:\n @smallexample\n@@ -6794,7 +6827,7 @@ DEFINE ADA_INCLUDE_PATH ANOTHER_PATH,FOO:[BAM],FOO:[BAR]\n By default, the path includes GNU:[LIB.OPENVMS7_x.2_8_x.DECLIB]\n first, followed by the standard Ada 95\n libraries in GNU:[LIB.OPENVMS7_x.2_8_x.ADAINCLUDE].\n-If this is not redefined, the user will obtain the DEC Ada 83 IO packages\n+If this is not redefined, the user will obtain the HP Ada 83 IO packages\n (Text_IO, Sequential_IO, etc)\n instead of the Ada95 packages. Thus, in order to get the Ada 95\n packages by default, ADA_INCLUDE_PATH must be redefined.\n@@ -7448,7 +7481,7 @@ Normally it only makes sense to use the @option{^-p^/PESSIMISTIC_ELABORATION^}\n switch if dynamic\n elaboration checking is used (@option{-gnatE} switch used for compilation).\n This is because in the default static elaboration mode, all necessary\n-@code{Elaborate_All} pragmas are implicitly inserted.\n+@code{Elaborate} and @code{Elaborate_All} pragmas are implicitly inserted.\n These implicit pragmas are still respected by the binder in\n @option{^-p^/PESSIMISTIC_ELABORATION^} mode, so a\n safe elaboration order is assured.\n@@ -7699,7 +7732,7 @@ Normally, define this value as a logical name containing a comma separated\n list of directory names.\n \n This variable can also be defined by means of an environment string\n-(an argument to the DEC C exec* set of functions).\n+(an argument to the HP C exec* set of functions).\n \n Logical Name:\n @smallexample\n@@ -7710,7 +7743,7 @@ DEFINE ADA_OBJECTS_PATH ANOTHER_PATH,FOO:[BAM],FOO:[BAR]\n By default, the path includes GNU:[LIB.OPENVMS7_x.2_8_x.DECLIB]\n first, followed by the standard Ada 95\n libraries in GNU:[LIB.OPENVMS7_x.2_8_x.ADALIB].\n-If this is not redefined, the user will obtain the DEC Ada 83 IO packages\n+If this is not redefined, the user will obtain the HP Ada 83 IO packages\n (Text_IO, Sequential_IO, etc)\n instead of the Ada95 packages. Thus, in order to get the Ada 95\n packages by default, ADA_OBJECTS_PATH must be redefined.\n@@ -8004,14 +8037,16 @@ when multiple versions of the GNAT compiler are available. See the\n @cindex @option{--GCC=compiler_name} (@command{gnatlink})\n Program used for compiling the binder file. The default is\n @command{gcc}. You need to use quotes around @var{compiler_name} if\n-@code{compiler_name} contains spaces or other separator characters. As\n-an example @option{--GCC=\"foo -x -y\"} will instruct @command{gnatlink} to use\n-@code{foo -x -y} as your compiler. Note that switch @option{-c} is always\n+@code{compiler_name} contains spaces or other separator characters.\n+As an example @option{--GCC=\"foo -x -y\"} will instruct @command{gnatlink} to\n+use @code{foo -x -y} as your compiler. Note that switch @option{-c} is always\n inserted after your command name. Thus in the above example the compiler\n command that will be used by @command{gnatlink} will be @code{foo -c -x -y}.\n-If several @option{--GCC=compiler_name} are used, only the last\n-@var{compiler_name} is taken into account. However, all the additional\n-switches are also taken into account. Thus,\n+A limitation of this syntax is that the name and path name of the executable\n+itself must not include any embedded spaces. If several\n+@option{--GCC=compiler_name} are used, only the last @var{compiler_name}\n+is taken into account. However, all the additional switches are also taken\n+into account. Thus,\n @option{--GCC=\"foo -x -y\" --GCC=\"bar -z -t\"} is equivalent to\n @option{--GCC=\"bar -x -y -z -t\"}.\n \n@@ -8047,8 +8082,8 @@ Generate the executable file even if there are linker warnings.\n \n @item /NOSTART_FILES\n Don't link in the object file containing the ``main'' transfer address.\n-Used when linking with a foreign language main program compiled with a\n-Digital compiler.\n+Used when linking with a foreign language main program compiled with an\n+HP compiler.\n \n @item /STATIC\n Prefer linking with object libraries over sharable images, even without\n@@ -8221,12 +8256,13 @@ Program used for compiling. The default is `@command{gcc}'. You need to use\n quotes around @var{compiler_name} if @code{compiler_name} contains\n spaces or other separator characters. As an example @option{--GCC=\"foo -x\n -y\"} will instruct @command{gnatmake} to use @code{foo -x -y} as your\n-compiler. Note that switch @option{-c} is always inserted after your\n-command name. Thus in the above example the compiler command that will\n-be used by @command{gnatmake} will be @code{foo -c -x -y}.\n-If several @option{--GCC=compiler_name} are used, only the last\n-@var{compiler_name} is taken into account. However, all the additional\n-switches are also taken into account. Thus,\n+compiler. A limitation of this syntax is that the name and path name of\n+the executable itself must not include any embedded spaces. Note that\n+switch @option{-c} is always inserted after your command name. Thus in the\n+above example the compiler command that will be used by @command{gnatmake}\n+will be @code{foo -c -x -y}. If several @option{--GCC=compiler_name} are\n+used, only the last @var{compiler_name} is taken into account. However,\n+all the additional switches are also taken into account. Thus,\n @option{--GCC=\"foo -x -y\" --GCC=\"bar -z -t\"} is equivalent to\n @option{--GCC=\"bar -x -y -z -t\"}.\n \n@@ -8236,8 +8272,10 @@ Program used for binding. The default is `@code{gnatbind}'. You need to\n use quotes around @var{binder_name} if @var{binder_name} contains spaces\n or other separator characters. As an example @option{--GNATBIND=\"bar -x\n -y\"} will instruct @command{gnatmake} to use @code{bar -x -y} as your\n-binder. Binder switches that are normally appended by @command{gnatmake} to\n-`@code{gnatbind}' are now appended to the end of @code{bar -x -y}.\n+binder. Binder switches that are normally appended by @command{gnatmake}\n+to `@code{gnatbind}' are now appended to the end of @code{bar -x -y}.\n+A limitation of this syntax is that the name and path name of the executable\n+itself must not include any embedded spaces.\n \n @item --GNATLINK=@var{linker_name}\n @cindex @option{--GNATLINK=linker_name} (@command{gnatmake})\n@@ -8247,6 +8285,8 @@ or other separator characters. As an example @option{--GNATLINK=\"lan -x\n -y\"} will instruct @command{gnatmake} to use @code{lan -x -y} as your\n linker. Linker switches that are normally appended by @command{gnatmake} to\n `@command{gnatlink}' are now appended to the end of @code{lan -x -y}.\n+A limitation of this syntax is that the name and path name of the executable\n+itself must not include any embedded spaces.\n \n @end ifclear\n \n@@ -8497,7 +8537,19 @@ if not up to date, and libraries are rebuilt, if necessary.\n @item ^-v^/REASONS^\n @cindex @option{^-v^/REASONS^} (@command{gnatmake})\n Verbose. Display the reason for all recompilations @command{gnatmake}\n-decides are necessary.\n+decides are necessary, with the highest verbosity level.\n+\n+@item ^-vl^/LOW_VERBOSITY^\n+@cindex @option{^-vl^/LOW_VERBOSITY^} (@command{gnatmake})\n+Verbosity level Low. Display fewer lines than in verbosity Medium.\n+\n+@item ^-vm^/MEDIUM_VERBOSITY^\n+@cindex @option{^-vm^/MEDIUM_VERBOSITY^} (@command{gnatmake})\n+Verbosity level Medium. Potentially display fewer lines than in verbosity High.\n+\n+@item ^-vh^/HIGH_VERBOSITY^\n+@cindex @option{^-vm^/HIGH_VERBOSITY^} (@command{gnatmake})\n+Verbosity level High. Equivalent to ^-v^/REASONS^.\n \n @item ^-vP^/MESSAGES_PROJECT_FILE=^@emph{x}\n Indicate the verbosity of the parsing of GNAT project files.\n@@ -9315,7 +9367,7 @@ to work. Examples of switches in this category are\n @option{-funroll-loops} and\n the various target-specific @option{-m} options (in particular, it has been\n observed that @option{-march=pentium4} can significantly improve performance\n-on appropriate machines. For full details of these switches, see the\n+on appropriate machines). For full details of these switches, see the\n @code{gcc} manual.\n \n @node Optimization and Strict Aliasing\n@@ -9538,7 +9590,7 @@ unchecked conversion of access values.\n @subsection Coverage Analysis\n \n @noindent\n-GNAT supports the Digital Performance Coverage Analyzer (PCA), which allows\n+GNAT supports the HP Performance Coverage Analyzer (PCA), which allows\n the user to determine the distribution of execution time across a program,\n @pxref{Profiling} for details of usage.\n @end ifset\n@@ -10221,7 +10273,7 @@ pragma Extend_System (Aux_DEC);\n @noindent\n In the presence of this pragma, GNAT adds to the definition of the\n predefined package SYSTEM all the additional types and subprograms that are\n-defined in DEC Ada. See @ref{Compatibility with DEC Ada} for details.\n+defined in HP Ada. See @ref{Compatibility with HP Ada} for details.\n @end ifset\n \n @node Handling Arbitrary File Naming Conventions Using gnatname\n@@ -11608,12 +11660,10 @@ The following attributes are defined on projects (all are simple attributes):\n @tab string\n @item @code{Locally_Removed_Files}\n @tab string list\n-@item @code{Main}\n-@tab string list\n @item @code{Languages}\n @tab string list\n-@item @code{Main_Language}\n-@tab string\n+@item @code{Main}\n+@tab string list\n @item @code{Library_Dir}\n @tab string\n @item @code{Library_Name}\n@@ -11628,8 +11678,20 @@ The following attributes are defined on projects (all are simple attributes):\n @tab string\n @item @code{Library_Options}\n @tab string list\n+@item @code{Library_Src_Dir}\n+@tab string\n+@item @code{Library_ALI_Dir}\n+@tab string\n @item @code{Library_GCC}\n @tab string\n+@item @code{Library_Symbol_File}\n+@tab string\n+@item @code{Library_Symbol_Policy}\n+@tab string\n+@item @code{Library_Reference_Symbol_File}\n+@tab string\n+@item @code{Externally_Built}\n+@tab string\n @end multitable\n \n @noindent\n@@ -12531,7 +12593,7 @@ package models the Apex file naming rules:\n @end ifclear\n \n @ifset vms\n-For example, the following package models the DEC Ada file naming rules:\n+For example, the following package models the HP Ada file naming rules:\n \n @smallexample @c projectfile\n @group\n@@ -12651,7 +12713,7 @@ sensitive or insensitive depending on the operating system).\n \n To create a library project, you need to define in its project file\n two project-level attributes: @code{Library_Name} and @code{Library_Dir}.\n-Additionally, you may define the library-related attributes\n+Additionally, you may define other library-related attributes such as\n @code{Library_Kind}, @code{Library_Version}, @code{Library_Interface},\n @code{Library_Auto_Init}, @code{Library_Options} and @code{Library_GCC}.\n \n@@ -12663,10 +12725,9 @@ to be acceptable on all platforms.\n \n The @code{Library_Dir} attribute has a string value that designates the path\n (absolute or relative) of the directory where the library will reside.\n-It must designate an existing directory, and this directory must be\n-different from the project's object directory. It also needs to be writable.\n-The directory should only be used for one library; the reason is that all\n-files contained in this directory may be deleted by the Project Manager.\n+It must designate an existing directory, and this directory must be writable,\n+different from the project's object directory and from any source directory\n+in the project tree.\n \n If both @code{Library_Name} and @code{Library_Dir} are specified and\n are legal, then the project file defines a library project.  The optional\n@@ -12686,6 +12747,13 @@ be generated for the latter. For such cases, it is recommended to either use\n two different project files, or a single one which uses external variables\n to indicate what kind of library should be build.\n \n+The @code{Library_ALI_Dir} attribute may be specified to indicate the\n+directory where the ALI files of the libriry will be copied. When it is\n+not specified, the ALI files are copied ti the directory specified in\n+attribute @code{Library_Dir}. The directory specified by @code{Library_ALI_Dir}\n+must be writable and different from the project's object directory and from\n+any source directory in the project tree.\n+\n The @code{Library_Version} attribute has a string value whose interpretation\n is platform dependent. It has no effect on VMS and Windows. On Unix, it is\n used only for dynamic/relocatable libraries as the internal name of the\n@@ -15086,7 +15154,7 @@ Options @option{^-pipe^/STANDARD_OUTPUT^},\n contains only one file to reformat.\n Option\n @option{^--eol^/END_OF_LINE^}\n-can not be used together\n+cannot be used together\n with @option{^-pipe^/STANDARD_OUTPUT^} option.\n \n @node Other gnatpp Switches\n@@ -15113,7 +15181,7 @@ a trace of the actions it takes to produce or obtain the ASIS tree.\n @item ^-w^/WARNINGS^\n @cindex @option{^-w^/WARNINGS^} (@code{gnatpp})\n Warning mode;\n-@command{gnatpp} generates a warning whenever it can not provide\n+@command{gnatpp} generates a warning whenever it cannot provide\n a required layout in the result source.\n @end table\n \n@@ -16402,6 +16470,16 @@ by preprocessing to be retained in the output source as comments marked\n with the special string @code{\"--! \"}. This option will result in line numbers\n being preserved in the output file.\n \n+@item ^-C^/REPLACE_IN_COMMENTS^\n+@cindex @option{^-C^/REPLACE_IN_COMMENTS^} (@command{gnatprep})\n+Causes comments to be scanned. Normally comments are ignored by gnatprep.\n+If this option is specified, then comments are scanned and any $symbol\n+substitutions performed as in program text. This is particularly useful\n+when structured comments are used (e.g. when writing programs in the\n+SPARK dialect of Ada). Note that this switch is not available when\n+doing integrated preprocessing (it would be useless in this context\n+since comments are ignored by the compiler in any case).\n+\n @item ^-Dsymbol=value^/ASSOCIATE=\"symbol=value\"^\n @cindex @option{^-D^/ASSOCIATE^} (@command{gnatprep})\n Defines a new symbol, associated with value. If no value is given on the\n@@ -19080,7 +19158,7 @@ $ perl gnathtml.pl [switches] files\n @findex LSE\n \n @noindent\n-The GNAT distribution provides an Ada 95 template for the Digital Language\n+The GNAT distribution provides an Ada 95 template for the HP Language\n Sensitive Editor (LSE), a component of DECset. In order to\n access it, invoke LSE with the qualifier /ENVIRONMENT=GNU:[LIB]ADA95.ENV.\n \n@@ -19089,7 +19167,7 @@ access it, invoke LSE with the qualifier /ENVIRONMENT=GNU:[LIB]ADA95.ENV.\n @findex PCA\n \n @noindent\n-GNAT supports The Digital Performance Coverage Analyzer (PCA), a component\n+GNAT supports The HP Performance Coverage Analyzer (PCA), a component\n of DECset. To use it proceed as outlined under ``HELP PCA'', except for running\n the collection phase with the /DEBUG qualifier.\n \n@@ -20164,23 +20242,23 @@ end STB;\n @end smallexample\n \n @ifset vms\n-@node Compatibility with DEC Ada\n-@chapter Compatibility with DEC Ada\n+@node Compatibility with HP Ada\n+@chapter Compatibility with HP Ada\n @cindex Compatibility\n \n @noindent\n-This section of the manual compares DEC Ada for OpenVMS Alpha and GNAT\n+This section of the manual compares HP Ada for OpenVMS Alpha and GNAT\n OpenVMS Alpha. GNAT achieves a high level of compatibility\n-with DEC Ada, and it should generally be straightforward to port code\n-from the DEC Ada environment to GNAT. However, there are a few language\n+with HP Ada, and it should generally be straightforward to port code\n+from the HP Ada environment to GNAT. However, there are a few language\n and implementation differences of which the user must be aware. These\n differences are discussed in this section. In\n addition, the operating environment and command structure for the\n compiler are different, and these differences are also discussed.\n \n Note that this discussion addresses specifically the implementation\n-of Ada 83 for DIGITAL OpenVMS Alpha Systems. In cases where the implementation\n-of DEC Ada differs between OpenVMS Alpha Systems and OpenVMS VAX Systems,\n+of Ada 83 for HP OpenVMS Alpha Systems. In cases where the implementation\n+of HP Ada differs between OpenVMS Alpha Systems and OpenVMS VAX Systems,\n GNAT always follows the Alpha implementation.\n \n @menu\n@@ -20190,7 +20268,7 @@ GNAT always follows the Alpha implementation.\n * The Package STANDARD::\n * The Package SYSTEM::\n * Tasking and Task-Related Features::\n-* Implementation of Tasks in DEC Ada for OpenVMS Alpha Systems::\n+* Implementation of Tasks in HP Ada for OpenVMS Alpha Systems::\n * Pragmas and Pragma-Related Features::\n * Library of Predefined Units::\n * Bindings::\n@@ -20200,14 +20278,13 @@ GNAT always follows the Alpha implementation.\n * Program Compilation and Library Management::\n * Input-Output::\n * Implementation Limits::\n-* Tools::\n @end menu\n \n @node Ada 95 Compatibility\n @section Ada 95 Compatibility\n \n @noindent\n-GNAT is an Ada 95 compiler, and DEC Ada is an Ada 83\n+GNAT is an Ada 95 compiler, and HP Ada is an Ada 83\n compiler. Ada 95 is almost completely upwards compatible\n with Ada 83, and therefore Ada 83 programs will compile\n and run under GNAT with\n@@ -20235,8 +20312,8 @@ implementation-dependent declarations to package System. In normal mode,\n GNAT does not take advantage of this permission, and the version of System\n provided by GNAT exactly matches that in the Ada 95 Reference Manual.\n \n-However, DEC Ada adds an extensive set of declarations to package System,\n-as fully documented in the DEC Ada manuals. To minimize changes required\n+However, HP Ada adds an extensive set of declarations to package System,\n+as fully documented in the HP Ada manuals. To minimize changes required\n for programs that make use of these extensions, GNAT provides the pragma\n Extend_System for extending the definition of package System. By using:\n \n@@ -20306,12 +20383,12 @@ related topics.\n @subsection Integer Types and Representations\n \n @noindent\n-The set of predefined integer types is identical in DEC Ada and GNAT.\n+The set of predefined integer types is identical in HP Ada and GNAT.\n Furthermore the representation of these integer types is also identical,\n including the capability of size clauses forcing biased representation.\n \n In addition,\n-DEC Ada for OpenVMS Alpha systems has defined the\n+HP Ada for OpenVMS Alpha systems has defined the\n following additional integer types in package System:\n \n @itemize @bullet\n@@ -20338,21 +20415,21 @@ standard Ada 95 package @code{Interfaces}.\n Alternatively, by use of the pragma\n @code{Extend_System}, identical\n declarations can be referenced directly in package @code{System}.\n-On both GNAT and DEC Ada, the maximum integer size is 64 bits.\n+On both GNAT and HP Ada, the maximum integer size is 64 bits.\n \n @node Floating-Point Types and Representations\n @subsection Floating-Point Types and Representations\n @cindex Floating-Point types\n \n @noindent\n-The set of predefined floating-point types is identical in DEC Ada and GNAT.\n+The set of predefined floating-point types is identical in HP Ada and GNAT.\n Furthermore the representation of these floating-point\n types is also identical. One important difference is that the default\n-representation for DEC Ada is VAX_Float, but the default representation\n+representation for HP Ada is VAX_Float, but the default representation\n for GNAT is IEEE.\n \n Specific types may be declared to be VAX_Float or IEEE, using the pragma\n-@code{Float_Representation} as described in the DEC Ada documentation.\n+@code{Float_Representation} as described in the HP Ada documentation.\n For example, the declarations:\n \n @smallexample @c ada\n@@ -20368,7 +20445,7 @@ pragma Float_Representation (VAX_Float, F_Float);\n declare a type F_Float that will be represented in VAX_Float format.\n This set of declarations actually appears in System.Aux_DEC, which provides\n the full set of additional floating-point declarations provided in\n-the DEC Ada version of package\n+the HP Ada version of package\n System. This and similar declarations may be accessed in a user program\n by using pragma @code{Extend_System}. The use of this\n pragma, and the related pragma @code{Long_Float} is described in further\n@@ -20378,7 +20455,7 @@ detail in the following section.\n @subsection Pragmas Float_Representation and Long_Float\n \n @noindent\n-DEC Ada provides the pragma @code{Float_Representation}, which\n+HP Ada provides the pragma @code{Float_Representation}, which\n acts as a program library switch to allow control over\n the internal representation chosen for the predefined\n floating-point types declared in the package @code{Standard}.\n@@ -20399,10 +20476,10 @@ types as follows:\n @itemize @bullet\n @item\n @code{VAX_Float} specifies that floating-point\n-types are represented by default with the VAX hardware types\n+types are represented by default with the VAX system hardware types\n F-floating, D-floating, G-floating. Note that the H-floating\n-type is available only on DIGITAL Vax systems, and is not available\n-in either DEC Ada or GNAT for Alpha systems.\n+type was available only on Vax systems, and is not available\n+in either HP Ada or GNAT for Alpha systems.\n \n @item\n @code{IEEE_Float} specifies that floating-point\n@@ -20415,10 +20492,10 @@ GNAT provides an identical implementation of the pragma\n @code{Float_Representation}, except that it functions as a\n configuration pragma, as defined by Ada 95. Note that the\n notion of configuration pragma corresponds closely to the\n-DEC Ada notion of a program library switch.\n+HP Ada notion of a program library switch.\n \n When no pragma is used in GNAT, the default is IEEE_Float, which is different\n-from DEC Ada 83, where the default is VAX_Float. In addition, the\n+from HP Ada 83, where the default is VAX_Float. In addition, the\n predefined libraries in GNAT are built using IEEE_Float, so it is not\n advisable to change the format of numbers passed to standard library\n routines, and if necessary explicit type conversions may be needed.\n@@ -20452,7 +20529,7 @@ and @i{directory} is the directory to be created to contain\n the new library.\n \n @noindent\n-On OpenVMS systems, DEC Ada provides the pragma @code{Long_Float}\n+On OpenVMS systems, HP Ada provides the pragma @code{Long_Float}\n to allow control over the internal representation chosen\n for the predefined type @code{Long_Float} and for floating-point\n type declarations with digits specified in the range 7 .. 15.\n@@ -20468,7 +20545,7 @@ pragma Long_Float (D_FLOAT | G_FLOAT);\n @subsection Fixed-Point Types and Representations\n \n @noindent\n-On DEC Ada for OpenVMS Alpha systems, rounding is\n+On HP Ada for OpenVMS Alpha systems, rounding is\n away from zero for both positive and negative numbers.\n Therefore, +0.5 rounds to 1 and -0.5 rounds to -1.\n \n@@ -20481,21 +20558,21 @@ fixed-point types are truncated.\n @subsection Record and Array Component Alignment\n \n @noindent\n-On DEC Ada for OpenVMS Alpha, all non composite components\n+On HP Ada for OpenVMS Alpha, all non composite components\n are aligned on natural boundaries. For example, 1-byte\n components are aligned on byte boundaries, 2-byte\n components on 2-byte boundaries, 4-byte components on 4-byte\n byte boundaries, and so on. The OpenVMS Alpha hardware\n runs more efficiently with naturally aligned data.\n \n ON GNAT for OpenVMS Alpha, alignment rules are compatible\n-with DEC Ada for OpenVMS Alpha.\n+with HP Ada for OpenVMS Alpha.\n \n @node Address Clauses\n @subsection Address Clauses\n \n @noindent\n-In DEC Ada and GNAT, address clauses are supported for\n+In HP Ada and GNAT, address clauses are supported for\n objects and imported subprograms.\n The predefined type @code{System.Address} is a private type\n in both compilers, with the same representation (it is simply\n@@ -20509,10 +20586,10 @@ Note that code that with's both this extended package @code{System}\n and the package @code{System.Storage_Elements} should not @code{use}\n both packages, or ambiguities will result. In general it is better\n not to mix these two sets of facilities. The Ada 95 package was\n-designed specifically to provide the kind of features that DEC Ada\n+designed specifically to provide the kind of features that HP Ada\n adds directly to package @code{System}.\n \n-GNAT is compatible with DEC Ada in its handling of address\n+GNAT is compatible with HP Ada in its handling of address\n clauses, except for some limitations in\n the form of address clauses for composite objects with\n initialization. Such address clauses are easily replaced\n@@ -20555,40 +20632,40 @@ on address specifications is found in the GNAT Reference Manual.\n \n @noindent\n GNAT supports in a compatible manner all the representation\n-clauses supported by DEC Ada. In addition, it\n+clauses supported by HP Ada. In addition, it\n supports representation clause forms that are new in Ada 95\n including COMPONENT_SIZE and SIZE clauses for objects.\n \n @node The Package STANDARD\n @section The Package STANDARD\n \n @noindent\n-The package STANDARD, as implemented by DEC Ada, is fully\n+The package STANDARD, as implemented by HP Ada, is fully\n described in the Reference Manual for the Ada Programming\n-Language (ANSI/MIL-STD-1815A-1983) and in the DEC Ada\n+Language (ANSI/MIL-STD-1815A-1983) and in the HP Ada\n Language Reference Manual. As implemented by GNAT, the\n package STANDARD is described in the Ada 95 Reference\n Manual.\n \n-In addition, DEC Ada supports the Latin-1 character set in\n+In addition, HP Ada supports the Latin-1 character set in\n the type CHARACTER. GNAT supports the Latin-1 character set\n in the type CHARACTER and also Unicode (ISO 10646 BMP) in\n the type WIDE_CHARACTER.\n \n The floating-point types supported by GNAT are those\n-supported by DEC Ada, but defaults are different, and are controlled by\n+supported by HP Ada, but defaults are different, and are controlled by\n pragmas. See @ref{Floating-Point Types and Representations} for details.\n \n @node The Package SYSTEM\n @section The Package SYSTEM\n \n @noindent\n-DEC Ada provides a system-specific version of the package\n+HP Ada provides a system-specific version of the package\n SYSTEM for each platform on which the language ships.\n For the complete specification of the package SYSTEM, see\n-Appendix F of the DEC Ada Language Reference Manual.\n+Appendix F of the HP Ada Language Reference Manual.\n \n-On DEC Ada, the package SYSTEM includes the following conversion functions:\n+On HP Ada, the package SYSTEM includes the following conversion functions:\n @itemize @bullet\n @item TO_ADDRESS(INTEGER)\n \n@@ -20608,7 +20685,7 @@ On DEC Ada, the package SYSTEM includes the following conversion functions:\n By default, GNAT supplies a version of SYSTEM that matches\n the definition given in the Ada 95 Reference Manual.\n This\n-is a subset of the DIGITAL system definitions, which is as\n+is a subset of the HP system definitions, which is as\n close as possible to the original definitions. The only difference\n is that the definition of SYSTEM_NAME is different:\n \n@@ -20627,7 +20704,7 @@ BIT_ORDER and DEFAULT_BIT_ORDER.\n \n However, the use of the following pragma causes GNAT\n to extend the definition of package SYSTEM so that it\n-encompasses the full set of DIGITAL-specific extensions,\n+encompasses the full set of HP-specific extensions,\n including the functions listed above:\n \n @smallexample @c ada\n@@ -20641,8 +20718,8 @@ The pragma Extend_System is a configuration pragma that\n is most conveniently placed in the @file{gnat.adc} file. See the\n GNAT Reference Manual for further details.\n \n-DEC Ada does not allow the recompilation of the package\n-SYSTEM. Instead DEC Ada provides several pragmas (SYSTEM_\n+HP Ada does not allow the recompilation of the package\n+SYSTEM. Instead HP Ada provides several pragmas (SYSTEM_\n NAME, STORAGE_UNIT, and MEMORY_SIZE) to modify values in\n the package SYSTEM. On OpenVMS Alpha systems, the pragma\n SYSTEM_NAME takes the enumeration literal OPENVMS_AXP as\n@@ -20664,7 +20741,7 @@ pragma Extend_System (AUX_Dec);\n @end smallexample\n \n @noindent\n-are virtually identical to those provided by the DEC Ada 83 package\n+are virtually identical to those provided by the HP Ada 83 package\n System. One important difference is that the name of the TO_ADDRESS\n function for type UNSIGNED_LONGWORD is changed to TO_ADDRESS_LONG.\n See the GNAT Reference manual for a discussion of why this change was\n@@ -20674,7 +20751,7 @@ necessary.\n The version of TO_ADDRESS taking a universal integer argument is in fact\n an extension to Ada 83 not strictly compatible with the reference manual.\n In GNAT, we are constrained to be exactly compatible with the standard,\n-and this means we cannot provide this capability. In DEC Ada 83, the\n+and this means we cannot provide this capability. In HP Ada 83, the\n point of this definition is to deal with a call like:\n \n @smallexample @c ada\n@@ -20684,7 +20761,7 @@ TO_ADDRESS (16#12777#);\n @noindent\n Normally, according to the Ada 83 standard, one would expect this to be\n ambiguous, since it matches both the INTEGER and UNSIGNED_LONGWORD forms\n-of TO_ADDRESS. However, in DEC Ada 83, there is no ambiguity, since the\n+of TO_ADDRESS. However, in HP Ada 83, there is no ambiguity, since the\n definition using universal_integer takes precedence.\n \n In GNAT, since the version with universal_integer cannot be supplied, it is\n@@ -20710,35 +20787,28 @@ change the name to TO_ADDRESS_LONG.\n \n @noindent\n The concepts relevant to a comparison of tasking on GNAT\n-and on DEC Ada for OpenVMS Alpha systems are discussed in\n+and on HP Ada for OpenVMS Alpha systems are discussed in\n the following sections.\n \n For detailed information on concepts related to tasking in\n-DEC Ada, see the DEC Ada Language Reference Manual and the\n+HP Ada, see the HP Ada Language Reference Manual and the\n relevant run-time reference manual.\n \n-@node Implementation of Tasks in DEC Ada for OpenVMS Alpha Systems\n-@section Implementation of Tasks in DEC Ada for OpenVMS Alpha Systems\n+@node Implementation of Tasks in HP Ada for OpenVMS Alpha Systems\n+@section Implementation of Tasks in HP Ada for OpenVMS Alpha Systems\n \n @noindent\n On OpenVMS Alpha systems, each Ada task (except a passive\n task) is implemented as a single stream of execution\n that is created and managed by the kernel. On these\n-systems, DEC Ada tasking support is based on DECthreads,\n+systems, HP Ada tasking support is based on DECthreads,\n an implementation of the POSIX standard for threads.\n \n-Although tasks are implemented as threads, all tasks in\n-an Ada program are part of the same process. As a result,\n-resources such as open files and virtual memory can be\n-shared easily among tasks. Having all tasks in one process\n-allows better integration with the programming environment\n-(the shell and the debugger, for example).\n-\n-Also, on OpenVMS Alpha systems, DEC Ada tasks and foreign\n+Also, on OpenVMS Alpha systems, HP Ada tasks and foreign\n code that calls DECthreads routines can be used together.\n The interaction between Ada tasks and DECthreads routines\n can have some benefits. For example when on OpenVMS Alpha,\n-DEC Ada can call C code that is already threaded.\n+HP Ada can call C code that is already threaded.\n GNAT on OpenVMS Alpha uses the facilities of DECthreads,\n and Ada tasks are mapped to threads.\n \n@@ -20755,15 +20825,15 @@ and Ada tasks are mapped to threads.\n @subsection Assigning Task IDs\n \n @noindent\n-The DEC Ada Run-Time Library always assigns %TASK 1 to\n+The HP Ada Run-Time Library always assigns %TASK 1 to\n the environment task that executes the main program. On\n OpenVMS Alpha systems, %TASK 0 is often used for tasks\n that have been created but are not yet activated.\n \n On OpenVMS Alpha systems, task IDs are assigned at\n activation. On GNAT systems, task IDs are also assigned at\n task creation but do not have the same form or values as\n-task ID values in DEC Ada. There is no null task, and the\n+task ID values in HP Ada. There is no null task, and the\n environment task does not have a specific task ID value.\n \n @node Task IDs and Delays\n@@ -20802,18 +20872,18 @@ GNAT supplies the following task-related pragmas:\n @item  TASK_STORAGE\n \n               GNAT implements pragma TASK_STORAGE in the same way as\n-              DEC Ada.\n-              Both DEC Ada and GNAT supply the pragmas PASSIVE,\n+              HP Ada.\n+              Both HP Ada and GNAT supply the pragmas PASSIVE,\n               SUPPRESS, and VOLATILE.\n @end itemize\n @node Scheduling and Task Priority\n @subsection Scheduling and Task Priority\n \n @noindent\n-DEC Ada implements the Ada language requirement that\n+HP Ada implements the Ada language requirement that\n when two tasks are eligible for execution and they have\n different priorities, the lower priority task does not\n-execute while the higher priority task is waiting. The DEC\n+execute while the higher priority task is waiting. The HP\n Ada Run-Time Library keeps a task running until either the\n task is suspended or a higher priority task becomes ready.\n \n@@ -20823,30 +20893,30 @@ at the processor. A task is run for a certain period of\n time and then placed at the rear of the ready queue for\n its priority level.\n \n-DEC Ada provides the implementation-defined pragma TIME_SLICE,\n+HP Ada provides the implementation-defined pragma TIME_SLICE,\n which can be used to enable or disable round-robin\n scheduling of tasks with the same priority.\n-See the relevant DEC Ada run-time reference manual for\n-information on using the pragmas to control DEC Ada task\n+See the relevant HP Ada run-time reference manual for\n+information on using the pragmas to control HP Ada task\n scheduling.\n \n GNAT follows the scheduling rules of Annex D (real-time\n Annex) of the Ada 95 Reference Manual. In general, this\n-scheduling strategy is fully compatible with DEC Ada\n+scheduling strategy is fully compatible with HP Ada\n although it provides some additional constraints (as\n fully documented in Annex D).\n GNAT implements time slicing control in a manner compatible with\n-DEC Ada 83, by means of the pragma Time_Slice, whose semantics are identical\n-to the DEC Ada 83 pragma of the same name.\n+HP Ada 83, by means of the pragma Time_Slice, whose semantics are identical\n+to the HP Ada 83 pragma of the same name.\n Note that it is not possible to mix GNAT tasking and\n-DEC Ada 83 tasking in the same program, since the two run times are\n+HP Ada 83 tasking in the same program, since the two run times are\n not compatible.\n \n @node The Task Stack\n @subsection The Task Stack\n \n @noindent\n-In DEC Ada, a task stack is allocated each time a\n+In HP Ada, a task stack is allocated each time a\n non passive task is activated. As soon as the task is\n terminated, the storage for the task stack is deallocated.\n If you specify a size of zero (bytes) with T'STORAGE_SIZE,\n@@ -20859,24 +20929,24 @@ GNAT handles task stacks in a similar manner. According to\n the Ada 95 rules, it provides the pragma STORAGE_SIZE as\n an alternative method for controlling the task stack size.\n The specification of the attribute T'STORAGE_SIZE is also\n-supported in a manner compatible with DEC Ada.\n+supported in a manner compatible with HP Ada.\n \n @node External Interrupts\n @subsection External Interrupts\n \n @noindent\n-On DEC Ada, external interrupts can be associated with task entries.\n-GNAT is compatible with DEC Ada in its handling of external interrupts.\n+On HP Ada, external interrupts can be associated with task entries.\n+GNAT is compatible with HP Ada in its handling of external interrupts.\n \n @node Pragmas and Pragma-Related Features\n @section Pragmas and Pragma-Related Features\n \n @noindent\n-Both DEC Ada and GNAT supply all language-defined pragmas\n+Both HP Ada and GNAT supply all language-defined pragmas\n as specified by the Ada 83 standard. GNAT also supplies all\n language-defined pragmas specified in the Ada 95 Reference Manual.\n In addition, GNAT implements the implementation-defined pragmas\n-from DEC Ada 83.\n+from HP Ada 83.\n \n @itemize @bullet\n @item  AST_ENTRY\n@@ -20939,7 +21009,7 @@ recognized, but which have no\n effect in GNAT. The effect of @code{Passive} may be obtained by the\n use of protected objects in Ada 95. In GNAT, all generics are inlined.\n \n-Unlike DEC Ada, the GNAT 'EXPORT_@i{subprogram}' pragmas require\n+Unlike HP Ada, the GNAT 'EXPORT_@i{subprogram}' pragmas require\n a separate subprogram specification which must appear before the\n subprogram body.\n \n@@ -21016,7 +21086,7 @@ the GNAT Reference Manual.\n @subsection Restrictions on the Pragma INLINE\n \n @noindent\n-DEC Ada applies the following restrictions to the pragma INLINE:\n+HP Ada applies the following restrictions to the pragma INLINE:\n @itemize @bullet\n @item  Parameters cannot be a task type.\n \n@@ -21059,7 +21129,7 @@ be incapable of being inlined.\n \n @noindent\n The following lists and describes the restrictions on the\n-pragma INTERFACE on DEC Ada and GNAT:\n+pragma INTERFACE on HP Ada and GNAT:\n @itemize @bullet\n @item  Languages accepted: Ada, Bliss, C, Fortran, Default.\n Default is the default on OpenVMS Alpha systems.\n@@ -21080,14 +21150,14 @@ be a string, an array, or a record.\n @end itemize\n \n @noindent\n-GNAT is entirely upwards compatible with DEC Ada, and in addition allows\n+GNAT is entirely upwards compatible with HP Ada, and in addition allows\n record parameters for all languages.\n \n @node  Restrictions on the Pragma SYSTEM_NAME\n @subsection  Restrictions on the Pragma SYSTEM_NAME\n \n @noindent\n-For DEC Ada for OpenVMS Alpha, the enumeration literal\n+For HP Ada for OpenVMS Alpha, the enumeration literal\n for the type NAME is OPENVMS_AXP. In GNAT, the enumeration\n literal for the type NAME is SYSTEM_NAME_GNAT.\n \n@@ -21096,13 +21166,13 @@ literal for the type NAME is SYSTEM_NAME_GNAT.\n \n @noindent\n A library of predefined units is provided as part of the\n-DEC Ada and GNAT implementations. DEC Ada does not provide\n+HP Ada and GNAT implementations. HP Ada does not provide\n the package MACHINE_CODE but instead recommends importing\n assembler code.\n \n-The GNAT versions of the DEC Ada Run-Time Library (ADA$PREDEFINED:)\n+The GNAT versions of the HP Ada Run-Time Library (ADA$PREDEFINED:)\n units are taken from the OpenVMS Alpha version, not the OpenVMS VAX\n-version. During GNAT installation, the DEC Ada Predefined\n+version. During GNAT installation, the HP Ada Predefined\n Library units are copied into the GNU:[LIB.OPENVMS7_x.2_8_x.DECLIB]\n (aka DECLIB) directory and patched to remove Ada 95 incompatibilities\n and to make them interoperable with GNAT, @pxref{Changes to DECLIB}\n@@ -21116,9 +21186,9 @@ for example).\n \n However, it is possible to change the default so that the\n reverse is true, or even to mix them using child package\n-notation. The DEC Ada 83 units are available as DEC.xxx where xxx\n+notation. The HP Ada 83 units are available as DEC.xxx where xxx\n is the package name, and the Ada units are available in the\n-standard manner defined for Ada 95, that is to say as Ada.xxx. To\n+standard manner defined for Ada 95, that is to say as DEC.xxx. To\n change the default, set ADA_INCLUDE_PATH and ADA_OBJECTS_PATH\n appropriately. For example, to change the default to use the Ada95\n versions do:\n@@ -21138,7 +21208,7 @@ $ DEFINE ADA_OBJECTS_PATH GNU:[LIB.OPENVMS7_1.2_8_1.ADALIB],-\n @subsection Changes to DECLIB\n \n @noindent\n-The changes made to the DEC Ada predefined library for GNAT and Ada 95\n+The changes made to the HP Ada predefined library for GNAT and Ada 95\n compatibility are minor and include the following:\n \n @itemize @bullet\n@@ -21163,7 +21233,7 @@ None of the above changes is visible to users.\n @section Bindings\n \n @noindent\n-On OpenVMS Alpha, DEC Ada provides the following strongly-typed bindings:\n+On OpenVMS Alpha, HP Ada provides the following strongly-typed bindings:\n @itemize @bullet\n \n @item  Command Language Interpreter (CLI interface)\n@@ -21199,10 +21269,10 @@ On OpenVMS Alpha, DEC Ada provides the following strongly-typed bindings:\n @end itemize\n \n @noindent\n-GNAT provides implementations of these DEC bindings in the DECLIB directory.\n+GNAT provides implementations of these HP bindings in the DECLIB directory.\n \n The X/Motif bindings used to build DECLIB are whatever versions are in the\n-DEC Ada @file{ADA$PREDEFINED} directory with extension @file{.ADC}.\n+HP Ada @file{ADA$PREDEFINED} directory with extension @file{.ADC}.\n The build script will\n automatically add a pragma Linker_Options to packages @code{Xm}, @code{Xt},\n and @code{X_Lib}\n@@ -21225,7 +21295,7 @@ default @file{ADA$PREDEFINED} versions.\n @subsection Shared Libraries and Options Files\n \n @noindent\n-When using the DEC Ada\n+When using the HP Ada\n predefined X and Motif bindings, the linking with their sharable images is\n done automatically by @command{GNAT LINK}.\n When using other X and Motif bindings, you need\n@@ -21241,7 +21311,7 @@ libraries under VMS. The VMS Link command can be used in standard fashion.\n @subsection Interfaces to C\n \n @noindent\n-DEC Ada\n+HP Ada\n provides the following Ada types and operations:\n \n @itemize @bullet\n@@ -21254,7 +21324,7 @@ provides the following Ada types and operations:\n \n @noindent\n Interfacing to C with GNAT, one can use the above approach\n-described for DEC Ada or the facilities of Annex B of\n+described for HP Ada or the facilities of Annex B of\n the Ada 95 Reference Manual (packages INTERFACES.C,\n INTERFACES.C.STRINGS and INTERFACES.C.POINTERS). For more\n information, see the section ``Interfacing to C'' in the\n@@ -21270,8 +21340,8 @@ of Compaq C. The qualifier has no effect on @code{Link_Name} parameters.\n \n @noindent\n The following section discusses differences in the\n-definition of main programs on DEC Ada and GNAT.\n-On DEC Ada, main programs are defined to meet the\n+definition of main programs on HP Ada and GNAT.\n+On HP Ada, main programs are defined to meet the\n following conditions:\n @itemize @bullet\n @item  Procedure with no formal parameters (returns 0 upon\n@@ -21307,14 +21377,14 @@ generic subprogram\n @section Implementation-Defined Attributes\n \n @noindent\n-GNAT provides all DEC Ada implementation-defined\n+GNAT provides all HP Ada implementation-defined\n attributes.\n \n @node Compiler and Run-Time Interfacing\n @section Compiler and Run-Time Interfacing\n \n @noindent\n-DEC Ada provides the following ways to pass options to the linker\n+HP Ada provides the following ways to pass options to the linker\n (ACS LINK):\n @itemize @bullet\n @item  /WAIT and /SUBMIT qualifiers\n@@ -21343,8 +21413,8 @@ switches:\n @noindent\n For more information on these switches, see\n @ref{Switches for gnatlink}.\n-In DEC Ada, the command-line switch @option{/OPTIMIZE} is available\n-to control optimization. DEC Ada also supplies the\n+In HP Ada, the command-line switch @option{/OPTIMIZE} is available\n+to control optimization. HP Ada also supplies the\n following pragmas:\n @itemize @bullet\n @item  @code{OPTIMIZE}\n@@ -21361,24 +21431,24 @@ following pragmas:\n @noindent\n In GNAT, optimization is controlled strictly by command\n line parameters, as described in the corresponding section of this guide.\n-The DIGITAL pragmas for control of optimization are\n+The HP pragmas for control of optimization are\n recognized but ignored.\n \n-Note that in GNAT, the default is optimization off, whereas in DEC Ada 83,\n+Note that in GNAT, the default is optimization off, whereas in HP Ada 83,\n the default is that optimization is turned on.\n \n @node Program Compilation and Library Management\n @section Program Compilation and Library Management\n \n @noindent\n-DEC Ada and GNAT provide a comparable set of commands to\n-build programs. DEC Ada also provides a program library,\n+HP Ada and GNAT provide a comparable set of commands to\n+build programs. HP Ada also provides a program library,\n which is a concept that does not exist on GNAT. Instead,\n GNAT provides directories of sources that are compiled as\n needed.\n \n The following table summarizes\n-the DEC Ada commands and provides\n+the HP Ada commands and provides\n equivalent GNAT commands. In this table, some GNAT\n equivalents reflect the fact that GNAT does not use the\n concept of a program library. Instead, it uses a model\n@@ -21387,12 +21457,12 @@ in a manner consistent with other languages like C and\n Fortran. Therefore, standard system file commands are used\n to manipulate these elements. Those GNAT commands are marked with\n an asterisk.\n-Note that, unlike DEC Ada, none of the GNAT commands accepts wild cards.\n+Note that, unlike HP Ada, none of the GNAT commands accepts wild cards.\n \n @need 1500\n @multitable @columnfractions .35 .65\n \n-@item @emph{DEC Ada Command}\n+@item @emph{HP Ada Command}\n @tab @emph{GNAT Equivalent / Description}\n \n @item @command{ADA}\n@@ -21557,14 +21627,14 @@ valid form.\n @section Input-Output\n \n @noindent\n-On OpenVMS Alpha systems, DEC Ada uses OpenVMS Record\n+On OpenVMS Alpha systems, HP Ada uses OpenVMS Record\n Management Services (RMS) to perform operations on\n external files.\n \n @noindent\n-DEC Ada and GNAT predefine an identical set of input-\n+HP Ada and GNAT predefine an identical set of input-\n output packages. To make the use of the\n-generic TEXT_IO operations more convenient, DEC Ada\n+generic TEXT_IO operations more convenient, HP Ada\n provides predefined library packages that instantiate the\n integer and floating-point operations for the predefined\n integer and floating-point types as shown in the following table.\n@@ -21589,9 +21659,9 @@ integer and floating-point types as shown in the following table.\n @end multitable\n \n @noindent\n-The DEC Ada predefined packages and their operations\n+The HP Ada predefined packages and their operations\n are implemented using OpenVMS Alpha files and input-\n-output facilities. DEC Ada supports asynchronous input-\n+output facilities. HP Ada supports asynchronous input-\n output on OpenVMS Alpha. Familiarity with the following is\n recommended:\n @itemize @bullet\n@@ -21604,10 +21674,10 @@ recommended:\n \n @noindent\n GNAT provides I/O facilities that are completely\n-compatible with DEC Ada. The distribution includes the\n-standard DEC Ada versions of all I/O packages, operating\n-in a manner compatible with DEC Ada. In particular, the\n-following packages are by default the DEC Ada (Ada 83)\n+compatible with HP Ada. The distribution includes the\n+standard HP Ada versions of all I/O packages, operating\n+in a manner compatible with HP Ada. In particular, the\n+following packages are by default the HP Ada (Ada 83)\n versions of these packages rather than the renamings\n suggested in annex J of the Ada 95 Reference Manual:\n @itemize @bullet\n@@ -21622,7 +21692,7 @@ suggested in annex J of the Ada 95 Reference Manual:\n The use of the standard Ada 95 syntax for child packages (for\n example, @code{ADA.TEXT_IO}) retrieves the Ada 95 versions of these\n packages, as defined in the Ada 95 Reference Manual.\n-GNAT provides DIGITAL-compatible predefined instantiations\n+GNAT provides HP-compatible predefined instantiations\n of the @code{TEXT_IO} packages, and also\n provides the standard predefined instantiations required\n by the Ada 95 Reference Manual.\n@@ -21660,12 +21730,12 @@ This chapter covers the following:\n @section Implementation Limits\n \n @noindent\n-The following table lists implementation limits for DEC Ada\n+The following table lists implementation limits for HP Ada\n and GNAT systems.\n @multitable @columnfractions .60 .20 .20\n @sp 1\n @item  @emph{Compilation Parameter}\n-@tab   @emph{DEC Ada}\n+@tab   @emph{HP Ada}\n @tab   @emph{GNAT}\n @sp 1\n \n@@ -21743,9 +21813,6 @@ and GNAT systems.\n @tab   2**31-1\n @end multitable\n \n-@node  Tools\n-@section Tools\n-\n @end ifset\n \n @c **************************************\n@@ -23305,12 +23372,19 @@ later.\n \n The rule is simple. If a unit has elaboration code that can directly or\n indirectly make a call to a subprogram in a @code{with}'ed unit, or instantiate\n-a generic unit in a @code{with}'ed unit,\n+a generic package in a @code{with}'ed unit,\n then if the @code{with}'ed unit does not have\n pragma @code{Pure} or @code{Preelaborate}, then the client should have\n a pragma @code{Elaborate_All}\n for the @code{with}'ed unit. By following this rule a client is\n assured that calls can be made without risk of an exception.\n+\n+For generic subprogram instantiations, the rule can be relaxed to\n+require only a pragma @code{Elaborate} since elaborating the body\n+of a subprogram cannot cause any transitive elaboration (we are\n+not calling the subprogram in this case, just elaborating its\n+declaration).\n+\n If this rule is not followed, then a program may be in one of four\n states:\n \n@@ -23345,10 +23419,11 @@ may be true even if the rule is not followed.\n @end table\n \n @noindent\n-Note that one additional advantage of following our Elaborate_All rule\n+Note that one additional advantage of following our rules on the use\n+of @code{Elaborate} and @code{Elaborate_All}\n is that the program continues to stay in the ideal (all orders OK) state\n even if maintenance\n-changes some bodies of some subprograms. Conversely, if a program that does\n+changes some bodies of some units. Conversely, if a program that does\n not follow this rule happens to be safe at some point, this state of affairs\n may deteriorate silently as a result of maintenance changes.\n \n@@ -23698,36 +23773,42 @@ rule we previously described as the right approach. Let's restate it:\n @itemize\n @item\n @emph{If a unit has elaboration code that can directly or indirectly make a\n-call to a subprogram in a @code{with}'ed unit, or instantiate a generic unit\n-in a @code{with}'ed unit, then if the @code{with}'ed unit\n+call to a subprogram in a @code{with}'ed unit, or instantiate a generic\n+package in a @code{with}'ed unit, then if the @code{with}'ed unit\n does not have pragma @code{Pure} or\n @code{Preelaborate}, then the client should have an\n-@code{Elaborate_All} for the @code{with}'ed unit.}\n+@code{Elaborate_All} pragma for the @code{with}'ed unit.}\n+\n+@emph{In the case of instantiating a generic subprogram, it is always\n+sufficient to have only an @code{Elaborate} pragma for the\n+@code{with}'ed unit.}\n @end itemize\n \n @noindent\n By following this rule a client is assured that calls and instantiations\n can be made without risk of an exception.\n \n In this mode GNAT traces all calls that are potentially made from\n-elaboration code, and puts in any missing implicit @code{Elaborate_All}\n-pragmas.\n+elaboration code, and puts in any missing implicit @code{Elaborate}\n+and @code{Elaborate_All} pragmas.\n The advantage of this approach is that no elaboration problems\n are possible if the binder can find an elaboration order that is\n-consistent with these implicit @code{Elaborate_All} pragmas. The\n+consistent with these implicit @code{Elaborate} and\n+@code{Elaborate_All} pragmas. The\n disadvantage of this approach is that no such order may exist.\n \n-If the binder does not generate any diagnostics, then it means that it\n-has found an elaboration order that is guaranteed to be safe. However,\n-the binder may still be relying on implicitly generated\n-@code{Elaborate_All} pragmas so portability to other compilers than\n-GNAT is not guaranteed.\n+If the binder does not generate any diagnostics, then it means that it has\n+found an elaboration order that is guaranteed to be safe. However, the binder\n+may still be relying on implicitly generated @code{Elaborate} and\n+@code{Elaborate_All} pragmas so portability to other compilers than GNAT is not\n+guaranteed.\n \n If it is important to guarantee portability, then the compilations should\n use the\n @option{-gnatwl}\n (warn on elaboration problems) switch. This will cause warning messages\n-to be generated indicating the missing @code{Elaborate_All} pragmas.\n+to be generated indicating the missing @code{Elaborate} and\n+@code{Elaborate_All} pragmas.\n Consider the following source program:\n \n @smallexample @c ada\n@@ -23772,7 +23853,7 @@ and these warnings can be used as a guide for supplying manually\n the missing pragmas. It is usually a bad idea to use this warning\n option during development. That's because it will warn you when\n you need to put in a pragma, but cannot warn you when it is time\n-to take it out. So the use of pragma Elaborate_All may lead to\n+to take it out. So the use of pragma @code{Elaborate_All} may lead to\n unnecessary dependencies and even false circularities.\n \n This default mode is more restrictive than the Ada Reference\n@@ -23980,7 +24061,7 @@ must be elaborated before itself, and that's a circularity.\n @end enumerate\n \n @noindent\n-Indeed, if you add an explicit pragma Elaborate_All for @code{Utils} in\n+Indeed, if you add an explicit pragma @code{Elaborate_All} for @code{Utils} in\n the body of @code{Decls} you will get a true Ada Reference Manual\n circularity that makes the program illegal.\n \n@@ -24321,15 +24402,15 @@ the case of complex legacy code.\n @item Perform dynamic checks\n If the compilations are done using the\n @option{-gnatE}\n-(dynamic elaboration check) switch, then GNAT behaves in\n-a quite different manner. Dynamic checks are generated for all calls\n-that could possibly result in raising an exception. With this switch,\n-the compiler does not generate implicit @code{Elaborate_All} pragmas.\n-The behavior then is exactly as specified in the Ada 95 Reference Manual.\n-The binder will generate an executable program that may or may not\n-raise @code{Program_Error}, and then it is the programmer's job to ensure\n-that it does not raise an exception. Note that it is important to\n-compile all units with the switch, it cannot be used selectively.\n+(dynamic elaboration check) switch, then GNAT behaves in a quite different\n+manner. Dynamic checks are generated for all calls that could possibly result\n+in raising an exception. With this switch, the compiler does not generate\n+implicit @code{Elaborate} or @code{Elaborate_All} pragmas. The behavior then is\n+exactly as specified in the Ada 95 Reference Manual. The binder will generate\n+an executable program that may or may not raise @code{Program_Error}, and then\n+it is the programmer's job to ensure that it does not raise an exception. Note\n+that it is important to compile all units with the switch, it cannot be used\n+selectively.\n \n @item Suppress checks\n The drawback of dynamic checks is that they generate a\n@@ -24341,15 +24422,15 @@ then you can use the configuration pragma\n example this pragma could be placed in the @file{gnat.adc} file.\n \n @item Suppress checks selectively\n-When you know that certain calls in elaboration code cannot possibly\n-lead to an elaboration error, and the binder nevertheless generates warnings\n-on those calls and inserts Elaborate_All pragmas that lead to elaboration\n-circularities, it is possible to remove those warnings locally and obtain\n-a program that will bind. Clearly this can be unsafe, and it is the\n-responsibility of the programmer to make sure that the resulting program has\n-no elaboration anomalies. The pragma @code{Suppress (Elaboration_Check)} can\n-be used with different granularity to suppress warnings and break\n-elaboration circularities:\n+When you know that certain calls or instantiations in elaboration code cannot\n+possibly lead to an elaboration error, and the binder nevertheless complains\n+about implicit @code{Elaborate} and @code{Elaborate_All} pragmas that lead to\n+elaboration circularities, it is possible to remove those warnings locally and\n+obtain a program that will bind. Clearly this can be unsafe, and it is the\n+responsibility of the programmer to make sure that the resulting program has no\n+elaboration anomalies. The pragma @code{Suppress (Elaboration_Check)} can be\n+used with different granularity to suppress warnings and break elaboration\n+circularities:\n \n @itemize @bullet\n @item\n@@ -24560,8 +24641,8 @@ raised by the use of access-to-subprogram types and dynamic dispatching,\n the program is free of elaboration errors. If it is important that the\n program be portable, then use the\n @option{-gnatwl}\n-switch to generate warnings about missing @code{Elaborate_All}\n-pragmas, and supply the missing pragmas.\n+switch to generate warnings about missing @code{Elaborate} or\n+@code{Elaborate_All} pragmas, and supply the missing pragmas.\n \n If the program fails to bind using the default static elaboration\n handling, then you can fix the program to eliminate the binder\n@@ -24710,7 +24791,7 @@ It is of course quite unlikely that both these results are correct, so\n it is up to you in a case like this to investigate the source of the\n difference, by looking at the two elaboration orders that are chosen,\n and figuring out which is correct, and then adding the necessary\n-@code{Elaborate_All} pragmas to ensure the desired order.\n+@code{Elaborate} or @code{Elaborate_All} pragmas to ensure the desired order.\n \n @node Inline Assembler\n @appendix Inline Assembler\n@@ -25443,7 +25524,7 @@ applications developed in other Ada environments.\n * Implementation-dependent characteristics::\n * Compatibility with Other Ada 95 Systems::\n * Representation Clauses::\n-* Compatibility with DEC Ada 83::\n+* Compatibility with HP Ada 83::\n @ifset vms\n * Transitioning from Alpha to Integrity OpenVMS::\n @end ifset\n@@ -25510,7 +25591,7 @@ the item nearer to the declaration of the entity to which it refers.\n A particular case is that representation pragmas\n @ifset vms\n (including the\n-extended DEC Ada 83 compatibility pragmas such as @code{Export_Procedure})\n+extended HP Ada 83 compatibility pragmas such as @code{Export_Procedure})\n @end ifset\n cannot be applied to a subprogram body.  If necessary, a separate subprogram\n declaration must be introduced to which the pragma can be applied.\n@@ -25663,7 +25744,7 @@ are described in the GNAT Reference Manual, and these include several that\n are specifically intended to correspond to other vendors' Ada 83 pragmas.\n For migrating from VADS, the pragma @code{Use_VADS_Size} may be useful.\n For\n-compatibility with DEC Ada 83, GNAT supplies the pragmas\n+compatibility with HP Ada 83, GNAT supplies the pragmas\n @code{Extend_System}, @code{Ident}, @code{Inline_Generic},\n @code{Interface_Name}, @code{Passive}, @code{Suppress_All},\n and @code{Volatile}.\n@@ -25682,7 +25763,7 @@ implementation.  All GNAT-defined attributes are described in the\n @cite{GNAT Reference Manual}, and these include several that are specifically\n intended\n to correspond to other vendors' Ada 83 attributes.  For migrating from VADS,\n-the attribute @code{VADS_Size} may be useful.  For compatibility with DEC\n+the attribute @code{VADS_Size} may be useful.  For compatibility with HP\n Ada 83, GNAT supplies the attributes @code{Bit}, @code{Machine_Size} and\n @code{Type_Class}.\n \n@@ -25717,7 +25798,8 @@ Program_Error being raised due to an ``Access Before Elaboration'': an attempt\n to invoke a subprogram its body has been elaborated, or to instantiate a\n generic before the generic body has been elaborated.  By default GNAT\n attempts to choose a safe order (one that will not encounter access before\n-elaboration problems) by implicitly inserting Elaborate_All pragmas where\n+elaboration problems) by implicitly inserting @code{Elaborate} or\n+@code{Elaborate_All} pragmas where\n needed.  However, this can lead to the creation of elaboration circularities\n and a resulting rejection of the program by gnatbind.  This issue is\n thoroughly described in @ref{Elaboration Order Handling in GNAT}.\n@@ -25862,36 +25944,36 @@ is to use a component size clause for the element size in an array,\n or a record representation clause for an access field in a record.\n @end table\n \n-@node Compatibility with DEC Ada 83\n-@section Compatibility with DEC Ada 83\n+@node Compatibility with HP Ada 83\n+@section Compatibility with HP Ada 83\n \n @noindent\n The VMS version of GNAT fully implements all the pragmas and attributes\n-provided by DEC Ada 83, as well as providing the standard DEC Ada 83\n+provided by HP Ada 83, as well as providing the standard HP Ada 83\n libraries, including Starlet.  In addition, data layouts and parameter\n passing conventions are highly compatible.  This means that porting\n-existing DEC Ada 83 code to GNAT in VMS systems should be easier than\n+existing HP Ada 83 code to GNAT in VMS systems should be easier than\n most other porting efforts.  The following are some of the most\n-significant differences between GNAT and DEC Ada 83.\n+significant differences between GNAT and HP Ada 83.\n \n @table @asis\n @item Default floating-point representation\n-In GNAT, the default floating-point format is IEEE, whereas in DEC Ada 83,\n+In GNAT, the default floating-point format is IEEE, whereas in HP Ada 83,\n it is VMS format.  GNAT does implement the necessary pragmas\n (Long_Float, Float_Representation) for changing this default.\n \n @item System\n The package System in GNAT exactly corresponds to the definition in the\n Ada 95 reference manual, which means that it excludes many of the\n-DEC Ada 83 extensions.  However, a separate package Aux_DEC is provided\n+HP Ada 83 extensions.  However, a separate package Aux_DEC is provided\n that contains the additional definitions, and a special pragma,\n Extend_System allows this package to be treated transparently as an\n extension of package System.\n \n @item To_Address\n The definitions provided by Aux_DEC are exactly compatible with those\n-in the DEC Ada 83 version of System, with one exception.\n-DEC Ada provides the following declarations:\n+in the HP Ada 83 version of System, with one exception.\n+HP Ada provides the following declarations:\n \n @smallexample @c ada\n TO_ADDRESS (INTEGER)\n@@ -25903,7 +25985,7 @@ TO_ADDRESS (universal_integer)\n The version of TO_ADDRESS taking a universal integer argument is in fact\n an extension to Ada 83 not strictly compatible with the reference manual.\n In GNAT, we are constrained to be exactly compatible with the standard,\n-and this means we cannot provide this capability.  In DEC Ada 83, the\n+and this means we cannot provide this capability.  In HP Ada 83, the\n point of this definition is to deal with a call like:\n \n @smallexample @c ada\n@@ -25913,7 +25995,7 @@ TO_ADDRESS (16#12777#);\n @noindent\n Normally, according to the Ada 83 standard, one would expect this to be\n ambiguous, since it matches both the INTEGER and UNSIGNED_LONGWORD forms\n-of TO_ADDRESS@.  However, in DEC Ada 83, there is no ambiguity, since the\n+of TO_ADDRESS@.  However, in HP Ada 83, there is no ambiguity, since the\n definition using universal_integer takes precedence.\n \n In GNAT, since the version with universal_integer cannot be supplied, it is\n@@ -25942,10 +26024,10 @@ which in GNAT is treated like any other declared task.\n @end table\n \n For full details on these and other less significant compatibility issues,\n-see appendix E of the Digital publication entitled @cite{DEC Ada, Technical\n-Overview and Comparison on DIGITAL Platforms}.\n+see appendix E of the HP publication entitled @cite{HP Ada, Technical\n+Overview and Comparison on HP Platforms}.\n \n-For GNAT running on other than VMS systems, all the DEC Ada 83 pragmas and\n+For GNAT running on other than VMS systems, all the HP Ada 83 pragmas and\n attributes are recognized, although only a subset of them can sensibly\n be implemented.  The description of pragmas in this reference manual\n indicates whether or not they are applicable to non-VMS systems.\n@@ -26559,6 +26641,7 @@ environment to build your executable.\n @menu\n * C Calling Convention::\n * Stdcall Calling Convention::\n+* Win32 Calling Convention::\n * DLL Calling Convention::\n @end menu\n \n@@ -26578,6 +26661,9 @@ are available for Windows:\n @item\n @code{Stdcall} (Microsoft defined)\n \n+@item\n+@code{Win32} (GNAT specific)\n+\n @item\n @code{DLL} (GNAT specific)\n @end itemize\n@@ -26621,8 +26707,8 @@ is missing, as in the above example, this parameter is set to be the\n \n When importing a variable defined in C, you should always use the @code{C}\n calling convention unless the object containing the variable is part of a\n-DLL (in which case you should use the @code{DLL} calling convention,\n-@pxref{DLL Calling Convention}).\n+DLL (in which case you should use the @code{Stdcall} calling\n+convention, @pxref{Stdcall Calling Convention}).\n \n @node Stdcall Calling Convention\n @subsection @code{Stdcall} Calling Convention\n@@ -26697,14 +26783,10 @@ The @code{gnatdll} tool, which creates the import library for the DLL, is able\n to handle those cases (@pxref{Using gnatdll} for the description of\n the switches).\n \n-@node DLL Calling Convention\n-@subsection @code{DLL} Calling Convention\n-\n @noindent\n-This convention, which is GNAT-specific, must be used when you want to\n-import in Ada a variables defined in a DLL. For functions and procedures\n-this convention is equivalent to the @code{Stdcall} convention. As an\n-example, if a DLL contains a variable defined as:\n+It is also possible to import variables defined in a DLL by using an\n+import pragma for a variable. As an example, if a DLL contains a\n+variable defined as:\n \n @smallexample\n int my_var;\n@@ -26716,13 +26798,27 @@ then, to access this variable from Ada you should write:\n @smallexample @c ada\n @group\n My_Var : Interfaces.C.int;\n-pragma Import (DLL, My_Var);\n+pragma Import (Stdcall, My_Var);\n @end group\n @end smallexample\n \n-The remarks concerning the @code{External_Name} and @code{Link_Name}\n-parameters given in the previous sections equally apply to the @code{DLL}\n-calling convention.\n+@noindent\n+Note that to ease building cross-platform bindings this convention\n+will be handled as a @code{C} calling convention on non Windows platforms.\n+\n+@node Win32 Calling Convention\n+@subsection @code{Win32} Calling Convention\n+\n+@noindent\n+This convention, which is GNAT-specific is fully equivalent to the\n+@code{Stdcall} calling convention described above.\n+\n+@node DLL Calling Convention\n+@subsection @code{DLL} Calling Convention\n+\n+@noindent\n+This convention, which is GNAT-specific is fully equivalent to the\n+@code{Stdcall} calling convention described above.\n \n @node Introduction to Dynamic Link Libraries (DLLs)\n @section Introduction to Dynamic Link Libraries (DLLs)\n@@ -26907,9 +27003,9 @@ end API;\n @end smallexample\n \n @noindent\n-Note that a variable is @strong{always imported with a DLL convention}. A\n-function can have @code{C}, @code{Stdcall} or @code{DLL} convention. For\n-subprograms, the @code{DLL} convention is a synonym of @code{Stdcall}\n+Note that a variable is\n+@strong{always imported with a Stdcall convention}. A function\n+can have @code{C} or @code{Stdcall} convention.\n (@pxref{Windows Calling Conventions}).\n \n @node Creating an Import Library\n@@ -27218,9 +27314,11 @@ library (@pxref{Using gnatdll}).\n @end enumerate\n \n @noindent\n-Note that a relocatable DLL stripped using the @code{strip} binutils\n-tool will not be relocatable anymore. To build a DLL without debug\n-information pass @code{-largs -s} to @code{gnatdll}.\n+Note that a relocatable DLL and stripped using the @code{strip}\n+binutils tool will not be relocatable anymore. To build a DLL without\n+debug information pass @code{-largs -s} to @code{gnatdll}. This\n+restriction does not apply to a DLL built using a Library Project.\n+@pxref{Library Projects}.\n \n @node Limitations When Using Ada DLLs from Ada\n @subsection Limitations When Using Ada DLLs from Ada\n@@ -27250,10 +27348,9 @@ Windows object handles, etc.\n Building a DLL is a way to encapsulate a set of services usable from any\n application. As a result, the Ada entities exported by a DLL should be\n exported with the @code{C} or @code{Stdcall} calling conventions to avoid\n-any Ada name mangling. Please note that the @code{Stdcall} convention\n-should only be used for subprograms, not for variables. As an example here\n-is an Ada package @code{API}, spec and body, exporting two procedures, a\n-function, and a variable:\n+any Ada name mangling. As an example here is an Ada package\n+@code{API}, spec and body, exporting two procedures, a function, and a\n+variable:\n \n @smallexample @c ada\n @group\n@@ -27944,11 +28041,10 @@ switch). Here are the step-by-step instructions for debugging it:\n $ gdb -nw ada_main\n @end smallexample\n \n-@item Break on the main procedure and run the program.\n+@item Start the program and stop at the beginning of the main procedure\n \n @smallexample\n-(gdb) break ada_main\n-(gdb) run\n+(gdb) start\n @end smallexample\n \n @noindent\n@@ -27961,7 +28057,7 @@ possible to set a breakpoint in the DLL.\n \n @smallexample\n (gdb) break ada_dll\n-(gdb) run\n+(gdb) cont\n @end smallexample\n \n @end enumerate\n@@ -27971,6 +28067,10 @@ At this stage a breakpoint is set inside the DLL. From there on\n you can use the standard approach to debug the whole program\n (@pxref{Running and Debugging Ada Programs}).\n \n+@ignore\n+@c This used to work, probably because the DLLs were non-relocatable\n+@c keep this section around until the problem is sorted out.\n+\n To break on the @code{DllMain} routine it is not possible to follow\n the procedure above. At the time the program stop on @code{ada_main}\n the @code{DllMain} routine as already been called. Either you can use\n@@ -27980,7 +28080,7 @@ the procedure below @pxref{Debugging the DLL Directly} or this procedure:\n @item Launch @code{GDB} on the main program.\n \n @smallexample\n-$ gdb -nw ada_main\n+$ gdb ada_main\n @end smallexample\n \n @item Load DLL symbols\n@@ -28006,6 +28106,7 @@ on the proper line (break in @file{ada_dll.adb} line 45).\n @end smallexample\n \n @end enumerate\n+@end ignore\n \n @node Program Built with Foreign Tools and DLL Built with GCC/GNAT\n @subsection Program Built with Foreign Tools and DLL Built with GCC/GNAT\n@@ -28039,34 +28140,58 @@ been built with debugging information (see GNAT -g option).\n \n @enumerate 1\n @item\n-Launch the debugger on the DLL.\n+Find out the executable starting address\n \n @smallexample\n-$ gdb -nw test.dll\n+$ objdump --file-header main.exe\n @end smallexample\n \n-@item Set a breakpoint on a DLL subroutine.\n+The starting address is reported on the last line. For example:\n \n @smallexample\n-(gdb) break ada_dll.adb:45\n+main.exe:     file format pei-i386\n+architecture: i386, flags 0x0000010a:\n+EXEC_P, HAS_DEBUG, D_PAGED\n+start address 0x00401010\n @end smallexample\n \n-Note that at this point it is not possible to break using the routine symbol\n-directly as the program is not yet running. The solution is to break\n-on the proper line (break in @file{ada_dll.adb} line 45).\n+@item\n+Launch the debugger on the executable.\n+\n+@smallexample\n+$ gdb main.exe\n+@end smallexample\n \n @item\n-Specify the executable file to @code{GDB}.\n+Set a breakpoint at the starting address, and launch the program.\n \n @smallexample\n-(gdb) exec-file main.exe\n+$ (gdb) break *0x00401010\n+$ (gdb) run\n @end smallexample\n \n+The program will stop at the given address.\n+\n @item\n-Run the program.\n+Set a breakpoint on a DLL subroutine.\n \n @smallexample\n-(gdb) run\n+(gdb) break ada_dll.adb:45\n+@end smallexample\n+\n+Or if you want to break using a symbol on the DLL, you need first to\n+select the Ada language (language used by the DLL).\n+\n+@smallexample\n+(gdb) set language ada\n+(gdb) break ada_dll\n+@end smallexample\n+\n+@item\n+Continue the program.\n+\n+@smallexample\n+(gdb) cont\n @end smallexample\n \n @noindent\n@@ -28104,7 +28229,7 @@ that the process PID for @file{main.exe} is 208.\n @item Launch gdb.\n \n @smallexample\n-$ gdb -nw\n+$ gdb\n @end smallexample\n \n @item Attach to the running process to be debugged.\n@@ -28128,7 +28253,7 @@ $ gdb -nw\n @item Continue process execution.\n \n @smallexample\n-(gdb) continue\n+(gdb) cont\n @end smallexample\n \n @end enumerate"}, {"sha": "18fa05f1f0b81ef191a42872ced447e78b8a26e9", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32e209e4f9619ea1c18a56d758d445326c5421b4/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=32e209e4f9619ea1c18a56d758d445326c5421b4", "patch": "@@ -153,6 +153,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatzc         ^ /DISTRIBUTION_STUBS=CALLER\n -gnatzr         ^ /DISTRIBUTION_STUBS=RECEIVER\n -gnat83         ^ /83\n+-gnat95         ^ /95\n+-gnat05         ^ /05\n -gnatx          ^ /XREF=SUPPRESS\n -gnatX          ^ /EXTENSIONS_ALLOWED\n --RTS           ^ /RUNTIME_SYSTEM"}]}