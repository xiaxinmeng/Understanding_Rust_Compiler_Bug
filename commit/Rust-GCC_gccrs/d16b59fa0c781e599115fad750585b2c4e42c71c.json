{"sha": "d16b59fa0c781e599115fad750585b2c4e42c71c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2YjU5ZmEwYzc4MWU1OTkxMTVmYWQ3NTA1ODViMmM0ZTQyYzcxYw==", "commit": {"author": {"name": "Dorit Naishlos", "email": "dorit@il.ibm.com", "date": "2004-12-09T11:06:20Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2004-12-09T11:06:20Z"}, "message": "genopinit.c (vec_realign_store_optab): Initialization removed.\n\n2004-12-09  Dorit Naishlos  <dorit@il.ibm.com>\n\n        * genopinit.c (vec_realign_store_optab): Initialization removed.\n        * optabs.c (optab_for_tree_code): REALIGN_STORE_EXPR case removed.\n        * optabs.h (optab_index): OTI_vec_realign_store Removed.\n        (vec_realign_store_optab): Removed.\n        * target-def.h (TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE): Removed.\n        * target.h (builtin_mask_for_store): Removed.\n        * tree.def (REALIGN_STORE_EXPR): Removed.\n        * config/rs6000/rs6000.c (rs6000_builtin_mask_for_store): Removed.\n        (altivec_builtin_mask_for_store): Removed.\n        (altivec_init_builtins): Removed initialization of\n        altivec_builtin_mask_for_store.\n\n        * doc/tm.texi (TARGET_VECTORIZE_MISALIGNED_MEM_OK): New.\n        (TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): New.\n\nFrom-SVN: r91932", "tree": {"sha": "73dffeb9a21616d6d2e8d1fd2faac7d6f0751b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73dffeb9a21616d6d2e8d1fd2faac7d6f0751b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d16b59fa0c781e599115fad750585b2c4e42c71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b59fa0c781e599115fad750585b2c4e42c71c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16b59fa0c781e599115fad750585b2c4e42c71c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16b59fa0c781e599115fad750585b2c4e42c71c/comments", "author": null, "committer": null, "parents": [{"sha": "08f2586c92554b92c43ae5becc531807c927f75b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f2586c92554b92c43ae5becc531807c927f75b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f2586c92554b92c43ae5becc531807c927f75b"}], "stats": {"total": 110, "additions": 59, "deletions": 51}, "files": [{"sha": "ab6efa3b2efc919282acb82510e0f385709b5d76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -1,3 +1,20 @@\n+2004-12-09  Dorit Naishlos  <dorit@il.ibm.com>\n+\n+\t* genopinit.c (vec_realign_store_optab): Initialization removed.\n+\t* optabs.c (optab_for_tree_code): REALIGN_STORE_EXPR case removed.\n+\t* optabs.h (optab_index): OTI_vec_realign_store Removed.\n+\t(vec_realign_store_optab): Removed.\n+\t* target-def.h (TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE): Removed.\n+\t* target.h (builtin_mask_for_store): Removed.\n+\t* tree.def (REALIGN_STORE_EXPR): Removed.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_mask_for_store): Removed.\n+\t(altivec_builtin_mask_for_store): Removed.\n+\t(altivec_init_builtins): Removed initialization of\n+\taltivec_builtin_mask_for_store.\n+\n+\t* doc/tm.texi (TARGET_VECTORIZE_MISALIGNED_MEM_OK): New.\n+\t(TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD): New.\n+\n 2004-12-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.def (SET_TYPE): Remove."}, {"sha": "9a593fd3fed6f3516c3a1663e1387f555d105fd1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -147,8 +147,6 @@ enum rs6000_nop_insertion rs6000_sched_insert_nops;\n \n /* Support targetm.vectorize.builtin_mask_for_load.  */\n static GTY(()) tree altivec_builtin_mask_for_load;\n-/* Support targetm.vectorize.builtin_mask_for_store.  */\n-static GTY(()) tree altivec_builtin_mask_for_store;\n \n /* Size of long double */\n const char *rs6000_long_double_size_string;\n@@ -693,7 +691,6 @@ static int pad_groups (FILE *, int, rtx, rtx);\n static void rs6000_sched_finish (FILE *, int);\n static int rs6000_use_sched_lookahead (void);\n static tree rs6000_builtin_mask_for_load (void);\n-static tree rs6000_builtin_mask_for_store (void);\n \n static void rs6000_init_builtins (void);\n static rtx rs6000_expand_unop_builtin (enum insn_code, tree, rtx);\n@@ -933,9 +930,6 @@ static const char alt_reg_names[][8] =\n #undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD\n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD rs6000_builtin_mask_for_load\n \n-#undef TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE\n-#define TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE rs6000_builtin_mask_for_store\n-\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS rs6000_init_builtins\n \n@@ -1592,16 +1586,6 @@ rs6000_builtin_mask_for_load (void)\n     return 0;\n }\n \n-/* Implement targetm.vectorize.builtin_mask_for_store.  */\n-static tree\n-rs6000_builtin_mask_for_store (void)\n-{\n-  if (TARGET_ALTIVEC)\n-    return altivec_builtin_mask_for_store;\n-  else\n-    return 0;\n-}\n-\n /* Handle generic options of the form -mfoo=yes/no.\n    NAME is the option name.\n    VALUE is the option value.\n@@ -8308,17 +8292,6 @@ altivec_init_builtins (void)\n                                BUILT_IN_MD, NULL, NULL_TREE);\n       /* Record the decl. Will be used by rs6000_builtin_mask_for_load.  */\n       altivec_builtin_mask_for_load = decl;\n-\n-\n-      /* Initialize target builtin that implements\n-         targetm.vectorize.builtin_mask_for_store.  */\n-\n-      decl = lang_hooks.builtin_function (\"__builtin_altivec_mask_for_store\",\n-                               v16qi_ftype_long_pcvoid,\n-                               ALTIVEC_BUILTIN_MASK_FOR_STORE,\n-                               BUILT_IN_MD, NULL, NULL_TREE);\n-      /* Record the decl. Will be used by rs6000_builtin_mask_for_store.  */\n-      altivec_builtin_mask_for_store = decl;\n     }\n }\n "}, {"sha": "f021d15e505d5ebef97636d28447309605cc87ae", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -5184,6 +5184,45 @@ holding the constant.  This restriction is often true of addresses\n of TLS symbols for various targets.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_MISALIGNED_MEM_OK (@var{mode})\n+This hook should return true if a move* pattern to/from memory\n+can be generated for machine_mode @var{mode} even if the memory location \n+is unaligned.\n+If a move* of data to/from unaligned memory locations is not supported for\n+machine_mode @var{mode}, the hook should return false.  \n+This hook is used by the autovectorizer, and when expanding a \n+@code{MISALIGNED_INDIRECT_REF} expression.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD (void)\n+This hook should return the DECL of a function @var{f} that given an\n+address @var{addr} as an argument returns a mask @var{m} that can be\n+used to extract from two vectors the relevant data that resides in \n+@var{addr} in case @var{addr} is not properly aligned.\n+\n+The autovectrizer, when vectorizing a load operation from an address\n+@var{addr} that may be unaligned, will generate two vector loads from\n+the two aligned addresses around @var{addr}. It then generates a\n+@code{REALIGN_LOAD} operation to extract the relevant data from the\n+two loaded vectors. The first two arguments to @code{REALIGN_LOAD},\n+@var{v1} and @var{v2}, are the two vectors, each of size @var{VS}, and\n+the third argument, @var{OFF}, defines how the data will be extracted\n+from these two vectors: if @var{OFF} is 0, then the returned vector is\n+@var{v2}; otherwise, the returned vector is composed from the last \n+@var{VS}-@var{OFF} elements of @var{v1} concatenated to the first \n+@var{OFF} elements of @var{v2}.\n+\n+If this hook is defined, the autovectorizer will generate a call\n+to @var{f} (using the DECL tree that this hook returns) and will\n+use the return value of @var{f} as the argument @var{OFF} to\n+@code{REALIGN_LOAD}. Therefore, the mask @var{m} returned by @var{f}\n+should comply with the semantics expected by @code{REALIGN_LOAD} \n+described above.\n+If this hook is not defined, then @var{addr} will be used as\n+the argument @var{OFF} to @code{REALIGN_LOAD}, in which case the low\n+log2(@var{VS})-1 bits of @var{addr} will be considered.\n+@end deftypefn\n+\n @node Condition Code\n @section Condition Code Status\n @cindex condition code status"}, {"sha": "494a4821cc0d9efce23c6934c5c1755fcbc9d7e6", "filename": "gcc/genopinit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -170,7 +170,6 @@ static const char * const optabs[] =\n   \"vec_set_optab->handlers[$A].insn_code = CODE_FOR_$(vec_set$a$)\",\n   \"vec_extract_optab->handlers[$A].insn_code = CODE_FOR_$(vec_extract$a$)\",\n   \"vec_init_optab->handlers[$A].insn_code = CODE_FOR_$(vec_init$a$)\",\n-  \"vec_realign_store_optab->handlers[$A].insn_code = CODE_FOR_$(vec_realign_store_$a$)\",\n   \"vec_realign_load_optab->handlers[$A].insn_code = CODE_FOR_$(vec_realign_load_$a$)\",\n   \"vcond_gen_code[$A] = CODE_FOR_$(vcond$a$)\",\n   \"vcondu_gen_code[$A] = CODE_FOR_$(vcondu$a$)\" };"}, {"sha": "7c5c6aa71dd6f47f0e3f3aa4e0c9313158f5fa11", "filename": "gcc/optabs.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -294,9 +294,6 @@ optab_for_tree_code (enum tree_code code, tree type)\n     case MIN_EXPR:\n       return TYPE_UNSIGNED (type) ? umin_optab : smin_optab;\n \n-    case REALIGN_STORE_EXPR:\n-      return vec_realign_store_optab;\n-\n     case REALIGN_LOAD_EXPR:\n       return vec_realign_load_optab;\n "}, {"sha": "241abfdb5a56f29d8020bd3d8f20e73f4af384a4", "filename": "gcc/optabs.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -228,8 +228,6 @@ enum optab_index\n   OTI_vec_extract,\n   /* Initialize vector operand.  */\n   OTI_vec_init,\n-  /* Extract specified elements from vectors, for vector store.  */\n-  OTI_vec_realign_store,\n   /* Extract specified elements from vectors, for vector load.  */\n   OTI_vec_realign_load,\n \n@@ -334,7 +332,6 @@ extern GTY(()) optab optab_table[OTI_MAX];\n #define vec_set_optab (optab_table[OTI_vec_set])\n #define vec_extract_optab (optab_table[OTI_vec_extract])\n #define vec_init_optab (optab_table[OTI_vec_init])\n-#define vec_realign_store_optab (optab_table[OTI_vec_realign_store])\n #define vec_realign_load_optab (optab_table[OTI_vec_realign_load])\n \n /* Conversion optabs have their own table and indexes.  */"}, {"sha": "ac00556397881afb55ad23314aecac12666eb10c", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -277,12 +277,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_VECTORIZE_MISALIGNED_MEM_OK default_vect_misaligned_mem_ok\n #endif\n #define TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD 0\n-#define TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE 0\n \n #define TARGET_VECTORIZE                                                \\\n   {TARGET_VECTORIZE_MISALIGNED_MEM_OK,                                  \\\n-   TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD,\t\t\t\t\\\n-   TARGET_VECTORIZE_BUILTIN_MASK_FOR_STORE}\n+   TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD}\n \n /* In except.c */\n #define TARGET_EH_RETURN_FILTER_MODE  default_eh_return_filter_mode"}, {"sha": "aa3542c476d60f34b8c7212cadbf4d12e0bed433", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -286,17 +286,16 @@ struct gcc_target\n   struct vectorize\n   {\n     /* The following member value is a pointer to a function called\n-       by the vectorizer, and when expanding a MISALIGNED_INDIREC_REF\n+       by te vectorizer, and when expanding a MISALIGNED_INDIRECT_REF\n        expression.  If the hook returns true (false) then a move* pattern\n        to/from memory can (cannot) be generated for this mode even if the\n        memory location is unaligned.  */\n     bool (* misaligned_mem_ok) (enum machine_mode);\n \n-    /* The following member values are pointers to functions called\n+    /* The following member value is a pointer to a function called\n        by the vectorizer, and return the decl of the target builtin\n        function.  */\n     tree (* builtin_mask_for_load) (void);\n-    tree (* builtin_mask_for_store) (void);\n   } vectorize;\n \n   /* Return machine mode for filter value.  */"}, {"sha": "ccb75c26f5b69e328277b554c5b564a5fb01bc26", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d16b59fa0c781e599115fad750585b2c4e42c71c/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=d16b59fa0c781e599115fad750585b2c4e42c71c", "patch": "@@ -886,17 +886,6 @@ DEFTREECODE (WITH_SIZE_EXPR, \"with_size_expr\", tcc_expression, 2)\n    generated by the builtin targetm.vectorize.mask_for_load_builtin_decl.  */\n DEFTREECODE (REALIGN_LOAD_EXPR, \"realign_load\", tcc_expression, 3)\n \n-/* Extract elements from two input vectors Operand 0 and Operand 1\n-   size VS, according to the offset OFF defined by Operand 2 as\n-   follows:\n-   If OFF > 0, the last OFF elements of vector OP0 are concatenated to\n-   the first VS - OFF elements of the vector OP1.\n-   If OFF == 0, then the returned vector is OP0.\n-   On different targets OFF may take different forms; It can be an address, in \n-   which case its low log2(VS)-1 bits define the offset, or it can be a mask \n-   generated by the builtin targetm.vectorize.mask_for_store_builtin_decl.  */\n-DEFTREECODE (REALIGN_STORE_EXPR, \"realign_store\", tcc_expression, 3)\n-\n /*\n Local variables:\n mode:c"}]}