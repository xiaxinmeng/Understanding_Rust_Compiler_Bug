{"sha": "592bbe3d7eb3cff656c731e84ad872719a4a9d16", "node_id": "C_kwDOANBUbNoAKDU5MmJiZTNkN2ViM2NmZjY1NmM3MzFlODRhZDg3MjcxOWE0YTlkMTY", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-10-31T14:56:25Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-11-01T13:05:20Z"}, "message": "Allow queries on exit block.\n\nRanger was not allowing the exit block to be queried for range_on_entry\nor exit.  This removes that restriction.\n\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Allow\n\texit block to be specified.\n\t(ranger_cache::range_from_dom): If exit block is specified, use\n\tthe immediate predecessor instead of the dominator to start.\n\t* gimple-range.cc (gimple_ranger::range_on_exit): Allow query\n\tfor exit block.", "tree": {"sha": "c6ee75816835ec69939ee948ac8edd9fbba2ba72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6ee75816835ec69939ee948ac8edd9fbba2ba72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592bbe3d7eb3cff656c731e84ad872719a4a9d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592bbe3d7eb3cff656c731e84ad872719a4a9d16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592bbe3d7eb3cff656c731e84ad872719a4a9d16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592bbe3d7eb3cff656c731e84ad872719a4a9d16/comments", "author": null, "committer": null, "parents": [{"sha": "7cc2824e39440dd71a9d2832c51ef260bb36d8ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc2824e39440dd71a9d2832c51ef260bb36d8ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc2824e39440dd71a9d2832c51ef260bb36d8ca"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "89e2403acce3823b14f990990830b3fc43bf3977", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592bbe3d7eb3cff656c731e84ad872719a4a9d16/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592bbe3d7eb3cff656c731e84ad872719a4a9d16/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=592bbe3d7eb3cff656c731e84ad872719a4a9d16", "patch": "@@ -1193,9 +1193,8 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n   Value_Range block_result (type);\n   Value_Range undefined (type);\n \n-  // At this point we shouldn't be looking at the def, entry or exit block.\n-  gcc_checking_assert (bb != def_bb && bb != ENTRY_BLOCK_PTR_FOR_FN (cfun) &&\n-\t\t       bb != EXIT_BLOCK_PTR_FOR_FN (cfun));\n+  // At this point we shouldn't be looking at the def, entry block.\n+  gcc_checking_assert (bb != def_bb && bb != ENTRY_BLOCK_PTR_FOR_FN (cfun));\n   gcc_checking_assert (m_workback.length () == 0);\n \n   // If the block cache is set, then we've already visited this block.\n@@ -1434,10 +1433,15 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n   // Default value is global range.\n   get_global_range (r, name);\n \n+  // The dominator of EXIT_BLOCK doesn't seem to be set, so at least handle\n+  // the common single exit cases.\n+  if (start_bb == EXIT_BLOCK_PTR_FOR_FN (cfun) && single_pred_p (start_bb))\n+    bb = single_pred_edge (start_bb)->src;\n+  else\n+    bb = get_immediate_dominator (CDI_DOMINATORS, start_bb);\n+\n   // Search until a value is found, pushing blocks which may need calculating.\n-  for (bb = get_immediate_dominator (CDI_DOMINATORS, start_bb);\n-       bb;\n-       prev_bb = bb, bb = get_immediate_dominator (CDI_DOMINATORS, bb))\n+  for ( ; bb; prev_bb = bb, bb = get_immediate_dominator (CDI_DOMINATORS, bb))\n     {\n       // Accumulate any block exit inferred ranges.\n       m_exit.maybe_adjust_range (infer, name, bb);"}, {"sha": "110cf57445477e0c5c426bd233825418546f018f", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592bbe3d7eb3cff656c731e84ad872719a4a9d16/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592bbe3d7eb3cff656c731e84ad872719a4a9d16/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=592bbe3d7eb3cff656c731e84ad872719a4a9d16", "patch": "@@ -167,7 +167,6 @@ void\n gimple_ranger::range_on_exit (vrange &r, basic_block bb, tree name)\n {\n   // on-exit from the exit block?\n-  gcc_checking_assert (bb != EXIT_BLOCK_PTR_FOR_FN (cfun));\n   gcc_checking_assert (gimple_range_ssa_p (name));\n \n   unsigned idx;"}]}