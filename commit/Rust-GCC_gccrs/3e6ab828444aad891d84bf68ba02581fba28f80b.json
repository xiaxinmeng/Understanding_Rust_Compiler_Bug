{"sha": "3e6ab828444aad891d84bf68ba02581fba28f80b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U2YWI4Mjg0NDRhYWQ4OTFkODRiZjY4YmEwMjU4MWZiYTI4ZjgwYg==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-11-16T19:15:25Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-11-16T19:15:25Z"}, "message": "re PR fortran/58027 (\"Arithmetic overflow converting ...\" in PARAMETER triggers an ICE)\n\n2015-11-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/58027\n\tPR fortran/60993\n\t* expr.c (gfc_check_init_expr): Prevent a redundant check when a\n\t__convert_* function was inserted into an array constructor.\n\t(gfc_check_assign_symbol): Check for an initialization expression\n\twhen a __convert_* was inserted.\n\n2015-11-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/58027\n\tPR fortran/60993\n\t* gfortran.dg/pr58027.f90: New test.\n\nFrom-SVN: r230433", "tree": {"sha": "2f76e62ebe94837692b499bbd906106f2f58d12b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f76e62ebe94837692b499bbd906106f2f58d12b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e6ab828444aad891d84bf68ba02581fba28f80b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6ab828444aad891d84bf68ba02581fba28f80b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6ab828444aad891d84bf68ba02581fba28f80b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6ab828444aad891d84bf68ba02581fba28f80b/comments", "author": null, "committer": null, "parents": [{"sha": "a868811ee5cbec135266c1cce7b2defb5e2c6bf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a868811ee5cbec135266c1cce7b2defb5e2c6bf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a868811ee5cbec135266c1cce7b2defb5e2c6bf4"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "9923fd4b467fcd07a37547cea1a79faa9aa9312d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3e6ab828444aad891d84bf68ba02581fba28f80b", "patch": "@@ -1,3 +1,12 @@\n+2015-11-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/58027\n+\tPR fortran/60993\n+\t* expr.c (gfc_check_init_expr): Prevent a redundant check when a\n+\t__convert_* function was inserted into an array constructor.\n+\t(gfc_check_assign_symbol): Check for an initialization expression\n+\twhen a __convert_* was inserted.\n+\n 2015-11-15  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/50221"}, {"sha": "28ea61a2330f46a346c868b4c213cb0547453c61", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=3e6ab828444aad891d84bf68ba02581fba28f80b", "patch": "@@ -2471,7 +2471,8 @@ gfc_check_init_expr (gfc_expr *e)\n       t = false;\n \n       {\n-\tgfc_intrinsic_sym* isym;\n+\tbool conversion;\n+\tgfc_intrinsic_sym* isym = NULL;\n \tgfc_symbol* sym = e->symtree->n.sym;\n \n \t/* Simplify here the intrinsics from the IEEE_ARITHMETIC and\n@@ -2490,8 +2491,14 @@ gfc_check_init_expr (gfc_expr *e)\n \t      }\n \t  }\n \n-\tif (!gfc_is_intrinsic (sym, 0, e->where)\n-\t    || (m = gfc_intrinsic_func_interface (e, 0)) != MATCH_YES)\n+\t/* If a conversion function, e.g., __convert_i8_i4, was inserted\n+\t   into an array constructor, we need to skip the error check here.\n+           Conversion errors are  caught below in scalarize_intrinsic_call.  */\n+\tconversion = e->value.function.isym\n+\t\t   && (e->value.function.isym->conversion == 1);\n+\n+\tif (!conversion && (!gfc_is_intrinsic (sym, 0, e->where)\n+\t    || (m = gfc_intrinsic_func_interface (e, 0)) != MATCH_YES))\n \t  {\n \t    gfc_error (\"Function %qs in initialization expression at %L \"\n \t\t       \"must be an intrinsic function\",\n@@ -2518,7 +2525,7 @@ gfc_check_init_expr (gfc_expr *e)\n \t   array argument.  */\n \tisym = gfc_find_function (e->symtree->n.sym->name);\n \tif (isym && isym->elemental\n-\t    && (t = scalarize_intrinsic_call(e)))\n+\t    && (t = scalarize_intrinsic_call (e)))\n \t  break;\n       }\n \n@@ -3844,7 +3851,17 @@ gfc_check_assign_symbol (gfc_symbol *sym, gfc_component *comp, gfc_expr *rvalue)\n   if (pointer || proc_pointer)\n     r = gfc_check_pointer_assign (&lvalue, rvalue);\n   else\n-    r = gfc_check_assign (&lvalue, rvalue, 1);\n+    {\n+      /* If a conversion function, e.g., __convert_i8_i4, was inserted\n+\t into an array constructor, we should check if it can be reduced\n+\t as an initialization expression.  */\n+      if (rvalue->expr_type == EXPR_FUNCTION\n+\t  && rvalue->value.function.isym\n+\t  && (rvalue->value.function.isym->conversion == 1))\n+\tgfc_check_init_expr (rvalue);\n+\n+      r = gfc_check_assign (&lvalue, rvalue, 1);\n+    }\n \n   free (lvalue.symtree);\n   free (lvalue.ref);"}, {"sha": "ac40be92d9d819123dde0ef1e22e38fc0e30573b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e6ab828444aad891d84bf68ba02581fba28f80b", "patch": "@@ -1,3 +1,9 @@\n+2015-11-16  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/58027\n+\tPR fortran/60993\n+\t* gfortran.dg/pr58027.f90: New test.\n+\n 2015-11-16  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* c-c++-common/attr-simd.c: New test."}, {"sha": "bef893c212aa982770d5aa8433c65bdc6b734767", "filename": "gcc/testsuite/gfortran.dg/pr58027.f90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58027.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e6ab828444aad891d84bf68ba02581fba28f80b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58027.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr58027.f90?ref=3e6ab828444aad891d84bf68ba02581fba28f80b", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do compile }\n+! PR fortran/58027\n+integer, parameter :: i(1)=(/z'ff800000'/) ! { dg-error \"overflow converting\" }\n+print *, isclass\n+end"}]}