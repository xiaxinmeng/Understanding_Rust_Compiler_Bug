{"sha": "2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxYjE3MzFlNmNjYzU1NzcxN2U0MTcyYzM3ZmYxN2JmOGU1ZjllZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-11-15T00:15:09Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-11-15T00:15:09Z"}, "message": "re PR c++/24687 (ICE after error)\n\n\tPR c++/24687\n\t* pt.c (check_explicit_specialization): Don't check for C linkage.\n\t(push_template_decl_real): Likewise.\n\t* parser.c (cp_parser_explicit_specialization): Check here.\n\t(cp_parser_template_declaration_after_export): And here.\n\tPR c++/24687\n\t* g++.dg/template/crash43.C: New test.\n\nFrom-SVN: r106909", "tree": {"sha": "da378b2769e30d45fdc1f0df7d28f03de6254e43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da378b2769e30d45fdc1f0df7d28f03de6254e43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/comments", "author": null, "committer": null, "parents": [{"sha": "37edf0a6c4cef3c0863d77fa2d77830b0830639a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37edf0a6c4cef3c0863d77fa2d77830b0830639a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37edf0a6c4cef3c0863d77fa2d77830b0830639a"}], "stats": {"total": 68, "additions": 58, "deletions": 10}, "files": [{"sha": "60f3166b3cea74d6238615386797de9cf634a839", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "patch": "@@ -1,5 +1,11 @@\n 2005-11-14  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/24687\n+\t* pt.c (check_explicit_specialization): Don't check for C linkage.\n+\t(push_template_decl_real): Likewise.\n+\t* parser.c (cp_parser_explicit_specialization): Check here.\n+\t(cp_parser_template_declaration_after_export): And here.\n+\n \t* parser.c (cp_lexer_get_preprocessor_token): Initialize keyword\n \tfield.\n "}, {"sha": "5827e5ebcdcab61e8ac97e6fb13de3a5b579d825", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "patch": "@@ -9295,6 +9295,7 @@ cp_parser_explicit_instantiation (cp_parser* parser)\n static void\n cp_parser_explicit_specialization (cp_parser* parser)\n {\n+  bool need_lang_pop;\n   /* Look for the `template' keyword.  */\n   cp_parser_require_keyword (parser, RID_TEMPLATE, \"`template'\");\n   /* Look for the `<'.  */\n@@ -9303,9 +9304,22 @@ cp_parser_explicit_specialization (cp_parser* parser)\n   cp_parser_require (parser, CPP_GREATER, \"`>'\");\n   /* We have processed another parameter list.  */\n   ++parser->num_template_parameter_lists;\n+  /* [temp]\n+   \n+     A template ... explicit specialization ... shall not have C\n+     linkage.  */ \n+  if (current_lang_name == lang_name_c)\n+    {\n+      error (\"template specialization with C linkage\");\n+      /* Give it C++ linkage to avoid confusing other parts of the\n+\t front end.  */\n+      push_lang_context (lang_name_cplusplus);\n+      need_lang_pop = true;\n+    }\n+  else\n+    need_lang_pop = false;\n   /* Let the front end know that we are beginning a specialization.  */\n   begin_specialization ();\n-\n   /* If the next keyword is `template', we need to figure out whether\n      or not we're looking a template-declaration.  */\n   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))\n@@ -9322,9 +9336,12 @@ cp_parser_explicit_specialization (cp_parser* parser)\n     cp_parser_single_declaration (parser,\n \t\t\t\t  /*member_p=*/false,\n \t\t\t\t  /*friend_p=*/NULL);\n-\n   /* We're done with the specialization.  */\n   end_specialization ();\n+  /* For the erroneous case of a template with C linkage, we pushed an\n+     implicit C++ linkage scope; exit that scope now.  */\n+  if (need_lang_pop)\n+    pop_lang_context ();\n   /* We're done with this parameter list.  */\n   --parser->num_template_parameter_lists;\n }\n@@ -15168,6 +15185,7 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   tree decl = NULL_TREE;\n   tree parameter_list;\n   bool friend_p = false;\n+  bool need_lang_pop;\n \n   /* Look for the `template' keyword.  */\n   if (!cp_parser_require_keyword (parser, RID_TEMPLATE, \"`template'\"))\n@@ -15176,7 +15194,19 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   /* And the `<'.  */\n   if (!cp_parser_require (parser, CPP_LESS, \"`<'\"))\n     return;\n-\n+  /* [temp]\n+   \n+     A template ... shall not have C linkage.  */\n+  if (current_lang_name == lang_name_c)\n+    {\n+      error (\"template with C linkage\");\n+      /* Give it C++ linkage to avoid confusing other parts of the\n+\t front end.  */\n+      push_lang_context (lang_name_cplusplus);\n+      need_lang_pop = true;\n+    }\n+  else\n+    need_lang_pop = false;\n   /* If the next token is `>', then we have an invalid\n      specialization.  Rather than complain about an invalid template\n      parameter, issue an error message here.  */\n@@ -15237,7 +15267,10 @@ cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)\n   /* Register member declarations.  */\n   if (member_p && !friend_p && decl && !DECL_CLASS_TEMPLATE_P (decl))\n     finish_member_declaration (decl);\n-\n+  /* For the erroneous case of a template with C linkage, we pushed an\n+     implicit C++ linkage scope; exit that scope now.  */\n+  if (need_lang_pop)\n+    pop_lang_context ();\n   /* If DECL is a function template, we must return to parse it later.\n      (Even though there is no definition, there might be default\n      arguments that need handling.)  */"}, {"sha": "3e495643fd65506392055509c5e992025bf532ac", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "patch": "@@ -1895,8 +1895,6 @@ check_explicit_specialization (tree declarator,\n \t      (\"default argument specified in explicit specialization\");\n \t    break;\n \t  }\n-      if (current_lang_name == lang_name_c)\n-\terror (\"template specialization with C linkage\");\n     }\n \n   if (specialization || member_specialization || explicit_instantiation)\n@@ -2985,10 +2983,8 @@ push_template_decl_real (tree decl, bool is_friend)\n     {\n       if (DECL_CLASS_SCOPE_P (decl))\n \tmember_template_p = true;\n-      if (current_lang_name == lang_name_c)\n-\terror (\"template with C linkage\");\n-      else if (TREE_CODE (decl) == TYPE_DECL\n-\t       && ANON_AGGRNAME_P (DECL_NAME (decl)))\n+      if (TREE_CODE (decl) == TYPE_DECL\n+\t  && ANON_AGGRNAME_P (DECL_NAME (decl)))\n \terror (\"template class without a name\");\n       else if (TREE_CODE (decl) == FUNCTION_DECL)\n \t{"}, {"sha": "d87105b3fe82d40b34f67d27f475c15ca967b559", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "patch": "@@ -1,3 +1,8 @@\n+2005-11-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24687\n+\t* g++.dg/template/crash43.C: New test. \n+\n 2005-11-14  Daniel Jacobowitz  <dan@codesourcery.com>\n \n \t* gcc.c-torture/unsorted/unsorted.exp: Sort tests before running them."}, {"sha": "1261c36505835f480ff5a6eb95c66ff7250c3697", "filename": "gcc/testsuite/g++.dg/template/crash43.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash43.C?ref=2f1b1731e6ccc557717e4172c37ff17bf8e5f9ee", "patch": "@@ -0,0 +1,8 @@\n+// PR c++/24687\n+\n+extern \"C\" {\n+  template<typename _Tp>  // { dg-error \"C\" }   \n+  struct __is_pod {\n+    enum {\n+      __value = (sizeof(__gnu_internal::__test_type<_Tp>(0)))}; // { dg-error \"declared|expected\" }\n+"}]}