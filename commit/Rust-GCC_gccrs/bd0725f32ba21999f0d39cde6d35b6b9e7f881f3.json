{"sha": "bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQwNzI1ZjMyYmEyMTk5OWYwZDM5Y2RlNmQzNWI2YjllN2Y4ODFmMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-22T19:36:51Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-22T19:36:51Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r567", "tree": {"sha": "811c2ae4c32febc0bc1ff6beeff49efa568c953c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/811c2ae4c32febc0bc1ff6beeff49efa568c953c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3/comments", "author": null, "committer": null, "parents": [{"sha": "b1fc14e59254e69ea24348ba347483d130953ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1fc14e59254e69ea24348ba347483d130953ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1fc14e59254e69ea24348ba347483d130953ce4"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "87fa1719f18b4347fdc52fcc5f58c1c8115c5fba", "filename": "gcc/protoize.c", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd0725f32ba21999f0d39cde6d35b6b9e7f881f3/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=bd0725f32ba21999f0d39cde6d35b6b9e7f881f3", "patch": "@@ -460,11 +460,15 @@ static const char* nondefault_syscalls_dir = 0; /* Dir to look for\n \t\t\t\t\t\t   SYSCALLS.c.X in.  */\n #endif /* !defined (UNPROTOIZE) */\n \n-/* An index into the compile_params array where we should insert the filename\n-   parameter when we are ready to exec the C compiler.  A zero value indicates\n+/* An index into the compile_params array where we should insert the source\n+   file name when we are ready to exec the C compiler.  A zero value indicates\n    that we have not yet called munge_compile_params.  */\n \n-static int filename_index = 0;\n+static int input_file_name_index = 0;\n+\n+/* An index into the compile_params array where we should insert the filename\n+   for the aux info file, when we run the C compiler.  */\n+static int aux_info_file_name_index = 0;\n \n /* Count of command line arguments which were \"filename\" arguments.  */\n \n@@ -1526,7 +1530,7 @@ save_def_or_dec (l, is_syscalls)\n        all of these base file names (even if they may be useless later).\n        The file_info records for all of these \"base\" file names (properly)\n        act as file_info records for the \"original\" (i.e. un-included) files\n-       which were submitted to gcc for compilation (when the -fgen-aux-info\n+       which were submitted to gcc for compilation (when the -aux-info\n        option was used).  */\n   \n     def_dec_p->file = find_file (abspath (invocation_filename, filename), is_syscalls);\n@@ -1857,14 +1861,19 @@ save_def_or_dec (l, is_syscalls)\n     }\n }\n \f\n-/* Rewrite the options list used to recompile base source files.  All we are\n-   really doing here is removing -g, -O, -S, -c, and -o options, and then\n-   adding a final group of options like '-fgen-aux-info -S  -o /dev/null'.  */\n+/* Set up the vector COMPILE_PARAMS which is the argument list for running GCC.\n+   Also set input_file_name_index and aux_info_file_name_index\n+   to the indices of the slots where the file names should go.  */\n+\n+/* We initialize the vector by  removing -g, -O, -S, -c, and -o options,\n+   and adding '-aux-info AUXFILE -S  -o /dev/null INFILE' at the end.  */\n \n static void\n munge_compile_params (params_list)\n      const char *params_list;\n {\n+  /* Build up the contents in a temporary vector\n+     that is so big that to has to be big enough.  */\n   char **temp_params\n     = (char **) alloca ((strlen (params_list) + 6) * sizeof (char *));\n   int param_count = 0;\n@@ -1906,14 +1915,20 @@ munge_compile_params (params_list)\n       if (!*params_list)\n         break;\n     }\n-  temp_params[param_count++] = \"-fgen-aux-info\";\n+  temp_params[param_count++] = \"-aux-info\";\n+\n+  /* Leave room for the aux-info file name argument.  */\n+  aux_info_file_name_index = param_count;\n+  temp_params[param_count++] = NULL;\n+\n   temp_params[param_count++] = \"-S\";\n   temp_params[param_count++] = \"-o\";\n   temp_params[param_count++] = \"/dev/null\";\n \n-  /* Leave room for the filename argument and a terminating null pointer.  */\n-\n-  temp_params[filename_index = param_count++] = NULL;\n+  /* Leave room for the input file name argument.  */\n+  input_file_name_index = param_count;\n+  temp_params[param_count++] = NULL;\n+  /* Terminate the list.  */\n   temp_params[param_count++] = NULL;\n \n   /* Make a copy of the compile_params in heap space.  */\n@@ -1932,14 +1947,20 @@ gen_aux_info_file (base_filename)\n {\n   int child_pid;\n \n-  if (!filename_index)\n+  if (!input_file_name_index)\n     munge_compile_params (\"\");\n \n-  compile_params[filename_index] = shortpath (NULL, base_filename);\n+  /* Store the full source file name in the argument vector.  */\n+  compile_params[input_file_name_index] = shortpath (NULL, base_filename);\n+  /* Add .X to source file name to get aux-info file name.  */\n+  compile_params[aux_info_file_name_index]\n+    = dupnstr (compile_params[input_file_name_index],\n+\t       (2 + strlen (compile_params[input_file_name_index])));\n+  strcat (compile_params[aux_info_file_name_index], \".X\");\n \n   if (!quiet_flag)\n     fprintf (stderr, \"%s: compiling `%s'\\n\",\n-\t     pname, compile_params[filename_index]);\n+\t     pname, compile_params[input_file_name_index]);\n \n   if (child_pid = fork ())\n     {"}]}