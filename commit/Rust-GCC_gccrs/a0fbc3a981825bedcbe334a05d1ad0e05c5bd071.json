{"sha": "a0fbc3a981825bedcbe334a05d1ad0e05c5bd071", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBmYmMzYTk4MTgyNWJlZGNiZTMzNGEwNWQxYWQwZTA1YzViZDA3MQ==", "commit": {"author": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-04-20T05:55:28Z"}, "committer": {"name": "Steve Chamberlain", "email": "sac@gnu.org", "date": "1994-04-20T05:55:28Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r7091", "tree": {"sha": "4009dea4e3e9ba0ca614c064f8aaba6ab38b7c8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4009dea4e3e9ba0ca614c064f8aaba6ab38b7c8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071/comments", "author": null, "committer": null, "parents": [{"sha": "dcfb710401740899d37098f377d12f0a2135c6c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcfb710401740899d37098f377d12f0a2135c6c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcfb710401740899d37098f377d12f0a2135c6c5"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "825ecb197367e47fd942e3d8caaac0441d01ed4b", "filename": "gcc/flow.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0fbc3a981825bedcbe334a05d1ad0e05c5bd071/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=a0fbc3a981825bedcbe334a05d1ad0e05c5bd071", "patch": "@@ -2148,16 +2148,16 @@ find_auto_inc (needed, x, insn)\n \t\t  reg_n_calls_crossed[regno]++;\n \t    }\n \n-\t  if (win)\n+\t  if (win\n+\t      /* If we have found a suitable auto-increment, do\n+\t\t POST_INC around the register here, and patch out the\n+\t\t increment instruction that follows. */\n+\t      && validate_change (insn, &XEXP (x, 0),\n+\t\t\t\t  gen_rtx ((INTVAL (XEXP (y, 1)) == size\n+\t\t\t\t\t    ? (offset ? PRE_INC : POST_INC)\n+\t\t\t\t\t    : (offset ? PRE_DEC : POST_DEC)),\n+\t\t\t\t\t   Pmode, addr), 0))\n \t    {\n-\t      /* We have found a suitable auto-increment: do POST_INC around\n-\t\t the register here, and patch out the increment instruction \n-\t\t that follows. */\n-\t      XEXP (x, 0) = gen_rtx ((INTVAL (XEXP (y, 1)) == size\n-\t\t\t\t      ? (offset ? PRE_INC : POST_INC)\n-\t\t\t\t      : (offset ? PRE_DEC : POST_DEC)),\n-\t\t\t\t     Pmode, addr);\n-\n \t      /* Record that this insn has an implicit side effect.  */\n \t      REG_NOTES (insn)\n \t\t= gen_rtx (EXPR_LIST, REG_INC, addr, REG_NOTES (insn));\n@@ -2617,10 +2617,13 @@ try_pre_increment (insn, reg, amount)\n   if (GET_MODE_SIZE (GET_MODE (use)) != (amount > 0 ? amount : - amount))\n     return 0;\n \n-  XEXP (use, 0) = gen_rtx (amount > 0\n-\t\t\t   ? (do_post ? POST_INC : PRE_INC)\n-\t\t\t   : (do_post ? POST_DEC : PRE_DEC),\n-\t\t\t   Pmode, reg);\n+  /* See if this combination of instruction and addressing mode exists.  */\n+  if (! validate_change (insn, &XEXP (use, 0),\n+\t\t\t gen_rtx (amount > 0\n+\t\t\t\t  ? (do_post ? POST_INC : PRE_INC)\n+\t\t\t\t  : (do_post ? POST_DEC : PRE_DEC),\n+\t\t\t\t  Pmode, reg), 0))\n+    return 0;\n \n   /* Record that this insn now has an implicit side effect on X.  */\n   REG_NOTES (insn) = gen_rtx (EXPR_LIST, REG_INC, reg, REG_NOTES (insn));"}]}