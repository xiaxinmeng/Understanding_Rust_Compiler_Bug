{"sha": "841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQxYjBjMWY5NTFkYzQ1ZDlkZjVhMTBlMGE2Yjk1MmE3NWEwMmViZA==", "commit": {"author": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-20T13:31:13Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-20T13:31:13Z"}, "message": "re PR fortran/17077 (adjustable size arrays crash)\n\n2004-08-20  Paul Brook  <paul@codesourcery.com>\n\tCanqun Yang  <canqun@nudt.edu.cn>\n\n\tPR fortran/17077\n\t* trans-array.c (gfc_conv_array_parameter): Pass correct pointer\n\tfor automatic arrays.\n\t* trans-types.c (gfc_get_nodesc_array_type): Add comment.\ntestsuite/\n\t* gfortran.dg/auto_array_1.f90: New test.\n\nFrom-SVN: r86315", "tree": {"sha": "c0f8c05aa6a75da16bc6ae509e0aa81663c0d6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0f8c05aa6a75da16bc6ae509e0aa81663c0d6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/comments", "author": null, "committer": null, "parents": [{"sha": "689ca4e7ae0dcac88d292029d281b75b52e8b431", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/689ca4e7ae0dcac88d292029d281b75b52e8b431", "html_url": "https://github.com/Rust-GCC/gccrs/commit/689ca4e7ae0dcac88d292029d281b75b52e8b431"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "fed67a6cb0789161ba73088613d69841624970c0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "patch": "@@ -1,12 +1,20 @@\n+2004-08-20  Paul Brook  <paul@codesourcery.com>\n+\tCanqun Yang  <canqun@nudt.edu.cn>\n+\n+\tPR fortran/17077\n+\t* trans-array.c (gfc_conv_array_parameter): Pass correct pointer\n+\tfor automatic arrays.\n+\t* trans-types.c (gfc_get_nodesc_array_type): Add comment.\n+\n 2004-08-19  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n- \t(Port from g95)\n+\t(Port from g95)\n \n- \tPR fortran/17074\n+\tPR fortran/17074\n \t* match.c (match_simple_forall, match_simple_where): Forward-declare.\n \t(gfc_match_if): Order statement list alphabetically, add WHERE and\n-\t\tFORALL, remove double PAUSE.\n+\tFORALL, remove double PAUSE.\n \t(gfc_match_simple_where, match_forall_header,\n- \tgfc_match_simple_forall): New functions.\n+\tgfc_match_simple_forall): New functions.\n \t(gfc_match_forall): Use match_forall_header.\n \t\n 2004-08-19  Paul Brook  <paul@codesourcery.com>"}, {"sha": "5299b4c2cdd17dd20cb0d639244a228670e28933", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "patch": "@@ -3762,10 +3762,12 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77)\n       if (!sym->attr.pointer && sym->as->type != AS_ASSUMED_SHAPE \n           && !sym->attr.allocatable)\n         {\n-          if (!sym->attr.dummy)\n-\t    se->expr = gfc_build_addr_expr (NULL, tmp);\n+\t  /* Some variables are declared directly, others are declard as\n+\t     pointers and allocated on the heap.  */\n+          if (sym->attr.dummy || POINTER_TYPE_P (TREE_TYPE (tmp)))\n+            se->expr = tmp;\n           else\n-            se->expr = tmp;  \n+\t    se->expr = gfc_build_addr_expr (NULL, tmp);\n \t  return;\n         }\n       if (sym->attr.allocatable)"}, {"sha": "f8a0450ce1fab2a35ef79e537a06c35a31bf6eb7", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "patch": "@@ -750,6 +750,8 @@ gfc_get_nodesc_array_type (tree etype, gfc_array_spec * as, int packed)\n \n   if (packed < 3 || !known_stride)\n     {\n+      /* For dummy arrays and automatic (heap allocated) arrays we\n+\t want a pointer to the array.  */\n       type = build_pointer_type (type);\n       GFC_ARRAY_TYPE_P (type) = 1;\n       TYPE_LANG_SPECIFIC (type) = TYPE_LANG_SPECIFIC (TREE_TYPE (type));"}, {"sha": "6dd1b04041c7aa4b7da4f644ee0e18f63e466d1e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "patch": "@@ -1,3 +1,8 @@\n+2004-08-20  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\tPR fortran/17077\n+\t* gfortran.dg/auto_array_1.f90: New test.\n+\n 2004-08-19  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/17074"}, {"sha": "64cc113f8636e0b21c382d4cfaf40749644a3ee7", "filename": "gcc/testsuite/gfortran.dg/auto_array_1.f90", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/841b0c1f951dc45d9df5a10e0a6b952a75a02ebd/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_array_1.f90?ref=841b0c1f951dc45d9df5a10e0a6b952a75a02ebd", "patch": "@@ -0,0 +1,38 @@\n+! { dg-do run }\n+! PR fortran/17077.\n+! Automatic arrays are allocated on the heap.  When used as an actual argument\n+! we were passing the address of the pointer, not the pointer itself.\n+\n+program p\n+   implicit none\n+   integer:: n,m\n+\n+   n = 3\n+   call foo(n)\n+contains\n+\n+   subroutine foo(m)\n+      integer:: m,i\n+      integer:: z(m,m)\n+    \n+      z = 0\n+\n+      call foo1(m,z)\n+    \n+      ! Check it worked.\n+      if (any (z .ne. reshape ((/1, 2, 3, 4, 5, 6, 7, 8, 9/), (/3, 3/)))) &\n+        call abort\n+    end subroutine foo\n+\n+    subroutine foo1(n,x)\n+       integer:: n,i,j\n+       integer:: x(n,n)\n+    \n+       ! Assign values to x.\n+       do i=1,n\n+          do j=1,n\n+             x(j,i)=j+(i-1)*n\n+          enddo\n+       enddo\n+    end subroutine foo1\n+end program    "}]}