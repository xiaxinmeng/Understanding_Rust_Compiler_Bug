{"sha": "de6bd996eb3b39713d4448716c9412b0e5b186c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU2YmQ5OTZlYjNiMzk3MTNkNDQ0ODcxNmM5NDEyYjBlNWIxODZjNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-02T21:33:45Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-02T21:33:45Z"}, "message": "tree-optimize (execute_fixup_cfg): Set after_inlining flag.\n\n2007-01-02  Jan Hubicka  <jh@suse.cz>\n\n\t* tree-optimize (execute_fixup_cfg): Set after_inlining flag.\n\tSet NOTHROW flag on call statements proved to be nothrow.\n\tUpdate statement of local calls so new pure/const functions are\n\tupdated. Update_ssa when in ssa form. Mark PHI nodes of nonlocal\n\tgoto receivers.\n\t(tree_rest_of_compilation): Register hooks and initialize bitmap\n\tearly. Do not set after_inlining flag.\n\nFrom-SVN: r120357", "tree": {"sha": "b176a80ff09bd5d1a5f47375f4344961ed71b242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b176a80ff09bd5d1a5f47375f4344961ed71b242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de6bd996eb3b39713d4448716c9412b0e5b186c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6bd996eb3b39713d4448716c9412b0e5b186c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6bd996eb3b39713d4448716c9412b0e5b186c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6bd996eb3b39713d4448716c9412b0e5b186c6/comments", "author": null, "committer": null, "parents": [{"sha": "a063525a3adacb25051f4d82caf6b416a2a52b7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a063525a3adacb25051f4d82caf6b416a2a52b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a063525a3adacb25051f4d82caf6b416a2a52b7b"}], "stats": {"total": 102, "additions": 73, "deletions": 29}, "files": [{"sha": "4a37568ee8dee34d8ff6cd7cd1e59f017fab996a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6bd996eb3b39713d4448716c9412b0e5b186c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6bd996eb3b39713d4448716c9412b0e5b186c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=de6bd996eb3b39713d4448716c9412b0e5b186c6", "patch": "@@ -1,3 +1,13 @@\n+2007-01-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-optimize (execute_fixup_cfg): Set after_inlining flag.\n+\tSet NOTHROW flag on call statements proved to be nothrow.\n+\tUpdate statement of local calls so new pure/const functions are\n+\tupdated. Update_ssa when in ssa form. Mark PHI nodes of nonlocal\n+\tgoto receivers.\n+\t(tree_rest_of_compilation): Register hooks and initialize bitmap\n+\tearly. Do not set after_inlining flag.\n+\n 2007-01-02  Steve Ellcey  <sje@cup.hp.com>\n \n \t* sbitmap.c (HOST_BITS_PER_LONG_LONG):  Change to"}, {"sha": "463349293e4dc7925364b1146608f00a32d3e5dc", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 63, "deletions": 29, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de6bd996eb3b39713d4448716c9412b0e5b186c6/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de6bd996eb3b39713d4448716c9412b0e5b186c6/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=de6bd996eb3b39713d4448716c9412b0e5b186c6", "patch": "@@ -264,46 +264,81 @@ execute_fixup_cfg (void)\n   basic_block bb;\n   block_stmt_iterator bsi;\n \n+  cfun->after_inlining = true;\n+\n   if (cfun->eh)\n     FOR_EACH_BB (bb)\n       {\n \tfor (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \t  {\n \t    tree stmt = bsi_stmt (bsi);\n \t    tree call = get_call_expr_in (stmt);\n+\t    tree decl = call ? get_callee_fndecl (call) : NULL;\n \n-\t    if (call && call_expr_flags (call) & (ECF_CONST | ECF_PURE))\n-\t      TREE_SIDE_EFFECTS (call) = 0;\n+\t    if (decl && call_expr_flags (call) & (ECF_CONST | ECF_PURE)\n+\t\t&& TREE_SIDE_EFFECTS (call))\n+\t      {\n+\t        update_stmt (stmt);\n+\t        TREE_SIDE_EFFECTS (call) = 0;\n+\t      }\n+\t    if (decl && TREE_NOTHROW (decl))\n+\t      TREE_NOTHROW (call) = 1;\n \t    if (!tree_could_throw_p (stmt) && lookup_stmt_eh_region (stmt))\n \t      remove_stmt_from_eh_region (stmt);\n \t  }\n \ttree_purge_dead_eh_edges (bb);\n       }\n \n   if (current_function_has_nonlocal_label)\n-    FOR_EACH_BB (bb)\n-      {\n-\tfor (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n-\t  {\n-\t    tree stmt = bsi_stmt (bsi);\n-\t    if (tree_can_make_abnormal_goto (stmt))\n-\t      {\n-\t\tif (stmt == bsi_stmt (bsi_last (bb)))\n-\t\t  {\n-\t\t    if (!has_abnormal_outgoing_edge_p (bb))\n+    {\n+      FOR_EACH_BB (bb)\n+\t{\n+\t  for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n+\t    {\n+\t      tree stmt = bsi_stmt (bsi);\n+\t      if (tree_can_make_abnormal_goto (stmt))\n+\t\t{\n+\t\t  if (stmt == bsi_stmt (bsi_last (bb)))\n+\t\t    {\n+\t\t      if (!has_abnormal_outgoing_edge_p (bb))\n+\t\t\tmake_abnormal_goto_edges (bb, true);\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      edge e = split_block (bb, stmt);\n+\t\t      bb = e->src;\n \t\t      make_abnormal_goto_edges (bb, true);\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    edge e = split_block (bb, stmt);\n-\t\t    bb = e->src;\n-\t\t    make_abnormal_goto_edges (bb, true);\n-\t\t  }\n-\t\tbreak;\n-\t      }\n-\t  }\n-      }\n+\t\t    }\n+\t\t  break;\n+\t\t}\n+\n+\t      /* Update PHIs on nonlocal goto receivers we (possibly)\n+\t\t just created new edges into.  */\n+\t      if (TREE_CODE (stmt) == LABEL_EXPR\n+\t\t  && gimple_in_ssa_p (cfun))\n+\t\t{\n+\t\t  tree target = LABEL_EXPR_LABEL (stmt);\n+\t\t  if (DECL_NONLOCAL (target))\n+\t\t    {\n+\t\t      tree phi;\n+\t\t      for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t\t\t{\n+\t\t\t  gcc_assert (SSA_NAME_OCCURS_IN_ABNORMAL_PHI\n+\t\t\t\t      (PHI_RESULT (phi)));\n+\t\t\t  mark_sym_for_renaming\n+\t\t\t    (SSA_NAME_VAR (PHI_RESULT (phi)));\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n \n+  if (gimple_in_ssa_p (cfun))\n+    {\n+      delete_unreachable_blocks ();\n+      update_ssa (TODO_update_ssa);\n+    }\n   cleanup_tree_cfg ();\n \n   /* Dump a textual representation of the flowgraph.  */\n@@ -408,6 +443,9 @@ tree_rest_of_compilation (tree fndecl)\n \n   node = cgraph_node (fndecl);\n \n+  /* Initialize the default bitmap obstack.  */\n+  bitmap_obstack_initialize (NULL);\n+\n   /* We might need the body of this function so that we can expand\n      it inline somewhere else.  */\n   if (cgraph_preserve_function_body_p (fndecl))\n@@ -424,7 +462,8 @@ tree_rest_of_compilation (tree fndecl)\n      We haven't necessarily assigned RTL to all variables yet, so it's\n      not safe to try to expand expressions involving them.  */\n   cfun->x_dont_save_pending_sizes_p = 1;\n-  cfun->after_inlining = true;\n+  \n+  tree_register_cfg_hooks ();\n \n   if (flag_inline_trees)\n     {\n@@ -453,12 +492,7 @@ tree_rest_of_compilation (tree fndecl)\n      Kill it so it won't confuse us.  */\n   cgraph_node_remove_callees (node);\n \n-\n-  /* Initialize the default bitmap obstack.  */\n-  bitmap_obstack_initialize (NULL);\n   bitmap_obstack_initialize (&reg_obstack); /* FIXME, only at RTL generation*/\n-  \n-  tree_register_cfg_hooks ();\n   /* Perform all tree transforms and optimizations.  */\n   execute_pass_list (all_passes);\n   "}]}