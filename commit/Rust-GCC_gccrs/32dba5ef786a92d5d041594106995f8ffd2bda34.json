{"sha": "32dba5ef786a92d5d041594106995f8ffd2bda34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJkYmE1ZWY3ODZhOTJkNWQwNDE1OTQxMDY5OTVmOGZmZDJiZGEzNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-06T10:45:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-06T10:45:09Z"}, "message": "tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify matching.\n\n2011-09-06  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify\n\tmatching.\n\nFrom-SVN: r178584", "tree": {"sha": "0e8d0b0316d86673a14ab71dfc0a3229b0121b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e8d0b0316d86673a14ab71dfc0a3229b0121b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32dba5ef786a92d5d041594106995f8ffd2bda34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dba5ef786a92d5d041594106995f8ffd2bda34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32dba5ef786a92d5d041594106995f8ffd2bda34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32dba5ef786a92d5d041594106995f8ffd2bda34/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ba759acdc8913aa521dd563677f626313cb2d57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba759acdc8913aa521dd563677f626313cb2d57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba759acdc8913aa521dd563677f626313cb2d57d"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "d1c5cee94035082efdd7e9202a20119ed0955a97", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32dba5ef786a92d5d041594106995f8ffd2bda34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32dba5ef786a92d5d041594106995f8ffd2bda34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32dba5ef786a92d5d041594106995f8ffd2bda34", "patch": "@@ -1,3 +1,8 @@\n+2011-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_use): CSE stmt pieces and simplify\n+\tmatching.\n+\n 2011-09-06  Tom de Vries  <tom@codesourcery.com>\n \n \t* recog.c (asm_labels_ok): New function."}, {"sha": "e0d4ca9561c9789aeaeb0a31c130e26a1a1da8b7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32dba5ef786a92d5d041594106995f8ffd2bda34/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32dba5ef786a92d5d041594106995f8ffd2bda34/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=32dba5ef786a92d5d041594106995f8ffd2bda34", "patch": "@@ -3043,16 +3043,17 @@ visit_use (tree use)\n \tchanged = defs_to_varying (stmt);\n       else if (is_gimple_assign (stmt))\n \t{\n+\t  enum tree_code code = gimple_assign_rhs_code (stmt);\n \t  tree lhs = gimple_assign_lhs (stmt);\n+\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n \t  tree simplified;\n \n \t  /* Shortcut for copies. Simplifying copies is pointless,\n \t     since we copy the expression and value they represent.  */\n-\t  if (gimple_assign_copy_p (stmt)\n-\t      && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n+\t  if (code == SSA_NAME\n \t      && TREE_CODE (lhs) == SSA_NAME)\n \t    {\n-\t      changed = visit_copy (lhs, gimple_assign_rhs1 (stmt));\n+\t      changed = visit_copy (lhs, rhs1);\n \t      goto done;\n \t    }\n \t  simplified = try_to_simplify (stmt);\n@@ -3119,62 +3120,59 @@ visit_use (tree use)\n \t       /* We can substitute SSA_NAMEs that are live over\n \t\t  abnormal edges with their constant value.  */\n \t       && !(gimple_assign_copy_p (stmt)\n-\t\t    && is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n+\t\t    && is_gimple_min_invariant (rhs1))\n \t       && !(simplified\n \t\t    && is_gimple_min_invariant (simplified))\n \t       && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (lhs))\n \t      /* Stores or copies from SSA_NAMEs that are live over\n \t\t abnormal edges are a problem.  */\n-\t      || (gimple_assign_single_p (stmt)\n-\t\t  && TREE_CODE (gimple_assign_rhs1 (stmt)) == SSA_NAME\n-\t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (gimple_assign_rhs1 (stmt))))\n+\t      || (code == SSA_NAME\n+\t\t  && SSA_NAME_OCCURS_IN_ABNORMAL_PHI (rhs1)))\n \t    changed = defs_to_varying (stmt);\n-\t  else if (REFERENCE_CLASS_P (lhs) || DECL_P (lhs))\n-\t    {\n-\t      changed = visit_reference_op_store (lhs, gimple_assign_rhs1 (stmt), stmt);\n-\t    }\n+\t  else if (REFERENCE_CLASS_P (lhs)\n+\t\t   || DECL_P (lhs))\n+\t    changed = visit_reference_op_store (lhs, rhs1, stmt);\n \t  else if (TREE_CODE (lhs) == SSA_NAME)\n \t    {\n \t      if ((gimple_assign_copy_p (stmt)\n-\t\t   && is_gimple_min_invariant (gimple_assign_rhs1 (stmt)))\n+\t\t   && is_gimple_min_invariant (rhs1))\n \t\t  || (simplified\n \t\t      && is_gimple_min_invariant (simplified)))\n \t\t{\n \t\t  VN_INFO (lhs)->has_constants = true;\n \t\t  if (simplified)\n \t\t    changed = set_ssa_val_to (lhs, simplified);\n \t\t  else\n-\t\t    changed = set_ssa_val_to (lhs, gimple_assign_rhs1 (stmt));\n+\t\t    changed = set_ssa_val_to (lhs, rhs1);\n \t\t}\n \t      else\n \t\t{\n-\t\t  switch (get_gimple_rhs_class (gimple_assign_rhs_code (stmt)))\n+\t\t  switch (get_gimple_rhs_class (code))\n \t\t    {\n \t\t    case GIMPLE_UNARY_RHS:\n \t\t    case GIMPLE_BINARY_RHS:\n \t\t    case GIMPLE_TERNARY_RHS:\n \t\t      changed = visit_nary_op (lhs, stmt);\n \t\t      break;\n \t\t    case GIMPLE_SINGLE_RHS:\n-\t\t      switch (TREE_CODE_CLASS (gimple_assign_rhs_code (stmt)))\n+\t\t      switch (TREE_CODE_CLASS (code))\n \t\t\t{\n \t\t\tcase tcc_reference:\n \t\t\t  /* VOP-less references can go through unary case.  */\n-\t\t\t  if ((gimple_assign_rhs_code (stmt) == REALPART_EXPR\n-\t\t\t       || gimple_assign_rhs_code (stmt) == IMAGPART_EXPR\n-\t\t\t       || gimple_assign_rhs_code (stmt) == VIEW_CONVERT_EXPR)\n-\t\t\t      && TREE_CODE (TREE_OPERAND (gimple_assign_rhs1 (stmt), 0)) == SSA_NAME)\n+\t\t\t  if ((code == REALPART_EXPR\n+\t\t\t       || code == IMAGPART_EXPR\n+\t\t\t       || code == VIEW_CONVERT_EXPR)\n+\t\t\t      && TREE_CODE (TREE_OPERAND (rhs1, 0)) == SSA_NAME)\n \t\t\t    {\n \t\t\t      changed = visit_nary_op (lhs, stmt);\n \t\t\t      break;\n \t\t\t    }\n \t\t\t  /* Fallthrough.  */\n \t\t\tcase tcc_declaration:\n-\t\t\t  changed = visit_reference_op_load\n-\t\t\t      (lhs, gimple_assign_rhs1 (stmt), stmt);\n+\t\t\t  changed = visit_reference_op_load (lhs, rhs1, stmt);\n \t\t\t  break;\n \t\t\tcase tcc_expression:\n-\t\t\t  if (gimple_assign_rhs_code (stmt) == ADDR_EXPR)\n+\t\t\t  if (code == ADDR_EXPR)\n \t\t\t    {\n \t\t\t      changed = visit_nary_op (lhs, stmt);\n \t\t\t      break;"}]}