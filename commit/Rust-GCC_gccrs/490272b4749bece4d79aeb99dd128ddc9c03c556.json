{"sha": "490272b4749bece4d79aeb99dd128ddc9c03c556", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkwMjcyYjQ3NDliZWNlNGQ3OWFlYjk5ZGQxMjhkZGM5YzAzYzU1Ng==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-08-28T16:28:59Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-08-28T16:28:59Z"}, "message": "stor-layout.c (finalize_type_size): Revert workaround from 08-26.\n\n        * stor-layout.c (finalize_type_size): Revert workaround from 08-26.\n        * tree.c (make_node_stat): Use BITS_PER_UNIT instead of alignment\n        of char_type_node.\n\nFrom-SVN: r103583", "tree": {"sha": "fa89471443b3e494fbfea531664fc6a7d4c25fd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa89471443b3e494fbfea531664fc6a7d4c25fd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/490272b4749bece4d79aeb99dd128ddc9c03c556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490272b4749bece4d79aeb99dd128ddc9c03c556", "html_url": "https://github.com/Rust-GCC/gccrs/commit/490272b4749bece4d79aeb99dd128ddc9c03c556", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/490272b4749bece4d79aeb99dd128ddc9c03c556/comments", "author": null, "committer": null, "parents": [{"sha": "a6017253cbd92d46d136888f031fa9fb66412173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6017253cbd92d46d136888f031fa9fb66412173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6017253cbd92d46d136888f031fa9fb66412173"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "a218f58e02d01d3c96f44f26ce243fe9b68eace3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=490272b4749bece4d79aeb99dd128ddc9c03c556", "patch": "@@ -1,3 +1,9 @@\n+2005-08-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* stor-layout.c (finalize_type_size): Revert workaround from 08-26.\n+\t* tree.c (make_node_stat): Use BITS_PER_UNIT instead of alignment\n+\tof char_type_node.\n+\n 2005-08-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR ada/23593"}, {"sha": "0ec818d7fbd26f5d23d1d8c98d450bd0710bbdbb", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=490272b4749bece4d79aeb99dd128ddc9c03c556", "patch": "@@ -1399,23 +1399,23 @@ finalize_type_size (tree type)\n   /* Normally, use the alignment corresponding to the mode chosen.\n      However, where strict alignment is not required, avoid\n      over-aligning structures, since most compilers do not do this\n-     alignment.  Also, we must avoid overriding a larger alignment\n-     requirement coming from a user alignment of one of the fields.  */\n-  /* ??? The non-aggregate code is also needed to reduce the alignment\n-     of java types with alignment less than 16 bits.  The problem stems\n-     from java/decl.c using char_type_node for the 16 bit character type,\n-     while tree.c:make_node uses it as the type of the smallest addressable\n-     unit to initialize the alignment of all types.  */\n-  unsigned mode_align = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+     alignment.  */\n \n   if (TYPE_MODE (type) != BLKmode && TYPE_MODE (type) != VOIDmode\n-      && ((STRICT_ALIGNMENT && mode_align >= TYPE_ALIGN (type))\n+      && (STRICT_ALIGNMENT\n \t  || (TREE_CODE (type) != RECORD_TYPE && TREE_CODE (type) != UNION_TYPE\n \t      && TREE_CODE (type) != QUAL_UNION_TYPE\n \t      && TREE_CODE (type) != ARRAY_TYPE)))\n     {\n-      TYPE_ALIGN (type) = mode_align;\n-      TYPE_USER_ALIGN (type) = 0;\n+      unsigned mode_align = GET_MODE_ALIGNMENT (TYPE_MODE (type));\n+\n+      /* Don't override a larger alignment requirement coming from a user\n+\t alignment of one of the fields.  */\n+      if (mode_align >= TYPE_ALIGN (type))\n+\t{\n+\t  TYPE_ALIGN (type) = mode_align;\n+\t  TYPE_USER_ALIGN (type) = 0;\n+\t}\n     }\n \n   /* Do machine-dependent extra alignment.  */"}, {"sha": "124ef5a5d3d7b58fa9f6689b655c4ed26628cd83", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/490272b4749bece4d79aeb99dd128ddc9c03c556/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=490272b4749bece4d79aeb99dd128ddc9c03c556", "patch": "@@ -488,7 +488,7 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \n     case tcc_type:\n       TYPE_UID (t) = next_type_uid++;\n-      TYPE_ALIGN (t) = char_type_node ? TYPE_ALIGN (char_type_node) : 0;\n+      TYPE_ALIGN (t) = BITS_PER_UNIT;\n       TYPE_USER_ALIGN (t) = 0;\n       TYPE_MAIN_VARIANT (t) = t;\n "}]}