{"sha": "414b7129496a41e3a96220c103fd9f9e8ac0b840", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE0YjcxMjk0OTZhNDFlM2E5NjIyMGMxMDNmZDlmOWU4YWMwYjg0MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-29T18:58:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-29T18:58:10Z"}, "message": "re PR target/77403 (assemble failure of vinserti64x4 with -masm=intel)\n\n\tPR target/77403\n\t* config/i386/sse.md (vec_set_lo_<mode><mask_name>): Fix assembler\n\ttemplate for intel asm dialect.\n\t(vec_set_hi_<mode><mask_name>): Ditto.\n\ntestsuite/ChangeLog:\n\n\tPR target/77403\n\t* gcc.target/i386/pr77403.c: New test.\n\nFrom-SVN: r239834", "tree": {"sha": "993e1eb6ff064045efe4726805d207f2c782e1c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/993e1eb6ff064045efe4726805d207f2c782e1c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/414b7129496a41e3a96220c103fd9f9e8ac0b840", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414b7129496a41e3a96220c103fd9f9e8ac0b840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/414b7129496a41e3a96220c103fd9f9e8ac0b840", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/414b7129496a41e3a96220c103fd9f9e8ac0b840/comments", "author": null, "committer": null, "parents": [{"sha": "3d06b6f2fd3258e2d9ab18e034f0bacb06a9d062", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d06b6f2fd3258e2d9ab18e034f0bacb06a9d062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d06b6f2fd3258e2d9ab18e034f0bacb06a9d062"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "065b9a33c195e639d9be792d6f3de26c97410384", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=414b7129496a41e3a96220c103fd9f9e8ac0b840", "patch": "@@ -1,3 +1,10 @@\n+2016-08-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77403\n+\t* config/i386/sse.md (vec_set_lo_<mode><mask_name>): Fix assembler\n+\ttemplate for intel asm dialect.\n+\t(vec_set_hi_<mode><mask_name>): Ditto.\n+\n 2016-08-29  David Malcolm  <dmalcolm@redhat.com>\n \n \t* selftest.h (selftest::fail): Add ATTRIBUTE_NORETURN.\n@@ -192,7 +199,7 @@\n \t(ipcp_bits_lattice): New class.\n \t(ipcp_param_lattice (bits_lattice): New member.\n \t(print_all_lattices): Call ipcp_bits_lattice::print.\n-\t(set_all_contains_variable): Call ipcp_bits_lattice::set_to_bottom. \n+\t(set_all_contains_variable): Call ipcp_bits_lattice::set_to_bottom.\n \t(initialize_node_lattices): Likewise.\n \t(propagate_bits_accross_jump_function): New function.\n \t(propagate_constants_accross_call): Call\n@@ -220,7 +227,8 @@\n \t(ipa_read_jump_function): Add support for reading streamed ipa_bits.\n \t(write_ipcp_transformation_info): Add streaming for ipa_bits\n \tsummary for ltrans.\n-\t(read_ipcp_transfomration_info): Add support for reading streamed ipa_bits.\n+\t(read_ipcp_transfomration_info): Add support for reading streamed\n+\tipa_bits.\n \t(ipcp_update_bits): New function.\n \t(ipcp_transform_function): Call ipcp_update_bits.\n \n@@ -393,7 +401,7 @@\n \t* statistics.c (statistics_counter_event): Robustify against\n \tNULL current_pass.\n \n-2016-08-23  Venkataramanan Kumar\n+2016-08-23  Venkataramanan Kumar  <venkataramanan.kumar@amd.com>\n \n \t* config/i386/i386.c (processor_alias_table): Enable PTA_PRFCHW\n \tfor targets amdfam10 and barcelona.\n@@ -1713,9 +1721,9 @@\n \n 2016-08-09  Martin Jambor  <mjambor@suse.cz>\n \n-        PR ipa/71981\n-        * ipa-polymorphic-call.c (get_dynamic_type): Bail out gracefully\n-        if instance is a MEM_REF.\n+\tPR ipa/71981\n+\t* ipa-polymorphic-call.c (get_dynamic_type): Bail out gracefully\n+\tif instance is a MEM_REF.\n \n 2016-08-09  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "7e718a076f6e6d27e463bc64f1ec04bee42f57c3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=414b7129496a41e3a96220c103fd9f9e8ac0b840", "patch": "@@ -12334,7 +12334,7 @@\n \t\t       (const_int 12) (const_int 13)\n \t\t       (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX512DQ\"\n-  \"vinsert<shuffletype>32x8\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x0}\"\n+  \"vinsert<shuffletype>32x8\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -12351,7 +12351,7 @@\n \t\t       (const_int 6) (const_int 7)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512DQ\"\n-  \"vinsert<shuffletype>32x8\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x1}\"\n+  \"vinsert<shuffletype>32x8\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -12366,7 +12366,7 @@\n \t    (parallel [(const_int 4) (const_int 5)\n \t\t       (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX512F\"\n-  \"vinsert<shuffletype>64x4\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x0}\"\n+  \"vinsert<shuffletype>64x4\\t{$0x0, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x0}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")"}, {"sha": "2a97b4b600e2c0a86a5513d72cace812b126fb68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=414b7129496a41e3a96220c103fd9f9e8ac0b840", "patch": "@@ -1,3 +1,8 @@\n+2016-08-29  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/77403\n+\t* gcc.target/i386/pr77403.c: New test.\n+\n 2016-08-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/77292\n@@ -342,10 +347,10 @@\n \n 2016-08-19  Janne Blomqvist  <jb@gcc.gnu.org>\n \n-        * gfortran.dg/random_4.f90: Initialize seed before using, handle\n-        the last special seed value.\n-        * gfortran.dg/random_7.f90: Use size for last array member instead\n-        of hardcoded value.\n+\t* gfortran.dg/random_4.f90: Initialize seed before using, handle\n+\tthe last special seed value.\n+\t* gfortran.dg/random_7.f90: Use size for last array member instead\n+\tof hardcoded value.\n \n 2016-08-19  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n "}, {"sha": "9f6775a0c934d42503e75cb36cc8e81aa1a12241", "filename": "gcc/testsuite/gcc.target/i386/pr77403.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77403.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/414b7129496a41e3a96220c103fd9f9e8ac0b840/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77403.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr77403.c?ref=414b7129496a41e3a96220c103fd9f9e8ac0b840", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target masm_intel } */\n+/* { dg-options \"-O -mavx512f -masm=intel\" } */\n+\n+typedef __int128 V __attribute__((vector_size(64)));\n+\n+V v;\n+\n+void\n+foo()\n+{\n+  v ^= (V){1};\n+}"}]}