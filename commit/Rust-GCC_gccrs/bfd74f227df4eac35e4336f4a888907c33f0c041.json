{"sha": "bfd74f227df4eac35e4336f4a888907c33f0c041", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkNzRmMjI3ZGY0ZWFjMzVlNDMzNmY0YTg4ODkwN2MzM2YwYzA0MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2013-12-05T18:32:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-12-05T18:32:02Z"}, "message": "alloc.c (backtrace_vector_finish): Add error_callback and data parameters.\n\n\t* alloc.c (backtrace_vector_finish): Add error_callback and data\n\tparameters.  Call backtrace_vector_release.  Return address base.\n\t* mmap.c (backtrace_vector_finish): Add error_callback and data\n\tparameters.  Return address base.\n\t* dwarf.c (read_function_info): Get new address base from\n\tbacktrace_vector_finish.\n\t* internal.h (backtrace_vector_finish): Update declaration.\n\nFrom-SVN: r205716", "tree": {"sha": "a21a16be4ac9b12fe22e13697ded7ead64c31b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a21a16be4ac9b12fe22e13697ded7ead64c31b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfd74f227df4eac35e4336f4a888907c33f0c041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd74f227df4eac35e4336f4a888907c33f0c041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfd74f227df4eac35e4336f4a888907c33f0c041", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfd74f227df4eac35e4336f4a888907c33f0c041/comments", "author": null, "committer": null, "parents": [{"sha": "e69dbe3721a150e221e05edde4985dd961edafd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69dbe3721a150e221e05edde4985dd961edafd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69dbe3721a150e221e05edde4985dd961edafd1"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "43ad82a55db01bd303b40cb93fc2b230206d054a", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=bfd74f227df4eac35e4336f4a888907c33f0c041", "patch": "@@ -1,3 +1,13 @@\n+2013-12-05  Ian Lance Taylor  <iant@google.com>\n+\n+\t* alloc.c (backtrace_vector_finish): Add error_callback and data\n+\tparameters.  Call backtrace_vector_release.  Return address base.\n+\t* mmap.c (backtrace_vector_finish): Add error_callback and data\n+\tparameters.  Return address base.\n+\t* dwarf.c (read_function_info): Get new address base from\n+\tbacktrace_vector_finish.\n+\t* internal.h (backtrace_vector_finish): Update declaration.\n+\n 2013-11-27  Ian Lance Taylor  <iant@google.com>\n \n \t* dwarf.c (find_address_ranges): New static function, broken out"}, {"sha": "b2c31fabcbc0f488b8c1c3ac61879f37f8cce243", "filename": "libbacktrace/alloc.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Falloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Falloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Falloc.c?ref=bfd74f227df4eac35e4336f4a888907c33f0c041", "patch": "@@ -113,12 +113,24 @@ backtrace_vector_grow (struct backtrace_state *state ATTRIBUTE_UNUSED,\n \n /* Finish the current allocation on VEC.  */\n \n-void\n-backtrace_vector_finish (struct backtrace_state *state ATTRIBUTE_UNUSED,\n-\t\t\t struct backtrace_vector *vec)\n+void *\n+backtrace_vector_finish (struct backtrace_state *state,\n+\t\t\t struct backtrace_vector *vec,\n+\t\t\t backtrace_error_callback error_callback,\n+\t\t\t void *data)\n {\n-  vec->base = (char *) vec->base + vec->size;\n+  void *ret;\n+\n+  /* With this allocator we call realloc in backtrace_vector_grow,\n+     which means we can't easily reuse the memory here.  So just\n+     release it.  */\n+  if (!backtrace_vector_release (state, vec, error_callback, data))\n+    return NULL;\n+  ret = vec->base;\n+  vec->base = NULL;\n   vec->size = 0;\n+  vec->alc = 0;\n+  return ret;\n }\n \n /* Release any extra space allocated for VEC.  */"}, {"sha": "fa9b990432263c0537d1124c67d3682f05a4317e", "filename": "libbacktrace/dwarf.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Fdwarf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Fdwarf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fdwarf.c?ref=bfd74f227df4eac35e4336f4a888907c33f0c041", "patch": "@@ -2535,19 +2535,23 @@ read_function_info (struct backtrace_state *state, struct dwarf_data *ddata,\n   if (pfvec->count == 0)\n     return;\n \n-  addrs = (struct function_addrs *) pfvec->vec.base;\n   addrs_count = pfvec->count;\n \n   if (fvec == NULL)\n     {\n       if (!backtrace_vector_release (state, &lvec.vec, error_callback, data))\n \treturn;\n+      addrs = (struct function_addrs *) pfvec->vec.base;\n     }\n   else\n     {\n       /* Finish this list of addresses, but leave the remaining space in\n \t the vector available for the next function unit.  */\n-      backtrace_vector_finish (state, &fvec->vec);\n+      addrs = ((struct function_addrs *)\n+\t       backtrace_vector_finish (state, &fvec->vec,\n+\t\t\t\t\terror_callback, data));\n+      if (addrs == NULL)\n+\treturn;\n       fvec->count = 0;\n     }\n "}, {"sha": "9bec33cf9938dc22f162c41088f533ff87826f71", "filename": "libbacktrace/internal.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Finternal.h?ref=bfd74f227df4eac35e4336f4a888907c33f0c041", "patch": "@@ -233,13 +233,17 @@ extern void *backtrace_vector_grow (struct backtrace_state *state, size_t size,\n \t\t\t\t    struct backtrace_vector *vec);\n \n /* Finish the current allocation on VEC.  Prepare to start a new\n-   allocation.  The finished allocation will never be freed.  */\n+   allocation.  The finished allocation will never be freed.  Returns\n+   a pointer to the base of the finished entries, or NULL on\n+   failure.  */\n \n-extern void backtrace_vector_finish (struct backtrace_state *state,\n-\t\t\t\t     struct backtrace_vector *vec);\n+extern void* backtrace_vector_finish (struct backtrace_state *state,\n+\t\t\t\t      struct backtrace_vector *vec,\n+\t\t\t\t      backtrace_error_callback error_callback,\n+\t\t\t\t      void *data);\n \n-/* Release any extra space allocated for VEC.  Returns 1 on success, 0\n-   on failure.  */\n+/* Release any extra space allocated for VEC.  This may change\n+   VEC->base.  Returns 1 on success, 0 on failure.  */\n \n extern int backtrace_vector_release (struct backtrace_state *state,\n \t\t\t\t     struct backtrace_vector *vec,"}, {"sha": "dc94b29a3f7a0c98aff70d3acadc070af24343e2", "filename": "libbacktrace/mmap.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Fmmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfd74f227df4eac35e4336f4a888907c33f0c041/libbacktrace%2Fmmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2Fmmap.c?ref=bfd74f227df4eac35e4336f4a888907c33f0c041", "patch": "@@ -230,12 +230,19 @@ backtrace_vector_grow (struct backtrace_state *state,size_t size,\n \n /* Finish the current allocation on VEC.  */\n \n-void\n-backtrace_vector_finish (struct backtrace_state *state ATTRIBUTE_UNUSED,\n-\t\t\t struct backtrace_vector *vec)\n+void *\n+backtrace_vector_finish (\n+  struct backtrace_state *state ATTRIBUTE_UNUSED,\n+  struct backtrace_vector *vec,\n+  backtrace_error_callback error_callback ATTRIBUTE_UNUSED,\n+  void *data ATTRIBUTE_UNUSED)\n {\n+  void *ret;\n+\n+  ret = vec->base;\n   vec->base = (char *) vec->base + vec->size;\n   vec->size = 0;\n+  return ret;\n }\n \n /* Release any extra space allocated for VEC.  */"}]}