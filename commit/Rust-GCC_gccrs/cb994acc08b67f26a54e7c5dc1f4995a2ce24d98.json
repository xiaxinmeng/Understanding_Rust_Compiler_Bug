{"sha": "cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "node_id": "C_kwDOANBUbNoAKGNiOTk0YWNjMDhiNjdmMjZhNTRlN2M1ZGMxZjQ5OTVhMmNlMjRkOTg", "commit": {"author": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2022-10-19T12:28:22Z"}, "committer": {"name": "Stefan Schulze Frielinghaus", "email": "stefansf@linux.ibm.com", "date": "2022-10-19T12:28:22Z"}, "message": "IBM zSystems: Fix function_ok_for_sibcall [PR106355]\n\nFor a parameter with BLKmode we cannot use REG_NREGS in order to\ndetermine the number of consecutive registers.  Streamlined this with\nthe implementation of s390_function_arg.\n\nFix some indentation whitespace, too.\n\ngcc/ChangeLog:\n\n\tPR target/106355\n\t* config/s390/s390.cc (s390_call_saved_register_used): For a\n\tparameter with BLKmode fix determining number of consecutive\n\tregisters.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/pr106355.h: Common code for new tests.\n\t* gcc.target/s390/pr106355-1.c: New test.\n\t* gcc.target/s390/pr106355-2.c: New test.\n\t* gcc.target/s390/pr106355-3.c: New test.", "tree": {"sha": "1ed6a07af0b616b47f03c822e06ae1f857a5136e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ed6a07af0b616b47f03c822e06ae1f857a5136e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/comments", "author": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stefan-sf-ibm", "id": 73470131, "node_id": "MDQ6VXNlcjczNDcwMTMx", "avatar_url": "https://avatars.githubusercontent.com/u/73470131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stefan-sf-ibm", "html_url": "https://github.com/stefan-sf-ibm", "followers_url": "https://api.github.com/users/stefan-sf-ibm/followers", "following_url": "https://api.github.com/users/stefan-sf-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/stefan-sf-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/stefan-sf-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stefan-sf-ibm/subscriptions", "organizations_url": "https://api.github.com/users/stefan-sf-ibm/orgs", "repos_url": "https://api.github.com/users/stefan-sf-ibm/repos", "events_url": "https://api.github.com/users/stefan-sf-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/stefan-sf-ibm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3f0296acbb99a0fa2867986956e53e487206a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f3f0296acbb99a0fa2867986956e53e487206a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f3f0296acbb99a0fa2867986956e53e487206a9"}], "stats": {"total": 123, "additions": 100, "deletions": 23}, "files": [{"sha": "f5c75395cf38f2dad5042ce1ecf2d412be46264e", "filename": "gcc/config/s390/s390.cc", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Fconfig%2Fs390%2Fs390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Fconfig%2Fs390%2Fs390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.cc?ref=cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "patch": "@@ -13792,36 +13792,37 @@ s390_call_saved_register_used (tree call_expr)\n       function_arg_info arg (TREE_TYPE (parameter), /*named=*/true);\n       apply_pass_by_reference_rules (&cum_v, arg);\n \n-       parm_rtx = s390_function_arg (cum, arg);\n+      parm_rtx = s390_function_arg (cum, arg);\n \n-       s390_function_arg_advance (cum, arg);\n+      s390_function_arg_advance (cum, arg);\n \n-       if (!parm_rtx)\n-\t continue;\n-\n-       if (REG_P (parm_rtx))\n-\t {\n-\t   for (reg = 0; reg < REG_NREGS (parm_rtx); reg++)\n-\t     if (!call_used_or_fixed_reg_p (reg + REGNO (parm_rtx)))\n-\t       return true;\n-\t }\n+      if (!parm_rtx)\n+\tcontinue;\n \n-       if (GET_CODE (parm_rtx) == PARALLEL)\n-\t {\n-\t   int i;\n+      if (REG_P (parm_rtx))\n+\t{\n+\t  int size = s390_function_arg_size (arg.mode, arg.type);\n+\t  int nregs = (size + UNITS_PER_LONG - 1) / UNITS_PER_LONG;\n \n-\t   for (i = 0; i < XVECLEN (parm_rtx, 0); i++)\n-\t     {\n-\t       rtx r = XEXP (XVECEXP (parm_rtx, 0, i), 0);\n+\t  for (reg = 0; reg < nregs; reg++)\n+\t    if (!call_used_or_fixed_reg_p (reg + REGNO (parm_rtx)))\n+\t      return true;\n+\t}\n+      else if (GET_CODE (parm_rtx) == PARALLEL)\n+\t{\n+\t  int i;\n \n-\t       gcc_assert (REG_P (r));\n+\t  for (i = 0; i < XVECLEN (parm_rtx, 0); i++)\n+\t    {\n+\t      rtx r = XEXP (XVECEXP (parm_rtx, 0, i), 0);\n \n-\t       for (reg = 0; reg < REG_NREGS (r); reg++)\n-\t\t if (!call_used_or_fixed_reg_p (reg + REGNO (r)))\n-\t\t   return true;\n-\t     }\n-\t }\n+\t      gcc_assert (REG_P (r));\n+\t      gcc_assert (REG_NREGS (r) == 1);\n \n+\t      if (!call_used_or_fixed_reg_p (REGNO (r)))\n+\t\treturn true;\n+\t    }\n+\t}\n     }\n   return false;\n }"}, {"sha": "1ec0f6b25acbdd46d4ca8f94d49d4aecb533c868", "filename": "gcc/testsuite/gcc.target/s390/pr106355-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-1.c?ref=cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-foptimize-sibling-calls\" } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,bar4} } } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,bar8} } } */\n+\n+/* Parameter E is passed in GPR 6 which is call-saved which prohibits\n+   sibling call optimization.  This must hold true also if the mode of the\n+   parameter is BLKmode.  */\n+\n+/* 4 byte */\n+\n+typedef struct\n+{\n+  char x;\n+  char y[3];\n+} t4;\n+\n+extern t4 e4;\n+\n+extern void bar4 (int a, int b, int c, int d, t4 e4);\n+\n+void foo4 (int a, int b, int c, int d)\n+{\n+  bar4 (a, b, c, d, e4);\n+}\n+\n+/* 8 byte */\n+\n+typedef struct\n+{\n+  short x;\n+  char y[6];\n+} t8;\n+\n+extern t8 e8;\n+\n+extern void bar8 (int a, int b, int c, int d, t8 e8);\n+\n+void foo8 (int a, int b, int c, int d)\n+{\n+  bar8 (a, b, c, d, e8);\n+}"}, {"sha": "ddbdba5d278b6d233de07bc97eaefc8c8645eb1e", "filename": "gcc/testsuite/gcc.target/s390/pr106355-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-2.c?ref=cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { s390-*-* } } } */\n+/* { dg-options \"-foptimize-sibling-calls -mzarch\" } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,bar} } } */\n+\n+/* This tests function s390_call_saved_register_used where\n+   GET_CODE (parm_rtx) == PARALLEL holds.  */\n+\n+#include \"pr106355.h\""}, {"sha": "39daea44fc4a3d205272144cbd47da57fe9a920b", "filename": "gcc/testsuite/gcc.target/s390/pr106355-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355-3.c?ref=cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile { target { s390-*-* } } } */\n+/* { dg-options \"-foptimize-sibling-calls -mesa\" } */\n+/* { dg-final { scan-assembler {brasl\\t%r\\d+,bar} } } */\n+\n+/* This tests function s390_call_saved_register_used where\n+   REG_P (parm_rtx) and nregs == 2 holds.  */\n+\n+#include \"pr106355.h\""}, {"sha": "362908e5913f6ad071373f1f5688d2a51de8023f", "filename": "gcc/testsuite/gcc.target/s390/pr106355.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb994acc08b67f26a54e7c5dc1f4995a2ce24d98/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr106355.h?ref=cb994acc08b67f26a54e7c5dc1f4995a2ce24d98", "patch": "@@ -0,0 +1,18 @@\n+/* For the S/390 ABI parameter D is passed in GPR 5 and 6 and the latter is\n+   call-saved which prohibits sibling call optimization.  This must hold true\n+   also if the mode of the parameter is BLKmode.  */\n+\n+typedef struct\n+{\n+  short x;\n+  char y[6];\n+} t;\n+\n+extern t d;\n+\n+extern void bar (int a, int b, int c, t d);\n+\n+void foo (int a, int b, int c)\n+{\n+  bar (a, b, c, d);\n+}"}]}