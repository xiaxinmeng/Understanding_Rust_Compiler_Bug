{"sha": "67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdiOWZhYjBlNmY5ZmFjOTE4NTIzZGYxOGFlMmQ4YmJiODhkNzc0OA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-11-26T23:55:36Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-11-26T23:55:36Z"}, "message": "PR 87756 - missing unterminated argument warning using address of a constant character\n\ngcc/ChangeLog:\n\n\tPR 87756\n\t* expr.c (string_constant): Handle top-level decls of all character\n\ttypes and subobjects of narrow character type.\n\ngcc/testsuite/ChangeLog:\n\n        PR 87756\n\t* gcc.dg/warn-sprintf-no-nul-2.c: Move incomplete tests from here...\n\t* gcc.dg/warn-sprintf-no-nul-3.c: ...to here and complete them.\n\nFrom-SVN: r266494", "tree": {"sha": "ffa797b2d0da859bb2520ba77e94369df8fecf3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffa797b2d0da859bb2520ba77e94369df8fecf3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/comments", "author": null, "committer": null, "parents": [{"sha": "426a04b84f4fed696149d8ba980dd48c6eb49de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/426a04b84f4fed696149d8ba980dd48c6eb49de7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/426a04b84f4fed696149d8ba980dd48c6eb49de7"}], "stats": {"total": 158, "additions": 93, "deletions": 65}, "files": [{"sha": "828dc23c21bb466ac798795c3480d30cb4f01932", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "patch": "@@ -1,3 +1,9 @@\n+2018-11-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR 87756\n+\t* expr.c (string_constant): Handle top-level decls of all character\n+\ttypes and subobjects of narrow character type.\n+\n 2018-11-27  Alan Modra  <amodra@gmail.com>\n \n \t* config.gcc (powerpc*-*-linux*): Add linux.h to tm_file."}, {"sha": "ef29ec5c40aa88ef1c710c7327fad145e1451dd3", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "patch": "@@ -11497,10 +11497,16 @@ string_constant (tree arg, tree *ptr_offset, tree *mem_size, tree *decl)\n   if (decl)\n     *decl = array;\n \n-  if (TREE_CODE (init) == INTEGER_CST)\n+  if (TREE_CODE (init) == INTEGER_CST\n+      && (TREE_CODE (TREE_TYPE (array)) == INTEGER_TYPE\n+\t  || TYPE_MAIN_VARIANT (eltype) == char_type_node))\n     {\n       /* For a reference to (address of) a single constant character,\n-\t store the native representation of the character in CHARBUF.   */\n+\t store the native representation of the character in CHARBUF.\n+\t If the reference is to an element of an array or a member\n+\t of a struct, only consider narrow characters until ctors\n+\t for wide character arrays are transformed to STRING_CSTs\n+\t like those for narrow arrays.  */\n       unsigned char charbuf[MAX_BITSIZE_MODE_ANY_MODE / BITS_PER_UNIT];\n       int len = native_encode_expr (init, charbuf, sizeof charbuf, 0);\n       if (len > 0)"}, {"sha": "34790af21677fa42ac44213b57385768bc59b750", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "patch": "@@ -1,3 +1,9 @@\n+2018-11-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR 87756\n+\t* gcc.dg/warn-sprintf-no-nul-2.c: Move incomplete tests from here...\n+\t* gcc.dg/warn-sprintf-no-nul-3.c: ...to here and complete them.\n+\n 2018-11-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88120 - ICE when calling save_expr in a template.\n@@ -26,7 +32,7 @@\n \n 2018-11-26  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n-\t* lib/target-supports.exp (check_effective_target_newlib_nano_io): New. \n+\t* lib/target-supports.exp (check_effective_target_newlib_nano_io): New.\n \t* gcc.c-torture/execute/920501-8.c: Register undefined linker symbol\n \t_printf_float for newlib_nano_io target.\n \t* gcc.c-torture/execute/930513-1.c: Likewise.\n@@ -70,7 +76,7 @@\n \t* gcc.dg/tree-ssa/loop-interchange-1.c: Likewise.\n \t* gcc.dg/tree-ssa/loop-interchange-1b.c: Likewise.\n \t* lib/target-supports.exp (check_effective_target_size20plus): New.\n-\t(check_effective_target_size32plus): Update comment. \n+\t(check_effective_target_size32plus): Update comment.\n \n 2018-11-26  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "3372a8b99ecba07f1765ea182f5b2ecbd88f0dc6", "filename": "gcc/testsuite/gcc.dg/warn-sprintf-no-nul-2.c", "status": "modified", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-2.c?ref=67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "patch": "@@ -3,9 +3,6 @@\n    { dg-do compile }\n    { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n \n-typedef __SIZE_TYPE__ size_t;\n-typedef __WCHAR_TYPE__ wchar_t;\n-\n int sprintf (char*, const char*, ...);\n \n extern char* dest (void);\n@@ -71,61 +68,3 @@ void test_sprintf_s (void)\n   T (sprintf (D, \"%s\", &str3[3]));\n   T (sprintf (D, \"%s\", &str3[4]));      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n }\n-\n-\n-const char wnul = '\\0';\n-const char wnonul = 'a';\n-const char wcs3[] = \"123\";\n-\n-const struct\n-{\n-  char a, b, s[3];\n-} w1 = { '\\0', 'b', \"123\" },\n-  w2[2] = {\n-  { '\\0', 'c', \"12\" },\n-  { 'd', '\\0', \"123\" }\n-  };\n-\n-void test_sprintf_ls (void)\n-{\n-  T (sprintf (D, \"%s\", &wnul));\n-  T (sprintf (D, \"%s\", &wnonul));       /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.1s\", &wnonul));\n-  T (sprintf (D, \"%.2s\", &wnonul));     /* { dg-warning \"nul-terminated\" } */\n-\n-  T (sprintf (D, \"%s\", &w1.a));\n-  T (sprintf (D, \"%s\", &w1.b));         /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.1s\", &w1.b));\n-  T (sprintf (D, \"%.2s\", &w1.b));       /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%s\", w1.s));          /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.3s\", w1.s));\n-  T (sprintf (D, \"%.4s\", w1.s));        /* { dg-warning \"nul-terminated\" } */\n-\n-  T (sprintf (D, \"%.2s\", w1.s + 1));\n-  T (sprintf (D, \"%.3s\", w1.s + 1));    /* { dg-warning \"nul-terminated\" } */\n-\n-  T (sprintf (D, \"%s\", &w2[0].a));\n-  T (sprintf (D, \"%s\", &w2[0].b));      /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.1s\", &w2[0].b));\n-  T (sprintf (D, \"%.2s\", &w2[0].b));    /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%s\", w2[0].s));\n-  T (sprintf (D, \"%.3s\", w2[0].s));\n-  T (sprintf (D, \"%.4s\", w2[0].s));\n-\n-  T (sprintf (D, \"%.2s\", w2[0].s + 1));\n-  T (sprintf (D, \"%.3s\", w2[0].s + 1));\n-\n-  T (sprintf (D, \"%s\", &w2[1].a));      /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.1s\", &w2[1].a));\n-  T (sprintf (D, \"%.2s\", &w2[1].a));    /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%s\", &w2[1].b));\n-  T (sprintf (D, \"%s\", w2[1].s));       /* { dg-warning \"nul-terminated\" } */\n-  T (sprintf (D, \"%.3s\", w2[1].s));\n-  T (sprintf (D, \"%.4s\", w2[1].s));     /* { dg-warning \"nul-terminated\" } */\n-\n-  T (sprintf (D, \"%.2s\", w2[1].s + 1));\n-  T (sprintf (D, \"%.3s\", w2[1].s + 1)); /* { dg-warning \"nul-terminated\" } */\n-\n-  T (sprintf (D, \"%s\", &wcs3[3]));\n-  T (sprintf (D, \"%s\", &wcs3[4]));      /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n-}"}, {"sha": "1cfbe62547a3ee7a0e8d0d9da73b550b89d80b8b", "filename": "gcc/testsuite/gcc.dg/warn-sprintf-no-nul-3.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67b9fab0e6f9fac918523df18ae2d8bbb88d7748/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwarn-sprintf-no-nul-3.c?ref=67b9fab0e6f9fac918523df18ae2d8bbb88d7748", "patch": "@@ -0,0 +1,71 @@\n+/* PR tree-optimization/87756 - missing unterminated argument warning\n+   using address of a constant character\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -ftrack-macro-expansion=0\" } */\n+\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+int sprintf (char*, const char*, ...);\n+\n+extern char* dest (void);\n+extern void sink (int, ...);\n+\n+#define D dest ()\n+#define T(expr)   sink (0, (expr))\n+\n+const wchar_t wnul = L'\\0';\n+const wchar_t wnonul = L'a';\n+const wchar_t wcs3[] = L\"123\";\n+\n+const struct\n+{\n+  wchar_t a, b, s[3];\n+} w1 = { L'\\0', L'b', L\"123\" },\n+  w2[2] = {\n+  { L'\\0', L'c', L\"12\" },\n+  { L'd', L'\\0', L\"123\" }\n+  };\n+\n+void test_sprintf_ls (void)\n+{\n+  T (sprintf (D, \"%ls\", &wnul));\n+  T (sprintf (D, \"%ls\", &wnonul));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.1ls\", &wnonul));\n+  T (sprintf (D, \"%.2ls\", &wnonul));    /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%ls\", &w1.a));\n+  T (sprintf (D, \"%ls\", &w1.b));        /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%.1ls\", &w1.b));\n+  T (sprintf (D, \"%.2ls\", &w1.b));      /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%ls\", w1.s));         /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3ls\", w1.s));\n+  T (sprintf (D, \"%.4ls\", w1.s));       /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2ls\", w1.s + 1));\n+  T (sprintf (D, \"%.3ls\", w1.s + 1));   /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%ls\", &w2[0].a));\n+  T (sprintf (D, \"%ls\", &w2[0].b));     /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%.1ls\", &w2[0].b));\n+  T (sprintf (D, \"%.2ls\", &w2[0].b));   /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%ls\", w2[0].s));\n+  T (sprintf (D, \"%.3ls\", w2[0].s));\n+  T (sprintf (D, \"%.4ls\", w2[0].s));\n+\n+  T (sprintf (D, \"%.2ls\", w2[0].s + 1));\n+  T (sprintf (D, \"%.3ls\", w2[0].s + 1));\n+\n+  T (sprintf (D, \"%ls\", &w2[1].a));     /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%.1ls\", &w2[1].a));\n+  T (sprintf (D, \"%.2ls\", &w2[1].a));   /* { dg-warning \"nul-terminated\" \"pr88211\" { xfail *-*-* } } */\n+  T (sprintf (D, \"%ls\", &w2[1].b));\n+  T (sprintf (D, \"%ls\", w2[1].s));      /* { dg-warning \"nul-terminated\" } */\n+  T (sprintf (D, \"%.3ls\", w2[1].s));\n+  T (sprintf (D, \"%.4ls\", w2[1].s));    /* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%.2ls\", w2[1].s + 1));\n+  T (sprintf (D, \"%.3ls\", w2[1].s + 1));/* { dg-warning \"nul-terminated\" } */\n+\n+  T (sprintf (D, \"%ls\", &wcs3[3]));\n+  T (sprintf (D, \"%ls\", &wcs3[4]));     /* { dg-warning \"\\\\\\[-Warray-bounds\" } */\n+}"}]}