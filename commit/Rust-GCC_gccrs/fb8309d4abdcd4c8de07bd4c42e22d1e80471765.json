{"sha": "fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI4MzA5ZDRhYmRjZDRjOGRlMDdiZDRjNDJlMjJkMWU4MDQ3MTc2NQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T12:06:15Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2020-11-23T12:06:15Z"}, "message": "cp/decl.c: Set DECL_INITIAL before attribute processing\n\nAttribute handlers may want to examine DECL_INITIAL for a decl, to\nvalidate the attribute being applied. For C++, DECL_INITIAL is currently\nnot set until cp_finish_decl, by which time attribute validation has\nalready been performed.\n\nFor msp430-elf this causes the \"persistent\" attribute to always be\nrejected for C++, since DECL_INITIAL must be non-null for the\nattribute to be applied to a decl.\n\nThis patch ensures DECL_INITIAL is set for initialized decls early in\nstart_decl, before attribute handlers run. This allows the\ninitialization status of the decl to be examined by the handlers.\nDECL_INITIAL must be restored to it's initial value after attribute\nvalidation is performed, so as to not interfere with later decl\nprocessing.\n\ngcc/cp/ChangeLog:\n\n\t* decl.c (start_decl): Set DECL_INITIAL for initialized decls\n\tbefore attribute processing.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/msp430/data-attributes-2.c: Adjust test.\n\t* g++.target/msp430/data-attributes.C: New test.\n\t* g++.target/msp430/msp430.exp: New test.", "tree": {"sha": "f2bbbaa05ee7dd1fc45845ae0d1277765032e6f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2bbbaa05ee7dd1fc45845ae0d1277765032e6f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b510765dedfec573c756cb1fcfcb5b0c3830c5e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b510765dedfec573c756cb1fcfcb5b0c3830c5e9"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "3dd4b076582c8a11078b833e077ce9102fc8792d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "patch": "@@ -5248,6 +5248,7 @@ start_decl (const cp_declarator *declarator,\n   bool was_public;\n   int flags;\n   bool alias;\n+  tree initial;\n \n   *pushed_scope_p = NULL_TREE;\n \n@@ -5272,6 +5273,10 @@ start_decl (const cp_declarator *declarator,\n       return error_mark_node;\n     }\n \n+  /* Save the DECL_INITIAL value in case it gets clobbered to assist\n+     with attribute validation.  */\n+  initial = DECL_INITIAL (decl);\n+\n   if (initialized)\n     {\n       if (! toplevel_bindings_p ()\n@@ -5281,6 +5286,10 @@ start_decl (const cp_declarator *declarator,\n       DECL_EXTERNAL (decl) = 0;\n       if (toplevel_bindings_p ())\n \tTREE_STATIC (decl) = 1;\n+      /* Tell 'cplus_decl_attributes' this is an initialized decl,\n+\t even though we might not yet have the initializer expression.  */\n+      if (!DECL_INITIAL (decl))\n+\tDECL_INITIAL (decl) = error_mark_node;\n     }\n   alias = lookup_attribute (\"alias\", DECL_ATTRIBUTES (decl)) != 0;\n   \n@@ -5299,6 +5308,10 @@ start_decl (const cp_declarator *declarator,\n   /* Set attributes here so if duplicate decl, will have proper attributes.  */\n   cplus_decl_attributes (&decl, attributes, flags);\n \n+  /* Restore the original DECL_INITIAL that we may have clobbered earlier to\n+     assist with attribute validation.  */\n+  DECL_INITIAL (decl) = initial;\n+\n   /* Dllimported symbols cannot be defined.  Static data members (which\n      can be initialized in-class and dllimported) go through grokfield,\n      not here, so we don't need to exclude those decls when checking for"}, {"sha": "4e2139e93f7c1d8bec1ce083fce72ad9940c7f10", "filename": "gcc/testsuite/g++.target/msp430/data-attributes.C", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fdata-attributes.C?ref=fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-mcpu=msp430\" } } */\n+/* { dg-options \"-mlarge\" } */\n+\n+/* The msp430-specific variable attributes \"lower\", \"upper\", either\", \"noinit\"\n+   and \"persistent\", all conflict with one another.\n+   These attributes also conflict with the \"section\" attribute, since they\n+   specify sections to put the variables into.  */\n+int __attribute__((persistent)) p = 10;\n+int __attribute__((persistent,lower)) pl = 20; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,upper)) pu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'persistent'\" } */\n+int __attribute__((persistent,either)) pe = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'persistent'\" } */\n+/* This one results in an error because the handler for persistent sets the\n+   section to .persistent there and then.  */\n+int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-error \"section of 'ps' conflicts with previous declaration\" } */\n+int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"'noinit' attribute cannot be applied to variables with specific sections\" } */\n+int __attribute__((persistent)) zz; /* { dg-warning \"variables marked with 'persistent' attribute must be initialized\" } */\n+\n+int __attribute__((noinit)) n;\n+int __attribute__((noinit,lower)) nl; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,upper)) nu; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,either)) ne; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,persistent)) np; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'noinit'\" } */\n+int __attribute__((noinit,section(\".data.foo\"))) ns; /* { dg-warning \"ignoring attribute 'section' because it conflicts with attribute 'noinit'\" } */\n+\n+int __attribute__((lower)) l = 20;\n+int __attribute__((lower,upper)) lu = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,either)) le = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,persistent)) lp = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,noinit)) ln; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'lower'\" } */\n+int __attribute__((lower,section(\".data.foo\"))) ls = 30;\n+\n+int __attribute__((upper)) u = 20;\n+int __attribute__((upper,lower)) ul = 20; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'upper'\" } */\n+int __attribute__((upper,either)) ue = 20; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'upper'\" } */\n+int __attribute__((upper,persistent)) up = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'upper'\" } */\n+int __attribute__((upper,noinit)) un; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'upper'\" } */\n+int __attribute__((upper,section(\".data.foo\"))) us = 30; /* { dg-warning \"ignoring attribute 'section' because it conflicts with attribute 'upper'\" } */\n+\n+int __attribute__((either)) e = 20;\n+int __attribute__((either,lower)) el = 20; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'either'\" } */\n+int __attribute__((either,upper)) ee = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'either'\" } */\n+int __attribute__((either,persistent)) ep = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'either'\" } */\n+int __attribute__((either,noinit)) en; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'either'\" } */\n+int __attribute__((either,section(\".data.foo\"))) es = 30; /* { dg-warning \"ignoring attribute 'section' because it conflicts with attribute 'either'\" } */\n+\n+int __attribute__((section(\".data.foo\"))) s = 20;\n+int __attribute__((section(\".data.foo\"),noinit)) sn; /* { dg-warning \"ignoring attribute 'noinit' because it conflicts with attribute 'section'\" } */\n+int __attribute__((section(\".data.foo\"),persistent)) sp = 20; /* { dg-warning \"ignoring attribute 'persistent' because it conflicts with attribute 'section'\" } */\n+int __attribute__((section(\".data.foo\"),lower)) sl = 2;\n+int __attribute__((section(\".data.foo\"),upper)) su = 20; /* { dg-warning \"ignoring attribute 'upper' because it conflicts with attribute 'section'\" } */\n+int __attribute__((section(\".data.foo\"),either)) se = 2; /* { dg-warning \"ignoring attribute 'either' because it conflicts with attribute 'section'\" } */"}, {"sha": "3574c0fe71f922105752c78cb9a316320ee84e37", "filename": "gcc/testsuite/g++.target/msp430/msp430.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fmsp430.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fmsp430.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fmsp430%2Fmsp430.exp?ref=fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "patch": "@@ -0,0 +1,44 @@\n+#  Specific regression driver for MSP430.\n+#  Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+#  This file is part of GCC.\n+#\n+#  GCC is free software; you can redistribute it and/or modify it\n+#  under the terms of the GNU General Public License as published by\n+#  the Free Software Foundation; either version 3, or (at your option)\n+#  any later version.\n+#\n+#  GCC is distributed in the hope that it will be useful, but\n+#  WITHOUT ANY WARRANTY; without even the implied warranty of\n+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+#  General Public License for more details.\n+#\n+#  You should have received a copy of the GNU General Public License\n+#  along with GCC; see the file COPYING3.  If not see\n+#  <http://www.gnu.org/licenses/>.  */\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an MSP430 target.\n+if {![istarget msp430*-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish\n+"}, {"sha": "4e2139e93f7c1d8bec1ce083fce72ad9940c7f10", "filename": "gcc/testsuite/gcc.target/msp430/data-attributes-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb8309d4abdcd4c8de07bd4c42e22d1e80471765/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fdata-attributes-2.c?ref=fb8309d4abdcd4c8de07bd4c42e22d1e80471765", "patch": "@@ -14,6 +14,7 @@ int __attribute__((persistent,either)) pe = 20; /* { dg-warning \"ignoring attrib\n    section to .persistent there and then.  */\n int __attribute__((persistent,section(\".data.foo\"))) ps = 20; /* { dg-error \"section of 'ps' conflicts with previous declaration\" } */\n int __attribute__((persistent,noinit)) pn = 2; /* { dg-warning \"'noinit' attribute cannot be applied to variables with specific sections\" } */\n+int __attribute__((persistent)) zz; /* { dg-warning \"variables marked with 'persistent' attribute must be initialized\" } */\n \n int __attribute__((noinit)) n;\n int __attribute__((noinit,lower)) nl; /* { dg-warning \"ignoring attribute 'lower' because it conflicts with attribute 'noinit'\" } */"}]}