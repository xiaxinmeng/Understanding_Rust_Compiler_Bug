{"sha": "a49a96f681bf13c6e77644d4507e867f00f93fe6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5YTk2ZjY4MWJmMTNjNmU3NzY0NGQ0NTA3ZTg2N2YwMGY5M2ZlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-31T07:11:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-31T07:11:29Z"}, "message": "i386, debug: Default to -gdwarf-4 on Windows targets with broken ld.bfd [PR98860]\n\nAs mentioned in the PR, before the\nhttps://sourceware.org/git/?p=binutils-gdb.git;a=commit;h=ba6eb62ff0ea9843a018cfd7cd06777bd66ae0a0\nfix from March 1st, PECOFF ld.bfd didn't know about .debug_loclists,\n.debug_rnglists and other debug sections new in DWARF 5.  Unfortunately,\nunlike for ELF linkers, that means the sections were placed in wrong\nordering with wrong VMA/LMA, so the resulting executables are apparently\nunusable.\n\nAs that is pretty new change, newer than 2.35.2 or 2.36 binutils releases,\nthe following patch adds a workaround that turns -gdwarf-4 by default\ninstead of -gdwarf-5 if a broken linker is found at configure time.\nUsers can still explicitly play with -gdwarf-5 and either use a non-broken\nlinker or use custom linker scripts for the broken one, but at least\nby default it should work.\n\n2021-03-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/98860\n\t* configure.ac (HAVE_LD_BROKEN_PE_DWARF5): New AC_DEFINE if PECOFF\n\tlinker doesn't support DWARF sections new in DWARF5.\n\t* config/i386/i386-options.c (ix86_option_override_internal): Default\n\tto dwarf_version 4 if HAVE_LD_BROKEN_PE_DWARF5 for TARGET_PECOFF\n\ttargets.\n\t* config.in: Regenerated.\n\t* configure: Regenerated.", "tree": {"sha": "8eeb88c4ba5e60b07582f1d6fc90a237664b0ec0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eeb88c4ba5e60b07582f1d6fc90a237664b0ec0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49a96f681bf13c6e77644d4507e867f00f93fe6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49a96f681bf13c6e77644d4507e867f00f93fe6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49a96f681bf13c6e77644d4507e867f00f93fe6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49a96f681bf13c6e77644d4507e867f00f93fe6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0989e99470c2a6797bacf6d04888bc9a46a632a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0989e99470c2a6797bacf6d04888bc9a46a632a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0989e99470c2a6797bacf6d04888bc9a46a632a8"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "313c13c8e49b1b58534d6b737dd7f51e62b948a0", "filename": "gcc/config.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=a49a96f681bf13c6e77644d4507e867f00f93fe6", "patch": "@@ -1580,6 +1580,12 @@\n #endif\n \n \n+/* Define if the PE linker has broken DWARF 5 support. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_LD_BROKEN_PE_DWARF5\n+#endif\n+\n+\n /* Define if your linker supports --build-id. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_BUILDID"}, {"sha": "93cd6e8ed2777e673ec147591f01f9535ab1b0f4", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=a49a96f681bf13c6e77644d4507e867f00f93fe6", "patch": "@@ -1861,6 +1861,13 @@ ix86_option_override_internal (bool main_args_p,\n   SUBSUBTARGET_OVERRIDE_OPTIONS;\n #endif\n \n+#ifdef HAVE_LD_BROKEN_PE_DWARF5\n+  /* If the PE linker has broken DWARF 5 support, make\n+     DWARF 4 the default.  */\n+  if (TARGET_PECOFF)\n+    SET_OPTION_IF_UNSET (opts, opts_set, dwarf_version, 4);\n+#endif\n+\n   /* -fPIC is the default for x86_64.  */\n   if (TARGET_MACHO && TARGET_64BIT_P (opts->x_ix86_isa_flags))\n     opts->x_flag_pic = 2;"}, {"sha": "e8ecb3b0297bec33cdca816af1c46a3afcfcc9c0", "filename": "gcc/configure", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=a49a96f681bf13c6e77644d4507e867f00f93fe6", "patch": "@@ -19392,7 +19392,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19405 \"configure\"\n+#line 19395 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19498,7 +19498,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19511 \"configure\"\n+#line 19501 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -22237,16 +22237,6 @@ freebsd* | dragonfly*)\n   esac\n   ;;\n \n-gnu*)\n-  version_type=linux\n-  need_lib_prefix=no\n-  need_version=no\n-  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n-  soname_spec='${libname}${release}${shared_ext}$major'\n-  shlibpath_var=LD_LIBRARY_PATH\n-  hardcode_into_libs=yes\n-  ;;\n-\n haiku*)\n   version_type=linux\n   need_lib_prefix=no\n@@ -22368,7 +22358,7 @@ linux*oldld* | linux*aout* | linux*coff*)\n # project, but have not yet been accepted: they are GCC-local changes\n # for the time being.  (See\n # https://lists.gnu.org/archive/html/libtool-patches/2018-05/msg00000.html)\n-linux* | k*bsd*-gnu | kopensolaris*-gnu | uclinuxfdpiceabi)\n+linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu* | uclinuxfdpiceabi)\n   version_type=linux\n   need_lib_prefix=no\n   need_version=no\n@@ -30223,6 +30213,34 @@ _ACEOF\n \n fi\n \n+case $target_os in\n+  win32 | pe | cygwin* | mingw32*)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking broken PE linker dwarf5 support\" >&5\n+$as_echo_n \"checking broken PE linker dwarf5 support... \" >&6; }\n+    gcc_cv_ld_broken_pe_dwarf5=yes\n+    if test $in_tree_ld = yes ; then\n+      if grep -q '\\.debug_loclists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t   $gcc_cv_ld_gld_srcdir/scripttempl/pe*.sc \\\n+\t && grep -q '\\.debug_rnglists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t      $gcc_cv_ld_gld_srcdir/scripttempl/pe*.sc; then\n+\tgcc_cv_ld_broken_pe_dwarf5=no\n+      fi\n+    else\n+      if $gcc_cv_ld --verbose 2>&1 | grep -q '\\.debug_loclists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t && $gcc_cv_ld --verbose 2>&1 | grep -q '\\.debug_rnglists.*BLOCK.*__section_alignment__.*NOLOAD.*:'; then\n+\tgcc_cv_ld_broken_pe_dwarf5=no\n+      fi\n+    fi\n+    if test x$gcc_cv_ld_broken_pe_dwarf5 = xyes; then\n+\n+$as_echo \"#define HAVE_LD_BROKEN_PE_DWARF5 1\" >>confdefs.h\n+\n+    fi\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_ld_broken_pe_dwarf5\" >&5\n+$as_echo \"$gcc_cv_ld_broken_pe_dwarf5\" >&6; }\n+    ;;\n+esac\n+\n # --------\n # UNSORTED\n # --------"}, {"sha": "96a6f62b0d37fae8faeff8172835c81a234789fb", "filename": "gcc/configure.ac", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a96f681bf13c6e77644d4507e867f00f93fe6/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=a49a96f681bf13c6e77644d4507e867f00f93fe6", "patch": "@@ -6190,6 +6190,31 @@ if test x\"$ld64_flag\" = x\"yes\"; then\n   [Define to 1 if ld64 supports '-export_dynamic'.])\n fi\n \n+case $target_os in\n+  win32 | pe | cygwin* | mingw32*)\n+    AC_MSG_CHECKING(broken PE linker dwarf5 support)\n+    gcc_cv_ld_broken_pe_dwarf5=yes\n+    if test $in_tree_ld = yes ; then\n+      if grep -q '\\.debug_loclists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t   $gcc_cv_ld_gld_srcdir/scripttempl/pe*.sc \\\n+\t && grep -q '\\.debug_rnglists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t      $gcc_cv_ld_gld_srcdir/scripttempl/pe*.sc; then\n+\tgcc_cv_ld_broken_pe_dwarf5=no\n+      fi\n+    else\n+      if $gcc_cv_ld --verbose 2>&1 | grep -q '\\.debug_loclists.*BLOCK.*__section_alignment__.*NOLOAD.*:' \\\n+\t && $gcc_cv_ld --verbose 2>&1 | grep -q '\\.debug_rnglists.*BLOCK.*__section_alignment__.*NOLOAD.*:'; then\n+\tgcc_cv_ld_broken_pe_dwarf5=no\n+      fi\n+    fi\n+    if test x$gcc_cv_ld_broken_pe_dwarf5 = xyes; then\n+      AC_DEFINE(HAVE_LD_BROKEN_PE_DWARF5, 1,\n+\t        [Define if the PE linker has broken DWARF 5 support.])\n+    fi\n+    AC_MSG_RESULT($gcc_cv_ld_broken_pe_dwarf5)\n+    ;;\n+esac\n+\n # --------\n # UNSORTED\n # --------"}]}