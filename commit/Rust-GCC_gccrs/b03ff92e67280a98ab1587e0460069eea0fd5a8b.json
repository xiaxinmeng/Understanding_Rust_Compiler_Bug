{"sha": "b03ff92e67280a98ab1587e0460069eea0fd5a8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAzZmY5MmU2NzI4MGE5OGFiMTU4N2UwNDYwMDY5ZWVhMGZkNWE4Yg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:47:02Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:47:02Z"}, "message": "Extend mathfn_built_in to handle combined_fn\n\nThis patch extends mathfn_built_in to handle combined_fn, but keeps the\nold built_in_function interface around since it's a common case.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* builtins.h (mathfn_built_in): Add a variant that takes\n\ta combined_fn.\n\t* builtins.c: Include case-cfn-macros.h.\n\t(CASE_MATHFN): Use CASE_CFN_*.\n\t(CASE_MATHFN_REENT): Use CFN_ codes.\n\t(mathfn_built_in_2, mathfn_built_in_1): Replace built_in_function\n\targument with a combined_fn.\n\t(mathfn_built_in): Add a variant that takes a combined_fn.\n\t(expand_builtin_int_roundingfn_2): Update callers accordingly.\n\t(fold_builtin_sincos, fold_builtin_classify): Likewise.\n\nFrom-SVN: r230483", "tree": {"sha": "a5d1ace93e0252d5801b679ce67304637037962a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5d1ace93e0252d5801b679ce67304637037962a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b03ff92e67280a98ab1587e0460069eea0fd5a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03ff92e67280a98ab1587e0460069eea0fd5a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b03ff92e67280a98ab1587e0460069eea0fd5a8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b03ff92e67280a98ab1587e0460069eea0fd5a8b/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a31e5ef6dab7c1a2d780369804352351f4630ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a31e5ef6dab7c1a2d780369804352351f4630ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a31e5ef6dab7c1a2d780369804352351f4630ea"}], "stats": {"total": 244, "additions": 135, "deletions": 109}, "files": [{"sha": "ac21b4b6cfc7278bfbba277d74380aa1278680fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b03ff92e67280a98ab1587e0460069eea0fd5a8b", "patch": "@@ -1,3 +1,16 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* builtins.h (mathfn_built_in): Add a variant that takes\n+\ta combined_fn.\n+\t* builtins.c: Include case-cfn-macros.h.\n+\t(CASE_MATHFN): Use CASE_CFN_*.\n+\t(CASE_MATHFN_REENT): Use CFN_ codes.\n+\t(mathfn_built_in_2, mathfn_built_in_1): Replace built_in_function\n+\targument with a combined_fn.\n+\t(mathfn_built_in): Add a variant that takes a combined_fn.\n+\t(expand_builtin_int_roundingfn_2): Update callers accordingly.\n+\t(fold_builtin_sincos, fold_builtin_classify): Likewise.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vect-patterns.c: Include case-cfn-macros.h."}, {"sha": "6df1b9b6aa00a5abfd90c18c298f21e5dad67305", "filename": "gcc/builtins.c", "status": "modified", "additions": 121, "deletions": 109, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b03ff92e67280a98ab1587e0460069eea0fd5a8b", "patch": "@@ -63,6 +63,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n #include \"internal-fn.h\"\n+#include \"case-cfn-macros.h\"\n \n \n struct target_builtins default_target_builtins;\n@@ -1751,120 +1752,121 @@ expand_builtin_classify_type (tree exp)\n    determines which among a set of three builtin math functions is\n    appropriate for a given type mode.  The `F' and `L' cases are\n    automatically generated from the `double' case.  */\n-#define CASE_MATHFN(BUILT_IN_MATHFN) \\\n-  case BUILT_IN_MATHFN: case BUILT_IN_MATHFN##F: case BUILT_IN_MATHFN##L: \\\n-  fcode = BUILT_IN_MATHFN; fcodef = BUILT_IN_MATHFN##F ; \\\n-  fcodel = BUILT_IN_MATHFN##L ; break;\n+#define CASE_MATHFN(MATHFN) \\\n+  CASE_CFN_##MATHFN: \\\n+  fcode = BUILT_IN_##MATHFN; fcodef = BUILT_IN_##MATHFN##F ; \\\n+  fcodel = BUILT_IN_##MATHFN##L ; break;\n /* Similar to above, but appends _R after any F/L suffix.  */\n-#define CASE_MATHFN_REENT(BUILT_IN_MATHFN) \\\n-  case BUILT_IN_MATHFN##_R: case BUILT_IN_MATHFN##F_R: case BUILT_IN_MATHFN##L_R: \\\n-  fcode = BUILT_IN_MATHFN##_R; fcodef = BUILT_IN_MATHFN##F_R ; \\\n-  fcodel = BUILT_IN_MATHFN##L_R ; break;\n+#define CASE_MATHFN_REENT(MATHFN) \\\n+  case CFN_BUILT_IN_##MATHFN##_R: \\\n+  case CFN_BUILT_IN_##MATHFN##F_R: \\\n+  case CFN_BUILT_IN_##MATHFN##L_R: \\\n+  fcode = BUILT_IN_##MATHFN##_R; fcodef = BUILT_IN_##MATHFN##F_R ; \\\n+  fcodel = BUILT_IN_##MATHFN##L_R ; break;\n \n /* Return a function equivalent to FN but operating on floating-point\n    values of type TYPE, or END_BUILTINS if no such function exists.\n-   This is purely an operation on built-in function codes; it does not\n-   guarantee that the target actually has an implementation of the\n-   function.  */\n+   This is purely an operation on function codes; it does not guarantee\n+   that the target actually has an implementation of the function.  */\n \n static built_in_function\n-mathfn_built_in_2 (tree type, built_in_function fn)\n+mathfn_built_in_2 (tree type, combined_fn fn)\n {\n   built_in_function fcode, fcodef, fcodel;\n \n   switch (fn)\n     {\n-      CASE_MATHFN (BUILT_IN_ACOS)\n-      CASE_MATHFN (BUILT_IN_ACOSH)\n-      CASE_MATHFN (BUILT_IN_ASIN)\n-      CASE_MATHFN (BUILT_IN_ASINH)\n-      CASE_MATHFN (BUILT_IN_ATAN)\n-      CASE_MATHFN (BUILT_IN_ATAN2)\n-      CASE_MATHFN (BUILT_IN_ATANH)\n-      CASE_MATHFN (BUILT_IN_CBRT)\n-      CASE_MATHFN (BUILT_IN_CEIL)\n-      CASE_MATHFN (BUILT_IN_CEXPI)\n-      CASE_MATHFN (BUILT_IN_COPYSIGN)\n-      CASE_MATHFN (BUILT_IN_COS)\n-      CASE_MATHFN (BUILT_IN_COSH)\n-      CASE_MATHFN (BUILT_IN_DREM)\n-      CASE_MATHFN (BUILT_IN_ERF)\n-      CASE_MATHFN (BUILT_IN_ERFC)\n-      CASE_MATHFN (BUILT_IN_EXP)\n-      CASE_MATHFN (BUILT_IN_EXP10)\n-      CASE_MATHFN (BUILT_IN_EXP2)\n-      CASE_MATHFN (BUILT_IN_EXPM1)\n-      CASE_MATHFN (BUILT_IN_FABS)\n-      CASE_MATHFN (BUILT_IN_FDIM)\n-      CASE_MATHFN (BUILT_IN_FLOOR)\n-      CASE_MATHFN (BUILT_IN_FMA)\n-      CASE_MATHFN (BUILT_IN_FMAX)\n-      CASE_MATHFN (BUILT_IN_FMIN)\n-      CASE_MATHFN (BUILT_IN_FMOD)\n-      CASE_MATHFN (BUILT_IN_FREXP)\n-      CASE_MATHFN (BUILT_IN_GAMMA)\n-      CASE_MATHFN_REENT (BUILT_IN_GAMMA) /* GAMMA_R */\n-      CASE_MATHFN (BUILT_IN_HUGE_VAL)\n-      CASE_MATHFN (BUILT_IN_HYPOT)\n-      CASE_MATHFN (BUILT_IN_ILOGB)\n-      CASE_MATHFN (BUILT_IN_ICEIL)\n-      CASE_MATHFN (BUILT_IN_IFLOOR)\n-      CASE_MATHFN (BUILT_IN_INF)\n-      CASE_MATHFN (BUILT_IN_IRINT)\n-      CASE_MATHFN (BUILT_IN_IROUND)\n-      CASE_MATHFN (BUILT_IN_ISINF)\n-      CASE_MATHFN (BUILT_IN_J0)\n-      CASE_MATHFN (BUILT_IN_J1)\n-      CASE_MATHFN (BUILT_IN_JN)\n-      CASE_MATHFN (BUILT_IN_LCEIL)\n-      CASE_MATHFN (BUILT_IN_LDEXP)\n-      CASE_MATHFN (BUILT_IN_LFLOOR)\n-      CASE_MATHFN (BUILT_IN_LGAMMA)\n-      CASE_MATHFN_REENT (BUILT_IN_LGAMMA) /* LGAMMA_R */\n-      CASE_MATHFN (BUILT_IN_LLCEIL)\n-      CASE_MATHFN (BUILT_IN_LLFLOOR)\n-      CASE_MATHFN (BUILT_IN_LLRINT)\n-      CASE_MATHFN (BUILT_IN_LLROUND)\n-      CASE_MATHFN (BUILT_IN_LOG)\n-      CASE_MATHFN (BUILT_IN_LOG10)\n-      CASE_MATHFN (BUILT_IN_LOG1P)\n-      CASE_MATHFN (BUILT_IN_LOG2)\n-      CASE_MATHFN (BUILT_IN_LOGB)\n-      CASE_MATHFN (BUILT_IN_LRINT)\n-      CASE_MATHFN (BUILT_IN_LROUND)\n-      CASE_MATHFN (BUILT_IN_MODF)\n-      CASE_MATHFN (BUILT_IN_NAN)\n-      CASE_MATHFN (BUILT_IN_NANS)\n-      CASE_MATHFN (BUILT_IN_NEARBYINT)\n-      CASE_MATHFN (BUILT_IN_NEXTAFTER)\n-      CASE_MATHFN (BUILT_IN_NEXTTOWARD)\n-      CASE_MATHFN (BUILT_IN_POW)\n-      CASE_MATHFN (BUILT_IN_POWI)\n-      CASE_MATHFN (BUILT_IN_POW10)\n-      CASE_MATHFN (BUILT_IN_REMAINDER)\n-      CASE_MATHFN (BUILT_IN_REMQUO)\n-      CASE_MATHFN (BUILT_IN_RINT)\n-      CASE_MATHFN (BUILT_IN_ROUND)\n-      CASE_MATHFN (BUILT_IN_SCALB)\n-      CASE_MATHFN (BUILT_IN_SCALBLN)\n-      CASE_MATHFN (BUILT_IN_SCALBN)\n-      CASE_MATHFN (BUILT_IN_SIGNBIT)\n-      CASE_MATHFN (BUILT_IN_SIGNIFICAND)\n-      CASE_MATHFN (BUILT_IN_SIN)\n-      CASE_MATHFN (BUILT_IN_SINCOS)\n-      CASE_MATHFN (BUILT_IN_SINH)\n-      CASE_MATHFN (BUILT_IN_SQRT)\n-      CASE_MATHFN (BUILT_IN_TAN)\n-      CASE_MATHFN (BUILT_IN_TANH)\n-      CASE_MATHFN (BUILT_IN_TGAMMA)\n-      CASE_MATHFN (BUILT_IN_TRUNC)\n-      CASE_MATHFN (BUILT_IN_Y0)\n-      CASE_MATHFN (BUILT_IN_Y1)\n-      CASE_MATHFN (BUILT_IN_YN)\n+    CASE_MATHFN (ACOS)\n+    CASE_MATHFN (ACOSH)\n+    CASE_MATHFN (ASIN)\n+    CASE_MATHFN (ASINH)\n+    CASE_MATHFN (ATAN)\n+    CASE_MATHFN (ATAN2)\n+    CASE_MATHFN (ATANH)\n+    CASE_MATHFN (CBRT)\n+    CASE_MATHFN (CEIL)\n+    CASE_MATHFN (CEXPI)\n+    CASE_MATHFN (COPYSIGN)\n+    CASE_MATHFN (COS)\n+    CASE_MATHFN (COSH)\n+    CASE_MATHFN (DREM)\n+    CASE_MATHFN (ERF)\n+    CASE_MATHFN (ERFC)\n+    CASE_MATHFN (EXP)\n+    CASE_MATHFN (EXP10)\n+    CASE_MATHFN (EXP2)\n+    CASE_MATHFN (EXPM1)\n+    CASE_MATHFN (FABS)\n+    CASE_MATHFN (FDIM)\n+    CASE_MATHFN (FLOOR)\n+    CASE_MATHFN (FMA)\n+    CASE_MATHFN (FMAX)\n+    CASE_MATHFN (FMIN)\n+    CASE_MATHFN (FMOD)\n+    CASE_MATHFN (FREXP)\n+    CASE_MATHFN (GAMMA)\n+    CASE_MATHFN_REENT (GAMMA) /* GAMMA_R */\n+    CASE_MATHFN (HUGE_VAL)\n+    CASE_MATHFN (HYPOT)\n+    CASE_MATHFN (ILOGB)\n+    CASE_MATHFN (ICEIL)\n+    CASE_MATHFN (IFLOOR)\n+    CASE_MATHFN (INF)\n+    CASE_MATHFN (IRINT)\n+    CASE_MATHFN (IROUND)\n+    CASE_MATHFN (ISINF)\n+    CASE_MATHFN (J0)\n+    CASE_MATHFN (J1)\n+    CASE_MATHFN (JN)\n+    CASE_MATHFN (LCEIL)\n+    CASE_MATHFN (LDEXP)\n+    CASE_MATHFN (LFLOOR)\n+    CASE_MATHFN (LGAMMA)\n+    CASE_MATHFN_REENT (LGAMMA) /* LGAMMA_R */\n+    CASE_MATHFN (LLCEIL)\n+    CASE_MATHFN (LLFLOOR)\n+    CASE_MATHFN (LLRINT)\n+    CASE_MATHFN (LLROUND)\n+    CASE_MATHFN (LOG)\n+    CASE_MATHFN (LOG10)\n+    CASE_MATHFN (LOG1P)\n+    CASE_MATHFN (LOG2)\n+    CASE_MATHFN (LOGB)\n+    CASE_MATHFN (LRINT)\n+    CASE_MATHFN (LROUND)\n+    CASE_MATHFN (MODF)\n+    CASE_MATHFN (NAN)\n+    CASE_MATHFN (NANS)\n+    CASE_MATHFN (NEARBYINT)\n+    CASE_MATHFN (NEXTAFTER)\n+    CASE_MATHFN (NEXTTOWARD)\n+    CASE_MATHFN (POW)\n+    CASE_MATHFN (POWI)\n+    CASE_MATHFN (POW10)\n+    CASE_MATHFN (REMAINDER)\n+    CASE_MATHFN (REMQUO)\n+    CASE_MATHFN (RINT)\n+    CASE_MATHFN (ROUND)\n+    CASE_MATHFN (SCALB)\n+    CASE_MATHFN (SCALBLN)\n+    CASE_MATHFN (SCALBN)\n+    CASE_MATHFN (SIGNBIT)\n+    CASE_MATHFN (SIGNIFICAND)\n+    CASE_MATHFN (SIN)\n+    CASE_MATHFN (SINCOS)\n+    CASE_MATHFN (SINH)\n+    CASE_MATHFN (SQRT)\n+    CASE_MATHFN (TAN)\n+    CASE_MATHFN (TANH)\n+    CASE_MATHFN (TGAMMA)\n+    CASE_MATHFN (TRUNC)\n+    CASE_MATHFN (Y0)\n+    CASE_MATHFN (Y1)\n+    CASE_MATHFN (YN)\n \n-      default:\n-\treturn END_BUILTINS;\n-      }\n+    default:\n+      return END_BUILTINS;\n+    }\n \n   if (TYPE_MAIN_VARIANT (type) == double_type_node)\n     return fcode;\n@@ -1882,7 +1884,7 @@ mathfn_built_in_2 (tree type, built_in_function fn)\n    return null.  */\n \n static tree\n-mathfn_built_in_1 (tree type, enum built_in_function fn, bool implicit_p)\n+mathfn_built_in_1 (tree type, combined_fn fn, bool implicit_p)\n {\n   built_in_function fcode2 = mathfn_built_in_2 (type, fn);\n   if (fcode2 == END_BUILTINS)\n@@ -1894,14 +1896,23 @@ mathfn_built_in_1 (tree type, enum built_in_function fn, bool implicit_p)\n   return builtin_decl_explicit (fcode2);\n }\n \n-/* Like mathfn_built_in_1(), but always use the implicit array.  */\n+/* Like mathfn_built_in_1, but always use the implicit array.  */\n \n tree\n-mathfn_built_in (tree type, enum built_in_function fn)\n+mathfn_built_in (tree type, combined_fn fn)\n {\n   return mathfn_built_in_1 (type, fn, /*implicit=*/ 1);\n }\n \n+/* Like mathfn_built_in_1, but take a built_in_function and\n+   always use the implicit array.  */\n+\n+tree\n+mathfn_built_in (tree type, enum built_in_function fn)\n+{\n+  return mathfn_built_in_1 (type, as_combined_fn (fn), /*implicit=*/ 1);\n+}\n+\n /* If BUILT_IN_NORMAL function FNDECL has an associated internal function,\n    return its code, otherwise return IFN_LAST.  Note that this function\n    only tests whether the function is defined in internals.def, not whether\n@@ -2919,8 +2930,8 @@ expand_builtin_int_roundingfn_2 (tree exp, rtx target)\n \t a call to lround in the hope that the target provides at least some\n \t C99 functions.  This should result in the best user experience for\n \t not full C99 targets.  */\n-      tree fallback_fndecl = mathfn_built_in_1 (TREE_TYPE (arg),\n-\t\t\t\t\t\tfallback_fn, 0);\n+      tree fallback_fndecl = mathfn_built_in_1\n+\t(TREE_TYPE (arg), as_combined_fn (fallback_fn), 0);\n \n       exp = build_call_nofold_loc (EXPR_LOCATION (exp),\n \t\t\t\t   fallback_fndecl, 1, arg);\n@@ -7340,7 +7351,7 @@ fold_builtin_sincos (location_t loc,\n   type = TREE_TYPE (arg0);\n \n   /* Calculate the result when the argument is a constant.  */\n-  built_in_function fn = mathfn_built_in_2 (type, BUILT_IN_CEXPI);\n+  built_in_function fn = mathfn_built_in_2 (type, CFN_BUILT_IN_CEXPI);\n   if (fn == END_BUILTINS)\n     return NULL_TREE;\n \n@@ -7931,7 +7942,8 @@ fold_builtin_classify (location_t loc, tree fndecl, tree arg, int builtin_index)\n \t/* In a boolean context, GCC will fold the inner COND_EXPR to\n \t   1.  So e.g. \"if (isinf_sign(x))\" would be folded to just\n \t   \"if (isinf(x) ? 1 : 0)\" which becomes \"if (isinf(x))\". */\n-\ttree signbit_fn = mathfn_built_in_1 (TREE_TYPE (arg), BUILT_IN_SIGNBIT, 0);\n+\ttree signbit_fn = mathfn_built_in_1\n+\t  (TREE_TYPE (arg), CFN_BUILT_IN_SIGNBIT, 0);\n \ttree isinf_fn = builtin_decl_explicit (BUILT_IN_ISINF);\n \ttree tmp = NULL_TREE;\n "}, {"sha": "917eb9085d6de2aa2516f44e9c399ed628b3781e", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b03ff92e67280a98ab1587e0460069eea0fd5a8b/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=b03ff92e67280a98ab1587e0460069eea0fd5a8b", "patch": "@@ -61,6 +61,7 @@ extern void expand_builtin_setjmp_setup (rtx, rtx);\n extern void expand_builtin_setjmp_receiver (rtx);\n extern void expand_builtin_update_setjmp_buf (rtx);\n extern tree mathfn_built_in (tree, enum built_in_function fn);\n+extern tree mathfn_built_in (tree, combined_fn);\n extern rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, machine_mode);\n extern rtx builtin_memset_read_str (void *, HOST_WIDE_INT, machine_mode);\n extern rtx expand_builtin_saveregs (void);"}]}