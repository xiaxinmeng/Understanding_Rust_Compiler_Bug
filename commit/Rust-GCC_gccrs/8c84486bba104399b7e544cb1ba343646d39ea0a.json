{"sha": "8c84486bba104399b7e544cb1ba343646d39ea0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM4NDQ4NmJiYTEwNDM5OWI3ZTU0NGNiMWJhMzQzNjQ2ZDM5ZWEwYQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T14:47:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-10-29T14:47:18Z"}, "message": "libstdc++: Improve tests for constexpr algorithms\n\nThese tests just return true without checking that the results of the\nalgorithms. Although it should be safe to assume that the algorithms\nbehave the same at compile-time as at run-time, we can use these tests\nto verify it.\n\nThis replaces each 'return true' statement with a condition that depends\non the basic functionality of the algorithm, such as returning an\niterator to the right position.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/25_algorithms/all_of/constexpr.cc: Check result of\n\tthe algorithm.\n\t* testsuite/25_algorithms/any_of/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/binary_search/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/copy_backward/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/count/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/equal/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/equal_range/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/fill/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/find_end/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/find_if/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/is_partitioned/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/is_permutation/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/is_sorted_until/constexpr.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/lexicographical_compare/constexpr.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/lower_bound/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/merge/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/mismatch/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/none_of/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/partition_copy/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/remove_copy/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/remove_copy_if/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/remove_if/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/replace_if/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/reverse/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/reverse_copy/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/rotate_copy/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/search/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/set_difference/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/set_intersection/constexpr.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/set_symmetric_difference/constexpr.cc:\n\tLikewise.\n\t* testsuite/25_algorithms/set_union/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/unique_copy/constexpr.cc: Likewise.\n\t* testsuite/25_algorithms/upper_bound/constexpr.cc: Likewise.", "tree": {"sha": "a5b7591746792a83e332fdd5f397e4692c7b8df1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5b7591746792a83e332fdd5f397e4692c7b8df1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c84486bba104399b7e544cb1ba343646d39ea0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c84486bba104399b7e544cb1ba343646d39ea0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c84486bba104399b7e544cb1ba343646d39ea0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c84486bba104399b7e544cb1ba343646d39ea0a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822c1d21a3c710831af65a6e3bc83f558fb39044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822c1d21a3c710831af65a6e3bc83f558fb39044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822c1d21a3c710831af65a6e3bc83f558fb39044"}], "stats": {"total": 137, "additions": 83, "deletions": 54}, "files": [{"sha": "757eebc89b6379d86e5b6ad2a7bfd1bfee8112ad", "filename": "libstdc++-v3/testsuite/25_algorithms/all_of/constexpr.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fall_of%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -23,13 +23,12 @@\n \n constexpr std::array<int, 6> cae{{0, 2, 4, 6, 8, 10}};\n \n-constexpr auto out2 = std::all_of(cae.begin(), cae.end(),\n+constexpr auto out1 = std::all_of(cae.begin(), cae.end(),\n \t\t\t          [](int i){ return i % 2 == 0; });\n \n-constexpr bool\n-test()\n-{\n-  return true;\n-}\n+static_assert(out1);\n+\n+constexpr auto out2 = std::all_of(cae.begin(), cae.end(),\n+\t\t\t          [](int i){ return i != 8; });\n \n-static_assert(test());\n+static_assert(!out2);"}, {"sha": "dadd45061791964ccb642b5e80f7a575b899a67e", "filename": "libstdc++-v3/testsuite/25_algorithms/any_of/constexpr.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fany_of%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,10 @@ test()\n   const auto out3 = std::any_of(ca0.begin(), ca0.end(),\n \t\t\t        [](int i){ return i % 2 == 0; });\n \n-  return true;\n+  const auto out4 = std::any_of(ca0.begin(), ca0.end(),\n+\t\t\t        [](int i){ return i == -1; });\n+\n+  return out3 && !out4;\n }\n \n static_assert(test());"}, {"sha": "f82a6893b48fb8895ff9e1379005ccbaef793cb2", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/constexpr.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -31,7 +31,10 @@ test()\n   const auto out5 = std::binary_search(ca0.begin(), ca0.end(), 5,\n \t\t\t\t       std::less<int>());\n \n-  return true;\n+  const auto out6 = std::binary_search(ca0.begin(), ca0.end(), 4.5,\n+\t\t\t\t       std::less<>());\n+\n+  return out4 && out5 && !out6;\n }\n \n static_assert(test());"}, {"sha": "e97e30e077711ea461e2913dd2dcf48906b8ecc8", "filename": "libstdc++-v3/testsuite/25_algorithms/copy_backward/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcopy_backward%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -30,7 +30,7 @@ test()\n   const auto out7 = std::copy_backward(ca0.begin(), ca0.begin() + 8,\n \t\t\t\t       ma0.begin() + 10);\n \n-  return true;\n+  return out7 == ma0.begin() + 2 && ma0[3] == 1;\n }\n \n static_assert(test());"}, {"sha": "3b900a9ca07c0ee8b3c583dab9b7df20f0358a47", "filename": "libstdc++-v3/testsuite/25_algorithms/count/constexpr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -28,7 +28,9 @@ test()\n \n   const auto out8 = std::count(ca0.begin(), ca0.end(), 6);\n \n-  return true;\n+  const auto out9 = std::count(ca0.begin(), ca0.end(), 16);\n+\n+  return out8 == 1 && out9 == 0;\n }\n \n static_assert(test());"}, {"sha": "ca1b7bc5bd96e8f12718aa4b2b84779ebca0245b", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/constexpr.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -33,7 +33,12 @@ test()\n   const auto outb = std::equal(ca0.begin(), ca0.end(), cas.begin(),\n \t\t\t       [](int i, int j){ return i + 3 == j; });\n \n-  return true;\n+  auto ca2 = ca0;\n+  ca2[5] = -1;\n+\n+  const auto outc = std::equal(ca0.begin(), ca0.end(), ca2.begin());\n+\n+  return outa && outb && !outc;\n }\n \n static_assert(test());"}, {"sha": "2b46f5f67595523767ba9e02601452f251461a5b", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -28,7 +28,8 @@ test()\n \n   const auto outc = std::equal_range(car.begin(), car.end(), 6);\n \n-  return true;\n+  return outc.first == (car.begin() + 6)\n+    && outc.second == (car.begin() + 8);\n }\n \n static_assert(test());"}, {"sha": "154e48b384910c1e0f71262924c9407ca52ceab2", "filename": "libstdc++-v3/testsuite/25_algorithms/fill/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffill%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -27,7 +27,7 @@ test()\n   std::array<int, 12> ma0{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};\n   std::fill(ma0.begin(), ma0.end(), 66);\n \n-  return true;\n+  return ma0[4] == 66 && ma0[7] == 66;\n }\n \n static_assert(test());"}, {"sha": "9339ab06ae6080a9ec7436db52d9c45a221ad800", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -24,7 +24,7 @@\n constexpr bool\n test()\n {\n-  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n   constexpr std::array<int, 3> cam{{4, 5, 6}};\n   constexpr std::array<int, 3> camm{{-4, -5, -6}};\n \n@@ -35,7 +35,7 @@ test()\n \t\t\t\t  camm.begin(), camm.end(),\n \t\t\t\t  [](int i, int j){ return i + 1 == -j; });\n \n-  return true;\n+  return outf == (ca0.begin() + 4) && outg == (ca0.begin() + 3);\n }\n \n static_assert(test());"}, {"sha": "6c88c49c75e48ed677dd3a15a6cf1ab659030d5a", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -24,12 +24,12 @@\n constexpr bool\n test()\n {\n-  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n \n   const auto outj = std::find_if(ca0.begin(), ca0.end(),\n \t\t\t\t [](int i){ return i == 6; });\n \n-  return true;\n+  return outj == (ca0.begin() + 6);\n }\n \n static_assert(test());"}, {"sha": "163f9bd2d1d99a9af58408c7db6dc63c3e2291f9", "filename": "libstdc++-v3/testsuite/25_algorithms/is_partitioned/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_partitioned%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,7 @@ test()\n   const auto outs = std::is_partitioned(caeo.begin(), caeo.end(),\n \t\t\t\t\t[](int i){ return i % 2 == 0; });\n \n-  return true;\n+  return outs;\n }\n \n static_assert(test());"}, {"sha": "1567c2658ff9172487b92b816ee40a12a8a9985f", "filename": "libstdc++-v3/testsuite/25_algorithms/is_permutation/constexpr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_permutation%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,9 @@ test()\n \n   const auto outt = std::is_permutation(ca0.begin(), ca0.end(), cap.begin());\n \n-  return true;\n+  const auto outf = std::is_permutation(ca0.begin() + 1, ca0.end(), cap.begin());\n+\n+  return outt && !outf;\n }\n \n static_assert(test());"}, {"sha": "3c540559c31ab3be6e74db2fda884e59f20388e0", "filename": "libstdc++-v3/testsuite/25_algorithms/is_sorted_until/constexpr.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fis_sorted_until%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -31,7 +31,10 @@ test()\n   const auto outy = std::is_sorted_until(aus.begin(), aus.end(),\n \t\t\t\t\t std::less<int>());\n \n-  return true;\n+  const auto outz = std::is_sorted_until(outx - 1, aus.end(),\n+\t\t\t\t\t std::greater<int>());\n+\n+  return outx == aus.begin() + 7 && outy == outx && outz == (outx + 1);\n }\n \n static_assert(test());"}, {"sha": "1d7502c27c6c7fb885593d0452c911a16f5c2700", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -34,7 +34,7 @@ test()\n \t\t\t\t\t\t   ca1.begin(), ca1.end(),\n \t\t\t\t\t\t   std::less<int>());\n \n-  return true;\n+  return outz && outaa;\n }\n \n static_assert(test());"}, {"sha": "ec5da9b32277d0225b1beaebf5a964b3b03bfcb4", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -31,7 +31,7 @@ test()\n   const auto outcc = std::lower_bound(ca0.begin(), ca0.end(), 6,\n \t\t\t\t      std::less<int>());\n \n-  return true;\n+  return outbb == (ca0.begin() + 6) && outcc == outbb;\n }\n \n static_assert(test());"}, {"sha": "02493581635f76bf96d2557235dd3654fdf617fe", "filename": "libstdc++-v3/testsuite/25_algorithms/merge/constexpr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -31,12 +31,14 @@ test()\n \n   const auto outdd = std::merge(ca0.begin(), ca0.end(),\n \t\t\t\tcas.begin(), cas.end(), out0.begin());\n+  if (outdd != out0.end())\n+    return false;\n \n   const auto outee = std::merge(ca0.begin(), ca0.end(),\n \t\t\t\tcamm.begin(), camm.end(), out0.begin(),\n \t\t\t\t[](int i, int j){ return i < j; });\n \n-  return true;\n+  return outee == (out0.begin() + ca0.size() + camm.size());\n }\n \n static_assert(test());"}, {"sha": "f2cc21d03d8dfa4860c5e2050b366e8b1da87d7b", "filename": "libstdc++-v3/testsuite/25_algorithms/mismatch/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -32,7 +32,8 @@ test()\n   const auto outgg = std::mismatch(ca0.begin(), ca0.end(), cax.begin(),\n \t\t\t\t   std::equal_to<int>());\n \n-  return true;\n+  return outff.first == (ca0.begin() + 6) && outff.second == (cax.begin() + 6)\n+    && outgg == outff;\n }\n \n static_assert(test());"}, {"sha": "245ebe47dcb3c4d49ae518484584dbcdbd5480be", "filename": "libstdc++-v3/testsuite/25_algorithms/none_of/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnone_of%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,7 @@ test()\n   const auto outhh = std::none_of(ca0.begin(), ca0.end(),\n \t\t\t\t  [](int i){ return i > 12; });\n \n-  return true;\n+  return outhh;\n }\n \n static_assert(test());"}, {"sha": "21685636ecddc6e4464c05c6ca1295dd3cc3cb3f", "filename": "libstdc++-v3/testsuite/25_algorithms/partition_copy/constexpr.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition_copy%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -32,7 +32,8 @@ test()\n \t\t\t\t\t out0.begin(), out1.begin(),\n \t\t\t\t\t [](int i){ return i % 2 == 0; });\n \n-  return true;\n+  return outii.first == (out0.begin() + 6) && out0[1] == 2\n+    && outii.second == (out1.begin() + 6) && out1[1] == 3;\n }\n \n static_assert(test());"}, {"sha": "e82a506abb0d56cef9d61a3fae37b0395f771e95", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -24,12 +24,12 @@\n constexpr bool\n test()\n {\n-  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n   std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n \n   const auto outmm = std::remove_copy(ca0.begin(), ca0.end(), out0.begin(), 6);\n \n-  return true;\n+  return outmm == out0.begin() + ca0.size() - 1;\n }\n \n static_assert(test());"}, {"sha": "f8133fc24f5bdbd8420e6391b0998b967f52f8fa", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_copy_if/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_copy_if%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -30,7 +30,7 @@ test()\n   const auto outnn = std::remove_copy_if(ca0.begin(), ca0.end(), out0.begin(),\n \t\t\t\t\t [](int i){ return i == 7; });\n \n-  return true;\n+  return outnn == out0.begin() + ca0.size() - 1;\n }\n \n static_assert(test());"}, {"sha": "d590d4d5ea15d31fb00d74e51c3b4f84c5f0b139", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,7 @@ test()\n   const auto outll = std::remove_if(ac2.begin(), ac2.end(),\n \t\t\t\t    [](int i){ return i == 7; });\n \n-  return true;\n+  return outll == (ac2.end() - 1) && ac2[7] == 8;\n }\n \n static_assert(test());"}, {"sha": "4b293f48aa93ec9efd79ff0e126c6d1f3b575ddb", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/constexpr.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -28,7 +28,9 @@ test()\n \n   std::replace_if(ar0.begin(), ar0.end(), [](int i){ return i % 2 == 1; }, 42);\n \n-  return true;\n+  std::array<int, 12> ar1{{0, 42, 2, 42, 4, 42, 6, 6, 8, 42, 42, 42}};\n+\n+  return ar0 == ar1;\n }\n \n static_assert(test());"}, {"sha": "15140014a093e5a8cf9c3ed2ae994f6c8a037fdb", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse/constexpr.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -23,8 +23,6 @@\n constexpr bool\n test()\n {\n-  auto ok = true;\n-\n   std::array<int, 12> ar0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n \n   std::reverse(ar0.begin() + 2, ar0.begin() + 9);"}, {"sha": "9a85e591edd8435cb41896fe17d9d286146d91f1", "filename": "libstdc++-v3/testsuite/25_algorithms/reverse_copy/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freverse_copy%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,7 +29,7 @@ test()\n \n   const auto outqq = std::reverse_copy(ca0.rbegin(), ca0.rend(), out0.begin());\n \n-  return true;\n+  return outqq == (out0.begin() + ca0.size()) && out0[3] == 3;\n }\n \n static_assert(test());"}, {"sha": "8d9d966ba0307b9271df5c2b393f1103e7373d42", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate_copy/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate_copy%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -30,7 +30,7 @@ test()\n   const auto outrr = std::rotate_copy(ca0.begin(), ca0.begin() + 6,\n \t\t\t\t      ca0.end(), out0.begin());\n \n-  return true;\n+  return outrr == (out0.begin() + ca0.size()) && out0[3] == 9 && out0[8] == 2;\n }\n \n static_assert(test());"}, {"sha": "557234ec81971a6666512b582a3322dbb182bb48", "filename": "libstdc++-v3/testsuite/25_algorithms/search/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -24,7 +24,7 @@\n constexpr bool\n test()\n {\n-  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5,  6, 7, 8,  9, 10, 11}};\n+  constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n   constexpr std::array<int, 3> cam{{4, 5, 6}};\n \n   const auto outtt = std::search(ca0.begin(), ca0.end(),\n@@ -35,7 +35,7 @@ test()\n     = std::search(ca0.begin(), ca0.end(),\n \t\t  std::default_searcher(cam.begin(), cam.end()));\n \n-  return true;\n+  return outtt == (ca0.begin() + 4) && outtt2 == outtt;\n }\n \n static_assert(test());"}, {"sha": "f66c957df80be9d41890c5833369db63800d9fa3", "filename": "libstdc++-v3/testsuite/25_algorithms/set_difference/constexpr.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,13 +29,16 @@ test()\n   std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n \n   const auto outvv = std::set_difference(ca0.begin(), ca0.end(),\n-\t\t\t\t\t cas.begin(), cas.end(), out0.begin());\n+\t\t\t\t\t cas.begin(), cas.end(),\n+\t\t\t\t\t out0.begin());\n \n   const auto outww = std::set_difference(ca0.begin(), ca0.end(),\n \t\t\t\t         cas.begin(), cas.end(),\n-\t\t\t\t         out0.begin(), std::less<int>());\n+\t\t\t\t         outvv,\n+\t\t\t\t\t std::less<int>());\n \n-  return true;\n+\n+  return outvv == (out0.begin() + 3) && outww == (outvv + 3);\n }\n \n static_assert(test());"}, {"sha": "720e8a5a6c06dae23cbf99309fca680b463027fd", "filename": "libstdc++-v3/testsuite/25_algorithms/set_intersection/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -36,7 +36,7 @@ test()\n \t\t\t\t\t   cas.begin(), cas.end(),\n \t\t\t\t\t   out0.begin(), std::less<int>());\n \n-  return true;\n+  return outxx == (out0.begin() + 9) && outyy == outxx;\n }\n \n static_assert(test());"}, {"sha": "0505aaf2519858dfd1da6db6379013c6fe0c937a", "filename": "libstdc++-v3/testsuite/25_algorithms/set_symmetric_difference/constexpr.cc", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -25,17 +25,19 @@ constexpr bool\n test()\n {\n   constexpr std::array<int, 12> ca0{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}};\n-  constexpr std::array<int, 12> cas{{3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}};\n+  constexpr std::array<int, 12> cas{{4, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13}};\n   std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n \n-  const auto outvv = std::set_difference(ca0.begin(), ca0.end(),\n-\t\t\t\t\t cas.begin(), cas.end(), out0.begin());\n+  const auto outvv = std::set_symmetric_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t\t\t   cas.begin(), cas.end(),\n+\t\t\t\t\t\t   out0.begin());\n \n-  const auto outww = std::set_difference(ca0.begin(), ca0.end(),\n-\t\t\t\t         cas.begin(), cas.end(),\n-\t\t\t\t         out0.begin(), std::less<int>());\n+  const auto outww = std::set_symmetric_difference(ca0.begin(), ca0.end(),\n+\t\t\t\t\t\t   cas.begin(), cas.end(),\n+\t\t\t\t\t\t   out0.begin(),\n+\t\t\t\t\t\t   std::less<int>());\n \n-  return true;\n+  return outvv == (out0.begin() + 8) && outww == outvv;\n }\n \n static_assert(test());"}, {"sha": "87f3f27f9e1093c06e62c369111338593ae4622c", "filename": "libstdc++-v3/testsuite/25_algorithms/set_union/constexpr.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,13 +29,14 @@ test()\n   std::array<int, 24> out0{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};\n \n   const auto out11 = std::set_union(ca0.begin(), ca0.end(),\n-\t\t\t\t    cas.begin(), cas.end(), out0.begin());\n+\t\t\t\t    cas.begin(), cas.end(),\n+\t\t\t\t    out0.begin());\n \n   const auto out22 = std::set_union(ca0.begin(), ca0.end(),\n \t\t\t\t    cas.begin(), cas.end(),\n \t\t\t\t    out0.begin(), std::less<int>());\n \n-  return true;\n+  return out11 == (out0.begin() + 15) && out22 == out11;\n }\n \n static_assert(test());"}, {"sha": "ee372b8488d08752bf825ed1fafbb95069a2c6af", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/constexpr.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -29,10 +29,11 @@ test()\n \n   const auto out55 = std::unique_copy(ar3.begin(), ar3.end(), out0.begin());\n \n-  const auto out66 = std::unique_copy(ar3.begin(), ar3.end(), out0.begin(),\n+  const auto out66 = std::unique_copy(ar3.begin(), ar3.end(), out55,\n \t\t\t\t      std::equal_to<int>());\n \n-  return true;\n+  return out55 == (out0.begin() + 10) && out0[7] == 8\n+    && out66 == (out55 + 10) ; // && out0[19] == 11;\n }\n \n static_assert(test());"}, {"sha": "3479116c210d43899e7c5012bb8427e14ef05f3a", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/constexpr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c84486bba104399b7e544cb1ba343646d39ea0a/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fconstexpr.cc?ref=8c84486bba104399b7e544cb1ba343646d39ea0a", "patch": "@@ -31,7 +31,7 @@ test()\n   const auto out88 = std::upper_bound(ca0.begin(), ca0.end(), 6,\n \t\t\t\t      std::less<int>());\n \n-  return true;\n+  return out77 == (ca0.begin() + 7) && out88 == out77;\n }\n \n static_assert(test());"}]}