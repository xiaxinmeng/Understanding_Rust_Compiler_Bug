{"sha": "67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdlNDY5ZDcxYTJlMzM3NmUwZDk4ZTZjNmY4ZWQwNGI4M2U4YmE5Yw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-03-25T23:03:13Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-03-25T23:03:13Z"}, "message": "combine.c (simplify_comparison <ASHIFTRT, LSHIFTRT>): Correct test for overflow of constant.\n\n\t* combine.c (simplify_comparison <ASHIFTRT, LSHIFTRT>): Correct\n\ttest for overflow of constant.\n\nFrom-SVN: r51349", "tree": {"sha": "8fb0fe8238fd64e76c0397e1c05b6a62a5877d43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fb0fe8238fd64e76c0397e1c05b6a62a5877d43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c/comments", "author": null, "committer": null, "parents": [{"sha": "bbffa101d17ba138b52ec3b9fc6c2a3db4ca9659", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbffa101d17ba138b52ec3b9fc6c2a3db4ca9659", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbffa101d17ba138b52ec3b9fc6c2a3db4ca9659"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "bab7fdddbb8544dd528ecf2372603b2d78b9133a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "patch": "@@ -1,3 +1,8 @@\n+2002-03-26  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* combine.c (simplify_comparison <ASHIFTRT, LSHIFTRT>): Correct\n+\ttest for overflow of constant.\n+\n 2002-03-25  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/2623"}, {"sha": "0a61187071e49367a950b53378f2c061652549a0", "filename": "gcc/combine.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=67e469d71a2e3376e0d98e6c6f8ed04b83e8ba9c", "patch": "@@ -10843,9 +10843,9 @@ simplify_comparison (code, pop0, pop1)\n \t      && XEXP (op0, 1) == XEXP (XEXP (op0, 0), 1)\n \t      && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),\n \t\t\t\t\t MODE_INT, 1)) != BLKmode\n-\t      && ((unsigned HOST_WIDE_INT) const_op <= GET_MODE_MASK (tmode)\n-\t\t  || ((unsigned HOST_WIDE_INT) -const_op\n-\t\t      <= GET_MODE_MASK (tmode))))\n+\t      && (((unsigned HOST_WIDE_INT) const_op\n+\t\t   + (GET_MODE_MASK (tmode) >> 1) + 1)\n+\t\t  <= GET_MODE_MASK (tmode)))\n \t    {\n \t      op0 = gen_lowpart_for_combine (tmode, XEXP (XEXP (op0, 0), 0));\n \t      continue;\n@@ -10862,9 +10862,9 @@ simplify_comparison (code, pop0, pop1)\n \t      && XEXP (op0, 1) == XEXP (XEXP (XEXP (op0, 0), 0), 1)\n \t      && (tmode = mode_for_size (mode_width - INTVAL (XEXP (op0, 1)),\n \t\t\t\t\t MODE_INT, 1)) != BLKmode\n-\t      && ((unsigned HOST_WIDE_INT) const_op <= GET_MODE_MASK (tmode)\n-\t\t  || ((unsigned HOST_WIDE_INT) -const_op\n-\t\t      <= GET_MODE_MASK (tmode))))\n+\t      && (((unsigned HOST_WIDE_INT) const_op\n+\t\t   + (GET_MODE_MASK (tmode) >> 1) + 1)\n+\t\t  <= GET_MODE_MASK (tmode)))\n \t    {\n \t      rtx inner = XEXP (XEXP (XEXP (op0, 0), 0), 0);\n \t      rtx add_const = XEXP (XEXP (op0, 0), 1);\n@@ -10889,9 +10889,12 @@ simplify_comparison (code, pop0, pop1)\n \t      && mode_width <= HOST_BITS_PER_WIDE_INT\n \t      && (nonzero_bits (XEXP (op0, 0), mode)\n \t\t  & (((HOST_WIDE_INT) 1 << INTVAL (XEXP (op0, 1))) - 1)) == 0\n-\t      && (const_op == 0\n-\t\t  || (floor_log2 (const_op) + INTVAL (XEXP (op0, 1))\n-\t\t      < mode_width)))\n+\t      && (((unsigned HOST_WIDE_INT) const_op\n+\t\t   + (GET_CODE (op0) != LSHIFTRT\n+\t\t      ? ((GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1)) >> 1)\n+\t\t\t + 1)\n+\t\t      : 0))\n+\t\t  <= GET_MODE_MASK (mode) >> INTVAL (XEXP (op0, 1))))\n \t    {\n \t      /* If the shift was logical, then we must make the condition\n \t\t unsigned.  */"}]}