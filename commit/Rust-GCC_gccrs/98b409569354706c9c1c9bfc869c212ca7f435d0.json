{"sha": "98b409569354706c9c1c9bfc869c212ca7f435d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThiNDA5NTY5MzU0NzA2YzljMWM5YmZjODY5YzIxMmNhN2Y0MzVkMA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T08:57:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-09-05T08:57:18Z"}, "message": "Resync.\n\nFrom-SVN: r103899", "tree": {"sha": "8575dc3ceda6dfc517fd452b7178cd06f29a1334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8575dc3ceda6dfc517fd452b7178cd06f29a1334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98b409569354706c9c1c9bfc869c212ca7f435d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b409569354706c9c1c9bfc869c212ca7f435d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98b409569354706c9c1c9bfc869c212ca7f435d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98b409569354706c9c1c9bfc869c212ca7f435d0/comments", "author": null, "committer": null, "parents": [{"sha": "ac8d552768fee1afee7a7a325980ead8160705d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8d552768fee1afee7a7a325980ead8160705d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8d552768fee1afee7a7a325980ead8160705d9"}], "stats": {"total": 1131, "additions": 1131, "deletions": 0}, "files": [{"sha": "df530cfed9dba44bc8db1576f4880c7e77433968", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 1131, "deletions": 0, "changes": 1131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98b409569354706c9c1c9bfc869c212ca7f435d0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98b409569354706c9c1c9bfc869c212ca7f435d0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=98b409569354706c9c1c9bfc869c212ca7f435d0", "patch": "@@ -1,3 +1,1134 @@\n+2005-09-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* dec-io.ads, dec-io.adb: Removed, no longer used.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-calend-mingw.adb: Add call to OS_Primitives.Initialize;\n+\n+\t* s-taprop-mingw.adb, s-taprop-vms.adb, s-taprop-solaris.adb,\n+\ts-taprop-os2.adb, s-taprop-irix-athread.adb, s-taprop-linux.adb,\n+\ts-taprop-hpux-dce.adb, s-taprop-irix.adb, s-taprop-tru64.adb,\n+\ts-taprop-lynxos.adb: Move with clauses outside Warnings Off now that\n+\tdependent units are Preelaborate.\n+\t(Initialize): Call Interrupt_Managemeent.Initialize and\n+\tOS_Primitives.Initialize to ensure proper initialization of this unit.\n+\tRemove use of System.Soft_Links\n+\tMake this unit Preelaborate.\n+\n+\t* s-stache.ads, s-taspri-vxworks.ads, s-taspri-mingw.ads,\n+\ts-taspri-vms.ads, s-tasinf-solaris.ads, s-taspri-os2.ads,\n+\ts-taspri-lynxos.ads, s-taspri-hpux-dce.ads, s-taspri-tru64.ads,\n+\ts-tasinf-tru64.ads, s-tasinf-irix.ads, s-tasinf-irix-athread.ads,\n+\ts-proinf-irix-athread.adb, s-proinf-irix-athread.ads,\n+\ts-tratas.ads, s-tasinf.ads: Minor reformatting.\n+\tAdd pragma Preelaborate, since these packages are suitable for this\n+\tcategorization.\n+\tUpdate comments.\n+\n+\t* s-traent-vms.ads, s-intman-dummy.adb,\n+\ts-taprop-dummy.adb: Make this unit Preelaborate.\n+\n+\t* s-osprim-vxworks.adb, s-osprim-vms.adb, s-osprim-vms.ads,\n+\ts-osprim-mingw.adb, s-intman-vxworks.ads, s-intman-vxworks.adb, \n+\ts-intman-vms.adb, s-intman-mingw.adb, s-intman-vms.ads,\n+\ts-osprim-unix.adb, s-osprim-os2.adb, s-osprim-solaris.adb,\n+\ts-intman-solaris.adb, s-intman-irix-athread.adb,\n+\ts-intman-irix.adb: Mark this unit Preelaborate.\n+\t(Initialize): New procedure.\n+\tUpdate comments.\n+\n+\t* s-taspri-linux.ads: Removed.\n+\n+\t* s-tpopsp-solaris.adb (Initialize): Create the key in this procedure,\n+\tas done by other implementations (e.g. posix).\n+\n+\t* s-taprop.ads (Timed_Delay): Update spec since the caller now is\n+\tresponsible for deferring abort.\n+\tMark this unit Preelaborate.\n+\n+\t* s-taprob.adb, s-tarest.adb: Call System.Tasking.Initialize to ensure\n+\tproper initialization of the tasking run-time.\n+\n+\t* s-tasdeb.ads: Mark this unit Preelaborate.\n+\t(Known_Tasks): Add explicit default value to avoid elaboration code.\n+\n+\t* s-inmaop-vms.adb (Elaboration code): Add call to\n+\tInterrupt_Management.Initialize since the elaboration code depends on\n+\tproper initialization of this package.\n+\n+\t* s-intman.ads, s-inmaop-posix.adb, s-intman-posix.adb,\n+\ts-osprim.ads, s-taprop-posix.adb, s-taspri-posix.ads,\n+\ts-osprim-posix.adb: Make this unit Preelaborate.\n+\n+\t* a-calend.adb: Add call to OS_Primitives.Initialize\n+\n+\t* a-elchha.adb: Update use of Except.Id.Full_Name.\n+\tMinor reformatting.\n+\tRemove use of Ada.Exceptions.Traceback when possible, cleaner.\n+\n+\t* a-dynpri.adb, a-sytaco.adb, a-sytaco.ads:\n+\tMove with clauses outside Warnings Off now that dependent units are\n+\tPreelaborate.\n+\tUse raise xxx with \"...\"; Ada 2005 form.\n+\n+\t* a-taside.ads, a-taside.adb: \n+\tRemove some dependencies, to make it easier to make this unit truly\n+\tPreelaborate.\n+\tRewrite some code to be conformant with Preelaborate rules.\n+\n+\t* g-os_lib.adb: Remove non-preelaborate code so that this unit can be\n+\tmarked Preelaborate in the future.\n+\n+\t* s-proinf.ads, g-string.ads, s-auxdec.ads, s-auxdec-vms_64.ads: Make\n+\tthese units Preelaborate.\n+\n+\t* s-exctab.adb: Update use of Except.Id.Full_Name.\n+\n+\t* s-soflin.ads, s-soflin.adb: Mark this unit Preelaborate_05.\n+\t(Set_Exc_Stack_Addr_Soft, Get_Exc_Stack_Addr_NT, Set_Exc_Stack_Addr_NT,\n+\tSet_Exc_Stack_Addr): Removed, no longer used.\n+\tRemove reference to *Machine_State_Addr*, no longer needed.\n+\n+\t* s-stalib.ads: Mark this unit as Preelaborate[_05].\n+\t(Exception_Data): Full_Name is now a System.Address so that this unit\n+\tcan be made Preelaborate.\n+\tClean up/simplify code thanks to Full_Name being a System.Address.\n+\tRemove obsolete pragma Suppress (All_Checks), no longer needed.\n+\n+\t* s-taskin.ads, s-taskin.adb: \n+\tMove with clauses outside Warnings Off now that dependent units are\n+\tPreelaborate.\n+\tMake this unit Preelaborate.\n+\t(Initialize): New proceduure, replace elaboration code and makes the\n+\tset up of the tasking run-time cleaner.\n+\t(Detect_Blocking): Now a function instead of a deferred boolean, to\n+\tobey Preelaborate rules.\n+\n+\t* s-tassta.adb (Finalize_Global_Tasks): Remove Get/Set_Exc_Stack_Addr\n+\tsoft links, no longer used.\n+\n+\t* s-traces.ads, s-traent.ads: Add pragma Preelaborate, since these\n+\tpackages are suitable for this categorization.\n+\n+\t* s-solita.adb: Replace use of Ada.Exception by raise xxx with \"...\"\n+\tsince we compile run-time sources in Ada 2005 mode.\n+\t(Timed_Delay_T): Call Abort_Defer/Undefer around Timed_Delay, to\n+\tavoid having s-taprop*.adb depend on s-soflin and to avoid code\n+\tduplication.\n+\tRemove reference to *Machine_State_Addr*, no longer needed.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-mastop-tru64.adb, s-mastop-irix.adb, s-mastop-vms.adb\n+\t(Enter_Handler, Set_Signal_Machine_State): Removed, no longer used.\n+\tRemove reference to System.Exceptions.\n+\n+\t* s-mastop-x86.adb: Removed, no longer used.\n+\n+\t* s-traceb-mastop.adb: Adjust calls to Pop_Frame.\n+\n+\t* a-excach.adb: Minor reformatting.\n+\n+\t* a-except.ads, a-except.adb: Remove global Warnings (Off) pragma, and\n+\tinstead fix new warnings that were hidden by this change.\n+\t(AAA, ZZZ): Removed, replaced by...\n+\t(Code_Address_For_AAA, Code_Address_For_ZZZ): ... these functions, who\n+\tare used instead of constants, to help make Ada.Exception truly\n+\tpreelaborate.\n+\t(Rcheck_*, Raise_Constraint_Error, Raise_Program_Error,\n+\tRaise_Storage_Error): File is now a System.Address, to simplify code.\n+\t(Elab code): Removed, no longer used.\n+\t(Null_Occurrence): Remove Warnings Off and make this construct\n+\tpreelaborate.\n+\tRemove code related to front-end zero cost exception handling, since\n+\tit is no longer used.\n+\tRemove -gnatL/-gnatZ switches.\n+\n+\t* a-exexda.adb (Append_Info_Exception_Name, Set_Exception_C_Msg):\n+\tUpdate use of Except.Msg.\n+\n+\t* gnat1drv.adb, inline.adb, bindgen.adb, debug.adb, exp_ch11.ads,\n+\tfreeze.adb, frontend.adb, lib.adb, exp_ch11.adb: Remove code related\n+\tto front-end zero cost exception handling, since it is no longer used.\n+\tRemove -gnatL/-gnatZ switches.\n+\n+\t* lib-writ.ads: Minor reformatting\n+\tRemove doc of UX\n+\n+\t* Makefile.rtl: Remove references to s-except*, s-mastop-x86*\n+\n+\t* Make-lang.in: Remove references to s-except.ads\n+\n+\t* s-except.ads: Removed, no longer used.\n+\n+\t* s-mastop.ads, s-mastop.adb: \n+\t(Enter_Handler, Set_Signal_Machine_State): Removed, no longer used.\n+\tRemove reference to System.Exceptions.\n+\n+\t* raise.h, usage.adb, targparm.adb, targparm.ads, switch-m.adb,\n+\tswitch-b.adb: Remove code related to front-end zero cost exception\n+\thandling, since it is no longer used.\n+\tRemove -gnatL/-gnatZ switches.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_In): Replace test of expression in its own\n+\ttype by valid test and generate warning.\n+\t(Tagged_Membership): Generate call to the run-time\n+\tsubprogram IW_Membership in case of \"Iface_CW_Typ in Typ'Class\"\n+\tChange formal name Subtype_Mark to Result_Definition in several calls to\n+\tMake_Function_Specification.\n+\t(Expand_Allocator_Expression): Add tests for suppression of the AI-344\n+\tcheck for proper accessibility of the operand of a class-wide allocator.\n+\tThe check can be left out if checks are suppressed or if the expression\n+\thas a specific tagged type whose level is known to be safe.\n+\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Simplify the code that\n+\tgenerates the run-time check associated with null-excluding entities.\n+\t(Expand_N_Return_Statement): Add tests to determine if the accessibility\n+\tcheck on the level of the return expression of a class-wide function\n+\tcan be elided. The check usually isn't needed if the expression has a\n+\tspecific type (unless it's a conversion or a formal parameter). Also\n+\tadd a test for whether accessibility checks are suppressed. Augment\n+\tthe comments to describe the conditions for performing the check.\n+\n+2005-09-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* a-tags.adb (IW_Membership): Give support to\n+\t\"Iface_CW_Typ in T'Class\". For this purpose the functionality of this\n+\tsubprogram has been extended to look for the tag in the ancestors tag\n+\ttable.\n+\tUpdate the structure of the GNAT Dispatch Table to reflect the\n+\tadditional two tables used in dispatching selects.\n+\tIntroduce appropriate array types and record components in\n+\tType_Specific_Data to reflect the two tables.\n+\t(Get_Entry_Index, Set_Entry_Index): Retrieve and set the entry index in\n+\tthe TSD of a tag, indexed by position.\n+\t(Get_Prim_Op_Kind, Set_Prim_Op_Kind): Retrieve and set the primitive\n+\toperation kind in the TSD of a tag, indexed by position.\n+\n+\t* a-tags.ads: Introduce an enumeration type to capture different\n+\tprimitive operation kinds. Define a constant reflecting the number of\n+\tpredefined primitive operations.\n+\t(Get_Entry_Index, Set_Entry_Index): Set and retrieve the entry index\n+\tof an entry wrapper.\n+\t(Get_Prim_Op_Kind, Set_Prim_Op_Kind): Set and retrieve the kind of\n+\tcallable entity of a primitive operation.\n+\n+\t* exp_ch3.adb (Freeze_Record_Type): Generate the declarations of the\n+\tprimitive operations used in dispatching selects for limited\n+\tinterfaces, limited tagged, task and protected types what implement a\n+\tlimited interface.\n+\t(Freeze_Type): Generate the bodies of the primitive operations used in\n+\tdispatching selects for limited tagged, task and protected types that\n+\timplement a limited interface. Generate statements to populate the two\n+\tauxiliary tables used for dispatching in select statements.\n+\t(Freeze_Record_Type): Add call to initialize the dispatch table entries\n+\tassociated with predefined interface primitive operations.\n+\t(Build_Dcheck_Function): Change Set_Subtype_Mark to\n+\tSet_Result_Definition.\n+\t(Build_Variant_Record_Equality): Change Subtype_Mark to\n+\tResult_Definition.\n+\t(Freeze_Enumeration_Type): Change Subtype_Mark to Result_Definition.\n+\t(Predef_Spec_Or_Body): Change Subtype_Mark to Result_Definition.\n+\t(Build_Assignment): Simplify the code that adds the run-time-check.\n+\t(Expand_N_Object_Declaration): Code cleanup.\n+\n+\t* exp_ch7.adb (Make_Clean): Select the appropriate type for locking\n+\tentries when there is a protected type that implements a limited\n+\tinterface.\n+\n+\t* exp_ch9.adb: Add package Select_Expansion_Utilities that contains\n+\tcommon routines used in expansion of dispatching selects.\n+\t(Add_Private_Declarations): Select the appropriate protection type when\n+\tthere is a protected type that implements a limited interface.\n+\t(Build_Parameter_Block): Generate a wrapped parameter block.\n+\t(Build_Protected_Subprogram_Body): Select the appropriate type for\n+\tlocking entries when there is a protected type that implements a\n+\tlimited interface.\n+\t(Build_Wrapper_Spec): Set the flag and wrapped entity for procedures\n+\tclassified as entry wrappers.\n+\t(Expand_N_Asynchronous_Select): Add support for expansion of dispatching\n+\tasynchronous selects.\n+\t(Expand_N_Conditional_Entry_Call): Add support for expansion of\n+\tdispatching conditional selects.\n+\t(Expand_N_Protected_Type_Declaration): Select the appropriate type for\n+\tprotection when there is a protected type that implements limited\n+\tinterfaces.\n+\t(Expand_N_Timed_Entry_Call): Add support for expansion of dispatching\n+\ttimed selects.\n+\t(Extract_Dispatching_Call): Extract the entity of the name of a\n+\tdispatching call, the object parameter, actual parameters and\n+\tcorresponding formals.\n+\t(Make_Initialize_Protection): Correct logic of protection initialization\n+\twhen there is a protected type that implements a limited interface.\n+\t(Parameter_Block_Pack): Populate a wrapped parameter block with the\n+\tvalues of actual parameters.\n+\t(Parameter_Block_Unpack): Retrieve the values from a wrapped parameter\n+\tblock and assign them to the original actual parameters.\n+\n+\t* exp_ch9.ads (Subprogram_Protection_Mode): New type.\n+\t(Build_Protected_Sub_Specification): Change the type and name of the\n+\tlast formal to account for the increased variety of protection modes.\n+\n+\t* einfo.ads, einfo.adb (Was_Hidden): New attribute. Present in all\n+\tentities. Used to save the value of the Is_Hidden attribute when the\n+\tlimited-view is installed.\n+\t(Is_Primitive_Wrapper, Set_Is_Primitive_Wrapper): Retrieve and change\n+\tthe attribute of procedures classified as entry wrappers.\n+\t(Wrapped_Entity, Set_Wrapped_Entity): Retrieve and change the wrapped\n+\tentity of a primitive wrapper.\n+\t(Write_Entity_Flags): Output the name and value of the\n+\tIs_Primitive_Wrapper attribute.\n+\t(Write_Field27_Name): Output the name and entity of the field Wrapped_\n+\tEntity.\n+\t(Underlying_Type): If we have an incomplete entity that comes from\n+\tthe limited view then we return the Underlying_Type of its non-limited\n+\tview if it is already available.\n+\t(Abstract_Interface_Alias): Flag applies to all subrogram kinds,\n+\tincluding operators.\n+\t(Write_Field26_Name): Add entry for Overridden_Operation\n+\t(Overridden_Operation): New attribute of functions and procedures.\n+\n+\t* exp_disp.ads, exp_disp.adb (Default_Prim_Op_Position): Return a\n+\tpredefined position in the dispatch table for the primitive operations\n+\tused in dispatching selects.\n+\t(Init_Predefined_Interface_Primitives): Remove the hardcoded number of\n+\tpredefined primitive operations and replace it with\n+\tDefault_Prim_Op_Count.\n+\t(Make_Disp_Asynchronous_Select_Spec, Make_Disp_Conditional_Select_Spec,\n+\tMake_Disp_Get_Prim_Op_Kind_Spec, Make_Disp_Timed_Select_Spec): Update\n+\tthe names of the generated primitive operations used in dispatching\n+\tselects.\n+\t(Init_Predefined_Interface_Primitives): No need to inherit primitives in\n+\tcase of abstract interface types. They will be inherit by the objects\n+\timplementing the interface.\n+\t(Make_DT): There is no need to inherit the dispatch table of the\n+\tancestor interface for the elaboration of abstract interface types.\n+\tThe dispatch table will be inherited by the object implementing the\n+\tinterface.\n+\t(Copy_Secondary_DTs): Add documentation.\n+\t(Validate_Position): Improve this static check in case of\n+\taliased subprograms because aliased subprograms must have\n+\tthe same position.\n+\t(Init_Predefined_Interface_Primitives): New subprogram that initializes\n+\tthe entries associated with predefined primitives of all the secondary\n+\tdispatch tables.\n+\t(Build_Anonymous_Access_Type): Removed.\n+\t(Expand_Interface_Actuals): With the previous cleanup there is no need\n+\tto build an anonymous access type. This allows further cleanup in the\n+\tcode generated by the expander.\n+\t(Expand_Interface_Conversion): If the actual is an access type then\n+\tbuild an internal function to handle the displacement. If the actual\n+\tis null this function returns null because no displacement is\n+\trequired; otherwise performs a type conversion that will be\n+\texpanded in the code that returns the value of the displaced actual.\n+\t(Expand_Interface_Actuals): Avoid the generation of unnecessary type\n+\tconversions that have no effect in the generated code because no\n+\tdisplacement is required. Code cleanup; use local variables to\n+\tavoid repeated calls to the subprogram directly_designated_type().\n+\n+\t* exp_util.ads, exp_util.adb (Is_Predefined_Dispatching_Operation):\n+\tClassify the primitive operations used in dispatching selects as\n+\tpredefined.\n+\t(Implements_Limited_Interface): Determine whether some type either\n+\tdirectly implements a limited interface or extends a type that\n+\timplements a limited interface.\n+\t(Build_Task_Image_Function): Change Subtype_Mark to Result_Definition.\n+\t(Expand_Subtype_From_Expr): Do not build actual subtype if the\n+\texpression is limited.\n+\t(Find_Interface_Tag): Add code to handle class-wide types and\n+\tentities from the limited-view.\n+\n+\t* rtsfind.ads: Add entries in RE_Id and RE_Unit_Table for\n+\tGet_Entry_Index, Get_Prim_Op_Kind, POK_Function, POK_Procedure,\n+\tPOK_Protected_Entry, POK_Protected_Function, POK_Protected_Procedure,\n+\tPOK_Task_Entry, POK_Task_Procedure, Prim_Op_Kind, Set_Entry_Index,\n+\tSet_Prim_Op_Kind.\n+\n+\t* sem_ch9.adb (Analyze_Triggering_Alternative): Check for legal type\n+\tof procedure name or prefix that appears as a trigger in a triggering\n+\talternative.\n+\n+\t* uintp.ads: Introduce constants Uint_11 and Uint_13.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-tataat.adb, a-tasatt.adb:\n+\tReplace calls to Defer/Undefer_Abortion by Defer/Undefer_Abort.\n+\n+\t* s-tasini.ads, s-tasini.adb (Defer_Abortion, Undefer_Abortion): Moved\n+\tthese procedures to body, and renamed Abort_Defer, Abort_Undefer.\n+\t(Get_Exc_Stack_Addr, Set_Exc_Stack_Addr): Removed, no\n+\tlonger used.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\t    Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* s-taprop-vxworks.adb: \n+\tMove with clauses outside Warnings Off now that dependent units are\n+\tPreelaborate.\n+\t(Initialize): Call Interrupt_Managemeent.Initialize to ensure proper\n+\tinitialization of this unit.\n+\t(Specific): Add new procedures Initialize and Delete so that this\n+\tpackage can be used for VxWorks 5.x and 6.x\n+\t(ATCB_Key, ATCB_Key_Address): Moved to Specific package body to hide\n+\tdifferences between VxWorks 5.x and 6.x\n+\tMinor reformatting.\n+\t(Timed_Delay): Remove calls to Defer/Undefer_Abort, now performed by\n+\tcaller.\n+\tUse only Preelaborate-compatible constructs.\n+\n+\t* s-tpopsp-vxworks.adb (ATBC_Key, ATCB_Key_Addr): Moved from\n+\tPrimitives.Operations.\n+\t(Delete, Initialize): New procedures.\n+\n+\t* s-osinte-vxworks.adb: Body used to handle differences between\n+\tVxWorks 5.x and 6.x\n+\t(kill, Set_Time_Slice, VX_FP_TASK): New functions.\n+\n+\t* s-osinte-vxworks.ads: Minor reformatting.\n+\tAdd VxWworks 6.x specific functions (only called from VxWorks 6 files).\n+\t(VX_FP_TASK): Now a function, to handle differences between VxWorks 5\n+\tand 6.\n+\t(Set_Time_Slice): New function, replacing kerneltimeSlice to share code\n+\tbetween Vxworks 5 and 6.\n+\t(taskLock, taskUnlock): Removeed, no longer used.\n+\n+\t* adaint.c: The wait.h header is not located in the sys directory on\n+\tVxWorks when using RTPs.\n+\t(__gnat_set_env_value): Use setenv instead of putenv on VxWorks when\n+\tusing RTPs.\n+\t(__gnat_dup): dup is available on Vxworks when using RTPs.\n+\t(__gnat_dup2): dup2 is available on Vxworks when using RTPs.\n+\n+\t* cal.c: Use the header time.h for Vxworks 6.0 when using RTPs.\n+\n+\t* expect.c: The wait.h header is not located in the sys directory on\n+\tVxWorks when using RTPs.\n+\n+2005-09-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* g-soccon-vms.adb: Renamed to g-soccon-vms.ads\n+\n+\t* g-soccon-vms.ads: Renamed from g-soccon-vms.adb\n+\n+\t* g-soccon.ads, g-soccon-tru64.ads, g-soccon-aix.ads,\n+\tg-soccon-darwin.ads, g-soccon-irix.ads, g-soccon-hpux.ads,\n+\tg-soccon-solaris.ads, g-soccon-mingw.ads, g-soccon-vxworks.ads,\n+\tg-soccon-freebsd.ads: Add new constants:\n+\t IP_MULTICAST_IF\n+\t SO_RCVTIMEO/SO_SNDTIMEO\n+\t IOV_MAX\n+\n+\t* gen-soccon.c: \n+\tMove all target-specific file inclusions and macro definitions to\n+\tgsocket.h, in order to ensure that any C code in socket.c will see a\n+\tset of constants that is consistent with the contents of g-soccon.ads.\n+\n+\t* gsocket.h: Code imported from gen-soccon.c:\n+\tMove all target-specific file inclusions and macro definitions to\n+\tgsocket.h, in order to ensure that any C code in socket.c will see a set\n+\tof constants that is consistent with the contents of g-soccon.ads.\n+\tThis change also makes gen-soccon self-contained (removing dependencies\n+\tupon GCC internal headers).\n+\n+\t* g-socket.adb (Send_Vector): Make calls to Writev at most IOV_MAX\n+\tiovecs at a time.\n+\t(To_Inet_Addr): Now a procedure instead of a function, more efficient.\n+\n+\t* socket.c: Minor reformatting.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Thomas Quinot  <quinot@adacore.com>\n+\n+\t* fname-sf.adb, mlib-tgt.ads,\n+\tback_end.adb, casing.adb, g-debpoo.adb, g-excact.adb, g-spipat.adb,\n+\tg-spipat.ads, g-thread.adb, lib-list.adb, makeutl.adb, mlib.adb,\n+\tosint.adb, par-ch10.adb, par-load.adb, prep.adb, prj.adb, prj-attr.ads,\n+\tprj-env.ads, prj-err.adb, prj-err.ads, prj-ext.adb, prj-ext.ads,\n+\tprj-makr.adb, prj-makr.ads, prj-pars.ads, prj-part.adb, prj-strt.adb,\n+\tprj-tree.ads, prj-util.ads, sem_dist.adb, sinput-c.ads, sinput-l.ads,\n+\tsinput-p.ads, styleg-c.ads, xr_tabls.adb, prj-attr-pm.ads,\n+\tmakegpr.adb: Remove redundant use_clauses.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* s-stoele.ads, s-stopoo.ads, s-stratt.ads, s-strops.ads, s-unstyp.ads, \n+\ts-valboo.ads, s-valcha.ads, s-valdec.ads, s-valenu.ads, s-valint.ads, \n+\ts-vallld.ads, s-vallli.ads, s-valllu.ads, s-valrea.ads, s-valuns.ads, \n+\ts-valuti.ads, s-valwch.ads, s-veboop.ads, s-vector.ads, s-vercon.ads, \n+\ts-wchcnv.ads, s-wchcon.ads, s-wchjis.ads, s-wchstw.ads, s-wchwts.ads, \n+\ts-widboo.ads, s-widcha.ads, s-widenu.ads, s-widlli.ads, s-widllu.ads, \n+\ts-widwch.ads, s-wwdcha.ads, s-wwdenu.ads, s-wwdwch.ads, system.ads, \n+\ttable.ads, types.ads, system-vms_64.ads, s-crtl-vms64.ads, \n+\ts-addope.ads, system-darwin-ppc.ads, system-vxworks-x86.ads, \n+\ts-vxwork-x86.ads, system-linux-ppc.ads, i-vxwork-x86.ads, \n+\ta-numaux-darwin.ads, a-crbtgo.ads, a-crbtgk.ads, a-crbltr.ads, \n+\ta-coprnu.ads, a-convec.ads, a-contai.ads, a-coinve.ads, a-cohata.ads, \n+\ta-cohama.ads, a-cihama.ads, a-cidlli.ads, a-cdlili.ads, \n+\ta-numaux-libc-x86.ads, a-numaux-vxworks.ads, system-linux-ia64.ads, \n+\tsystem-freebsd-x86.ads, system-unixware.ads, system-lynxos-ppc.ads, \n+\tsystem-lynxos-x86.ads, system-linux-x86_64.ads, system-tru64.ads,\n+\ts-vxwork-alpha.ads, system-aix.ads, system-vxworks-sparcv9.ads, \n+\tsystem-solaris-x86.ads, system-irix-o32.ads, system-irix-n32.ads, \n+\ts-parame-hpux.ads, system-hpux.ads, system-vxworks-m68k.ads, \n+\ts-vxwork-m68k.ads, system-linux-x86.ads, system-vxworks-mips.ads, \n+\ts-vxwork-mips.ads, system-os2.ads, system-interix.ads, \n+\ts-vxwork-ppc.ads, system-solaris-sparc.ads, s-vxwork-sparcv9.ads, \n+\tsystem-solaris-sparcv9.ads, s-parame-vms.ads, system-vms.ads, \n+\ts-osinte-mingw.ads, system-mingw.ads, s-parame-vms-restrict.ads, \n+\tsystem-vms-zcx.ads, s-parame-ae653.ads, system-vxworks-ppc.ads, \n+\ts-parame-vxworks.ads, system-vxworks-alpha.ads, interfac-vms.ads, \n+\ta-numaux-x86.ads, a-astaco.ads, a-chahan.ads, a-charac.ads, \n+\ta-chlat1.ads, a-chlat9.ads, a-colire.adb, a-colire.ads, a-comlin.ads, \n+\ta-cwila1.ads, a-cwila9.ads, ada.ads, a-decima.ads, a-exextr.adb,\n+\ta-filico.ads, a-finali.ads, a-interr.ads, a-ioexce.ads, a-dynpri.ads,\n+\ta-ngcefu.ads, a-ngcefu.adb, a-ngcoty.adb, a-ngcoty.ads, a-ngelfu.ads, \n+\ta-nudira.adb, a-nudira.ads, a-nuflra.adb, a-numaux.ads, a-numeri.ads, \n+\ta-reatim.adb, a-stmaco.ads, a-storio.ads, a-strbou.ads, a-stream.ads, \n+\ta-strfix.ads, a-string.ads, a-strmap.ads, a-strsea.ads, a-strsup.ads, \n+\ta-strunb.ads, a-stunau.ads, a-stwibo.ads, a-stwifi.ads, a-stwima.ads, \n+\ta-stwise.ads, a-stwisu.ads, a-stwiun.ads, a-swmwco.ads, a-textio.ads, \n+\tcsets.ads, debug.ads, dec.ads, g-curexc.ads, get_targ.ads, \n+\tg-except.ads, system-linux-hppa.ads, a-chacon.ads, a-widcha.ads, \n+\ta-zchara.ads, system-hpux-ia64.ads, a-ciorma.ads, a-coorma.ads, \n+\ta-ciormu.ads, a-coormu.ads, a-rbtgso.ads, a-chzla1.ads, a-chzla9.ads, \n+\ta-stzbou.ads, a-stzfix.ads, a-stzmap.ads, a-stzsea.ads, a-stzsup.ads, \n+\ta-stzunb.ads, a-swunau.ads, a-szunau.ads, gnat.ads, g-regpat.ads, \n+\tg-speche.ads, g-spitbo.ads, g-table.ads, g-tasloc.ads, g-trasym.ads, \n+\ti-c.ads, i-cpoint.ads, i-cpp.ads, i-cstrin.ads, i-fortra.ads, \n+\tinterfac.ads, i-os2err.ads, i-os2lib.ads, i-os2syn.ads, i-os2thr.ads, \n+\ti-vxwork.ads, output.ads, s-arit64.ads, s-atacco.ads, s-boarop.ads, \n+\ts-casuti.ads, s-crtl.ads, s-exctab.ads, s-exnint.ads, s-exnllf.ads, \n+\ts-exnlli.ads, s-expint.ads, s-explli.ads, s-expllu.ads, s-expmod.ads, \n+\ts-expuns.ads, s-fatflt.ads, s-fatgen.ads, s-fatlfl.ads, s-fatllf.ads, \n+\ts-fatsfl.ads, s-finimp.ads, s-finroo.ads, s-fore.ads, s-geveop.ads, \n+\ts-htable.ads, s-imgbiu.ads, s-imgboo.ads, s-imgcha.ads, s-imgdec.ads, \n+\ts-imgenu.ads, s-imgint.ads, s-imgllb.ads, s-imglld.ads, s-imglli.ads, \n+\ts-imgllu.ads, s-imgllw.ads, s-imgrea.ads, s-imguns.ads, s-imgwch.ads, \n+\ts-imgwiu.ads, s-io.ads, s-maccod.ads, s-mantis.ads, s-memcop.ads, \n+\ts-pack03.ads, s-pack05.ads, s-pack06.ads, s-pack07.ads, s-pack09.ads, \n+\ts-pack10.ads, s-pack11.ads, s-pack12.ads, s-pack13.ads, s-pack14.ads, \n+\ts-pack15.ads, s-pack17.ads, s-pack18.ads, s-pack19.ads, s-pack20.ads, \n+\ts-pack21.ads, s-pack22.ads, s-pack23.ads, s-pack24.ads, s-pack25.ads, \n+\ts-pack26.ads, s-pack27.ads, s-pack28.ads, s-pack29.ads, s-pack30.ads, \n+\ts-pack31.ads, s-pack33.ads, s-pack34.ads, s-pack35.ads, s-pack36.ads, \n+\ts-pack37.ads, s-pack38.ads, s-pack39.ads, s-pack40.ads, s-pack41.ads, \n+\ts-pack42.ads, s-pack43.ads, s-pack44.ads, s-pack45.ads, s-pack46.ads, \n+\ts-pack47.ads, s-pack48.ads, s-pack49.ads, s-pack50.ads, s-pack51.ads, \n+\ts-pack52.ads, s-pack53.ads, s-pack54.ads, s-pack55.ads, s-pack56.ads, \n+\ts-pack57.ads, s-pack58.ads, s-pack59.ads, s-pack60.ads, s-pack61.ads, \n+\ts-pack62.ads, s-pack63.ads, s-parame.ads, s-pooglo.ads, s-pooloc.ads, \n+\ts-poosiz.ads, s-powtab.ads, s-purexc.ads, s-sopco3.ads, s-sopco4.ads, \n+\ts-sopco5.ads: Minor reformatting: reindent pragma Pure/Preelaborate\n+\tand always use the no parameter form for consistency.\n+\n+\t* gnat-style.texi: Document rules about Preelaborate/Pure pragmas.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* binde.adb: Minor reformatting\n+\t(Find_Elab_Order): Output warning if -p used with static elab order\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Check_Needed): New procedure, deals with removing checks\n+\tbased on analysis of short-circuited forms. Also generates warnings for\n+\timproper use of non-short-circuited forms.\n+\tCode clean ups.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-ztexio.adb, a-textio.adb, a-witeio.adb: Replace bad range checks\n+\twith 'Valid tests.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* errout.ads, errout.adb (Fix Error_Msg_F): Fix implementation to meet\n+\tspec.\n+\tImplement new insertion char < (conditional warning)\n+\t* errutil.adb, erroutc.adb: Implement new insertion char <\n+\t(conditional warning).\n+\t* sem_elab.adb, prj-dect.adb, erroutc.ads, err_vars.ads\n+\t(Error_Msg_Warn): New variable for < insertion char.\n+\t* prj-nmsc.adb: Implement new errout insertion char < (conditional\n+\twarning).\n+\t(Check_For_Source): Change value of Source_Id only after the current\n+\tsource has been dealt with.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\t    Doug Rupp  <rupp@adacore.com>\n+\n+\t* exp_attr.adb: Handle vax fpt for 'Valid attribute\n+\t* exp_vfpt.ads, exp_vfpt.adb: (Expand_Vax_Valid): New procedure\n+\t* s-vaflop-vms-alpha.adb, s-vaflop.ads, s-vaflop.adb\n+\t(Valid_D, Valid_F, Valid_G): New functions\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Call): If an actual is a function call rewritten\n+\tfrom object notation, the original node is unanalyzed and carries no\n+\tsemantic information, so that accessiblity checks must be performed on\n+\tthe type of the actual itself.\n+\t(Expand_N_Subprogram_Declaration): Change last actual parameter for\n+\tcompatibility with Build_Protected_Sub_Specification.\n+\t(Check_Overriding_Inherited_Interfaces): Add suport to handle\n+\toverloaded primitives.\n+\t(Register_Interface_DT_Entry): Use the new name of the formal\n+\tthe the calls to Expand_Interface_Thunk\n+\n+\t* exp_dbug.ads: Augment comments on encoding of protected types to\n+\tinclude the generation of dispatching subprograms when the type\n+\timplements at least one interface.\n+\n+\t* lib.ads: Extend information in Load_Stack to include whether a given\n+\tload comes from a Limited_With_Clause.\n+\n+\t* lib-load.adb (From_Limited_With_Chain): New predicate to determine\n+\twhether a potential circularity is harmless, because it includes units\n+\tloaded through a limited_with clause. Extends previous treatment which\n+\tdid not handle properly arbitrary combinations of limited and\n+\tnon-limited clauses.\n+\n+2005-09-01  Nicolas Setton  <setton@adacore.com>\n+\n+\t* exp_dbug.adb (Get_Encoded_Name): Fixed bug that caused biaised types\n+\tto be encoded as typ___XBLU_lowerbound__upperbound instead of\n+\ttyp___XB_lowerbound__upperbound.\n+\n+2005-09-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_dist.adb (Add_RACW_TypeCode, Add_RAS_TypeCode): Do not generate\n+\tdummy access formal for RACW/RAS TypeCode TSS.\n+\t(Build_TypeCode_Call): Do not generate dummy null access actual for\n+\tcalls to the TypeCode TSS.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_intr.adb (Expand_Source_Name): For Enclosing_Entity, generate\n+\tfully qualified name, to distinguish instances with the same local name.\n+\n+\t* g-souinf.ads (Enclosing_Entity): Document that entity name is now\n+\tfully qualified.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_pakd.adb (Create_Packed_Array_Type): Properly handle very large\n+\tpacked arrays.\n+\n+2005-09-01  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* g-expect.adb (Non_Blocking_Spawn): Initialize the filters field to\n+\t(Free): New deallocation procedure for filter elements\n+\t(Close): Deallocate any existing filter for the concerned connection\n+\n+2005-09-01  Laurent Pautet  <pautet@adacore.com>\n+\n+\t* g-pehage.ads, g-pehage.adb (Select_Char_Position): When no character\n+\tposition set is provided, we compute one in order to reduce the maximum\n+\tlength of the keys.  This computation first selects a character\n+\tposition between 1 and the minimum length of the keys in order to\n+\tavoid reducing one of the keys to an empty string.\n+\t(Initialize, Compute): When the ratio V to K is too low, the algorithm\n+\tdoes not converge. The initialization procedure now comes with a\n+\tmaximum number of iterations such that when exceeded, an exception is\n+\traised in Compute. The user can initialize this ratio to another value\n+\tand try again\n+\tReformating and updated headers.\n+\n+2005-09-01  Javier Miranda  <miranda@adacore.com>\n+\n+\t* itypes.ads, itypes.adb (Create_Null_Excluding_Itype): New subprogram\n+\tthat given an entity T creates and returns an Itype that duplicates the\n+\tcontents of T. The returned Itype has the null-exclusion\n+\tattribute set to True, and its Etype attribute references T\n+\tto keep the association between the two entities.\n+\tUpdate copyright notice\n+\n+\t* sem_aggr.adb (Check_Can_Never_Be_Null,\n+\tAggregate_Constraint_Checks, Resolve_Aggregate,\n+\tResolve_Array_Aggregate, Resolve_Record_Aggregate): Code cleanup.\n+\n+\t* sem_ch5.adb (Analyze_Assignment): Code cleanup.\n+\n+2005-09-01  Gary Dismukes  <dismukes@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\t    Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* layout.adb (SO_Ref_From_Expr): Change Subtype_Mark to\n+\tResult_Definition.\n+\n+\t* par-ch6.adb (P_Subprogram): Handle parsing of Access_Definitions in\n+\tfunction specs.\n+\tCall Set_Result_Definition instead of Set_Subtype_Mark.\n+\t(P_Subprogram_Specification): Add parsing of anonymous access result\n+\tplus null exclusions. Call Set_Result_Definition instead of\n+\tSet_Subtype_Mark.\n+\n+\t* par-ch3.adb: Add support for LIMITED NEW for Ada 2005 AI-419\n+\t(P_Access_Type_Definition): Add parsing for an anonymous access result\n+\tsubtype, plus parsing for null exclusions. Call Set_Result_Definition\n+\tinstead of Set_Subtype_Mark.\n+\n+\t* sinfo.adb: Add support for LIMITED NEW for Ada 2005 AI-419\n+\t(Null_Exclusion_Present): Allow this flag for N_Function_Specification.\n+\t(Result_Definition): New function for N_Function_Specifications.\n+\t(Subtype_Mark): No longer allowed for N_Access_Function_Definition and\n+\tN_Function_Specification.\n+\t(Set_Null_Exclusion_Present): Allow this flag for\n+\tN_Function_Specification.\n+\t(Set_Result_Definition): New procedure for N_Function_Specifications.\n+\t(Set_Subtype_Mark): No longer allowed for N_Access_Function_Definition\n+\tand N_Function_Specification.\n+\n+\t* sinfo.ads: Update grammar rules for 9.7.2: Entry_Call_Alternative,\n+\tProcedure_Or_Entry_Call; 9.7.4: Triggering_Statement.\n+\tAdd support for LIMITED NEW for Ada 2005 AI-419\n+\tUpdate the syntax of PARAMETER_AND_RESULT_PROFILE to reflect the new\n+\tsyntax for anonymous access results.\n+\tReplace Subtype_Mark field by Result_Definition in\n+\tN_Function_Specification and N_Access_Definition specs.\n+\tAdd Null_Exclusion_Present to spec of N_Function_Specification.\n+\t(Result_Definition): New function for N_Function_Specification and\n+\tN_Access_Function_Definition.\n+\t(Set_Result_Definition): New procedure for N_Function_Specification and\n+\tN_Access_Function_Definition.\n+\n+\t* sprint.adb (S_Print_Node_Actual): Change Subtype_Mark calls to\n+\tResult_Definition for cases of N_Access_Function_Definition and\n+\tN_Function_Specification.\n+\tPrint \"not null\" if Null_Exclusion_Present on N_Function_Specification.\n+\n+2005-09-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* lib-writ.adb: Update Copyright notice\n+\t(Write_With_Lines): On platforms where file names are case-insensitive,\n+\trecord the file names in lower case.\n+\t(Write_ALI): For D lines, on platforms where file names are\n+\tcase-insensitive, record the file names in lower case.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Emmanuel Briot  <briot@adacore.com>\n+\n+\t* lib-xref.adb (Output_Overridden_Op): Display information on\n+\toverridden operation.\n+\n+\t* lib-xref.ads: Add documentation on overridden operations.\n+\n+\t* ali.ads (Xref_Entity_Record): Add support for storing the overriding\n+\tinformation.\n+\n+\t* ali.adb (Get_Typeref): New subprogram. Adds support for parsing the\n+\toverriding entity information.\n+\n+2005-09-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* mlib-prj.adb (Copy_Interface_Sources): Copy all interface sources,\n+\tincluding those that are inherited.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads, opt.adb: Add new switches Debug_Pragmas_Enabled[_Config]\n+\n+\t* par-prag.adb: Implement new pragma Debug_Policy\n+\n+\t* sem_prag.adb Implement new pragma Debug_Policy\n+\t(Analyze_Pragma, case Pack): do not let pragma Pack override an explicit\n+\tComponent_Size attribute specification. Give warning for ignored pragma\n+\tPack.\n+\n+\t* snames.h, snames.ads, snames.adb: Introduce entries in\n+\tPreset_Names for Name_Disp_Asynchronous_Select,\n+\tName_Disp_Conditional_Select, Name_Disp_Get_Prim_Op_Kind,\n+\tName_Disp_Timed_Select.\n+\tNew pragma Debug_Policy\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Set Ada 2005 mode\n+\texplicitly.\n+\tSwitch -gnata also sets Debug_Pragmas_Enabled\n+\n+\t* sem.adb, par.adb (Set_Opt_Config_Switch): Add parameter Main_Unit to\n+\thandle an explicit -gnata when compiling predefined files.\n+\n+2005-09-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* prj-env.adb (Set_Ada_Paths.Add.Recursive_Add): Do not add the object\n+\tdirectories of projects that have no Ada sources.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scng.adb (Check_End_Of_Line): Count characters, rather than bytes\n+\t(makes a difference for wide characters)\n+\n+\t* widechar.adb, widechar.ads: \n+\tAdd Wide_Char_Byte_Count feature to count chars vs bytes\n+\n+2005-09-01  Thomas Quinot  <quinot@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Resolve_Attribute, case 'Address): For an illegal\n+\t'Address attribute reference with an overloaded prefix, use the\n+\tlocation of the prefix (not the location of the attribute reference) as\n+\tthe error location.\n+\t(Analyze_Attribute, case 'Size): The name of an enumeration literal, or\n+\ta function renaming thereof, is a valid prefix for 'Size (where it is\n+\tintepreted as a function call).\n+\t(Statically_Denotes_Entity): New predicate to determine whether the\n+\tprefix of an array attribute can be considered static.\n+\n+\tPR ada/9087\n+\t(Eval_Attr): Fix failure to evaluate Component_Size for\n+\tunconstrained arrays (resulted in wrong value in packed case, since\n+\tback end cannot handle this case)\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_cat.adb (Check_Categorization_Dependencies): Add more detail to\n+\terror msgs for most common cases.\n+\tUse new errout insertion char < (conditional warning)\n+\n+2005-09-01  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (In_Chain): Moved from the scope of a subprogram to\n+\tbecome local to the whole package.\n+\t(Install_Limited_Withed_Unit): Instead of unchaining real entities if\n+\tthe package was already analyzed the new algorithm \"replaces\" the\n+\treal entities by the shadow ones. This is required to ensure that\n+\tthe order of these entities in the homonym chains does not change;\n+\totherwise we can have undefined references at linking time because\n+\tin case of conflicts the external name of the entities will have\n+\ta suffix that depends on the order of the entities in the chain.\n+\t(Remove_Limited_With_Clause): Complementary code that completes the\n+\tnew algorithm and replaces the shadow entities by the real ones.\n+\t(Install_Limited_Withed_Unit): When unchaining entities before the\n+\tinstallation of the shadow entities, only regular entities of the\n+\tpublic part must be taken into account. This is required to\n+\tkeep this routine in synch with the work done by Remove_Limited_\n+\tWith_Clause\n+\t(Install_Limited_With_Clause): Introduce implicit limited_with_clause\n+\teven if unit is analyzed, because the analysis of the unit is\n+\tidempotent in any case, and the limited view of the unit may have to\n+\tbe installed for proper visibility.\n+\t(Expand_Limited_With_Clause): Even if the unit in the implicit\n+\twith_clause has been analyzed already, a limited view of the package\n+\tmust be built for the current context, if it does not exist yet.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Subprogram_Body): When creating the\n+\tdefining entity for the instance body, make a new defining identifier\n+\trather than copying the entity of the spec, to prevent accidental\n+\tsharing of the entity list.\n+\t(Check_Private_View): When exchanging views of private types, build the\n+\tlist of exchanged views as a stack, to ensure that on exit the exchanges\n+\tare undone in the proper order.\n+\t(Analyze_Package_Instantiation, Analyze_Subprogram_Instantiation):\n+\tRestore the compilation environment in case of instantiation_error.\n+\t(Analyze_Generic_Subprogram_Declaration): Handle creation of type entity\n+\tfor an anonymous access result.\n+\t(Instantiate_Generic_Subprogram): Subtype_Mark => Result_Definition\n+\t(Formal_Entity): Handle properly the case of a formal package that\n+\tdenotes a generic package renaming.\n+\n+2005-09-01  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Enumeration_Representation_Clause): Reject the\n+\tclause if the array aggregate is surrounded by parentheses.\n+\n+2005-09-01  Cyrille Comar  <comar@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.ads, sem_ch3.adb (Analyze_Object_Declaration): Go to the\n+\tunderlying type\n+\tto check if a type is Constrained in cases related to code generation\n+\t(rather than semantic checking) since otherwise we do not generate\n+\tsimilar code for mutable private types depending if their\n+\tdiscriminants are visible or not.\n+\t(Check_Abstract_Overriding): Do not complain about failure to override\n+\tthe primitive operations used in dispatching selects since they will\n+\talways be overriden at the freeze point of the type.\n+\t(Access_Definition): Separate out handling for resetting the scope\n+\tof an anonymous access function result type. Retrieve the scope\n+\tof the associated function rather than using Current_Scope, which\n+\tdoes not have a consistent value (depends on whether we're in the\n+\tmiddle of analyzing formal parameters). Add ??? comment about\n+\tfinding a cleaner way to handle the special cases of scope setting.\n+\t(Process_Incomplete_Dependents): A protected operation is never a\n+\tdispatching operation (only its wrapper may be).\n+\t(Build_Derived_Record_Type): In case of tagged private types that\n+\timplement interfaces add derivation of predefined primitive\n+\toperations.\n+\t(Derive_Subprograms): Replace the Is_Interface_Derivation parameter\n+\tby two parameters that are used in case of derivation from abstract\n+\tinterface types: No_Predefined_Prims is used to avoid the derivation\n+\tof predefined primitives from the interface, and Predefined\n+\tPrims_Only is used to complete the derivation predefined primitives\n+\tin case of private tagged types implementing interfaces.\n+\tFix typo in comments\n+\t(Find_Interface_In_Descendant): Protect the frontend against\n+\twrong code with large circularity chains.\n+\t(Is_Private_Overriding): Add support for entities overriding interface\n+\tsubprograms. The test failed because Entities associated with overriden\n+\tinterface subprograms are always marked as hidden (and used to build\n+\tthe secondary dispatch table); in this case the overriden entity is\n+\tavailable through the field abstract_interface_alias (cf. override_\n+\tdispatching_operation)\n+\t(Access_Definition): Set the scope of the type to Current_Scope for the\n+\tcase of a function with an anonymous access result type.\n+\t(Access_Subprogram_Declaration): Handle creation of the type entity for\n+\tan access-to-function type with an anonymous access result.\n+\t(Check_Anonymous_Access_Types): Change Subtype_Mark to Result_Definition\n+\tin handling for N_Access_Function_Definition.\n+\t(Analyze_Subtype_Declaration): Modify the text of error message.\n+\t(Derived_Type_Declaration): Modify the text of error message.\n+\t(Process_Subtype): Modify the text of error message plus cleanup\n+\tof one redundant error message.\n+\t(Analyze_Component_Declaration): Code cleanup.\n+\t(Analyze_Object_Declaration): Code cleanup.\n+\t(Analyze_Subtype_Declaration): Propagate the null-exclusion\n+\tattribute in case of access types. Code cleanup.\n+\t(Array_Type_Declaration): Code cleanup.\n+\t(Process_Discriminants): Create the new null-excluding itype\n+\tif required. Code cleanup.\n+\t(Process_Subtype): Create the new null-excluding itype if\n+\trequired. Code cleanup.\n+\t(Build_Derived_Record_Type): Code cleanup to avoid calling\n+\ttwice the subprogram derive_subprograms in case of private\n+\ttypes that implement interfaces. In this particular case the\n+\tsubprogram Complete_Subprograms_Derivation already does the\n+\tjob associated with the second call.\n+\n+        * exp_strm.adb (Build_Elementary_Input_Call): Add an explicit\n+        conversion to the full view when generating an operation for a\n+        discriminant whose type may currently be private.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch4.adb (Transform_Object_Operation): In a context off the form\n+\tV (Obj.F), the rewriting does not involve the indexed component, but\n+\tonly the selected component itself.\n+\tDo not apply the transformation if the analyzed node is an actual of a\n+\tcall to another subprogram.\n+\t(Complete_Object_Operation): Retain the entity of the\n+\tdispatching operation in the selector of the rewritten node. The\n+\tentity will be used in the expansion of dispatching selects.\n+\t(Analyze_One_Call): Improve location of the error message associated\n+\twith interface.\n+\t(Analyze_Selected_Component): No need to resolve prefix when it is a\n+\tfunction call, resolution is done when parent node is resolved, as\n+\tusual.\n+\t(Analyze_One_Call): Add a flag to suppress analysis of the first actual,\n+\twhen attempting to resolve a call transformed from its object notation.\n+\t(Try_Object_Operation, Transform_Object_Operastion): Avoid makind copies\n+\tof the argument list for each interpretation of the operation.\n+\t(Try_Object_Operation): The designated type of an access parameter may\n+\tbe an incomplete type obtained through a limited_with clause, in which\n+\tcase the primitive operations of the type are retrieved from its full\n+\tview.\n+\t(Analyze_Call): If this is an indirect call, and the return type of the\n+\taccess_to_subprogram is incomplete, use its full view if available.\n+\n+2005-09-01  Javier Miranda  <miranda@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.ads, sem_ch6.adb (Check_Conformance): In case of anonymous\n+\taccess types the null-exclusion and access-to-constant attributes must\n+\talso match.\n+\t(Analyze_Return_Statement): When the result type is an anonymous access\n+\ttype, apply a conversion of the return expression to the access type\n+\tto ensure that appropriate accessibility checks are performed.\n+\t(Analyze_Return_Type): For the case of an anonymous access result type,\n+\tgenerate the Itype and set Is_Local_Anonymous_Access on the type.\n+\tAdd ??? placeholder for check to disallow returning a limited object\n+\tin Ada 2005 unless it's an aggregate or a result of a function call.\n+\tChange calls from Subtype_Mark to Result_Definition.\n+\t(Analyze_Subprogram_Body): Change formal Subtype_Mark to\n+\tResult_Definition in call to Make_Function_Specification.\n+\t(Build_Body_To_Inline): Change Set_Subtype_Mark to\n+\tSet_Result_Definition.\n+\t(Make_Inequality_Operator): Change formal Subtype_Mark to\n+\tResult_Definition in call to Make_Function_Specification.\n+\t(Process_Formals): Create the new null-excluding itype if required.\n+\t(New_Overloaded_Entity): For an entity overriding an interface primitive\n+\tcheck if the entity also covers other abstract subprograms in the same\n+\tscope. This is required to handle the general case, that is, overriding\n+\tother interface primitives and overriding abstract subprograms inherited\n+\tfrom some abstract ancestor type.\n+\t(New_Overloaded_Entity): For an overriding entity that comes from\n+\tsource, note the operation that it overrides.\n+\t(Check_Conformance, Type_Conformant): Addition of one new formal\n+\tto skip controlling formals in the analysis. This is used to\n+\thandle overloading of abstract interfaces.\n+\t(Base_Types_Match): Add missing case for types imported from\n+\tlimited-with clauses\n+\t(New_Overloaded_Entity): Add barrier to protect the use of\n+\tthe \"alias\" attribute.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Renamed_Entry): For a renaming_as_declaration,\n+\tverify that the procedure and the entry are mode conformant.\n+\t(Analyze_Subprogram_Renaming): Emit a warning if an operator is renamed\n+\tas a different operator, which is often a cut-and-paste error.\n+\n+2005-09-01  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_disp.adb (Check_Controlling_Formals): Anonymous access types\n+\tused in controlling parameters exclude null because it is necessary to\n+\tread the tag to dispatch, and null has no tag.\n+\t(Override_Dispatching_Operation): If the previous operation is inherited\n+\tfrom an interface, it becomes hidden  and does not participate in later\n+\tname resolution.\n+\n+2005-09-01  Javier Miranda  <miranda@adacore.com>\n+\t    Ed Schonberg  <schonberg@adacore.com>\n+\t    Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Membership_Op): In case of the membership test\n+\t\"Iface_CW_Typ in T'Class\" we have nothing else to do in the frontend;\n+\tthe expander will generate the corresponding run-time check to evaluate\n+\tthe expression.\n+\t(Resolve_Call): Check for legal type of procedure name or prefix that\n+\tappears as a trigger in a triggering alternative.\n+\t(Valid_Conversion): If expression is ambiguous and the context involves\n+\tan extension of System, remove System.Address interpretations.\n+\t(Resolve_Qualified_Expression): Reject the case of a specific-type\n+\tqualification applied to a class-wide argument. Enhance comment\n+\tto explain checking of Original_Node.\n+\t(Resolve_Type_Conversion): The location of the error message was not\n+\tgeneral enough to handle the general case and hence it has been removed.\n+\tIn addition, this patch improves the text of the message.\n+\t(Resolve_Type_Conversion): Add missing support for access to interface\n+\ttypes.\n+\t(Resolve_Type_Conversion): If the target is a class-wide interface type,\n+\tdo not expand if the expression is the actual in a call, because proper\n+\texpansion will take place when the call itself is expanded.\n+\t(Resolve_Allocator): If the context is an unchecked conversion, the\n+\tallocator inherits its storage pool, if any, from the target type of\n+\tthe conversion.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\t    Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_type.adb (Add_One_Interp): If a candidate operation is an\n+\tinherited interface operation that has an implementation, use the\n+\timplementation to avoid spurious ambiguities.\n+\t(Interface_Present_In_Ancestor): In case of concurrent types we can't\n+\tuse the Corresponding_Record_Typ attribute to look for the interface\n+\tbecause it is set by the expander (and hence it is not always\n+\tavailable). For this reason we traverse the list of interfaces\n+\t(available in the parent of the concurrent type).\n+\t(Interface_Present_In_Ancestor): Handle entities from the limited view\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Gather_Components): Omit interface tags\n+\tfrom the list of required components.\n+\t(Is_Controlling_Limited_Procedure): Determine whether an entity is a\n+\tprimitive procedure of a limited interface with a controlling first\n+\tparameter.\n+\t(Is_Renamed_Entry): Determine whether an entry is a procedure renaming\n+\tof an entry.\n+\t(Safe_To_Capture_Value): A value (such as non_null) is not safe to\n+\tcapture if it is generated in the second operand of a short-circuit\n+\toperation.\n+\tDo not capture values for variables with address clauses.\n+\t(Is_Object_Reference): Treat a function call as an object reference only\n+\tif its type is not Standard_Void_Type.\n+\n+2005-09-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Known_Condition): Refine warning when applied\n+\tto a variable that is statically known to be constant.\n+\n+2005-09-01  Geert Bosch  <bosch@adacore.com>\n+\t    Robert Dewar  <dewar@adacore.com>\n+\n+\t* ttypef.ads (VAXDF_Safe_First): Use correct value for constant.\n+\t(VAXGF_Safe_First): Idem.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\t    Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* g-dirope.ads: Minor reformatting\n+\tDocument that bounds of result of Base_Name match the input index\n+\tpositions.\n+\tAdd documentation on environment variable syntax for Expand_Path\n+\n+\t* gnat_ugn.texi: Update documentation to include mention of -m switches\n+\tDocument new treatment of wide characters in max line length\n+\tstyle check.\n+\tRemove -gnatL/-gnatZ switches, no longer used.\n+\tAdd note on pragmas Assertion_Policy and Debug_Policy in discussion\n+\tof -gnata switch.\n+\n+\t* gnat_rm.texi: Add doc for two argument form of pragma\n+\tFloat_Representation.\n+\tAdd documentation for pragma No_Strict_Aliasing\n+\tAdd note that explicit component clause overrides pragma Pack.\n+\tAdd documentation of pragma Debug_Policy\n+\n+2005-09-01  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-cihase.adb, a-coorse.ads, a-coorse.adb, a-cohama.adb, \n+\ta-ciorse.ads, a-ciorse.adb, a-cihama.adb, a-cdlili.adb, \n+\ta-cidlli.adb, a-chtgop.adb, a-cihase.adb, a-cihase.ads, \n+\ta-cohase.adb, a-cohase.adb, a-cohase.ads: Synchronized with latest\n+\tdraft (Draft 13, August 2005) of Ada Amendment 1.\n+\n+2005-09-01  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.in: Adjust the libgnat target pairs for Xscale to ARM.\n+\tNote that the platform-specific version of g-soccon.ads for VMS is now\n+\tnamed g-soccon-vms.ads (it was previously g-soccon-vms.adb, although it\n+\treally is a package spec).\n+\tReplace s-taspri-linux.ads by s-taspri-posix.ads\n+\tRemove references to s-mastop-x86.adb\n+\n+\t* system-vxworks-xscale.ads: Removed, no longer used.\n+\t* s-vxwork-xscale.ads: Removed, no longer used.\n+\n+2005-09-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* a-dirval-mingw.adb, a-direct.adb, a-coinve.adb,\n+\tg-dynhta.adb, g-dynhta.ads, cstand.adb, exp_smem.adb, g-debuti.ads,\n+\tg-dirope.adb, g-table.adb, lib-sort.adb, sem_maps.adb,\n+\texp_fixd.adb, exp_aggr.adb, a-intnam-mingw.ads, a-intnam-vxworks.ads,\n+\tg-arrspl.adb, g-arrspl.ads, g-awk.adb, g-awk.ads, g-boubuf.ads,\n+\tg-boubuf.ads, g-boubuf.ads, g-bubsor.ads, g-bubsor.adb, g-busora.adb,\n+\tg-busora.ads, g-busorg.adb, g-busorg.ads, g-calend.adb, g-calend.ads,\n+\tg-casuti.adb, g-casuti.ads, g-catiio.adb, g-catiio.ads, g-cgi.adb,\n+\tg-cgi.ads, g-cgicoo.adb, g-cgicoo.ads, g-cgideb.adb, g-cgideb.ads,\n+\tg-comlin.adb, g-comver.ads, g-semaph.ads, g-socthi.ads,\n+\tsem_ch7.adb, a-direio.adb, a-caldel.ads, i-cstrea-vms.adb,\n+\ta-ztedit.adb, a-ztenau.adb, g-socthi-vms.adb, g-socthi-vms.ads,\n+\tg-socthi-mingw.adb, g-socthi-mingw.ads, g-socthi-vxworks.ads,\n+\ta-intnam-irix.ads, a-intnam-irix.ads, a-intnam-hpux.ads,\n+\ta-intnam-os2.ads, a-intnam-os2.ads, a-caldel-vms.adb, a-calend-vms.adb,\n+\ta-calend-vms.ads, g-heasor.adb, g-heasor.ads, g-hesora.adb,\n+\tg-hesora.ads, g-hesorg.adb, g-hesorg.ads, g-htable.adb, g-htable.ads,\n+\tg-io.adb, g-io.ads, g-io_aux.adb, g-io_aux.ads, g-locfil.ads,\n+\tg-memdum.adb, g-memdum.ads, g-traceb.adb, g-traceb.ads, i-cobol.adb,\n+\ti-cobol.ads, i-cstrea.ads, i-cstrin.adb, a-wtedit.adb, a-tifiio.adb,\n+\ta-wtenau.adb, a-wtenau.adb, a-teioed.adb: Minor reformatting\n+\n 2005-08-29  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/23187"}]}