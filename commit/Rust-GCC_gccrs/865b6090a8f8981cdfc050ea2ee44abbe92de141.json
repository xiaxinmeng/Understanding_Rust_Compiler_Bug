{"sha": "865b6090a8f8981cdfc050ea2ee44abbe92de141", "node_id": "C_kwDOANBUbNoAKDg2NWI2MDkwYThmODk4MWNkZmMwNTBlYTJlZTQ0YWJiZTkyZGUxNDE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-07T12:17:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T12:17:40Z"}, "message": "Merge #992\n\n992: Cleanup bad unused code warnings r=philberty a=philberty\n\nThis patchset contains 4 distinct fixes:\r\n\r\nWhen a constant is declared after where it is used the code-generation pass falls\r\nback to a query compilation of the HIR::Item this did not contain a check to verify\r\nif it was already compiled and results in duplicate CONST_DECLS being generated\r\nif query compilation was used.\r\n\r\nWe were using a zero precision integer to contain unit-type expressions this results\r\nin VAR_DECLS being lost in the GENERIC graph which does not allow us to perform\r\nany static analysis upon the DECL. This changes the unit type to use an empty struct\r\nand for initialization of a VAR_DECL we can simply pass an empty constructor and let \r\nGCC optimize this code for us.\r\n\r\nUpdate our DEAD_CODE scan to take into account modules of items and also respect\r\nif structures are prefixed with an underscore we can ignore generating an unused warning.\r\n\r\nRemove our AST scan for unused code and reuse GCC TREE_USED to track wether\r\nVAR_DECL, PARM_DECL, CONST_DECL are actually used or not. We reuse the GCC\r\nwalk_tree functions to have this as nice separate lint.\r\n\r\nFixes #676 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "33ca33f20795707b58b694fab16039d0c2c7374a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33ca33f20795707b58b694fab16039d0c2c7374a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/865b6090a8f8981cdfc050ea2ee44abbe92de141", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJffkCRBK7hj4Ov3rIwAA2koIAGxRf4IBQxnPYgk7bvk8OQZv\nUxIRvwx0UXXGfK1hP5YsN0FtIofRlB9bwZlwxa6l70Qj2eBSIqEVZdk/lcSplfBd\ncytco9ZCCy+1u34lCCAoeGvswFyfD5G97im1fmH1LsVv2ryn5NhB1l2+ebN42Gam\nFnfm/koVtE6/JvPeL3raUUoFXGfaFshnZqyFHVUiHNRN+UTmVJLgYIRB6OKgG5pM\nAz8dDGCvLRo/4nlLLYq6nDcmxL7u2zUyeOf/SQSx7O6YB6sT8hvp69USLR5Gh3ja\n0bWh4K5xt/RCsHBkD3E2/IJhwH47o9oj1mWL4h879Vn4EqwQzSRd4o5XOw4jNBQ=\n=+sRQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 33ca33f20795707b58b694fab16039d0c2c7374a\nparent 366c53371ad40025984a98e01b02d452d49816aa\nparent 7820ff8b8b14e1309aade205e50ef30bb08cb3e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646655460 +0000\ncommitter GitHub <noreply@github.com> 1646655460 +0000\n\nMerge #992\n\n992: Cleanup bad unused code warnings r=philberty a=philberty\n\nThis patchset contains 4 distinct fixes:\r\n\r\nWhen a constant is declared after where it is used the code-generation pass falls\r\nback to a query compilation of the HIR::Item this did not contain a check to verify\r\nif it was already compiled and results in duplicate CONST_DECLS being generated\r\nif query compilation was used.\r\n\r\nWe were using a zero precision integer to contain unit-type expressions this results\r\nin VAR_DECLS being lost in the GENERIC graph which does not allow us to perform\r\nany static analysis upon the DECL. This changes the unit type to use an empty struct\r\nand for initialization of a VAR_DECL we can simply pass an empty constructor and let \r\nGCC optimize this code for us.\r\n\r\nUpdate our DEAD_CODE scan to take into account modules of items and also respect\r\nif structures are prefixed with an underscore we can ignore generating an unused warning.\r\n\r\nRemove our AST scan for unused code and reuse GCC TREE_USED to track wether\r\nVAR_DECL, PARM_DECL, CONST_DECL are actually used or not. We reuse the GCC\r\nwalk_tree functions to have this as nice separate lint.\r\n\r\nFixes #676 \n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865b6090a8f8981cdfc050ea2ee44abbe92de141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/865b6090a8f8981cdfc050ea2ee44abbe92de141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/865b6090a8f8981cdfc050ea2ee44abbe92de141/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "366c53371ad40025984a98e01b02d452d49816aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366c53371ad40025984a98e01b02d452d49816aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366c53371ad40025984a98e01b02d452d49816aa"}, {"sha": "7820ff8b8b14e1309aade205e50ef30bb08cb3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7820ff8b8b14e1309aade205e50ef30bb08cb3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7820ff8b8b14e1309aade205e50ef30bb08cb3e5"}], "stats": {"total": 574, "additions": 298, "deletions": 276}, "files": [{"sha": "2f529313138629625c2596483c6b7fc2d026722a", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -101,6 +101,7 @@ GRS_OBJS = \\\n     rust/rust-autoderef.o \\\n     rust/rust-substitution-mapper.o \\\n     rust/rust-lint-marklive.o \\\n+    rust/rust-lint-unused-var.o \\\n     rust/rust-hir-type-check-path.o \\\n     rust/rust-compile-intrinsic.o \\\n     rust/rust-compile-pattern.o \\"}, {"sha": "4bade5c7d603da9099f01b43138367318b159c50", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -307,6 +307,11 @@ class Context\n     return mangler.mangle_item (ty, path);\n   }\n \n+  std::vector<tree> &get_type_decls () { return type_decls; }\n+  std::vector<::Bvariable *> &get_var_decls () { return var_decls; }\n+  std::vector<tree> &get_const_decls () { return const_decls; }\n+  std::vector<tree> &get_func_decls () { return func_decls; }\n+\n private:\n   ::Backend *backend;\n   Resolver::Resolver *resolver;"}, {"sha": "03e3c2efea3cad07794ef27a87f00226dd241656", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1339,18 +1339,22 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n   Bvariable *var = nullptr;\n   if (ctx->lookup_const_decl (ref, &translated))\n     {\n+      TREE_USED (translated) = 1;\n       return;\n     }\n   else if (ctx->lookup_function_decl (ref, &fn))\n     {\n+      TREE_USED (fn) = 1;\n       translated = address_expression (fn, expr.get_locus ());\n     }\n   else if (ctx->lookup_var_decl (ref, &var))\n     {\n+      // TREE_USED is setup in the gcc abstraction here\n       translated = ctx->get_backend ()->var_expression (var, expr.get_locus ());\n     }\n   else if (ctx->lookup_pattern_binding (ref, &translated))\n     {\n+      TREE_USED (translated) = 1;\n       return;\n     }\n   else\n@@ -1371,6 +1375,11 @@ CompileExpr::visit (HIR::IdentifierExpr &expr)\n       else\n \ttranslated = CompileItem::compile (resolved_item, ctx, lookup, true,\n \t\t\t\t\t   expr.get_locus ());\n+\n+      if (translated != error_mark_node)\n+\t{\n+\t  TREE_USED (translated) = 1;\n+\t}\n     }\n }\n "}, {"sha": "21cbb1ce905595d51e615bfe54569eb467a3819c", "filename": "gcc/rust/backend/rust-compile-item.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-item.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -73,6 +73,10 @@ CompileItem::visit (HIR::StaticItem &var)\n void\n CompileItem::visit (HIR::ConstantItem &constant)\n {\n+  if (ctx->lookup_const_decl (constant.get_mappings ().get_hirid (),\n+\t\t\t      &reference))\n+    return;\n+\n   // resolve the type\n   TyTy::BaseType *resolved_type = nullptr;\n   bool ok"}, {"sha": "09f3860efedb5a30f1b51c42ae88d16445ae26c4", "filename": "gcc/rust/backend/rust-compile-resolve-path.cc", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -23,6 +23,8 @@\n #include \"rust-hir-trait-resolve.h\"\n #include \"rust-hir-path-probe.h\"\n \n+#include \"print-tree.h\"\n+\n namespace Rust {\n namespace Compile {\n \n@@ -117,12 +119,18 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n   // might be a constant\n   tree constant_expr;\n   if (ctx->lookup_const_decl (ref, &constant_expr))\n-    return constant_expr;\n+    {\n+      TREE_USED (constant_expr) = 1;\n+      return constant_expr;\n+    }\n \n   // this might be a variable reference or a function reference\n   Bvariable *var = nullptr;\n   if (ctx->lookup_var_decl (ref, &var))\n-    return ctx->get_backend ()->var_expression (var, expr_locus);\n+    {\n+      // TREE_USED is setup in the gcc abstraction here\n+      return ctx->get_backend ()->var_expression (var, expr_locus);\n+    }\n \n   // it might be a function call\n   if (lookup->get_kind () == TyTy::TypeKind::FNDEF)\n@@ -131,13 +139,19 @@ ResolvePathRef::resolve (const HIR::PathIdentSegment &final_segment,\n       tree fn = NULL_TREE;\n       if (ctx->lookup_function_decl (fntype->get_ty_ref (), &fn))\n \t{\n+\t  TREE_USED (fn) = 1;\n \t  return address_expression (fn, expr_locus);\n \t}\n     }\n \n   // let the query system figure it out\n-  return query_compile (ref, lookup, final_segment, mappings, expr_locus,\n-\t\t\tis_qualified_path);\n+  tree resolved_item = query_compile (ref, lookup, final_segment, mappings,\n+\t\t\t\t      expr_locus, is_qualified_path);\n+  if (resolved_item != error_mark_node)\n+    {\n+      TREE_USED (resolved_item) = 1;\n+    }\n+  return resolved_item;\n }\n \n tree"}, {"sha": "ad3425332fce7c662f5ecb04fc02eb565c1a0976", "filename": "gcc/rust/backend/rust-compile-stmt.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-stmt.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -81,6 +81,7 @@ class CompileStmt : public HIRCompileBase, public HIR::HIRStmtVisitor\n     bool ok = ctx->get_tyctx ()->lookup_type (\n       stmt.get_init_expr ()->get_mappings ().get_hirid (), &actual);\n     rust_assert (ok);\n+    tree stmt_type = TyTyResolveCompile::compile (ctx, ty);\n \n     Location lvalue_locus = stmt.get_pattern ()->get_locus ();\n     Location rvalue_locus = stmt.get_init_expr ()->get_locus ();\n@@ -90,8 +91,14 @@ class CompileStmt : public HIRCompileBase, public HIR::HIRStmtVisitor\n     auto fnctx = ctx->peek_fn ();\n     if (ty->is_unit ())\n       {\n-\t// FIXME this feels wrong\n \tctx->add_statement (init);\n+\n+\tauto unit_type_init_expr\n+\t  = ctx->get_backend ()->constructor_expression (stmt_type, false, {},\n+\t\t\t\t\t\t\t -1, rvalue_locus);\n+\tauto s = ctx->get_backend ()->init_statement (fnctx.fndecl, var,\n+\t\t\t\t\t\t      unit_type_init_expr);\n+\tctx->add_statement (s);\n       }\n     else\n       {"}, {"sha": "52ad2f94c1214bcdb59f4a0c90b36885ac1c9f73", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -54,10 +54,10 @@ class TyTyCompile : public TyTy::TyVisitor\n \n   void visit (TyTy::TupleType &type) override\n   {\n-    if (type.num_fields () == 0)\n-      translated = backend->unit_type ();\n-    else\n-      gcc_unreachable ();\n+    // this interface is only for unit-type the -type interface takes into\n+    // account the context\n+    rust_assert (type.num_fields () == 0);\n+    translated = backend->unit_type ();\n   }\n \n   void visit (TyTy::ArrayType &) override { gcc_unreachable (); }"}, {"sha": "86a063f000ce4687bb330996616f4e4b54eb3744", "filename": "gcc/rust/lang.opt", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flang.opt?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -38,6 +38,18 @@ Wall\n Rust\n ; Documented in c.opt\n \n+Wunused-variable\n+Rust Var(warn_unused_variable) Init(1) Warning\n+; documented in common.opt\n+\n+Wunused-const-variable\n+Rust Warning Alias(Wunused-const-variable=, 2, 0)\n+Warn when a const variable is unused.\n+\n+Wunused-const-variable=\n+Rust Joined RejectNegative UInteger Var(warn_unused_const_variable) Init(1) Warning LangEnabledBy(Rust,Wunused-variable, 1, 0) IntegerRange(0, 2)\n+Warn when a const variable is unused.\n+\n Wunused-result\n Rust Var(warn_unused_result) Init(1) Warning\n Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value."}, {"sha": "d0ab2b4e8b9827446cabab26632ab421f96500ad", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -262,6 +262,12 @@ class MarkLive : public MarkLiveBase\n     stct.get_struct_base ()->base_struct->accept_vis (*this);\n   }\n \n+  void visit (HIR::Module &module) override\n+  {\n+    for (auto &item : module.get_items ())\n+      item->accept_vis (*this);\n+  }\n+\n private:\n   std::vector<HirId> worklist;\n   std::set<HirId> liveSymbols;"}, {"sha": "00114f28dd2dcf05bd4625c19269b31cf911c52c", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -81,9 +81,11 @@ class ScanDeadcode : public MarkLiveBase\n     HirId hirId = stct.get_mappings ().get_hirid ();\n     if (should_warn (hirId))\n       {\n-\trust_warning_at (stct.get_locus (), 0,\n-\t\t\t \"struct is never constructed: %<%s%>\",\n-\t\t\t stct.get_identifier ().c_str ());\n+\tbool name_starts_underscore = stct.get_identifier ().at (0) == '_';\n+\tif (!name_starts_underscore)\n+\t  rust_warning_at (stct.get_locus (), 0,\n+\t\t\t   \"struct is never constructed: %<%s%>\",\n+\t\t\t   stct.get_identifier ().c_str ());\n       }\n     else\n       {\n@@ -124,6 +126,12 @@ class ScanDeadcode : public MarkLiveBase\n       }\n   }\n \n+  void visit (HIR::Module &mod) override\n+  {\n+    for (auto &item : mod.get_items ())\n+      item->accept_vis (*this);\n+  }\n+\n private:\n   std::set<HirId> live_symbols;\n   Resolver::Resolver *resolver;"}, {"sha": "d4317e5328011b54455af45cf8ef10b3c0432fb9", "filename": "gcc/rust/lint/rust-lint-unused-var.cc", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-unused-var.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-unused-var.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-unused-var.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-lint-unused-var.h\"\n+#include \"print-tree.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+static void\n+check_decl (tree *t)\n+{\n+  rust_assert (TREE_CODE (*t) == VAR_DECL || TREE_CODE (*t) == PARM_DECL\n+\t       || TREE_CODE (*t) == CONST_DECL);\n+\n+  tree var_name = DECL_NAME (*t);\n+  const char *var_name_ptr = IDENTIFIER_POINTER (var_name);\n+  bool starts_with_under_score = strncmp (var_name_ptr, \"_\", 1) == 0;\n+\n+  bool is_constant = TREE_CODE (*t) == CONST_DECL;\n+  // if (!is_constant)\n+  //   {\n+  //     debug_tree (*t);\n+  //     rust_debug (\"found var-decl: used %s artifical %s underscore %s name\n+  //     %s\",\n+  //       \t  TREE_USED (*t) ? \"true\" : \"false\",\n+  //       \t  DECL_ARTIFICIAL (*t) ? \"true\" : \"false\",\n+  //       \t  starts_with_under_score ? \"true\" : \"false\", var_name_ptr);\n+  //   }\n+\n+  if (!TREE_USED (*t) && !DECL_ARTIFICIAL (*t) && !starts_with_under_score)\n+    {\n+      warning_at (DECL_SOURCE_LOCATION (*t),\n+\t\t  is_constant ? OPT_Wunused_const_variable_\n+\t\t\t      : OPT_Wunused_variable,\n+\t\t  \"unused name %qE\", *t);\n+    }\n+}\n+\n+static tree\n+unused_var_walk_fn (tree *t, int *walk_subtrees, void *closure)\n+{\n+  switch (TREE_CODE (*t))\n+    {\n+    case VAR_DECL:\n+    case CONST_DECL:\n+      check_decl (t);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return NULL_TREE;\n+}\n+\n+void\n+UnusedVariables::Lint (Compile::Context &ctx)\n+{\n+  for (auto &fndecl : ctx.get_func_decls ())\n+    {\n+      for (tree p = DECL_ARGUMENTS (fndecl); p != NULL_TREE; p = DECL_CHAIN (p))\n+\t{\n+\t  check_decl (&p);\n+\t}\n+\n+      walk_tree_without_duplicates (&DECL_SAVED_TREE (fndecl),\n+\t\t\t\t    &unused_var_walk_fn, &ctx);\n+    }\n+\n+  for (auto &var : ctx.get_var_decls ())\n+    {\n+      tree t = ctx.get_backend ()->var_expression (var, Location ());\n+      check_decl (&t);\n+    }\n+\n+  for (auto &const_decl : ctx.get_const_decls ())\n+    {\n+      check_decl (&const_decl);\n+    }\n+}\n+\n+} // namespace Analysis\n+} // namespace Rust"}, {"sha": "6fabfeff01ba2c325a178d3f54ba37cdb53e4c50", "filename": "gcc/rust/lint/rust-lint-unused-var.h", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-unused-var.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Flint%2Frust-lint-unused-var.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-unused-var.h?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -0,0 +1,36 @@\n+// Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_LINT_UNUSED_VAR\n+#define RUST_LINT_UNUSED_VAR\n+\n+#include \"rust-compile-context.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+class UnusedVariables\n+{\n+public:\n+  static void Lint (Compile::Context &ctx);\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust\n+\n+#endif // RUST_LINT_UNUSED_VAR"}, {"sha": "6c0fc42ba6427524f012f9ccd1942aaec8b512a4", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/366c53371ad40025984a98e01b02d452d49816aa/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=366c53371ad40025984a98e01b02d452d49816aa", "patch": "@@ -1,61 +0,0 @@\n-// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n-\n-// This file is part of GCC.\n-\n-// GCC is free software; you can redistribute it and/or modify it under\n-// the terms of the GNU General Public License as published by the Free\n-// Software Foundation; either version 3, or (at your option) any later\n-// version.\n-\n-// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-// for more details.\n-\n-// You should have received a copy of the GNU General Public License\n-// along with GCC; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#ifndef RUST_AST_RESOLVE_UNUSED_H\n-#define RUST_AST_RESOLVE_UNUSED_H\n-\n-#include \"rust-ast-resolve-base.h\"\n-\n-namespace Rust {\n-namespace Resolver {\n-\n-class ScanUnused\n-{\n-public:\n-  static bool ScanRib (Rib *r)\n-  {\n-    r->iterate_decls ([&] (NodeId decl_node_id, Location locus) -> bool {\n-      CanonicalPath ident = CanonicalPath::create_empty ();\n-\n-      bool ok = r->lookup_canonical_path (decl_node_id, &ident);\n-      rust_assert (ok);\n-\n-      bool name_starts_with_underscore = ident.get ().at (0) == '_';\n-      if (!r->have_references_for_node (decl_node_id)\n-\t  && !name_starts_with_underscore)\n-\t{\n-\t  rust_warning_at (locus, 0, \"unused name '%s'\", ident.get ().c_str ());\n-\t}\n-      return true;\n-    });\n-    return true;\n-  }\n-\n-  static void Scan ()\n-  {\n-    auto resolver = Resolver::get ();\n-    resolver->iterate_name_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n-    resolver->iterate_type_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n-    resolver->iterate_label_ribs ([&] (Rib *r) -> bool { return ScanRib (r); });\n-  }\n-};\n-\n-} // namespace Resolver\n-} // namespace Rust\n-\n-#endif // RUST_AST_RESOLVE_UNUSED_H"}, {"sha": "70c07c1525647bb2d1ff5a297d70589d4a963446", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -86,9 +86,15 @@ class Bvariable\n tree\n Bvariable::get_tree (Location location) const\n {\n-  if (this->orig_type_ == NULL || this->t_ == error_mark_node\n-      || TREE_TYPE (this->t_) == this->orig_type_)\n-    return this->t_;\n+  if (this->t_ == error_mark_node)\n+    return error_mark_node;\n+\n+  TREE_USED (this->t_) = 1;\n+  if (this->orig_type_ == NULL || TREE_TYPE (this->t_) == this->orig_type_)\n+    {\n+      return this->t_;\n+    }\n+\n   // Return *(orig_type*)&decl.  */\n   tree t = build_fold_addr_expr_loc (location.gcc_location (), this->t_);\n   t = fold_build1_loc (location.gcc_location (), NOP_EXPR,\n@@ -122,7 +128,7 @@ class Gcc_backend : public Backend\n     static tree unit_type;\n     if (unit_type == nullptr)\n       {\n-\tauto unit_type_node = integer_type (true, 0);\n+\tauto unit_type_node = struct_type ({});\n \tunit_type = named_type (\"()\", unit_type_node,\n \t\t\t\t::Linemap::predeclared_location ());\n       }\n@@ -1063,10 +1069,7 @@ Gcc_backend::zero_expression (tree t)\n tree\n Gcc_backend::var_expression (Bvariable *var, Location location)\n {\n-  tree ret = var->get_tree (location);\n-  if (ret == error_mark_node)\n-    return error_mark_node;\n-  return ret;\n+  return var->get_tree (location);\n }\n \n // An expression that indirectly references an expression.\n@@ -2394,7 +2397,6 @@ Gcc_backend::local_variable (tree function, const std::string &name,\n   tree decl = build_decl (location.gcc_location (), VAR_DECL,\n \t\t\t  get_identifier_from_string (name), type_tree);\n   DECL_CONTEXT (decl) = function;\n-  TREE_USED (decl) = 1;\n \n   if (decl_var != NULL)\n     {\n@@ -2417,7 +2419,7 @@ Gcc_backend::parameter_variable (tree function, const std::string &name,\n \t\t\t  get_identifier_from_string (name), type_tree);\n   DECL_CONTEXT (decl) = function;\n   DECL_ARG_TYPE (decl) = type_tree;\n-  TREE_USED (decl) = 1;\n+\n   rust_preserve_from_gc (decl);\n   return new Bvariable (decl);\n }"}, {"sha": "396f35f30113343a0979e0fde5d15b29a87353ea", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -25,11 +25,11 @@\n #include \"rust-ast-resolve.h\"\n #include \"rust-ast-lower.h\"\n #include \"rust-hir-type-check.h\"\n-#include \"rust-lint-scan-deadcode.h\"\n #include \"rust-tycheck-dump.h\"\n-#include \"rust-ast-resolve-unused.h\"\n #include \"rust-compile.h\"\n #include \"rust-cfg-parser.h\"\n+#include \"rust-lint-scan-deadcode.h\"\n+#include \"rust-lint-unused-var.h\"\n \n #include \"diagnostic.h\"\n #include \"input.h\"\n@@ -599,27 +599,18 @@ Session::parse_file (const char *filename)\n   if (saw_errors ())\n     return;\n \n-  // scan dead code\n-  Analysis::ScanDeadcode::Scan (hir);\n-\n-  if (saw_errors ())\n-    return;\n-\n-  // scan unused has to be done after type resolution since methods are\n-  // resolved at that point\n-  Resolver::ScanUnused::Scan ();\n-\n-  if (saw_errors ())\n-    return;\n-\n-  // do compile\n+  // do compile to gcc generic\n   Compile::Context ctx (backend);\n   Compile::CompileCrate::Compile (hir, &ctx);\n \n-  if (saw_errors ())\n-    return;\n+  // we can't do static analysis if there are errors to worry about\n+  if (!saw_errors ())\n+    {\n+      Analysis::ScanDeadcode::Scan (hir);\n+      Analysis::UnusedVariables::Lint (ctx);\n+    }\n \n-  // pass to GCC\n+  // pass to GCC middle-end\n   ctx.write_to_backend ();\n }\n "}, {"sha": "a56be9a0e8b6b33ffceb3a76e68952aa4f7aea6c", "filename": "gcc/testsuite/rust/compile/array3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Farray3.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,5 +1,4 @@\n fn foo(state: &mut [u32; 16], a: usize) {\n     // { dg-warning \"function is never used: .foo.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .foo.\" \"\" { target *-*-* } .-2 }\n     state[a] = 1;\n }"}, {"sha": "b7368ba29ee70f13152bc4a32561f02b62c031e2", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -9,41 +9,37 @@\n \n /// outer doc line for module\n /** outer doc block for module               */\n-pub mod module // { dg-warning \"unused name\" }\n-{\n-  //!  inner line doc\n-  //!! inner line doc!\n-  /*!  inner block doc  */\n-  /*!! inner block doc! */\n-\n-  //   line comment\n-  ///  outer line doc\n-  //// line comment\n-\n-  /*   block comment   */\n-  /**  outer block doc */\n-  /*** block comment   */\n-\n-  mod block_doc_comments // { dg-warning \"unused name\" }\n-  {\n-    /*   /* */  /** */  /*! */  */\n-    /*!  /* */  /** */  /*! */  */\n-    /**  /* */  /** */  /*! */  */\n-    mod item { } // { dg-warning \"unused name\" }\n-  }\n-\n-  pub mod empty // { dg-warning \"unused name\" }\n-  {\n-    //!\n-    /*!*/\n-    //\n-\n-    ///\n-    // the following warning is issued one line earlier\n-    // { dg-warning \"unused name\" }\n-    mod doc { }\n-    /**/\n-    /***/\n-  }\n+pub mod module {\n+    //!  inner line doc\n+    //!! inner line doc!\n+    /*!  inner block doc  */\n+    /*!! inner block doc! */\n+\n+    //   line comment\n+    ///  outer line doc\n+    //// line comment\n+\n+    /*   block comment   */\n+    /**  outer block doc */\n+    /*** block comment   */\n+\n+    mod block_doc_comments {\n+        /*   /* */  /** */  /*! */  */\n+        /*!  /* */  /** */  /*! */  */\n+        /**  /* */  /** */  /*! */  */\n+        mod item {}\n+    }\n+\n+    pub mod empty {\n+        //!\n+        /*!*/\n+        //\n+\n+        ///\n+        // the following warning is issued one line earlier\n+        mod doc {}\n+        /**/\n+        /***/\n+    }\n }\n-pub fn main () { }\n+pub fn main() {}"}, {"sha": "9f2f22073976eac61b87c932454f49d3e1d210fb", "filename": "gcc/testsuite/rust/compile/torture/all_doc_comment_line_blocks_crlf.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fall_doc_comment_line_blocks_crlf.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -9,7 +9,7 @@\n \r\n /// outer doc line for module\r\n /** outer doc block for module               */\r\n-pub mod module // { dg-warning \"unused name\" }\r\n+pub mod module\r\n {\r\n   //!  inner line doc\r\n   //!! inner line doc!\r\n@@ -24,22 +24,22 @@ pub mod module // { dg-warning \"unused name\" }\n   /**  outer block doc */\r\n   /*** block comment   */\r\n \r\n-  mod block_doc_comments // { dg-warning \"unused name\" }\r\n+  mod block_doc_comments\r\n   {\r\n     /*   /* */  /** */  /*! */  */\r\n     /*!  /* */  /** */  /*! */  */\r\n     /**  /* */  /** */  /*! */  */\r\n-    mod item { } // { dg-warning \"unused name\" }\r\n+    mod item { }\r\n   }\r\n \r\n-  pub mod empty // { dg-warning \"unused name\" }\r\n+  pub mod empty\r\n   {\r\n     //!\r\n     /*!*/\r\n     //\r\n \r\n     ///\r\n-    mod doc { }    // { dg-warning \"unused name\" }\r\n+    mod doc { }\r\n \r\n     /**/\r\n     /***/\r"}, {"sha": "bf181df7045e34dceb154b5921b6cf36c468e8be", "filename": "gcc/testsuite/rust/compile/torture/associated_types1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fassociated_types1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -2,12 +2,10 @@ pub trait Foo {\n     type A;\n \n     fn boo(&self) -> <Self as Foo>::A;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n }\n \n fn foo2<I: Foo>(x: I) {\n     // { dg-warning \"function is never used: .foo2.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .foo2.\" \"\" { target *-*-* } .-2 }\n     x.boo();\n }\n "}, {"sha": "962d875ab56e4a1be8fd58b32c98781f0540dfb9", "filename": "gcc/testsuite/rust/compile/torture/cfg_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -3,6 +3,5 @@ use std::env; // Add one line so gccrs doesn't believe we're parsing a shebang\n #[cfg_attr(feature = \"somefeature\", attribute = \"someattr\")]\n struct Feature;\n // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n-// { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n \n fn main() {}"}, {"sha": "9eb598f02a84b6e62bb2b78e25e7ac3540476fb5", "filename": "gcc/testsuite/rust/compile/torture/generics13.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics13.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,6 @@\n struct Foo<A> {\n     a: A,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n struct GenericStruct<T> {\n@@ -15,7 +15,6 @@ impl Foo<isize> {\n \n     fn bar(self) -> isize {\n         // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "e51a4079e30e455b32a569eb818b6cc28ffc3356", "filename": "gcc/testsuite/rust/compile/torture/generics14.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics14.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,6 @@\n struct Foo<A> {\n     a: A,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n impl Foo<isize> {\n@@ -10,7 +10,6 @@ impl Foo<isize> {\n \n     fn bar(self) -> isize {\n         // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "4c98b86a1b93f5a91deb724ed1494a462551f851", "filename": "gcc/testsuite/rust/compile/torture/generics18.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics18.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -3,7 +3,6 @@ struct Foo<T>(T);\n impl<X> Foo<X> {\n     fn new(a: X) -> Self {\n         // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         Self(a)\n     }\n "}, {"sha": "0de45a8c404ba6433f25af707131094e0463b096", "filename": "gcc/testsuite/rust/compile/torture/generics24.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fgenerics24.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -11,7 +11,6 @@ impl Foo<isize> {\n impl Foo<char> {\n     fn bar(self) -> char {\n         // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         self.a\n     }\n }"}, {"sha": "fea863192437ab4c27c49d03b09716ba93f2b3d0", "filename": "gcc/testsuite/rust/compile/torture/impl_block_unused.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fimpl_block_unused.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -2,18 +2,16 @@ struct Foo(i32, bool);\n \n impl Foo {\n     fn new(a: i32, b: bool) -> Foo {\n-    // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n         Foo(a, b)\n     }\n \n     fn test2() -> i32 {\n-    // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n-\t1\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        1\n     }\n }\n \n fn main() {\n-\tlet _a = Foo(1, true);\n+    let _a = Foo(1, true);\n }"}, {"sha": "2e5a81fe516bfc33dc3521982b00ab8c5ef3d10a", "filename": "gcc/testsuite/rust/compile/torture/issue-808.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -2,8 +2,6 @@ pub trait Foo {\n     type Target;\n \n     fn bar(&self) -> &Self::Target;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Foo::bar.\" \"\" { target *-*-* } .-2 }\n }\n \n impl<T> Foo for &T {"}, {"sha": "09a722681b0ea215e8be6346c4e2f83eb728083a", "filename": "gcc/testsuite/rust/compile/torture/mod-nameresolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod-nameresolve.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,5 +1,5 @@\n-mod foo { // { dg-warning \"unused name\" }\n-    struct A; // { dg-warning \"unused name\" }\n+mod foo {\n+    struct A; // { dg-warning \"struct is never constructed\" }\n }\n \n fn main() {}"}, {"sha": "651678c6a34b2d7503560121e8aff37e7d1bd2bf", "filename": "gcc/testsuite/rust/compile/torture/mod1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -9,4 +9,3 @@ mod _bar {\n         struct _B;\n     }\n }\n-"}, {"sha": "04722a94bb1770dff683f7dce167da4b45db76e8", "filename": "gcc/testsuite/rust/compile/torture/mod2.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmod2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,15 +1,13 @@\n mod foomod {\n-    pub struct Foo { // { dg-warning \"unused name\" }\n-    }\n+    pub struct Foo {}\n }\n \n impl foomod::Foo {\n     pub fn new() -> Self {\n-        foomod::Foo {\n-        }\n+        foomod::Foo {}\n     }\n }\n- \n+\n fn main() {\n-   let _a = foomod::Foo::new();\n+    let _a = foomod::Foo::new();\n }"}, {"sha": "466f7ee7a147611129154a86a2bcd5676423437f", "filename": "gcc/testsuite/rust/compile/torture/must_use2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmust_use2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmust_use2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmust_use2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,7 +1,6 @@\n trait A {\n     #[must_use]\n     fn test() -> i32;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct S;"}, {"sha": "2b2746aba7acc16a64e3248c11b1c11d69deac20", "filename": "gcc/testsuite/rust/compile/torture/struct_init_4.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fstruct_init_4.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,12 +1,13 @@\n struct Foo {\n     a: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n     b: i32,\n-// { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n+    // { dg-warning \"field is never read\" \"\" { target *-*-* } .-1 }\n }\n \n fn main() {\n     let a = Foo { a: 1, b: 2 };\n+    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n     let b = Foo { a: 3, b: 4, ..a };\n     // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "90357738a81d26e29cd2bee102daf262b6e09caf", "filename": "gcc/testsuite/rust/compile/torture/traits1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,5 @@\n trait Foo {\n     fn bar() -> i32;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct Test(i32, f32);"}, {"sha": "a02927007b3445640e8070a2d71ed0f233786f2f", "filename": "gcc/testsuite/rust/compile/torture/traits10.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits10.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -2,7 +2,6 @@ trait Foo // where\n //     Self: Sized,\n {\n     fn get(self) -> i32;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn test(self) -> i32 {\n         self.get()"}, {"sha": "63319dd2daa78314f3a57e67f96a42d1b3e881db", "filename": "gcc/testsuite/rust/compile/torture/traits18.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits18.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits18.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits18.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,8 +1,5 @@\n trait Foo<'a> {}\n \n trait Bar {\n-    // { dg-warning \"unused name .Bar.\" \"\" { target *-*-* } .-1 }\n-\n     type Item: for<'a> Foo<'a>;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }"}, {"sha": "fc6eb6002e0e57df938641cde51f345e8225e0dd", "filename": "gcc/testsuite/rust/compile/torture/traits2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,5 @@\n trait Foo {\n     fn bar() -> i32;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct Test<T>(T);"}, {"sha": "deeb81e0946cfc8d3f996d966b1f29c25534a286", "filename": "gcc/testsuite/rust/compile/torture/traits3.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits3.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,7 +1,5 @@\n pub trait Foo {\n     fn Bar(self) -> i32;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Foo::Bar.\" \"\" { target *-*-* } .-2 }\n }\n \n struct Baz;\n@@ -10,7 +8,6 @@ struct Baz;\n impl Foo for Baz {\n     fn Bar(self) -> i32 {\n         // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name .<Baz as Foo>::Bar.\" \"\" { target *-*-* } .-2 }\n         123\n     }\n }"}, {"sha": "67b012c11f587d82eee65c6a1dc8cd8e7ed63706", "filename": "gcc/testsuite/rust/compile/torture/traits4.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -3,9 +3,6 @@ trait Foo {\n     type B;\n \n     fn new(a: Self::A, b: Self::B) -> Self;\n-    // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .b.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .Foo::new.\" \"\" { target *-*-* } .-3 }\n }\n \n struct Baz(i32, f32);"}, {"sha": "445b0658f5c29f32e492f953d72bdce4b4014f1b", "filename": "gcc/testsuite/rust/compile/torture/traits5.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -3,9 +3,6 @@ trait Foo {\n     type B;\n \n     fn new(a: Self::A, b: Self::B) -> Self;\n-    // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .b.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .Foo::new.\" \"\" { target *-*-* } .-3 }\n }\n \n struct Baz(i32, f32);"}, {"sha": "260dde3f465d9fd40d7e19a84091cd70f8dab494", "filename": "gcc/testsuite/rust/compile/torture/traits6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -2,8 +2,6 @@ trait Foo {\n     type A;\n \n     fn baz(a: Self::A) -> Self::A;\n-    // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Foo::baz.\" \"\" { target *-*-* } .-2 }\n }\n \n struct Bar<T>(T);"}, {"sha": "7bc3384ab412d4274fdea80dc677f8a17a43a5e2", "filename": "gcc/testsuite/rust/compile/torture/traits7.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits7.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,10 +1,7 @@\n trait Foo {\n     const A: i32;\n-    // { dg-warning \"unused name .Foo::A.\" \"\" { target *-*-* } .-1 }\n \n     fn test(self);\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Foo::test.\" \"\" { target *-*-* } .-2 }\n }\n \n struct Bar;"}, {"sha": "459032fb4a2d1c0ba49783ac7d3a7597964fc034", "filename": "gcc/testsuite/rust/compile/torture/traits8.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits8.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -7,7 +7,6 @@ struct Bar(i32);\n \n impl Foo for Bar {\n     fn default() -> i32 {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         123\n     }\n }"}, {"sha": "89e4bf19b0cde7838fff1affe440cdcfdba51a7c", "filename": "gcc/testsuite/rust/compile/torture/traits9.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits9.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,18 +1,15 @@\n trait Foo {\n     fn default() -> i32;\n     fn get(self) -> i32;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct Bar(i32);\n impl Foo for Bar {\n     fn default() -> i32 {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         123\n     }\n \n     fn get(self) -> i32 {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         self.0\n     }\n }"}, {"sha": "d953e3d89a14dec64e33718151d7fe918c60c893", "filename": "gcc/testsuite/rust/compile/torture/tuple_enum_variants.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_enum_variants.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,8 +1,7 @@\n-enum E        // { dg-warning \"unused name\" }\n-{\n-  T0(),       // { dg-warning \"unused name\" }\n-  T1(i32),    // { dg-warning \"unused name\" }\n-  T2(i32,u32) // { dg-warning \"unused name\" }\n+enum E {\n+    T0(),\n+    T1(i32),\n+    T2(i32, u32),\n }\n \n /* The following doesn't parse yet..."}, {"sha": "8da0a50632b78282b4d11dea0588fcb83ccdd7a8", "filename": "gcc/testsuite/rust/compile/torture/tuple_struct_unused.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftuple_struct_unused.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,4 @@\n struct Foo(i32, i32);\n // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n-// { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n \n-fn main() {\n-}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "db7eb8fc1fcd9a2ac5333c63c523a1315be6aec8", "filename": "gcc/testsuite/rust/compile/torture/unused1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -4,7 +4,6 @@ fn test() -> i32 {\n \n fn unused() -> i32 {\n     // { dg-warning \"function is never used: 'unused'\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     2\n }\n "}, {"sha": "ba9ec3250cf3a3d0e01083b027ce5de758cb1249", "filename": "gcc/testsuite/rust/compile/torture/unused_struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,6 +1,5 @@\n struct Foo {\n     // { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     one: i32,\n     two: i32,\n }"}, {"sha": "b22590a52bbb66efc99cd7d409c81ac6b00ab054", "filename": "gcc/testsuite/rust/compile/traits8.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftraits8.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,11 +1,9 @@\n trait A {\n     fn get(self) -> f64;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n trait B {\n     fn get(self) -> u8;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct Foo(u8, f64);"}, {"sha": "2cdb9bbca3821ffd6b229e077417a37059984f5b", "filename": "gcc/testsuite/rust/execute/torture/coercion1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,12 +6,10 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "12dd68ff5f7415e90bed1707a373d66a328b5083", "filename": "gcc/testsuite/rust/execute/torture/coercion2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fcoercion2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,12 +6,10 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "02cedf29b3c89be8f496d9d1db8159a2302d8739", "filename": "gcc/testsuite/rust/execute/torture/match2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmatch2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -12,7 +12,6 @@ fn inspect(f: Foo) -> i32 {\n     match f {\n         Foo::C(x) => x,\n         Foo::D { x, y } => y,\n-        // { dg-warning \"unused name .x.\" \"\" { target *-*-* } .-1 }\n     }\n }\n "}, {"sha": "700393850afed3cc5b5bb6163accb3ed3bba481b", "filename": "gcc/testsuite/rust/execute/torture/mod1.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmod1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -1,25 +1,21 @@\n mod A {\n-    pub mod B {  // { dg-warning \"unused name\" }\n-        pub mod C { // { dg-warning \"unused name\" }\n+    pub mod B {\n+        pub mod C {\n             pub struct Foo {\n                 pub f: i32,\n             }\n             impl Foo {\n-                pub fn new() -> Self {  // { dg-warning \"unused name\" }\n-                    Foo {\n-                        f: 23i32,\n-                    }\n+                pub fn new() -> Self {\n+                    Foo { f: 23i32 }\n                 }\n             }\n         }\n     }\n }\n \n-fn main() ->i32 {\n+fn main() -> i32 {\n     let a = A::B::C::Foo::new();\n-    let b = A::B::C::Foo {\n-        f: -23i32,\n-    };\n+    let b = A::B::C::Foo { f: -23i32 };\n \n     a.f + b.f\n }"}, {"sha": "5a28c5f4e9383539ba09827124ed8a9eb40674e2", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,9 +8,6 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .rhs.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .Add::add.\" \"\" { target *-*-* } .-3 }\n }\n \n impl Add for i32 {"}, {"sha": "f5d45db5338bd1e59406341d12a4d1196474d329", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_10.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_10.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,15 +8,12 @@ pub trait Deref {\n     type Target;\n \n     fn deref(&self) -> &Self::Target;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Deref::deref.\" \"\" { target *-*-* } .-2 }\n }\n \n impl<T> Deref for &T {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"imm_deref\\n\\0\";\n             let b = a as *const str;\n@@ -33,7 +30,6 @@ impl<T> Deref for &mut T {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"mut_deref\\n\\0\";\n             let b = a as *const str;"}, {"sha": "a577718451d07f7714e4bd5d4b5e029bd2bedced", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,9 +8,6 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .rhs.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .Add::add.\" \"\" { target *-*-* } .-3 }\n }\n \n struct Foo(i32);"}, {"sha": "57f58076c3eb8748249789475c4ad25ffc568ca4", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_3.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,9 +8,6 @@ pub trait Add<Rhs = Self> {\n     type Output;\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .rhs.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .Add::add.\" \"\" { target *-*-* } .-3 }\n }\n \n impl Add for i32 {"}, {"sha": "ce9887b2ead10e3514ed795e95b20f24824bb9cd", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,8 +8,6 @@ pub trait Neg {\n     type Output;\n \n     fn neg(self) -> Self::Output;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Neg::neg.\" \"\" { target *-*-* } .-2 }\n }\n \n impl Neg for i32 {"}, {"sha": "a525f743680f009d6c2e34d4a065499053f50200", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,8 +8,6 @@ pub trait Not {\n     type Output;\n \n     fn not(self) -> Self::Output;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Not::not.\" \"\" { target *-*-* } .-2 }\n }\n \n impl Not for i32 {"}, {"sha": "fbd2a8fa9d39d9cdad6e8b388e34b42b776078a0", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_6.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_6.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,9 +6,6 @@ extern \"C\" {\n #[lang = \"add_assign\"]\n pub trait AddAssign<Rhs = Self> {\n     fn add_assign(&mut self, rhs: Rhs);\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .rhs.\" \"\" { target *-*-* } .-2 }\n-    // { dg-warning \"unused name .AddAssign::add_assign.\" \"\" { target *-*-* } .-3 }\n }\n \n impl AddAssign for i32 {"}, {"sha": "886a7010efc693f48f3df0ddc10ddd32670d7914", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_7.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_7.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,8 +8,6 @@ pub trait Deref {\n     type Target;\n \n     fn deref(&self) -> &Self::Target;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Deref::deref.\" \"\" { target *-*-* } .-2 }\n }\n \n impl<T> Deref for &T {"}, {"sha": "862e29a4bc64b599f566fa10ed833e3dbed46951", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_8.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_8.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,8 +8,6 @@ pub trait Deref {\n     type Target;\n \n     fn deref(&self) -> &Self::Target;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Deref::deref.\" \"\" { target *-*-* } .-2 }\n }\n \n impl<T> Deref for &T {\n@@ -32,7 +30,6 @@ impl<T> Deref for &mut T {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"mut_deref\\n\\0\";\n             let b = a as *const str;"}, {"sha": "fd972e28ab35fb08558f0a13b3ebebc347446a22", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_9.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_9.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -8,15 +8,12 @@ pub trait Deref {\n     type Target;\n \n     fn deref(&self) -> &Self::Target;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .Deref::deref.\" \"\" { target *-*-* } .-2 }\n }\n \n impl<T> Deref for &T {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"imm_deref\\n\\0\";\n             let b = a as *const str;"}, {"sha": "e581e324bbf7b67f73e3558dcc848801eb11faf7", "filename": "gcc/testsuite/rust/execute/torture/trait10.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait10.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,12 +6,10 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "283c9ecd0ede503344f7dd69959ba29448bc832e", "filename": "gcc/testsuite/rust/execute/torture/trait11.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait11.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -5,15 +5,12 @@ extern \"C\" {\n \n trait FnLike<A, R> {\n     fn call(&self, arg: A) -> R;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .arg.\" \"\" { target *-*-* } .-2 }\n }\n \n struct S;\n impl<'a, T> FnLike<&'a T, &'a T> for S {\n     fn call(&self, arg: &'a T) -> &'a T {\n         // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         arg\n     }\n }"}, {"sha": "68b0a4014ad8d99a3857681ba7c5d35bdbcf2bb2", "filename": "gcc/testsuite/rust/execute/torture/trait12.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait12.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -5,8 +5,6 @@ extern \"C\" {\n \n trait FnLike<A, R> {\n     fn call(&self, arg: A) -> R;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .arg.\" \"\" { target *-*-* } .-2 }\n }\n \n type FnObject<'b> = dyn for<'a> FnLike<&'a isize, &'a isize> + 'b;\n@@ -16,7 +14,6 @@ struct Identity;\n impl<'a, T> FnLike<&'a T, &'a T> for Identity {\n     fn call(&self, arg: &'a T) -> &'a T {\n         // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n         arg\n     }\n }"}, {"sha": "3071da27a6a84f83bd6c49a5a7258bf064462c4e", "filename": "gcc/testsuite/rust/execute/torture/trait13.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait13.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn qux(&self) {\n         // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n@@ -22,7 +21,6 @@ trait Bar {\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "8c0d257cd7e9f4762f1fad71a6cd34eea3b1e816", "filename": "gcc/testsuite/rust/execute/torture/trait4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait4.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,12 +6,10 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "49f11a6085a4bcad296b5c8e560a5359d7c8c5f6", "filename": "gcc/testsuite/rust/execute/torture/trait5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait5.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -6,12 +6,10 @@ extern \"C\" {\n struct Foo(i32);\n trait Bar {\n     fn baz(&self);\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n impl Bar for Foo {\n     fn baz(&self) {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         unsafe {\n             let a = \"%i\\n\\0\";\n             let b = a as *const str;"}, {"sha": "c83d6666c878c07cf47f8f5cf9a66d4480742aa9", "filename": "gcc/testsuite/rust/execute/torture/trait6.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait6.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -7,15 +7,13 @@ pub trait Foo {\n     type A;\n \n     fn bar(self) -> Self::A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct S(i32);\n impl Foo for S {\n     type A = i32;\n \n     fn bar(self) -> Self::A {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         self.0\n     }\n }"}, {"sha": "064f88d5de947033b5927c51d5210fda40ca4529", "filename": "gcc/testsuite/rust/execute/torture/trait7.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait7.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -7,15 +7,13 @@ pub trait Foo {\n     type A;\n \n     fn bar(self) -> Self::A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct S(i32);\n impl Foo for S {\n     type A = i32;\n \n     fn bar(self) -> Self::A {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         self.0\n     }\n }"}, {"sha": "14392ff0ccac2ad4e90d3deb2a51af1c1a3f1b98", "filename": "gcc/testsuite/rust/execute/torture/trait8.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait8.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -7,15 +7,13 @@ pub trait Foo {\n     type A;\n \n     fn bar(&self) -> Self::A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n }\n \n struct S(i32);\n impl Foo for S {\n     type A = i32;\n \n     fn bar(&self) -> Self::A {\n-        // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n         self.0\n     }\n }"}, {"sha": "c0e6d36f183439820e27cf65628c996eee107129", "filename": "gcc/testsuite/rust/execute/torture/trait9.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/865b6090a8f8981cdfc050ea2ee44abbe92de141/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Ftrait9.rs?ref=865b6090a8f8981cdfc050ea2ee44abbe92de141", "patch": "@@ -5,15 +5,12 @@ extern \"C\" {\n \n trait FnLike<A, R> {\n     fn call(&self, arg: A) -> R;\n-    // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name .arg.\" \"\" { target *-*-* } .-2 }\n }\n \n struct S;\n impl<T> FnLike<&T, &T> for S {\n     fn call(&self, arg: &T) -> &T {\n         // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }\n-        // { dg-warning \"unused name .<S as FnLike>::call.\" \"\" { target *-*-* } .-2 }\n         arg\n     }\n }"}]}