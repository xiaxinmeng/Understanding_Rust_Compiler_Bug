{"sha": "f33223159d5b3073f6452405839291811ba41539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMzMjIzMTU5ZDViMzA3M2Y2NDUyNDA1ODM5MjkxODExYmE0MTUzOQ==", "commit": {"author": {"name": "Oleg Endo", "email": "oleg.endo@t-online.de", "date": "2011-12-26T23:00:14Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-12-26T23:00:14Z"}, "message": "sync.md: Add soft atomics ABI description.\n\n\t* config/sh/sync.md: Add soft atomics ABI description.\n\t(fetchop_name): Use 'or' instead of 'ior'.\n\t(fetchop_insn): Remove.\n\t(atomic_compare_and_swap<mode>_soft):\n        Don't insert aligning nop after the write-back instruction.  Fix\n\tmulti-line asm output formatting style.\n        (atomic_fetch_<fetchop_name><mode>_soft): Likewise.\n        (atomic_fetch_nand<mode>_soft): Likewise.\n        (atomic_<fetchop_name>_fetch<mode>_soft): Likewise.\n        (atomic_nand_fetch<mode>_soft): Likewise.\n\nFrom-SVN: r182686", "tree": {"sha": "3fc4a4316e0e0856ef665c87debb86ec03579d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fc4a4316e0e0856ef665c87debb86ec03579d12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f33223159d5b3073f6452405839291811ba41539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33223159d5b3073f6452405839291811ba41539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33223159d5b3073f6452405839291811ba41539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33223159d5b3073f6452405839291811ba41539/comments", "author": {"login": "olegendo", "id": 1380209, "node_id": "MDQ6VXNlcjEzODAyMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1380209?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olegendo", "html_url": "https://github.com/olegendo", "followers_url": "https://api.github.com/users/olegendo/followers", "following_url": "https://api.github.com/users/olegendo/following{/other_user}", "gists_url": "https://api.github.com/users/olegendo/gists{/gist_id}", "starred_url": "https://api.github.com/users/olegendo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olegendo/subscriptions", "organizations_url": "https://api.github.com/users/olegendo/orgs", "repos_url": "https://api.github.com/users/olegendo/repos", "events_url": "https://api.github.com/users/olegendo/events{/privacy}", "received_events_url": "https://api.github.com/users/olegendo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f93519addbd67c201ccb9f70a098077ab3d72078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f93519addbd67c201ccb9f70a098077ab3d72078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f93519addbd67c201ccb9f70a098077ab3d72078"}], "stats": {"total": 202, "additions": 135, "deletions": 67}, "files": [{"sha": "b9af2b7e3965d70a09c9cfb6ebe15bf6eac0e106", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33223159d5b3073f6452405839291811ba41539/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33223159d5b3073f6452405839291811ba41539/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f33223159d5b3073f6452405839291811ba41539", "patch": "@@ -1,3 +1,16 @@\n+2011-12-26  Oleg Endo  <oleg.endo@t-online.de>\n+\n+\t* config/sh/sync.md: Add soft atomics ABI description.\n+\t(fetchop_name): Use 'or' instead of 'ior'.\n+\t(fetchop_insn): Remove.\n+\t(atomic_compare_and_swap<mode>_soft):\n+        Don't insert aligning nop after the write-back instruction.  Fix\n+\tmulti-line asm output formatting style.\n+        (atomic_fetch_<fetchop_name><mode>_soft): Likewise.\n+        (atomic_fetch_nand<mode>_soft): Likewise.\n+        (atomic_<fetchop_name>_fetch<mode>_soft): Likewise.\n+        (atomic_nand_fetch<mode>_soft): Likewise.\n+\n 2011-12-23  Richard Henderson  <rth@redhat.com>\n \n \t* tree.def (VEC_EXTRACT_EVEN_EXPR, VEC_EXTRACT_ODD_EXPR): Remove."}, {"sha": "6b397e28db6786460236d9ca0399b18d17b1a8ac", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 122, "deletions": 67, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f33223159d5b3073f6452405839291811ba41539/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f33223159d5b3073f6452405839291811ba41539/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=f33223159d5b3073f6452405839291811ba41539", "patch": "@@ -17,6 +17,77 @@\n ;; You should have received a copy of the GNU General Public License\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n+;;\n+;;\n+;; Atomic integer operations for the Renesas / SuperH SH CPUs.\n+;;\n+;; On single-core systems there can only be one execution context running\n+;; at a given point in time.  This allows the usage of rewindable atomic\n+;; sequences, which effectively emulate locked-load / conditional-store\n+;; operations.\n+;; When an execution context is interrupted while it is an atomic\n+;; sequence, the interrupted context's PC is rewound to the beginning of\n+;; the atomic sequence by the interrupt / exception handling code, before\n+;; transferring control to another execution context.  This is done by\n+;; something like...\n+;;\n+;;\tif (interrupted_context_in_atomic_sequence\n+;;\t    && interrupted_pc < atomic_exitpoint)\n+;;\t  interrupted_pc = atomic_entrypoint;\n+;;\n+;; This method is also known as gUSA (\"g\" User Space Atomicity) and the\n+;; Linux kernel for SH3/SH4 implements support for such software\n+;; atomic sequences.  However, it can also be implemented in freestanding\n+;; environments.\n+;;\n+;; For this the following atomic sequence ABI is used.\n+;;\n+;; r15 >= 0:\tExecution context is not in an atomic sequence.\n+;;\n+;; r15  < 0:\tExecution context is in an atomic sequence and r15\n+;;\t\tholds the negative byte length of the atomic sequence.\n+;;\t\tIn this case the following applies:\n+;;\n+;;\t\tr0:\tPC of the first instruction after the atomic\n+;;\t\t\twrite-back instruction (exit point).\n+;;\t\t\tThe entry point PC of the atomic sequence can be \n+;;\t\t\tdetermined by doing r0 + r15.\n+;;\n+;;\t\tr1:\tSaved r15 stack pointer before entering the\n+;;\t\t\tatomic sequence.\n+;;\n+;; An example atomic add sequence would look like:\n+;;\n+;;\tmova\t.Lend,r0\t\t! .Lend must be 4-byte aligned.\n+;;\tmov\tr15,r1\n+;;\t.align 2\t\t\t! Insert aligning nop if needed.\n+;;\tmov\t#(.Lstart - .Lend),r15\t! Enter atomic sequence\n+;;.Lstart:\n+;;\tmov.l\t@r4,r2\t\t\t! read value\n+;;\tadd\tr2,r5\t\t\t! modify value\n+;;\tmov.l\tr5,@r4\t\t\t! write-back\n+;;.Lend:\n+;;\tmov\tr1,r15\t\t\t! Exit atomic sequence\n+;;\t\t\t\t\t! r2 holds the previous value.\n+;;\t\t\t\t\t! r5 holds the new value.\n+;;\n+;; Notice that due to the restrictions of the mova instruction, the .Lend\n+;; label must always be 4-byte aligned.  Aligning the .Lend label would\n+;; potentially insert a nop after the write-back instruction which could\n+;; make the sequence to be rewound, although it has already passed the\n+;; write-back instruction.  This would make it execute twice.\n+;; For correct operation the atomic sequences must not be rewound after\n+;; they have passed the write-back instruction.\n+;;\n+;; The current implementation is limited to QImode, HImode and SImode \n+;; atomic operations.  DImode operations could also be implemented but\n+;; would require some ABI modifications to support multiple-instruction\n+;; write-back.  This is because SH1/SH2/SH3/SH4 does not have a DImode\n+;; store instruction.  DImode stores must be split into two SImode stores.\n+;;\n+;; For some operations it would be possible to use insns with an immediate\n+;; operand such as add #imm,Rn.  However, since the original value before\n+;; the operation also needs to be available, this is not so handy.\n \n (define_c_enum \"unspec\" [\n   UNSPEC_ATOMIC\n@@ -35,14 +106,8 @@\n \n (define_code_iterator FETCHOP [plus minus ior xor and])\n (define_code_attr fetchop_name\n-  [(plus \"add\") (minus \"sub\") (ior \"ior\") (xor \"xor\") (and \"and\")])\n-(define_code_attr fetchop_insn\n   [(plus \"add\") (minus \"sub\") (ior \"or\") (xor \"xor\") (and \"and\")])\n \n-;; Linux specific atomic patterns for the Renesas / SuperH SH CPUs.\n-;; Linux kernel for SH3/4 has implemented the support for software\n-;; atomic sequences.\n-\n (define_expand \"atomic_compare_and_swap<mode>\"\n   [(match_operand:QI 0 \"register_operand\" \"\")\t\t;; bool success output\n    (match_operand:I124 1 \"register_operand\" \"\")\t\t;; oldval output\n@@ -85,20 +150,18 @@\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n-  \"*\n {\n-  return \\\"\\\\\n-mova\\\\t1f, r0\\\\n\\\\\n-\\\\t<i124extend_insn>\\\\t%2, %4\\\\n\\\\\n-\\\\tmov\\\\tr15, r1\\\\n\\\\\n-\\\\tmov\\\\t#(0f-1f), r15\\\\n\\\\\n-0:\\\\tmov.<i124suffix>\\\\t@%1, %0\\\\n\\\\\n-\\\\tcmp/eq\\\\t%0, %4\\\\n\\\\\n-\\\\tbf\\\\t1f\\\\n\\\\\n-\\\\tmov.<i124suffix>\\\\t%3, @%1\\\\n\\\\\n-\\\\t.align\\\\t2\\\\n\\\\\n-1:\\\\tmov\\tr1, r15\\\";\n-}\"\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\t<i124extend_insn>\t%2,%4\"\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\tcmp/eq\t%0,%4\"\t\t\t\"\\n\"\n+\t \"\tbf\t1f\"\t\t\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n   [(set_attr \"length\" \"20\")])\n \n (define_expand \"atomic_fetch_<fetchop_name><mode>\"\n@@ -138,19 +201,17 @@ mova\\\\t1f, r0\\\\n\\\\\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n-  \"*\n {\n-  return \\\"\\\\\n-mova\\\\t1f, r0\\\\n\\\\\n-\\\\tmov\\\\tr15, r1\\\\n\\\\\n-\\\\tmov\\\\t#(0f-1f), r15\\\\n\\\\\n-0:\\\\tmov.<i124suffix>\\\\t@%1, %0\\\\n\\\\\n-\\\\tmov\\\\t%0, %3\\\\n\\\\\n-\\\\t<fetchop_insn>\\\\t%2, %3\\\\n\\\\\n-\\\\tmov.<i124suffix>\\\\t%3, @%1\\\\n\\\\\n-\\\\t.align\\\\t2\\\\n\\\\\n-1:\\\\tmov\\tr1, r15\\\";\n-}\"\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\tmov\t%0,%3\"\t\t\t\"\\n\"\n+\t \"\t<fetchop_name>\t%2,%3\"\t\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n   [(set_attr \"length\" \"18\")])\n \n (define_expand \"atomic_fetch_nand<mode>\"\n@@ -190,20 +251,18 @@ mova\\\\t1f, r0\\\\n\\\\\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n-  \"*\n {\n-  return \\\"\\\\\n-mova\\\\t1f, r0\\\\n\\\\\n-\\\\tmov\\\\tr15, r1\\\\n\\\\\n-\\\\tmov\\\\t#(0f-1f), r15\\\\n\\\\\n-0:\\\\tmov.<i124suffix>\\\\t@%1, %0\\\\n\\\\\n-\\\\tmov\\\\t%2, %3\\\\n\\\\\n-\\\\tand\\\\t%0, %3\\\\n\\\\\n-\\\\tnot\\\\t%3, %3\\\\n\\\\\n-\\\\tmov.<i124suffix>\\\\t%3, @%1\\\\n\\\\\n-\\\\t.align\\\\t2\\\\n\\\\\n-1:\\\\tmov\\tr1, r15\\\";\n-}\"\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\tmov\t%2,%3\"\t\t\t\"\\n\"\n+\t \"\tand\t%0,%3\"\t\t\t\"\\n\"\n+\t \"\tnot\t%3,%3\"\t\t\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%3,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n   [(set_attr \"length\" \"20\")])\n \n (define_expand \"atomic_<fetchop_name>_fetch<mode>\"\n@@ -244,18 +303,16 @@ mova\\\\t1f, r0\\\\n\\\\\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n-  \"*\n {\n-  return \\\"\\\\\n-mova\\\\t1f, r0\\\\n\\\\\n-\\\\tmov\\\\tr15, r1\\\\n\\\\\n-\\\\tmov\\\\t#(0f-1f), r15\\\\n\\\\\n-0:\\\\tmov.<i124suffix>\\\\t@%1, %0\\\\n\\\\\n-\\\\t<fetchop_insn>\\\\t%2, %0\\\\n\\\\\n-\\\\tmov.<i124suffix>\\\\t%0, @%1\\\\n\\\\\n-\\\\t.align\\\\t2\\\\n\\\\\n-1:\\\\tmov\\tr1, r15\\\";\n-}\"\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\t<fetchop_name>\t%2,%0\"\t\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%0,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n   [(set_attr \"length\" \"16\")])\n \n (define_expand \"atomic_nand_fetch<mode>\"\n@@ -296,17 +353,15 @@ mova\\\\t1f, r0\\\\n\\\\\n    (clobber (reg:SI R0_REG))\n    (clobber (reg:SI R1_REG))]\n   \"TARGET_SOFT_ATOMIC && !TARGET_SHMEDIA\"\n-  \"*\n {\n-  return \\\"\\\\\n-mova\\\\t1f, r0\\\\n\\\\\n-\\\\tmov\\\\tr15, r1\\\\n\\\\\n-\\\\tmov\\\\t#(0f-1f), r15\\\\n\\\\\n-0:\\\\tmov.<i124suffix>\\\\t@%1, %0\\\\n\\\\\n-\\\\tand\\\\t%2, %0\\\\n\\\\\n-\\\\tnot\\\\t%0, %0\\\\n\\\\\n-\\\\tmov.<i124suffix>\\\\t%0, @%1\\\\n\\\\\n-\\\\t.align\\\\t2\\\\n\\\\\n-1:\\\\tmov\\tr1, r15\\\";\n-}\"\n+  return \"mova\t1f,r0\"\t\t\t\t\"\\n\"\n+\t \"\t.align 2\"\t\t\t\"\\n\"\n+\t \"\tmov\tr15,r1\"\t\t\t\"\\n\"\n+\t \"\tmov\t#(0f-1f),r15\"\t\t\"\\n\"\n+\t \"0:\tmov.<i124suffix>\t@%1,%0\"\t\"\\n\"\n+\t \"\tand\t%2,%0\"\t\t\t\"\\n\"\n+\t \"\tnot\t%0,%0\"\t\t\t\"\\n\"\n+\t \"\tmov.<i124suffix>\t%0,@%1\"\t\"\\n\"\n+\t \"1:\tmov\tr1,r15\";\n+}\n   [(set_attr \"length\" \"18\")])"}]}