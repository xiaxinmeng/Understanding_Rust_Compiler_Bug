{"sha": "b5081130166a4f2e363f116e0e6b43d83422c947", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwODExMzAxNjZhNGYyZTM2M2YxMTZlMGU2YjQzZDgzNDIyYzk0Nw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-28T18:45:59Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-28T18:46:03Z"}, "message": "analyzer: remove redundant return value from various impl_call_*\n\ngcc/analyzer/ChangeLog:\n\t* region-model-impl-calls.cc (region_model::impl_call_alloca):\n\tDrop redundant return value.\n\t(region_model::impl_call_builtin_expect): Likewise.\n\t(region_model::impl_call_calloc): Likewise.\n\t(region_model::impl_call_malloc): Likewise.\n\t(region_model::impl_call_memset): Likewise.\n\t(region_model::impl_call_operator_new): Likewise.\n\t(region_model::impl_call_operator_delete): Likewise.\n\t(region_model::impl_call_strlen): Likewise.\n\t* region-model.cc (region_model::on_call_pre): Fix return value of\n\tknown functions that don't have unknown side-effects.\n\t* region-model.h (region_model::impl_call_alloca): Drop redundant\n\treturn value.\n\t(region_model::impl_call_builtin_expect): Likewise.\n\t(region_model::impl_call_calloc): Likewise.\n\t(region_model::impl_call_malloc): Likewise.\n\t(region_model::impl_call_memset): Likewise.\n\t(region_model::impl_call_strlen): Likewise.\n\t(region_model::impl_call_operator_new): Likewise.\n\t(region_model::impl_call_operator_delete): Likewise.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "a7c73801a941661a603f9548fd509fb2f7c9d8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c73801a941661a603f9548fd509fb2f7c9d8b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5081130166a4f2e363f116e0e6b43d83422c947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5081130166a4f2e363f116e0e6b43d83422c947", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5081130166a4f2e363f116e0e6b43d83422c947", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5081130166a4f2e363f116e0e6b43d83422c947/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94"}], "stats": {"total": 96, "additions": 53, "deletions": 43}, "files": [{"sha": "e5a6cb2e154f903ad9222b673ffe48a8e5a05dc3", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=b5081130166a4f2e363f116e0e6b43d83422c947", "patch": "@@ -207,15 +207,14 @@ call_details::get_or_create_conjured_svalue (const region *reg) const\n \n /* Handle the on_call_pre part of \"alloca\".  */\n \n-bool\n+void\n region_model::impl_call_alloca (const call_details &cd)\n {\n   const svalue *size_sval = cd.get_arg_svalue (0);\n   const region *new_reg = create_region_for_alloca (size_sval);\n   const svalue *ptr_sval\n     = m_mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n   cd.maybe_set_lhs (ptr_sval);\n-  return true;\n }\n \n /* Handle a call to \"__analyzer_describe\".\n@@ -274,18 +273,17 @@ region_model::impl_call_analyzer_eval (const gcall *call,\n \n /* Handle the on_call_pre part of \"__builtin_expect\" etc.  */\n \n-bool\n+void\n region_model::impl_call_builtin_expect (const call_details &cd)\n {\n   /* __builtin_expect's return value is its initial argument.  */\n   const svalue *sval = cd.get_arg_svalue (0);\n   cd.maybe_set_lhs (sval);\n-  return false;\n }\n \n /* Handle the on_call_pre part of \"calloc\".  */\n \n-bool\n+void\n region_model::impl_call_calloc (const call_details &cd)\n {\n   const svalue *nmemb_sval = cd.get_arg_svalue (0);\n@@ -302,7 +300,6 @@ region_model::impl_call_calloc (const call_details &cd)\n \t= m_mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n       cd.maybe_set_lhs (ptr_sval);\n     }\n-  return true;\n }\n \n /* Handle the on_call_pre part of \"error\" and \"error_at_line\" from\n@@ -397,7 +394,7 @@ region_model::impl_call_free (const call_details &cd)\n \n /* Handle the on_call_pre part of \"malloc\".  */\n \n-bool\n+void\n region_model::impl_call_malloc (const call_details &cd)\n {\n   const svalue *size_sval = cd.get_arg_svalue (0);\n@@ -408,7 +405,6 @@ region_model::impl_call_malloc (const call_details &cd)\n \t= m_mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n       cd.maybe_set_lhs (ptr_sval);\n     }\n-  return true;\n }\n \n /* Handle the on_call_pre part of \"memcpy\" and \"__builtin_memcpy\".  */\n@@ -439,7 +435,7 @@ region_model::impl_call_memcpy (const call_details &cd)\n \n /* Handle the on_call_pre part of \"memset\" and \"__builtin_memset\".  */\n \n-bool\n+void\n region_model::impl_call_memset (const call_details &cd)\n {\n   const svalue *dest_sval = cd.get_arg_svalue (0);\n@@ -457,12 +453,11 @@ region_model::impl_call_memset (const call_details &cd)\n \t\t\t\t\t\t\t  num_bytes_sval);\n   check_region_for_write (sized_dest_reg, cd.get_ctxt ());\n   fill_region (sized_dest_reg, fill_value_u8);\n-  return true;\n }\n \n /* Handle the on_call_pre part of \"operator new\".  */\n \n-bool\n+void\n region_model::impl_call_operator_new (const call_details &cd)\n {\n   const svalue *size_sval = cd.get_arg_svalue (0);\n@@ -473,14 +468,13 @@ region_model::impl_call_operator_new (const call_details &cd)\n \t= m_mgr->get_ptr_svalue (cd.get_lhs_type (), new_reg);\n       cd.maybe_set_lhs (ptr_sval);\n     }\n-  return false;\n }\n \n /* Handle the on_call_pre part of \"operator delete\", which comes in\n    both sized and unsized variants (2 arguments and 1 argument\n    respectively).  */\n \n-bool\n+void\n region_model::impl_call_operator_delete (const call_details &cd)\n {\n   const svalue *ptr_sval = cd.get_arg_svalue (0);\n@@ -490,7 +484,6 @@ region_model::impl_call_operator_delete (const call_details &cd)\n \t poisoning pointers.  */\n       unbind_region_and_descendents (freed_reg, POISON_KIND_FREED);\n     }\n-  return false;\n }\n \n /* Handle the on_call_pre part of \"realloc\".  */\n@@ -521,10 +514,9 @@ region_model::impl_call_strcpy (const call_details &cd)\n   mark_region_as_unknown (dest_reg, cd.get_uncertainty ());\n }\n \n-/* Handle the on_call_pre part of \"strlen\".\n-   Return true if the LHS is updated.  */\n+/* Handle the on_call_pre part of \"strlen\".  */\n \n-bool\n+void\n region_model::impl_call_strlen (const call_details &cd)\n {\n   region_model_context *ctxt = cd.get_ctxt ();\n@@ -543,11 +535,10 @@ region_model::impl_call_strlen (const call_details &cd)\n \t  const svalue *result_sval\n \t    = m_mgr->get_or_create_constant_svalue (t_cst);\n \t  cd.maybe_set_lhs (result_sval);\n-\t  return true;\n+\t  return;\n \t}\n     }\n-  /* Otherwise an unknown value.  */\n-  return true;\n+  /* Otherwise a conjured value.  */\n }\n \n /* Handle calls to functions referenced by"}, {"sha": "92fa917d14d786c8cdd47c1f2575703ac4cc4abb", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=b5081130166a4f2e363f116e0e6b43d83422c947", "patch": "@@ -1080,7 +1080,8 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n        default:\n \t break;\n        case IFN_BUILTIN_EXPECT:\n-\t return impl_call_builtin_expect (cd);\n+\t impl_call_builtin_expect (cd);\n+\t return false;\n        }\n     }\n \n@@ -1101,17 +1102,21 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t    break;\n \t  case BUILT_IN_ALLOCA:\n \t  case BUILT_IN_ALLOCA_WITH_ALIGN:\n-\t    return impl_call_alloca (cd);\n+\t    impl_call_alloca (cd);\n+\t    return false;\n \t  case BUILT_IN_CALLOC:\n-\t    return impl_call_calloc (cd);\n+\t    impl_call_calloc (cd);\n+\t    return false;\n \t  case BUILT_IN_EXPECT:\n \t  case BUILT_IN_EXPECT_WITH_PROBABILITY:\n-\t    return impl_call_builtin_expect (cd);\n+\t    impl_call_builtin_expect (cd);\n+\t    return false;\n \t  case BUILT_IN_FREE:\n \t    /* Handle in \"on_call_post\".  */\n \t    break;\n \t  case BUILT_IN_MALLOC:\n-\t    return impl_call_malloc (cd);\n+\t    impl_call_malloc (cd);\n+\t    return false;\n \t  case BUILT_IN_MEMCPY:\n \t  case BUILT_IN_MEMCPY_CHK:\n \t    impl_call_memcpy (cd);\n@@ -1129,9 +1134,8 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t    impl_call_strcpy (cd);\n \t    return false;\n \t  case BUILT_IN_STRLEN:\n-\t    if (impl_call_strlen (cd))\n-\t      return false;\n-\t    break;\n+\t    impl_call_strlen (cd);\n+\t    return false;\n \n \t  /* Stdio builtins.  */\n \t  case BUILT_IN_FPRINTF:\n@@ -1158,11 +1162,20 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n \t    break;\n \t  }\n       else if (is_named_call_p (callee_fndecl, \"malloc\", call, 1))\n-\treturn impl_call_malloc (cd);\n+\t{\n+\t  impl_call_malloc (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"calloc\", call, 2))\n-\treturn impl_call_calloc (cd);\n+\t{\n+\t  impl_call_calloc (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"alloca\", call, 1))\n-\treturn impl_call_alloca (cd);\n+\t{\n+\t  impl_call_alloca (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"realloc\", call, 2))\n \t{\n \t  impl_call_realloc (cd);\n@@ -1207,13 +1220,19 @@ region_model::on_call_pre (const gcall *call, region_model_context *ctxt,\n       else if (is_named_call_p (callee_fndecl, \"strlen\", call, 1)\n \t       && POINTER_TYPE_P (cd.get_arg_type (0)))\n \t{\n-\t  if (impl_call_strlen (cd))\n-\t    return false;\n+\t  impl_call_strlen (cd);\n+\t  return false;\n \t}\n       else if (is_named_call_p (callee_fndecl, \"operator new\", call, 1))\n-\treturn impl_call_operator_new (cd);\n+\t{\n+\t  impl_call_operator_new (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"operator new []\", call, 1))\n-\treturn impl_call_operator_new (cd);\n+\t{\n+\t  impl_call_operator_new (cd);\n+\t  return false;\n+\t}\n       else if (is_named_call_p (callee_fndecl, \"operator delete\", call, 1)\n \t       || is_named_call_p (callee_fndecl, \"operator delete\", call, 2)\n \t       || is_named_call_p (callee_fndecl, \"operator delete []\", call, 1))"}, {"sha": "d07ce9c63435c75ac1f3b4be75ad78519a4b9827", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5081130166a4f2e363f116e0e6b43d83422c947/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=b5081130166a4f2e363f116e0e6b43d83422c947", "patch": "@@ -546,28 +546,28 @@ class region_model\n   void purge_state_involving (const svalue *sval, region_model_context *ctxt);\n \n   /* Specific handling for on_call_pre.  */\n-  bool impl_call_alloca (const call_details &cd);\n+  void impl_call_alloca (const call_details &cd);\n   void impl_call_analyzer_describe (const gcall *call,\n \t\t\t\t    region_model_context *ctxt);\n   void impl_call_analyzer_dump_capacity (const gcall *call,\n \t\t\t\t\t region_model_context *ctxt);\n   void impl_call_analyzer_eval (const gcall *call,\n \t\t\t\tregion_model_context *ctxt);\n-  bool impl_call_builtin_expect (const call_details &cd);\n-  bool impl_call_calloc (const call_details &cd);\n+  void impl_call_builtin_expect (const call_details &cd);\n+  void impl_call_calloc (const call_details &cd);\n   bool impl_call_error (const call_details &cd, unsigned min_args,\n \t\t\tbool *out_terminate_path);\n   void impl_call_fgets (const call_details &cd);\n   void impl_call_fread (const call_details &cd);\n   void impl_call_free (const call_details &cd);\n-  bool impl_call_malloc (const call_details &cd);\n+  void impl_call_malloc (const call_details &cd);\n   void impl_call_memcpy (const call_details &cd);\n-  bool impl_call_memset (const call_details &cd);\n+  void impl_call_memset (const call_details &cd);\n   void impl_call_realloc (const call_details &cd);\n   void impl_call_strcpy (const call_details &cd);\n-  bool impl_call_strlen (const call_details &cd);\n-  bool impl_call_operator_new (const call_details &cd);\n-  bool impl_call_operator_delete (const call_details &cd);\n+  void impl_call_strlen (const call_details &cd);\n+  void impl_call_operator_new (const call_details &cd);\n+  void impl_call_operator_delete (const call_details &cd);\n   void impl_deallocation_call (const call_details &cd);\n \n   void handle_unrecognized_call (const gcall *call,"}]}