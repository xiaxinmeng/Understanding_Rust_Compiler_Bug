{"sha": "0802f6a2f718f63c240b0f77c319cd94fc9595c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDgwMmY2YTJmNzE4ZjYzYzI0MGIwZjc3YzMxOWNkOTRmYzk1OTVjOQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2007-02-06T13:55:01Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2007-02-06T13:55:01Z"}, "message": "tree.c (tree_int_map_hash, [...]): Remove prototypes and make them non-static.\n\ngcc:\n2007-02-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* tree.c (tree_int_map_hash, tree_int_map_eq, tree_int_map_marked_p):\n\tRemove prototypes and make them non-static.\n\t(struct tree_int_map): Remove.\n\t* tree.h (struct tree_int_map): Move here, turning TO into an\n\tunsigned int.\n\t(tree_int_map_hash, tree_int_map_eq, tree_int_map_marked_p): Declare.\n\n\t* tree.h (TREE_COMPLEXITY): Remove.\n\t(struct tree_exp): Remove complexity field.\n\t* tree.c (build1_stat): Don't set it.\n\ngcc/ada:\n2007-02-06  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* Make-lang.in (ada/decl.o): Add gt-ada-decl.h dependency.\n\t* decl.c: Include gt-ada-decl.h.\n\t(annotate_value_cache): New.\n\t(annotate_value): Use it instead of TREE_COMPLEXITY.\n\nFrom-SVN: r121647", "tree": {"sha": "a09637fe7757ea3fcdd7c1febda3075bf7765788", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a09637fe7757ea3fcdd7c1febda3075bf7765788"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0802f6a2f718f63c240b0f77c319cd94fc9595c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0802f6a2f718f63c240b0f77c319cd94fc9595c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0802f6a2f718f63c240b0f77c319cd94fc9595c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0802f6a2f718f63c240b0f77c319cd94fc9595c9/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "427e84f7fea0383ba4bc6f77a014085364896bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/427e84f7fea0383ba4bc6f77a014085364896bd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/427e84f7fea0383ba4bc6f77a014085364896bd3"}], "stats": {"total": 83, "additions": 65, "deletions": 18}, "files": [{"sha": "a3b07b0b17241cdd1195a87d060737ba97ca35d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -1,3 +1,16 @@\n+2007-02-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        * tree.c (tree_int_map_hash, tree_int_map_eq, tree_int_map_marked_p):\n+        Remove prototypes and make them non-static.\n+        (struct tree_int_map): Remove.\n+        * tree.h (struct tree_int_map): Move here, turning TO into an\n+        unsigned int.\n+        (tree_int_map_hash, tree_int_map_eq, tree_int_map_marked_p): Declare.\n+\n+        * tree.h (TREE_COMPLEXITY): Remove.\n+        (struct tree_exp): Remove complexity field.\n+        * tree.c (build1_stat): Don't set it.\n+\n 2007-02-06  Dorit Nuzman  <dorit@il.ibm.com>\n \t    Victor Kaplansky  <victork@il.ibm.com>\n "}, {"sha": "c96b7f64dfcf510c9ac97c177ffac346c8cb4e84", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -1,3 +1,10 @@\n+2007-02-06  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* Make-lang.in (ada/decl.o): Add gt-ada-decl.h dependency.\n+\t* decl.c: Include gt-ada-decl.h.\n+\t(annotate_value_cache): New.\n+\t(annotate_value): Use it instead of TREE_COMPLEXITY.\n+\n 2007-02-03  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* misc.c, utils2.c: Fix comment typos."}, {"sha": "4fada1e34badfb605773b44856b7de90da301ac7", "filename": "gcc/ada/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMake-lang.in?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -1073,7 +1073,7 @@ ada/decl.o : ada/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(FLAGS_H) toplev.h convert.h $(TARGET_H) ada/ada.h ada/types.h ada/atree.h \\\n    ada/nlists.h ada/elists.h ada/uintp.h ada/sinfo.h ada/einfo.h ada/snames.h \\\n    ada/namet.h ada/stringt.h ada/repinfo.h ada/fe.h $(ADA_TREE_H) ada/gigi.h \\\n-   $(EXPR_H)\n+   $(EXPR_H) gt-ada-decl.h\n \n ada/misc.o : ada/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(EXPR_H) insn-codes.h insn-flags.h insn-config.h recog.h \\"}, {"sha": "af0e39246b062a1c1f1584d3d822311ff3591d63", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -50,6 +50,7 @@\n #include \"fe.h\"\n #include \"sinfo.h\"\n #include \"einfo.h\"\n+#include \"hashtab.h\"\n #include \"ada-tree.h\"\n #include \"gigi.h\"\n \n@@ -80,6 +81,10 @@ static struct incomplete\n static int defer_debug_level = 0;\n static tree defer_debug_incomplete_list;\n \n+/* A hash table used as to cache the result of annotate_value.  */\n+static GTY ((if_marked (\"tree_int_map_marked_p\"), param_is (struct tree_int_map)))\n+  htab_t annotate_value_cache;\n+\n static void copy_alias_set (tree, tree);\n static tree substitution_list (Entity_Id, Entity_Id, tree, bool);\n static bool allocatable_size_p (tree, bool);\n@@ -5876,10 +5881,22 @@ annotate_value (tree gnu_size)\n   Node_Ref_Or_Val ops[3], ret;\n   int i;\n   int size;\n+  struct tree_int_map **h = NULL;\n \n   /* See if we've already saved the value for this node.  */\n-  if (EXPR_P (gnu_size) && TREE_COMPLEXITY (gnu_size))\n-    return (Node_Ref_Or_Val) TREE_COMPLEXITY (gnu_size);\n+  if (EXPR_P (gnu_size))\n+    {\n+      struct tree_int_map in;\n+      if (!annotate_value_cache)\n+        annotate_value_cache = htab_create_ggc (512, tree_int_map_hash,\n+\t\t\t\t\t        tree_int_map_eq, 0);\n+      in.from = gnu_size;\n+      h = (struct tree_int_map **)\n+\t    htab_find_slot (annotate_value_cache, &in, INSERT);\n+\n+      if (*h)\n+\treturn (Node_Ref_Or_Val) (*h)->to;\n+    }\n \n   /* If we do not return inside this switch, TCODE will be set to the\n      code to use for a Create_Node operand and LEN (set above) will be\n@@ -5994,7 +6011,15 @@ annotate_value (tree gnu_size)\n     }\n \n   ret = Create_Node (tcode, ops[0], ops[1], ops[2]);\n-  TREE_COMPLEXITY (gnu_size) = ret;\n+\n+  /* Save the result in the cache.  */\n+  if (h)\n+    {\n+      *h = ggc_alloc (sizeof (struct tree_int_map));\n+      (*h)->from = gnu_size;\n+      (*h)->to = ret;\n+    }\n+\n   return ret;\n }\n \n@@ -6847,3 +6872,5 @@ concat_id_with_name (tree gnu_id, const char *suffix)\n   strcpy (Name_Buffer + len, suffix);\n   return get_identifier (Name_Buffer);\n }\n+\n+#include \"gt-ada-decl.h\""}, {"sha": "ae20c2511e20242d7e160fa81a635fc5c0c43027", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -150,14 +150,6 @@ static GTY ((if_marked (\"tree_int_map_marked_p\"), param_is (struct tree_int_map)\n static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n   htab_t restrict_base_for_decl;\n \n-struct tree_int_map GTY(())\n-{\n-  tree from;\n-  unsigned short to;\n-};\n-static unsigned int tree_int_map_hash (const void *);\n-static int tree_int_map_eq (const void *, const void *);\n-static int tree_int_map_marked_p (const void *);\n static void set_type_quals (tree, int);\n static int type_hash_eq (const void *, const void *);\n static hashval_t type_hash_hash (const void *);\n@@ -2931,7 +2923,6 @@ build1_stat (enum tree_code code, tree type, tree node MEM_STAT_DECL)\n #else\n   SET_EXPR_LOCUS (t, NULL);\n #endif\n-  TREE_COMPLEXITY (t) = 0;\n   TREE_OPERAND (t, 0) = node;\n   TREE_BLOCK (t) = NULL_TREE;\n   if (node && !TYPE_P (node))\n@@ -4184,7 +4175,7 @@ tree_map_marked_p (const void *p)\n \n /* Return true if the trees in the tree_int_map *'s VA and VB are equal.  */\n \n-static int\n+int\n tree_int_map_eq (const void *va, const void *vb)\n {\n   const struct tree_int_map  *a = va, *b = vb;\n@@ -4193,7 +4184,7 @@ tree_int_map_eq (const void *va, const void *vb)\n \n /* Hash a from tree in the tree_int_map * ITEM.  */\n \n-static unsigned int\n+unsigned int\n tree_int_map_hash (const void *item)\n {\n   return htab_hash_pointer (((const struct tree_int_map *)item)->from);\n@@ -4203,7 +4194,7 @@ tree_int_map_hash (const void *item)\n    purposes.  We simply return true if the from tree_int_map *P's from tree is marked, so that this\n    structure goes away when the from tree goes away.  */\n \n-static int\n+int\n tree_int_map_marked_p (const void *p)\n {\n   tree from = ((struct tree_int_map *) p)->from;"}, {"sha": "55117805e3d3799052ef172e8f0bb57fbb678e84", "filename": "gcc/tree.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0802f6a2f718f63c240b0f77c319cd94fc9595c9/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0802f6a2f718f63c240b0f77c319cd94fc9595c9", "patch": "@@ -1498,7 +1498,6 @@ struct tree_constructor GTY(())\n \n /* In ordinary expression nodes.  */\n #define TREE_OPERAND(NODE, I) TREE_OPERAND_CHECK (NODE, I)\n-#define TREE_COMPLEXITY(NODE) (EXPR_CHECK (NODE)->exp.complexity)\n \n /* In gimple statements.  */\n #define GIMPLE_STMT_OPERAND(NODE, I) GIMPLE_STMT_OPERAND_CHECK (NODE, I)\n@@ -1724,7 +1723,6 @@ struct tree_exp GTY(())\n {\n   struct tree_common common;\n   source_locus locus;\n-  int complexity;\n   tree block;\n   tree GTY ((special (\"tree_exp\"),\n \t     desc (\"TREE_CODE ((tree) &%0)\")))\n@@ -4718,6 +4716,7 @@ extern tree get_base_address (tree t);\n /* In tree-vectorizer.c.  */\n extern void vect_set_verbosity_level (const char *);\n \n+/* In tree.c.  */\n struct tree_map GTY(())\n {\n   unsigned int hash;\n@@ -4729,6 +4728,16 @@ extern unsigned int tree_map_hash (const void *);\n extern int tree_map_marked_p (const void *);\n extern int tree_map_eq (const void *, const void *);\n \n+struct tree_int_map GTY(())\n+{\n+  tree from;\n+  unsigned int to;\n+};\n+\n+extern unsigned int tree_int_map_hash (const void *);\n+extern int tree_int_map_eq (const void *, const void *);\n+extern int tree_int_map_marked_p (const void *);\n+\n /* In tree-ssa-address.c.  */\n extern tree tree_mem_ref_addr (tree, tree);\n extern void copy_mem_ref_info (tree, tree);"}]}