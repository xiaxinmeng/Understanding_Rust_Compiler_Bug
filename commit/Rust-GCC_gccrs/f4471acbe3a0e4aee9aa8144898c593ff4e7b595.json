{"sha": "f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0NzFhY2JlM2EwZTRhZWU5YWE4MTQ0ODk4YzU5M2ZmNGU3YjU5NQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-25T05:48:49Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2012-03-25T05:48:49Z"}, "message": "Use calloc instead of malloc and memset.\n\n2012-03-25  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* runtime/memory.c (xcalloc): New function.\n\t* libgfortran.h (xcalloc): New prototype.\n\t* io/list_read.c (push_char): Use xcalloc instead of get_mem and\n\tmemset.\n\t(l_push_char): Likewise.\n\t* io/unit.c (insert_unit): Likewise.\n\t(get_internal_unit): Likewise.\n\t* io/unix.c (open_internal): Likewise.\n\t(open_internal4): Likewise.\n\t(fd_to_stream): Likewise.\n\nFrom-SVN: r185773", "tree": {"sha": "685cb6240f35fb0058480526772367ef510d1cba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/685cb6240f35fb0058480526772367ef510d1cba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/comments", "author": null, "committer": null, "parents": [{"sha": "0651865170b953c49b8acce8ad6de0143c00fc06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0651865170b953c49b8acce8ad6de0143c00fc06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0651865170b953c49b8acce8ad6de0143c00fc06"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "648f5809b04e7c8e0ff4c3ec11a9bc9b66dd9aee", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -1,3 +1,16 @@\n+2012-03-25  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* runtime/memory.c (xcalloc): New function.\n+\t* libgfortran.h (xcalloc): New prototype.\n+\t* io/list_read.c (push_char): Use xcalloc instead of get_mem and\n+\tmemset.\n+\t(l_push_char): Likewise.\n+\t* io/unit.c (insert_unit): Likewise.\n+\t(get_internal_unit): Likewise.\n+\t* io/unix.c (open_internal): Likewise.\n+\t(open_internal4): Likewise.\n+\t(fd_to_stream): Likewise.\n+\n 2012-03-17  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/52608"}, {"sha": "91b345cb930b589b289792c613442762625a4040", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011\n+/* Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n    Namelist input contributed by Paul Thomas\n@@ -75,9 +75,8 @@ push_char (st_parameter_dt *dtp, char c)\n \n   if (dtp->u.p.saved_string == NULL)\n     {\n-      dtp->u.p.saved_string = get_mem (SCRATCH_SIZE);\n-      // memset below should be commented out.\n-      memset (dtp->u.p.saved_string, 0, SCRATCH_SIZE);\n+      // Plain malloc should suffice here, zeroing not needed?\n+      dtp->u.p.saved_string = xcalloc (SCRATCH_SIZE, 1);\n       dtp->u.p.saved_length = SCRATCH_SIZE;\n       dtp->u.p.saved_used = 0;\n     }\n@@ -622,10 +621,7 @@ static void\n l_push_char (st_parameter_dt *dtp, char c)\n {\n   if (dtp->u.p.line_buffer == NULL)\n-    {\n-      dtp->u.p.line_buffer = get_mem (SCRATCH_SIZE);\n-      memset (dtp->u.p.line_buffer, 0, SCRATCH_SIZE);\n-    }\n+    dtp->u.p.line_buffer = xcalloc (SCRATCH_SIZE, 1);\n \n   dtp->u.p.line_buffer[dtp->u.p.item_count++] = c;\n }"}, {"sha": "5fe9eb2b52299849251e7427f15163717e6e261b", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003, 2005, 2007, 2008, 2009, 2010, 2011\n+/* Copyright (C) 2002, 2003, 2005, 2007, 2008, 2009, 2010, 2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n    F2003 I/O support contributed by Jerry DeLisle\n@@ -188,8 +188,7 @@ insert (gfc_unit *new, gfc_unit *t)\n static gfc_unit *\n insert_unit (int n)\n {\n-  gfc_unit *u = get_mem (sizeof (gfc_unit));\n-  memset (u, '\\0', sizeof (gfc_unit));\n+  gfc_unit *u = xcalloc (1, sizeof (gfc_unit));\n   u->unit_number = n;\n #ifdef __GTHREAD_MUTEX_INIT\n   {\n@@ -385,14 +384,8 @@ get_internal_unit (st_parameter_dt *dtp)\n \n   /* Allocate memory for a unit structure.  */\n \n-  iunit = get_mem (sizeof (gfc_unit));\n-  if (iunit == NULL)\n-    {\n-      generate_error (&dtp->common, LIBERROR_INTERNAL_UNIT, NULL);\n-      return NULL;\n-    }\n+  iunit = xcalloc (1, sizeof (gfc_unit));\n \n-  memset (iunit, '\\0', sizeof (gfc_unit));\n #ifdef __GTHREAD_MUTEX_INIT\n   {\n     __gthread_mutex_t tmp = __GTHREAD_MUTEX_INIT;"}, {"sha": "31fa0059c9cf78fee68cc008c793bf091a5b7398", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n-   2011\n+   2011, 2012\n    Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n    F2003 I/O support contributed by Jerry DeLisle\n@@ -919,13 +919,11 @@ open_internal (char *base, int length, gfc_offset offset)\n {\n   unix_stream *s;\n \n-  s = get_mem (sizeof (unix_stream));\n-  memset (s, '\\0', sizeof (unix_stream));\n+  s = xcalloc (1, sizeof (unix_stream));\n \n   s->buffer = base;\n   s->buffer_offset = offset;\n \n-  s->logical_offset = 0;\n   s->active = s->file_length = length;\n \n   s->st.vptr = &mem_vtable;\n@@ -941,13 +939,11 @@ open_internal4 (char *base, int length, gfc_offset offset)\n {\n   unix_stream *s;\n \n-  s = get_mem (sizeof (unix_stream));\n-  memset (s, '\\0', sizeof (unix_stream));\n+  s = xcalloc (1, sizeof (unix_stream));\n \n   s->buffer = base;\n   s->buffer_offset = offset;\n \n-  s->logical_offset = 0;\n   s->active = s->file_length = length;\n \n   s->st.vptr = &mem4_vtable;\n@@ -965,13 +961,9 @@ fd_to_stream (int fd)\n   struct stat statbuf;\n   unix_stream *s;\n \n-  s = get_mem (sizeof (unix_stream));\n-  memset (s, '\\0', sizeof (unix_stream));\n+  s = xcalloc (1, sizeof (unix_stream));\n \n   s->fd = fd;\n-  s->buffer_offset = 0;\n-  s->physical_offset = 0;\n-  s->logical_offset = 0;\n \n   /* Get the current length of the file. */\n "}, {"sha": "186bfbe9864ebd6887e8cb07d530e2aae5852506", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -759,6 +759,10 @@ internal_proto(get_mem);\n extern void *internal_malloc_size (size_t) __attribute__ ((malloc));\n internal_proto(internal_malloc_size);\n \n+extern void *xcalloc (size_t, size_t) __attribute__ ((malloc));\n+internal_proto(xcalloc);\n+\n+\n /* environ.c */\n \n extern int check_buffered (int);"}, {"sha": "044a115c1f5b2781a4acc7197cd96c0b04e88f57", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4471acbe3a0e4aee9aa8144898c593ff4e7b595/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=f4471acbe3a0e4aee9aa8144898c593ff4e7b595", "patch": "@@ -1,5 +1,6 @@\n /* Memory management routines.\n-   Copyright 2002, 2005, 2006, 2007, 2009, 2010 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006, 2007, 2009, 2010, 2012 \n+   Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran runtime library (libgfortran).\n@@ -59,3 +60,19 @@ internal_malloc_size (size_t size)\n \n   return get_mem (size);\n }\n+\n+\n+/* calloc wrapper that aborts on error.  */\n+\n+void *\n+xcalloc (size_t nmemb, size_t size)\n+{\n+  if (nmemb * size == 0)\n+    nmemb = size = 1;\n+\n+  void *p = calloc (nmemb, size);\n+  if (!p)\n+    os_error (\"Allocating cleared memory failed\");\n+\n+  return p;\n+}"}]}