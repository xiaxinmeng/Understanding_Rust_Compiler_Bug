{"sha": "e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkM2E4NmZkM2U5MWNjZGJjNzAyZmM5OTU5NTExNmFkZWRlZDBkNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-07-27T21:22:55Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-07-28T00:02:58Z"}, "message": "compiler: for package-scope \"a = b; b = x\" just set \"a = x\"\n\nThis avoids requiring an init function to initialize the variable.\nThis can only be done if x is a static initializer.\n\nThe go1.15rc1 runtime package relies on this optimization.\nThe package has a variable \"var maxSearchAddr = maxOffAddr\".\nThe maxSearchAddr variable is used by code that runs before package\ninitialization is complete.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/245098", "tree": {"sha": "085acf33e61ea6e37dfa594bc383b507961fbda9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/085acf33e61ea6e37dfa594bc383b507961fbda9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d3a86fd3e91ccdbc702fc99595116adeded0d5/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b024c9a29701fce8c6aa0d2a321829a07b39123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b024c9a29701fce8c6aa0d2a321829a07b39123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b024c9a29701fce8c6aa0d2a321829a07b39123"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "12e48c1993289de1f3fe22ebadf720a4c7862592", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d3a86fd3e91ccdbc702fc99595116adeded0d5/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d3a86fd3e91ccdbc702fc99595116adeded0d5/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "patch": "@@ -1,4 +1,4 @@\n-e86f2cb5d6b1984fde345d6ade605e377fa38c04\n+8b9c7fb00ccaf1d4bcc8d581a1a4d46a35771b77\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "4c8c55fcb14f1d3123c141c11c6e31be11e4e3f4", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d3a86fd3e91ccdbc702fc99595116adeded0d5/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d3a86fd3e91ccdbc702fc99595116adeded0d5/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=e1d3a86fd3e91ccdbc702fc99595116adeded0d5", "patch": "@@ -1622,16 +1622,31 @@ Gogo::write_globals()\n               // The initializer is constant if it is the zero-value of the\n               // variable's type or if the initial value is an immutable value\n               // that is not copied to the heap.\n-              bool is_static_initializer = false;\n-              if (var->init() == NULL)\n+\t      Expression* init = var->init();\n+\n+\t      // If we see \"a = b; b = x\", and x is a static\n+\t      // initializer, just set a to x.\n+\t      while (init != NULL && init->var_expression() != NULL)\n+\t\t{\n+\t\t  Named_object* ino = init->var_expression()->named_object();\n+\t\t  if (!ino->is_variable() || ino->package() != NULL)\n+\t\t    break;\n+\t\t  Expression* ino_init = ino->var_value()->init();\n+\t\t  if (ino->var_value()->has_pre_init()\n+\t\t      || ino_init == NULL\n+\t\t      || !ino_init->is_static_initializer())\n+\t\t    break;\n+\t\t  init = ino_init;\n+\t\t}\n+\n+              bool is_static_initializer;\n+              if (init == NULL)\n                 is_static_initializer = true;\n               else\n                 {\n                   Type* var_type = var->type();\n-                  Expression* init = var->init();\n-                  Expression* init_cast =\n-                      Expression::make_cast(var_type, init, var->location());\n-                  is_static_initializer = init_cast->is_static_initializer();\n+                  init = Expression::make_cast(var_type, init, var->location());\n+                  is_static_initializer = init->is_static_initializer();\n                 }\n \n \t      // Non-constant variable initializations might need to create\n@@ -1650,7 +1665,15 @@ Gogo::write_globals()\n                     }\n \t\t  var_init_fn = init_fndecl;\n \t\t}\n-              Bexpression* var_binit = var->get_init(this, var_init_fn);\n+\n+\t      Bexpression* var_binit;\n+\t      if (init == NULL)\n+\t\tvar_binit = NULL;\n+\t      else\n+\t\t{\n+\t\t  Translate_context context(this, var_init_fn, NULL, NULL);\n+\t\t  var_binit = init->get_backend(&context);\n+\t\t}\n \n               if (var_binit == NULL)\n \t\t;"}]}