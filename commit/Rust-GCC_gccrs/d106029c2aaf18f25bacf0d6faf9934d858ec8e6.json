{"sha": "d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEwNjAyOWMyYWFmMThmMjViYWNmMGQ2ZmFmOTkzNGQ4NThlYzhlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-14T08:53:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-09-14T08:53:50Z"}, "message": "arm: Fix up gcc.target/arm/lto/pr96939_* FAIL\n\nThe following patch on top of the\nhttps://gcc.gnu.org/pipermail/gcc-patches/2020-September/553801.html\npatch fixes the gcc.target/arm/lto/pr96939_* test in certain ARM\nconfigurations.\nAs said in the above mentioned patch, the generic code takes care of\nsaving/restoring TargetVariables or Target Save options, so this just\narranges for the generic code to save those instead of needing the\narm backend to do it manually.\n\n2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n\n\t* config/arm/arm.opt (x_arm_arch_string, x_arm_cpu_string,\n\tx_arm_tune_string): Remove TargetSave entries.\n\t(march=, mcpu=, mtune=): Add Save keyword.\n\t* config/arm/arm.c (arm_option_save): Remove.\n\t(TARGET_OPTION_SAVE): Don't redefine.\n\t(arm_option_restore): Don't restore x_arm_*_string here.", "tree": {"sha": "0836ec0f07a3861220f25f0d28cc9170286b7046", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0836ec0f07a3861220f25f0d28cc9170286b7046"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d106029c2aaf18f25bacf0d6faf9934d858ec8e6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02321f62f8d25d53296defea29538f5030e70967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02321f62f8d25d53296defea29538f5030e70967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02321f62f8d25d53296defea29538f5030e70967"}], "stats": {"total": 33, "additions": 3, "deletions": 30}, "files": [{"sha": "e37cd6f8fe6991f6942491b8d6e8a9ef4db94475", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d106029c2aaf18f25bacf0d6faf9934d858ec8e6/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d106029c2aaf18f25bacf0d6faf9934d858ec8e6/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "patch": "@@ -247,8 +247,6 @@ static tree arm_build_builtin_va_list (void);\n static void arm_expand_builtin_va_start (tree, rtx);\n static tree arm_gimplify_va_arg_expr (tree, tree, gimple_seq *, gimple_seq *);\n static void arm_option_override (void);\n-static void arm_option_save (struct cl_target_option *, struct gcc_options *,\n-\t\t\t     struct gcc_options *);\n static void arm_option_restore (struct gcc_options *, struct gcc_options *,\n \t\t\t\tstruct cl_target_option *);\n static void arm_override_options_after_change (void);\n@@ -443,9 +441,6 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE\n #define TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE arm_override_options_after_change\n \n-#undef TARGET_OPTION_SAVE\n-#define TARGET_OPTION_SAVE arm_option_save\n-\n #undef TARGET_OPTION_RESTORE\n #define TARGET_OPTION_RESTORE arm_option_restore\n \n@@ -3042,24 +3037,11 @@ arm_override_options_after_change (void)\n   arm_override_options_after_change_1 (&global_options, &global_options_set);\n }\n \n-/* Implement TARGET_OPTION_SAVE.  */\n-static void\n-arm_option_save (struct cl_target_option *ptr, struct gcc_options *opts,\n-\t\t struct gcc_options */* opts_set */)\n-{\n-  ptr->x_arm_arch_string = opts->x_arm_arch_string;\n-  ptr->x_arm_cpu_string = opts->x_arm_cpu_string;\n-  ptr->x_arm_tune_string = opts->x_arm_tune_string;\n-}\n-\n /* Implement TARGET_OPTION_RESTORE.  */\n static void\n arm_option_restore (struct gcc_options *opts, struct gcc_options *opts_set,\n \t\t    struct cl_target_option *ptr)\n {\n-  opts->x_arm_arch_string = ptr->x_arm_arch_string;\n-  opts->x_arm_cpu_string = ptr->x_arm_cpu_string;\n-  opts->x_arm_tune_string = ptr->x_arm_tune_string;\n   arm_configure_build_target (&arm_active_target, ptr, opts_set, false);\n }\n "}, {"sha": "f01cd65eb330211ca4c7701599334233f6a961da", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d106029c2aaf18f25bacf0d6faf9934d858ec8e6/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d106029c2aaf18f25bacf0d6faf9934d858ec8e6/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=d106029c2aaf18f25bacf0d6faf9934d858ec8e6", "patch": "@@ -21,15 +21,6 @@\n HeaderInclude\n config/arm/arm-opts.h\n \n-TargetSave\n-const char *x_arm_arch_string\n-\n-TargetSave\n-const char *x_arm_cpu_string\n-\n-TargetSave\n-const char *x_arm_tune_string\n-\n Enum\n Name(tls_type) Type(enum arm_tls_type)\n TLS dialect to use:\n@@ -82,7 +73,7 @@ mapcs-stack-check\n Target Report Mask(APCS_STACK) Undocumented\n \n march=\n-Target RejectNegative Negative(march=) ToLower Joined Var(arm_arch_string)\n+Target Save RejectNegative Negative(march=) ToLower Joined Var(arm_arch_string)\n Specify the name of the target architecture.\n \n ; Other arm_arch values are loaded from arm-tables.opt\n@@ -107,7 +98,7 @@ Target Report Mask(CALLER_INTERWORKING)\n Thumb: Assume function pointers may go to non-Thumb aware code.\n \n mcpu=\n-Target RejectNegative Negative(mcpu=) ToLower Joined Var(arm_cpu_string)\n+Target Save RejectNegative Negative(mcpu=) ToLower Joined Var(arm_cpu_string)\n Specify the name of the target CPU.\n \n mfloat-abi=\n@@ -232,7 +223,7 @@ Target Report Mask(TPCS_LEAF_FRAME)\n Thumb: Generate (leaf) stack frames even if not needed.\n \n mtune=\n-Target RejectNegative Negative(mtune=) ToLower Joined Var(arm_tune_string)\n+Target Save RejectNegative Negative(mtune=) ToLower Joined Var(arm_tune_string)\n Tune code for the given processor.\n \n mprint-tune-info"}]}