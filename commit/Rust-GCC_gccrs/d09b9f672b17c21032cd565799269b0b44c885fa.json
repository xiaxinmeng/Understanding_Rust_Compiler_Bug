{"sha": "d09b9f672b17c21032cd565799269b0b44c885fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5YjlmNjcyYjE3YzIxMDMyY2Q1NjU3OTkyNjliMGI0NGM4ODVmYQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T12:56:12Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-09-09T12:56:12Z"}, "message": "trans-array.c (gfc_conv_array_transpose): Change generated descriptor name\n\n2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* trans-array.c (gfc_conv_array_transpose): Change generated descriptor\n\tname\n\n2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* gfortran.dg/inline_transpose_1.f90: New test.\n\nFrom-SVN: r164087", "tree": {"sha": "83b1c95cd02b8851068ba8b0d92a78c81d70c42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83b1c95cd02b8851068ba8b0d92a78c81d70c42d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d09b9f672b17c21032cd565799269b0b44c885fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b9f672b17c21032cd565799269b0b44c885fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09b9f672b17c21032cd565799269b0b44c885fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09b9f672b17c21032cd565799269b0b44c885fa/comments", "author": null, "committer": null, "parents": [{"sha": "616191687c41a451ace74b1682e8d0afa706e705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616191687c41a451ace74b1682e8d0afa706e705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616191687c41a451ace74b1682e8d0afa706e705"}], "stats": {"total": 204, "additions": 203, "deletions": 1}, "files": [{"sha": "3ecf53d05dfb450e7990b6b0b14fac92a69e4275", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d09b9f672b17c21032cd565799269b0b44c885fa", "patch": "@@ -1,3 +1,8 @@\n+2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_conv_array_transpose): Change generated descriptor\n+\tname\n+\n 2010-09-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/43665"}, {"sha": "154ecc479dd63c54ce38c0515eca468927b68b70", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d09b9f672b17c21032cd565799269b0b44c885fa", "patch": "@@ -906,7 +906,7 @@ gfc_conv_array_transpose (gfc_se * se, gfc_expr * expr)\n   src = src_se.expr;\n \n   /* Allocate a new descriptor for the return value.  */\n-  dest = gfc_create_var (TREE_TYPE (src), \"atmp\");\n+  dest = gfc_create_var (TREE_TYPE (src), \"transp\");\n   dest_info->descriptor = dest;\n   se->expr = dest;\n "}, {"sha": "d2a2393623b89cc53f3b4d59f587a437410d3f5a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d09b9f672b17c21032cd565799269b0b44c885fa", "patch": "@@ -1,3 +1,7 @@\n+2010-09-09  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* gfortran.dg/inline_transpose_1.f90: New test.\n+\n 2010-09-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/45588"}, {"sha": "4b791389cfab94fa5e8403b14ef4607ab8633d5d", "filename": "gcc/testsuite/gfortran.dg/inline_transpose_1.f90", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09b9f672b17c21032cd565799269b0b44c885fa/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_transpose_1.f90?ref=d09b9f672b17c21032cd565799269b0b44c885fa", "patch": "@@ -0,0 +1,193 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original -Warray-temporaries\" }\n+\n+  implicit none\n+\n+  integer :: i, j\n+\n+  integer, parameter :: nx=3, ny=4\n+  integer, parameter, dimension(nx,ny) :: p = &\n+    & reshape ((/ (i**2, i=1,size(p)) /), shape(p))\n+  integer, parameter, dimension(ny,nx) :: q = &\n+    & reshape ((/ (((nx*(i-1)+j)**2, i=1,ny), j=1,nx) /), (/ ny, nx /))\n+\n+  integer, parameter, dimension(nx,nx) :: r = &\n+    & reshape ((/ (i*i, i=1,size(r)) /), shape(r))\n+  integer, parameter, dimension(nx,nx) :: s = &\n+    & reshape ((/ (((nx*(i-1)+j)**2, i=1,nx), j=1,nx) /), (/ nx, nx /))\n+\n+\n+\n+  integer, dimension(nx,ny) :: a, b\n+  integer, dimension(ny,nx) :: c\n+  integer, dimension(nx,nx) :: e, f, g\n+\n+  character(144) :: u, v\n+\n+  a = p\n+\n+  c = transpose(a)\n+  if (any(c /= q)) call abort\n+\n+  write(u,*) transpose(a)       ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  write(v,*) q\n+  if (u /= v) call abort\n+\n+\n+  e = r\n+  f = s\n+\n+  g = transpose(e+f)            ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (any(g /= r + s)) call abort\n+\n+  write(u,*) transpose(e+f)     ! 2 Unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) r + s\n+  if (u /= v) call abort\n+\n+\n+  e = transpose(e)      ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= s)) call abort\n+\n+  write(u,*) transpose(transpose(e))    ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  write(v,*) s\n+  if (u /= v) call abort\n+\n+\n+  e = transpose(e+f)     ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= 2*r)) call abort\n+\n+  write(u,*) transpose(transpose(e+f))-f        ! 2 Unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) 2*r\n+  if (u /= v) call abort\n+\n+\n+  a = foo(transpose(c))\n+  if (any(a /= p+1)) call abort\n+\n+  write(u,*) foo(transpose(c))    ! { dg-warning \"Creating array temporary\" }\n+  write(v,*) p+1\n+  if (u /= v) call abort\n+\n+\n+  c = transpose(foo(a))      ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (any(c /= q+2)) call abort\n+\n+  write(u,*) transpose(foo(a))     ! 2 temps, should be 1 { dg-warning \"Creating array temporary\" }\n+  write(v,*) q+2\n+  if (u /= v) call abort\n+\n+\n+  e = foo(transpose(e))     ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= 2*s+1)) call abort\n+\n+  write(u,*) transpose(foo(transpose(e))-1)     ! 3 temps, should be 1 { dg-warning \"Creating array temporary\" }\n+  write(v,*) 2*s+1\n+  if (u /= v) call abort\n+\n+\n+  e = transpose(foo(e))     ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= 2*r+2)) call abort\n+\n+  write(u,*) transpose(foo(transpose(e)-1))     ! 4 temps, should be 2 { dg-warning \"Creating array temporary\" }\n+  write(v,*) 2*r+2\n+  if (u /= v) call abort\n+\n+\n+  a = bar(transpose(c))         ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (any(a /= p+4)) call abort\n+\n+  write(u,*) bar(transpose(c))  ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  write(v,*) p+4\n+  if (u /= v) call abort\n+\n+\n+  c = transpose(bar(a))         ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (any(c /= q+6)) call abort\n+\n+  write(u,*) transpose(bar(a))  ! 2 Unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) q+6\n+  if (u /= v) call abort\n+\n+\n+  e = bar(transpose(e))     ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= 2*s+4)) call abort\n+\n+  write(u,*) transpose(bar(transpose(e)))-2     ! 3 Unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) 2*s+4\n+  if (u /= v) call abort\n+\n+\n+  e = transpose(bar(e))     ! { dg-warning \"Creating array temporary\" }\n+  if (any(e /= 2*r+6)) call abort\n+\n+  write(u,*) transpose(transpose(bar(e))-2)     ! 4 Unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) 2*r+6\n+  if (u /= v) call abort\n+\n+\n+  if (any(a /= transpose(transpose(a)))) call abort     ! Unnecessary { dg-warning \"Creating array temporary\" }\n+\n+  write(u,*) a\n+  write(v,*) transpose(transpose(a))    ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (u /= v) call abort\n+\n+\n+  b = a * a\n+\n+  if (any(transpose(a+b) /= transpose(a)+transpose(b))) call abort      ! 4 unnecessary temps { dg-warning \"Creating array temporary\" }\n+\n+  write(u,*) transpose(a+b)     ! 2 unnecessary temps { dg-warning \"Creating array temporary\" }\n+  write(v,*) transpose(a) + transpose(b)        ! 2 unnecessary temps { dg-warning \"Creating array temporary\" }\n+  if (u /= v) call abort\n+\n+\n+  if (any(transpose(matmul(a,c)) /= matmul(transpose(c), transpose(a)))) call abort      ! 3 temps, should be 2 { dg-warning \"Creating array temporary\" }\n+\n+  write(u,*) transpose(matmul(a,c))     ! 2 temps, should be 1 { dg-warning \"Creating array temporary\" }\n+  write(v,*) matmul(transpose(c), transpose(a))     ! { dg-warning \"Creating array temporary\" }\n+  if (u /= v) call abort\n+\n+\n+  if (any(transpose(matmul(e,a)) /= matmul(transpose(a), transpose(e)))) call abort     ! 3 temps, should be 2 { dg-warning \"Creating array temporary\" }\n+\n+  write(u,*) transpose(matmul(e,a))     ! 2 temps, should be 1 { dg-warning \"Creating array temporary\" }\n+  write(v,*) matmul(transpose(a), transpose(e))     ! { dg-warning \"Creating array temporary\" }\n+  if (u /= v) call abort\n+\n+\n+  call baz (transpose(a))\n+\n+  call toto (f, transpose (e))          ! Unnecessary { dg-warning \"Creating array temporary\" }\n+  if (any (f /= 4 * s + 12)) call abort\n+\n+  call toto (f, transpose (f))          ! { dg-warning \"Creating array temporary\" }\n+  if (any (f /= 8 * r + 24)) call abort\n+\n+\n+  contains\n+\n+  function foo (x)\n+    integer, intent(in) :: x(:,:)\n+    integer :: foo(size(x,1), size(x,2))\n+    foo = x + 1\n+  end function foo\n+\n+  elemental function bar (x)\n+    integer, intent(in) :: x\n+    integer :: bar\n+    bar = x + 2\n+  end function bar\n+\n+  subroutine baz (x)\n+    integer, intent(in) :: x(:,:)\n+  end subroutine baz\n+\n+  elemental subroutine toto (x, y)\n+    integer, intent(out) :: x\n+    integer, intent(in)  :: y\n+    x = y + y\n+  end subroutine toto\n+\n+end\n+! { dg-final { scan-tree-dump-times \"struct\\[^\\\\n\\]*atmp\" 60 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}