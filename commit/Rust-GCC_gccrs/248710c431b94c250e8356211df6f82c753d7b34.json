{"sha": "248710c431b94c250e8356211df6f82c753d7b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4NzEwYzQzMWI5NGMyNTBlODM1NjIxMWRmNmY4MmM3NTNkN2IzNA==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2017-05-05T20:24:38Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-05-05T20:24:38Z"}, "message": "RISC-V: Unify indention in riscv.md\n\nThis contains only whitespace changes.\n\ngcc/ChangeLog\n\n2017-05-04  Kito Cheng  <kito.cheng@gmail.com>\n\n\t* config/riscv/riscv.md: Unify indentation.\n\nFrom-SVN: r247658", "tree": {"sha": "5f605f641968590ec0bbf699041c6811b9702de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f605f641968590ec0bbf699041c6811b9702de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248710c431b94c250e8356211df6f82c753d7b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248710c431b94c250e8356211df6f82c753d7b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248710c431b94c250e8356211df6f82c753d7b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248710c431b94c250e8356211df6f82c753d7b34/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8acb85754af19a055d7d00248ca869496dd4cda0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8acb85754af19a055d7d00248ca869496dd4cda0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8acb85754af19a055d7d00248ca869496dd4cda0"}], "stats": {"total": 563, "additions": 291, "deletions": 272}, "files": [{"sha": "c55250f8342baaedc85ef8d84225dc9e17217e43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248710c431b94c250e8356211df6f82c753d7b34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248710c431b94c250e8356211df6f82c753d7b34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=248710c431b94c250e8356211df6f82c753d7b34", "patch": "@@ -1,3 +1,7 @@\n+2017-05-04  Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* config/riscv/riscv.md: Unify indentation.\n+\n 2017-05-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/79038"}, {"sha": "18dba3beea1de87c2346ba99cad7c5f6e764d50e", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 287, "deletions": 272, "changes": 559, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248710c431b94c250e8356211df6f82c753d7b34/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248710c431b94c250e8356211df6f82c753d7b34/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=248710c431b94c250e8356211df6f82c753d7b34", "patch": "@@ -398,47 +398,47 @@\n ;;\n \n (define_insn \"add<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(plus:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t   (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n+\t(plus:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fadd.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"addsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t  (match_operand:SI 2 \"arith_operand\" \"r,I\")))]\n+  [(set (match_operand:SI          0 \"register_operand\" \"=r,r\")\n+\t(plus:SI (match_operand:SI 1 \"register_operand\" \" r,r\")\n+\t\t (match_operand:SI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n   { return TARGET_64BIT ? \"addw\\t%0,%1,%2\" : \"add\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"adddi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(plus:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n-\t\t  (match_operand:DI 2 \"arith_operand\" \"r,I\")))]\n+  [(set (match_operand:DI          0 \"register_operand\" \"=r,r\")\n+\t(plus:DI (match_operand:DI 1 \"register_operand\" \" r,r\")\n+\t\t (match_operand:DI 2 \"arith_operand\"    \" r,I\")))]\n   \"TARGET_64BIT\"\n   \"add\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*addsi3_extended\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI               0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t     (plus:SI (match_operand:SI 1 \"register_operand\" \"r,r\")\n-\t\t      (match_operand:SI 2 \"arith_operand\" \"r,I\"))))]\n+\t     (plus:SI (match_operand:SI 1 \"register_operand\" \" r,r\")\n+\t\t      (match_operand:SI 2 \"arith_operand\"    \" r,I\"))))]\n   \"TARGET_64BIT\"\n   \"addw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*addsi3_extended2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (plus:DI (match_operand:DI 1 \"register_operand\" \"r,r\")\n-\t\t\t      (match_operand:DI 2 \"arith_operand\" \"r,I\"))\n+\t  (subreg:SI (plus:DI (match_operand:DI 1 \"register_operand\" \" r,r\")\n+\t\t\t      (match_operand:DI 2 \"arith_operand\"    \" r,I\"))\n \t\t     0)))]\n   \"TARGET_64BIT\"\n   \"addw\\t%0,%1,%2\"\n@@ -454,47 +454,47 @@\n ;;\n \n (define_insn \"sub<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(minus:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF             0 \"register_operand\" \"=f\")\n+\t(minus:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t    (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fsub.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"subdi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t   (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI 0            \"register_operand\" \"= r\")\n+\t(minus:DI (match_operand:DI 1  \"reg_or_0_operand\" \" rJ\")\n+\t\t   (match_operand:DI 2 \"register_operand\" \"  r\")))]\n   \"TARGET_64BIT\"\n   \"sub\\t%0,%z1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"subsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t   (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI           0 \"register_operand\" \"= r\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \" rJ\")\n+\t\t  (match_operand:SI 2 \"register_operand\" \"  r\")))]\n   \"\"\n   { return TARGET_64BIT ? \"subw\\t%0,%z1,%2\" : \"sub\\t%0,%z1,%2\"; }\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi3_extended\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI               0 \"register_operand\" \"= r\")\n \t(sign_extend:DI\n-\t    (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n-\t\t      (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t    (minus:SI (match_operand:SI 1 \"reg_or_0_operand\" \" rJ\")\n+\t\t      (match_operand:SI 2 \"register_operand\" \"  r\"))))]\n   \"TARGET_64BIT\"\n   \"subw\\t%0,%z1,%2\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*subsi3_extended2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                        0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \"r\")\n-\t\t\t       (match_operand:DI 2 \"register_operand\" \"r\"))\n+\t  (subreg:SI (minus:DI (match_operand:DI 1 \"reg_or_0_operand\" \" r\")\n+\t\t\t       (match_operand:DI 2 \"register_operand\" \" r\"))\n \t\t     0)))]\n   \"TARGET_64BIT\"\n   \"subw\\t%0,%z1,%2\"\n@@ -510,47 +510,47 @@\n ;;\n \n (define_insn \"mul<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(mult:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF               0 \"register_operand\" \"=f\")\n+\t(mult:ANYF (match_operand:ANYF    1 \"register_operand\" \" f\")\n+\t\t      (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fmul.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmul\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"mulsi3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI          0 \"register_operand\" \"=r\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t (match_operand:SI 2 \"register_operand\" \" r\")))]\n   \"TARGET_MUL\"\n   { return TARGET_64BIT ? \"mulw\\t%0,%1,%2\" : \"mul\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"muldi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(mult:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI          0 \"register_operand\" \"=r\")\n+\t(mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n+\t\t (match_operand:DI 2 \"register_operand\" \" r\")))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mul\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*mulsi3_extended\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI              0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t     (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t    (mult:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t     (match_operand:SI 2 \"register_operand\" \" r\"))))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mulw\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"*mulsi3_extended2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                       0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t  (subreg:SI (mult:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t\t      (match_operand:DI 2 \"register_operand\" \"r\"))\n+\t  (subreg:SI (mult:DI (match_operand:DI 1 \"register_operand\" \" r\")\n+\t\t\t      (match_operand:DI 2 \"register_operand\" \" r\"))\n \t\t     0)))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mulw\\t%0,%1,%2\"\n@@ -567,7 +567,7 @@\n \n \n (define_expand \"<u>mulditi3\"\n-  [(set (match_operand:TI 0 \"register_operand\")\n+  [(set (match_operand:TI                         0 \"register_operand\")\n \t(mult:TI (any_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t (any_extend:TI (match_operand:DI 2 \"register_operand\"))))]\n   \"TARGET_MUL && TARGET_64BIT\"\n@@ -584,21 +584,21 @@\n })\n \n (define_insn \"<u>muldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                0 \"register_operand\" \"=r\")\n \t(truncate:DI\n \t  (lshiftrt:TI\n \t    (mult:TI (any_extend:TI\n-\t\t       (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t       (match_operand:DI 1 \"register_operand\" \" r\"))\n \t\t     (any_extend:TI\n-\t\t       (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t\t       (match_operand:DI 2 \"register_operand\" \" r\")))\n \t    (const_int 64))))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mulh<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"usmulditi3\"\n-  [(set (match_operand:TI 0 \"register_operand\")\n+  [(set (match_operand:TI                          0 \"register_operand\")\n \t(mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\"))\n \t\t (sign_extend:TI (match_operand:DI 2 \"register_operand\"))))]\n   \"TARGET_MUL && TARGET_64BIT\"\n@@ -615,25 +615,25 @@\n })\n \n (define_insn \"usmuldi3_highpart\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                0 \"register_operand\" \"=r\")\n \t(truncate:DI\n \t  (lshiftrt:TI\n \t    (mult:TI (zero_extend:TI\n-\t\t       (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t       (match_operand:DI 1 \"register_operand\"  \"r\"))\n \t\t     (sign_extend:TI\n-\t\t       (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t\t       (match_operand:DI 2 \"register_operand\" \" r\")))\n \t    (const_int 64))))]\n   \"TARGET_MUL && TARGET_64BIT\"\n   \"mulhsu\\t%0,%2,%1\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_expand \"<u>mulsidi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI            0 \"register_operand\" \"=r\")\n \t(mult:DI (any_extend:DI\n-\t\t   (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t   (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t (any_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t\t   (match_operand:SI 2 \"register_operand\" \" r\"))))]\n   \"TARGET_MUL && !TARGET_64BIT\"\n {\n   rtx temp = gen_reg_rtx (SImode);\n@@ -645,13 +645,13 @@\n })\n \n (define_insn \"<u>mulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI                0 \"register_operand\" \"=r\")\n \t(truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (any_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t       (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t     (any_extend:DI\n-\t\t       (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t       (match_operand:SI 2 \"register_operand\" \" r\")))\n \t    (const_int 32))))]\n   \"TARGET_MUL && !TARGET_64BIT\"\n   \"mulh<u>\\t%0,%1,%2\"\n@@ -660,11 +660,11 @@\n \n \n (define_expand \"usmulsidi3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI            0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI\n-\t\t   (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t   (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t (sign_extend:DI\n-\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t\t   (match_operand:SI 2 \"register_operand\" \" r\"))))]\n   \"TARGET_MUL && !TARGET_64BIT\"\n {\n   rtx temp = gen_reg_rtx (SImode);\n@@ -676,13 +676,13 @@\n })\n \n (define_insn \"usmulsi3_highpart\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:SI                0 \"register_operand\" \"=r\")\n \t(truncate:SI\n \t  (lshiftrt:DI\n \t    (mult:DI (zero_extend:DI\n-\t\t       (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t       (match_operand:SI 1 \"register_operand\" \" r\"))\n \t\t     (sign_extend:DI\n-\t\t       (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t\t       (match_operand:SI 2 \"register_operand\" \" r\")))\n \t    (const_int 32))))]\n   \"TARGET_MUL && !TARGET_64BIT\"\n   \"mulhsu\\t%0,%2,%1\"\n@@ -698,37 +698,37 @@\n ;;\n \n (define_insn \"<optab>si3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(any_div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:SI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI             0 \"register_operand\" \"=r\")\n+\t(any_div:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t    (match_operand:SI 2 \"register_operand\" \" r\")))]\n   \"TARGET_DIV\"\n   { return TARGET_64BIT ? \"<insn>w\\t%0,%1,%2\" : \"<insn>\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"<optab>di3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(any_div:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"register_operand\" \"r\")))]\n+  [(set (match_operand:DI             0 \"register_operand\" \"=r\")\n+\t(any_div:DI (match_operand:DI 1 \"register_operand\" \" r\")\n+\t\t    (match_operand:DI 2 \"register_operand\" \" r\")))]\n   \"TARGET_DIV && TARGET_64BIT\"\n   \"<insn>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*<optab>si3_extended\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI\n-\t    (any_div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"register_operand\" \"r\"))))]\n+\t    (any_div:SI (match_operand:SI 1 \"register_operand\" \" r\")\n+\t\t\t(match_operand:SI 2 \"register_operand\" \" r\"))))]\n   \"TARGET_DIV && TARGET_64BIT\"\n   \"<insn>w\\t%0,%1,%2\"\n   [(set_attr \"type\" \"idiv\")\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"div<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(div:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t  (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n+\t(div:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FDIV\"\n   \"fdiv.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fdiv\")\n@@ -742,8 +742,8 @@\n ;;  ....................\n \n (define_insn \"sqrt<mode>2\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(sqrt:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n+\t(sqrt:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FDIV\"\n {\n     return \"fsqrt.<fmt>\\t%0,%1\";\n@@ -755,99 +755,97 @@\n \n ;; a * b + c\n (define_insn \"fma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (fma:ANYF\n-      (match_operand:ANYF 1 \"register_operand\" \"f\")\n-      (match_operand:ANYF 2 \"register_operand\" \"f\")\n-      (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n+\t(fma:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t  (match_operand:ANYF 2 \"register_operand\" \" f\")\n+\t\t  (match_operand:ANYF 3 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; a * b - c\n (define_insn \"fms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (fma:ANYF\n-      (match_operand:ANYF 1 \"register_operand\" \"f\")\n-      (match_operand:ANYF 2 \"register_operand\" \"f\")\n-      (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:ANYF                     0 \"register_operand\" \"=f\")\n+\t(fma:ANYF (match_operand:ANYF           1 \"register_operand\" \" f\")\n+\t\t  (match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t\t  (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n   \"TARGET_HARD_FLOAT\"\n   \"fmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -a * b - c\n (define_insn \"fnms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (fma:ANYF\n-      (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-      (match_operand:ANYF 2 \"register_operand\" \"f\")\n-      (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:ANYF               0 \"register_operand\" \"=f\")\n+\t(fma:ANYF\n+\t    (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n+\t    (match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t    (neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n   \"TARGET_HARD_FLOAT\"\n   \"fnmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -a * b + c\n (define_insn \"fnma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (fma:ANYF\n-      (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-      (match_operand:ANYF 2 \"register_operand\" \"f\")\n-      (match_operand:ANYF 3 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF               0 \"register_operand\" \"=f\")\n+\t(fma:ANYF\n+\t    (neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n+\t    (match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t    (match_operand:ANYF           3 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fnmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -(-a * b - c), modulo signed zeros\n (define_insn \"*fma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (neg:ANYF\n-      (fma:ANYF\n-\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t(match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\")))))]\n+  [(set (match_operand:ANYF                   0 \"register_operand\" \"=f\")\n+\t(neg:ANYF\n+\t    (fma:ANYF\n+\t\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n+\t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\")))))]\n   \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -(-a * b + c), modulo signed zeros\n (define_insn \"*fms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (neg:ANYF\n-      (fma:ANYF\n-\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\"))\n-\t(match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t(match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:ANYF                   0 \"register_operand\" \"=f\")\n+\t(neg:ANYF\n+\t    (fma:ANYF\n+\t\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\"))\n+\t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t\t(match_operand:ANYF           3 \"register_operand\" \" f\"))))]\n   \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -(a * b + c), modulo signed zeros\n (define_insn \"*fnms<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (neg:ANYF\n-      (fma:ANYF\n-\t(match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t(match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t(match_operand:ANYF 3 \"register_operand\" \"f\"))))]\n+  [(set (match_operand:ANYF         0 \"register_operand\" \"=f\")\n+\t(neg:ANYF\n+\t    (fma:ANYF\n+\t\t(match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t(match_operand:ANYF 2 \"register_operand\" \" f\")\n+\t\t(match_operand:ANYF 3 \"register_operand\" \" f\"))))]\n   \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fnmadd.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n ;; -(a * b - c), modulo signed zeros\n (define_insn \"*fnma<mode>4\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-    (neg:ANYF\n-      (fma:ANYF\n-\t(match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t(match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \"f\")))))]\n+  [(set (match_operand:ANYF                   0 \"register_operand\" \"=f\")\n+\t(neg:ANYF\n+\t    (fma:ANYF\n+\t\t(match_operand:ANYF           1 \"register_operand\" \" f\")\n+\t\t(match_operand:ANYF           2 \"register_operand\" \" f\")\n+\t\t(neg:ANYF (match_operand:ANYF 3 \"register_operand\" \" f\")))))]\n   \"TARGET_HARD_FLOAT && !HONOR_SIGNED_ZEROS (<MODE>mode)\"\n   \"fnmsub.<fmt>\\t%0,%1,%2,%3\"\n   [(set_attr \"type\" \"fmadd\")\n@@ -861,26 +859,26 @@\n ;;  ....................\n \n (define_insn \"abs<mode>2\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(abs:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n+\t(abs:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fabs.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"copysign<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(unspec:ANYF [(match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t      (match_operand:ANYF 2 \"register_operand\" \"f\")]\n+  [(set (match_operand:ANYF 0 \"register_operand\"               \"=f\")\n+\t(unspec:ANYF [(match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t      (match_operand:ANYF 2 \"register_operand\" \" f\")]\n \t\t     UNSPEC_COPYSIGN))]\n   \"TARGET_HARD_FLOAT\"\n   \"fsgnj.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"neg<mode>2\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF           0 \"register_operand\" \"=f\")\n+\t(neg:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fneg.<fmt>\\t%0,%1\"\n   [(set_attr \"type\" \"fmove\")\n@@ -894,18 +892,18 @@\n ;;  ....................\n \n (define_insn \"smin<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t\t   (smin:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n+\t(smin:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fmin.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"smax<mode>3\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t\t   (smax:ANYF (match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t\t\t    (match_operand:ANYF 2 \"register_operand\" \"f\")))]\n+  [(set (match_operand:ANYF            0 \"register_operand\" \"=f\")\n+\t(smax:ANYF (match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t\t   (match_operand:ANYF 2 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fmax.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fmove\")\n@@ -923,34 +921,34 @@\n ;; but SImode versions exist for combine.\n \n (define_insn \"<optab><mode>3\"\n-  [(set (match_operand:X 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:X                0 \"register_operand\" \"=r,r\")\n \t(any_bitwise:X (match_operand:X 1 \"register_operand\" \"%r,r\")\n-\t\t       (match_operand:X 2 \"arith_operand\" \"r,I\")))]\n+\t\t       (match_operand:X 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n   \"<insn>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*<optab>si3_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SI                 0 \"register_operand\" \"=r,r\")\n \t(any_bitwise:SI (match_operand:SI 1 \"register_operand\" \"%r,r\")\n-\t\t\t(match_operand:SI 2 \"arith_operand\" \"r,I\")))]\n+\t\t\t(match_operand:SI 2 \"arith_operand\"    \" r,I\")))]\n   \"TARGET_64BIT\"\n   \"<insn>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"one_cmpl<mode>2\"\n-  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n-\t(not:X (match_operand:X 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:X        0 \"register_operand\" \"=r\")\n+\t(not:X (match_operand:X 1 \"register_operand\" \" r\")))]\n   \"\"\n   \"not\\t%0,%1\"\n   [(set_attr \"type\" \"logical\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*one_cmplsi2_internal\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(not:SI (match_operand:SI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI         0 \"register_operand\" \"=r\")\n+\t(not:SI (match_operand:SI 1 \"register_operand\" \" r\")))]\n   \"TARGET_64BIT\"\n   \"not\\t%0,%1\"\n   [(set_attr \"type\" \"logical\")\n@@ -964,8 +962,9 @@\n ;;  ....................\n \n (define_insn \"truncdfsf2\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t(float_truncate:SF (match_operand:DF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:SF     0 \"register_operand\" \"=f\")\n+\t(float_truncate:SF\n+\t    (match_operand:DF 1 \"register_operand\" \" f\")))]\n   \"TARGET_DOUBLE_FLOAT\"\n   \"fcvt.s.d\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n@@ -981,8 +980,9 @@\n ;; Extension insns.\n \n (define_insn_and_split \"zero_extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:DI     0 \"register_operand\"     \"=r,r\")\n+\t(zero_extend:DI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"TARGET_64BIT\"\n   \"@\n    #\n@@ -997,8 +997,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn_and_split \"zero_extendhi<GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r,r\")\n-\t(zero_extend:GPR (match_operand:HI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:GPR    0 \"register_operand\"     \"=r,r\")\n+\t(zero_extend:GPR\n+\t    (match_operand:HI 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"\"\n   \"@\n    #\n@@ -1016,9 +1017,9 @@\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n \n (define_insn \"zero_extendqi<SUPERQI:mode>2\"\n-  [(set (match_operand:SUPERQI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SUPERQI 0 \"register_operand\"    \"=r,r\")\n \t(zero_extend:SUPERQI\n-\t     (match_operand:QI 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t    (match_operand:QI 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"\"\n   \"@\n    and\\t%0,%1,0xff\n@@ -1034,8 +1035,9 @@\n ;;  ....................\n \n (define_insn \"extendsidi2\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(sign_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:DI     0 \"register_operand\"     \"=r,r\")\n+\t(sign_extend:DI\n+\t    (match_operand:SI 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"TARGET_64BIT\"\n   \"@\n    sext.w\\t%0,%1\n@@ -1044,9 +1046,9 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn_and_split \"extend<SHORT:mode><SUPERQI:mode>2\"\n-  [(set (match_operand:SUPERQI 0 \"register_operand\" \"=r,r\")\n+  [(set (match_operand:SUPERQI   0 \"register_operand\"     \"=r,r\")\n \t(sign_extend:SUPERQI\n-\t     (match_operand:SHORT 1 \"nonimmediate_operand\" \"r,m\")))]\n+\t    (match_operand:SHORT 1 \"nonimmediate_operand\" \" r,m\")))]\n   \"\"\n   \"@\n    #\n@@ -1064,8 +1066,9 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"extendsfdf2\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t(float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:DF     0 \"register_operand\" \"=f\")\n+\t(float_extend:DF\n+\t    (match_operand:SF 1 \"register_operand\" \" f\")))]\n   \"TARGET_DOUBLE_FLOAT\"\n   \"fcvt.d.s\\t%0,%1\"\n   [(set_attr \"type\" \"fcvt\")\n@@ -1079,41 +1082,46 @@\n ;;  ....................\n \n (define_insn \"fix_trunc<ANYF:mode><GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(fix:GPR (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:GPR      0 \"register_operand\" \"=r\")\n+\t(fix:GPR\n+\t    (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fcvt.<GPR:ifmt>.<ANYF:fmt> %0,%1,rtz\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n \n (define_insn \"fixuns_trunc<ANYF:mode><GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(unsigned_fix:GPR (match_operand:ANYF 1 \"register_operand\" \"f\")))]\n+  [(set (match_operand:GPR      0 \"register_operand\" \"=r\")\n+\t(unsigned_fix:GPR\n+\t    (match_operand:ANYF 1 \"register_operand\" \" f\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fcvt.<GPR:ifmt>u.<ANYF:fmt> %0,%1,rtz\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n \n (define_insn \"float<GPR:mode><ANYF:mode>2\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(float:ANYF (match_operand:GPR 1 \"reg_or_0_operand\" \"rJ\")))]\n+  [(set (match_operand:ANYF    0 \"register_operand\" \"= f\")\n+\t(float:ANYF\n+\t    (match_operand:GPR 1 \"reg_or_0_operand\" \" rJ\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fcvt.<ANYF:fmt>.<GPR:ifmt>\\t%0,%z1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n \n (define_insn \"floatuns<GPR:mode><ANYF:mode>2\"\n-  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n-\t(unsigned_float:ANYF (match_operand:GPR 1 \"reg_or_0_operand\" \"rJ\")))]\n+  [(set (match_operand:ANYF    0 \"register_operand\" \"= f\")\n+\t(unsigned_float:ANYF\n+\t    (match_operand:GPR 1 \"reg_or_0_operand\" \" rJ\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"fcvt.<ANYF:fmt>.<GPR:ifmt>u\\t%0,%z1\"\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<ANYF:MODE>\")])\n \n (define_insn \"l<rint_pattern><ANYF:mode><GPR:mode>2\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(unspec:GPR [(match_operand:ANYF 1 \"register_operand\" \"f\")]\n-\t\t    RINT))]\n+  [(set (match_operand:GPR       0 \"register_operand\" \"=r\")\n+\t(unspec:GPR\n+\t    [(match_operand:ANYF 1 \"register_operand\" \" f\")]\n+\t    RINT))]\n   \"TARGET_HARD_FLOAT\"\n   \"fcvt.<GPR:ifmt>.<ANYF:fmt> %0,%1,<rint_rm>\"\n   [(set_attr \"type\" \"fcvt\")\n@@ -1131,49 +1139,54 @@\n ;; opportunities.\n \n (define_insn \"got_load<mode>\"\n-   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-       (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")]\n-\t\t UNSPEC_LOAD_GOT))]\n+   [(set (match_operand:P      0 \"register_operand\" \"=r\")\n+\t (unspec:P\n+\t     [(match_operand:P 1 \"symbolic_operand\" \"\")]\n+\t     UNSPEC_LOAD_GOT))]\n   \"\"\n   \"la\\t%0,%1\"\n    [(set_attr \"got\" \"load\")\n     (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"tls_add_tp_le<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n-\t\t   (match_operand:P 2 \"register_operand\" \"r\")\n-\t\t   (match_operand:P 3 \"symbolic_operand\" \"\")]\n-\t\t  UNSPEC_TLS_LE))]\n+  [(set (match_operand:P      0 \"register_operand\" \"=r\")\n+\t(unspec:P\n+\t    [(match_operand:P 1 \"register_operand\" \"r\")\n+\t     (match_operand:P 2 \"register_operand\" \"r\")\n+\t     (match_operand:P 3 \"symbolic_operand\" \"\")]\n+\t    UNSPEC_TLS_LE))]\n   \"\"\n   \"add\\t%0,%1,%2,%%tprel_add(%3)\"\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"got_load_tls_gd<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-       (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")]\n-\t\t UNSPEC_TLS_GD))]\n+  [(set (match_operand:P      0 \"register_operand\" \"=r\")\n+\t(unspec:P\n+\t    [(match_operand:P 1 \"symbolic_operand\" \"\")]\n+\t    UNSPEC_TLS_GD))]\n   \"\"\n   \"la.tls.gd\\t%0,%1\"\n   [(set_attr \"got\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"got_load_tls_ie<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-       (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")]\n-\t\t UNSPEC_TLS_IE))]\n+  [(set (match_operand:P      0 \"register_operand\" \"=r\")\n+\t(unspec:P\n+\t    [(match_operand:P 1 \"symbolic_operand\" \"\")]\n+\t    UNSPEC_TLS_IE))]\n   \"\"\n   \"la.tls.ie\\t%0,%1\"\n   [(set_attr \"got\" \"load\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"auipc<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-       (unspec:P [(match_operand:P 1 \"symbolic_operand\" \"\")\n+  [(set (match_operand:P           0 \"register_operand\" \"=r\")\n+\t(unspec:P\n+\t    [(match_operand:P      1 \"symbolic_operand\" \"\")\n \t\t  (match_operand:P 2 \"const_int_operand\")\n \t\t  (pc)]\n-\t\t UNSPEC_AUIPC))]\n+\t    UNSPEC_AUIPC))]\n   \"\"\n   \".LA%2: auipc\\t%0,%h1\"\n   [(set_attr \"type\" \"arith\")\n@@ -1184,8 +1197,8 @@\n ;; should be applied.\n \n (define_insn \"*low<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(lo_sum:P (match_operand:P 1 \"register_operand\" \"r\")\n+  [(set (match_operand:P           0 \"register_operand\" \"=r\")\n+\t(lo_sum:P (match_operand:P 1 \"register_operand\" \" r\")\n \t\t  (match_operand:P 2 \"symbolic_operand\" \"\")))]\n   \"\"\n   \"addi\\t%0,%1,%R2\"\n@@ -1230,7 +1243,7 @@\n \n (define_insn \"*movdi_32bit\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r,m,  *f,*f,*r,*f,*m\")\n-\t(match_operand:DI 1 \"move_operand\" \" r,i,m,r,*J*r,*m,*f,*f,*f\"))]\n+\t(match_operand:DI 1 \"move_operand\"         \" r,i,m,r,*J*r,*m,*f,*f,*f\"))]\n   \"!TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n@@ -1239,8 +1252,8 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*movdi_64bit\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m,*f,*f,*r,*f,*m\")\n-\t(match_operand:DI 1 \"move_operand\" \" r,T,m,rJ,*r*J,*m,*f,*f,*f\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*f,*m\")\n+\t(match_operand:DI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f,*f\"))]\n   \"TARGET_64BIT\n    && (register_operand (operands[0], DImode)\n        || reg_or_0_operand (operands[1], DImode))\"\n@@ -1260,8 +1273,8 @@\n })\n \n (define_insn \"*movsi_internal\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r,m,*f,*f,*r,*m\")\n-\t(match_operand:SI 1 \"move_operand\" \"r,T,m,rJ,*r*J,*m,*f,*f\"))]\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*f,*r,*m\")\n+\t(match_operand:SI 1 \"move_operand\"         \" r,T,m,rJ,*r*J,*m,*f,*f\"))]\n   \"(register_operand (operands[0], SImode)\n     || reg_or_0_operand (operands[1], SImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n@@ -1285,8 +1298,8 @@\n })\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m,*f,*r\")\n-\t(match_operand:HI 1 \"move_operand\"\t \"r,T,m,rJ,*r*J,*f\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r\")\n+\t(match_operand:HI 1 \"move_operand\"\t   \" r,T,m,rJ,*r*J,*f\"))]\n   \"(register_operand (operands[0], HImode)\n     || reg_or_0_operand (operands[1], HImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n@@ -1297,18 +1310,18 @@\n ;; si+si->hi without truncation is legal because of TRULY_NOOP_TRUNCATION.\n \n (define_insn \"*add<mode>hi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(plus:HI (match_operand:HISI 1 \"register_operand\" \"r,r\")\n-\t\t  (match_operand:HISI 2 \"arith_operand\" \"r,I\")))]\n+  [(set (match_operand:HI            0 \"register_operand\" \"=r,r\")\n+\t(plus:HI (match_operand:HISI 1 \"register_operand\" \" r,r\")\n+\t\t (match_operand:HISI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n   { return TARGET_64BIT ? \"addw\\t%0,%1,%2\" : \"add\\t%0,%1,%2\"; }\n   [(set_attr \"type\" \"arith\")\n    (set_attr \"mode\" \"HI\")])\n \n (define_insn \"*xor<mode>hi3\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(xor:HI (match_operand:HISI 1 \"register_operand\" \"r,r\")\n-\t\t  (match_operand:HISI 2 \"arith_operand\" \"r,I\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"           \"=r,r\")\n+\t(xor:HI (match_operand:HISI 1 \"register_operand\" \" r,r\")\n+\t\t(match_operand:HISI 2 \"arith_operand\"    \" r,I\")))]\n   \"\"\n   \"xor\\t%0,%1,%2\"\n   [(set_attr \"type\" \"logical\")\n@@ -1326,8 +1339,8 @@\n })\n \n (define_insn \"*movqi_internal\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r,m,*f,*r\")\n-\t(match_operand:QI 1 \"move_operand\"\t \"r,I,m,rJ,*r*J,*f\"))]\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,r,r, m,  *f,*r\")\n+\t(match_operand:QI 1 \"move_operand\"         \" r,I,m,rJ,*r*J,*f\"))]\n   \"(register_operand (operands[0], QImode)\n     || reg_or_0_operand (operands[1], QImode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n@@ -1346,8 +1359,8 @@\n })\n \n (define_insn \"*movsf_hardfloat\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*r,*r,*r,*m\")\n-\t(match_operand:SF 1 \"move_operand\" \"f,G,m,f,G,*r,*f,*G*r,*m,*r\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*r,  *r,*r,*m\")\n+\t(match_operand:SF 1 \"move_operand\"         \" f,G,m,f,G,*r,*f,*G*r,*m,*r\"))]\n   \"TARGET_HARD_FLOAT\n    && (register_operand (operands[0], SFmode)\n        || reg_or_0_operand (operands[1], SFmode))\"\n@@ -1356,8 +1369,8 @@\n    (set_attr \"mode\" \"SF\")])\n \n (define_insn \"*movsf_softfloat\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:SF 1 \"move_operand\" \"Gr,m,r\"))]\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"= r,r,m\")\n+\t(match_operand:SF 1 \"move_operand\"         \" Gr,m,r\"))]\n   \"!TARGET_HARD_FLOAT\n    && (register_operand (operands[0], SFmode)\n        || reg_or_0_operand (operands[1], SFmode))\"\n@@ -1379,8 +1392,8 @@\n ;; In RV32, we lack fmv.x.d and fmv.d.x.  Go through memory instead.\n ;; (However, we can still use fcvt.d.w to zero a floating-point register.)\n (define_insn \"*movdf_hardfloat_rv32\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*r,*r,*m\")\n-\t(match_operand:DF 1 \"move_operand\" \"f,G,m,f,G,*r*G,*m,*r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,  *r,*r,*m\")\n+\t(match_operand:DF 1 \"move_operand\"         \" f,G,m,f,G,*r*G,*m,*r\"))]\n   \"!TARGET_64BIT && TARGET_DOUBLE_FLOAT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n@@ -1389,8 +1402,8 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*movdf_hardfloat_rv64\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*r,*r,*r,*m\")\n-\t(match_operand:DF 1 \"move_operand\" \"f,G,m,f,G,*r,*f,*r*G,*m,*r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*r,  *r,*r,*m\")\n+\t(match_operand:DF 1 \"move_operand\"         \" f,G,m,f,G,*r,*f,*r*G,*m,*r\"))]\n   \"TARGET_64BIT && TARGET_DOUBLE_FLOAT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n@@ -1399,8 +1412,8 @@\n    (set_attr \"mode\" \"DF\")])\n \n (define_insn \"*movdf_softfloat\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"=r,r,m\")\n-\t(match_operand:DF 1 \"move_operand\" \"rG,m,rG\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\" \"= r,r, m\")\n+\t(match_operand:DF 1 \"move_operand\"         \" rG,m,rG\"))]\n   \"!TARGET_DOUBLE_FLOAT\n    && (register_operand (operands[0], DFmode)\n        || reg_or_0_operand (operands[1], DFmode))\"\n@@ -1448,9 +1461,10 @@\n ;;  ....................\n \n (define_insn \"<optab>si3\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(any_shift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n+  [(set (match_operand:SI     0 \"register_operand\" \"= r\")\n+\t(any_shift:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"  r\")\n+\t    (match_operand:SI 2 \"arith_operand\"    \" rI\")))]\n   \"\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -1463,9 +1477,10 @@\n    (set_attr \"mode\" \"SI\")])\n \n (define_insn \"<optab>di3\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(any_shift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t       (match_operand:DI 2 \"arith_operand\" \"rI\")))]\n+  [(set (match_operand:DI 0 \"register_operand\"     \"= r\")\n+\t(any_shift:DI\n+\t    (match_operand:DI 1 \"register_operand\" \"  r\")\n+\t    (match_operand:DI 2 \"arith_operand\"    \" rI\")))]\n   \"TARGET_64BIT\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -1478,10 +1493,10 @@\n    (set_attr \"mode\" \"DI\")])\n \n (define_insn \"*<optab>si3_extend\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+  [(set (match_operand:DI                   0 \"register_operand\" \"= r\")\n \t(sign_extend:DI\n-\t   (any_shift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t\t (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n+\t    (any_shift:SI (match_operand:SI 1 \"register_operand\" \"  r\")\n+\t\t\t  (match_operand:SI 2 \"arith_operand\"    \" rI\"))))]\n   \"TARGET_64BIT\"\n {\n   if (GET_CODE (operands[2]) == CONST_INT)\n@@ -1537,8 +1552,8 @@\n (define_expand \"cbranch<mode>4\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n-\t\t       [(match_operand:BR 1 \"register_operand\")\n-\t\t\t(match_operand:BR 2 \"nonmemory_operand\")])\n+\t\t      [(match_operand:BR 1 \"register_operand\")\n+\t\t       (match_operand:BR 2 \"nonmemory_operand\")])\n \t\t      (label_ref (match_operand 3 \"\"))\n \t\t      (pc)))]\n   \"\"\n@@ -1565,13 +1580,13 @@\n (define_insn_and_split \"*branch_on_bit<X:mode>\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 0 \"equality_operator\"\n-\t  [(zero_extract:X (match_operand:X 2 \"register_operand\" \"r\")\n-\t\t (const_int 1)\n-\t\t (match_operand 3 \"branch_on_bit_operand\"))\n-\t\t (const_int 0)])\n-\t (label_ref (match_operand 1))\n-\t (pc)))\n+\t    (match_operator 0 \"equality_operator\"\n+\t        [(zero_extract:X (match_operand:X 2 \"register_operand\" \"r\")\n+\t\t\t\t (const_int 1)\n+\t\t\t\t (match_operand 3 \"branch_on_bit_operand\"))\n+\t\t\t\t (const_int 0)])\n+\t    (label_ref (match_operand 1))\n+\t    (pc)))\n    (clobber (match_scratch:X 4 \"=&r\"))]\n   \"\"\n   \"#\"\n@@ -1580,9 +1595,9 @@\n \t(ashift:X (match_dup 2) (match_dup 3)))\n    (set (pc)\n \t(if_then_else\n-\t (match_op_dup 0 [(match_dup 4) (const_int 0)])\n-\t (label_ref (match_operand 1))\n-\t (pc)))]\n+\t    (match_op_dup 0 [(match_dup 4) (const_int 0)])\n+\t    (label_ref (match_operand 1))\n+\t    (pc)))]\n {\n   int shift = GET_MODE_BITSIZE (<MODE>mode) - 1 - INTVAL (operands[3]);\n   operands[3] = GEN_INT (shift);\n@@ -1596,13 +1611,13 @@\n (define_insn_and_split \"*branch_on_bit_range<X:mode>\"\n   [(set (pc)\n \t(if_then_else\n-\t (match_operator 0 \"equality_operator\"\n-\t  [(zero_extract:X (match_operand:X 2 \"register_operand\" \"r\")\n-\t\t (match_operand 3 \"branch_on_bit_operand\")\n-\t\t (const_int 0))\n-\t\t (const_int 0)])\n-\t (label_ref (match_operand 1))\n-\t (pc)))\n+\t    (match_operator 0 \"equality_operator\"\n+\t\t[(zero_extract:X (match_operand:X 2 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand 3 \"branch_on_bit_operand\")\n+\t\t\t\t (const_int 0))\n+\t\t\t\t (const_int 0)])\n+\t    (label_ref (match_operand 1))\n+\t    (pc)))\n    (clobber (match_scratch:X 4 \"=&r\"))]\n   \"\"\n   \"#\"\n@@ -1611,9 +1626,9 @@\n \t(ashift:X (match_dup 2) (match_dup 3)))\n    (set (pc)\n \t(if_then_else\n-\t (match_op_dup 0 [(match_dup 4) (const_int 0)])\n-\t (label_ref (match_operand 1))\n-\t (pc)))]\n+\t    (match_op_dup 0 [(match_dup 4) (const_int 0)])\n+\t    (label_ref (match_operand 1))\n+\t    (pc)))]\n {\n   operands[3] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - INTVAL (operands[3]));\n })\n@@ -1630,8 +1645,8 @@\n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operator:SI 1 \"order_operator\"\n-\t [(match_operand:GPR 2 \"register_operand\")\n-\t  (match_operand:GPR 3 \"nonmemory_operand\")]))]\n+\t    [(match_operand:GPR 2 \"register_operand\")\n+\t     (match_operand:GPR 3 \"nonmemory_operand\")]))]\n   \"\"\n {\n   riscv_expand_int_scc (operands[0], GET_CODE (operands[1]), operands[2],\n@@ -1642,8 +1657,8 @@\n (define_expand \"cstore<mode>4\"\n   [(set (match_operand:SI 0 \"register_operand\")\n \t(match_operator:SI 1 \"fp_scc_comparison\"\n-\t [(match_operand:ANYF 2 \"register_operand\")\n-\t  (match_operand:ANYF 3 \"register_operand\")]))]\n+\t     [(match_operand:ANYF 2 \"register_operand\")\n+\t      (match_operand:ANYF 3 \"register_operand\")]))]\n   \"TARGET_HARD_FLOAT\"\n {\n   riscv_expand_float_scc (operands[0], GET_CODE (operands[1]), operands[2],\n@@ -1652,21 +1667,21 @@\n })\n \n (define_insn \"*cstore<ANYF:mode><X:mode>4\"\n-   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n-\t(match_operator:X 1 \"fp_native_comparison\"\n-\t      [(match_operand:ANYF 2 \"register_operand\" \"f\")\n-\t       (match_operand:ANYF 3 \"register_operand\" \"f\")]))]\n+   [(set (match_operand:X         0 \"register_operand\" \"=r\")\n+\t (match_operator:X 1 \"fp_native_comparison\"\n+\t     [(match_operand:ANYF 2 \"register_operand\" \" f\")\n+\t      (match_operand:ANYF 3 \"register_operand\" \" f\")]))]\n   \"TARGET_HARD_FLOAT\"\n   \"f%C1.<fmt>\\t%0,%2,%3\"\n   [(set_attr \"type\" \"fcmp\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \n (define_insn \"f<quiet_pattern>_quiet<ANYF:mode><X:mode>4\"\n-   [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+   [(set (match_operand:X         0 \"register_operand\" \"=r\")\n \t (unspec:X\n-\t    [(match_operand:ANYF 1 \"register_operand\" \"f\")\n-\t     (match_operand:ANYF 2 \"register_operand\" \"f\")]\n-\t    QUIET_COMPARISON))\n+\t     [(match_operand:ANYF 1 \"register_operand\" \" f\")\n+\t      (match_operand:ANYF 2 \"register_operand\" \" f\")]\n+\t     QUIET_COMPARISON))\n     (clobber (match_scratch:X 3 \"=&r\"))]\n   \"TARGET_HARD_FLOAT\"\n   \"frflags\\t%3\\n\\tf<quiet_pattern>.<fmt>\\t%0,%1,%2\\n\\tfsflags %3\"\n@@ -1675,53 +1690,53 @@\n    (set (attr \"length\") (const_int 12))])\n \n (define_insn \"*seq_zero_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(eq:GPR (match_operand:X 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+  [(set (match_operand:GPR       0 \"register_operand\" \"=r\")\n+\t(eq:GPR (match_operand:X 1 \"register_operand\" \" r\")\n+\t\t(const_int 0)))]\n   \"\"\n   \"seqz\\t%0,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n (define_insn \"*sne_zero_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(ne:GPR (match_operand:X 1 \"register_operand\" \"r\")\n-\t       (const_int 0)))]\n+  [(set (match_operand:GPR       0 \"register_operand\" \"=r\")\n+\t(ne:GPR (match_operand:X 1 \"register_operand\" \" r\")\n+\t\t(const_int 0)))]\n   \"\"\n   \"snez\\t%0,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n (define_insn \"*sgt<u>_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(any_gt:GPR (match_operand:X 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:X 2 \"reg_or_0_operand\" \"rJ\")))]\n+  [(set (match_operand:GPR           0 \"register_operand\" \"= r\")\n+\t(any_gt:GPR (match_operand:X 1 \"register_operand\" \"  r\")\n+\t\t    (match_operand:X 2 \"reg_or_0_operand\" \" rJ\")))]\n   \"\"\n   \"sgt<u>\\t%0,%1,%z2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<X:MODE>\")])\n \n (define_insn \"*sge<u>_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(any_ge:GPR (match_operand:X 1 \"register_operand\" \"r\")\n+  [(set (match_operand:GPR           0 \"register_operand\" \"=r\")\n+\t(any_ge:GPR (match_operand:X 1 \"register_operand\" \" r\")\n \t\t    (const_int 1)))]\n   \"\"\n   \"slt<u>\\t%0,zero,%1\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*slt<u>_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(any_lt:GPR (match_operand:X 1 \"register_operand\" \"r\")\n-\t\t    (match_operand:X 2 \"arith_operand\" \"rI\")))]\n+  [(set (match_operand:GPR           0 \"register_operand\" \"= r\")\n+\t(any_lt:GPR (match_operand:X 1 \"register_operand\" \"  r\")\n+\t\t    (match_operand:X 2 \"arith_operand\"    \" rI\")))]\n   \"\"\n   \"slt<u>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"slt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*sle<u>_<X:mode><GPR:mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=r\")\n-\t(any_le:GPR (match_operand:X 1 \"register_operand\" \"r\")\n+  [(set (match_operand:GPR           0 \"register_operand\" \"=r\")\n+\t(any_le:GPR (match_operand:X 1 \"register_operand\" \" r\")\n \t\t    (match_operand:X 2 \"sle_operand\" \"\")))]\n   \"\"\n {"}]}