{"sha": "45db3141b75ad7f754ea89264403881eae4278d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVkYjMxNDFiNzVhZDdmNzU0ZWE4OTI2NDQwMzg4MWVhZTQyNzhkMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-20T12:04:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-20T12:04:38Z"}, "message": "tree-flow.h (register_new_name_mapping): Remove.\n\n2012-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-flow.h (register_new_name_mapping): Remove.\n\t* tree-into-ssa.c (register_new_name_mapping): Likewise.\n\t(add_new_name_mapping): Do not push/pop timevar here.\n\t(create_new_def_for): Instead do it here.  Initialize\n\tupdate-ssa here, handle a NULL def.\n\t* tree-vrp.c (build_assert_expr_for): Use create_new_def_for.\n\nFrom-SVN: r190531", "tree": {"sha": "4243d9b223592f03b424450def658d3b50bbddd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4243d9b223592f03b424450def658d3b50bbddd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45db3141b75ad7f754ea89264403881eae4278d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45db3141b75ad7f754ea89264403881eae4278d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45db3141b75ad7f754ea89264403881eae4278d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45db3141b75ad7f754ea89264403881eae4278d3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3b3cd8d6899e345dc9792b57c2b1b78b3f3635e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b3cd8d6899e345dc9792b57c2b1b78b3f3635e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b3cd8d6899e345dc9792b57c2b1b78b3f3635e"}], "stats": {"total": 105, "additions": 47, "deletions": 58}, "files": [{"sha": "07b6a6ca338e7ccf615d7260dc037750fe80d21d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45db3141b75ad7f754ea89264403881eae4278d3", "patch": "@@ -1,3 +1,12 @@\n+2012-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-flow.h (register_new_name_mapping): Remove.\n+\t* tree-into-ssa.c (register_new_name_mapping): Likewise.\n+\t(add_new_name_mapping): Do not push/pop timevar here.\n+\t(create_new_def_for): Instead do it here.  Initialize\n+\tupdate-ssa here, handle a NULL def.\n+\t* tree-vrp.c (build_assert_expr_for): Use create_new_def_for.\n+\n 2012-08-20  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/54327"}, {"sha": "15c14654b220d84d0f80728bbb1f654503d0558a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=45db3141b75ad7f754ea89264403881eae4278d3", "patch": "@@ -516,7 +516,6 @@ void release_defs_bitset (bitmap toremove);\n /* In tree-into-ssa.c  */\n void update_ssa (unsigned);\n void delete_update_ssa (void);\n-void register_new_name_mapping (tree, tree);\n tree create_new_def_for (tree, gimple, def_operand_p);\n bool need_ssa_update_p (struct function *);\n bool name_registered_for_update_p (tree);"}, {"sha": "8365ee1074a76766ece5a1810b9f5c309c6aa49d", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=45db3141b75ad7f754ea89264403881eae4278d3", "patch": "@@ -111,15 +111,15 @@ static VEC(gimple_vec, heap) *phis_to_rewrite;\n static bitmap blocks_with_phis_to_rewrite;\n \n /* Growth factor for NEW_SSA_NAMES and OLD_SSA_NAMES.  These sets need\n-   to grow as the callers to register_new_name_mapping will typically\n-   create new names on the fly.  FIXME.  Currently set to 1/3 to avoid\n-   frequent reallocations but still need to find a reasonable growth\n-   strategy.  */\n+   to grow as the callers to create_new_def_for will create new names on\n+   the fly.\n+   FIXME.  Currently set to 1/3 to avoid frequent reallocations but still\n+   need to find a reasonable growth strategy.  */\n #define NAME_SETS_GROWTH_FACTOR\t(MAX (3, num_ssa_names / 3))\n \n \n /* The function the SSA updating data structures have been initialized for.\n-   NULL if they need to be initialized by register_new_name_mapping.  */\n+   NULL if they need to be initialized by create_new_def_for.  */\n static struct function *update_ssa_initialized_fn = NULL;\n \n /* Global data to attach to the main dominator walk structure.  */\n@@ -587,8 +587,6 @@ add_to_repl_tbl (tree new_tree, tree old)\n static void\n add_new_name_mapping (tree new_tree, tree old)\n {\n-  timevar_push (TV_TREE_SSA_INCREMENTAL);\n-\n   /* OLD and NEW_TREE must be different SSA names for the same symbol.  */\n   gcc_assert (new_tree != old && SSA_NAME_VAR (new_tree) == SSA_NAME_VAR (old));\n \n@@ -613,8 +611,6 @@ add_new_name_mapping (tree new_tree, tree old)\n      respectively.  */\n   SET_BIT (new_ssa_names, SSA_NAME_VERSION (new_tree));\n   SET_BIT (old_ssa_names, SSA_NAME_VERSION (old));\n-\n-  timevar_pop (TV_TREE_SSA_INCREMENTAL);\n }\n \n \n@@ -2842,16 +2838,28 @@ delete_update_ssa (void)\n \n \n /* Create a new name for OLD_NAME in statement STMT and replace the\n-   operand pointed to by DEF_P with the newly created name.  Return\n-   the new name and register the replacement mapping <NEW, OLD> in\n+   operand pointed to by DEF_P with the newly created name.  If DEF_P\n+   is NULL then STMT should be a GIMPLE assignment.\n+   Return the new name and register the replacement mapping <NEW, OLD> in\n    update_ssa's tables.  */\n \n tree\n create_new_def_for (tree old_name, gimple stmt, def_operand_p def)\n {\n-  tree new_name = duplicate_ssa_name (old_name, stmt);\n+  tree new_name;\n \n-  SET_DEF (def, new_name);\n+  timevar_push (TV_TREE_SSA_INCREMENTAL);\n+\n+  if (!update_ssa_initialized_fn)\n+    init_update_ssa (cfun);\n+\n+  gcc_assert (update_ssa_initialized_fn == cfun);\n+\n+  new_name = duplicate_ssa_name (old_name, stmt);\n+  if (def)\n+    SET_DEF (def, new_name);\n+  else\n+    gimple_assign_set_lhs (stmt, new_name);\n \n   if (gimple_code (stmt) == GIMPLE_PHI)\n     {\n@@ -2861,30 +2869,16 @@ create_new_def_for (tree old_name, gimple stmt, def_operand_p def)\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (new_name) = bb_has_abnormal_pred (bb);\n     }\n \n-  register_new_name_mapping (new_name, old_name);\n+  add_new_name_mapping (new_name, old_name);\n \n   /* For the benefit of passes that will be updating the SSA form on\n      their own, set the current reaching definition of OLD_NAME to be\n      NEW_NAME.  */\n   get_ssa_name_ann (old_name)->info.current_def = new_name;\n \n-  return new_name;\n-}\n-\n-\n-/* Register name NEW to be a replacement for name OLD.  This function\n-   must be called for every replacement that should be performed by\n-   update_ssa.  */\n-\n-void\n-register_new_name_mapping (tree new_tree, tree old)\n-{\n-  if (!update_ssa_initialized_fn)\n-    init_update_ssa (cfun);\n-\n-  gcc_assert (update_ssa_initialized_fn == cfun);\n+  timevar_pop (TV_TREE_SSA_INCREMENTAL);\n \n-  add_new_name_mapping (new_tree, old);\n+  return new_name;\n }\n \n \n@@ -3056,13 +3050,13 @@ insert_updated_phi_nodes_for (tree var, bitmap_head *dfs, bitmap blocks,\n       frontier of the blocks where each of NEW_SSA_NAMES are defined.\n \n    The mapping between OLD_SSA_NAMES and NEW_SSA_NAMES is setup by\n-   calling register_new_name_mapping for every pair of names that the\n+   calling create_new_def_for to create new defs for names that the\n    caller wants to replace.\n \n-   The caller identifies the new names that have been inserted and the\n-   names that need to be replaced by calling register_new_name_mapping\n-   for every pair <NEW, OLD>.  Note that the function assumes that the\n-   new names have already been inserted in the IL.\n+   The caller cretaes the new names to be inserted and the names that need\n+   to be replaced by calling create_new_def_for for each old definition\n+   to be replaced.  Note that the function assumes that the\n+   new defining statement has already been inserted in the IL.\n \n    For instance, given the following code:\n "}, {"sha": "f0d68ebf8eb2656333adef0c297841c09014de58", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45db3141b75ad7f754ea89264403881eae4278d3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=45db3141b75ad7f754ea89264403881eae4278d3", "patch": "@@ -4152,33 +4152,20 @@ debug_all_value_ranges (void)\n static gimple\n build_assert_expr_for (tree cond, tree v)\n {\n-  tree n;\n+  tree a;\n   gimple assertion;\n \n-  gcc_assert (TREE_CODE (v) == SSA_NAME);\n-  n = duplicate_ssa_name (v, NULL);\n+  gcc_assert (TREE_CODE (v) == SSA_NAME\n+\t      && COMPARISON_CLASS_P (cond));\n \n-  if (COMPARISON_CLASS_P (cond))\n-    {\n-      tree a = build2 (ASSERT_EXPR, TREE_TYPE (v), v, cond);\n-      assertion = gimple_build_assign (n, a);\n-    }\n-  else if (TREE_CODE (cond) == SSA_NAME)\n-    {\n-      /* Given V, build the assignment N = true.  */\n-      gcc_assert (v == cond);\n-      assertion = gimple_build_assign (n, boolean_true_node);\n-    }\n-  else\n-    gcc_unreachable ();\n-\n-  SSA_NAME_DEF_STMT (n) = assertion;\n+  a = build2 (ASSERT_EXPR, TREE_TYPE (v), v, cond);\n+  assertion = gimple_build_assign (NULL_TREE, a);\n \n   /* The new ASSERT_EXPR, creates a new SSA name that replaces the\n-     operand of the ASSERT_EXPR. Register the new name and the old one\n-     in the replacement table so that we can fix the SSA web after\n-     adding all the ASSERT_EXPRs.  */\n-  register_new_name_mapping (n, v);\n+     operand of the ASSERT_EXPR.  Create it so the new name and the old one\n+     are registered in the replacement table so that we can fix the SSA web\n+     after adding all the ASSERT_EXPRs.  */\n+  create_new_def_for (v, assertion, NULL);\n \n   return assertion;\n }"}]}