{"sha": "0373796b4d886711d59f19dcffb6e0cbe19969cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM3Mzc5NmI0ZDg4NjcxMWQ1OWYxOWRjZmZiNmUwY2JlMTk5NjljZA==", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2015-04-29T20:32:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-04-29T20:32:41Z"}, "message": "c-common.c (handle_section_attribute): Refactor to reduce nesting and distinguish between error cases.\n\n        * c-common.c (handle_section_attribute): Refactor to reduce\n        nesting and distinguish between error cases.\n\nFrom-SVN: r222590", "tree": {"sha": "3aa351241ff8ef05858111d20e1931f9627bd2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa351241ff8ef05858111d20e1931f9627bd2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0373796b4d886711d59f19dcffb6e0cbe19969cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0373796b4d886711d59f19dcffb6e0cbe19969cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0373796b4d886711d59f19dcffb6e0cbe19969cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0373796b4d886711d59f19dcffb6e0cbe19969cd/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d92d2743c400d2b0bf14954e14bc343e1953168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d92d2743c400d2b0bf14954e14bc343e1953168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d92d2743c400d2b0bf14954e14bc343e1953168"}], "stats": {"total": 96, "additions": 51, "deletions": 45}, "files": [{"sha": "c17ea5f6138f814ceeaf95975ce76809efd3961c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0373796b4d886711d59f19dcffb6e0cbe19969cd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0373796b4d886711d59f19dcffb6e0cbe19969cd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=0373796b4d886711d59f19dcffb6e0cbe19969cd", "patch": "@@ -1,3 +1,8 @@\n+2015-04-29  Josh Triplett  <josh@joshtriplett.org>\n+\n+        * c-common.c (handle_section_attribute): Refactor to reduce\n+        nesting and distinguish between error cases.\n+\n 2015-04-29  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/64610"}, {"sha": "7d314f854fe231784c3d0070a0fc73e611af3a2c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 46, "deletions": 45, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0373796b4d886711d59f19dcffb6e0cbe19969cd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0373796b4d886711d59f19dcffb6e0cbe19969cd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=0373796b4d886711d59f19dcffb6e0cbe19969cd", "patch": "@@ -7602,58 +7602,59 @@ handle_section_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n {\n   tree decl = *node;\n \n-  if (targetm_common.have_named_sections)\n+  if (!targetm_common.have_named_sections)\n     {\n-      user_defined_section_attribute = true;\n+      error_at (DECL_SOURCE_LOCATION (*node),\n+\t\t\"section attributes are not supported for this target\");\n+      goto fail;\n+    }\n \n-      if ((TREE_CODE (decl) == FUNCTION_DECL\n-\t   || TREE_CODE (decl) == VAR_DECL)\n-\t  && TREE_CODE (TREE_VALUE (args)) == STRING_CST)\n-\t{\n-\t  if (TREE_CODE (decl) == VAR_DECL\n-\t      && current_function_decl != NULL_TREE\n-\t      && !TREE_STATIC (decl))\n-\t    {\n-\t      error_at (DECL_SOURCE_LOCATION (decl),\n-\t\t\t\"section attribute cannot be specified for \"\n-\t\t\t\"local variables\");\n-\t      *no_add_attrs = true;\n-\t    }\n+  user_defined_section_attribute = true;\n \n-\t  /* The decl may have already been given a section attribute\n-\t     from a previous declaration.  Ensure they match.  */\n-\t  else if (DECL_SECTION_NAME (decl) != NULL\n-\t\t   && strcmp (DECL_SECTION_NAME (decl),\n-\t\t\t      TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n-\t    {\n-\t      error (\"section of %q+D conflicts with previous declaration\",\n-\t\t     *node);\n-\t      *no_add_attrs = true;\n-\t    }\n-\t  else if (TREE_CODE (decl) == VAR_DECL\n-\t\t   && !targetm.have_tls && targetm.emutls.tmpl_section\n-\t\t   && DECL_THREAD_LOCAL_P (decl))\n-\t    {\n-\t      error (\"section of %q+D cannot be overridden\", *node);\n-\t      *no_add_attrs = true;\n-\t    }\n-\t  else\n-\t    set_decl_section_name (decl,\n-\t\t\t\t   TREE_STRING_POINTER (TREE_VALUE (args)));\n-\t}\n-      else\n-\t{\n-\t  error (\"section attribute not allowed for %q+D\", *node);\n-\t  *no_add_attrs = true;\n-\t}\n+  if (TREE_CODE (decl) != FUNCTION_DECL && TREE_CODE (decl) != VAR_DECL)\n+    {\n+      error (\"section attribute not allowed for %q+D\", *node);\n+      goto fail;\n     }\n-  else\n+\n+  if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n     {\n-      error_at (DECL_SOURCE_LOCATION (*node),\n-\t\t\"section attributes are not supported for this target\");\n-      *no_add_attrs = true;\n+      error (\"section attribute argument not a string constant\");\n+      goto fail;\n+    }\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && current_function_decl != NULL_TREE\n+      && !TREE_STATIC (decl))\n+    {\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+                \"section attribute cannot be specified for local variables\");\n+      goto fail;\n     }\n \n+  /* The decl may have already been given a section attribute\n+     from a previous declaration.  Ensure they match.  */\n+  if (DECL_SECTION_NAME (decl) != NULL\n+      && strcmp (DECL_SECTION_NAME (decl),\n+                 TREE_STRING_POINTER (TREE_VALUE (args))) != 0)\n+    {\n+      error (\"section of %q+D conflicts with previous declaration\", *node);\n+      goto fail;\n+    }\n+\n+  if (TREE_CODE (decl) == VAR_DECL\n+      && !targetm.have_tls && targetm.emutls.tmpl_section\n+      && DECL_THREAD_LOCAL_P (decl))\n+    {\n+      error (\"section of %q+D cannot be overridden\", *node);\n+      goto fail;\n+    }\n+\n+  set_decl_section_name (decl, TREE_STRING_POINTER (TREE_VALUE (args)));\n+  return NULL_TREE;\n+\n+fail:\n+  *no_add_attrs = true;\n   return NULL_TREE;\n }\n "}]}