{"sha": "a795ca6e596208db4968b33f2bdc1d0dd284028d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc5NWNhNmU1OTYyMDhkYjQ5NjhiMzNmMmJkYzFkMGRkMjg0MDI4ZA==", "commit": {"author": {"name": "Harsha Jagasia", "email": "harsha.jagasia@amd.com", "date": "2009-09-29T17:15:32Z"}, "committer": {"name": "Harsha Jagasia", "email": "hjagasia@gcc.gnu.org", "date": "2009-09-29T17:15:32Z"}, "message": "config.gcc (i[34567]86-*-*): Remove mmintrin-common.h.\n\n2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n\n\t* config.gcc (i[34567]86-*-*): Remove mmintrin-common.h.\n\t(x86_64-*-*): Ditto.\n\t* config/i386/smmintrin.h: Move instructions in mmintrin-common.h\n\tback to smmintrin.h.\n\t* config/i386/cpuid.h: (bit_SSE5): Remove SSE5 bit.\n\t* config/i386/x86intrin.h: Remove SSE5.\n\t* config/i386/mmintrin-common.h: Delete file.\t\n\t* doc/extend.texi (x86 intrinsics): Remove SSE5 flags\n\tand builtins.\n\t\n\t* gcc.target/i386/i386.exp: Remove check_effective_target_sse5.\n\t* gcc.target/i386/isa-1.c\n\t* gcc.target/i386/isa-5.c\n\t* gcc.target/i386/isa-6.c: Remove SSE5.\n\t* gcc.target/i386/funcspec-4.c: Remove error conditions related to SSE5.\n\t* gcc.target/i386/avx-1.c\n\t* gcc.target/i386/avx-2.c\n\t* gcc.target/i386/sse-23.c: Remove comments to mmintrin-common.h.\n\t* gcc.target/i386/funcspec-9.c: Delete.\n\nFrom-SVN: r152280", "tree": {"sha": "80a78b572f0d30eba74b97c66647296d8dc62418", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a78b572f0d30eba74b97c66647296d8dc62418"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a795ca6e596208db4968b33f2bdc1d0dd284028d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a795ca6e596208db4968b33f2bdc1d0dd284028d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a795ca6e596208db4968b33f2bdc1d0dd284028d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a795ca6e596208db4968b33f2bdc1d0dd284028d/comments", "author": null, "committer": null, "parents": [{"sha": "b0e96404c1e530a59b2e52a3894a67508f04817d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0e96404c1e530a59b2e52a3894a67508f04817d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0e96404c1e530a59b2e52a3894a67508f04817d"}], "stats": {"total": 611, "additions": 152, "deletions": 459}, "files": [{"sha": "e8696dba6bfb2dee2f133cb27be5402684042977", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -1,3 +1,15 @@\n+2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n+\n+\t* config.gcc (i[34567]86-*-*): Remove mmintrin-common.h.\n+\t(x86_64-*-*): Ditto.\t\n+\t* config/i386/smmintrin.h: Move instructions in mmintrin-common.h\n+\tback to smmintrin.h.\n+\t* config/i386/cpuid.h: (bit_SSE5): Remove SSE5 bit.\n+\t* config/i386/x86intrin.h: Remove SSE5.\n+\t* config/i386/mmintrin-common.h: Delete file.\t\n+\t* doc/extend.texi (x86 intrinsics): Remove SSE5 flags\n+\tand builtins.\n+\n 2009-09-29  Richard Guenther  <rguenther@suse.de>\n \n \t* alias.c (ao_ref_from_mem): Properly deal with off decl accesses"}, {"sha": "5ad577017140d4b24cd310867386c6655d29f84a", "filename": "gcc/config.gcc", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -286,19 +286,17 @@ i[34567]86-*-*)\n \tcxx_target_objs=\"i386-c.o\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n-\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n-\t\t       wmmintrin.h immintrin.h x86intrin.h avxintrin.h \n-\t\t       ia32intrin.h cross-stdarg.h\"\n+\t\t       nmmintrin.h bmmintrin.h wmmintrin.h immintrin.h\n+\t\t       x86intrin.h avxintrin.h ia32intrin.h cross-stdarg.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n \tc_target_objs=\"i386-c.o\"\n \tcxx_target_objs=\"i386-c.o\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n-\t\t       nmmintrin.h bmmintrin.h mmintrin-common.h\n-\t\t       wmmintrin.h immintrin.h x86intrin.h avxintrin.h \n-\t\t       ia32intrin.h cross-stdarg.h\"\n+\t\t       nmmintrin.h bmmintrin.h wmmintrin.h immintrin.h\n+\t\t       x86intrin.h avxintrin.h ia32intrin.h cross-stdarg.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "61a3dcaf13bd1bcc5e97b7d4820a1c697e5e4827", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -48,7 +48,6 @@\n /* %ecx */\n #define bit_LAHF_LM\t(1 << 0)\n #define bit_SSE4a\t(1 << 6)\n-#define bit_SSE5\t(1 << 11)\n \n /* %edx */\n #define bit_LM\t\t(1 << 29)"}, {"sha": "25fd6aa63926b744f2ea989716b2f81a471f83ea", "filename": "gcc/config/i386/mmintrin-common.h", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e96404c1e530a59b2e52a3894a67508f04817d/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e96404c1e530a59b2e52a3894a67508f04817d/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin-common.h?ref=b0e96404c1e530a59b2e52a3894a67508f04817d", "patch": "@@ -1,154 +0,0 @@\n-/* Copyright (C) 2007, 2008, 2009 Free Software Foundation, Inc.\n-\n-   This file is part of GCC.\n-\n-   GCC is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   GCC is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   Under Section 7 of GPL version 3, you are granted additional\n-   permissions described in the GCC Runtime Library Exception, version\n-   3.1, as published by the Free Software Foundation.\n-\n-   You should have received a copy of the GNU General Public License and\n-   a copy of the GCC Runtime Library Exception along with this program;\n-   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-   <http://www.gnu.org/licenses/>.  */\n-\n-/* Common definition of the ROUND and PTEST intrinsics, SSE4.1.  */\n-\n-#ifndef _MMINTRIN_COMMON_H_INCLUDED\n-#define _MMINTRIN_COMMON_H_INCLUDED\n-\n-#if !defined(__SSE4_1__)\n-# error \"SSE4.1 instruction set not enabled\"\n-#else\n-\n-/* Rounding mode macros. */\n-#define _MM_FROUND_TO_NEAREST_INT\t0x00\n-#define _MM_FROUND_TO_NEG_INF\t\t0x01\n-#define _MM_FROUND_TO_POS_INF\t\t0x02\n-#define _MM_FROUND_TO_ZERO\t\t0x03\n-#define _MM_FROUND_CUR_DIRECTION\t0x04\n-\n-#define _MM_FROUND_RAISE_EXC\t\t0x00\n-#define _MM_FROUND_NO_EXC\t\t0x08\n-\n-#define _MM_FROUND_NINT\t\t\\\n-  (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_RAISE_EXC)\n-#define _MM_FROUND_FLOOR\t\\\n-  (_MM_FROUND_TO_NEG_INF | _MM_FROUND_RAISE_EXC)\n-#define _MM_FROUND_CEIL\t\t\\\n-  (_MM_FROUND_TO_POS_INF | _MM_FROUND_RAISE_EXC)\n-#define _MM_FROUND_TRUNC\t\\\n-  (_MM_FROUND_TO_ZERO | _MM_FROUND_RAISE_EXC)\n-#define _MM_FROUND_RINT\t\t\\\n-  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_RAISE_EXC)\n-#define _MM_FROUND_NEARBYINT\t\\\n-  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_NO_EXC)\n-\n-/* Test Instruction */\n-/* Packed integer 128-bit bitwise comparison. Return 1 if\n-   (__V & __M) == 0.  */\n-extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_testz_si128 (__m128i __M, __m128i __V)\n-{\n-  return __builtin_ia32_ptestz128 ((__v2di)__M, (__v2di)__V);\n-}\n-\n-/* Packed integer 128-bit bitwise comparison. Return 1 if\n-   (__V & ~__M) == 0.  */\n-extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_testc_si128 (__m128i __M, __m128i __V)\n-{\n-  return __builtin_ia32_ptestc128 ((__v2di)__M, (__v2di)__V);\n-}\n-\n-/* Packed integer 128-bit bitwise comparison. Return 1 if\n-   (__V & __M) != 0 && (__V & ~__M) != 0.  */\n-extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_testnzc_si128 (__m128i __M, __m128i __V)\n-{\n-  return __builtin_ia32_ptestnzc128 ((__v2di)__M, (__v2di)__V);\n-}\n-\n-/* Macros for packed integer 128-bit comparison intrinsics.  */\n-#define _mm_test_all_zeros(M, V) _mm_testz_si128 ((M), (V))\n-\n-#define _mm_test_all_ones(V) \\\n-  _mm_testc_si128 ((V), _mm_cmpeq_epi32 ((V), (V)))\n-\n-#define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128 ((M), (V))\n-\n-/* Packed/scalar double precision floating point rounding.  */\n-\n-#ifdef __OPTIMIZE__\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_round_pd (__m128d __V, const int __M)\n-{\n-  return (__m128d) __builtin_ia32_roundpd ((__v2df)__V, __M);\n-}\n-\n-extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_round_sd(__m128d __D, __m128d __V, const int __M)\n-{\n-  return (__m128d) __builtin_ia32_roundsd ((__v2df)__D,\n-\t\t\t\t\t   (__v2df)__V,\n-\t\t\t\t\t   __M);\n-}\n-#else\n-#define _mm_round_pd(V, M) \\\n-  ((__m128d) __builtin_ia32_roundpd ((__v2df)(__m128d)(V), (int)(M)))\n-\n-#define _mm_round_sd(D, V, M)\t\t\t\t\t\t\\\n-  ((__m128d) __builtin_ia32_roundsd ((__v2df)(__m128d)(D),\t\t\\\n-\t\t\t\t     (__v2df)(__m128d)(V), (int)(M)))\n-#endif\n-\n-/* Packed/scalar single precision floating point rounding.  */\n-\n-#ifdef __OPTIMIZE__\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_round_ps (__m128 __V, const int __M)\n-{\n-  return (__m128) __builtin_ia32_roundps ((__v4sf)__V, __M);\n-}\n-\n-extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n-_mm_round_ss (__m128 __D, __m128 __V, const int __M)\n-{\n-  return (__m128) __builtin_ia32_roundss ((__v4sf)__D,\n-\t\t\t\t\t  (__v4sf)__V,\n-\t\t\t\t\t  __M);\n-}\n-#else\n-#define _mm_round_ps(V, M) \\\n-  ((__m128) __builtin_ia32_roundps ((__v4sf)(__m128)(V), (int)(M)))\n-\n-#define _mm_round_ss(D, V, M)\t\t\t\t\t\t\\\n-  ((__m128) __builtin_ia32_roundss ((__v4sf)(__m128)(D),\t\t\\\n-\t\t\t\t    (__v4sf)(__m128)(V), (int)(M)))\n-#endif\n-\n-/* Macros for ceil/floor intrinsics.  */\n-#define _mm_ceil_pd(V)\t   _mm_round_pd ((V), _MM_FROUND_CEIL)\n-#define _mm_ceil_sd(D, V)  _mm_round_sd ((D), (V), _MM_FROUND_CEIL)\n-\n-#define _mm_floor_pd(V)\t   _mm_round_pd((V), _MM_FROUND_FLOOR)\n-#define _mm_floor_sd(D, V) _mm_round_sd ((D), (V), _MM_FROUND_FLOOR)\n-\n-#define _mm_ceil_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_CEIL)\n-#define _mm_ceil_ss(D, V)  _mm_round_ss ((D), (V), _MM_FROUND_CEIL)\n-\n-#define _mm_floor_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_FLOOR)\n-#define _mm_floor_ss(D, V) _mm_round_ss ((D), (V), _MM_FROUND_FLOOR)\n-\n-#endif /* __SSE4_1__ */\n-\n-#endif /* _MMINTRIN_COMMON_H_INCLUDED */"}, {"sha": "8fbb35c9b7a2ff4f908ff64fb75e62e1a73447e9", "filename": "gcc/config/i386/smmintrin.h", "status": "modified", "additions": 119, "deletions": 1, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fsmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsmmintrin.h?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -35,7 +35,125 @@\n /* We need definitions from the SSSE3, SSE3, SSE2 and SSE header\n    files.  */\n #include <tmmintrin.h>\n-#include <mmintrin-common.h>\n+\n+/* Rounding mode macros. */\n+#define _MM_FROUND_TO_NEAREST_INT\t0x00\n+#define _MM_FROUND_TO_NEG_INF\t\t0x01\n+#define _MM_FROUND_TO_POS_INF\t\t0x02\n+#define _MM_FROUND_TO_ZERO\t\t0x03\n+#define _MM_FROUND_CUR_DIRECTION\t0x04\n+\n+#define _MM_FROUND_RAISE_EXC\t\t0x00\n+#define _MM_FROUND_NO_EXC\t\t0x08\n+\n+#define _MM_FROUND_NINT\t\t\\\n+  (_MM_FROUND_TO_NEAREST_INT | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_FLOOR\t\\\n+  (_MM_FROUND_TO_NEG_INF | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_CEIL\t\t\\\n+  (_MM_FROUND_TO_POS_INF | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_TRUNC\t\\\n+  (_MM_FROUND_TO_ZERO | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_RINT\t\t\\\n+  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_RAISE_EXC)\n+#define _MM_FROUND_NEARBYINT\t\\\n+  (_MM_FROUND_CUR_DIRECTION | _MM_FROUND_NO_EXC)\n+\n+/* Test Instruction */\n+/* Packed integer 128-bit bitwise comparison. Return 1 if\n+   (__V & __M) == 0.  */\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testz_si128 (__m128i __M, __m128i __V)\n+{\n+  return __builtin_ia32_ptestz128 ((__v2di)__M, (__v2di)__V);\n+}\n+\n+/* Packed integer 128-bit bitwise comparison. Return 1 if\n+   (__V & ~__M) == 0.  */\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testc_si128 (__m128i __M, __m128i __V)\n+{\n+  return __builtin_ia32_ptestc128 ((__v2di)__M, (__v2di)__V);\n+}\n+\n+/* Packed integer 128-bit bitwise comparison. Return 1 if\n+   (__V & __M) != 0 && (__V & ~__M) != 0.  */\n+extern __inline int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_testnzc_si128 (__m128i __M, __m128i __V)\n+{\n+  return __builtin_ia32_ptestnzc128 ((__v2di)__M, (__v2di)__V);\n+}\n+\n+/* Macros for packed integer 128-bit comparison intrinsics.  */\n+#define _mm_test_all_zeros(M, V) _mm_testz_si128 ((M), (V))\n+\n+#define _mm_test_all_ones(V) \\\n+  _mm_testc_si128 ((V), _mm_cmpeq_epi32 ((V), (V)))\n+\n+#define _mm_test_mix_ones_zeros(M, V) _mm_testnzc_si128 ((M), (V))\n+\n+/* Packed/scalar double precision floating point rounding.  */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_pd (__m128d __V, const int __M)\n+{\n+  return (__m128d) __builtin_ia32_roundpd ((__v2df)__V, __M);\n+}\n+\n+extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_sd(__m128d __D, __m128d __V, const int __M)\n+{\n+  return (__m128d) __builtin_ia32_roundsd ((__v2df)__D,\n+\t\t\t\t\t   (__v2df)__V,\n+\t\t\t\t\t   __M);\n+}\n+#else\n+#define _mm_round_pd(V, M) \\\n+  ((__m128d) __builtin_ia32_roundpd ((__v2df)(__m128d)(V), (int)(M)))\n+\n+#define _mm_round_sd(D, V, M)\t\t\t\t\t\t\\\n+  ((__m128d) __builtin_ia32_roundsd ((__v2df)(__m128d)(D),\t\t\\\n+\t\t\t\t     (__v2df)(__m128d)(V), (int)(M)))\n+#endif\n+\n+/* Packed/scalar single precision floating point rounding.  */\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_ps (__m128 __V, const int __M)\n+{\n+  return (__m128) __builtin_ia32_roundps ((__v4sf)__V, __M);\n+}\n+\n+extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_round_ss (__m128 __D, __m128 __V, const int __M)\n+{\n+  return (__m128) __builtin_ia32_roundss ((__v4sf)__D,\n+\t\t\t\t\t  (__v4sf)__V,\n+\t\t\t\t\t  __M);\n+}\n+#else\n+#define _mm_round_ps(V, M) \\\n+  ((__m128) __builtin_ia32_roundps ((__v4sf)(__m128)(V), (int)(M)))\n+\n+#define _mm_round_ss(D, V, M)\t\t\t\t\t\t\\\n+  ((__m128) __builtin_ia32_roundss ((__v4sf)(__m128)(D),\t\t\\\n+\t\t\t\t    (__v4sf)(__m128)(V), (int)(M)))\n+#endif\n+\n+/* Macros for ceil/floor intrinsics.  */\n+#define _mm_ceil_pd(V)\t   _mm_round_pd ((V), _MM_FROUND_CEIL)\n+#define _mm_ceil_sd(D, V)  _mm_round_sd ((D), (V), _MM_FROUND_CEIL)\n+\n+#define _mm_floor_pd(V)\t   _mm_round_pd((V), _MM_FROUND_FLOOR)\n+#define _mm_floor_sd(D, V) _mm_round_sd ((D), (V), _MM_FROUND_FLOOR)\n+\n+#define _mm_ceil_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_CEIL)\n+#define _mm_ceil_ss(D, V)  _mm_round_ss ((D), (V), _MM_FROUND_CEIL)\n+\n+#define _mm_floor_ps(V)\t   _mm_round_ps ((V), _MM_FROUND_FLOOR)\n+#define _mm_floor_ss(D, V) _mm_round_ss ((D), (V), _MM_FROUND_FLOOR)\n \n /* SSE4.1 */\n "}, {"sha": "939ea4fdc13f61cd26a1011aa09311a1a2dab12c", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -54,10 +54,6 @@\n #include <smmintrin.h>\n #endif\n \n-#ifdef __SSE5__\n-#include <bmmintrin.h>\n-#endif\n-\n #if defined (__AES__) || defined (__PCLMUL__)\n #include <wmmintrin.h>\n #endif"}, {"sha": "993863f284a0ec9a0ebcf49d82937c96a73b595f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 2, "deletions": 224, "changes": 226, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -3168,11 +3168,6 @@ Enable/disable the generation of the sse4.2 instructions.\n @cindex @code{target(\"sse4a\")} attribute\n Enable/disable the generation of the SSE4A instructions.\n \n-@item sse5\n-@itemx no-sse5\n-@cindex @code{target(\"sse5\")} attribute\n-Enable/disable the generation of the SSE5 instructions.\n-\n @item ssse3\n @itemx no-ssse3\n @cindex @code{target(\"ssse3\")} attribute\n@@ -3244,8 +3239,8 @@ options, or you can separate the option with a comma (@code{,}).\n On the 386, the inliner will not inline a function that has different\n target options than the caller, unless the callee has a subset of the\n target options of the caller.  For example a function declared with\n-@code{target(\"sse5\")} can inline a function with\n-@code{target(\"sse2\")}, since @code{-msse5} implies @code{-msse2}.\n+@code{target(\"sse3\")} can inline a function with\n+@code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n \n The @code{target} attribute is not implemented in GCC versions earlier\n than 4.4, and at present only the 386 uses it.\n@@ -8893,223 +8888,6 @@ v2di __builtin_ia32_insertq (v2di, v2di)\n v2di __builtin_ia32_insertqi (v2di, v2di, const unsigned int, const unsigned int)\n @end smallexample\n \n-The following built-in functions are available when @option{-msse5} is used.\n-All of them generate the machine instruction that is part of the name\n-with MMX registers.\n-\n-@smallexample\n-v2df __builtin_ia32_comeqpd (v2df, v2df)\n-v2df __builtin_ia32_comeqps (v2df, v2df)\n-v4sf __builtin_ia32_comeqsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comeqss (v4sf, v4sf)\n-v2df __builtin_ia32_comfalsepd (v2df, v2df)\n-v2df __builtin_ia32_comfalseps (v2df, v2df)\n-v4sf __builtin_ia32_comfalsesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comfalsess (v4sf, v4sf)\n-v2df __builtin_ia32_comgepd (v2df, v2df)\n-v2df __builtin_ia32_comgeps (v2df, v2df)\n-v4sf __builtin_ia32_comgesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comgess (v4sf, v4sf)\n-v2df __builtin_ia32_comgtpd (v2df, v2df)\n-v2df __builtin_ia32_comgtps (v2df, v2df)\n-v4sf __builtin_ia32_comgtsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comgtss (v4sf, v4sf)\n-v2df __builtin_ia32_comlepd (v2df, v2df)\n-v2df __builtin_ia32_comleps (v2df, v2df)\n-v4sf __builtin_ia32_comlesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comless (v4sf, v4sf)\n-v2df __builtin_ia32_comltpd (v2df, v2df)\n-v2df __builtin_ia32_comltps (v2df, v2df)\n-v4sf __builtin_ia32_comltsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comltss (v4sf, v4sf)\n-v2df __builtin_ia32_comnepd (v2df, v2df)\n-v2df __builtin_ia32_comneps (v2df, v2df)\n-v4sf __builtin_ia32_comnesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comness (v4sf, v4sf)\n-v2df __builtin_ia32_comordpd (v2df, v2df)\n-v2df __builtin_ia32_comordps (v2df, v2df)\n-v4sf __builtin_ia32_comordsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comordss (v4sf, v4sf)\n-v2df __builtin_ia32_comtruepd (v2df, v2df)\n-v2df __builtin_ia32_comtrueps (v2df, v2df)\n-v4sf __builtin_ia32_comtruesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comtruess (v4sf, v4sf)\n-v2df __builtin_ia32_comueqpd (v2df, v2df)\n-v2df __builtin_ia32_comueqps (v2df, v2df)\n-v4sf __builtin_ia32_comueqsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comueqss (v4sf, v4sf)\n-v2df __builtin_ia32_comugepd (v2df, v2df)\n-v2df __builtin_ia32_comugeps (v2df, v2df)\n-v4sf __builtin_ia32_comugesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comugess (v4sf, v4sf)\n-v2df __builtin_ia32_comugtpd (v2df, v2df)\n-v2df __builtin_ia32_comugtps (v2df, v2df)\n-v4sf __builtin_ia32_comugtsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comugtss (v4sf, v4sf)\n-v2df __builtin_ia32_comulepd (v2df, v2df)\n-v2df __builtin_ia32_comuleps (v2df, v2df)\n-v4sf __builtin_ia32_comulesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comuless (v4sf, v4sf)\n-v2df __builtin_ia32_comultpd (v2df, v2df)\n-v2df __builtin_ia32_comultps (v2df, v2df)\n-v4sf __builtin_ia32_comultsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comultss (v4sf, v4sf)\n-v2df __builtin_ia32_comunepd (v2df, v2df)\n-v2df __builtin_ia32_comuneps (v2df, v2df)\n-v4sf __builtin_ia32_comunesd (v4sf, v4sf)\n-v4sf __builtin_ia32_comuness (v4sf, v4sf)\n-v2df __builtin_ia32_comunordpd (v2df, v2df)\n-v2df __builtin_ia32_comunordps (v2df, v2df)\n-v4sf __builtin_ia32_comunordsd (v4sf, v4sf)\n-v4sf __builtin_ia32_comunordss (v4sf, v4sf)\n-v2df __builtin_ia32_fmaddpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmaddps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmaddsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmaddss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmsubpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmsubps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fmsubsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fmsubss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmaddpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmaddps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmaddsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmaddss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmsubpd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmsubps (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_fnmsubsd (v2df, v2df, v2df)\n-v4sf __builtin_ia32_fnmsubss (v4sf, v4sf, v4sf)\n-v2df __builtin_ia32_frczpd (v2df)\n-v4sf __builtin_ia32_frczps (v4sf)\n-v2df __builtin_ia32_frczsd (v2df, v2df)\n-v4sf __builtin_ia32_frczss (v4sf, v4sf)\n-v2di __builtin_ia32_pcmov (v2di, v2di, v2di)\n-v2di __builtin_ia32_pcmov_v2di (v2di, v2di, v2di)\n-v4si __builtin_ia32_pcmov_v4si (v4si, v4si, v4si)\n-v8hi __builtin_ia32_pcmov_v8hi (v8hi, v8hi, v8hi)\n-v16qi __builtin_ia32_pcmov_v16qi (v16qi, v16qi, v16qi)\n-v2df __builtin_ia32_pcmov_v2df (v2df, v2df, v2df)\n-v4sf __builtin_ia32_pcmov_v4sf (v4sf, v4sf, v4sf)\n-v16qi __builtin_ia32_pcomeqb (v16qi, v16qi)\n-v8hi __builtin_ia32_pcomeqw (v8hi, v8hi)\n-v4si __builtin_ia32_pcomeqd (v4si, v4si)\n-v2di __builtin_ia32_pcomeqq (v2di, v2di)\n-v16qi __builtin_ia32_pcomequb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomequd (v4si, v4si)\n-v2di __builtin_ia32_pcomequq (v2di, v2di)\n-v8hi __builtin_ia32_pcomequw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomeqw (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomfalseb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomfalsed (v4si, v4si)\n-v2di __builtin_ia32_pcomfalseq (v2di, v2di)\n-v16qi __builtin_ia32_pcomfalseub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomfalseud (v4si, v4si)\n-v2di __builtin_ia32_pcomfalseuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomfalseuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomfalsew (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomgeb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomged (v4si, v4si)\n-v2di __builtin_ia32_pcomgeq (v2di, v2di)\n-v16qi __builtin_ia32_pcomgeub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomgeud (v4si, v4si)\n-v2di __builtin_ia32_pcomgeuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomgeuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomgew (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomgtb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomgtd (v4si, v4si)\n-v2di __builtin_ia32_pcomgtq (v2di, v2di)\n-v16qi __builtin_ia32_pcomgtub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomgtud (v4si, v4si)\n-v2di __builtin_ia32_pcomgtuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomgtuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomgtw (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomleb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomled (v4si, v4si)\n-v2di __builtin_ia32_pcomleq (v2di, v2di)\n-v16qi __builtin_ia32_pcomleub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomleud (v4si, v4si)\n-v2di __builtin_ia32_pcomleuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomleuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomlew (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomltb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomltd (v4si, v4si)\n-v2di __builtin_ia32_pcomltq (v2di, v2di)\n-v16qi __builtin_ia32_pcomltub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomltud (v4si, v4si)\n-v2di __builtin_ia32_pcomltuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomltuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomltw (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomneb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomned (v4si, v4si)\n-v2di __builtin_ia32_pcomneq (v2di, v2di)\n-v16qi __builtin_ia32_pcomneub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomneud (v4si, v4si)\n-v2di __builtin_ia32_pcomneuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomneuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomnew (v8hi, v8hi)\n-v16qi __builtin_ia32_pcomtrueb (v16qi, v16qi)\n-v4si __builtin_ia32_pcomtrued (v4si, v4si)\n-v2di __builtin_ia32_pcomtrueq (v2di, v2di)\n-v16qi __builtin_ia32_pcomtrueub (v16qi, v16qi)\n-v4si __builtin_ia32_pcomtrueud (v4si, v4si)\n-v2di __builtin_ia32_pcomtrueuq (v2di, v2di)\n-v8hi __builtin_ia32_pcomtrueuw (v8hi, v8hi)\n-v8hi __builtin_ia32_pcomtruew (v8hi, v8hi)\n-v4df __builtin_ia32_permpd (v2df, v2df, v16qi)\n-v4sf __builtin_ia32_permps (v4sf, v4sf, v16qi)\n-v4si __builtin_ia32_phaddbd (v16qi)\n-v2di __builtin_ia32_phaddbq (v16qi)\n-v8hi __builtin_ia32_phaddbw (v16qi)\n-v2di __builtin_ia32_phadddq (v4si)\n-v4si __builtin_ia32_phaddubd (v16qi)\n-v2di __builtin_ia32_phaddubq (v16qi)\n-v8hi __builtin_ia32_phaddubw (v16qi)\n-v2di __builtin_ia32_phaddudq (v4si)\n-v4si __builtin_ia32_phadduwd (v8hi)\n-v2di __builtin_ia32_phadduwq (v8hi)\n-v4si __builtin_ia32_phaddwd (v8hi)\n-v2di __builtin_ia32_phaddwq (v8hi)\n-v8hi __builtin_ia32_phsubbw (v16qi)\n-v2di __builtin_ia32_phsubdq (v4si)\n-v4si __builtin_ia32_phsubwd (v8hi)\n-v4si __builtin_ia32_pmacsdd (v4si, v4si, v4si)\n-v2di __builtin_ia32_pmacsdqh (v4si, v4si, v2di)\n-v2di __builtin_ia32_pmacsdql (v4si, v4si, v2di)\n-v4si __builtin_ia32_pmacssdd (v4si, v4si, v4si)\n-v2di __builtin_ia32_pmacssdqh (v4si, v4si, v2di)\n-v2di __builtin_ia32_pmacssdql (v4si, v4si, v2di)\n-v4si __builtin_ia32_pmacsswd (v8hi, v8hi, v4si)\n-v8hi __builtin_ia32_pmacssww (v8hi, v8hi, v8hi)\n-v4si __builtin_ia32_pmacswd (v8hi, v8hi, v4si)\n-v8hi __builtin_ia32_pmacsww (v8hi, v8hi, v8hi)\n-v4si __builtin_ia32_pmadcsswd (v8hi, v8hi, v4si)\n-v4si __builtin_ia32_pmadcswd (v8hi, v8hi, v4si)\n-v16qi __builtin_ia32_pperm (v16qi, v16qi, v16qi)\n-v16qi __builtin_ia32_protb (v16qi, v16qi)\n-v4si __builtin_ia32_protd (v4si, v4si)\n-v2di __builtin_ia32_protq (v2di, v2di)\n-v8hi __builtin_ia32_protw (v8hi, v8hi)\n-v16qi __builtin_ia32_pshab (v16qi, v16qi)\n-v4si __builtin_ia32_pshad (v4si, v4si)\n-v2di __builtin_ia32_pshaq (v2di, v2di)\n-v8hi __builtin_ia32_pshaw (v8hi, v8hi)\n-v16qi __builtin_ia32_pshlb (v16qi, v16qi)\n-v4si __builtin_ia32_pshld (v4si, v4si)\n-v2di __builtin_ia32_pshlq (v2di, v2di)\n-v8hi __builtin_ia32_pshlw (v8hi, v8hi)\n-@end smallexample\n-\n-The following builtin-in functions are available when @option{-msse5}\n-is used.  The second argument must be an integer constant and generate\n-the machine instruction that is part of the name with the @samp{_imm}\n-suffix removed.\n-\n-@smallexample\n-v16qi __builtin_ia32_protb_imm (v16qi, int)\n-v4si __builtin_ia32_protd_imm (v4si, int)\n-v2di __builtin_ia32_protq_imm (v2di, int)\n-v8hi __builtin_ia32_protw_imm (v8hi, int)\n-@end smallexample\n-\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "c9a02447087dffe8c6b241cf801f870f38035850", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -1,3 +1,15 @@\n+2009-09-29  Harsha Jagasia  <harsha.jagasia@amd.com>\n+\n+\t* gcc.target/i386/i386.exp: Remove check_effective_target_sse5.\n+\t* gcc.target/i386/isa-1.c\n+\t* gcc.target/i386/isa-5.c\n+\t* gcc.target/i386/isa-6.c: Remove SSE5.\n+\t* gcc.target/i386/funcspec-4.c: Remove error conditions related to SSE5.\n+\t* gcc.target/i386/avx-1.c\n+\t* gcc.target/i386/avx-2.c\n+\t* gcc.target/i386/sse-23.c: Remove comments to mmintrin-common.h.\n+\t* gcc.target/i386/funcspec-9.c: Delete.\n+\t\n 2009-09-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/guality/guality.exp (gdb-test): New proc for use in dg-final."}, {"sha": "f76d02db858aecb38c50b850bd9e8f13986155e8", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -54,13 +54,12 @@\n #define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n #define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n \n-/* mmintrin-common.h */\n+/* smmintrin.h */\n #define __builtin_ia32_roundpd(V, M) __builtin_ia32_roundpd(V, 1)\n #define __builtin_ia32_roundsd(D, V, M) __builtin_ia32_roundsd(D, V, 1)\n #define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n #define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n \n-/* smmintrin.h */\n #define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n #define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n #define __builtin_ia32_blendpd(X, Y, M) __builtin_ia32_blendpd(X, Y, 1)"}, {"sha": "c3616ba340340fe48b6f83d3575b5cb3cd487e14", "filename": "gcc/testsuite/gcc.target/i386/avx-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-2.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -97,13 +97,12 @@ test_1 (_mm256_round_ps, __m256, __m256, 1)\n test_1 (_mm_aeskeygenassist_si128, __m128i, __m128i, 1)\n test_2 (_mm_clmulepi64_si128, __m128i, __m128i, __m128i, 1)\n \n-/* mmintrin-common.h */\n+/* smmintrin.h */\n test_1 (_mm_round_pd, __m128d, __m128d, 1)\n test_1 (_mm_round_ps, __m128, __m128, 1)\n test_2 (_mm_round_sd, __m128d, __m128d, __m128d, 1)\n test_2 (_mm_round_ss, __m128, __m128, __m128, 1)\n \n-/* smmintrin.h */\n test_2 (_mm_blend_epi16, __m128i, __m128i, __m128i, 1)\n test_2 (_mm_blend_ps, __m128, __m128, __m128, 1)\n test_2 (_mm_blend_pd, __m128d, __m128d, __m128d, 1)"}, {"sha": "e2eef418bc2c5bd97618c9a5b1482326ca93b07a", "filename": "gcc/testsuite/gcc.target/i386/funcspec-4.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-4.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -1,9 +1,6 @@\n /* Test some error conditions with function specific options.  */\n /* { dg-do compile } */\n \n-/* no sse500 switch */\n-extern void error1 (void) __attribute__((__target__(\"sse500\"))); /* { dg-error \"unknown\" } */\n-\n /* Multiple arch switches */\n extern void error2 (void) __attribute__((__target__(\"arch=core2,arch=k8\"))); /* { dg-error \"already specified\" } */\n "}, {"sha": "aed619bff65966772ad39288f7c466ef9c18c043", "filename": "gcc/testsuite/gcc.target/i386/funcspec-9.c", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0e96404c1e530a59b2e52a3894a67508f04817d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0e96404c1e530a59b2e52a3894a67508f04817d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-9.c?ref=b0e96404c1e530a59b2e52a3894a67508f04817d", "patch": "@@ -1,36 +0,0 @@\n-/* Test whether using target specific options, we can generate SSE5 code.  */\n-/* { dg-do compile } */\n-/* { dg-options \"-O2 -march=k8 -mfpmath=sse -msse2\" } */\n-\n-extern void exit (int);\n-\n-#ifdef __SSE4A__\n-#warning \"__SSE4A__ should not be defined before #pragma GCC target.\"\n-#endif\n-\n-#pragma GCC push_options\n-#pragma GCC target (\"sse4a\")\n-\n-#ifndef __SSE4A__\n-#warning \"__SSE4A__ should have be defined after #pragma GCC target.\"\n-#endif\n-\n-float\n-flt_mul_add (float a, float b, float c)\n-{\n-  return (a * b) + c;\n-}\n-\n-#pragma GCC pop_options\n-#ifdef __SSE4A__\n-#warning \"__SSE4A__ should not be defined after #pragma GCC pop target.\"\n-#endif\n-\n-double\n-dbl_mul_add (double a, double b, double c)\n-{\n-  return (a * b) + c;\n-}\n-\n-/* We used to generate fused-madd with SSE5 support, but don't do that anymore.  */\n-/* { dg-final { scan-assembler \"addsd\" } } */"}, {"sha": "242c40fb373461189a01822ece2fe8783ea929e3", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -120,21 +120,6 @@ proc check_effective_target_sse4a { } {\n     } \"-O2 -msse4a\" ]\n }\n \n-# Return 1 if sse5 instructions can be compiled.\n-proc check_effective_target_sse5 { } {\n-    return [check_no_compiler_messages sse5 object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef short __v8hi __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n-\t{\n-\t    return (__m128i) __builtin_ia32_pmacssww ((__v8hi)__A,\n-\t\t\t\t\t\t      (__v8hi)__B,\n-\t\t\t\t\t\t      (__v8hi)__C);\n-\t}\n-    } \"-O2 -msse5\" ]\n-}\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "b2040b3e3f613c7791ddc3977757718af3388600", "filename": "gcc/testsuite/gcc.target/i386/isa-1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-1.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -26,9 +26,6 @@ main ()\n #endif\n #if defined __SSE4A__\n   abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n #endif\n   return 0;\n }"}, {"sha": "2157499aefa902ba40c3471c73a7ff861147d6cc", "filename": "gcc/testsuite/gcc.target/i386/isa-5.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-5.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -26,9 +26,6 @@ main ()\n #endif\n #if !defined __SSE4A__\n   abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n #endif\n   return 0;\n }"}, {"sha": "389621b475bc88760499e31693210c2e5fbabbe8", "filename": "gcc/testsuite/gcc.target/i386/isa-6.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fisa-6.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -27,9 +27,6 @@ main ()\n #endif\n #if !defined __SSE4A__\n   abort ();\n-#endif\n-#if defined __SSE5__\n-  abort ();\n #endif\n   return 0;\n }"}, {"sha": "63cb811d04276db44a8844b581dba5fda066d508", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a795ca6e596208db4968b33f2bdc1d0dd284028d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=a795ca6e596208db4968b33f2bdc1d0dd284028d", "patch": "@@ -21,13 +21,12 @@\n #define __builtin_ia32_aeskeygenassist128(X, C) __builtin_ia32_aeskeygenassist128(X, 1)\n #define __builtin_ia32_pclmulqdq128(X, Y, I) __builtin_ia32_pclmulqdq128(X, Y, 1)\n \n-/* mmintrin-common.h */\n+/* smmintrin.h */\n #define __builtin_ia32_roundpd(V, M) __builtin_ia32_roundpd(V, 1)\n #define __builtin_ia32_roundsd(D, V, M) __builtin_ia32_roundsd(D, V, 1)\n #define __builtin_ia32_roundps(V, M) __builtin_ia32_roundps(V, 1)\n #define __builtin_ia32_roundss(D, V, M) __builtin_ia32_roundss(D, V, 1)\n \n-/* smmintrin.h */\n #define __builtin_ia32_pblendw128(X, Y, M) __builtin_ia32_pblendw128 (X, Y, 1)\n #define __builtin_ia32_blendps(X, Y, M) __builtin_ia32_blendps(X, Y, 1)\n #define __builtin_ia32_blendpd(X, Y, M) __builtin_ia32_blendpd(X, Y, 1)"}]}