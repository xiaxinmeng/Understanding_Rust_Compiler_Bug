{"sha": "719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5YWFmNGQwOTNkNWRiZGU4NDVhNThiMTJhOWZjOGFjN2QwNGYxZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T08:14:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-22T08:14:31Z"}, "message": "[multiple changes]\n\n2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Add_Implicit_Operator): If the context of the expanded\n\tname is a call, use the number of actuals to determine whether this is\n\ta binary or unary operator, rather than relying on later information\n\tto resolve the overload.\n\n2010-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch10.adb, sem_aggr.adb: Minor reformatting.\n\nFrom-SVN: r161142", "tree": {"sha": "b9732e84e542d2ca2db758a81c6a56807a4cc758", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9732e84e542d2ca2db758a81c6a56807a4cc758"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/comments", "author": null, "committer": null, "parents": [{"sha": "946db1e20e437ab14cf52a5414a46a2b772a6228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/946db1e20e437ab14cf52a5414a46a2b772a6228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/946db1e20e437ab14cf52a5414a46a2b772a6228"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "61efea18bb3092b93e4e147b1f9e199d62f5c933", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "patch": "@@ -1,3 +1,14 @@\n+2010-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Add_Implicit_Operator): If the context of the expanded\n+\tname is a call, use the number of actuals to determine whether this is\n+\ta binary or unary operator, rather than relying on later information\n+\tto resolve the overload.\n+\n+2010-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch10.adb, sem_aggr.adb: Minor reformatting.\n+\n 2010-06-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, sem_disp.adb: Minor code fixes."}, {"sha": "d487c44259990347c2e10b1e08376bc4d387954d", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "patch": "@@ -3503,8 +3503,8 @@ package body Sem_Aggr is\n                      --  subaggregate is needed.\n \n                      Capture_Discriminants : declare\n-                        Loc        : constant Source_Ptr := Sloc (N);\n-                        Expr       : Node_Id;\n+                        Loc  : constant Source_Ptr := Sloc (N);\n+                        Expr : Node_Id;\n \n                         procedure Add_Discriminant_Values\n                           (New_Aggr   : Node_Id;\n@@ -3610,7 +3610,6 @@ package body Sem_Aggr is\n                            New_Aggr   : Node_Id;\n \n                         begin\n-\n                            Inner_Comp := First_Component (Etype (Comp));\n                            while Present (Inner_Comp) loop\n                               Comp_Type := Etype (Inner_Comp);\n@@ -3623,7 +3622,7 @@ package body Sem_Aggr is\n                                  Set_Etype (New_Aggr, Comp_Type);\n                                  Add_Association\n                                    (Inner_Comp, New_Aggr,\n-                                     Component_Associations (Aggr));\n+                                    Component_Associations (Aggr));\n \n                                  --  Collect discriminant values and recurse\n \n@@ -3673,7 +3672,7 @@ package body Sem_Aggr is\n \n                         else\n                            declare\n-                              Comp            : Entity_Id;\n+                              Comp : Entity_Id;\n \n                            begin\n                               --  If the type has additional components, create"}, {"sha": "8d0fa4739a4968a7b55b61a27968e7fdcc5f8ead", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "patch": "@@ -2208,7 +2208,6 @@ package body Sem_Ch10 is\n          if Present (Enclosing_Child) then\n             Install_Siblings (Enclosing_Child, N);\n          end if;\n-\n       end if;\n \n       Analyze (Proper_Body (Unit (N)));"}, {"sha": "8a06f11e1e74a353e4fdee058a6ae55fb39a7b59", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=719aaf4d093d5dbde845a58b12a9fc8ac7d04f1f", "patch": "@@ -6029,12 +6029,43 @@ package body Sem_Ch8 is\n             Change_Selected_Component_To_Expanded_Name (N);\n          end if;\n \n-         Add_One_Interp (N, Predef_Op, T);\n+         --  If the context is an unanalyzed function call, determine whether\n+         --  a binary or unary interpretation is required.\n \n-         --  For operators with unary and binary interpretations, add both\n+         if Nkind (Parent (N)) = N_Indexed_Component then\n+            declare\n+               Is_Binary_Call : constant Boolean\n+                 := Present (Next (First (Expressions (Parent (N)))));\n+               Is_Binary_Op   : constant Boolean\n+                 := First_Entity (Predef_Op) /= Last_Entity (Predef_Op);\n+               Predef_Op2     : constant Entity_Id := Homonym (Predef_Op);\n+\n+            begin\n+               if Is_Binary_Call then\n+                  if Is_Binary_Op then\n+                     Add_One_Interp (N, Predef_Op, T);\n+                  else\n+                     Add_One_Interp (N, Predef_Op2, T);\n+                  end if;\n \n-         if Present (Homonym (Predef_Op)) then\n-            Add_One_Interp (N, Homonym (Predef_Op), T);\n+               else\n+                  if not Is_Binary_Op then\n+                     Add_One_Interp (N, Predef_Op, T);\n+                  else\n+                     Add_One_Interp (N, Predef_Op2, T);\n+                  end if;\n+               end if;\n+            end;\n+\n+         else\n+            Add_One_Interp (N, Predef_Op, T);\n+\n+            --  For operators with unary and binary interpretations, if\n+            --  context is not a call, add both\n+\n+            if Present (Homonym (Predef_Op)) then\n+               Add_One_Interp (N, Homonym (Predef_Op), T);\n+            end if;\n          end if;\n \n          --  The node is a reference to a predefined operator, and"}]}