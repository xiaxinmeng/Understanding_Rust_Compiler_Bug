{"sha": "2b56d6a4250278089594886154f3f791a0d79639", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1NmQ2YTQyNTAyNzgwODk1OTQ4ODYxNTRmM2Y3OTFhMGQ3OTYzOQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-04-06T12:46:19Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-04-06T12:46:19Z"}, "message": "re PR fortran/43178 (Pointless resetting to NULL for local ALLOCATABLEs)\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43178\n        * trans-array.c (gfc_conv_expr_descriptor): Update\n        gfc_trans_scalar_assign call.\n        (has_default_initializer): New function.\n        (gfc_trans_deferred_array): Nullify less often.\n        * trans-expr.c (gfc_conv_subref_array_arg,\n        gfc_trans_subcomponent_assign): Update call to\n        gfc_trans_scalar_assign.\n        (gfc_trans_scalar_assign): Add parameter and pass it on.\n        (gfc_trans_assignment_1): Optionally, do not dealloc before\n        assignment.\n        * trans-openmp.c (gfc_trans_omp_array_reduction): Update\n        call to gfc_trans_scalar_assign.\n        * trans-decl.c (gfc_get_symbol_decl): Do not always apply\n        initializer to static variables.\n        (gfc_init_default_dt): Add dealloc parameter and pass it on.\n        * trans-stmt.c (forall_make_variable_temp,\n        generate_loop_for_temp_to_lhs, generate_loop_for_rhs_to_temp,\n        gfc_trans_forall_1, gfc_trans_where_assign, gfc_trans_where_3\n        gfc_trans_allocate): Update gfc_trans_assignment call.\n        * trans.h (gfc_trans_scalar_assign, gfc_init_default_dt,\n        gfc_init_default_dt, gfc_trans_assignment): Add bool dealloc\n        parameter to prototype.\n\n2010-04-06  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/43178\n        * gfortran.dg/alloc_comp_basics_1.f90: Update\n        * scan-tree-dump-times.\n        * gfortran.dg/alloc_comp_constructor_1.f90: Ditto.\n        * gfortran.dg/auto_dealloc_1.f90: Ditto.\n\nFrom-SVN: r157993", "tree": {"sha": "4a2bb59e7d3acf8b1d92413979c2c0ad1e230c41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a2bb59e7d3acf8b1d92413979c2c0ad1e230c41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b56d6a4250278089594886154f3f791a0d79639", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b56d6a4250278089594886154f3f791a0d79639", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b56d6a4250278089594886154f3f791a0d79639", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b56d6a4250278089594886154f3f791a0d79639/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "56186ac266ccf826d53ecc39dd60fb03fbe93523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56186ac266ccf826d53ecc39dd60fb03fbe93523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56186ac266ccf826d53ecc39dd60fb03fbe93523"}], "stats": {"total": 175, "additions": 124, "deletions": 51}, "files": [{"sha": "97a2fcac79272cfdd867e7803f01980a932786df", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -1,3 +1,29 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43178\n+\t* trans-array.c (gfc_conv_expr_descriptor): Update\n+\tgfc_trans_scalar_assign call.\n+\t(has_default_initializer): New function.\n+\t(gfc_trans_deferred_array): Nullify less often.\n+\t* trans-expr.c (gfc_conv_subref_array_arg,\n+\tgfc_trans_subcomponent_assign): Update call to\n+\tgfc_trans_scalar_assign.\n+\t(gfc_trans_scalar_assign): Add parameter and pass it on.\n+\t(gfc_trans_assignment_1): Optionally, do not dealloc before\n+\tassignment.\n+\t* trans-openmp.c (gfc_trans_omp_array_reduction): Update\n+\tcall to gfc_trans_scalar_assign.\n+\t* trans-decl.c (gfc_get_symbol_decl): Do not always apply\n+\tinitializer to static variables.\n+\t(gfc_init_default_dt): Add dealloc parameter and pass it on.\n+\t* trans-stmt.c (forall_make_variable_temp,\n+\tgenerate_loop_for_temp_to_lhs, generate_loop_for_rhs_to_temp,\n+\tgfc_trans_forall_1, gfc_trans_where_assign, gfc_trans_where_3\n+\tgfc_trans_allocate): Update gfc_trans_assignment call.\n+\t* trans.h (gfc_trans_scalar_assign, gfc_init_default_dt,\n+\tgfc_init_default_dt, gfc_trans_assignment): Add bool dealloc\n+\tparameter to prototype.\n+\n 2010-03-31  Paul Thomas  <pault@gcc.gnu.org>\n \n \t* ioparm.def : Update copyright."}, {"sha": "75516cea5540bdc289c5ba1adf66c14b9462bab6", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -5214,7 +5214,7 @@ gfc_conv_expr_descriptor (gfc_se * se, gfc_expr * expr, gfc_ss * ss)\n \n       lse.string_length = rse.string_length;\n       tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true,\n-\t\t\t\t     expr->expr_type == EXPR_VARIABLE);\n+\t\t\t\t     expr->expr_type == EXPR_VARIABLE, true);\n       gfc_add_expr_to_block (&block, tmp);\n \n       /* Finish the copying loops.  */\n@@ -6176,6 +6176,25 @@ gfc_copy_only_alloc_comp (gfc_symbol * der_type, tree decl, tree dest, int rank)\n }\n \n \n+/* Check for default initializer; sym->value is not enough as it is also\n+   set for EXPR_NULL of allocatables.  */\n+\n+static bool\n+has_default_initializer (gfc_symbol *der)\n+{\n+  gfc_component *c;\n+\n+  gcc_assert (der->attr.flavor == FL_DERIVED);\n+  for (c = der->components; c; c = c->next)\n+    if ((c->ts.type != BT_DERIVED && c->initializer)\n+        || (c->ts.type == BT_DERIVED\n+            && (!c->attr.pointer && has_default_initializer (c->ts.u.derived))))\n+      break;\n+\n+  return c != NULL;\n+}\n+\n+\n /* NULLIFY an allocatable/pointer array on function entry, free it on exit.\n    Do likewise, recursively if necessary, with the allocatable components of\n    derived types.  */\n@@ -6236,17 +6255,21 @@ gfc_trans_deferred_array (gfc_symbol * sym, tree body)\n \n   /* Get the descriptor type.  */\n   type = TREE_TYPE (sym->backend_decl);\n-    \n+\n   if (sym_has_alloc_comp && !(sym->attr.pointer || sym->attr.allocatable))\n     {\n-      if (!sym->attr.save)\n+      if (!sym->attr.save\n+\t  && !(TREE_STATIC (sym->backend_decl) && sym->attr.is_main_program))\n \t{\n-\t  rank = sym->as ? sym->as->rank : 0;\n-\t  tmp = gfc_nullify_alloc_comp (sym->ts.u.derived, descriptor, rank);\n-\t  gfc_add_expr_to_block (&fnblock, tmp);\n-\t  if (sym->value)\n+\t  if (sym->value == NULL || !has_default_initializer (sym->ts.u.derived))\n+\t    {\n+\t      rank = sym->as ? sym->as->rank : 0;\n+\t      tmp = gfc_nullify_alloc_comp (sym->ts.u.derived, descriptor, rank);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n+\t  else\n \t    {\n-\t      tmp = gfc_init_default_dt (sym, NULL);\n+\t      tmp = gfc_init_default_dt (sym, NULL, false);\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n \t    }\n \t}"}, {"sha": "b2078640669cbf25b18a4c409eb8467a724185d7", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -1258,9 +1258,15 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n   if (sym->attr.assign)\n     gfc_add_assign_aux_vars (sym);\n \n-  if (TREE_STATIC (decl) && !sym->attr.use_assoc)\n+  if (TREE_STATIC (decl) && !sym->attr.use_assoc\n+      && (sym->attr.save || sym->ns->proc_name->attr.is_main_program\n+\t  || gfc_option.flag_max_stack_var_size == 0\n+\t  || sym->attr.data || sym->ns->proc_name->attr.flavor == FL_MODULE))\n     {\n-      /* Add static initializer.  */\n+      /* Add static initializer. For procedures, it is only needed if\n+\t SAVE is specified otherwise they need to be reinitialized\n+\t every time the procedure is entered. The TREE_STATIC is\n+\t in this case due to -fmax-stack-var-size=.  */\n       DECL_INITIAL (decl) = gfc_conv_initializer (sym->value, &sym->ts,\n \t  TREE_TYPE (decl), sym->attr.dimension,\n \t  sym->attr.pointer || sym->attr.allocatable);\n@@ -2981,9 +2987,10 @@ gfc_trans_vla_type_sizes (gfc_symbol *sym, stmtblock_t *body)\n \n \n /* Initialize a derived type by building an lvalue from the symbol\n-   and using trans_assignment to do the work.  */\n+   and using trans_assignment to do the work. Set dealloc to false\n+   if no deallocation prior the assignment is needed.  */\n tree\n-gfc_init_default_dt (gfc_symbol * sym, tree body)\n+gfc_init_default_dt (gfc_symbol * sym, tree body, bool dealloc)\n {\n   stmtblock_t fnblock;\n   gfc_expr *e;\n@@ -2994,7 +3001,7 @@ gfc_init_default_dt (gfc_symbol * sym, tree body)\n   gcc_assert (!sym->attr.allocatable);\n   gfc_set_sym_referenced (sym);\n   e = gfc_lval_expr_from_sym (sym);\n-  tmp = gfc_trans_assignment (e, sym->value, false);\n+  tmp = gfc_trans_assignment (e, sym->value, false, dealloc);\n   if (sym->attr.dummy && (sym->attr.optional\n \t\t\t  || sym->ns->proc_name->attr.entry_master))\n     {\n@@ -3045,7 +3052,7 @@ init_intent_out_dt (gfc_symbol * proc_sym, tree body)\n \t    gfc_add_expr_to_block (&fnblock, tmp);\n \t  }\n        else if (f->sym->value)\n-\t  body = gfc_init_default_dt (f->sym, body);\n+\t  body = gfc_init_default_dt (f->sym, body, true);\n       }\n \n   gfc_add_expr_to_block (&fnblock, body);\n@@ -3148,7 +3155,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t\t\t     && sym->value\n \t\t\t     && !sym->attr.data\n \t\t\t     && sym->attr.save == SAVE_NONE)\n-\t\t    fnbody = gfc_init_default_dt (sym, fnbody);\n+\t\t    fnbody = gfc_init_default_dt (sym, fnbody, false);\n \n \t\t  gfc_get_backend_locus (&loc);\n \t\t  gfc_set_backend_locus (&sym->declared_at);\n@@ -3246,7 +3253,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t\t && sym->value\n \t\t && !sym->attr.data\n \t\t && sym->attr.save == SAVE_NONE)\n-\tfnbody = gfc_init_default_dt (sym, fnbody);\n+\tfnbody = gfc_init_default_dt (sym, fnbody, false);\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "7e95ce11390c4686b80cf3fbd7048f36c716f30c", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -2386,7 +2386,7 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n \n   if (intent != INTENT_OUT)\n     {\n-      tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true, false);\n+      tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, true, false, true);\n       gfc_add_expr_to_block (&body, tmp);\n       gcc_assert (rse.ss == gfc_ss_terminator);\n       gfc_trans_scalarizing_loops (&loop, &body);\n@@ -2484,7 +2484,7 @@ gfc_conv_subref_array_arg (gfc_se * parmse, gfc_expr * expr, int g77,\n \n   gcc_assert (lse.ss == gfc_ss_terminator);\n \n-  tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, false, false);\n+  tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, false, false, true);\n   gfc_add_expr_to_block (&body, tmp);\n   \n   /* Generate the copying loops.  */\n@@ -4111,7 +4111,7 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \n   gfc_conv_expr (&rse, expr);\n \n-  tmp = gfc_trans_scalar_assign (&lse, &rse, cm->ts, true, false);\n+  tmp = gfc_trans_scalar_assign (&lse, &rse, cm->ts, true, false, true);\n   gfc_add_expr_to_block (&body, tmp);\n \n   gcc_assert (rse.ss == gfc_ss_terminator);\n@@ -4369,7 +4369,7 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n       if (cm->ts.type == BT_CHARACTER)\n \tlse.string_length = cm->ts.u.cl->backend_decl;\n       lse.expr = dest;\n-      tmp = gfc_trans_scalar_assign (&lse, &se, cm->ts, true, false);\n+      tmp = gfc_trans_scalar_assign (&lse, &se, cm->ts, true, false, true);\n       gfc_add_expr_to_block (&block, tmp);\n     }\n   return gfc_finish_block (&block);\n@@ -4897,11 +4897,12 @@ gfc_conv_string_parameter (gfc_se * se)\n \n \n /* Generate code for assignment of scalar variables.  Includes character\n-   strings and derived types with allocatable components.  */\n+   strings and derived types with allocatable components.\n+   If you know that the LHS has no allocations, set dealloc to false.  */\n \n tree\n gfc_trans_scalar_assign (gfc_se * lse, gfc_se * rse, gfc_typespec ts,\n-\t\t\t bool l_is_temp, bool r_is_var)\n+\t\t\t bool l_is_temp, bool r_is_var, bool dealloc)\n {\n   stmtblock_t block;\n   tree tmp;\n@@ -4949,7 +4950,7 @@ gfc_trans_scalar_assign (gfc_se * lse, gfc_se * rse, gfc_typespec ts,\n \t the same as the rhs.  This must be done following the assignment\n \t to prevent deallocating data that could be used in the rhs\n \t expression.  */\n-      if (!l_is_temp)\n+      if (!l_is_temp && dealloc)\n \t{\n \t  tmp = gfc_evaluate_now (lse->expr, &lse->pre);\n \t  tmp = gfc_deallocate_alloc_comp (ts.u.derived, tmp, 0);\n@@ -5279,10 +5280,13 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n \n \n /* Subroutine of gfc_trans_assignment that actually scalarizes the\n-   assignment.  EXPR1 is the destination/LHS and EXPR2 is the source/RHS.  */\n+   assignment.  EXPR1 is the destination/LHS and EXPR2 is the source/RHS.\n+   init_flag indicates initialization expressions and dealloc that no\n+   deallocate prior assignment is needed (if in doubt, set true).  */\n \n static tree\n-gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n+gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n+\t\t\tbool dealloc)\n {\n   gfc_se lse;\n   gfc_se rse;\n@@ -5399,7 +5403,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n \t\t       && expr2->expr_type != EXPR_VARIABLE\n \t\t       && !gfc_is_constant_expr (expr2)\n \t\t       && expr1->rank && !expr2->rank);\n-  if (scalar_to_array)\n+  if (scalar_to_array && dealloc)\n     {\n       tmp = gfc_deallocate_alloc_comp (expr2->ts.u.derived, rse.expr, 0);\n       gfc_add_expr_to_block (&loop.post, tmp);\n@@ -5408,7 +5412,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n \t\t\t\t l_is_temp || init_flag,\n \t\t\t\t (expr2->expr_type == EXPR_VARIABLE)\n-\t\t\t\t    || scalar_to_array);\n+\t\t\t\t    || scalar_to_array, dealloc);\n   gfc_add_expr_to_block (&body, tmp);\n \n   if (lss == gfc_ss_terminator)\n@@ -5445,7 +5449,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n \t    rse.string_length = string_length;\n \n \t  tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n-\t\t\t\t\t false, false);\n+\t\t\t\t\t false, false, dealloc);\n \t  gfc_add_expr_to_block (&body, tmp);\n \t}\n \n@@ -5503,7 +5507,8 @@ copyable_array_p (gfc_expr * expr)\n /* Translate an assignment.  */\n \n tree\n-gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n+gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n+\t\t      bool dealloc)\n {\n   tree tmp;\n \n@@ -5546,19 +5551,19 @@ gfc_trans_assignment (gfc_expr * expr1, gfc_expr * expr2, bool init_flag)\n     }\n \n   /* Fallback to the scalarizer to generate explicit loops.  */\n-  return gfc_trans_assignment_1 (expr1, expr2, init_flag);\n+  return gfc_trans_assignment_1 (expr1, expr2, init_flag, dealloc);\n }\n \n tree\n gfc_trans_init_assign (gfc_code * code)\n {\n-  return gfc_trans_assignment (code->expr1, code->expr2, true);\n+  return gfc_trans_assignment (code->expr1, code->expr2, true, false);\n }\n \n tree\n gfc_trans_assign (gfc_code * code)\n {\n-  return gfc_trans_assignment (code->expr1, code->expr2, false);\n+  return gfc_trans_assignment (code->expr1, code->expr2, false, true);\n }\n \n "}, {"sha": "016c5cff269bddd18fecf5fc242792b5476fd263", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -624,11 +624,12 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n \t\t\t\t\t    build_int_cst (pvoid_type_node, 0),\n \t\t\t\t\t    size, NULL, NULL);\n       gfc_conv_descriptor_data_set (&block, decl, ptr);\n-      gfc_add_expr_to_block (&block, gfc_trans_assignment (e1, e2, false));\n+      gfc_add_expr_to_block (&block, gfc_trans_assignment (e1, e2, false,\n+\t\t\t     false));\n       stmt = gfc_finish_block (&block);\n     }\n   else\n-    stmt = gfc_trans_assignment (e1, e2, false);\n+    stmt = gfc_trans_assignment (e1, e2, false, false);\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0, 0));\n   else\n@@ -645,12 +646,13 @@ gfc_trans_omp_array_reduction (tree c, gfc_symbol *sym, locus where)\n       stmtblock_t block;\n \n       gfc_start_block (&block);\n-      gfc_add_expr_to_block (&block, gfc_trans_assignment (e3, e4, false));\n+      gfc_add_expr_to_block (&block, gfc_trans_assignment (e3, e4, false,\n+\t\t\t     true));\n       gfc_add_expr_to_block (&block, gfc_trans_dealloc_allocated (decl));\n       stmt = gfc_finish_block (&block);\n     }\n   else\n-    stmt = gfc_trans_assignment (e3, e4, false);\n+    stmt = gfc_trans_assignment (e3, e4, false, true);\n   if (TREE_CODE (stmt) != BIND_EXPR)\n     stmt = build3_v (BIND_EXPR, NULL, stmt, poplevel (1, 0, 0));\n   else"}, {"sha": "7ebb1e9268b885ea1f3db7466204bb528501464c", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -1852,7 +1852,7 @@ forall_make_variable_temp (gfc_code *c, stmtblock_t *pre, stmtblock_t *post)\n \t}\n \n       tmp = gfc_trans_scalar_assign (&tse, &rse, e->ts, true,\n-\t\t\t\t     e->expr_type == EXPR_VARIABLE);\n+\t\t\t\t     e->expr_type == EXPR_VARIABLE, true);\n       gfc_add_expr_to_block (pre, tmp);\n     }\n   gfc_free_expr (e);\n@@ -2216,7 +2216,7 @@ generate_loop_for_temp_to_lhs (gfc_expr *expr, tree tmp1, tree count3,\n \n       /* Use the scalar assignment.  */\n       rse.string_length = lse.string_length;\n-      tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, false, false);\n+      tmp = gfc_trans_scalar_assign (&lse, &rse, expr->ts, false, true, true);\n \n       /* Form the mask expression according to the mask tree list.  */\n       if (wheremask)\n@@ -2314,7 +2314,7 @@ generate_loop_for_rhs_to_temp (gfc_expr *expr2, tree tmp1, tree count3,\n   /* Use the scalar assignment.  */\n   lse.string_length = rse.string_length;\n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr2->ts, true,\n-\t\t\t\t expr2->expr_type == EXPR_VARIABLE);\n+\t\t\t\t expr2->expr_type == EXPR_VARIABLE, true);\n \n   /* Form the mask expression according to the mask tree list.  */\n   if (wheremask)\n@@ -3091,7 +3091,7 @@ gfc_trans_forall_1 (gfc_code * code, forall_info * nested_forall_info)\n           else\n             {\n               /* Use the normal assignment copying routines.  */\n-              assign = gfc_trans_assignment (c->expr1, c->expr2, false);\n+              assign = gfc_trans_assignment (c->expr1, c->expr2, false, true);\n \n               /* Generate body and loops.  */\n               tmp = gfc_trans_nested_forall_loop (nested_forall_info,\n@@ -3452,7 +3452,7 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n \n   /* Use the scalar assignment as is.  */\n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n-\t\t\t\t loop.temp_ss != NULL, false);\n+\t\t\t\t loop.temp_ss != NULL, false, true);\n \n   tmp = build3_v (COND_EXPR, maskexpr, tmp, build_empty_stmt (input_location));\n \n@@ -3506,7 +3506,8 @@ gfc_trans_where_assign (gfc_expr *expr1, gfc_expr *expr2,\n \t\t\t\t    maskexpr);\n \n           /* Use the scalar assignment as is.  */\n-          tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts, false, false);\n+          tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts, false, false,\n+\t\t\t\t\t true);\n           tmp = build3_v (COND_EXPR, maskexpr, tmp,\n \t\t\t  build_empty_stmt (input_location));\n           gfc_add_expr_to_block (&body, tmp);\n@@ -3913,8 +3914,9 @@ gfc_trans_where_3 (gfc_code * cblock, gfc_code * eblock)\n         gfc_conv_expr (&edse, edst);\n     }\n \n-  tstmt = gfc_trans_scalar_assign (&tdse, &tsse, tdst->ts, false, false);\n-  estmt = eblock ? gfc_trans_scalar_assign (&edse, &esse, edst->ts, false, false)\n+  tstmt = gfc_trans_scalar_assign (&tdse, &tsse, tdst->ts, false, false, true);\n+  estmt = eblock ? gfc_trans_scalar_assign (&edse, &esse, edst->ts, false,\n+\t\t\t\t\t    false, true)\n \t\t : build_empty_stmt (input_location);\n   tmp = build3_v (COND_EXPR, cexpr, tstmt, estmt);\n   gfc_add_expr_to_block (&body, tmp);\n@@ -4176,7 +4178,7 @@ gfc_trans_allocate (gfc_code * code)\n \t    }\n \t  else\n \t    tmp = gfc_trans_assignment (gfc_expr_to_initialize (expr),\n-\t\t\t\t\trhs, false);\n+\t\t\t\t\trhs, false, false);\n \t  gfc_free_expr (rhs);\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}"}, {"sha": "33769319ef34f53a5f0ad18f2effb3a68d10ee11", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -320,7 +320,8 @@ void gfc_conv_subref_array_arg (gfc_se *, gfc_expr *, int, sym_intent, bool);\n /* gfc_trans_* shouldn't call push/poplevel, use gfc_push/pop_scope */\n \n /* Generate code for a scalar assignment.  */\n-tree gfc_trans_scalar_assign (gfc_se *, gfc_se *, gfc_typespec, bool, bool);\n+tree gfc_trans_scalar_assign (gfc_se *, gfc_se *, gfc_typespec, bool, bool,\n+\t\t\t      bool);\n \n /* Translate COMMON blocks.  */\n void gfc_trans_common (gfc_namespace *);\n@@ -401,7 +402,7 @@ tree gfc_get_symbol_decl (gfc_symbol *);\n tree gfc_conv_initializer (gfc_expr *, gfc_typespec *, tree, bool, bool);\n \n /* Assign a default initializer to a derived type.  */\n-tree gfc_init_default_dt (gfc_symbol *, tree);\n+tree gfc_init_default_dt (gfc_symbol *, tree, bool);\n \n /* Substitute a temporary variable in place of the real one.  */\n void gfc_shadow_sym (gfc_symbol *, tree, gfc_saved_var *);\n@@ -485,7 +486,7 @@ tree gfc_deallocate_with_status (tree, tree, bool, gfc_expr*);\n tree gfc_call_realloc (stmtblock_t *, tree, tree);\n \n /* Generate code for an assignment, includes scalarization.  */\n-tree gfc_trans_assignment (gfc_expr *, gfc_expr *, bool);\n+tree gfc_trans_assignment (gfc_expr *, gfc_expr *, bool, bool);\n \n /* Generate code for a pointer assignment.  */\n tree gfc_trans_pointer_assignment (gfc_expr *, gfc_expr *);"}, {"sha": "e6fc3c04e873e883dc18cb3cc5e3751f661cea2c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -1,3 +1,10 @@\n+2010-04-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/43178\n+\t* gfortran.dg/alloc_comp_basics_1.f90: Update scan-tree-dump-times.\n+\t* gfortran.dg/alloc_comp_constructor_1.f90: Ditto.\n+\t* gfortran.dg/auto_dealloc_1.f90: Ditto.\n+\n 2010-04-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43627"}, {"sha": "e53112ce46e07b30be4a4fd3e55d80aa689cff98", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_basics_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_basics_1.f90?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -139,6 +139,6 @@ subroutine check_alloc2(b)\n     end subroutine check_alloc2\n \n end program alloc\n-! { dg-final { scan-tree-dump-times \"builtin_free\" 21 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 18 \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }\n ! { dg-final { cleanup-modules \"alloc_m\" } }"}, {"sha": "969e703094c63681f8f1dca8e0840fff08c4aba3", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_constructor_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_constructor_1.f90?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -104,5 +104,5 @@ function blaha()\n     end function blaha\r\n \r\n end program test_constructor\r\n-! { dg-final { scan-tree-dump-times \"builtin_free\" 21 \"original\" } }\r\n+! { dg-final { scan-tree-dump-times \"builtin_free\" 19 \"original\" } }\r\n ! { dg-final { cleanup-tree-dump \"original\" } }\r"}, {"sha": "95a71609d1dcfcc9d1f6f3022636ffe1d6728011", "filename": "gcc/testsuite/gfortran.dg/auto_dealloc_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b56d6a4250278089594886154f3f791a0d79639/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fauto_dealloc_1.f90?ref=2b56d6a4250278089594886154f3f791a0d79639", "patch": "@@ -53,7 +53,7 @@ subroutine d\n end module \n \n \n-! { dg-final { scan-tree-dump-times \"__builtin_free\" 5 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"__builtin_free\" 4 \"original\" } }\n \n ! { dg-final { cleanup-modules \"automatic_deallocation\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }"}]}