{"sha": "8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhNGM4ZDgzYjdhMjExMjdjYmU0NjRhYTU0YzVmM2U3YzAzNGZlYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-12-08T08:06:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-12-08T08:06:31Z"}, "message": "re PR tree-optimization/81303 (410.bwaves regression caused by r249919)\n\n2017-12-08  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/81303\n\t* tree-vect-stmts.c (vect_is_simple_cond): For invariant\n\tconditions try to create a comparison vector type matching\n\tthe data vector type.\n\t(vectorizable_condition): Adjust.\n\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern):\n\tLeave invariant conditions alone in case we can vectorize those.\n\n\t* gcc.target/i386/vectorize9.c: New testcase.\n\t* gcc.target/i386/vectorize10.c: New testcase.\n\nFrom-SVN: r255497", "tree": {"sha": "e7409b2670c511d8b3917122616fb4fbe1c09aa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7409b2670c511d8b3917122616fb4fbe1c09aa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb7ca60332394a1afa7ed03b70d7718bf86cda3"}], "stats": {"total": 93, "additions": 91, "deletions": 2}, "files": [{"sha": "a666d115e3786076e7d765a9be28411154b4ba9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -1,3 +1,13 @@\n+2017-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81303\n+\t* tree-vect-stmts.c (vect_is_simple_cond): For invariant\n+\tconditions try to create a comparison vector type matching\n+\tthe data vector type.\n+\t(vectorizable_condition): Adjust.\n+\t* tree-vect-patterns.c (vect_recog_mask_conversion_pattern):\n+\tLeave invariant conditions alone in case we can vectorize those.\n+\n 2017-12-08  Julia Koval  <julia.koval@intel.com>\n \n \t* config/i386/avx512vnniintrin.h (_mm512_dpwssd_epi32,"}, {"sha": "8324d4f3ad4bde437bd11787e6e98208dd36c2e3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -1,3 +1,9 @@\n+2017-12-08  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/81303\n+\t* gcc.target/i386/vectorize9.c: New testcase.\n+\t* gcc.target/i386/vectorize10.c: New testcase.\n+\n 2017-12-08  Julia Koval  <julia.koval@intel.com>\n \n \t* gcc.target/i386/avx512f-vnni-1.c: Add vdpwssd checks."}, {"sha": "4353aec2aca8c2108899149d635010b6ed80f6ff", "filename": "gcc/testsuite/gcc.target/i386/vectorize10.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize10.c?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-loop-vectorize -fdump-tree-vect-details -fno-tree-loop-im -msse2 -mno-avx\" } */\n+\n+double x[1024][1024], red[1024];\n+void foo (void)\n+{\n+  for (int i = 0; i < 1024; ++i)\n+    for (int j = 0; j < 1024; ++j)\n+      {\n+\tdouble v = i == 0 ? 0.0 : red[j];\n+\tv = v + x[i][j];\n+\tred[j] = v;\n+      }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */"}, {"sha": "3f02be427b9693094d8850413e67c09518ddb326", "filename": "gcc/testsuite/gcc.target/i386/vectorize9.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fvectorize9.c?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ftree-loop-vectorize -fdump-tree-vect-details -fno-tree-loop-im -mavx2 -mprefer-vector-width=256\" } */\n+\n+double x[1024][1024], red[1024];\n+void foo (void)\n+{\n+  for (int i = 0; i < 1024; ++i)\n+    for (int j = 0; j < 1024; ++j)\n+      {\n+\tdouble v = i == 0 ? 0.0 : red[j];\n+\tv = v + x[i][j];\n+\tred[j] = v;\n+      }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorization factor = 4\" \"vect\" } } */"}, {"sha": "a2c629309e021dad46bbe3ea5e66d149e5286961", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -3976,6 +3976,32 @@ vect_recog_mask_conversion_pattern (vec<gimple *> *stmts, tree *type_in,\n \t  || TYPE_VECTOR_SUBPARTS (vectype1) == TYPE_VECTOR_SUBPARTS (vectype2))\n \treturn NULL;\n \n+      /* If rhs1 is invariant and we can promote it leave the COND_EXPR\n+         in place, we can handle it in vectorizable_condition.  This avoids\n+\t unnecessary promotion stmts and increased vectorization factor.  */\n+      if (COMPARISON_CLASS_P (rhs1)\n+\t  && INTEGRAL_TYPE_P (rhs1_type)\n+\t  && TYPE_VECTOR_SUBPARTS (vectype1) < TYPE_VECTOR_SUBPARTS (vectype2))\n+\t{\n+\t  gimple *dummy;\n+\t  enum vect_def_type dt;\n+\t  if (vect_is_simple_use (TREE_OPERAND (rhs1, 0), stmt_vinfo->vinfo,\n+\t\t\t\t  &dummy, &dt)\n+\t      && dt == vect_external_def\n+\t      && vect_is_simple_use (TREE_OPERAND (rhs1, 1), stmt_vinfo->vinfo,\n+\t\t\t\t     &dummy, &dt)\n+\t      && (dt == vect_external_def\n+\t\t  || dt == vect_constant_def))\n+\t    {\n+\t      tree wide_scalar_type = build_nonstandard_integer_type\n+\t\t(tree_to_uhwi (TYPE_SIZE (TREE_TYPE (vectype1))),\n+\t\t TYPE_UNSIGNED (rhs1_type));\n+\t      tree vectype3 = get_vectype_for_scalar_type (wide_scalar_type);\n+\t      if (expand_vec_cond_expr_p (vectype1, vectype3, TREE_CODE (rhs1)))\n+\t\treturn NULL;\n+\t    }\n+\t}\n+\n       /* If rhs1 is a comparison we need to move it into a\n \t separate statement.  */\n       if (TREE_CODE (rhs1) != SSA_NAME)"}, {"sha": "2bebad152ebee1105b572abc62120dd7f17efd3f", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8da4c8d83b7a21127cbe464aa54c5f3e7c034feb/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8da4c8d83b7a21127cbe464aa54c5f3e7c034feb", "patch": "@@ -7791,7 +7791,8 @@ vectorizable_load (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \n static bool\n vect_is_simple_cond (tree cond, vec_info *vinfo,\n-\t\t     tree *comp_vectype, enum vect_def_type *dts)\n+\t\t     tree *comp_vectype, enum vect_def_type *dts,\n+\t\t     tree vectype)\n {\n   tree lhs, rhs;\n   tree vectype1 = NULL_TREE, vectype2 = NULL_TREE;\n@@ -7844,6 +7845,20 @@ vect_is_simple_cond (tree cond, vec_info *vinfo,\n     return false;\n \n   *comp_vectype = vectype1 ? vectype1 : vectype2;\n+  /* Invariant comparison.  */\n+  if (! *comp_vectype)\n+    {\n+      tree scalar_type = TREE_TYPE (lhs);\n+      /* If we can widen the comparison to match vectype do so.  */\n+      if (INTEGRAL_TYPE_P (scalar_type)\n+\t  && tree_int_cst_lt (TYPE_SIZE (scalar_type),\n+\t\t\t      TYPE_SIZE (TREE_TYPE (vectype))))\n+\tscalar_type = build_nonstandard_integer_type\n+\t  (tree_to_uhwi (TYPE_SIZE (TREE_TYPE (vectype))),\n+\t   TYPE_UNSIGNED (scalar_type));\n+      *comp_vectype = get_vectype_for_scalar_type (scalar_type);\n+    }\n+\n   return true;\n }\n \n@@ -7941,7 +7956,7 @@ vectorizable_condition (gimple *stmt, gimple_stmt_iterator *gsi,\n   else_clause = gimple_assign_rhs3 (stmt);\n \n   if (!vect_is_simple_cond (cond_expr, stmt_info->vinfo,\n-\t\t\t    &comp_vectype, &dts[0])\n+\t\t\t    &comp_vectype, &dts[0], vectype)\n       || !comp_vectype)\n     return false;\n "}]}