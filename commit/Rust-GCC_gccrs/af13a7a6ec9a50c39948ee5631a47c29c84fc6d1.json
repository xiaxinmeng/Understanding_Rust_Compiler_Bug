{"sha": "af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWYxM2E3YTZlYzlhNTBjMzk5NDhlZTU2MzFhNDdjMjljODRmYzZkMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2007-03-04T22:59:49Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2007-03-04T22:59:49Z"}, "message": "acinclude.m4 (GLIBCXX_ENABLE_CHEADERS): Add c_global.\n\n2007-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_CHEADERS): Add c_global.\n\t* configure.host (c_model): Set default to c_global.\n\t* configure: Regenerate.\n\t* include/Makefile.am (c_compatibility_headers_extra): Make\n\tconditional on GLIBCXX_C_HEADERS_COMPATIBILITY.\n\t(c_base_headers_extra): Make conditional on GLIBCXX_C_HEADERS_EXTRA.\n\t(c_compatibility_headers): Make conditional on c/c_std/c_global.\n\t* include/Makefile.in: Regenerate.\n\t* docs/html/configopts.html: Add c_global information to\n\t--enable-cheaders. Eventually, \"c_std\" should mean \"C\" includes\n\tthat are in namespace std, with optional C++ \"C\" compatibility\n\tincludes to inject into global scope. And \"c_global\" should mean\n\t\"C\" includes that are in the global namespace, with C++ includes\n\tinjecting into namespace std and no C++ \"C\" compatibility\n\tincludes.\n \n2007-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/c++config: Add _GLIBCXX_NAMEPACE_C.\n\tAdd _GLIBCXX_NAMESPACE_ASSOCIATION_CXX200x.\n\tAdd _GLIBCXX_TR1 as namespace macro.\n\tAdd namespace associations for std::__cxx200x conditionally.\n\n\t* include/c_compatibility/assert.h: Correct doxygen markup,\n\tconditionalize the global injections on _GLIBCXX_NAMESPACE_C.\n\t* include/c_compatibility/ctype.h: Same.\n\t* include/c_compatibility/errno.h: Same.\n\t* include/c_compatibility/float.h: Same.\n\t* include/c_compatibility/iso646.h: Same.\n\t* include/c_compatibility/limits.h: Same.\n\t* include/c_compatibility/locale.h: Same.\n\t* include/c_compatibility/math.h: Same.\n\t* include/c_compatibility/setjmp.h: Same.\n\t* include/c_compatibility/signal.h: Same.\n\t* include/c_compatibility/stdarg.h: Same.\n\t* include/c_compatibility/stddef.h: Same.\n\t* include/c_compatibility/stdio.h: Same.\n\t* include/c_compatibility/stdlib.h: Same.\n\t* include/c_compatibility/string.h: Same.\n\t* include/c_compatibility/time.h: Same.\n\t* include/c_compatibility/wchar.h: Same.\n\t* include/c_compatibility/wctype.h: Same.\n\n\t* include/c_compatibility/complex.h: Add.\n\t* include/c_compatibility/fenv.h: Same.\n\t* include/c_compatibility/inttypes.h: Same.\n\t* include/c_compatibility/stdbool.h: Same.\n\t* include/c_compatibility/stdint.h: Same.\n\t* include/c_compatibility/tgmath.h: Same.\n\n\t* include/c_global/cassert: Add, use include_next, use C++0x features\n\tif -std=c++0x.\n\t* include/c_global/cctype: Same.\n\t* include/c_global/cerrno: Same.\n\t* include/c_global/cfloat: Same.\n\t* include/c_global/ciso646: Same.\n\t* include/c_global/climits: Same.\n\t* include/c_global/clocale: Same.\n\t* include/c_global/cmath: Same.\n\t* include/c_global/cmath.tcc: Same.\n\t* include/c_global/csetjmp: Same.\n\t* include/c_global/csignal: Same.\n\t* include/c_global/cstdarg: Same.\n\t* include/c_global/cstddef: Same.\n\t* include/c_global/cstdio: Same.\n\t* include/c_global/cstdlib: Same.\n\t* include/c_global/cstring: Same.\n\t* include/c_global/ctime: Same.\n\t* include/c_global/cwchar: Same.\n\t* include/c_global/cwctype: Same.\n\n\t* include/c_global/ccomplex: Add.\n\t* include/c_global/cfenv: Add.\n\t* include/c_global/cinttypes: Add. \n\t* include/c_global/cstdbool: Add.\n\t* include/c_global/cstdint: Add.\n\t* include/c_global/ctgmath: Add.\n\n\t* include/std/algorithm: Use C++0x features if -std=c++0x.\t\n\t* include/std/bitset: Same.\n\t* include/std/complex: Same.\n\t* include/std/deque: Same.\n\t* include/std/fstream: Same.\n\t* include/std/functional: Same.\n\t* include/std/iomanip: Same.\n\t* include/std/ios: Same.\n\t* include/std/iosfwd: Same.\n\t* include/std/iostream: Same.\n\t* include/std/istream: Same.\n\t* include/std/iterator: Same.\n\t* include/std/limits: Same.\n\t* include/std/list: Same.\n\t* include/std/locale: Same.\n\t* include/std/map: Same.\n\t* include/std/memory: Same.\n\t* include/std/numeric: Same.\n\t* include/std/ostream: Same.\n\t* include/std/queue: Same.\n\t* include/std/set: Same.\n\t* include/std/sstream: Same.\n\t* include/std/stack: Same.\n\t* include/std/stdexcept: Same.\n\t* include/std/streambuf: Same.\n\t* include/std/string: Same.\n\t* include/std/utility: Same.\n\t* include/std/valarray: Same.\n\t* include/std/vector: Same.\n\n\t* include/std/array: Add.\n\t* include/std/random: Add.\n\t* include/std/regex: Add.\n\t* include/std/tuple: Add.\n\t* include/std/type_traits: Add.\n\t* include/std/unordered_map: Add.\n\t* include/std/unordered_set: Add.\n\t* include/std/c++0x_warning.h: Add.\n\t\n\t* include/tr1/array: Switch namespaces based on _GLIBCXX_TR1.\n\t* include/tr1/boost_shared_ptr.h: Same.\n\t* include/tr1/cctype: Same.\n\t* include/tr1/cfenv: Same.\n\t* include/tr1/cinttypes: Same.\n\t* include/tr1/cmath: Same.\n\t* include/tr1/common.h: Same.\n\t* include/tr1/complex: Same.\n\t* include/tr1/cstdint: Same.\n\t* include/tr1/cstdio: Same.\n\t* include/tr1/cstdlib: Same.\n\t* include/tr1/cwchar: Same.\n\t* include/tr1/cwctype: Same.\n\t* include/tr1/functional: Same.\n\t* include/tr1/functional_hash.h: Same.\n\t* include/tr1/functional_iterate.h: Same.\n\t* include/tr1/hashtable: Same.\n\t* include/tr1/hashtable_policy.h: Same.\n\t* include/tr1/math.h: Same.\n\t* include/tr1/memory: Same.\n\t* include/tr1/random: Same.\n\t* include/tr1/random.tcc: Same.\n\t* include/tr1/ref_fwd.h: Same.\n\t* include/tr1/repeat.h: Same.\n\t* include/tr1/stdlib.h: Same.\n\t* include/tr1/tuple: Same.\n\t* include/tr1/tuple_iterate.h: Same.\n\t* include/tr1/type_traits: Same.\n\t* include/tr1/type_traits_fwd.h: Same.\n\t* include/tr1/unordered_map: Same.\n\t* include/tr1/unordered_set: Same.\n\t* include/tr1/utility: Same.\n\n\t* include/tr1/ccomplex: Add.\n\t* include/tr1/complex.h: Add.\n\t* include/tr1/regex: Add.\n\n\t* include/Makefile.am: Add C++0x headers, \"C\" compatibility headers.\n\t* include/Makefile.in: Regenerate.\n\n\t* testsuite/tr1/headers.cc: Add in regex/complex.\n\n\t* testsuite/17_intro/headers/c++200x/all.cc: New.\n\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Same.\n\t* testsuite/17_intro/using_namespace_std_tr1_neg.cc: Same.\n\t* testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc: Same.\n\t* testsuite/18_support/headers/cstdint/std_c++0x_neg.cc: Same.\n\t* testsuite/18_support/headers/cstdint/types_std_c++0x.cc: Same.\n\t* testsuite/20_util/enable_shared_from_this/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/headers/functional/types_std_c++0x.cc: Same.\n\t* testsuite/20_util/headers/functional/\n\tusing_namespace_std_placeholders.cc: Same.\n\t* testsuite/20_util/headers/memory/types_std_c++0x.cc: Same.\n\t* testsuite/20_util/headers/type_traits/std_c++0x_neg.cc: Same.\n\t* testsuite/20_util/headers/type_traits/types_std_c++0x.cc: Same.\n\t* testsuite/20_util/shared_ptr/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/20_util/weak_ptr/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/array/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/hash/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/headers/array/std_c++0x_neg.cc: Same.\n\t* testsuite/23_containers/headers/tuple/std_c++0x_neg.cc: Same.\n\t* testsuite/23_containers/headers/tuple/types_std_c++0x.cc: Same.\n\t* testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc: Same.\n\t* testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc: Same.\n\t* testsuite/23_containers/tuple/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/unordered_map/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/unordered_multimap/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/unordered_multiset/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/23_containers/unordered_set/requirements/\n\texplicit_instantiation.cc: Same.\n\t* testsuite/26_numerics/headers/ccomplex/std_c++0x_neg.cc: Same.\n\t* testsuite/26_numerics/headers/cfenv/std_c++0x_neg.cc: Same.\n\t* testsuite/26_numerics/headers/cfenv/types_std_c++0x.cc: Same.\n\t* testsuite/26_numerics/headers/cmath/types_std_c++0x.cc: Same.\n\t* testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc: Same.\n\t* testsuite/26_numerics/headers/ctgmath/std_c++0x_neg.cc: Same.\n\t* testsuite/26_numerics/headers/random/std_c++0x_neg.cc: Same.\n\t* testsuite/26_numerics/headers/random/types_std_c++0x.cc: Same.\n\t* testsuite/27_io/headers/cinttypes/std_c++0x_neg.cc: Same.\n\t* testsuite/27_io/headers/cinttypes/types_std_c++0x.cc: Same.\n\t* testsuite/28_regex/headers/regex/std_c++0x_neg.cc: Same.\n\n\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Rename ...\n\t* testsuite/tr1/8_c_compatibility/cinttypes/types.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cmath/types.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cstdint/types.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/types.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cfenv/types_std_tr1.cc: ...to this.\n\t* testsuite/tr1/8_c_compatibility/cinttypes/types_std_tr1.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cmath/types_std_tr1.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cstdint/types_std_tr1.cc: Same.\n\t* testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc: Same.\n\nFrom-SVN: r122533", "tree": {"sha": "6183cdc0529902f31f33803ed307e9ee3e2f9690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6183cdc0529902f31f33803ed307e9ee3e2f9690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/comments", "author": null, "committer": null, "parents": [{"sha": "2a2193e029fd71ac7962f5cba542e0565c285e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2193e029fd71ac7962f5cba542e0565c285e6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2193e029fd71ac7962f5cba542e0565c285e6f"}], "stats": {"total": 6096, "additions": 5660, "deletions": 436}, "files": [{"sha": "df36e44294f9c743829c89b568bd8b16ebc6dafa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,3 +1,224 @@\n+2007-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_CHEADERS): Add c_global.\n+\t* configure.host (c_model): Set default to c_global.\n+\t* configure: Regenerate.\n+\t* include/Makefile.am (c_compatibility_headers_extra): Make\n+\tconditional on GLIBCXX_C_HEADERS_COMPATIBILITY.\n+\t(c_base_headers_extra): Make conditional on GLIBCXX_C_HEADERS_EXTRA.\n+\t(c_compatibility_headers): Make conditional on c/c_std/c_global.\n+\t* include/Makefile.in: Regenerate.\n+\t* docs/html/configopts.html: Add c_global information to\n+\t--enable-cheaders. Eventually, \"c_std\" should mean \"C\" includes\n+\tthat are in namespace std, with optional C++ \"C\" compatibility\n+\tincludes to inject into global scope. And \"c_global\" should mean\n+\t\"C\" includes that are in the global namespace, with C++ includes\n+\tinjecting into namespace std and no C++ \"C\" compatibility\n+\tincludes.\n+ \n+2007-03-04  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/c++config: Add _GLIBCXX_NAMEPACE_C.\n+\tAdd _GLIBCXX_NAMESPACE_ASSOCIATION_CXX200x.\n+\tAdd _GLIBCXX_TR1 as namespace macro.\n+\tAdd namespace associations for std::__cxx200x conditionally.\n+\n+\t* include/c_compatibility/assert.h: Correct doxygen markup,\n+\tconditionalize the global injections on _GLIBCXX_NAMESPACE_C.\n+\t* include/c_compatibility/ctype.h: Same.\n+\t* include/c_compatibility/errno.h: Same.\n+\t* include/c_compatibility/float.h: Same.\n+\t* include/c_compatibility/iso646.h: Same.\n+\t* include/c_compatibility/limits.h: Same.\n+\t* include/c_compatibility/locale.h: Same.\n+\t* include/c_compatibility/math.h: Same.\n+\t* include/c_compatibility/setjmp.h: Same.\n+\t* include/c_compatibility/signal.h: Same.\n+\t* include/c_compatibility/stdarg.h: Same.\n+\t* include/c_compatibility/stddef.h: Same.\n+\t* include/c_compatibility/stdio.h: Same.\n+\t* include/c_compatibility/stdlib.h: Same.\n+\t* include/c_compatibility/string.h: Same.\n+\t* include/c_compatibility/time.h: Same.\n+\t* include/c_compatibility/wchar.h: Same.\n+\t* include/c_compatibility/wctype.h: Same.\n+\n+\t* include/c_compatibility/complex.h: Add.\n+\t* include/c_compatibility/fenv.h: Same.\n+\t* include/c_compatibility/inttypes.h: Same.\n+\t* include/c_compatibility/stdbool.h: Same.\n+\t* include/c_compatibility/stdint.h: Same.\n+\t* include/c_compatibility/tgmath.h: Same.\n+\n+\t* include/c_global/cassert: Add, use include_next, use C++0x features\n+\tif -std=c++0x.\n+\t* include/c_global/cctype: Same.\n+\t* include/c_global/cerrno: Same.\n+\t* include/c_global/cfloat: Same.\n+\t* include/c_global/ciso646: Same.\n+\t* include/c_global/climits: Same.\n+\t* include/c_global/clocale: Same.\n+\t* include/c_global/cmath: Same.\n+\t* include/c_global/cmath.tcc: Same.\n+\t* include/c_global/csetjmp: Same.\n+\t* include/c_global/csignal: Same.\n+\t* include/c_global/cstdarg: Same.\n+\t* include/c_global/cstddef: Same.\n+\t* include/c_global/cstdio: Same.\n+\t* include/c_global/cstdlib: Same.\n+\t* include/c_global/cstring: Same.\n+\t* include/c_global/ctime: Same.\n+\t* include/c_global/cwchar: Same.\n+\t* include/c_global/cwctype: Same.\n+\n+\t* include/c_global/ccomplex: Add.\n+\t* include/c_global/cfenv: Add.\n+\t* include/c_global/cinttypes: Add. \n+\t* include/c_global/cstdbool: Add.\n+\t* include/c_global/cstdint: Add.\n+\t* include/c_global/ctgmath: Add.\n+\n+\t* include/std/algorithm: Use C++0x features if -std=c++0x.\t\n+\t* include/std/bitset: Same.\n+\t* include/std/complex: Same.\n+\t* include/std/deque: Same.\n+\t* include/std/fstream: Same.\n+\t* include/std/functional: Same.\n+\t* include/std/iomanip: Same.\n+\t* include/std/ios: Same.\n+\t* include/std/iosfwd: Same.\n+\t* include/std/iostream: Same.\n+\t* include/std/istream: Same.\n+\t* include/std/iterator: Same.\n+\t* include/std/limits: Same.\n+\t* include/std/list: Same.\n+\t* include/std/locale: Same.\n+\t* include/std/map: Same.\n+\t* include/std/memory: Same.\n+\t* include/std/numeric: Same.\n+\t* include/std/ostream: Same.\n+\t* include/std/queue: Same.\n+\t* include/std/set: Same.\n+\t* include/std/sstream: Same.\n+\t* include/std/stack: Same.\n+\t* include/std/stdexcept: Same.\n+\t* include/std/streambuf: Same.\n+\t* include/std/string: Same.\n+\t* include/std/utility: Same.\n+\t* include/std/valarray: Same.\n+\t* include/std/vector: Same.\n+\n+\t* include/std/array: Add.\n+\t* include/std/random: Add.\n+\t* include/std/regex: Add.\n+\t* include/std/tuple: Add.\n+\t* include/std/type_traits: Add.\n+\t* include/std/unordered_map: Add.\n+\t* include/std/unordered_set: Add.\n+\t* include/std/c++0x_warning.h: Add.\n+\t\n+\t* include/tr1/array: Switch namespaces based on _GLIBCXX_TR1.\n+\t* include/tr1/boost_shared_ptr.h: Same.\n+\t* include/tr1/cctype: Same.\n+\t* include/tr1/cfenv: Same.\n+\t* include/tr1/cinttypes: Same.\n+\t* include/tr1/cmath: Same.\n+\t* include/tr1/common.h: Same.\n+\t* include/tr1/complex: Same.\n+\t* include/tr1/cstdint: Same.\n+\t* include/tr1/cstdio: Same.\n+\t* include/tr1/cstdlib: Same.\n+\t* include/tr1/cwchar: Same.\n+\t* include/tr1/cwctype: Same.\n+\t* include/tr1/functional: Same.\n+\t* include/tr1/functional_hash.h: Same.\n+\t* include/tr1/functional_iterate.h: Same.\n+\t* include/tr1/hashtable: Same.\n+\t* include/tr1/hashtable_policy.h: Same.\n+\t* include/tr1/math.h: Same.\n+\t* include/tr1/memory: Same.\n+\t* include/tr1/random: Same.\n+\t* include/tr1/random.tcc: Same.\n+\t* include/tr1/ref_fwd.h: Same.\n+\t* include/tr1/repeat.h: Same.\n+\t* include/tr1/stdlib.h: Same.\n+\t* include/tr1/tuple: Same.\n+\t* include/tr1/tuple_iterate.h: Same.\n+\t* include/tr1/type_traits: Same.\n+\t* include/tr1/type_traits_fwd.h: Same.\n+\t* include/tr1/unordered_map: Same.\n+\t* include/tr1/unordered_set: Same.\n+\t* include/tr1/utility: Same.\n+\n+\t* include/tr1/ccomplex: Add.\n+\t* include/tr1/complex.h: Add.\n+\t* include/tr1/regex: Add.\n+\n+\t* include/Makefile.am: Add C++0x headers, \"C\" compatibility headers.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* testsuite/tr1/headers.cc: Add in regex/complex.\n+\n+\t* testsuite/17_intro/headers/c++200x/all.cc: New.\n+\t* testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc: Same.\n+\t* testsuite/17_intro/using_namespace_std_tr1_neg.cc: Same.\n+\t* testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc: Same.\n+\t* testsuite/18_support/headers/cstdint/std_c++0x_neg.cc: Same.\n+\t* testsuite/18_support/headers/cstdint/types_std_c++0x.cc: Same.\n+\t* testsuite/20_util/enable_shared_from_this/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/headers/functional/types_std_c++0x.cc: Same.\n+\t* testsuite/20_util/headers/functional/\n+\tusing_namespace_std_placeholders.cc: Same.\n+\t* testsuite/20_util/headers/memory/types_std_c++0x.cc: Same.\n+\t* testsuite/20_util/headers/type_traits/std_c++0x_neg.cc: Same.\n+\t* testsuite/20_util/headers/type_traits/types_std_c++0x.cc: Same.\n+\t* testsuite/20_util/shared_ptr/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/20_util/weak_ptr/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/array/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/hash/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/headers/array/std_c++0x_neg.cc: Same.\n+\t* testsuite/23_containers/headers/tuple/std_c++0x_neg.cc: Same.\n+\t* testsuite/23_containers/headers/tuple/types_std_c++0x.cc: Same.\n+\t* testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc: Same.\n+\t* testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc: Same.\n+\t* testsuite/23_containers/tuple/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/unordered_map/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/unordered_multimap/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/unordered_multiset/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/23_containers/unordered_set/requirements/\n+\texplicit_instantiation.cc: Same.\n+\t* testsuite/26_numerics/headers/ccomplex/std_c++0x_neg.cc: Same.\n+\t* testsuite/26_numerics/headers/cfenv/std_c++0x_neg.cc: Same.\n+\t* testsuite/26_numerics/headers/cfenv/types_std_c++0x.cc: Same.\n+\t* testsuite/26_numerics/headers/cmath/types_std_c++0x.cc: Same.\n+\t* testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc: Same.\n+\t* testsuite/26_numerics/headers/ctgmath/std_c++0x_neg.cc: Same.\n+\t* testsuite/26_numerics/headers/random/std_c++0x_neg.cc: Same.\n+\t* testsuite/26_numerics/headers/random/types_std_c++0x.cc: Same.\n+\t* testsuite/27_io/headers/cinttypes/std_c++0x_neg.cc: Same.\n+\t* testsuite/27_io/headers/cinttypes/types_std_c++0x.cc: Same.\n+\t* testsuite/28_regex/headers/regex/std_c++0x_neg.cc: Same.\n+\n+\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Rename ...\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/types.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cmath/types.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cstdint/types.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/types.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cfenv/types_std_tr1.cc: ...to this.\n+\t* testsuite/tr1/8_c_compatibility/cinttypes/types_std_tr1.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cmath/types_std_tr1.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cstdint/types_std_tr1.cc: Same.\n+\t* testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc: Same.\n+\n 2007-03-03  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31031"}, {"sha": "ae34b79c5e5cfaa155e1adfb48c7fb05f94ab8ee", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -156,9 +156,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "f40845dfa18eab884642989cd8a01e7bf84f13fe", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1264,19 +1264,30 @@ dnl\n dnl --enable-cheaders= [does stuff].\n dnl --disable-cheaders [does not do anything, really].\n dnl  +  Usage:  GLIBCXX_ENABLE_CHEADERS[(DEFAULT)]\n-dnl       Where DEFAULT is either `c' or `c_std'.\n+dnl       Where DEFAULT is either 'c' or 'c_std' or 'c_global'.\n dnl\n AC_DEFUN([GLIBCXX_ENABLE_CHEADERS], [\n   GLIBCXX_ENABLE(cheaders,$1,[=KIND],\n-    [construct \"C\" headers for g++], [permit c|c_std])\n+    [construct \"C\" headers for g++], [permit c|c_std|c_global])\n   AC_MSG_NOTICE(\"C\" header strategy set to $enable_cheaders)\n \n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n \n+  # Allow overrides to configure.host here.\n+  if test $enable_cheaders = c_global; then\n+     c_compatibility=yes\n+  fi\n+\n+  if test $enable_cheaders = c_global || test $enable_cheaders = c_std; then\n+     c_extra=yes\n+  fi\n+\n   AC_SUBST(C_INCLUDE_DIR)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C, test $enable_cheaders = c)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_STD, test $enable_cheaders = c_std)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_C_GLOBAL, test $enable_cheaders = c_global)\n   GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_COMPATIBILITY, test $c_compatibility = yes)\n+  GLIBCXX_CONDITIONAL(GLIBCXX_C_HEADERS_EXTRA, test $c_extra = yes)\n ])\n \n "}, {"sha": "d60c747e024392944d93354819719e0a235d0bab", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -309,7 +309,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT CPP CPPFLAGS EGREP LIBTOOL CXXCPP enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV LTLIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_GNU_NAMESPACE_TRUE ENABLE_SYMVERS_GNU_NAMESPACE_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE ENABLE_VISIBILITY_TRUE ENABLE_VISIBILITY_FALSE GLIBCXX_LDBL_COMPAT_TRUE GLIBCXX_LDBL_COMPAT_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT CPP CPPFLAGS EGREP LIBTOOL CXXCPP enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H ALLOCATOR_H ALLOCATOR_NAME C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_C_GLOBAL_TRUE GLIBCXX_C_HEADERS_C_GLOBAL_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE GLIBCXX_C_HEADERS_EXTRA_TRUE GLIBCXX_C_HEADERS_EXTRA_FALSE DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS glibcxx_thread_h WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS LIBICONV LTLIBICONV SYMVER_FILE port_specific_symbol_files ENABLE_SYMVERS_TRUE ENABLE_SYMVERS_FALSE ENABLE_SYMVERS_GNU_TRUE ENABLE_SYMVERS_GNU_FALSE ENABLE_SYMVERS_GNU_NAMESPACE_TRUE ENABLE_SYMVERS_GNU_NAMESPACE_FALSE ENABLE_SYMVERS_DARWIN_TRUE ENABLE_SYMVERS_DARWIN_FALSE ENABLE_VISIBILITY_TRUE ENABLE_VISIBILITY_FALSE GLIBCXX_LDBL_COMPAT_TRUE GLIBCXX_LDBL_COMPAT_FALSE baseline_dir ATOMICITY_SRCDIR ATOMIC_WORD_SRCDIR CPU_DEFINES_SRCDIR ABI_TWEAKS_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -6432,7 +6432,7 @@ if test \"${enable_cheaders+set}\" = set; then\n   enableval=\"$enable_cheaders\"\n \n       case \"$enableval\" in\n-       c|c_std) ;;\n+       c|c_std|c_global) ;;\n        *) { { echo \"$as_me:$LINENO: error: Unknown argument to enable/disable cheaders\" >&5\n echo \"$as_me: error: Unknown argument to enable/disable cheaders\" >&2;}\n    { (exit 1); exit 1; }; } ;;\n@@ -6447,6 +6447,17 @@ echo \"$as_me: \\\"C\\\" header strategy set to $enable_cheaders\" >&6;}\n \n   C_INCLUDE_DIR='${glibcxx_srcdir}/include/'$enable_cheaders\n \n+  # Allow overrides to configure.host here.\n+  if test $enable_cheaders = c_global; then\n+     c_compatibility=yes\n+  fi\n+\n+  if test $enable_cheaders = c_global || test $enable_cheaders = c_std; then\n+     c_extra=yes\n+  fi\n+\n+\n+\n \n \n \n@@ -8018,7 +8029,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 8021 \"configure\"\n+#line 8032 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -84604,6 +84615,17 @@ fi\n \n \n \n+if test $enable_cheaders = c_global; then\n+  GLIBCXX_C_HEADERS_C_GLOBAL_TRUE=\n+  GLIBCXX_C_HEADERS_C_GLOBAL_FALSE='#'\n+else\n+  GLIBCXX_C_HEADERS_C_GLOBAL_TRUE='#'\n+  GLIBCXX_C_HEADERS_C_GLOBAL_FALSE=\n+fi\n+\n+\n+\n+\n if test $c_compatibility = yes; then\n   GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE=\n   GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE='#'\n@@ -84615,6 +84637,17 @@ fi\n \n \n \n+if test $c_extra = yes; then\n+  GLIBCXX_C_HEADERS_EXTRA_TRUE=\n+  GLIBCXX_C_HEADERS_EXTRA_FALSE='#'\n+else\n+  GLIBCXX_C_HEADERS_EXTRA_TRUE='#'\n+  GLIBCXX_C_HEADERS_EXTRA_FALSE=\n+fi\n+\n+\n+\n+\n if test $enable_libstdcxx_debug = yes; then\n   GLIBCXX_BUILD_DEBUG_TRUE=\n   GLIBCXX_BUILD_DEBUG_FALSE='#'\n@@ -85025,13 +85058,27 @@ echo \"$as_me: error: conditional \\\"GLIBCXX_C_HEADERS_C_STD\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${GLIBCXX_C_HEADERS_C_GLOBAL_TRUE}\" && test -z \"${GLIBCXX_C_HEADERS_C_GLOBAL_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_C_HEADERS_C_GLOBAL\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"GLIBCXX_C_HEADERS_C_GLOBAL\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE}\" && test -z \"${GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_C_HEADERS_COMPATIBILITY\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n echo \"$as_me: error: conditional \\\"GLIBCXX_C_HEADERS_COMPATIBILITY\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&2;}\n    { (exit 1); exit 1; }; }\n fi\n+if test -z \"${GLIBCXX_C_HEADERS_EXTRA_TRUE}\" && test -z \"${GLIBCXX_C_HEADERS_EXTRA_FALSE}\"; then\n+  { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_C_HEADERS_EXTRA\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&5\n+echo \"$as_me: error: conditional \\\"GLIBCXX_C_HEADERS_EXTRA\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n if test -z \"${GLIBCXX_BUILD_DEBUG_TRUE}\" && test -z \"${GLIBCXX_BUILD_DEBUG_FALSE}\"; then\n   { { echo \"$as_me:$LINENO: error: conditional \\\"GLIBCXX_BUILD_DEBUG\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" >&5\n@@ -85732,8 +85779,12 @@ s,@GLIBCXX_C_HEADERS_C_TRUE@,$GLIBCXX_C_HEADERS_C_TRUE,;t t\n s,@GLIBCXX_C_HEADERS_C_FALSE@,$GLIBCXX_C_HEADERS_C_FALSE,;t t\n s,@GLIBCXX_C_HEADERS_C_STD_TRUE@,$GLIBCXX_C_HEADERS_C_STD_TRUE,;t t\n s,@GLIBCXX_C_HEADERS_C_STD_FALSE@,$GLIBCXX_C_HEADERS_C_STD_FALSE,;t t\n+s,@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@,$GLIBCXX_C_HEADERS_C_GLOBAL_TRUE,;t t\n+s,@GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@,$GLIBCXX_C_HEADERS_C_GLOBAL_FALSE,;t t\n s,@GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@,$GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE,;t t\n s,@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@,$GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE,;t t\n+s,@GLIBCXX_C_HEADERS_EXTRA_TRUE@,$GLIBCXX_C_HEADERS_EXTRA_TRUE,;t t\n+s,@GLIBCXX_C_HEADERS_EXTRA_FALSE@,$GLIBCXX_C_HEADERS_EXTRA_FALSE,;t t\n s,@DEBUG_FLAGS@,$DEBUG_FLAGS,;t t\n s,@GLIBCXX_BUILD_DEBUG_TRUE@,$GLIBCXX_BUILD_DEBUG_TRUE,;t t\n s,@GLIBCXX_BUILD_DEBUG_FALSE@,$GLIBCXX_BUILD_DEBUG_FALSE,;t t"}, {"sha": "4a0b4dbcbf75f8f091a0d98d3cad4d037574d948", "filename": "libstdc++-v3/configure.host", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.host?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -64,7 +64,7 @@\n # Try to guess a default cpu_include_dir based on the name of the CPU.  We\n # cannot do this for os_include_dir; there are too many portable operating\n # systems out there.  :-)\n-c_model=c_std\n+c_model=c_global\n c_compatibility=no\n atomic_word_dir=cpu/generic\n atomicity_dir=\"cpu/generic\""}, {"sha": "215a1ab3b81e96d3cf5c1cb74395a834677aa0b5", "filename": "libstdc++-v3/docs/html/configopts.html", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fconfigopts.html?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -143,9 +143,11 @@ <h1 class=\"centered\"><a name=\"top\">Interesting <code>configure</code>\n  </dd>\n \n  <dt><code>--enable-cheaders=OPTION  </code></dt>\n- <dd><p>This allows the user to define what kind of C headers are\n-        used.  Options are c and c_std.  These correspond to the source\n-\tdirectory's include/c and include/c_std.  The default is c_std.\n+ <dd><p>This allows the user to define the approach taken for C header\n+        compatibility with C++. Options are c, c_std, and c_global.\n+        These correspond to the source directory's include/c,\n+        include/c_std, and include/c_global, and may also include\n+        include/c_compatibility.  The default is c_global.\n      </p>\n  </dd>\n "}, {"sha": "0d24903ab885f3fc4ff29274be7b68298978f3b8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -29,7 +29,9 @@ std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/array \\\n \t${std_srcdir}/bitset \\\n+\t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/complex \\\n \t${std_srcdir}/deque \\\n \t${std_srcdir}/fstream \\\n@@ -48,12 +50,18 @@ std_headers = \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\\n+\t${std_srcdir}/random \\\n+\t${std_srcdir}/regex \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/tuple \\\n+\t${std_srcdir}/type_traits \\\n+\t${std_srcdir}/unordered_map \\\n+\t${std_srcdir}/unordered_set \\\n \t${std_srcdir}/utility \\\n \t${std_srcdir}/valarray \\\n \t${std_srcdir}/vector\n@@ -164,7 +172,6 @@ backward_headers = \\\n \t${backward_srcdir}/strstream \\\n \t${backward_srcdir}/backward_warning.h\n \n-\n pb_srcdir = ${glibcxx_srcdir}/include/ext/pb_ds\n pb_builddir = ./ext/pb_ds\n \n@@ -528,6 +535,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/ccomplex \\\n \t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/cfloat \\\n@@ -536,6 +544,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cmath \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n+\t${tr1_srcdir}/complex.h \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdbool \\\n \t${tr1_srcdir}/cstdint \\\n@@ -562,6 +571,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n+\t${tr1_srcdir}/regex \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdbool.h \\\n@@ -581,51 +591,76 @@ tr1_headers = \\\n \t${tr1_srcdir}/wctype.h\n \n \n-# This is the common subset of files that all three \"C\" header models use.\n+# This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)\n c_base_builddir = .\n c_base_headers = \\\n \t${c_base_srcdir}/cassert \\\n+\t${c_base_srcdir}/ccomplex \\\n \t${c_base_srcdir}/cctype \\\n \t${c_base_srcdir}/cerrno \\\n+\t${c_base_srcdir}/cfenv \\\n \t${c_base_srcdir}/cfloat \\\n+\t${c_base_srcdir}/cinttypes \\\n \t${c_base_srcdir}/ciso646 \\\n \t${c_base_srcdir}/climits \\\n \t${c_base_srcdir}/clocale \\\n \t${c_base_srcdir}/cmath \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n+\t${c_base_srcdir}/cstdint \\\n \t${c_base_srcdir}/cstdio \\\n \t${c_base_srcdir}/cstdlib \\\n \t${c_base_srcdir}/cstring \\\n+\t${c_base_srcdir}/ctgmath \\\n \t${c_base_srcdir}/ctime \\\n \t${c_base_srcdir}/cwchar \\\n \t${c_base_srcdir}/cwctype\n \n # \"C\" compatibility headers.\n c_compatibility_srcdir = ${glibcxx_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n+\n+if GLIBCXX_C_HEADERS_C_STD\n+c_compatibility_headers = \n+endif\n+\n+if GLIBCXX_C_HEADERS_C_GLOBAL\n+c_compatibility_headers = \\\n+\t${c_compatibility_srcdir}/complex.h \\\n+\t${c_compatibility_srcdir}/tgmath.h \n+endif\n+\n+if GLIBCXX_C_HEADERS_C\n c_compatibility_headers = \\\n \t${c_compatibility_srcdir}/assert.h \\\n+\t${c_compatibility_srcdir}/complex.h \\\n \t${c_compatibility_srcdir}/ctype.h \\\n \t${c_compatibility_srcdir}/errno.h \\\n+\t${c_compatibility_srcdir}/fenv.h \\\n \t${c_compatibility_srcdir}/float.h \\\n+\t${c_compatibility_srcdir}/inttypes.h \\\n \t${c_compatibility_srcdir}/iso646.h \\\n \t${c_compatibility_srcdir}/limits.h \\\n \t${c_compatibility_srcdir}/locale.h \\\n \t${c_compatibility_srcdir}/math.h \\\n \t${c_compatibility_srcdir}/setjmp.h \\\n \t${c_compatibility_srcdir}/signal.h \\\n \t${c_compatibility_srcdir}/stdarg.h \\\n+\t${c_compatibility_srcdir}/stdbool.h \\\n \t${c_compatibility_srcdir}/stddef.h \\\n+\t${c_compatibility_srcdir}/stdint.h \\\n \t${c_compatibility_srcdir}/stdio.h \\\n \t${c_compatibility_srcdir}/stdlib.h \\\n \t${c_compatibility_srcdir}/string.h \\\n+\t${c_compatibility_srcdir}/tgmath.h \\\n \t${c_compatibility_srcdir}/time.h \\\n \t${c_compatibility_srcdir}/wchar.h \\\n \t${c_compatibility_srcdir}/wctype.h\n+endif\n \n # Debug mode headers\n debug_srcdir = ${glibcxx_srcdir}/include/debug\n@@ -660,7 +695,7 @@ debug_headers = \\\n # Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n-if GLIBCXX_C_HEADERS_C_STD\n+if GLIBCXX_C_HEADERS_EXTRA\n c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n else\n c_base_headers_extra =\n@@ -962,7 +997,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n-\techo \"#endif // _CXXCONFIG_\" >> $@\n+\techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@\n \n # Host includes for threads\n uppercase = [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]"}, {"sha": "fb3ca7dada610b1dfe74a4bf904157b5e719b713", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 55, "deletions": 23, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -124,9 +124,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n@@ -259,7 +263,9 @@ std_srcdir = ${glibcxx_srcdir}/include/std\n std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n+\t${std_srcdir}/array \\\n \t${std_srcdir}/bitset \\\n+\t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/complex \\\n \t${std_srcdir}/deque \\\n \t${std_srcdir}/fstream \\\n@@ -278,12 +284,18 @@ std_headers = \\\n \t${std_srcdir}/numeric \\\n \t${std_srcdir}/ostream \\\n \t${std_srcdir}/queue \\\n+\t${std_srcdir}/random \\\n+\t${std_srcdir}/regex \\\n \t${std_srcdir}/set \\\n \t${std_srcdir}/sstream \\\n \t${std_srcdir}/stack \\\n \t${std_srcdir}/stdexcept \\\n \t${std_srcdir}/streambuf \\\n \t${std_srcdir}/string \\\n+\t${std_srcdir}/tuple \\\n+\t${std_srcdir}/type_traits \\\n+\t${std_srcdir}/unordered_map \\\n+\t${std_srcdir}/unordered_set \\\n \t${std_srcdir}/utility \\\n \t${std_srcdir}/valarray \\\n \t${std_srcdir}/vector\n@@ -753,6 +765,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/ccomplex \\\n \t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/cfloat \\\n@@ -761,6 +774,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cmath \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n+\t${tr1_srcdir}/complex.h \\\n \t${tr1_srcdir}/cstdarg \\\n \t${tr1_srcdir}/cstdbool \\\n \t${tr1_srcdir}/cstdint \\\n@@ -787,6 +801,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/random.tcc \\\n \t${tr1_srcdir}/ref_fwd.h \\\n \t${tr1_srcdir}/ref_wrap_iterate.h \\\n+\t${tr1_srcdir}/regex \\\n \t${tr1_srcdir}/repeat.h \\\n \t${tr1_srcdir}/stdarg.h \\\n \t${tr1_srcdir}/stdbool.h \\\n@@ -806,25 +821,31 @@ tr1_headers = \\\n \t${tr1_srcdir}/wctype.h\n \n \n-# This is the common subset of files that all three \"C\" header models use.\n+# This is the common subset of C++ files that all three \"C\" header models use.\n c_base_srcdir = $(C_INCLUDE_DIR)\n c_base_builddir = .\n c_base_headers = \\\n \t${c_base_srcdir}/cassert \\\n+\t${c_base_srcdir}/ccomplex \\\n \t${c_base_srcdir}/cctype \\\n \t${c_base_srcdir}/cerrno \\\n+\t${c_base_srcdir}/cfenv \\\n \t${c_base_srcdir}/cfloat \\\n+\t${c_base_srcdir}/cinttypes \\\n \t${c_base_srcdir}/ciso646 \\\n \t${c_base_srcdir}/climits \\\n \t${c_base_srcdir}/clocale \\\n \t${c_base_srcdir}/cmath \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n+\t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n+\t${c_base_srcdir}/cstdint \\\n \t${c_base_srcdir}/cstdio \\\n \t${c_base_srcdir}/cstdlib \\\n \t${c_base_srcdir}/cstring \\\n+\t${c_base_srcdir}/ctgmath \\\n \t${c_base_srcdir}/ctime \\\n \t${c_base_srcdir}/cwchar \\\n \t${c_base_srcdir}/cwctype\n@@ -833,25 +854,36 @@ c_base_headers = \\\n # \"C\" compatibility headers.\n c_compatibility_srcdir = ${glibcxx_srcdir}/include/c_compatibility\n c_compatibility_builddir = .\n-c_compatibility_headers = \\\n-\t${c_compatibility_srcdir}/assert.h \\\n-\t${c_compatibility_srcdir}/ctype.h \\\n-\t${c_compatibility_srcdir}/errno.h \\\n-\t${c_compatibility_srcdir}/float.h \\\n-\t${c_compatibility_srcdir}/iso646.h \\\n-\t${c_compatibility_srcdir}/limits.h \\\n-\t${c_compatibility_srcdir}/locale.h \\\n-\t${c_compatibility_srcdir}/math.h \\\n-\t${c_compatibility_srcdir}/setjmp.h \\\n-\t${c_compatibility_srcdir}/signal.h \\\n-\t${c_compatibility_srcdir}/stdarg.h \\\n-\t${c_compatibility_srcdir}/stddef.h \\\n-\t${c_compatibility_srcdir}/stdio.h \\\n-\t${c_compatibility_srcdir}/stdlib.h \\\n-\t${c_compatibility_srcdir}/string.h \\\n-\t${c_compatibility_srcdir}/time.h \\\n-\t${c_compatibility_srcdir}/wchar.h \\\n-\t${c_compatibility_srcdir}/wctype.h\n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@c_compatibility_headers = \\\n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/complex.h \\\n+@GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\t${c_compatibility_srcdir}/tgmath.h \n+\n+@GLIBCXX_C_HEADERS_C_STD_TRUE@c_compatibility_headers = \n+@GLIBCXX_C_HEADERS_C_TRUE@c_compatibility_headers = \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/assert.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/complex.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/ctype.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/errno.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/fenv.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/float.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/inttypes.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/iso646.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/limits.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/locale.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/math.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/setjmp.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/signal.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stdarg.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stdbool.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stddef.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stdint.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stdio.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/stdlib.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/string.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/tgmath.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/time.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/wchar.h \\\n+@GLIBCXX_C_HEADERS_C_TRUE@\t${c_compatibility_srcdir}/wctype.h\n \n \n # Debug mode headers\n@@ -884,12 +916,12 @@ debug_headers = \\\n \t${debug_srcdir}/string \\\n \t${debug_srcdir}/vector\n \n-@GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n+@GLIBCXX_C_HEADERS_EXTRA_FALSE@c_base_headers_extra = \n \n # Some of the different \"C\" header models need extra files.\n # Some \"C\" header schemes require the \"C\" compatibility headers.\n # For --enable-cheaders=c_std\n-@GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n+@GLIBCXX_C_HEADERS_EXTRA_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n@@ -1342,7 +1374,7 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e '/[ \t]_GLIBCXX_LONG_DOUBLE_COMPAT[ \t]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\\n \techo \"\" >> $@ ;\\\n-\techo \"#endif // _CXXCONFIG_\" >> $@\n+\techo \"#endif // _GLIBCXX_CXX_CONFIG_H\" >> $@\n \n ${host_builddir}/gthr.h: ${toplevel_srcdir}/gcc/gthr.h stamp-${host_alias}\n \tsed -e '/^#pragma/b' \\"}, {"sha": "b11d27a1640d2948b6ddf3f520599ce664ccf0f1", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -45,20 +45,36 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCXX__ \n \n+// Macro used to indicate that the native \"C\" includes, when compiled\n+// as \"C++\", have declarations in namespace std and not the global\n+// namespace. Note, this is unrelated to possible \"C\" compatibility\n+// includes that inject C90/C99 names into the global namespace.\n+// XXX May not be necessary\n+#if __cplusplus == 199711L\n+# define _GLIBCXX_NAMESPACE_C 1\n+#endif\n+\n // Macros for visibility.\n #define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n \n #if _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY\n-#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))\n+# define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))\n #else\n-#define _GLIBCXX_VISIBILITY(V) \n+# define _GLIBCXX_VISIBILITY(V) \n #endif\n \n // Macros for controlling various namespace association schemes and modes.\n+// _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n+// _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION \n+// _GLIBCXX_NAMESPACE_ASSOCIATION_CXX200x\n #ifdef _GLIBCXX_DEBUG\n # define _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG 1\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# define _GLIBCXX_NAMESPACE_ASSOCIATION_CXX0X 1\n+#endif\n+\n #define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION \n \n // Macros for namespace scope.\n@@ -91,7 +107,6 @@ namespace std\n   using namespace _6 __attribute__ ((strong));\n }\n \n-// In addition, other supported namespace configurations.\n namespace __gnu_cxx \n { \n   namespace _6 { }\n@@ -140,7 +155,19 @@ namespace __gnu_cxx\n #endif\n #endif\n \n-/* Define if compatibility should be provided for -mlong-double-64. */\n+// Namespace associations for C++0x, TR1 in std.\n+#if _GLIBCXX_NAMESPACE_ASSOCIATION_CXX0X\n+namespace std\n+{ \n+  namespace __cxx200x { }\n+  using namespace __cxx200x __attribute__ ((strong)); \n+}\n+# define _GLIBCXX_TR1 __cxx200x\n+#else\n+# define _GLIBCXX_TR1 tr1\n+#endif\n+\n+// Define if compatibility should be provided for -mlong-double-64.\n #undef _GLIBCXX_LONG_DOUBLE_COMPAT\n \n // XXX GLIBCXX_ABI Deprecated"}, {"sha": "7a0241505cf01457a446d6951f6e3186563f267e", "filename": "libstdc++-v3/include/c_compatibility/assert.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fassert.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,4 +27,8 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file assert.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n #include <cassert>"}, {"sha": "88acb1eebee361a3fed4c44ed50f7f616669bf1d", "filename": "libstdc++-v3/include/c_compatibility/complex.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fcomplex.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file complex.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <ccomplex>\n+\n+#ifndef _GLIBCXX_COMPLEX_H\n+#define _GLIBCXX_COMPLEX_H 1\n+\n+#endif"}, {"sha": "696621bec8e1563e8710e91c2e9b2a49ee9019c9", "filename": "libstdc++-v3/include/c_compatibility/ctype.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fctype.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_CTYPE_H\n-#define _GLIBCXX_CTYPE_H 1\n+/** @file ctype.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cctype>\n \n+#ifndef _GLIBCXX_CTYPE_H\n+#define _GLIBCXX_CTYPE_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::isalnum;\n using std::isalpha;\n using std::iscntrl;\n@@ -45,5 +50,6 @@ using std::isupper;\n using std::isxdigit;\n using std::tolower;\n using std::toupper;\n+#endif\n \n #endif"}, {"sha": "6d48a3f2686b3cddaffa612367d205dde598d40f", "filename": "libstdc++-v3/include/c_compatibility/errno.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ferrno.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,9 +27,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ERRNO_H\n-#define _GLIBCXX_ERRNO_H 1\n+/** @file errno.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cerrno>\n \n+#ifndef _GLIBCXX_ERRNO_H\n+#define _GLIBCXX_ERRNO_H 1\n+\n #endif"}, {"sha": "c3eb4b4abced6e9e4f873acc00de987cf374a4c7", "filename": "libstdc++-v3/include/c_compatibility/fenv.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffenv.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file fenv.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <cfenv>\n+\n+#ifndef _GLIBCXX_FENV_H\n+#define _GLIBCXX_FENV_H 1\n+\n+#endif"}, {"sha": "f2ec19a52fbd581534e811a4d36ccf538073e98d", "filename": "libstdc++-v3/include/c_compatibility/float.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ffloat.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,9 +27,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_FLOAT_H\n-#define _GLIBCXX_FLOAT_H 1\n+/** @file float.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cfloat>\n \n+#ifndef _GLIBCXX_FLOAT_H\n+#define _GLIBCXX_FLOAT_H 1\n+\n #endif"}, {"sha": "d6eebdf6606ed541f669b082933cf54c8a94b652", "filename": "libstdc++-v3/include/c_compatibility/inttypes.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Finttypes.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file inttypes.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <cinttypes>\n+\n+#ifndef _GLIBCXX_INTTYPES_H\n+#define _GLIBCXX_INTTYPES_H 1\n+\n+#endif"}, {"sha": "eb379c24329686e2af4daa00984276c07574b991", "filename": "libstdc++-v3/include/c_compatibility/iso646.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fiso646.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,9 +27,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_ISO646_H\n-#define _GLIBCXX_ISO646_H 1\n+/** @file iso646.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <ciso646>\n \n+#ifndef _GLIBCXX_ISO646_H\n+#define _GLIBCXX_ISO646_H 1\n+\n #endif"}, {"sha": "6a20e592ebb552d9decd35fc98401aa3fc3d4f8a", "filename": "libstdc++-v3/include/c_compatibility/limits.h", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flimits.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,9 +27,13 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_LIMITS_H\n-#define _GLIBCXX_LIMITS_H 1\n+/** @file limits.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <climits>\n \n+#ifndef _GLIBCXX_LIMITS_H\n+#define _GLIBCXX_LIMITS_H 1\n+\n #endif"}, {"sha": "e444460a806acb4d7352db753d63570ecabccee4", "filename": "libstdc++-v3/include/c_compatibility/locale.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Flocale.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,13 +27,19 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_LOCALE_H\n-#define _GLIBCXX_LOCALE_H 1\n+/** @file locale.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <clocale>\n \n+#ifndef _GLIBCXX_LOCALE_H\n+#define _GLIBCXX_LOCALE_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::lconv;\n using std::setlocale;\n using std::localeconv;\n+#endif\n \n #endif"}, {"sha": "69dc82ac5141def366533db01867416009dcdaa4", "filename": "libstdc++-v3/include/c_compatibility/math.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fmath.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_MATH_H\n-#define _GLIBCXX_MATH_H 1\n+/** @file math.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cmath>\n \n+#ifndef _GLIBCXX_MATH_H\n+#define _GLIBCXX_MATH_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::abs;\n using std::acos;\n using std::asin;\n@@ -71,4 +76,6 @@ using std::islessgreater;\n using std::isunordered;\n #endif\n \n+#endif // __GXX_EXPERIMENTAL_CXX0X__\n+\n #endif"}, {"sha": "c9941325298616c5fbe283fa31c1630c76d9eca6", "filename": "libstdc++-v3/include/c_compatibility/setjmp.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsetjmp.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,12 +27,18 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_SETJMP_H\n-#define _GLIBCXX_SETJMP_H 1\n+/** @file setjmp.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <csetjmp>\n \n+#ifndef _GLIBCXX_SETJMP_H\n+#define _GLIBCXX_SETJMP_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::jmp_buf;\n using std::longjmp;\n+#endif\n \n #endif"}, {"sha": "4e081335b4e94d5a98b182d0021f36f7bb2d048f", "filename": "libstdc++-v3/include/c_compatibility/signal.h", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fsignal.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,14 +27,19 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_SIGNAL_H\n-#define _GLIBCXX_SIGNAL_H 1\n+/** @file signal.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <csignal>\n \n-using std::sig_atomic_t;\n+#ifndef _GLIBCXX_SIGNAL_H\n+#define _GLIBCXX_SIGNAL_H 1\n \n+#ifdef _GLIBCXX_NAMESPACE_C\n+using std::sig_atomic_t;\n using std::raise;\n using std::signal;\n+#endif\n \n #endif"}, {"sha": "2a1df4983fcf52c31e54cd25f2978f1736488f7f", "filename": "libstdc++-v3/include/c_compatibility/stdarg.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdarg.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,17 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_STDARG_H\n-#define _GLIBCXX_STDARG_H 1\n+/** @file stdarg.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cstdarg>\n \n+#ifndef _GLIBCXX_STDARG_H\n+#define _GLIBCXX_STDARG_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::va_list;\n+#endif\n \n #endif"}, {"sha": "a825d4fd3659a1cfe184e5c7c536384bd81cbaa6", "filename": "libstdc++-v3/include/c_compatibility/stdbool.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdbool.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file stdbool.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <cstdbool>\n+\n+#ifndef _GLIBCXX_STDBOOL_H\n+#define _GLIBCXX_STDBOOL_H 1\n+\n+#endif"}, {"sha": "a6efd4048cfc0f841e08319181dae476221d0885", "filename": "libstdc++-v3/include/c_compatibility/stddef.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstddef.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,12 +27,18 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_STDDEF_H\n-#define _GLIBCXX_STDDEF_H 1\n+/** @file stddef.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cstddef>\n \n+#ifndef _GLIBCXX_STDDEF_H\n+#define _GLIBCXX_STDDEF_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::size_t;\n using std::ptrdiff_t;\n+#endif\n \n #endif"}, {"sha": "359986f8adea813a9d5426c8e190a8c2b731a4c8", "filename": "libstdc++-v3/include/c_compatibility/stdint.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdint.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file stdint.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <cstdint>\n+\n+#ifndef _GLIBCXX_STDINT_H\n+#define _GLIBCXX_STDINT_H 1\n+\n+#endif"}, {"sha": "ac64d62f3b408f479003527deba78f432acf7f57", "filename": "libstdc++-v3/include/c_compatibility/stdio.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdio.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_STDIO_H\n-#define _GLIBCXX_STDIO_H 1\n+/** @file stdio.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cstdio>\n \n+#ifndef _GLIBCXX_STDIO_H\n+#define _GLIBCXX_STDIO_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::FILE;\n using std::fpos_t;\n \n@@ -81,5 +86,6 @@ using std::clearerr;\n using std::feof;\n using std::ferror;\n using std::perror;\n+#endif\n \n #endif"}, {"sha": "f6eb56ba073209578f62c6a0cd77cd7c9e5a2e79", "filename": "libstdc++-v3/include/c_compatibility/stdlib.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdlib.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_STDLIB_H\n-#define _GLIBCXX_STDLIB_H 1\n+/** @file stdlib.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cstdlib>\n \n+#ifndef _GLIBCXX_STDLIB_H\n+#define _GLIBCXX_STDLIB_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::div_t;\n using std::ldiv_t;\n \n@@ -63,5 +68,6 @@ using std::strtoul;\n using std::system;\n using std::wcstombs;\n using std::wctomb;\n+#endif\n \n #endif"}, {"sha": "d60b787e2069eff521f8b0c62469b67810d1af3c", "filename": "libstdc++-v3/include/c_compatibility/string.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstring.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_STRING_H\n-#define _GLIBCXX_STRING_H 1\n+/** @file string.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cstring>\n \n+#ifndef _GLIBCXX_STRING_H\n+#define _GLIBCXX_STRING_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::memcpy;\n using std::memmove;\n using std::strcpy;\n@@ -54,5 +59,6 @@ using std::strtok;\n using std::memset;\n using std::strerror;\n using std::strlen;\n+#endif\n \n #endif"}, {"sha": "b2ce8b5432824e39c8ac5a437e2dedbf815bcae3", "filename": "libstdc++-v3/include/c_compatibility/tgmath.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftgmath.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tgmath.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <ctgmath>\n+\n+#ifndef _GLIBCXX_TGMATH_H\n+#define _GLIBCXX_TGMATH_H 1\n+\n+#endif"}, {"sha": "0c08945025f0dce8a872030001dd98723efb93bb", "filename": "libstdc++-v3/include/c_compatibility/time.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Ftime.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_TIME_H\n-#define _GLIBCXX_TIME_H 1\n+/** @file time.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <ctime>\n \n+#ifndef _GLIBCXX_TIME_H\n+#define _GLIBCXX_TIME_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n // Get rid of those macros defined in <time.h> in lieu of real functions.\n #undef clock\n #undef difftime\n@@ -56,5 +61,6 @@ using std::ctime;\n using std::gmtime;\n using std::localtime;\n using std::strftime;\n+#endif\n \n #endif"}, {"sha": "09460d64e31b0e9489ac8ddf0b096f91c4f7d301", "filename": "libstdc++-v3/include/c_compatibility/wchar.h", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwchar.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_WCHAR_H\n-#define _GLIBCXX_WCHAR_H 1\n+/** @file wchar.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cwchar>\n \n+#ifndef _GLIBCXX_WCHAR_H\n+#define _GLIBCXX_WCHAR_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::mbstate_t;\n \n #if _GLIBCXX_USE_WCHAR_T\n@@ -111,4 +116,6 @@ using std::wcstoull;\n \n #endif  //_GLIBCXX_USE_WCHAR_T\n \n+#endif \n+\n #endif"}, {"sha": "d50f6ece65859e30a7723129a8ae3598bef954cc", "filename": "libstdc++-v3/include/c_compatibility/wctype.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fwctype.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- compatibility header.\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -27,11 +27,16 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_CWCTYPE_H\n-#define _GLIBCXX_CWCTYPE_H 1\n+/** @file wctype.h\n+ *  This is a Standard C++ Library header.\n+ */\n \n #include <cwctype>\n \n+#ifndef _GLIBCXX_CWCTYPE_H\n+#define _GLIBCXX_CWCTYPE_H 1\n+\n+#ifdef _GLIBCXX_NAMESPACE_C\n using std::wctype_t;\n using std::wctrans_t;\n using std::iswalpha;\n@@ -51,5 +56,6 @@ using std::towlower;\n using std::towupper;\n using std::wctrans;\n using std::wctype;\n+#endif\n \n #endif"}, {"sha": "6322b4fb360fd1aafcfb8072cc6ba824d0ee2f63", "filename": "libstdc++-v3/include/c_global/cassert", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcassert?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,49 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file cassert\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c assert.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 19.2  Assertions\n+//\n+\n+// No include guards on this header...\n+\n+#pragma GCC system_header\n+\n+#include_next <assert.h>"}, {"sha": "1d080388f438f6890a7abf99a11c03bbd0793ba1", "filename": "libstdc++-v3/include/c_global/ccomplex", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fccomplex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <ccomplex> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/ccomplex\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CCOMPLEX\n+#define _GLIBCXX_CCOMPLEX 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/ccomplex>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "05436e4c1d95af7374b1d257a1fe263beba739a0", "filename": "libstdc++-v3/include/c_global/cctype", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcctype?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,90 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cctype\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c ctype.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: <ccytpe>\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <ctype.h>\n+\n+#ifndef _GLIBCXX_CCTYPE\n+#define _GLIBCXX_CCTYPE 1\n+\n+// Get rid of those macros defined in <ctype.h> in lieu of real functions.\n+#undef isalnum\n+#undef isalpha\n+#undef iscntrl\n+#undef isdigit\n+#undef isgraph\n+#undef islower\n+#undef isprint\n+#undef ispunct\n+#undef isspace\n+#undef isupper\n+#undef isxdigit\n+#undef tolower\n+#undef toupper\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::isalnum;\n+  using ::isalpha;\n+  using ::iscntrl;\n+  using ::isdigit;\n+  using ::isgraph;\n+  using ::islower;\n+  using ::isprint;\n+  using ::ispunct;\n+  using ::isspace;\n+  using ::isupper;\n+  using ::isxdigit;\n+  using ::tolower;\n+  using ::toupper;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cctype>\n+#endif\n+\n+#endif"}, {"sha": "b7673668aaf2bca45e8c43c5caa8e1d4ef016999", "filename": "libstdc++-v3/include/c_global/cerrno", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcerrno?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,57 @@\n+// The -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file cerrno\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c errno.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 19.3  Error numbers\n+//\n+\n+#pragma GCC system_header\n+\n+#include_next <errno.h>\n+\n+#ifndef _GLIBCXX_CERRNO\n+#define _GLIBCXX_CERRNO 1\n+\n+// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n+#ifndef errno\n+#define errno errno\n+#endif\n+\n+#endif"}, {"sha": "f11c531b2d725a70d88c5c3712085791d2e6796d", "filename": "libstdc++-v3/include/c_global/cfenv", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfenv?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <cfenv> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cfenv\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CFENV\n+#define _GLIBCXX_CFENV 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cfenv>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "9d8c039587aa5286e773ce9ffcd6aacf0ba137c5", "filename": "libstdc++-v3/include/c_global/cfloat", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcfloat?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,56 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cfloat\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c float.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include_next <float.h>\n+\n+#ifndef _GLIBCXX_CFLOAT\n+#define _GLIBCXX_CFLOAT 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cfloat>\n+#endif\n+\n+#endif"}, {"sha": "d42c7a3f9e4499068482c51b23863198e00265fd", "filename": "libstdc++-v3/include/c_global/cinttypes", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcinttypes?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <cinttypes> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cinttypes\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CINTTYPES\n+#define _GLIBCXX_CINTTYPES 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cinttypes>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "414a706abbe2042bb18fe6a0f8928cce3fbc75e7", "filename": "libstdc++-v3/include/c_global/ciso646", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fciso646?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,38 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ciso646\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c iso646.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */"}, {"sha": "396bbcbd49b070ef9dcb21ca8d6c58f8ba891ea3", "filename": "libstdc++-v3/include/c_global/climits", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclimits?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,56 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/climits\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c limits.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include_next <limits.h>\n+\n+#ifndef _GLIBCXX_CLIMITS\n+#define _GLIBCXX_CLIMITS 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/climits>\n+#endif\n+\n+#endif"}, {"sha": "7feac30975e518e71c50d93f31edda30dcf52949", "filename": "libstdc++-v3/include/c_global/clocale", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fclocale?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,65 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file clocale\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c locale.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <locale.h>\n+\n+#ifndef _GLIBCXX_CLOCALE\n+#define _GLIBCXX_CLOCALE 1\n+\n+// Get rid of those macros defined in <locale.h> in lieu of real functions.\n+#undef setlocale\n+#undef localeconv\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::lconv;\n+  using ::setlocale;\n+  using ::localeconv;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "ab21c9acc06a5bf666e6fedc5d428d0206e5f054", "filename": "libstdc++-v3/include/c_global/cmath", "status": "added", "additions": 603, "deletions": 0, "changes": 603, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,603 @@\n+// -*- C++ -*- C forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cmath\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c math.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 26.5  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <bits/cpp_type_traits.h>\n+#include <ext/type_traits.h>\n+#include_next <math.h>\n+\n+#ifndef _GLIBCXX_CMATH\n+#define _GLIBCXX_CMATH 1\n+\n+// Get rid of those macros defined in <math.h> in lieu of real functions.\n+#undef abs\n+#undef div\n+#undef acos\n+#undef asin\n+#undef atan\n+#undef atan2\n+#undef ceil\n+#undef cos\n+#undef cosh\n+#undef exp\n+#undef fabs\n+#undef floor\n+#undef fmod\n+#undef frexp\n+#undef ldexp\n+#undef log\n+#undef log10\n+#undef modf\n+#undef pow\n+#undef sin\n+#undef sinh\n+#undef sqrt\n+#undef tan\n+#undef tanh\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  // Forward declaration of a helper function.  This really should be\n+  // an `exported' forward declaration.\n+  template<typename _Tp> _Tp __cmath_power(_Tp, unsigned int);\n+\n+  inline double\n+  abs(double __x)\n+  { return __builtin_fabs(__x); }\n+\n+  inline float\n+  abs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline long double\n+  abs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+\n+  using ::acos;\n+\n+  inline float\n+  acos(float __x)\n+  { return __builtin_acosf(__x); }\n+\n+  inline long double\n+  acos(long double __x)\n+  { return __builtin_acosl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    acos(_Tp __x)\n+    { return __builtin_acos(__x); }\n+\n+  using ::asin;\n+\n+  inline float\n+  asin(float __x)\n+  { return __builtin_asinf(__x); }\n+\n+  inline long double\n+  asin(long double __x)\n+  { return __builtin_asinl(__x); }\n+\n+  template<typename _Tp>\n+  inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,\n+\t\t\t\t\t double>::__type\n+    asin(_Tp __x)\n+    { return __builtin_asin(__x); }\n+\n+  using ::atan;\n+\n+  inline float\n+  atan(float __x)\n+  { return __builtin_atanf(__x); }\n+\n+  inline long double\n+  atan(long double __x)\n+  { return __builtin_atanl(__x); }\n+\n+  template<typename _Tp>\n+  inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t double>::__type\n+    atan(_Tp __x)\n+    { return __builtin_atan(__x); }\n+\n+  using ::atan2;\n+\n+  inline float\n+  atan2(float __y, float __x)\n+  { return __builtin_atan2f(__y, __x); }\n+\n+  inline long double\n+  atan2(long double __y, long double __x)\n+  { return __builtin_atan2l(__y, __x); }\n+\n+  template<typename _Tp, typename _Up>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value\n+    \t\t\t\t\t   && __is_integer<_Up>::__value, \n+\t\t\t\t\t   double>::__type\n+    atan2(_Tp __y, _Up __x)\n+    { return __builtin_atan2(__y, __x); }\n+\n+  using ::ceil;\n+\n+  inline float\n+  ceil(float __x)\n+  { return __builtin_ceilf(__x); }\n+\n+  inline long double\n+  ceil(long double __x)\n+  { return __builtin_ceill(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    ceil(_Tp __x)\n+    { return __builtin_ceil(__x); }\n+\n+  using ::cos;\n+\n+  inline float\n+  cos(float __x)\n+  { return __builtin_cosf(__x); }\n+\n+  inline long double\n+  cos(long double __x)\n+  { return __builtin_cosl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    cos(_Tp __x)\n+    { return __builtin_cos(__x); }\n+\n+  using ::cosh;\n+\n+  inline float\n+  cosh(float __x)\n+  { return __builtin_coshf(__x); }\n+\n+  inline long double\n+  cosh(long double __x)\n+  { return __builtin_coshl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    cosh(_Tp __x)\n+    { return __builtin_cosh(__x); }\n+\n+  using ::exp;\n+\n+  inline float\n+  exp(float __x)\n+  { return __builtin_expf(__x); }\n+\n+  inline long double\n+  exp(long double __x)\n+  { return __builtin_expl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    exp(_Tp __x)\n+    { return __builtin_exp(__x); }\n+\n+  using ::fabs;\n+\n+  inline float\n+  fabs(float __x)\n+  { return __builtin_fabsf(__x); }\n+\n+  inline long double\n+  fabs(long double __x)\n+  { return __builtin_fabsl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    fabs(_Tp __x)\n+    { return __builtin_fabs(__x); }\n+\n+  using ::floor;\n+\n+  inline float\n+  floor(float __x)\n+  { return __builtin_floorf(__x); }\n+\n+  inline long double\n+  floor(long double __x)\n+  { return __builtin_floorl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    floor(_Tp __x)\n+    { return __builtin_floor(__x); }\n+\n+  using ::fmod;\n+\n+  inline float\n+  fmod(float __x, float __y)\n+  { return __builtin_fmodf(__x, __y); }\n+\n+  inline long double\n+  fmod(long double __x, long double __y)\n+  { return __builtin_fmodl(__x, __y); }\n+\n+  using ::frexp;\n+\n+  inline float\n+  frexp(float __x, int* __exp)\n+  { return __builtin_frexpf(__x, __exp); }\n+\n+  inline long double\n+  frexp(long double __x, int* __exp)\n+  { return __builtin_frexpl(__x, __exp); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    frexp(_Tp __x, int* __exp)\n+    { return __builtin_frexp(__x, __exp); }\n+\n+  using ::ldexp;\n+\n+  inline float\n+  ldexp(float __x, int __exp)\n+  { return __builtin_ldexpf(__x, __exp); }\n+\n+  inline long double\n+  ldexp(long double __x, int __exp)\n+  { return __builtin_ldexpl(__x, __exp); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+  ldexp(_Tp __x, int __exp)\n+  { return __builtin_ldexp(__x, __exp); }\n+\n+  using ::log;\n+\n+  inline float\n+  log(float __x)\n+  { return __builtin_logf(__x); }\n+\n+  inline long double\n+  log(long double __x)\n+  { return __builtin_logl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    log(_Tp __x)\n+    { return __builtin_log(__x); }\n+\n+  using ::log10;\n+\n+  inline float\n+  log10(float __x)\n+  { return __builtin_log10f(__x); }\n+\n+  inline long double\n+  log10(long double __x)\n+  { return __builtin_log10l(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    log10(_Tp __x)\n+    { return __builtin_log10(__x); }\n+\n+  using ::modf;\n+\n+  inline float\n+  modf(float __x, float* __iptr)\n+  { return __builtin_modff(__x, __iptr); }\n+\n+  inline long double\n+  modf(long double __x, long double* __iptr)\n+  { return __builtin_modfl(__x, __iptr); }\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    __pow_helper(_Tp __x, int __n)\n+    {\n+      return __n < 0\n+        ? _Tp(1)/__cmath_power(__x, -__n)\n+        : __cmath_power(__x, __n);\n+    }\n+\n+  using ::pow;\n+\n+  inline float\n+  pow(float __x, float __y)\n+  { return __builtin_powf(__x, __y); }\n+\n+  inline long double\n+  pow(long double __x, long double __y)\n+  { return __builtin_powl(__x, __y); }\n+\n+  inline double\n+  pow(double __x, int __i)\n+  { return __builtin_powi(__x, __i); }\n+\n+  inline float\n+  pow(float __x, int __n)\n+  { return __builtin_powif(__x, __n); }\n+\n+  inline long double\n+  pow(long double __x, int __n)\n+  { return __builtin_powil(__x, __n); }\n+\n+  using ::sin;\n+\n+  inline float\n+  sin(float __x)\n+  { return __builtin_sinf(__x); }\n+\n+  inline long double\n+  sin(long double __x)\n+  { return __builtin_sinl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    sin(_Tp __x)\n+    { return __builtin_sin(__x); }\n+\n+  using ::sinh;\n+\n+  inline float\n+  sinh(float __x)\n+  { return __builtin_sinhf(__x); }\n+\n+  inline long double\n+  sinh(long double __x)\n+  { return __builtin_sinhl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    sinh(_Tp __x)\n+    { return __builtin_sinh(__x); }\n+\n+  using ::sqrt;\n+\n+  inline float\n+  sqrt(float __x)\n+  { return __builtin_sqrtf(__x); }\n+\n+  inline long double\n+  sqrt(long double __x)\n+  { return __builtin_sqrtl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    sqrt(_Tp __x)\n+    { return __builtin_sqrt(__x); }\n+\n+  using ::tan;\n+\n+  inline float\n+  tan(float __x)\n+  { return __builtin_tanf(__x); }\n+\n+  inline long double\n+  tan(long double __x)\n+  { return __builtin_tanl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    tan(_Tp __x)\n+    { return __builtin_tan(__x); }\n+\n+  using ::tanh;\n+\n+  inline float\n+  tanh(float __x)\n+  { return __builtin_tanhf(__x); }\n+\n+  inline long double\n+  tanh(long double __x)\n+  { return __builtin_tanhl(__x); }\n+\n+  template<typename _Tp>\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n+    tanh(_Tp __x)\n+    { return __builtin_tanh(__x); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#if _GLIBCXX_USE_C99_MATH\n+#if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC\n+// These are possible macros imported from C99-land. For strict\n+// conformance, remove possible C99-injected names from the global\n+// namespace, and sequester them in the __gnu_cxx extension namespace.\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_fpclassify(_Tp __f) { return fpclassify(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isfinite(_Tp __f) { return isfinite(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isinf(_Tp __f) { return isinf(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isnan(_Tp __f) { return isnan(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isnormal(_Tp __f) { return isnormal(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_signbit(_Tp __f) { return signbit(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isgreater(_Tp __f1, _Tp __f2)\n+    { return isgreater(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isgreaterequal(_Tp __f1, _Tp __f2)\n+    { return isgreaterequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_islessequal(_Tp __f1, _Tp __f2)\n+    { return islessequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_islessgreater(_Tp __f1, _Tp __f2)\n+    { return islessgreater(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    __capture_isunordered(_Tp __f1, _Tp __f2)\n+    { return isunordered(__f1, __f2); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+// Only undefine the C99 FP macros, if actually captured for namespace movement\n+#undef fpclassify\n+#undef isfinite\n+#undef isinf\n+#undef isnan\n+#undef isnormal\n+#undef signbit\n+#undef isgreater\n+#undef isgreaterequal\n+#undef isless\n+#undef islessequal\n+#undef islessgreater\n+#undef isunordered\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _Tp>\n+    inline int\n+    fpclassify(_Tp __f) { return ::__gnu_cxx::__capture_fpclassify(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isfinite(_Tp __f) { return ::__gnu_cxx::__capture_isfinite(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isinf(_Tp __f) { return ::__gnu_cxx::__capture_isinf(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isnan(_Tp __f) { return ::__gnu_cxx::__capture_isnan(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isnormal(_Tp __f) { return ::__gnu_cxx::__capture_isnormal(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    signbit(_Tp __f) { return ::__gnu_cxx::__capture_signbit(__f); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isgreater(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_isgreater(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isgreaterequal(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_isgreaterequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isless(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_isless(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    islessequal(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_islessequal(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    islessgreater(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_islessgreater(__f1, __f2); }\n+\n+  template<typename _Tp>\n+    inline int\n+    isunordered(_Tp __f1, _Tp __f2)\n+    { return ::__gnu_cxx::__capture_isunordered(__f1, __f2); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */\n+#endif\n+\n+#ifndef _GLIBCXX_EXPORT_TEMPLATE\n+# include <bits/cmath.tcc>\n+#endif\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cmath>\n+#endif\n+\n+#endif"}, {"sha": "ff875640caf5e6fba934abeeaddfa9e58a202535", "filename": "libstdc++-v3/include/c_global/cmath.tcc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath.tcc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,59 @@\n+// -*- C++ -*- C math library.\n+\n+// Copyright (C) 2000, 2003, 2004, 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// This file was written by Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+/** @file cmath.tcc\n+ *  This is a Standard C++ Library file.\n+ */\n+\n+#ifndef _GLIBCXX_CMATH_TCC\n+#define _GLIBCXX_CMATH_TCC 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _Tp>\n+    inline _Tp\n+    __cmath_power(_Tp __x, unsigned int __n)\n+    {\n+      _Tp __y = __n % 2 ? __x : 1;\n+\n+      while (__n >>= 1)\n+        {\n+          __x = __x * __x;\n+          if (__n % 2)\n+            __y = __y * __x;\n+        }\n+\n+      return __y;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "3c2863475cb37f12f2746836480f2ce1fa321530", "filename": "libstdc++-v3/include/c_global/csetjmp", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsetjmp?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,68 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file csetjmp\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c setjmp.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <setjmp.h>\n+\n+#ifndef _GLIBCXX_CSETJMP\n+#define _GLIBCXX_CSETJMP 1\n+\n+// Get rid of those macros defined in <setjmp.h> in lieu of real functions.\n+#undef longjmp\n+\n+// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n+#ifndef setjmp\n+#define setjmp(env) setjmp (env)\n+#endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::jmp_buf;\n+  using ::longjmp;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "cf89c5abfaa381d6f2586b7456d6fc42b87673dd", "filename": "libstdc++-v3/include/c_global/csignal", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcsignal?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,64 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file csignal\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c signal.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <signal.h>\n+\n+#ifndef _GLIBCXX_CSIGNAL\n+#define _GLIBCXX_CSIGNAL 1\n+\n+// Get rid of those macros defined in <signal.h> in lieu of real functions.\n+#undef raise\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::sig_atomic_t;\n+  using ::signal;\n+  using ::raise;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "9acd24e0578661364f3f942539b5f2e2ee4d2598", "filename": "libstdc++-v3/include/c_global/cstdarg", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdarg?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,68 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cstdarg\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c stdarg.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <stdarg.h>\n+\n+#ifndef _GLIBCXX_CSTDARG\n+#define _GLIBCXX_CSTDARG 1\n+\n+// Adhere to section 17.4.1.2 clause 5 of ISO 14882:1998\n+#ifndef va_end\n+#define va_end(ap) va_end (ap)\n+#endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::va_list;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cstdarg>\n+#endif\n+\n+#endif"}, {"sha": "ac18c74a6c95b4ce54ddca8fad00289d243eda5b", "filename": "libstdc++-v3/include/c_global/cstdbool", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdbool?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <cstdbool> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cstdbool\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CSTDBOOL\n+#define _GLIBCXX_CSTDBOOL 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cstdbool>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "5196aeb9e81483b61d4ff46f764b3b96ec547177", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,60 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file cstddef\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c stddef.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 18.1  Types\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include_next <stddef.h>\n+\n+#ifndef _GLIBCXX_CSTDDEF\n+#define _GLIBCXX_CSTDDEF 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::ptrdiff_t;\n+  using ::size_t;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "ece67a3b784fa98cb2372184ad0ce03531475b8b", "filename": "libstdc++-v3/include/c_global/cstdint", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdint?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <cstdint> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cstdint\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CSTDINT\n+#define _GLIBCXX_CSTDINT 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cstdint>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "ec25b994cc29347cde3ddf73f464a54a5ff63e5b", "filename": "libstdc++-v3/include/c_global/cstdio", "status": "added", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdio?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,194 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cstdio\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c stdio.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 27.8.2  C Library files\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include_next <stdio.h>\n+\n+#ifndef _GLIBCXX_CSTDIO\n+#define _GLIBCXX_CSTDIO 1\n+\n+// Get rid of those macros defined in <stdio.h> in lieu of real functions.\n+#undef clearerr\n+#undef fclose\n+#undef feof\n+#undef ferror\n+#undef fflush\n+#undef fgetc\n+#undef fgetpos\n+#undef fgets\n+#undef fopen\n+#undef fprintf\n+#undef fputc\n+#undef fputs\n+#undef fread\n+#undef freopen\n+#undef fscanf\n+#undef fseek\n+#undef fsetpos\n+#undef ftell\n+#undef fwrite\n+#undef getc\n+#undef getchar\n+#undef gets\n+#undef perror\n+#undef printf\n+#undef putc\n+#undef putchar\n+#undef puts\n+#undef remove\n+#undef rename\n+#undef rewind\n+#undef scanf\n+#undef setbuf\n+#undef setvbuf\n+#undef sprintf\n+#undef sscanf\n+#undef tmpfile\n+#undef tmpnam\n+#undef ungetc\n+#undef vfprintf\n+#undef vprintf\n+#undef vsprintf\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::FILE;\n+  using ::fpos_t;\n+\n+  using ::clearerr;\n+  using ::fclose;\n+  using ::feof;\n+  using ::ferror;\n+  using ::fflush;\n+  using ::fgetc;\n+  using ::fgetpos;\n+  using ::fgets;\n+  using ::fopen;\n+  using ::fprintf;\n+  using ::fputc;\n+  using ::fputs;\n+  using ::fread;\n+  using ::freopen;\n+  using ::fscanf;\n+  using ::fseek;\n+  using ::fsetpos;\n+  using ::ftell;\n+  using ::fwrite;\n+  using ::getc;\n+  using ::getchar;\n+  using ::gets;\n+  using ::perror;\n+  using ::printf;\n+  using ::putc;\n+  using ::putchar;\n+  using ::puts;\n+  using ::remove;\n+  using ::rename;\n+  using ::rewind;\n+  using ::scanf;\n+  using ::setbuf;\n+  using ::setvbuf;\n+  using ::sprintf;\n+  using ::sscanf;\n+  using ::tmpfile;\n+  using ::tmpnam;\n+  using ::ungetc;\n+  using ::vfprintf;\n+  using ::vprintf;\n+  using ::vsprintf;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#if _GLIBCXX_USE_C99\n+\n+#undef snprintf\n+#undef vfscanf\n+#undef vscanf\n+#undef vsnprintf\n+#undef vsscanf\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n+  extern \"C\" int\n+  (snprintf)(char * restrict, size_t, const char * restrict, ...);\n+  extern \"C\" int\n+  (vfscanf)(FILE * restrict, const char * restrict, __gnuc_va_list);\n+  extern \"C\" int (vscanf)(const char * restrict, __gnuc_va_list);\n+  extern \"C\" int\n+  (vsnprintf)(char * restrict, size_t, const char * restrict, __gnuc_va_list);\n+  extern \"C\" int\n+  (vsscanf)(const char * restrict, const char * restrict, __gnuc_va_list);\n+#endif\n+\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n+  using ::snprintf;\n+  using ::vfscanf;\n+  using ::vscanf;\n+  using ::vsnprintf;\n+  using ::vsscanf;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::__gnu_cxx::snprintf;\n+  using ::__gnu_cxx::vfscanf;\n+  using ::__gnu_cxx::vscanf;\n+  using ::__gnu_cxx::vsnprintf;\n+  using ::__gnu_cxx::vsscanf;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // _GLIBCXX_USE_C99\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cstdio>\n+#endif\n+\n+#endif"}, {"sha": "e4ab8f9911d33a619a1a63352f662e32b1bdeec3", "filename": "libstdc++-v3/include/c_global/cstdlib", "status": "added", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstdlib?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,231 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cstdlib\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c stdlib.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+\n+#ifndef _GLIBCXX_CSTDLIB\n+#define _GLIBCXX_CSTDLIB 1\n+\n+#if !_GLIBCXX_HOSTED\n+// The C standard does not require a freestanding implementation to\n+// provide <stdlib.h>.  However, the C++ standard does still require\n+// <cstdlib> -- but only the functionality mentioned in\n+// [lib.support.start.term].\n+\n+#define EXIT_SUCCESS 0\n+#define EXIT_FAILURE 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  extern \"C\" void abort(void);\n+  extern \"C\" int atexit(void (*)());\n+  extern \"C\" void exit(int);\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#else\n+\n+#include_next <stdlib.h>\n+\n+// Get rid of those macros defined in <stdlib.h> in lieu of real functions.\n+#undef abort\n+#undef abs\n+#undef atexit\n+#undef atof\n+#undef atoi\n+#undef atol\n+#undef bsearch\n+#undef calloc\n+#undef div\n+#undef exit\n+#undef free\n+#undef getenv\n+#undef labs\n+#undef ldiv\n+#undef malloc\n+#undef mblen\n+#undef mbstowcs\n+#undef mbtowc\n+#undef qsort\n+#undef rand\n+#undef realloc\n+#undef srand\n+#undef strtod\n+#undef strtol\n+#undef strtoul\n+#undef system\n+#undef wcstombs\n+#undef wctomb\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::div_t;\n+  using ::ldiv_t;\n+\n+  using ::abort;\n+  using ::abs;\n+  using ::atexit;\n+  using ::atof;\n+  using ::atoi;\n+  using ::atol;\n+  using ::bsearch;\n+  using ::calloc;\n+  using ::div;\n+  using ::exit;\n+  using ::free;\n+  using ::getenv;\n+  using ::labs;\n+  using ::ldiv;\n+  using ::malloc;\n+#ifdef _GLIBCXX_HAVE_MBSTATE_T\n+  using ::mblen;\n+  using ::mbstowcs;\n+  using ::mbtowc;\n+#endif // _GLIBCXX_HAVE_MBSTATE_T\n+  using ::qsort;\n+  using ::rand;\n+  using ::realloc;\n+  using ::srand;\n+  using ::strtod;\n+  using ::strtol;\n+  using ::strtoul;\n+  using ::system;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using ::wcstombs;\n+  using ::wctomb;\n+#endif // _GLIBCXX_USE_WCHAR_T\n+\n+  inline long\n+  abs(long __i) { return labs(__i); }\n+\n+  inline ldiv_t\n+  div(long __i, long __j) { return ldiv(__i, __j); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#if _GLIBCXX_USE_C99\n+\n+#undef _Exit\n+#undef llabs\n+#undef lldiv\n+#undef atoll\n+#undef strtoll\n+#undef strtoull\n+#undef strtof\n+#undef strtold\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::lldiv_t;\n+#endif\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n+  extern \"C\" void (_Exit)(int);\n+#endif\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n+  using ::_Exit;\n+#endif\n+\n+  inline long long\n+  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::llabs;\n+\n+  inline lldiv_t\n+  div(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  using ::lldiv;\n+#endif\n+\n+#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  extern \"C\" long long int (atoll)(const char *);\n+  extern \"C\" long long int\n+    (strtoll)(const char * restrict, char ** restrict, int);\n+  extern \"C\" unsigned long long int\n+    (strtoull)(const char * restrict, char ** restrict, int);\n+#endif\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::atoll;\n+  using ::strtoll;\n+  using ::strtoull;\n+#endif\n+  using ::strtof;\n+  using ::strtold;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::__gnu_cxx::lldiv_t;\n+#endif\n+  using ::__gnu_cxx::_Exit;\n+  using ::__gnu_cxx::abs;\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::__gnu_cxx::llabs;\n+  using ::__gnu_cxx::div;\n+  using ::__gnu_cxx::lldiv;\n+#endif\n+  using ::__gnu_cxx::atoll;\n+  using ::__gnu_cxx::strtof;\n+  using ::__gnu_cxx::strtoll;\n+  using ::__gnu_cxx::strtoull;\n+  using ::__gnu_cxx::strtold;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif // _GLIBCXX_USE_C99\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cstdlib>\n+#endif\n+\n+#endif // !_GLIBCXX_HOSTED\n+\n+#endif"}, {"sha": "c797aca16b45ee6447062829111d002424cac079", "filename": "libstdc++-v3/include/c_global/cstring", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstring?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,130 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file cstring\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c string.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include_next <string.h>\n+\n+#ifndef _GLIBCXX_CSTRING\n+#define _GLIBCXX_CSTRING 1\n+\n+// Get rid of those macros defined in <string.h> in lieu of real functions.\n+#undef memcpy\n+#undef memmove\n+#undef strcpy\n+#undef strncpy\n+#undef strcat\n+#undef strncat\n+#undef memcmp\n+#undef strcmp\n+#undef strcoll\n+#undef strncmp\n+#undef strxfrm\n+#undef memchr\n+#undef strchr\n+#undef strcspn\n+#undef strpbrk\n+#undef strrchr\n+#undef strspn\n+#undef strstr\n+#undef strtok\n+#undef memset\n+#undef strerror\n+#undef strlen\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::memcpy;\n+  using ::memmove;\n+  using ::strcpy;\n+  using ::strncpy;\n+  using ::strcat;\n+  using ::strncat;\n+  using ::memcmp;\n+  using ::strcmp;\n+  using ::strcoll;\n+  using ::strncmp;\n+  using ::strxfrm;\n+  using ::strcspn;\n+  using ::strspn;\n+  using ::strtok;\n+  using ::memset;\n+  using ::strerror;\n+  using ::strlen;\n+\n+  using ::memchr;\n+\n+  inline void*\n+  memchr(void* __p, int __c, size_t __n)\n+  { return memchr(const_cast<const void*>(__p), __c, __n); }\n+\n+  using ::strchr;\n+\n+  inline char*\n+  strchr(char* __s1, int __n)\n+  { return __builtin_strchr(const_cast<const char*>(__s1), __n); }\n+\n+  using ::strpbrk;\n+\n+  inline char*\n+  strpbrk(char* __s1, const char* __s2)\n+  { return __builtin_strpbrk(const_cast<const char*>(__s1), __s2); }\n+\n+  using ::strrchr;\n+\n+  inline char*\n+  strrchr(char* __s1, int __n)\n+  { return __builtin_strrchr(const_cast<const char*>(__s1), __n); }\n+\n+  using ::strstr;\n+\n+  inline char*\n+  strstr(char* __s1, const char* __s2)\n+  { return __builtin_strstr(const_cast<const char*>(__s1), __s2); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif"}, {"sha": "623ed9be59210de188c740d3da9694f268da6816", "filename": "libstdc++-v3/include/c_global/ctgmath", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctgmath?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <ctgmath> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/ctgmath\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#pragma GCC system_header\n+\n+#ifndef _GLIBCXX_CTGMATH\n+#define _GLIBCXX_CTGMATH 1\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/ctgmath>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "8b563ba1bf4a6f930b411ba74131655de519f622", "filename": "libstdc++-v3/include/c_global/ctime", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fctime?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,86 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/ctime\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c time.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 20.5  Date and time\n+//\n+\n+#pragma GCC system_header\n+\n+#include <cstddef>\n+#include_next <time.h>\n+\n+#ifndef _GLIBCXX_CTIME\n+#define _GLIBCXX_CTIME 1\n+\n+// Get rid of those macros defined in <time.h> in lieu of real functions.\n+#undef clock\n+#undef difftime\n+#undef mktime\n+#undef time\n+#undef asctime\n+#undef ctime\n+#undef gmtime\n+#undef localtime\n+#undef strftime\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::clock_t;\n+  using ::time_t;\n+  using ::tm;\n+\n+  using ::clock;\n+  using ::difftime;\n+  using ::mktime;\n+  using ::time;\n+  using ::asctime;\n+  using ::ctime;\n+  using ::gmtime;\n+  using ::localtime;\n+  using ::strftime;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/ctime>\n+#endif\n+\n+#endif"}, {"sha": "6e867342478ee257d8b5c69841579db5710eefba", "filename": "libstdc++-v3/include/c_global/cwchar", "status": "added", "additions": 284, "deletions": 0, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwchar?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,284 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cwchar\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c wchar.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: 21.4\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+#include <cstddef>\n+#include <ctime>\n+\n+#if _GLIBCXX_HAVE_WCHAR_H\n+#include_next <wchar.h>\n+#endif\n+\n+#ifndef _GLIBCXX_CWCHAR\n+#define _GLIBCXX_CWCHAR 1\n+\n+// Need to do a bit of trickery here with mbstate_t as char_traits\n+// assumes it is in wchar.h, regardless of wchar_t specializations.\n+#ifndef _GLIBCXX_HAVE_MBSTATE_T\n+extern \"C\"\n+{\n+  typedef struct\n+  {\n+    int __fill[6];\n+  } mbstate_t;\n+}\n+#endif\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::mbstate_t;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+// Get rid of those macros defined in <wchar.h> in lieu of real functions.\n+#undef btowc\n+#undef fgetwc\n+#undef fgetws\n+#undef fputwc\n+#undef fputws\n+#undef fwide\n+#undef fwprintf\n+#undef fwscanf\n+#undef getwc\n+#undef getwchar\n+#undef mbrlen\n+#undef mbrtowc\n+#undef mbsinit\n+#undef mbsrtowcs\n+#undef putwc\n+#undef putwchar\n+#undef swprintf\n+#undef swscanf\n+#undef ungetwc\n+#undef vfwprintf\n+#if _GLIBCXX_HAVE_VFWSCANF\n+# undef vfwscanf\n+#endif\n+#undef vswprintf\n+#if _GLIBCXX_HAVE_VSWSCANF\n+# undef vswscanf\n+#endif\n+#undef vwprintf\n+#if _GLIBCXX_HAVE_VWSCANF\n+# undef vwscanf\n+#endif\n+#undef wcrtomb\n+#undef wcscat\n+#undef wcschr\n+#undef wcscmp\n+#undef wcscoll\n+#undef wcscpy\n+#undef wcscspn\n+#undef wcsftime\n+#undef wcslen\n+#undef wcsncat\n+#undef wcsncmp\n+#undef wcsncpy\n+#undef wcspbrk\n+#undef wcsrchr\n+#undef wcsrtombs\n+#undef wcsspn\n+#undef wcsstr\n+#undef wcstod\n+#if _GLIBCXX_HAVE_WCSTOF\n+# undef wcstof\n+#endif\n+#undef wcstok\n+#undef wcstol\n+#undef wcstoul\n+#undef wcsxfrm\n+#undef wctob\n+#undef wmemchr\n+#undef wmemcmp\n+#undef wmemcpy\n+#undef wmemmove\n+#undef wmemset\n+#undef wprintf\n+#undef wscanf\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::wint_t;\n+\n+  using ::btowc;\n+  using ::fgetwc;\n+  using ::fgetws;\n+  using ::fputwc;\n+  using ::fputws;\n+  using ::fwide;\n+  using ::fwprintf;\n+  using ::fwscanf;\n+  using ::getwc;\n+  using ::getwchar;\n+  using ::mbrlen;\n+  using ::mbrtowc;\n+  using ::mbsinit;\n+  using ::mbsrtowcs;\n+  using ::putwc;\n+  using ::putwchar;\n+  using ::swprintf;\n+  using ::swscanf;\n+  using ::ungetwc;\n+  using ::vfwprintf;\n+#if _GLIBCXX_HAVE_VFWSCANF\n+  using ::vfwscanf;\n+#endif\n+  using ::vswprintf;\n+#if _GLIBCXX_HAVE_VSWSCANF\n+  using ::vswscanf;\n+#endif\n+  using ::vwprintf;\n+#if _GLIBCXX_HAVE_VWSCANF\n+  using ::vwscanf;\n+#endif\n+  using ::wcrtomb;\n+  using ::wcscat;\n+  using ::wcscmp;\n+  using ::wcscoll;\n+  using ::wcscpy;\n+  using ::wcscspn;\n+  using ::wcsftime;\n+  using ::wcslen;\n+  using ::wcsncat;\n+  using ::wcsncmp;\n+  using ::wcsncpy;\n+  using ::wcsrtombs;\n+  using ::wcsspn;\n+  using ::wcstod;\n+#if _GLIBCXX_HAVE_WCSTOF\n+  using ::wcstof;\n+#endif\n+  using ::wcstok;\n+  using ::wcstol;\n+  using ::wcstoul;\n+  using ::wcsxfrm;\n+  using ::wctob;\n+  using ::wmemcmp;\n+  using ::wmemcpy;\n+  using ::wmemmove;\n+  using ::wmemset;\n+  using ::wprintf;\n+  using ::wscanf;\n+\n+  using ::wcschr;\n+\n+  inline wchar_t*\n+  wcschr(wchar_t* __p, wchar_t __c)\n+  { return wcschr(const_cast<const wchar_t*>(__p), __c); }\n+\n+  using ::wcspbrk;\n+\n+  inline wchar_t*\n+  wcspbrk(wchar_t* __s1, const wchar_t* __s2)\n+  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }\n+\n+  using ::wcsrchr;\n+\n+  inline wchar_t*\n+  wcsrchr(wchar_t* __p, wchar_t __c)\n+  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }\n+\n+  using ::wcsstr;\n+\n+  inline wchar_t*\n+  wcsstr(wchar_t* __s1, const wchar_t* __s2)\n+  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }\n+\n+  using ::wmemchr;\n+\n+  inline wchar_t*\n+  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)\n+  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#if _GLIBCXX_USE_C99\n+\n+#undef wcstold\n+#undef wcstoll\n+#undef wcstoull\n+\n+_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+\n+#if _GLIBCXX_USE_C99_CHECK || _GLIBCXX_USE_C99_DYNAMIC\n+  extern \"C\" long double\n+    (wcstold)(const wchar_t * restrict, wchar_t ** restrict);\n+#endif\n+#if !_GLIBCXX_USE_C99_DYNAMIC\n+  using ::wcstold;\n+#endif\n+#if _GLIBCXX_USE_C99_LONG_LONG_CHECK || _GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  extern \"C\" long long int\n+    (wcstoll)(const wchar_t * restrict, wchar_t ** restrict, int);\n+  extern \"C\" unsigned long long int\n+    (wcstoull)(const wchar_t * restrict, wchar_t ** restrict, int);\n+#endif\n+#if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n+  using ::wcstoll;\n+  using ::wcstoull;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::__gnu_cxx::wcstold;\n+  using ::__gnu_cxx::wcstoll;\n+  using ::__gnu_cxx::wcstoull;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif\n+\n+#endif //_GLIBCXX_USE_WCHAR_T\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cwchar>\n+#endif\n+\n+#endif"}, {"sha": "ab97b8dc9b5aded3eced5a10032ee2af8c08f3bf", "filename": "libstdc++-v3/include/c_global/cwctype", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcwctype?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,116 @@\n+// -*- C++ -*- forwarding header.\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/cwctype\n+ *  This is a Standard C++ Library file.  You should @c #include this file\n+ *  in your programs, rather than any of the \"*.h\" implementation files.\n+ *\n+ *  This is the C++ version of the Standard C Library header @c wctype.h,\n+ *  and its contents are (mostly) the same as that header, but are all\n+ *  contained in the namespace @c std (except for names which are defined\n+ *  as macros in C).\n+ */\n+\n+//\n+// ISO C++ 14882: <cwctype>\n+//\n+\n+#pragma GCC system_header\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_HAVE_WCTYPE_H\n+#include_next <wctype.h>\n+#endif\n+\n+#ifndef _GLIBCXX_CWCTYPE\n+#define _GLIBCXX_CWCTYPE 1\n+\n+// Get rid of those macros defined in <wctype.h> in lieu of real functions.\n+#undef iswalnum\n+#undef iswalpha\n+#if _GLIBCXX_HAVE_ISWBLANK\n+# undef iswblank\n+#endif\n+#undef iswcntrl\n+#undef iswctype\n+#undef iswdigit\n+#undef iswgraph\n+#undef iswlower\n+#undef iswprint\n+#undef iswpunct\n+#undef iswspace\n+#undef iswupper\n+#undef iswxdigit\n+#undef towctrans\n+#undef towlower\n+#undef towupper\n+#undef wctrans\n+#undef wctype\n+\n+#if _GLIBCXX_USE_WCHAR_T\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  using ::wint_t;\t  // cwchar\n+\n+  using ::wctype_t;\n+  using ::wctrans_t;\n+\n+  using ::iswalnum;\n+  using ::iswalpha;\n+#if _GLIBCXX_HAVE_ISWBLANK\n+  using ::iswblank;\n+#endif\n+  using ::iswcntrl;\n+  using ::iswctype;\n+  using ::iswdigit;\n+  using ::iswgraph;\n+  using ::iswlower;\n+  using ::iswprint;\n+  using ::iswpunct;\n+  using ::iswspace;\n+  using ::iswupper;\n+  using ::iswxdigit;\n+  using ::towctrans;\n+  using ::towlower;\n+  using ::towupper;\n+  using ::wctrans;\n+  using ::wctype;\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif //_GLIBCXX_USE_WCHAR_T\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/cwctype>\n+#endif\n+\n+#endif"}, {"sha": "8f88cc0378cc04a9cbd5caf2a81fb5a6ec9f878b", "filename": "libstdc++-v3/include/std/algorithm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Falgorithm?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "5ca2604655d2d62e06ae1c7069fb7f5b4d223b27", "filename": "libstdc++-v3/include/std/array", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Farray?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <array> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/array\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_ARRAY\n+#define _GLIBCXX_ARRAY 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/array>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "3a7d40b209e5fab69a0c2c6bc524a7598c4181f9", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "642e542b3608e42f40465966b9f0c0fd4232b6f9", "filename": "libstdc++-v3/include/std/c++0x_warning.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fc%2B%2B0x_warning.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fc%2B%2B0x_warning.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fc%2B%2B0x_warning.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/c++0x_warning.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _CXX0X_WARNING_H\n+#define _CXX0X_WARNING_H 1\n+\n+#ifndef __GXX_EXPERIMENTAL_CXX0X__\n+#error This file requires compiler and library support for the upcoming \\\n+ISO C++ standard, C++0x. This support is currently experimental, and must be \\\n+enabled with the -std=c++0x or -std=gnu++0x compiler options.\n+#endif\n+\n+#endif"}, {"sha": "b91732b0c8522b9a02b3587eb7ff23a6583d8afa", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -1486,4 +1486,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/complex>\n+#endif\n+\n #endif\t/* _GLIBCXX_COMPLEX */"}, {"sha": "1891b34dcb30018df501cf49e476fec96aa6780d", "filename": "libstdc++-v3/include/std/deque", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fdeque?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "adcf3eb7c6e2579dfb6cc5d6c5ab2e199f846c2d", "filename": "libstdc++-v3/include/std/fstream", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffstream?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "33bab643b1f282b70a542995e7da580ab903be23", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -54,4 +54,8 @@\n #include <bits/c++config.h>\n #include <bits/stl_function.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/functional>\n+#endif\n+\n #endif /* _GLIBCXX_FUNCTIONAL */"}, {"sha": "53c013c2be808e7f7a3c9a0b70658a18eccaf1eb", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "95d845081cdd8c1e6495d573c1532fa61cd1b398", "filename": "libstdc++-v3/include/std/ios", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fios?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "f80d34b607ef1096edf5b183e22a48dda9f0a2c8", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "a4bdf86377a0c3d19330376af4fd85dc9008ff49", "filename": "libstdc++-v3/include/std/iostream", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiostream?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "0a4e5c73755e842f5ede5b54430e9da31e13543d", "filename": "libstdc++-v3/include/std/istream", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fistream?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "5533590f15c157947182696e680e77a2a2fd437c", "filename": "libstdc++-v3/include/std/iterator", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiterator?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "621a6fc347fcc401c8081b8c214174ca2006d339", "filename": "libstdc++-v3/include/std/limits", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flimits?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "8e58586f51dc2af992d31590882bdc2bacfa3042", "filename": "libstdc++-v3/include/std/list", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flist?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "328332a86b3e23e63683a1b4a92dc576970869f1", "filename": "libstdc++-v3/include/std/locale", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Flocale?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "29a5f6e015c6374aebef1c8ea2f191fd229f66f2", "filename": "libstdc++-v3/include/std/map", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmap?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "2dd64763fb0e6d2832ea179308ba6d6655b01337", "filename": "libstdc++-v3/include/std/memory", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -380,4 +380,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/memory>\n+#endif\n+\n #endif /* _GLIBCXX_MEMORY */"}, {"sha": "7f21b3d9e8e49b642a7e61b8cc8afe31db5f8cc2", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "942a5a4a609b9949014fc3444db52cd7ee278347", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "42cc43217aee9e40606ccfdac7a08a594f09bd45", "filename": "libstdc++-v3/include/std/queue", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fqueue?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "6faf5f565067171cd304dc57fee05c5c85922af8", "filename": "libstdc++-v3/include/std/random", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Frandom?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <random> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/random\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_RANDOM\n+#define _GLIBCXX_RANDOM 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/random>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "4b4e4827c290d89d786996c619c681fe5489144c", "filename": "libstdc++-v3/include/std/regex", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fregex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <regex> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/regex\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_REGEX\n+#define _GLIBCXX_REGEX 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/regex>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "801a8b1ef26676f3eb1d74d222a92cfb82d22a8b", "filename": "libstdc++-v3/include/std/set", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fset?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "66159c844f13ac92f9f15662c114d7027d5d5b74", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "318d4b9533b3b2d8f86f94bcaef02e5a935c326f", "filename": "libstdc++-v3/include/std/stack", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstack?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "d246428f4de6facf080b82db8dab11b838d6478e", "filename": "libstdc++-v3/include/std/stdexcept", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstdexcept?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "5e710377ab47dc0ca0a1ec73fc1f65c922478d0c", "filename": "libstdc++-v3/include/std/streambuf", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstreambuf?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "781901587cb9f1804c2b0fac0de9cdc96578ad0f", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "7ea9aff4c5d77000975b38c4be4cef567956759e", "filename": "libstdc++-v3/include/std/tuple", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <tuple> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/tuple\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_TUPLE\n+#define _GLIBCXX_TUPLE 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/tuple>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "1d83dabd861575f477e2999c20d2127e69ae5b00", "filename": "libstdc++-v3/include/std/type_traits", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <type_traits> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/type_traits\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_TYPE_TRAITS\n+#define _GLIBCXX_TYPE_TRAITS 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/type_traits>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "9eee766dd0a5d1be8890fcb5a245cf9efa78692d", "filename": "libstdc++-v3/include/std/unordered_map", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_map?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <unordered_map> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/unordered_map\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_UNORDERED_MAP\n+#define _GLIBCXX_UNORDERED_MAP 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/unordered_map>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "d83cfa3663d8fea8d647dabcf5209415da467e22", "filename": "libstdc++-v3/include/std/unordered_set", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Funordered_set?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,46 @@\n+// <unordered_set> -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file include/unordered_set\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#ifndef _GLIBCXX_UNORDERED_SET\n+#define _GLIBCXX_UNORDERED_SET 1\n+\n+#pragma GCC system_header\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/unordered_set>\n+#else\n+# include <c++0x_warning.h>\n+#endif\n+\n+#endif \n+"}, {"sha": "c17b355bcdf8cd4faa58a6f9c6d8bfdc11bb94a3", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // <utility> -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -13,10 +13,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate\n@@ -66,4 +66,8 @@\n #include <bits/stl_relops.h>\n #include <bits/stl_pair.h>\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+# include <tr1/utility>\n+#endif\n+\n #endif /* _GLIBCXX_UTILITY */"}, {"sha": "b23c867a567403f9efccfda77fd93a95c5ea8dd1", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -15,10 +15,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "83a08ff4a1b19c3e0b4735985e3f4bc4a9239352", "filename": "libstdc++-v3/include/std/vector", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvector?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -14,10 +14,10 @@\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n \n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n-// USA.\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n \n // As a special exception, you may use this file as part of a free software\n // library without restriction.  Specifically, if other files instantiate"}, {"sha": "d08aa830ebec8811deb46503fff27f40826e15f8", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -44,7 +44,7 @@\n //namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   /// @brief  struct array [6.2.2].\n   /// NB: Requires complete type _Tp."}, {"sha": "524a98ccc042520f323c505067e567da017a1b52", "filename": "libstdc++-v3/include/tr1/boost_shared_ptr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fboost_shared_ptr.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -56,7 +56,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   class bad_weak_ptr : public std::exception\n   {"}, {"sha": "a9196458fd15f8419c1464e1c7393a1be9768cdf", "filename": "libstdc++-v3/include/tr1/ccomplex", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fccomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fccomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fccomplex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// TR1 ccomplex -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tr1/ccomplex\n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CCOMPLEX\n+#define _TR1_CCOMPLEX 1\n+\n+#include <tr1/complex>\n+\n+#endif"}, {"sha": "7d428f9430bfa16cee21073286ac1cbdb6e4814f", "filename": "libstdc++-v3/include/tr1/cctype", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -44,7 +44,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   using ::isblank;\n "}, {"sha": "a468526ab9ce59f9846c6959f511101919a12eb7", "filename": "libstdc++-v3/include/tr1/cfenv", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcfenv?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -55,7 +55,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // types\n   using ::fenv_t;"}, {"sha": "398ab1d2e184f93b4c4d1ac2dbbf5b46c921da5d", "filename": "libstdc++-v3/include/tr1/cinttypes", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcinttypes?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -46,7 +46,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // types\n   using ::imaxdiv_t;"}, {"sha": "65115e67350a61991b92016e079f51cfe8d94cdf", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -151,7 +151,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n \n@@ -375,10 +375,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       __gnu_cxx::__enable_if<std::__is_floating<_Tp>::__value\n                              || std::__is_floating<_Up>::__value,\n \t\t\t     typename\n-\t\t\t     std::tr1::__promote_2<_Tp, _Up>::__type>::__type\n+\t\t\t     std::_GLIBCXX_TR1::__promote_2<_Tp, _Up>::__type>::__type\n       atan2(_Tp __y, _Up __x)\n       {\n-\ttypedef typename std::tr1::__promote_2<_Tp, _Up>::__type __type;\n+\ttypedef typename std::_GLIBCXX_TR1::__promote_2<_Tp, _Up>::__type __type;\n \treturn std::atan2(__type(__y), __type(__x));\n       }\n   } // namespace __detail"}, {"sha": "fb13cdea320e38be1536b9d108e0e6f4e468ddef", "filename": "libstdc++-v3/include/tr1/common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcommon.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -39,7 +39,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   template<typename _Tp, bool = is_integral<_Tp>::value>\n     struct __promote"}, {"sha": "666cae9e81d1226c139c01b24bd6bd992ce8cef9", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // TR1 complex -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -34,13 +34,13 @@\n #ifndef _TR1_COMPLEX\n #define _TR1_COMPLEX 1\n \n-#include \"../complex\"\n+#include <complex>\n #include <tr1/common.h>\n \n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // Forward declarations.\n   template<typename _Tp> std::complex<_Tp> acos(const std::complex<_Tp>&);\n@@ -59,7 +59,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     inline std::complex<_Tp>\n     __complex_acos(const std::complex<_Tp>& __z)\n     {\n-      const std::complex<_Tp> __t = std::tr1::asin(__z);\n+      const std::complex<_Tp> __t = std::_GLIBCXX_TR1::asin(__z);\n       const _Tp __pi_2 = 1.5707963267948966192313216916397514L;\n       return std::complex<_Tp>(__pi_2 - __t.real(), -__t.imag());\n     }\n@@ -96,7 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     __complex_asin(const std::complex<_Tp>& __z)\n     {\n       std::complex<_Tp> __t(-__z.imag(), __z.real());\n-      __t = std::tr1::asinh(__t);\n+      __t = std::_GLIBCXX_TR1::asinh(__t);\n       return std::complex<_Tp>(__t.imag(), -__t.real());\n     }\n "}, {"sha": "12fadec33ff594b8793fedd35b0b274d16d6c36a", "filename": "libstdc++-v3/include/tr1/complex.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,39 @@\n+// TR1 complex.h -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tr1/complex.h\n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_COMPLEX_H\n+#define _TR1_COMPLEX_H 1\n+\n+#include <tr1/ccomplex>\n+\n+#endif"}, {"sha": "a8dce52245fe63492d6c4148a7ac842f61994d18", "filename": "libstdc++-v3/include/tr1/cstdint", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -46,7 +46,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   using ::int8_t;\n   using ::int16_t;"}, {"sha": "b016a1527df1094bf50b6d52328265741a3e6ce3", "filename": "libstdc++-v3/include/tr1/cstdio", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdio?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -40,7 +40,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n #if _GLIBCXX_USE_C99\n   using std::snprintf;"}, {"sha": "5096fa8ca5345c8a5c184f31b3103aca870111e2", "filename": "libstdc++-v3/include/tr1/cstdlib", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdlib?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -43,7 +43,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n #if _GLIBCXX_USE_C99\n "}, {"sha": "abc88bb4fdc78c34ef5841ac2ff90fce2701feb7", "filename": "libstdc++-v3/include/tr1/cwchar", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwchar?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -43,7 +43,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n #if _GLIBCXX_HAVE_WCSTOF\n   using std::wcstof;"}, {"sha": "f6e99be4981734bc69b96a6dd4dba58f8f2b9015", "filename": "libstdc++-v3/include/tr1/cwctype", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcwctype?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -43,7 +43,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n #if _GLIBCXX_HAVE_ISWBLANK\n   using std::iswblank;"}, {"sha": "736b7701d70d4309df3d65bac797b3f23f8e207b", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -36,16 +36,18 @@\n \n #pragma GCC system_header\n \n-#include \"../functional\"\n+#include <cstdlib>              // for std::abort\n+#include <cmath>                // for std::frexp\n+#include <string>               // for std::tr1::hash\n+#include <functional>\n #include <typeinfo>\n+#include <tr1/tuple>\n #include <tr1/type_traits>\n #include <ext/type_traits.h>\n-#include <cstdlib>  // for std::abort\n-#include <tr1/tuple>\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   template<typename _MemberPointer>\n     class _Mem_fn;\n@@ -636,7 +638,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typename result<_Mu(_Arg, _Tuple)>::type\n       operator()(const volatile _Arg&, const _Tuple& __tuple) const volatile\n       {\n-        return ::std::tr1::get<(is_placeholder<_Arg>::value - 1)>(__tuple);\n+        return ::std::_GLIBCXX_TR1::get<(is_placeholder<_Arg>::value - 1)>(__tuple);\n       }\n     };\n "}, {"sha": "9c6f69a3f51fdfcd879169bb52f7034750595abf", "filename": "libstdc++-v3/include/tr1/functional_hash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_hash.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -40,7 +40,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // Definition of default hash function std::tr1::hash<>.  The types for\n   // which std::tr1::hash<T> is defined is in clause 6.3.3. of the PDTR."}, {"sha": "3772e15c714a2efaf3499e9a32ee9b187ca74d26", "filename": "libstdc++-v3/include/tr1/functional_iterate.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional_iterate.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // TR1 functional -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n // Written by Douglas Gregor <doug.gregor -at- gmail.com>\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,7 +35,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n template<typename _Res _GLIBCXX_COMMA _GLIBCXX_TEMPLATE_PARAMS>\n   struct _Weak_result_type_impl<_Res(_GLIBCXX_TEMPLATE_ARGS)>\n@@ -547,7 +547,7 @@ class _Function_handler<_Res(_GLIBCXX_TEMPLATE_ARGS), _Member _Class::*>\n   static _Res\n   _M_invoke(const _Any_data& __functor _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n   {\n-    return std::tr1::mem_fn(_Base::_M_get_pointer(__functor)->__value)\n+    return std::_GLIBCXX_TR1::mem_fn(_Base::_M_get_pointer(__functor)->__value)\n              (_GLIBCXX_ARGS);\n   }\n };\n@@ -586,7 +586,7 @@ class _Function_handler<void(_GLIBCXX_TEMPLATE_ARGS), _Member _Class::*>\n   static void\n   _M_invoke(const _Any_data& __functor _GLIBCXX_COMMA _GLIBCXX_PARAMS)\n   {\n-    std::tr1::mem_fn(_Base::_M_get_pointer(__functor)->__value)\n+    std::_GLIBCXX_TR1::mem_fn(_Base::_M_get_pointer(__functor)->__value)\n       (_GLIBCXX_ARGS);\n   }\n };"}, {"sha": "d6115dd3a6d53d4e1b26352ff4ca190dd7f76bb8", "filename": "libstdc++-v3/include/tr1/hashtable", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // Internal header for TR1 unordered_set and unordered_map -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -64,7 +64,7 @@\n \n namespace std\n { \n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // Class template _Hashtable, class definition.\n   \n@@ -382,10 +382,10 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t       typename _Hashtable::_Hash_code_type);\n \n       std::pair<iterator, bool>\n-      _M_insert(const value_type&, std::tr1::true_type);\n+      _M_insert(const value_type&, std::_GLIBCXX_TR1::true_type);\n \n       iterator\n-      _M_insert(const value_type&, std::tr1::false_type);\n+      _M_insert(const value_type&, std::_GLIBCXX_TR1::false_type);\n \n       void\n       _M_erase_node(_Node*, _Node**);\n@@ -394,7 +394,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // Insert and erase\n       _Insert_Return_Type\n       insert(const value_type& __v) \n-      { return _M_insert(__v, std::tr1::integral_constant<bool,\n+      { return _M_insert(__v, std::_GLIBCXX_TR1::integral_constant<bool,\n \t\t\t __unique_keys>()); }\n \n       iterator\n@@ -908,7 +908,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t\t  __chc, __cit, __uk>::iterator, bool>\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    _M_insert(const value_type& __v, std::tr1::true_type)\n+    _M_insert(const value_type& __v, std::_GLIBCXX_TR1::true_type)\n     {\n       const key_type& __k = this->_M_extract(__v);\n       typename _Hashtable::_Hash_code_type __code = this->_M_hash_code(__k);\n@@ -929,7 +929,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t__chc, __cit, __uk>::iterator\n     _Hashtable<_Key, _Value, _Allocator, _ExtractKey, _Equal,\n \t       _H1, _H2, _Hash, _RehashPolicy, __chc, __cit, __uk>::\n-    _M_insert(const value_type& __v, std::tr1::false_type)\n+    _M_insert(const value_type& __v, std::_GLIBCXX_TR1::false_type)\n     {\n       std::pair<bool, std::size_t> __do_rehash\n \t= _M_rehash_policy._M_need_rehash(_M_bucket_count,"}, {"sha": "dc09ccab8bf2f8930d0c3d81cccf87ac5a246efe", "filename": "libstdc++-v3/include/tr1/hashtable_policy.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fhashtable_policy.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -41,7 +41,7 @@\n \n namespace std\n { \n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n namespace __detail\n {\n   // Helper function: return distance(first, last) for forward"}, {"sha": "dcf75376326ff2f4d7b28e2d1871a010e3d8ab61", "filename": "libstdc++-v3/include/tr1/math.h", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmath.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // TR1 math.h -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -38,61 +38,61 @@\n \n #if _GLIBCXX_USE_C99_MATH_TR1\n \n-using std::tr1::acos;\n-using std::tr1::acosh;\n-using std::tr1::asin;\n-using std::tr1::asinh;\n-using std::tr1::atan;\n-using std::tr1::atan2;\n-using std::tr1::atanh;\n-using std::tr1::cbrt;\n-using std::tr1::ceil;\n-using std::tr1::copysign;\n-using std::tr1::cos;\n-using std::tr1::cosh;\n-using std::tr1::erf;\n-using std::tr1::erfc;\n-using std::tr1::exp;\n-using std::tr1::exp2;\n-using std::tr1::expm1;\n-using std::tr1::fabs;\n-using std::tr1::fdim;\n-using std::tr1::floor;\n-using std::tr1::fma;\n-using std::tr1::fmax;\n-using std::tr1::fmin;\n-using std::tr1::fmod;\n-using std::tr1::frexp;\n-using std::tr1::hypot;\n-using std::tr1::ilogb;\n-using std::tr1::ldexp;\n-using std::tr1::lgamma;\n-using std::tr1::llrint;\n-using std::tr1::llround;\n-using std::tr1::log;\n-using std::tr1::log10;\n-using std::tr1::log1p;\n-using std::tr1::log2;\n-using std::tr1::logb;\n-using std::tr1::lrint;\n-using std::tr1::lround;\n-using std::tr1::nearbyint;\n-using std::tr1::nextafter;\n-using std::tr1::nexttoward;\n-using std::tr1::pow;\n-using std::tr1::remainder;\n-using std::tr1::remquo;\n-using std::tr1::rint;\n-using std::tr1::round;\n-using std::tr1::scalbln;\n-using std::tr1::scalbn;\n-using std::tr1::sin;\n-using std::tr1::sinh;\n-using std::tr1::sqrt;\n-using std::tr1::tan;\n-using std::tr1::tanh;\n-using std::tr1::tgamma;\n-using std::tr1::trunc;\n+using std::_GLIBCXX_TR1::acos;\n+using std::_GLIBCXX_TR1::acosh;\n+using std::_GLIBCXX_TR1::asin;\n+using std::_GLIBCXX_TR1::asinh;\n+using std::_GLIBCXX_TR1::atan;\n+using std::_GLIBCXX_TR1::atan2;\n+using std::_GLIBCXX_TR1::atanh;\n+using std::_GLIBCXX_TR1::cbrt;\n+using std::_GLIBCXX_TR1::ceil;\n+using std::_GLIBCXX_TR1::copysign;\n+using std::_GLIBCXX_TR1::cos;\n+using std::_GLIBCXX_TR1::cosh;\n+using std::_GLIBCXX_TR1::erf;\n+using std::_GLIBCXX_TR1::erfc;\n+using std::_GLIBCXX_TR1::exp;\n+using std::_GLIBCXX_TR1::exp2;\n+using std::_GLIBCXX_TR1::expm1;\n+using std::_GLIBCXX_TR1::fabs;\n+using std::_GLIBCXX_TR1::fdim;\n+using std::_GLIBCXX_TR1::floor;\n+using std::_GLIBCXX_TR1::fma;\n+using std::_GLIBCXX_TR1::fmax;\n+using std::_GLIBCXX_TR1::fmin;\n+using std::_GLIBCXX_TR1::fmod;\n+using std::_GLIBCXX_TR1::frexp;\n+using std::_GLIBCXX_TR1::hypot;\n+using std::_GLIBCXX_TR1::ilogb;\n+using std::_GLIBCXX_TR1::ldexp;\n+using std::_GLIBCXX_TR1::lgamma;\n+using std::_GLIBCXX_TR1::llrint;\n+using std::_GLIBCXX_TR1::llround;\n+using std::_GLIBCXX_TR1::log;\n+using std::_GLIBCXX_TR1::log10;\n+using std::_GLIBCXX_TR1::log1p;\n+using std::_GLIBCXX_TR1::log2;\n+using std::_GLIBCXX_TR1::logb;\n+using std::_GLIBCXX_TR1::lrint;\n+using std::_GLIBCXX_TR1::lround;\n+using std::_GLIBCXX_TR1::nearbyint;\n+using std::_GLIBCXX_TR1::nextafter;\n+using std::_GLIBCXX_TR1::nexttoward;\n+using std::_GLIBCXX_TR1::pow;\n+using std::_GLIBCXX_TR1::remainder;\n+using std::_GLIBCXX_TR1::remquo;\n+using std::_GLIBCXX_TR1::rint;\n+using std::_GLIBCXX_TR1::round;\n+using std::_GLIBCXX_TR1::scalbln;\n+using std::_GLIBCXX_TR1::scalbn;\n+using std::_GLIBCXX_TR1::sin;\n+using std::_GLIBCXX_TR1::sinh;\n+using std::_GLIBCXX_TR1::sqrt;\n+using std::_GLIBCXX_TR1::tan;\n+using std::_GLIBCXX_TR1::tanh;\n+using std::_GLIBCXX_TR1::tgamma;\n+using std::_GLIBCXX_TR1::trunc;\n \n #endif\n "}, {"sha": "7413410bc27e54c4d5e8c1244b03fbc6f3da215d", "filename": "libstdc++-v3/include/tr1/memory", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fmemory?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -35,22 +35,22 @@\n #ifndef _TR1_MEMORY\n #define _TR1_MEMORY 1\n \n-#include \"../memory\"\n-#include <functional>           // std::less\n-#include <exception>            // std::exception\n-#include <new>                  // std::bad_alloc\n-#include <typeinfo>             // std::type_info in get_deleter\n-#include <cstddef>              // std::size_t\n+#include <cstddef>          \t// std::size_t\n+#include <cstdlib>          \t// std::abort\n+#include <exception>        \t// std::exception\n+#include <new>              \t// std::bad_alloc\n+#include <typeinfo>         \t// std::type_info in get_deleter\n #include <bits/stl_algobase.h>  // std::swap\n-#include <iosfwd>               // std::basic_ostream\n-#include <cstdlib>              // std::abort\n+#include <iosfwd>           \t// std::basic_ostream\n+#include <memory>\n \n #include <ext/atomicity.h>\n #include <ext/concurrence.h>\n #include <bits/functexcept.h>\n+#include <bits/stl_function.h> \t// std::less\n #include <debug/debug.h>\n-#include <tr1/type_traits>  // tr1::add_reference\n \n+#include <tr1/type_traits>  \t// tr1::add_reference\n #include <tr1/boost_shared_ptr.h>\n \n #endif"}, {"sha": "bfdd90157d255f0a92e4bf48a18acdd076d35604", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -48,7 +48,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // [5.1] Random number generation\n "}, {"sha": "c5ae93355fa57667512cfbb30ecd35b8ee651fe6", "filename": "libstdc++-v3/include/tr1/random.tcc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom.tcc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -33,7 +33,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   /*\n    * (Further) implementation-space details.\n@@ -322,7 +322,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       if (__value == 0)\n \t__value = 19780503;\n \n-      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n+      std::_GLIBCXX_TR1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \t__lcg(__value);\n \n       for (int __i = 0; __i < long_lag; ++__i)\n@@ -441,7 +441,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     {\n       for (int __j = 0; __j < __n; ++__j)\n #if _GLIBCXX_USE_C99_MATH_TR1\n-\t_M_npows[__j] = std::tr1::ldexp(_RealType(1), -__w + __j * 32);\n+\t_M_npows[__j] = std::_GLIBCXX_TR1::ldexp(_RealType(1), -__w + __j * 32);\n #else\n         _M_npows[__j] = std::pow(_RealType(2), -__w + __j * 32);\n #endif\n@@ -457,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 512. Seeding subtract_with_carry_01 from a single unsigned long.\n-      std::tr1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n+      std::_GLIBCXX_TR1::linear_congruential<unsigned long, 40014, 0, 2147483563>\n \t__lcg(__value);\n \n       this->seed(__lcg);\n@@ -869,13 +869,13 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t{\n \t  const _RealType __m = std::floor(_M_mean);\n \t  _M_lm_thr = std::log(_M_mean);\n-\t  _M_lfm = std::tr1::lgamma(__m + 1);\n+\t  _M_lfm = std::_GLIBCXX_TR1::lgamma(__m + 1);\n \t  _M_sm = std::sqrt(__m);\n \n \t  const _RealType __pi_4 = 0.7853981633974483096156608458198757L;\n \t  const _RealType __dx = std::sqrt(2 * __m * std::log(32 * __m\n \t\t\t\t\t\t\t      / __pi_4));\n-\t  _M_d = std::tr1::round(std::max(_RealType(6),\n+\t  _M_d = std::_GLIBCXX_TR1::round(std::max(_RealType(6),\n \t\t\t\t\t  std::min(__m, __dx)));\n \t  const _RealType __cx = 2 * __m + _M_d;\n \t  _M_scx = std::sqrt(__cx / 2);\n@@ -972,7 +972,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t  }\n \n \t\t__reject = (__w - __e - __x * _M_lm_thr\n-\t\t\t    > _M_lfm - std::tr1::lgamma(__x + __m + 1));\n+\t\t\t    > _M_lfm - std::_GLIBCXX_TR1::lgamma(__x + __m + 1));\n \n \t\t__reject |= __x + __m >= __thr;\n \n@@ -1063,11 +1063,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  const _RealType __d1x =\n \t    std::sqrt(__np * __1p * std::log(32 * __np\n \t\t\t\t\t     / (81 * __pi_4 * __1p)));\n-\t  _M_d1 = std::tr1::round(std::max(_RealType(1), __d1x));\n+\t  _M_d1 = std::_GLIBCXX_TR1::round(std::max(_RealType(1), __d1x));\n \t  const _RealType __d2x =\n \t    std::sqrt(__np * __1p * std::log(32 * _M_t * __1p\n \t\t\t\t\t     / (__pi_4 * __pa)));\n-\t  _M_d2 = std::tr1::round(std::max(_RealType(1), __d2x));\n+\t  _M_d2 = std::_GLIBCXX_TR1::round(std::max(_RealType(1), __d2x));\n \t  \n \t  // sqrt(pi / 2)\n \t  const _RealType __spi_2 = 1.2533141373155002512078826424055226L;\n@@ -1083,8 +1083,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t  const _RealType __s2s = _M_s2 * _M_s2;\n \t  _M_s = (_M_a123 + 2 * __s2s / _M_d2\n \t\t  * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));\n-\t  _M_lf = (std::tr1::lgamma(__np + 1)\n-\t\t   + std::tr1::lgamma(_M_t - __np + 1));\n+\t  _M_lf = (std::_GLIBCXX_TR1::lgamma(__np + 1)\n+\t\t   + std::_GLIBCXX_TR1::lgamma(_M_t - __np + 1));\n \t  _M_lp1p = std::log(__pa / __1p);\n \n \t  _M_q = -std::log(1 - (__p12 - __pa) / __1p);\n@@ -1212,8 +1212,8 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\tif (!__reject)\n \t\t  {\n \t\t    const _RealType __lfx =\n-\t\t      std::tr1::lgamma(__np + __x + 1)\n-\t\t      + std::tr1::lgamma(_M_t - (__np + __x) + 1);\n+\t\t      std::_GLIBCXX_TR1::lgamma(__np + __x + 1)\n+\t\t      + std::_GLIBCXX_TR1::lgamma(_M_t - (__np + __x) + 1);\n \t\t    __reject = __v > _M_lf - __lfx + __x * _M_lp1p;\n \t\t  }\n "}, {"sha": "96e2b27cd6c6119a2ab6259326fcd0859b636c7e", "filename": "libstdc++-v3/include/tr1/ref_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fref_fwd.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -40,7 +40,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n template<typename _Tp>\n   class reference_wrapper;"}, {"sha": "65600600f95cbfd656f8980fb167ad2e55b3c934", "filename": "libstdc++-v3/include/tr1/regex", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fregex?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,37 @@\n+// class template regex -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file tr1/regex\n+*  This is a TR1 C++ Library header.\n+*/\n+\n+#ifndef _TR1_REGEX\n+#define _TR1_REGEX 1\n+\n+#endif"}, {"sha": "9410d71c47f280f33ddd75d139dd95601a5c495b", "filename": "libstdc++-v3/include/tr1/repeat.h", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frepeat.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // TR1 code repetition -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n // Written by Douglas Gregor <doug.gregor -at- gmail.com>\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -115,9 +115,9 @@\n #define _GLIBCXX_ARGS_SHIFTED\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1;\n@@ -173,9 +173,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2;\n@@ -230,9 +230,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3;\n@@ -287,9 +287,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4;\n@@ -344,9 +344,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5;\n@@ -401,9 +401,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple), ::std::_GLIBCXX_TR1::get<5>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6;\n@@ -458,9 +458,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple), ::std::_GLIBCXX_TR1::get<5>(__tuple), ::std::_GLIBCXX_TR1::get<6>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7;\n@@ -515,9 +515,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple), ::std::_GLIBCXX_TR1::get<5>(__tuple), ::std::_GLIBCXX_TR1::get<6>(__tuple), ::std::_GLIBCXX_TR1::get<7>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8;\n@@ -572,9 +572,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8; _T9 _M_arg9;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8), _M_arg9(__a9)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple), ::std::tr1::get<8>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple), ::std::_GLIBCXX_TR1::get<5>(__tuple), ::std::_GLIBCXX_TR1::get<6>(__tuple), ::std::_GLIBCXX_TR1::get<7>(__tuple), ::std::_GLIBCXX_TR1::get<8>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T9> _CV(_T9, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8, typename __add_c_ref<_T9>::type __a9\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8), _M_arg9(__in._M_arg9)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8; _M_arg9 = __in._M_arg9;\n@@ -630,9 +630,9 @@\n #define _GLIBCXX_ARGS_SHIFTED __a1, __a2, __a3, __a4, __a5, __a6, __a7, __a8, __a9\n #define _GLIBCXX_BIND_MEMBERS _T1 _M_arg1; _T2 _M_arg2; _T3 _M_arg3; _T4 _M_arg4; _T5 _M_arg5; _T6 _M_arg6; _T7 _M_arg7; _T8 _M_arg8; _T9 _M_arg9; _T10 _M_arg10;\n #define _GLIBCXX_BIND_MEMBERS_INIT _M_arg1(__a1), _M_arg2(__a2), _M_arg3(__a3), _M_arg4(__a4), _M_arg5(__a5), _M_arg6(__a6), _M_arg7(__a7), _M_arg8(__a8), _M_arg9(__a9), _M_arg10(__a10)\n-#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::tr1::get<0>(__tuple), ::std::tr1::get<1>(__tuple), ::std::tr1::get<2>(__tuple), ::std::tr1::get<3>(__tuple), ::std::tr1::get<4>(__tuple), ::std::tr1::get<5>(__tuple), ::std::tr1::get<6>(__tuple), ::std::tr1::get<7>(__tuple), ::std::tr1::get<8>(__tuple), ::std::tr1::get<9>(__tuple)\n+#define _GLIBCXX_MU_GET_TUPLE_ARGS ::std::_GLIBCXX_TR1::get<0>(__tuple), ::std::_GLIBCXX_TR1::get<1>(__tuple), ::std::_GLIBCXX_TR1::get<2>(__tuple), ::std::_GLIBCXX_TR1::get<3>(__tuple), ::std::_GLIBCXX_TR1::get<4>(__tuple), ::std::_GLIBCXX_TR1::get<5>(__tuple), ::std::_GLIBCXX_TR1::get<6>(__tuple), ::std::_GLIBCXX_TR1::get<7>(__tuple), ::std::_GLIBCXX_TR1::get<8>(__tuple), ::std::_GLIBCXX_TR1::get<9>(__tuple)\n #define _GLIBCXX_BIND_V_TEMPLATE_ARGS(_CV) typename result_of<_Mu<_T1> _CV(_T1, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T2> _CV(_T2, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T3> _CV(_T3, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T4> _CV(_T4, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T5> _CV(_T5, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T6> _CV(_T6, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T7> _CV(_T7, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T8> _CV(_T8, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T9> _CV(_T9, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type, typename result_of<_Mu<_T10> _CV(_T10, tuple<_GLIBCXX_BIND_TEMPLATE_ARGS>)>::type\n-#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::tr1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T10>()(_M_arg10, ::std::tr1::tie(_GLIBCXX_BIND_ARGS))\n+#define _GLIBCXX_BIND_V_ARGS _Mu<_T1>()(_M_arg1, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T2>()(_M_arg2, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T3>()(_M_arg3, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T4>()(_M_arg4, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T5>()(_M_arg5, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T6>()(_M_arg6, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T7>()(_M_arg7, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T8>()(_M_arg8, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T9>()(_M_arg9, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS)), _Mu<_T10>()(_M_arg10, ::std::_GLIBCXX_TR1::tie(_GLIBCXX_BIND_ARGS))\n #define _GLIBCXX_TUPLE_ADD_CREF typename __add_c_ref<_T1>::type __a1, typename __add_c_ref<_T2>::type __a2, typename __add_c_ref<_T3>::type __a3, typename __add_c_ref<_T4>::type __a4, typename __add_c_ref<_T5>::type __a5, typename __add_c_ref<_T6>::type __a6, typename __add_c_ref<_T7>::type __a7, typename __add_c_ref<_T8>::type __a8, typename __add_c_ref<_T9>::type __a9, typename __add_c_ref<_T10>::type __a10\n #define _GLIBCXX_TUPLE_COPY_INIT _M_arg1(__in._M_arg1), _M_arg2(__in._M_arg2), _M_arg3(__in._M_arg3), _M_arg4(__in._M_arg4), _M_arg5(__in._M_arg5), _M_arg6(__in._M_arg6), _M_arg7(__in._M_arg7), _M_arg8(__in._M_arg8), _M_arg9(__in._M_arg9), _M_arg10(__in._M_arg10)\n #define _GLIBCXX_TUPLE_ASSIGN _M_arg1 = __in._M_arg1; _M_arg2 = __in._M_arg2; _M_arg3 = __in._M_arg3; _M_arg4 = __in._M_arg4; _M_arg5 = __in._M_arg5; _M_arg6 = __in._M_arg6; _M_arg7 = __in._M_arg7; _M_arg8 = __in._M_arg8; _M_arg9 = __in._M_arg9; _M_arg10 = __in._M_arg10;"}, {"sha": "0075cc7bd55fda14981bacd4bf5de824dfa32bba", "filename": "libstdc++-v3/include/tr1/stdlib.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fstdlib.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -1,6 +1,6 @@\n // TR1 stdlib.h -*- C++ -*-\n \n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -40,13 +40,13 @@\n \n #if _GLIBCXX_USE_C99\n \n-using std::tr1::atoll;\n-using std::tr1::strtoll;\n-using std::tr1::strtoull;\n+using std::_GLIBCXX_TR1::atoll;\n+using std::_GLIBCXX_TR1::strtoll;\n+using std::_GLIBCXX_TR1::strtoull;\n \n-using std::tr1::abs;\n+using std::_GLIBCXX_TR1::abs;\n #if !_GLIBCXX_USE_C99_LONG_LONG_DYNAMIC\n-using std::tr1::div;\n+using std::_GLIBCXX_TR1::div;\n #endif\n \n #endif"}, {"sha": "ea1d9e22797e680b6e26702decfa529a037e6a65", "filename": "libstdc++-v3/include/tr1/tuple", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -41,7 +41,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n  // An implementation specific class which is used in the tuple class\n  // when the tuple is not maximum possible size."}, {"sha": "4a9e494bad247143310430af06b73f39abdadc73", "filename": "libstdc++-v3/include/tr1/tuple_iterate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftuple_iterate.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -36,7 +36,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n /// @brief class tuple_size\n template<_GLIBCXX_TEMPLATE_PARAMS>"}, {"sha": "996ecf6fd93c5711a1fadb6607a113ec8dda6695", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -40,7 +40,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // For use in __in_array and elsewhere.\n   struct __sfinae_types"}, {"sha": "6f8e71a0c32471f8e74609abf557714c5c88fc63", "filename": "libstdc++-v3/include/tr1/type_traits_fwd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits_fwd.h?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -40,7 +40,7 @@\n // namespace std::tr1\n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   /// @brief  helper classes [4.3].\n   template<typename _Tp, _Tp __v>"}, {"sha": "3aca9f5ef9b92d1b728005f904024d13741b69bd", "filename": "libstdc++-v3/include/tr1/unordered_map", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_map?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -39,7 +39,7 @@\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // XXX When we get typedef templates these class definitions\n   // will be unnecessary."}, {"sha": "bd56ead804d0005c71532588cb99877cfcc7a005", "filename": "libstdc++-v3/include/tr1/unordered_set", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Funordered_set?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -39,7 +39,7 @@\n \n namespace std\n { \n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   // XXX When we get typedef templates these class definitions\n   // will be unnecessary."}, {"sha": "efe25031d5b2fc2634313d7fc76fa749d02141b2", "filename": "libstdc++-v3/include/tr1/utility", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Futility?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -34,11 +34,11 @@\n #ifndef _TR1_UTILITY\n #define _TR1_UTILITY 1\n \n-#include \"../utility\"\n+#include <utility>\n \n namespace std\n {\n-_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+_GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n \n   template<class _Tp> class tuple_size;\n   template<int _Int, class _Tp> class tuple_element;"}, {"sha": "7852233c23728ef0f0cfd9b138d6747de8e23af7", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -139,9 +139,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "d562d497cd170afb316b2c300c8e131d403df60e", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -180,9 +180,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "32c21b47559ad7a6d4b1c91eeef69a5310c07d4a", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -124,9 +124,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "538f2f571aa52aa40fdba71f52c4b8a3540ca1a2", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -174,9 +174,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "709b0dca0ec9ed78c84a43d2091b883340bef787", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all.cc", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,115 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 17.4.1.2 Headers\n+\n+// \"C\" headers\n+#include <cassert>\n+#include <ccomplex>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfenv>\n+#include <cfloat>\n+#include <cinttypes>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstdbool>\n+#include <cstddef>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctgmath>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <complex.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <fenv.h>\n+#include <float.h>\n+#include <inttypes.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <tgmath.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n+\n+// \"C++\" headers\n+#include <algorithm>\n+#include <array>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <random>\n+#include <regex>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <tuple>\n+#include <typeinfo>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <valarray>\n+#include <vector>"}, {"sha": "abb3a08668e3cdfbd4b6592f085a09e3702db0b8", "filename": "libstdc++-v3/testsuite/17_intro/headers/c++200x/all_multiple_inclusion.cc", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fheaders%2Fc%2B%2B200x%2Fall_multiple_inclusion.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,209 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 17.4.1.2 Headers\n+\n+// \"C\" headers\n+#include <cassert>\n+#include <ccomplex>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfenv>\n+#include <cfloat>\n+#include <cinttypes>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstdbool>\n+#include <cstddef>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctgmath>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <complex.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <fenv.h>\n+#include <float.h>\n+#include <inttypes.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <tgmath.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n+\n+// \"C++\" headers\n+#include <algorithm>\n+#include <array>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <random>\n+#include <regex>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <tuple>\n+#include <typeinfo>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+\n+\n+// \"C\" headers\n+#include <cassert>\n+#include <ccomplex>\n+#include <cctype>\n+#include <cerrno>\n+#include <cfenv>\n+#include <cfloat>\n+#include <cinttypes>\n+#include <ciso646>\n+#include <climits>\n+#include <clocale>\n+#include <cmath>\n+#include <csetjmp>\n+#include <csignal>\n+#include <cstdarg>\n+#include <cstdbool>\n+#include <cstddef>\n+#include <cstdint>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <cstring>\n+#include <ctgmath>\n+#include <ctime>\n+#include <cwchar>\n+#include <cwctype>\n+\n+// \"C\" compatibility headers\n+#include <assert.h>\n+#include <complex.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <fenv.h>\n+#include <float.h>\n+#include <inttypes.h>\n+#include <iso646.h>\n+#include <limits.h>\n+#include <locale.h>\n+#include <math.h>\n+#include <setjmp.h>\n+#include <signal.h>\n+#include <stdarg.h>\n+#include <stdbool.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <tgmath.h>\n+#include <time.h>\n+#include <wchar.h>\n+#include <wctype.h>\n+\n+// \"C++\" headers\n+#include <algorithm>\n+#include <array>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <random>\n+#include <regex>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <tuple>\n+#include <typeinfo>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <valarray>\n+#include <vector>"}, {"sha": "4d5cdfc47b7e7450279bc8959ff65a6401701856", "filename": "libstdc++-v3/testsuite/17_intro/using_namespace_std_tr1_neg.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Fusing_namespace_std_tr1_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <algorithm>\n+#include <array>\n+#include <bitset>\n+#include <complex>\n+#include <deque>\n+#include <exception>\n+#include <fstream>\n+#include <functional>\n+#include <iomanip>\n+#include <ios>\n+#include <iosfwd>\n+#include <iostream>\n+#include <istream>\n+#include <iterator>\n+#include <limits>\n+#include <list>\n+#include <locale>\n+#include <map>\n+#include <memory>\n+#include <new>\n+#include <numeric>\n+#include <ostream>\n+#include <queue>\n+#include <random>\n+#include <regex>\n+#include <set>\n+#include <sstream>\n+#include <stack>\n+#include <stdexcept>\n+#include <streambuf>\n+#include <string>\n+#include <tuple>\n+#include <typeinfo>\n+#include <type_traits>\n+#include <unordered_map>\n+#include <unordered_set>\n+#include <utility>\n+#include <valarray>\n+#include <vector>\n+\n+namespace gnu\n+{\n+  using namespace std::tr1;  // { dg-error \"is not a namespace-name\" }\n+}\n+\n+// { dg-error \"expected namespace-name before\" \"\" { target *-*-* } 64 } "}, {"sha": "219346c154687366cb1080d5f816662b54f387bc", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdbool/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdbool%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdbool>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "49442856f59edfc3c8b670949b36ce23a7b4e65b", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdint/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdint>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "cf1684ac4e1532d62e282e0a4efa74bf73f29a5a", "filename": "libstdc++-v3/testsuite/18_support/headers/cstdint/types_std_c++0x.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fheaders%2Fcstdint%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,58 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <cstdint>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_STDINT_TR1\n+\n+  typedef std::int8_t          my_int8_t;\n+  typedef std::int16_t         my_int16_t;\n+  typedef std::int32_t         my_int32_t;\n+  typedef std::int64_t         my_int64_t;\n+  typedef std::int_fast8_t     my_int_fast8_t;\n+  typedef std::int_fast16_t    my_int_fast16_t;\n+  typedef std::int_fast32_t    my_int_fast32_t;\n+  typedef std::int_fast64_t    my_int_fast64_t;\t\n+  typedef std::int_least8_t    my_int_least8_t;\n+  typedef std::int_least16_t   my_int_least16_t;\n+  typedef std::int_least32_t   my_int_least32_t;\n+  typedef std::int_least64_t   my_int_least64_t;\n+  typedef std::intmax_t        my_intmax_t;\n+  typedef std::intptr_t        my_intptr_t;\n+  typedef std::uint8_t         my_uint8_t;\n+  typedef std::uint16_t        my_uint16_t;\n+  typedef std::uint32_t        my_uint32_t;\n+  typedef std::uint64_t        my_uint64_t;\n+  typedef std::uint_fast8_t    my_uint_fast8_t;\n+  typedef std::uint_fast16_t   my_uint_fast16_t;\n+  typedef std::uint_fast32_t   my_uint_fast32_t;\n+  typedef std::uint_fast64_t   my_uint_fast64_t;\t\n+  typedef std::uint_least8_t   my_uint_least8_t;\n+  typedef std::uint_least16_t  my_uint_least16_t;\n+  typedef std::uint_least32_t  my_uint_least32_t;\n+  typedef std::uint_least64_t  my_uint_least64_t;\n+  typedef std::uintmax_t       my_uintmax_t;\n+  typedef std::uintptr_t       my_uintptr_t;\n+  \n+#endif\n+}"}, {"sha": "04aba8d26cb2ec23eee96382ea6e9e75b83ee2d5", "filename": "libstdc++-v3/testsuite/20_util/enable_shared_from_this/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fenable_shared_from_this%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <memory>\n+\n+template class std::enable_shared_from_this<int>;"}, {"sha": "56e9b83253a6bd4c596488c7ac964c26386a8712", "filename": "libstdc++-v3/testsuite/20_util/headers/functional/types_std_c++0x.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <functional>\n+\n+namespace gnu\n+{\n+  using std::bad_function_call;\n+}"}, {"sha": "e5d73e548d73d7bdaa1d8cffec59882220053f73", "filename": "libstdc++-v3/testsuite/20_util/headers/functional/using_namespace_std_placeholders.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fusing_namespace_std_placeholders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fusing_namespace_std_placeholders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ffunctional%2Fusing_namespace_std_placeholders.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <functional>\n+\n+namespace gnu\n+{\n+  using namespace std::placeholders;\n+}"}, {"sha": "ac2c4b93a78dd3c8e2a931e1be773d898d480232", "filename": "libstdc++-v3/testsuite/20_util/headers/memory/types_std_c++0x.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Fmemory%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+\n+namespace gnu\n+{\n+  using std::bad_weak_ptr;\n+}"}, {"sha": "4bee92dc41751f4eadab74181c64ac3a227feec8", "filename": "libstdc++-v3/testsuite/20_util/headers/type_traits/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "451db9c20a6a355e119aa1e711739f97f472502e", "filename": "libstdc++-v3/testsuite/20_util/headers/type_traits/types_std_c++0x.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fheaders%2Ftype_traits%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <type_traits>\n+\n+namespace gnu\n+{\n+  using std::true_type;\n+  using std::false_type;\n+}"}, {"sha": "ea520c852cb054e0ccd0b3fceacca17d339422e2", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <memory>\n+\n+template class std::shared_ptr<int>;"}, {"sha": "ce8a4377a41e5fd61126d5af182dfed03915c266", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <memory>\n+\n+template class std::weak_ptr<int>;"}, {"sha": "82b1d4cef763a3d6e0939d01bc0d1f77d58a01e5", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/explicit_instantiation.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <array>\n+\n+template class std::array<int, 5>;"}, {"sha": "dcb804256fe0cf99ff8c84f4f01cf5bd875faa7f", "filename": "libstdc++-v3/testsuite/23_containers/hash/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fhash%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <functional>\n+\n+template class std::hash<bool>;"}, {"sha": "99dd2d6539bdb2c3a3ad6134cea7bba449757c24", "filename": "libstdc++-v3/testsuite/23_containers/headers/array/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Farray%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <array>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "e3f81050dfa624abbc67ac9b5c7f163c428ac43e", "filename": "libstdc++-v3/testsuite/23_containers/headers/tuple/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <tuple>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "b9ce77490de533d594896a60c270e747671ec0ec", "filename": "libstdc++-v3/testsuite/23_containers/headers/tuple/types_std_c++0x.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Ftuple%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <tuple>\n+\n+namespace gnu\n+{\n+  using std::ignore;\n+}"}, {"sha": "4bb4f90a68c25a72330ebe02c1f6e32fb102fb2f", "filename": "libstdc++-v3/testsuite/23_containers/headers/unordered_map/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_map%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <unordered_map>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "052d860b0d3fca283ee75be7dbb660b17c25837d", "filename": "libstdc++-v3/testsuite/23_containers/headers/unordered_set/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fheaders%2Funordered_set%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <unordered_set>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "67aabce389909e91ed68be452d2f3fc69650f83d", "filename": "libstdc++-v3/testsuite/23_containers/tuple/requirements/explicit_instantiation.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Ftuple%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,33 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <tr1/tuple>\n+\n+template class std::tuple<short, int, double>;"}, {"sha": "ab5b41cb4ca90c66582f4a8b9bd89a0416d75a5e", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <unordered_map>\n+\n+template class std::unordered_map<int, float>;"}, {"sha": "e0f2f12eeee645bca2a96f4b29e473469b9ef6ff", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <unordered_map>\n+\n+template class std::unordered_multimap<int, float>;"}, {"sha": "d51c8095f2d30c8e371652078e61385abeb4f61f", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <unordered_set>\n+\n+template class std::unordered_multiset<int>;"}, {"sha": "262c4266f07b3ec0f5aab44502a7d2e6b45ba932", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/requirements/explicit_instantiation.cc", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Frequirements%2Fexplicit_instantiation.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,24 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <unordered_set>\n+\n+template class std::unordered_set<int>;"}, {"sha": "6ba6ab22591c81f1ef9daae410fd743fb6e80dc4", "filename": "libstdc++-v3/testsuite/26_numerics/headers/ccomplex/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fccomplex%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ccomplex>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "62f3649ef13f4b9064e68b20db1fd3f20fe0a683", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cfenv/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cfenv>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "1f483ebc2e8ecd09cc22a7f519654d1ffdb76307", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cfenv/types_std_c++0x.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcfenv%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this library; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+// Boston, MA 02110-1301, USA.\n+\n+#include <cfenv>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_FENV_TR1\n+\n+  typedef std::fenv_t     my_fenv_t;\n+  typedef std::fexcept_t  my_fexcept_t;\n+  \n+#endif\n+}"}, {"sha": "cbe001c6cc51be07479f8f9bb68ea5c6ba6a4d04", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/types_std_c++0x.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,32 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cmath>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_MATH_TR1\n+\n+  typedef std::double_t  my_double_t;\n+  typedef std::float_t   my_float_t;\n+  \n+#endif\n+}"}, {"sha": "520b199315052d291ea4da8c198d3433c1c26623", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cstdlib/types_std_c++0x.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcstdlib%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,35 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cstdlib>\n+\n+#if _GLIBCXX_HOSTED\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99\n+\n+  typedef std::lldiv_t     my_lldiv_t;\n+  \n+#endif\n+}\n+\n+#endif"}, {"sha": "170bdc571f4cf4e8bc6b4abb0f066130fb4380f5", "filename": "libstdc++-v3/testsuite/26_numerics/headers/ctgmath/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fctgmath%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ctgmath>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "e3f81050dfa624abbc67ac9b5c7f163c428ac43e", "filename": "libstdc++-v3/testsuite/26_numerics/headers/random/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <tuple>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "bc422dac80b0642fa65cb896cc90c140bda85143", "filename": "libstdc++-v3/testsuite/26_numerics/headers/random/types_std_c++0x.cc", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Frandom%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,28 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <random>\n+\n+namespace gnu\n+{\n+  using std::random_device;\n+  using std::bernoulli_distribution;\n+}"}, {"sha": "a81cc0c38ed16d9b2e01835ed5c82dac0a05623d", "filename": "libstdc++-v3/testsuite/27_io/headers/cinttypes/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cinttypes>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "de427a848cd3ff05b72483a55f06a3e1db229f3c", "filename": "libstdc++-v3/testsuite/27_io/headers/cinttypes/types_std_c++0x.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fcinttypes%2Ftypes_std_c%2B%2B0x.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=c++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <cinttypes>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_INTTYPES_TR1\n+\n+  typedef std::imaxdiv_t  my_imaxdiv_t;\n+  \n+#endif\n+}"}, {"sha": "0f5687077cfd84b8a2cbd21796877afe7bfb706e", "filename": "libstdc++-v3/testsuite/28_regex/headers/regex/std_c++0x_neg.cc", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Fheaders%2Fregex%2Fstd_c%2B%2B0x_neg.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <regex>  // { dg-excess-errors \"In file included from\" }\n+\n+// { dg-error \"upcoming ISO\" \"\" { target *-*-* } 36 } \n+\n+\n+"}, {"sha": "71a6bd8fb322f835768a0d51bc0cb7a5049af476", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -128,9 +128,13 @@ GLIBCXX_BUILD_PCH_TRUE = @GLIBCXX_BUILD_PCH_TRUE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE = @GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@\n GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE = @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@\n GLIBCXX_C_HEADERS_C_FALSE = @GLIBCXX_C_HEADERS_C_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_FALSE = @GLIBCXX_C_HEADERS_C_GLOBAL_FALSE@\n+GLIBCXX_C_HEADERS_C_GLOBAL_TRUE = @GLIBCXX_C_HEADERS_C_GLOBAL_TRUE@\n GLIBCXX_C_HEADERS_C_STD_FALSE = @GLIBCXX_C_HEADERS_C_STD_FALSE@\n GLIBCXX_C_HEADERS_C_STD_TRUE = @GLIBCXX_C_HEADERS_C_STD_TRUE@\n GLIBCXX_C_HEADERS_C_TRUE = @GLIBCXX_C_HEADERS_C_TRUE@\n+GLIBCXX_C_HEADERS_EXTRA_FALSE = @GLIBCXX_C_HEADERS_EXTRA_FALSE@\n+GLIBCXX_C_HEADERS_EXTRA_TRUE = @GLIBCXX_C_HEADERS_EXTRA_TRUE@\n GLIBCXX_HOSTED_FALSE = @GLIBCXX_HOSTED_FALSE@\n GLIBCXX_HOSTED_TRUE = @GLIBCXX_HOSTED_TRUE@\n GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@"}, {"sha": "24fcfa4f633e0247b2127ac1b48efa38df0f988a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/types_std_tr1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes_std_tr1.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "previous_filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/types.cc"}, {"sha": "2d557c9212f7dca80a5e144763793f890dd0527a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/types_std_tr1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcinttypes%2Ftypes_std_tr1.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "previous_filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cinttypes/types.cc"}, {"sha": "dff4b9d2f4c14535a4c68830e356c7cdefbc48c4", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/types_std_tr1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Ftypes_std_tr1.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "previous_filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/types.cc"}, {"sha": "d715973980339230de8bf2ccfc7c3c0d83a54337", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdint/types_std_tr1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes_std_tr1.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "previous_filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdint/types.cc"}, {"sha": "aa1e21dd92c229d343c0a1424329727bccc42db8", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/types_std_tr1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdlib%2Ftypes_std_tr1.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "previous_filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdlib/types.cc"}, {"sha": "633b8fb6e01fffdeca2bb14a2dcdbb664728da70", "filename": "libstdc++-v3/testsuite/tr1/headers.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af13a7a6ec9a50c39948ee5631a47c29c84fc6d1/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2Fheaders.cc?ref=af13a7a6ec9a50c39948ee5631a47c29c84fc6d1", "patch": "@@ -2,7 +2,7 @@\n \n // 2006-02-02  Paolo Carlini  <pcarlini@suse.de>\n //\n-// Copyright (C) 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,13 +21,15 @@\n // USA.\n \n #include <tr1/array>\n+#include <tr1/ccomplex>\n #include <tr1/cctype>\n #include <tr1/cfenv>\n #include <tr1/cfloat>\n #include <tr1/cinttypes>\n #include <tr1/climits>\n #include <tr1/cmath>\n #include <tr1/complex>\n+#include <tr1/complex.h>\n #include <tr1/cstdarg>\n #include <tr1/cstdbool>\n #include <tr1/cstdint>\n@@ -46,6 +48,7 @@\n #include <tr1/math.h>\n #include <tr1/memory>\n #include <tr1/random>\n+#include <tr1/regex>\n #include <tr1/stdarg.h>\n #include <tr1/stdbool.h>\n #include <tr1/stdint.h>"}]}