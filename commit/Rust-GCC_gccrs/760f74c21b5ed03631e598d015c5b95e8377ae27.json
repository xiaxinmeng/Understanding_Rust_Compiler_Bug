{"sha": "760f74c21b5ed03631e598d015c5b95e8377ae27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwZjc0YzIxYjVlZDAzNjMxZTU5OGQwMTVjNWI5NWU4Mzc3YWUyNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2017-08-01T21:07:04Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2017-08-01T21:07:04Z"}, "message": "i386: Add some naked attribute tests\n\nAdd some tests for implementing interrupt handlers with naked attribute.\n\n\t* gcc.dg/guality/pr25967-1.c: New test.\n\t* gcc.dg/guality/pr25967-2.c: Likewise.\n\t* gcc.dg/torture/pr25967-1.c: Likewise.\n\t* gcc.dg/torture/pr25967-2.c: Likewise.\n\nFrom-SVN: r250799", "tree": {"sha": "b4cf9e325feee2e8f67e05b114d70a7319da549e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4cf9e325feee2e8f67e05b114d70a7319da549e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/760f74c21b5ed03631e598d015c5b95e8377ae27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760f74c21b5ed03631e598d015c5b95e8377ae27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/760f74c21b5ed03631e598d015c5b95e8377ae27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/760f74c21b5ed03631e598d015c5b95e8377ae27/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bcd9eb2ec8343dbcd8b1bb58ca483340ef492c"}], "stats": {"total": 298, "additions": 298, "deletions": 0}, "files": [{"sha": "e58fe65c60b7373957a38a750bd7f04a62dbb9ec", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=760f74c21b5ed03631e598d015c5b95e8377ae27", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.dg/guality/pr25967-1.c: New test.\n+\t* gcc.dg/guality/pr25967-2.c: Likewise.\n+\t* gcc.dg/torture/pr25967-1.c: Likewise.\n+\t* gcc.dg/torture/pr25967-2.c: Likewise.\n+\n 2017-08-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/81654"}, {"sha": "01d97fe612e18b6df6520ef30db4f52ed0fb208d", "filename": "gcc/testsuite/gcc.dg/guality/pr25967-1.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-1.c?ref=760f74c21b5ed03631e598d015c5b95e8377ae27", "patch": "@@ -0,0 +1,80 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define ERROR\t\t0x12345670\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#ifdef __x86_64__\n+# define STACK_POINTER\t\"rsp\"\n+# define WORD_SIZE\t\"8\"\n+#else\n+# define STACK_POINTER\t\"esp\"\n+# define WORD_SIZE\t\"4\"\n+#endif\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  struct interrupt_frame *frame;\n+  uword_t error;\n+  asm volatile (\"lea \" WORD_SIZE \"(%%\" STACK_POINTER \"), %0\\n\\t\"\n+\t\t\"mov (%%\" STACK_POINTER \"), %1\" \n+\t\t: \"=r\" (frame), \"=r\" (error) :); \n+  if (ERROR != error)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (IP != frame->ip)\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tpush\t$\" STRING (ERROR) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 46 \"error\" \"0x12345670\" } } */\n+/* { dg-final { gdb-test 46 \"frame->ip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 46 \"frame->cs\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 46 \"frame->flags\" \"0x12345673\" } } */\n+/* { dg-final { gdb-test 46 \"frame->sp\" \"0x12345674\" } } */\n+/* { dg-final { gdb-test 46 \"frame->ss\" \"0x12345675\" } } */"}, {"sha": "a8bdf9f546d02ee21cc808608e8721ebb836f25d", "filename": "gcc/testsuite/gcc.dg/guality/pr25967-2.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr25967-2.c?ref=760f74c21b5ed03631e598d015c5b95e8377ae27", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-g -mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#ifdef __x86_64__\n+# define STACK_POINTER\t\"rsp\"\n+# define WORD_SIZE\t\"8\"\n+#else\n+# define STACK_POINTER\t\"esp\"\n+# define WORD_SIZE\t\"4\"\n+#endif\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  struct interrupt_frame *frame;\n+  asm volatile (\"lea (%%\" STACK_POINTER \"), %0\" : \"=r\" (frame) : ); \n+  if (IP != frame->ip)\t\t/* BREAK */\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}\n+\n+/* { dg-final { gdb-test 42 \"frame->ip\" \"0x12345671\" } } */\n+/* { dg-final { gdb-test 42 \"frame->cs\" \"0x12345672\" } } */\n+/* { dg-final { gdb-test 42 \"frame->flags\" \"0x12345673\" } } */\n+/* { dg-final { gdb-test 42 \"frame->sp\" \"0x12345674\" } } */\n+/* { dg-final { gdb-test 42 \"frame->ss\" \"0x12345675\" } } */"}, {"sha": "c504363030d0c7b93e15f2fde287f38cc3ba03b6", "filename": "gcc/testsuite/gcc.dg/torture/pr25967-1.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-1.c?ref=760f74c21b5ed03631e598d015c5b95e8377ae27", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define ERROR\t\t0x12345670\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#ifdef __x86_64__\n+# define STACK_POINTER\t\"rsp\"\n+# define WORD_SIZE\t\"8\"\n+#else\n+# define STACK_POINTER\t\"esp\"\n+# define WORD_SIZE\t\"4\"\n+#endif\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  struct interrupt_frame *frame;\n+  uword_t error;\n+  asm volatile (\"lea \" WORD_SIZE \"(%%\" STACK_POINTER \"), %0\\n\\t\"\n+\t\t\"mov (%%\" STACK_POINTER \"), %1\" \n+\t\t: \"=r\" (frame), \"=r\" (error) :); \n+  if (ERROR != error)\n+    __builtin_abort ();\n+  if (IP != frame->ip)\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tpush\t$\" STRING (ERROR) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}"}, {"sha": "3e27dd51aa2beb6f68679d1153c8cfeca402394c", "filename": "gcc/testsuite/gcc.dg/torture/pr25967-2.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/760f74c21b5ed03631e598d015c5b95e8377ae27/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr25967-2.c?ref=760f74c21b5ed03631e598d015c5b95e8377ae27", "patch": "@@ -0,0 +1,66 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-mgeneral-regs-only\" } */\n+\n+extern void exit (int);\n+\n+typedef unsigned int uword_t __attribute__ ((mode (__word__)));\n+\n+#define IP\t\t0x12345671\n+#define CS\t\t0x12345672\n+#define FLAGS\t\t0x12345673\n+#define SP\t\t0x12345674\n+#define SS\t\t0x12345675\n+\n+#ifdef __x86_64__\n+# define STACK_POINTER\t\"rsp\"\n+# define WORD_SIZE\t\"8\"\n+#else\n+# define STACK_POINTER\t\"esp\"\n+# define WORD_SIZE\t\"4\"\n+#endif\n+\n+#define STRING(x)\tXSTRING(x)\n+#define XSTRING(x)\t#x\n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) XSTRING (prefix) cname\n+\n+struct interrupt_frame\n+{\n+  uword_t ip;\n+  uword_t cs;\n+  uword_t flags;\n+  uword_t sp;\n+  uword_t ss;\n+};\n+\n+__attribute__((naked, used))\n+void\n+fn (void)\n+{\n+  struct interrupt_frame *frame;\n+  asm volatile (\"lea (%%\" STACK_POINTER \"), %0\" : \"=r\" (frame) : ); \n+  if (IP != frame->ip)\n+    __builtin_abort ();\n+  if (CS != frame->cs)\n+    __builtin_abort ();\n+  if (FLAGS != frame->flags)\n+    __builtin_abort ();\n+  if (SP != frame->sp)\n+    __builtin_abort ();\n+  if (SS != frame->ss)\n+    __builtin_abort ();\n+\n+  exit (0);\n+}\n+\n+int\n+main ()\n+{\n+  asm (\"push\t$\" STRING (SS) \";\t\t\\\n+\tpush\t$\" STRING (SP) \";\t\t\\\n+\tpush\t$\" STRING (FLAGS) \";\t\t\\\n+\tpush\t$\" STRING (CS) \";\t\t\\\n+\tpush\t$\" STRING (IP) \";\t\t\\\n+\tjmp\t \" ASMNAME (\"fn\"));\n+  return 0;\n+}"}]}