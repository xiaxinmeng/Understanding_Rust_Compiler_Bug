{"sha": "ddb82555b422eb175471a3f4df40b27f872ce9bf", "node_id": "C_kwDOANBUbNoAKGRkYjgyNTU1YjQyMmViMTc1NDcxYTNmNGRmNDBiMjdmODcyY2U5YmY", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-04-01T22:12:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-18T08:41:05Z"}, "message": "[Ada] Crash building VSS with compiler built with assertions\n\nWhen a tagged type T has aspect String_Literal, a derived type defines a\nnull extension T2, and the context to resolve the use of an object of\ntype T2 where the string literal is applicable is a class-wide type the\nfrontend crashes trying to evaluate if the object is a null extension.\nThis problem does not reproduce when the compiler is built with\nassertions disabled.\n\ngcc/ada/\n\n\t* sem_ch6.adb (Find_Corresponding_Spec): Avoid calling\n\tIs_Null_Extension with a class-wide type entity.\n\t(Overrides_Visible_Function): Handle alias entities.\n\t* sem_res.adb (Has_Applicable_User_Defined_Literal): Conversion\n\tnot needed if the result type of the call is class-wide or if\n\tthe result type matches the context type.\n\t* sem_util.ads (Is_Null_Extension): Adding documentation.\n\t(Is_Null_Extension_Of): Adding documentation.\n\t* sem_util.adb (Is_Null_Extension): Adding assertion.\n\t(Is_Null_Extension_Of): Adding assertions.", "tree": {"sha": "a90e319e3ac0acb470992971f8a3f1c4cb0d523e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a90e319e3ac0acb470992971f8a3f1c4cb0d523e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddb82555b422eb175471a3f4df40b27f872ce9bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb82555b422eb175471a3f4df40b27f872ce9bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddb82555b422eb175471a3f4df40b27f872ce9bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddb82555b422eb175471a3f4df40b27f872ce9bf/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "337c80a6bcf248f021e9731bba7543fb5bfb3553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337c80a6bcf248f021e9731bba7543fb5bfb3553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337c80a6bcf248f021e9731bba7543fb5bfb3553"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "a5373583207b4971aa8c6c4295bfe0cc575eadff", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ddb82555b422eb175471a3f4df40b27f872ce9bf", "patch": "@@ -9867,7 +9867,8 @@ package body Sem_Ch6 is\n                  and then Ada_Version >= Ada_2005\n                  and then not Comes_From_Source (E)\n                  and then Has_Controlling_Result (E)\n-                 and then Is_Null_Extension (Etype (E))\n+                 and then (not Is_Class_Wide_Type (Etype (E))\n+                            and then Is_Null_Extension (Etype (E)))\n                  and then Comes_From_Source (Spec)\n                then\n                   Set_Has_Completion (E, False);\n@@ -11265,7 +11266,8 @@ package body Sem_Ch6 is\n \n             function Overrides_Private_Part_Op return Boolean is\n                Over_Decl : constant Node_Id :=\n-                             Unit_Declaration_Node (Overridden_Operation (S));\n+                             Unit_Declaration_Node\n+                               (Ultimate_Alias (Overridden_Operation (S)));\n                Subp_Decl : constant Node_Id := Unit_Declaration_Node (S);\n \n             begin"}, {"sha": "060fcfc55087a962c714cb858840c7b87695f040", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=ddb82555b422eb175471a3f4df40b27f872ce9bf", "patch": "@@ -559,7 +559,12 @@ package body Sem_Res is\n \n          Set_Etype (Call, Etype (Callee));\n \n-         if Base_Type (Etype (Call)) /= Base_Type (Typ) then\n+         --  Conversion not needed if the result type of the call is class-wide\n+         --  or if the result type matches the context type.\n+\n+         if not Is_Class_Wide_Type (Typ)\n+           and then Base_Type (Etype (Call)) /= Base_Type (Typ)\n+         then\n             --  Conversion may be needed in case of an inherited\n             --  aspect of a derived type. For a null extension, we\n             --  use a null extension aggregate instead because the"}, {"sha": "762fe48d1c961e7af9c329d2e5e90fa769db902c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ddb82555b422eb175471a3f4df40b27f872ce9bf", "patch": "@@ -19279,6 +19279,8 @@ package body Sem_Util is\n       Type_Decl : Node_Id;\n       Type_Def  : Node_Id;\n    begin\n+      pragma Assert (not Is_Class_Wide_Type (T));\n+\n       if Ignore_Privacy then\n          Type_Decl := Parent (Underlying_Type (Base_Type (T)));\n       else\n@@ -19311,7 +19313,10 @@ package body Sem_Util is\n         := Underlying_Type (Base_Type (Ancestor));\n       Descendant_Type : Entity_Id := Underlying_Type (Base_Type (Descendant));\n    begin\n+      pragma Assert (not Is_Class_Wide_Type (Descendant));\n+      pragma Assert (not Is_Class_Wide_Type (Ancestor));\n       pragma Assert (Descendant_Type /= Ancestor_Type);\n+\n       while Descendant_Type /= Ancestor_Type loop\n          if not Is_Null_Extension\n                   (Descendant_Type, Ignore_Privacy => True)"}, {"sha": "b6c70ca2300547709469aef75b96b1dadf9d64a2", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddb82555b422eb175471a3f4df40b27f872ce9bf/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ddb82555b422eb175471a3f4df40b27f872ce9bf", "patch": "@@ -2209,12 +2209,14 @@ package Sem_Util is\n    --  Given a tagged type, returns True if argument is a type extension\n    --  that introduces no new components (discriminant or nondiscriminant).\n    --  Ignore_Privacy should be True for use in implementing dynamic semantics.\n+   --  Cannot be called with class-wide types.\n \n    function Is_Null_Extension_Of\n      (Descendant, Ancestor : Entity_Id) return Boolean;\n    --  Given two tagged types, the first a descendant of the second,\n    --  returns True if every component of Descendant is inherited\n    --  (directly or indirectly) from Ancestor. Privacy is ignored.\n+   --  Cannot be called with class-wide types.\n \n    function Is_Null_Record_Definition (Record_Def : Node_Id) return Boolean;\n    --  Returns True for an N_Record_Definition node that has no user-defined"}]}