{"sha": "149e4e000e730dcc80071b5948b47d0ddc8970cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5ZTRlMDAwZTczMGRjYzgwMDcxYjU5NDhiNDdkMGRkYzg5NzBjZA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-03-19T22:40:13Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1993-03-19T22:40:13Z"}, "message": "If gas do not run mips-tfile.\n\nFrom-SVN: r3789", "tree": {"sha": "7c02e23654cb66326bd4214636025f1850bf10d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c02e23654cb66326bd4214636025f1850bf10d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149e4e000e730dcc80071b5948b47d0ddc8970cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149e4e000e730dcc80071b5948b47d0ddc8970cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149e4e000e730dcc80071b5948b47d0ddc8970cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149e4e000e730dcc80071b5948b47d0ddc8970cd/comments", "author": null, "committer": null, "parents": [{"sha": "5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eebe2eb038f42c58ae6c3b55a474c79df7f5ce2"}], "stats": {"total": 367, "additions": 184, "deletions": 183}, "files": [{"sha": "ad2acd65979f16d366651b3f475e4ca479997613", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 184, "deletions": 183, "changes": 367, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149e4e000e730dcc80071b5948b47d0ddc8970cd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149e4e000e730dcc80071b5948b47d0ddc8970cd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=149e4e000e730dcc80071b5948b47d0ddc8970cd", "patch": "@@ -226,6 +226,183 @@ extern char\t       *mktemp ();\n #define HALF_PIC_FINISH(STREAM)\n #endif\n \n+\f\n+/* Run-time compilation parameters selecting different hardware subsets.  */\n+\n+/* Macros used in the machine description to test the flags.  */\n+\n+\t\t\t\t\t/* Bits for real switches */\n+#define MASK_INT64\t0x00000001\t/* ints are 64 bits */\n+#define MASK_LONG64\t0x00000002\t/* longs are 64 bits */\n+#define MASK_LLONG128\t0x00000004\t/* long longs are 128 bits */\n+#define MASK_GPOPT\t0x00000008\t/* Optimize for global pointer */\n+#define MASK_GAS\t0x00000010\t/* Gas used instead of MIPS as */\n+#define MASK_NAME_REGS\t0x00000020\t/* Use MIPS s/w reg name convention */\n+#define MASK_STATS\t0x00000040\t/* print statistics to stderr */\n+#define MASK_MEMCPY\t0x00000080\t/* call memcpy instead of inline code*/\n+#define MASK_SOFT_FLOAT\t0x00000100\t/* software floating point */\n+#define MASK_FLOAT64\t0x00000200\t/* fp registers are 64 bits */\n+#define MASK_ABICALLS\t0x00000400\t/* emit .abicalls/.cprestore/.cpload */\n+#define MASK_HALF_PIC\t0x00000800\t/* Emit OSF-style pic refs to externs*/\n+#define MASK_LONG_CALLS\t0x00001000\t/* Always call through a register */\n+#define MASK_UNUSED1\t0x00002000\n+#define MASK_UNUSED2\t0x00004000\n+#define MASK_UNUSED3\t0x00008000\n+#define MASK_UNUSED4\t0x00010000\n+#define MASK_UNUSED5\t0x00020000\n+#define MASK_UNUSED6\t0x00040000\n+#define MASK_UNUSED7\t0x00080000\n+\n+\t\t\t\t\t/* Dummy switches used only in spec's*/\n+#define MASK_MIPS_TFILE\t0x00000000\t/* flag for mips-tfile usage */\n+\n+\t\t\t\t\t/* Debug switches, not documented */\n+#define MASK_DEBUG\t0x40000000\t/* Eliminate version # in .s file */\n+#define MASK_DEBUG_A\t0x20000000\t/* don't allow <label>($reg) addrs */\n+#define MASK_DEBUG_B\t0x10000000\t/* GO_IF_LEGITIMATE_ADDRESS debug */\n+#define MASK_DEBUG_C\t0x08000000\t/* don't expand seq, etc. */\n+#define MASK_DEBUG_D\t0x04000000\t/* don't do define_split's */\n+#define MASK_DEBUG_E\t0x02000000\t/* function_arg debug */\n+#define MASK_DEBUG_F\t0x01000000\t/* don't try to suppress load nop's */\n+#define MASK_DEBUG_G\t0x00800000\t/* don't support 64 bit arithmetic */\n+#define MASK_DEBUG_H\t0x00400000\t/* allow ints in FP registers */\n+#define MASK_DEBUG_I\t0x00200000\t/* unused */\n+#define MASK_DEBUG_J\t0x00100000\t/* unused */\n+\n+\t\t\t\t\t/* r4000 64 bit sizes */\n+#define TARGET_INT64\t\t(target_flags & MASK_INT64)\n+#define TARGET_LONG64\t\t(target_flags & MASK_LONG64)\n+#define TARGET_LLONG128\t\t(target_flags & MASK_LLONG128)\n+#define TARGET_FLOAT64\t\t(target_flags & MASK_FLOAT64)\n+\n+\t\t\t\t\t/* Mips vs. GNU assembler */\n+#define TARGET_GAS\t\t(target_flags & MASK_GAS)\n+#define TARGET_UNIX_ASM\t\t(!TARGET_GAS)\n+#define TARGET_MIPS_AS\t\tTARGET_UNIX_ASM\n+\n+\t\t\t\t\t/* Debug Mode */\n+#define TARGET_DEBUG_MODE\t(target_flags & MASK_DEBUG)\n+#define TARGET_DEBUG_A_MODE\t(target_flags & MASK_DEBUG_A)\n+#define TARGET_DEBUG_B_MODE\t(target_flags & MASK_DEBUG_B)\n+#define TARGET_DEBUG_C_MODE\t(target_flags & MASK_DEBUG_C)\n+#define TARGET_DEBUG_D_MODE\t(target_flags & MASK_DEBUG_D)\n+#define TARGET_DEBUG_E_MODE\t(target_flags & MASK_DEBUG_E)\n+#define TARGET_DEBUG_F_MODE\t(target_flags & MASK_DEBUG_F)\n+#define TARGET_DEBUG_G_MODE\t(target_flags & MASK_DEBUG_G)\n+#define TARGET_DEBUG_H_MODE\t(target_flags & MASK_DEBUG_H)\n+#define TARGET_DEBUG_I_MODE\t(target_flags & MASK_DEBUG_I)\n+#define TARGET_DEBUG_J_MODE\t(target_flags & MASK_DEBUG_J)\n+\n+\t\t\t\t\t/* Reg. Naming in .s ($21 vs. $a0) */\n+#define TARGET_NAME_REGS\t(target_flags & MASK_NAME_REGS)\n+\n+\t\t\t\t\t/* Optimize for Sdata/Sbss */\n+#define TARGET_GP_OPT\t\t(target_flags & MASK_GPOPT)\n+\n+\t\t\t\t\t/* print program statistics */\n+#define TARGET_STATS\t\t(target_flags & MASK_STATS)\n+\n+\t\t\t\t\t/* call memcpy instead of inline code */\n+#define TARGET_MEMCPY\t\t(target_flags & MASK_MEMCPY)\n+\n+\t\t\t\t\t/* .abicalls, etc from Pyramid V.4 */\n+#define TARGET_ABICALLS\t\t(target_flags & MASK_ABICALLS)\n+\n+\t\t\t\t\t/* OSF pic references to externs */\n+#define TARGET_HALF_PIC\t\t(target_flags & MASK_HALF_PIC)\n+\n+\t\t\t\t\t/* software floating point */\n+#define TARGET_SOFT_FLOAT\t(target_flags & MASK_SOFT_FLOAT)\n+#define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n+\n+\t\t\t\t\t/* always call through a register */\n+#define TARGET_LONG_CALLS\t(target_flags & MASK_LONG_CALLS)\n+\n+/* Macro to define tables used to set the flags.\n+   This is a list in braces of pairs in braces,\n+   each pair being { \"NAME\", VALUE }\n+   where VALUE is the bits to set or minus the bits to clear.\n+   An empty string NAME is used to identify the default VALUE.  */\n+\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  {\"int64\",\t\t  MASK_INT64 | MASK_LONG64},\t\t\t\\\n+  {\"long64\",\t\t  MASK_LONG64},\t\t\t\t\t\\\n+  {\"longlong128\",\t  MASK_INT64 | MASK_LONG64 | MASK_LLONG128},\t\\\n+  {\"mips-as\",\t\t -MASK_GAS},\t\t\t\t\t\\\n+  {\"gas\",\t\t  MASK_GAS},\t\t\t\t\t\\\n+  {\"rnames\",\t\t  MASK_NAME_REGS},\t\t\t\t\\\n+  {\"no-rnames\",\t\t -MASK_NAME_REGS},\t\t\t\t\\\n+  {\"gpOPT\",\t\t  MASK_GPOPT},\t\t\t\t\t\\\n+  {\"gpopt\",\t\t  MASK_GPOPT},\t\t\t\t\t\\\n+  {\"no-gpOPT\",\t\t -MASK_GPOPT},\t\t\t\t\t\\\n+  {\"no-gpopt\",\t\t -MASK_GPOPT},\t\t\t\t\t\\\n+  {\"stats\",\t\t  MASK_STATS},\t\t\t\t\t\\\n+  {\"no-stats\",\t\t -MASK_STATS},\t\t\t\t\t\\\n+  {\"memcpy\",\t\t  MASK_MEMCPY},\t\t\t\t\t\\\n+  {\"no-memcpy\",\t\t -MASK_MEMCPY},\t\t\t\t\t\\\n+  {\"mips-tfile\",\t  MASK_MIPS_TFILE},\t\t\t\t\\\n+  {\"no-mips-tfile\",\t -MASK_MIPS_TFILE},\t\t\t\t\\\n+  {\"soft-float\",\t  MASK_SOFT_FLOAT},\t\t\t\t\\\n+  {\"hard-float\",\t -MASK_SOFT_FLOAT},\t\t\t\t\\\n+  {\"fp64\",\t\t  MASK_FLOAT64},\t\t\t\t\\\n+  {\"fp32\",\t\t -MASK_FLOAT64},\t\t\t\t\\\n+  {\"abicalls\",\t\t  MASK_ABICALLS},\t\t\t\t\\\n+  {\"no-abicalls\",\t -MASK_ABICALLS},\t\t\t\t\\\n+  {\"half-pic\",\t\t  MASK_HALF_PIC},\t\t\t\t\\\n+  {\"no-half-pic\",\t -MASK_HALF_PIC},\t\t\t\t\\\n+  {\"long-calls\",\t  MASK_LONG_CALLS},\t\t\t\t\\\n+  {\"no-long-calls\",\t -MASK_LONG_CALLS},\t\t\t\t\\\n+  {\"debug\",\t\t  MASK_DEBUG},\t\t\t\t\t\\\n+  {\"debuga\",\t\t  MASK_DEBUG_A},\t\t\t\t\\\n+  {\"debugb\",\t\t  MASK_DEBUG_B},\t\t\t\t\\\n+  {\"debugc\",\t\t  MASK_DEBUG_C},\t\t\t\t\\\n+  {\"debugd\",\t\t  MASK_DEBUG_D},\t\t\t\t\\\n+  {\"debuge\",\t\t  MASK_DEBUG_E},\t\t\t\t\\\n+  {\"debugf\",\t\t  MASK_DEBUG_F},\t\t\t\t\\\n+  {\"debugg\",\t\t  MASK_DEBUG_G},\t\t\t\t\\\n+  {\"debugh\",\t\t  MASK_DEBUG_H},\t\t\t\t\\\n+  {\"debugi\",\t\t  MASK_DEBUG_I},\t\t\t\t\\\n+  {\"debugj\",\t\t  MASK_DEBUG_J},\t\t\t\t\\\n+  {\"\",\t\t\t  TARGET_DEFAULT}\t\t\t\t\\\n+}\n+\n+/* Default target_flags if no switches are specified  */\n+\n+#ifndef TARGET_DEFAULT\n+#define TARGET_DEFAULT 0\n+#endif\n+\n+/* This macro is similar to `TARGET_SWITCHES' but defines names of\n+   command options that have values.  Its definition is an\n+   initializer with a subgrouping for each command option.\n+\n+   Each subgrouping contains a string constant, that defines the\n+   fixed part of the option name, and the address of a variable. \n+   The variable, type `char *', is set to the variable part of the\n+   given option if the fixed part matches.  The actual option name\n+   is made by appending `-m' to the specified name.\n+\n+   Here is an example which defines `-mshort-data-NUMBER'.  If the\n+   given option is `-mshort-data-512', the variable `m88k_short_data'\n+   will be set to the string `\"512\"'.\n+\n+\textern char *m88k_short_data;\n+\t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n+\n+#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  { \"cpu=\",\t&mips_cpu_string\t},\t\t\t\t\\\n+  { \"ips\",\t&mips_isa_string\t}\t\t\t\t\\\n+}\n+\n+/* Macros to decide whether certain features are available or not,\n+   depending on the instruction set architecture level.  */\n+\n+#define BRANCH_LIKELY_P()\t(mips_isa >= 2)\n+#define HAVE_64BIT_P()\t\t(mips_isa >= 3)\n+#define HAVE_SQRT_P()\t\t(mips_isa >= 2)\n+\n \f\n /* Switch  Recognition by gcc.c.  Add -G xx support */\n \n@@ -381,25 +558,26 @@ while (0)\n    -mmips-tfile.  */\n \n #ifndef ASM_FINAL_SPEC\n-#ifndef CROSS_COMPILE\n+#if ((TARGET_CPU_DEFAULT | TARGET_DEFAULT) & MASK_GAS) != 0 || defined (CROSS_COMPILE)\n+\t\t\t\t/* GAS */\n #define ASM_FINAL_SPEC \"\\\n-%{!mgas: %{!mno-mips-tfile: \\\n+%{mmips-as: %{!mno-mips-tfile: \\\n \t\\n mips-tfile %{v*: -v} \\\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n \t\t%{.s:%i} %{!.s:%g.s}}}\"\n \n-#else\t\t\t\t/* CROSS_COMPILE */\n+#else\t\t\t\t/* not GAS, clean up after MIPS assembler */\n #define ASM_FINAL_SPEC \"\\\n-%{!mgas: %{mmips-tfile: \\\n+%{!mgas: %{!mno-mips-tfile: \\\n \t\\n mips-tfile %{v*: -v} \\\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n \t\t%{.s:%i} %{!.s:%g.s}}}\"\n \n-#endif\t/* CROSS_COMPILE */\n+#endif\t/* GAS */\n #endif\t/* ASM_FINAL_SPEC */\n \n /* Redefinition of libraries used.  Mips doesn't support normal\n@@ -463,7 +641,7 @@ while (0)\n \f\n /* Print subsidiary information on the compiler version in use.  */\n \n-#define MIPS_VERSION \"[AL 1.1, MM 35]\"\n+#define MIPS_VERSION \"[AL 1.1, MM 36]\"\n \n #ifndef MACHINE_TYPE\n #define MACHINE_TYPE \"BSD Mips\"\n@@ -665,183 +843,6 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_CONSTRUCTOR(file, name)\n #define ASM_OUTPUT_DESTRUCTOR(file, name)\n \n-\f\n-/* Run-time compilation parameters selecting different hardware subsets.  */\n-\n-/* Macros used in the machine description to test the flags.  */\n-\n-\t\t\t\t\t/* Bits for real switches */\n-#define MASK_INT64\t0x00000001\t/* ints are 64 bits */\n-#define MASK_LONG64\t0x00000002\t/* longs are 64 bits */\n-#define MASK_LLONG128\t0x00000004\t/* long longs are 128 bits */\n-#define MASK_GPOPT\t0x00000008\t/* Optimize for global pointer */\n-#define MASK_GAS\t0x00000010\t/* Gas used instead of MIPS as */\n-#define MASK_NAME_REGS\t0x00000020\t/* Use MIPS s/w reg name convention */\n-#define MASK_STATS\t0x00000040\t/* print statistics to stderr */\n-#define MASK_MEMCPY\t0x00000080\t/* call memcpy instead of inline code*/\n-#define MASK_SOFT_FLOAT\t0x00000100\t/* software floating point */\n-#define MASK_FLOAT64\t0x00000200\t/* fp registers are 64 bits */\n-#define MASK_ABICALLS\t0x00000400\t/* emit .abicalls/.cprestore/.cpload */\n-#define MASK_HALF_PIC\t0x00000800\t/* Emit OSF-style pic refs to externs*/\n-#define MASK_LONG_CALLS\t0x00001000\t/* Always call through a register */\n-#define MASK_UNUSED1\t0x00002000\n-#define MASK_UNUSED2\t0x00004000\n-#define MASK_UNUSED3\t0x00008000\n-#define MASK_UNUSED4\t0x00010000\n-#define MASK_UNUSED5\t0x00020000\n-#define MASK_UNUSED6\t0x00040000\n-#define MASK_UNUSED7\t0x00080000\n-\n-\t\t\t\t\t/* Dummy switches used only in spec's*/\n-#define MASK_MIPS_TFILE\t0x00000000\t/* flag for mips-tfile usage */\n-\n-\t\t\t\t\t/* Debug switches, not documented */\n-#define MASK_DEBUG\t0x40000000\t/* Eliminate version # in .s file */\n-#define MASK_DEBUG_A\t0x20000000\t/* don't allow <label>($reg) addrs */\n-#define MASK_DEBUG_B\t0x10000000\t/* GO_IF_LEGITIMATE_ADDRESS debug */\n-#define MASK_DEBUG_C\t0x08000000\t/* don't expand seq, etc. */\n-#define MASK_DEBUG_D\t0x04000000\t/* don't do define_split's */\n-#define MASK_DEBUG_E\t0x02000000\t/* function_arg debug */\n-#define MASK_DEBUG_F\t0x01000000\t/* don't try to suppress load nop's */\n-#define MASK_DEBUG_G\t0x00800000\t/* don't support 64 bit arithmetic */\n-#define MASK_DEBUG_H\t0x00400000\t/* allow ints in FP registers */\n-#define MASK_DEBUG_I\t0x00200000\t/* unused */\n-#define MASK_DEBUG_J\t0x00100000\t/* unused */\n-\n-\t\t\t\t\t/* r4000 64 bit sizes */\n-#define TARGET_INT64\t\t(target_flags & MASK_INT64)\n-#define TARGET_LONG64\t\t(target_flags & MASK_LONG64)\n-#define TARGET_LLONG128\t\t(target_flags & MASK_LLONG128)\n-#define TARGET_FLOAT64\t\t(target_flags & MASK_FLOAT64)\n-\n-\t\t\t\t\t/* Mips vs. GNU assembler */\n-#define TARGET_GAS\t\t(target_flags & MASK_GAS)\n-#define TARGET_UNIX_ASM\t\t(!TARGET_GAS)\n-#define TARGET_MIPS_AS\t\tTARGET_UNIX_ASM\n-\n-\t\t\t\t\t/* Debug Mode */\n-#define TARGET_DEBUG_MODE\t(target_flags & MASK_DEBUG)\n-#define TARGET_DEBUG_A_MODE\t(target_flags & MASK_DEBUG_A)\n-#define TARGET_DEBUG_B_MODE\t(target_flags & MASK_DEBUG_B)\n-#define TARGET_DEBUG_C_MODE\t(target_flags & MASK_DEBUG_C)\n-#define TARGET_DEBUG_D_MODE\t(target_flags & MASK_DEBUG_D)\n-#define TARGET_DEBUG_E_MODE\t(target_flags & MASK_DEBUG_E)\n-#define TARGET_DEBUG_F_MODE\t(target_flags & MASK_DEBUG_F)\n-#define TARGET_DEBUG_G_MODE\t(target_flags & MASK_DEBUG_G)\n-#define TARGET_DEBUG_H_MODE\t(target_flags & MASK_DEBUG_H)\n-#define TARGET_DEBUG_I_MODE\t(target_flags & MASK_DEBUG_I)\n-#define TARGET_DEBUG_J_MODE\t(target_flags & MASK_DEBUG_J)\n-\n-\t\t\t\t\t/* Reg. Naming in .s ($21 vs. $a0) */\n-#define TARGET_NAME_REGS\t(target_flags & MASK_NAME_REGS)\n-\n-\t\t\t\t\t/* Optimize for Sdata/Sbss */\n-#define TARGET_GP_OPT\t\t(target_flags & MASK_GPOPT)\n-\n-\t\t\t\t\t/* print program statistics */\n-#define TARGET_STATS\t\t(target_flags & MASK_STATS)\n-\n-\t\t\t\t\t/* call memcpy instead of inline code */\n-#define TARGET_MEMCPY\t\t(target_flags & MASK_MEMCPY)\n-\n-\t\t\t\t\t/* .abicalls, etc from Pyramid V.4 */\n-#define TARGET_ABICALLS\t\t(target_flags & MASK_ABICALLS)\n-\n-\t\t\t\t\t/* OSF pic references to externs */\n-#define TARGET_HALF_PIC\t\t(target_flags & MASK_HALF_PIC)\n-\n-\t\t\t\t\t/* software floating point */\n-#define TARGET_SOFT_FLOAT\t(target_flags & MASK_SOFT_FLOAT)\n-#define TARGET_HARD_FLOAT\t(! TARGET_SOFT_FLOAT)\n-\n-\t\t\t\t\t/* always call through a register */\n-#define TARGET_LONG_CALLS\t(target_flags & MASK_LONG_CALLS)\n-\n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  {\"int64\",\t\t  MASK_INT64 | MASK_LONG64},\t\t\t\\\n-  {\"long64\",\t\t  MASK_LONG64},\t\t\t\t\t\\\n-  {\"longlong128\",\t  MASK_INT64 | MASK_LONG64 | MASK_LLONG128},\t\\\n-  {\"mips-as\",\t\t -MASK_GAS},\t\t\t\t\t\\\n-  {\"gas\",\t\t  MASK_GAS},\t\t\t\t\t\\\n-  {\"rnames\",\t\t  MASK_NAME_REGS},\t\t\t\t\\\n-  {\"no-rnames\",\t\t -MASK_NAME_REGS},\t\t\t\t\\\n-  {\"gpOPT\",\t\t  MASK_GPOPT},\t\t\t\t\t\\\n-  {\"gpopt\",\t\t  MASK_GPOPT},\t\t\t\t\t\\\n-  {\"no-gpOPT\",\t\t -MASK_GPOPT},\t\t\t\t\t\\\n-  {\"no-gpopt\",\t\t -MASK_GPOPT},\t\t\t\t\t\\\n-  {\"stats\",\t\t  MASK_STATS},\t\t\t\t\t\\\n-  {\"no-stats\",\t\t -MASK_STATS},\t\t\t\t\t\\\n-  {\"memcpy\",\t\t  MASK_MEMCPY},\t\t\t\t\t\\\n-  {\"no-memcpy\",\t\t -MASK_MEMCPY},\t\t\t\t\t\\\n-  {\"mips-tfile\",\t  MASK_MIPS_TFILE},\t\t\t\t\\\n-  {\"no-mips-tfile\",\t -MASK_MIPS_TFILE},\t\t\t\t\\\n-  {\"soft-float\",\t  MASK_SOFT_FLOAT},\t\t\t\t\\\n-  {\"hard-float\",\t -MASK_SOFT_FLOAT},\t\t\t\t\\\n-  {\"fp64\",\t\t  MASK_FLOAT64},\t\t\t\t\\\n-  {\"fp32\",\t\t -MASK_FLOAT64},\t\t\t\t\\\n-  {\"abicalls\",\t\t  MASK_ABICALLS},\t\t\t\t\\\n-  {\"no-abicalls\",\t -MASK_ABICALLS},\t\t\t\t\\\n-  {\"half-pic\",\t\t  MASK_HALF_PIC},\t\t\t\t\\\n-  {\"no-half-pic\",\t -MASK_HALF_PIC},\t\t\t\t\\\n-  {\"long-calls\",\t  MASK_LONG_CALLS},\t\t\t\t\\\n-  {\"no-long-calls\",\t -MASK_LONG_CALLS},\t\t\t\t\\\n-  {\"debug\",\t\t  MASK_DEBUG},\t\t\t\t\t\\\n-  {\"debuga\",\t\t  MASK_DEBUG_A},\t\t\t\t\\\n-  {\"debugb\",\t\t  MASK_DEBUG_B},\t\t\t\t\\\n-  {\"debugc\",\t\t  MASK_DEBUG_C},\t\t\t\t\\\n-  {\"debugd\",\t\t  MASK_DEBUG_D},\t\t\t\t\\\n-  {\"debuge\",\t\t  MASK_DEBUG_E},\t\t\t\t\\\n-  {\"debugf\",\t\t  MASK_DEBUG_F},\t\t\t\t\\\n-  {\"debugg\",\t\t  MASK_DEBUG_G},\t\t\t\t\\\n-  {\"debugh\",\t\t  MASK_DEBUG_H},\t\t\t\t\\\n-  {\"debugi\",\t\t  MASK_DEBUG_I},\t\t\t\t\\\n-  {\"debugj\",\t\t  MASK_DEBUG_J},\t\t\t\t\\\n-  {\"\",\t\t\t  TARGET_DEFAULT}\t\t\t\t\\\n-}\n-\n-/* Default target_flags if no switches are specified  */\n-\n-#ifndef TARGET_DEFAULT\n-#define TARGET_DEFAULT 0\n-#endif\n-\n-/* This macro is similar to `TARGET_SWITCHES' but defines names of\n-   command options that have values.  Its definition is an\n-   initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   fixed part of the option name, and the address of a variable. \n-   The variable, type `char *', is set to the variable part of the\n-   given option if the fixed part matches.  The actual option name\n-   is made by appending `-m' to the specified name.\n-\n-   Here is an example which defines `-mshort-data-NUMBER'.  If the\n-   given option is `-mshort-data-512', the variable `m88k_short_data'\n-   will be set to the string `\"512\"'.\n-\n-\textern char *m88k_short_data;\n-\t#define TARGET_OPTIONS { { \"short-data-\", &m88k_short_data } }  */\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  { \"cpu=\",\t&mips_cpu_string\t},\t\t\t\t\\\n-  { \"ips\",\t&mips_isa_string\t}\t\t\t\t\\\n-}\n-\n-/* Macros to decide whether certain features are available or not,\n-   depending on the instruction set architecture level.  */\n-\n-#define BRANCH_LIKELY_P()\t(mips_isa >= 2)\n-#define HAVE_64BIT_P()\t\t(mips_isa >= 3)\n-#define HAVE_SQRT_P()\t\t(mips_isa >= 2)\n-\n \f\n /* Target machine storage layout */\n "}]}