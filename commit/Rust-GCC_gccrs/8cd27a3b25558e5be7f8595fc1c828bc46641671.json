{"sha": "8cd27a3b25558e5be7f8595fc1c828bc46641671", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNkMjdhM2IyNTU1OGU1YmU3Zjg1OTVmYzFjODI4YmM0NjY0MTY3MQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-28T14:49:29Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-05T10:51:57Z"}, "message": "aarch64: Don't include vec_select high-half in SIMD add cost\n\nThe Neon add-long/add-widen instructions can select the top or bottom\nhalf of the operand registers. This selection does not change the\ncost of the underlying instruction and this should be reflected by\nthe RTL cost function.\n\nThis patch adds RTL tree traversal in the Neon add cost function to\nmatch vec_select high-half of its operands. This traversal prevents\nthe cost of the vec_select from being added into the cost of the\nsubtract - meaning that these instructions can now be emitted in the\ncombine pass as they are no longer deemed prohibitively expensive.\n\ngcc/ChangeLog:\n\n2021-07-28  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64.c: Traverse RTL tree to prevent cost\n\tof vec_select high-half from being added into Neon add cost.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vaddX_high_cost.c: New test.", "tree": {"sha": "c2ddc5279c9a722aeb25919b692faa271ed79617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2ddc5279c9a722aeb25919b692faa271ed79617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cd27a3b25558e5be7f8595fc1c828bc46641671", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd27a3b25558e5be7f8595fc1c828bc46641671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd27a3b25558e5be7f8595fc1c828bc46641671", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd27a3b25558e5be7f8595fc1c828bc46641671/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0fc1e66238e2e9fe0cbc6e5b77fd163bf887b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fc1e66238e2e9fe0cbc6e5b77fd163bf887b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fc1e66238e2e9fe0cbc6e5b77fd163bf887b2c"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "aa687c579468d45091a05cfc55ebbd873fb86630", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd27a3b25558e5be7f8595fc1c828bc46641671/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd27a3b25558e5be7f8595fc1c828bc46641671/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=8cd27a3b25558e5be7f8595fc1c828bc46641671", "patch": "@@ -13161,6 +13161,21 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \top1 = XEXP (x, 1);\n \n cost_plus:\n+\tif (VECTOR_MODE_P (mode))\n+\t  {\n+\t    /* ADDL2 and ADDW2.  */\n+\t    unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n+\t    if (vec_flags & VEC_ADVSIMD)\n+\t      {\n+\t\t/* The select-operand-high-half versions of the add instruction\n+\t\t   have the same cost as the regular three vector version -\n+\t\t   don't add the costs of the select into the costs of the add.\n+\t\t   */\n+\t\top0 = aarch64_strip_extend_vec_half (op0);\n+\t\top1 = aarch64_strip_extend_vec_half (op1);\n+\t      }\n+\t  }\n+\n \tif (GET_RTX_CLASS (GET_CODE (op0)) == RTX_COMPARE\n \t    || GET_RTX_CLASS (GET_CODE (op0)) == RTX_COMM_COMPARE)\n \t  {"}, {"sha": "43f28d597a94d8aceac87ef2240a50cc56c07240", "filename": "gcc/testsuite/gcc.target/aarch64/vaddX_high_cost.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cd27a3b25558e5be7f8595fc1c828bc46641671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvaddX_high_cost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cd27a3b25558e5be7f8595fc1c828bc46641671/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvaddX_high_cost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvaddX_high_cost.c?ref=8cd27a3b25558e5be7f8595fc1c828bc46641671", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_ADDL(rettype, intype, ts, rs) \\\n+  rettype test_vaddl_ ## ts (intype a, intype b, intype c) \\\n+\t{ \\\n+\t\trettype t0 = vaddl_ ## ts (vget_high_ ## ts (a), \\\n+\t\t\t\t\t   vget_high_ ## ts (c)); \\\n+\t\trettype t1 = vaddl_ ## ts (vget_high_ ## ts (b), \\\n+\t\t\t\t\t   vget_high_ ## ts (c)); \\\n+\t\treturn vaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_ADDL (int16x8_t, int8x16_t, s8, s16)\n+TEST_ADDL (uint16x8_t, uint8x16_t, u8, u16)\n+TEST_ADDL (int32x4_t, int16x8_t, s16, s32)\n+TEST_ADDL (uint32x4_t, uint16x8_t, u16, u32)\n+TEST_ADDL (int64x2_t, int32x4_t, s32, s64)\n+TEST_ADDL (uint64x2_t, uint32x4_t, u32, u64)\n+\n+#define TEST_ADDW(rettype, intype, intypel, ts, rs) \\\n+  rettype test_vaddw_ ## ts (intype a, intype b, intypel c) \\\n+\t{ \\\n+\t\trettype t0 = vaddw_ ## ts (a, vget_high_ ## ts (c)); \\\n+\t\trettype t1 = vaddw_ ## ts (b, vget_high_ ## ts (c)); \\\n+\t\treturn vaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_ADDW (int16x8_t, int16x8_t, int8x16_t, s8, s16)\n+TEST_ADDW (uint16x8_t, uint16x8_t, uint8x16_t, u8, u16)\n+TEST_ADDW (int32x4_t, int32x4_t, int16x8_t, s16, s32)\n+TEST_ADDW (uint32x4_t, uint32x4_t, uint16x8_t, u16, u32)\n+TEST_ADDW (int64x2_t, int64x2_t, int32x4_t, s32, s64)\n+TEST_ADDW (uint64x2_t, uint64x2_t, uint32x4_t, u32, u64)\n+\n+/* { dg-final { scan-assembler-not \"dup\\\\t\" } } */"}]}