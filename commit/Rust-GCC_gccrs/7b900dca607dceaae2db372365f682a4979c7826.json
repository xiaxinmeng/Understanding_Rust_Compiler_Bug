{"sha": "7b900dca607dceaae2db372365f682a4979c7826", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I5MDBkY2E2MDdkY2VhYWUyZGIzNzIzNjVmNjgyYTQ5NzljNzgyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-15T18:25:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-03-16T11:37:33Z"}, "message": "c++: Incorrect type equivalence [PR 99496]\n\nThis bug was caused by not marking dependent template aliases\ncorrectly -- these things look like typedefs, but are not\n(necessarily) equivalent to the canonical type.  We need to record that.\n\n\tPR c++/99496\n\tgcc/cp/\n\t* module.cc (trees_out::decl_value): Adjust typedef streaming,\n\tindicate whether it is a dependent alias.\n\t(trees_in::decl_value): Likewise.  Set as dependent alias, if it\n\tis one.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99496_a.H: New.\n\t* g++.dg/modules/pr99496_b.C: New.", "tree": {"sha": "300281173235f3b7155cb9e01f3268be9090dcda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/300281173235f3b7155cb9e01f3268be9090dcda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b900dca607dceaae2db372365f682a4979c7826", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b900dca607dceaae2db372365f682a4979c7826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b900dca607dceaae2db372365f682a4979c7826", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b900dca607dceaae2db372365f682a4979c7826/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5b6d24e664f951c6b4e42738aa1ef5489e5f66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5b6d24e664f951c6b4e42738aa1ef5489e5f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5b6d24e664f951c6b4e42738aa1ef5489e5f66"}], "stats": {"total": 84, "additions": 68, "deletions": 16}, "files": [{"sha": "6dbdc926cb4e434844f20eebf266f9c3cb691782", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 48, "deletions": 16, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=7b900dca607dceaae2db372365f682a4979c7826", "patch": "@@ -7719,18 +7719,35 @@ trees_out::decl_value (tree decl, depset *dep)\n \t}\n     }\n \n-  bool is_typedef = (!type && inner\n-\t\t     && TREE_CODE (inner) == TYPE_DECL\n-\t\t     && DECL_ORIGINAL_TYPE (inner)\n-\t\t     && TYPE_NAME (TREE_TYPE (inner)) == inner);\n-  if (is_typedef)\n+  bool is_typedef = false;\n+  if (!type && inner && TREE_CODE (inner) == TYPE_DECL)\n     {\n-      /* A typedef type.  */\n-      int type_tag = insert (TREE_TYPE (inner));\n+      tree t = TREE_TYPE (inner);\n+      unsigned tdef_flags = 0;\n+      if (DECL_ORIGINAL_TYPE (inner)\n+\t  && TYPE_NAME (TREE_TYPE (inner)) == inner)\n+\t{\n+\t  tdef_flags |= 1;\n+\t  if (TYPE_STRUCTURAL_EQUALITY_P (t)\n+\t      && TYPE_DEPENDENT_P_VALID (t)\n+\t      && TYPE_DEPENDENT_P (t))\n+\t    tdef_flags |= 2;\n+\t}\n       if (streaming_p ())\n-\tdump (dumper::TREE)\n-\t  && dump (\"Cloned:%d typedef %C:%N\", type_tag,\n-\t\t   TREE_CODE (TREE_TYPE (inner)), TREE_TYPE (inner));\n+\tu (tdef_flags);\n+\n+      if (tdef_flags & 1)\n+\t{\n+\t  /* A typedef type.  */\n+\t  int type_tag = insert (t);\n+\t  if (streaming_p ())\n+\t    dump (dumper::TREE)\n+\t      && dump (\"Cloned:%d %s %C:%N\", type_tag,\n+\t\t       tdef_flags & 2 ? \"depalias\" : \"typedef\",\n+\t\t       TREE_CODE (t), t);\n+\n+\t  is_typedef = true;\n+\t}\n     }\n \n   if (streaming_p () && DECL_MAYBE_IN_CHARGE_CDTOR_P (decl))\n@@ -7993,12 +8010,6 @@ trees_in::decl_value ()\n \n   dump (dumper::TREE) && dump (\"Read:%d %C:%N\", tag, TREE_CODE (decl), decl);\n \n-  /* Regular typedefs will have a NULL TREE_TYPE at this point.  */\n-  bool is_typedef = (!type && inner\n-\t\t     && TREE_CODE (inner) == TYPE_DECL\n-\t\t     && DECL_ORIGINAL_TYPE (inner)\n-\t\t     && !TREE_TYPE (inner));\n-\n   existing = back_refs[~tag];\n   bool installed = install_entity (existing);\n   bool is_new = existing == decl;\n@@ -8030,6 +8041,16 @@ trees_in::decl_value ()\n \t}\n     }\n \n+  /* Regular typedefs will have a NULL TREE_TYPE at this point.  */\n+  unsigned tdef_flags = 0;\n+  bool is_typedef = false;\n+  if (!type && inner && TREE_CODE (inner) == TYPE_DECL)\n+    {\n+      tdef_flags = u ();\n+      if (tdef_flags & 1)\n+\tis_typedef = true;\n+    }\n+\n   if (is_new)\n     {\n       /* A newly discovered node.  */\n@@ -8076,6 +8097,14 @@ trees_in::decl_value ()\n \t  TREE_TYPE (inner) = DECL_ORIGINAL_TYPE (inner);\n \t  DECL_ORIGINAL_TYPE (inner) = NULL_TREE;\n \t  set_underlying_type (inner);\n+\t  if (tdef_flags & 2)\n+\t    {\n+\t      /* Match instantiate_alias_template's handling.  */\n+\t      tree type = TREE_TYPE (inner);\n+\t      TYPE_DEPENDENT_P (type) = true;\n+\t      TYPE_DEPENDENT_P_VALID (type) = true;\n+\t      SET_TYPE_STRUCTURAL_EQUALITY (type);\n+\t    }\n \t}\n \n       if (inner_tag)\n@@ -10661,6 +10690,9 @@ trees_in::key_mergeable (int tag, merge_kind mk, tree decl, tree inner,\n       spec.tmpl = tree_node ();\n       spec.args = tree_node ();\n \n+      if (get_overrun ())\n+\treturn error_mark_node;\n+\n       DECL_NAME (decl) = DECL_NAME (spec.tmpl);\n       DECL_CONTEXT (decl) = DECL_CONTEXT (spec.tmpl);\n       DECL_NAME (inner) = DECL_NAME (decl);"}, {"sha": "71b77fbb49cd1efe99d6380175a7d51329527e74", "filename": "gcc/testsuite/g++.dg/modules/pr99496_a.H", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_a.H?ref=7b900dca607dceaae2db372365f682a4979c7826", "patch": "@@ -0,0 +1,17 @@\n+// PR 99496 different types with same canonical\n+// (requires spec hasher to be a constant, so we get collisions)\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+\n+template<typename...> using __void_t = void;\n+\n+template<typename _Tp, typename = void>\n+struct __is_referenceable\n+{ };\n+\n+template<typename _Tp>\n+struct __is_referenceable<_Tp, __void_t<_Tp&>>\n+{ };\n+\n+template<typename _Tp, bool = __is_referenceable<_Tp>::value>\n+struct __is_copy_constructible_impl;"}, {"sha": "57b71d13f5426d31d340729f79aafcb06c7910d6", "filename": "gcc/testsuite/g++.dg/modules/pr99496_b.C", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b900dca607dceaae2db372365f682a4979c7826/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99496_b.C?ref=7b900dca607dceaae2db372365f682a4979c7826", "patch": "@@ -0,0 +1,3 @@\n+// { dg-additional-options {-fmodules-ts -fno-module-lazy} }\n+\n+import \"pr99496_a.H\";"}]}