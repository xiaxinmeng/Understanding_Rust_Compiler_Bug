{"sha": "205b9ed14e15672ea5496d48430f954d12b089a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA1YjllZDE0ZTE1NjcyZWE1NDk2ZDQ4NDMwZjk1NGQxMmIwODlhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-29T20:22:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-29T20:22:36Z"}, "message": "re PR rtl-optimization/77919 (ICE converting DC to V2DF mode)\n\n\tPR rtl-optimization/77919\n\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Only avoid forcing\n\tinto memory if both modes are complex and their inner modes have the\n\tsame precision.  If the two modes are different complex modes, convert\n\teach part separately and generate a new CONCAT.\n\n\t* g++.dg/torture/pr77919-2.C: New test.\n\nFrom-SVN: r241681", "tree": {"sha": "aa26aad337f9a7f61eff3d734f7a3f9e8de39d3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa26aad337f9a7f61eff3d734f7a3f9e8de39d3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/205b9ed14e15672ea5496d48430f954d12b089a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205b9ed14e15672ea5496d48430f954d12b089a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205b9ed14e15672ea5496d48430f954d12b089a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205b9ed14e15672ea5496d48430f954d12b089a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e421be7677f480f1ca5842c5a2a96c829fd47266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e421be7677f480f1ca5842c5a2a96c829fd47266", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e421be7677f480f1ca5842c5a2a96c829fd47266"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "e0d1c4860dcdacab5a8504230dcd6c344c6a3fc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=205b9ed14e15672ea5496d48430f954d12b089a3", "patch": "@@ -1,3 +1,11 @@\n+2016-10-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/77919\n+\t* expr.c (expand_expr_real_1) <normal_inner_ref>: Only avoid forcing\n+\tinto memory if both modes are complex and their inner modes have the\n+\tsame precision.  If the two modes are different complex modes, convert\n+\teach part separately and generate a new CONCAT.\n+\n 2016-10-29  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa64-hpux.h (FINI_SECTION_ASM_OP): Define to null string."}, {"sha": "596b1bf82277a667a785c2b279312cd5334cce7e", "filename": "gcc/expr.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=205b9ed14e15672ea5496d48430f954d12b089a3", "patch": "@@ -10422,10 +10422,35 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t  {\n \t    if (bitpos == 0\n \t\t&& bitsize == GET_MODE_BITSIZE (GET_MODE (op0))\n-\t\t&& COMPLEX_MODE_P (mode1))\n+\t\t&& COMPLEX_MODE_P (mode1)\n+\t\t&& COMPLEX_MODE_P (GET_MODE (op0))\n+\t\t&& (GET_MODE_PRECISION (GET_MODE_INNER (mode1))\n+\t\t    == GET_MODE_PRECISION (GET_MODE_INNER (GET_MODE (op0)))))\n \t      {\n \t\tif (reversep)\n \t\t  op0 = flip_storage_order (GET_MODE (op0), op0);\n+\t\tif (mode1 != GET_MODE (op0))\n+\t\t  {\n+\t\t    rtx parts[2];\n+\t\t    for (int i = 0; i < 2; i++)\n+\t\t      {\n+\t\t\trtx op = read_complex_part (op0, i != 0);\n+\t\t\tif (GET_CODE (op) == SUBREG)\n+\t\t\t  op = force_reg (GET_MODE (op), op);\n+\t\t\trtx temp = gen_lowpart_common (GET_MODE_INNER (mode1),\n+\t\t\t\t\t\t       op);\n+\t\t\tif (temp)\n+\t\t\t  op = temp;\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    if (!REG_P (op) && !MEM_P (op))\n+\t\t\t      op = force_reg (GET_MODE (op), op);\n+\t\t\t    op = gen_lowpart (GET_MODE_INNER (mode1), op);\n+\t\t\t  }\n+\t\t\tparts[i] = op;\n+\t\t      }\n+\t\t    op0 = gen_rtx_CONCAT (mode1, parts[0], parts[1]);\n+\t\t  }\n \t\treturn op0;\n \t      }\n \t    if (bitpos == 0"}, {"sha": "7ebc61642d2d7828fc8f9e2908029ca5c96f81cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=205b9ed14e15672ea5496d48430f954d12b089a3", "patch": "@@ -1,5 +1,8 @@\n 2016-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR rtl-optimization/77919\n+\t* g++.dg/torture/pr77919-2.C: New test.\n+\n \tPR target/78148\n \t* gcc.dg/pr78148.c: New test.\n "}, {"sha": "d61e704cb44ace9a03ee3f171cdcf243564d781a", "filename": "gcc/testsuite/g++.dg/torture/pr77919-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77919-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/205b9ed14e15672ea5496d48430f954d12b089a3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77919-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr77919-2.C?ref=205b9ed14e15672ea5496d48430f954d12b089a3", "patch": "@@ -0,0 +1,10 @@\n+// PR rtl-optimization/77919\n+// { dg-do compile }\n+\n+typedef _Complex long long B;\n+struct A { A (double) {} _Complex double i; };\n+typedef struct { B b; } C;\n+struct D { D (const B &x) : b (x) {} B b; };\n+static inline B foo (const double *x) { C *a; a = (C *) x; return a->b; }\n+static inline D baz (const A &x) { return foo ((double *) &x); }\n+D b = baz (0);"}]}