{"sha": "6496e42f8734797b1a5613585c47e51398419547", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5NmU0MmY4NzM0Nzk3YjFhNTYxMzU4NWM0N2U1MTM5ODQxOTU0Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-11-09T10:36:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-11-09T10:36:24Z"}, "message": "re PR middle-end/46221 (huge number of c++ testsuite failures, libstdc++.so alias missing)\n\n2010-11-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/46221\n\t* varasm.c (compute_visible_aliases): New function.\n\t(remove_unreachable_alias_pairs): Aliases make a target available\n\teven though we reclaimed the cgraph node.\n\t(finish_aliases_1): Likewise.\n\t* Makefile.in (varasm.o): Add pointer-set.h dependency.\n\n\t* gcc.target/i386/alias-1.c: New testcase.\n\nFrom-SVN: r166479", "tree": {"sha": "35a95043c534b6a727a3d427c998055634f68924", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35a95043c534b6a727a3d427c998055634f68924"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6496e42f8734797b1a5613585c47e51398419547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6496e42f8734797b1a5613585c47e51398419547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6496e42f8734797b1a5613585c47e51398419547", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6496e42f8734797b1a5613585c47e51398419547/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d8ef0f496a05addb5f8dd32ce60859fc7ea00bf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8ef0f496a05addb5f8dd32ce60859fc7ea00bf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8ef0f496a05addb5f8dd32ce60859fc7ea00bf2"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "5c73a47b150cd3ac4b65036c668059557aa32c54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6496e42f8734797b1a5613585c47e51398419547/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6496e42f8734797b1a5613585c47e51398419547/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6496e42f8734797b1a5613585c47e51398419547", "patch": "@@ -1,3 +1,12 @@\n+2010-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/46221\n+\t* varasm.c (compute_visible_aliases): New function.\n+\t(remove_unreachable_alias_pairs): Aliases make a target available\n+\teven though we reclaimed the cgraph node.\n+\t(finish_aliases_1): Likewise.\n+\t* Makefile.in (varasm.o): Add pointer-set.h dependency.\n+\n 2010-11-09  Nick Clifton  <nickc@redhat.com>\n \n \t* config/mn10300/mn10300-modes.def: New file."}, {"sha": "cc58d7f4c7d1b42daf6de9837e5659c6e5093694", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6496e42f8734797b1a5613585c47e51398419547/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6496e42f8734797b1a5613585c47e51398419547/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6496e42f8734797b1a5613585c47e51398419547", "patch": "@@ -2884,7 +2884,7 @@ varasm.o : varasm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    output.h $(TOPLEV_H) $(DIAGNOSTIC_CORE_H) xcoffout.h debug.h $(GGC_H) $(TM_P_H) \\\n    $(HASHTAB_H) $(TARGET_H) langhooks.h gt-varasm.h $(BASIC_BLOCK_H) \\\n    $(CFGLAYOUT_H) $(CGRAPH_H) targhooks.h tree-mudflap.h \\\n-   tree-iterator.h\n+   tree-iterator.h pointer-set.h\n function.o : function.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_ERROR_H) \\\n    $(TREE_H) $(CFGLAYOUT_H) $(GIMPLE_H) $(FLAGS_H) $(FUNCTION_H) $(EXPR_H) \\\n    $(OPTABS_H) $(LIBFUNCS_H) $(REGS_H) hard-reg-set.h insn-config.h $(RECOG_H) \\"}, {"sha": "c4fa07999c1d69566e765028351c1b00038f5792", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6496e42f8734797b1a5613585c47e51398419547/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6496e42f8734797b1a5613585c47e51398419547/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6496e42f8734797b1a5613585c47e51398419547", "patch": "@@ -1,3 +1,8 @@\n+2010-11-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/46221\n+\t* gcc.target/i386/alias-1.c: New testcase.\n+\n 2010-11-08  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-sassert.C: New."}, {"sha": "adbe2f7c3ffee75e7f304aa14153c26bd83ced07", "filename": "gcc/testsuite/gcc.target/i386/alias-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6496e42f8734797b1a5613585c47e51398419547/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falias-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6496e42f8734797b1a5613585c47e51398419547/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falias-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Falias-1.c?ref=6496e42f8734797b1a5613585c47e51398419547", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+\n+int yum;\n+void dessert (void) { ++yum; }\n+extern void jelly (void) __attribute__ ((alias (\"dessert\"), weak));\n+extern void wobbly (void) __attribute__ ((alias (\"jelly\"), weak));\n+\n+/* { dg-final { scan-assembler \"wobbly\" } } */\n+/* { dg-final { scan-assembler \"jelly\" } } */"}, {"sha": "0c80c931fff5a67779205ce0d637b2d2cbc95fac", "filename": "gcc/varasm.c", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6496e42f8734797b1a5613585c47e51398419547/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6496e42f8734797b1a5613585c47e51398419547/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6496e42f8734797b1a5613585c47e51398419547", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfglayout.h\"\n #include \"basic-block.h\"\n #include \"tree-iterator.h\"\n+#include \"pointer-set.h\"\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data\n@@ -5415,18 +5416,58 @@ do_assemble_alias (tree decl, tree target)\n }\n \n \n+/* Compute the set of indentifier nodes that is generated by aliases\n+   whose targets are reachable.  */\n+\n+static struct pointer_set_t *\n+compute_visible_aliases (void)\n+{\n+  struct pointer_set_t *visible;\n+  unsigned i;\n+  alias_pair *p;\n+  bool changed;\n+\n+  /* We have to compute the set of visible nodes including aliases\n+     themselves.  */\n+  visible = pointer_set_create ();\n+  do\n+    {\n+      changed = false;\n+      for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p); ++i)\n+\t{\n+\t  struct cgraph_node *fnode = NULL;\n+\t  struct varpool_node *vnode = NULL;\n+\t  fnode = cgraph_node_for_asm (p->target);\n+\t  vnode = (fnode == NULL) ? varpool_node_for_asm (p->target) : NULL;\n+\t  if ((fnode\n+\t       || vnode\n+\t       || pointer_set_contains (visible, p->target))\n+\t      && !pointer_set_insert (visible, DECL_ASSEMBLER_NAME (p->decl)))\n+\t    changed = true;\n+\t}\n+    }\n+  while (changed);\n+\n+  return visible;\n+}\n+\n /* Remove the alias pairing for functions that are no longer in the call\n    graph.  */\n \n void\n remove_unreachable_alias_pairs (void)\n {\n+  struct pointer_set_t *visible;\n   unsigned i;\n   alias_pair *p;\n \n   if (alias_pairs == NULL)\n     return;\n \n+  /* We have to compute the set of visible nodes including aliases\n+     themselves.  */\n+  visible = compute_visible_aliases ();\n+\n   for (i = 0; VEC_iterate (alias_pair, alias_pairs, i, p); )\n     {\n       if (!DECL_EXTERNAL (p->decl))\n@@ -5435,7 +5476,9 @@ remove_unreachable_alias_pairs (void)\n \t  struct varpool_node *vnode = NULL;\n \t  fnode = cgraph_node_for_asm (p->target);\n \t  vnode = (fnode == NULL) ? varpool_node_for_asm (p->target) : NULL;\n-\t  if (fnode == NULL && vnode == NULL)\n+\t  if (!fnode\n+\t      && !vnode\n+\t      && !pointer_set_contains (visible, p->target))\n \t    {\n \t      VEC_unordered_remove (alias_pair, alias_pairs, i);\n \t      continue;\n@@ -5444,6 +5487,8 @@ remove_unreachable_alias_pairs (void)\n \n       i++;\n     }\n+\n+  pointer_set_destroy (visible);\n }\n \n \n@@ -5453,16 +5498,27 @@ remove_unreachable_alias_pairs (void)\n void\n finish_aliases_1 (void)\n {\n+  struct pointer_set_t *visible;\n   unsigned i;\n   alias_pair *p;\n \n+  if (alias_pairs == NULL)\n+    return;\n+\n+  /* We have to compute the set of visible nodes including aliases\n+     themselves.  */\n+  visible = compute_visible_aliases ();\n+\n   FOR_EACH_VEC_ELT (alias_pair, alias_pairs, i, p)\n     {\n       tree target_decl;\n \n       target_decl = find_decl_and_mark_needed (p->decl, p->target);\n       if (target_decl == NULL)\n \t{\n+\t  if (pointer_set_contains (visible, p->target))\n+\t    continue;\n+\n \t  if (! (p->emitted_diags & ALIAS_DIAG_TO_UNDEF)\n \t      && ! lookup_attribute (\"weakref\", DECL_ATTRIBUTES (p->decl)))\n \t    {\n@@ -5485,6 +5541,8 @@ finish_aliases_1 (void)\n \t  p->emitted_diags |= ALIAS_DIAG_TO_EXTERN;\n \t}\n     }\n+\n+  pointer_set_destroy (visible);\n }\n \n /* Second pass of completing pending aliases.  Emit the actual assembly."}]}