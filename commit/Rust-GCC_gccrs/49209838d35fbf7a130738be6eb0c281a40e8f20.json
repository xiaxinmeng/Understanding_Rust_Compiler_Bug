{"sha": "49209838d35fbf7a130738be6eb0c281a40e8f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDkyMDk4MzhkMzVmYmY3YTEzMDczOGJlNmViMGMyODFhNDBlOGYyMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-13T08:08:11Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:08:11Z"}, "message": "[Ada] Small cleanup and improvement in inlining machinery\n\nThis is a small cleanup in the inlining machinery of the front-end\ndealing with back-end inlining.  It should save a few cycles at -O0 by\nstopping it from doing useless work.  No functional changes.\n\n2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb: Remove with and use clauses for Sem_Ch12.\n\t(Expand_Call_Helper): Swap the back-end inlining case and the\n\tspecial front-end expansion case.  In back-end inlining mode, do\n\tnot invoke Add_Inlined_Body unless the call may be inlined.\n\t* inline.ads (Add_Pending_Instantiation): New function moved\n\tfrom...\n\t* inline.adb (Add_Inlined_Body): Simplify comment.  Turn test on\n\tthe enclosing unit into assertion.\n\t(Add_Pending_Instantiation): New function moved from...\n\t* sem_ch12.ads (Add_Pending_Instantiation): ...here.\n\t* sem_ch12.adb (Add_Pending_Instantiation): ...here.\n\nFrom-SVN: r274353", "tree": {"sha": "ac6436df178f213ee10ea420e35687fa567137c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac6436df178f213ee10ea420e35687fa567137c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49209838d35fbf7a130738be6eb0c281a40e8f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49209838d35fbf7a130738be6eb0c281a40e8f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49209838d35fbf7a130738be6eb0c281a40e8f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49209838d35fbf7a130738be6eb0c281a40e8f20/comments", "author": null, "committer": null, "parents": [{"sha": "063907abadf6ee9ffe4d60d4b61eb8a144aa29f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/063907abadf6ee9ffe4d60d4b61eb8a144aa29f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/063907abadf6ee9ffe4d60d4b61eb8a144aa29f7"}], "stats": {"total": 126, "additions": 68, "deletions": 58}, "files": [{"sha": "9a97482f521e1763d22b9d676d96f5ae76352526", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -1,3 +1,17 @@\n+2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb: Remove with and use clauses for Sem_Ch12.\n+\t(Expand_Call_Helper): Swap the back-end inlining case and the\n+\tspecial front-end expansion case.  In back-end inlining mode, do\n+\tnot invoke Add_Inlined_Body unless the call may be inlined.\n+\t* inline.ads (Add_Pending_Instantiation): New function moved\n+\tfrom...\n+\t* inline.adb (Add_Inlined_Body): Simplify comment.  Turn test on\n+\tthe enclosing unit into assertion.\n+\t(Add_Pending_Instantiation): New function moved from...\n+\t* sem_ch12.ads (Add_Pending_Instantiation): ...here.\n+\t* sem_ch12.adb (Add_Pending_Instantiation): ...here.\n+\n 2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem.adb (Do_Analyze): Recompute Style_Check_Max_Line_Length"}, {"sha": "128fb9015df431a2bc9911b99666cd918b24d24a", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -60,7 +60,6 @@ with Sem;       use Sem;\n with Sem_Aux;   use Sem_Aux;\n with Sem_Ch6;   use Sem_Ch6;\n with Sem_Ch8;   use Sem_Ch8;\n-with Sem_Ch12;  use Sem_Ch12;\n with Sem_Ch13;  use Sem_Ch13;\n with Sem_Dim;   use Sem_Dim;\n with Sem_Disp;  use Sem_Disp;\n@@ -4316,15 +4315,15 @@ package body Exp_Ch6 is\n          if not Is_Inlined (Subp) then\n             null;\n \n-         --  Frontend inlining of expression functions (performed also when\n-         --  backend inlining is enabled).\n+         --  Front-end inlining of expression functions (performed also when\n+         --  back-end inlining is enabled).\n \n          elsif Is_Inlinable_Expression_Function (Subp) then\n             Rewrite (N, New_Copy (Expression_Of_Expression_Function (Subp)));\n             Analyze (N);\n             return;\n \n-         --  Handle frontend inlining\n+         --  Handle front-end inlining\n \n          elsif not Back_End_Inlining then\n             Inlined_Subprogram : declare\n@@ -4420,27 +4419,36 @@ package body Exp_Ch6 is\n                end if;\n             end Inlined_Subprogram;\n \n-         --  Back end inlining: let the back end handle it\n+         --  Front-end expansion of simple functions returning unconstrained\n+         --  types (see Check_And_Split_Unconstrained_Function). Note that the\n+         --  case of a simple renaming (Body_To_Inline in N_Entity below, see\n+         --  also Build_Renamed_Body) cannot be expanded here because this may\n+         --  give rise to order-of-elaboration issues for the types of the\n+         --  parameters of the subprogram, if any.\n+\n+         elsif Present (Unit_Declaration_Node (Subp))\n+           and then Nkind (Unit_Declaration_Node (Subp)) =\n+                                                       N_Subprogram_Declaration\n+           and then Present (Body_To_Inline (Unit_Declaration_Node (Subp)))\n+           and then\n+             Nkind (Body_To_Inline (Unit_Declaration_Node (Subp))) not in\n+                                                                       N_Entity\n+         then\n+            Expand_Inlined_Call (Call_Node, Subp, Orig_Subp);\n+\n+         --  Back-end inlining either if optimization is enabled or the call is\n+         --  required to be inlined.\n \n-         elsif No (Unit_Declaration_Node (Subp))\n-           or else Nkind (Unit_Declaration_Node (Subp)) /=\n-                                                 N_Subprogram_Declaration\n-           or else No (Body_To_Inline (Unit_Declaration_Node (Subp)))\n-           or else Nkind (Body_To_Inline (Unit_Declaration_Node (Subp))) in\n-                                                                      N_Entity\n+         elsif Optimization_Level > 0\n+           or else Has_Pragma_Inline_Always (Subp)\n          then\n             Add_Inlined_Body (Subp, Call_Node);\n \n-            --  If the inlined call appears within an instantiation and either\n-            --  is required to be inlined or optimization is enabled, ensure\n+            --  If the inlined call appears within an instance, then ensure\n             --  that the enclosing instance body is available so the back end\n             --  can actually perform the inlining.\n \n-            if In_Instance\n-              and then Comes_From_Source (Subp)\n-              and then (Has_Pragma_Inline_Always (Subp)\n-                         or else Optimization_Level > 0)\n-            then\n+            if In_Instance and then Comes_From_Source (Subp) then\n                declare\n                   Decl      : Node_Id;\n                   Inst      : Entity_Id;\n@@ -4491,16 +4499,6 @@ package body Exp_Ch6 is\n                   end if;\n                end;\n             end if;\n-\n-         --  Front end expansion of simple functions returning unconstrained\n-         --  types (see Check_And_Split_Unconstrained_Function). Note that the\n-         --  case of a simple renaming (Body_To_Inline in N_Entity above, see\n-         --  also Build_Renamed_Body) cannot be expanded here because this may\n-         --  give rise to order-of-elaboration issues for the types of the\n-         --  parameters of the subprogram, if any.\n-\n-         else\n-            Expand_Inlined_Call (Call_Node, Subp, Orig_Subp);\n          end if;\n       end if;\n "}, {"sha": "3a3ec0cf8edfc01bdf43290b865f7f7c7d365d6e", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -485,9 +485,7 @@ package body Inline is\n       --  is the case for an initialization procedure, which appears in the\n       --  package declaration that contains the type. It is also the case if\n       --  the body has already been analyzed. Finally, if the unit enclosing\n-      --  E is an instance, the instance body will be analyzed in any case,\n-      --  and there is no need to add the enclosing unit (whose body might not\n-      --  be available).\n+      --  E is an instance, the instance body will be analyzed in any case.\n \n       --  Library-level functions must be handled specially, because there is\n       --  no enclosing package to retrieve. In this case, it is the body of\n@@ -497,13 +495,14 @@ package body Inline is\n          Pack : constant Entity_Id := Get_Code_Unit_Entity (E);\n \n       begin\n+         Set_Is_Called (E);\n+\n          if Pack = E then\n-            Set_Is_Called (E);\n             Inlined_Bodies.Increment_Last;\n             Inlined_Bodies.Table (Inlined_Bodies.Last) := E;\n \n-         elsif Ekind (Pack) = E_Package then\n-            Set_Is_Called (E);\n+         else\n+            pragma Assert (Ekind (Pack) = E_Package);\n \n             if Is_Generic_Instance (Pack) then\n                null;\n@@ -606,6 +605,26 @@ package body Inline is\n       end if;\n    end Add_Inlined_Subprogram;\n \n+   --------------------------------\n+   --  Add_Pending_Instantiation --\n+   --------------------------------\n+\n+   procedure Add_Pending_Instantiation (Inst : Node_Id; Act_Decl : Node_Id) is\n+   begin\n+      --  Capture the body of the generic instantiation along with its context\n+      --  for later processing by Instantiate_Bodies.\n+\n+      Pending_Instantiations.Append\n+        ((Act_Decl                 => Act_Decl,\n+          Config_Switches          => Save_Config_Switches,\n+          Current_Sem_Unit         => Current_Sem_Unit,\n+          Expander_Status          => Expander_Active,\n+          Inst_Node                => Inst,\n+          Local_Suppress_Stack_Top => Local_Suppress_Stack_Top,\n+          Scope_Suppress           => Scope_Suppress,\n+          Warnings                 => Save_Warnings));\n+   end Add_Pending_Instantiation;\n+\n    ------------------------\n    -- Add_Scope_To_Clean --\n    ------------------------"}, {"sha": "e822ddceba2db73443c34b7b42924ded48061ec8", "filename": "gcc/ada/inline.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Finline.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Finline.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.ads?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -143,6 +143,9 @@ package Inline is\n    --  Add E's enclosing unit to Inlined_Bodies so that E can be subsequently\n    --  retrieved and analyzed. N is the node giving rise to the call to E.\n \n+   procedure Add_Pending_Instantiation (Inst : Node_Id; Act_Decl : Node_Id);\n+   --  Add an entry in the table of generic bodies to be instantiated.\n+\n    procedure Analyze_Inlined_Bodies;\n    --  At end of compilation, analyze the bodies of all units that contain\n    --  inlined subprograms that are actually called."}, {"sha": "9f1749482536957bab3a5c448689fdbb47fdc483", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -1025,26 +1025,6 @@ package body Sem_Ch12 is\n       raise Instantiation_Error;\n    end Abandon_Instantiation;\n \n-   --------------------------------\n-   --  Add_Pending_Instantiation --\n-   --------------------------------\n-\n-   procedure Add_Pending_Instantiation (Inst : Node_Id; Act_Decl : Node_Id) is\n-   begin\n-      --  Capture the body of the generic instantiation along with its context\n-      --  for later processing by Instantiate_Bodies.\n-\n-      Pending_Instantiations.Append\n-        ((Act_Decl                 => Act_Decl,\n-          Config_Switches          => Save_Config_Switches,\n-          Current_Sem_Unit         => Current_Sem_Unit,\n-          Expander_Status          => Expander_Active,\n-          Inst_Node                => Inst,\n-          Local_Suppress_Stack_Top => Local_Suppress_Stack_Top,\n-          Scope_Suppress           => Scope_Suppress,\n-          Warnings                 => Save_Warnings));\n-   end Add_Pending_Instantiation;\n-\n    ----------------------------------\n    -- Adjust_Inherited_Pragma_Sloc --\n    ----------------------------------"}, {"sha": "f0b72f49dbd547b59e28386aaee83dc9f5e2ff0f", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49209838d35fbf7a130738be6eb0c281a40e8f20/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=49209838d35fbf7a130738be6eb0c281a40e8f20", "patch": "@@ -37,10 +37,6 @@ package Sem_Ch12 is\n    procedure Analyze_Formal_Subprogram_Declaration      (N : Node_Id);\n    procedure Analyze_Formal_Package_Declaration         (N : Node_Id);\n \n-   procedure Add_Pending_Instantiation (Inst : Node_Id; Act_Decl : Node_Id);\n-   --  Add an entry in the table of instance bodies that must be analyzed\n-   --  when inlining requires its body or the body of a nested instance.\n-\n    function Build_Function_Wrapper\n      (Formal_Subp : Entity_Id;\n       Actual_Subp : Entity_Id) return Node_Id;"}]}