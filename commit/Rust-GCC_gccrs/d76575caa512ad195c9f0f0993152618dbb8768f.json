{"sha": "d76575caa512ad195c9f0f0993152618dbb8768f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2NTc1Y2FhNTEyYWQxOTVjOWYwZjA5OTMxNTI2MThkYmI4NzY4Zg==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@ira.uka.de", "date": "2007-11-14T17:37:38Z"}, "committer": {"name": "Johannes Singler", "email": "singler@gcc.gnu.org", "date": "2007-11-14T17:37:38Z"}, "message": "multiway_merge.h: More robust finding of an arbitrary existing element inside the input sequences.\n\n2007-11-14  Johannes Singler  <singler@ira.uka.de>\n\n      * include/parallel/multiway_merge.h: More robust finding of an\n        arbitrary existing element inside the input sequences.\n      * include/bits/stl_algo.h: Fix typo to actually call appropriate\n        sequential version.\n\nFrom-SVN: r130183", "tree": {"sha": "7d59c3bc3daa62b34110a0b362942a0cc08ac34e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d59c3bc3daa62b34110a0b362942a0cc08ac34e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76575caa512ad195c9f0f0993152618dbb8768f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76575caa512ad195c9f0f0993152618dbb8768f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76575caa512ad195c9f0f0993152618dbb8768f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76575caa512ad195c9f0f0993152618dbb8768f/comments", "author": null, "committer": null, "parents": [{"sha": "6c74788ed7b48f057a9f08bde52944726ced24f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c74788ed7b48f057a9f08bde52944726ced24f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c74788ed7b48f057a9f08bde52944726ced24f5"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "466c8f169de3f1f73e6ed69eb0be12b27661899a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d76575caa512ad195c9f0f0993152618dbb8768f", "patch": "@@ -1,3 +1,11 @@\n+2007-11-14  Johannes Singler  <singler@ira.uka.de>\n+\n+      * include/parallel/multiway_merge.h: More robust finding of an\n+        arbitrary existing element inside the input sequences.\n+      * include/bits/stl_algo.h: Fix typo to actually call appropriate\n+        sequential version.\n+\n+\n 2007-11-13  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/documentation.html: First pass at unified table of contents."}, {"sha": "3765dc0be39bdb24d1e08d37da2b71e1156c869d", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=d76575caa512ad195c9f0f0993152618dbb8768f", "patch": "@@ -2028,7 +2028,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t{\n \t  if (__depth_limit == 0)\n \t    {\n-\t      _GLIBCXX_STD_P:partial_sort(__first, __last, __last);\n+\t      _GLIBCXX_STD_P::partial_sort(__first, __last, __last);\n \t      return;\n \t    }\n \t  --__depth_limit;"}, {"sha": "2e3be7c428737416615585f3623ce4c2e63a2c8c", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76575caa512ad195c9f0f0993152618dbb8768f/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=d76575caa512ad195c9f0f0993152618dbb8768f", "patch": "@@ -900,25 +900,34 @@ namespace __gnu_parallel\n     difference_type total_length = 0;\n \n     // Default value for potentially non-default-constructible types.\n-    value_type* defaultcons = NULL; \n+    value_type* arbitrary_element = NULL;\n+\n     for (int t = 0; t < k; t++)\n       {\n-\tif (stable)\n-\t  {\n-\t    if (seqs_begin[t].first == seqs_begin[t].second)\n-\t      lt.insert_start_stable(*defaultcons, t, true);\n-\t    else\n-\t      lt.insert_start_stable(*seqs_begin[t].first, t, false);\n-\t  }\n-\telse\n-\t  {\n-\t    if (seqs_begin[t].first == seqs_begin[t].second)\n-\t      lt.insert_start(*defaultcons, t, true);\n-\t    else\n-\t      lt.insert_start(*seqs_begin[t].first, t, false);\n-\t  }\n+        if(arbitrary_element == NULL && LENGTH(seqs_begin[t]) > 0)\n+          arbitrary_element = &(*seqs_begin[t].first);\n+        total_length += LENGTH(seqs_begin[t]);\n+      }\n \n-\ttotal_length += LENGTH(seqs_begin[t]);\n+    if(total_length == 0)\n+      return target;\n+\n+    for (int t = 0; t < k; t++)\n+      {\n+        if (stable)\n+          {\n+            if (seqs_begin[t].first == seqs_begin[t].second)\n+              lt.insert_start_stable(*arbitrary_element, t, true);\n+            else\n+              lt.insert_start_stable(*seqs_begin[t].first, t, false);\n+          }\n+        else\n+          {\n+            if (seqs_begin[t].first == seqs_begin[t].second)\n+              lt.insert_start(*arbitrary_element, t, true);\n+            else\n+              lt.insert_start(*seqs_begin[t].first, t, false);\n+          }\n       }\n \n     if (stable)\n@@ -941,7 +950,7 @@ namespace __gnu_parallel\n \n \t    // Feed.\n \t    if (seqs_begin[source].first == seqs_begin[source].second)\n-\t      lt.delete_min_insert_stable(*defaultcons, true);\n+\t      lt.delete_min_insert_stable(*arbitrary_element, true);\n \t    else\n \t      // Replace from same source.\n \t      lt.delete_min_insert_stable(*seqs_begin[source].first, false);\n@@ -959,7 +968,7 @@ namespace __gnu_parallel\n \n \t    // Feed.\n \t    if (seqs_begin[source].first == seqs_begin[source].second)\n-\t      lt.delete_min_insert(*defaultcons, true);\n+\t      lt.delete_min_insert(*arbitrary_element, true);\n \t    else\n \t      // Replace from same source.\n \t      lt.delete_min_insert(*seqs_begin[source].first, false);"}]}