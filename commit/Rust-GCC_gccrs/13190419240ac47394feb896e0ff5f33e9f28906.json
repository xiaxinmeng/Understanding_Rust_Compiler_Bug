{"sha": "13190419240ac47394feb896e0ff5f33e9f28906", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMxOTA0MTkyNDBhYzQ3Mzk0ZmViODk2ZTBmZjVmMzNlOWYyODkwNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-09-23T17:25:34Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-09-23T17:25:34Z"}, "message": "Avoid reallocation for basic_string::clear()\n\n\tPR libstdc++/56166\n\tPR libstdc++/77582\n\t* include/bits/basic_string.h (basic_string::clear()): Drop reference\n\tand use empty rep.\n\t* include/ext/rc_string_base.h (__rc_string_base::_M_clear()):\n\tLikewise.\n\t* testsuite/21_strings/basic_string/56166.cc: New.\n\t* testsuite/ext/vstring/modifiers/clear/56166.cc: New.\n\nFrom-SVN: r240447", "tree": {"sha": "56614f636249d7a44d3995a94376be8ae7c06f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56614f636249d7a44d3995a94376be8ae7c06f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13190419240ac47394feb896e0ff5f33e9f28906", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13190419240ac47394feb896e0ff5f33e9f28906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13190419240ac47394feb896e0ff5f33e9f28906", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13190419240ac47394feb896e0ff5f33e9f28906/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a922c5ff6f3872fc9ce1e484a0e92f288ff6c68d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a922c5ff6f3872fc9ce1e484a0e92f288ff6c68d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a922c5ff6f3872fc9ce1e484a0e92f288ff6c68d"}], "stats": {"total": 217, "additions": 216, "deletions": 1}, "files": [{"sha": "22e4d0bfd7769ebdbedc1f175299d17db5205e0c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=13190419240ac47394feb896e0ff5f33e9f28906", "patch": "@@ -1,5 +1,14 @@\n 2016-09-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/56166\n+\tPR libstdc++/77582\n+\t* include/bits/basic_string.h (basic_string::clear()): Drop reference\n+\tand use empty rep.\n+\t* include/ext/rc_string_base.h (__rc_string_base::_M_clear()):\n+\tLikewise.\n+\t* testsuite/21_strings/basic_string/56166.cc: New.\n+\t* testsuite/ext/vstring/modifiers/clear/56166.cc: New.\n+\n \t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n \t(basic_string::erase(size_type, size_type)): Add fast path for\n \ttruncating the string, by calling _M_set_length directly."}, {"sha": "7a4204e41c897ee26456d1df43f0a07993909f7e", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=13190419240ac47394feb896e0ff5f33e9f28906", "patch": "@@ -3690,10 +3690,24 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       /**\n        *  Erases the string, making it empty.\n        */\n+#if _GLIBCXX_FULLY_DYNAMIC_STRING == 0\n+      void\n+      clear() _GLIBCXX_NOEXCEPT\n+      {\n+\tif (_M_rep()->_M_is_shared())\n+\t  {\n+\t    _M_rep()->_M_dispose(this->get_allocator());\n+\t    _M_data(_S_empty_rep()._M_refdata());\n+\t  }\n+\telse\n+\t  _M_rep()->_M_set_length_and_sharable(0);\n+      }\n+#else\n       // PR 56166: this should not throw.\n       void\n       clear()\n       { _M_mutate(0, this->size(), 0); }\n+#endif\n \n       /**\n        *  Returns true if the %string is empty.  Equivalent to "}, {"sha": "eab34614946b7678894522ab35c45446d9cec45f", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=13190419240ac47394feb896e0ff5f33e9f28906", "patch": "@@ -354,7 +354,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       void\n       _M_clear()\n-      { _M_erase(size_type(0), _M_length()); }\n+      {\n+\t_M_dispose();\n+\t_M_data(_S_empty_rep._M_refcopy());\n+      }\n \n       bool\n       _M_compare(const __rc_string_base&) const"}, {"sha": "3d4d876dbb1f89307df14ee53f04d53a0baf6c68", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/56166.cc", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2F56166.cc?ref=13190419240ac47394feb896e0ff5f33e9f28906", "patch": "@@ -0,0 +1,93 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// libstdc++/56166\n+\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_USE_CXX11_ABI 0\n+#endif\n+#include <string>\n+#include <new>\n+\n+static int fail_after = -1;\n+\n+template<typename T>\n+  struct Allocator\n+  {\n+    using value_type = T;\n+\n+    // Need these typedefs because COW string doesn't use allocator_traits.\n+    using pointer = T*;\n+    using const_pointer = const T*;\n+    using reference = T&;\n+    using const_reference = const T&;\n+    using difference_type = long;\n+    using size_type = unsigned long;\n+    template<typename U>\n+      struct rebind {\n+        using other = Allocator<U>;\n+      };\n+\n+    Allocator() { }\n+\n+    template<typename U>\n+      Allocator(const Allocator<U>&) { }\n+\n+    T* allocate(size_type n)\n+    {\n+      if (fail_after >= 0) {\n+        if (fail_after-- == 0) {\n+          throw std::bad_alloc();\n+        }\n+      }\n+      return (T*)new char[n * sizeof(T)];\n+    }\n+\n+    void deallocate(T* p, size_type)\n+    {\n+      delete[] (char*)p;\n+    }\n+  };\n+\n+template<typename T, typename U>\n+  bool operator==(const Allocator<T>&, const Allocator<U>&) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(const Allocator<T>&, const Allocator<U>&) { return false; }\n+\n+using string = std::basic_string<char, std::char_traits<char>, Allocator<char>>;\n+\n+string f()\n+{\n+  string s1(\"xxxxxx\");\n+  string s2 = s1;\n+  s1.clear();\n+  return s2;\n+}\n+\n+int main()\n+{\n+  for (int i = 0; i < 10; i++) {\n+    try {\n+      fail_after = i;\n+      f();\n+      break;\n+    } catch (std::bad_alloc) {\n+    }\n+  }\n+}"}, {"sha": "109e6227372dc7b5d7919b2301b704060dedadda", "filename": "libstdc++-v3/testsuite/ext/vstring/modifiers/clear/56166.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13190419240ac47394feb896e0ff5f33e9f28906/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Fmodifiers%2Fclear%2F56166.cc?ref=13190419240ac47394feb896e0ff5f33e9f28906", "patch": "@@ -0,0 +1,96 @@\n+// Copyright (C) 2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+// libstdc++/56166\n+\n+#ifndef _GLIBCXX_USE_CXX11_ABI\n+# define _GLIBCXX_USE_CXX11_ABI 0\n+#endif\n+#include <ext/vstring.h>\n+#include <new>\n+\n+static int fail_after = -1;\n+\n+template<typename T>\n+  struct Allocator\n+  {\n+    using value_type = T;\n+\n+    // Need these typedefs because COW string doesn't use allocator_traits.\n+    using pointer = T*;\n+    using const_pointer = const T*;\n+    using reference = T&;\n+    using const_reference = const T&;\n+    using difference_type = long;\n+    using size_type = unsigned long;\n+    template<typename U>\n+      struct rebind {\n+        using other = Allocator<U>;\n+      };\n+\n+    Allocator() { }\n+\n+    template<typename U>\n+      Allocator(const Allocator<U>&) { }\n+\n+    T* allocate(size_type n)\n+    {\n+      if (fail_after >= 0) {\n+        if (fail_after-- == 0) {\n+          throw std::bad_alloc();\n+        }\n+      }\n+      return (T*)new char[n * sizeof(T)];\n+    }\n+\n+    void deallocate(T* p, size_type)\n+    {\n+      delete[] (char*)p;\n+    }\n+  };\n+\n+template<typename T, typename U>\n+  bool operator==(const Allocator<T>&, const Allocator<U>&) { return true; }\n+template<typename T, typename U>\n+  bool operator!=(const Allocator<T>&, const Allocator<U>&) { return false; }\n+\n+\n+using string = __gnu_cxx::__versa_string<char, std::char_traits<char>,\n+                                         Allocator<char>,\n+                                         __gnu_cxx::__rc_string_base>;\n+\n+string f()\n+{\n+  string s1(\"xxxxxx\");\n+  string s2 = s1;\n+  s1.clear();\n+  return s2;\n+}\n+\n+int main()\n+{\n+  for (int i = 0; i < 10; i++) {\n+    try {\n+      fail_after = i;\n+      f();\n+      break;\n+    } catch (std::bad_alloc) {\n+    }\n+  }\n+}"}]}