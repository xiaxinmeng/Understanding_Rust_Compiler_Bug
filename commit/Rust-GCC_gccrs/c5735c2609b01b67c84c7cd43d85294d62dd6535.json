{"sha": "c5735c2609b01b67c84c7cd43d85294d62dd6535", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU3MzVjMjYwOWIwMWI2N2M4NGM3Y2Q0M2Q4NTI5NGQ2MmRkNjUzNQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2004-04-18T01:01:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2004-04-18T01:01:41Z"}, "message": "1b-01.c: New.\n\n\t* gcc.dg/vmx/1b-01.c: New.\n\t* gcc.dg/vmx/1b-02.c: New.\n\t* gcc.dg/vmx/1b-03.c: New.\n\t* gcc.dg/vmx/1b-04.c: New.\n\t* gcc.dg/vmx/1b-05.c: New.\n\t* gcc.dg/vmx/1b-06.c: New.\n\t* gcc.dg/vmx/1b-07.c: New.\n\t* gcc.dg/vmx/1c-01.c: New.\n\t* gcc.dg/vmx/1c-02.c: New.\n\t* gcc.dg/vmx/3a-01a.c: New.\n\t* gcc.dg/vmx/3a-01.c: New.\n\t* gcc.dg/vmx/3a-01m.c: New.\n\t* gcc.dg/vmx/3a-03.c: New.\n\t* gcc.dg/vmx/3a-03m.c: New.\n\t* gcc.dg/vmx/3a-04.c: New.\n\t* gcc.dg/vmx/3a-04m.c: New.\n\t* gcc.dg/vmx/3a-05.c: New.\n\t* gcc.dg/vmx/3a-06.c: New.\n\t* gcc.dg/vmx/3a-06m.c: New.\n\t* gcc.dg/vmx/3a-07.c: New.\n\t* gcc.dg/vmx/3b-01.c: New.\n\t* gcc.dg/vmx/3b-02.c: New.\n\t* gcc.dg/vmx/3b-10.c: New.\n\t* gcc.dg/vmx/3b-13.c: New.\n\t* gcc.dg/vmx/3b-14.c: New.\n\t* gcc.dg/vmx/3b-15.c: New.\n\t* gcc.dg/vmx/3c-01a.c: New.\n\t* gcc.dg/vmx/3c-01.c: New.\n\t* gcc.dg/vmx/3c-02.c: New.\n\t* gcc.dg/vmx/3c-03.c: New.\n\t* gcc.dg/vmx/3d-01.c: New.\n\t* gcc.dg/vmx/4-01.c: New.\n\t* gcc.dg/vmx/4-03.c: New.\n\t* gcc.dg/vmx/5-01.c: New.\n\t* gcc.dg/vmx/5-02.c: New.\n\t* gcc.dg/vmx/5-03.c: New.\n\t* gcc.dg/vmx/5-04.c: New.\n\t* gcc.dg/vmx/5-05.c: New.\n\t* gcc.dg/vmx/5-06.c: New.\n\t* gcc.dg/vmx/5-07.c: New.\n\t* gcc.dg/vmx/5-07t.c: New.\n\t* gcc.dg/vmx/5-08.c: New.\n\t* gcc.dg/vmx/5-10.c: New.\n\t* gcc.dg/vmx/5-11.c: New.\n\t* gcc.dg/vmx/7-01a.c: New.\n\t* gcc.dg/vmx/7-01.c: New.\n\t* gcc.dg/vmx/7c-01.c: New.\n\t* gcc.dg/vmx/7d-01.c: New.\n\t* gcc.dg/vmx/7d-02.c: New.\n\t* gcc.dg/vmx/8-01.c: New.\n\t* gcc.dg/vmx/8-02a.c: New.\n\t* gcc.dg/vmx/8-02.c: New.\n\t* gcc.dg/vmx/brode-1.c: New.\n\t* gcc.dg/vmx/bug-1.c: New.\n\t* gcc.dg/vmx/bug-2.c: New.\n\t* gcc.dg/vmx/bug-3.c: New.\n\t* gcc.dg/vmx/cw-bug-1.c: New.\n\t* gcc.dg/vmx/cw-bug-2.c: New.\n\t* gcc.dg/vmx/cw-bug-3.c: New.\n\t* gcc.dg/vmx/dct.c: New.\n\t* gcc.dg/vmx/debug-1.c: New.\n\t* gcc.dg/vmx/debug-2.c: New.\n\t* gcc.dg/vmx/debug-3.c: New.\n\t* gcc.dg/vmx/debug-4.c: New.\n\t* gcc.dg/vmx/dos-bug-1-gdb.c: New.\n\t* gcc.dg/vmx/dos-bug-2-gdb.c: New.\n\t* gcc.dg/vmx/eg-5.c: New.\n\t* gcc.dg/vmx/fft.c: New.\n\t* gcc.dg/vmx/gcc-bug-1.c: New.\n\t* gcc.dg/vmx/gcc-bug-2.c: New.\n\t* gcc.dg/vmx/gcc-bug-3.c: New.\n\t* gcc.dg/vmx/gcc-bug-4.c: New.\n\t* gcc.dg/vmx/gcc-bug-5.c: New.\n\t* gcc.dg/vmx/gcc-bug-6.c: New.\n\t* gcc.dg/vmx/gcc-bug-7.c: New.\n\t* gcc.dg/vmx/gcc-bug-8.c: New.\n\t* gcc.dg/vmx/gcc-bug-9.c: New.\n\t* gcc.dg/vmx/gcc-bug-b.c: New.\n\t* gcc.dg/vmx/gcc-bug-c.c: New.\n\t* gcc.dg/vmx/gcc-bug-d.c: New.\n\t* gcc.dg/vmx/gcc-bug-e.c: New.\n\t* gcc.dg/vmx/gcc-bug-f.c: New.\n\t* gcc.dg/vmx/gcc-bug-g.c: New.\n\t* gcc.dg/vmx/gcc-bug-i.c: New.\n\t* gcc.dg/vmx/harness.h: New.\n\t* gcc.dg/vmx/ira1.c: New.\n\t* gcc.dg/vmx/ira2a.c: New.\n\t* gcc.dg/vmx/ira2b.c: New.\n\t* gcc.dg/vmx/ira2.c: New.\n\t* gcc.dg/vmx/ira2c.c: New.\n\t* gcc.dg/vmx/mem.c: New.\n\t* gcc.dg/vmx/newton-1.c: New.\n\t* gcc.dg/vmx/ops.c: New.\n\t* gcc.dg/vmx/sn7153.c: New.\n\t* gcc.dg/vmx/spill2.c: New.\n\t* gcc.dg/vmx/spill3.c: New.\n\t* gcc.dg/vmx/spill.c: New.\n\t* gcc.dg/vmx/t.c: New.\n\t* gcc.dg/vmx/varargs-1.c: New.\n\t* gcc.dg/vmx/varargs-2.c: New.\n\t* gcc.dg/vmx/varargs-3.c: New.\n\t* gcc.dg/vmx/varargs-4.c: New.\n\t* gcc.dg/vmx/varargs-5.c: New.\n\t* gcc.dg/vmx/varargs-6.c: New.\n\t* gcc.dg/vmx/varargs-7.c: New.\n\t* gcc.dg/vmx/vmx.exp: New.\n\t* gcc.dg/vmx/vprint-1.c: New.\n\t* gcc.dg/vmx/vscan-1.c: New.\n\t* gcc.dg/vmx/x-01.c: New.\n\t* gcc.dg/vmx/x-02.c: New.\n\t* gcc.dg/vmx/x-03.c: New.\n\t* gcc.dg/vmx/x-04.c: New.\n\t* gcc.dg/vmx/x-05.c: New.\n\t* gcc.dg/vmx/yousufi-1.c: New.\n\t* gcc.dg/vmx/zero-1.c: New.\n\t* gcc.dg/vmx/zero.c: New.\n\nCo-Authored-By: Aldy Hernandez <aldyh@redhat.com>\n\nFrom-SVN: r80808", "tree": {"sha": "0f4a5b07178fe716bb9cdcb5912c12577c1400bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f4a5b07178fe716bb9cdcb5912c12577c1400bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5735c2609b01b67c84c7cd43d85294d62dd6535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5735c2609b01b67c84c7cd43d85294d62dd6535", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5735c2609b01b67c84c7cd43d85294d62dd6535", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5735c2609b01b67c84c7cd43d85294d62dd6535/comments", "author": null, "committer": null, "parents": [{"sha": "7dc57c7cc0b426cbcb25f5eefcdb5825160d4e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc57c7cc0b426cbcb25f5eefcdb5825160d4e56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc57c7cc0b426cbcb25f5eefcdb5825160d4e56"}], "stats": {"total": 12528, "additions": 12528, "deletions": 0}, "files": [{"sha": "041e31d8e1f386b19989834d54ef8565890a331c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -1,3 +1,123 @@\n+2004-04-17  Zack Weinberg  <zack@codesourcery.com>\n+\t    Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* gcc.dg/vmx/1b-01.c: New.\n+\t* gcc.dg/vmx/1b-02.c: New.\n+\t* gcc.dg/vmx/1b-03.c: New.\n+\t* gcc.dg/vmx/1b-04.c: New.\n+\t* gcc.dg/vmx/1b-05.c: New.\n+\t* gcc.dg/vmx/1b-06.c: New.\n+\t* gcc.dg/vmx/1b-07.c: New.\n+\t* gcc.dg/vmx/1c-01.c: New.\n+\t* gcc.dg/vmx/1c-02.c: New.\n+\t* gcc.dg/vmx/3a-01a.c: New.\n+\t* gcc.dg/vmx/3a-01.c: New.\n+\t* gcc.dg/vmx/3a-01m.c: New.\n+\t* gcc.dg/vmx/3a-03.c: New.\n+\t* gcc.dg/vmx/3a-03m.c: New.\n+\t* gcc.dg/vmx/3a-04.c: New.\n+\t* gcc.dg/vmx/3a-04m.c: New.\n+\t* gcc.dg/vmx/3a-05.c: New.\n+\t* gcc.dg/vmx/3a-06.c: New.\n+\t* gcc.dg/vmx/3a-06m.c: New.\n+\t* gcc.dg/vmx/3a-07.c: New.\n+\t* gcc.dg/vmx/3b-01.c: New.\n+\t* gcc.dg/vmx/3b-02.c: New.\n+\t* gcc.dg/vmx/3b-10.c: New.\n+\t* gcc.dg/vmx/3b-13.c: New.\n+\t* gcc.dg/vmx/3b-14.c: New.\n+\t* gcc.dg/vmx/3b-15.c: New.\n+\t* gcc.dg/vmx/3c-01a.c: New.\n+\t* gcc.dg/vmx/3c-01.c: New.\n+\t* gcc.dg/vmx/3c-02.c: New.\n+\t* gcc.dg/vmx/3c-03.c: New.\n+\t* gcc.dg/vmx/3d-01.c: New.\n+\t* gcc.dg/vmx/4-01.c: New.\n+\t* gcc.dg/vmx/4-03.c: New.\n+\t* gcc.dg/vmx/5-01.c: New.\n+\t* gcc.dg/vmx/5-02.c: New.\n+\t* gcc.dg/vmx/5-03.c: New.\n+\t* gcc.dg/vmx/5-04.c: New.\n+\t* gcc.dg/vmx/5-05.c: New.\n+\t* gcc.dg/vmx/5-06.c: New.\n+\t* gcc.dg/vmx/5-07.c: New.\n+\t* gcc.dg/vmx/5-07t.c: New.\n+\t* gcc.dg/vmx/5-08.c: New.\n+\t* gcc.dg/vmx/5-10.c: New.\n+\t* gcc.dg/vmx/5-11.c: New.\n+\t* gcc.dg/vmx/7-01a.c: New.\n+\t* gcc.dg/vmx/7-01.c: New.\n+\t* gcc.dg/vmx/7c-01.c: New.\n+\t* gcc.dg/vmx/7d-01.c: New.\n+\t* gcc.dg/vmx/7d-02.c: New.\n+\t* gcc.dg/vmx/8-01.c: New.\n+\t* gcc.dg/vmx/8-02a.c: New.\n+\t* gcc.dg/vmx/8-02.c: New.\n+\t* gcc.dg/vmx/brode-1.c: New.\n+\t* gcc.dg/vmx/bug-1.c: New.\n+\t* gcc.dg/vmx/bug-2.c: New.\n+\t* gcc.dg/vmx/bug-3.c: New.\n+\t* gcc.dg/vmx/cw-bug-1.c: New.\n+\t* gcc.dg/vmx/cw-bug-2.c: New.\n+\t* gcc.dg/vmx/cw-bug-3.c: New.\n+\t* gcc.dg/vmx/dct.c: New.\n+\t* gcc.dg/vmx/debug-1.c: New.\n+\t* gcc.dg/vmx/debug-2.c: New.\n+\t* gcc.dg/vmx/debug-3.c: New.\n+\t* gcc.dg/vmx/debug-4.c: New.\n+\t* gcc.dg/vmx/dos-bug-1-gdb.c: New.\n+\t* gcc.dg/vmx/dos-bug-2-gdb.c: New.\n+\t* gcc.dg/vmx/eg-5.c: New.\n+\t* gcc.dg/vmx/fft.c: New.\n+\t* gcc.dg/vmx/gcc-bug-1.c: New.\n+\t* gcc.dg/vmx/gcc-bug-2.c: New.\n+\t* gcc.dg/vmx/gcc-bug-3.c: New.\n+\t* gcc.dg/vmx/gcc-bug-4.c: New.\n+\t* gcc.dg/vmx/gcc-bug-5.c: New.\n+\t* gcc.dg/vmx/gcc-bug-6.c: New.\n+\t* gcc.dg/vmx/gcc-bug-7.c: New.\n+\t* gcc.dg/vmx/gcc-bug-8.c: New.\n+\t* gcc.dg/vmx/gcc-bug-9.c: New.\n+\t* gcc.dg/vmx/gcc-bug-b.c: New.\n+\t* gcc.dg/vmx/gcc-bug-c.c: New.\n+\t* gcc.dg/vmx/gcc-bug-d.c: New.\n+\t* gcc.dg/vmx/gcc-bug-e.c: New.\n+\t* gcc.dg/vmx/gcc-bug-f.c: New.\n+\t* gcc.dg/vmx/gcc-bug-g.c: New.\n+\t* gcc.dg/vmx/gcc-bug-i.c: New.\n+\t* gcc.dg/vmx/harness.h: New.\n+\t* gcc.dg/vmx/ira1.c: New.\n+\t* gcc.dg/vmx/ira2a.c: New.\n+\t* gcc.dg/vmx/ira2b.c: New.\n+\t* gcc.dg/vmx/ira2.c: New.\n+\t* gcc.dg/vmx/ira2c.c: New.\n+\t* gcc.dg/vmx/mem.c: New.\n+\t* gcc.dg/vmx/newton-1.c: New.\n+\t* gcc.dg/vmx/ops.c: New.\n+\t* gcc.dg/vmx/sn7153.c: New.\n+\t* gcc.dg/vmx/spill2.c: New.\n+\t* gcc.dg/vmx/spill3.c: New.\n+\t* gcc.dg/vmx/spill.c: New.\n+\t* gcc.dg/vmx/t.c: New.\n+\t* gcc.dg/vmx/varargs-1.c: New.\n+\t* gcc.dg/vmx/varargs-2.c: New.\n+\t* gcc.dg/vmx/varargs-3.c: New.\n+\t* gcc.dg/vmx/varargs-4.c: New.\n+\t* gcc.dg/vmx/varargs-5.c: New.\n+\t* gcc.dg/vmx/varargs-6.c: New.\n+\t* gcc.dg/vmx/varargs-7.c: New.\n+\t* gcc.dg/vmx/vmx.exp: New.\n+\t* gcc.dg/vmx/vprint-1.c: New.\n+\t* gcc.dg/vmx/vscan-1.c: New.\n+\t* gcc.dg/vmx/x-01.c: New.\n+\t* gcc.dg/vmx/x-02.c: New.\n+\t* gcc.dg/vmx/x-03.c: New.\n+\t* gcc.dg/vmx/x-04.c: New.\n+\t* gcc.dg/vmx/x-05.c: New.\n+\t* gcc.dg/vmx/yousufi-1.c: New.\n+\t* gcc.dg/vmx/zero-1.c: New.\n+\t* gcc.dg/vmx/zero.c: New.\n+\n 2004-04-17  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* g++.dg/lookup/java1.C: Update for chage of"}, {"sha": "425b0262c605fb982036ee0dfa865479205a969d", "filename": "gcc/testsuite/gcc.dg/vmx/1b-01.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,11 @@\n+#include \"harness.h\"\n+\n+vector unsigned char a;\n+\n+static void test()\n+{ \n+  check(sizeof(a) == 16, \"sizeof(a)\");\n+  check(((int)&a & 15) == 0, \"alignof(a)\");\n+  check((int)&a != 0, \"&a\");\n+  check(vec_all_eq(a,((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})), \"value(a)\");\n+}"}, {"sha": "2f9aca5da5c74b1af32c44a970f4c0e547588482", "filename": "gcc/testsuite/gcc.dg/vmx/1b-02.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+vector unsigned char const u8c;\n+vector signed char const s8c;\n+vector bool char const b8c;\n+vector unsigned short const u16c;\n+vector signed short const s16c;\n+vector bool short const b16c;\n+vector unsigned int const u32c;\n+vector signed int const s32c;\n+vector bool int const b32c;\n+vector float const f32c;\n+vector pixel const p16c;\n+\n+vector unsigned char volatile u8v;\n+vector signed char volatile s8v;\n+vector bool char volatile b8v;\n+vector unsigned short volatile u16v;\n+vector signed short volatile s16v;\n+vector bool short volatile b16v;\n+vector unsigned int volatile u32v;\n+vector signed int volatile s32v;\n+vector bool int volatile b32v;\n+vector float volatile f32v;\n+vector pixel volatile p16v;\n+\n+const vector unsigned char u8c_;\n+const vector signed char s8c_;\n+const vector bool char b8c_;\n+const vector unsigned short u16c_;\n+const vector signed short s16c_;\n+const vector bool short b16c_;\n+const vector unsigned int u32c_;\n+const vector signed int s32c_;\n+const vector bool int b32c_;\n+const vector float f32c_;\n+const vector pixel p16c_;\n+\n+volatile vector unsigned char u8v_;\n+volatile vector signed char s8v_;\n+volatile vector bool char b8v_;\n+volatile vector unsigned short u16v_;\n+volatile vector signed short s16v_;\n+volatile vector bool short b16v_;\n+volatile vector unsigned int u32v_;\n+volatile vector signed int s32v_;\n+volatile vector bool int b32v_;\n+volatile vector float f32v_;\n+volatile vector pixel p16v_;"}, {"sha": "2f8f816ba238726c092930ff939d636c93ccc684", "filename": "gcc/testsuite/gcc.dg/vmx/1b-03.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,64 @@\n+#include <altivec.h>\n+int main()\n+{\n+  vector unsigned char u8;\n+  vector signed char s8;\n+  vector bool char b8;\n+  vector unsigned short u16;\n+  vector signed short s16;\n+  vector bool short b16;\n+  vector unsigned int u32;\n+  vector signed int s32;\n+  vector bool int b32;\n+  vector float f32;\n+  vector pixel p16;\n+\n+  vector unsigned char const u8c;\n+  vector signed char const s8c;\n+  vector bool char const b8c;\n+  vector unsigned short const u16c;\n+  vector signed short const s16c;\n+  vector bool short const b16c;\n+  vector unsigned int const u32c;\n+  vector signed int const s32c;\n+  vector bool int const b32c;\n+  vector float const f32c;\n+  vector pixel const p16c;\n+\n+  vector unsigned char volatile u8v;\n+  vector signed char volatile s8v;\n+  vector bool char volatile b8v;\n+  vector unsigned short volatile u16v;\n+  vector signed short volatile s16v;\n+  vector bool short volatile b16v;\n+  vector unsigned int volatile u32v;\n+  vector signed int volatile s32v;\n+  vector bool int volatile b32v;\n+  vector float volatile f32v;\n+  vector pixel volatile p16v;\n+\n+  const vector unsigned char u8c_;\n+  const vector signed char s8c_;\n+  const vector bool char b8c_;\n+  const vector unsigned short u16c_;\n+  const vector signed short s16c_;\n+  const vector bool short b16c_;\n+  const vector unsigned int u32c_;\n+  const vector signed int s32c_;\n+  const vector bool int b32c_;\n+  const vector float f32c_;\n+  const vector pixel p16c_;\n+\n+  volatile vector unsigned char u8v_;\n+  volatile vector signed char s8v_;\n+  volatile vector bool char b8v_;\n+  volatile vector unsigned short u16v_;\n+  volatile vector signed short s16v_;\n+  volatile vector bool short b16v_;\n+  volatile vector unsigned int u32v_;\n+  volatile vector signed int s32v_;\n+  volatile vector bool int b32v_;\n+  volatile vector float f32v_;\n+  volatile vector pixel p16v_;\n+  return 0;\n+}"}, {"sha": "5807ea335a7c90393c404d80e2fa3994a822b213", "filename": "gcc/testsuite/gcc.dg/vmx/1b-04.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-04.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,7 @@\n+#include <altivec.h>\n+int main()\n+{\n+  vector unsigned char a,b;\n+  b = (vector unsigned char)a;\n+  return 0;\n+}"}, {"sha": "63eb10b7c3c463387d37ba51f6f69fc7eb87e6c0", "filename": "gcc/testsuite/gcc.dg/vmx/1b-05.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-05.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector float _0 ;\n+vector pixel _1 ;\n+vector bool int _2 ;\n+vector unsigned int _3 ;\n+vector signed int _4 ;\n+vector bool short _5 ;\n+vector unsigned short _6 ;\n+vector signed short _7 ;\n+vector bool char _8 ;\n+vector unsigned char _9 ;\n+vector signed char _10 ;"}, {"sha": "84c69813ce4ea75d8459a0a7f9329e279a4af091", "filename": "gcc/testsuite/gcc.dg/vmx/1b-06.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-06.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector char bool _4 ;\n+vector char unsigned _31 ;\n+vector char signed _59 ;\n+bool _84 ;\n+vector pixel _89 ;\n+vector int bool _95 ;\n+vector short bool _102 ;\n+vector unsigned int _122 ;\n+vector unsigned short _129 ;\n+vector signed int _150 ;\n+vector signed short _157 ;\n+vector int bool _179 ;\n+vector int short bool _186 ;\n+vector unsigned int _206 ;\n+vector int unsigned short _213 ;\n+vector signed int _234 ;\n+vector int signed short _241 ;\n+vector float _339 ;"}, {"sha": "b1f4bb6e8a330f591d8d7fc78c87db6a18a4fca9", "filename": "gcc/testsuite/gcc.dg/vmx/1b-07.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1b-07.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector char bool _0 ;\n+vector bool char _8 ;\n+vector char unsigned _56 ;\n+vector unsigned char _64 ;\n+vector char signed _112 ;\n+vector signed char _120 ;\n+bool _168 ;\n+vector pixel _170 ;\n+vector int bool _178 ;\n+vector bool int _186 ;\n+vector short bool _234 ;\n+vector bool short _242 ;\n+vector unsigned int _290 ;\n+vector int unsigned _298 ;\n+vector unsigned short _346 ;\n+vector short unsigned _354 ;\n+vector signed int _402 ;\n+vector int signed _410 ;\n+vector signed short _458 ;\n+vector short signed _466 ;\n+vector int bool _514 ;\n+vector int bool _544 ;\n+vector int bool _559 ;\n+vector bool int _589 ;\n+vector int short bool _874 ;\n+vector int bool short _889 ;\n+vector short int bool _904 ;\n+vector short bool int _919 ;\n+vector bool int short _934 ;\n+vector bool short int _949 ;\n+vector unsigned int _1234 ;\n+vector int unsigned _1249 ;\n+vector unsigned int _1279 ;\n+vector int unsigned _1294 ;\n+vector unsigned int _1309 ;\n+vector int unsigned short _1594 ;\n+vector int short unsigned _1609 ;\n+vector unsigned int short _1624 ;\n+vector unsigned short int _1639 ;\n+vector short int unsigned _1654 ;\n+vector short unsigned int _1669 ;\n+vector signed int _1954 ;\n+vector int signed _1969 ;\n+vector signed int _1999 ;\n+vector int signed _2014 ;\n+vector signed int _2029 ;\n+vector int signed short _2314 ;\n+vector int short signed _2329 ;\n+vector signed int short _2344 ;\n+vector signed short int _2359 ;\n+vector short int signed _2374 ;\n+vector short signed int _2389 ;\n+vector float _2674 ;"}, {"sha": "50c041be100b4d761edf730842c3ae09021d060d", "filename": "gcc/testsuite/gcc.dg/vmx/1c-01.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,55 @@\n+#include \"harness.h\"\n+\n+/* Declare vector types.  */\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+vector unsigned char *u8c = &u8;\n+vector signed char *s8c = &s8;\n+vector bool char *b8c = &b8;\n+vector unsigned short *u16c = &u16;\n+vector signed short *s16c = &s16;\n+vector bool short *b16c = &b16;\n+vector unsigned int *u32c = &u32;\n+vector signed int *s32c = &s32;\n+vector bool int *b32c = &b32;\n+vector float *f32c = &f32;\n+vector pixel *p16c = &p16;\n+\n+static void test()\n+{\n+  check(((int)u8c & 15) == 0, \"alignof(u8)\");\n+  check(((int)u8c & 15) == 0, \"alignof(u8)\");\n+  check(((int)s8c & 15) == 0, \"alignof(s8)\");\n+  check(((int)b8c & 15) == 0, \"alignof(b8)\");\n+  check(((int)u16c & 15) == 0, \"alignof(u16)\");\n+  check(((int)s16c & 15) == 0, \"alignof(s16)\");\n+  check(((int)b16c & 15) == 0, \"alignof(b16)\");\n+  check(((int)u32c & 15) == 0, \"alignof(u32)\");\n+  check(((int)s32c & 15) == 0, \"alignof(s32)\");\n+  check(((int)b32c & 15) == 0, \"alignof(b32)\");\n+  check(((int)f32c & 15) == 0, \"alignof(f32)\");\n+  check(((int)p16c & 15) == 0, \"alignof(p16)\");\n+\n+  check((int)u8c == (int)&u8, \"u8c == &u8\");\n+  check((int)u8c == (int)&u8, \"u8c == &u8\");\n+  check((int)s8c == (int)&s8, \"s8c == &s8\");\n+  check((int)b8c == (int)&b8, \"b8c == &b8\");\n+  check((int)u16c == (int)&u16, \"u16c == &u16\");\n+  check((int)s16c == (int)&s16, \"s16c == &s16\");\n+  check((int)b16c == (int)&b16, \"b16c == &b16\");\n+  check((int)u32c == (int)&u32, \"u32c == &u32\");\n+  check((int)s32c == (int)&s32, \"s32c == &s32\");\n+  check((int)b32c == (int)&b32, \"b32c == &b32\");\n+  check((int)f32c == (int)&f32, \"f32c == &f32\");\n+  check((int)p16c == (int)&p16, \"p16c == &p16\");\n+}"}, {"sha": "ec591ed596d4617d53fcf84989edeee8ca8640b9", "filename": "gcc/testsuite/gcc.dg/vmx/1c-02.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F1c-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,34 @@\n+#include \"harness.h\"\n+\n+/* Vector types used in aggregates.  */\n+struct { char b; vector unsigned char a; char e; } u8;\n+struct { char b; vector signed char a; char e; } s8;\n+struct { char b; vector bool char a; char e; } b8;\n+struct { char b; vector unsigned short a; char e; } u16;\n+struct { char b; vector signed short a; char e; } s16;\n+struct { char b; vector bool short a; char e; } b16;\n+struct { char b; vector unsigned int a; char e; } u32;\n+struct { char b; vector signed int a; char e; } s32;\n+struct { char b; vector bool int a; char e; } b32;\n+struct { char b; vector float a; char e; } f32;\n+struct { char b; vector pixel a; char e; } p16;\n+\n+union { char b; vector unsigned char a; } u8u;\n+union { char b; vector signed char a; } s8u;\n+union { char b; vector bool char a; } b8u;\n+union { char b; vector unsigned short a; } u16u;\n+union { char b; vector signed short a; } s16u;\n+union { char b; vector bool short a; } b16u;\n+union { char b; vector unsigned int a; } u32u;\n+union { char b; vector signed int a; } s32u;\n+union { char b; vector bool int a; } b32u;\n+union { char b; vector float a; } f32u;\n+union { char b; vector pixel a; } p16u;\n+\n+static void test()\n+{\n+  check((int)&u8.a - (int)&u8 == 16, \"u8.a\");\n+  check((int)&u8.e - (int)&u8 == 32, \"u8.e\");\n+  check(sizeof(u8) == 48, \"sizeof(u8)\");\n+  check(sizeof(u8u) == 16, \"sizeof(u8u)\");\n+}"}, {"sha": "86e514d4a241e3e1bf294b12eee8bb637bc1c2fe", "filename": "gcc/testsuite/gcc.dg/vmx/3a-01.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,16 @@\n+#include \"harness.h\"\n+/* Simple use of a non-overloaded generic vector intrinsic.  */\n+\n+static vector unsigned int\n+f(vector unsigned int a, vector unsigned int b) \n+{\n+  return vec_addc(a,b);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned int){1,1,3,2}),\n+\t\t     ((vector unsigned int){-1,-2,3,-4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "7619d1185cb755fa3d480e10d645759b006e6b4b", "filename": "gcc/testsuite/gcc.dg/vmx/3a-01a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01a.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+/* Simple use of a non-overloaded specific vector intrinsic.  */\n+\n+vector unsigned int\n+f(vector unsigned int a, vector unsigned int b)\n+{\n+  return vec_vaddcuw(a,b);\n+}\n+\n+void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned int){1,1,3,2}),\n+\t\t     ((vector unsigned int){-1,-2,3,-4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "d57287007d99647ada28b8bf47416a0bcc2cfb76", "filename": "gcc/testsuite/gcc.dg/vmx/3a-01m.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-01m.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+/* Simple use of a non-overloaded specific vector intrinsic.  */\n+\n+vector unsigned int\n+f(vector unsigned int a, vector unsigned int b) \n+{\n+  return vec_vaddcuw(a,b);\n+}\n+\n+static void test() \n+{\n+  check(vec_all_eq(f(((vector unsigned int){1,1,3,2}),\n+\t\t     ((vector unsigned int){-1,-2,3,-4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "5f46ee6f4570339706e99e00ee5ce2ae3237eb6b", "filename": "gcc/testsuite/gcc.dg/vmx/3a-03.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,18 @@\n+#include \"harness.h\"\n+\n+/* Small expression involving non-overloaded generic vector intrinsics.  */\n+\n+vector float\n+f(vector float a, vector float b, vector float c) \n+{\n+  return vec_nmsub(a, vec_re(b), vec_nmsub(b, c, vec_expte(a)));\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){-249.181808, -369.230774, -495.294098, -575.368408})),\n+\t\"f\");\n+}"}, {"sha": "68feecee71368a9679c3508eb150db1109039dd1", "filename": "gcc/testsuite/gcc.dg/vmx/3a-03m.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-03m.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,18 @@\n+#include \"harness.h\"\n+\n+/* Small expression involving non-overloaded specific vector intrinsics.  */\n+\n+vector float\n+f(vector float a, vector float b, vector float c) \n+{\n+  return vec_nmsub(a, vec_vrefp(b), vec_nmsub(b, c, vec_vexptefp(a)));\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){-249.181808, -369.230774, -495.294098, -575.368408})),\n+\t\"f\");\n+}"}, {"sha": "f6657084cc535c95a92fa25ab710bb35ac32598c", "filename": "gcc/testsuite/gcc.dg/vmx/3a-04.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,18 @@\n+#include \"harness.h\"\n+\n+/* Small expression involving non-overloaded vector intrinsics.  */\n+\n+vector float\n+f(vector float a, vector float b, vector float c) \n+{\n+  return vec_vmaddfp(a, vec_re(b), vec_vmaxfp(c, vec_expte(a)));\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){23.1818085, 29.2307587, 32.2940826, 128.368393})),\n+\t\"f\");\n+}"}, {"sha": "e394e9b8bd9a6ad7e1c7ca9ed418c5f0494459a7", "filename": "gcc/testsuite/gcc.dg/vmx/3a-04m.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-04m.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,18 @@\n+#include \"harness.h\"\n+\n+/* Small expression involving non-overloaded specific vector intrinsics.  */\n+\n+vector float\n+f(vector float a, vector float b, vector float c) \n+{\n+  return vec_vmaddfp(a, vec_vrefp(b), vec_vmaxfp(c, vec_vexptefp(a)));\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){23.1818085, 29.2307587, 32.2940826, 128.368393})),\n+\t\"f\");\n+}"}, {"sha": "55e0ed8e0c21caf4d37a9d192908ae04fd4c6bbc", "filename": "gcc/testsuite/gcc.dg/vmx/3a-05.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-05.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,22 @@\n+#include \"harness.h\"\n+\n+/* Small expression involving non-overloaded specific vector intrinsics.  */\n+\n+vector float\n+f(vector float a, vector float b, vector float c) \n+{\n+  vector float q = vec_expte(a);\n+  vector float r = vec_vsubfp(c, q);\n+  vector float s = vec_re(b);\n+  vector float t = vec_nmsub(s, c, r);\n+  return t;\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){16.9092026, 18.7693329, -2.8233242, -92.9472198})),\n+\t\t   \"f\");\n+}"}, {"sha": "6f27b3860a891bcab1d3d04076acdaf0ba3a828d", "filename": "gcc/testsuite/gcc.dg/vmx/3a-06.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,15 @@\n+#include \"harness.h\"\n+\n+vector unsigned int\n+f(vector unsigned int a, vector unsigned int b) \n+{\n+  return vec_addc(vec_addc(a,b),b);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned int){2,4,6,8}),\n+\t\t     ((vector unsigned int){-1,-2,-3,-4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "e616f9aef2ef93d5277097375839d0adb8284965", "filename": "gcc/testsuite/gcc.dg/vmx/3a-06m.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06m.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06m.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-06m.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,15 @@\n+#include \"harness.h\"\n+\n+vector unsigned int\n+f(vector unsigned int a, vector unsigned int b) \n+{\n+  return vec_vaddcuw(vec_vaddcuw(a,b),b);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned int){2,4,6,8}),\n+\t\t     ((vector unsigned int){-1,-2,-3,-4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "197fd23c86e1e2b9554c42a94dc4a58dd1beb716", "filename": "gcc/testsuite/gcc.dg/vmx/3a-07.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3a-07.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,16 @@\n+#include \"harness.h\"\n+\n+static vector unsigned char \n+zero() \n+{\n+  /* MCC allocates a stack slot for and loads an uninitialized local\n+     variable.  */\n+  vector unsigned char a;\n+  return vec_sub(a,a);\n+}\n+\n+static void test()\n+{\n+  static vector unsigned char zerov;\n+  check(vec_all_eq(zero(), zerov), \"zero\");\n+}"}, {"sha": "e8feec481e0d9bff5cdec5f20849da768c7d4f98", "filename": "gcc/testsuite/gcc.dg/vmx/3b-01.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,18 @@\n+#include \"harness.h\"\n+\n+/* Simple use of a overloaded generic vector intrinsic.  */\n+\n+vector unsigned int\n+f(vector unsigned int a, vector unsigned int b) \n+{\n+  return vec_subs(a,b);\n+}\n+\n+static void test()\n+{\n+  static vector unsigned int zero;\n+  check(vec_all_eq(f(((vector unsigned int){2,4,6,8}),\n+\t\t     ((vector unsigned int){2,4,6,8})),\n+\t\t   zero),\n+\t\"f\");\n+}"}, {"sha": "66693e0ff7172dc8cd362826f34ce960283c8b49", "filename": "gcc/testsuite/gcc.dg/vmx/3b-02.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,16 @@\n+#include \"harness.h\"\n+\n+vector unsigned char\n+f(vector unsigned char a, vector unsigned char b) \n+{\n+  return vec_vsububs(a,b);\n+}\n+\n+static void test()\n+{\n+  static vector unsigned char zero;\n+  check(vec_all_eq(f(((vector unsigned char){2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}),\n+\t\t     ((vector unsigned char){2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2})),\n+\t\t   zero),\n+\t\"f\");\n+}"}, {"sha": "5f8fb3adfab1cf8ac5a441b200f82be08e0da1e1", "filename": "gcc/testsuite/gcc.dg/vmx/3b-10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-10.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,21 @@\n+#include \"harness.h\"\n+\n+typedef vector unsigned int x;\n+\n+x f (x a)\n+{\n+  return vec_addc(a,a); \n+}\n+\n+void g (int b) \n+{\n+  vec_dst(&b, 3, 3); \n+  vec_dst(&b, 1, 1);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned int){0x80000000,0x7fffffff,3,4})),\n+\t\t   ((vector unsigned int){1,0,0,0})),\n+\t\"f\");\n+}"}, {"sha": "146f737aebdb24aa88fda5f4b056516aed61a017", "filename": "gcc/testsuite/gcc.dg/vmx/3b-13.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-13.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,15 @@\n+#include \"harness.h\"\n+\n+vector signed int \n+f(vector float a, vector signed int b) \n+{\n+  return vec_splat(vec_cts(vec_ctf(vec_ctu(a, 31),0),9),30);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){1,2,3,4}),\n+\t\t     ((vector signed int){2,4,6,8})),\n+\t\t   ((vector signed int){2147483647, 2147483647, 2147483647, 2147483647})),\n+\t\"f\");\n+}"}, {"sha": "02b2d901ebc6622d1087fdba78ab24b7b342b07a", "filename": "gcc/testsuite/gcc.dg/vmx/3b-14.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-14.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,29 @@\n+#include \"harness.h\"\n+\n+static vector bool char x(void);\n+static void g(void);\n+\n+static vector bool char\n+f (void) \n+{\n+  vector bool char a = x();\n+  g();\n+  return a;\n+}\n+\n+static vector bool char\n+x (void)\n+{\n+  static vector bool char zero;\n+  return zero;\n+}\n+\n+static void g ()\n+{\n+}\n+\n+static void test()\n+{\n+  static vector bool char zero;\n+  check(vec_all_eq(f(), zero), \"f\");\n+}"}, {"sha": "ec9cf2c5a0d506e524153d23f7738df2a98fffb1", "filename": "gcc/testsuite/gcc.dg/vmx/3b-15.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3b-15.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,19 @@\n+#include \"harness.h\"\n+\n+vector unsigned char\n+f (vector unsigned char a, vector unsigned char b, vector unsigned char c)\n+{\n+  return vec_perm(a,b,c); \n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector unsigned char){0,1,2,3,4,5,6,7,\n+\t\t\t\t\t    8,9,10,11,12,13,14,15}),\n+\t\t     ((vector unsigned char){70,71,72,73,74,75,76,77,\n+\t\t\t\t\t    78,79,80,81,82,83,84,85}),\n+\t\t     ((vector unsigned char){0x1,0x14,0x18,0x10,0x16,0x15,0x19,0x1a,\n+\t\t\t\t\t    0x1c,0x1c,0x1c,0x12,0x8,0x1d,0x1b,0xe})),\n+\t\t   ((vector unsigned char){1,74,78,70,76,75,79,80,82,82,82,72,8,83,81,14})),\n+\t\"f\");\n+}"}, {"sha": "c6da229f4b0cd51728161727bfa1f4bfa4edbb5e", "filename": "gcc/testsuite/gcc.dg/vmx/3c-01.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,86 @@\n+#include \"harness.h\"\n+\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+static void g(void);\n+\n+static void f(void *p)\n+{\n+  u8 = vec_ld(16, (unsigned char *)p);\n+  u16 = vec_ld(16, (unsigned short*)p);\n+  u32 = vec_ld(16, (unsigned int*)p);\n+  s8 = vec_ld(16, (signed char *)p);\n+  s16 = vec_ld(16, (short*)p);\n+  s32 = vec_ld(16, (int*)p);\n+  g();\n+  u8 = vec_ld(16, (vector unsigned char*)p);\n+  s8 = vec_ld(16, (vector signed char*)p);\n+  b8 = vec_ld(16, (vector bool char*)p);\n+  g();\n+  u16 = vec_ld(16, (vector unsigned short*)p);\n+  s16 = vec_ld(16, (vector signed short*)p);\n+  b16 = vec_ld(16, (vector bool short*)p);\n+  g();\n+  u32 = vec_ld(16, (vector unsigned int*)p);\n+  s32 = vec_ld(16, (vector signed int*)p);\n+  b32 = vec_ld(16, (vector bool int*)p);\n+  f32 = vec_ld(16, (vector float*)p);\n+  p16 = vec_ld(16, (vector pixel*)p);\n+  g();\n+  u8 = vec_lde(16, (unsigned char *)p);\n+  u16 = vec_lde(16, (unsigned short*)p);\n+  u32 = vec_lde(16, (unsigned int*)p);\n+  s8 = vec_lde(16, (signed char *)p);\n+  s16 = vec_lde(16, (short*)p);\n+  s32 = vec_lde(16, (int*)p);\n+  f32 = vec_ldl(16, (vector float*)p);\n+  p16 = vec_ldl(16, (vector pixel*)p);\n+  g();\n+  u8 = vec_ldl(16, (vector unsigned char*)p);\n+  s8 = vec_ldl(16, (vector signed char*)p);\n+  b8 = vec_ldl(16, (vector bool char*)p);\n+  g();\n+  u16 = vec_ldl(16, (vector unsigned short*)p);\n+  s16 = vec_ldl(16, (vector signed short*)p);\n+  b16 = vec_ldl(16, (vector bool short*)p);\n+  g();\n+  u32 = vec_ldl(16, (vector unsigned int*)p);\n+  s32 = vec_ldl(16, (vector signed int*)p);\n+  b32 = vec_ldl(16, (vector bool int*)p);\n+  f32 = vec_ldl(16, (vector float*)p);\n+  p16 = vec_ldl(16, (vector pixel*)p);\n+}\n+\n+static void g () \n+{\n+}\n+\n+static void test()\n+{\n+  static vector unsigned int value = {1,-2,3,-4};\n+  static vector unsigned int buffer[2];\n+#define chek(v, s) check(vec_all_eq(v, value), s)\n+  buffer[1] = value;\n+  f((void *)buffer);\n+  chek((vector unsigned int) u8, \"u8\");\n+  chek((vector unsigned int) s8, \"s8\");\n+  chek((vector unsigned int) b8, \"b8\");\n+  chek((vector unsigned int) u16, \"u16\");\n+  chek((vector unsigned int) s16, \"s16\");\n+  chek((vector unsigned int) b16, \"b16\");\n+  chek((vector unsigned int) u32, \"u32\");\n+  chek((vector unsigned int) s32, \"s32\");\n+  chek((vector unsigned int) b32, \"b32\");\n+  chek((vector unsigned int) f32, \"f32\");\n+  chek((vector unsigned int) p16, \"p16\");\n+}"}, {"sha": "2499ca66598c8616c49a8aa2af130f56d6a05c3b", "filename": "gcc/testsuite/gcc.dg/vmx/3c-01a.c", "status": "added", "additions": 1450, "deletions": 0, "changes": 1450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-01a.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,1450 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef const volatile unsigned int _1;\n+typedef const  unsigned int _2;\n+typedef  volatile unsigned int _3;\n+typedef   unsigned int _4;\n+typedef const volatile vector bool short _5;\n+typedef const  vector bool short _6;\n+typedef  volatile vector bool short _7;\n+typedef   vector bool short _8;\n+typedef const volatile signed short _9;\n+typedef const  signed short _10;\n+typedef  volatile signed short _11;\n+typedef   signed short _12;\n+typedef const volatile unsigned _13;\n+typedef const  unsigned _14;\n+typedef  volatile unsigned _15;\n+typedef   unsigned _16;\n+typedef const volatile signed short int _17;\n+typedef const  signed short int _18;\n+typedef  volatile signed short int _19;\n+typedef   signed short int _20;\n+typedef const volatile unsigned short int _21;\n+typedef const  unsigned short int _22;\n+typedef  volatile unsigned short int _23;\n+typedef   unsigned short int _24;\n+typedef const volatile vector pixel _25;\n+typedef const  vector pixel _26;\n+typedef  volatile vector pixel _27;\n+typedef   vector pixel _28;\n+typedef const volatile vector bool int _29;\n+typedef const  vector bool int _30;\n+typedef  volatile vector bool int _31;\n+typedef   vector bool int _32;\n+typedef const volatile vector signed char _33;\n+typedef const  vector signed char _34;\n+typedef  volatile vector signed char _35;\n+typedef   vector signed char _36;\n+typedef const volatile unsigned _37;\n+typedef const  unsigned _38;\n+typedef  volatile unsigned _39;\n+typedef   unsigned _40;\n+typedef const volatile signed int _41;\n+typedef const  signed int _42;\n+typedef  volatile signed int _43;\n+typedef   signed int _44;\n+typedef const volatile vector float _45;\n+typedef const  vector float _46;\n+typedef  volatile vector float _47;\n+typedef   vector float _48;\n+typedef const volatile vector signed short _49;\n+typedef const  vector signed short _50;\n+typedef  volatile vector signed short _51;\n+typedef   vector signed short _52;\n+typedef const volatile unsigned char _53;\n+typedef const  unsigned char _54;\n+typedef  volatile unsigned char _55;\n+typedef   unsigned char _56;\n+typedef const volatile signed int _57;\n+typedef const  signed int _58;\n+typedef  volatile signed int _59;\n+typedef   signed int _60;\n+typedef const volatile unsigned int _61;\n+typedef const  unsigned int _62;\n+typedef  volatile unsigned int _63;\n+typedef   unsigned int _64;\n+typedef const volatile unsigned short _65;\n+typedef const  unsigned short _66;\n+typedef  volatile unsigned short _67;\n+typedef   unsigned short _68;\n+typedef const volatile short _69;\n+typedef const  short _70;\n+typedef  volatile short _71;\n+typedef   short _72;\n+typedef const volatile int _73;\n+typedef const  int _74;\n+typedef  volatile int _75;\n+typedef   int _76;\n+typedef const volatile vector unsigned short _77;\n+typedef const  vector unsigned short _78;\n+typedef  volatile vector unsigned short _79;\n+typedef   vector unsigned short _80;\n+typedef const volatile vector bool char _81;\n+typedef const  vector bool char _82;\n+typedef  volatile vector bool char _83;\n+typedef   vector bool char _84;\n+typedef const volatile signed _85;\n+typedef const  signed _86;\n+typedef  volatile signed _87;\n+typedef   signed _88;\n+typedef const volatile vector signed int _89;\n+typedef const  vector signed int _90;\n+typedef  volatile vector signed int _91;\n+typedef   vector signed int _92;\n+typedef const volatile vector unsigned int _93;\n+typedef const  vector unsigned int _94;\n+typedef  volatile vector unsigned int _95;\n+typedef   vector unsigned int _96;\n+typedef const volatile signed _97;\n+typedef const  signed _98;\n+typedef  volatile signed _99;\n+typedef   signed _100;\n+typedef const volatile short int _101;\n+typedef const  short int _102;\n+typedef  volatile short int _103;\n+typedef   short int _104;\n+typedef const volatile int _105;\n+typedef const  int _106;\n+typedef  volatile int _107;\n+typedef   int _108;\n+typedef const volatile int _109;\n+typedef const  int _110;\n+typedef  volatile int _111;\n+typedef   int _112;\n+typedef const volatile vector unsigned char _113;\n+typedef const  vector unsigned char _114;\n+typedef  volatile vector unsigned char _115;\n+typedef   vector unsigned char _116;\n+typedef const volatile signed char _117;\n+typedef const  signed char _118;\n+typedef  volatile signed char _119;\n+typedef   signed char _120;\n+typedef const volatile float _121;\n+typedef const  float _122;\n+typedef  volatile float _123;\n+typedef   float _124;\n+\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+void f(void *p)\n+{\n+  u8 = vec_lvsl(1,(const volatile unsigned int *)p);\n+  u8 = vec_lvsl(1,(_1 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned int *)p);\n+  u8 = vec_lvsr(1,(_1 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned int *)p);\n+  u8 = vec_lvsl(1,(_2 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned int *)p);\n+  u8 = vec_lvsr(1,(_2 *)p);\n+  u32 = vec_ld(1,(const  unsigned int *)p);\n+  u32 = vec_ld(1,(_2 *)p);\n+  u32 = vec_lde(1,(const  unsigned int *)p);\n+  u32 = vec_lde(1,(_2 *)p);\n+  u32 = vec_ldl(1,(const  unsigned int *)p);\n+  u32 = vec_ldl(1,(_2 *)p);\n+  vec_dst((const  unsigned int *)p,1,1);\n+  vec_dstst((const  unsigned int *)p,1,1);\n+  vec_dststt((const  unsigned int *)p,1,1);\n+  vec_dstt((const  unsigned int *)p,1,1);\n+  vec_dst((_2 *)p,1,1);\n+  vec_dstst((_2 *)p,1,1);\n+  vec_dststt((_2 *)p,1,1);\n+  vec_dstt((_2 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned int *)p);\n+  u8 = vec_lvsl(1,(_3 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned int *)p);\n+  u8 = vec_lvsr(1,(_3 *)p);\n+  u8 = vec_lvsl(1,(  unsigned int *)p);\n+  u8 = vec_lvsl(1,(_4 *)p);\n+  u8 = vec_lvsr(1,(  unsigned int *)p);\n+  u8 = vec_lvsr(1,(_4 *)p);\n+  u32 = vec_ld(1,(  unsigned int *)p);\n+  u32 = vec_ld(1,(_4 *)p);\n+  u32 = vec_lde(1,(  unsigned int *)p);\n+  u32 = vec_lde(1,(_4 *)p);\n+  u32 = vec_ldl(1,(  unsigned int *)p);\n+  u32 = vec_ldl(1,(_4 *)p);\n+  vec_dst((  unsigned int *)p,1,1);\n+  vec_dstst((  unsigned int *)p,1,1);\n+  vec_dststt((  unsigned int *)p,1,1);\n+  vec_dstt((  unsigned int *)p,1,1);\n+  vec_dst((_4 *)p,1,1);\n+  vec_dstst((_4 *)p,1,1);\n+  vec_dststt((_4 *)p,1,1);\n+  vec_dstt((_4 *)p,1,1);\n+  vec_st(u32,1,(  unsigned int *)p);\n+  vec_st(u32,1,(_4 *)p);\n+  vec_ste(u32,1,(  unsigned int *)p);\n+  vec_ste(u32,1,(_4 *)p);\n+  vec_stl(u32,1,(  unsigned int *)p);\n+  vec_stl(u32,1,(_4 *)p);\n+  b16 = vec_ld(1,(const  vector bool short *)p);\n+  b16 = vec_ld(1,(_6 *)p);\n+  b16 = vec_ldl(1,(const  vector bool short *)p);\n+  b16 = vec_ldl(1,(_6 *)p);\n+  vec_dst((const  vector bool short *)p,1,1);\n+  vec_dstst((const  vector bool short *)p,1,1);\n+  vec_dststt((const  vector bool short *)p,1,1);\n+  vec_dstt((const  vector bool short *)p,1,1);\n+  vec_dst((_6 *)p,1,1);\n+  vec_dstst((_6 *)p,1,1);\n+  vec_dststt((_6 *)p,1,1);\n+  vec_dstt((_6 *)p,1,1);\n+  b16 = vec_ld(1,(  vector bool short *)p);\n+  b16 = vec_ld(1,(_8 *)p);\n+  b16 = vec_ldl(1,(  vector bool short *)p);\n+  b16 = vec_ldl(1,(_8 *)p);\n+  vec_dst((  vector bool short *)p,1,1);\n+  vec_dstst((  vector bool short *)p,1,1);\n+  vec_dststt((  vector bool short *)p,1,1);\n+  vec_dstt((  vector bool short *)p,1,1);\n+  vec_dst((_8 *)p,1,1);\n+  vec_dstst((_8 *)p,1,1);\n+  vec_dststt((_8 *)p,1,1);\n+  vec_dstt((_8 *)p,1,1);\n+  vec_st(b16,1,(  vector bool short *)p);\n+  vec_st(b16,1,(_8 *)p);\n+  vec_stl(b16,1,(  vector bool short *)p);\n+  vec_stl(b16,1,(_8 *)p);\n+  u8 = vec_lvsl(1,(const volatile signed short *)p);\n+  u8 = vec_lvsl(1,(_9 *)p);\n+  u8 = vec_lvsr(1,(const volatile signed short *)p);\n+  u8 = vec_lvsr(1,(_9 *)p);\n+  u8 = vec_lvsl(1,(const  signed short *)p);\n+  u8 = vec_lvsl(1,(_10 *)p);\n+  u8 = vec_lvsr(1,(const  signed short *)p);\n+  u8 = vec_lvsr(1,(_10 *)p);\n+  s16 = vec_ld(1,(const  signed short *)p);\n+  s16 = vec_ld(1,(_10 *)p);\n+  s16 = vec_lde(1,(const  signed short *)p);\n+  s16 = vec_lde(1,(_10 *)p);\n+  s16 = vec_ldl(1,(const  signed short *)p);\n+  s16 = vec_ldl(1,(_10 *)p);\n+  vec_dst((const  signed short *)p,1,1);\n+  vec_dstst((const  signed short *)p,1,1);\n+  vec_dststt((const  signed short *)p,1,1);\n+  vec_dstt((const  signed short *)p,1,1);\n+  vec_dst((_10 *)p,1,1);\n+  vec_dstst((_10 *)p,1,1);\n+  vec_dststt((_10 *)p,1,1);\n+  vec_dstt((_10 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile signed short *)p);\n+  u8 = vec_lvsl(1,(_11 *)p);\n+  u8 = vec_lvsr(1,( volatile signed short *)p);\n+  u8 = vec_lvsr(1,(_11 *)p);\n+  u8 = vec_lvsl(1,(  signed short *)p);\n+  u8 = vec_lvsl(1,(_12 *)p);\n+  u8 = vec_lvsr(1,(  signed short *)p);\n+  u8 = vec_lvsr(1,(_12 *)p);\n+  s16 = vec_ld(1,(  signed short *)p);\n+  s16 = vec_ld(1,(_12 *)p);\n+  s16 = vec_lde(1,(  signed short *)p);\n+  s16 = vec_lde(1,(_12 *)p);\n+  s16 = vec_ldl(1,(  signed short *)p);\n+  s16 = vec_ldl(1,(_12 *)p);\n+  vec_dst((  signed short *)p,1,1);\n+  vec_dstst((  signed short *)p,1,1);\n+  vec_dststt((  signed short *)p,1,1);\n+  vec_dstt((  signed short *)p,1,1);\n+  vec_dst((_12 *)p,1,1);\n+  vec_dstst((_12 *)p,1,1);\n+  vec_dststt((_12 *)p,1,1);\n+  vec_dstt((_12 *)p,1,1);\n+  vec_st(s16,1,(  signed short *)p);\n+  vec_st(s16,1,(_12 *)p);\n+  vec_ste(s16,1,(  signed short *)p);\n+  vec_ste(s16,1,(_12 *)p);\n+  vec_stl(s16,1,(  signed short *)p);\n+  vec_stl(s16,1,(_12 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned *)p);\n+  u8 = vec_lvsl(1,(_13 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned *)p);\n+  u8 = vec_lvsr(1,(_13 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned *)p);\n+  u8 = vec_lvsl(1,(_14 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned *)p);\n+  u8 = vec_lvsr(1,(_14 *)p);\n+  u32 = vec_ld(1,(const  unsigned *)p);\n+  u32 = vec_ld(1,(_14 *)p);\n+  u32 = vec_lde(1,(const  unsigned *)p);\n+  u32 = vec_lde(1,(_14 *)p);\n+  u32 = vec_ldl(1,(const  unsigned *)p);\n+  u32 = vec_ldl(1,(_14 *)p);\n+  vec_dst((const  unsigned *)p,1,1);\n+  vec_dstst((const  unsigned *)p,1,1);\n+  vec_dststt((const  unsigned *)p,1,1);\n+  vec_dstt((const  unsigned *)p,1,1);\n+  vec_dst((_14 *)p,1,1);\n+  vec_dstst((_14 *)p,1,1);\n+  vec_dststt((_14 *)p,1,1);\n+  vec_dstt((_14 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned *)p);\n+  u8 = vec_lvsl(1,(_15 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned *)p);\n+  u8 = vec_lvsr(1,(_15 *)p);\n+  u8 = vec_lvsl(1,(  unsigned *)p);\n+  u8 = vec_lvsl(1,(_16 *)p);\n+  u8 = vec_lvsr(1,(  unsigned *)p);\n+  u8 = vec_lvsr(1,(_16 *)p);\n+  u32 = vec_ld(1,(  unsigned *)p);\n+  u32 = vec_ld(1,(_16 *)p);\n+  u32 = vec_lde(1,(  unsigned *)p);\n+  u32 = vec_lde(1,(_16 *)p);\n+  u32 = vec_ldl(1,(  unsigned *)p);\n+  u32 = vec_ldl(1,(_16 *)p);\n+  vec_dst((  unsigned *)p,1,1);\n+  vec_dstst((  unsigned *)p,1,1);\n+  vec_dststt((  unsigned *)p,1,1);\n+  vec_dstt((  unsigned *)p,1,1);\n+  vec_dst((_16 *)p,1,1);\n+  vec_dstst((_16 *)p,1,1);\n+  vec_dststt((_16 *)p,1,1);\n+  vec_dstt((_16 *)p,1,1);\n+  vec_st(u32,1,(  unsigned *)p);\n+  vec_st(u32,1,(_16 *)p);\n+  vec_ste(u32,1,(  unsigned *)p);\n+  vec_ste(u32,1,(_16 *)p);\n+  vec_stl(u32,1,(  unsigned *)p);\n+  vec_stl(u32,1,(_16 *)p);\n+  u8 = vec_lvsl(1,(const volatile signed short int *)p);\n+  u8 = vec_lvsl(1,(_17 *)p);\n+  u8 = vec_lvsr(1,(const volatile signed short int *)p);\n+  u8 = vec_lvsr(1,(_17 *)p);\n+  u8 = vec_lvsl(1,(const  signed short int *)p);\n+  u8 = vec_lvsl(1,(_18 *)p);\n+  u8 = vec_lvsr(1,(const  signed short int *)p);\n+  u8 = vec_lvsr(1,(_18 *)p);\n+  s16 = vec_ld(1,(const  signed short int *)p);\n+  s16 = vec_ld(1,(_18 *)p);\n+  s16 = vec_lde(1,(const  signed short int *)p);\n+  s16 = vec_lde(1,(_18 *)p);\n+  s16 = vec_ldl(1,(const  signed short int *)p);\n+  s16 = vec_ldl(1,(_18 *)p);\n+  vec_dst((const  signed short int *)p,1,1);\n+  vec_dstst((const  signed short int *)p,1,1);\n+  vec_dststt((const  signed short int *)p,1,1);\n+  vec_dstt((const  signed short int *)p,1,1);\n+  vec_dst((_18 *)p,1,1);\n+  vec_dstst((_18 *)p,1,1);\n+  vec_dststt((_18 *)p,1,1);\n+  vec_dstt((_18 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile signed short int *)p);\n+  u8 = vec_lvsl(1,(_19 *)p);\n+  u8 = vec_lvsr(1,( volatile signed short int *)p);\n+  u8 = vec_lvsr(1,(_19 *)p);\n+  u8 = vec_lvsl(1,(  signed short int *)p);\n+  u8 = vec_lvsl(1,(_20 *)p);\n+  u8 = vec_lvsr(1,(  signed short int *)p);\n+  u8 = vec_lvsr(1,(_20 *)p);\n+  s16 = vec_ld(1,(  signed short int *)p);\n+  s16 = vec_ld(1,(_20 *)p);\n+  s16 = vec_lde(1,(  signed short int *)p);\n+  s16 = vec_lde(1,(_20 *)p);\n+  s16 = vec_ldl(1,(  signed short int *)p);\n+  s16 = vec_ldl(1,(_20 *)p);\n+  vec_dst((  signed short int *)p,1,1);\n+  vec_dstst((  signed short int *)p,1,1);\n+  vec_dststt((  signed short int *)p,1,1);\n+  vec_dstt((  signed short int *)p,1,1);\n+  vec_dst((_20 *)p,1,1);\n+  vec_dstst((_20 *)p,1,1);\n+  vec_dststt((_20 *)p,1,1);\n+  vec_dstt((_20 *)p,1,1);\n+  vec_st(s16,1,(  signed short int *)p);\n+  vec_st(s16,1,(_20 *)p);\n+  vec_ste(s16,1,(  signed short int *)p);\n+  vec_ste(s16,1,(_20 *)p);\n+  vec_stl(s16,1,(  signed short int *)p);\n+  vec_stl(s16,1,(_20 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned short int *)p);\n+  u8 = vec_lvsl(1,(_21 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned short int *)p);\n+  u8 = vec_lvsr(1,(_21 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned short int *)p);\n+  u8 = vec_lvsl(1,(_22 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned short int *)p);\n+  u8 = vec_lvsr(1,(_22 *)p);\n+  u16 = vec_ld(1,(const  unsigned short int *)p);\n+  u16 = vec_ld(1,(_22 *)p);\n+  u16 = vec_lde(1,(const  unsigned short int *)p);\n+  u16 = vec_lde(1,(_22 *)p);\n+  u16 = vec_ldl(1,(const  unsigned short int *)p);\n+  u16 = vec_ldl(1,(_22 *)p);\n+  vec_dst((const  unsigned short int *)p,1,1);\n+  vec_dstst((const  unsigned short int *)p,1,1);\n+  vec_dststt((const  unsigned short int *)p,1,1);\n+  vec_dstt((const  unsigned short int *)p,1,1);\n+  vec_dst((_22 *)p,1,1);\n+  vec_dstst((_22 *)p,1,1);\n+  vec_dststt((_22 *)p,1,1);\n+  vec_dstt((_22 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned short int *)p);\n+  u8 = vec_lvsl(1,(_23 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned short int *)p);\n+  u8 = vec_lvsr(1,(_23 *)p);\n+  u8 = vec_lvsl(1,(  unsigned short int *)p);\n+  u8 = vec_lvsl(1,(_24 *)p);\n+  u8 = vec_lvsr(1,(  unsigned short int *)p);\n+  u8 = vec_lvsr(1,(_24 *)p);\n+  u16 = vec_ld(1,(  unsigned short int *)p);\n+  u16 = vec_ld(1,(_24 *)p);\n+  u16 = vec_lde(1,(  unsigned short int *)p);\n+  u16 = vec_lde(1,(_24 *)p);\n+  u16 = vec_ldl(1,(  unsigned short int *)p);\n+  u16 = vec_ldl(1,(_24 *)p);\n+  vec_dst((  unsigned short int *)p,1,1);\n+  vec_dstst((  unsigned short int *)p,1,1);\n+  vec_dststt((  unsigned short int *)p,1,1);\n+  vec_dstt((  unsigned short int *)p,1,1);\n+  vec_dst((_24 *)p,1,1);\n+  vec_dstst((_24 *)p,1,1);\n+  vec_dststt((_24 *)p,1,1);\n+  vec_dstt((_24 *)p,1,1);\n+  vec_st(u16,1,(  unsigned short int *)p);\n+  vec_st(u16,1,(_24 *)p);\n+  vec_ste(u16,1,(  unsigned short int *)p);\n+  vec_ste(u16,1,(_24 *)p);\n+  vec_stl(u16,1,(  unsigned short int *)p);\n+  vec_stl(u16,1,(_24 *)p);\n+  p16 = vec_ld(1,(const  vector pixel *)p);\n+  p16 = vec_ld(1,(_26 *)p);\n+  p16 = vec_ldl(1,(const  vector pixel *)p);\n+  p16 = vec_ldl(1,(_26 *)p);\n+  vec_dst((const  vector pixel *)p,1,1);\n+  vec_dstst((const  vector pixel *)p,1,1);\n+  vec_dststt((const  vector pixel *)p,1,1);\n+  vec_dstt((const  vector pixel *)p,1,1);\n+  vec_dst((_26 *)p,1,1);\n+  vec_dstst((_26 *)p,1,1);\n+  vec_dststt((_26 *)p,1,1);\n+  vec_dstt((_26 *)p,1,1);\n+  p16 = vec_ld(1,(  vector pixel *)p);\n+  p16 = vec_ld(1,(_28 *)p);\n+  p16 = vec_ldl(1,(  vector pixel *)p);\n+  p16 = vec_ldl(1,(_28 *)p);\n+  vec_dst((  vector pixel *)p,1,1);\n+  vec_dstst((  vector pixel *)p,1,1);\n+  vec_dststt((  vector pixel *)p,1,1);\n+  vec_dstt((  vector pixel *)p,1,1);\n+  vec_dst((_28 *)p,1,1);\n+  vec_dstst((_28 *)p,1,1);\n+  vec_dststt((_28 *)p,1,1);\n+  vec_dstt((_28 *)p,1,1);\n+  vec_st(p16,1,(  vector pixel *)p);\n+  vec_st(p16,1,(_28 *)p);\n+  vec_stl(p16,1,(  vector pixel *)p);\n+  vec_stl(p16,1,(_28 *)p);\n+  b32 = vec_ld(1,(const  vector bool int *)p);\n+  b32 = vec_ld(1,(_30 *)p);\n+  b32 = vec_ldl(1,(const  vector bool int *)p);\n+  b32 = vec_ldl(1,(_30 *)p);\n+  vec_dst((const  vector bool int *)p,1,1);\n+  vec_dstst((const  vector bool int *)p,1,1);\n+  vec_dststt((const  vector bool int *)p,1,1);\n+  vec_dstt((const  vector bool int *)p,1,1);\n+  vec_dst((_30 *)p,1,1);\n+  vec_dstst((_30 *)p,1,1);\n+  vec_dststt((_30 *)p,1,1);\n+  vec_dstt((_30 *)p,1,1);\n+  b32 = vec_ld(1,(  vector bool int *)p);\n+  b32 = vec_ld(1,(_32 *)p);\n+  b32 = vec_ldl(1,(  vector bool int *)p);\n+  b32 = vec_ldl(1,(_32 *)p);\n+  vec_dst((  vector bool int *)p,1,1);\n+  vec_dstst((  vector bool int *)p,1,1);\n+  vec_dststt((  vector bool int *)p,1,1);\n+  vec_dstt((  vector bool int *)p,1,1);\n+  vec_dst((_32 *)p,1,1);\n+  vec_dstst((_32 *)p,1,1);\n+  vec_dststt((_32 *)p,1,1);\n+  vec_dstt((_32 *)p,1,1);\n+  vec_st(b32,1,(  vector bool int *)p);\n+  vec_st(b32,1,(_32 *)p);\n+  vec_stl(b32,1,(  vector bool int *)p);\n+  vec_stl(b32,1,(_32 *)p);\n+  s8 = vec_ld(1,(const  vector signed char *)p);\n+  s8 = vec_ld(1,(_34 *)p);\n+  s8 = vec_ldl(1,(const  vector signed char *)p);\n+  s8 = vec_ldl(1,(_34 *)p);\n+  vec_dst((const  vector signed char *)p,1,1);\n+  vec_dstst((const  vector signed char *)p,1,1);\n+  vec_dststt((const  vector signed char *)p,1,1);\n+  vec_dstt((const  vector signed char *)p,1,1);\n+  vec_dst((_34 *)p,1,1);\n+  vec_dstst((_34 *)p,1,1);\n+  vec_dststt((_34 *)p,1,1);\n+  vec_dstt((_34 *)p,1,1);\n+  s8 = vec_ld(1,(  vector signed char *)p);\n+  s8 = vec_ld(1,(_36 *)p);\n+  s8 = vec_ldl(1,(  vector signed char *)p);\n+  s8 = vec_ldl(1,(_36 *)p);\n+  vec_dst((  vector signed char *)p,1,1);\n+  vec_dstst((  vector signed char *)p,1,1);\n+  vec_dststt((  vector signed char *)p,1,1);\n+  vec_dstt((  vector signed char *)p,1,1);\n+  vec_dst((_36 *)p,1,1);\n+  vec_dstst((_36 *)p,1,1);\n+  vec_dststt((_36 *)p,1,1);\n+  vec_dstt((_36 *)p,1,1);\n+  vec_st(s8,1,(  vector signed char *)p);\n+  vec_st(s8,1,(_36 *)p);\n+  vec_stl(s8,1,(  vector signed char *)p);\n+  vec_stl(s8,1,(_36 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned *)p);\n+  u8 = vec_lvsl(1,(_37 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned *)p);\n+  u8 = vec_lvsr(1,(_37 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned *)p);\n+  u8 = vec_lvsl(1,(_38 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned *)p);\n+  u8 = vec_lvsr(1,(_38 *)p);\n+  u32 = vec_ld(1,(const  unsigned *)p);\n+  u32 = vec_ld(1,(_38 *)p);\n+  u32 = vec_lde(1,(const  unsigned *)p);\n+  u32 = vec_lde(1,(_38 *)p);\n+  u32 = vec_ldl(1,(const  unsigned *)p);\n+  u32 = vec_ldl(1,(_38 *)p);\n+  vec_dst((const  unsigned *)p,1,1);\n+  vec_dstst((const  unsigned *)p,1,1);\n+  vec_dststt((const  unsigned *)p,1,1);\n+  vec_dstt((const  unsigned *)p,1,1);\n+  vec_dst((_38 *)p,1,1);\n+  vec_dstst((_38 *)p,1,1);\n+  vec_dststt((_38 *)p,1,1);\n+  vec_dstt((_38 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned *)p);\n+  u8 = vec_lvsl(1,(_39 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned *)p);\n+  u8 = vec_lvsr(1,(_39 *)p);\n+  u8 = vec_lvsl(1,(  unsigned *)p);\n+  u8 = vec_lvsl(1,(_40 *)p);\n+  u8 = vec_lvsr(1,(  unsigned *)p);\n+  u8 = vec_lvsr(1,(_40 *)p);\n+  u32 = vec_ld(1,(  unsigned *)p);\n+  u32 = vec_ld(1,(_40 *)p);\n+  u32 = vec_lde(1,(  unsigned *)p);\n+  u32 = vec_lde(1,(_40 *)p);\n+  u32 = vec_ldl(1,(  unsigned *)p);\n+  u32 = vec_ldl(1,(_40 *)p);\n+  vec_dst((  unsigned *)p,1,1);\n+  vec_dstst((  unsigned *)p,1,1);\n+  vec_dststt((  unsigned *)p,1,1);\n+  vec_dstt((  unsigned *)p,1,1);\n+  vec_dst((_40 *)p,1,1);\n+  vec_dstst((_40 *)p,1,1);\n+  vec_dststt((_40 *)p,1,1);\n+  vec_dstt((_40 *)p,1,1);\n+  vec_st(u32,1,(  unsigned *)p);\n+  vec_st(u32,1,(_40 *)p);\n+  vec_ste(u32,1,(  unsigned *)p);\n+  vec_ste(u32,1,(_40 *)p);\n+  vec_stl(u32,1,(  unsigned *)p);\n+  vec_stl(u32,1,(_40 *)p);\n+  u8 = vec_lvsl(1,(const volatile signed int *)p);\n+  u8 = vec_lvsl(1,(_41 *)p);\n+  u8 = vec_lvsr(1,(const volatile signed int *)p);\n+  u8 = vec_lvsr(1,(_41 *)p);\n+  u8 = vec_lvsl(1,(const  signed int *)p);\n+  u8 = vec_lvsl(1,(_42 *)p);\n+  u8 = vec_lvsr(1,(const  signed int *)p);\n+  u8 = vec_lvsr(1,(_42 *)p);\n+  s32 = vec_ld(1,(const  signed int *)p);\n+  s32 = vec_ld(1,(_42 *)p);\n+  s32 = vec_lde(1,(const  signed int *)p);\n+  s32 = vec_lde(1,(_42 *)p);\n+  s32 = vec_ldl(1,(const  signed int *)p);\n+  s32 = vec_ldl(1,(_42 *)p);\n+  vec_dst((const  signed int *)p,1,1);\n+  vec_dstst((const  signed int *)p,1,1);\n+  vec_dststt((const  signed int *)p,1,1);\n+  vec_dstt((const  signed int *)p,1,1);\n+  vec_dst((_42 *)p,1,1);\n+  vec_dstst((_42 *)p,1,1);\n+  vec_dststt((_42 *)p,1,1);\n+  vec_dstt((_42 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile signed int *)p);\n+  u8 = vec_lvsl(1,(_43 *)p);\n+  u8 = vec_lvsr(1,( volatile signed int *)p);\n+  u8 = vec_lvsr(1,(_43 *)p);\n+  u8 = vec_lvsl(1,(  signed int *)p);\n+  u8 = vec_lvsl(1,(_44 *)p);\n+  u8 = vec_lvsr(1,(  signed int *)p);\n+  u8 = vec_lvsr(1,(_44 *)p);\n+  s32 = vec_ld(1,(  signed int *)p);\n+  s32 = vec_ld(1,(_44 *)p);\n+  s32 = vec_lde(1,(  signed int *)p);\n+  s32 = vec_lde(1,(_44 *)p);\n+  s32 = vec_ldl(1,(  signed int *)p);\n+  s32 = vec_ldl(1,(_44 *)p);\n+  vec_dst((  signed int *)p,1,1);\n+  vec_dstst((  signed int *)p,1,1);\n+  vec_dststt((  signed int *)p,1,1);\n+  vec_dstt((  signed int *)p,1,1);\n+  vec_dst((_44 *)p,1,1);\n+  vec_dstst((_44 *)p,1,1);\n+  vec_dststt((_44 *)p,1,1);\n+  vec_dstt((_44 *)p,1,1);\n+  vec_st(s32,1,(  signed int *)p);\n+  vec_st(s32,1,(_44 *)p);\n+  vec_ste(s32,1,(  signed int *)p);\n+  vec_ste(s32,1,(_44 *)p);\n+  vec_stl(s32,1,(  signed int *)p);\n+  vec_stl(s32,1,(_44 *)p);\n+  f32 = vec_ld(1,(const  vector float *)p);\n+  f32 = vec_ld(1,(_46 *)p);\n+  f32 = vec_ldl(1,(const  vector float *)p);\n+  f32 = vec_ldl(1,(_46 *)p);\n+  vec_dst((const  vector float *)p,1,1);\n+  vec_dstst((const  vector float *)p,1,1);\n+  vec_dststt((const  vector float *)p,1,1);\n+  vec_dstt((const  vector float *)p,1,1);\n+  vec_dst((_46 *)p,1,1);\n+  vec_dstst((_46 *)p,1,1);\n+  vec_dststt((_46 *)p,1,1);\n+  vec_dstt((_46 *)p,1,1);\n+  f32 = vec_ld(1,(  vector float *)p);\n+  f32 = vec_ld(1,(_48 *)p);\n+  f32 = vec_ldl(1,(  vector float *)p);\n+  f32 = vec_ldl(1,(_48 *)p);\n+  vec_dst((  vector float *)p,1,1);\n+  vec_dstst((  vector float *)p,1,1);\n+  vec_dststt((  vector float *)p,1,1);\n+  vec_dstt((  vector float *)p,1,1);\n+  vec_dst((_48 *)p,1,1);\n+  vec_dstst((_48 *)p,1,1);\n+  vec_dststt((_48 *)p,1,1);\n+  vec_dstt((_48 *)p,1,1);\n+  vec_st(f32,1,(  vector float *)p);\n+  vec_st(f32,1,(_48 *)p);\n+  vec_stl(f32,1,(  vector float *)p);\n+  vec_stl(f32,1,(_48 *)p);\n+  s16 = vec_ld(1,(const  vector signed short *)p);\n+  s16 = vec_ld(1,(_50 *)p);\n+  s16 = vec_ldl(1,(const  vector signed short *)p);\n+  s16 = vec_ldl(1,(_50 *)p);\n+  vec_dst((const  vector signed short *)p,1,1);\n+  vec_dstst((const  vector signed short *)p,1,1);\n+  vec_dststt((const  vector signed short *)p,1,1);\n+  vec_dstt((const  vector signed short *)p,1,1);\n+  vec_dst((_50 *)p,1,1);\n+  vec_dstst((_50 *)p,1,1);\n+  vec_dststt((_50 *)p,1,1);\n+  vec_dstt((_50 *)p,1,1);\n+  s16 = vec_ld(1,(  vector signed short *)p);\n+  s16 = vec_ld(1,(_52 *)p);\n+  s16 = vec_ldl(1,(  vector signed short *)p);\n+  s16 = vec_ldl(1,(_52 *)p);\n+  vec_dst((  vector signed short *)p,1,1);\n+  vec_dstst((  vector signed short *)p,1,1);\n+  vec_dststt((  vector signed short *)p,1,1);\n+  vec_dstt((  vector signed short *)p,1,1);\n+  vec_dst((_52 *)p,1,1);\n+  vec_dstst((_52 *)p,1,1);\n+  vec_dststt((_52 *)p,1,1);\n+  vec_dstt((_52 *)p,1,1);\n+  vec_st(s16,1,(  vector signed short *)p);\n+  vec_st(s16,1,(_52 *)p);\n+  vec_stl(s16,1,(  vector signed short *)p);\n+  vec_stl(s16,1,(_52 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned char *)p);\n+  u8 = vec_lvsl(1,(_53 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned char *)p);\n+  u8 = vec_lvsr(1,(_53 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned char *)p);\n+  u8 = vec_lvsl(1,(_54 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned char *)p);\n+  u8 = vec_lvsr(1,(_54 *)p);\n+  u8 = vec_ld(1,(const  unsigned char *)p);\n+  u8 = vec_ld(1,(_54 *)p);\n+  u8 = vec_lde(1,(const  unsigned char *)p);\n+  u8 = vec_lde(1,(_54 *)p);\n+  u8 = vec_ldl(1,(const  unsigned char *)p);\n+  u8 = vec_ldl(1,(_54 *)p);\n+  vec_dst((const  unsigned char *)p,1,1);\n+  vec_dstst((const  unsigned char *)p,1,1);\n+  vec_dststt((const  unsigned char *)p,1,1);\n+  vec_dstt((const  unsigned char *)p,1,1);\n+  vec_dst((_54 *)p,1,1);\n+  vec_dstst((_54 *)p,1,1);\n+  vec_dststt((_54 *)p,1,1);\n+  vec_dstt((_54 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned char *)p);\n+  u8 = vec_lvsl(1,(_55 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned char *)p);\n+  u8 = vec_lvsr(1,(_55 *)p);\n+  u8 = vec_lvsl(1,(  unsigned char *)p);\n+  u8 = vec_lvsl(1,(_56 *)p);\n+  u8 = vec_lvsr(1,(  unsigned char *)p);\n+  u8 = vec_lvsr(1,(_56 *)p);\n+  u8 = vec_ld(1,(  unsigned char *)p);\n+  u8 = vec_ld(1,(_56 *)p);\n+  u8 = vec_lde(1,(  unsigned char *)p);\n+  u8 = vec_lde(1,(_56 *)p);\n+  u8 = vec_ldl(1,(  unsigned char *)p);\n+  u8 = vec_ldl(1,(_56 *)p);\n+  vec_dst((  unsigned char *)p,1,1);\n+  vec_dstst((  unsigned char *)p,1,1);\n+  vec_dststt((  unsigned char *)p,1,1);\n+  vec_dstt((  unsigned char *)p,1,1);\n+  vec_dst((_56 *)p,1,1);\n+  vec_dstst((_56 *)p,1,1);\n+  vec_dststt((_56 *)p,1,1);\n+  vec_dstt((_56 *)p,1,1);\n+  vec_st(u8,1,(  unsigned char *)p);\n+  vec_st(u8,1,(_56 *)p);\n+  vec_ste(u8,1,(  unsigned char *)p);\n+  vec_ste(u8,1,(_56 *)p);\n+  vec_stl(u8,1,(  unsigned char *)p);\n+  vec_stl(u8,1,(_56 *)p);\n+  u8 = vec_lvsl(1,(const volatile signed int *)p);\n+  u8 = vec_lvsl(1,(_57 *)p);\n+  u8 = vec_lvsr(1,(const volatile signed int *)p);\n+  u8 = vec_lvsr(1,(_57 *)p);\n+  u8 = vec_lvsl(1,(const  signed int *)p);\n+  u8 = vec_lvsl(1,(_58 *)p);\n+  u8 = vec_lvsr(1,(const  signed int *)p);\n+  u8 = vec_lvsr(1,(_58 *)p);\n+  s32 = vec_ld(1,(const  signed int *)p);\n+  s32 = vec_ld(1,(_58 *)p);\n+  s32 = vec_lde(1,(const  signed int *)p);\n+  s32 = vec_lde(1,(_58 *)p);\n+  s32 = vec_ldl(1,(const  signed int *)p);\n+  s32 = vec_ldl(1,(_58 *)p);\n+  vec_dst((const  signed int *)p,1,1);\n+  vec_dstst((const  signed int *)p,1,1);\n+  vec_dststt((const  signed int *)p,1,1);\n+  vec_dstt((const  signed int *)p,1,1);\n+  vec_dst((_58 *)p,1,1);\n+  vec_dstst((_58 *)p,1,1);\n+  vec_dststt((_58 *)p,1,1);\n+  vec_dstt((_58 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile signed int *)p);\n+  u8 = vec_lvsl(1,(_59 *)p);\n+  u8 = vec_lvsr(1,( volatile signed int *)p);\n+  u8 = vec_lvsr(1,(_59 *)p);\n+  u8 = vec_lvsl(1,(  signed int *)p);\n+  u8 = vec_lvsl(1,(_60 *)p);\n+  u8 = vec_lvsr(1,(  signed int *)p);\n+  u8 = vec_lvsr(1,(_60 *)p);\n+  s32 = vec_ld(1,(  signed int *)p);\n+  s32 = vec_ld(1,(_60 *)p);\n+  s32 = vec_lde(1,(  signed int *)p);\n+  s32 = vec_lde(1,(_60 *)p);\n+  s32 = vec_ldl(1,(  signed int *)p);\n+  s32 = vec_ldl(1,(_60 *)p);\n+  vec_dst((  signed int *)p,1,1);\n+  vec_dstst((  signed int *)p,1,1);\n+  vec_dststt((  signed int *)p,1,1);\n+  vec_dstt((  signed int *)p,1,1);\n+  vec_dst((_60 *)p,1,1);\n+  vec_dstst((_60 *)p,1,1);\n+  vec_dststt((_60 *)p,1,1);\n+  vec_dstt((_60 *)p,1,1);\n+  vec_st(s32,1,(  signed int *)p);\n+  vec_st(s32,1,(_60 *)p);\n+  vec_ste(s32,1,(  signed int *)p);\n+  vec_ste(s32,1,(_60 *)p);\n+  vec_stl(s32,1,(  signed int *)p);\n+  vec_stl(s32,1,(_60 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned int *)p);\n+  u8 = vec_lvsl(1,(_61 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned int *)p);\n+  u8 = vec_lvsr(1,(_61 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned int *)p);\n+  u8 = vec_lvsl(1,(_62 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned int *)p);\n+  u8 = vec_lvsr(1,(_62 *)p);\n+  u32 = vec_ld(1,(const  unsigned int *)p);\n+  u32 = vec_ld(1,(_62 *)p);\n+  u32 = vec_lde(1,(const  unsigned int *)p);\n+  u32 = vec_lde(1,(_62 *)p);\n+  u32 = vec_ldl(1,(const  unsigned int *)p);\n+  u32 = vec_ldl(1,(_62 *)p);\n+  vec_dst((const  unsigned int *)p,1,1);\n+  vec_dstst((const  unsigned int *)p,1,1);\n+  vec_dststt((const  unsigned int *)p,1,1);\n+  vec_dstt((const  unsigned int *)p,1,1);\n+  vec_dst((_62 *)p,1,1);\n+  vec_dstst((_62 *)p,1,1);\n+  vec_dststt((_62 *)p,1,1);\n+  vec_dstt((_62 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned int *)p);\n+  u8 = vec_lvsl(1,(_63 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned int *)p);\n+  u8 = vec_lvsr(1,(_63 *)p);\n+  u8 = vec_lvsl(1,(  unsigned int *)p);\n+  u8 = vec_lvsl(1,(_64 *)p);\n+  u8 = vec_lvsr(1,(  unsigned int *)p);\n+  u8 = vec_lvsr(1,(_64 *)p);\n+  u32 = vec_ld(1,(  unsigned int *)p);\n+  u32 = vec_ld(1,(_64 *)p);\n+  u32 = vec_lde(1,(  unsigned int *)p);\n+  u32 = vec_lde(1,(_64 *)p);\n+  u32 = vec_ldl(1,(  unsigned int *)p);\n+  u32 = vec_ldl(1,(_64 *)p);\n+  vec_dst((  unsigned int *)p,1,1);\n+  vec_dstst((  unsigned int *)p,1,1);\n+  vec_dststt((  unsigned int *)p,1,1);\n+  vec_dstt((  unsigned int *)p,1,1);\n+  vec_dst((_64 *)p,1,1);\n+  vec_dstst((_64 *)p,1,1);\n+  vec_dststt((_64 *)p,1,1);\n+  vec_dstt((_64 *)p,1,1);\n+  vec_st(u32,1,(  unsigned int *)p);\n+  vec_st(u32,1,(_64 *)p);\n+  vec_ste(u32,1,(  unsigned int *)p);\n+  vec_ste(u32,1,(_64 *)p);\n+  vec_stl(u32,1,(  unsigned int *)p);\n+  vec_stl(u32,1,(_64 *)p);\n+  u8 = vec_lvsl(1,(const volatile unsigned short *)p);\n+  u8 = vec_lvsl(1,(_65 *)p);\n+  u8 = vec_lvsr(1,(const volatile unsigned short *)p);\n+  u8 = vec_lvsr(1,(_65 *)p);\n+  u8 = vec_lvsl(1,(const  unsigned short *)p);\n+  u8 = vec_lvsl(1,(_66 *)p);\n+  u8 = vec_lvsr(1,(const  unsigned short *)p);\n+  u8 = vec_lvsr(1,(_66 *)p);\n+  u16 = vec_ld(1,(const  unsigned short *)p);\n+  u16 = vec_ld(1,(_66 *)p);\n+  u16 = vec_lde(1,(const  unsigned short *)p);\n+  u16 = vec_lde(1,(_66 *)p);\n+  u16 = vec_ldl(1,(const  unsigned short *)p);\n+  u16 = vec_ldl(1,(_66 *)p);\n+  vec_dst((const  unsigned short *)p,1,1);\n+  vec_dstst((const  unsigned short *)p,1,1);\n+  vec_dststt((const  unsigned short *)p,1,1);\n+  vec_dstt((const  unsigned short *)p,1,1);\n+  vec_dst((_66 *)p,1,1);\n+  vec_dstst((_66 *)p,1,1);\n+  vec_dststt((_66 *)p,1,1);\n+  vec_dstt((_66 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile unsigned short *)p);\n+  u8 = vec_lvsl(1,(_67 *)p);\n+  u8 = vec_lvsr(1,( volatile unsigned short *)p);\n+  u8 = vec_lvsr(1,(_67 *)p);\n+  u8 = vec_lvsl(1,(  unsigned short *)p);\n+  u8 = vec_lvsl(1,(_68 *)p);\n+  u8 = vec_lvsr(1,(  unsigned short *)p);\n+  u8 = vec_lvsr(1,(_68 *)p);\n+  u16 = vec_ld(1,(  unsigned short *)p);\n+  u16 = vec_ld(1,(_68 *)p);\n+  u16 = vec_lde(1,(  unsigned short *)p);\n+  u16 = vec_lde(1,(_68 *)p);\n+  u16 = vec_ldl(1,(  unsigned short *)p);\n+  u16 = vec_ldl(1,(_68 *)p);\n+  vec_dst((  unsigned short *)p,1,1);\n+  vec_dstst((  unsigned short *)p,1,1);\n+  vec_dststt((  unsigned short *)p,1,1);\n+  vec_dstt((  unsigned short *)p,1,1);\n+  vec_dst((_68 *)p,1,1);\n+  vec_dstst((_68 *)p,1,1);\n+  vec_dststt((_68 *)p,1,1);\n+  vec_dstt((_68 *)p,1,1);\n+  vec_st(u16,1,(  unsigned short *)p);\n+  vec_st(u16,1,(_68 *)p);\n+  vec_ste(u16,1,(  unsigned short *)p);\n+  vec_ste(u16,1,(_68 *)p);\n+  vec_stl(u16,1,(  unsigned short *)p);\n+  vec_stl(u16,1,(_68 *)p);\n+  u8 = vec_lvsl(1,(const volatile short *)p);\n+  u8 = vec_lvsl(1,(_69 *)p);\n+  u8 = vec_lvsr(1,(const volatile short *)p);\n+  u8 = vec_lvsr(1,(_69 *)p);\n+  u8 = vec_lvsl(1,(const  short *)p);\n+  u8 = vec_lvsl(1,(_70 *)p);\n+  u8 = vec_lvsr(1,(const  short *)p);\n+  u8 = vec_lvsr(1,(_70 *)p);\n+  s16 = vec_ld(1,(const  short *)p);\n+  s16 = vec_ld(1,(_70 *)p);\n+  s16 = vec_lde(1,(const  short *)p);\n+  s16 = vec_lde(1,(_70 *)p);\n+  s16 = vec_ldl(1,(const  short *)p);\n+  s16 = vec_ldl(1,(_70 *)p);\n+  vec_dst((const  short *)p,1,1);\n+  vec_dstst((const  short *)p,1,1);\n+  vec_dststt((const  short *)p,1,1);\n+  vec_dstt((const  short *)p,1,1);\n+  vec_dst((_70 *)p,1,1);\n+  vec_dstst((_70 *)p,1,1);\n+  vec_dststt((_70 *)p,1,1);\n+  vec_dstt((_70 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile short *)p);\n+  u8 = vec_lvsl(1,(_71 *)p);\n+  u8 = vec_lvsr(1,( volatile short *)p);\n+  u8 = vec_lvsr(1,(_71 *)p);\n+  u8 = vec_lvsl(1,(  short *)p);\n+  u8 = vec_lvsl(1,(_72 *)p);\n+  u8 = vec_lvsr(1,(  short *)p);\n+  u8 = vec_lvsr(1,(_72 *)p);\n+  s16 = vec_ld(1,(  short *)p);\n+  s16 = vec_ld(1,(_72 *)p);\n+  s16 = vec_lde(1,(  short *)p);\n+  s16 = vec_lde(1,(_72 *)p);\n+  s16 = vec_ldl(1,(  short *)p);\n+  s16 = vec_ldl(1,(_72 *)p);\n+  vec_dst((  short *)p,1,1);\n+  vec_dstst((  short *)p,1,1);\n+  vec_dststt((  short *)p,1,1);\n+  vec_dstt((  short *)p,1,1);\n+  vec_dst((_72 *)p,1,1);\n+  vec_dstst((_72 *)p,1,1);\n+  vec_dststt((_72 *)p,1,1);\n+  vec_dstt((_72 *)p,1,1);\n+  vec_st(s16,1,(  short *)p);\n+  vec_st(s16,1,(_72 *)p);\n+  vec_ste(s16,1,(  short *)p);\n+  vec_ste(s16,1,(_72 *)p);\n+  vec_stl(s16,1,(  short *)p);\n+  vec_stl(s16,1,(_72 *)p);\n+  u8 = vec_lvsl(1,(const int volatile *)p);\n+  u8 = vec_lvsl(1,(_73 *)p);\n+  u8 = vec_lvsr(1,(const int volatile *)p);\n+  u8 = vec_lvsr(1,(_73 *)p);\n+  u8 = vec_lvsl(1,(const  int *)p);\n+  u8 = vec_lvsl(1,(_74 *)p);\n+  u8 = vec_lvsr(1,(const int *)p);\n+  u8 = vec_lvsr(1,(_74 *)p);\n+  s32 = vec_ld(1,(const int *)p);\n+  s32 = vec_ld(1,(_74 *)p);\n+  s32 = vec_lde(1,(const int *)p);\n+  s32 = vec_lde(1,(_74 *)p);\n+  s32 = vec_ldl(1,(const int *)p);\n+  s32 = vec_ldl(1,(_74 *)p);\n+  vec_dst((const int *)p,1,1);\n+  vec_dstst((const int *)p,1,1);\n+  vec_dststt((const int *)p,1,1);\n+  vec_dstt((const int *)p,1,1);\n+  vec_dst((_74 *)p,1,1);\n+  vec_dstst((_74 *)p,1,1);\n+  vec_dststt((_74 *)p,1,1);\n+  vec_dstt((_74 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile int *)p);\n+  u8 = vec_lvsl(1,(_75 *)p);\n+  u8 = vec_lvsr(1,( volatile int *)p);\n+  u8 = vec_lvsr(1,(_75 *)p);\n+  u8 = vec_lvsl(1,( int *)p);\n+  u8 = vec_lvsl(1,(_76 *)p);\n+  u8 = vec_lvsr(1,( int *)p);\n+  u8 = vec_lvsr(1,(_76 *)p);\n+  s32 = vec_ld(1,( int *)p);\n+  s32 = vec_ld(1,(_76 *)p);\n+  s32 = vec_lde(1,(int *)p);\n+  s32 = vec_lde(1,(_76 *)p);\n+  s32 = vec_ldl(1,(int  *)p);\n+  s32 = vec_ldl(1,(_76 *)p);\n+  vec_dst((int  *)p,1,1);\n+  vec_dstst((int  *)p,1,1);\n+  vec_dststt((int  *)p,1,1);\n+  vec_dstt((int  *)p,1,1);\n+  vec_dst((_76 *)p,1,1);\n+  vec_dstst((_76 *)p,1,1);\n+  vec_dststt((_76 *)p,1,1);\n+  vec_dstt((_76 *)p,1,1);\n+  vec_st(s32,1,(int  *)p);\n+  vec_st(s32,1,(_76 *)p);\n+  vec_ste(s32,1,(int  *)p);\n+  vec_ste(s32,1,(_76 *)p);\n+  vec_stl(s32,1,(int  *)p);\n+  vec_stl(s32,1,(_76 *)p);\n+  u16 = vec_ld(1,(const  vector unsigned short *)p);\n+  u16 = vec_ld(1,(_78 *)p);\n+  u16 = vec_ldl(1,(const  vector unsigned short *)p);\n+  u16 = vec_ldl(1,(_78 *)p);\n+  vec_dst((const  vector unsigned short *)p,1,1);\n+  vec_dstst((const  vector unsigned short *)p,1,1);\n+  vec_dststt((const  vector unsigned short *)p,1,1);\n+  vec_dstt((const  vector unsigned short *)p,1,1);\n+  vec_dst((_78 *)p,1,1);\n+  vec_dstst((_78 *)p,1,1);\n+  vec_dststt((_78 *)p,1,1);\n+  vec_dstt((_78 *)p,1,1);\n+  u16 = vec_ld(1,(  vector unsigned short *)p);\n+  u16 = vec_ld(1,(_80 *)p);\n+  u16 = vec_ldl(1,(  vector unsigned short *)p);\n+  u16 = vec_ldl(1,(_80 *)p);\n+  vec_dst((  vector unsigned short *)p,1,1);\n+  vec_dstst((  vector unsigned short *)p,1,1);\n+  vec_dststt((  vector unsigned short *)p,1,1);\n+  vec_dstt((  vector unsigned short *)p,1,1);\n+  vec_dst((_80 *)p,1,1);\n+  vec_dstst((_80 *)p,1,1);\n+  vec_dststt((_80 *)p,1,1);\n+  vec_dstt((_80 *)p,1,1);\n+  vec_st(u16,1,(  vector unsigned short *)p);\n+  vec_st(u16,1,(_80 *)p);\n+  vec_stl(u16,1,(  vector unsigned short *)p);\n+  vec_stl(u16,1,(_80 *)p);\n+  b8 = vec_ld(1,(const  vector bool char *)p);\n+  b8 = vec_ld(1,(_82 *)p);\n+  b8 = vec_ldl(1,(const  vector bool char *)p);\n+  b8 = vec_ldl(1,(_82 *)p);\n+  vec_dst((const  vector bool char *)p,1,1);\n+  vec_dstst((const  vector bool char *)p,1,1);\n+  vec_dststt((const  vector bool char *)p,1,1);\n+  vec_dstt((const  vector bool char *)p,1,1);\n+  vec_dst((_82 *)p,1,1);\n+  vec_dstst((_82 *)p,1,1);\n+  vec_dststt((_82 *)p,1,1);\n+  vec_dstt((_82 *)p,1,1);\n+  b8 = vec_ld(1,(  vector bool char *)p);\n+  b8 = vec_ld(1,(_84 *)p);\n+  b8 = vec_ldl(1,(  vector bool char *)p);\n+  b8 = vec_ldl(1,(_84 *)p);\n+  vec_dst((  vector bool char *)p,1,1);\n+  vec_dstst((  vector bool char *)p,1,1);\n+  vec_dststt((  vector bool char *)p,1,1);\n+  vec_dstt((  vector bool char *)p,1,1);\n+  vec_dst((_84 *)p,1,1);\n+  vec_dstst((_84 *)p,1,1);\n+  vec_dststt((_84 *)p,1,1);\n+  vec_dstt((_84 *)p,1,1);\n+  vec_st(b8,1,(  vector bool char *)p);\n+  vec_st(b8,1,(_84 *)p);\n+  vec_stl(b8,1,(  vector bool char *)p);\n+  vec_stl(b8,1,(_84 *)p);\n+  u8 = vec_lvsl(1,(const volatile int signed *)p);\n+  u8 = vec_lvsl(1,(_85 *)p);\n+  u8 = vec_lvsr(1,(const volatile int signed *)p);\n+  u8 = vec_lvsr(1,(_85 *)p);\n+  u8 = vec_lvsl(1,(const int signed *)p);\n+  u8 = vec_lvsl(1,(_86 *)p);\n+  u8 = vec_lvsr(1,(const int signed *)p);\n+  u8 = vec_lvsr(1,(_86 *)p);\n+  s32 = vec_ld(1,(const int signed *)p);\n+  s32 = vec_ld(1,(_86 *)p);\n+  s32 = vec_lde(1,(const int signed *)p);\n+  s32 = vec_lde(1,(_86 *)p);\n+  s32 = vec_ldl(1,(const int signed *)p);\n+  s32 = vec_ldl(1,(_86 *)p);\n+  vec_dst((const int signed *)p,1,1);\n+  vec_dstst((const int signed *)p,1,1);\n+  vec_dststt((const int signed *)p,1,1);\n+  vec_dstt((const int signed *)p,1,1);\n+  vec_dst((_86 *)p,1,1);\n+  vec_dstst((_86 *)p,1,1);\n+  vec_dststt((_86 *)p,1,1);\n+  vec_dstt((_86 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile int signed *)p);\n+  u8 = vec_lvsl(1,(_87 *)p);\n+  u8 = vec_lvsr(1,( volatile int signed *)p);\n+  u8 = vec_lvsr(1,(_87 *)p);\n+  u8 = vec_lvsl(1,(int  signed *)p);\n+  u8 = vec_lvsl(1,(_88 *)p);\n+  u8 = vec_lvsr(1,(int  signed *)p);\n+  u8 = vec_lvsr(1,(_88 *)p);\n+  s32 = vec_ld(1,(int  signed *)p);\n+  s32 = vec_ld(1,(_88 *)p);\n+  s32 = vec_lde(1,(int  signed *)p);\n+  s32 = vec_lde(1,(_88 *)p);\n+  s32 = vec_ldl(1,(int  signed *)p);\n+  s32 = vec_ldl(1,(_88 *)p);\n+  vec_dst((int signed *)p,1,1);\n+  vec_dstst((int  signed *)p,1,1);\n+  vec_dststt((int  signed *)p,1,1);\n+  vec_dstt((int  signed *)p,1,1);\n+  vec_dst((_88 *)p,1,1);\n+  vec_dstst((_88 *)p,1,1);\n+  vec_dststt((_88 *)p,1,1);\n+  vec_dstt((_88 *)p,1,1);\n+  vec_st(s32,1,(int  signed *)p);\n+  vec_st(s32,1,(_88 *)p);\n+  vec_ste(s32,1,(int  signed *)p);\n+  vec_ste(s32,1,(_88 *)p);\n+  vec_stl(s32,1,(int  signed *)p);\n+  vec_stl(s32,1,(_88 *)p);\n+  s32 = vec_ld(1,(const  vector signed int *)p);\n+  s32 = vec_ld(1,(_90 *)p);\n+  s32 = vec_ldl(1,(const  vector signed int *)p);\n+  s32 = vec_ldl(1,(_90 *)p);\n+  vec_dst((const  vector signed int *)p,1,1);\n+  vec_dstst((const  vector signed int *)p,1,1);\n+  vec_dststt((const  vector signed int *)p,1,1);\n+  vec_dstt((const  vector signed int *)p,1,1);\n+  vec_dst((_90 *)p,1,1);\n+  vec_dstst((_90 *)p,1,1);\n+  vec_dststt((_90 *)p,1,1);\n+  vec_dstt((_90 *)p,1,1);\n+  s32 = vec_ld(1,(  vector signed int *)p);\n+  s32 = vec_ld(1,(_92 *)p);\n+  s32 = vec_ldl(1,(  vector signed int *)p);\n+  s32 = vec_ldl(1,(_92 *)p);\n+  vec_dst((  vector signed int *)p,1,1);\n+  vec_dstst((  vector signed int *)p,1,1);\n+  vec_dststt((  vector signed int *)p,1,1);\n+  vec_dstt((  vector signed int *)p,1,1);\n+  vec_dst((_92 *)p,1,1);\n+  vec_dstst((_92 *)p,1,1);\n+  vec_dststt((_92 *)p,1,1);\n+  vec_dstt((_92 *)p,1,1);\n+  vec_st(s32,1,(  vector signed int *)p);\n+  vec_st(s32,1,(_92 *)p);\n+  vec_stl(s32,1,(  vector signed int *)p);\n+  vec_stl(s32,1,(_92 *)p);\n+  u32 = vec_ld(1,(const  vector unsigned int *)p);\n+  u32 = vec_ld(1,(_94 *)p);\n+  u32 = vec_ldl(1,(const  vector unsigned int *)p);\n+  u32 = vec_ldl(1,(_94 *)p);\n+  vec_dst((const  vector unsigned int *)p,1,1);\n+  vec_dstst((const  vector unsigned int *)p,1,1);\n+  vec_dststt((const  vector unsigned int *)p,1,1);\n+  vec_dstt((const  vector unsigned int *)p,1,1);\n+  vec_dst((_94 *)p,1,1);\n+  vec_dstst((_94 *)p,1,1);\n+  vec_dststt((_94 *)p,1,1);\n+  vec_dstt((_94 *)p,1,1);\n+  u32 = vec_ld(1,(  vector unsigned int *)p);\n+  u32 = vec_ld(1,(_96 *)p);\n+  u32 = vec_ldl(1,(  vector unsigned int *)p);\n+  u32 = vec_ldl(1,(_96 *)p);\n+  vec_dst((  vector unsigned int *)p,1,1);\n+  vec_dstst((  vector unsigned int *)p,1,1);\n+  vec_dststt((  vector unsigned int *)p,1,1);\n+  vec_dstt((  vector unsigned int *)p,1,1);\n+  vec_dst((_96 *)p,1,1);\n+  vec_dstst((_96 *)p,1,1);\n+  vec_dststt((_96 *)p,1,1);\n+  vec_dstt((_96 *)p,1,1);\n+  vec_st(u32,1,(  vector unsigned int *)p);\n+  vec_st(u32,1,(_96 *)p);\n+  vec_stl(u32,1,(  vector unsigned int *)p);\n+  vec_stl(u32,1,(_96 *)p);\n+  u8 = vec_lvsl(1,(const volatile int signed *)p);\n+  u8 = vec_lvsl(1,(_97 *)p);\n+  u8 = vec_lvsr(1,(const volatile int signed *)p);\n+  u8 = vec_lvsr(1,(_97 *)p);\n+  u8 = vec_lvsl(1,(const  int signed *)p);\n+  u8 = vec_lvsl(1,(_98 *)p);\n+  u8 = vec_lvsr(1,(const int signed *)p);\n+  u8 = vec_lvsr(1,(_98 *)p);\n+  s32 = vec_ld(1,(const int signed *)p);\n+  s32 = vec_ld(1,(_98 *)p);\n+  s32 = vec_lde(1,(const int signed *)p);\n+  s32 = vec_lde(1,(_98 *)p);\n+  s32 = vec_ldl(1,(const int signed *)p);\n+  s32 = vec_ldl(1,(_98 *)p);\n+  vec_dst((const int signed *)p,1,1);\n+  vec_dstst((const int signed *)p,1,1);\n+  vec_dststt((const int signed *)p,1,1);\n+  vec_dstt((const int signed *)p,1,1);\n+  vec_dst((_98 *)p,1,1);\n+  vec_dstst((_98 *)p,1,1);\n+  vec_dststt((_98 *)p,1,1);\n+  vec_dstt((_98 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile int signed *)p);\n+  u8 = vec_lvsl(1,(_99 *)p);\n+  u8 = vec_lvsr(1,( volatile int signed *)p);\n+  u8 = vec_lvsr(1,(_99 *)p);\n+  u8 = vec_lvsl(1,(int  signed *)p);\n+  u8 = vec_lvsl(1,(_100 *)p);\n+  u8 = vec_lvsr(1,(int  signed *)p);\n+  u8 = vec_lvsr(1,(_100 *)p);\n+  s32 = vec_ld(1,(int  signed *)p);\n+  s32 = vec_ld(1,(_100 *)p);\n+  s32 = vec_lde(1,(int  signed *)p);\n+  s32 = vec_lde(1,(_100 *)p);\n+  s32 = vec_ldl(1,(int  signed *)p);\n+  s32 = vec_ldl(1,(_100 *)p);\n+  vec_dst((int  signed *)p,1,1);\n+  vec_dstst((int  signed *)p,1,1);\n+  vec_dststt((int  signed *)p,1,1);\n+  vec_dstt((int  signed *)p,1,1);\n+  vec_dst((_100 *)p,1,1);\n+  vec_dstst((_100 *)p,1,1);\n+  vec_dststt((_100 *)p,1,1);\n+  vec_dstt((_100 *)p,1,1);\n+  vec_st(s32,1,(int  signed *)p);\n+  vec_st(s32,1,(_100 *)p);\n+  vec_ste(s32,1,(int  signed *)p);\n+  vec_ste(s32,1,(_100 *)p);\n+  vec_stl(s32,1,(int  signed *)p);\n+  vec_stl(s32,1,(_100 *)p);\n+  u8 = vec_lvsl(1,(const volatile short int *)p);\n+  u8 = vec_lvsl(1,(_101 *)p);\n+  u8 = vec_lvsr(1,(const volatile short int *)p);\n+  u8 = vec_lvsr(1,(_101 *)p);\n+  u8 = vec_lvsl(1,(const  short int *)p);\n+  u8 = vec_lvsl(1,(_102 *)p);\n+  u8 = vec_lvsr(1,(const  short int *)p);\n+  u8 = vec_lvsr(1,(_102 *)p);\n+  s16 = vec_ld(1,(const  short int *)p);\n+  s16 = vec_ld(1,(_102 *)p);\n+  s16 = vec_lde(1,(const  short int *)p);\n+  s16 = vec_lde(1,(_102 *)p);\n+  s16 = vec_ldl(1,(const  short int *)p);\n+  s16 = vec_ldl(1,(_102 *)p);\n+  vec_dst((const  short int *)p,1,1);\n+  vec_dstst((const  short int *)p,1,1);\n+  vec_dststt((const  short int *)p,1,1);\n+  vec_dstt((const  short int *)p,1,1);\n+  vec_dst((_102 *)p,1,1);\n+  vec_dstst((_102 *)p,1,1);\n+  vec_dststt((_102 *)p,1,1);\n+  vec_dstt((_102 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile short int *)p);\n+  u8 = vec_lvsl(1,(_103 *)p);\n+  u8 = vec_lvsr(1,( volatile short int *)p);\n+  u8 = vec_lvsr(1,(_103 *)p);\n+  u8 = vec_lvsl(1,(  short int *)p);\n+  u8 = vec_lvsl(1,(_104 *)p);\n+  u8 = vec_lvsr(1,(  short int *)p);\n+  u8 = vec_lvsr(1,(_104 *)p);\n+  s16 = vec_ld(1,(  short int *)p);\n+  s16 = vec_ld(1,(_104 *)p);\n+  s16 = vec_lde(1,(  short int *)p);\n+  s16 = vec_lde(1,(_104 *)p);\n+  s16 = vec_ldl(1,(  short int *)p);\n+  s16 = vec_ldl(1,(_104 *)p);\n+  vec_dst((  short int *)p,1,1);\n+  vec_dstst((  short int *)p,1,1);\n+  vec_dststt((  short int *)p,1,1);\n+  vec_dstt((  short int *)p,1,1);\n+  vec_dst((_104 *)p,1,1);\n+  vec_dstst((_104 *)p,1,1);\n+  vec_dststt((_104 *)p,1,1);\n+  vec_dstt((_104 *)p,1,1);\n+  vec_st(s16,1,(  short int *)p);\n+  vec_st(s16,1,(_104 *)p);\n+  vec_ste(s16,1,(  short int *)p);\n+  vec_ste(s16,1,(_104 *)p);\n+  vec_stl(s16,1,(  short int *)p);\n+  vec_stl(s16,1,(_104 *)p);\n+  u8 = vec_lvsl(1,(const volatile int *)p);\n+  u8 = vec_lvsl(1,(_105 *)p);\n+  u8 = vec_lvsr(1,(const volatile int *)p);\n+  u8 = vec_lvsr(1,(_105 *)p);\n+  u8 = vec_lvsl(1,(const  int *)p);\n+  u8 = vec_lvsl(1,(_106 *)p);\n+  u8 = vec_lvsr(1,(const  int *)p);\n+  u8 = vec_lvsr(1,(_106 *)p);\n+  s32 = vec_ld(1,(const  int *)p);\n+  s32 = vec_ld(1,(_106 *)p);\n+  s32 = vec_lde(1,(const  int *)p);\n+  s32 = vec_lde(1,(_106 *)p);\n+  s32 = vec_ldl(1,(const  int *)p);\n+  s32 = vec_ldl(1,(_106 *)p);\n+  vec_dst((const  int *)p,1,1);\n+  vec_dstst((const  int *)p,1,1);\n+  vec_dststt((const  int *)p,1,1);\n+  vec_dstt((const  int *)p,1,1);\n+  vec_dst((_106 *)p,1,1);\n+  vec_dstst((_106 *)p,1,1);\n+  vec_dststt((_106 *)p,1,1);\n+  vec_dstt((_106 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile int *)p);\n+  u8 = vec_lvsl(1,(_107 *)p);\n+  u8 = vec_lvsr(1,( volatile int *)p);\n+  u8 = vec_lvsr(1,(_107 *)p);\n+  u8 = vec_lvsl(1,(  int *)p);\n+  u8 = vec_lvsl(1,(_108 *)p);\n+  u8 = vec_lvsr(1,(  int *)p);\n+  u8 = vec_lvsr(1,(_108 *)p);\n+  s32 = vec_ld(1,(  int *)p);\n+  s32 = vec_ld(1,(_108 *)p);\n+  s32 = vec_lde(1,(  int *)p);\n+  s32 = vec_lde(1,(_108 *)p);\n+  s32 = vec_ldl(1,(  int *)p);\n+  s32 = vec_ldl(1,(_108 *)p);\n+  vec_dst((  int *)p,1,1);\n+  vec_dstst((  int *)p,1,1);\n+  vec_dststt((  int *)p,1,1);\n+  vec_dstt((  int *)p,1,1);\n+  vec_dst((_108 *)p,1,1);\n+  vec_dstst((_108 *)p,1,1);\n+  vec_dststt((_108 *)p,1,1);\n+  vec_dstt((_108 *)p,1,1);\n+  vec_st(s32,1,(  int *)p);\n+  vec_st(s32,1,(_108 *)p);\n+  vec_ste(s32,1,(  int *)p);\n+  vec_ste(s32,1,(_108 *)p);\n+  vec_stl(s32,1,(  int *)p);\n+  vec_stl(s32,1,(_108 *)p);\n+  u8 = vec_lvsl(1,(const volatile int *)p);\n+  u8 = vec_lvsl(1,(_109 *)p);\n+  u8 = vec_lvsr(1,(const volatile int *)p);\n+  u8 = vec_lvsr(1,(_109 *)p);\n+  u8 = vec_lvsl(1,(const  int *)p);\n+  u8 = vec_lvsl(1,(_110 *)p);\n+  u8 = vec_lvsr(1,(const  int *)p);\n+  u8 = vec_lvsr(1,(_110 *)p);\n+  s32 = vec_ld(1,(const  int *)p);\n+  s32 = vec_ld(1,(_110 *)p);\n+  s32 = vec_lde(1,(const  int *)p);\n+  s32 = vec_lde(1,(_110 *)p);\n+  s32 = vec_ldl(1,(const  int *)p);\n+  s32 = vec_ldl(1,(_110 *)p);\n+  vec_dst((const  int *)p,1,1);\n+  vec_dstst((const  int *)p,1,1);\n+  vec_dststt((const  int *)p,1,1);\n+  vec_dstt((const  int *)p,1,1);\n+  vec_dst((_110 *)p,1,1);\n+  vec_dstst((_110 *)p,1,1);\n+  vec_dststt((_110 *)p,1,1);\n+  vec_dstt((_110 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile int *)p);\n+  u8 = vec_lvsl(1,(_111 *)p);\n+  u8 = vec_lvsr(1,( volatile int *)p);\n+  u8 = vec_lvsr(1,(_111 *)p);\n+  u8 = vec_lvsl(1,(  int *)p);\n+  u8 = vec_lvsl(1,(_112 *)p);\n+  u8 = vec_lvsr(1,(  int *)p);\n+  u8 = vec_lvsr(1,(_112 *)p);\n+  s32 = vec_ld(1,(  int *)p);\n+  s32 = vec_ld(1,(_112 *)p);\n+  s32 = vec_lde(1,(  int *)p);\n+  s32 = vec_lde(1,(_112 *)p);\n+  s32 = vec_ldl(1,(  int *)p);\n+  s32 = vec_ldl(1,(_112 *)p);\n+  vec_dst((  int *)p,1,1);\n+  vec_dstst((  int *)p,1,1);\n+  vec_dststt((  int *)p,1,1);\n+  vec_dstt((  int *)p,1,1);\n+  vec_dst((_112 *)p,1,1);\n+  vec_dstst((_112 *)p,1,1);\n+  vec_dststt((_112 *)p,1,1);\n+  vec_dstt((_112 *)p,1,1);\n+  vec_st(s32,1,(  int *)p);\n+  vec_st(s32,1,(_112 *)p);\n+  vec_ste(s32,1,(  int *)p);\n+  vec_ste(s32,1,(_112 *)p);\n+  vec_stl(s32,1,(  int *)p);\n+  vec_stl(s32,1,(_112 *)p);\n+  u8 = vec_ld(1,(const  vector unsigned char *)p);\n+  u8 = vec_ld(1,(_114 *)p);\n+  u8 = vec_ldl(1,(const  vector unsigned char *)p);\n+  u8 = vec_ldl(1,(_114 *)p);\n+  vec_dst((const  vector unsigned char *)p,1,1);\n+  vec_dstst((const  vector unsigned char *)p,1,1);\n+  vec_dststt((const  vector unsigned char *)p,1,1);\n+  vec_dstt((const  vector unsigned char *)p,1,1);\n+  vec_dst((_114 *)p,1,1);\n+  vec_dstst((_114 *)p,1,1);\n+  vec_dststt((_114 *)p,1,1);\n+  vec_dstt((_114 *)p,1,1);\n+  u8 = vec_ld(1,(  vector unsigned char *)p);\n+  u8 = vec_ld(1,(_116 *)p);\n+  u8 = vec_ldl(1,(  vector unsigned char *)p);\n+  u8 = vec_ldl(1,(_116 *)p);\n+  vec_dst((  vector unsigned char *)p,1,1);\n+  vec_dstst((  vector unsigned char *)p,1,1);\n+  vec_dststt((  vector unsigned char *)p,1,1);\n+  vec_dstt((  vector unsigned char *)p,1,1);\n+  vec_dst((_116 *)p,1,1);\n+  vec_dstst((_116 *)p,1,1);\n+  vec_dststt((_116 *)p,1,1);\n+  vec_dstt((_116 *)p,1,1);\n+  vec_st(u8,1,(  vector unsigned char *)p);\n+  vec_st(u8,1,(_116 *)p);\n+  vec_stl(u8,1,(  vector unsigned char *)p);\n+  vec_stl(u8,1,(_116 *)p);\n+  u8 = vec_lvsl(1,(const volatile signed char *)p);\n+  u8 = vec_lvsl(1,(_117 *)p);\n+  u8 = vec_lvsr(1,(const volatile signed char *)p);\n+  u8 = vec_lvsr(1,(_117 *)p);\n+  u8 = vec_lvsl(1,(const  signed char *)p);\n+  u8 = vec_lvsl(1,(_118 *)p);\n+  u8 = vec_lvsr(1,(const  signed char *)p);\n+  u8 = vec_lvsr(1,(_118 *)p);\n+  s8 = vec_ld(1,(const  signed char *)p);\n+  s8 = vec_ld(1,(_118 *)p);\n+  s8 = vec_lde(1,(const  signed char *)p);\n+  s8 = vec_lde(1,(_118 *)p);\n+  s8 = vec_ldl(1,(const  signed char *)p);\n+  s8 = vec_ldl(1,(_118 *)p);\n+  vec_dst((const  signed char *)p,1,1);\n+  vec_dstst((const  signed char *)p,1,1);\n+  vec_dststt((const  signed char *)p,1,1);\n+  vec_dstt((const  signed char *)p,1,1);\n+  vec_dst((_118 *)p,1,1);\n+  vec_dstst((_118 *)p,1,1);\n+  vec_dststt((_118 *)p,1,1);\n+  vec_dstt((_118 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile signed char *)p);\n+  u8 = vec_lvsl(1,(_119 *)p);\n+  u8 = vec_lvsr(1,( volatile signed char *)p);\n+  u8 = vec_lvsr(1,(_119 *)p);\n+  u8 = vec_lvsl(1,(  signed char *)p);\n+  u8 = vec_lvsl(1,(_120 *)p);\n+  u8 = vec_lvsr(1,(  signed char *)p);\n+  u8 = vec_lvsr(1,(_120 *)p);\n+  s8 = vec_ld(1,(  signed char *)p);\n+  s8 = vec_ld(1,(_120 *)p);\n+  s8 = vec_lde(1,(  signed char *)p);\n+  s8 = vec_lde(1,(_120 *)p);\n+  s8 = vec_ldl(1,(  signed char *)p);\n+  s8 = vec_ldl(1,(_120 *)p);\n+  vec_dst((  signed char *)p,1,1);\n+  vec_dstst((  signed char *)p,1,1);\n+  vec_dststt((  signed char *)p,1,1);\n+  vec_dstt((  signed char *)p,1,1);\n+  vec_dst((_120 *)p,1,1);\n+  vec_dstst((_120 *)p,1,1);\n+  vec_dststt((_120 *)p,1,1);\n+  vec_dstt((_120 *)p,1,1);\n+  vec_st(s8,1,(  signed char *)p);\n+  vec_st(s8,1,(_120 *)p);\n+  vec_ste(s8,1,(  signed char *)p);\n+  vec_ste(s8,1,(_120 *)p);\n+  vec_stl(s8,1,(  signed char *)p);\n+  vec_stl(s8,1,(_120 *)p);\n+  u8 = vec_lvsl(1,(const volatile float *)p);\n+  u8 = vec_lvsl(1,(_121 *)p);\n+  u8 = vec_lvsr(1,(const volatile float *)p);\n+  u8 = vec_lvsr(1,(_121 *)p);\n+  u8 = vec_lvsl(1,(const  float *)p);\n+  u8 = vec_lvsl(1,(_122 *)p);\n+  u8 = vec_lvsr(1,(const  float *)p);\n+  u8 = vec_lvsr(1,(_122 *)p);\n+  f32 = vec_ld(1,(const  float *)p);\n+  f32 = vec_ld(1,(_122 *)p);\n+  f32 = vec_lde(1,(const  float *)p);\n+  f32 = vec_lde(1,(_122 *)p);\n+  f32 = vec_ldl(1,(const  float *)p);\n+  f32 = vec_ldl(1,(_122 *)p);\n+  vec_dst((const  float *)p,1,1);\n+  vec_dstst((const  float *)p,1,1);\n+  vec_dststt((const  float *)p,1,1);\n+  vec_dstt((const  float *)p,1,1);\n+  vec_dst((_122 *)p,1,1);\n+  vec_dstst((_122 *)p,1,1);\n+  vec_dststt((_122 *)p,1,1);\n+  vec_dstt((_122 *)p,1,1);\n+  u8 = vec_lvsl(1,( volatile float *)p);\n+  u8 = vec_lvsl(1,(_123 *)p);\n+  u8 = vec_lvsr(1,( volatile float *)p);\n+  u8 = vec_lvsr(1,(_123 *)p);\n+  u8 = vec_lvsl(1,(  float *)p);\n+  u8 = vec_lvsl(1,(_124 *)p);\n+  u8 = vec_lvsr(1,(  float *)p);\n+  u8 = vec_lvsr(1,(_124 *)p);\n+  f32 = vec_ld(1,(  float *)p);\n+  f32 = vec_ld(1,(_124 *)p);\n+  f32 = vec_lde(1,(  float *)p);\n+  f32 = vec_lde(1,(_124 *)p);\n+  f32 = vec_ldl(1,(  float *)p);\n+  f32 = vec_ldl(1,(_124 *)p);\n+  vec_dst((  float *)p,1,1);\n+  vec_dstst((  float *)p,1,1);\n+  vec_dststt((  float *)p,1,1);\n+  vec_dstt((  float *)p,1,1);\n+  vec_dst((_124 *)p,1,1);\n+  vec_dstst((_124 *)p,1,1);\n+  vec_dststt((_124 *)p,1,1);\n+  vec_dstt((_124 *)p,1,1);\n+  vec_st(f32,1,(  float *)p);\n+  vec_st(f32,1,(_124 *)p);\n+  vec_ste(f32,1,(  float *)p);\n+  vec_ste(f32,1,(_124 *)p);\n+  vec_stl(f32,1,(  float *)p);\n+  vec_stl(f32,1,(_124 *)p);\n+}"}, {"sha": "1d105dde407811bc13399e615b2f8b55456bacd0", "filename": "gcc/testsuite/gcc.dg/vmx/3c-02.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+vector unsigned char u8;\n+\n+static void f(void *p)\n+{\n+  u8 = vec_ld(1, (unsigned char *)p);\n+}\n+\n+static void test()\n+{\n+  static vector unsigned int value = {1,-2,3,-4};\n+  static vector unsigned int buffer[2];\n+  buffer[1] = value;\n+  f((void *)(-1+(char*)(buffer+1)));\n+  check(vec_all_eq((vector unsigned int) u8, value), \"u8\");\n+}"}, {"sha": "2228c0357569e02c415bada66744effeb7556be7", "filename": "gcc/testsuite/gcc.dg/vmx/3c-03.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3c-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+vector unsigned char u8;\n+\n+static void f(int i, void *p)\n+{\n+  u8 = vec_ld(i, (unsigned char *)p);\n+}\n+\n+static void test()\n+{\n+  static vector unsigned int value = {1,-2,3,-4};\n+  static vector unsigned int buffer[2];\n+  buffer[1] = value;\n+  f(37,(void *)(-37+(char*)(buffer+1)));\n+  check(vec_all_eq((vector unsigned int) u8, value), \"u8\");\n+}"}, {"sha": "48657c86693b3523a09e24d77ad849375c75a6d9", "filename": "gcc/testsuite/gcc.dg/vmx/3d-01.c", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3d-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3d-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F3d-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,171 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+int i;\n+\n+void\n+test_vec_all_gt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_gt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_all_le(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_le(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_gt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_gt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_le(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_le(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_all_lt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_lt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_all_ge(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_ge(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_lt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_lt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_ge(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_ge(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_all_eq(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_eq(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_all_ne(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_all_ne(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_eq(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_eq(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_vec_any_ne(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (vec_any_ne(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_gt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_gt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_le(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_le(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_gt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_gt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_le(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_le(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_lt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_lt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_ge(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_ge(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_lt(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_lt(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_ge(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_ge(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_eq(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_eq(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_all_ne(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_all_ne(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_eq(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_eq(u8a, u8b))\n+    i = 1;\n+}\n+\n+void\n+test_not_vec_any_ne(vector unsigned char u8a, vector unsigned char u8b)\n+{\n+  if (!vec_any_ne(u8a, u8b))\n+    i = 1;\n+}"}, {"sha": "f454a2edadfdd671fc3f1d53c1d7bdf0c7d61705", "filename": "gcc/testsuite/gcc.dg/vmx/4-01.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int\n+f(vector signed char a)\n+{\n+  return (vector unsigned int)(a); \n+}"}, {"sha": "1c3ccd746935ad98c03aaf9ebec918a79b2d899f", "filename": "gcc/testsuite/gcc.dg/vmx/4-03.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F4-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int\n+f(vector signed char a)\n+{\n+  return (vector unsigned int)a; \n+}"}, {"sha": "c3cb6e990dc56b1bb8e40fc34e3a7a77cdce9495", "filename": "gcc/testsuite/gcc.dg/vmx/5-01.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int a = {1,1,1,1};\n+vector unsigned int b = {1,2,3,4};"}, {"sha": "0bb4eb0084f5687fed52025cfe18eea117a46c3e", "filename": "gcc/testsuite/gcc.dg/vmx/5-02.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector float a = {1,1,1,1};\n+vector float b = {1,2.0,3,4U};"}, {"sha": "3d048e87b012eb1ba51de93f713352ccf131d775", "filename": "gcc/testsuite/gcc.dg/vmx/5-03.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned char u8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector signed char s8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector bool char b8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector unsigned short u16 = {1,1,1,1,1,1,1,1};\n+vector signed short s16 = {1,1,1,1,1,1,1,1};\n+vector bool short b16 = {1,1,1,1,1,1,1,1};\n+vector unsigned int u32 = {1,1,1,1};\n+vector signed int s32 = {1,1,1,1};\n+vector bool int b32 = {1,1,1,1};\n+vector float f32 = {1,1,1,1};\n+vector pixel p16 = {1,1,1,1,1,1,1,1};\n+\n+vector unsigned char u8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector signed char s8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector bool char b8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector unsigned short u16_ = {1,2,3,4,5,6,7,8};\n+vector signed short s16_ = {1,2,3,4,5,6,7,8};\n+vector bool short b16_ = {1,2,3,4,5,6,7,8};\n+vector unsigned int u32_ = {1,2,3,4};\n+vector signed int s32_ = {1,2,3,4};\n+vector bool int b32_ = {1,2,3,4};\n+vector float f32_ = {1,2,3,4};\n+vector pixel p16_ = {1,2,3,4,5,6,7,8};"}, {"sha": "c5135e88864974ce6e39dc4720c54801919e7979", "filename": "gcc/testsuite/gcc.dg/vmx/5-04.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-04.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int a;\n+vector unsigned int b;\n+void\n+f(void) \n+{\n+  a = ((vector unsigned int){1,1,1,1});\n+  b = ((vector unsigned int){1,2,3,4});\n+}"}, {"sha": "c3cb6e990dc56b1bb8e40fc34e3a7a77cdce9495", "filename": "gcc/testsuite/gcc.dg/vmx/5-05.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-05.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int a = {1,1,1,1};\n+vector unsigned int b = {1,2,3,4};"}, {"sha": "0bb4eb0084f5687fed52025cfe18eea117a46c3e", "filename": "gcc/testsuite/gcc.dg/vmx/5-06.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-06.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-06.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-06.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector float a = {1,1,1,1};\n+vector float b = {1,2.0,3,4U};"}, {"sha": "3d048e87b012eb1ba51de93f713352ccf131d775", "filename": "gcc/testsuite/gcc.dg/vmx/5-07.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned char u8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector signed char s8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector bool char b8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+vector unsigned short u16 = {1,1,1,1,1,1,1,1};\n+vector signed short s16 = {1,1,1,1,1,1,1,1};\n+vector bool short b16 = {1,1,1,1,1,1,1,1};\n+vector unsigned int u32 = {1,1,1,1};\n+vector signed int s32 = {1,1,1,1};\n+vector bool int b32 = {1,1,1,1};\n+vector float f32 = {1,1,1,1};\n+vector pixel p16 = {1,1,1,1,1,1,1,1};\n+\n+vector unsigned char u8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector signed char s8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector bool char b8_\n+  = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+vector unsigned short u16_ = {1,2,3,4,5,6,7,8};\n+vector signed short s16_ = {1,2,3,4,5,6,7,8};\n+vector bool short b16_ = {1,2,3,4,5,6,7,8};\n+vector unsigned int u32_ = {1,2,3,4};\n+vector signed int s32_ = {1,2,3,4};\n+vector bool int b32_ = {1,2,3,4};\n+vector float f32_ = {1,2,3,4};\n+vector pixel p16_ = {1,2,3,4,5,6,7,8};"}, {"sha": "c03e6558f1d8b397454e208563c02875dcb8fc97", "filename": "gcc/testsuite/gcc.dg/vmx/5-07t.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07t.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07t.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-07t.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef vector unsigned char t_u8;\n+typedef vector signed char t_s8;\n+typedef vector bool char t_b8;\n+typedef vector unsigned short t_u16;\n+typedef vector signed short t_s16;\n+typedef vector bool short t_b16;\n+typedef vector unsigned int t_u32;\n+typedef vector signed int t_s32;\n+typedef vector bool int t_b32;\n+typedef vector float t_f32;\n+typedef vector pixel t_p16;\n+\n+t_u8 u8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+t_s8 s8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+t_b8 b8 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+t_u16 u16 = {1,1,1,1,1,1,1,1};\n+t_s16 s16 = {1,1,1,1,1,1,1,1};\n+t_b16 b16 = {1,1,1,1,1,1,1,1};\n+t_u32 u32 = {1,1,1,1};\n+t_s32 s32 = {1,1,1,1};\n+t_b32 b32 = {1,1,1,1};\n+t_f32 f32 = {1,1,1,1};\n+t_p16 p16 = {1,1,1,1,1,1,1,1};\n+\n+t_u8 u8_ = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+t_s8 s8_ = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+t_b8 b8_ = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n+t_u16 u16_ = {1,2,3,4,5,6,7,8};\n+t_s16 s16_ = {1,2,3,4,5,6,7,8};\n+t_b16 b16_ = {1,2,3,4,5,6,7,8};\n+t_u32 u32_ = {1,2,3,4};\n+t_s32 s32_ = {1,2,3,4};\n+t_b32 b32_ = {1,2,3,4};\n+t_f32 f32_ = {1,2,3,4};\n+t_p16 p16_ = {1,2,3,4,5,6,7,8};"}, {"sha": "c5135e88864974ce6e39dc4720c54801919e7979", "filename": "gcc/testsuite/gcc.dg/vmx/5-08.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-08.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-08.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-08.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned int a;\n+vector unsigned int b;\n+void\n+f(void) \n+{\n+  a = ((vector unsigned int){1,1,1,1});\n+  b = ((vector unsigned int){1,2,3,4});\n+}"}, {"sha": "5f1b6ddc1b90cab9db1e6042cd332b3dcc3b98e7", "filename": "gcc/testsuite/gcc.dg/vmx/5-10.c", "status": "added", "additions": 1352, "deletions": 0, "changes": 1352, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-10.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,1352 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+void fu32a(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0,0,0,0});\n+  *u32++ = ((vector unsigned int){1,1,1,1});\n+  *u32++ = ((vector unsigned int){2,2,2,2});\n+  *u32++ = ((vector unsigned int){3,3,3,3});\n+  *u32++ = ((vector unsigned int){4,4,4,4});\n+  *u32++ = ((vector unsigned int){5,5,5,5});\n+  *u32++ = ((vector unsigned int){6,6,6,6});\n+  *u32++ = ((vector unsigned int){7,7,7,7});\n+  *u32++ = ((vector unsigned int){8,8,8,8});\n+  *u32++ = ((vector unsigned int){9,9,9,9});\n+  *u32++ = ((vector unsigned int){10,10,10,10});\n+  *u32++ = ((vector unsigned int){11,11,11,11});\n+  *u32++ = ((vector unsigned int){12,12,12,12});\n+  *u32++ = ((vector unsigned int){13,13,13,13});\n+  *u32++ = ((vector unsigned int){14,14,14,14});\n+  *u32++ = ((vector unsigned int){15,15,15,15});\n+}\n+void fu32b(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){65537,65537,65537,65537});\n+  *u32++ = ((vector unsigned int){131074,131074,131074,131074});\n+  *u32++ = ((vector unsigned int){196611,196611,196611,196611});\n+  *u32++ = ((vector unsigned int){262148,262148,262148,262148});\n+  *u32++ = ((vector unsigned int){327685,327685,327685,327685});\n+  *u32++ = ((vector unsigned int){393222,393222,393222,393222});\n+  *u32++ = ((vector unsigned int){458759,458759,458759,458759});\n+  *u32++ = ((vector unsigned int){524296,524296,524296,524296});\n+  *u32++ = ((vector unsigned int){589833,589833,589833,589833});\n+  *u32++ = ((vector unsigned int){655370,655370,655370,655370});\n+  *u32++ = ((vector unsigned int){720907,720907,720907,720907});\n+  *u32++ = ((vector unsigned int){786444,786444,786444,786444});\n+  *u32++ = ((vector unsigned int){851981,851981,851981,851981});\n+  *u32++ = ((vector unsigned int){917518,917518,917518,917518});\n+  *u32++ = ((vector unsigned int){983055,983055,983055,983055});\n+}\n+void fu32c(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){16843009,16843009,16843009,16843009});\n+  *u32++ = ((vector unsigned int){33686018,33686018,33686018,33686018});\n+  *u32++ = ((vector unsigned int){50529027,50529027,50529027,50529027});\n+  *u32++ = ((vector unsigned int){67372036,67372036,67372036,67372036});\n+  *u32++ = ((vector unsigned int){84215045,84215045,84215045,84215045});\n+  *u32++ = ((vector unsigned int){101058054,101058054,101058054,101058054});\n+  *u32++ = ((vector unsigned int){117901063,117901063,117901063,117901063});\n+  *u32++ = ((vector unsigned int){134744072,134744072,134744072,134744072});\n+  *u32++ = ((vector unsigned int){151587081,151587081,151587081,151587081});\n+  *u32++ = ((vector unsigned int){168430090,168430090,168430090,168430090});\n+  *u32++ = ((vector unsigned int){185273099,185273099,185273099,185273099});\n+  *u32++ = ((vector unsigned int){202116108,202116108,202116108,202116108});\n+  *u32++ = ((vector unsigned int){218959117,218959117,218959117,218959117});\n+  *u32++ = ((vector unsigned int){235802126,235802126,235802126,235802126});\n+  *u32++ = ((vector unsigned int){252645135,252645135,252645135,252645135});\n+}\n+void fu32d(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){4042322160,4042322160,4042322160,4042322160});\n+  *u32++ = ((vector unsigned int){4059165169,4059165169,4059165169,4059165169});\n+  *u32++ = ((vector unsigned int){4076008178,4076008178,4076008178,4076008178});\n+  *u32++ = ((vector unsigned int){4092851187,4092851187,4092851187,4092851187});\n+  *u32++ = ((vector unsigned int){4109694196,4109694196,4109694196,4109694196});\n+  *u32++ = ((vector unsigned int){4126537205,4126537205,4126537205,4126537205});\n+  *u32++ = ((vector unsigned int){4143380214,4143380214,4143380214,4143380214});\n+  *u32++ = ((vector unsigned int){4160223223,4160223223,4160223223,4160223223});\n+  *u32++ = ((vector unsigned int){4177066232,4177066232,4177066232,4177066232});\n+  *u32++ = ((vector unsigned int){4193909241,4193909241,4193909241,4193909241});\n+  *u32++ = ((vector unsigned int){4210752250,4210752250,4210752250,4210752250});\n+  *u32++ = ((vector unsigned int){4227595259,4227595259,4227595259,4227595259});\n+  *u32++ = ((vector unsigned int){4244438268,4244438268,4244438268,4244438268});\n+  *u32++ = ((vector unsigned int){4261281277,4261281277,4261281277,4261281277});\n+  *u32++ = ((vector unsigned int){4278124286,4278124286,4278124286,4278124286});\n+}\n+void fu32e(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){4293984240,4293984240,4293984240,4293984240});\n+  *u32++ = ((vector unsigned int){4294049777,4294049777,4294049777,4294049777});\n+  *u32++ = ((vector unsigned int){4294115314,4294115314,4294115314,4294115314});\n+  *u32++ = ((vector unsigned int){4294180851,4294180851,4294180851,4294180851});\n+  *u32++ = ((vector unsigned int){4294246388,4294246388,4294246388,4294246388});\n+  *u32++ = ((vector unsigned int){4294311925,4294311925,4294311925,4294311925});\n+  *u32++ = ((vector unsigned int){4294377462,4294377462,4294377462,4294377462});\n+  *u32++ = ((vector unsigned int){4294442999,4294442999,4294442999,4294442999});\n+  *u32++ = ((vector unsigned int){4294508536,4294508536,4294508536,4294508536});\n+  *u32++ = ((vector unsigned int){4294574073,4294574073,4294574073,4294574073});\n+  *u32++ = ((vector unsigned int){4294639610,4294639610,4294639610,4294639610});\n+  *u32++ = ((vector unsigned int){4294705147,4294705147,4294705147,4294705147});\n+  *u32++ = ((vector unsigned int){4294770684,4294770684,4294770684,4294770684});\n+  *u32++ = ((vector unsigned int){4294836221,4294836221,4294836221,4294836221});\n+  *u32++ = ((vector unsigned int){4294901758,4294901758,4294901758,4294901758});\n+}\n+void fu32f(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){4294967280,4294967280,4294967280,4294967280});\n+  *u32++ = ((vector unsigned int){4294967281,4294967281,4294967281,4294967281});\n+  *u32++ = ((vector unsigned int){4294967282,4294967282,4294967282,4294967282});\n+  *u32++ = ((vector unsigned int){4294967283,4294967283,4294967283,4294967283});\n+  *u32++ = ((vector unsigned int){4294967284,4294967284,4294967284,4294967284});\n+  *u32++ = ((vector unsigned int){4294967285,4294967285,4294967285,4294967285});\n+  *u32++ = ((vector unsigned int){4294967286,4294967286,4294967286,4294967286});\n+  *u32++ = ((vector unsigned int){4294967287,4294967287,4294967287,4294967287});\n+  *u32++ = ((vector unsigned int){4294967288,4294967288,4294967288,4294967288});\n+  *u32++ = ((vector unsigned int){4294967289,4294967289,4294967289,4294967289});\n+  *u32++ = ((vector unsigned int){4294967290,4294967290,4294967290,4294967290});\n+  *u32++ = ((vector unsigned int){4294967291,4294967291,4294967291,4294967291});\n+  *u32++ = ((vector unsigned int){4294967292,4294967292,4294967292,4294967292});\n+  *u32++ = ((vector unsigned int){4294967293,4294967293,4294967293,4294967293});\n+  *u32++ = ((vector unsigned int){4294967294,4294967294,4294967294,4294967294});\n+  *u32++ = ((vector unsigned int){4294967295,4294967295,4294967295,4294967295});\n+}\n+void fu32g(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){-252645136,-252645136,-252645136,-252645136});\n+  *u32++ = ((vector unsigned int){-235802127,-235802127,-235802127,-235802127});\n+  *u32++ = ((vector unsigned int){-218959118,-218959118,-218959118,-218959118});\n+  *u32++ = ((vector unsigned int){-202116109,-202116109,-202116109,-202116109});\n+  *u32++ = ((vector unsigned int){-185273100,-185273100,-185273100,-185273100});\n+  *u32++ = ((vector unsigned int){-168430091,-168430091,-168430091,-168430091});\n+  *u32++ = ((vector unsigned int){-151587082,-151587082,-151587082,-151587082});\n+  *u32++ = ((vector unsigned int){-134744073,-134744073,-134744073,-134744073});\n+  *u32++ = ((vector unsigned int){-117901064,-117901064,-117901064,-117901064});\n+  *u32++ = ((vector unsigned int){-101058055,-101058055,-101058055,-101058055});\n+  *u32++ = ((vector unsigned int){-84215046,-84215046,-84215046,-84215046});\n+  *u32++ = ((vector unsigned int){-67372037,-67372037,-67372037,-67372037});\n+  *u32++ = ((vector unsigned int){-50529028,-50529028,-50529028,-50529028});\n+  *u32++ = ((vector unsigned int){-33686019,-33686019,-33686019,-33686019});\n+  *u32++ = ((vector unsigned int){-16843010,-16843010,-16843010,-16843010});\n+}\n+void fu32h(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){-983056,-983056,-983056,-983056});\n+  *u32++ = ((vector unsigned int){-917519,-917519,-917519,-917519});\n+  *u32++ = ((vector unsigned int){-851982,-851982,-851982,-851982});\n+  *u32++ = ((vector unsigned int){-786445,-786445,-786445,-786445});\n+  *u32++ = ((vector unsigned int){-720908,-720908,-720908,-720908});\n+  *u32++ = ((vector unsigned int){-655371,-655371,-655371,-655371});\n+  *u32++ = ((vector unsigned int){-589834,-589834,-589834,-589834});\n+  *u32++ = ((vector unsigned int){-524297,-524297,-524297,-524297});\n+  *u32++ = ((vector unsigned int){-458760,-458760,-458760,-458760});\n+  *u32++ = ((vector unsigned int){-393223,-393223,-393223,-393223});\n+  *u32++ = ((vector unsigned int){-327686,-327686,-327686,-327686});\n+  *u32++ = ((vector unsigned int){-262149,-262149,-262149,-262149});\n+  *u32++ = ((vector unsigned int){-196612,-196612,-196612,-196612});\n+  *u32++ = ((vector unsigned int){-131075,-131075,-131075,-131075});\n+  *u32++ = ((vector unsigned int){-65538,-65538,-65538,-65538});\n+}\n+void fu32i(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){-16,-16,-16,-16});\n+  *u32++ = ((vector unsigned int){-15,-15,-15,-15});\n+  *u32++ = ((vector unsigned int){-14,-14,-14,-14});\n+  *u32++ = ((vector unsigned int){-13,-13,-13,-13});\n+  *u32++ = ((vector unsigned int){-12,-12,-12,-12});\n+  *u32++ = ((vector unsigned int){-11,-11,-11,-11});\n+  *u32++ = ((vector unsigned int){-10,-10,-10,-10});\n+  *u32++ = ((vector unsigned int){-9,-9,-9,-9});\n+  *u32++ = ((vector unsigned int){-8,-8,-8,-8});\n+  *u32++ = ((vector unsigned int){-7,-7,-7,-7});\n+  *u32++ = ((vector unsigned int){-6,-6,-6,-6});\n+  *u32++ = ((vector unsigned int){-5,-5,-5,-5});\n+  *u32++ = ((vector unsigned int){-4,-4,-4,-4});\n+  *u32++ = ((vector unsigned int){-3,-3,-3,-3});\n+  *u32++ = ((vector unsigned int){-2,-2,-2,-2});\n+  *u32++ = ((vector unsigned int){-1,-1,-1,-1});\n+}\n+void fu32j(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0xfffffff0,0xfffffff0,0xfffffff0,0xfffffff0});\n+  *u32++ = ((vector unsigned int){0xfffffff1,0xfffffff1,0xfffffff1,0xfffffff1});\n+  *u32++ = ((vector unsigned int){0xfffffff2,0xfffffff2,0xfffffff2,0xfffffff2});\n+  *u32++ = ((vector unsigned int){0xfffffff3,0xfffffff3,0xfffffff3,0xfffffff3});\n+  *u32++ = ((vector unsigned int){0xfffffff4,0xfffffff4,0xfffffff4,0xfffffff4});\n+  *u32++ = ((vector unsigned int){0xfffffff5,0xfffffff5,0xfffffff5,0xfffffff5});\n+  *u32++ = ((vector unsigned int){0xfffffff6,0xfffffff6,0xfffffff6,0xfffffff6});\n+  *u32++ = ((vector unsigned int){0xfffffff7,0xfffffff7,0xfffffff7,0xfffffff7});\n+  *u32++ = ((vector unsigned int){0xfffffff8,0xfffffff8,0xfffffff8,0xfffffff8});\n+  *u32++ = ((vector unsigned int){0xfffffff9,0xfffffff9,0xfffffff9,0xfffffff9});\n+  *u32++ = ((vector unsigned int){0xfffffffa,0xfffffffa,0xfffffffa,0xfffffffa});\n+  *u32++ = ((vector unsigned int){0xfffffffb,0xfffffffb,0xfffffffb,0xfffffffb});\n+  *u32++ = ((vector unsigned int){0xfffffffc,0xfffffffc,0xfffffffc,0xfffffffc});\n+  *u32++ = ((vector unsigned int){0xfffffffd,0xfffffffd,0xfffffffd,0xfffffffd});\n+  *u32++ = ((vector unsigned int){0xfffffffe,0xfffffffe,0xfffffffe,0xfffffffe});\n+  *u32++ = ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fu32k(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *u32++ = ((vector unsigned int){0x00000001,0x00000001,0x00000001,0x00000001});\n+  *u32++ = ((vector unsigned int){0x00000002,0x00000002,0x00000002,0x00000002});\n+  *u32++ = ((vector unsigned int){0x00000003,0x00000003,0x00000003,0x00000003});\n+  *u32++ = ((vector unsigned int){0x00000004,0x00000004,0x00000004,0x00000004});\n+  *u32++ = ((vector unsigned int){0x00000005,0x00000005,0x00000005,0x00000005});\n+  *u32++ = ((vector unsigned int){0x00000006,0x00000006,0x00000006,0x00000006});\n+  *u32++ = ((vector unsigned int){0x00000007,0x00000007,0x00000007,0x00000007});\n+  *u32++ = ((vector unsigned int){0x00000008,0x00000008,0x00000008,0x00000008});\n+  *u32++ = ((vector unsigned int){0x00000009,0x00000009,0x00000009,0x00000009});\n+  *u32++ = ((vector unsigned int){0x0000000a,0x0000000a,0x0000000a,0x0000000a});\n+  *u32++ = ((vector unsigned int){0x0000000b,0x0000000b,0x0000000b,0x0000000b});\n+  *u32++ = ((vector unsigned int){0x0000000c,0x0000000c,0x0000000c,0x0000000c});\n+  *u32++ = ((vector unsigned int){0x0000000d,0x0000000d,0x0000000d,0x0000000d});\n+  *u32++ = ((vector unsigned int){0x0000000e,0x0000000e,0x0000000e,0x0000000e});\n+  *u32++ = ((vector unsigned int){0x0000000f,0x0000000f,0x0000000f,0x0000000f});\n+}\n+void fu32l(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0xfff0fff0,0xfff0fff0,0xfff0fff0,0xfff0fff0});\n+  *u32++ = ((vector unsigned int){0xfff1fff1,0xfff1fff1,0xfff1fff1,0xfff1fff1});\n+  *u32++ = ((vector unsigned int){0xfff2fff2,0xfff2fff2,0xfff2fff2,0xfff2fff2});\n+  *u32++ = ((vector unsigned int){0xfff3fff3,0xfff3fff3,0xfff3fff3,0xfff3fff3});\n+  *u32++ = ((vector unsigned int){0xfff4fff4,0xfff4fff4,0xfff4fff4,0xfff4fff4});\n+  *u32++ = ((vector unsigned int){0xfff5fff5,0xfff5fff5,0xfff5fff5,0xfff5fff5});\n+  *u32++ = ((vector unsigned int){0xfff6fff6,0xfff6fff6,0xfff6fff6,0xfff6fff6});\n+  *u32++ = ((vector unsigned int){0xfff7fff7,0xfff7fff7,0xfff7fff7,0xfff7fff7});\n+  *u32++ = ((vector unsigned int){0xfff8fff8,0xfff8fff8,0xfff8fff8,0xfff8fff8});\n+  *u32++ = ((vector unsigned int){0xfff9fff9,0xfff9fff9,0xfff9fff9,0xfff9fff9});\n+  *u32++ = ((vector unsigned int){0xfffafffa,0xfffafffa,0xfffafffa,0xfffafffa});\n+  *u32++ = ((vector unsigned int){0xfffbfffb,0xfffbfffb,0xfffbfffb,0xfffbfffb});\n+  *u32++ = ((vector unsigned int){0xfffcfffc,0xfffcfffc,0xfffcfffc,0xfffcfffc});\n+  *u32++ = ((vector unsigned int){0xfffdfffd,0xfffdfffd,0xfffdfffd,0xfffdfffd});\n+  *u32++ = ((vector unsigned int){0xfffefffe,0xfffefffe,0xfffefffe,0xfffefffe});\n+  *u32++ = ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fu32m(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *u32++ = ((vector unsigned int){0x00010001,0x00010001,0x00010001,0x00010001});\n+  *u32++ = ((vector unsigned int){0x00020002,0x00020002,0x00020002,0x00020002});\n+  *u32++ = ((vector unsigned int){0x00030003,0x00030003,0x00030003,0x00030003});\n+  *u32++ = ((vector unsigned int){0x00040004,0x00040004,0x00040004,0x00040004});\n+  *u32++ = ((vector unsigned int){0x00050005,0x00050005,0x00050005,0x00050005});\n+  *u32++ = ((vector unsigned int){0x00060006,0x00060006,0x00060006,0x00060006});\n+  *u32++ = ((vector unsigned int){0x00070007,0x00070007,0x00070007,0x00070007});\n+  *u32++ = ((vector unsigned int){0x00080008,0x00080008,0x00080008,0x00080008});\n+  *u32++ = ((vector unsigned int){0x00090009,0x00090009,0x00090009,0x00090009});\n+  *u32++ = ((vector unsigned int){0x000a000a,0x000a000a,0x000a000a,0x000a000a});\n+  *u32++ = ((vector unsigned int){0x000b000b,0x000b000b,0x000b000b,0x000b000b});\n+  *u32++ = ((vector unsigned int){0x000c000c,0x000c000c,0x000c000c,0x000c000c});\n+  *u32++ = ((vector unsigned int){0x000d000d,0x000d000d,0x000d000d,0x000d000d});\n+  *u32++ = ((vector unsigned int){0x000e000e,0x000e000e,0x000e000e,0x000e000e});\n+  *u32++ = ((vector unsigned int){0x000f000f,0x000f000f,0x000f000f,0x000f000f});\n+}\n+void fu32n(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0xf0f0f0f0,0xf0f0f0f0,0xf0f0f0f0,0xf0f0f0f0});\n+  *u32++ = ((vector unsigned int){0xf1f1f1f1,0xf1f1f1f1,0xf1f1f1f1,0xf1f1f1f1});\n+  *u32++ = ((vector unsigned int){0xf2f2f2f2,0xf2f2f2f2,0xf2f2f2f2,0xf2f2f2f2});\n+  *u32++ = ((vector unsigned int){0xf3f3f3f3,0xf3f3f3f3,0xf3f3f3f3,0xf3f3f3f3});\n+  *u32++ = ((vector unsigned int){0xf4f4f4f4,0xf4f4f4f4,0xf4f4f4f4,0xf4f4f4f4});\n+  *u32++ = ((vector unsigned int){0xf5f5f5f5,0xf5f5f5f5,0xf5f5f5f5,0xf5f5f5f5});\n+  *u32++ = ((vector unsigned int){0xf6f6f6f6,0xf6f6f6f6,0xf6f6f6f6,0xf6f6f6f6});\n+  *u32++ = ((vector unsigned int){0xf7f7f7f7,0xf7f7f7f7,0xf7f7f7f7,0xf7f7f7f7});\n+  *u32++ = ((vector unsigned int){0xf8f8f8f8,0xf8f8f8f8,0xf8f8f8f8,0xf8f8f8f8});\n+  *u32++ = ((vector unsigned int){0xf9f9f9f9,0xf9f9f9f9,0xf9f9f9f9,0xf9f9f9f9});\n+  *u32++ = ((vector unsigned int){0xfafafafa,0xfafafafa,0xfafafafa,0xfafafafa});\n+  *u32++ = ((vector unsigned int){0xfbfbfbfb,0xfbfbfbfb,0xfbfbfbfb,0xfbfbfbfb});\n+  *u32++ = ((vector unsigned int){0xfcfcfcfc,0xfcfcfcfc,0xfcfcfcfc,0xfcfcfcfc});\n+  *u32++ = ((vector unsigned int){0xfdfdfdfd,0xfdfdfdfd,0xfdfdfdfd,0xfdfdfdfd});\n+  *u32++ = ((vector unsigned int){0xfefefefe,0xfefefefe,0xfefefefe,0xfefefefe});\n+  *u32++ = ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fu32o(vector unsigned int *u32) \n+{\n+  *u32++ = ((vector unsigned int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *u32++ = ((vector unsigned int){0x01010101,0x01010101,0x01010101,0x01010101});\n+  *u32++ = ((vector unsigned int){0x02020202,0x02020202,0x02020202,0x02020202});\n+  *u32++ = ((vector unsigned int){0x03030303,0x03030303,0x03030303,0x03030303});\n+  *u32++ = ((vector unsigned int){0x04040404,0x04040404,0x04040404,0x04040404});\n+  *u32++ = ((vector unsigned int){0x05050505,0x05050505,0x05050505,0x05050505});\n+  *u32++ = ((vector unsigned int){0x06060606,0x06060606,0x06060606,0x06060606});\n+  *u32++ = ((vector unsigned int){0x07070707,0x07070707,0x07070707,0x07070707});\n+  *u32++ = ((vector unsigned int){0x08080808,0x08080808,0x08080808,0x08080808});\n+  *u32++ = ((vector unsigned int){0x09090909,0x09090909,0x09090909,0x09090909});\n+  *u32++ = ((vector unsigned int){0x0a0a0a0a,0x0a0a0a0a,0x0a0a0a0a,0x0a0a0a0a});\n+  *u32++ = ((vector unsigned int){0x0b0b0b0b,0x0b0b0b0b,0x0b0b0b0b,0x0b0b0b0b});\n+  *u32++ = ((vector unsigned int){0x0c0c0c0c,0x0c0c0c0c,0x0c0c0c0c,0x0c0c0c0c});\n+  *u32++ = ((vector unsigned int){0x0d0d0d0d,0x0d0d0d0d,0x0d0d0d0d,0x0d0d0d0d});\n+  *u32++ = ((vector unsigned int){0x0e0e0e0e,0x0e0e0e0e,0x0e0e0e0e,0x0e0e0e0e});\n+  *u32++ = ((vector unsigned int){0x0f0f0f0f,0x0f0f0f0f,0x0f0f0f0f,0x0f0f0f0f});\n+}\n+void fu16a(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0xffff,0xfff0,0xffff,0xfff0,0xffff,0xfff0,0xffff,0xfff0});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff1,0xffff,0xfff1,0xffff,0xfff1,0xffff,0xfff1});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff2,0xffff,0xfff2,0xffff,0xfff2,0xffff,0xfff2});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff3,0xffff,0xfff3,0xffff,0xfff3,0xffff,0xfff3});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff4,0xffff,0xfff4,0xffff,0xfff4,0xffff,0xfff4});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff5,0xffff,0xfff5,0xffff,0xfff5,0xffff,0xfff5});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff6,0xffff,0xfff6,0xffff,0xfff6,0xffff,0xfff6});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff8,0xffff,0xfff8,0xffff,0xfff8,0xffff,0xfff8});\n+  *u16++ = ((vector unsigned short){0xffff,0xfff9,0xffff,0xfff9,0xffff,0xfff9,0xffff,0xfff9});\n+  *u16++ = ((vector unsigned short){0xffff,0xfffa,0xffff,0xfffa,0xffff,0xfffa,0xffff,0xfffa});\n+  *u16++ = ((vector unsigned short){0xffff,0xfffb,0xffff,0xfffb,0xffff,0xfffb,0xffff,0xfffb});\n+  *u16++ = ((vector unsigned short){0xffff,0xfffc,0xffff,0xfffc,0xffff,0xfffc,0xffff,0xfffc});\n+  *u16++ = ((vector unsigned short){0xffff,0xfffd,0xffff,0xfffd,0xffff,0xfffd,0xffff,0xfffd});\n+  *u16++ = ((vector unsigned short){0xffff,0xfffe,0xffff,0xfffe,0xffff,0xfffe,0xffff,0xfffe});\n+  *u16++ = ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fu16b(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *u16++ = ((vector unsigned short){0x0000,0x0001,0x0000,0x0001,0x0000,0x0001,0x0000,0x0001});\n+  *u16++ = ((vector unsigned short){0x0000,0x0002,0x0000,0x0002,0x0000,0x0002,0x0000,0x0002});\n+  *u16++ = ((vector unsigned short){0x0000,0x0003,0x0000,0x0003,0x0000,0x0003,0x0000,0x0003});\n+  *u16++ = ((vector unsigned short){0x0000,0x0004,0x0000,0x0004,0x0000,0x0004,0x0000,0x0004});\n+  *u16++ = ((vector unsigned short){0x0000,0x0005,0x0000,0x0005,0x0000,0x0005,0x0000,0x0005});\n+  *u16++ = ((vector unsigned short){0x0000,0x0006,0x0000,0x0006,0x0000,0x0006,0x0000,0x0006});\n+  *u16++ = ((vector unsigned short){0x0000,0x0007,0x0000,0x0007,0x0000,0x0007,0x0000,0x0007});\n+  *u16++ = ((vector unsigned short){0x0000,0x0008,0x0000,0x0008,0x0000,0x0008,0x0000,0x0008});\n+  *u16++ = ((vector unsigned short){0x0000,0x0009,0x0000,0x0009,0x0000,0x0009,0x0000,0x0009});\n+  *u16++ = ((vector unsigned short){0x0000,0x000a,0x0000,0x000a,0x0000,0x000a,0x0000,0x000a});\n+  *u16++ = ((vector unsigned short){0x0000,0x000b,0x0000,0x000b,0x0000,0x000b,0x0000,0x000b});\n+  *u16++ = ((vector unsigned short){0x0000,0x000c,0x0000,0x000c,0x0000,0x000c,0x0000,0x000c});\n+  *u16++ = ((vector unsigned short){0x0000,0x000d,0x0000,0x000d,0x0000,0x000d,0x0000,0x000d});\n+  *u16++ = ((vector unsigned short){0x0000,0x000e,0x0000,0x000e,0x0000,0x000e,0x0000,0x000e});\n+  *u16++ = ((vector unsigned short){0x0000,0x000f,0x0000,0x000f,0x0000,0x000f,0x0000,0x000f});\n+}\n+void fu16c(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0});\n+  *u16++ = ((vector unsigned short){0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1});\n+  *u16++ = ((vector unsigned short){0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2});\n+  *u16++ = ((vector unsigned short){0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3});\n+  *u16++ = ((vector unsigned short){0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4});\n+  *u16++ = ((vector unsigned short){0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5});\n+  *u16++ = ((vector unsigned short){0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6});\n+  *u16++ = ((vector unsigned short){0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7});\n+  *u16++ = ((vector unsigned short){0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8});\n+  *u16++ = ((vector unsigned short){0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9});\n+  *u16++ = ((vector unsigned short){0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa});\n+  *u16++ = ((vector unsigned short){0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb});\n+  *u16++ = ((vector unsigned short){0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc});\n+  *u16++ = ((vector unsigned short){0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd});\n+  *u16++ = ((vector unsigned short){0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe});\n+  *u16++ = ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fu16d(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *u16++ = ((vector unsigned short){0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001});\n+  *u16++ = ((vector unsigned short){0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002});\n+  *u16++ = ((vector unsigned short){0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003});\n+  *u16++ = ((vector unsigned short){0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004});\n+  *u16++ = ((vector unsigned short){0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005});\n+  *u16++ = ((vector unsigned short){0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006});\n+  *u16++ = ((vector unsigned short){0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007});\n+  *u16++ = ((vector unsigned short){0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008});\n+  *u16++ = ((vector unsigned short){0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009});\n+  *u16++ = ((vector unsigned short){0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a});\n+  *u16++ = ((vector unsigned short){0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b});\n+  *u16++ = ((vector unsigned short){0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c});\n+  *u16++ = ((vector unsigned short){0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d});\n+  *u16++ = ((vector unsigned short){0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e});\n+  *u16++ = ((vector unsigned short){0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f});\n+}\n+void fu16e(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0});\n+  *u16++ = ((vector unsigned short){0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1});\n+  *u16++ = ((vector unsigned short){0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2});\n+  *u16++ = ((vector unsigned short){0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3});\n+  *u16++ = ((vector unsigned short){0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4});\n+  *u16++ = ((vector unsigned short){0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5});\n+  *u16++ = ((vector unsigned short){0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6});\n+  *u16++ = ((vector unsigned short){0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7});\n+  *u16++ = ((vector unsigned short){0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8});\n+  *u16++ = ((vector unsigned short){0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9});\n+  *u16++ = ((vector unsigned short){0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa});\n+  *u16++ = ((vector unsigned short){0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb});\n+  *u16++ = ((vector unsigned short){0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc});\n+  *u16++ = ((vector unsigned short){0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd});\n+  *u16++ = ((vector unsigned short){0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe});\n+  *u16++ = ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fu16f(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *u16++ = ((vector unsigned short){0x0101,0x0101,0x0101,0x0101,0x0101,0x0101,0x0101,0x0101});\n+  *u16++ = ((vector unsigned short){0x0202,0x0202,0x0202,0x0202,0x0202,0x0202,0x0202,0x0202});\n+  *u16++ = ((vector unsigned short){0x0303,0x0303,0x0303,0x0303,0x0303,0x0303,0x0303,0x0303});\n+  *u16++ = ((vector unsigned short){0x0404,0x0404,0x0404,0x0404,0x0404,0x0404,0x0404,0x0404});\n+  *u16++ = ((vector unsigned short){0x0505,0x0505,0x0505,0x0505,0x0505,0x0505,0x0505,0x0505});\n+  *u16++ = ((vector unsigned short){0x0606,0x0606,0x0606,0x0606,0x0606,0x0606,0x0606,0x0606});\n+  *u16++ = ((vector unsigned short){0x0707,0x0707,0x0707,0x0707,0x0707,0x0707,0x0707,0x0707});\n+  *u16++ = ((vector unsigned short){0x0808,0x0808,0x0808,0x0808,0x0808,0x0808,0x0808,0x0808});\n+  *u16++ = ((vector unsigned short){0x0909,0x0909,0x0909,0x0909,0x0909,0x0909,0x0909,0x0909});\n+  *u16++ = ((vector unsigned short){0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a});\n+  *u16++ = ((vector unsigned short){0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b});\n+  *u16++ = ((vector unsigned short){0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c});\n+  *u16++ = ((vector unsigned short){0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d});\n+  *u16++ = ((vector unsigned short){0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e});\n+  *u16++ = ((vector unsigned short){0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f});\n+}\n+void fu16g(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){0,0,0,0,0,0,0,0});\n+  *u16++ = ((vector unsigned short){1,1,1,1,1,1,1,1});\n+  *u16++ = ((vector unsigned short){2,2,2,2,2,2,2,2});\n+  *u16++ = ((vector unsigned short){3,3,3,3,3,3,3,3});\n+  *u16++ = ((vector unsigned short){4,4,4,4,4,4,4,4});\n+  *u16++ = ((vector unsigned short){5,5,5,5,5,5,5,5});\n+  *u16++ = ((vector unsigned short){6,6,6,6,6,6,6,6});\n+  *u16++ = ((vector unsigned short){7,7,7,7,7,7,7,7});\n+  *u16++ = ((vector unsigned short){8,8,8,8,8,8,8,8});\n+  *u16++ = ((vector unsigned short){9,9,9,9,9,9,9,9});\n+  *u16++ = ((vector unsigned short){10,10,10,10,10,10,10,10});\n+  *u16++ = ((vector unsigned short){11,11,11,11,11,11,11,11});\n+  *u16++ = ((vector unsigned short){12,12,12,12,12,12,12,12});\n+  *u16++ = ((vector unsigned short){13,13,13,13,13,13,13,13});\n+  *u16++ = ((vector unsigned short){14,14,14,14,14,14,14,14});\n+  *u16++ = ((vector unsigned short){15,15,15,15,15,15,15,15});\n+}\n+void fu16h(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){257,257,257,257,257,257,257,257});\n+  *u16++ = ((vector unsigned short){514,514,514,514,514,514,514,514});\n+  *u16++ = ((vector unsigned short){771,771,771,771,771,771,771,771});\n+  *u16++ = ((vector unsigned short){1028,1028,1028,1028,1028,1028,1028,1028});\n+  *u16++ = ((vector unsigned short){1285,1285,1285,1285,1285,1285,1285,1285});\n+  *u16++ = ((vector unsigned short){1542,1542,1542,1542,1542,1542,1542,1542});\n+  *u16++ = ((vector unsigned short){1799,1799,1799,1799,1799,1799,1799,1799});\n+  *u16++ = ((vector unsigned short){2056,2056,2056,2056,2056,2056,2056,2056});\n+  *u16++ = ((vector unsigned short){2313,2313,2313,2313,2313,2313,2313,2313});\n+  *u16++ = ((vector unsigned short){2570,2570,2570,2570,2570,2570,2570,2570});\n+  *u16++ = ((vector unsigned short){2827,2827,2827,2827,2827,2827,2827,2827});\n+  *u16++ = ((vector unsigned short){3084,3084,3084,3084,3084,3084,3084,3084});\n+  *u16++ = ((vector unsigned short){3341,3341,3341,3341,3341,3341,3341,3341});\n+  *u16++ = ((vector unsigned short){3598,3598,3598,3598,3598,3598,3598,3598});\n+  *u16++ = ((vector unsigned short){3855,3855,3855,3855,3855,3855,3855,3855});\n+}\n+void fu16i(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){61680,61680,61680,61680,61680,61680,61680,61680});\n+  *u16++ = ((vector unsigned short){61937,61937,61937,61937,61937,61937,61937,61937});\n+  *u16++ = ((vector unsigned short){62194,62194,62194,62194,62194,62194,62194,62194});\n+  *u16++ = ((vector unsigned short){62451,62451,62451,62451,62451,62451,62451,62451});\n+  *u16++ = ((vector unsigned short){62708,62708,62708,62708,62708,62708,62708,62708});\n+  *u16++ = ((vector unsigned short){62965,62965,62965,62965,62965,62965,62965,62965});\n+  *u16++ = ((vector unsigned short){63222,63222,63222,63222,63222,63222,63222,63222});\n+  *u16++ = ((vector unsigned short){63479,63479,63479,63479,63479,63479,63479,63479});\n+  *u16++ = ((vector unsigned short){63736,63736,63736,63736,63736,63736,63736,63736});\n+  *u16++ = ((vector unsigned short){63993,63993,63993,63993,63993,63993,63993,63993});\n+  *u16++ = ((vector unsigned short){64250,64250,64250,64250,64250,64250,64250,64250});\n+  *u16++ = ((vector unsigned short){64507,64507,64507,64507,64507,64507,64507,64507});\n+  *u16++ = ((vector unsigned short){64764,64764,64764,64764,64764,64764,64764,64764});\n+  *u16++ = ((vector unsigned short){65021,65021,65021,65021,65021,65021,65021,65021});\n+  *u16++ = ((vector unsigned short){65278,65278,65278,65278,65278,65278,65278,65278});\n+}\n+void fu16j(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){65520,65520,65520,65520,65520,65520,65520,65520});\n+  *u16++ = ((vector unsigned short){65521,65521,65521,65521,65521,65521,65521,65521});\n+  *u16++ = ((vector unsigned short){65522,65522,65522,65522,65522,65522,65522,65522});\n+  *u16++ = ((vector unsigned short){65523,65523,65523,65523,65523,65523,65523,65523});\n+  *u16++ = ((vector unsigned short){65524,65524,65524,65524,65524,65524,65524,65524});\n+  *u16++ = ((vector unsigned short){65525,65525,65525,65525,65525,65525,65525,65525});\n+  *u16++ = ((vector unsigned short){65526,65526,65526,65526,65526,65526,65526,65526});\n+  *u16++ = ((vector unsigned short){65527,65527,65527,65527,65527,65527,65527,65527});\n+  *u16++ = ((vector unsigned short){65528,65528,65528,65528,65528,65528,65528,65528});\n+  *u16++ = ((vector unsigned short){65529,65529,65529,65529,65529,65529,65529,65529});\n+  *u16++ = ((vector unsigned short){65530,65530,65530,65530,65530,65530,65530,65530});\n+  *u16++ = ((vector unsigned short){65531,65531,65531,65531,65531,65531,65531,65531});\n+  *u16++ = ((vector unsigned short){65532,65532,65532,65532,65532,65532,65532,65532});\n+  *u16++ = ((vector unsigned short){65533,65533,65533,65533,65533,65533,65533,65533});\n+  *u16++ = ((vector unsigned short){65534,65534,65534,65534,65534,65534,65534,65534});\n+  *u16++ = ((vector unsigned short){65535,65535,65535,65535,65535,65535,65535,65535});\n+}\n+void fu16k(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){-3856,-3856,-3856,-3856,-3856,-3856,-3856,-3856});\n+  *u16++ = ((vector unsigned short){-3599,-3599,-3599,-3599,-3599,-3599,-3599,-3599});\n+  *u16++ = ((vector unsigned short){-3342,-3342,-3342,-3342,-3342,-3342,-3342,-3342});\n+  *u16++ = ((vector unsigned short){-3085,-3085,-3085,-3085,-3085,-3085,-3085,-3085});\n+  *u16++ = ((vector unsigned short){-2828,-2828,-2828,-2828,-2828,-2828,-2828,-2828});\n+  *u16++ = ((vector unsigned short){-2571,-2571,-2571,-2571,-2571,-2571,-2571,-2571});\n+  *u16++ = ((vector unsigned short){-2314,-2314,-2314,-2314,-2314,-2314,-2314,-2314});\n+  *u16++ = ((vector unsigned short){-2057,-2057,-2057,-2057,-2057,-2057,-2057,-2057});\n+  *u16++ = ((vector unsigned short){-1800,-1800,-1800,-1800,-1800,-1800,-1800,-1800});\n+  *u16++ = ((vector unsigned short){-1543,-1543,-1543,-1543,-1543,-1543,-1543,-1543});\n+  *u16++ = ((vector unsigned short){-1286,-1286,-1286,-1286,-1286,-1286,-1286,-1286});\n+  *u16++ = ((vector unsigned short){-1029,-1029,-1029,-1029,-1029,-1029,-1029,-1029});\n+  *u16++ = ((vector unsigned short){-772,-772,-772,-772,-772,-772,-772,-772});\n+  *u16++ = ((vector unsigned short){-515,-515,-515,-515,-515,-515,-515,-515});\n+  *u16++ = ((vector unsigned short){-258,-258,-258,-258,-258,-258,-258,-258});\n+}\n+void fu16l(vector unsigned short *u16) \n+{\n+  *u16++ = ((vector unsigned short){-16,-16,-16,-16,-16,-16,-16,-16});\n+  *u16++ = ((vector unsigned short){-15,-15,-15,-15,-15,-15,-15,-15});\n+  *u16++ = ((vector unsigned short){-14,-14,-14,-14,-14,-14,-14,-14});\n+  *u16++ = ((vector unsigned short){-13,-13,-13,-13,-13,-13,-13,-13});\n+  *u16++ = ((vector unsigned short){-12,-12,-12,-12,-12,-12,-12,-12});\n+  *u16++ = ((vector unsigned short){-11,-11,-11,-11,-11,-11,-11,-11});\n+  *u16++ = ((vector unsigned short){-10,-10,-10,-10,-10,-10,-10,-10});\n+  *u16++ = ((vector unsigned short){-9,-9,-9,-9,-9,-9,-9,-9});\n+  *u16++ = ((vector unsigned short){-8,-8,-8,-8,-8,-8,-8,-8});\n+  *u16++ = ((vector unsigned short){-7,-7,-7,-7,-7,-7,-7,-7});\n+  *u16++ = ((vector unsigned short){-6,-6,-6,-6,-6,-6,-6,-6});\n+  *u16++ = ((vector unsigned short){-5,-5,-5,-5,-5,-5,-5,-5});\n+  *u16++ = ((vector unsigned short){-4,-4,-4,-4,-4,-4,-4,-4});\n+  *u16++ = ((vector unsigned short){-3,-3,-3,-3,-3,-3,-3,-3});\n+  *u16++ = ((vector unsigned short){-2,-2,-2,-2,-2,-2,-2,-2});\n+  *u16++ = ((vector unsigned short){-1,-1,-1,-1,-1,-1,-1,-1});\n+}\n+void fu8a(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fu8b(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e});\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f});\n+}\n+void fu8c(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0});\n+  *u8++ = ((vector unsigned char){0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1});\n+  *u8++ = ((vector unsigned char){0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2});\n+  *u8++ = ((vector unsigned char){0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3});\n+  *u8++ = ((vector unsigned char){0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4});\n+  *u8++ = ((vector unsigned char){0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5});\n+  *u8++ = ((vector unsigned char){0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6});\n+  *u8++ = ((vector unsigned char){0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7});\n+  *u8++ = ((vector unsigned char){0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8});\n+  *u8++ = ((vector unsigned char){0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9});\n+  *u8++ = ((vector unsigned char){0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa});\n+  *u8++ = ((vector unsigned char){0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb});\n+  *u8++ = ((vector unsigned char){0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc});\n+  *u8++ = ((vector unsigned char){0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd});\n+  *u8++ = ((vector unsigned char){0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fu8d(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *u8++ = ((vector unsigned char){0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01});\n+  *u8++ = ((vector unsigned char){0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02});\n+  *u8++ = ((vector unsigned char){0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03});\n+  *u8++ = ((vector unsigned char){0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04});\n+  *u8++ = ((vector unsigned char){0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05});\n+  *u8++ = ((vector unsigned char){0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06});\n+  *u8++ = ((vector unsigned char){0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07});\n+  *u8++ = ((vector unsigned char){0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08});\n+  *u8++ = ((vector unsigned char){0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09});\n+  *u8++ = ((vector unsigned char){0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a});\n+  *u8++ = ((vector unsigned char){0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b});\n+  *u8++ = ((vector unsigned char){0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c});\n+  *u8++ = ((vector unsigned char){0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d});\n+  *u8++ = ((vector unsigned char){0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e});\n+  *u8++ = ((vector unsigned char){0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f});\n+}\n+void fu8e(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *u8++ = ((vector unsigned char){0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01});\n+  *u8++ = ((vector unsigned char){0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02});\n+  *u8++ = ((vector unsigned char){0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03});\n+  *u8++ = ((vector unsigned char){0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04});\n+  *u8++ = ((vector unsigned char){0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05});\n+  *u8++ = ((vector unsigned char){0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06});\n+  *u8++ = ((vector unsigned char){0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07});\n+  *u8++ = ((vector unsigned char){0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08});\n+  *u8++ = ((vector unsigned char){0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09});\n+  *u8++ = ((vector unsigned char){0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a});\n+  *u8++ = ((vector unsigned char){0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b});\n+  *u8++ = ((vector unsigned char){0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c});\n+  *u8++ = ((vector unsigned char){0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d});\n+  *u8++ = ((vector unsigned char){0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e});\n+  *u8++ = ((vector unsigned char){0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f});\n+}\n+void fu8f(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0});\n+  *u8++ = ((vector unsigned char){0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1});\n+  *u8++ = ((vector unsigned char){0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2});\n+  *u8++ = ((vector unsigned char){0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3});\n+  *u8++ = ((vector unsigned char){0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4});\n+  *u8++ = ((vector unsigned char){0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5});\n+  *u8++ = ((vector unsigned char){0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6});\n+  *u8++ = ((vector unsigned char){0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7});\n+  *u8++ = ((vector unsigned char){0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8});\n+  *u8++ = ((vector unsigned char){0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9});\n+  *u8++ = ((vector unsigned char){0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa});\n+  *u8++ = ((vector unsigned char){0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb});\n+  *u8++ = ((vector unsigned char){0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc});\n+  *u8++ = ((vector unsigned char){0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd});\n+  *u8++ = ((vector unsigned char){0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe});\n+  *u8++ = ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fu8g(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});\n+  *u8++ = ((vector unsigned char){1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});\n+  *u8++ = ((vector unsigned char){2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2});\n+  *u8++ = ((vector unsigned char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});\n+  *u8++ = ((vector unsigned char){4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4});\n+  *u8++ = ((vector unsigned char){5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5});\n+  *u8++ = ((vector unsigned char){6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6});\n+  *u8++ = ((vector unsigned char){7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7});\n+  *u8++ = ((vector unsigned char){8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8});\n+  *u8++ = ((vector unsigned char){9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9});\n+  *u8++ = ((vector unsigned char){10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10});\n+  *u8++ = ((vector unsigned char){11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11});\n+  *u8++ = ((vector unsigned char){12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});\n+  *u8++ = ((vector unsigned char){13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13});\n+  *u8++ = ((vector unsigned char){14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14});\n+  *u8++ = ((vector unsigned char){15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15});\n+}\n+void fu8h(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240});\n+  *u8++ = ((vector unsigned char){241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241});\n+  *u8++ = ((vector unsigned char){242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242});\n+  *u8++ = ((vector unsigned char){243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243});\n+  *u8++ = ((vector unsigned char){244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244});\n+  *u8++ = ((vector unsigned char){245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245});\n+  *u8++ = ((vector unsigned char){246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246});\n+  *u8++ = ((vector unsigned char){247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247});\n+  *u8++ = ((vector unsigned char){248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248});\n+  *u8++ = ((vector unsigned char){249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249});\n+  *u8++ = ((vector unsigned char){250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250});\n+  *u8++ = ((vector unsigned char){251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251});\n+  *u8++ = ((vector unsigned char){252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252});\n+  *u8++ = ((vector unsigned char){253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253});\n+  *u8++ = ((vector unsigned char){254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254});\n+  *u8++ = ((vector unsigned char){255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255});\n+}\n+void fu8i(vector unsigned char *u8) \n+{\n+  *u8++ = ((vector unsigned char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1});\n+  *u8++ = ((vector unsigned char){-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2});\n+  *u8++ = ((vector unsigned char){-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3});\n+  *u8++ = ((vector unsigned char){-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4});\n+  *u8++ = ((vector unsigned char){-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5});\n+  *u8++ = ((vector unsigned char){-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6});\n+  *u8++ = ((vector unsigned char){-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7});\n+  *u8++ = ((vector unsigned char){-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8});\n+  *u8++ = ((vector unsigned char){-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9});\n+  *u8++ = ((vector unsigned char){-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10});\n+  *u8++ = ((vector unsigned char){-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11});\n+  *u8++ = ((vector unsigned char){-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12});\n+  *u8++ = ((vector unsigned char){-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13});\n+  *u8++ = ((vector unsigned char){-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14});\n+  *u8++ = ((vector unsigned char){-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15});\n+  *u8++ = ((vector unsigned char){-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16});\n+}\n+void fs32a(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0,0,0,0});\n+  *s32++ = ((vector signed int){1,1,1,1});\n+  *s32++ = ((vector signed int){2,2,2,2});\n+  *s32++ = ((vector signed int){3,3,3,3});\n+  *s32++ = ((vector signed int){4,4,4,4});\n+  *s32++ = ((vector signed int){5,5,5,5});\n+  *s32++ = ((vector signed int){6,6,6,6});\n+  *s32++ = ((vector signed int){7,7,7,7});\n+  *s32++ = ((vector signed int){8,8,8,8});\n+  *s32++ = ((vector signed int){9,9,9,9});\n+  *s32++ = ((vector signed int){10,10,10,10});\n+  *s32++ = ((vector signed int){11,11,11,11});\n+  *s32++ = ((vector signed int){12,12,12,12});\n+  *s32++ = ((vector signed int){13,13,13,13});\n+  *s32++ = ((vector signed int){14,14,14,14});\n+  *s32++ = ((vector signed int){15,15,15,15});\n+}\n+void fs32b(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){65537,65537,65537,65537});\n+  *s32++ = ((vector signed int){131074,131074,131074,131074});\n+  *s32++ = ((vector signed int){196611,196611,196611,196611});\n+  *s32++ = ((vector signed int){262148,262148,262148,262148});\n+  *s32++ = ((vector signed int){327685,327685,327685,327685});\n+  *s32++ = ((vector signed int){393222,393222,393222,393222});\n+  *s32++ = ((vector signed int){458759,458759,458759,458759});\n+  *s32++ = ((vector signed int){524296,524296,524296,524296});\n+  *s32++ = ((vector signed int){589833,589833,589833,589833});\n+  *s32++ = ((vector signed int){655370,655370,655370,655370});\n+  *s32++ = ((vector signed int){720907,720907,720907,720907});\n+  *s32++ = ((vector signed int){786444,786444,786444,786444});\n+  *s32++ = ((vector signed int){851981,851981,851981,851981});\n+  *s32++ = ((vector signed int){917518,917518,917518,917518});\n+  *s32++ = ((vector signed int){983055,983055,983055,983055});\n+}\n+void fs32c(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){16843009,16843009,16843009,16843009});\n+  *s32++ = ((vector signed int){33686018,33686018,33686018,33686018});\n+  *s32++ = ((vector signed int){50529027,50529027,50529027,50529027});\n+  *s32++ = ((vector signed int){67372036,67372036,67372036,67372036});\n+  *s32++ = ((vector signed int){84215045,84215045,84215045,84215045});\n+  *s32++ = ((vector signed int){101058054,101058054,101058054,101058054});\n+  *s32++ = ((vector signed int){117901063,117901063,117901063,117901063});\n+  *s32++ = ((vector signed int){134744072,134744072,134744072,134744072});\n+  *s32++ = ((vector signed int){151587081,151587081,151587081,151587081});\n+  *s32++ = ((vector signed int){168430090,168430090,168430090,168430090});\n+  *s32++ = ((vector signed int){185273099,185273099,185273099,185273099});\n+  *s32++ = ((vector signed int){202116108,202116108,202116108,202116108});\n+  *s32++ = ((vector signed int){218959117,218959117,218959117,218959117});\n+  *s32++ = ((vector signed int){235802126,235802126,235802126,235802126});\n+  *s32++ = ((vector signed int){252645135,252645135,252645135,252645135});\n+}\n+void fs32d(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){4042322160,4042322160,4042322160,4042322160});\n+  *s32++ = ((vector signed int){4059165169,4059165169,4059165169,4059165169});\n+  *s32++ = ((vector signed int){4076008178,4076008178,4076008178,4076008178});\n+  *s32++ = ((vector signed int){4092851187,4092851187,4092851187,4092851187});\n+  *s32++ = ((vector signed int){4109694196,4109694196,4109694196,4109694196});\n+  *s32++ = ((vector signed int){4126537205,4126537205,4126537205,4126537205});\n+  *s32++ = ((vector signed int){4143380214,4143380214,4143380214,4143380214});\n+  *s32++ = ((vector signed int){4160223223,4160223223,4160223223,4160223223});\n+  *s32++ = ((vector signed int){4177066232,4177066232,4177066232,4177066232});\n+  *s32++ = ((vector signed int){4193909241,4193909241,4193909241,4193909241});\n+  *s32++ = ((vector signed int){4210752250,4210752250,4210752250,4210752250});\n+  *s32++ = ((vector signed int){4227595259,4227595259,4227595259,4227595259});\n+  *s32++ = ((vector signed int){4244438268,4244438268,4244438268,4244438268});\n+  *s32++ = ((vector signed int){4261281277,4261281277,4261281277,4261281277});\n+  *s32++ = ((vector signed int){4278124286,4278124286,4278124286,4278124286});\n+}\n+void fs32e(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){4293984240,4293984240,4293984240,4293984240});\n+  *s32++ = ((vector signed int){4294049777,4294049777,4294049777,4294049777});\n+  *s32++ = ((vector signed int){4294115314,4294115314,4294115314,4294115314});\n+  *s32++ = ((vector signed int){4294180851,4294180851,4294180851,4294180851});\n+  *s32++ = ((vector signed int){4294246388,4294246388,4294246388,4294246388});\n+  *s32++ = ((vector signed int){4294311925,4294311925,4294311925,4294311925});\n+  *s32++ = ((vector signed int){4294377462,4294377462,4294377462,4294377462});\n+  *s32++ = ((vector signed int){4294442999,4294442999,4294442999,4294442999});\n+  *s32++ = ((vector signed int){4294508536,4294508536,4294508536,4294508536});\n+  *s32++ = ((vector signed int){4294574073,4294574073,4294574073,4294574073});\n+  *s32++ = ((vector signed int){4294639610,4294639610,4294639610,4294639610});\n+  *s32++ = ((vector signed int){4294705147,4294705147,4294705147,4294705147});\n+  *s32++ = ((vector signed int){4294770684,4294770684,4294770684,4294770684});\n+  *s32++ = ((vector signed int){4294836221,4294836221,4294836221,4294836221});\n+  *s32++ = ((vector signed int){4294901758,4294901758,4294901758,4294901758});\n+}\n+void fs32f(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){4294967280,4294967280,4294967280,4294967280});\n+  *s32++ = ((vector signed int){4294967281,4294967281,4294967281,4294967281});\n+  *s32++ = ((vector signed int){4294967282,4294967282,4294967282,4294967282});\n+  *s32++ = ((vector signed int){4294967283,4294967283,4294967283,4294967283});\n+  *s32++ = ((vector signed int){4294967284,4294967284,4294967284,4294967284});\n+  *s32++ = ((vector signed int){4294967285,4294967285,4294967285,4294967285});\n+  *s32++ = ((vector signed int){4294967286,4294967286,4294967286,4294967286});\n+  *s32++ = ((vector signed int){4294967287,4294967287,4294967287,4294967287});\n+  *s32++ = ((vector signed int){4294967288,4294967288,4294967288,4294967288});\n+  *s32++ = ((vector signed int){4294967289,4294967289,4294967289,4294967289});\n+  *s32++ = ((vector signed int){4294967290,4294967290,4294967290,4294967290});\n+  *s32++ = ((vector signed int){4294967291,4294967291,4294967291,4294967291});\n+  *s32++ = ((vector signed int){4294967292,4294967292,4294967292,4294967292});\n+  *s32++ = ((vector signed int){4294967293,4294967293,4294967293,4294967293});\n+  *s32++ = ((vector signed int){4294967294,4294967294,4294967294,4294967294});\n+  *s32++ = ((vector signed int){4294967295,4294967295,4294967295,4294967295});\n+}\n+void fs32g(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){-252645136,-252645136,-252645136,-252645136});\n+  *s32++ = ((vector signed int){-235802127,-235802127,-235802127,-235802127});\n+  *s32++ = ((vector signed int){-218959118,-218959118,-218959118,-218959118});\n+  *s32++ = ((vector signed int){-202116109,-202116109,-202116109,-202116109});\n+  *s32++ = ((vector signed int){-185273100,-185273100,-185273100,-185273100});\n+  *s32++ = ((vector signed int){-168430091,-168430091,-168430091,-168430091});\n+  *s32++ = ((vector signed int){-151587082,-151587082,-151587082,-151587082});\n+  *s32++ = ((vector signed int){-134744073,-134744073,-134744073,-134744073});\n+  *s32++ = ((vector signed int){-117901064,-117901064,-117901064,-117901064});\n+  *s32++ = ((vector signed int){-101058055,-101058055,-101058055,-101058055});\n+  *s32++ = ((vector signed int){-84215046,-84215046,-84215046,-84215046});\n+  *s32++ = ((vector signed int){-67372037,-67372037,-67372037,-67372037});\n+  *s32++ = ((vector signed int){-50529028,-50529028,-50529028,-50529028});\n+  *s32++ = ((vector signed int){-33686019,-33686019,-33686019,-33686019});\n+  *s32++ = ((vector signed int){-16843010,-16843010,-16843010,-16843010});\n+}\n+void fs32h(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){-983056,-983056,-983056,-983056});\n+  *s32++ = ((vector signed int){-917519,-917519,-917519,-917519});\n+  *s32++ = ((vector signed int){-851982,-851982,-851982,-851982});\n+  *s32++ = ((vector signed int){-786445,-786445,-786445,-786445});\n+  *s32++ = ((vector signed int){-720908,-720908,-720908,-720908});\n+  *s32++ = ((vector signed int){-655371,-655371,-655371,-655371});\n+  *s32++ = ((vector signed int){-589834,-589834,-589834,-589834});\n+  *s32++ = ((vector signed int){-524297,-524297,-524297,-524297});\n+  *s32++ = ((vector signed int){-458760,-458760,-458760,-458760});\n+  *s32++ = ((vector signed int){-393223,-393223,-393223,-393223});\n+  *s32++ = ((vector signed int){-327686,-327686,-327686,-327686});\n+  *s32++ = ((vector signed int){-262149,-262149,-262149,-262149});\n+  *s32++ = ((vector signed int){-196612,-196612,-196612,-196612});\n+  *s32++ = ((vector signed int){-131075,-131075,-131075,-131075});\n+  *s32++ = ((vector signed int){-65538,-65538,-65538,-65538});\n+}\n+void fs32i(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){-16,-16,-16,-16});\n+  *s32++ = ((vector signed int){-15,-15,-15,-15});\n+  *s32++ = ((vector signed int){-14,-14,-14,-14});\n+  *s32++ = ((vector signed int){-13,-13,-13,-13});\n+  *s32++ = ((vector signed int){-12,-12,-12,-12});\n+  *s32++ = ((vector signed int){-11,-11,-11,-11});\n+  *s32++ = ((vector signed int){-10,-10,-10,-10});\n+  *s32++ = ((vector signed int){-9,-9,-9,-9});\n+  *s32++ = ((vector signed int){-8,-8,-8,-8});\n+  *s32++ = ((vector signed int){-7,-7,-7,-7});\n+  *s32++ = ((vector signed int){-6,-6,-6,-6});\n+  *s32++ = ((vector signed int){-5,-5,-5,-5});\n+  *s32++ = ((vector signed int){-4,-4,-4,-4});\n+  *s32++ = ((vector signed int){-3,-3,-3,-3});\n+  *s32++ = ((vector signed int){-2,-2,-2,-2});\n+  *s32++ = ((vector signed int){-1,-1,-1,-1});\n+}\n+void fs32j(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0xfffffff0,0xfffffff0,0xfffffff0,0xfffffff0});\n+  *s32++ = ((vector signed int){0xfffffff1,0xfffffff1,0xfffffff1,0xfffffff1});\n+  *s32++ = ((vector signed int){0xfffffff2,0xfffffff2,0xfffffff2,0xfffffff2});\n+  *s32++ = ((vector signed int){0xfffffff3,0xfffffff3,0xfffffff3,0xfffffff3});\n+  *s32++ = ((vector signed int){0xfffffff4,0xfffffff4,0xfffffff4,0xfffffff4});\n+  *s32++ = ((vector signed int){0xfffffff5,0xfffffff5,0xfffffff5,0xfffffff5});\n+  *s32++ = ((vector signed int){0xfffffff6,0xfffffff6,0xfffffff6,0xfffffff6});\n+  *s32++ = ((vector signed int){0xfffffff7,0xfffffff7,0xfffffff7,0xfffffff7});\n+  *s32++ = ((vector signed int){0xfffffff8,0xfffffff8,0xfffffff8,0xfffffff8});\n+  *s32++ = ((vector signed int){0xfffffff9,0xfffffff9,0xfffffff9,0xfffffff9});\n+  *s32++ = ((vector signed int){0xfffffffa,0xfffffffa,0xfffffffa,0xfffffffa});\n+  *s32++ = ((vector signed int){0xfffffffb,0xfffffffb,0xfffffffb,0xfffffffb});\n+  *s32++ = ((vector signed int){0xfffffffc,0xfffffffc,0xfffffffc,0xfffffffc});\n+  *s32++ = ((vector signed int){0xfffffffd,0xfffffffd,0xfffffffd,0xfffffffd});\n+  *s32++ = ((vector signed int){0xfffffffe,0xfffffffe,0xfffffffe,0xfffffffe});\n+  *s32++ = ((vector signed int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fs32k(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *s32++ = ((vector signed int){0x00000001,0x00000001,0x00000001,0x00000001});\n+  *s32++ = ((vector signed int){0x00000002,0x00000002,0x00000002,0x00000002});\n+  *s32++ = ((vector signed int){0x00000003,0x00000003,0x00000003,0x00000003});\n+  *s32++ = ((vector signed int){0x00000004,0x00000004,0x00000004,0x00000004});\n+  *s32++ = ((vector signed int){0x00000005,0x00000005,0x00000005,0x00000005});\n+  *s32++ = ((vector signed int){0x00000006,0x00000006,0x00000006,0x00000006});\n+  *s32++ = ((vector signed int){0x00000007,0x00000007,0x00000007,0x00000007});\n+  *s32++ = ((vector signed int){0x00000008,0x00000008,0x00000008,0x00000008});\n+  *s32++ = ((vector signed int){0x00000009,0x00000009,0x00000009,0x00000009});\n+  *s32++ = ((vector signed int){0x0000000a,0x0000000a,0x0000000a,0x0000000a});\n+  *s32++ = ((vector signed int){0x0000000b,0x0000000b,0x0000000b,0x0000000b});\n+  *s32++ = ((vector signed int){0x0000000c,0x0000000c,0x0000000c,0x0000000c});\n+  *s32++ = ((vector signed int){0x0000000d,0x0000000d,0x0000000d,0x0000000d});\n+  *s32++ = ((vector signed int){0x0000000e,0x0000000e,0x0000000e,0x0000000e});\n+  *s32++ = ((vector signed int){0x0000000f,0x0000000f,0x0000000f,0x0000000f});\n+}\n+void fs32l(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0xfff0fff0,0xfff0fff0,0xfff0fff0,0xfff0fff0});\n+  *s32++ = ((vector signed int){0xfff1fff1,0xfff1fff1,0xfff1fff1,0xfff1fff1});\n+  *s32++ = ((vector signed int){0xfff2fff2,0xfff2fff2,0xfff2fff2,0xfff2fff2});\n+  *s32++ = ((vector signed int){0xfff3fff3,0xfff3fff3,0xfff3fff3,0xfff3fff3});\n+  *s32++ = ((vector signed int){0xfff4fff4,0xfff4fff4,0xfff4fff4,0xfff4fff4});\n+  *s32++ = ((vector signed int){0xfff5fff5,0xfff5fff5,0xfff5fff5,0xfff5fff5});\n+  *s32++ = ((vector signed int){0xfff6fff6,0xfff6fff6,0xfff6fff6,0xfff6fff6});\n+  *s32++ = ((vector signed int){0xfff7fff7,0xfff7fff7,0xfff7fff7,0xfff7fff7});\n+  *s32++ = ((vector signed int){0xfff8fff8,0xfff8fff8,0xfff8fff8,0xfff8fff8});\n+  *s32++ = ((vector signed int){0xfff9fff9,0xfff9fff9,0xfff9fff9,0xfff9fff9});\n+  *s32++ = ((vector signed int){0xfffafffa,0xfffafffa,0xfffafffa,0xfffafffa});\n+  *s32++ = ((vector signed int){0xfffbfffb,0xfffbfffb,0xfffbfffb,0xfffbfffb});\n+  *s32++ = ((vector signed int){0xfffcfffc,0xfffcfffc,0xfffcfffc,0xfffcfffc});\n+  *s32++ = ((vector signed int){0xfffdfffd,0xfffdfffd,0xfffdfffd,0xfffdfffd});\n+  *s32++ = ((vector signed int){0xfffefffe,0xfffefffe,0xfffefffe,0xfffefffe});\n+  *s32++ = ((vector signed int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fs32m(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *s32++ = ((vector signed int){0x00010001,0x00010001,0x00010001,0x00010001});\n+  *s32++ = ((vector signed int){0x00020002,0x00020002,0x00020002,0x00020002});\n+  *s32++ = ((vector signed int){0x00030003,0x00030003,0x00030003,0x00030003});\n+  *s32++ = ((vector signed int){0x00040004,0x00040004,0x00040004,0x00040004});\n+  *s32++ = ((vector signed int){0x00050005,0x00050005,0x00050005,0x00050005});\n+  *s32++ = ((vector signed int){0x00060006,0x00060006,0x00060006,0x00060006});\n+  *s32++ = ((vector signed int){0x00070007,0x00070007,0x00070007,0x00070007});\n+  *s32++ = ((vector signed int){0x00080008,0x00080008,0x00080008,0x00080008});\n+  *s32++ = ((vector signed int){0x00090009,0x00090009,0x00090009,0x00090009});\n+  *s32++ = ((vector signed int){0x000a000a,0x000a000a,0x000a000a,0x000a000a});\n+  *s32++ = ((vector signed int){0x000b000b,0x000b000b,0x000b000b,0x000b000b});\n+  *s32++ = ((vector signed int){0x000c000c,0x000c000c,0x000c000c,0x000c000c});\n+  *s32++ = ((vector signed int){0x000d000d,0x000d000d,0x000d000d,0x000d000d});\n+  *s32++ = ((vector signed int){0x000e000e,0x000e000e,0x000e000e,0x000e000e});\n+  *s32++ = ((vector signed int){0x000f000f,0x000f000f,0x000f000f,0x000f000f});\n+}\n+void fs32n(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0xf0f0f0f0,0xf0f0f0f0,0xf0f0f0f0,0xf0f0f0f0});\n+  *s32++ = ((vector signed int){0xf1f1f1f1,0xf1f1f1f1,0xf1f1f1f1,0xf1f1f1f1});\n+  *s32++ = ((vector signed int){0xf2f2f2f2,0xf2f2f2f2,0xf2f2f2f2,0xf2f2f2f2});\n+  *s32++ = ((vector signed int){0xf3f3f3f3,0xf3f3f3f3,0xf3f3f3f3,0xf3f3f3f3});\n+  *s32++ = ((vector signed int){0xf4f4f4f4,0xf4f4f4f4,0xf4f4f4f4,0xf4f4f4f4});\n+  *s32++ = ((vector signed int){0xf5f5f5f5,0xf5f5f5f5,0xf5f5f5f5,0xf5f5f5f5});\n+  *s32++ = ((vector signed int){0xf6f6f6f6,0xf6f6f6f6,0xf6f6f6f6,0xf6f6f6f6});\n+  *s32++ = ((vector signed int){0xf7f7f7f7,0xf7f7f7f7,0xf7f7f7f7,0xf7f7f7f7});\n+  *s32++ = ((vector signed int){0xf8f8f8f8,0xf8f8f8f8,0xf8f8f8f8,0xf8f8f8f8});\n+  *s32++ = ((vector signed int){0xf9f9f9f9,0xf9f9f9f9,0xf9f9f9f9,0xf9f9f9f9});\n+  *s32++ = ((vector signed int){0xfafafafa,0xfafafafa,0xfafafafa,0xfafafafa});\n+  *s32++ = ((vector signed int){0xfbfbfbfb,0xfbfbfbfb,0xfbfbfbfb,0xfbfbfbfb});\n+  *s32++ = ((vector signed int){0xfcfcfcfc,0xfcfcfcfc,0xfcfcfcfc,0xfcfcfcfc});\n+  *s32++ = ((vector signed int){0xfdfdfdfd,0xfdfdfdfd,0xfdfdfdfd,0xfdfdfdfd});\n+  *s32++ = ((vector signed int){0xfefefefe,0xfefefefe,0xfefefefe,0xfefefefe});\n+  *s32++ = ((vector signed int){0xffffffff,0xffffffff,0xffffffff,0xffffffff});\n+}\n+void fs32o(vector signed int *s32) \n+{\n+  *s32++ = ((vector signed int){0x00000000,0x00000000,0x00000000,0x00000000});\n+  *s32++ = ((vector signed int){0x01010101,0x01010101,0x01010101,0x01010101});\n+  *s32++ = ((vector signed int){0x02020202,0x02020202,0x02020202,0x02020202});\n+  *s32++ = ((vector signed int){0x03030303,0x03030303,0x03030303,0x03030303});\n+  *s32++ = ((vector signed int){0x04040404,0x04040404,0x04040404,0x04040404});\n+  *s32++ = ((vector signed int){0x05050505,0x05050505,0x05050505,0x05050505});\n+  *s32++ = ((vector signed int){0x06060606,0x06060606,0x06060606,0x06060606});\n+  *s32++ = ((vector signed int){0x07070707,0x07070707,0x07070707,0x07070707});\n+  *s32++ = ((vector signed int){0x08080808,0x08080808,0x08080808,0x08080808});\n+  *s32++ = ((vector signed int){0x09090909,0x09090909,0x09090909,0x09090909});\n+  *s32++ = ((vector signed int){0x0a0a0a0a,0x0a0a0a0a,0x0a0a0a0a,0x0a0a0a0a});\n+  *s32++ = ((vector signed int){0x0b0b0b0b,0x0b0b0b0b,0x0b0b0b0b,0x0b0b0b0b});\n+  *s32++ = ((vector signed int){0x0c0c0c0c,0x0c0c0c0c,0x0c0c0c0c,0x0c0c0c0c});\n+  *s32++ = ((vector signed int){0x0d0d0d0d,0x0d0d0d0d,0x0d0d0d0d,0x0d0d0d0d});\n+  *s32++ = ((vector signed int){0x0e0e0e0e,0x0e0e0e0e,0x0e0e0e0e,0x0e0e0e0e});\n+  *s32++ = ((vector signed int){0x0f0f0f0f,0x0f0f0f0f,0x0f0f0f0f,0x0f0f0f0f});\n+}\n+void fs16a(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0xffff,0xfff0,0xffff,0xfff0,0xffff,0xfff0,0xffff,0xfff0});\n+  *s16++ = ((vector signed short){0xffff,0xfff1,0xffff,0xfff1,0xffff,0xfff1,0xffff,0xfff1});\n+  *s16++ = ((vector signed short){0xffff,0xfff2,0xffff,0xfff2,0xffff,0xfff2,0xffff,0xfff2});\n+  *s16++ = ((vector signed short){0xffff,0xfff3,0xffff,0xfff3,0xffff,0xfff3,0xffff,0xfff3});\n+  *s16++ = ((vector signed short){0xffff,0xfff4,0xffff,0xfff4,0xffff,0xfff4,0xffff,0xfff4});\n+  *s16++ = ((vector signed short){0xffff,0xfff5,0xffff,0xfff5,0xffff,0xfff5,0xffff,0xfff5});\n+  *s16++ = ((vector signed short){0xffff,0xfff6,0xffff,0xfff6,0xffff,0xfff6,0xffff,0xfff6});\n+  *s16++ = ((vector signed short){0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7,0xffff,0xfff7});\n+  *s16++ = ((vector signed short){0xffff,0xfff8,0xffff,0xfff8,0xffff,0xfff8,0xffff,0xfff8});\n+  *s16++ = ((vector signed short){0xffff,0xfff9,0xffff,0xfff9,0xffff,0xfff9,0xffff,0xfff9});\n+  *s16++ = ((vector signed short){0xffff,0xfffa,0xffff,0xfffa,0xffff,0xfffa,0xffff,0xfffa});\n+  *s16++ = ((vector signed short){0xffff,0xfffb,0xffff,0xfffb,0xffff,0xfffb,0xffff,0xfffb});\n+  *s16++ = ((vector signed short){0xffff,0xfffc,0xffff,0xfffc,0xffff,0xfffc,0xffff,0xfffc});\n+  *s16++ = ((vector signed short){0xffff,0xfffd,0xffff,0xfffd,0xffff,0xfffd,0xffff,0xfffd});\n+  *s16++ = ((vector signed short){0xffff,0xfffe,0xffff,0xfffe,0xffff,0xfffe,0xffff,0xfffe});\n+  *s16++ = ((vector signed short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fs16b(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *s16++ = ((vector signed short){0x0000,0x0001,0x0000,0x0001,0x0000,0x0001,0x0000,0x0001});\n+  *s16++ = ((vector signed short){0x0000,0x0002,0x0000,0x0002,0x0000,0x0002,0x0000,0x0002});\n+  *s16++ = ((vector signed short){0x0000,0x0003,0x0000,0x0003,0x0000,0x0003,0x0000,0x0003});\n+  *s16++ = ((vector signed short){0x0000,0x0004,0x0000,0x0004,0x0000,0x0004,0x0000,0x0004});\n+  *s16++ = ((vector signed short){0x0000,0x0005,0x0000,0x0005,0x0000,0x0005,0x0000,0x0005});\n+  *s16++ = ((vector signed short){0x0000,0x0006,0x0000,0x0006,0x0000,0x0006,0x0000,0x0006});\n+  *s16++ = ((vector signed short){0x0000,0x0007,0x0000,0x0007,0x0000,0x0007,0x0000,0x0007});\n+  *s16++ = ((vector signed short){0x0000,0x0008,0x0000,0x0008,0x0000,0x0008,0x0000,0x0008});\n+  *s16++ = ((vector signed short){0x0000,0x0009,0x0000,0x0009,0x0000,0x0009,0x0000,0x0009});\n+  *s16++ = ((vector signed short){0x0000,0x000a,0x0000,0x000a,0x0000,0x000a,0x0000,0x000a});\n+  *s16++ = ((vector signed short){0x0000,0x000b,0x0000,0x000b,0x0000,0x000b,0x0000,0x000b});\n+  *s16++ = ((vector signed short){0x0000,0x000c,0x0000,0x000c,0x0000,0x000c,0x0000,0x000c});\n+  *s16++ = ((vector signed short){0x0000,0x000d,0x0000,0x000d,0x0000,0x000d,0x0000,0x000d});\n+  *s16++ = ((vector signed short){0x0000,0x000e,0x0000,0x000e,0x0000,0x000e,0x0000,0x000e});\n+  *s16++ = ((vector signed short){0x0000,0x000f,0x0000,0x000f,0x0000,0x000f,0x0000,0x000f});\n+}\n+void fs16c(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0,0xfff0});\n+  *s16++ = ((vector signed short){0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1,0xfff1});\n+  *s16++ = ((vector signed short){0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2,0xfff2});\n+  *s16++ = ((vector signed short){0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3,0xfff3});\n+  *s16++ = ((vector signed short){0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4,0xfff4});\n+  *s16++ = ((vector signed short){0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5,0xfff5});\n+  *s16++ = ((vector signed short){0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6,0xfff6});\n+  *s16++ = ((vector signed short){0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7,0xfff7});\n+  *s16++ = ((vector signed short){0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8,0xfff8});\n+  *s16++ = ((vector signed short){0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9,0xfff9});\n+  *s16++ = ((vector signed short){0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa,0xfffa});\n+  *s16++ = ((vector signed short){0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb,0xfffb});\n+  *s16++ = ((vector signed short){0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc,0xfffc});\n+  *s16++ = ((vector signed short){0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd,0xfffd});\n+  *s16++ = ((vector signed short){0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe,0xfffe});\n+  *s16++ = ((vector signed short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fs16d(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *s16++ = ((vector signed short){0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001});\n+  *s16++ = ((vector signed short){0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002});\n+  *s16++ = ((vector signed short){0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003});\n+  *s16++ = ((vector signed short){0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004});\n+  *s16++ = ((vector signed short){0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005});\n+  *s16++ = ((vector signed short){0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006});\n+  *s16++ = ((vector signed short){0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007,0x0007});\n+  *s16++ = ((vector signed short){0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008,0x0008});\n+  *s16++ = ((vector signed short){0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009,0x0009});\n+  *s16++ = ((vector signed short){0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a,0x000a});\n+  *s16++ = ((vector signed short){0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b,0x000b});\n+  *s16++ = ((vector signed short){0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c,0x000c});\n+  *s16++ = ((vector signed short){0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d,0x000d});\n+  *s16++ = ((vector signed short){0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e,0x000e});\n+  *s16++ = ((vector signed short){0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f,0x000f});\n+}\n+void fs16e(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0,0xf0f0});\n+  *s16++ = ((vector signed short){0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1,0xf1f1});\n+  *s16++ = ((vector signed short){0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2,0xf2f2});\n+  *s16++ = ((vector signed short){0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3,0xf3f3});\n+  *s16++ = ((vector signed short){0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4,0xf4f4});\n+  *s16++ = ((vector signed short){0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5,0xf5f5});\n+  *s16++ = ((vector signed short){0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6,0xf6f6});\n+  *s16++ = ((vector signed short){0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7,0xf7f7});\n+  *s16++ = ((vector signed short){0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8,0xf8f8});\n+  *s16++ = ((vector signed short){0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9,0xf9f9});\n+  *s16++ = ((vector signed short){0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa,0xfafa});\n+  *s16++ = ((vector signed short){0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb,0xfbfb});\n+  *s16++ = ((vector signed short){0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc,0xfcfc});\n+  *s16++ = ((vector signed short){0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd,0xfdfd});\n+  *s16++ = ((vector signed short){0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe,0xfefe});\n+  *s16++ = ((vector signed short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff});\n+}\n+void fs16f(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000});\n+  *s16++ = ((vector signed short){0x0101,0x0101,0x0101,0x0101,0x0101,0x0101,0x0101,0x0101});\n+  *s16++ = ((vector signed short){0x0202,0x0202,0x0202,0x0202,0x0202,0x0202,0x0202,0x0202});\n+  *s16++ = ((vector signed short){0x0303,0x0303,0x0303,0x0303,0x0303,0x0303,0x0303,0x0303});\n+  *s16++ = ((vector signed short){0x0404,0x0404,0x0404,0x0404,0x0404,0x0404,0x0404,0x0404});\n+  *s16++ = ((vector signed short){0x0505,0x0505,0x0505,0x0505,0x0505,0x0505,0x0505,0x0505});\n+  *s16++ = ((vector signed short){0x0606,0x0606,0x0606,0x0606,0x0606,0x0606,0x0606,0x0606});\n+  *s16++ = ((vector signed short){0x0707,0x0707,0x0707,0x0707,0x0707,0x0707,0x0707,0x0707});\n+  *s16++ = ((vector signed short){0x0808,0x0808,0x0808,0x0808,0x0808,0x0808,0x0808,0x0808});\n+  *s16++ = ((vector signed short){0x0909,0x0909,0x0909,0x0909,0x0909,0x0909,0x0909,0x0909});\n+  *s16++ = ((vector signed short){0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a,0x0a0a});\n+  *s16++ = ((vector signed short){0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b,0x0b0b});\n+  *s16++ = ((vector signed short){0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c,0x0c0c});\n+  *s16++ = ((vector signed short){0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d,0x0d0d});\n+  *s16++ = ((vector signed short){0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e,0x0e0e});\n+  *s16++ = ((vector signed short){0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f,0x0f0f});\n+}\n+void fs16g(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){0,0,0,0,0,0,0,0});\n+  *s16++ = ((vector signed short){1,1,1,1,1,1,1,1});\n+  *s16++ = ((vector signed short){2,2,2,2,2,2,2,2});\n+  *s16++ = ((vector signed short){3,3,3,3,3,3,3,3});\n+  *s16++ = ((vector signed short){4,4,4,4,4,4,4,4});\n+  *s16++ = ((vector signed short){5,5,5,5,5,5,5,5});\n+  *s16++ = ((vector signed short){6,6,6,6,6,6,6,6});\n+  *s16++ = ((vector signed short){7,7,7,7,7,7,7,7});\n+  *s16++ = ((vector signed short){8,8,8,8,8,8,8,8});\n+  *s16++ = ((vector signed short){9,9,9,9,9,9,9,9});\n+  *s16++ = ((vector signed short){10,10,10,10,10,10,10,10});\n+  *s16++ = ((vector signed short){11,11,11,11,11,11,11,11});\n+  *s16++ = ((vector signed short){12,12,12,12,12,12,12,12});\n+  *s16++ = ((vector signed short){13,13,13,13,13,13,13,13});\n+  *s16++ = ((vector signed short){14,14,14,14,14,14,14,14});\n+  *s16++ = ((vector signed short){15,15,15,15,15,15,15,15});\n+}\n+void fs16h(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){257,257,257,257,257,257,257,257});\n+  *s16++ = ((vector signed short){514,514,514,514,514,514,514,514});\n+  *s16++ = ((vector signed short){771,771,771,771,771,771,771,771});\n+  *s16++ = ((vector signed short){1028,1028,1028,1028,1028,1028,1028,1028});\n+  *s16++ = ((vector signed short){1285,1285,1285,1285,1285,1285,1285,1285});\n+  *s16++ = ((vector signed short){1542,1542,1542,1542,1542,1542,1542,1542});\n+  *s16++ = ((vector signed short){1799,1799,1799,1799,1799,1799,1799,1799});\n+  *s16++ = ((vector signed short){2056,2056,2056,2056,2056,2056,2056,2056});\n+  *s16++ = ((vector signed short){2313,2313,2313,2313,2313,2313,2313,2313});\n+  *s16++ = ((vector signed short){2570,2570,2570,2570,2570,2570,2570,2570});\n+  *s16++ = ((vector signed short){2827,2827,2827,2827,2827,2827,2827,2827});\n+  *s16++ = ((vector signed short){3084,3084,3084,3084,3084,3084,3084,3084});\n+  *s16++ = ((vector signed short){3341,3341,3341,3341,3341,3341,3341,3341});\n+  *s16++ = ((vector signed short){3598,3598,3598,3598,3598,3598,3598,3598});\n+  *s16++ = ((vector signed short){3855,3855,3855,3855,3855,3855,3855,3855});\n+}\n+void fs16i(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){61680,61680,61680,61680,61680,61680,61680,61680});\n+  *s16++ = ((vector signed short){61937,61937,61937,61937,61937,61937,61937,61937});\n+  *s16++ = ((vector signed short){62194,62194,62194,62194,62194,62194,62194,62194});\n+  *s16++ = ((vector signed short){62451,62451,62451,62451,62451,62451,62451,62451});\n+  *s16++ = ((vector signed short){62708,62708,62708,62708,62708,62708,62708,62708});\n+  *s16++ = ((vector signed short){62965,62965,62965,62965,62965,62965,62965,62965});\n+  *s16++ = ((vector signed short){63222,63222,63222,63222,63222,63222,63222,63222});\n+  *s16++ = ((vector signed short){63479,63479,63479,63479,63479,63479,63479,63479});\n+  *s16++ = ((vector signed short){63736,63736,63736,63736,63736,63736,63736,63736});\n+  *s16++ = ((vector signed short){63993,63993,63993,63993,63993,63993,63993,63993});\n+  *s16++ = ((vector signed short){64250,64250,64250,64250,64250,64250,64250,64250});\n+  *s16++ = ((vector signed short){64507,64507,64507,64507,64507,64507,64507,64507});\n+  *s16++ = ((vector signed short){64764,64764,64764,64764,64764,64764,64764,64764});\n+  *s16++ = ((vector signed short){65021,65021,65021,65021,65021,65021,65021,65021});\n+  *s16++ = ((vector signed short){65278,65278,65278,65278,65278,65278,65278,65278});\n+}\n+void fs16j(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){65520,65520,65520,65520,65520,65520,65520,65520});\n+  *s16++ = ((vector signed short){65521,65521,65521,65521,65521,65521,65521,65521});\n+  *s16++ = ((vector signed short){65522,65522,65522,65522,65522,65522,65522,65522});\n+  *s16++ = ((vector signed short){65523,65523,65523,65523,65523,65523,65523,65523});\n+  *s16++ = ((vector signed short){65524,65524,65524,65524,65524,65524,65524,65524});\n+  *s16++ = ((vector signed short){65525,65525,65525,65525,65525,65525,65525,65525});\n+  *s16++ = ((vector signed short){65526,65526,65526,65526,65526,65526,65526,65526});\n+  *s16++ = ((vector signed short){65527,65527,65527,65527,65527,65527,65527,65527});\n+  *s16++ = ((vector signed short){65528,65528,65528,65528,65528,65528,65528,65528});\n+  *s16++ = ((vector signed short){65529,65529,65529,65529,65529,65529,65529,65529});\n+  *s16++ = ((vector signed short){65530,65530,65530,65530,65530,65530,65530,65530});\n+  *s16++ = ((vector signed short){65531,65531,65531,65531,65531,65531,65531,65531});\n+  *s16++ = ((vector signed short){65532,65532,65532,65532,65532,65532,65532,65532});\n+  *s16++ = ((vector signed short){65533,65533,65533,65533,65533,65533,65533,65533});\n+  *s16++ = ((vector signed short){65534,65534,65534,65534,65534,65534,65534,65534});\n+  *s16++ = ((vector signed short){65535,65535,65535,65535,65535,65535,65535,65535});\n+}\n+void fs16k(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){-3856,-3856,-3856,-3856,-3856,-3856,-3856,-3856});\n+  *s16++ = ((vector signed short){-3599,-3599,-3599,-3599,-3599,-3599,-3599,-3599});\n+  *s16++ = ((vector signed short){-3342,-3342,-3342,-3342,-3342,-3342,-3342,-3342});\n+  *s16++ = ((vector signed short){-3085,-3085,-3085,-3085,-3085,-3085,-3085,-3085});\n+  *s16++ = ((vector signed short){-2828,-2828,-2828,-2828,-2828,-2828,-2828,-2828});\n+  *s16++ = ((vector signed short){-2571,-2571,-2571,-2571,-2571,-2571,-2571,-2571});\n+  *s16++ = ((vector signed short){-2314,-2314,-2314,-2314,-2314,-2314,-2314,-2314});\n+  *s16++ = ((vector signed short){-2057,-2057,-2057,-2057,-2057,-2057,-2057,-2057});\n+  *s16++ = ((vector signed short){-1800,-1800,-1800,-1800,-1800,-1800,-1800,-1800});\n+  *s16++ = ((vector signed short){-1543,-1543,-1543,-1543,-1543,-1543,-1543,-1543});\n+  *s16++ = ((vector signed short){-1286,-1286,-1286,-1286,-1286,-1286,-1286,-1286});\n+  *s16++ = ((vector signed short){-1029,-1029,-1029,-1029,-1029,-1029,-1029,-1029});\n+  *s16++ = ((vector signed short){-772,-772,-772,-772,-772,-772,-772,-772});\n+  *s16++ = ((vector signed short){-515,-515,-515,-515,-515,-515,-515,-515});\n+  *s16++ = ((vector signed short){-258,-258,-258,-258,-258,-258,-258,-258});\n+}\n+void fs16l(vector signed short *s16) \n+{\n+  *s16++ = ((vector signed short){-16,-16,-16,-16,-16,-16,-16,-16});\n+  *s16++ = ((vector signed short){-15,-15,-15,-15,-15,-15,-15,-15});\n+  *s16++ = ((vector signed short){-14,-14,-14,-14,-14,-14,-14,-14});\n+  *s16++ = ((vector signed short){-13,-13,-13,-13,-13,-13,-13,-13});\n+  *s16++ = ((vector signed short){-12,-12,-12,-12,-12,-12,-12,-12});\n+  *s16++ = ((vector signed short){-11,-11,-11,-11,-11,-11,-11,-11});\n+  *s16++ = ((vector signed short){-10,-10,-10,-10,-10,-10,-10,-10});\n+  *s16++ = ((vector signed short){-9,-9,-9,-9,-9,-9,-9,-9});\n+  *s16++ = ((vector signed short){-8,-8,-8,-8,-8,-8,-8,-8});\n+  *s16++ = ((vector signed short){-7,-7,-7,-7,-7,-7,-7,-7});\n+  *s16++ = ((vector signed short){-6,-6,-6,-6,-6,-6,-6,-6});\n+  *s16++ = ((vector signed short){-5,-5,-5,-5,-5,-5,-5,-5});\n+  *s16++ = ((vector signed short){-4,-4,-4,-4,-4,-4,-4,-4});\n+  *s16++ = ((vector signed short){-3,-3,-3,-3,-3,-3,-3,-3});\n+  *s16++ = ((vector signed short){-2,-2,-2,-2,-2,-2,-2,-2});\n+  *s16++ = ((vector signed short){-1,-1,-1,-1,-1,-1,-1,-1});\n+}\n+void fs8a(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0,0xff,0xff,0xff,0xf0});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1,0xff,0xff,0xff,0xf1});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2,0xff,0xff,0xff,0xf2});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3,0xff,0xff,0xff,0xf3});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4,0xff,0xff,0xff,0xf4});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5,0xff,0xff,0xff,0xf5});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6,0xff,0xff,0xff,0xf6});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7,0xff,0xff,0xff,0xf7});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8,0xff,0xff,0xff,0xf8});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9,0xff,0xff,0xff,0xf9});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa,0xff,0xff,0xff,0xfa});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xfb});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc,0xff,0xff,0xff,0xfc});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xfd});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe,0xff,0xff,0xff,0xfe});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fs8b(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x02});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x03});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x05});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x06});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x07});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09,0x00,0x00,0x00,0x09});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x0a});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x0c});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0x0d});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x0e});\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x0f});\n+}\n+void fs8c(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0,0xff,0xf0});\n+  *s8++ = ((vector signed char){0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1,0xff,0xf1});\n+  *s8++ = ((vector signed char){0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2,0xff,0xf2});\n+  *s8++ = ((vector signed char){0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3,0xff,0xf3});\n+  *s8++ = ((vector signed char){0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4,0xff,0xf4});\n+  *s8++ = ((vector signed char){0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5,0xff,0xf5});\n+  *s8++ = ((vector signed char){0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6,0xff,0xf6});\n+  *s8++ = ((vector signed char){0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7,0xff,0xf7});\n+  *s8++ = ((vector signed char){0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8,0xff,0xf8});\n+  *s8++ = ((vector signed char){0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9});\n+  *s8++ = ((vector signed char){0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa,0xff,0xfa});\n+  *s8++ = ((vector signed char){0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb,0xff,0xfb});\n+  *s8++ = ((vector signed char){0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc,0xff,0xfc});\n+  *s8++ = ((vector signed char){0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd,0xff,0xfd});\n+  *s8++ = ((vector signed char){0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe,0xff,0xfe});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fs8d(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *s8++ = ((vector signed char){0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01});\n+  *s8++ = ((vector signed char){0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02});\n+  *s8++ = ((vector signed char){0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03,0x00,0x03});\n+  *s8++ = ((vector signed char){0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04,0x00,0x04});\n+  *s8++ = ((vector signed char){0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x05});\n+  *s8++ = ((vector signed char){0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06,0x00,0x06});\n+  *s8++ = ((vector signed char){0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07,0x00,0x07});\n+  *s8++ = ((vector signed char){0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08,0x00,0x08});\n+  *s8++ = ((vector signed char){0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09,0x00,0x09});\n+  *s8++ = ((vector signed char){0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a,0x00,0x0a});\n+  *s8++ = ((vector signed char){0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b,0x00,0x0b});\n+  *s8++ = ((vector signed char){0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c,0x00,0x0c});\n+  *s8++ = ((vector signed char){0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d,0x00,0x0d});\n+  *s8++ = ((vector signed char){0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e,0x00,0x0e});\n+  *s8++ = ((vector signed char){0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f,0x00,0x0f});\n+}\n+void fs8e(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00});\n+  *s8++ = ((vector signed char){0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01});\n+  *s8++ = ((vector signed char){0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02});\n+  *s8++ = ((vector signed char){0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03});\n+  *s8++ = ((vector signed char){0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04});\n+  *s8++ = ((vector signed char){0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05,0x05});\n+  *s8++ = ((vector signed char){0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06});\n+  *s8++ = ((vector signed char){0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07,0x07});\n+  *s8++ = ((vector signed char){0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08});\n+  *s8++ = ((vector signed char){0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x09});\n+  *s8++ = ((vector signed char){0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a});\n+  *s8++ = ((vector signed char){0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b,0x0b});\n+  *s8++ = ((vector signed char){0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c});\n+  *s8++ = ((vector signed char){0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d});\n+  *s8++ = ((vector signed char){0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e,0x0e});\n+  *s8++ = ((vector signed char){0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f});\n+}\n+void fs8f(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0});\n+  *s8++ = ((vector signed char){0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1,0xf1});\n+  *s8++ = ((vector signed char){0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2,0xf2});\n+  *s8++ = ((vector signed char){0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3,0xf3});\n+  *s8++ = ((vector signed char){0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4,0xf4});\n+  *s8++ = ((vector signed char){0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5,0xf5});\n+  *s8++ = ((vector signed char){0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6,0xf6});\n+  *s8++ = ((vector signed char){0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7,0xf7});\n+  *s8++ = ((vector signed char){0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8});\n+  *s8++ = ((vector signed char){0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9,0xf9});\n+  *s8++ = ((vector signed char){0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa,0xfa});\n+  *s8++ = ((vector signed char){0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb,0xfb});\n+  *s8++ = ((vector signed char){0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc});\n+  *s8++ = ((vector signed char){0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd,0xfd});\n+  *s8++ = ((vector signed char){0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe,0xfe});\n+  *s8++ = ((vector signed char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff});\n+}\n+void fs8g(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});\n+  *s8++ = ((vector signed char){1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});\n+  *s8++ = ((vector signed char){2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2});\n+  *s8++ = ((vector signed char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});\n+  *s8++ = ((vector signed char){4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4});\n+  *s8++ = ((vector signed char){5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5});\n+  *s8++ = ((vector signed char){6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6});\n+  *s8++ = ((vector signed char){7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7});\n+  *s8++ = ((vector signed char){8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8});\n+  *s8++ = ((vector signed char){9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9});\n+  *s8++ = ((vector signed char){10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10});\n+  *s8++ = ((vector signed char){11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11});\n+  *s8++ = ((vector signed char){12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12});\n+  *s8++ = ((vector signed char){13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13});\n+  *s8++ = ((vector signed char){14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14});\n+  *s8++ = ((vector signed char){15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15});\n+}\n+void fs8h(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240});\n+  *s8++ = ((vector signed char){241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241});\n+  *s8++ = ((vector signed char){242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242});\n+  *s8++ = ((vector signed char){243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243});\n+  *s8++ = ((vector signed char){244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244});\n+  *s8++ = ((vector signed char){245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245});\n+  *s8++ = ((vector signed char){246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246});\n+  *s8++ = ((vector signed char){247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247});\n+  *s8++ = ((vector signed char){248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248});\n+  *s8++ = ((vector signed char){249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249});\n+  *s8++ = ((vector signed char){250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250});\n+  *s8++ = ((vector signed char){251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251});\n+  *s8++ = ((vector signed char){252,252,252,252,252,252,252,252,252,252,252,252,252,252,252,252});\n+  *s8++ = ((vector signed char){253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253});\n+  *s8++ = ((vector signed char){254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254});\n+  *s8++ = ((vector signed char){255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255});\n+}\n+void fs8i(vector signed char *s8) \n+{\n+  *s8++ = ((vector signed char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1});\n+  *s8++ = ((vector signed char){-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2});\n+  *s8++ = ((vector signed char){-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3,-3});\n+  *s8++ = ((vector signed char){-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4});\n+  *s8++ = ((vector signed char){-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5});\n+  *s8++ = ((vector signed char){-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6,-6});\n+  *s8++ = ((vector signed char){-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7});\n+  *s8++ = ((vector signed char){-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8});\n+  *s8++ = ((vector signed char){-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9});\n+  *s8++ = ((vector signed char){-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10});\n+  *s8++ = ((vector signed char){-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11,-11});\n+  *s8++ = ((vector signed char){-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12,-12});\n+  *s8++ = ((vector signed char){-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13,-13});\n+  *s8++ = ((vector signed char){-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14,-14});\n+  *s8++ = ((vector signed char){-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15,-15});\n+  *s8++ = ((vector signed char){-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16,-16});\n+}"}, {"sha": "7d9b3975f5b524238c09ca787a397ece781e794b", "filename": "gcc/testsuite/gcc.dg/vmx/5-11.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F5-11.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern void fu32(vector unsigned int, vector unsigned int,\n+\t\t vector unsigned int, vector unsigned int);\n+void fxu32(vector unsigned int u32a, vector unsigned int u32b,\n+\t   vector unsigned int u32c, vector unsigned int u32d)\n+{\n+ fu32 (u32a,\n+       u32b,\n+       u32c,\n+       vec_avg(u32d, u32d));\n+ fu32 (vec_or (u32a, u32a),\n+       vec_and (u32b, u32b),\n+       vec_max (u32c, u32c),\n+       vec_min (u32d, u32d));\n+ fu32 (vec_sld (u32a, u32a, 0),\n+       vec_sld (u32b, u32b, 0),\n+       vec_sld (u32c, u32c, 0),\n+       vec_sld (u32d, u32d, 0));\n+ fu32 (((vector unsigned int){0,0,0,0}),\n+       ((vector unsigned int){0,0,0,0}),\n+       ((vector unsigned int){0,0,0,0}),\n+       ((vector unsigned int){0,0,0,0}));\n+ fu32 (vec_xor(u32a, u32a),\n+       vec_andc(u32b, u32b),\n+       vec_sub(u32c, u32c),\n+       vec_subs(u32d, u32d));\n+ fu32 (vec_splat_u32(0),\n+       vec_splat_u32(0),\n+       vec_splat_u32(0),\n+       vec_splat_u32(0));\n+ fu32 (((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff}),\n+       ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff}),\n+       ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff}),\n+       ((vector unsigned int){0xffffffff,0xffffffff,0xffffffff,0xffffffff}));\n+ fu32 (vec_splat_u32(-1),\n+       vec_splat_u32(-1),\n+       vec_splat_u32(-1),\n+       vec_splat_u32(-1));\n+ fu32 ((vector unsigned int)vec_cmpeq(u32a, u32a),\n+       (vector unsigned int)vec_cmpeq(u32b, u32b),\n+       (vector unsigned int)vec_cmpeq(u32c, u32c),\n+       (vector unsigned int)vec_cmpeq(u32d, u32d));\n+}\n+\n+extern void fu16(vector unsigned short, vector unsigned short,\n+\t\t vector unsigned short, vector unsigned short);\n+void fxu16(vector unsigned short u16a, vector unsigned short u16b,\n+\t   vector unsigned short u16c, vector unsigned short u16d)\n+{\n+ fu16 (u16a,\n+       u16b,\n+       u16c,\n+       vec_avg(u16d, u16d));\n+ fu16 (vec_or (u16a, u16a),\n+       vec_and (u16b, u16b),\n+       vec_max (u16c, u16c),\n+       vec_min (u16d, u16d));\n+ fu16 (vec_sld (u16a, u16a, 0),\n+       vec_sld (u16b, u16b, 0),\n+       vec_sld (u16c, u16c, 0),\n+       vec_sld (u16d, u16d, 0));\n+ fu16 (((vector unsigned short){0,0,0,0,0,0,0,0}),\n+       ((vector unsigned short){0,0,0,0,0,0,0,0}),\n+       ((vector unsigned short){0,0,0,0,0,0,0,0}),\n+       ((vector unsigned short){0,0,0,0,0,0,0,0}));\n+ fu16 (vec_xor(u16a, u16a),\n+       vec_andc(u16b, u16b),\n+       vec_sub(u16c, u16c),\n+       vec_subs(u16d, u16d));\n+ fu16 (vec_splat_u16(0),\n+       vec_splat_u16(0),\n+       vec_splat_u16(0),\n+       vec_splat_u16(0));\n+ fu16 (((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff}),\n+       ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff}),\n+       ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff}),\n+       ((vector unsigned short){0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff,0xffff}));\n+ fu16 (vec_splat_u16(-1),\n+       vec_splat_u16(-1),\n+       vec_splat_u16(-1),\n+       vec_splat_u16(-1));\n+ fu16 ((vector unsigned short)vec_cmpeq(u16a, u16a),\n+       (vector unsigned short)vec_cmpeq(u16b, u16b),\n+       (vector unsigned short)vec_cmpeq(u16c, u16c),\n+       (vector unsigned short)vec_cmpeq(u16d, u16d));\n+}\n+\n+extern void fu8(vector unsigned char, vector unsigned char,\n+\t\tvector unsigned char, vector unsigned char);\n+void fxu8(vector unsigned char u8a, vector unsigned char u8b,\n+\t   vector unsigned char u8c, vector unsigned char u8d)\n+{\n+ fu8 (u8a,\n+       u8b,\n+       u8c,\n+       vec_avg(u8d, u8d));\n+ fu8 (vec_or (u8a, u8a),\n+       vec_and (u8b, u8b),\n+       vec_max (u8c, u8c),\n+       vec_min (u8d, u8d));\n+ fu8 (vec_sld (u8a, u8a, 0),\n+       vec_sld (u8b, u8b, 0),\n+       vec_sld (u8c, u8c, 0),\n+       vec_sld (u8d, u8d, 0));\n+ fu8 (((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));\n+ fu8 (vec_xor(u8a, u8a),\n+       vec_andc(u8b, u8b),\n+       vec_sub(u8c, u8c),\n+       vec_subs(u8d, u8d));\n+ fu8 (vec_splat_u8(0),\n+       vec_splat_u8(0),\n+       vec_splat_u8(0),\n+       vec_splat_u8(0));\n+ fu8 (((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}),\n+       ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}),\n+       ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}),\n+       ((vector unsigned char){0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}));\n+ fu8 (vec_splat_u8(-1),\n+       vec_splat_u8(-1),\n+       vec_splat_u8(-1),\n+       vec_splat_u8(-1));\n+ fu8 ((vector unsigned char)vec_cmpeq(u8a, u8a),\n+       (vector unsigned char)vec_cmpeq(u8b, u8b),\n+       (vector unsigned char)vec_cmpeq(u8c, u8c),\n+       (vector unsigned char)vec_cmpeq(u8d, u8d));\n+}\n+\n+extern void fs32(vector signed int, vector signed int,\n+\t\t vector signed int, vector signed int);\n+void fxs32(vector signed int s32a, vector signed int s32b,\n+\t   vector signed int s32c, vector signed int s32d)\n+{\n+ fs32 (s32a,\n+       s32b,\n+       s32c,\n+       vec_avg(s32d, s32d));\n+ fs32 (vec_or (s32a, s32a),\n+       vec_and (s32b, s32b),\n+       vec_max (s32c, s32c),\n+       vec_min (s32d, s32d));\n+ fs32 (vec_sld (s32a, s32a, 0),\n+       vec_sld (s32b, s32b, 0),\n+       vec_sld (s32c, s32c, 0),\n+       vec_sld (s32d, s32d, 0));\n+ fs32 (((vector signed int){0,0,0,0}),\n+       ((vector signed int){0,0,0,0}),\n+       ((vector signed int){0,0,0,0}),\n+       ((vector signed int){0,0,0,0}));\n+ fs32 (vec_xor(s32a, s32a),\n+       vec_andc(s32b, s32b),\n+       vec_sub(s32c, s32c),\n+       vec_subs(s32d, s32d));\n+ fs32 (vec_splat_s32(0),\n+       vec_splat_s32(0),\n+       vec_splat_s32(0),\n+       vec_splat_s32(0));\n+ fs32 (((vector signed int){-1,-1,-1,-1}),\n+       ((vector signed int){-1,-1,-1,-1}),\n+       ((vector signed int){-1,-1,-1,-1}),\n+       ((vector signed int){-1,-1,-1,-1}));\n+ fs32 (vec_splat_s32(-1),\n+       vec_splat_s32(-1),\n+       vec_splat_s32(-1),\n+       vec_splat_s32(-1));\n+ fs32 ((vector signed int)vec_cmpeq(s32a, s32a),\n+       (vector signed int)vec_cmpeq(s32b, s32b),\n+       (vector signed int)vec_cmpeq(s32c, s32c),\n+       (vector signed int)vec_cmpeq(s32d, s32d));\n+}\n+\n+extern void fs16(vector signed short, vector signed short,\n+\t\t vector signed short, vector signed short);\n+void fxs16(vector signed short s16a, vector signed short s16b,\n+\t   vector signed short s16c, vector signed short s16d)\n+{\n+ fs16 (s16a,\n+       s16b,\n+       s16c,\n+       vec_avg(s16d, s16d));\n+ fs16 (vec_or (s16a, s16a),\n+       vec_and (s16b, s16b),\n+       vec_max (s16c, s16c),\n+       vec_min (s16d, s16d));\n+ fs16 (vec_sld (s16a, s16a, 0),\n+       vec_sld (s16b, s16b, 0),\n+       vec_sld (s16c, s16c, 0),\n+       vec_sld (s16d, s16d, 0));\n+ fs16 (((vector signed short){0,0,0,0,0,0,0,0}),\n+       ((vector signed short){0,0,0,0,0,0,0,0}),\n+       ((vector signed short){0,0,0,0,0,0,0,0}),\n+       ((vector signed short){0,0,0,0,0,0,0,0}));\n+ fs16 (vec_xor(s16a, s16a),\n+       vec_andc(s16b, s16b),\n+       vec_sub(s16c, s16c),\n+       vec_subs(s16d, s16d));\n+ fs16 (vec_splat_s16(0),\n+       vec_splat_s16(0),\n+       vec_splat_s16(0),\n+       vec_splat_s16(0));\n+ fs16 (((vector signed short){-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed short){-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed short){-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed short){-1,-1,-1,-1,-1,-1,-1,-1}));\n+ fs16 (vec_splat_s16(-1),\n+       vec_splat_s16(-1),\n+       vec_splat_s16(-1),\n+       vec_splat_s16(-1));\n+ fs16 ((vector signed short)vec_cmpeq(s16a, s16a),\n+       (vector signed short)vec_cmpeq(s16b, s16b),\n+       (vector signed short)vec_cmpeq(s16c, s16c),\n+       (vector signed short)vec_cmpeq(s16d, s16d));\n+}\n+\n+extern void fs8(vector signed char, vector signed char,\n+\t\tvector signed char, vector signed char);\n+void fxs8(vector signed char s8a, vector signed char s8b,\n+\t   vector signed char s8c, vector signed char s8d)\n+{\n+ fs8 (s8a,\n+       s8b,\n+       s8c,\n+       vec_avg(s8d, s8d));\n+ fs8 (vec_or (s8a, s8a),\n+       vec_and (s8b, s8b),\n+       vec_max (s8c, s8c),\n+       vec_min (s8d, s8d));\n+ fs8 (vec_sld (s8a, s8a, 0),\n+       vec_sld (s8b, s8b, 0),\n+       vec_sld (s8c, s8c, 0),\n+       vec_sld (s8d, s8d, 0));\n+ fs8 (((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}),\n+       ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}));\n+ fs8 (vec_xor(s8a, s8a),\n+       vec_andc(s8b, s8b),\n+       vec_sub(s8c, s8c),\n+       vec_subs(s8d, s8d));\n+ fs8 (vec_splat_s8(0),\n+       vec_splat_s8(0),\n+       vec_splat_s8(0),\n+       vec_splat_s8(0));\n+ fs8 (((vector signed char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}),\n+       ((vector signed char){-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}));\n+ fs8 (vec_splat_s8(-1),\n+       vec_splat_s8(-1),\n+       vec_splat_s8(-1),\n+       vec_splat_s8(-1));\n+ fs8 ((vector signed char)vec_cmpeq(s8a, s8a),\n+       (vector signed char)vec_cmpeq(s8b, s8b),\n+       (vector signed char)vec_cmpeq(s8c, s8c),\n+       (vector signed char)vec_cmpeq(s8d, s8d));\n+}\n+\n+void fu32(vector unsigned int a, vector unsigned int b,\n+\t  vector unsigned int c, vector unsigned int d)\n+{\n+}\n+\n+void fu16(vector unsigned short a, vector unsigned short b,\n+\t  vector unsigned short c, vector unsigned short d)\n+{\n+}\n+\n+void fu8(vector unsigned char a, vector unsigned char b,\n+\t vector unsigned char c, vector unsigned char d)\n+{\n+}\n+\n+void fs32(vector signed int a, vector signed int b,\n+\t  vector signed int c, vector signed int d)\n+{\n+}\n+\n+void fs16(vector signed short a, vector signed short b,\n+\t  vector signed short c, vector signed short d)\n+{\n+}\n+\n+void fs8(vector signed char a, vector signed char b,\n+\t vector signed char c, vector signed char d)\n+{\n+}"}, {"sha": "f986d8fe5b01f822972ae154bd8edb34a0b62498", "filename": "gcc/testsuite/gcc.dg/vmx/7-01.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector signed short image[];\n+extern vector signed short band[];\n+\n+#define load(a,b) (a[b])\n+#define store(v,a,b) (a[b]) = (v)\n+\n+void\n+haar (vector signed char a, vector signed char b, vector signed char c,\n+      vector signed char d, unsigned int N, int XX)\n+{\n+  unsigned int i;\n+  vector unsigned char high, low;\n+  vector signed int zero = ((vector signed int){0,0,0,0});\n+\n+  for (i = 0; i < N; i++) {\n+    high = (vector unsigned char) (vec_vmrghh (load(image, i+XX),\n+\t\t\t\t\t       load(image, i)));\n+    low = (vector unsigned char) (vec_vmrglh (load(image, i+XX),\n+\t\t\t\t\t      load(image, i)));\n+\n+    store (vec_vpkswss (vec_vmsummbm (a, high, zero),\n+\t\t\tvec_vmsummbm (a, low, zero)),\n+\t   band, i);\n+    store (vec_vpkswss (vec_vmsummbm (b, high, zero),\n+\t\t\tvec_vmsummbm (b, low, zero)),\n+\t   band, i+1);\n+    store(vec_vpkswss (vec_vmsummbm (c, high, zero),\n+\t\t       vec_vmsummbm (c, low, zero)),\n+\t  band, i+2);\n+    store(vec_vpkswss (vec_vmsummbm (d, high, zero),\n+\t\t       vec_vmsummbm (d, low, zero)),\n+\t  band, i+3);\n+  }\n+}"}, {"sha": "c09835b437e061cb42f095e1f8f5005ee293336d", "filename": "gcc/testsuite/gcc.dg/vmx/7-01a.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7-01a.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector signed short image[];\n+extern vector signed short band[];\n+\n+#define load(a,b) vec_ld((b)*16, a)\n+#define store(v,a,b) vec_st(v,(b)*16,a)\n+\n+void\n+haar (vector signed char a, vector signed char b, vector signed char c,\n+      vector signed char d, unsigned int N, int XX)\n+{\n+  unsigned int i;\n+  vector unsigned char high, low;\n+  vector signed int zero = ((vector signed int){0,0,0,0});\n+\n+  for (i = 0; i < N; i++) {\n+    high = (vector unsigned char) (vec_vmrghh (load(image, i+XX),\n+\t\t\t\t\t       load(image, i)));\n+    low = (vector unsigned char) (vec_vmrglh (load(image, i+XX),\n+\t\t\t\t\t      load(image, i)));\n+\n+    store (vec_vpkswss (vec_vmsummbm (a, high, zero),\n+\t\t\tvec_vmsummbm (a, low, zero)),\n+\t   band, i);\n+    store (vec_vpkswss (vec_vmsummbm (b, high, zero),\n+\t\t\tvec_vmsummbm (b, low, zero)),\n+\t   band, i+1);\n+    store(vec_vpkswss (vec_vmsummbm (c, high, zero),\n+\t\t       vec_vmsummbm (c, low, zero)),\n+\t  band, i+2);\n+    store(vec_vpkswss (vec_vmsummbm (d, high, zero),\n+\t\t       vec_vmsummbm (d, low, zero)),\n+\t  band, i+3);\n+  }\n+}"}, {"sha": "68e07aa305bc0e8795992b2c7b5019a46e6a5c1d", "filename": "gcc/testsuite/gcc.dg/vmx/7c-01.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7c-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7c-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7c-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector float\n+f(int i)\n+{\n+  switch (i) {\n+  case 0:\n+    return (vector float)(((vector unsigned char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3}));\n+  }\n+  return ((vector float){0,0,0,0});\n+}"}, {"sha": "dac5151add111fc6c8c65685dd48e56cbf1fda70", "filename": "gcc/testsuite/gcc.dg/vmx/7d-01.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector unsigned char a[];\n+\n+vector unsigned char\n+f(vector unsigned char *p, int i, int b)\n+{\n+  if (b)\n+    return p[i];\n+  return vec_ld(i*16,p);\n+}\n+\n+vector unsigned char\n+g(int i, int b)\n+{\n+  if (b)\n+    return a[i];\n+  return vec_ld(i*16,a);\n+}"}, {"sha": "6294cc99efcd3f07ad702accc679fca925dbb7d0", "filename": "gcc/testsuite/gcc.dg/vmx/7d-02.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F7d-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector unsigned char a[];\n+\n+void f\n+(vector unsigned char v, vector unsigned char *p, int i, int b)\n+{\n+  if (b)\n+    p[i] = v;\n+  else\n+    vec_st(v, i*16,p);\n+}\n+\n+void g\n+(vector unsigned char v, int i, int b)\n+{\n+  if (b)\n+    a[i] = v;\n+  else\n+    vec_st(v,i*16,a);\n+}"}, {"sha": "d65815e3a6d57e7c7b2cdd7c54f7af0596512161", "filename": "gcc/testsuite/gcc.dg/vmx/8-01.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+\n+int i = vec_step(vector unsigned short);"}, {"sha": "72a4a907ad3d9e5c457cdaa9a19d806c672ab9f9", "filename": "gcc/testsuite/gcc.dg/vmx/8-02.c", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,299 @@\n+#include \"harness.h\"\n+\n+extern vector unsigned char u8;\n+extern vector signed char s8;\n+extern vector bool char b8;\n+extern vector unsigned short u16;\n+extern vector signed short s16;\n+extern vector bool short b16;\n+extern vector unsigned int u32;\n+extern vector signed int s32;\n+extern vector bool int b32;\n+extern vector float f32;\n+extern vector pixel p16;\n+extern vector unsigned char const u8c;\n+extern vector signed char const s8c;\n+extern vector bool char const b8c;\n+extern vector unsigned short const u16c;\n+extern vector signed short const s16c;\n+extern vector bool short const b16c;\n+extern vector unsigned int const u32c;\n+extern vector signed int const s32c;\n+extern vector bool int const b32c;\n+extern vector float const f32c;\n+extern vector pixel const p16c;\n+extern vector unsigned char volatile u8v;\n+extern vector signed char volatile s8v;\n+extern vector bool char volatile b8v;\n+extern vector unsigned short volatile u16v;\n+extern vector signed short volatile s16v;\n+extern vector bool short volatile b16v;\n+extern vector unsigned int volatile u32v;\n+extern vector signed int volatile s32v;\n+extern vector bool int volatile b32v;\n+extern vector float volatile f32v;\n+extern vector pixel volatile p16v;\n+extern const vector unsigned char u8c_;\n+extern const vector signed char s8c_;\n+extern const vector bool char b8c_;\n+extern const vector unsigned short u16c_;\n+extern const vector signed short s16c_;\n+extern const vector bool short b16c_;\n+extern const vector unsigned int u32c_;\n+extern const vector signed int s32c_;\n+extern const vector bool int b32c_;\n+extern const vector float f32c_;\n+extern const vector pixel p16c_;\n+extern volatile vector unsigned char u8v_;\n+extern volatile vector signed char s8v_;\n+extern volatile vector bool char b8v_;\n+extern volatile vector unsigned short u16v_;\n+extern volatile vector signed short s16v_;\n+extern volatile vector bool short b16v_;\n+extern volatile vector unsigned int u32v_;\n+extern volatile vector signed int s32v_;\n+extern volatile vector bool int b32v_;\n+extern volatile vector float f32v_;\n+extern volatile vector pixel p16v_;\n+int i_u8 = vec_step(u8);\n+int i_s8 = vec_step(s8);\n+int i_b8 = vec_step(b8);\n+int i_u16 = vec_step(u16);\n+int i_s16 = vec_step(s16);\n+int i_b16 = vec_step(b16);\n+int i_u32 = vec_step(u32);\n+int i_s32 = vec_step(s32);\n+int i_b32 = vec_step(b32);\n+int i_f32 = vec_step(f32);\n+int i_p16 = vec_step(p16);\n+int i_u8c = vec_step(u8c);\n+int i_s8c = vec_step(s8c);\n+int i_b8c = vec_step(b8c);\n+int i_u16c = vec_step(u16c);\n+int i_s16c = vec_step(s16c);\n+int i_b16c = vec_step(b16c);\n+int i_u32c = vec_step(u32c);\n+int i_s32c = vec_step(s32c);\n+int i_b32c = vec_step(b32c);\n+int i_f32c = vec_step(f32c);\n+int i_p16c = vec_step(p16c);\n+int i_u8v = vec_step(u8v);\n+int i_s8v = vec_step(s8v);\n+int i_b8v = vec_step(b8v);\n+int i_u16v = vec_step(u16v);\n+int i_s16v = vec_step(s16v);\n+int i_b16v = vec_step(b16v);\n+int i_u32v = vec_step(u32v);\n+int i_s32v = vec_step(s32v);\n+int i_b32v = vec_step(b32v);\n+int i_f32v = vec_step(f32v);\n+int i_p16v = vec_step(p16v);\n+int i_u8c_ = vec_step(u8c_);\n+int i_s8c_ = vec_step(s8c_);\n+int i_b8c_ = vec_step(b8c_);\n+int i_u16c_ = vec_step(u16c_);\n+int i_s16c_ = vec_step(s16c_);\n+int i_b16c_ = vec_step(b16c_);\n+int i_u32c_ = vec_step(u32c_);\n+int i_s32c_ = vec_step(s32c_);\n+int i_b32c_ = vec_step(b32c_);\n+int i_f32c_ = vec_step(f32c_);\n+int i_p16c_ = vec_step(p16c_);\n+int i_u8v_ = vec_step(u8v_);\n+int i_s8v_ = vec_step(s8v_);\n+int i_b8v_ = vec_step(b8v_);\n+int i_u16v_ = vec_step(u16v_);\n+int i_s16v_ = vec_step(s16v_);\n+int i_b16v_ = vec_step(b16v_);\n+int i_u32v_ = vec_step(u32v_);\n+int i_s32v_ = vec_step(s32v_);\n+int i_b32v_ = vec_step(b32v_);\n+int i_f32v_ = vec_step(f32v_);\n+int i_p16v_ = vec_step(p16v_);\n+int j_u8 = vec_step(vector unsigned char);\n+int j_s8 = vec_step(vector signed char);\n+int j_b8 = vec_step(vector bool char);\n+int j_u16 = vec_step(vector unsigned short);\n+int j_s16 = vec_step(vector signed short);\n+int j_b16 = vec_step(vector bool short);\n+int j_u32 = vec_step(vector unsigned int);\n+int j_s32 = vec_step(vector signed int);\n+int j_b32 = vec_step(vector bool int);\n+int j_f32 = vec_step(vector float);\n+int j_p16 = vec_step(vector pixel);\n+int j_u8c = vec_step(vector unsigned char const);\n+int j_s8c = vec_step(vector signed char const);\n+int j_b8c = vec_step(vector bool char const);\n+int j_u16c = vec_step(vector unsigned short const);\n+int j_s16c = vec_step(vector signed short const);\n+int j_b16c = vec_step(vector bool short const);\n+int j_u32c = vec_step(vector unsigned int const);\n+int j_s32c = vec_step(vector signed int const);\n+int j_b32c = vec_step(vector bool int const);\n+int j_f32c = vec_step(vector float const);\n+int j_p16c = vec_step(vector pixel const);\n+int j_u8v = vec_step(vector unsigned char volatile);\n+int j_s8v = vec_step(vector signed char volatile);\n+int j_b8v = vec_step(vector bool char volatile);\n+int j_u16v = vec_step(vector unsigned short volatile);\n+int j_s16v = vec_step(vector signed short volatile);\n+int j_b16v = vec_step(vector bool short volatile);\n+int j_u32v = vec_step(vector unsigned int volatile);\n+int j_s32v = vec_step(vector signed int volatile);\n+int j_b32v = vec_step(vector bool int volatile);\n+int j_f32v = vec_step(vector float volatile);\n+int j_p16v = vec_step(vector pixel volatile);\n+int j_u8c_ = vec_step(const vector unsigned char);\n+int j_s8c_ = vec_step(const vector signed char);\n+int j_b8c_ = vec_step(const vector bool char);\n+int j_u16c_ = vec_step(const vector unsigned short);\n+int j_s16c_ = vec_step(const vector signed short);\n+int j_b16c_ = vec_step(const vector bool short);\n+int j_u32c_ = vec_step(const vector unsigned int);\n+int j_s32c_ = vec_step(const vector signed int);\n+int j_b32c_ = vec_step(const vector bool int);\n+int j_f32c_ = vec_step(const vector float);\n+int j_p16c_ = vec_step(const vector pixel);\n+int j_u8v_ = vec_step(volatile vector unsigned char);\n+int j_s8v_ = vec_step(volatile vector signed char);\n+int j_b8v_ = vec_step(volatile vector bool char);\n+int j_u16v_ = vec_step(volatile vector unsigned short);\n+int j_s16v_ = vec_step(volatile vector signed short);\n+int j_b16v_ = vec_step(volatile vector bool short);\n+int j_u32v_ = vec_step(volatile vector unsigned int);\n+int j_s32v_ = vec_step(volatile vector signed int);\n+int j_b32v_ = vec_step(volatile vector bool int);\n+int j_f32v_ = vec_step(volatile vector float);\n+int j_p16v_ = vec_step(volatile vector pixel);\n+\n+static void test()\n+{\n+  int i_u8 = vec_step(u8);\n+  int i_s8 = vec_step(s8);\n+  int i_b8 = vec_step(b8);\n+  int i_u16 = vec_step(u16);\n+  int i_s16 = vec_step(s16);\n+  int i_b16 = vec_step(b16);\n+  int i_u32 = vec_step(u32);\n+  int i_s32 = vec_step(s32);\n+  int i_b32 = vec_step(b32);\n+  int i_f32 = vec_step(f32);\n+  int i_p16 = vec_step(p16);\n+  int i_u8c = vec_step(u8c);\n+  int i_s8c = vec_step(s8c);\n+  int i_b8c = vec_step(b8c);\n+  int i_u16c = vec_step(u16c);\n+  int i_s16c = vec_step(s16c);\n+  int i_b16c = vec_step(b16c);\n+  int i_u32c = vec_step(u32c);\n+  int i_s32c = vec_step(s32c);\n+  int i_b32c = vec_step(b32c);\n+  int i_f32c = vec_step(f32c);\n+  int i_p16c = vec_step(p16c);\n+  int i_u8v = vec_step(u8v);\n+  int i_s8v = vec_step(s8v);\n+  int i_b8v = vec_step(b8v);\n+  int i_u16v = vec_step(u16v);\n+  int i_s16v = vec_step(s16v);\n+  int i_b16v = vec_step(b16v);\n+  int i_u32v = vec_step(u32v);\n+  int i_s32v = vec_step(s32v);\n+  int i_b32v = vec_step(b32v);\n+  int i_f32v = vec_step(f32v);\n+  int i_p16v = vec_step(p16v);\n+  int i_u8c_ = vec_step(u8c_);\n+  int i_s8c_ = vec_step(s8c_);\n+  int i_b8c_ = vec_step(b8c_);\n+  int i_u16c_ = vec_step(u16c_);\n+  int i_s16c_ = vec_step(s16c_);\n+  int i_b16c_ = vec_step(b16c_);\n+  int i_u32c_ = vec_step(u32c_);\n+  int i_s32c_ = vec_step(s32c_);\n+  int i_b32c_ = vec_step(b32c_);\n+  int i_f32c_ = vec_step(f32c_);\n+  int i_p16c_ = vec_step(p16c_);\n+  int i_u8v_ = vec_step(u8v_);\n+  int i_s8v_ = vec_step(s8v_);\n+  int i_b8v_ = vec_step(b8v_);\n+  int i_u16v_ = vec_step(u16v_);\n+  int i_s16v_ = vec_step(s16v_);\n+  int i_b16v_ = vec_step(b16v_);\n+  int i_u32v_ = vec_step(u32v_);\n+  int i_s32v_ = vec_step(s32v_);\n+  int i_b32v_ = vec_step(b32v_);\n+  int i_f32v_ = vec_step(f32v_);\n+  int i_p16v_ = vec_step(p16v_);\n+  int j_u8 = vec_step(vector unsigned char);\n+  int j_s8 = vec_step(vector signed char);\n+  int j_b8 = vec_step(vector bool char);\n+  int j_u16 = vec_step(vector unsigned short);\n+  int j_s16 = vec_step(vector signed short);\n+  int j_b16 = vec_step(vector bool short);\n+  int j_u32 = vec_step(vector unsigned int);\n+  int j_s32 = vec_step(vector signed int);\n+  int j_b32 = vec_step(vector bool int);\n+  int j_f32 = vec_step(vector float);\n+  int j_p16 = vec_step(vector pixel);\n+  int j_u8c = vec_step(vector unsigned char const);\n+  int j_s8c = vec_step(vector signed char const);\n+  int j_b8c = vec_step(vector bool char const);\n+  int j_u16c = vec_step(vector unsigned short const);\n+  int j_s16c = vec_step(vector signed short const);\n+  int j_b16c = vec_step(vector bool short const);\n+  int j_u32c = vec_step(vector unsigned int const);\n+  int j_s32c = vec_step(vector signed int const);\n+  int j_b32c = vec_step(vector bool int const);\n+  int j_f32c = vec_step(vector float const);\n+  int j_p16c = vec_step(vector pixel const);\n+  int j_u8v = vec_step(vector unsigned char volatile);\n+  int j_s8v = vec_step(vector signed char volatile);\n+  int j_b8v = vec_step(vector bool char volatile);\n+  int j_u16v = vec_step(vector unsigned short volatile);\n+  int j_s16v = vec_step(vector signed short volatile);\n+  int j_b16v = vec_step(vector bool short volatile);\n+  int j_u32v = vec_step(vector unsigned int volatile);\n+  int j_s32v = vec_step(vector signed int volatile);\n+  int j_b32v = vec_step(vector bool int volatile);\n+  int j_f32v = vec_step(vector float volatile);\n+  int j_p16v = vec_step(vector pixel volatile);\n+  int j_u8c_ = vec_step(const vector unsigned char);\n+  int j_s8c_ = vec_step(const vector signed char);\n+  int j_b8c_ = vec_step(const vector bool char);\n+  int j_u16c_ = vec_step(const vector unsigned short);\n+  int j_s16c_ = vec_step(const vector signed short);\n+  int j_b16c_ = vec_step(const vector bool short);\n+  int j_u32c_ = vec_step(const vector unsigned int);\n+  int j_s32c_ = vec_step(const vector signed int);\n+  int j_b32c_ = vec_step(const vector bool int);\n+  int j_f32c_ = vec_step(const vector float);\n+  int j_p16c_ = vec_step(const vector pixel);\n+  int j_u8v_ = vec_step(volatile vector unsigned char);\n+  int j_s8v_ = vec_step(volatile vector signed char);\n+  int j_b8v_ = vec_step(volatile vector bool char);\n+  int j_u16v_ = vec_step(volatile vector unsigned short);\n+  int j_s16v_ = vec_step(volatile vector signed short);\n+  int j_b16v_ = vec_step(volatile vector bool short);\n+  int j_u32v_ = vec_step(volatile vector unsigned int);\n+  int j_s32v_ = vec_step(volatile vector signed int);\n+  int j_b32v_ = vec_step(volatile vector bool int);\n+  int j_f32v_ = vec_step(volatile vector float);\n+  int j_p16v_ = vec_step(volatile vector pixel);\n+  check((i_u8 + i_s8 + i_b8 + i_u16 + i_s16 + i_b16 + i_u32 + i_s32 +\n+\t i_b32 + i_f32 + i_p16 + i_u8c + i_s8c + i_b8c + i_u16c +\n+\t i_s16c + i_b16c + i_u32c + i_s32c + i_b32c + i_f32c + i_p16c\n+\t + i_u8v + i_s8v + i_b8v + i_u16v + i_s16v + i_b16v + i_u32v\n+\t + i_s32v + i_b32v + i_f32v + i_p16v + i_u8c_ + i_s8c_ +\n+\t i_b8c_ + i_u16c_ + i_s16c_ + i_b16c_ + i_u32c_ + i_s32c_ +\n+\t i_b32c_ + i_f32c_ + i_p16c_ + i_u8v_ + i_s8v_ + i_b8v_ +\n+\t i_u16v_ + i_s16v_ + i_b16v_ + i_u32v_ + i_s32v_ + i_b32v_ +\n+\t i_f32v_ + i_p16v_ + j_u8 + j_s8 + j_b8 + j_u16 + j_s16 +\n+\t j_b16 + j_u32 + j_s32 + j_b32 + j_f32 + j_p16 + j_u8c +\n+\t j_s8c + j_b8c + j_u16c + j_s16c + j_b16c + j_u32c + j_s32c +\n+\t j_b32c + j_f32c + j_p16c + j_u8v + j_s8v + j_b8v + j_u16v +\n+\t j_s16v + j_b16v + j_u32v + j_s32v + j_b32v + j_f32v + j_p16v\n+\t + j_u8c_ + j_s8c_ + j_b8c_ + j_u16c_ + j_s16c_ + j_b16c_ +\n+\t j_u32c_ + j_s32c_ + j_b32c_ + j_f32c_ + j_p16c_ + j_u8v_ +\n+\t j_s8v_ + j_b8v_ + j_u16v_ + j_s16v_ + j_b16v_ + j_u32v_ +\n+\t j_s32v_ + j_b32v_ + j_f32v_ + j_p16v_) == 960,\n+\t\"vec_step\");\n+}"}, {"sha": "34f73878051aad320750c68c4c08e064ba97f219", "filename": "gcc/testsuite/gcc.dg/vmx/8-02a.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2F8-02a.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+extern vector pixel p16;\n+extern vector pixel const p16c;\n+extern vector pixel volatile p16v;\n+extern const vector pixel p16c_;\n+extern volatile vector pixel p16v_;\n+\n+static void test()\n+{\n+  int i_p16 = vec_step(p16);\n+  int i_p16c = vec_step(p16c);\n+  int i_p16v = vec_step(p16v);\n+  int i_p16c_ = vec_step(p16c_);\n+  int i_p16v_ = vec_step(p16v_);\n+  check((i_p16 + i_p16c + i_p16v + i_p16c_ + i_p16v_) != 40, \"vec_step\");\n+}"}, {"sha": "234192bac9b66bbcf3b8b6f3e0414700bbe60a2a", "filename": "gcc/testsuite/gcc.dg/vmx/brode-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbrode-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbrode-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbrode-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,10 @@\n+#include <altivec.h>\n+ int  main( )\n+ {\n+    static int a[3][5][7];\n+    {\n+       vector signed int a4v;\n+       a4v = vec_ldl(0, &a[0][0][0]);\n+    }\n+    return 0;\n+ }"}, {"sha": "f2236c8b4eaa0acdb9421223cc1730345d6e4fee", "filename": "gcc/testsuite/gcc.dg/vmx/bug-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,38 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+#define NPAGES 20\n+#define NSKIP 10\n+static vector float big[NPAGES*4096/16] = { {1,1,1,1} };\n+/* NPAGES pages worth.  */\n+\n+static int failed;\n+\n+static void f(vector float *p)\n+{\n+  int i = 1;\n+  p = (vector float *)(((int)p + 4095) & ~4095);\n+\n+  i += NSKIP;\n+  p += NSKIP*4096/16;\n+\n+  while (i < NPAGES)\n+    {\n+      if (!vec_all_eq(*p,((vector float){0,0,0,0})))\n+\t{\n+\t  printf(\"*p isn't zero at 0x%p, page %d\\n\", p, i);\n+\t  failed++;\n+\t}\n+      i++;\n+      p += 4096/16;\n+    }\n+}\n+\n+int main(void)\n+{\n+  f(big);\n+  if (failed)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5cdbc9856cbb527d011435be9fa400f0d7242d13", "filename": "gcc/testsuite/gcc.dg/vmx/bug-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,24 @@\n+#include \"harness.h\"\n+\n+static vector unsigned char value =\n+  { 0x7c, 0x12, 0x1, 0xd5,\n+    0xc3, 0x99, 0x21, 0xe2,\n+    0x12, 0x57, 0xde, 0x6b,\n+    0x39, 0x66, 0xa8, 0x87 };\n+\n+void initn_c (int p1, int p2, signed char p3, int p4, double p5 ,\n+\t      vector unsigned char p6, signed char p7)\n+{\n+  check(p1 == 3, \"p1\");\n+  check(p2 == 4, \"p2\");\n+  check(p3 == 5, \"p3\");\n+  check(p4 == 6, \"p4\");\n+  check(p5 == 1, \"p5\");\n+  check(vec_all_eq(p6, value), \"p6\");\n+  check(p7 == 7, \"p7\");\n+}\n+         \n+void test()\n+{\n+  initn_c (3, 4, 5, 6, 1, value, 7);\n+}"}, {"sha": "aacca266769d7b0bb0f053aec4c0bc5f9cd96a4a", "filename": "gcc/testsuite/gcc.dg/vmx/bug-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fbug-3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,45 @@\n+#include \"harness.h\"\n+\n+static vector unsigned int value = { 9, 9, 9, 9 };\n+\n+void varargsC2 (int p1, int p2, int p3, int p4, int p5, int p6, int p7,\n+\t\tint p8, vector unsigned int p9, int p10)\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+  int i6;\n+  int i7;\n+  int i8;\n+  vector unsigned int i9;\n+  int i10;\n+\n+  i1 = p1;\n+  i2 = p2;\n+  i3 = p3;\n+  i4 = p4;\n+  i5 = p5;\n+  i6 = p6;\n+  i7 = p7;\n+  i8 = p8;\n+  i9 = p9;\n+  i10 = p10;\n+\n+  check(i1 == 1, \"i1\");\n+  check(i2 == 2, \"i2\");\n+  check(i3 == 3, \"i3\");\n+  check(i4 == 4, \"i4\");\n+  check(i5 == 5, \"i5\");\n+  check(i6 == 6, \"i6\");\n+  check(i7 == 7, \"i7\");\n+  check(i8 == 8, \"i8\");\n+  check(vec_all_eq(i9, value), \"i9\");\n+  check(i10 == 10, \"i10\");\n+}\n+\n+void test()\n+{\n+  varargsC2 (1, 2, 3, 4, 5, 6, 7, 8, ((vector unsigned int){9,9,9,9}), 10);\n+}"}, {"sha": "0c3028b5122b159943b047bcc4c4d6eca8eb73c8", "filename": "gcc/testsuite/gcc.dg/vmx/cw-bug-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,12 @@\n+#include <altivec.h>\n+#include <stdlib.h>\n+\n+#define ZERO (((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}))\n+\n+int main(void)\n+{\n+  vector unsigned char a = ZERO;\n+  if (vec_any_ne(a, ZERO))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1c50dfffd6d7d0de17822ccd22ac68ceb1e7e5dc", "filename": "gcc/testsuite/gcc.dg/vmx/cw-bug-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,9 @@\n+#include <altivec.h>\n+#include <stdlib.h>\n+\n+int main(void)\n+{\n+  if (vec_any_ne((vector unsigned short)(((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0})),\n+\t\t vec_mfvscr()))\n+    abort ();\n+}"}, {"sha": "511a7e0ae9d32495710c24bfbf6ba509a2c18317", "filename": "gcc/testsuite/gcc.dg/vmx/cw-bug-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fcw-bug-3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector signed short hamming_window[1] = {\n+  {2621,  2623,  2629,  2638, 2651,  2668,  2689,  2713}\n+};"}, {"sha": "00c4cd93c7b3f0655970e779efd2692074e16f1b", "filename": "gcc/testsuite/gcc.dg/vmx/dct.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdct.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,176 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+\n+inline void\n+transpose_vmx (vector signed short *input, vector signed short *output)\n+{\n+  vector signed short v0, v1, v2, v3, v4, v5, v6, v7;\n+  vector signed short x0, x1, x2, x3, x4, x5, x6, x7;\n+\n+  /* Matrix transpose */\n+  v0 = vec_mergeh (input[0], input[4]);\n+  v1 = vec_mergel (input[0], input[4]);\n+  v2 = vec_mergeh (input[1], input[5]);\n+  v3 = vec_mergel (input[1], input[5]);\n+  v4 = vec_mergeh (input[2], input[6]);\n+  v5 = vec_mergel (input[2], input[6]);\n+  v6 = vec_mergeh (input[3], input[7]);\n+  v7 = vec_mergel (input[3], input[7]);\n+\n+  x0 = vec_mergeh (v0, v4);\n+  x1 = vec_mergel (v0, v4);\n+  x2 = vec_mergeh (v1, v5);\n+  x3 = vec_mergel (v1, v5);\n+  x4 = vec_mergeh (v2, v6);\n+  x5 = vec_mergel (v2, v6);\n+  x6 = vec_mergeh (v3, v7);\n+  x7 = vec_mergel (v3, v7);\n+\n+  output[0] = vec_mergeh (x0, x4);\n+  output[1] = vec_mergel (x0, x4);\n+  output[2] = vec_mergeh (x1, x5);\n+  output[3] = vec_mergel (x1, x5);\n+  output[4] = vec_mergeh (x2, x6);\n+  output[5] = vec_mergel (x2, x6);\n+  output[6] = vec_mergeh (x3, x7);\n+  output[7] = vec_mergel (x3, x7);\n+}\n+\n+void\n+dct_vmx (vector signed short *input, vector signed short *output,\n+\t vector signed short *postscale)\n+{\n+  vector signed short mul0, mul1, mul2, mul3, mul4, mul5, mul6, mul;\n+  vector signed short v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;\n+  vector signed short v20, v21, v22, v23, v24, v25, v26, v27, v31;\n+  int i;\n+  vector signed short in[8], out[8];\n+\n+  /* Load first eight rows of input data */\n+\n+  /* Load multiplication constants */\n+\n+  /* Splat multiplication constants */\n+  mul0 = vec_splat(input[8],0);\n+  mul1 = vec_splat(input[8],1);\n+  mul2 = vec_splat(input[8],2);\n+  mul3 = vec_splat(input[8],3);\n+  mul4 = vec_splat(input[8],4);\n+  mul5 = vec_splat(input[8],5);\n+  mul6 = vec_splat(input[8],6);\n+\n+  /* Perform DCT on the eight columns */\n+\n+  /*********** Stage 1 ***********/\n+\n+  v8 = vec_adds (input[0], input[7]);\n+  v9 = vec_subs (input[0], input[7]);\n+  v0 = vec_adds (input[1], input[6]);\n+  v7 = vec_subs (input[1], input[6]);\n+  v1 = vec_adds (input[2], input[5]);\n+  v6 = vec_subs (input[2], input[5]);\n+  v2 = vec_adds (input[3], input[4]);\n+  v5 = vec_subs (input[3], input[4]);\n+\n+  /*********** Stage 2 ***********/\n+\n+  /* Top */\n+  v3 = vec_adds (v8, v2);\t\t/* (V0+V7) + (V3+V4) */\n+  v4 = vec_subs (v8, v2);\t\t/* (V0+V7) - (V3+V4) */\n+  v2 = vec_adds (v0, v1);\t\t/* (V1+V6) + (V2+V5) */\n+  v8 = vec_subs (v0, v1);\t\t/* (V1+V6) - (V2+V5) */\n+\n+  /* Bottom */\n+  v0 = vec_subs (v7, v6);\t\t/* (V1-V6) - (V2-V5) */\n+  v1 = vec_adds (v7, v6);\t\t/* (V1-V6) + (V2-V5) */\n+\n+  /*********** Stage 3 ***********/\n+\n+  /* Top */\n+  in[0] = vec_adds (v3, v2);\t\t/* y0 = v3 + v2 */\n+  in[4] = vec_subs (v3, v2);\t\t/* y4 = v3 - v2 */\n+  in[2] = vec_mradds (v8, mul2, v4);\t/* y2 = v8 * a0 + v4 */\n+  v6 = vec_mradds (v4, mul2, mul6);\t\n+  in[6] = vec_subs (v6, v8);\t\t/* y6 = v4 * a0 - v8 */\n+\n+  /* Bottom */\n+  v6 = vec_mradds (v0, mul0, v5);\t/* v6 = v0 * (c4) + v5 */\n+  v7 = vec_mradds (v0, mul4, v5);\t/* v7 = v0 * (-c4) + v5 */\n+  v2 = vec_mradds (v1, mul4, v9);\t/* v2 = v1 * (-c4) + v9 */\n+  v3 = vec_mradds (v1, mul0, v9);\t/* v3 = v1 * (c4) + v9 */\n+\n+  /*********** Stage 4 ***********/\n+\n+  /* Bottom */\n+  in[1] = vec_mradds (v6, mul3, v3);\t/* y1 = v6 * (a1) + v3 */\n+  v23 = vec_mradds (v3, mul3, mul6);\n+  in[7] = vec_subs (v23, v6);\t\t/* y7 = v3 * (a1) - v6 */\n+  in[5] = vec_mradds (v2, mul1, v7);\t/* y5 = v2 * (a2) + v7 */\n+  in[3] = vec_mradds (v7, mul5, v2);\t/* y3 = v7 * (-a2) + v2 */\n+\n+  transpose_vmx (in, out);\n+\n+  /* Perform DCT on the eight rows */\n+\n+  /*********** Stage 1 ***********/\n+\n+  v8 = vec_adds (out[0], out[7]);\n+  v9 = vec_subs (out[0], out[7]);\n+  v0 = vec_adds (out[1], out[6]);\n+  v7 = vec_subs (out[1], out[6]);\n+  v1 = vec_adds (out[2], out[5]);\n+  v6 = vec_subs (out[2], out[5]);\n+  v2 = vec_adds (out[3], out[4]);\n+  v5 = vec_subs (out[3], out[4]);\n+\n+  /*********** Stage 2 ***********/\n+\n+  /* Top */\n+  v3 = vec_adds (v8, v2);\t\t/* (V0+V7) + (V3+V4) */\n+  v4 = vec_subs (v8, v2);\t\t/* (V0+V7) - (V3+V4) */\n+  v2 = vec_adds (v0, v1);\t\t/* (V1+V6) + (V2+V5) */\n+  v8 = vec_subs (v0, v1);\t\t/* (V1+V6) - (V2+V5) */\n+\n+  /* Bottom */\n+  v0 = vec_subs (v7, v6);\t\t/* (V1-V6) - (V2-V5) */\n+  v1 = vec_adds (v7, v6);\t\t/* (V1-V6) + (V2-V5) */\n+\n+  /*********** Stage 3 ***********/\n+\n+  /* Top */\n+  v25 = vec_subs (v25, v25);          /* reinit v25 = 0 */\n+\n+  v20 = vec_adds (v3, v2);\t\t/* y0 = v3 + v2 */\n+  v24 = vec_subs (v3, v2);\t\t/* y4 = v3 - v2 */\n+  v22 = vec_mradds (v8, mul2, v4);\t/* y2 = v8 * a0 + v4 */\n+  v6 = vec_mradds (v4, mul2, v25);\t\n+  v26 = vec_subs (v6, v8);\t\t/* y6 = v4 * a0 - v8 */\n+\n+  /* Bottom */\n+  v6 = vec_mradds (v0, mul0, v5);\t/* v6 = v0 * (c4) + v5 */\n+  v7 = vec_mradds (v0, mul4, v5);\t/* v7 = v0 * (-c4) + v5 */\n+  v2 = vec_mradds (v1, mul4, v9);\t/* v2 = v1 * (-c4) + v9 */\n+  v3 = vec_mradds (v1, mul0, v9);\t/* v3 = v1 * (c4) + v9 */\n+\n+  /*********** Stage 4 ***********/\n+\n+  /* Bottom */\n+  v21 = vec_mradds (v6, mul3, v3);\t/* y1 = v6 * (a1) + v3 */\n+  v23 = vec_mradds (v3, mul3, v25);\n+  v27 = vec_subs (v23, v6);\t\t/* y7 = v3 * (a1) - v6 */\n+  v25 = vec_mradds (v2, mul1, v7);\t/* y5 = v2 * (a2) + v7 */\n+  v23 = vec_mradds (v7, mul5, v2);\t/* y3 = v7 * (-a2) + v2 */\n+\n+  /* Post-scale and store reults */\n+\n+  v31 = vec_subs (v31, v31);          /* reinit v25 = 0 */\n+\n+  output[0] = vec_mradds (postscale[0], v20, v31);\n+  output[2] = vec_mradds (postscale[2], v22, v31);\n+  output[4] = vec_mradds (postscale[4], v24, v31);\n+  output[6] = vec_mradds (postscale[6], v26, v31);\n+  output[1] = vec_mradds (postscale[1], v21, v31);\n+  output[3] = vec_mradds (postscale[3], v23, v31);\n+  output[5] = vec_mradds (postscale[5], v25, v31);\n+  output[7] = vec_mradds (postscale[7], v27, v31);\n+}"}, {"sha": "871625d28733770e7747ec017150d1458b7cfc02", "filename": "gcc/testsuite/gcc.dg/vmx/debug-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,26 @@\n+#include <altivec.h>\n+vector unsigned char v;\n+typedef unsigned char T[16];\n+T t;\n+typedef struct { unsigned char a[16]; } R;\n+R r;\n+typedef union {\n+  unsigned char u8[16];\n+  signed char s8[16];\n+  unsigned short u16[8];\n+  signed short s16[8];\n+  unsigned long u32[4];\n+  signed long s32[4];\n+  float f32[4];\n+} U;\n+U u;\n+static void use(void *p) {\n+}\n+int main() {\n+  use (&v);\n+  use (&t);\n+  use (&r);\n+  use (&u);\n+  return 0;\n+}\n+"}, {"sha": "60380bcfce4d5bfca706d96591c6cfceb199444f", "filename": "gcc/testsuite/gcc.dg/vmx/debug-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,42 @@\n+#include <altivec.h>\n+vector unsigned char u8 = {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t   9, 10,11,12,13,14,15,16};\n+vector signed char s8 = {1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t 9, 10,11,12,13,14,15,16};\n+vector bool char b8 = {0, -1, 0, -1, 0, 0, 0, 0,\n+\t\t      -1, -1, -1, -1, 0, -1, 0, -1};\n+vector unsigned short u16 = {1, 2, 3, 4, 5, 6, 7, 8};\n+vector signed short s16 = {1, 2, 3, 4, 5, 6, 7, 8};\n+vector bool short b16 = {-1, 0, -1, 0, -1, -1, 0, 0};\n+vector unsigned int u32 = {1, 2, 3, 4};\n+vector signed int s32 = {1, 2, 3, 4};\n+vector bool int b32 = {0, -1, -1, 0};\n+vector float f32 = {1, 2, 3, 4};\n+vector pixel p16 = {1, 2, 3, 4, 5, 6, 7, 8};\n+\n+static void f_u8(vector unsigned char *p) {}\n+static void f_s8(vector signed char *p) {}\n+static void f_b8(vector bool char *p) {}\n+static void f_u16(vector unsigned short *p) {}\n+static void f_s16(vector signed short *p) {}\n+static void f_b16(vector bool short *p) {}\n+static void f_u32(vector unsigned int *p) {}\n+static void f_s32(vector signed int *p) {}\n+static void f_b32(vector bool int *p) {}\n+static void f_f32(vector float *p) {}\n+static void f_p16(vector pixel *p) {}\n+\n+int main() {\n+  f_u8(&u8);\n+  f_s8(&s8);\n+  f_b8(&b8);\n+  f_u16(&u16);\n+  f_s16(&s16);\n+  f_b16(&b16);\n+  f_u32(&u32);\n+  f_s32(&s32);\n+  f_b32(&b32);\n+  f_f32(&f32);\n+  f_p16(&p16);\n+  return 0;\n+}"}, {"sha": "a9fc86629928b62c3c9e9269ef4b8b0ab8ce1471", "filename": "gcc/testsuite/gcc.dg/vmx/debug-3.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,75 @@\n+#include <altivec.h>\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+void f_u8(vector unsigned char *p) {\n+  u8 = *p;\n+}\n+void f_s8(vector signed char *p) {\n+  s8 = *p;\n+}\n+void f_b8(vector bool char *p) {\n+  b8 = *p;\n+}\n+void f_u16(vector unsigned short *p) {\n+  u16 = *p;\n+}\n+void f_s16(vector signed short *p) {\n+  s16 = *p;\n+}\n+void f_b16(vector bool short *p) {\n+  b16 = *p;\n+}\n+void f_u32(vector unsigned int *p) {\n+  u32 = *p;\n+}\n+void f_s32(vector signed int *p) {\n+  s32 = *p;\n+}\n+void f_b32(vector bool int *p) {\n+  b32 = *p;\n+}\n+void f_f32(vector float *p) {\n+  f32 = *p;\n+}\n+void f_p16(vector pixel *p) {\n+  p16 = *p;\n+}\n+\n+int main() {\n+  vector unsigned char u8 = ((vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t\t   9, 10,11,12,13,14,15,16});\n+  vector signed char s8 = ((vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t       9, 10,11,12,13,14,15,16});\n+  vector bool char b8 = ((vector bool char){0, -1, 0, -1, 0, 0, 0, 0,\n+\t\t\t\t\t   -1, -1, -1, -1, 0, -1, 0, -1});\n+  vector unsigned short u16 = ((vector unsigned short){1, 2, 3, 4, 5, 6, 7, 8});\n+  vector signed short s16 = ((vector signed short){1, 2, 3, 4, 5, 6, 7, 8});\n+  vector bool short b16 = ((vector bool short){-1, 0, -1, 0, -1, -1, 0, 0});\n+  vector unsigned int u32 = ((vector unsigned int){1, 2, 3, 4});\n+  vector signed int s32 = ((vector signed int){1, 2, 3, 4});\n+  vector bool int b32 = ((vector bool int){0, -1, -1, 0});\n+  vector float f32 = ((vector float){1, 2, 3, 4});\n+  vector pixel p16 = ((vector pixel){1, 2, 3, 4, 5, 6, 7, 8});\n+  f_u8(&u8);\n+  f_s8(&s8);\n+  f_b8(&b8);\n+  f_u16(&u16);\n+  f_s16(&s16);\n+  f_b16(&b16);\n+  f_u32(&u32);\n+  f_s32(&s32);\n+  f_b32(&b32);\n+  f_f32(&f32);\n+  f_p16(&p16);\n+  return 0;\n+}"}, {"sha": "e30ba2674f1c29a965c1ed17a5f58e3b44189ef8", "filename": "gcc/testsuite/gcc.dg/vmx/debug-4.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdebug-4.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,78 @@\n+#include <altivec.h>\n+vector unsigned char u8;\n+vector signed char s8;\n+vector bool char b8;\n+vector unsigned short u16;\n+vector signed short s16;\n+vector bool short b16;\n+vector unsigned int u32;\n+vector signed int s32;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+\n+void f_u8(vector unsigned char *p) {\n+  u8 = vec_add(*p, *p);\n+}\n+void f_s8(vector signed char *p) {\n+  s8 = vec_add(*p, *p);\n+}\n+void f_b8(vector bool char *p) {\n+  b8 = vec_cmpgt(s8, s8);\n+  b8 = vec_xor(b8, *p);\n+}\n+void f_u16(vector unsigned short *p) {\n+  u16 = vec_add(*p, *p);\n+}\n+void f_s16(vector signed short *p) {\n+  s16 = vec_add(*p, *p);\n+}\n+void f_b16(vector bool short *p) {\n+  b16 = vec_cmpgt(s16, s16);\n+  b16 = vec_xor(b16, *p);\n+}\n+void f_u32(vector unsigned int *p) {\n+  u32 = vec_add(*p, *p);\n+}\n+void f_s32(vector signed int *p) {\n+  s32 = vec_add(*p, *p);\n+}\n+void f_b32(vector bool int *p) {\n+  b32 = vec_cmpgt(s32, s32);\n+  b32 = vec_xor(b32, *p);\n+}\n+void f_f32(vector float *p) {\n+  f32 = vec_add(*p, *p);\n+}\n+void f_p16(vector pixel *p) {\n+  p16 = *p;\n+}\n+\n+int main() {\n+  vector unsigned char u8 = ((vector unsigned char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t\t   9, 10,11,12,13,14,15,16});\n+  vector signed char s8 = ((vector signed char){1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t\t       9, 10,11,12,13,14,15,16});\n+  vector bool char b8 = ((vector bool char){0, -1, 0, -1, 0, 0, 0, 0,\n+\t\t\t\t\t   -1, -1, -1, -1, 0, -1, 0, -1});\n+  vector unsigned short u16 = ((vector unsigned short){1, 2, 3, 4, 5, 6, 7, 8});\n+  vector signed short s16 = ((vector signed short){1, 2, 3, 4, 5, 6, 7, 8});\n+  vector bool short b16 = ((vector bool short){-1, 0, -1, 0, -1, -1, 0, 0});\n+  vector unsigned int u32 = ((vector unsigned int){1, 2, 3, 4});\n+  vector signed int s32 = ((vector signed int){1, 2, 3, 4});\n+  vector bool int b32 = ((vector bool int){0, -1, -1, 0});\n+  vector float f32 = ((vector float){1, 2, 3, 4});\n+  vector pixel p16 = ((vector pixel){1, 2, 3, 4, 5, 6, 7, 8});\n+  f_u8(&u8);\n+  f_s8(&s8);\n+  f_b8(&b8);\n+  f_u16(&u16);\n+  f_s16(&s16);\n+  f_b16(&b16);\n+  f_u32(&u32);\n+  f_s32(&s32);\n+  f_b32(&b32);\n+  f_f32(&f32);\n+  f_p16(&p16);\n+  return 0;\n+}"}, {"sha": "dc4c4d3d9bbffbc722f923bd111bd7e5e554c76a", "filename": "gcc/testsuite/gcc.dg/vmx/dos-bug-1-gdb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-1-gdb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-1-gdb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-1-gdb.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,7 @@\n+#include <altivec.h>\n+static vector unsigned int v = {0x01020304,0x05060708,0x21324354,0x65768798};\n+static vector unsigned int f() { return v; }\n+int main() {\n+  vector unsigned int x = f();\n+  return 0;\n+}"}, {"sha": "4ec47b12d2a3a19949d5c8d139560ba1bb03f0b0", "filename": "gcc/testsuite/gcc.dg/vmx/dos-bug-2-gdb.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-2-gdb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-2-gdb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fdos-bug-2-gdb.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,7 @@\n+#include <altivec.h>\n+static vector unsigned int v = {0x01020304,0x05060708,0x21324354,0x65768798};\n+static vector unsigned int f() { return vec_splat(v,0); }\n+int main() {\n+  vector unsigned int x = f();\n+  return 0;\n+}"}, {"sha": "0b37e69d194311d32ee3cf7de1b4a06d71d292c5", "filename": "gcc/testsuite/gcc.dg/vmx/eg-5.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Feg-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Feg-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Feg-5.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,27 @@\n+#include \"harness.h\"\n+\n+static vector float\n+matvecmul4 (vector float c0, vector float c1, vector float c2,\n+\t    vector float c3, vector float v)\n+{\n+  /* Set result to a vector of f32 0's */\n+  vector float result = ((vector float){0.,0.,0.,0.});\n+\n+  result  = vec_madd (c0, vec_splat (v, 0), result);\n+  result  = vec_madd (c1, vec_splat (v, 1), result);\n+  result  = vec_madd (c2, vec_splat (v, 2), result);\n+  result  = vec_madd (c3, vec_splat (v, 3), result);\n+\n+  return result;\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(matvecmul4(((vector float){2,3,5,7}),\n+\t\t\t      ((vector float){11,13,17,19}),\n+\t\t\t      ((vector float){23,29,31,37}),\n+\t\t\t      ((vector float){41,43,47,53}),\n+\t\t\t      ((vector float){59,61,67,71})),\n+\t\t   ((vector float){5241, 5966, 6746, 7814})),\n+\t\"matvecmul4\");\n+}"}, {"sha": "2b8a537c6693ed0e14679744d4473f75bd961638", "filename": "gcc/testsuite/gcc.dg/vmx/fft.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ffft.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ffft.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ffft.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+\n+inline void\n+transpose4x4(vector float *matrix)\n+{\n+  vector float v0, v1, v2, v3;\n+\n+  v0 = vec_mergeh(matrix[0], matrix[2]);\n+  v1 = vec_mergel(matrix[0], matrix[2]);\n+  v2 = vec_mergeh(matrix[1], matrix[3]);\n+  v3 = vec_mergel(matrix[1], matrix[3]);\n+\n+  matrix[0] = vec_mergeh(v0, v2);\n+  matrix[1] = vec_mergel(v0, v2);\n+  matrix[2] = vec_mergeh(v1, v3);\n+  matrix[3] = vec_mergel(v1, v3);\n+}\n+\n+void\n+vec_ifft64(vector float *x0, vector float *x1)\n+{\n+  int i;\n+  vector float real[4], imag[4];\n+  vector float c0r, c1r, c2r, c3r, c0i, c1i, c2i, c3i;\n+  vector float d0r, d1r, d2r, d3r, d0i, d1i, d2i, d3i;\n+\n+  /*\n+   *  N=64\n+   *\n+   *  Stage 1: t=1 => k = 0, j = 0..15\n+   *  ================================\n+   *  for j = 0:15\n+   *    c0 = x0(j+0*16);\n+   *    c1 = x0(j+1*16);\n+   *    c2 = x0(j+2*16);\n+   *    c3 = x0(j+3*16);\n+   *\n+   *    d0 = c0 + c2;\n+   *    d1 = c0 - c2;\n+   *    d2 = c1 + c3;\n+   *    d3 = i*(c1 - c3);\n+   *\n+   *    x1(4j+0) = d0 + d2;\n+   *    x1(4j+1) = d1 + d3;\n+   *    x1(4j+2) = d0 - d2;\n+   *    x1(4j+3) = d1 - d3;\n+   *  end\n+   ******************************************************/\n+\n+  for (i=0; i < 4; i++)\n+    {\n+      c0r = x0[i];\n+      c1r = x0[i+4];\n+      c2r = x0[i+8];\n+      c3r = x0[i+12];\n+\n+      c0i = x0[i+16];\n+      c1i = x0[i+20];\n+      c2i = x0[i+24];\n+      c3i = x0[i+28];\n+\n+      d0r = vec_add(c0r, c2r);\n+      d1r = vec_sub(c0r, c2r);\n+      d2r = vec_add(c1r, c3r);\n+      d3r = vec_sub(c3i, c1i);\n+\n+      d0i = vec_add(c0i, c2i);\n+      d1i = vec_sub(c0i, c2i);\n+      d2i = vec_add(c1i, c3i);\n+      d3i = vec_sub(c1r, c3r);\n+\n+      /* Calculate real{x1} */\n+      real[0] = vec_add(d0r, d2r);\n+      real[1] = vec_add(d1r, d3r);\n+      real[2] = vec_sub(d0r, d2r);\n+      real[3] = vec_sub(d1r, d3r);\n+\n+      transpose4x4(real);\n+\n+      /* Calculate imag{x1} */\n+      imag[0] = vec_add(d0i, d2i);\n+      imag[1] = vec_add(d1i, d3i);\n+      imag[2] = vec_sub(d0i, d2i);\n+      imag[3] = vec_sub(d1i, d3i);\n+\n+      transpose4x4(imag);\n+\n+      x1[4*i]   = real[0];\n+      x1[4*i+1] = real[1];\n+      x1[4*i+2] = real[2];\n+      x1[4*i+3] = real[3];\n+\n+      x1[4*i+16] = imag[0];\n+      x1[4*i+17] = imag[1];\n+      x1[4*i+18] = imag[2];\n+      x1[4*i+19] = imag[3];\n+    }\n+}"}, {"sha": "684ffe90eb7ef7a0ddb3e1212372dbc23422ea5a", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef struct n_a {\n+  signed char m1;\n+  vector float m2;\n+} n_a;\n+\n+typedef struct n_b {\n+  signed char m1;\n+  struct n_a m2;\n+} n_b;\n+\n+extern void f(n_b *);\n+\n+void initn_b(signed char p1, struct n_a p2)\n+{\n+   n_b _i;\n+  ((_i).m1 = p1, (_i).m2 = p2);\n+  f(&_i);\n+}"}, {"sha": "f2f3c4cfe03ee13373852d30123ba575bf1256ba", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef struct n_a {\n+  signed char m1;\n+  vector float m2;\n+} n_a;\n+\n+typedef struct n_b {\n+  signed char m1;\n+  struct n_a m2;\n+} n_b;\n+\n+extern void f(n_b *);\n+\n+void initn_b()\n+{\n+   n_b _i;\n+  f(&_i);\n+}"}, {"sha": "77b2a002f339ac3f854a7632643f9a2d98d0918b", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-3.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+void valuen014(vector float p1, vector float p2, vector float p3,\n+\t       vector float p4, vector float p5, vector float p6,\n+\t       vector float p7, vector float p8, vector float p9,\n+\t       vector float p10, vector float p11, vector float p12,\n+\t       int p13)\n+{\n+}\n+\n+void f()\n+{\n+  valuen014(((vector float) {1.83e+09, 5.73e+08, -2.96e+08, -7.46e+08}),\n+\t    ((vector float) {-2.01e+09, 9.89e+08, -1.92e+09, 2.09e+09}),\n+\t    ((vector float) {1.95e+09, -2.41e+08, 2.67e+08, 1.67e+09}),\n+\t    ((vector float) {-2.12e+09, 8.18e+08, 9.47e+08, -1.25e+09}),\n+\t    ((vector float) {-9.47e+08, -9.3e+08, -1.65e+09, 1.64e+09}),\n+\t    ((vector float) {-7.99e+07, 4.86e+08, -3.4e+06, 3.11e+08}),\n+\t    ((vector float) {1.78e+09, 1.22e+09, -1.27e+09, -3.11e+08}),\n+\t    ((vector float) {1.41e+09, -5.38e+07, -2.08e+09, 1.54e+09}),\n+\t    ((vector float) {3.1e+08, -1.49e+09, 5.38e+08, -1.3e+09}),\n+\t    ((vector float) {9.66e+08, 5.5e+08, 1.75e+08, -8.22e+07}),\n+\t    ((vector float) {-1.72e+08, -2.06e+09, 1.14e+09, -4.64e+08}),\n+\t    ((vector float) {-1.25e+09, 8.12e+07, -2.02e+09, 4.71e+08}), \n+\t    962425441);\n+}"}, {"sha": "f76fbdc6e00bdf64ef254de0f5a3f0589e68fa39", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-4.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-4.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector unsigned int gn00111;\n+int f() { return (int)&gn00111; }\n+"}, {"sha": "0eaa6adb7bdb3625b5203d6aeca1f96ae89732a5", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-5.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-5.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+void valuen014(vector float p1, vector float p2, vector float p3,\n+\t       vector float p4, vector float p5, vector float p6,\n+\t       vector float p7, vector float p8, vector float p9,\n+\t       vector float p10, vector float p11, vector float p12,\n+\t       vector float px)\n+{\n+}\n+\n+void f()\n+{\n+  valuen014(((vector float) {1.83e+09, 5.73e+08, -2.96e+08, -7.46e+08}),\n+\t    ((vector float) {-2.01e+09, 9.89e+08, -1.92e+09, 2.09e+09}),\n+\t    ((vector float) {1.95e+09, -2.41e+08, 2.67e+08, 1.67e+09}),\n+\t    ((vector float) {-2.12e+09, 8.18e+08, 9.47e+08, -1.25e+09}),\n+\t    ((vector float) {-9.47e+08, -9.3e+08, -1.65e+09, 1.64e+09}),\n+\t    ((vector float) {-7.99e+07, 4.86e+08, -3.4e+06, 3.11e+08}),\n+\t    ((vector float) {1.78e+09, 1.22e+09, -1.27e+09, -3.11e+08}),\n+\t    ((vector float) {1.41e+09, -5.38e+07, -2.08e+09, 1.54e+09}),\n+\t    ((vector float) {3.1e+08, -1.49e+09, 5.38e+08, -1.3e+09}),\n+\t    ((vector float) {9.66e+08, 5.5e+08, 1.75e+08, -8.22e+07}),\n+\t    ((vector float) {-1.72e+08, -2.06e+09, 1.14e+09, -4.64e+08}),\n+\t    ((vector float) {-1.25e+09, 8.12e+07, -2.02e+09, 4.71e+08}), \n+\t    ((vector float){1,1,1,1}));\n+}"}, {"sha": "f0a424a2bd546e70b14d88de3c2180419cc16cfd", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-6.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-6.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+void valuen014(vector float p1, vector float p2, vector float p3,\n+\t       vector float p4, vector float p5, vector float p6,\n+\t       vector float p7, vector float p8, vector float p9,\n+\t       vector float p10, vector float p11, vector float p12,\n+\t       vector float px, vector float py, vector float pz,\n+\t       int p13)\n+{\n+}\n+\n+void f()\n+{\n+  valuen014(((vector float) {1.83e+09, 5.73e+08, -2.96e+08, -7.46e+08}),\n+\t    ((vector float) {-2.01e+09, 9.89e+08, -1.92e+09, 2.09e+09}),\n+\t    ((vector float) {1.95e+09, -2.41e+08, 2.67e+08, 1.67e+09}),\n+\t    ((vector float) {-2.12e+09, 8.18e+08, 9.47e+08, -1.25e+09}),\n+\t    ((vector float) {-9.47e+08, -9.3e+08, -1.65e+09, 1.64e+09}),\n+\t    ((vector float) {-7.99e+07, 4.86e+08, -3.4e+06, 3.11e+08}),\n+\t    ((vector float) {1.78e+09, 1.22e+09, -1.27e+09, -3.11e+08}),\n+\t    ((vector float) {1.41e+09, -5.38e+07, -2.08e+09, 1.54e+09}),\n+\t    ((vector float) {3.1e+08, -1.49e+09, 5.38e+08, -1.3e+09}),\n+\t    ((vector float) {9.66e+08, 5.5e+08, 1.75e+08, -8.22e+07}),\n+\t    ((vector float) {-1.72e+08, -2.06e+09, 1.14e+09, -4.64e+08}),\n+\t    ((vector float) {-1.25e+09, 8.12e+07, -2.02e+09, 4.71e+08}), \n+\t    ((vector float){1,1,1,1}), \n+\t    ((vector float){2,2,2,2}), \n+\t    ((vector float){3,3,3,3}), \n+\t    962425441);\n+}"}, {"sha": "452977bbfb388e43a3a9134cfd1562e384ae49ee", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-7.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-7.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern void referencen001(int *p1, int *p2, int *p3, int *p4, int *p5, int *p6, int *p7, vector float *p8);\n+\n+extern int gn0011;\n+\n+extern int gn0012;\n+\n+extern int gn0013;\n+\n+extern int gn0014;\n+\n+extern int gn0015;\n+\n+extern int gn0016;\n+\n+extern int gn0017;\n+\n+extern vector float gn0018;\n+\n+void testn001(void)\n+{\n+  int a1;\n+  int a2;\n+  int a3;\n+  int a4;\n+  int a5;\n+  int a6;\n+  int a7;\n+  vector float a8;\n+\n+  (a1 = -53786696, a2 = -1840132710, a3 = -2130504990, a4 = 1429848501, a5 = 1139248605, a6 = 428762253, a7 = -1581480596, a8 = ((vector float) {1.66e+09, -1.83e+09, -6.79e+08, 1.58e+09}));\n+\n+  referencen001(&a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8);\n+}"}, {"sha": "33d4bd7e63d250cebd353248f567c9b4e31032f2", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-8.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+\n+typedef struct n001 {\n+  signed char m1;\n+  vector float m2;\n+  int m3;\n+  vector signed short m4;\n+  signed char m5;\n+  vector unsigned short m6;\n+} n001;\n+\n+ n001 _i = {-4, {-1.84e+09, -2.13e+09, 1.43e+09, 1.14e+09}, 428762253, {-24132, 25298, -27969, -10358, 24164, -5157, -18143, -6509}, 40, {0x8737, 0xd7cf, 0xb6a7, 0x948f, 0x790b, 0x9255, 0x872d, 0xe72c}};"}, {"sha": "b54338a3bc5351f443ae43ad6253442fb6cac02d", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-9.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-9.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+\n+vector signed short _j =  {-24132, 25298, -27969, -10358, 24164, -5157, -18143, -6509};\n+"}, {"sha": "e893ff1813adcdde45f23105e2d2c44c5e4d899d", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-b.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-b.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector  unsigned char   u8a,  u8b,  u8c,  u8d, *u8ptr;\n+vector  signed short s16a, s16b, s16c, s16d;\n+vector  unsigned short u16a, u16b, u16c, u16d;\n+vector  unsigned int u32a, u32b, u32c, u32d;\n+vector  float f32a, f32b, f32c, f32d, f32e;\n+int i, j, *p;\n+\n+void test()\n+{\n+        u8c  = vec_add(u8a, u8b);\n+        f32c = vec_ceil(f32a);\n+        f32d = vec_vcfux(u32a, 31U);\n+        s16c = vec_splat_s16(-16);\n+        u8d  = vec_vsldoi(u8a, u8b, 15);\n+        f32e = vec_vmaddfp(f32a, f32b, f32c);\n+         \n+        vec_dss(3);\n+        vec_dssall();\n+        vec_mtvscr(u8a);\n+        u16a = vec_mfvscr();\n+}"}, {"sha": "33fed4bd9c14971cbdf1f37f8357383d6ca06f74", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-c.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-c.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector signed short s16ss() { vector signed short a; return vec_subs(a,a); }\n+vector signed short s16s() { vector signed short a; return vec_sub(a,a); }\n+vector signed short s16x() { vector signed short a; return vec_xor(a,a); }\n+vector signed short s16a() { vector signed short a; return vec_andc(a,a); }\n+vector unsigned char u8;\n+vector signed short s16;\n+vector bool int b32;\n+vector float f32;\n+vector pixel p16;\n+void x()\n+{\n+  u8 = ((vector unsigned char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});\n+  s16 = ((vector signed short){-7,-7,-7,-7,-7,-7,-7,-7});\n+  b32 = ((vector bool int) {10,20,30,40});\n+  f32 = ((vector float) {2,4,6,8});\n+  p16 = ((vector pixel){23,23,23,23,23,23,23,23});\n+}\n+vector unsigned int a;\n+vector unsigned int b;\n+void f(void) {\n+  a = ((vector unsigned int){1,1,1,1});\n+  b = ((vector unsigned int){1,2,3,4});\n+}"}, {"sha": "2b2151eec984f08abca7031c9eaa434c2e3f2782", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-d.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-d.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+static void f() {}\n+extern void g() {}\n+extern vector unsigned char permute_128(vector unsigned char);\n+\n+void foo()\n+{\n+  vector unsigned char input\n+    = {0,1,2,4,8,16,32,64,128,0,1,2,4,8,16,32};\n+  vector unsigned char result = permute_128(input);\n+  void (*p)() = f;\n+  void (*q)() = g;\n+}"}, {"sha": "58e4fc3d318ee1c700d9c546b70df4f7aa9506b1", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-e.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-e.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-e.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-e.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,44 @@\n+#include \"harness.h\"\n+\n+typedef struct n_a\n+{\n+  signed char m1;\n+  short m2;\n+  int m3;\n+  double m4;\n+  vector float m5;\n+}\n+n_a;\n+\n+static void\n+initn_a(signed char p1, short p2, int p3, double p4, vector float p5)\n+{\n+  n_a i;\n+  static struct\n+  {\n+    n_a b;\n+    char a;\n+  }\n+  x;\n+\n+  i.m1 = p1;\n+  i.m2 = p2;\n+  i.m3 = p3;\n+  i.m4 = p4;\n+  i.m5 = p5;\n+\n+  check(i.m1 == -17, \"i.m1\");\n+  check(i.m2 == 9165, \"i.m2\");\n+  check(i.m3 == -1857760764, \"i.m3\");\n+  check(i.m4 == 7.3e+18, \"i.m4\");\n+  check(vec_all_eq(i.m5, ((vector float){-5.02e+08,\n+\t\t\t\t\t  -4.34e+08,\n+\t\t\t\t\t  -1.04e+09,\n+\t\t\t\t\t   1.42e+09})), \"i.m5\");\n+}\n+\n+static void test()\n+{\n+  initn_a(-17, 9165, -1857760764, 7.3e+18,\n+\t  ((vector float){-5.02e+08, -4.34e+08, -1.04e+09, 1.42e+09}));\n+}"}, {"sha": "fb61bb15a76eec789d627df939d8102684e26a37", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-f.c", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-f.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-f.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-f.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,125 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef short Word16;\n+typedef int   Word32;\n+typedef int   Flag;\n+\n+extern Flag Overflow;\n+extern Flag Carry;\n+\n+extern vector  signed short table[8];\n+extern vector  signed short slope_cos[8];\n+\n+void Lsf_lsp(\n+  vector  signed short lsfq[],   \n+  vector  signed short lspq[]    \n+)\n+{\n+  vector  signed short Q17_con = ((vector signed short){20861,20861,20861,20861,20861,20861,20861,20861});\n+  vector  unsigned char perm1 = ((vector  unsigned char){0, 8, 1, 9, 2, 10, 3, \n+\t\t\t\t\t\t\t    11, 4, 12, 5 ,13, 6, 14, 7, 15});\n+  vector  unsigned char PerIndex, tmpIndex;\n+  vector  signed short tmp0, tmp1, tmp2, tmp3;\n+  vector  signed short stmp0, stmp1, stmp2, stmp3;\n+  vector  signed short index0, index1, offset0, offset1;\n+  vector  signed short table0, table1, slope0, slope1;\n+  vector  unsigned short select;\n+  vector  signed int L_tmp0, L_tmp1, L_tmp2, L_tmp3;\n+ \n+   \n+  tmp0 = vec_madds(lsfq[0], Q17_con, (((vector signed short){0,0,0,0,0,0,0,0})) );\n+  tmp1 = vec_madds(lsfq[1], Q17_con, (((vector signed short){0,0,0,0,0,0,0,0})) );\n+\n+   \n+  offset0 = vec_and(tmp0, (((vector signed short){0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff})) );\n+  offset1 = vec_and(tmp1, (((vector signed short){0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff})) );\n+  \n+   \n+  index0 = vec_min(vec_sra(tmp0, (((vector unsigned short){8,8,8,8,8,8,8,8})) ), (((vector signed short){63,63,63,63,63,63,63,63})) );\n+  index1 = vec_min(vec_sra(tmp1, (((vector unsigned short){8,8,8,8,8,8,8,8})) ), (((vector signed short){63,63,63,63,63,63,63,63})) );\n+  \n+   \n+   \n+  tmp0 = vec_sl(index0, (vector  unsigned short)((((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = (vector  unsigned char)vec_packs(tmp0, vec_add(tmp0, (((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = vec_perm(PerIndex, PerIndex, perm1);\n+  \n+    \n+  tmp0 = vec_perm(table[0], table[1], PerIndex);\n+  stmp0 = vec_perm(slope_cos[0], slope_cos[1], PerIndex);\n+\n+  tmpIndex = vec_sub(PerIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[2], table[3], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[2], slope_cos[3], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31})) );\n+  tmp2 = vec_sel(tmp0, tmp1, select);\n+  stmp2 = vec_sel(stmp0, stmp1, select);\n+\n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp0 = vec_perm(table[4], table[5], tmpIndex);\n+  stmp0 = vec_perm(slope_cos[4], slope_cos[5], tmpIndex);\n+  \n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[6], table[7], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[6], slope_cos[7], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95})) );\n+  tmp3 = vec_sel(tmp0, tmp1, select);\n+  stmp3 = vec_sel(stmp0, stmp1, select);\n+  \n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63})) );\n+  table0 = vec_sel(tmp2, tmp3, select);\n+  slope0 = vec_sel(stmp2, stmp3, select);\n+\n+  tmp0 = vec_sl(index1, (vector  unsigned short)((((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = (vector  unsigned char)vec_packs(tmp0, vec_add(tmp0, (((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = vec_perm(PerIndex, PerIndex, perm1);\n+\n+   \n+  tmp0 = vec_perm(table[0], table[1], PerIndex);\n+  stmp0 = vec_perm(slope_cos[0], slope_cos[1], PerIndex);\n+\n+  tmpIndex = vec_sub(PerIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[2], table[3], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[2], slope_cos[3], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31})) );\n+  tmp2 = vec_sel(tmp0, tmp1, select);\n+  stmp2 = vec_sel(stmp0, stmp1, select);\n+\n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp0 = vec_perm(table[4], table[5], tmpIndex);\n+  stmp0 = vec_perm(slope_cos[4], slope_cos[5], tmpIndex);\n+  \n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[6], table[7], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[6], slope_cos[7], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95})) );\n+  tmp3 = vec_sel(tmp0, tmp1, select);\n+  stmp3 = vec_sel(stmp0, stmp1, select);\n+  \n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63})) );\n+  table1 = vec_sel(tmp2, tmp3, select);\n+  slope1 = vec_sel(stmp2, stmp3, select);\n+\n+\n+   \n+  L_tmp0 = vec_sra(vec_mule(slope0, offset0), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp1 = vec_sra(vec_mulo(slope0, offset0), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp2 = vec_sra(vec_mule(slope1, offset1), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp3 = vec_sra(vec_mulo(slope1, offset1), (((vector unsigned int){12,12,12,12})) );\n+\n+  \n+  tmp0 = vec_packs(L_tmp0, L_tmp2);\n+  tmp1 = vec_packs(L_tmp1, L_tmp3);\n+  tmp2 = vec_mergeh(tmp0, tmp1);\n+  tmp3 = vec_mergel(tmp0, tmp1);\n+  \n+   \n+  lspq[0] = vec_adds(table0, tmp2);\n+  lspq[1] = vec_adds(table1, tmp3);\n+\n+  return;\n+}"}, {"sha": "573a73b356c6fc0803d9f882d42fdc4ad4a58da3", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-g.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-g.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-g.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-g.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+extern vector  signed short table[8];\n+extern vector  signed short slope_cos[8];\n+extern vector  signed short slope_acos[8];\n+\n+void Lsf_lsp(\n+  vector  signed short lsfq[],   \n+  vector  signed short lspq[]    \n+)\n+{\n+  vector  signed short Q17_con = ((vector signed short){20861,20861,20861,20861,20861,20861,20861,20861});\n+  vector  unsigned char perm1 = ((vector  unsigned char){0, 8, 1, 9, 2, 10, 3, \n+  \t\t\t\t\t\t\t\t\t\t\t11, 4, 12, 5 ,13, 6, 14, 7, 15});\n+  vector  unsigned char PerIndex, tmpIndex;\n+  vector  signed short tmp0, tmp1, tmp2, tmp3;\n+  vector  signed short stmp0, stmp1, stmp2, stmp3;\n+  vector  signed short index0, index1, offset0, offset1;\n+  vector  signed short table0, table1, slope0, slope1;\n+  vector  unsigned short select;\n+  vector  signed int L_tmp0, L_tmp1, L_tmp2, L_tmp3;\n+ \n+   \n+  tmp0 = vec_madds(lsfq[0], Q17_con, (((vector signed short){0,0,0,0,0,0,0,0})) );\n+  tmp1 = vec_madds(lsfq[1], Q17_con, (((vector signed short){0,0,0,0,0,0,0,0})) );\n+\n+   \n+  offset0 = vec_and(tmp0, (((vector signed short){0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff})) );\n+  offset1 = vec_and(tmp1, (((vector signed short){0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff,0x00ff})) );\n+  \n+   \n+  index0 = vec_min(vec_sra(tmp0, (((vector unsigned short){8,8,8,8,8,8,8,8})) ), (((vector signed short){63,63,63,63,63,63,63,63})) );\n+  index1 = vec_min(vec_sra(tmp1, (((vector unsigned short){8,8,8,8,8,8,8,8})) ), (((vector signed short){63,63,63,63,63,63,63,63})) );\n+  \n+   \n+   \n+  tmp0 = vec_sl(index0, (vector  unsigned short)((((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = (vector  unsigned char)vec_packs(tmp0, vec_add(tmp0, (((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = vec_perm(PerIndex, PerIndex, perm1);\n+  \n+    \n+  tmp0 = vec_perm(table[0], table[1], PerIndex);\n+  stmp0 = vec_perm(slope_cos[0], slope_cos[1], PerIndex);\n+\n+  tmpIndex = vec_sub(PerIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[2], table[3], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[2], slope_cos[3], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31})) );\n+  tmp2 = vec_sel(tmp0, tmp1, select);\n+  stmp2 = vec_sel(stmp0, stmp1, select);\n+\n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp0 = vec_perm(table[4], table[5], tmpIndex);\n+  stmp0 = vec_perm(slope_cos[4], slope_cos[5], tmpIndex);\n+  \n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[6], table[7], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[6], slope_cos[7], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95})) );\n+  tmp3 = vec_sel(tmp0, tmp1, select);\n+  stmp3 = vec_sel(stmp0, stmp1, select);\n+  \n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63})) );\n+  table0 = vec_sel(tmp2, tmp3, select);\n+  slope0 = vec_sel(stmp2, stmp3, select);\n+\n+  tmp0 = vec_sl(index1, (vector  unsigned short)((((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = (vector  unsigned char)vec_packs(tmp0, vec_add(tmp0, (((vector signed short){1,1,1,1,1,1,1,1})) ));\n+  PerIndex = vec_perm(PerIndex, PerIndex, perm1);\n+\n+   \n+  tmp0 = vec_perm(table[0], table[1], PerIndex);\n+  stmp0 = vec_perm(slope_cos[0], slope_cos[1], PerIndex);\n+\n+  tmpIndex = vec_sub(PerIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[2], table[3], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[2], slope_cos[3], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31})) );\n+  tmp2 = vec_sel(tmp0, tmp1, select);\n+  stmp2 = vec_sel(stmp0, stmp1, select);\n+\n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp0 = vec_perm(table[4], table[5], tmpIndex);\n+  stmp0 = vec_perm(slope_cos[4], slope_cos[5], tmpIndex);\n+  \n+  tmpIndex = vec_sub(tmpIndex, (((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32})) );\n+  tmp1 = vec_perm(table[6], table[7], tmpIndex);\n+  stmp1 = vec_perm(slope_cos[6], slope_cos[7], tmpIndex);\n+\n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95})) );\n+  tmp3 = vec_sel(tmp0, tmp1, select);\n+  stmp3 = vec_sel(stmp0, stmp1, select);\n+  \n+  select = (vector  unsigned short)vec_cmpgt(PerIndex, (((vector unsigned char){63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63})) );\n+  table1 = vec_sel(tmp2, tmp3, select);\n+  slope1 = vec_sel(stmp2, stmp3, select);\n+\n+\n+   \n+  L_tmp0 = vec_sra(vec_mule(slope0, offset0), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp1 = vec_sra(vec_mulo(slope0, offset0), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp2 = vec_sra(vec_mule(slope1, offset1), (((vector unsigned int){12,12,12,12})) );\n+  L_tmp3 = vec_sra(vec_mulo(slope1, offset1), (((vector unsigned int){12,12,12,12})) );\n+\n+  \n+  tmp0 = vec_packs(L_tmp0, L_tmp2);\n+  tmp1 = vec_packs(L_tmp1, L_tmp3);\n+  tmp2 = vec_mergeh(tmp0, tmp1);\n+  tmp3 = vec_mergel(tmp0, tmp1);\n+  \n+   \n+  lspq[0] = vec_adds(table0, tmp2);\n+  lspq[1] = vec_adds(table1, tmp3);\n+\n+  return;\n+}"}, {"sha": "58ccb3fe763d2dcd2be85354425251581fd1f695", "filename": "gcc/testsuite/gcc.dg/vmx/gcc-bug-i.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-i.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-i.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fgcc-bug-i.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,42 @@\n+#include \"harness.h\"\n+\n+/* This problem occurs if a function is inlined.  When its local\n+   variables get allocated space on the caller's (the function to\n+   which it is inlined) stack frame, they don't get 16-byte alignment\n+   even if they need it.  Here's an example with a union (that's the\n+   first case I uncovered, but it's probably a general occurrence on\n+   inlining).  */\n+\n+#define N 10\n+/* adjust N = size of buffer to try to get bad alignment for inlined union */\n+\n+#define DO_INLINE __attribute__ ((always_inline))\n+#define DONT_INLINE __attribute__ ((noinline))\n+\n+static DO_INLINE int inline_me(vector signed short data) \n+{\n+  union {vector signed short v; signed short s[8];} u;\n+  u.v = data;\n+  return u.s[7];\n+}\n+\n+static DONT_INLINE int foo(vector signed short data)\n+{\n+  int c, buffer[N], i;\n+  c = inline_me(data);\n+  for (i=0; i<N; i++) {\n+    if (i == 0)\n+      buffer[i] = c;\n+    else\n+      buffer[i] = buffer[i-1] + c*i;\n+  }\n+  return buffer[N-1];\n+}\n+\n+static void test()\n+{\n+  check(foo((vector signed short)\n+\t    ((vector unsigned char){1,2,3,4,5,6,7,8,\n+\t\t\t\t   9,10,11,12,13,14,15,16})) == 0x2b4e0,\n+\t\"foo\");\n+}"}, {"sha": "faea3e97dba9d3fcadd4efc0e1fc208f84c572ac", "filename": "gcc/testsuite/gcc.dg/vmx/harness.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fharness.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fharness.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fharness.h?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,30 @@\n+/* Common code for most VMX test cases.  To use, include this file,\n+   then write a routine named test() that performs a series of calls\n+   to check().  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <altivec.h>\n+\n+static int failed;\n+static void test (void);\n+\n+static void\n+check (int result, const char *name)\n+{\n+  if (!result)\n+    {\n+      failed++;\n+      printf (\"fail %s\\n\", name);\n+    }\n+}\n+    \n+int\n+main (void)\n+{\n+  test ();\n+  if (failed)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "eee2869121dbf62d4772db9974f0d3355b0e3379", "filename": "gcc/testsuite/gcc.dg/vmx/ira1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,10 @@\n+#include <altivec.h>\n+#include <stdlib.h>\n+vector unsigned char u8a, u8b;\n+\n+int main()\n+{\n+  if (!vec_all_eq(u8a, u8b))\n+    abort ();\n+  return 0;\n+}"}, {"sha": "cf2248097fb0044e05f2dab1b2aa5fa5e79fc31e", "filename": "gcc/testsuite/gcc.dg/vmx/ira2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+vector unsigned char u8a,  u8b,  u8c,  u8d, *u8ptr;\n+vector signed short s16a, s16b, s16c, s16d;\n+vector unsigned short u16a, u16b, u16c, u16d;\n+vector unsigned int u32a, u32b, u32c, u32d;\n+vector float f32a, f32b, f32c, f32d, f32e;\n+int i, j, *p;\n+\n+void test()\n+{\n+  u8c  = vec_add(u8a, u8b);\n+  f32c = vec_ceil(f32a);\n+  f32d = vec_vcfux(u32a, 31U);\n+  s16c = vec_splat_s16(-16);\n+  u8d  = vec_vsldoi(u8a, u8b, 15);\n+  f32e = vec_vmaddfp(f32a, f32b, f32c);\n+  /* vec_dstst(u8ptr, i, 3U); */\n+  vec_dss(3);\n+  vec_dssall();\n+  vec_mtvscr(u8a);\n+  u16a = vec_mfvscr();\n+}"}, {"sha": "e6a716d6fe92fe2ebc8f3bb50ac56bdbc2881880", "filename": "gcc/testsuite/gcc.dg/vmx/ira2a.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2a.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,9 @@\n+#include <altivec.h>\n+vector unsigned char  *u8ptr;\n+int i;\n+\n+int main()\n+{\n+  vec_dstst(u8ptr, i, 3U);\n+  return 0;\n+}"}, {"sha": "d9a33f2dd03e7494de6d69a99c7c4ffcf82962b2", "filename": "gcc/testsuite/gcc.dg/vmx/ira2b.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2b.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,17 @@\n+#include \"harness.h\"\n+\n+static vector float\n+f(vector float f32a, vector float f32b, vector float f32c)\n+{\n+  f32c = vec_ceil(f32a);\n+  return vec_vmaddfp(f32a, f32b, f32c);\n+}\n+\n+static void test()\n+{\n+  check(vec_all_eq(f(((vector float){2,3,5,7}),\n+\t\t     ((vector float){11,13,17,19}),\n+\t\t     ((vector float){23,29,31,37})),\n+\t\t   ((vector float){24, 42, 90, 140})),\n+\t\"test\");\n+}"}, {"sha": "bce5469ceaa886e37bc096d2d02912bf0c7a7b23", "filename": "gcc/testsuite/gcc.dg/vmx/ira2c.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fira2c.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+\n+double __fabs(double a) { return a; }\n+double __fmadd(double a, double b, double c) { return a*b+c; }\n+\n+double\n+test(double f32a, double f32b, double f32c)\n+{\n+  f32c = __fabs(f32a);\n+  return __fmadd(f32a, f32b, f32c);\n+}"}, {"sha": "a26eb3cfc655381a5ad1f189a9bcb0a5df1ecaf0", "filename": "gcc/testsuite/gcc.dg/vmx/mem.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fmem.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+void\n+f(vector unsigned char *a, vector unsigned char *b, vector unsigned char *c)\n+{\n+  int i;\n+  for (i = 0; i < 16; i++)\n+    c[i] = vec_add(a[i], b[i]);\n+}"}, {"sha": "c5963c03447d98310dfc6a30f31fed8e59afad4f", "filename": "gcc/testsuite/gcc.dg/vmx/newton-1.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fnewton-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fnewton-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fnewton-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,67 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+                 \n+#define SPLAT76 ((vector unsigned char)\\\n+                 {0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3})\n+#define SPLAT54 ((vector unsigned char)\\\n+                 {4,5,6,7,4,5,6,7,4,5,6,7,4,5,6,7})\n+#define SPLAT32 ((vector unsigned char)\\\n+                 {8,9,10,11,8,9,10,11,8,9,10,11,8,9,10,11})\n+#define SPLAT10 ((vector unsigned char)\\\n+                 {12,13,14,15,12,13,14,15,12,13,14,15,12,13,14,15})\n+#define INTERLEAVE ((vector unsigned char)\\\n+                    {0,1,16,17,4,5,20,21,8,9,24,25,12,13,28,29})\n+\n+long real_32_manytaps (long ntaps, vector signed short *c, long ndat,\n+                       vector signed short *x, vector signed short *y)\n+{\n+  long i, j, op, ndatavec, ncoefvec;\n+  vector signed short x0, x1;\n+  vector signed short coef;\n+  vector signed short cr10, cr32, cr54, cr76;\n+  vector signed int y_even, y_odd;\n+  vector signed short *x1p;\n+\n+  op = 0;\n+  ndatavec = ndat >> 3;\n+  ncoefvec = ntaps >> 3;\n+\n+  for (i = 0; i < ndatavec; i += 1) {\n+    x0 = x[i];\n+        \n+    y_even = ((vector signed int){0x8000,0x8000,0x8000,0x8000});\n+    y_odd = ((vector signed int){0x8000,0x8000,0x8000,0x8000});\n+        \n+    j = 0;\n+    x1p = x + 1 + i;\n+      \n+    do {\n+ \n+      coef = c[j];\n+      x1 = x1p[j];\n+    \n+      cr10 = vec_perm(coef, coef, SPLAT10);\n+      y_odd = vec_msums(cr10, x1, y_odd);\n+      y_even = vec_msums(cr10, vec_sld(x0, x1, 14), y_even);\n+\n+      cr32 = vec_perm(coef, coef, SPLAT32);\n+      y_odd = vec_msums(cr32, vec_sld(x0, x1, 12), y_odd);       \n+      y_even = vec_msums(cr32, vec_sld(x0, x1, 10), y_even);\n+\n+      cr54 = vec_perm(coef, coef, SPLAT54);\n+      y_odd = vec_msums(cr54, vec_sld(x0, x1, 8), y_odd);        \n+      y_even = vec_msums(cr54, vec_sld(x0, x1, 6), y_even);\n+\n+      cr76 = vec_perm(coef, coef, SPLAT76);\n+      y_odd = vec_msums(cr76, vec_sld(x0, x1, 4), y_odd);       \n+      y_even = vec_msums(cr76, vec_sld(x0, x1, 2), y_even);\n+\n+      x0 = x1;\n+\n+    } while (++j < ncoefvec);\n+    y[op++] = (vector signed short) vec_perm(y_even, y_odd, INTERLEAVE);\n+\n+  }\n+\n+  return op*8;\n+}"}, {"sha": "5be0588ccc086066d719159884072a38486d5988", "filename": "gcc/testsuite/gcc.dg/vmx/ops.c", "status": "added", "additions": 3893, "deletions": 0, "changes": 3893, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fops.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535"}, {"sha": "a498a8620069149be2a46b7201bffe4c06076fe4", "filename": "gcc/testsuite/gcc.dg/vmx/sn7153.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsn7153.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsn7153.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fsn7153.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,62 @@\n+/* In the source code, the vec_adds appears before the call to\n+   validate_sat().  In the .s code, the vaddubs has been moved to after\n+   the call to validate_sat().  This invalidates the meaning of checking\n+   the saturation bit.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <altivec.h>\n+\n+static int failed;\n+\n+void validate_sat();\n+void validate_u8(vector unsigned char, vector unsigned char);\n+\n+int\n+main()\n+{\n+  vector unsigned char result_u8;\n+  vec_mtvscr(((vector unsigned short){0,0,0,0,0,0,0,0}));\n+  result_u8 = vec_adds(((vector unsigned\n+\t\t\tchar){0,1,2,3,0xfc,0xfd,0xfe,0xff,\n+\t\t\t      0,1,2,3,0xfc,0xfd,0xfe,0xff}),\n+\t\t       ((vector unsigned\n+\t\t\tchar){0,0xf0,0xfd,0xfd,2,2,2,2,0,\n+\t\t\t      0xf0,0xfd,0xfd,2,2,2,2}));\n+  validate_sat();\n+  validate_u8(result_u8, ((vector unsigned\n+\t\t\t  char){0,0xf1,0xff,0xff,0xfe,0xff,0xff,0xff,\n+\t\t\t\t  0,0xf1,0xff,0xff,0xfe,0xff,0xff,0xff}));\n+  if (failed)\n+    abort ();\n+  return 0;\n+}\n+\n+void validate_sat()\n+{\n+  if (vec_any_ne(vec_splat(vec_mfvscr(), 7), ((vector unsigned short){1,1,1,1,1,1,1,1})))\n+    {\n+      union {vector unsigned short v; unsigned short s[8];} u;\n+      u.v = vec_mfvscr();\n+      printf(\"error: vscr == { %d,%d,%d,%d,%d,%d,%d,%d }\",\n+\t     u.s[0], u.s[1], u.s[2], u.s[3],\n+\t     u.s[4], u.s[5], u.s[6], u.s[7]);\n+      printf(\"expected { 1,1,1,1,1,1,1,1 }\\n\");\n+      failed++;\n+    }\n+}\n+\n+void validate_u8(vector unsigned char v, vector unsigned char vx)\n+{\n+  union {vector unsigned char v; unsigned char x[16]; } u, ux;\n+  int i;\n+  u.v = v;\n+  ux.v = vx;\n+  for (i=0; i<16; i++) {\n+    if (u.x[i] != ux.x[i]) {\n+      printf(\" error: field %d %#2.2x expected %#2.2x\\n\",\n+             i, u.x[i], ux.x[i]);\n+      failed++;\n+    }\n+  }\n+}"}, {"sha": "dad489c34779eeab48054218269e7a9e862e3a9d", "filename": "gcc/testsuite/gcc.dg/vmx/spill.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,131 @@\n+#include <altivec.h>\n+extern vector unsigned char u8(void);\n+extern vector signed char s8(void);\n+extern vector bool char b8(void);\n+extern vector unsigned short u16(void);\n+extern vector signed short s16(void);\n+extern vector bool short b16(void);\n+extern vector unsigned int u32(void);\n+extern vector signed int s32(void);\n+extern vector bool int b32(void);\n+extern vector float f32(void);\n+extern vector pixel p16(void);\n+\n+extern void g(vector unsigned char, ...);\n+\n+void f()\n+{\n+  vector unsigned char u8l = u8();\n+  vector signed char s8l = s8();\n+  vector bool char b8l = b8();\n+  vector unsigned short u16l = u16();\n+  vector signed short s16l = s16();\n+  vector bool short b16l = b16();\n+  vector unsigned int u32l = u32();\n+  vector signed int s32l = s32();\n+  vector bool int b32l = b32();\n+  vector float f32l = f32();\n+  vector pixel p16l = p16();\n+  vector unsigned char u8lx = u8();\n+  vector signed char s8lx = s8();\n+  vector bool char b8lx = b8();\n+  vector unsigned short u16lx = u16();\n+  vector signed short s16lx = s16();\n+  vector bool short b16lx = b16();\n+  vector unsigned int u32lx = u32();\n+  vector signed int s32lx = s32();\n+  vector bool int b32lx = b32();\n+  vector float f32lx = f32();\n+  vector pixel p16lx = p16();\n+\n+  g(u8l, s8l, b8l, u16l, s16l, b16l, u32l, s32l, b32l, f32l, p16l,\n+    u8lx, s8lx, b8lx, u16lx, s16lx, b16lx, u32lx, s32lx, b32lx, f32lx, p16lx);\n+}\n+\n+vector unsigned char\n+u8(void)\n+{\n+  static vector unsigned char zero;\n+  return zero;\n+}\n+\n+vector signed char\n+s8(void)\n+{\n+  static vector signed char zero;\n+  return zero;\n+}\n+\n+vector bool char\n+b8(void)\n+{\n+  static vector bool char zero;\n+  return zero;\n+}\n+\n+vector unsigned short\n+u16(void)\n+{\n+  static vector unsigned short zero;\n+  return zero;\n+}\n+\n+vector signed short\n+s16(void)\n+{\n+  static vector signed short zero;\n+  return zero;\n+}\n+\n+vector bool short\n+b16(void)\n+{\n+  static vector bool short zero;\n+  return zero;\n+}\n+\n+vector unsigned int\n+u32(void)\n+{\n+  static vector unsigned int zero;\n+  return zero;\n+}\n+\n+vector signed int\n+s32(void)\n+{\n+  static vector signed int zero;\n+  return zero;\n+}\n+\n+vector bool int\n+b32(void)\n+{\n+  static vector bool int zero;\n+  return zero;\n+}\n+\n+vector float\n+f32(void)\n+{\n+  static vector float zero;\n+  return zero;\n+}\n+\n+vector pixel\n+p16(void)\n+{\n+  static vector pixel zero;\n+  return zero;\n+}\n+\n+void\n+g(vector unsigned char a, ...)\n+{\n+}\n+\n+int main()\n+{\n+  f();\n+  return 0; \n+}"}, {"sha": "4c7337bd08a76b26e48b63d623634a8e64e8f55d", "filename": "gcc/testsuite/gcc.dg/vmx/spill2.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,155 @@\n+#include <altivec.h>\n+extern vector unsigned char u8(void);\n+extern vector signed char s8(void);\n+extern vector bool char b8(void);\n+extern vector unsigned short u16(void);\n+extern vector signed short s16(void);\n+extern vector bool short b16(void);\n+extern vector unsigned int u32(void);\n+extern vector signed int s32(void);\n+extern vector bool int b32(void);\n+extern vector float f32(void);\n+extern vector pixel p16(void);\n+extern double d(void);\n+extern int i(void);\n+\n+extern void g(vector unsigned char, ...);\n+\n+void f()\n+{\n+  int i1l = i();\n+  vector unsigned char u8l = u8();\n+  vector signed char s8l = s8();\n+  vector bool char b8l = b8();\n+  int i2l = i();\n+  vector unsigned short u16l = u16();\n+  vector signed short s16l = s16();\n+  vector bool short b16l = b16();\n+  int i3l = i();\n+  vector unsigned int u32l = u32();\n+  vector signed int s32l = s32();\n+  vector bool int b32l = b32();\n+  double d1l = d();\n+  vector float f32l = f32();\n+  vector pixel p16l = p16();\n+  double d2l = d();\n+  vector unsigned char u8lx = u8();\n+  vector signed char s8lx = s8();\n+  vector bool char b8lx = b8();\n+  vector unsigned short u16lx = u16();\n+  vector signed short s16lx = s16();\n+  vector bool short b16lx = b16();\n+  vector unsigned int u32lx = u32();\n+  vector signed int s32lx = s32();\n+  vector bool int b32lx = b32();\n+  vector float f32lx = f32();\n+  vector pixel p16lx = p16();\n+\n+  if (i1l)\n+    g(u8l, s8l, b8l, u16l, s16l, b16l, u32l, s32l, b32l, f32l, p16l,\n+      u8lx, s8lx, b8lx, u16lx, s16lx, b16lx, u32lx, s32lx, b32lx, f32lx, p16lx,\n+      i1l, i2l, i3l, d1l, d2l);\n+  g(u8l, i1l, i2l, i3l, d1l, d2l);\n+}\n+\n+double\n+d(void)\n+{\n+  static double zero;\n+  return zero;\n+}\n+\n+int\n+i(void)\n+{\n+  static int non_zero;\n+  return ++non_zero;\n+}\n+\n+vector unsigned char\n+u8(void)\n+{\n+  static vector unsigned char zero;\n+  return zero;\n+}\n+\n+vector signed char\n+s8(void)\n+{\n+  static vector signed char zero;\n+  return zero;\n+}\n+\n+vector bool char\n+b8(void)\n+{\n+  static vector bool char zero;\n+  return zero;\n+}\n+\n+vector unsigned short\n+u16(void)\n+{\n+  static vector unsigned short zero;\n+  return zero;\n+}\n+\n+vector signed short\n+s16(void)\n+{\n+  static vector signed short zero;\n+  return zero;\n+}\n+\n+vector bool short\n+b16(void)\n+{\n+  static vector bool short zero;\n+  return zero;\n+}\n+\n+vector unsigned int\n+u32(void)\n+{\n+  static vector unsigned int zero;\n+  return zero;\n+}\n+\n+vector signed int\n+s32(void)\n+{\n+  static vector signed int zero;\n+  return zero;\n+}\n+\n+vector bool int\n+b32(void)\n+{\n+  static vector bool int zero;\n+  return zero;\n+}\n+\n+vector float\n+f32(void)\n+{\n+  static vector float zero;\n+  return zero;\n+}\n+\n+vector pixel\n+p16(void)\n+{\n+  static vector pixel zero;\n+  return zero;\n+}\n+\n+void\n+g(vector unsigned char a, ...)\n+{\n+}\n+\n+int main() \n+{\n+  f();\n+  return 0;\n+}"}, {"sha": "9f1c45c65b541c016e127845bbc901b17199deb8", "filename": "gcc/testsuite/gcc.dg/vmx/spill3.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fspill3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,156 @@\n+#include <altivec.h>\n+extern void g(vector unsigned char, ...);\n+extern vector unsigned char v(void);\n+extern double d(void);\n+extern int i(void);\n+\n+static vector unsigned char v1l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v2l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v3l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v4l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v5l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v6l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v7l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v8l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v9l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v10l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v11l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static vector unsigned char v12l = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n+static double d1l = 0;\n+static double d2l = 0;\n+static double d3l = 0;\n+static double d4l = 0;\n+static double d5l = 0;\n+static double d6l = 0;\n+static double d7l = 0;\n+static double d8l = 0;\n+static double d9l = 0;\n+static double d10l = 0;\n+static double d11l = 0;\n+static double d12l = 0;\n+static double d13l = 0;\n+static double d14l = 0;\n+static double d15l = 0;\n+static double d16l = 0;\n+static double d17l = 0;\n+static double d18l = 0;\n+static int i1l = 0;\n+static int i2l = 0;\n+static int i3l = 0;\n+static int i4l = 0;\n+static int i5l = 0;\n+static int i6l = 0;\n+static int i7l = 0;\n+static int i8l = 0;\n+static int i9l = 0;\n+static int i10l = 0;\n+static int i11l = 0;\n+static int i12l = 0;\n+static int i13l = 0;\n+static int i14l = 0;\n+static int i15l = 0;\n+static int i16l = 0;\n+static int i17l = 0;\n+static int i18l = 0;\n+static int i19l = 0;\n+\n+void f()\n+{\n+  char buffer[23];\n+  vector unsigned char v1l = v();\n+  vector unsigned char v2l = v();\n+  vector unsigned char v3l = v();\n+  vector unsigned char v4l = v();\n+  vector unsigned char v5l = v();\n+  vector unsigned char v6l = v();\n+  vector unsigned char v7l = v();\n+  vector unsigned char v8l = v();\n+  vector unsigned char v9l = v();\n+  vector unsigned char v10l = v();\n+  vector unsigned char v11l = v();\n+  vector unsigned char v12l = v();\n+\n+  double d1l = d();\n+  double d2l = d();\n+  double d3l = d();\n+  double d4l = d();\n+  double d5l = d();\n+  double d6l = d();\n+  double d7l = d();\n+  double d8l = d();\n+  double d9l = d();\n+  double d10l = d();\n+  double d11l = d();\n+  double d12l = d();\n+  double d13l = d();\n+  double d14l = d();\n+  double d15l = d();\n+  double d16l = d();\n+  double d17l = d();\n+  double d18l = d();\n+\n+  int i1l = i();\n+  int i2l = i();\n+  int i3l = i();\n+  int i4l = i();\n+  int i5l = i();\n+  int i6l = i();\n+  int i7l = i();\n+  int i8l = i();\n+  int i9l = i();\n+  int i10l = i();\n+  int i11l = i();\n+  int i12l = i();\n+  int i13l = i();\n+  int i14l = i();\n+  int i15l = i();\n+  int i16l = i();\n+  int i17l = i();\n+  int i18l = i();\n+  int i19l = i();\n+\n+  if (d1l)\n+    g(v1l, v2l, v3l, v4l, v5l, v6l, v7l, v8l, v9l, v10l, v11l, v12l,\n+      d1l, d2l, d3l, d4l, d5l, d6l, d7l, d8l, d9l, d10l, d11l, d12l,\n+      d13l, d14l, d15l, d16l, d17l, d18l,\n+      i1l, i2l, i3l, i4l, i5l, i6l, i7l, i8l, i9l, i10l, i11l, i12l,\n+      i13l, i14l, i15l, i16l, i17l, i18l, i19l);\n+\n+  g(v1l, buffer,\n+    d1l, d2l, d3l, d4l, d5l, d6l, d7l, d8l, d9l, d10l, d11l, d12l,\n+    d13l, d14l, d15l, d16l, d17l, d18l,\n+    i1l, i2l, i3l, i4l, i5l, i6l, i7l, i8l, i9l, i10l, i11l, i12l,\n+    i13l, i14l, i15l, i16l, i17l, i18l, i19l);\n+}\n+\n+double\n+d(void)\n+{\n+  static double zero;\n+  return zero;\n+}\n+\n+int\n+i(void)\n+{\n+  static int non_zero;\n+  return ++non_zero;\n+}\n+\n+vector unsigned char\n+v(void)\n+{\n+  static vector unsigned char zero;\n+  return zero;\n+}\n+\n+void\n+g(vector unsigned char a, ...)\n+{\n+}\n+\n+int main() \n+{\n+  f();\n+  return 0;\n+}"}, {"sha": "3a7d5a94ae7ff8059f773d960b6f7d0704845a80", "filename": "gcc/testsuite/gcc.dg/vmx/t.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ft.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ft.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Ft.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+#include <altivec.h>\n+typedef\tunsigned long\tsize_t;\n+vector signed int T_vec_s32;\n+void *T_void_ptr;\n+const void *T_const_void_ptr;\n+size_t T_size_t;\n+char *T_char_ptr;\n+vector signed short T_vec_s16;\n+vector signed char T_vec_s8;\n+vector unsigned short T_vec_u16;\n+vector unsigned int T_vec_u32;\n+vector unsigned char T_vec_u8;\n+vector float T_vec_f32;\n+int T_int;\n+float *T_float_ptr;\n+void f(void);\n+short *T_short_ptr;\n+vector signed short *T_vec_s16_ptr;\n+int *T_int_ptr;\n+vector signed int *T_vec_s32_ptr;\n+signed char *T_signed_char_ptr;\n+vector signed char *T_vec_s8_ptr;\n+unsigned short *T_unsigned_short_ptr;\n+vector unsigned short *T_vec_u16_ptr;\n+unsigned int *T_unsigned_int_ptr;\n+vector unsigned int *T_vec_u32_ptr;\n+unsigned char *T_unsigned_char_ptr;\n+vector unsigned char *T_vec_u8_ptr;\n+double T_double;\n+int T_intb;\n+vector bool short *T_vec_b16_ptr;\n+vector bool int *T_vec_b32_ptr;\n+vector bool char *T_vec_b8_ptr;\n+vector float *T_vec_f32_ptr;\n+vector pixel *T_vec_p16_ptr;\n+vector bool short T_vec_b16;\n+vector pixel T_vec_p16;\n+vector bool int T_vec_b32;\n+vector bool char T_vec_b8;\n+float T_float;\n+volatile void g(void);\n+const char *T_const_char_ptr;"}, {"sha": "0d4227a46e86b522b41a489b43f3a305f2785187", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-1.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,96 @@\n+#include <altivec.h>\n+#include <stdarg.h>\n+#include <stdio.h>\n+\n+typedef vector unsigned int T;\n+\n+extern void f1(int, ...);\n+extern void f2(int, T, ...);\n+extern void f3(int, T, T, ...);\n+extern void f4(int, T, T, T);\n+\n+void printx(T a)\n+{\n+  union {\n+    T v;\n+    unsigned long a[4];\n+  } u;\n+  u.v = a;\n+  printf(\"%ld, %ld, %ld, %ld\\n\", u.a[0], u.a[1], u.a[2], u.a[3]);\n+}\n+\n+void f1(int a, ...)\n+{\n+  va_list ap;\n+  va_start (ap, a);\n+  while (a-- > 0)\n+    printx(va_arg(ap, T));\n+}\n+\n+void f2(int a, T b, ...)\n+{\n+  va_list ap;\n+  printx(b);\n+  a--;\n+  va_start (ap, b);\n+  while (a-- > 0)\n+    printx(va_arg(ap, T));\n+}\n+\n+void f3(int a, T b, T c, ...)\n+{\n+  va_list ap;\n+  printx(b);\n+  a--;\n+  printx(c);\n+  a--;\n+  va_start (ap, c);\n+  while (a-- > 0)\n+    printx(va_arg(ap, T));\n+}\n+\n+void f4(int a, T b, T c,\n+\tT d)\n+{\n+  printx(b);\n+  a--;\n+  printx(c);\n+  a--;\n+  printx(d);\n+  a--;\n+}\n+\n+int main()\n+{\n+  f4 (3,\n+      ((T){1,1,1,1}),\n+      ((T){2,2,2,2}), \n+      ((T){3,3,3,3}));\n+  f3 (3,\n+      ((T){4,4,4,4}),\n+      ((T){5,5,5,5}), \n+      ((T){6,6,6,6}));\n+  f2 (3,\n+      ((T){7,7,7,7}),\n+      ((T){8,8,8,8}), \n+      ((T){9,9,9,9}));\n+  f1 (3,\n+      ((T){10,10,10,10}),\n+      ((T){11,11,11,11}), \n+      ((T){12,12,12,12}));\n+  return 0;\n+}\n+\n+/* { dg-output \"1, 1, 1, 1\\n\" }\n+   { dg-output \"2, 2, 2, 2\\n\" }\n+   { dg-output \"3, 3, 3, 3\\n\" }\n+   { dg-output \"4, 4, 4, 4\\n\" }\n+   { dg-output \"5, 5, 5, 5\\n\" }\n+   { dg-output \"6, 6, 6, 6\\n\" }\n+   { dg-output \"7, 7, 7, 7\\n\" }\n+   { dg-output \"8, 8, 8, 8\\n\" }\n+   { dg-output \"9, 9, 9, 9\\n\" }\n+   { dg-output \"10, 10, 10, 10\\n\" }\n+   { dg-output \"11, 11, 11, 11\\n\" }\n+   { dg-output \"12, 12, 12, 12\\n\" }\n+ */"}, {"sha": "1df1715290926ea878e0f2c3719c7abab583a23f", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-2.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,78 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+\n+static void\n+varargsn003(vector float p1, vector float p2, vector float p3, ...)\n+{\n+  va_list ap;\n+  vector float i1;\n+  vector float i2;\n+  vector float i3;\n+  vector float i4;\n+  vector float i5;\n+  vector float i6;\n+  vector float i7;\n+  vector float i8;\n+  vector float i9;\n+  vector float i10;\n+  vector float i11;\n+  vector float i12;\n+  vector float i13;\n+  vector float i14;\n+  vector float i15;\n+  int i16;\n+\n+  va_start(ap, p3);\n+  i1 = p1;\n+  i2 = p2;\n+  i3 = p3;\n+  i4 = va_arg(ap, vector float);\n+  i5 = va_arg(ap, vector float);\n+  i6 = va_arg(ap, vector float);\n+  i7 = va_arg(ap, vector float);\n+  i8 = va_arg(ap, vector float);\n+  i9 = va_arg(ap, vector float);\n+  i10 = va_arg(ap, vector float);\n+  i11 = va_arg(ap, vector float);\n+  i12 = va_arg(ap, vector float);\n+  i13 = va_arg(ap, vector float);\n+  i14 = va_arg(ap, vector float);\n+  i15 = va_arg(ap, vector float);\n+  i16 = va_arg(ap, int);\n+  va_end(ap);\n+\n+  check(vec_all_eq(i1, ((vector float){1.14e+09, 4.29e+08, -1.58e+09, 1.66e+09})), \"i1\");\n+  check(vec_all_eq(i2, ((vector float){-1.83e+09, -6.79e+08, 1.58e+09, -3.38e+08})), \"i2\");\n+  check(vec_all_eq(i3, ((vector float){-1.19e+09, -4.27e+08, 6.84e+08, 1.21e+08})), \"i3\");\n+  check(vec_all_eq(i4, ((vector float){1.47e+09, 9.17e+08, 3.45e+08, -1.17e+08})), \"i4\");\n+  check(vec_all_eq(i5, ((vector float){3.08e+08, 1.2e+08, 1.73e+09, 1.77e+09})), \"i5\");\n+  check(vec_all_eq(i6, ((vector float){1.89e+09, 2.06e+09, 2.64e+08, 1.05e+09})), \"i6\");\n+  check(vec_all_eq(i7, ((vector float){5.45e+08, 1.37e+09, -8.2e+08, 4.32e+07})), \"i7\");\n+  check(vec_all_eq(i8, ((vector float){3.47e+08, -1.66e+09, 1.25e+09, 1.53e+09})), \"i8\");\n+  check(vec_all_eq(i9, ((vector float){-6.04e+08, 1.48e+09, -1.48e+09, 1.92e+09})), \"i9\");\n+  check(vec_all_eq(i10, ((vector float){-1.66e+09, -8.92e+08, -3.78e+08, 2.11e+09})), \"i10\");\n+  check(vec_all_eq(i11, ((vector float){-7.46e+08, 4.01e+08, -1.78e+09, 1.83e+09})), \"i11\");\n+  check(vec_all_eq(i12, ((vector float){1.83e+09, 5.73e+08, -2.96e+08, -7.46e+08})), \"i12\");\n+  check(vec_all_eq(i13, ((vector float){-2.01e+09, 9.89e+08, -1.92e+09, 2.09e+09})), \"i13\");\n+  check(vec_all_eq(i14, ((vector float){1.95e+09, -2.41e+08, 2.67e+08, 1.67e+09})), \"i14\");\n+  check(vec_all_eq(i15, ((vector float){-2.12e+09, 8.18e+08, 9.47e+08, -1.25e+09})), \"i15\");\n+  check(i16 == -947264420, \"i16\");\n+}\n+\n+static void test()\n+{\n+  varargsn003(((vector float){1.14e+09, 4.29e+08, -1.58e+09, 1.66e+09}),\n+\t      ((vector float){-1.83e+09, -6.79e+08, 1.58e+09, -3.38e+08}),\n+\t      ((vector float){-1.19e+09, -4.27e+08, 6.84e+08, 1.21e+08}),\n+\t      ((vector float){1.47e+09, 9.17e+08, 3.45e+08, -1.17e+08}),\n+\t      ((vector float){3.08e+08, 1.2e+08, 1.73e+09, 1.77e+09}),\n+\t      ((vector float){1.89e+09, 2.06e+09, 2.64e+08, 1.05e+09}),\n+\t      ((vector float){5.45e+08, 1.37e+09, -8.2e+08, 4.32e+07}),\n+\t      ((vector float){3.47e+08, -1.66e+09, 1.25e+09, 1.53e+09}),\n+\t      ((vector float){-6.04e+08, 1.48e+09, -1.48e+09, 1.92e+09}),\n+\t      ((vector float){-1.66e+09, -8.92e+08, -3.78e+08, 2.11e+09}),\n+\t      ((vector float){-7.46e+08, 4.01e+08, -1.78e+09, 1.83e+09}),\n+\t      ((vector float){1.83e+09, 5.73e+08, -2.96e+08, -7.46e+08}),\n+\t      ((vector float){-2.01e+09, 9.89e+08, -1.92e+09, 2.09e+09}),\n+\t      ((vector float){1.95e+09, -2.41e+08, 2.67e+08, 1.67e+09}), ((vector float){-2.12e+09, 8.18e+08, 9.47e+08, -1.25e+09}), -947264420);\n+}"}, {"sha": "be8b71bf947c476ab7e08f6009a4eb61c4077829", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-3.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-3.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,75 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+\n+typedef struct n_a\n+{\n+  signed char m1;\n+  short m2;\n+  int m3;\n+  double m4;\n+  vector float m5;\n+}\n+n_a;\n+\n+void\n+varlistn_a(signed char p1, va_list ap)\n+{\n+  n_a q;\n+  q.m1 = p1;\n+  q.m2 = va_arg(ap, int);\n+  q.m3 = va_arg(ap, int);\n+  q.m4 = va_arg(ap, double);\n+  q.m5 = va_arg(ap, vector float);\n+\n+  check(q.m1 == 77, \"q.m1\");\n+  check(q.m2 == 1924, \"q.m2\");\n+  check(q.m3 == -1471601920, \"q.m3\");\n+  check(q.m4 == 3.65e+18, \"q.m4\");\n+  check(vec_all_eq(q.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})), \"q.m5\");\n+}\n+\n+void\n+varargsn_a(signed char p1, ...)\n+{\n+  n_a r, s;\n+  va_list ap;\n+\n+  va_start(ap, p1);\n+  r.m1 = p1;\n+  r.m2 = va_arg(ap, int);\n+  r.m3 = va_arg(ap, int);\n+  r.m4 = va_arg(ap, double);\n+  r.m5 = va_arg(ap, vector float);\n+  va_end(ap);\n+\n+  check(r.m1 == 77, \"r.m1\");\n+  check(r.m2 == 1924, \"r.m2\");\n+  check(r.m3 == -1471601920, \"r.m3\");\n+  check(r.m4 == 3.65e+18, \"r.m4\");\n+  check(vec_all_eq(r.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})), \"r.m5\");\n+\n+  va_start(ap, p1);\n+  s.m1 = p1;\n+  s.m2 = va_arg(ap, int);\n+  s.m3 = va_arg(ap, int);\n+  s.m4 = va_arg(ap, double);\n+  s.m5 = va_arg(ap, vector float);\n+  va_end(ap);\n+\n+  check(s.m1 == 77, \"s.m1\");\n+  check(s.m2 == 1924, \"s.m2\");\n+  check(s.m3 == -1471601920, \"s.m3\");\n+  check(s.m4 == 3.65e+18, \"s.m4\");\n+  check(vec_all_eq(s.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})), \"s.m5\");\n+\n+  va_start(ap, p1);\n+  varlistn_a(p1, ap);\n+  va_end(ap);\n+}\n+\n+\n+\n+void test()\n+{\n+  varargsn_a(77, 1924, -1471601920, 3.65e+18, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08}));\n+}"}, {"sha": "5433329e52624194a6ad8acf30d960006040c2b4", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-4.c", "status": "added", "additions": 299, "deletions": 0, "changes": 299, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-4.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,299 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <string.h>\n+\n+typedef struct n_a\n+{\n+  signed char m1;\n+  short m2;\n+  int m3;\n+  double m4;\n+  vector float m5;\n+}\n+n_a;\n+\n+typedef struct n_a_x\n+{\n+  n_a b;\n+  char a;\n+}\n+n_a_x;\n+\n+static n_a gn_a;\n+\n+static int\n+lay(char *p, int start, int end, int n)\n+{\n+  int b;\n+  unsigned char ch;\n+  unsigned int mask;\n+\n+  start *= 8;\n+  end *= 8;\n+  n *= 8;\n+\n+  for (b = 0; b + 8 <= start; b += 8)\n+    {\n+      ch = *p++;\n+      if (ch != 0xff)\n+\tfor (mask = 0x80; mask; b++, mask >>= 1)\n+\t  if ((ch & mask) != mask)\n+\t    return b;\n+    }\n+\n+  if (b < start)\n+    {\n+      ch = *p++;\n+      for (mask = 0x80; b < start; b++, mask >>= 1)\n+\tif ((ch & mask) != mask)\n+\t  return b;\n+      for (; mask && b < end; b++, mask >>= 1)\n+\tif ((ch & mask) != 0)\n+\t  return b;\n+    }\n+\n+  for (; b + 8 <= end; b += 8)\n+    {\n+      ch = *p++;\n+      if (ch != 0)\n+\tfor (mask = 0x80; mask; b++, mask >>= 1)\n+\t  if ((ch & mask) != 0)\n+\t    return b;\n+    }\n+\n+  if (b < end)\n+    {\n+      ch = *p++;\n+      for (mask = 0x80; b < end; b++, mask >>= 1)\n+\tif ((ch & mask) != 0)\n+\t  return b;\n+      for (; mask && b < n; b++, mask >>= 1)\n+\tif ((ch & mask) != mask)\n+\t  return b;\n+    }\n+\n+  for (; b + 8 <= n; b += 8)\n+    {\n+      ch = *p++;\n+      if (ch != 0xff)\n+\tfor (mask = 0x80; mask; b++, mask >>= 1)\n+\t  if ((ch & mask) != mask)\n+\t    return b;\n+    }\n+\n+  return n;\n+}\n+\n+static void\n+initn_a(signed char p1, short p2, int p3, double p4, vector float p5)\n+{\n+  n_a i;\n+\n+  i.m1 = p1;\n+  i.m2 = p2;\n+  i.m3 = p3;\n+  i.m4 = p4;\n+  i.m5 = p5;\n+\n+  check(i.m1 == 77, \"i.m1\");\n+  check(i.m2 == 1924, \"i.m2\");\n+  check(i.m3 == -1471601920, \"i.m3\");\n+  check(vec_all_eq(i.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"i.m5\");\n+\n+  check(sizeof(n_a) == 32, \"sizeof(n_a)\");\n+  check(sizeof(n_a_x) - sizeof(n_a) == 32, \"align(n_a_x)\");\n+\n+  check(offsetof(n_a, m1) == 0,  \"offsetof(m1)\");\n+  check(offsetof(n_a, m2) == 2,  \"offsetof(m2)\");\n+  check(offsetof(n_a, m3) == 4,  \"offsetof(m3)\");\n+  check(offsetof(n_a, m4) == 8,  \"offsetof(m4)\");\n+  check(offsetof(n_a, m5) == 16, \"offsetof(m5)\");\n+\n+  check(sizeof(i.m1) == 1,  \"sizeof(m1)\");\n+  check(sizeof(i.m2) == 2,  \"sizeof(m2)\");\n+  check(sizeof(i.m3) == 4,  \"sizeof(m3)\");\n+  check(sizeof(i.m4) == 8,  \"sizeof(m4)\");\n+  check(sizeof(i.m5) == 16, \"sizeof(m5)\");\n+\n+#define lay_check(field) do {\t\t\t\t\\\n+  memset((char *)&i, 0xFF, sizeof(i));\t\t\t\\\n+  lay_reset(field);\t\t\t\t\t\\\n+  check(lay((char *)&i,\t\t\t\t\t\\\n+\t    offsetof(n_a, field),\t\t\t\\\n+\t    offsetof(n_a, field) + sizeof(i.field),\t\\\n+\t    sizeof(i)) == sizeof(i)*8,\t\t\t\\\n+\t\"lay(\" #field \")\");\t\t\t\t\\\n+  } while (0)\n+#define lay_reset(field) i.field = 0\n+\n+  lay_check(m1);\n+  lay_check(m2);\n+  lay_check(m3);\n+  lay_check(m4);\n+#undef lay_reset\n+#define lay_reset(field) i.field = ((vector float){0,0,0,0})\n+  lay_check(m5);\n+\n+#undef lay_check\n+#undef lay_reset\n+}\n+\n+n_a\n+valuen_a(void)\n+{\n+  return gn_a;\n+}\n+\n+n_a *\n+addrn_a(void)\n+{\n+  return &gn_a;\n+}\n+\n+static void\n+eqn_a(n_a * a)\n+{\n+  check(a->m1 == 77, \"a->m1\");\n+  check(a->m2 == 1924, \"a->m2\");\n+  check(a->m3 == -1471601920, \"a->m3\");\n+  check(vec_all_eq(a->m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"a->m5\");\n+}\n+\n+static void\n+getsn_a(n_a * a)\n+{\n+  a->m1 = 77;\n+  a->m2 = 1924;\n+  a->m3 = -1471601920;\n+  a->m4 = 3.65e+18;\n+  a->m5 = ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08});\n+}\n+\n+static void\n+varlistn_a(signed char p1, va_list ap)\n+{\n+  n_a q;\n+  q.m1 = p1;\n+  q.m2 = va_arg(ap, int);\n+  q.m3 = va_arg(ap, int);\n+  q.m4 = va_arg(ap, double);\n+  q.m5 = va_arg(ap, vector float);\n+\n+  check(q.m1 == 77, \"q.m1\");\n+  check(q.m2 == 1924, \"q.m2\");\n+  check(q.m3 == -1471601920, \"q.m3\");\n+  check(vec_all_eq(q.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"q.m5\");\n+}\n+\n+static void\n+varargsn_a(signed char p1, ...)\n+{\n+  n_a q, r;\n+  va_list ap;\n+\n+  va_start(ap, p1);\n+  q.m1 = p1;\n+  q.m2 = va_arg(ap, int);\n+  q.m3 = va_arg(ap, int);\n+  q.m4 = va_arg(ap, double);\n+  q.m5 = va_arg(ap, vector float);\n+  va_end(ap);\n+\n+  check(q.m1 == 77, \"q.m1\");\n+  check(q.m2 == 1924, \"q.m2\");\n+  check(q.m3 == -1471601920, \"q.m3\");\n+  check(vec_all_eq(q.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"q.m5\");\n+\n+  va_start(ap, p1);\n+  r.m1 = p1;\n+  r.m2 = va_arg(ap, int);\n+  r.m3 = va_arg(ap, int);\n+  r.m4 = va_arg(ap, double);\n+  r.m5 = va_arg(ap, vector float);\n+  va_end(ap);\n+\n+  check(r.m1 == 77, \"r.m1\");\n+  check(r.m2 == 1924, \"r.m2\");\n+  check(r.m3 == -1471601920, \"r.m3\");\n+  check(vec_all_eq(r.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"r.m5\");\n+\n+  va_start(ap, p1);\n+  varlistn_a(p1, ap);\n+  va_end(ap);\n+}\n+\n+static void\n+test()\n+{\n+  static struct\n+  {\n+    char a;\n+    n_a b;\n+  }\n+  s;\n+  n_a v[3], a, *p;\n+\n+  static n_a i = { 77, 1924, -1471601920, 3.65e+18, {-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08} };\n+\n+  memset((char *)&(v), -1, sizeof(v));\n+  v[1] = s.b;\n+  check(lay((char *)&v, sizeof(n_a), sizeof(n_a)*2, sizeof(n_a)*3) == sizeof(n_a)*3*8,\n+\t\"structure assignment\");\n+\n+  check(i.m1 == 77, \"i.m1\");\n+  check(i.m2 == 1924, \"i.m2\");\n+  check(i.m3 == -1471601920, \"i.m3\");\n+  check(vec_all_eq(i.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"i.m5\");\n+\n+  initn_a(77, 1924, -1471601920, 3.65e+18, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08}));\n+  varargsn_a(77, 1924, -1471601920, 3.65e+18, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08}));\n+\n+  gn_a.m1 = 77;\n+  gn_a.m2 = 1924;\n+  gn_a.m3 = -1471601920;\n+  gn_a.m4 = 3.65e+18;\n+  gn_a.m5 = ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08});\n+  a = valuen_a();\n+\n+  check(a.m1 == 77, \"a.m1\");\n+  check(a.m2 == 1924, \"a.m2\");\n+  check(a.m3 == -1471601920, \"a.m3\");\n+  check(vec_all_eq(a.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"a.m5\");\n+\n+  p = addrn_a();\n+\n+  check(p->m1 == 77, \"p->m1\");\n+  check(p->m2 == 1924, \"p->m2\");\n+  check(p->m3 == -1471601920, \"p->m3\");\n+  check(vec_all_eq(p->m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"p->m5\");\n+\n+  eqn_a(&a);\n+\n+  check(gn_a.m1 == 77, \"gn_a.m1\");\n+  check(gn_a.m2 == 1924, \"gn_a.m2\");\n+  check(gn_a.m3 == -1471601920, \"gn_a.m3\");\n+  check(vec_all_eq(gn_a.m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"gn_a.m5\");\n+\n+  getsn_a(&v[0]);\n+  v[2].m1 = v[0].m1;\n+  v[2].m2 = v[0].m2;\n+  v[2].m3 = v[0].m3;\n+  v[2].m4 = v[0].m4;\n+  v[2].m5 = v[0].m5;\n+\n+  check(v[2].m1 == 77, \"v[2].m1\");\n+  check(v[2].m2 == 1924, \"v[2].m2\");\n+  check(v[2].m3 == -1471601920, \"v[2].m3\");\n+  check(vec_all_eq(v[2].m5, ((vector float){-1.38e+09, 5.96e+08, 6.88e+08, -3.2e+08})),\n+\t\"v[2].m5\");\n+}"}, {"sha": "ed551c2dfa93591b292ea82b24f9213c02c2282e", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-5.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-5.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,71 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+\n+typedef struct n025\n+{\n+  int m1;\n+  double m2;\n+  int m3;\n+  vector signed int m4;\n+}\n+n025;\n+\n+static void\n+varlistn025(int p1, double p2, va_list ap)\n+{\n+  n025 q;\n+  q.m1 = p1;\n+  q.m2 = p2;\n+  q.m3 = va_arg(ap, int);\n+  q.m4 = va_arg(ap, vector signed int);\n+\n+  check(q.m1 == 1363477585, \"q.m1\");\n+  check(q.m2 == -8.72e+18, \"q.m2\");\n+  check(q.m3 == 198652649, \"q.m3\");\n+  check(vec_all_eq(q.m4, ((vector signed int){323001541, -1353029458, 1756879633, -327031280})),\n+\t\"q.m5\");\n+}\n+\n+\n+void\n+varargsn025(int p1, double p2, ...)\n+{\n+  n025 r, s;\n+  va_list ap;\n+\n+  va_start(ap, p2);\n+  r.m1 = p1;\n+  r.m2 = p2;\n+  r.m3 = va_arg(ap, int);\n+  r.m4 = va_arg(ap, vector signed int);\n+  va_end(ap);\n+\n+  check(r.m1 == 1363477585, \"r.m1\");\n+  check(r.m2 == -8.72e+18, \"r.m2\");\n+  check(r.m3 == 198652649, \"r.m3\");\n+  check(vec_all_eq(r.m4, ((vector signed int){323001541, -1353029458, 1756879633, -327031280})),\n+\t\"r.m5\");\n+\n+  va_start(ap, p2);\n+  s.m1 = p1;\n+  s.m2 = p2;\n+  s.m3 = va_arg(ap, int);\n+  s.m4 = va_arg(ap, vector signed int);\n+  va_end(ap);\n+\n+  check(s.m1 == 1363477585, \"s.m1\");\n+  check(s.m2 == -8.72e+18, \"s.m2\");\n+  check(s.m3 == 198652649, \"s.m3\");\n+  check(vec_all_eq(s.m4, ((vector signed int){323001541, -1353029458, 1756879633, -327031280})),\n+\t\"s.m5\");\n+\n+  va_start(ap, p2);\n+  varlistn025(p1, p2, ap);\n+  va_end(ap);\n+}\n+\n+static void test()\n+{\n+  varargsn025(1363477585, -8.72e+18, 198652649,\n+\t      ((vector signed int){323001541, -1353029458, 1756879633, -327031280}));\n+}"}, {"sha": "b1f436fd043bb7af5118792c0e653b996d8bb152", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-6.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-6.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,35 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+\n+typedef struct n025\n+{\n+  int m1;\n+  double m2;\n+  int m3;\n+  vector signed int m4;\n+}\n+n025;\n+\n+static void\n+varargsn025(int p1, double p2, ...)\n+{\n+  n025 q;\n+  va_list ap;\n+  va_start(ap, p2);\n+  q.m1 = p1;\n+  q.m2 = p2;\n+  q.m3 = va_arg(ap, int);\n+  q.m4 = va_arg(ap, vector signed int);\n+  va_end(ap);\n+\n+  check(q.m1 == 1363477585, \"q.m1\");\n+  check(q.m2 == -8.72e+18, \"q.m2\");\n+  check(q.m3 == 198652649, \"q.m3\");\n+  check(vec_all_eq(q.m4, ((vector signed int){323001541, -1353029458, 1756879633, -327031280})),\n+\t\"q.m4\");\n+}\n+\n+static void test()\n+{\n+  varargsn025(1363477585, -8.72e+18, 198652649, ((vector signed int){323001541, -1353029458, 1756879633, -327031280}));\n+}"}, {"sha": "2a09d0ca08ac43d09910d86a1e250eaa399fbaaa", "filename": "gcc/testsuite/gcc.dg/vmx/varargs-7.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvarargs-7.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,83 @@\n+#include \"harness.h\"\n+#include <stdarg.h>\n+\n+static void\n+varargsn001(vector unsigned int p1, vector unsigned int p2,\n+\t    vector unsigned int p3, vector unsigned int p4,\n+\t    vector unsigned int p5, vector unsigned int p6,\n+\t    vector unsigned int p7, vector unsigned int p8,\n+\t    vector unsigned int p9, vector unsigned int p10,\n+\t    vector unsigned int p11, vector unsigned int p12,\n+\t    vector unsigned int p13, ...)\n+{\n+  va_list ap;\n+  vector unsigned int i1;\n+  vector unsigned int i2;\n+  vector unsigned int i3;\n+  vector unsigned int i4;\n+  vector unsigned int i5;\n+  vector unsigned int i6;\n+  vector unsigned int i7;\n+  vector unsigned int i8;\n+  vector unsigned int i9;\n+  vector unsigned int i10;\n+  vector unsigned int i11;\n+  vector unsigned int i12;\n+  vector unsigned int i13;\n+  vector unsigned int i14;\n+  int i15;\n+\n+  va_start(ap, p13);\n+\n+  i1 = p1;\n+  i2 = p2;\n+  i3 = p3;\n+  i4 = p4;\n+  i5 = p5;\n+  i6 = p6;\n+  i7 = p7;\n+  i8 = p8;\n+  i9 = p9;\n+  i10 = p10;\n+  i11 = p11;\n+  i12 = p12;\n+  i13 = p13;\n+  i14 = va_arg(ap, vector unsigned int);\n+  i15 = va_arg(ap, int);\n+  va_end(ap);\n+\n+  check(vec_all_eq(i1, ((vector unsigned int){1,1,1,1})), \"i1\");\n+  check(vec_all_eq(i2, ((vector unsigned int){2,2,2,2})), \"i2\");\n+  check(vec_all_eq(i3, ((vector unsigned int){3,3,3,3})), \"i3\");\n+  check(vec_all_eq(i4, ((vector unsigned int){4,4,4,4})), \"i4\");\n+  check(vec_all_eq(i5, ((vector unsigned int){5,5,5,5})), \"i5\");\n+  check(vec_all_eq(i6, ((vector unsigned int){6,6,6,6})), \"i6\");\n+  check(vec_all_eq(i7, ((vector unsigned int){7,7,7,7})), \"i7\");\n+  check(vec_all_eq(i8, ((vector unsigned int){8,8,8,8})), \"i8\");\n+  check(vec_all_eq(i9, ((vector unsigned int){9,9,9,9})), \"i9\");\n+  check(vec_all_eq(i10, ((vector unsigned int){10,10,10,10})), \"i10\");\n+  check(vec_all_eq(i11, ((vector unsigned int){11,11,11,11})), \"i11\");\n+  check(vec_all_eq(i12, ((vector unsigned int){12,12,12,12})), \"i12\");\n+  check(vec_all_eq(i13, ((vector unsigned int){13,13,13,13})), \"i13\");\n+  check(vec_all_eq(i14, ((vector unsigned int){14,14,14,14})), \"i14\");\n+  check(i15 == 15, \"i15\");\n+}\n+\n+static void test()\n+{\n+  varargsn001(((vector unsigned int){1,1,1,1}),\n+\t      ((vector unsigned int){2,2,2,2}),\n+\t      ((vector unsigned int){3,3,3,3}),\n+\t      ((vector unsigned int){4,4,4,4}),\n+\t      ((vector unsigned int){5,5,5,5}),\n+\t      ((vector unsigned int){6,6,6,6}),\n+\t      ((vector unsigned int){7,7,7,7}),\n+\t      ((vector unsigned int){8,8,8,8}),\n+\t      ((vector unsigned int){9,9,9,9}),\n+\t      ((vector unsigned int){10,10,10,10}),\n+\t      ((vector unsigned int){11,11,11,11}),\n+\t      ((vector unsigned int){12,12,12,12}),\n+\t      ((vector unsigned int){13,13,13,13}),\n+\t      ((vector unsigned int){14,14,14,14}),\n+\t      15);\n+}"}, {"sha": "389f8098038330ada9a6783299de567df370a31e", "filename": "gcc/testsuite/gcc.dg/vmx/vmx.exp", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvmx.exp?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,51 @@\n+#   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Only run this test on PowerPC targets with Altivec support.\n+# For now, that's powerpc*-*-*altivec*.  FIXME: generalize.\n+if {![istarget powerpc*-*-*altivec*]} {\n+    return\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+# -pedantic-errors is inappropriate here, as this subdirectory tests\n+# nothing but extensions.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \"-std=gnu99\"\n+}\n+\n+# Default action in this directory is 'run'.\n+global dg-do-what-default\n+set save-dg-do-what-default ${dg-do-what-default}\n+set dg-do-what-default run\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c]] \\\n+\t$DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish\n+\n+set dg-do-what-default ${save-dg-do-what-default}"}, {"sha": "37cd7bca7394982f7cad068df12c28d51ca5db65", "filename": "gcc/testsuite/gcc.dg/vmx/vprint-1.c", "status": "added", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvprint-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvprint-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvprint-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,266 @@\n+/* These tests require an AltiVec aware C library with vector\n+   extensions for printf (%v).  Currently newlib handles AltiVec\n+   vector extensions.  There are some clandestine patches for glibc\n+   floating around, as well as a stanalone libaltivec library that\n+   implements such extensions.  */\n+\n+#include \"harness.h\"\n+#include <string.h>\n+\n+static void test()\n+{\n+  const char *x;\n+  char buf[256];\n+\n+  vector float f32;\n+  vector signed char s8;\n+  vector unsigned short u16;\n+  vector signed short s16;\n+  vector signed int s32;\n+\n+  f32 = ((vector float){1, 2.2, 333.333e-18, -4.5007544});\n+\n+  x = \"%vf: 1.000000 2.200000 0.000000 -4.500754\";\n+  snprintf(buf, sizeof buf, \"%%vf: %vf\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%ve: 1.000000e+00 2.200000e+00 3.333330e-16 -4.500754e+00\";\n+  snprintf(buf, sizeof buf, \"%%ve: %ve\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vE: 1.000000E+00 2.200000E+00 3.333330E-16 -4.500754E+00\";\n+  snprintf(buf, sizeof buf, \"%%vE: %vE\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vg: 1 2.2 3.33333e-16 -4.50075\";\n+  snprintf(buf, sizeof buf, \"%%vg: %vg\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vG: 1 2.2 3.33333E-16 -4.50075\";\n+  snprintf(buf, sizeof buf, \"%%vG: %vG\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%7.3vf:   1.000   2.200   0.000  -4.501\";\n+  snprintf(buf, sizeof buf, \"%%7.3vf: %7.3vf\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%:7.3vf:   1.000:  2.200:  0.000: -4.501\";\n+  snprintf(buf, sizeof buf, \"%%:7.3vf: %:7.3vf\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%:7.3f: :7.3f\";\n+  snprintf(buf, sizeof buf, \"%%:7.3f: %:7.3f\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  s8 = vec_sub((vector signed char)vec_lvsl(1,(signed char *)0),\n+\t       ((vector signed char){8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8}));\n+  x = \"%vd: -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vd: %vd\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vi: -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vi: %vi\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vu: 249 250 251 252 253 254 255 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vu: %vu\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vx: f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vx: %vx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vo: 371 372 373 374 375 376 377 0 1 2 3 4 5 6 7 10\";\n+  snprintf(buf, sizeof buf, \"%%vo: %vo\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vp: 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8\";\n+  snprintf(buf, sizeof buf, \"%%vp: %vp\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vx: f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vx: %vx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vX: F9 FA FB FC FD FE FF 0 1 2 3 4 5 6 7 8\";\n+  snprintf(buf, sizeof buf, \"%%vX: %vX\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  x = \"%hvd: -1542 -1028 -514 -256 258 772 1286 1800\";\n+  snprintf(buf, sizeof buf, \"%%hvd: %hvd\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vhi: -1542 -1028 -514 -256 258 772 1286 1800\";\n+  snprintf(buf, sizeof buf, \"%%vhi: %vhi\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%hvu: 63994 64508 65022 65280 258 772 1286 1800\";\n+  snprintf(buf, sizeof buf, \"%%hvu: %hvu\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vhx: f9fa fbfc fdfe ff00 102 304 506 708\";\n+  snprintf(buf, sizeof buf, \"%%vhx: %vhx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%hvo: 174772 175774 176776 177400 402 1404 2406 3410\";\n+  snprintf(buf, sizeof buf, \"%%hvo: %hvo\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vhp: 0xf9fa 0xfbfc 0xfdfe 0xff00 0x102 0x304 0x506 0x708\";\n+  snprintf(buf, sizeof buf, \"%%vhp: %vhp\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%hvx: f9fa fbfc fdfe ff00 102 304 506 708\";\n+  snprintf(buf, sizeof buf, \"%%hvx: %hvx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vhX: F9FA FBFC FDFE FF00 102 304 506 708\";\n+  snprintf(buf, sizeof buf, \"%%vhX: %vhX\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"0x%_04vhx: 0xf9fa_fbfc_fdfe_ff00_0102_0304_0506_0708\";\n+  snprintf(buf, sizeof buf, \"0x%%_04vhx: 0x%_04vhx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  x = \"%lvd: -100992004 -33620224 16909060 84281096\";\n+  snprintf(buf, sizeof buf, \"%%lvd: %lvd\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vli: -100992004 -33620224 16909060 84281096\";\n+  snprintf(buf, sizeof buf, \"%%vli: %vli\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%lvu: 4193975292 4261347072 16909060 84281096\";\n+  snprintf(buf, sizeof buf, \"%%lvu: %lvu\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vlx: f9fafbfc fdfeff00 1020304 5060708\";\n+  snprintf(buf, sizeof buf, \"%%vlx: %vlx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%lvo: 37176575774 37577577400 100401404 501403410\";\n+  snprintf(buf, sizeof buf, \"%%lvo: %lvo\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vlp: 0xf9fafbfc 0xfdfeff00 0x1020304 0x5060708\";\n+  snprintf(buf, sizeof buf, \"%%vlp: %vlp\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%lvx: f9fafbfc fdfeff00 1020304 5060708\";\n+  snprintf(buf, sizeof buf, \"%%lvx: %lvx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%vlX: F9FAFBFC FDFEFF00 1020304 5060708\";\n+  snprintf(buf, sizeof buf, \"%%vlX: %vlX\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \">-154234 ;-1028   ;+0258   ;+1800   <\";\n+  printf(\">%- +;8.4vld<\", ((vector signed int){-154234, -1028, 258, 1800}));\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%,2vx: f9,fa,fb,fc,fd,fe,ff, 0, 1, 2, 3, 4, 5, 6, 7, 8\";\n+  snprintf(buf, sizeof buf, \"%%,2vx: %,2vx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%;4vhX: F9FA;FBFC;FDFE;FF00; 102; 304; 506; 708\";\n+  snprintf(buf, sizeof buf, \"%%;4vhX: %;4vhX\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%;8vlx: f9fafbfc;fdfeff00; 1020304; 5060708\";\n+  snprintf(buf, sizeof buf, \"%%;8vlx: %;8vlx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+8.5vhd: -01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+8.5vhd: %- ;+8.5vhd\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+*.5vhd: -01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+*.5vhd: %- ;+*.5vhd\", 8, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+8.*vhd: -01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+8.*vhd: %- ;+8.*vhd\", 5, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+*.*vhd: -01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+*.*vhd: %- ;+*.*vhd\", 8, 5, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+7.4vhd: -1542  ;-1028  ;-0514  ;-0256  ;+0258  ;+0772  ;+1286  ;+1800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+7.4vhd: %- ;+7.4vhd\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+*.4vhd: -1542  ;-1028  ;-0514  ;-0256  ;+0258  ;+0772  ;+1286  ;+1800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+*.4vhd: %- ;+*.4vhd\", 7, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+7.*vhd: -1542  ;-1028  ;-0514  ;-0256  ;+0258  ;+0772  ;+1286  ;+1800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+7.*vhd: %- ;+7.*vhd\", 4, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%- ;+*.*vhd: -1542  ;-1028  ;-0514  ;-0256  ;+0258  ;+0772  ;+1286  ;+1800  \";\n+  snprintf(buf, sizeof buf, \"%%- ;+*.*vhd: %- ;+*.*vhd\", 7, 4, s8);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  s8 = vec_add(s8, ((vector signed char){'h','h','h','h','h','h','h','h',\n+\t\t\t\t\t'h','h','h','h','h','h','h','h'}));\n+  x = \"%vc: abcdefghijklmnop\";\n+  snprintf(buf, sizeof buf, \"%%vc: %vc\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"abcdefghijklmnopqrstuvwxyz,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p\";\n+  snprintf(buf, sizeof buf, \"%vcqrstuvwxyz,%,vc\", s8, s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"%#0,2vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70\";\n+  snprintf(buf, sizeof buf, \"%%#0,2vx: %#0,2vx\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  s8 = ((vector signed char){'H','e','l','l','o',' ','W','o','r','l','d',',',' ','.','.','.' });\n+  x = \"s8  = Hello World, ...\";\n+  snprintf(buf, sizeof buf, \"s8  = %vc\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"s8  = H,e,l,l,o, ,W,o,r,l,d,,, ,.,.,.\";\n+  snprintf(buf, sizeof buf, \"s8  = %,vc\", s8);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  s16 = ((vector signed short){-2,-1,0,1,2,3,4,5});\n+  x = \"s16 = -2 -1 0 1 2 3 4 5\";\n+  snprintf(buf, sizeof buf, \"s16 = %vhd\", s16);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  u16 = ((vector unsigned short){65534,65535,0,1,2,3,4,5});\n+  x = \"u16 = 65534,65535,0,1,2,3,4,5\";\n+  snprintf(buf, sizeof buf, \"u16 = %,vhu\", u16);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  s32 = ((vector signed int){1,2,3,99});\n+  x = \"s32 =  1, 2, 3,99\";\n+  snprintf(buf, sizeof buf, \"s32 = %,2lvd\", s32);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  f32 = ((vector float){1.1, 2.2, 3.3, 4.39501});\n+  x = \"f32 = 1.10 ,2.20 ,3.30 ,4.40 \";\n+  snprintf(buf, sizeof buf, \"f32 = %-,5.2vf\", f32);\n+  check(!strcmp(buf, x), x);\n+\n+\n+  /* <char-conv> only goes with <vector-size> 'v'.  */\n+  x = \"u16 = vhc\";\n+  snprintf(buf, sizeof buf, \"u16 = %vhc\", u16);\n+  check(!strcmp(buf, x), x);\n+\n+  x = \"s32 = vhc\";\n+  snprintf(buf, sizeof buf, \"s32 = %vhc\", s32);\n+  check(!strcmp(buf, x), x);\n+}"}, {"sha": "43c05b4b7acfd795aceb2222551ae67b7546a025", "filename": "gcc/testsuite/gcc.dg/vmx/vscan-1.c", "status": "added", "additions": 418, "deletions": 0, "changes": 418, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvscan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvscan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fvscan-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,418 @@\n+/* These tests require an AltiVec aware C library with vector\n+   extensions for scanf (%v).  Currently newlib handles AltiVec\n+   vector extensions.  There are some clandestine patches for glibc\n+   floating around, as well as a stanalone libaltivec library that\n+   implements such extensions.  */\n+\n+#include \"harness.h\"\n+#include <string.h>\n+\n+void test()\n+{\n+  int n, i;\n+  const char *p;\n+  const char *x;\n+  char buf[256];\n+\n+  char ch;\n+  vector float f32;\n+  vector signed char s8, s8a;\n+  vector unsigned short u16;\n+  vector signed short s16;\n+  vector signed int s32;\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"%vf: 1.000000 2.200000 0.000000 -4.500754;\";\n+  x = \"1:42:42:1.000000 2.200000 0.000000 -4.500754\";\n+  n = sscanf(p, \"%%vf: %vf;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vf\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"%ve: 1.000000e+00 2.200000e+00 3.333330e-16 -4.500754e+00;\";\n+  x = \"1:58:58:1.000000e+00 2.200000e+00 3.333330e-16 -4.500754e+00\";\n+  n = sscanf(p, \"%%ve: %ve;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%ve\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"%vg: 1 2.2 3.33333e-16 -4.50075;\";\n+  x = \"1:32:32:1 2.2 3.33333e-16 -4.50075\";\n+  n = sscanf(p, \"%%vg: %vg;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vg\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"%vG: 1 2.2 3.33333E-16 -4.50075;\";\n+  x = \"1:32:32:1 2.2 3.33333E-16 -4.50075\";\n+  n = sscanf(p, \"%%vG: %vG;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vG\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"%:7.3vf:   1.000:  2.200:  0.000: -4.501;\";\n+  x = \"1:41:41:  1.000:  2.200:  0.000: -4.501\";\n+  n = sscanf(p, \"%%:7.3vf:%:7vf;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%:7.3vf\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vd: -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:44:44:-7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vd:%vd;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vd\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vi: -7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:44:44:-7 -6 -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vi:%vi;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vi\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vu: 249 250 251 252 253 254 255 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:51:51:249 250 251 252 253 254 255 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vu:%vu;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vu\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vx: f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:44:44:f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vx:%vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vo: 371 372 373 374 375 376 377 0 1 2 3 4 5 6 7 10;\";\n+  x = \"1:52:52:371 372 373 374 375 376 377 0 1 2 3 4 5 6 7 10\";\n+  n = sscanf(p, \"%%vo:%vo;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vo\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vp: 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8;\";\n+  x = \"1:76:76:0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff 0x0 0x1 0x2 0x3 0x4 0x5 0x6 0x7 0x8\";\n+  n = sscanf(p, \"%%vp:%vp;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vp\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vx: f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:44:44:f9 fa fb fc fd fe ff 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vx:%vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vX: F9 FA FB FC FD FE FF 0 1 2 3 4 5 6 7 8;\";\n+  x = \"1:44:44:F9 FA FB FC FD FE FF 0 1 2 3 4 5 6 7 8\";\n+  n = sscanf(p, \"%%vX:%vX;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vX\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%hvd: -1542 -1028 -514 -256 258 772 1286 1800;\";\n+  x = \"1:46:46:-1542 -1028 -514 -256 258 772 1286 1800\";\n+  n = sscanf(p, \"%%hvd:%hvd;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%hvd\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vhi: -1542 -1028 -514 -256 258 772 1286 1800;\";\n+  x = \"1:46:46:-1542 -1028 -514 -256 258 772 1286 1800\";\n+  n = sscanf(p, \"%%vhi:%vhi;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vhi\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%hvu: 63994 64508 65022 65280 258 772 1286 1800;\";\n+  x = \"1:48:48:63994 64508 65022 65280 258 772 1286 1800\";\n+  n = sscanf(p, \"%%hvu:%hvu;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%hvu\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vhx: f9fa fbfc fdfe ff00 102 304 506 708;\";\n+  x = \"1:42:42:f9fa fbfc fdfe ff00 102 304 506 708\";\n+  n = sscanf(p, \"%%vhx:%vhx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vhx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"0x%_vhx: 0xf9fa_fbfc_fdfe_ff00_0102_0304_0506_0708;\";\n+  x = \"1:51:51:0xf9fa_fbfc_fdfe_ff00_0102_0304_0506_0708\";\n+  n = sscanf(p, \"0x%%_vhx:%_vhx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:0x%_04vhx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%hvo: 174772 175774 176776 177400 402 1404 2406 3410;\";\n+  x = \"1:53:53:174772 175774 176776 177400 402 1404 2406 3410\";\n+  n = sscanf(p, \"%%hvo:%hvo;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%hvo\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vhp: 0xf9fa 0xfbfc 0xfdfe 0xff00 0x102 0x304 0x506 0x708;\";\n+  x = \"1:58:58:0xf9fa 0xfbfc 0xfdfe 0xff00 0x102 0x304 0x506 0x708\";\n+  n = sscanf(p, \"%%vhp:%vhp;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vhp\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%hvx: f9fa fbfc fdfe ff00 102 304 506 708;\";\n+  x = \"1:42:42:f9fa fbfc fdfe ff00 102 304 506 708\";\n+  n = sscanf(p, \"%%hvx:%hvx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%hvx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vhX: F9FA FBFC FDFE FF00 102 304 506 708;\";\n+  x = \"1:42:42:F9FA FBFC FDFE FF00 102 304 506 708\";\n+  n = sscanf(p, \"%%vhX:%vhX;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vhX\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%lvd: -100992004 -33620224 16909060 84281096;\";\n+  x = \"1:45:45:-100992004 -33620224 16909060 84281096\";\n+  n = sscanf(p, \"%%lvd:%lvd;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%lvd\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vli: -100992004 -33620224 16909060 84281096;\";\n+  x = \"1:45:45:-100992004 -33620224 16909060 84281096\";\n+  n = sscanf(p, \"%%vli:%vli;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vli\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%lvu: 4193975292 4261347072 16909060 84281096;\";\n+  x = \"1:46:46:4193975292 4261347072 16909060 84281096\";\n+  n = sscanf(p, \"%%lvu:%lvu;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%lvu\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vlx: f9fafbfc fdfeff00 1020304 5060708;\";\n+  x = \"1:40:40:f9fafbfc fdfeff00 1020304 5060708\";\n+  n = sscanf(p, \"%%vlx:%vlx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vlx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%lvo: 37176575774 37577577400 100401404 501403410;\";\n+  x = \"1:50:50:37176575774 37577577400 100401404 501403410\";\n+  n = sscanf(p, \"%%lvo:%lvo;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%lvo\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vlp: 0xf9fafbfc 0xfdfeff00 0x1020304 0x5060708;\";\n+  x = \"1:48:48:0xf9fafbfc 0xfdfeff00 0x1020304 0x5060708\";\n+  n = sscanf(p, \"%%vlp:%vlp;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vlp\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%lvx: f9fafbfc fdfeff00 1020304 5060708;\";\n+  x = \"1:40:40:f9fafbfc fdfeff00 1020304 5060708\";\n+  n = sscanf(p, \"%%lvx:%lvx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%lvx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vlX: F9FAFBFC FDFEFF00 1020304 5060708;\";\n+  x = \"1:40:40:F9FAFBFC FDFEFF00 1020304 5060708\";\n+  n = sscanf(p, \"%%vlX:%vlX;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vlX\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,2vx: f9,fa,fb,fc,fd,fe,ff, 0, 1, 2, 3, 4, 5, 6, 7, 8;\";\n+  x = \"1:55:55:f9,fa,fb,fc,fd,fe,ff, 0, 1, 2, 3, 4, 5, 6, 7, 8\";\n+  n = sscanf(p, \"%%,2vx:%,2vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,2vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%;4vhX: F9FA;FBFC;FDFE;FF00; 102; 304; 506; 708;\";\n+  x = \"1:48:48:F9FA;FBFC;FDFE;FF00; 102; 304; 506; 708\";\n+  n = sscanf(p, \"%%;4vhX:%;4vhX;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%;4vhX\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%;8vlx: f9fafbfc;fdfeff00; 1020304; 5060708;\";\n+  x = \"1:44:44:f9fafbfc;fdfeff00; 1020304; 5060708\";\n+  n = sscanf(p, \"%%;8vlx:%;8vlx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%;8vlx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%;8vhd: -01542;  -01028;  -00514;  -00256;  +00258;  +00772;  +01286;  +01800;\";\n+  x = \"1:78:78:-01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  n = sscanf(p, \"%%;8vhd:%;8vhd;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%- ;+8.5vhd\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%;8vhd: -01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  ;\";\n+  x = \"1:80:80:-01542  ;-01028  ;-00514  ;-00256  ;+00258  ;+00772  ;+01286  ;+01800  \";\n+  n = sscanf(p, \"%%;8vhd:%;8vhd ;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%- ;+8.5vhd\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vc: ab defghijklmnop;\";\n+  x = \"1:22:22:ab defghijklmnop\";\n+  n = sscanf(p, \"%%vc: %vc;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vc\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%vcqrstuvwxyz,%,vc: ab defghijklmnopqrstuvwxyz,a,b, ,d,e,f,g,h,i,j,k,l,m,n,o,p;\";\n+  x = \"2:79:79:ab defghijklmnopqrstuvwxyz,a,b, ,d,e,f,g,h,i,j,k,l,m,n,o,p\";\n+  n = sscanf(p, \"%%vcqrstuvwxyz,%%,vc: %vcqrstuvwxyz,%,vc;%n\", &s8, &s8a, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vcqrstuvwxyz,%,vc\", n, i, strlen(p), s8, s8a);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61, 0x62 ,0x63 , 0x64,0x65  ,0x66,  0x67  ,  0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70;\";\n+  x = \"1:98:98:0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* Input conflict after 0x70.  two assignments; %n not processed.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70#\";\n+  x = \"1:-1:86:0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* Input conflict after 0x67.  one assignment; %n not processed.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67#0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70;\";\n+  x = \"1:-1:86:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx%c%,vx;%n\", &ch, &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* Input conflict after 0x7.  two assignments; %n not processed.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x7_0;\";\n+  x = \"2:-1:87:0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x7\";\n+  n = sscanf(p, \"%%,vx%c%,vx;%n\", &ch, &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* EOF reached before the first assignment.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f\";\n+  x = \"-1:-1:80:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* EOF reached before the first assignment.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f \";\n+  x = \"-1:-1:81:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* EOF reached before the first assignment.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f ,\";\n+  x = \"-1:-1:82:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* EOF reached before the first assignment.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f, \";\n+  x = \"-1:-1:82:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* Input conflict after 0x7.  one assignment; %n not processed.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x7_0;\";\n+  x = \"1:-1:87:0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x7\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  /* Input conflict after 0x61.  zero assignments; %n not processed.  */\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"%,vx: 0x61 0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70;\";\n+  x = \"0:-1:86:0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%%,vx:%,vx;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%#,vx\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"Hello World, ...;\";\n+  x = \"1:17:17:Hello World, ...\";\n+  n = sscanf(p, \"%vc;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vc\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s8 = ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"H,e,l,l,o, ,W,o,r,l,d,,, ,.,.,.;\";\n+  x = \"1:32:32:H,e,l,l,o, ,W,o,r,l,d,,, ,.,.,.\";\n+  n = sscanf(p, \"%,vc;%n\", &s8, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,vc\", n, i, strlen(p), s8);\n+  check(!strcmp(x, buf), p);\n+\n+  s16 = ((vector signed short){0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"-2 -1 0 1 2 3 4 5;\";\n+  x = \"1:18:18:-2 -1 0 1 2 3 4 5\";\n+  n = sscanf(p, \"%vhd;%n\", &s16, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%vhd\", n, i, strlen(p), s16);\n+  check(!strcmp(x, buf), p);\n+\n+  u16 = ((vector unsigned short){0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"65534,65535,0,1,2,3,4,5;\";\n+  x = \"1:24:24:65534,65535,0,1,2,3,4,5\";\n+  n = sscanf(p, \"%,vhu;%n\", &u16, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,vhu\", n, i, strlen(p), u16);\n+  check(!strcmp(x, buf), p);\n+\n+  s32 = ((vector signed int){0,0,0,0}); i = -1;\n+  p = \" 1, 2, 3,99;\";\n+  x = \"1:12:12: 1, 2, 3,99\";\n+  n = sscanf(p, \"%,2lvd;%n\", &s32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,2lvd\", n, i, strlen(p), s32);\n+  check(!strcmp(x, buf), p);\n+\n+  f32 = ((vector float){0,0,0,0}); i = -1;\n+  p = \"1.10 ,2.20 ,3.30 ,4.40 ;\";\n+  x = \"1:24:24:1.10 ,2.20 ,3.30 ,4.40 \";\n+  n = sscanf(p, \"%,5vf ;%n\", &f32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%-,5.2vf\", n, i, strlen(p), f32);\n+  check(!strcmp(x, buf), p);\n+\n+  /* <char-conv> only goes with <vector-size> 'v'.  */\n+  u16 = ((vector unsigned short){0,0,0,0,0,0,0,0}); i = -1;\n+  p = \"abcdefgh;\";\n+  x = \"0:-1:9:0,0,0,0,0,0,0,0\";\n+  n = sscanf(p, \"%vhc;%n\", &u16, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,vhu\", n, i, strlen(p), u16);\n+  check(!strcmp(x, buf), p);\n+\n+  s32 = ((vector signed int){0,0,0,0}); i = -1;\n+  p = \"abcd;\";\n+  x = \"0:-1:5:0,0,0,0\";\n+  n = sscanf(p, \"%lvc;%n\", &s32, &i);\n+  snprintf(buf, sizeof buf, \"%d:%d:%d:%,vlu\", n, i, strlen(p), s32);\n+  check(!strcmp(x, buf), p);\n+}"}, {"sha": "324e83e35a22b0e3ffdeb18436fa7dd5a0aeeef4", "filename": "gcc/testsuite/gcc.dg/vmx/x-01.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-01.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,25 @@\n+#include <altivec.h>\n+vector bool char\n+g(vector unsigned char, vector bool char);\n+\n+vector bool char\n+f(vector bool char b, vector unsigned char d) \n+{\n+  vector bool char *p = &b;\n+  *p = g(d,b);\n+  return *p;\n+}\n+\n+vector bool char b8;\n+vector unsigned char u8;\n+vector bool char\n+g(vector unsigned char a, vector bool char b)\n+{\n+  return b8;\n+}\n+\n+int main() \n+{ \n+  f(b8, u8);\n+  return 0; \n+}"}, {"sha": "4ddcc0c00dd8b40a20034f4bbe4fad21d2b55af2", "filename": "gcc/testsuite/gcc.dg/vmx/x-02.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-02.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,34 @@\n+#include <altivec.h>\n+\n+static vector bool char\n+g(vector unsigned char, vector bool char);\n+\n+static int q(void);\n+\n+static vector bool char\n+f(vector bool char b, vector unsigned char d) \n+{\n+  vector bool char *p = &b;\n+  *p = g(d,b);\n+  return q() ? *p : b;\n+}\n+\n+static vector bool char b8;\n+static vector unsigned char u8;\n+\n+static vector bool char\n+g(vector unsigned char a, vector bool char b)\n+{\n+  return b8;\n+}\n+\n+static int q ()\n+{\n+  return 1;\n+}\n+\n+int main() \n+{ \n+  f(b8, u8);\n+  return 0; \n+}"}, {"sha": "0972ac9a3d8185c077008c5e661c336bfdd39f01", "filename": "gcc/testsuite/gcc.dg/vmx/x-03.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-03.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-03.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-03.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,124 @@\n+#include <altivec.h>\n+extern vector unsigned char u8(void);\n+extern vector signed char s8(void);\n+extern vector bool char b8(void);\n+extern vector unsigned short u16(void);\n+extern vector signed short s16(void);\n+extern vector bool short b16(void);\n+extern vector unsigned int u32(void);\n+extern vector signed int s32(void);\n+extern vector bool int b32(void);\n+extern vector float f32(void);\n+extern vector pixel p16(void);\n+\n+extern void g(vector unsigned char, ...);\n+\n+void\n+f(vector unsigned char u8p, vector signed char s8p, vector bool char b8p,\n+  vector unsigned short u16p, vector signed short s16p,\n+  vector bool short b16p, vector unsigned int u32p, \n+  vector signed int s32p, vector bool int b32p,\n+  vector float f32p, vector pixel p16p)\n+{\n+  vector unsigned char u8l = u8();\n+  vector signed char s8l = s8();\n+  vector bool char b8l = b8();\n+  vector unsigned short u16l = u16();\n+  vector signed short s16l = s16();\n+  vector bool short b16l = b16();\n+  vector unsigned int u32l = u32();\n+  vector signed int s32l = s32();\n+  vector bool int b32l = b32();\n+  vector float f32l = f32();\n+  vector pixel p16l = p16();\n+\n+  g(u8l, s8l, b8l, u16l, s16l, b16l, u32l, s32l, b32l, f32l, p16l);\n+}\n+\n+vector unsigned char\n+u8(void)\n+{\n+  static vector unsigned char zero;\n+  return zero;\n+}\n+\n+vector signed char\n+s8(void)\n+{\n+  static vector signed char zero;\n+  return zero;\n+}\n+\n+vector bool char\n+b8(void)\n+{\n+  static vector bool char zero;\n+  return zero;\n+}\n+\n+vector unsigned short\n+u16(void)\n+{\n+  static vector unsigned short zero;\n+  return zero;\n+}\n+\n+vector signed short\n+s16(void)\n+{\n+  static vector signed short zero;\n+  return zero;\n+}\n+\n+vector bool short\n+b16(void)\n+{\n+  static vector bool short zero;\n+  return zero;\n+}\n+\n+vector unsigned int\n+u32(void)\n+{\n+  static vector unsigned int zero;\n+  return zero;\n+}\n+\n+vector signed int\n+s32(void)\n+{\n+  static vector signed int zero;\n+  return zero;\n+}\n+\n+vector bool int\n+b32(void)\n+{\n+  static vector bool int zero;\n+  return zero;\n+}\n+\n+vector float\n+f32(void)\n+{\n+  static vector float zero;\n+  return zero;\n+}\n+\n+vector pixel\n+p16(void)\n+{\n+  static vector pixel zero;\n+  return zero;\n+}\n+\n+void\n+g(vector unsigned char a, ...)\n+{\n+}\n+\n+int main()\n+{\n+  f(u8(), s8(), b8(), u16(), s16(), b16(), u32(), s32(), b32(), f32(), p16());\n+  return 0; \n+}"}, {"sha": "44694c8a6d5dd5932962099148483ec5299330d6", "filename": "gcc/testsuite/gcc.dg/vmx/x-04.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-04.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,80 @@\n+#include <altivec.h>\n+vector unsigned char\n+permute_128(vector unsigned char input)\n+{\n+  vector unsigned char result, new_bit;\n+\n+  vector unsigned char select2 = ((vector unsigned char){2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2});\n+  vector unsigned char select3 = ((vector unsigned char){4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4});\n+  vector unsigned char select4 = ((vector unsigned char){8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8});\n+  vector unsigned char select5 = ((vector unsigned char){16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16});\n+  vector unsigned char select6 = ((vector unsigned char){32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32});\n+  vector unsigned char select7 = ((vector unsigned char){64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64});\n+  vector unsigned char select8 = ((vector unsigned char){128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128});\n+\n+  vector unsigned char control1\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control2\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control3\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control4\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control5\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control6\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control7\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char control8\n+    = ((vector unsigned char){15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0});\n+  vector unsigned char rotate1 = ((vector unsigned char){1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});\n+  vector unsigned char rotate2 = ((vector unsigned char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});\n+  vector unsigned char rotate3 = ((vector unsigned char){5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5});\n+  vector unsigned char rotate4 = ((vector unsigned char){7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7});\n+  vector unsigned char rotate5 = ((vector unsigned char){1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1});\n+  vector unsigned char rotate6 = ((vector unsigned char){3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3});\n+  vector unsigned char rotate7 = ((vector unsigned char){5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5});\n+  vector unsigned char rotate8 = ((vector unsigned char){7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7});\n+\n+  result = vec_vperm(input, input, control1);\n+  result = vec_rl(result, rotate1);\n+\n+  new_bit = vec_vperm(input, input, control2);\n+  new_bit = vec_rl(new_bit, rotate2);\n+  result = vec_sel(result, new_bit, select2);\n+\n+  new_bit = vec_vperm(input, input, control3);\n+  new_bit = vec_rl(new_bit, rotate3);\n+  result = vec_sel(result, new_bit, select3);\n+\n+  new_bit = vec_vperm(input, input, control4);\n+  new_bit = vec_rl(new_bit, rotate4);\n+  result = vec_sel(result, new_bit, select4);\n+\n+  new_bit = vec_vperm(input, input, control5);\n+  new_bit = vec_rl(new_bit, rotate5);\n+  result = vec_sel(result, new_bit, select5);\n+\n+  new_bit = vec_vperm(input, input, control6);\n+  new_bit = vec_rl(new_bit, rotate6);\n+  result = vec_sel(result, new_bit, select6);\n+\n+  new_bit = vec_vperm(input, input, control7);\n+  new_bit = vec_rl(new_bit, rotate7);\n+  result = vec_sel(result, new_bit, select7);\n+\n+  new_bit = vec_vperm(input, input, control8);\n+  new_bit = vec_rl(new_bit, rotate8);\n+  result = vec_sel(result, new_bit, select8);\n+\n+  return result;\n+}\n+\n+int main()\n+{\n+  vector unsigned char input\n+    = ((vector unsigned char){0,1,2,4,8,16,32,64,128,0,1,2,4,8,16,32});\n+  vector unsigned char result = permute_128(input);\n+  return 0;\n+}"}, {"sha": "80c13dcf04edd2b686b1c6864478dd7cbd6bc69a", "filename": "gcc/testsuite/gcc.dg/vmx/x-05.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-05.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-05.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fx-05.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,82 @@\n+#include <altivec.h>\n+\n+static vector unsigned char select2 = {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2};\n+static vector unsigned char select3 = {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4};\n+static vector unsigned char select4 = {8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8};\n+static vector unsigned char select5 = {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16};\n+static vector unsigned char select6 = {32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32};\n+static vector unsigned char select7 = {64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64};\n+static vector unsigned char select8 = {128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128};\n+\n+static vector unsigned char control1\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control2\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control3\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control4\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control5\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control6\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control7\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char control8\n+  = {15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0};\n+static vector unsigned char rotate1 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+static vector unsigned char rotate2 = {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};\n+static vector unsigned char rotate3 = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5};\n+static vector unsigned char rotate4 = {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};\n+static vector unsigned char rotate5 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+static vector unsigned char rotate6 = {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3};\n+static vector unsigned char rotate7 = {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5};\n+static vector unsigned char rotate8 = {7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7};\n+\n+static vector unsigned char permute_128(vector unsigned char input)\n+{\n+  vector unsigned char result, new_bit;\n+\n+  /* and now the code */\n+  result = vec_vperm(input, input, control1);\n+  result = vec_rl(result, rotate1);\n+\n+  new_bit = vec_vperm(input, input, control2);\n+  new_bit = vec_rl(new_bit, rotate2);\n+  result = vec_sel(result, new_bit, select2);\n+\n+  new_bit = vec_vperm(input, input, control3);\n+  new_bit = vec_rl(new_bit, rotate3);\n+  result = vec_sel(result, new_bit, select3);\n+\n+  new_bit = vec_vperm(input, input, control4);\n+  new_bit = vec_rl(new_bit, rotate4);\n+  result = vec_sel(result, new_bit, select4);\n+\n+  new_bit = vec_vperm(input, input, control5);\n+  new_bit = vec_rl(new_bit, rotate5);\n+  result = vec_sel(result, new_bit, select5);\n+\n+  new_bit = vec_vperm(input, input, control6);\n+  new_bit = vec_rl(new_bit, rotate6);\n+  result = vec_sel(result, new_bit, select6);\n+\n+  new_bit = vec_vperm(input, input, control7);\n+  new_bit = vec_rl(new_bit, rotate7);\n+  result = vec_sel(result, new_bit, select7);\n+\n+  new_bit = vec_vperm(input, input, control8);\n+  new_bit = vec_rl(new_bit, rotate8);\n+  result = vec_sel(result, new_bit, select8);\n+\n+  return result;\n+}\n+\n+int main()\n+{\n+  vector unsigned char input\n+    = {0,1,2,4,8,16,32,64,128,0,1,2,4,8,16,32};\n+  vector unsigned char result = permute_128(input);\n+  return 0;\n+}\n+"}, {"sha": "eed4be3d1f49fe3c06ed5ac6524500114fe10bde", "filename": "gcc/testsuite/gcc.dg/vmx/yousufi-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fyousufi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fyousufi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fyousufi-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,15 @@\n+#include \"harness.h\"\n+\n+/* Tests the vec_ctu function, which converts a vector of floats to a vector\n+   of unsigned ints.  In powerpc-eabisim-run ver. moto-1.0, vec_ctu produces\n+   strange output for input values of less than ~.0039. -Umair */\n+\n+static void test()\n+{\n+  vector float input = ((vector float){0.003,0.003,0.003,0.003});\n+  vector unsigned int output;\n+  vector unsigned int expect = ((vector unsigned int){0,0,0,0});\n+\n+  output = vec_ctu(input, 1);\n+  check(vec_all_eq(output, expect), \"vec_ctu\");\n+}"}, {"sha": "637351cc5d4d6d5501aab1b3f25bb1f6a7f277c0", "filename": "gcc/testsuite/gcc.dg/vmx/zero-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero-1.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,13 @@\n+#include \"harness.h\"\n+\n+static vector unsigned int funny()\n+{\n+  vector unsigned int a;\n+  return vec_andc(vec_add(a,a),vec_add(a,a));\n+}\n+\n+static void test()\n+{\n+  static vector unsigned int zero;\n+  check(vec_all_eq(funny(), zero), \"funny\");\n+}"}, {"sha": "9a337e6e8554d018f529923f5bde3378375d3baf", "filename": "gcc/testsuite/gcc.dg/vmx/zero.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5735c2609b01b67c84c7cd43d85294d62dd6535/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvmx%2Fzero.c?ref=c5735c2609b01b67c84c7cd43d85294d62dd6535", "patch": "@@ -0,0 +1,100 @@\n+#include \"harness.h\"\n+\n+vector signed short zs16() { return ((vector signed short){0,0,0,0,0,0,0,0}); }\n+vector signed short s16ss() { vector signed short a; return vec_subs(a,a); }\n+vector signed short s16s() { vector signed short a; return vec_sub(a,a); }\n+vector signed short s16x() { vector signed short a; return vec_xor(a,a); }\n+vector signed short s16a() { vector signed short a; return vec_andc(a,a); }\n+\n+vector unsigned short zu16() { return ((vector unsigned short){0,0,0,0,0,0,0,0}); }\n+vector unsigned short u16ss() { vector unsigned short a; return vec_subs(a,a); }\n+vector unsigned short u16s() { vector unsigned short a; return vec_sub(a,a); }\n+vector unsigned short u16x() { vector unsigned short a; return vec_xor(a,a); }\n+vector unsigned short u16a() { vector unsigned short a; return vec_andc(a,a); }\n+\n+vector signed int zs32() { return ((vector signed int){0,0,0,0}); }\n+vector signed int s32ss() { vector signed int a; return vec_subs(a,a); }\n+vector signed int s32s() { vector signed int a; return vec_sub(a,a); }\n+vector signed int s32x() { vector signed int a; return vec_xor(a,a); }\n+vector signed int s32a() { vector signed int a; return vec_andc(a,a); }\n+\n+vector unsigned int zu32() { return ((vector unsigned int){0,0,0,0}); }\n+vector unsigned int u32ss() { vector unsigned int a; return vec_subs(a,a); }\n+vector unsigned int u32s() { vector unsigned int a; return vec_sub(a,a); }\n+vector unsigned int u32x() { vector unsigned int a; return vec_xor(a,a); }\n+vector unsigned int u32a() { vector unsigned int a; return vec_andc(a,a); }\n+\n+vector signed char zs8() { return ((vector signed char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); }\n+vector signed char s8ss() { vector signed char a; return vec_subs(a,a); }\n+vector signed char s8s() { vector signed char a; return vec_sub(a,a); }\n+vector signed char s8x() { vector signed char a; return vec_xor(a,a); }\n+vector signed char s8a() { vector signed char a; return vec_andc(a,a); }\n+\n+vector unsigned char zu8() { return ((vector unsigned char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); }\n+vector unsigned char u8ss() { vector unsigned char a; return vec_subs(a,a); }\n+vector unsigned char u8s() { vector unsigned char a; return vec_sub(a,a); }\n+vector unsigned char u8x() { vector unsigned char a; return vec_xor(a,a); }\n+vector unsigned char u8a() { vector unsigned char a; return vec_andc(a,a); }\n+\n+vector pixel zp16() { return ((vector pixel){0,0,0,0,0,0,0,0}); }\n+\n+vector bool short zb16() { return ((vector bool short){0,0,0,0,0,0,0,0}); }\n+\n+vector bool short b16x() { vector bool short a; return vec_xor(a,a); }\n+vector bool short b16a() { vector bool short a; return vec_andc(a,a); }\n+vector bool int zb32() { return ((vector bool int){0,0,0,0}); }\n+\n+vector bool int b32x() { vector bool int a; return vec_xor(a,a); }\n+vector bool int b32a() { vector bool int a; return vec_andc(a,a); }\n+vector bool char zb8() { return ((vector bool char){0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}); }\n+\n+vector bool char b8x() { vector bool char a; return vec_xor(a,a); }\n+vector bool char b8a() { vector bool char a; return vec_andc(a,a); }\n+\n+static void test()\n+{\n+  static vector unsigned int zerov;\n+#define zcheck(val, tag) \\\n+  check(vec_all_eq((vector unsigned int)(val), zerov), tag)\n+  \n+  zcheck(zs16(), \"zs16\");\n+  zcheck(s16ss(), \"s16ss\");\n+  zcheck(s16s(), \"s16s\");\n+  zcheck(s16x(), \"s16x\");\n+  zcheck(s16a(), \"s16a\");\n+  zcheck(zu16(), \"zu16\");\n+  zcheck(u16ss(), \"u16ss\");\n+  zcheck(u16s(), \"u16s\");\n+  zcheck(u16x(), \"u16x\");\n+  zcheck(u16a(), \"u16a\");\n+  zcheck(zs32(), \"zs32\");\n+  zcheck(s32ss(), \"s32ss\");\n+  zcheck(s32s(), \"s32s\");\n+  zcheck(s32x(), \"s32x\");\n+  zcheck(s32a(), \"s32a\");\n+  zcheck(zu32(), \"zu32\");\n+  zcheck(u32ss(), \"u32ss\");\n+  zcheck(u32s(), \"u32s\");\n+  zcheck(u32x(), \"u32x\");\n+  zcheck(u32a(), \"u32a\");\n+  zcheck(zs8(), \"zs8\");\n+  zcheck(s8ss(), \"s8ss\");\n+  zcheck(s8s(), \"s8s\");\n+  zcheck(s8x(), \"s8x\");\n+  zcheck(s8a(), \"s8a\");\n+  zcheck(zu8(), \"zu8\");\n+  zcheck(u8ss(), \"u8ss\");\n+  zcheck(u8s(), \"u8s\");\n+  zcheck(u8x(), \"u8x\");\n+  zcheck(u8a(), \"u8a\");\n+  zcheck(zp16(), \"zp16\");\n+  zcheck(zb16(), \"zb16\");\n+  zcheck(b16x(), \"b16x\");\n+  zcheck(b16a(), \"b16a\");\n+  zcheck(zb32(), \"zb32\");\n+  zcheck(b32x(), \"b32x\");\n+  zcheck(b32a(), \"b32a\");\n+  zcheck(zb8(), \"zb8\");\n+  zcheck(b8x(), \"b8x\");\n+  zcheck(b8a(), \"b8a\");\n+}"}]}