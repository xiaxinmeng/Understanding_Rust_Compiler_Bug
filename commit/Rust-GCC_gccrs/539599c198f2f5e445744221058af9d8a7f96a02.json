{"sha": "539599c198f2f5e445744221058af9d8a7f96a02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM5NTk5YzE5OGYyZjVlNDQ1NzQ0MjIxMDU4YWY5ZDhhN2Y5NmEwMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-08-12T00:43:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-08-12T00:43:47Z"}, "message": "re PR c++/16853 (pointer-to-member initialization from incompatible one accepted)\n\n\tPR c++/16853\n\t* call.c (standard_conversion): Do not accept conversions between\n\tpointers to members if the class types are unrelated.\n\n\tPR c++/16618\n\t* parser.c (cp_parser_builtin_offsetof): Cast to \"const volatile\n\tchar &\" instead of just \"char &\".\n\n\tPR c++/16870\n\t* pt.c (tsubst): Just return the unknown_type_node.\n\n\tPR c++/16853\n\t* g++.dg/init/ptrmem1.C: New test.\n\n\tPR c++/16618\n\t* g++.dg/parse/offsetof5.C: New test.\n\n\tPR c++/16870\n\t* g++.dg/template/overload3.C: New test.\n\nFrom-SVN: r85840", "tree": {"sha": "fd96ba601837e4bdc98384092836948628296674", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd96ba601837e4bdc98384092836948628296674"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/539599c198f2f5e445744221058af9d8a7f96a02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539599c198f2f5e445744221058af9d8a7f96a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/539599c198f2f5e445744221058af9d8a7f96a02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/539599c198f2f5e445744221058af9d8a7f96a02/comments", "author": null, "committer": null, "parents": [{"sha": "eb3643d8009ad661b65a9deea6cb2aad7e23d41b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3643d8009ad661b65a9deea6cb2aad7e23d41b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3643d8009ad661b65a9deea6cb2aad7e23d41b"}], "stats": {"total": 68, "additions": 67, "deletions": 1}, "files": [{"sha": "3fba6273d48f591e391324b2caa1e0e81d49b9bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -1,3 +1,16 @@\n+2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16853\n+\t* call.c (standard_conversion): Do not accept conversions between\n+\tpointers to members if the class types are unrelated.\n+\n+\tPR c++/16618\n+\t* parser.c (cp_parser_builtin_offsetof): Cast to \"const volatile\n+\tchar &\" instead of just \"char &\".\n+\n+\tPR c++/16870\n+\t* pt.c (tsubst): Just return the unknown_type_node.\n+\n 2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16964"}, {"sha": "23d65addbddf919dd5fb344c35a1a126da2d3af7", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -716,6 +716,8 @@ standard_conversion (tree to, tree from, tree expr)\n \t\t\t\t\tTYPE_PTRMEM_POINTED_TO_TYPE (from));\n \t      conv = build_conv (ck_pmem, from, conv);\n \t    }\n+\t  else if (!same_type_p (fbase, tbase))\n+\t    return NULL;\n \t}\n       else if (IS_AGGR_TYPE (TREE_TYPE (from))\n \t       && IS_AGGR_TYPE (TREE_TYPE (to))"}, {"sha": "a8854dcad2d7585eedc6a0da13cfa6d5e1b484dd", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -5859,7 +5859,12 @@ cp_parser_builtin_offsetof (cp_parser *parser)\n      we're just mirroring the traditional macro implementation.  Better\n      would be to do the lowering of the ADDR_EXPR to flat pointer arithmetic\n      here rather than in build_x_unary_op.  */\n-  expr = build_reinterpret_cast (build_reference_type (char_type_node), expr);\n+  \n+  expr = (build_reinterpret_cast \n+\t  (build_reference_type (cp_build_qualified_type \n+\t\t\t\t (char_type_node, \n+\t\t\t\t  TYPE_QUAL_CONST | TYPE_QUAL_VOLATILE)), \n+\t   expr));\n   expr = build_x_unary_op (ADDR_EXPR, expr);\n   expr = build_reinterpret_cast (size_type_node, expr);\n "}, {"sha": "516488f0de2f9a242a1bc3df9b2d5709b8156842", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -6706,6 +6706,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       || t == integer_type_node\n       || t == void_type_node\n       || t == char_type_node\n+      || t == unknown_type_node\n       || TREE_CODE (t) == NAMESPACE_DECL)\n     return t;\n "}, {"sha": "a721a75a09372eb0191f3c2fd107b06d8fa45fd5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -1,3 +1,14 @@\n+2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/16853\n+\t* g++.dg/init/ptrmem1.C: New test.\n+\n+\tPR c++/16618\n+\t* g++.dg/parse/offsetof5.C: New test.\n+\n+\tPR c++/16870\n+\t* g++.dg/template/overload3.C: New test.\n+\n 2004-08-11  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/16964"}, {"sha": "6f1604fafa6fc0343fb29442b17332903893284a", "filename": "gcc/testsuite/g++.dg/init/ptrmem1.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fptrmem1.C?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/16853\n+\n+struct A {};\n+struct B {};\n+\n+int B::* b;\n+int A::* a = b; // { dg-error \"\" }"}, {"sha": "553e33ded424d5bc3e0e8367b23b90884ebc9f96", "filename": "gcc/testsuite/g++.dg/parse/offsetof5.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Foffsetof5.C?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/16618\n+\n+#include <stddef.h>\n+\n+struct test\n+{\n+  const char a;\n+};\n+\n+int main()\n+{\n+  offsetof(test,a);\n+}"}, {"sha": "ec48fbb90707fe5e6d4c64af8a63465816bd50c3", "filename": "gcc/testsuite/g++.dg/template/overload3.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/539599c198f2f5e445744221058af9d8a7f96a02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload3.C?ref=539599c198f2f5e445744221058af9d8a7f96a02", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/16870\n+\n+struct A\n+{\n+  int operator[](int) const;\n+};\n+\n+template<int> A foo();\n+\n+A bar(A(*)());\n+\n+template<int> int baz() { return (bar(&foo<0>))[0]; }\n+\n+template int baz<0>();"}]}