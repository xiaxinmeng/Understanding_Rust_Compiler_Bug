{"sha": "96e13905ad6eb836fc85bc564f31ee8a055cd07e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlMTM5MDVhZDZlYjgzNmZjODViYzU2NGYzMWVlOGEwNTVjZDA3ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-12-22T18:30:28Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-12-22T18:30:28Z"}, "message": "* genautomata.c: Fix comment typos.\n\nFrom-SVN: r60415", "tree": {"sha": "bdc869a4a7f8ca828fda9e20bc747a2408f8c6a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdc869a4a7f8ca828fda9e20bc747a2408f8c6a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e13905ad6eb836fc85bc564f31ee8a055cd07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e13905ad6eb836fc85bc564f31ee8a055cd07e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e13905ad6eb836fc85bc564f31ee8a055cd07e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e13905ad6eb836fc85bc564f31ee8a055cd07e/comments", "author": null, "committer": null, "parents": [{"sha": "66b4e47860cc5db8236e034743bf6a5bea20332a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b4e47860cc5db8236e034743bf6a5bea20332a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b4e47860cc5db8236e034743bf6a5bea20332a"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "505257ae3f593eb59a9c70650595616c5c673d06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e13905ad6eb836fc85bc564f31ee8a055cd07e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e13905ad6eb836fc85bc564f31ee8a055cd07e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96e13905ad6eb836fc85bc564f31ee8a055cd07e", "patch": "@@ -1,3 +1,7 @@\n+2002-12-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* genautomata.c: Fix comment typos.\n+\n Sun Dec 22 18:23:44 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* params.def (tracer-min-branch-probability-feedback): Fix default."}, {"sha": "b64f6f5fbcf7e72db47c0d93e151829936e040b9", "filename": "gcc/genautomata.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e13905ad6eb836fc85bc564f31ee8a055cd07e/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e13905ad6eb836fc85bc564f31ee8a055cd07e/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=96e13905ad6eb836fc85bc564f31ee8a055cd07e", "patch": "@@ -85,7 +85,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n      o optional transformation of nondeterministic finite state\n        automata into deterministic ones if the alternative operator\n-       `|' is treated nondeterministicly in the description (major\n+       `|' is treated nondeterministically in the description (major\n        function is NDFA_to_DFA).\n \n      o optional minimization of the finite state automata by merging\n@@ -815,7 +815,7 @@ struct reserv_decl\n   int loop_pass_num;\n };\n \n-/* This describes define_insn_reservartion (see file rtl.def).  */\n+/* This describes define_insn_reservation (see file rtl.def).  */\n struct insn_reserv_decl\n {\n   rtx condexp;\n@@ -842,7 +842,7 @@ struct insn_reserv_decl\n      insn `cycle advancing'.  */\n   regexp_t transformed_regexp;\n   /* The following field value is list of arcs marked given\n-     insn.  The field is used in transfromation NDFA -> DFA.  */\n+     insn.  The field is used in transformation NDFA -> DFA.  */\n   arc_t arcs_marked_by_insn;\n   /* The two following fields are used during minimization of a finite state\n      automaton.  */\n@@ -962,7 +962,7 @@ struct regexp\n   } regexp;\n };\n \n-/* Reperesents description of pipeline hazard description based on\n+/* Represents description of pipeline hazard description based on\n    NDFA.  */\n struct description\n {\n@@ -1089,7 +1089,7 @@ struct arc\n      state.  */\n   arc_t next_out_arc;\n   /* List of arcs marked given insn is formed with the following\n-     field.  The field is used in transfromation NDFA -> DFA.  */\n+     field.  The field is used in transformation NDFA -> DFA.  */\n   arc_t next_arc_marked_by_insn;\n   /* The following field is defined if NDFA_FLAG is zero.  The member\n      value is number of alternative reservations which can be used for\n@@ -1493,7 +1493,7 @@ check_name (name, pos)\n   return name;\n }\n \n-/* Pointers top all declartions during IR generation are stored in the\n+/* Pointers to all declarations during IR generation are stored in the\n    following.  */\n static vla_ptr_t decls;\n \n@@ -2091,7 +2091,7 @@ string_hash (string)\n \n /* This page contains abstract data `table of automaton declarations'.\n    Elements of the table is nodes representing automaton declarations.\n-   Key of the table elements is name of given automaton.  Rememeber\n+   Key of the table elements is name of given automaton.  Remember\n    that automaton names have own space.  */\n \n /* The function evaluates hash value of an automaton declaration.  The\n@@ -2195,7 +2195,7 @@ finish_automaton_decl_table ()\n /* This page contains abstract data `table of insn declarations'.\n    Elements of the table is nodes representing insn declarations.  Key\n    of the table elements is name of given insn (in corresponding\n-   define_insn_reservation).  Rememeber that insn names have own\n+   define_insn_reservation).  Remember that insn names have own\n    space.  */\n \n /* The function evaluates hash value of an insn declaration.  The\n@@ -2834,7 +2834,7 @@ process_decls ()\n \t}\n     }\n \n-  /* Check exclusion set declarations and form exclussion sets.  */\n+  /* Check exclusion set declarations and form exclusion sets.  */\n   for (i = 0; i < description->decls_num; i++)\n     {\n       decl = description->decls [i];\n@@ -3333,7 +3333,7 @@ print_active_time (f, ticker)\n    really being created.  This value is defined on the base of\n    argument of option `-split'.  If the variable has zero value the\n    number of automata is defined by the constructions `%automaton'.\n-   This case occures when option `-split' is absent or has zero\n+   This case occurs when option `-split' is absent or has zero\n    argument.  If constructions `define_automaton' is absent only one\n    automaton is created.  */\n static int automata_num;\n@@ -3383,7 +3383,7 @@ add_advance_cycle_insn_decl ()\n }\n \n \f\n-/* Abstract data `alternative states' which reperesents\n+/* Abstract data `alternative states' which represents\n    nondeterministic nature of the description (see comments for\n    structures alt_state and state).  */\n \n@@ -3397,7 +3397,7 @@ static int allocated_alt_states_num = 0;\n #endif\n \n /* The following function returns free node alt_state.  It may be new\n-   allocated node or node freed eralier.  */\n+   allocated node or node freed earlier.  */\n static alt_state_t \n get_free_alt_state ()\n {\n@@ -3924,7 +3924,7 @@ output_reserv_sets (f, reservs)\n }\n \n /* The following function returns free node state for AUTOMATON.  It\n-   may be new allocated node or node freed eralier.  The function also\n+   may be new allocated node or node freed earlier.  The function also\n    allocates reservation set if WITH_RESERVS has nonzero value.  */\n static state_t\n get_free_state (with_reservs, automaton)\n@@ -5742,7 +5742,7 @@ create_composed_state (original_state, arcs_marked_by_insn, state_stack)\n     }\n }\n \n-/* The function transformes nondeterminstic AUTOMATON into\n+/* The function transforms nondeterministic AUTOMATON into\n    deterministic.  */\n static void\n NDFA_to_DFA (automaton)\n@@ -5942,7 +5942,7 @@ init_equiv_class (states, states_num)\n \n /* The function processes equivalence class given by its pointer\n    EQUIV_CLASS_PTR on odd iteration if ODD_ITERATION_FLAG.  If there\n-   are not equvalent states, the function partitions the class\n+   are not equivalent states, the function partitions the class\n    removing nonequivalent states and placing them in\n    *NEXT_ITERATION_CLASSES, increments *NEW_EQUIV_CLASS_NUM_PTR ans\n    assigns it to the state equivalence number.  If the class has been\n@@ -6450,7 +6450,7 @@ estimate_one_automaton_bound ()\n   return one_automaton_estimation_bound;\n }\n \n-/* The function compares unit declarations acoording to their maximal\n+/* The function compares unit declarations according to their maximal\n    cycle in reservations.  */\n static int\n compare_max_occ_cycle_nums (unit_decl_1, unit_decl_2)\n@@ -7254,7 +7254,7 @@ output_chip_definitions ()\n \n /* The function outputs translate vector of internal insn code into\n    insn equivalence class number.  The equivalence class number is\n-   used to access to table and vectors reprewsenting DFA(s).  */\n+   used to access to table and vectors representing DFA(s).  */\n static void\n output_translate_vect (automaton)\n      automaton_t automaton;\n@@ -8946,7 +8946,7 @@ add_state_reservs (state)\n     }\n }\n \n-/* The function outputs readable represenatation of all out arcs of\n+/* The function outputs readable representation of all out arcs of\n    STATE.  */\n static void\n output_state_arcs (state)\n@@ -9032,7 +9032,7 @@ remove_state_duplicate_reservs ()\n \n /* The following function output readable representation of DFA(s)\n    state used for fast recognition of pipeline hazards.  State is\n-   described by possible (current and scehduled) cpu unit\n+   described by possible (current and scheduled) cpu unit\n    reservations.  */\n static void\n output_state (state)\n@@ -9186,7 +9186,7 @@ output_time_statistics (f)\n   fprintf (f, \"\\n\");\n }\n \n-/* The function generates DFA (deterministic finate state automaton)\n+/* The function generates DFA (deterministic finite state automaton)\n    for fast recognition of pipeline hazards.  No errors during\n    checking must be fixed before this function call.  */\n static void"}]}