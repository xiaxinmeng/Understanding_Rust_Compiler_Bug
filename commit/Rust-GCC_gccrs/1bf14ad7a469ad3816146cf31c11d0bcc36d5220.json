{"sha": "1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJmMTRhZDdhNDY5YWQzODE2MTQ2Y2YzMWMxMWQwYmNjMzZkNTIyMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2000-05-15T17:07:13Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2000-05-15T17:07:13Z"}, "message": "loop.c (scan_loop, [...]): Change unroll_p and bct_p parameters to flags.\n\n\t* loop.c (scan_loop, strength_reduce, loop_optimize): Change unroll_p\n\tand bct_p parameters to flags.\n\t* loop.h (LOOP_UNROLL, LOOP_BCT): New constants.\n\t* rtl.h (loop_optimize): Update prototype.\n\t* toplev.c (rest_of_compilation): Update call of loop_optimize.\n\nFrom-SVN: r33912", "tree": {"sha": "bfb662e2c39c364781f468e95d92e16b99123bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bfb662e2c39c364781f468e95d92e16b99123bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/comments", "author": null, "committer": null, "parents": [{"sha": "b8d254e64d0d10553df34b4d9bf67fd003730111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8d254e64d0d10553df34b4d9bf67fd003730111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8d254e64d0d10553df34b4d9bf67fd003730111"}], "stats": {"total": 46, "additions": 29, "deletions": 17}, "files": [{"sha": "fe2d0b6a35a34002d2774bc785b50813fa7c28bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "patch": "@@ -1,3 +1,11 @@\n+Mon May 15 19:01:42 MET DST 2000  Jan Hubicka  <jh@suse.cz>\n+\n+\t* loop.c (scan_loop, strength_reduce, loop_optimize): Change unroll_p\n+\tand bct_p parameters to flags.\n+\t* loop.h (LOOP_UNROLL, LOOP_BCT): New constants.\n+\t* rtl.h (loop_optimize): Update prototype.\n+\t* toplev.c (rest_of_compilation): Update call of loop_optimize.\n+\n 2000-05-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* calls.c (expand_call): Move expand_start_target_temps call after"}, {"sha": "d31dbeb94b4963a19ae175cfcb8b15e32cdf7748", "filename": "gcc/loop.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "patch": "@@ -246,7 +246,7 @@ static void count_loop_regs_set PARAMS ((rtx, rtx, varray_type, varray_type,\n static void note_addr_stored PARAMS ((rtx, rtx, void *));\n static void note_set_pseudo_multiple_uses PARAMS ((rtx, rtx, void *));\n static int loop_reg_used_before_p PARAMS ((const struct loop *, rtx, rtx));\n-static void scan_loop PARAMS ((struct loop*, int, int));\n+static void scan_loop PARAMS ((struct loop*, int));\n #if 0\n static void replace_call_address PARAMS ((rtx, rtx, rtx));\n #endif\n@@ -261,7 +261,7 @@ static void add_label_notes PARAMS ((rtx, rtx));\n static void move_movables PARAMS ((struct loop *loop, struct movable *, \n \t\t\t\t   int, int, int));\n static int count_nonfixed_reads PARAMS ((const struct loop *, rtx));\n-static void strength_reduce PARAMS ((struct loop *, int, int, int));\n+static void strength_reduce PARAMS ((struct loop *, int, int));\n static void find_single_use_in_loop PARAMS ((rtx, rtx, varray_type));\n static int valid_initial_value_p PARAMS ((rtx, rtx, int, rtx));\n static void find_mem_givs PARAMS ((const struct loop *, rtx, rtx, int, int));\n@@ -417,11 +417,11 @@ compute_luids (start, end, prev_luid)\n    (or 0 if none should be output).  */\n \n void\n-loop_optimize (f, dumpfile, unroll_p, bct_p)\n+loop_optimize (f, dumpfile, flags)\n      /* f is the first instruction of a chain of insns for one function */\n      rtx f;\n      FILE *dumpfile;\n-     int unroll_p, bct_p;\n+     int flags;\n {\n   register rtx insn;\n   register int i;\n@@ -527,7 +527,7 @@ loop_optimize (f, dumpfile, unroll_p, bct_p)\n       struct loop *loop = &loops->array[i];\n \n       if (! loop->invalid && loop->end)\n-\tscan_loop (loop, unroll_p, bct_p);\n+\tscan_loop (loop, flags);\n     }\n \n   /* If there were lexical blocks inside the loop, they have been\n@@ -586,9 +586,9 @@ next_insn_in_loop (loop, insn)\n    write, then we can also mark the memory read as invariant.  */\n \n static void\n-scan_loop (loop, unroll_p, bct_p)\n+scan_loop (loop, flags)\n      struct loop *loop;\n-     int unroll_p, bct_p;\n+     int flags;\n {\n   register int i;\n   rtx loop_start = loop->start;\n@@ -1140,7 +1140,7 @@ scan_loop (loop, unroll_p, bct_p)\n   if (flag_strength_reduce)\n     {\n       the_movables = movables;\n-      strength_reduce (loop, insn_count, unroll_p, bct_p);\n+      strength_reduce (loop, insn_count, flags);\n \n       reg_scan_update (update_start, update_end, loop_max_reg);\n       loop_max_reg = max_reg_num ();\n@@ -3853,10 +3853,10 @@ for_each_insn_in_loop (loop, fncall)\n    But scan_loop must check regnos to make sure they are in bounds.   */\n \n static void\n-strength_reduce (loop, insn_count, unroll_p, bct_p)\n+strength_reduce (loop, insn_count, flags)\n      struct loop *loop;\n      int insn_count;\n-     int unroll_p, bct_p ATTRIBUTE_UNUSED;\n+     int flags;\n {\n   rtx p;\n   /* Temporary list pointers for traversing loop_iv_list.  */\n@@ -3956,7 +3956,7 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n     {\n       /* Can still unroll the loop anyways, but indicate that there is no\n \t strength reduction info available.  */\n-      if (unroll_p)\n+      if (flags & LOOP_UNROLL)\n \tunroll_loop (loop, insn_count, end_insert_before, 0);\n \n       goto egress;\n@@ -4633,7 +4633,7 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n \t  VARRAY_GROW (reg_iv_type, nregs);\n \t  VARRAY_GROW (reg_iv_info, nregs);\n \t}\n-      recombine_givs (loop, bl, unroll_p);\n+      recombine_givs (loop, bl, flags & LOOP_UNROLL);\n \n       /* Reduce each giv that we decided to reduce.  */\n \n@@ -5027,14 +5027,14 @@ strength_reduce (loop, insn_count, unroll_p, bct_p)\n      induction variable information that strength_reduce has already\n      collected.  Always unroll loops that would be as small or smaller\n      unrolled than when rolled.  */\n-  if (unroll_p\n+  if ((flags & LOOP_UNROLL)\n       || (loop_info->n_iterations > 0\n \t  && unrolled_insn_copies <= insn_count))\n     unroll_loop (loop, insn_count, end_insert_before, 1);\n \n #ifdef HAVE_decrement_and_branch_on_count\n   /* Instrument the loop with BCT insn.  */\n-  if (HAVE_decrement_and_branch_on_count && bct_p\n+  if (HAVE_decrement_and_branch_on_count && (flags & LOOP_BCT)\n       && flag_branch_on_count_reg)\n     insert_bct (loop);\n #endif  /* HAVE_decrement_and_branch_on_count */"}, {"sha": "046196fb2350e99a240cdc0def0d260571e7531d", "filename": "gcc/loop.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Floop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Floop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.h?ref=1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "patch": "@@ -20,6 +20,10 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"varray.h\"\n #include \"basic-block.h\"\n+/* Flags passed to loop_optimize.  */\n+#define LOOP_UNROLL 1\n+#define LOOP_BCT 2\n+\n \n /* Get the loop info pointer of a loop.  */\n #define LOOP_INFO(LOOP) ((struct loop_info *) (LOOP)->aux) "}, {"sha": "089d48b06e4b84d52d3a281716c6eaa8934b6158", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "patch": "@@ -1614,7 +1614,7 @@ extern void print_inline_rtx\t\tPARAMS ((FILE *, rtx, int));\n extern void init_loop\t\t\tPARAMS ((void));\n extern rtx libcall_other_reg\t\tPARAMS ((rtx, rtx));\n #ifdef BUFSIZ\n-extern void loop_optimize\t\tPARAMS ((rtx, FILE *, int, int));\n+extern void loop_optimize\t\tPARAMS ((rtx, FILE *, int));\n #endif\n extern void record_excess_regs\t\tPARAMS ((rtx, rtx, rtx *));\n "}, {"sha": "9017f9e7a3d99b6b9effafae6ce90b2cb64c850b", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bf14ad7a469ad3816146cf31c11d0bcc36d5220/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=1bf14ad7a469ad3816146cf31c11d0bcc36d5220", "patch": "@@ -2995,7 +2995,7 @@ rest_of_compilation (decl)\n \t{\n \t  /* We only want to perform unrolling once.  */\n \t       \n-\t  loop_optimize (insns, rtl_dump_file, 0, 0);\n+\t  loop_optimize (insns, rtl_dump_file, 0);\n \n \t  /* The first call to loop_optimize makes some instructions\n \t     trivially dead.  We delete those instructions now in the\n@@ -3007,7 +3007,7 @@ rest_of_compilation (decl)\n \t\t  analysis code depends on this information.  */\n \t  reg_scan (insns, max_reg_num (), 1);\n \t}\n-      loop_optimize (insns, rtl_dump_file, flag_unroll_loops, 1);\n+      loop_optimize (insns, rtl_dump_file, (flag_unroll_loops ? LOOP_UNROLL : 0) | LOOP_BCT);\n \n       close_dump_file (DFI_loop, print_rtl, insns);\n       timevar_pop (TV_LOOP);"}]}