{"sha": "2343af65585862c38ab76e78387c2ae60c93f227", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0M2FmNjU1ODU4NjJjMzhhYjc2ZTc4Mzg3YzJhZTYwYzkzZjIyNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-05-24T17:13:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-05-24T17:13:38Z"}, "message": "re PR tree-optimization/57124 (254.gap@spec2000 got miscompare after r198413)\n\n\tPR tree-optimization/57124\n\t* tree-vrp.c (simplify_cond_using_ranges): Only simplify a\n\tconversion feeding a condition if the range has an overflow\n\tif -fstrict-overflow.  Add warnings for when we do make the\n\ttransformation.\n\n\tPR tree-optimization/57124\n\t* gcc.c-torture/execute/pr57124.c: New test.\n\t* gcc.c-torture/execute/pr57124.x: Set -fno-strict-overflow.\n\nFrom-SVN: r199305", "tree": {"sha": "a8e876918b34462b5e7b7c8a733d2aeed5023f1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8e876918b34462b5e7b7c8a733d2aeed5023f1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2343af65585862c38ab76e78387c2ae60c93f227", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2343af65585862c38ab76e78387c2ae60c93f227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2343af65585862c38ab76e78387c2ae60c93f227", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2343af65585862c38ab76e78387c2ae60c93f227/comments", "author": null, "committer": null, "parents": [{"sha": "dd1c676f756ac4d885e1629a76c5735fa79544a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd1c676f756ac4d885e1629a76c5735fa79544a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd1c676f756ac4d885e1629a76c5735fa79544a1"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "3d665c3d9d9c1acd58e2c80d49969d73b272e0a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2343af65585862c38ab76e78387c2ae60c93f227", "patch": "@@ -1,3 +1,11 @@\n+2013-05-24  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/57124\n+\t* tree-vrp.c (simplify_cond_using_ranges): Only simplify a\n+\tconversion feeding a condition if the range has an overflow\n+\tif -fstrict-overflow.  Add warnings for when we do make the\n+\ttransformation.\n+\n 2013-05-24  Dehao Chen  <dehao@google.com>\n \n \t* gcc/tree-cfg.c (locus_discrim_map): Fix the typo."}, {"sha": "8c2e2939561d958bf3a989d654d94f5c37610346", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2343af65585862c38ab76e78387c2ae60c93f227", "patch": "@@ -1,3 +1,9 @@\n+2013-05-24  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/57124\n+\t* gcc.c-torture/execute/pr57124.c: New test.\n+\t* gcc.c-torture/execute/pr57124.x: Set -fno-strict-overflow.\n+\n 2013-05-24  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/57294"}, {"sha": "835d249df6a9cd9f2ff893c284c962065da945bb", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57124.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.c?ref=2343af65585862c38ab76e78387c2ae60c93f227", "patch": "@@ -0,0 +1,27 @@\n+__attribute__ ((noinline))\n+foo(short unsigned int *p1, short unsigned int *p2)\n+{\n+  short unsigned int x1, x4;\n+  int x2, x3, x5, x6;\n+  unsigned int x7;\n+  \n+  x1 = *p1;\n+  x2 = (int) x1;\n+  x3 = x2 * 65536;\n+  x4 = *p2;\n+  x5 = (int) x4;\n+  x6 = x3 + x4;\n+  x7 = (unsigned int) x6;\n+  if (x7 <= 268435455U)\n+    abort ();\n+  exit (0);\n+}\n+\n+main()\n+{\n+  short unsigned int x, y;\n+  x = -5;\n+  y = -10;\n+  foo (&x, &y);\n+}\n+"}, {"sha": "d8cacbec59020579d787e9cd301afa1e2d1d0a53", "filename": "gcc/testsuite/gcc.c-torture/execute/pr57124.x", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr57124.x?ref=2343af65585862c38ab76e78387c2ae60c93f227", "patch": "@@ -0,0 +1,2 @@\n+set additional_flags \"-fno-strict-overflow\"\n+return 0"}, {"sha": "ec7ef8f754858f7bb059d6a8528485323fa68cde", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2343af65585862c38ab76e78387c2ae60c93f227/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=2343af65585862c38ab76e78387c2ae60c93f227", "patch": "@@ -8670,8 +8670,32 @@ simplify_cond_using_ranges (gimple stmt)\n \t      && range_fits_type_p (vr,\n \t\t\t\t    TYPE_PRECISION (TREE_TYPE (op0)),\n \t\t\t\t    TYPE_UNSIGNED (TREE_TYPE (op0)))\n-\t      && int_fits_type_p (op1, TREE_TYPE (innerop)))\n+\t      && int_fits_type_p (op1, TREE_TYPE (innerop))\n+\t      /* The range must not have overflowed, or if it did overflow\n+\t\t we must not be wrapping/trapping overflow and optimizing\n+\t\t with strict overflow semantics.  */\n+\t      && ((!is_negative_overflow_infinity (vr->min)\n+\t           && !is_positive_overflow_infinity (vr->max))\n+\t\t  || TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (innerop))))\n \t    {\n+\t      /* If the range overflowed and the user has asked for warnings\n+\t\t when strict overflow semantics were used to optimize code,\n+\t\t issue an appropriate warning.  */\n+\t      if ((is_negative_overflow_infinity (vr->min)\n+\t\t   || is_positive_overflow_infinity (vr->max))\n+\t\t  && issue_strict_overflow_warning (WARN_STRICT_OVERFLOW_CONDITIONAL))\n+\t\t{\n+\t\t  location_t location;\n+\n+\t\t  if (!gimple_has_location (stmt))\n+\t\t    location = input_location;\n+\t\t  else\n+\t\t    location = gimple_location (stmt);\n+\t\t  warning_at (location, OPT_Wstrict_overflow,\n+\t\t      \"assuming signed overflow does not occur when \"\n+\t\t      \"simplifying conditional\");\n+\t\t}\n+\n \t      tree newconst = fold_convert (TREE_TYPE (innerop), op1);\n \t      gimple_cond_set_lhs (stmt, innerop);\n \t      gimple_cond_set_rhs (stmt, newconst);"}]}