{"sha": "1596d018c54213312564d4561e4487c3c4927d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU5NmQwMThjNTQyMTMzMTI1NjRkNDU2MWU0NDg3YzNjNDkyN2Q3YQ==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-11-13T15:19:19Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-11-13T15:19:19Z"}, "message": "re PR target/65837 ([arm-linux-gnueabihf] lto1 target specific builtin not available)\n\n2015-11-13  Christian Bruel  <christian.bruel@st.com>\n\n\tPR target/65837\n\t* config/arm/arm.c (arm_option_override): Move NEON check...\n\t(arm_option_check_internal): here\n\t(arm_file_start): Move .fpu print...\n\t(arm_declare_function_name): here\n\t(arm_option_print): Dump current fpu name.\n\t* config/arm/arm.opt (arm_fpu_index): Mark Save.\n\nFrom-SVN: r230327", "tree": {"sha": "5a50d13438174722c8bc6b3d676beb54b3a92462", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a50d13438174722c8bc6b3d676beb54b3a92462"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1596d018c54213312564d4561e4487c3c4927d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1596d018c54213312564d4561e4487c3c4927d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1596d018c54213312564d4561e4487c3c4927d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1596d018c54213312564d4561e4487c3c4927d7a/comments", "author": null, "committer": null, "parents": [{"sha": "e5b2900e37366b5da63c85c2005e33158817bd60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5b2900e37366b5da63c85c2005e33158817bd60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5b2900e37366b5da63c85c2005e33158817bd60"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "60d7a4d77199426f209eed0f5bcd367c587f03c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1596d018c54213312564d4561e4487c3c4927d7a", "patch": "@@ -1,3 +1,13 @@\n+2015-11-13  Christian Bruel  <christian.bruel@st.com>\n+\n+\tPR target/65837\n+\t* config/arm/arm.c (arm_option_override): Move NEON check...\n+\t(arm_option_check_internal): here\n+\t(arm_file_start): Move .fpu print...\n+\t(arm_declare_function_name): here\n+\t(arm_option_print): Dump current fpu name.\n+\t* config/arm/arm.opt (arm_fpu_index): Mark Save.\n+\n 2015-11-13  Segher Boessenkool  <segher@kernel.crashing.org>\n             Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n "}, {"sha": "e31be67328d316547b6f08fc02fcd93d1dea2ff7", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=1596d018c54213312564d4561e4487c3c4927d7a", "patch": "@@ -2704,6 +2704,12 @@ static void\n arm_option_check_internal (struct gcc_options *opts)\n {\n   int flags = opts->x_target_flags;\n+  const struct arm_fpu_desc *fpu_desc = &all_fpus[opts->x_arm_fpu_index];\n+\n+  /* iWMMXt and NEON are incompatible.  */\n+    if (TARGET_IWMMXT && TARGET_VFP\n+      && ARM_FPU_FSET_HAS (fpu_desc->features, FPU_FL_NEON))\n+    error (\"iWMMXt and NEON are incompatible\");\n \n   /* Make sure that the processor choice does not conflict with any of the\n      other command line choices.  */\n@@ -3154,10 +3160,6 @@ arm_option_override (void)\n \t  error (\"AAPCS does not support -mcallee-super-interworking\");\n     }\n \n-  /* iWMMXt and NEON are incompatible.  */\n-  if (TARGET_IWMMXT && TARGET_NEON)\n-    error (\"iWMMXt and NEON are incompatible\");\n-\n   /* __fp16 support currently assumes the core has ldrh.  */\n   if (!arm_arch4 && arm_fp16_format != ARM_FP16_FORMAT_NONE)\n     sorry (\"__fp16 and no ldrh\");\n@@ -25867,7 +25869,6 @@ arm_file_start (void)\n \n   if (TARGET_BPABI)\n     {\n-      const char *fpu_name;\n       if (arm_selected_arch)\n         {\n \t  /* armv7ve doesn't support any extensions.  */\n@@ -25911,23 +25912,14 @@ arm_file_start (void)\n       if (print_tune_info)\n \tarm_print_tune_info ();\n \n-      if (TARGET_SOFT_FLOAT)\n+      if (! TARGET_SOFT_FLOAT && TARGET_VFP)\n \t{\n-\t  fpu_name = \"softvfp\";\n-\t}\n-      else\n-\t{\n-\t  fpu_name = arm_fpu_desc->name;\n-\t  if (arm_fpu_desc->model == ARM_FP_MODEL_VFP)\n-\t    {\n-\t      if (TARGET_HARD_FLOAT && TARGET_VFP_SINGLE)\n-\t\tarm_emit_eabi_attribute (\"Tag_ABI_HardFP_use\", 27, 1);\n+\t  if (TARGET_HARD_FLOAT && TARGET_VFP_SINGLE)\n+\t    arm_emit_eabi_attribute (\"Tag_ABI_HardFP_use\", 27, 1);\n \n-\t      if (TARGET_HARD_FLOAT_ABI)\n-\t\tarm_emit_eabi_attribute (\"Tag_ABI_VFP_args\", 28, 1);\n-\t    }\n+\t  if (TARGET_HARD_FLOAT_ABI)\n+\t    arm_emit_eabi_attribute (\"Tag_ABI_VFP_args\", 28, 1);\n \t}\n-      asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", fpu_name);\n \n       /* Some of these attributes only apply when the corresponding features\n          are used.  However we don't have any easy way of figuring this out.\n@@ -29766,11 +29758,14 @@ static void\n arm_option_print (FILE *file, int indent, struct cl_target_option *ptr)\n {\n   int flags = ptr->x_target_flags;\n+  const struct arm_fpu_desc *fpu_desc = &all_fpus[ptr->x_arm_fpu_index];\n \n   fprintf (file, \"%*sselected arch %s\\n\", indent, \"\",\n \t   TARGET_THUMB2_P (flags) ? \"thumb2\" :\n \t   TARGET_THUMB_P (flags) ? \"thumb1\" :\n \t   \"arm\");\n+\n+  fprintf (file, \"%*sselected fpu %s\\n\", indent, \"\", fpu_desc->name);\n }\n \n /* Hook to determine if one function can safely inline another.  */\n@@ -29979,6 +29974,9 @@ arm_declare_function_name (FILE *stream, const char *name, tree decl)\n   else\n     fprintf (stream, \"\\t.arm\\n\");\n \n+  asm_fprintf (asm_out_file, \"\\t.fpu %s\\n\", TARGET_SOFT_FLOAT\n+\t       ? \"softvfp\" : arm_fpu_desc->name);\n+\n   if (TARGET_POKE_FUNCTION_NAME)\n     arm_poke_function_name (stream, (const char *) name);\n }"}, {"sha": "6f2db8f3a0d457af821b5bc23d8fb34cdd06724f", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1596d018c54213312564d4561e4487c3c4927d7a/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=1596d018c54213312564d4561e4487c3c4927d7a", "patch": "@@ -144,7 +144,7 @@ EnumValue\n Enum(arm_fp16_format_type) String(alternative) Value(ARM_FP16_FORMAT_ALTERNATIVE)\n \n mfpu=\n-Target RejectNegative Joined Enum(arm_fpu) Var(arm_fpu_index)\n+Target RejectNegative Joined Enum(arm_fpu) Var(arm_fpu_index) Save\n Specify the name of the target floating point hardware/format.\n \n mhard-float"}]}