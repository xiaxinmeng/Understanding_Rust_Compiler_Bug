{"sha": "57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiNGRhZjhkYzRlZDdiNjY5Y2M3MDYzODg2NmRkYjAwZjViNzc0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-12T03:58:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-06-20T14:57:21Z"}, "message": "c++: Refinements to \"more constrained\".\n\nP2113 from the last C++ meeting clarified that we only compare constraints\non functions or function templates that have equivalent template parameters\nand function parameters.\n\nI'm not currently implementing the complicated handling of reversed\ncomparison operators here; thinking about it now, it seems like a lot of\ncomplexity to support a very weird usage.  If I write two similar comparison\noperators to be distinguished by their constraints, why would I write one\nreversed?  If they're two unrelated operators, they're very unlikely to be\nsimilar enough for the complexity to help.  I've started a discussion on the\ncommittee reflector about changing these rules.\n\nThis change breaks some greedy_ops tests in libstdc++ that were relying on\ncomparing constraints on unrelated templates, which seems pretty clearly\nwrong, so I'm removing those tests for now.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (joust): Only compare constraints for non-template\n\tcandidates with matching parameters.\n\t* pt.c (tsubst_pack_expansion): Fix getting a type parameter\n\tpack.\n\t(more_specialized_fn): Only compare constraints for candidates with\n\tmatching parameters.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-return-req1.C: Expect error.\n\t* g++.dg/cpp2a/concepts-p2113a.C: New test.\n\t* g++.dg/cpp2a/concepts-p2113b.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/24_iterators/move_iterator/rel_ops_c++20.cc:\n\tRemove greedy_ops tests.\n\t* testsuite/24_iterators/reverse_iterator/rel_ops_c++20.cc:\n\tRemove greedy_ops tests.", "tree": {"sha": "25aa1fbdf05d421d0589bb95b9ecbb5bba6e74de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25aa1fbdf05d421d0589bb95b9ecbb5bba6e74de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3345e74299687de6144b87c0632018cafd4ccf3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3345e74299687de6144b87c0632018cafd4ccf3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3345e74299687de6144b87c0632018cafd4ccf3b"}], "stats": {"total": 105, "additions": 57, "deletions": 48}, "files": [{"sha": "2b39a3700fc91c74563627ccd1284dd152c14636", "filename": "gcc/cp/call.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -11435,12 +11435,13 @@ joust (struct z_candidate *cand1, struct z_candidate *cand2, bool warn,\n \treturn winner;\n     }\n \n-  /* Concepts: ... or, if not that, F1 is more constrained than F2.\n+  /* Concepts: F1 and F2 are non-template functions with the same\n+     parameter-type-lists, and F1 is more constrained than F2 according to the\n+     partial ordering of constraints described in 13.5.4.  */\n \n-     FIXME: For function templates with no winner, this subsumption may\n-     be computed a separate time.  This needs to be validated, and if\n-     so, the redundant check removed.  */\n-  if (flag_concepts && DECL_P (cand1->fn) && DECL_P (cand2->fn))\n+  if (flag_concepts && DECL_P (cand1->fn) && DECL_P (cand2->fn)\n+      && !cand1->template_decl && !cand2->template_decl\n+      && cand_parms_match (cand1, cand2))\n     {\n       winner = more_constrained (cand1->fn, cand2->fn);\n       if (winner)"}, {"sha": "efaadf7377239c55ee78da70c1572d07631a0737", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -12849,6 +12849,10 @@ tsubst_pack_expansion (tree t, tree args, tsubst_flags_t complain,\n           template_parm_level_and_index (parm_pack, &level, &idx);\n           if (level <= levels)\n             arg_pack = TMPL_ARG (args, level, idx);\n+\n+\t  if (arg_pack && TREE_CODE (arg_pack) == TEMPLATE_TYPE_PARM\n+\t      && TEMPLATE_TYPE_PARAMETER_PACK (arg_pack))\n+\t    arg_pack = NULL_TREE;\n         }\n \n       orig_arg = arg_pack;\n@@ -24061,7 +24065,15 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n \n   /* If both deductions succeed, the partial ordering selects the more\n      constrained template.  */\n-  if (!lose1 && !lose2)\n+  /* P2113: If the corresponding template-parameters of the\n+     template-parameter-lists are not equivalent ([temp.over.link]) or if\n+     the function parameters that positionally correspond between the two\n+     templates are not of the same type, neither template is more\n+     specialized than the other.  */\n+  if (!lose1 && !lose2\n+      && comp_template_parms (DECL_TEMPLATE_PARMS (pat1),\n+\t\t\t      DECL_TEMPLATE_PARMS (pat2))\n+      && compparms (origs1, origs2))\n     {\n       int winner = more_constrained (decl1, decl2);\n       if (winner > 0)"}, {"sha": "e2652dd12f3ab1184c2602f91a21b4eab3d5faa5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-p2113a.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113a.C?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -0,0 +1,12 @@\n+// Test that the second foo is not considered more specialized because we don't\n+// compare constraints unless the template parameters and function parameters\n+// are equivalent (P2113)\n+\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T> concept P = true;\n+\n+template <typename T> void foo(int, T);\n+template <P U>        void foo(U, int);\n+\n+void bar() { foo(1,2); }\t// { dg-error \"ambiguous\" }"}, {"sha": "18c4098d47330ce3c7fea6fc72db2f737dd1ef72", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-p2113b.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-p2113b.C?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -0,0 +1,25 @@\n+// testcase from P2113\n+// { dg-do compile { target c++20 } }\n+\n+template <typename> constexpr bool True = true;\n+template <typename T> concept C = True<T>;\n+\n+void f(C auto &, auto &) = delete;\n+template <C Q> void f(Q &, C auto &);\n+\n+void g(struct A *ap, struct B *bp) {\n+  f(*ap, *bp);  // OK: Can use different methods to produce template parameters\n+}\n+\n+template <typename T, typename U> struct X {};\n+\n+template <typename T1, C U1, typename V1>\n+bool operator==(X<T1, U1>, V1) = delete;\n+\n+// In P2113 this candidate is reversed.\n+template <C T2, C U2, C V2>\n+bool operator==(X<T2, U2>, V2);\n+\n+void h() {\n+  X<void *, int>{} == 0; // OK\n+}"}, {"sha": "d21a49be14e8da4877635ec41f1eb9c450f841b7", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-return-req1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-return-req1.C?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -15,5 +15,5 @@ int f(...);\n \n int main()\n {\n-  f<int>();\n+  f<int>();\t\t\t// { dg-error \"ambiguous\" }\n }"}, {"sha": "b298a312aae7cba6bb0cce2addbee72c961b3486", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/rel_ops_c++20.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Frel_ops_c%2B%2B20.cc?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -142,22 +142,3 @@ static_assert( cend > beg );\n static_assert( beg <= cend );\n static_assert( cend >= beg );\n static_assert( std::is_lt(beg <=> cend) );\n-\n-#include <testsuite_greedy_ops.h>\n-\n-void test01()\n-{\n-  typedef std::move_iterator<greedy_ops::X*> iterator_type;\n-\n-  iterator_type it(nullptr);\n-\n-  it == it;\n-  it != it;\n-  it < it;\n-  it <= it;\n-  it > it;\n-  it >= it;\n-  // it - it;  // See PR libstdc++/71771\n-  1 + it;\n-  it + 1;\n-}"}, {"sha": "e513efba57f8bc128e051d819ed11f59221356ef", "filename": "libstdc++-v3/testsuite/24_iterators/reverse_iterator/rel_ops_c++20.cc", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b4daf8dc4ed7b669cc70638866ddb00f5b7746/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Freverse_iterator%2Frel_ops_c%2B%2B20.cc?ref=57b4daf8dc4ed7b669cc70638866ddb00f5b7746", "patch": "@@ -169,25 +169,3 @@ static_assert( crend > rbeg );\n static_assert( rbeg <= crend );\n static_assert( crend >= rbeg );\n static_assert( std::is_lt(rbeg <=> crend) );\n-\n-#include <testsuite_greedy_ops.h>\n-\n-// copied from 24_iterators/reverse_iterator/greedy_ops.cc\n-void test01()\n-{\n-  typedef std::reverse_iterator<greedy_ops::X*> iterator_type;\n-\n-  iterator_type it;\n-\n-  it == it;\n-  it != it;\n-  it < it;\n-  it <= it;\n-  it > it;\n-  it >= it;\n-#if __cplusplus < 201103L\n-  it - it; // See PR libstdc++/71771\n-#endif\n-  1 + it;\n-  it + 1;\n-}"}]}