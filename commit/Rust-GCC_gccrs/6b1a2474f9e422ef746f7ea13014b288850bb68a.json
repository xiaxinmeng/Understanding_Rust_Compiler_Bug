{"sha": "6b1a2474f9e422ef746f7ea13014b288850bb68a", "node_id": "C_kwDOANBUbNoAKDZiMWEyNDc0ZjllNDIyZWY3NDZmN2VhMTMwMTRiMjg4ODUwYmI2OGE", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-11-05T06:14:33Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-11-05T06:14:33Z"}, "message": "Support multilib-aware target lib flags self-specs overriding\n\nThis patch introduces -fmultiflags, short for multilib TFLAGS, as an\noption that does nothing by default, but that can be added to TFLAGS\nand mapped to useful options by driver self-specs.\n\n\nfor  gcc/ChangeLog\n\n\t* common.opt (fmultiflags): New.\n\t* doc/invoke.texi: Document it.\n\t* gcc.cc (driver_self_specs): Discard it.\n\t* opts.cc (common_handle_option): Ignore it in the driver.", "tree": {"sha": "391e95f35df7bf1efbefe820003324821508f1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/391e95f35df7bf1efbefe820003324821508f1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b1a2474f9e422ef746f7ea13014b288850bb68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1a2474f9e422ef746f7ea13014b288850bb68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b1a2474f9e422ef746f7ea13014b288850bb68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b1a2474f9e422ef746f7ea13014b288850bb68a/comments", "author": null, "committer": null, "parents": [{"sha": "95ba31bc4f88a0a2ff9f0ed41f3478cafcb9e040", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ba31bc4f88a0a2ff9f0ed41f3478cafcb9e040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ba31bc4f88a0a2ff9f0ed41f3478cafcb9e040"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "26e9d1cc4e7c59423d7125edbbc7ae2f81edd23d", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6b1a2474f9e422ef746f7ea13014b288850bb68a", "patch": "@@ -2174,6 +2174,10 @@ fmove-loop-stores\n Common Var(flag_move_loop_stores) Optimization\n Move stores out of loops.\n \n+fmultiflags\n+Common Driver\n+Building block for specs-based multilib-aware TFLAGS.\n+\n fdce\n Common Var(flag_dce) Init(1) Optimization\n Use the RTL dead code elimination pass."}, {"sha": "5077cd7d2428615424f6ca2931ec87bf98e66250", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6b1a2474f9e422ef746f7ea13014b288850bb68a", "patch": "@@ -738,7 +738,7 @@ Objective-C and Objective-C++ Dialects}.\n -flto-report  -flto-report-wpa  -fmem-report-wpa @gol\n -fmem-report  -fpre-ipa-mem-report  -fpost-ipa-mem-report @gol\n -fopt-info  -fopt-info-@var{options}@r{[}=@var{file}@r{]} @gol\n--fprofile-report @gol\n+-fmultiflags  -fprofile-report @gol\n -frandom-seed=@var{string}  -fsched-verbose=@var{n} @gol\n -fsel-sched-verbose  -fsel-sched-dump-cfg  -fsel-sched-pipelining-verbose @gol\n -fstats  -fstack-usage  -ftime-report  -ftime-report-details @gol\n@@ -19344,6 +19344,34 @@ allocation for the WPA phase only.\n Makes the compiler print some statistics about permanent memory\n allocation before or after interprocedural optimization.\n \n+@item -fmultiflags\n+@opindex fmultiflags\n+This option enables multilib-aware @code{TFLAGS} to be used to build\n+target libraries with options different from those the compiler is\n+configured to use by default, through the use of specs (@xref{Spec\n+Files}) set up by compiler internals, by the target, or by builders at\n+configure time.\n+\n+Like @code{TFLAGS}, this allows the target libraries to be built for\n+portable baseline environments, while the compiler defaults to more\n+demanding ones.  That's useful because users can easily override the\n+defaults the compiler is configured to use to build their own programs,\n+if the defaults are not ideal for their target environment, whereas\n+rebuilding the runtime libraries is usually not as easy or desirable.\n+\n+Unlike @code{TFLAGS}, the use of specs enables different flags to be\n+selected for different multilibs.  The way to accomplish that is to\n+build with @samp{make TFLAGS=-fmultiflags}, after configuring\n+@samp{--with-specs=%@{fmultiflags:...@}}.\n+\n+This option is discarded by the driver once it's done processing driver\n+self spec.\n+\n+It is also useful to check that @code{TFLAGS} are being used to build\n+all target libraries, by configuring a non-bootstrap compiler\n+@samp{--with-specs='%@{!fmultiflags:%emissing TFLAGS@}'} and building\n+the compiler and target libraries.\n+\n @item -fprofile-report\n @opindex fprofile-report\n Makes the compiler print some statistics about consistency of the"}, {"sha": "830ab88701fc43c196f80410523e7efe4da62091", "filename": "gcc/gcc.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fgcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fgcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.cc?ref=6b1a2474f9e422ef746f7ea13014b288850bb68a", "patch": "@@ -1327,7 +1327,11 @@ static const char *const multilib_defaults_raw[] = MULTILIB_DEFAULTS;\n \n static const char *const driver_self_specs[] = {\n   \"%{fdump-final-insns:-fdump-final-insns=.} %<fdump-final-insns\",\n-  DRIVER_SELF_SPECS, CONFIGURE_SPECS, GOMP_SELF_SPECS, GTM_SELF_SPECS\n+  DRIVER_SELF_SPECS, CONFIGURE_SPECS, GOMP_SELF_SPECS, GTM_SELF_SPECS,\n+  /* This discards -fmultiflags at the end of self specs processing in the\n+     driver, so that it is effectively Ignored, without actually marking it as\n+     Ignored, which would get it discarded before self specs could remap it.  */\n+  \"%<fmultiflags\"\n };\n \n #ifndef OPTION_DEFAULT_SPECS"}, {"sha": "3797784c865877fccacba0b761fbb555a20d7810", "filename": "gcc/opts.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fopts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b1a2474f9e422ef746f7ea13014b288850bb68a/gcc%2Fopts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.cc?ref=6b1a2474f9e422ef746f7ea13014b288850bb68a", "patch": "@@ -3248,6 +3248,10 @@ common_handle_option (struct gcc_options *opts,\n       dc->report_bug = value;\n       break;\n \n+    case OPT_fmultiflags:\n+      gcc_checking_assert (lang_mask == CL_DRIVER);\n+      break;\n+\n     default:\n       /* If the flag was handled in a standard way, assume the lack of\n \t processing here is intentional.  */"}]}