{"sha": "2c455ae06c0b46a6a27be3a6bd869384758e4707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0NTVhZTA2YzBiNDZhNmEyN2JlM2E2YmQ4NjkzODQ3NThlNDcwNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-09T00:16:47Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-09T00:16:47Z"}, "message": "Daily bump.", "tree": {"sha": "cc4e3142340ecf103f0d30b115718f2e3d660ff8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc4e3142340ecf103f0d30b115718f2e3d660ff8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c455ae06c0b46a6a27be3a6bd869384758e4707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c455ae06c0b46a6a27be3a6bd869384758e4707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c455ae06c0b46a6a27be3a6bd869384758e4707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c455ae06c0b46a6a27be3a6bd869384758e4707/comments", "author": null, "committer": null, "parents": [{"sha": "1c0fdaf79e3618fd7512608a2e5c62b6b306e9e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c0fdaf79e3618fd7512608a2e5c62b6b306e9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c0fdaf79e3618fd7512608a2e5c62b6b306e9e8"}], "stats": {"total": 413, "additions": 412, "deletions": 1}, "files": [{"sha": "90a8fec9a3c55d6a72da70b038bf18938b3282f3", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,8 @@\n+2020-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* configure.ac: Check AX_CXX_COMPILE_STDCXX if not bootstrapping.\n+\t* configure: Regenerate.\n+\n 2020-06-06  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* MAINTAINERS: Add myself as xtensa port maintainer."}, {"sha": "c92582df7fe19cd8e48d10473e31f77905be1adf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,49 @@\n+2020-06-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR lto/94848\n+\tPR middle-end/95551\n+\t* omp-offload.c (add_decls_addresses_to_decl_constructor,\n+\tomp_finish_file): Skip removed items.\n+\t* lto-cgraph.c (output_offload_tables): Likewise; set force_output\n+\tto this node for variables and functions.\n+\n+2020-06-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* aclocal.m4: Remove ax_cxx_compile_stdcxx.m4.\n+\t* configure.ac: Remove AX_CXX_COMPILE_STDCXX.\n+\t* configure: Regenerate.\n+\n+2020-06-08  Martin Sebor  <msebor@redhat.com>\n+\n+\t* postreload.c (reload_cse_simplify_operands): Clear first array element\n+\tbefore using it.  Assert a precondition.\n+\n+2020-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95528\n+\t* tree-ssa-forwprop.c (simplify_vector_constructor): Don't use\n+\tVEC_UNPACK*_EXPR or VEC_PACK_TRUNC_EXPR with scalar modes unless the\n+\ttype is vector boolean.\n+\n+2020-06-08  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_layout_frame): Expand comments.\n+\n+2020-06-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/predicates.md (vfp_register_operand): Use VFP_HI_REGS\n+\tinstead of VFP_REGS.\n+\n+2020-06-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/rs6000/vector.md: Replace FAIL with gcc_unreachable\n+\tin all vcond* patterns.\n+\n+2020-06-08  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* common/config/arm/arm-common.c (INCLUDE_ALGORITHM):\n+\tDefine. No longer include <algorithm>.\n+\n 2020-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* config/i386/i386.md (paritydi2, paritysi2): Expand reduction"}, {"sha": "ec1b34716f29a9fe4a8a3570eeb682cd0c186a6a", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1 +1 @@\n-20200608\n+20200609"}, {"sha": "4da35d14cba4933bf964257a01595c955cea5e0f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,305 @@\n+2020-06-08  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma.Set_Ravenscar_Profile): Add\n+\tappropriate call to Set_Restriction_No_Dependence if Ada_Version\n+\t>= Ada2012 and Profile is either Ravenscar or a GNAT-defined\n+\tRavenscar variant (i.e., not Jorvik).\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch5.adb: Fix typo.\n+\t* sem_ch8.adb (Analyze_Renamed_Primitive_Operation): Check that\n+\tthe prefix of a prefixed view must be renamable as an object.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_cat.ads: Fix typo.\n+\t* sem_cat.adb (Validate_Remote_Access_To_Class_Wide_Type): Add\n+\thandling of N_Attribute_Definition_Clause.\n+\t* sem_ch13.adb (Analyze_Attribute_Definition_Clause): Call\n+\tValidate_Remote_Access_To_Class_Wide_Type for Storage_Size and\n+\tStorage_Pool.\n+\t* sem_attr.adb, exp_ch4.adb: Update comments.\n+\n+2020-06-08  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_One_Call): Add extra condition to the\n+\tpredicate for deciding when a given controlled call is visible.\n+\n+2020-06-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Port\n+\tchanges in frontend expander.\n+\n+2020-06-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (All_Membership_Choices_Static): Fix style.\n+\n+2020-06-08  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/s-rident.ads: Add Jorvik to the Profile_Name\n+\tenumeration type.  Add an element for Jorvik to the array\n+\taggregate that is the initial value of the constant\n+\tProfile_Info.\n+\t* targparm.adb (Get_Target_Parameters): Handle \"pragma Profile\n+\t(Jorvik);\" similarly to \"pragma Profile (Ravenscar);\".\n+\t* snames.ads-tmpl: Declare Name_Jorvik Name_Id. Unlike\n+\tRavenscar, Jorvik is not a pragma name and has no corresponding\n+\telement in the Pragma_Id enumeration type; this means that its\n+\tdeclaration must not occur between those of First_Pragma_Name\n+\tand Last_Pragma_Name.\n+\t* sem_prag.adb (Analyze_Pragma): Add call to\n+\tSet_Ravenscar_Profile for Jorvik, similar to the existing calls\n+\tfor Ravenscar and the GNAT Ravenscar variants.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Update Get_Object_Name\n+\tto go through N_Qualified_Expression and N_Type_Conversion.  Fix\n+\tanother case of wrong usage of E_Anonymous_Access_Type instead\n+\tof Anonymous_Access_Kind.\n+\t* sem_util.adb (Is_Dependent_Component_Of_Mutable_Object): Work\n+\ton the original node.\n+\t(Is_Aliased_View): Take into account N_Qualified_Expression.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Type_Conversion): Fix handling of\n+\tenumeration to integer conversions.\n+\t* exp_attr.adb (Expand_N_Attribute_Reference\n+\t[Attribute_Enum_Rep]): Remove special casing for first-level\n+\trenaming, best left to the general folding mechanism via\n+\tEval_Type_Conversion.\n+\n+2020-06-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* atree.adb (New_Copy): Do not clear Has_Dynamic_Range_Check.\n+\t* checks.ads (Append_Range_Checks): Remove Flag_Node parameter.\n+\t(Insert_Range_Checks): Likewise and remove default value of\n+\tStatic_Loc parameter.\n+\t* checks.adb (Append_Range_Checks): Remove Flag_Node parameter.\n+\tDo not test and set Has_Dynamic_Range_Check.\n+\t(Insert_Range_Checks): Likewise and remove default value of\n+\tStatic_Loc parameter.\n+\t* csinfo.adb (CSinfo): Remove 'L' from [NEUB]_Fields pattern and\n+\tdo not handle Has_Dynamic_Range_Check.\n+\t* exp_ch5.adb (Expand_N_Assignment_Statement): Remove argument\n+\tin call to Insert_Range_Checks.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Do not fiddle\n+\twith Has_Dynamic_Range_Check.\n+\t(Process_Range_Expr_In_Decl): Remove argument in calls to\n+\tInsert_Range_Checks and Append_Range_Checks.\n+\t* sinfo.ads (Has_Dynamic_Range_Check): Delete.\n+\t(Set_Has_Dynamic_Range_Check): Likewise.\n+\t* sinfo.adb (Has_Dynamic_Range_Check): Delete.\n+\t(Set_Has_Dynamic_Range_Check): Likewise.\n+\t* treepr.adb (Print_Node): Do not print Has_Dynamic_Range_Check.\n+\n+2020-06-08  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.ads: Export new function\n+\tAll_Membership_Choices_Static.\n+\t* sem_ch13.adb: Implement new function\n+\tAll_Membership_Choices_Static.  This involves moving the\n+\tfunctions Is_Static_Choice and All_Membership_Choices_Static,\n+\twhich were previously declared within the function\n+\tIs_Predicate_Static, out to library level so that they can be\n+\tcalled by the new function. The already-exisiting code in\n+\tIs_Predicate_Static which became the body of\n+\tAll_Membership_Choices_Static is replaced with a call to the new\n+\tfunction in order to avoid duplication.\n+\t* exp_ch9.adb (Is_Pure_Barrier): Several changes needed to\n+\timplement rules of AI12-0290 and RM D.7's definition of\n+\t\"pure-barrier-eligible\". These changes include adding a call to\n+\tthe new function Sem_13.All_Membership_Choices_Static, as per\n+\tthe \"see 4.9\" in RM D.7(1.6/5).\n+\n+2020-06-08  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_unst.adb (Visit_Node): When visiting array attribute\n+\tnodes, in addition to checking the type of Get_Referenced_Object\n+\tof the prefix, also check the actual type of the prefix.\n+\n+2020-06-08  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* checks.adb (Apply_Predicate_Check): Refine test for being in a\n+\tsubprogram body to account for no Corresponding_Body case,\n+\tavoiding blowups arising due to other changes here.\n+\t* exp_ch4.adb (Expand_N_Qualified_Expression): Apply predicate\n+\tchecks, if any, after constraint checks are applied.\n+\t* sem_eval.ads (Check_Expression_Against_Static_Predicate): Add\n+\tCheck_Failure_Is_Error formal for conditionalizing warning vs.\n+\terror messages.\n+\t* sem_eval.adb (Check_Expression_Against_Static_Predicate):\n+\tIssue an error message rather than a warning when the new\n+\tCheck_Failure_Is_Error formal is True. In the nonstatic or\n+\tDynamic_Predicate case where the predicate is known to fail,\n+\temit the check to ensure that folded cases get checks applied.\n+\t* sem_res.adb (Resolve_Qualified_Expression): Call\n+\tCheck_Expression_Against_Static_Predicate, passing True for\n+\tCheck_Failure_Is_Error, to ensure we reject static predicate\n+\tviolations. Remove code that was conditionally calling\n+\tApply_Predicate_Check, which is no longer needed, and that check\n+\tprocedure shouldn't be called from a resolution routine in any\n+\tcase. Also remove associated comment about preventing infinite\n+\trecursion and consistency with Resolve_Type_Conversion, since\n+\tthat handling was already similarly removed from\n+\tResolve_Type_Convesion at some point.\n+\t(Resolve_Type_Conversion): Add passing of True for\n+\tCheck_Failure_Is_Error parameter on call to\n+\tCheck_Expression_Against_Static_Predicate, to ensure that static\n+\tconversion cases that violate a predicate are rejected as\n+\terrors.\n+\n+2020-06-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_SPARK): Restore after being deleted.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb, exp_ch6.adb, par-ch11.adb, par-ch6.adb,\n+\tpar-ch7.adb, par-prag.adb, restrict.adb, restrict.ads,\n+\tscans.ads, scng.adb, sem_aggr.adb, sem_attr.adb, sem_ch11.adb,\n+\tsem_ch12.adb, sem_ch3.adb, sem_ch3.ads, sem_ch4.adb,\n+\tsem_ch5.adb, sem_ch6.adb, sem_ch7.adb, sem_ch8.adb, sem_ch9.adb,\n+\tsem_res.adb, sem_util.adb, sem_util.ads, snames.ads-tmpl,\n+\tgnatbind.adb, libgnat/s-rident.ads,\n+\tdoc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n+\tRemove processing of SPARK_05 restriction.\n+\t* gnat_rm.texi: Regenerate.\n+\t* opt.ads: Remove processing of old checksum which is now\n+\thandled by gprbuild directly.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch12.adb (Instantiate_Object): Relax rules related to null\n+\texclusions and generic objects. Handle all anonymous types\n+\tconsistently and not just E_Anonymous_Access_Type.\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Change wording so that\n+\tit applies to both renamings and instantiations to avoid\n+\tconfusion.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* libgnat/a-textio.ads (File_Mode): Fix typo in comment.\n+\n+2020-06-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Indexed_Component): Do not give a warning\n+\tfor a nonatomic component of an atomic array which is subject to\n+\tan address clause in Ada 2020 mode.\n+\t(Resolve_Selected_Component): Likewise for an atomic record.\n+\n+2020-06-08  Philippe Gil  <gil@adacore.com>\n+\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst: in \"Handling\n+\tFiles with Multiple Units\" part documents gnatname use for\n+\tunmodified files handling and gnatchop use for files\n+\trefactoring.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_attributes.rst:\n+\tEnum_Rep/Enum_Val are standard Ada 202x attributes.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2020-06-08  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_aggr.adb (Safe_Component): Remove code that considers as\n+\tunsafe components that are aggregates; such removal allows the\n+\tfrontend to proceed and evaluate if they are safe by means of\n+\tinvoking Safe_Aggregate.\n+\n+2020-06-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Apply\n+\tstandard expansion to attributes First and Last.\n+\n+2020-06-08  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb, exp_util.ads, exp_util.adb (Get_Index_Subtype):\n+\tMove from the body of Exp_Attr to Exp_Util and expose from the\n+\tspec.\n+\t* exp_spark.adb (Expand_SPARK_N_Attribute_Reference): Replace\n+\tduplicated code with a call to Get_Index_Subtype.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Simplify code by moving\n+\tmany special cases to Is_Object_Reference and removing others by\n+\tonly checking renamings coming from sources.\n+\t* sem_util.adb (Is_Object_Reference): Update for AI12-0226 and\n+\tadd more regular handling of 'Priority. Remove special cases no\n+\tlonger needed now that we are only checking renamings coming\n+\tfrom sources.\n+\n+2020-06-08  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cofove.adb (Insert_Space): The computation of Index\n+\tgenerates a spurious compiler warning about a value not being in\n+\trange for a statically dead branch.  Silence it using pragma\n+\tWarnings.\n+\n+2020-06-08  Bob Duff  <duff@adacore.com>\n+\n+\t* bindo-graphs.adb (function Add_Edge): Rename\n+\tAdd_Edge_With_Return to Add_Edge; we can tell it returns because\n+\tit's a function, and overloading seems appropriate in this case.\n+\tIf Activates_Task=True, and we're not going to add a new edge\n+\tbecause an existing Pred-->Succ edge already exists, then set\n+\tActivates_Task to True on the preexisting edge.  This ensures\n+\tthat the message:\n+\tinfo: use pragma Restrictions (No_Entry_Calls_In_Elaboration_Code)\n+\tappears when appropriate, no matter in what order the edges\n+\thappened to be processed.\n+\t(procedure Add_Edge): Remove redundant assertions.\n+\t(Activates_Task): Other kinds of edges can have\n+\tActivates_Task=True.  For example, if we had a With_Edge and\n+\tthen an Invocation_Edge with Activates_Task=True, then the\n+\tWith_Edge has Activates_Task set to True.\n+\t(Add_Edge_Kind_Check): New procedure to prevent other bugs of\n+\tthis nature. For example, if we were to sometimes call Add_Edge\n+\tfor a Spec_Before_Body_Edge followed by Add_Edge for a\n+\tWith_Edge, and sometimes in the other order, that would cause a\n+\tsimilar bug to what we're fixing here.\n+\t(Set_Is_Recorded_Edge): Val parameter is not used. Get rid of\n+\tit.\n+\t(Set_Activates_Task): New procedure to set the Activates_Task flag.\n+\t* bindo-graphs.ads (Library_Graph_Edge_Kind): Reorder the\n+\tenumeration literals to facilitate Add_Edge_Kind_Check.\n+\t* ali.adb (Known_ALI_Lines): The comment about \"still available\"\n+\twas wrong. Fix that by erasing the comment, and encoding the\n+\trelevant information in real code. Take advantage of Ada's full\n+\tcoverage rules by removing \"others =>\".  Also DRY.\n+\n+2020-06-08  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch12.adb (P_Formal_Derived_Type_Definition): Handle\n+\tproperly formal derived types that include aspect\n+\tspecifications, so that the \"with\" keyword appears twice in the\n+\tformal type declaration.\n+\t* sem_ch13.adb (Has_Generic_Parent): Return true if the type\n+\titself is a generic formal.\n+\n+2020-06-08  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* socket.c (__gnat_minus_500ms): Remove\n+\tIsWindowsVersionOrGreater from condition.\n+\n+2020-06-08  Claire Dross  <dross@adacore.com>\n+\n+\t* libgnat/a-cfdlli.ads, libgnat/a-cfhama.ads,\n+\tlibgnat/a-cfhase.ads, libgnat/a-cforma.ads, libgnat/a-cforse.ads\n+\t(Delete): Add Depends contract.\n+\n+2020-06-08  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* snames.ads-tmpl (Name_Program_Error_Check,\n+\tName_Tasking_Check): New constants.\n+\t* types.ads (Program_Error_Check, Tasking_Check): New constants.\n+\t(All_Checks): Update accordingly.\n+\n 2020-06-05  Arnaud Charlet  <charlet@adacore.com>\n \n \t* sem_prag.adb (Validate_Compile_Time_Warning_Or_Error): Use ??."}, {"sha": "71544e266eb0cd769935d7355012da5d77d437ed", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,16 @@\n+2020-06-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/95573\n+\t* dmd/MERGE: Merge upstream dmd 5041e56f1.\n+\n+2020-06-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* dmd/MERGE: Merge upstream dmd 955b8b36f.\n+\t* expr.cc (ExprVisitor::visit (AndAndExp *)): Rename type to ...\n+\t(ExprVisitor::visit (LogicalExp *)): ... this.  Handle both 'and if'\n+\tand 'or if' expression nodes.\n+\t(ExprVisitor::visit (OrOrExp *)): Remove.\n+\n 2020-06-07  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* dmd/MERGE: Merge upstream dmd 73d8e2fec."}, {"sha": "60d9ecca3ed2e068f59e1bbcd213518ca2cdea41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,26 @@\n+2020-06-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95195\n+\t* gfortran.dg/namelist_97.f90: Adjust testcase.\n+\n+2020-06-08  Mark Eggleston  <markeggleston@gcc.gnu.org>\n+\n+\tPR fortran/92993\n+\t* gfortran.dg/pr92993.f90: New test.\n+\n+2020-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/95528\n+\t* g++.dg/opt/pr95528.C: New test.\n+\n+2020-06-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR lto/95548\n+\t* g++.dg/torture/pr95548.C: Change from dg-do compile to dg-do link,\n+\tadd return type for main, for __SIZEOF_INT128__ test with __uint128_t\n+\tenumerator constants and add a test with unsigned long long\n+\tenumerators for all targets.\n+\n 2020-06-07  Roger Sayle  <roger@nextmovesoftware.com>\n \n \t* gcc.target/i386/parity-3.c: New test."}, {"sha": "f9a70b19151fddb984c9d3f3b0265d97c599745a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,8 @@\n+2020-06-08  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/95091\n+\t* io/transfer.c (finalize_transfer): Fix type in error message.\n+\n 2020-06-01  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \tPR libfortran/95418"}, {"sha": "e814546d9353fd87257c74cc10cda19d0e9500c8", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,9 @@\n+2020-06-08  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR lto/94848\n+\tPR middle-end/95551\n+\t* testsuite/libgomp.fortran/target-var.f90: New test.\n+\n 2020-06-05  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "60b930dc624e3beac9d2eedf275f4c24eccc6001", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c455ae06c0b46a6a27be3a6bd869384758e4707/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c455ae06c0b46a6a27be3a6bd869384758e4707/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c455ae06c0b46a6a27be3a6bd869384758e4707", "patch": "@@ -1,3 +1,14 @@\n+2020-06-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/default_delete/48631_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/default_delete/void_neg.cc: Likewise.\n+\n+2020-06-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/unique_ptr.h (operator<<): Define for C++20.\n+\t* testsuite/20_util/unique_ptr/io/lwg2948.cc: New test.\n+\n 2020-06-04  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/iterator_concepts.h (__detail::__ptr, __detail::__ref)"}]}