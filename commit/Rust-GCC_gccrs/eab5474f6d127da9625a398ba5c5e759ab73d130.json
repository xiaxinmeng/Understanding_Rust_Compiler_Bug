{"sha": "eab5474f6d127da9625a398ba5c5e759ab73d130", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFiNTQ3NGY2ZDEyN2RhOTYyNWEzOThiYTVjNWU3NTlhYjczZDEzMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-12-26T18:20:14Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-12-26T18:20:14Z"}, "message": "re PR c++/4803 (Inline function never defined)\n\ncp:\n\tPR c++/4803\n\t* decl2.c (mark_used): Defer inline functions.\n\t(finish_file): Merge deferred_fns loops. Check all used\n\tinline functions have a definition.\n\t* method.c (make_thunk): Thunks are not inline.\ntestsuite:\n\t* g++.dg/warn/inline1.C: New test.\n\t* g++.old-deja/g++.brendan/crash64.C: Remove spurious inlines.\n\t* g++.old-deja/g++.jason/synth10.C: Likewise.\n\t* g++.old-deja/g++.mike/net31.C: Likewise.\n\t* g++.old-deja/g++.mike/p8786.C: Likewise.\n\nFrom-SVN: r60521", "tree": {"sha": "3b3f68cfdf157cf39c688a14d74c859083f1a06c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b3f68cfdf157cf39c688a14d74c859083f1a06c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eab5474f6d127da9625a398ba5c5e759ab73d130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab5474f6d127da9625a398ba5c5e759ab73d130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eab5474f6d127da9625a398ba5c5e759ab73d130", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eab5474f6d127da9625a398ba5c5e759ab73d130/comments", "author": null, "committer": null, "parents": [{"sha": "ecd4a73b20577345fc2703e7e998b30b68bf75d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecd4a73b20577345fc2703e7e998b30b68bf75d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecd4a73b20577345fc2703e7e998b30b68bf75d6"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "08177c091fa5243e8bb02e1f8bf10878c1044f15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -1,5 +1,11 @@\n 2002-12-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\tPR c++/4803\n+\t* decl2.c (mark_used): Defer inline functions.\n+\t(finish_file): Merge deferred_fns loops. Check all used\n+\tinline functions have a definition.\n+\t* method.c (make_thunk): Thunks are not inline.\n+\n \tPR c++/5116, c++/764\n \t* call.c (build_new_op): Make sure template class operands are\n \tinstantiated."}, {"sha": "1607e379090addb1bf85ca43180451e2aea6cca4", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -2791,12 +2791,13 @@ finish_file ()\n \t  reconsider = 1;\n \t}\n       \n-      /* Go through the various inline functions, and see if any need\n-\t synthesizing.  */\n       for (i = 0; i < deferred_fns_used; ++i)\n \t{\n \t  tree decl = VARRAY_TREE (deferred_fns, i);\n+\t  \n \t  import_export_decl (decl);\n+\t  \n+\t  /* Does it need synthesizing?  */\n \t  if (DECL_ARTIFICIAL (decl) && ! DECL_INITIAL (decl)\n \t      && TREE_USED (decl)\n \t      && (! DECL_REALLY_EXTERN (decl) || DECL_INLINE (decl)))\n@@ -2811,30 +2812,21 @@ finish_file ()\n \t      pop_from_top_level ();\n \t      reconsider = 1;\n \t    }\n-\t}\n \n-      /* We lie to the back-end, pretending that some functions are\n-\t not defined when they really are.  This keeps these functions\n-\t from being put out unnecessarily.  But, we must stop lying\n-\t when the functions are referenced, or if they are not comdat\n-\t since they need to be put out now.\n-\t This is done in a separate for cycle, because if some deferred\n-\t function is contained in another deferred function later in\n-\t deferred_fns varray, rest_of_compilation would skip this\n-\t function and we really cannot expand the same function twice.  */\n-      for (i = 0; i < deferred_fns_used; ++i)\n-\t{\n-\t  tree decl = VARRAY_TREE (deferred_fns, i);\n-      \n+\t  /* We lie to the back-end, pretending that some functions\n+\t     are not defined when they really are.  This keeps these\n+\t     functions from being put out unnecessarily.  But, we must\n+\t     stop lying when the functions are referenced, or if they\n+\t     are not comdat since they need to be put out now.  This\n+\t     is done in a separate for cycle, because if some deferred\n+\t     function is contained in another deferred function later\n+\t     in deferred_fns varray, rest_of_compilation would skip\n+\t     this function and we really cannot expand the same\n+\t     function twice.  */\n \t  if (DECL_NOT_REALLY_EXTERN (decl)\n \t      && DECL_INITIAL (decl)\n \t      && DECL_NEEDED_P (decl))\n \t    DECL_EXTERNAL (decl) = 0;\n-\t}\n-\n-      for (i = 0; i < deferred_fns_used; ++i)\n-\t{\n-\t  tree decl = VARRAY_TREE (deferred_fns, i);\n \n \t  /* If we're going to need to write this function out, and\n \t     there's already a body for it, create RTL for it now.\n@@ -2890,6 +2882,16 @@ finish_file ()\n     } \n   while (reconsider);\n \n+  /* All used inline functions must have a definition at this point. */\n+  for (i = 0; i < deferred_fns_used; ++i)\n+    {\n+      tree decl = VARRAY_TREE (deferred_fns, i);\n+\n+      if (TREE_USED (decl) && DECL_DECLARED_INLINE_P (decl)\n+\t  && !(TREE_ASM_WRITTEN (decl) || DECL_SAVED_TREE (decl)))\n+\tcp_warning_at (\"inline function `%D' used but never defined\", decl);\n+    }\n+  \n   /* We give C linkage to static constructors and destructors.  */\n   push_lang_context (lang_name_c);\n \n@@ -4665,6 +4667,12 @@ mark_used (decl)\n   TREE_USED (decl) = 1;\n   if (processing_template_decl)\n     return;\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl)\n+      && !TREE_ASM_WRITTEN (decl))\n+    /* Remember it, so we can check it was defined.  */\n+    defer_fn (decl);\n+  \n   if (!skip_evaluation)\n     assemble_external (decl);\n "}, {"sha": "e5a3bd974fb3008a42f4c4e5df41789fb5411459", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -344,6 +344,8 @@ make_thunk (tree function, bool this_adjusting,\n   DECL_NO_STATIC_CHAIN (thunk) = 1;\n   /* The THUNK is not a pending inline, even if the FUNCTION is.  */\n   DECL_PENDING_INLINE_P (thunk) = 0;\n+  DECL_INLINE (thunk) = 0;\n+  DECL_DECLARED_INLINE_P (thunk) = 0;\n   /* Nor has it been deferred.  */\n   DECL_DEFERRED_FN (thunk) = 0;\n   /* Add it to the list of thunks associated with FUNCTION.  */"}, {"sha": "c54c1c2c1c0baab9295199337dc3ad29cedff226", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -1,5 +1,11 @@\n 2002-12-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n+\t* g++.dg/warn/inline1.C: New test.\n+\t* g++.old-deja/g++.brendan/crash64.C: Remove spurious inlines.\n+\t* g++.old-deja/g++.jason/synth10.C: Likewise.\n+\t* g++.old-deja/g++.mike/net31.C: Likewise.\n+\t* g++.old-deja/g++.mike/p8786.C: Likewise.\n+\n \t* g++.dg/template/friend10.C: New test.\n \t* g++.dg/template/conv5.C: New test.\n "}, {"sha": "24836e744ebbff96e77af0f8720cc8096a0c03b1", "filename": "gcc/testsuite/g++.dg/warn/inline1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Finline1.C?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Dec 2002 <nathan@codesourcery.com>\n+\n+// PR 4803. Used inline functions must have a definition.\n+\n+inline void Foo1 ();  // { dg-warning \"inline function\" \"\" }\n+inline void Bar1 ();\n+template <typename T> inline void Foo2(T);   // { dg-warning \"inline function\" \"\" }\n+template <typename T> inline void Bar2(T);\n+\n+void Baz ()\n+{\n+  Foo1 ();\n+  Foo2 (1);\n+\n+  Bar1 ();\n+  Bar2 (1);\n+}\n+\n+inline void Bar1 () {}\n+template <typename T> inline void Bar2(T) {}"}, {"sha": "6c2825802f4634cca8575046dfa33c8859e0c697", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/crash64.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fcrash64.C?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -4,8 +4,8 @@ typedef long unsigned int size_t;\n typedef void (*RF_Ptr)(void *);\n \n struct _im_pers_mem_spec {\n-  inline _im_pers_mem_spec(void );\n-  inline _im_pers_mem_spec(auto int of, auto int n);\n+  _im_pers_mem_spec(void );\n+  _im_pers_mem_spec(auto int of, auto int n);\n };\n \n struct _type_desc {"}, {"sha": "07a372586c01dfffa17d98982e0545ff41abf356", "filename": "gcc/testsuite/g++.old-deja/g++.jason/synth10.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fsynth10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fsynth10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fsynth10.C?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -7,14 +7,14 @@ class A;\n class AH\n {\n   public:\n-    inline  AH (   A * p = 0 );\n+    AH (   A * p = 0 );\n     AH ( const  AH & from )\n     : pointer( from.pointer )   { inc(); }\n     ~ AH ()  { dec(); }\n   private:\n     A * pointer;\n-    inline void inc() const;\n-    inline void dec() const;\n+    void inc() const;\n+    void dec() const;\n };\n \n class A "}, {"sha": "05617a8b4ffdf7b097d563472a2cae6163e6f616", "filename": "gcc/testsuite/g++.old-deja/g++.mike/net31.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fnet31.C?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -13,7 +13,7 @@ class foo_b {\n         foo_b();\n         ~foo_b();\n         foo_b(const foo_b&);\n-        inline double& operator()(int);\n+        double& operator()(int);\n         foo_b& operator=(foo_b&);\n         void bar_a(int);\n };"}, {"sha": "0565fb2558a129f40cd79aa6441356fb3cbc83ee", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p8786.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8786.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eab5474f6d127da9625a398ba5c5e759ab73d130/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8786.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp8786.C?ref=eab5474f6d127da9625a398ba5c5e759ab73d130", "patch": "@@ -4,7 +4,7 @@\n \n class B {\n public:\n-  inline ~B();\n+  ~B();\n };\n \n class D : public B {"}]}