{"sha": "cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q0ZGU4MjAyYzA2YWY4MjIzYjhmN2IzZDAzNmJjYTdhZmRlMWUwZg==", "commit": {"author": {"name": "Thomas Quinot", "email": "quinot@adacore.com", "date": "2009-11-30T09:35:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T09:35:30Z"}, "message": "s-oscons-tmplt.c, [...]: Add new constants in preparation for sharing s-crtl across all platforms.\n\n2009-11-30  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c, xoscons.adb: Add new constants in preparation for\n\tsharing s-crtl across all platforms.\n\nFrom-SVN: r154760", "tree": {"sha": "bed19accf8558d8df542cfe90676b60660ac63f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bed19accf8558d8df542cfe90676b60660ac63f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/comments", "author": null, "committer": null, "parents": [{"sha": "7aec2c6343aea30f1b825ccfb42daf8c0b14c51a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aec2c6343aea30f1b825ccfb42daf8c0b14c51a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aec2c6343aea30f1b825ccfb42daf8c0b14c51a"}], "stats": {"total": 111, "additions": 92, "deletions": 19}, "files": [{"sha": "16b8670bca6f1e96e47baf43e7baaf1ff742af1b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "patch": "@@ -1,3 +1,8 @@\n+2009-11-30  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c, xoscons.adb: Add new constants in preparation for\n+\tsharing s-crtl across all platforms.\n+\n 2009-11-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* s-commun.adb, s-commun.ads: New internal support unit,"}, {"sha": "3771f4cad6caa254b86aad6eee10b48106d25159", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "patch": "@@ -161,6 +161,9 @@ int counter = 0;\n #define CNS(name,comment) \\\n   printf (\"\\n->CNS:$%d:\" #name \":\" name \":\" comment, __LINE__);\n \n+#define C(sname,type,value,comment)\\\n+  printf (\"\\n->C:$%d:\" sname \":\" #type \":\" value \":\" comment, __LINE__);\n+\n #define TXT(text) \\\n   printf (\"\\n->TXT:$%d:\" text, __LINE__);\n \n@@ -174,7 +177,12 @@ int counter = 0;\n #define CNS(name, comment) \\\n   asm volatile(\"\\n->CNS:%0:\" #name \":\" name \":\" comment \\\n   : : \"i\" (__LINE__));\n-/* General expression constant */\n+/* General expression named number */\n+\n+#define C(sname, type, value, comment) \\\n+  asm volatile(\"\\n->C:%0:\" sname \":\" #type \":\" value \":\" comment \\\n+  : : \"i\" (__LINE__));\n+/* Typed constant */\n \n #define TXT(text) \\\n   asm volatile(\"\\n->TXT:%0:\" text \\\n@@ -183,6 +191,8 @@ int counter = 0;\n \n #endif\n \n+#define CST(name,comment) C(#name,String,name,comment)\n+\n #define STR(x) STR1(x)\n #define STR1(x) #x\n \n@@ -233,10 +243,7 @@ package System.OS_Constants is\n    -- Platform identification --\n    -----------------------------\n \n-*/\n-TXT(\"   Target_Name : constant String := \" STR(TARGET) \";\")\n-/*\n-   type Target_OS_Type is (Windows, VMS, Other_OS);\n+   type OS_Type is (Windows, VMS, Other_OS);\n */\n #if defined (__MINGW32__)\n # define TARGET_OS \"Windows\"\n@@ -245,7 +252,9 @@ TXT(\"   Target_Name : constant String := \" STR(TARGET) \";\")\n #else\n # define TARGET_OS \"Other_OS\"\n #endif\n-TXT(\"   Target_OS : constant Target_OS_Type := \" TARGET_OS \";\")\n+C(\"Target_OS\", OS_Type, TARGET_OS, \"\")\n+#define Target_Name TARGET\n+CST(Target_Name, \"\")\n /*\n \n    -------------------\n@@ -1251,7 +1260,7 @@ CND(Has_Sockaddr_Len,  \"Sockaddr has sa_len field\")\n  ** Do not change the format of the line below without also updating the\n  ** MaRTE Makefile.\n  **/\n-TXT(\"   Thread_Blocking_IO  : constant Boolean := True;\")\n+C(\"Thread_Blocking_IO\", Boolean, \"True\", \"\")\n /*\n    --  Set False for contexts where socket i/o are process blocking\n \n@@ -1262,10 +1271,31 @@ TXT(\"   Thread_Blocking_IO  : constant Boolean := True;\")\n #else\n # define Inet_Pton_Linkname \"__gnat_inet_pton\"\n #endif\n-TXT(\"   Inet_Pton_Linkname  : constant String := \\\"\" Inet_Pton_Linkname \"\\\";\")\n+CST(Inet_Pton_Linkname, \"\")\n \n #endif /* HAVE_SOCKETS */\n \n+/*\n+\n+   ---------------------------------\n+   -- C runtime library interface --\n+   ---------------------------------\n+\n+*/\n+#if defined (__VMS)\n+# define malloc32_Linkname  \"_malloc32\"\n+# define realloc32_Linkname \"_realloc32\"\n+# define strerror_Linkname  \"DECC$STRERROR\"\n+#else\n+# define malloc32_Linkname  \"malloc\"\n+# define realloc32_Linkname \"realloc\"\n+# define strerror_Linkname  \"strerror\"\n+#endif\n+\n+CST(malloc32_Linkname, \"\")\n+CST(realloc32_Linkname, \"\")\n+CST(strerror_Linkname, \"\")\n+\n /**\n  **  System-specific constants follow\n  **  Each section should be activated if compiling for the corresponding"}, {"sha": "afe05efd651d6a0b7046acb1c17d4d23ea608e16", "filename": "gcc/ada/xoscons.adb", "status": "modified", "additions": 49, "deletions": 11, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2Fxoscons.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd4de8202c06af8223b8f7b3d036bca7afde1e0f/gcc%2Fada%2Fxoscons.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fxoscons.adb?ref=cd4de8202c06af8223b8f7b3d036bca7afde1e0f", "patch": "@@ -72,24 +72,30 @@ procedure XOSCons is\n    end record;\n \n    type Asm_Info_Kind is\n-     (CND,     --  Constant (decimal)\n-      CNS,     --  Constant (freeform string)\n+     (CND,     --  Named number (decimal)\n+      CNS,     --  Named number (freeform text)\n+      C,       --  Constant object\n       TXT);    --  Literal text\n    --  Recognized markers found in assembly file. These markers are produced by\n    --  the same-named macros from the C template.\n \n+   subtype Named_Number is Asm_Info_Kind range CND .. CNS;\n+\n    type Asm_Info (Kind : Asm_Info_Kind := TXT) is record\n       Line_Number   : Integer;\n       --  Line number in C source file\n \n       Constant_Name : String_Access;\n       --  Name of constant to be defined\n \n+      Constant_Type : String_Access;\n+      --  Type of constant (case of Kind = C)\n+\n       Value_Len     : Natural := 0;\n       --  Length of text representation of constant's value\n \n       Text_Value    : String_Access;\n-      --  Value for CNS constant\n+      --  Value for CNS / C constant\n \n       Int_Value     : Int_Value_Type;\n       --  Value for CND constant\n@@ -105,8 +111,9 @@ procedure XOSCons is\n       Table_Initial        => 100,\n       Table_Increment      => 10);\n \n-   Max_Const_Name_Len     : Natural := 0;\n+   Max_Constant_Name_Len  : Natural := 0;\n    Max_Constant_Value_Len : Natural := 0;\n+   Max_Constant_Type_Len  : Natural := 0;\n    --  Lengths of longest name and longest value\n \n    type Language is (Lang_Ada, Lang_C);\n@@ -170,13 +177,22 @@ procedure XOSCons is\n          case Lang is\n             when Lang_Ada =>\n                Put (\"   \" & Info.Constant_Name.all);\n-               Put (Spaces (Max_Const_Name_Len - Info.Constant_Name'Length));\n+               Put (Spaces (Max_Constant_Name_Len\n+                              - Info.Constant_Name'Length));\n \n-               Put (\" : constant := \");\n+               if Info.Kind in Named_Number then\n+                  Put (\" : constant := \");\n+               else\n+                  Put (\" : constant \" & Info.Constant_Type.all);\n+                  Put (Spaces (Max_Constant_Type_Len\n+                                 - Info.Constant_Type'Length));\n+                  Put (\" := \");\n+               end if;\n \n             when Lang_C =>\n                Put (\"#define \" & Info.Constant_Name.all & \" \");\n-               Put (Spaces (Max_Const_Name_Len - Info.Constant_Name'Length));\n+               Put (Spaces (Max_Constant_Name_Len\n+                              - Info.Constant_Name'Length));\n          end case;\n \n          if Info.Kind = CND then\n@@ -185,7 +201,19 @@ procedure XOSCons is\n             end if;\n             Put (Trim (Info.Int_Value.Abs_Value'Img, Side => Left));\n          else\n-            Put (Info.Text_Value.all);\n+            declare\n+               Is_String : constant Boolean :=\n+                             Info.Kind = C\n+                               and then Info.Constant_Type.all = \"String\";\n+            begin\n+               if Is_String then\n+                  Put (\"\"\"\");\n+               end if;\n+               Put (Info.Text_Value.all);\n+               if Is_String then\n+                  Put (\"\"\"\");\n+               end if;\n+            end;\n          end if;\n \n          if Lang = Lang_Ada then\n@@ -290,18 +318,28 @@ procedure XOSCons is\n            Integer (Parse_Int (Line (Index1 .. Index2 - 1)).Abs_Value);\n \n          case Info.Kind is\n-            when CND | CNS =>\n+            when CND | CNS | C =>\n                Index1 := Index2 + 1;\n                Find_Colon (Index2);\n \n                Info.Constant_Name := Field_Alloc;\n-               if Info.Constant_Name'Length > Max_Const_Name_Len then\n-                  Max_Const_Name_Len := Info.Constant_Name'Length;\n+               if Info.Constant_Name'Length > Max_Constant_Name_Len then\n+                  Max_Constant_Name_Len := Info.Constant_Name'Length;\n                end if;\n \n                Index1 := Index2 + 1;\n                Find_Colon (Index2);\n \n+               if Info.Kind = C then\n+                  Info.Constant_Type := Field_Alloc;\n+                  if Info.Constant_Type'Length > Max_Constant_Type_Len then\n+                     Max_Constant_Type_Len := Info.Constant_Type'Length;\n+                  end if;\n+\n+                  Index1 := Index2 + 1;\n+                  Find_Colon (Index2);\n+               end if;\n+\n                if Info.Kind = CND then\n                   Info.Int_Value := Parse_Int (Line (Index1 .. Index2 - 1));\n                   Info.Value_Len := Index2 - Index1 - 1;"}]}