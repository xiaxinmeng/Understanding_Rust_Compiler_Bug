{"sha": "d6cd5d3493f6fb565ff9300577deeebe37143673", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZjZDVkMzQ5M2Y2ZmI1NjVmZjkzMDA1NzdkZWVlYmUzNzE0MzY3Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-10T14:32:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-10T14:32:30Z"}, "message": "[multiple changes]\n\n2014-10-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sinfo.ads, gnat_ugn.texi, a-except.adb, a-except-2005.adb,\n\traise-gcc.c Spelling changes (prolog => prologue, epilog => epilogue).\n\n2014-10-10  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Is_Wrapped_In_Block): Handle properly blocks that\n\tcontain pragmas generated for loop invariants and type predicates.\n\tClarify use of this subprogram.\n\nFrom-SVN: r216087", "tree": {"sha": "61cbeeedcbb69a0c2d6e113c5f6afb4a66672e5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61cbeeedcbb69a0c2d6e113c5f6afb4a66672e5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6cd5d3493f6fb565ff9300577deeebe37143673", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cd5d3493f6fb565ff9300577deeebe37143673", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6cd5d3493f6fb565ff9300577deeebe37143673", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6cd5d3493f6fb565ff9300577deeebe37143673/comments", "author": null, "committer": null, "parents": [{"sha": "33b87152da3942dfc8f34c6447a6bfed307fca0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33b87152da3942dfc8f34c6447a6bfed307fca0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33b87152da3942dfc8f34c6447a6bfed307fca0e"}], "stats": {"total": 61, "additions": 44, "deletions": 17}, "files": [{"sha": "d410c97902db15df130961924723c2323e951687", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -1,3 +1,14 @@\n+2014-10-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sinfo.ads, gnat_ugn.texi, a-except.adb, a-except-2005.adb,\n+\traise-gcc.c Spelling changes (prolog => prologue, epilog => epilogue).\n+\n+2014-10-10  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Is_Wrapped_In_Block): Handle properly blocks that\n+\tcontain pragmas generated for loop invariants and type predicates.\n+\tClarify use of this subprogram.\n+\n 2014-10-10  Yannick Moy  <moy@adacore.com>\n \n \t* sem_prag.adb (Analyze_Global_Item): Accept formal objects in Global"}, {"sha": "d03194b8dd480dd41b86992df04d8b04b2c44bce", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -564,7 +564,7 @@ package body Ada.Exceptions is\n \n    --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n-   --  such as normal return epilog stuff, can be eliminated).\n+   --  such as normal return epilogue stuff, can be eliminated).\n \n    pragma No_Return (Rcheck_CE_Access_Check);\n    pragma No_Return (Rcheck_CE_Null_Access_Parameter);"}, {"sha": "3ffd0a1aed07fbea105a9511adebb6bc2fbe8569", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -513,7 +513,7 @@ package body Ada.Exceptions is\n \n    --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n-   --  such as normal return epilog stuff, can be eliminated).\n+   --  such as normal return epilogue stuff, can be eliminated).\n \n    pragma No_Return (Rcheck_CE_Access_Check);\n    pragma No_Return (Rcheck_CE_Null_Access_Parameter);\n@@ -633,7 +633,7 @@ package body Ada.Exceptions is\n \n    --  None of these procedures ever returns (they raise an exception). By\n    --  using pragma No_Return, we ensure that any junk code after the call,\n-   --  such as normal return epilog stuff, can be eliminated).\n+   --  such as normal return epilogue stuff, can be eliminated).\n \n    pragma No_Return (Rcheck_00);\n    pragma No_Return (Rcheck_01);"}, {"sha": "846fa03a622e76d48443bb7df7478d76bc2d65ba", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -20890,11 +20890,11 @@ When you use the @code{next} command in a function, the current source\n location will advance to the next statement as usual. A special case\n arises in the case of a @code{return} statement.\n \n-Part of the code for a return statement is the ``epilog'' of the function.\n+Part of the code for a return statement is the ``epilogue'' of the function.\n This is the code that returns to the caller. There is only one copy of\n-this epilog code, and it is typically associated with the last return\n+this epilogue code, and it is typically associated with the last return\n statement in the function if there is more than one return. In some\n-implementations, this epilog is associated with the first statement\n+implementations, this epilogue is associated with the first statement\n of the function.\n \n The result is that if you use the @code{next} command from a return"}, {"sha": "747a9de167f8b5095475f20f6c2008748fc2770c", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 1992-2013, Free Software Foundation, Inc.      *\n+ *             Copyright (C) 1992-2014, Free Software Foundation, Inc.      *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1432,7 +1432,7 @@ __gnat_adjust_context (unsigned char *unw, ULONG64 rsp)\n {\n   unsigned int len;\n \n-  /* Version = 1, no flags, no prolog.  */\n+  /* Version = 1, no flags, no prologue.  */\n   if (unw[0] != 1 || unw[1] != 0)\n     return;\n   len = unw[2];\n@@ -1442,7 +1442,7 @@ __gnat_adjust_context (unsigned char *unw, ULONG64 rsp)\n   unw += 4;\n   while (len > 0)\n     {\n-      /* Offset in prolog = 0.  */\n+      /* Offset in prologue = 0.  */\n       if (unw[0] != 0)\n \treturn;\n       switch (unw[1] & 0xf)"}, {"sha": "1e731f887a7dfc29b20a8e42dcb50693b235fe09", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -2855,7 +2855,10 @@ package body Sem_Ch5 is\n       --  container iteration.\n \n       function Is_Wrapped_In_Block (N : Node_Id) return Boolean;\n-      --  Determine whether node N is the sole statement of a block\n+      --  Determine whether loop statement N has been wrapped in a block to\n+      --  capture finalization actions that may be generated for container\n+      --  iterators. Prevents infinite recursion when block is analyzed.\n+      --  Routine is a noop if loop is single statement within source block.\n \n       ---------------------------\n       -- Is_Container_Iterator --\n@@ -2919,14 +2922,27 @@ package body Sem_Ch5 is\n       -------------------------\n \n       function Is_Wrapped_In_Block (N : Node_Id) return Boolean is\n-         HSS : constant Node_Id := Parent (N);\n+         HSS  : Node_Id;\n+         Stat : Node_Id;\n \n       begin\n-         return\n-           Nkind (HSS) = N_Handled_Sequence_Of_Statements\n-             and then Nkind (Parent (HSS)) = N_Block_Statement\n-             and then First (Statements (HSS)) = N\n-             and then No (Next (First (Statements (HSS))));\n+         if Ekind (Current_Scope) /= E_Block then\n+            return False;\n+\n+         else\n+            HSS  :=\n+              Handled_Statement_Sequence (Parent (Block_Node (Current_Scope)));\n+\n+            --  Skip leading pragmas that may be introduced for invariant and\n+            --  predicate checks.\n+\n+            Stat := First (Statements (HSS));\n+            while Present (Stat) and then Nkind (Stat) = N_Pragma loop\n+               Stat := Next (Stat);\n+            end loop;\n+\n+            return Stat = N and then No (Next (Stat));\n+         end if;\n       end Is_Wrapped_In_Block;\n \n       --  Local declarations"}, {"sha": "4eaf51f1b2347fed149326ed676e708f21be9016", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6cd5d3493f6fb565ff9300577deeebe37143673/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=d6cd5d3493f6fb565ff9300577deeebe37143673", "patch": "@@ -1093,7 +1093,7 @@ package Sinfo is\n    --  Do_Storage_Check (Flag17-Sem)\n    --    This flag is set in an N_Allocator node to indicate that a storage\n    --    check is required for the allocation, or in an N_Subprogram_Body node\n-   --    to indicate that a stack check is required in the subprogram prolog.\n+   --    to indicate that a stack check is required in the subprogram prologue.\n    --    The N_Allocator case is handled by the routine that expands the call\n    --    to the runtime routine. The N_Subprogram_Body case is handled by the\n    --    backend, and all the semantics does is set the flag."}]}