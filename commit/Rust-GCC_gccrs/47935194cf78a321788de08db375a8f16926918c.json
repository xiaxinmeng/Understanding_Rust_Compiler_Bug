{"sha": "47935194cf78a321788de08db375a8f16926918c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc5MzUxOTRjZjc4YTMyMTc4OGRlMDhkYjM3NWE4ZjE2OTI2OTE4Yw==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-02-23T20:26:09Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-02-23T20:26:09Z"}, "message": "acinclude.m4: Remove old no-executables workaround; add new no-executables workaround.\n\n\t* acinclude.m4: Remove old no-executables workaround;\n\tadd new no-executables workaround.\n\t* aclocal.m4: Regenerate.\n\t* configure.in: Change prereqs to autoconf 2.57.\n\t* configure: Regenerate with autoconf 2.57.\n\nFrom-SVN: r78330", "tree": {"sha": "0f0a784d09ea7957355e5cb254e528919a9a1b3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f0a784d09ea7957355e5cb254e528919a9a1b3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47935194cf78a321788de08db375a8f16926918c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47935194cf78a321788de08db375a8f16926918c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47935194cf78a321788de08db375a8f16926918c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47935194cf78a321788de08db375a8f16926918c/comments", "author": null, "committer": null, "parents": [{"sha": "4fd1ff2bdbb8623d8ddad845d54e924fa1767546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd1ff2bdbb8623d8ddad845d54e924fa1767546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd1ff2bdbb8623d8ddad845d54e924fa1767546"}], "stats": {"total": 7146, "additions": 5238, "deletions": 1908}, "files": [{"sha": "ca1b92d0edde02e94fcd44c9e6216948b95f9063", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=47935194cf78a321788de08db375a8f16926918c", "patch": "@@ -1,5 +1,11 @@\n 2004-02-23  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n+\t* acinclude.m4: Remove old no-executables workaround;\n+\tadd new no-executables workaround.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.in: Change prereqs to autoconf 2.57.\n+\t* configure: Regenerate with autoconf 2.57.\n+\n \t* configure.in: Use NCN_TARGET_NONCANONICAL and friends.\n \t* configure: Regenerate.\n \t* Makefile.am: Use target_noncanonical variable from configure."}, {"sha": "4655f56e62200bd1cf52b3562ca4dae05583c238", "filename": "boehm-gc/acinclude.m4", "status": "modified", "additions": 5, "deletions": 80, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Facinclude.m4?ref=47935194cf78a321788de08db375a8f16926918c", "patch": "@@ -11,92 +11,17 @@\n #\n # Original author: Tom Tromey\n \n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n AC_DEFUN(GC_CONFIGURE,\n [\n \n AM_INIT_AUTOMAKE(gc, 6.1a1, no-define)\n \n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-dnl Fool anybody using AC_PROG_CC.\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n-\n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-])\n-\n-LIB_AC_PROG_CC\n-\n-# Likewise for AC_PROG_CXX.\n-AC_DEFUN(LIB_AC_PROG_CXX,\n-[AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n-dnl Fool anybody using AC_PROG_CXX.\n-AC_PROVIDE([AC_PROG_CXX])\n-AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-test -z \"$CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n-\n-AC_PROG_CXX_GNU\n-\n-if test $ac_cv_prog_gxx = yes; then\n-  GXX=yes\n-dnl Check whether -g works, even if CXXFLAGS is set, in case the package\n-dnl plays around with CXXFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\n-  AC_PROG_CXX_G\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  elif test $ac_cv_prog_cxx_g = yes; then\n-    CXXFLAGS=\"-g -O2\"\n-  else\n-    CXXFLAGS=\"-O2\"\n-  fi\n-else\n-  GXX=\n-  test \"${CXXFLAGS+set}\" = set || CXXFLAGS=\"-g\"\n-fi\n-])\n+# The autoconf 2.5x version of the no-executables hack.\n+sinclude(../config/no-executables.m4)\n+GCC_NO_EXECUTABLES\n \n-LIB_AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CXX\n \n AC_CHECK_TOOL(AS, as)\n AC_CHECK_TOOL(AR, ar)"}, {"sha": "ce701ab862f3f379d0384fccb6611ce4bdc9a9f4", "filename": "boehm-gc/aclocal.m4", "status": "modified", "additions": 6, "deletions": 81, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Faclocal.m4?ref=47935194cf78a321788de08db375a8f16926918c", "patch": "@@ -23,92 +23,17 @@ dnl PARTICULAR PURPOSE.\n #\n # Original author: Tom Tromey\n \n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n AC_DEFUN(GC_CONFIGURE,\n [\n \n-AM_INIT_AUTOMAKE(gc, 6.0, no-define)\n-\n-# FIXME: We temporarily define our own version of AC_PROG_CC.  This is\n-# copied from autoconf 2.12, but does not call AC_PROG_CC_WORKS.  We\n-# are probably using a cross compiler, which will not be able to fully\n-# link an executable.  This should really be fixed in autoconf\n-# itself.\n-\n-AC_DEFUN(LIB_AC_PROG_CC,\n-[AC_BEFORE([$0], [AC_PROG_CPP])dnl\n-dnl Fool anybody using AC_PROG_CC.\n-AC_PROVIDE([AC_PROG_CC])\n-AC_CHECK_PROG(CC, gcc, gcc)\n-if test -z \"$CC\"; then\n-  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)\n-  test -z \"$CC\" && AC_MSG_ERROR([no acceptable cc found in \\$PATH])\n-fi\n+AM_INIT_AUTOMAKE(gc, 6.1a1, no-define)\n \n-AC_PROG_CC_GNU\n-\n-if test $ac_cv_prog_gcc = yes; then\n-  GCC=yes\n-dnl Check whether -g works, even if CFLAGS is set, in case the package\n-dnl plays around with CFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CFLAGS=\"${CFLAGS+set}\"\n-  ac_save_CFLAGS=\"$CFLAGS\"\n-  CFLAGS=\n-  AC_PROG_CC_G\n-  if test \"$ac_test_CFLAGS\" = set; then\n-    CFLAGS=\"$ac_save_CFLAGS\"\n-  elif test $ac_cv_prog_cc_g = yes; then\n-    CFLAGS=\"-g -O2\"\n-  else\n-    CFLAGS=\"-O2\"\n-  fi\n-else\n-  GCC=\n-  test \"${CFLAGS+set}\" = set || CFLAGS=\"-g\"\n-fi\n-])\n-\n-LIB_AC_PROG_CC\n-\n-# Likewise for AC_PROG_CXX.\n-AC_DEFUN(LIB_AC_PROG_CXX,\n-[AC_BEFORE([$0], [AC_PROG_CXXCPP])dnl\n-dnl Fool anybody using AC_PROG_CXX.\n-AC_PROVIDE([AC_PROG_CXX])\n-AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++, gcc)\n-test -z \"$CXX\" && AC_MSG_ERROR([no acceptable c++ found in \\$PATH])\n-\n-AC_PROG_CXX_GNU\n-\n-if test $ac_cv_prog_gxx = yes; then\n-  GXX=yes\n-dnl Check whether -g works, even if CXXFLAGS is set, in case the package\n-dnl plays around with CXXFLAGS (such as to build both debugging and\n-dnl normal versions of a library), tasteless as that idea is.\n-  ac_test_CXXFLAGS=\"${CXXFLAGS+set}\"\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\n-  AC_PROG_CXX_G\n-  if test \"$ac_test_CXXFLAGS\" = set; then\n-    CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  elif test $ac_cv_prog_cxx_g = yes; then\n-    CXXFLAGS=\"-g -O2\"\n-  else\n-    CXXFLAGS=\"-O2\"\n-  fi\n-else\n-  GXX=\n-  test \"${CXXFLAGS+set}\" = set || CXXFLAGS=\"-g\"\n-fi\n-])\n+# The autoconf 2.5x version of the no-executables hack.\n+sinclude(../config/no-executables.m4)\n+GCC_NO_EXECUTABLES\n \n-LIB_AC_PROG_CXX\n+AC_PROG_CC\n+AC_PROG_CXX\n \n AC_CHECK_TOOL(AS, as)\n AC_CHECK_TOOL(AR, ar)"}, {"sha": "129b417709796434c460e897f8a48b0e84a152b4", "filename": "boehm-gc/configure", "status": "modified", "additions": 5220, "deletions": 1746, "changes": 6966, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=47935194cf78a321788de08db375a8f16926918c"}, {"sha": "5d1c88f1bb833a3eb03dbada6d2b7c1960b33554", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47935194cf78a321788de08db375a8f16926918c/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=47935194cf78a321788de08db375a8f16926918c", "patch": "@@ -15,7 +15,7 @@\n \n dnl Process this file with autoconf to produce configure.\n \n-AC_PREREQ(2.13)\n+AC_PREREQ(2.57)\n AC_INIT(gcj_mlc.c)\n \n # This works around the fact that libtool configuration may change LD"}]}