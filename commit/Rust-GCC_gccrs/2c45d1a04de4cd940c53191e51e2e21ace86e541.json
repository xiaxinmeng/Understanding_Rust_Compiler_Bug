{"sha": "2c45d1a04de4cd940c53191e51e2e21ace86e541", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0NWQxYTA0ZGU0Y2Q5NDBjNTMxOTFlNTFlMmUyMWFjZTg2ZTU0MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-27T17:45:52Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-09-27T17:45:52Z"}, "message": "alloca-conf.h (alloca): Don't use Gcc builtin or <alloca.h>.\n\n        * alloca-conf.h (alloca) [C_ALLOCA]: Don't use Gcc builtin\n        or <alloca.h>.\n        * clock.c (GNU_HZ): New definition.\n        (clock): Use it.\n        * getruntime.c: Likewise.\n\n        * config.table: Use mh-beos.\n        * config/mh-beos: New file.\n\nFrom-SVN: r29680", "tree": {"sha": "5bbe710f0cbb1ee8f863137e230b1b3ebca95869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bbe710f0cbb1ee8f863137e230b1b3ebca95869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c45d1a04de4cd940c53191e51e2e21ace86e541", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c45d1a04de4cd940c53191e51e2e21ace86e541", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c45d1a04de4cd940c53191e51e2e21ace86e541", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c45d1a04de4cd940c53191e51e2e21ace86e541/comments", "author": null, "committer": null, "parents": [{"sha": "e5da599a0c4457eb6e3e7bc801d10898c34c3c47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5da599a0c4457eb6e3e7bc801d10898c34c3c47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5da599a0c4457eb6e3e7bc801d10898c34c3c47"}], "stats": {"total": 59, "additions": 51, "deletions": 8}, "files": [{"sha": "d5c865f82efa9f0117262e937f1a21118dc3d423", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -181,6 +181,17 @@ Sun Apr 11 23:20:59 1999  Mumit Khan  <khan@xraylith.wisc.edu>\n \t(xcalloc): UWIN has sbrk.\n \t(xrealloc): Fix guard macro.\n \n+1999-04-11  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alloca-conf.h (alloca) [C_ALLOCA]: Don't use Gcc builtin\n+\tor <alloca.h>.\n+\t* clock.c (GNU_HZ): New definition.\n+\t(clock): Use it.\n+\t* getruntime.c: Likewise.\n+\n+\t* config.table: Use mh-beos.\n+\t* config/mh-beos: New file.\n+\n 1999-04-11  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cplus-dem.c (demangle_template_value_parm): Handle"}, {"sha": "9c3eea396c19359acacad49f735999982ec56410", "filename": "libiberty/alloca-conf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Falloca-conf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Falloca-conf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca-conf.h?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -1,14 +1,14 @@\n #include \"config.h\"\n \n-#ifdef __GNUC__\n+#if defined(__GNUC__) && !defined(C_ALLOCA)\n # ifndef alloca\n #  define alloca __builtin_alloca\n # endif\n #else /* ! defined (__GNUC__) */\n #  ifdef _AIX\n  #pragma alloca\n #  else\n-#  ifdef HAVE_ALLOCA_H\n+#  if defined(HAVE_ALLOCA_H) && !defined(C_ALLOCA)\n #   include <alloca.h>\n #  else /* ! defined (HAVE_ALLOCA_H) */\n #   ifdef __STDC__"}, {"sha": "db2509c17f277aaffacd36533797fabcd1d1e037", "filename": "libiberty/clock.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fclock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fclock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fclock.c?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -36,8 +36,20 @@ the executable file might be covered by the GNU General Public License. */\n #include <sys/times.h>\n #endif\n \n-#if defined (HAVE_TIMES) && ! defined (HZ) && defined (CLOCKS_PER_SEC)\n-#define HZ CLOCKS_PER_SEC\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n+#ifdef _SC_CLK_TCK\n+#define GNU_HZ  sysconf(_SC_CLK_TCK)\n+#else\n+#ifdef HZ\n+#define GNU_HZ  HZ\n+#else\n+#ifdef CLOCKS_PER_SEC\n+#define GNU_HZ  CLOCKS_PER_SEC\n+#endif\n+#endif\n #endif\n \n /* FIXME: should be able to declare as clock_t. */\n@@ -56,7 +68,7 @@ clock ()\n   struct tms tms;\n \n   times (&tms);\n-  return (tms.tms_utime + tms.tms_stime) * (1000000 / HZ);\n+  return (tms.tms_utime + tms.tms_stime) * (1000000 / GNU_HZ);\n #else\n #ifdef VMS\n   struct"}, {"sha": "814c9eb1d9befb58df65c43e20b580ac23ed3c64", "filename": "libiberty/config.table", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fconfig.table", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fconfig.table", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.table?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -6,6 +6,7 @@ case \"${host}\" in\n   *-*-freebsd2.2.[012])\tfrag=mh-fbsd21 ;;\n   i370-*-opened*)       frag=mh-openedition ;;\n   i[345]86-*-windows*)\tfrag=mh-windows ;;\n+  *-*-beos*)\t\tfrag=mh-beos ;;\n esac\n \n frags=$frag"}, {"sha": "9b75e7d33723b533eca0c58ab59e1478afbd349a", "filename": "libiberty/config/mh-beos", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fconfig%2Fmh-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fconfig%2Fmh-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-beos?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -0,0 +1,7 @@\n+# Host makefile fragment for BeOS\n+\n+# This is a temporary hack until the wimpy default 64k stack\n+# limit in BeOS is either increased or made user settable somehow.\n+# This probably won't happen until after the DR9 release.\n+\n+EXTRA_OFILES = alloca.o"}, {"sha": "b855ea6e82f56c35ceb92b9a8724c4d571f6be66", "filename": "libiberty/getruntime.c", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fgetruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c45d1a04de4cd940c53191e51e2e21ace86e541/libiberty%2Fgetruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fgetruntime.c?ref=2c45d1a04de4cd940c53191e51e2e21ace86e541", "patch": "@@ -40,15 +40,27 @@ Boston, MA 02111-1307, USA.  */\n #include <sys/times.h>\n #endif\n \n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+\n /* This is a fallback; if wrong, it will likely make obviously wrong\n    results. */\n \n #ifndef CLOCKS_PER_SEC\n #define CLOCKS_PER_SEC 1\n #endif\n \n-#if defined (HAVE_TIMES) && ! defined (HZ)\n-#define HZ CLOCKS_PER_SEC\n+#ifdef _SC_CLK_TCK\n+#define GNU_HZ  sysconf(_SC_CLK_TCK)\n+#else\n+#ifdef HZ\n+#define GNU_HZ  HZ\n+#else\n+#ifdef CLOCKS_PER_SEC\n+#define GNU_HZ  CLOCKS_PER_SEC\n+#endif\n+#endif\n #endif\n \n long\n@@ -65,7 +77,7 @@ get_run_time ()\n   struct tms tms;\n \n   times (&tms);\n-  return (tms.tms_utime + tms.tms_stime) * (1000000 / HZ);\n+  return (tms.tms_utime + tms.tms_stime) * (1000000 / GNU_HZ);\n #else /* ! HAVE_TIMES */\n   /* Fall back on clock and hope it's correctly implemented. */\n   const long clocks_per_sec = CLOCKS_PER_SEC;"}]}