{"sha": "e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBhZTkzZTJlYTM3NzVmZjJhMzI1NmM2NTFjYTliMjg1ZTI1MzhjYw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-11T06:59:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T06:59:29Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting\n\n2010-10-11  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_aux.adb, sem_ch6.adb: Minor reformatting\n\n2010-10-11  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.adb, atree.h, atree.ads, atree.adb: Define seven new flags\n\tFlag248-Flag254.  Define new field Field29.\n\nFrom-SVN: r165271", "tree": {"sha": "a8fa8889e7369cf5b6764a5851fae3fadc93dddf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8fa8889e7369cf5b6764a5851fae3fadc93dddf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/comments", "author": null, "committer": null, "parents": [{"sha": "922a06c370916f82d58f43a782075994ae7b4009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922a06c370916f82d58f43a782075994ae7b4009", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922a06c370916f82d58f43a782075994ae7b4009"}], "stats": {"total": 910, "additions": 517, "deletions": 393}, "files": [{"sha": "e8132abc759233587f0a0a203ba23937a8fb527f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -1,3 +1,12 @@\n+2010-10-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_aux.adb, sem_ch6.adb: Minor reformatting\n+\n+2010-10-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.adb, atree.h, atree.ads, atree.adb: Define seven new flags\n+\tFlag248-Flag254.  Define new field Field29.\n+\n 2010-10-10  Olivier Hainque  <hainque@adacore.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "5073874940e63e3045a5fc045851aadcbbabc8e6", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 319, "deletions": 246, "changes": 565, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -154,6 +154,56 @@ package body Atree is\n    function To_Flag_Byte_Ptr is new\n      Unchecked_Conversion (Node_Kind_Ptr, Flag_Byte_Ptr);\n \n+   --  The following declarations are used to store flags 239-246 in the\n+   --  Nkind field of the fourth component of an extended (entity) node.\n+\n+   type Flag_Byte2 is record\n+      Flag239 : Boolean;\n+      Flag240 : Boolean;\n+      Flag241 : Boolean;\n+      Flag242 : Boolean;\n+      Flag243 : Boolean;\n+      Flag244 : Boolean;\n+      Flag245 : Boolean;\n+      Flag246 : Boolean;\n+   end record;\n+\n+   pragma Pack (Flag_Byte2);\n+   for Flag_Byte2'Size use 8;\n+\n+   type Flag_Byte2_Ptr is access all Flag_Byte2;\n+\n+   function To_Flag_Byte2 is new\n+     Unchecked_Conversion (Node_Kind, Flag_Byte2);\n+\n+   function To_Flag_Byte2_Ptr is new\n+     Unchecked_Conversion (Node_Kind_Ptr, Flag_Byte2_Ptr);\n+\n+   --  The following declarations are used to store flags 247-254 in the\n+   --  Nkind field of the fifth component of an extended (entity) node.\n+\n+   type Flag_Byte3 is record\n+      Flag247 : Boolean;\n+      Flag248 : Boolean;\n+      Flag249 : Boolean;\n+      Flag250 : Boolean;\n+      Flag251 : Boolean;\n+      Flag252 : Boolean;\n+      Flag253 : Boolean;\n+      Flag254 : Boolean;\n+   end record;\n+\n+   pragma Pack (Flag_Byte3);\n+   for Flag_Byte3'Size use 8;\n+\n+   type Flag_Byte3_Ptr is access all Flag_Byte3;\n+\n+   function To_Flag_Byte3 is new\n+     Unchecked_Conversion (Node_Kind, Flag_Byte3);\n+\n+   function To_Flag_Byte3_Ptr is new\n+     Unchecked_Conversion (Node_Kind_Ptr, Flag_Byte3_Ptr);\n+\n    --  The following declarations are used to store flags 73-96 and the\n    --  Convention field in the Field12 field of the third component of an\n    --  extended (Entity) node.\n@@ -309,7 +359,7 @@ package body Atree is\n      Unchecked_Conversion (Union_Id_Ptr, Flag_Word3_Ptr);\n \n    --  The following declarations are used to store flags 184-215 in the\n-   --  Field11 field of the fifth component of an extended (entity) node.\n+   --  Field12 field of the fifth component of an extended (entity) node.\n \n    type Flag_Word4 is record\n       Flag184 : Boolean;\n@@ -361,59 +411,6 @@ package body Atree is\n    function To_Flag_Word4_Ptr is new\n      Unchecked_Conversion (Union_Id_Ptr, Flag_Word4_Ptr);\n \n-   --  The following declarations are used to store flags 216-247 in the\n-   --  Field12 field of the fifth component of an extended (entity) node.\n-\n-   type Flag_Word5 is record\n-      Flag216 : Boolean;\n-      Flag217 : Boolean;\n-      Flag218 : Boolean;\n-      Flag219 : Boolean;\n-      Flag220 : Boolean;\n-      Flag221 : Boolean;\n-      Flag222 : Boolean;\n-      Flag223 : Boolean;\n-\n-      Flag224 : Boolean;\n-      Flag225 : Boolean;\n-      Flag226 : Boolean;\n-      Flag227 : Boolean;\n-      Flag228 : Boolean;\n-      Flag229 : Boolean;\n-      Flag230 : Boolean;\n-      Flag231 : Boolean;\n-\n-      Flag232 : Boolean;\n-      Flag233 : Boolean;\n-      Flag234 : Boolean;\n-      Flag235 : Boolean;\n-      Flag236 : Boolean;\n-      Flag237 : Boolean;\n-      Flag238 : Boolean;\n-      Flag239 : Boolean;\n-\n-      Flag240 : Boolean;\n-      Flag241 : Boolean;\n-      Flag242 : Boolean;\n-      Flag243 : Boolean;\n-      Flag244 : Boolean;\n-      Flag245 : Boolean;\n-      Flag246 : Boolean;\n-      Flag247 : Boolean;\n-   end record;\n-\n-   pragma Pack (Flag_Word5);\n-   for Flag_Word5'Size use 32;\n-   for Flag_Word5'Alignment use 4;\n-\n-   type Flag_Word5_Ptr is access all Flag_Word5;\n-\n-   function To_Flag_Word5 is new\n-     Unchecked_Conversion (Union_Id, Flag_Word5);\n-\n-   function To_Flag_Word5_Ptr is new\n-     Unchecked_Conversion (Union_Id_Ptr, Flag_Word5_Ptr);\n-\n    --------------------------------------------------\n    -- Implementation of Tree Substitution Routines --\n    --------------------------------------------------\n@@ -2141,6 +2138,12 @@ package body Atree is\n          return Nodes.Table (N + 4).Field10;\n       end Field28;\n \n+      function Field29 (N : Node_Id) return Union_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Nodes.Table (N + 4).Field11;\n+      end Field29;\n+\n       function Node1 (N : Node_Id) return Node_Id is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -2309,6 +2312,12 @@ package body Atree is\n          return Node_Id (Nodes.Table (N + 4).Field10);\n       end Node28;\n \n+      function Node29 (N : Node_Id) return Node_Id is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return Node_Id (Nodes.Table (N + 4).Field11);\n+      end Node29;\n+\n       function List1 (N : Node_Id) return List_Id is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -3778,387 +3787,429 @@ package body Atree is\n       function Flag184 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag184;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag184;\n       end Flag184;\n \n       function Flag185 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag185;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag185;\n       end Flag185;\n \n       function Flag186 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag186;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag186;\n       end Flag186;\n \n       function Flag187 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag187;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag187;\n       end Flag187;\n \n       function Flag188 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag188;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag188;\n       end Flag188;\n \n       function Flag189 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag189;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag189;\n       end Flag189;\n \n       function Flag190 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag190;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag190;\n       end Flag190;\n \n       function Flag191 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag191;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag191;\n       end Flag191;\n \n       function Flag192 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag192;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag192;\n       end Flag192;\n \n       function Flag193 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag193;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag193;\n       end Flag193;\n \n       function Flag194 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag194;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag194;\n       end Flag194;\n \n       function Flag195 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag195;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag195;\n       end Flag195;\n \n       function Flag196 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag196;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag196;\n       end Flag196;\n \n       function Flag197 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag197;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag197;\n       end Flag197;\n \n       function Flag198 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag198;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag198;\n       end Flag198;\n \n       function Flag199 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag199;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag199;\n       end Flag199;\n \n       function Flag200 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag200;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag200;\n       end Flag200;\n \n       function Flag201 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag201;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag201;\n       end Flag201;\n \n       function Flag202 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag202;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag202;\n       end Flag202;\n \n       function Flag203 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag203;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag203;\n       end Flag203;\n \n       function Flag204 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag204;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag204;\n       end Flag204;\n \n       function Flag205 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag205;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag205;\n       end Flag205;\n \n       function Flag206 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag206;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag206;\n       end Flag206;\n \n       function Flag207 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag207;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag207;\n       end Flag207;\n \n       function Flag208 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag208;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag208;\n       end Flag208;\n \n       function Flag209 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag209;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag209;\n       end Flag209;\n \n       function Flag210 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag210;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag210;\n       end Flag210;\n \n       function Flag211 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag211;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag211;\n       end Flag211;\n \n       function Flag212 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag212;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag212;\n       end Flag212;\n \n       function Flag213 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag213;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag213;\n       end Flag213;\n \n       function Flag214 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag214;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag214;\n       end Flag214;\n \n       function Flag215 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word4 (Nodes.Table (N + 4).Field11).Flag215;\n+         return To_Flag_Word4 (Nodes.Table (N + 4).Field12).Flag215;\n       end Flag215;\n \n       function Flag216 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag216;\n+         return Nodes.Table (N + 4).In_List;\n       end Flag216;\n \n       function Flag217 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag217;\n+         return Nodes.Table (N + 4).Unused_1;\n       end Flag217;\n \n       function Flag218 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag218;\n+         return Nodes.Table (N + 4).Rewrite_Ins;\n       end Flag218;\n \n       function Flag219 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag219;\n+         return Nodes.Table (N + 4).Analyzed;\n       end Flag219;\n \n       function Flag220 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag220;\n+         return Nodes.Table (N + 4).Comes_From_Source;\n       end Flag220;\n \n       function Flag221 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag221;\n+         return Nodes.Table (N + 4).Error_Posted;\n       end Flag221;\n \n       function Flag222 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag222;\n+         return Nodes.Table (N + 4).Flag4;\n       end Flag222;\n \n       function Flag223 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag223;\n+         return Nodes.Table (N + 4).Flag5;\n       end Flag223;\n \n       function Flag224 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag224;\n+         return Nodes.Table (N + 4).Flag6;\n       end Flag224;\n \n       function Flag225 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag225;\n+         return Nodes.Table (N + 4).Flag7;\n       end Flag225;\n \n       function Flag226 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag226;\n+         return Nodes.Table (N + 4).Flag8;\n       end Flag226;\n \n       function Flag227 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag227;\n+         return Nodes.Table (N + 4).Flag9;\n       end Flag227;\n \n       function Flag228 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag228;\n+         return Nodes.Table (N + 4).Flag10;\n       end Flag228;\n \n       function Flag229 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag229;\n+         return Nodes.Table (N + 4).Flag11;\n       end Flag229;\n \n       function Flag230 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag230;\n+         return Nodes.Table (N + 4).Flag12;\n       end Flag230;\n \n       function Flag231 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag231;\n+         return Nodes.Table (N + 4).Flag13;\n       end Flag231;\n \n       function Flag232 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag232;\n+         return Nodes.Table (N + 4).Flag14;\n       end Flag232;\n \n       function Flag233 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag233;\n+         return Nodes.Table (N + 4).Flag15;\n       end Flag233;\n \n       function Flag234 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag234;\n+         return Nodes.Table (N + 4).Flag16;\n       end Flag234;\n \n       function Flag235 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag235;\n+         return Nodes.Table (N + 4).Flag17;\n       end Flag235;\n \n       function Flag236 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag236;\n+         return Nodes.Table (N + 4).Flag18;\n       end Flag236;\n \n       function Flag237 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag237;\n+         return Nodes.Table (N + 4).Pflag1;\n       end Flag237;\n \n       function Flag238 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag238;\n+         return Nodes.Table (N + 4).Pflag2;\n       end Flag238;\n \n       function Flag239 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag239;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag239;\n       end Flag239;\n \n       function Flag240 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag240;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag240;\n       end Flag240;\n \n       function Flag241 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag241;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag241;\n       end Flag241;\n \n       function Flag242 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag242;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag242;\n       end Flag242;\n \n       function Flag243 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag243;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag243;\n       end Flag243;\n \n       function Flag244 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag244;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag244;\n       end Flag244;\n \n       function Flag245 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag245;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag245;\n       end Flag245;\n \n       function Flag246 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag246;\n+         return To_Flag_Byte2 (Nodes.Table (N + 3).Nkind).Flag246;\n       end Flag246;\n \n       function Flag247 (N : Node_Id) return Boolean is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return To_Flag_Word5 (Nodes.Table (N + 4).Field12).Flag247;\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag247;\n       end Flag247;\n \n+      function Flag248 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag248;\n+      end Flag248;\n+\n+      function Flag249 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag249;\n+      end Flag249;\n+\n+      function Flag250 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag250;\n+      end Flag250;\n+\n+      function Flag251 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag251;\n+      end Flag251;\n+\n+      function Flag252 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag252;\n+      end Flag252;\n+\n+      function Flag253 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag253;\n+      end Flag253;\n+\n+      function Flag254 (N : Node_Id) return Boolean is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         return To_Flag_Byte3 (Nodes.Table (N + 4).Nkind).Flag254;\n+      end Flag254;\n+\n       procedure Set_Nkind (N : Node_Id; Val : Node_Kind) is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -4333,6 +4384,12 @@ package body Atree is\n          Nodes.Table (N + 4).Field10 := Val;\n       end Set_Field28;\n \n+      procedure Set_Field29 (N : Node_Id; Val : Union_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field11 := Val;\n+      end Set_Field29;\n+\n       procedure Set_Node1 (N : Node_Id; Val : Node_Id) is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -4501,6 +4558,12 @@ package body Atree is\n          Nodes.Table (N + 4).Field10 := Union_Id (Val);\n       end Set_Node28;\n \n+      procedure Set_Node29 (N : Node_Id; Val : Node_Id) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         Nodes.Table (N + 4).Field11 := Union_Id (Val);\n+      end Set_Node29;\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id) is\n       begin\n          pragma Assert (N <= Nodes.Last);\n@@ -6020,513 +6083,523 @@ package body Atree is\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag184 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag184 := Val;\n       end Set_Flag184;\n \n       procedure Set_Flag185 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag185 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag185 := Val;\n       end Set_Flag185;\n \n       procedure Set_Flag186 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag186 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag186 := Val;\n       end Set_Flag186;\n \n       procedure Set_Flag187 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag187 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag187 := Val;\n       end Set_Flag187;\n \n       procedure Set_Flag188 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag188 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag188 := Val;\n       end Set_Flag188;\n \n       procedure Set_Flag189 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag189 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag189 := Val;\n       end Set_Flag189;\n \n       procedure Set_Flag190 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag190 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag190 := Val;\n       end Set_Flag190;\n \n       procedure Set_Flag191 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag191 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag191 := Val;\n       end Set_Flag191;\n \n       procedure Set_Flag192 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag192 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag192 := Val;\n       end Set_Flag192;\n \n       procedure Set_Flag193 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag193 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag193 := Val;\n       end Set_Flag193;\n \n       procedure Set_Flag194 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag194 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag194 := Val;\n       end Set_Flag194;\n \n       procedure Set_Flag195 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag195 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag195 := Val;\n       end Set_Flag195;\n \n       procedure Set_Flag196 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag196 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag196 := Val;\n       end Set_Flag196;\n \n       procedure Set_Flag197 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag197 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag197 := Val;\n       end Set_Flag197;\n \n       procedure Set_Flag198 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag198 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag198 := Val;\n       end Set_Flag198;\n \n       procedure Set_Flag199 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag199 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag199 := Val;\n       end Set_Flag199;\n \n       procedure Set_Flag200 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag200 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag200 := Val;\n       end Set_Flag200;\n \n       procedure Set_Flag201 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag201 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag201 := Val;\n       end Set_Flag201;\n \n       procedure Set_Flag202 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag202 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag202 := Val;\n       end Set_Flag202;\n \n       procedure Set_Flag203 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag203 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag203 := Val;\n       end Set_Flag203;\n \n       procedure Set_Flag204 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag204 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag204 := Val;\n       end Set_Flag204;\n \n       procedure Set_Flag205 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag205 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag205 := Val;\n       end Set_Flag205;\n \n       procedure Set_Flag206 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag206 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag206 := Val;\n       end Set_Flag206;\n \n       procedure Set_Flag207 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag207 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag207 := Val;\n       end Set_Flag207;\n \n       procedure Set_Flag208 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag208 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag208 := Val;\n       end Set_Flag208;\n \n       procedure Set_Flag209 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag209 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag209 := Val;\n       end Set_Flag209;\n \n       procedure Set_Flag210 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag210 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag210 := Val;\n       end Set_Flag210;\n \n       procedure Set_Flag211 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag211 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag211 := Val;\n       end Set_Flag211;\n \n       procedure Set_Flag212 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag212 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag212 := Val;\n       end Set_Flag212;\n \n       procedure Set_Flag213 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag213 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag213 := Val;\n       end Set_Flag213;\n \n       procedure Set_Flag214 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag214 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag214 := Val;\n       end Set_Flag214;\n \n       procedure Set_Flag215 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n          To_Flag_Word4_Ptr\n            (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field11'Unrestricted_Access)).Flag215 := Val;\n+             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag215 := Val;\n       end Set_Flag215;\n \n       procedure Set_Flag216 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag216 := Val;\n+         Nodes.Table (N + 4).In_List := Val;\n       end Set_Flag216;\n \n       procedure Set_Flag217 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag217 := Val;\n+         Nodes.Table (N + 4).Unused_1 := Val;\n       end Set_Flag217;\n \n       procedure Set_Flag218 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag218 := Val;\n+         Nodes.Table (N + 4).Rewrite_Ins := Val;\n       end Set_Flag218;\n \n       procedure Set_Flag219 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag219 := Val;\n+         Nodes.Table (N + 4).Analyzed := Val;\n       end Set_Flag219;\n \n       procedure Set_Flag220 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag220 := Val;\n+         Nodes.Table (N + 4).Comes_From_Source := Val;\n       end Set_Flag220;\n \n       procedure Set_Flag221 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag221 := Val;\n+         Nodes.Table (N + 4).Error_Posted := Val;\n       end Set_Flag221;\n \n       procedure Set_Flag222 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag222 := Val;\n+         Nodes.Table (N + 4).Flag4 := Val;\n       end Set_Flag222;\n \n       procedure Set_Flag223 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag223 := Val;\n+         Nodes.Table (N + 4).Flag5 := Val;\n       end Set_Flag223;\n \n       procedure Set_Flag224 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag224 := Val;\n+         Nodes.Table (N + 4).Flag6 := Val;\n       end Set_Flag224;\n \n       procedure Set_Flag225 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag225 := Val;\n+         Nodes.Table (N + 4).Flag7 := Val;\n       end Set_Flag225;\n \n       procedure Set_Flag226 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag226 := Val;\n+         Nodes.Table (N + 4).Flag8 := Val;\n       end Set_Flag226;\n \n       procedure Set_Flag227 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag227 := Val;\n+         Nodes.Table (N + 4).Flag9 := Val;\n       end Set_Flag227;\n \n       procedure Set_Flag228 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag228 := Val;\n+         Nodes.Table (N + 4).Flag10 := Val;\n       end Set_Flag228;\n \n       procedure Set_Flag229 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag229 := Val;\n+         Nodes.Table (N + 4).Flag11 := Val;\n       end Set_Flag229;\n \n       procedure Set_Flag230 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag230 := Val;\n+         Nodes.Table (N + 4).Flag12 := Val;\n       end Set_Flag230;\n \n       procedure Set_Flag231 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag231 := Val;\n+         Nodes.Table (N + 4).Flag13 := Val;\n       end Set_Flag231;\n \n       procedure Set_Flag232 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag232 := Val;\n+         Nodes.Table (N + 4).Flag14 := Val;\n       end Set_Flag232;\n \n       procedure Set_Flag233 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag233 := Val;\n+         Nodes.Table (N + 4).Flag15 := Val;\n       end Set_Flag233;\n \n       procedure Set_Flag234 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag234 := Val;\n+         Nodes.Table (N + 4).Flag16 := Val;\n       end Set_Flag234;\n \n       procedure Set_Flag235 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag235 := Val;\n+         Nodes.Table (N + 4).Flag17 := Val;\n       end Set_Flag235;\n \n       procedure Set_Flag236 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag236 := Val;\n+         Nodes.Table (N + 4).Flag18 := Val;\n       end Set_Flag236;\n \n       procedure Set_Flag237 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag237 := Val;\n+         Nodes.Table (N + 4).Pflag1 := Val;\n       end Set_Flag237;\n \n       procedure Set_Flag238 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag238 := Val;\n+         Nodes.Table (N + 4).Pflag2 := Val;\n       end Set_Flag238;\n \n       procedure Set_Flag239 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag239 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag239 := Val;\n       end Set_Flag239;\n \n       procedure Set_Flag240 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag240 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag240 := Val;\n       end Set_Flag240;\n \n       procedure Set_Flag241 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag241 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag241 := Val;\n       end Set_Flag241;\n \n       procedure Set_Flag242 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag242 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag242 := Val;\n       end Set_Flag242;\n \n       procedure Set_Flag243 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag243 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag243 := Val;\n       end Set_Flag243;\n \n       procedure Set_Flag244 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag244 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag244 := Val;\n       end Set_Flag244;\n \n       procedure Set_Flag245 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag245 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag245 := Val;\n       end Set_Flag245;\n \n       procedure Set_Flag246 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag246 := Val;\n+         To_Flag_Byte2_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 3).Nkind'Unrestricted_Access)).Flag246 := Val;\n       end Set_Flag246;\n \n       procedure Set_Flag247 (N : Node_Id; Val : Boolean) is\n       begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         To_Flag_Word5_Ptr\n-           (Union_Id_Ptr'\n-             (Nodes.Table (N + 4).Field12'Unrestricted_Access)).Flag247 := Val;\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag247 := Val;\n       end Set_Flag247;\n \n+      procedure Set_Flag248 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag248 := Val;\n+      end Set_Flag248;\n+\n+      procedure Set_Flag249 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag249 := Val;\n+      end Set_Flag249;\n+\n+      procedure Set_Flag250 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag250 := Val;\n+      end Set_Flag250;\n+\n+      procedure Set_Flag251 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag251 := Val;\n+      end Set_Flag251;\n+\n+      procedure Set_Flag252 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag252 := Val;\n+      end Set_Flag252;\n+\n+      procedure Set_Flag253 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag253 := Val;\n+      end Set_Flag253;\n+\n+      procedure Set_Flag254 (N : Node_Id; Val : Boolean) is\n+      begin\n+         pragma Assert (Nkind (N) in N_Entity);\n+         To_Flag_Byte3_Ptr\n+           (Node_Kind_Ptr'\n+             (Nodes.Table (N + 4).Nkind'Unrestricted_Access)).Flag254 := Val;\n+      end Set_Flag254;\n+\n       procedure Set_Node1_With_Parent (N : Node_Id; Val : Node_Id) is\n       begin\n          pragma Assert (N <= Nodes.Last);"}, {"sha": "8a1ae478e3ee57d9223e28eea4ee88b7cbfb6e12", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 82, "deletions": 28, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -981,6 +981,9 @@ package Atree is\n       function Field28 (N : Node_Id) return Union_Id;\n       pragma Inline (Field28);\n \n+      function Field29 (N : Node_Id) return Union_Id;\n+      pragma Inline (Field29);\n+\n       function Node1 (N : Node_Id) return Node_Id;\n       pragma Inline (Node1);\n \n@@ -1065,6 +1068,9 @@ package Atree is\n       function Node28 (N : Node_Id) return Node_Id;\n       pragma Inline (Node28);\n \n+      function Node29 (N : Node_Id) return Node_Id;\n+      pragma Inline (Node29);\n+\n       function List1 (N : Node_Id) return List_Id;\n       pragma Inline (List1);\n \n@@ -1925,6 +1931,27 @@ package Atree is\n       function Flag247 (N : Node_Id) return Boolean;\n       pragma Inline (Flag247);\n \n+      function Flag248 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag248);\n+\n+      function Flag249 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag249);\n+\n+      function Flag250 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag250);\n+\n+      function Flag251 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag251);\n+\n+      function Flag252 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag252);\n+\n+      function Flag253 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag253);\n+\n+      function Flag254 (N : Node_Id) return Boolean;\n+      pragma Inline (Flag254);\n+\n       --  Procedures to set value of indicated field\n \n       procedure Set_Nkind (N : Node_Id; Val : Node_Kind);\n@@ -2014,6 +2041,9 @@ package Atree is\n       procedure Set_Field28 (N : Node_Id; Val : Union_Id);\n       pragma Inline (Set_Field28);\n \n+      procedure Set_Field29 (N : Node_Id; Val : Union_Id);\n+      pragma Inline (Set_Field29);\n+\n       procedure Set_Node1 (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node1);\n \n@@ -2098,6 +2128,9 @@ package Atree is\n       procedure Set_Node28 (N : Node_Id; Val : Node_Id);\n       pragma Inline (Set_Node28);\n \n+      procedure Set_Node29 (N : Node_Id; Val : Node_Id);\n+      pragma Inline (Set_Node29);\n+\n       procedure Set_List1 (N : Node_Id; Val : List_Id);\n       pragma Inline (Set_List1);\n \n@@ -2953,6 +2986,27 @@ package Atree is\n       procedure Set_Flag247 (N : Node_Id; Val : Boolean);\n       pragma Inline (Set_Flag247);\n \n+      procedure Set_Flag248 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag248);\n+\n+      procedure Set_Flag249 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag249);\n+\n+      procedure Set_Flag250 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag250);\n+\n+      procedure Set_Flag251 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag251);\n+\n+      procedure Set_Flag252 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag252);\n+\n+      procedure Set_Flag253 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag253);\n+\n+      procedure Set_Flag254 (N : Node_Id; Val : Boolean);\n+      pragma Inline (Set_Flag254);\n+\n       --  The following versions of Set_Noden also set the parent\n       --  pointer of the referenced node if it is non_Empty\n \n@@ -3069,33 +3123,33 @@ package Atree is\n          Flag18 : Boolean;\n          --  The eighteen flags for a normal node\n \n-         --  The above fields are used as follows in components 2-4 of\n+         --  The above fields are used as follows in components 2-5 of\n          --  an extended node entry. These fields are not currently\n          --  used in component 5 (where we still have lots of room!)\n \n-         --    In_List            used as  Flag19, Flag40, Flag129\n-         --    Unused_1           used as  Flag20, Flag41, Flag130\n-         --    Rewrite_Ins        used as  Flag21, Flag42, Flag131\n-         --    Analyzed           used as  Flag22, Flag43, Flag132\n-         --    Comes_From_Source  used as  Flag23, Flag44, Flag133\n-         --    Error_Posted       used as  Flag24, Flag45, Flag134\n-         --    Flag4              used as  Flag25, Flag46, Flag135\n-         --    Flag5              used as  Flag26, Flag47, Flag136\n-         --    Flag6              used as  Flag27, Flag48, Flag137\n-         --    Flag7              used as  Flag28, Flag49, Flag138\n-         --    Flag8              used as  Flag29, Flag50, Flag139\n-         --    Flag9              used as  Flag30, Flag51, Flag140\n-         --    Flag10             used as  Flag31, Flag52, Flag141\n-         --    Flag11             used as  Flag32, Flag53, Flag142\n-         --    Flag12             used as  Flag33, Flag54, Flag143\n-         --    Flag13             used as  Flag34, Flag55, Flag144\n-         --    Flag14             used as  Flag35, Flag56, Flag145\n-         --    Flag15             used as  Flag36, Flag57, Flag146\n-         --    Flag16             used as  Flag37, Flag58, Flag147\n-         --    Flag17             used as  Flag38, Flag59, Flag148\n-         --    Flag18             used as  Flag39, Flag60, Flag149\n-         --    Pflag1             used as  Flag61, Flag62, Flag150\n-         --    Pflag2             used as  Flag63, Flag64, Flag151\n+         --    In_List            used as  Flag19, Flag40, Flag129, Flag216\n+         --    Unused_1           used as  Flag20, Flag41, Flag130, Flag217\n+         --    Rewrite_Ins        used as  Flag21, Flag42, Flag131, Flag218\n+         --    Analyzed           used as  Flag22, Flag43, Flag132, Flag219\n+         --    Comes_From_Source  used as  Flag23, Flag44, Flag133, Flag220\n+         --    Error_Posted       used as  Flag24, Flag45, Flag134, Flag221\n+         --    Flag4              used as  Flag25, Flag46, Flag135, Flag222\n+         --    Flag5              used as  Flag26, Flag47, Flag136, Flag223\n+         --    Flag6              used as  Flag27, Flag48, Flag137, Flag224\n+         --    Flag7              used as  Flag28, Flag49, Flag138, Flag225\n+         --    Flag8              used as  Flag29, Flag50, Flag139, Flag226\n+         --    Flag9              used as  Flag30, Flag51, Flag140, Flag227\n+         --    Flag10             used as  Flag31, Flag52, Flag141, Flag228\n+         --    Flag11             used as  Flag32, Flag53, Flag142, Flag229\n+         --    Flag12             used as  Flag33, Flag54, Flag143, Flag230\n+         --    Flag13             used as  Flag34, Flag55, Flag144, Flag231\n+         --    Flag14             used as  Flag35, Flag56, Flag145, Flag232\n+         --    Flag15             used as  Flag36, Flag57, Flag146, Flag233\n+         --    Flag16             used as  Flag37, Flag58, Flag147, Flag234\n+         --    Flag17             used as  Flag38, Flag59, Flag148, Flag235\n+         --    Flag18             used as  Flag39, Flag60, Flag149, Flag236\n+         --    Pflag1             used as  Flag61, Flag62, Flag150, Flag237\n+         --    Pflag2             used as  Flag63, Flag64, Flag151, Flag238\n \n          Nkind : Node_Kind;\n          --  For a non-extended node, or the initial section of an extended\n@@ -3104,7 +3158,8 @@ package Atree is\n          --\n          --     Second entry: holds the Ekind field of the entity\n          --     Third entry:  holds 8 additional flags (Flag65-Flag72)\n-         --     Fourth entry: not currently used\n+         --     Fourth entry: holds 8 additional flags (Flag239-246)\n+         --     Fifth entry:  holds 8 additional flags (Flag247-254)\n \n          --  Now finally (on an 32-bit boundary!) comes the variant part\n \n@@ -3167,9 +3222,8 @@ package Atree is\n             --  above is used to hold additional general fields and flags\n             --  as follows:\n \n-            --    Field6-10      Holds Field24-Field28\n-            --    Field11        Holds Flag184-Flag215\n-            --    Field12        Holds Flag216-Flag247\n+            --    Field6-11      Holds Field24-Field29\n+            --    Field12        Holds Flag184-Flag215\n \n          end case;\n       end record;"}, {"sha": "6b59451617d62fd4bbf354150bf89863664bb7e5", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 80, "deletions": 109, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2010, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -215,7 +215,7 @@ struct Flag_Word3\n   Boolean      flag183\t    :  1;\n };\n \n-/* Structure used for extra flags in fifth component overlaying Field11 */\n+/* Structure used for extra flags in fifth component overlaying Field12 */\n struct Flag_Word4\n {\n   Boolean      flag184\t    :  1;\n@@ -255,46 +255,6 @@ struct Flag_Word4\n   Boolean      flag215\t    :  1;\n };\n \n-/* Structure used for extra flags in fifth component overlaying Field12 */\n-struct Flag_Word5\n-{\n-  Boolean      flag216\t    :  1;\n-  Boolean      flag217\t    :  1;\n-  Boolean      flag218\t    :  1;\n-  Boolean      flag219\t    :  1;\n-  Boolean      flag220\t    :  1;\n-  Boolean      flag221\t    :  1;\n-  Boolean      flag222\t    :  1;\n-  Boolean      flag223\t    :  1;\n-\n-  Boolean      flag224\t    :  1;\n-  Boolean      flag225\t    :  1;\n-  Boolean      flag226\t    :  1;\n-  Boolean      flag227\t    :  1;\n-  Boolean      flag228\t    :  1;\n-  Boolean      flag229\t    :  1;\n-  Boolean      flag230\t    :  1;\n-  Boolean      flag231\t    :  1;\n-\n-  Boolean      flag232\t    :  1;\n-  Boolean      flag233\t    :  1;\n-  Boolean      flag234\t    :  1;\n-  Boolean      flag235\t    :  1;\n-  Boolean      flag236\t    :  1;\n-  Boolean      flag237\t    :  1;\n-  Boolean      flag238\t    :  1;\n-  Boolean      flag239\t    :  1;\n-\n-  Boolean      flag240      :  1;\n-  Boolean      flag241\t    :  1;\n-  Boolean      flag242\t    :  1;\n-  Boolean      flag243\t    :  1;\n-  Boolean      flag244\t    :  1;\n-  Boolean      flag245\t    :  1;\n-  Boolean      flag246\t    :  1;\n-  Boolean      flag247\t    :  1;\n-};\n-\n struct Non_Extended\n {\n   Source_Ptr   sloc;\n@@ -318,15 +278,14 @@ struct Extended\n     {\n       Int      field11;\n       struct   Flag_Word3 fw3;\n-      struct   Flag_Word4 fw4;\n     } X;\n \n   union\n     {\n       Int      field12;\n       struct   Flag_Word fw;\n       struct   Flag_Word2 fw2;\n-      struct   Flag_Word5 fw5;\n+      struct   Flag_Word4 fw4;\n     } U;\n };\n \n@@ -423,6 +382,7 @@ extern Node_Id Current_Error_Node;\n #define Field26(N)    (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.field8)\n #define Field27(N)    (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.field9)\n #define Field28(N)    (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.field10)\n+#define Field29(N)    (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.field11)\n \n #define Node1(N)      Field1  (N)\n #define Node2(N)      Field2  (N)\n@@ -452,6 +412,7 @@ extern Node_Id Current_Error_Node;\n #define Node26(N)     Field26 (N)\n #define Node27(N)     Field27 (N)\n #define Node28(N)     Field28 (N)\n+#define Node29(N)     Field29 (N)\n \n #define List1(N)      Field1  (N)\n #define List2(N)      Field2  (N)\n@@ -695,68 +656,78 @@ extern Node_Id Current_Error_Node;\n #define Flag182(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].V.EX.X.fw3.flag182)\n #define Flag183(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].V.EX.X.fw3.flag183)\n \n-#define Flag184(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag184)\n-#define Flag185(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag185)\n-#define Flag186(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag186)\n-#define Flag187(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag187)\n-#define Flag188(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag188)\n-#define Flag189(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag189)\n-#define Flag190(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag190)\n-#define Flag191(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag191)\n-#define Flag192(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag192)\n-#define Flag193(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag193)\n-#define Flag194(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag194)\n-#define Flag195(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag195)\n-#define Flag196(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag196)\n-#define Flag197(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag197)\n-#define Flag198(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag198)\n-#define Flag199(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag199)\n-#define Flag200(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag200)\n-#define Flag201(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag201)\n-#define Flag202(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag202)\n-#define Flag203(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag203)\n-#define Flag204(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag204)\n-#define Flag205(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag205)\n-#define Flag206(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag206)\n-#define Flag207(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag207)\n-#define Flag208(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag208)\n-#define Flag209(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag209)\n-#define Flag210(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag210)\n-#define Flag211(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag211)\n-#define Flag212(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag212)\n-#define Flag213(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag213)\n-#define Flag214(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag214)\n-#define Flag215(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.X.fw4.flag215)\n-\n-#define Flag216(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag216)\n-#define Flag217(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag217)\n-#define Flag218(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag218)\n-#define Flag219(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag219)\n-#define Flag220(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag220)\n-#define Flag221(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag221)\n-#define Flag222(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag222)\n-#define Flag223(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag223)\n-#define Flag224(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag224)\n-#define Flag225(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag225)\n-#define Flag226(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag226)\n-#define Flag227(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag227)\n-#define Flag228(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag228)\n-#define Flag229(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag229)\n-#define Flag230(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag230)\n-#define Flag231(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag231)\n-#define Flag232(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag232)\n-#define Flag233(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag233)\n-#define Flag234(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag234)\n-#define Flag235(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag235)\n-#define Flag236(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag236)\n-#define Flag237(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag237)\n-#define Flag238(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag238)\n-#define Flag239(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag239)\n-#define Flag240(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag240)\n-#define Flag241(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag241)\n-#define Flag242(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag242)\n-#define Flag243(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag243)\n-#define Flag244(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag244)\n-#define Flag245(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag245)\n-#define Flag246(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag246)\n-#define Flag247(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw5.flag247)\n+#define Flag184(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag184)\n+#define Flag185(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag185)\n+#define Flag186(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag186)\n+#define Flag187(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag187)\n+#define Flag188(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag188)\n+#define Flag189(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag189)\n+#define Flag190(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag190)\n+#define Flag191(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag191)\n+#define Flag192(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag192)\n+#define Flag193(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag193)\n+#define Flag194(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag194)\n+#define Flag195(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag195)\n+#define Flag196(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag196)\n+#define Flag197(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag197)\n+#define Flag198(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag198)\n+#define Flag199(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag199)\n+#define Flag200(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag200)\n+#define Flag201(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag201)\n+#define Flag202(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag202)\n+#define Flag203(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag203)\n+#define Flag204(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag204)\n+#define Flag205(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag205)\n+#define Flag206(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag206)\n+#define Flag207(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag207)\n+#define Flag208(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag208)\n+#define Flag209(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag209)\n+#define Flag210(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag210)\n+#define Flag211(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag211)\n+#define Flag212(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag212)\n+#define Flag213(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag213)\n+#define Flag214(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag214)\n+#define Flag215(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].V.EX.U.fw4.flag215)\n+\n+#define Flag216(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.in_list)\n+#define Flag217(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.rewrite_sub)\n+#define Flag218(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.rewrite_ins)\n+#define Flag219(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.analyzed)\n+#define Flag220(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.c_f_s)\n+#define Flag221(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.error_posted)\n+#define Flag222(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag4)\n+#define Flag223(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag5)\n+#define Flag224(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag6)\n+#define Flag225(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag7)\n+#define Flag226(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag8)\n+#define Flag227(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag9)\n+#define Flag228(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag10)\n+#define Flag229(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag11)\n+#define Flag230(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag12)\n+#define Flag231(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag13)\n+#define Flag232(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag14)\n+#define Flag233(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag15)\n+#define Flag234(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag16)\n+#define Flag235(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag17)\n+#define Flag236(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.flag18)\n+#define Flag237(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.pflag1)\n+#define Flag238(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.K.pflag2)\n+\n+#define Flag239(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag65)\n+#define Flag240(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag66)\n+#define Flag241(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag67)\n+#define Flag242(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag68)\n+#define Flag243(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag69)\n+#define Flag244(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag70)\n+#define Flag245(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag71)\n+#define Flag246(N)     (Nodes_Ptr[(N) - First_Node_Id + 3].U.NK.flag72)\n+\n+#define Flag247(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag65)\n+#define Flag248(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag66)\n+#define Flag249(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag67)\n+#define Flag250(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag68)\n+#define Flag251(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag69)\n+#define Flag252(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag70)\n+#define Flag253(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag71)\n+#define Flag254(N)     (Nodes_Ptr[(N) - First_Node_Id + 4].U.NK.flag72)\n+"}, {"sha": "1928c94bb4b76a1cddfad0a50495d7122f6778fd", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -230,6 +230,8 @@ package body Einfo is\n    --    Extra_Formals                   Node28\n    --    Underlying_Record_View          Node28\n \n+   --    (unused)                        Node29\n+\n    ---------------------------------------------\n    -- Usage of Flags in Defining Entity Nodes --\n    ---------------------------------------------\n@@ -513,6 +515,14 @@ package body Einfo is\n    --    (unused)                        Flag200\n    --    (unused)                        Flag232\n \n+   --    (unused)                        Flag248\n+   --    (unused)                        Flag249\n+   --    (unused)                        Flag250\n+   --    (unused)                        Flag251\n+   --    (unused)                        Flag252\n+   --    (unused)                        Flag253\n+   --    (unused)                        Flag254\n+\n    -----------------------\n    -- Local subprograms --\n    -----------------------"}, {"sha": "b670d4318bcb89997357a699008ecd0d1c1c52c2", "filename": "gcc/ada/sem_aux.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_aux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_aux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aux.adb?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -585,8 +585,9 @@ package body Sem_Aux is\n       end if;\n \n       if Is_Private_Type (Btype) then\n-         --  AI05-0063 : a type derived from a limited private formal type\n-         --  is not immutably limited in a generic body.\n+\n+         --  AI05-0063: A type derived from a limited private formal type is\n+         --  not immutably limited in a generic body.\n \n          if Is_Derived_Type (Btype)\n            and then Is_Generic_Type (Etype (Btype))"}, {"sha": "145c7437246a96d7e0102b18eb6fbcd3fa804dc6", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -8795,13 +8795,20 @@ package body Sem_Ch3 is\n       --  with the reserved word 'limited' in its definition or in one of its\n       --  ancestors. (RM 3.7(10))\n       --  AI-0063 : the proper condition is that type must be immutably\n-      --  limited.\n+      --  limited, or else be a partial view.\n \n-      if Nkind (Discriminant_Type (D)) = N_Access_Definition\n-        and then not Is_Immutably_Limited_Type (Current_Scope)\n-      then\n-         Error_Msg_N\n-           (\"access discriminants allowed only for limited types\", Loc);\n+      if Nkind (Discriminant_Type (D)) = N_Access_Definition then\n+         if Is_Immutably_Limited_Type (Current_Scope)\n+           or else\n+            (Nkind (Parent (Current_Scope)) = N_Private_Type_Declaration\n+               and then Limited_Present (Parent (Current_Scope)))\n+         then\n+            null;\n+\n+         else\n+            Error_Msg_N\n+              (\"access discriminants allowed only for limited types\", Loc);\n+         end if;\n       end if;\n    end Check_Access_Discriminant_Requires_Limited;\n "}, {"sha": "6957ed277c48ac924b8af8070baad84fed4cf69a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0ae93e2ea3775ff2a3256c651ca9b285e2538cc/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e0ae93e2ea3775ff2a3256c651ca9b285e2538cc", "patch": "@@ -483,6 +483,7 @@ package body Sem_Ch6 is\n                Error_Msg_N\n                  (\"(Ada 2005) cannot copy object of a limited type \" &\n                   \"(RM-2005 6.5(5.5/2))\", Expr);\n+\n                if Is_Immutably_Limited_Type (R_Type) then\n                   Error_Msg_N\n                     (\"\\return by reference not permitted in Ada 2005\", Expr);\n@@ -4254,11 +4255,9 @@ package body Sem_Ch6 is\n          declare\n             Typ  : constant Entity_Id := Etype (Designator);\n             Utyp : constant Entity_Id := Underlying_Type (Typ);\n-\n          begin\n             if Is_Immutably_Limited_Type (Typ) then\n                Set_Returns_By_Ref (Designator);\n-\n             elsif Present (Utyp) and then CW_Or_Has_Controlled_Part (Utyp) then\n                Set_Returns_By_Ref (Designator);\n             end if;"}]}