{"sha": "b48e3948be3320071d3cd3a0894b04082eef8643", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjQ4ZTM5NDhiZTMzMjAwNzFkM2NkM2EwODk0YjA0MDgyZWVmODY0Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-07-08T09:39:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-07-08T09:39:57Z"}, "message": "re PR middle-end/61725 (__builtin_ffs(0) leads to wrong code generation)\n\n\tPR tree-optimization/61725\n\t* tree-vrp.c (extract_range_basic): Don't assume vr0 is unsigned\n\trange, use range_includes_zerop_p instead of integer_zerop on\n\tvr0->min, only use log2 of max if min is not negative.\n\n\t* gcc.dg/tree-ssa/vrp93.c: New test.\n\t* gcc.c-torture/execute/pr61725.c: New test.\n\nFrom-SVN: r212353", "tree": {"sha": "dee539372edbfbfbff7ec1bc9dc933297b8b1367", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dee539372edbfbfbff7ec1bc9dc933297b8b1367"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b48e3948be3320071d3cd3a0894b04082eef8643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e3948be3320071d3cd3a0894b04082eef8643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b48e3948be3320071d3cd3a0894b04082eef8643", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b48e3948be3320071d3cd3a0894b04082eef8643/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a59d8e8eb67086eb6df936074ef6d8fb4834bcc2"}], "stats": {"total": 72, "additions": 69, "deletions": 3}, "files": [{"sha": "c4563baf6be676731fd832d63aed895f0df1c634", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b48e3948be3320071d3cd3a0894b04082eef8643", "patch": "@@ -1,3 +1,10 @@\n+2014-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61725\n+\t* tree-vrp.c (extract_range_basic): Don't assume vr0 is unsigned\n+\trange, use range_includes_zerop_p instead of integer_zerop on\n+\tvr0->min, only use log2 of max if min is not negative.\n+\n 2014-07-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-dom.h (loop_depth_of_name): Remove."}, {"sha": "765eb9f41f3aaaf4538d411af61b11fe23646e07", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b48e3948be3320071d3cd3a0894b04082eef8643", "patch": "@@ -1,3 +1,9 @@\n+2014-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/61725\n+\t* gcc.dg/tree-ssa/vrp93.c: New test.\n+\t* gcc.c-torture/execute/pr61725.c: New test.\n+\n 2014-07-08  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-dom.h (loop_depth_of_name): Remove."}, {"sha": "0aa6dafa218796e9f1f05bca38e079f8124bc8ff", "filename": "gcc/testsuite/gcc.c-torture/execute/pr61725.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61725.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61725.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr61725.c?ref=b48e3948be3320071d3cd3a0894b04082eef8643", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-optimization/61725 */\n+\n+int\n+main ()\n+{\n+  int x;\n+  for (x = -128; x <= 128; x++)\n+    {\n+      int a = __builtin_ffs (x);\n+      if (x == 0 && a != 0)\n+        __builtin_abort ();\n+    }\n+  return 0;\n+}"}, {"sha": "d78c399c3e1b9f2aea78f665db884fa9c27dcd1d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp93.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp93.c?ref=b48e3948be3320071d3cd3a0894b04082eef8643", "patch": "@@ -0,0 +1,36 @@\n+/* PR target/29776 */\n+/* PR tree-optimization/61725 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+/* { dg-final { scan-tree-dump-not \"link_error\" \"vrp1\"} } */\n+/* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n+\n+#define A(fn, arg, min, max) \\\n+  if (__builtin_##fn (arg) < min || __builtin_##fn (arg) > max) \\\n+    link_error ();\n+#define B(fn, min, max) \\\n+  A (fn, a, min, max) A (fn##l, b, min, max) A (fn##ll, c, min, max)\n+#define C(fn, min, sub) \\\n+  A (fn, a, min, ((int) sizeof (a) * __CHAR_BIT__ - sub)) \\\n+  A (fn##l, b, min, ((int) sizeof (b) * __CHAR_BIT__ - sub)) \\\n+  A (fn##ll, c, min, ((int) sizeof (c) * __CHAR_BIT__ - sub))\n+\n+extern void link_error (void);\n+\n+unsigned int d;\n+unsigned long e;\n+unsigned long long f;\n+\n+void\n+foo (int a, long b, long long c)\n+{\n+  C (ffs, 0, 0)\n+  a &= 63; b &= 63; c &= 63;\n+  B (ffs, 0, 6)\n+  a++; b++; c++;\n+  B (ffs, 1, 7)\n+  a -= 2; b -= 2; c -= 2;\n+  C (ffs, 0, 0)\n+  a -= 63; b -= 63; c -= 63;\n+  C (ffs, 1, 0)\n+}"}, {"sha": "5fc135146a6e2afd43c803ae07265cee8bb4dabf", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b48e3948be3320071d3cd3a0894b04082eef8643/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b48e3948be3320071d3cd3a0894b04082eef8643", "patch": "@@ -3536,15 +3536,18 @@ extract_range_basic (value_range_t *vr, gimple stmt)\n \t      /* If arg is non-zero, then ffs or popcount\n \t\t are non-zero.  */\n \t      if (((vr0->type == VR_RANGE\n-\t\t    && integer_nonzerop (vr0->min))\n+\t\t    && range_includes_zero_p (vr0->min, vr0->max) == 0)\n \t\t   || (vr0->type == VR_ANTI_RANGE\n-\t\t       && integer_zerop (vr0->min)))\n-\t\t  && !is_overflow_infinity (vr0->min))\n+\t\t       && range_includes_zero_p (vr0->min, vr0->max) == 1))\n+\t\t  && !is_overflow_infinity (vr0->min)\n+\t\t  && !is_overflow_infinity (vr0->max))\n \t\tmini = 1;\n \t      /* If some high bits are known to be zero,\n \t\t we can decrease the maximum.  */\n \t      if (vr0->type == VR_RANGE\n \t\t  && TREE_CODE (vr0->max) == INTEGER_CST\n+\t\t  && !operand_less_p (vr0->min,\n+\t\t\t\t      build_zero_cst (TREE_TYPE (vr0->min)))\n \t\t  && !is_overflow_infinity (vr0->max))\n \t\tmaxi = tree_floor_log2 (vr0->max) + 1;\n \t    }"}]}