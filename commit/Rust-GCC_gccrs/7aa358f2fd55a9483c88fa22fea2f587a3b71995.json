{"sha": "7aa358f2fd55a9483c88fa22fea2f587a3b71995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FhMzU4ZjJmZDU1YTk0ODNjODhmYTIyZmVhMmY1ODdhM2I3MTk5NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2014-12-30T14:49:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-12-30T14:49:18Z"}, "message": "i386.c (ix86_legitimize_address): Use std::swap.\n\n\t* config/i386/i386.c (ix86_legitimize_address): Use std::swap.\n\t(ix86_split_fp_branch): Ditto.\n\t(ix86_expand_int_movcc): Ditto.\n\t(ix86_expand_sse_compare): Ditto.\n\nFrom-SVN: r219109", "tree": {"sha": "3d6e8883b25f062c63d82055dd7f1fa5646acdc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d6e8883b25f062c63d82055dd7f1fa5646acdc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7aa358f2fd55a9483c88fa22fea2f587a3b71995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa358f2fd55a9483c88fa22fea2f587a3b71995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa358f2fd55a9483c88fa22fea2f587a3b71995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa358f2fd55a9483c88fa22fea2f587a3b71995/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bc9b4a928547cc7fead6e33d388d8a0442cc0f10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9b4a928547cc7fead6e33d388d8a0442cc0f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9b4a928547cc7fead6e33d388d8a0442cc0f10"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "427ceeaf1d837e4598f4129b21cad5dad9feaa32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa358f2fd55a9483c88fa22fea2f587a3b71995/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa358f2fd55a9483c88fa22fea2f587a3b71995/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7aa358f2fd55a9483c88fa22fea2f587a3b71995", "patch": "@@ -1,3 +1,10 @@\n+2014-12-30  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_legitimize_address): Use std::swap.\n+\t(ix86_split_fp_branch): Ditto.\n+\t(ix86_expand_int_movcc): Ditto.\n+\t(ix86_expand_sse_compare): Ditto.\n+\n 2014-12-30  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline-analysis.c (edge_set_predicate): Reset size/time when"}, {"sha": "e0b558949c908cea8e3379c65a28f30ef2e21bb5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7aa358f2fd55a9483c88fa22fea2f587a3b71995/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7aa358f2fd55a9483c88fa22fea2f587a3b71995/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7aa358f2fd55a9483c88fa22fea2f587a3b71995", "patch": "@@ -14362,9 +14362,7 @@ ix86_legitimize_address (rtx x, rtx, machine_mode mode)\n       /* Put multiply first if it isn't already.  */\n       if (GET_CODE (XEXP (x, 1)) == MULT)\n \t{\n-\t  rtx tmp = XEXP (x, 0);\n-\t  XEXP (x, 0) = XEXP (x, 1);\n-\t  XEXP (x, 1) = tmp;\n+\t  std::swap (XEXP (x, 0), XEXP (x, 1));\n \t  changed = 1;\n \t}\n \n@@ -20497,10 +20495,8 @@ ix86_split_fp_branch (enum rtx_code code, rtx op1, rtx op2,\n \n   if (target2 != pc_rtx)\n     {\n-      rtx tmp = target2;\n+      std::swap (target1, target2);\n       code = reverse_condition_maybe_unordered (code);\n-      target2 = target1;\n-      target1 = tmp;\n     }\n \n   condition = ix86_expand_fp_compare (code, op1, op2,\n@@ -20615,7 +20611,7 @@ ix86_expand_carry_flag_compare (enum rtx_code code, rtx op0, rtx op1, rtx *pop)\n \t}\n       else\n \t{\n-\t  std::swap (op1, op0);\n+\t  std::swap (op0, op1);\n \t  code = (code == GTU ? LTU : GEU);\n \t}\n       break;\n@@ -20720,9 +20716,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t      /* To simplify rest of code, restrict to the GEU case.  */\n \t      if (compare_code == LTU)\n \t\t{\n-\t\t  HOST_WIDE_INT tmp = ct;\n-\t\t  ct = cf;\n-\t\t  cf = tmp;\n+\t\t  std::swap (ct, cf);\n \t\t  compare_code = reverse_condition (compare_code);\n \t\t  code = reverse_condition (code);\n \t\t}\n@@ -20754,9 +20748,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t\tcode = reverse_condition (code);\n \t      else\n \t\t{\n-\t\t  HOST_WIDE_INT tmp = ct;\n-\t\t  ct = cf;\n-\t\t  cf = tmp;\n+\t\t  std::swap (ct, cf);\n \t\t  diff = ct - cf;\n \t\t}\n \t      tmp = emit_store_flag (tmp, code, op0, op1, VOIDmode, 0, -1);\n@@ -21041,7 +21033,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t  compare_code = LT;\n \t\t}\n \t      else\n-\t\tstd::swap (cf, ct);\n+\t\tstd::swap (ct, cf);\n \n \t      out = emit_store_flag (out, code, op0, op1, VOIDmode, 0, -1);\n \t    }\n@@ -36036,12 +36028,7 @@ ix86_expand_sse_compare (const struct builtin_description *d,\n   /* Swap operands if we have a comparison that isn't available in\n      hardware.  */\n   if (swap)\n-    {\n-      rtx tmp = gen_reg_rtx (mode1);\n-      emit_move_insn (tmp, op1);\n-      op1 = op0;\n-      op0 = tmp;\n-    }\n+    std::swap (op0, op1);\n \n   if (optimize || !target\n       || GET_MODE (target) != tmode\n@@ -36086,7 +36073,7 @@ ix86_expand_sse_comi (const struct builtin_description *d, tree exp,\n   /* Swap operands if we have a comparison that isn't available in\n      hardware.  */\n   if (d->flag & BUILTIN_DESC_SWAP_OPERANDS)\n-    std::swap (op1, op0);\n+    std::swap (op0, op1);\n \n   target = gen_reg_rtx (SImode);\n   emit_move_insn (target, const0_rtx);"}]}