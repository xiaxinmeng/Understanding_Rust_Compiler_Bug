{"sha": "3f80e6acb17b52b491c82a472828ae727f00db72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4MGU2YWNiMTdiNTJiNDkxYzgyYTQ3MjgyOGFlNzI3ZjAwZGI3Mg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-09-19T03:26:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-09-19T03:26:11Z"}, "message": "Makefile.in (c-common.o): Depend on diagnostic.h.\n\n\t* Makefile.in (c-common.o): Depend on diagnostic.h.\n\n\t* c-common.c: Include diagnostic.h.\n\t(tfaff): Delete.\n\t(status_warning): New function.\n\t(check_format_info, maybe_read_dollar_number, check_format_types,\n\tfinish_dollar_format_checking, check_function_format): Accept a\n\t`status' parameter.  All callers changed.\n\n\t* c-common.h (check_function_format): Accept a `status' parameter.\n\n\t* c-typeck.c: Update call to `check_function_format'.\n\ncp:\n\t* cp-tree.h (check_function_format): Accept a `status' parameter.\n\n\t* call.c, typeck.c: Updates calls to `check_function_format'.\n\nFrom-SVN: r36524", "tree": {"sha": "bea5d273a641ed7dce8b14e7877a7f9c20e1ab85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea5d273a641ed7dce8b14e7877a7f9c20e1ab85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f80e6acb17b52b491c82a472828ae727f00db72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f80e6acb17b52b491c82a472828ae727f00db72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f80e6acb17b52b491c82a472828ae727f00db72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f80e6acb17b52b491c82a472828ae727f00db72/comments", "author": null, "committer": null, "parents": [{"sha": "cfbd829cca78f59b18cd8d146f5ed654c5cea73e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbd829cca78f59b18cd8d146f5ed654c5cea73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbd829cca78f59b18cd8d146f5ed654c5cea73e"}], "stats": {"total": 234, "additions": 145, "deletions": 89}, "files": [{"sha": "29ba53e461b7032edccde0b026bb280dbc2b131d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -1,3 +1,18 @@\n+2000-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (c-common.o): Depend on diagnostic.h.\n+\n+\t* c-common.c: Include diagnostic.h.\n+\t(tfaff): Delete.\n+\t(status_warning): New function.\n+\t(check_format_info, maybe_read_dollar_number, check_format_types,\n+\tfinish_dollar_format_checking, check_function_format): Accept a\n+\t`status' parameter.  All callers changed.\n+\n+\t* c-common.h (check_function_format): Accept a `status' parameter.\n+\n+\t* c-typeck.c: Update call to `check_function_format'.\n+\n 2000-09-18  Richard Henderson  <rth@cygnus.com>\n \n \t* c-decl.c (c_expand_body): Call mark_varargs before"}, {"sha": "f090996cb3f09e8b8868bc669543cfe84e30a84c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -1162,7 +1162,7 @@ s-under: $(GCC_PASSES)\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H)\n+\t$(EXPR_H) diagnostic.h\n \n c-semantics.o : c-semantics.c $(CONFIG_H) system.h $(TREE_H) $(C_TREE_H) \\\n \tc-lex.h flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\"}, {"sha": "5ede422d311d7e91d95ccdf07f25b5eac6d4e798", "filename": "gcc/c-common.c", "status": "modified", "additions": 118, "deletions": 83, "changes": 201, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-common.h\"\n #include \"tm_p.h\"\n #include \"intl.h\"\n+#include \"diagnostic.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -187,7 +188,6 @@ typedef struct\n   int needs_warning;\n   tree if_stmt;\n } if_elt;\n-static void tfaff\t\t\tPARAMS ((void));\n \n static if_elt *if_stack;\n \n@@ -1535,14 +1535,16 @@ typedef struct international_format_info\n \n static international_format_info *international_format_list = NULL;\n \n-static void check_format_info\tPARAMS ((function_format_info *, tree));\n+static void check_format_info\tPARAMS ((int *, function_format_info *, tree));\n+static void status_warning PARAMS ((int *, const char *, ...))\n+     ATTRIBUTE_PRINTF_2;\n \n static void init_dollar_format_checking\t\tPARAMS ((int, tree));\n-static int maybe_read_dollar_number\t\tPARAMS ((const char **, int,\n+static int maybe_read_dollar_number\t\tPARAMS ((int *, const char **, int,\n \t\t\t\t\t\t\t tree, tree *));\n-static void finish_dollar_format_checking\tPARAMS ((void));\n+static void finish_dollar_format_checking\tPARAMS ((int *));\n \n-static void check_format_types\tPARAMS ((format_wanted_type *));\n+static void check_format_types\tPARAMS ((int *, format_wanted_type *));\n \n /* Initialize the table of functions to perform format checking on.\n    The ISO C functions are always checked (whether <stdio.h> is\n@@ -1686,12 +1688,6 @@ record_international_format (name, assembler_name, format_num)\n \n   info->format_num = format_num;\n }\n-\n-static void\n-tfaff ()\n-{\n-  warning (\"too few arguments for format\");\n-}\n \f\n /* Check the argument list of a call to printf, scanf, etc.\n    NAME is the function identifier.\n@@ -1700,7 +1696,8 @@ tfaff ()\n    PARAMS is the list of argument values.  */\n \n void\n-check_function_format (name, assembler_name, params)\n+check_function_format (status, name, assembler_name, params)\n+     int *status;\n      tree name;\n      tree assembler_name;\n      tree params;\n@@ -1715,12 +1712,46 @@ check_function_format (name, assembler_name, params)\n \t  : (info->name == name))\n \t{\n \t  /* Yup; check it.  */\n-\t  check_format_info (info, params);\n+\t  check_format_info (status, info, params);\n \t  break;\n \t}\n     }\n }\n \n+/* This function replaces `warning' inside the printf format checking\n+   functions.  If the `status' parameter is non-NULL, then it is\n+   dereferenced and set to 1 whenever a warning is caught.  Otherwise\n+   it warns as usual by replicating the innards of the warning\n+   function from diagnostic.c.  */\n+static void\n+status_warning VPARAMS ((int *status, const char *msgid, ...))\n+{\n+#ifndef ANSI_PROTOTYPES\n+  int *status;\n+  const char *msgid;\n+#endif\n+  va_list ap;\n+  diagnostic_context dc;\n+\n+  if (status)\n+    *status = 1;\n+  else\n+    {\n+      VA_START (ap, msgid);\n+\n+#ifndef ANSI_PROTOTYPES\n+      status = va_arg (ap, int *);\n+      msgid = va_arg (ap, const char *);\n+#endif\n+\n+      /* This duplicates the warning function behavior.  */\n+      set_diagnostic_context\n+\t(&dc, msgid, &ap, input_filename, lineno, /* warn = */ 1);\n+      report_diagnostic (&dc);\n+\n+      va_end (ap);\n+    }\n+}\n \n /* Variables used by the checking of $ operand number formats.  */\n static char *dollar_arguments_used = NULL;\n@@ -1775,7 +1806,8 @@ init_dollar_format_checking (first_arg_num, params)\n    a $ format is found, *FORMAT is updated to point just after it.  */\n \n static int\n-maybe_read_dollar_number (format, dollar_needed, params, param_ptr)\n+maybe_read_dollar_number (status, format, dollar_needed, params, param_ptr)\n+     int *status;\n      const char **format;\n      int dollar_needed;\n      tree params;\n@@ -1788,7 +1820,7 @@ maybe_read_dollar_number (format, dollar_needed, params, param_ptr)\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (\"missing $ operand number in format\");\n+\t  status_warning (status, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1809,7 +1841,7 @@ maybe_read_dollar_number (format, dollar_needed, params, param_ptr)\n     {\n       if (dollar_needed)\n \t{\n-\t  warning (\"missing $ operand number in format\");\n+\t  status_warning (status, \"missing $ operand number in format\");\n \t  return -1;\n \t}\n       else\n@@ -1818,13 +1850,13 @@ maybe_read_dollar_number (format, dollar_needed, params, param_ptr)\n   *format = fcp + 1;\n   if (pedantic && !dollar_format_warned)\n     {\n-      warning (\"ISO C does not support %%n$ operand number formats\");\n+      status_warning (status, \"ISO C does not support %%n$ operand number formats\");\n       dollar_format_warned = 1;\n     }\n   if (overflow_flag || argnum == 0\n       || (dollar_first_arg_num && argnum > dollar_arguments_count))\n     {\n-      warning (\"operand number out of range in format\");\n+      status_warning (status, \"operand number out of range in format\");\n       return -1;\n     }\n   if (argnum > dollar_max_arg_used)\n@@ -1870,17 +1902,18 @@ maybe_read_dollar_number (format, dollar_needed, params, param_ptr)\n    here.  */\n \n static void\n-finish_dollar_format_checking ()\n+finish_dollar_format_checking (status)\n+     int *status;\n {\n   int i;\n   for (i = 0; i < dollar_max_arg_used; i++)\n     {\n       if (!dollar_arguments_used[i])\n-\twarning (\"format argument %d unused before used argument %d in $-style format\",\n+\tstatus_warning (status, \"format argument %d unused before used argument %d in $-style format\",\n \t\t i + 1, dollar_max_arg_used);\n     }\n   if (dollar_first_arg_num && dollar_max_arg_used < dollar_arguments_count)\n-    warning (\"unused arguments in $-style format\");\n+    status_warning (status, \"unused arguments in $-style format\");\n }\n \n \n@@ -1889,7 +1922,8 @@ finish_dollar_format_checking ()\n    PARAMS is the list of argument values.  */\n \n static void\n-check_format_info (info, params)\n+check_format_info (status, info, params)\n+     int *status;\n      function_format_info *info;\n      tree params;\n {\n@@ -1976,7 +2010,7 @@ check_format_info (info, params)\n \n   if (integer_zerop (format_tree))\n     {\n-      warning (\"null format string\");\n+      status_warning (status, \"null format string\");\n       return;\n     }\n   if (TREE_CODE (format_tree) != ADDR_EXPR)\n@@ -1987,7 +2021,7 @@ check_format_info (info, params)\n \t string.  These functions typically are declared with\n \t first_arg_num == 0, so avoid warning in those cases.  */\n       if (info->first_arg_num != 0 && warn_format > 1)\n-\twarning (\"format not a string literal, argument types not checked\");\n+\tstatus_warning (status, \"format not a string literal, argument types not checked\");\n       return;\n     }\n   format_tree = TREE_OPERAND (format_tree, 0);\n@@ -1999,16 +2033,16 @@ check_format_info (info, params)\n \t string.  These functions typically are declared with\n \t first_arg_num == 0, so avoid warning in those cases.  */\n       if (info->first_arg_num != 0 && warn_format > 1)\n-\twarning (\"format not a string literal, argument types not checked\");\n+\tstatus_warning (status, \"format not a string literal, argument types not checked\");\n       return;\n     }\n   format_chars = TREE_STRING_POINTER (format_tree);\n   format_length = TREE_STRING_LENGTH (format_tree);\n   if (format_length <= 1)\n-    warning (\"zero-length format string\");\n+    status_warning (status, \"zero-length format string\");\n   if (format_chars[--format_length] != 0)\n     {\n-      warning (\"unterminated format string\");\n+      status_warning (status, \"unterminated format string\");\n       return;\n     }\n   /* Skip to first argument to check.  */\n@@ -2031,19 +2065,19 @@ check_format_info (info, params)\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - TREE_STRING_POINTER (format_tree) != format_length)\n-\t    warning (\"embedded `\\\\0' in format\");\n+\t    status_warning (status, \"embedded `\\\\0' in format\");\n \t  if (info->first_arg_num != 0 && params != 0\n \t      && has_operand_number <= 0)\n-\t    warning (\"too many arguments for format\");\n+\t    status_warning (status, \"too many arguments for format\");\n \t  if (has_operand_number > 0)\n-\t    finish_dollar_format_checking ();\n+\t    finish_dollar_format_checking (status);\n \t  return;\n \t}\n       if (*format_chars++ != '%')\n \tcontinue;\n       if (*format_chars == 0)\n \t{\n-\t  warning (\"spurious trailing `%%' in format\");\n+\t  status_warning (status, \"spurious trailing `%%' in format\");\n \t  continue;\n \t}\n       if (*format_chars == '%')\n@@ -2064,7 +2098,7 @@ check_format_info (info, params)\n \t  else if (has_operand_number != 0)\n \t    {\n \t      int opnum;\n-\t      opnum = maybe_read_dollar_number (&format_chars,\n+\t      opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\thas_operand_number == 1,\n \t\t\t\t\t\tfirst_fillin_param,\n \t\t\t\t\t\t&main_arg_params);\n@@ -2086,18 +2120,18 @@ check_format_info (info, params)\n \t      ++format_chars;\n \t    }\n \t  if (wide && !non_zero_width_char)\n-\t    warning (\"zero width in scanf format\");\n+\t    status_warning (status, \"zero width in scanf format\");\n \t}\n       else if (info->format_type == strftime_format_type)\n         {\n \t  while (*format_chars != 0 && index (\"_-0^#\", *format_chars) != 0)\n \t    {\n \t      if (pedantic)\n-\t\twarning (\"ISO C does not support the strftime `%c' flag\",\n+\t\tstatus_warning (status, \"ISO C does not support the strftime `%c' flag\",\n \t\t\t *format_chars);\n \t      if (index (flag_chars, *format_chars) != 0)\n \t\t{\n-\t\t  warning (\"repeated `%c' flag in format\",\n+\t\t  status_warning (status, \"repeated `%c' flag in format\",\n \t\t\t   *format_chars);\n \t\t  ++format_chars;\n \t\t}\n@@ -2114,15 +2148,15 @@ check_format_info (info, params)\n               ++format_chars;\n \t    }\n \t  if (wide && pedantic)\n-\t    warning (\"ISO C does not support strftime format width\");\n+\t    status_warning (status, \"ISO C does not support strftime format width\");\n \t  if (*format_chars == 'E' || *format_chars == 'O')\n \t    {\n \t      i = strlen (flag_chars);\n \t      flag_chars[i++] = *format_chars++;\n \t      flag_chars[i] = 0;\n \t      if (*format_chars == 'E' || *format_chars == 'O')\n \t        {\n-\t\t  warning (\"multiple E/O modifiers in format\");\n+\t\t  status_warning (status, \"multiple E/O modifiers in format\");\n \t\t  while (*format_chars == 'E' || *format_chars == 'O')\n \t\t    ++format_chars;\n \t\t}\n@@ -2133,7 +2167,7 @@ check_format_info (info, params)\n \t  if (has_operand_number != 0)\n \t    {\n \t      int opnum;\n-\t      opnum = maybe_read_dollar_number (&format_chars,\n+\t      opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\t0, first_fillin_param,\n \t\t\t\t\t\t&main_arg_params);\n \t      if (opnum == -1)\n@@ -2148,7 +2182,7 @@ check_format_info (info, params)\n \t  while (*format_chars != 0 && index (\" +#0-'I\", *format_chars) != 0)\n \t    {\n \t      if (index (flag_chars, *format_chars) != 0)\n-\t\twarning (\"repeated `%c' flag in format\", *format_chars++);\n+\t\tstatus_warning (status, \"repeated `%c' flag in format\", *format_chars++);\n \t      else\n \t\t{\n \t\t  i = strlen (flag_chars);\n@@ -2160,16 +2194,16 @@ check_format_info (info, params)\n \t     the space flag will be ignored.\"  */\n \t  if (index (flag_chars, ' ') != 0\n \t      && index (flag_chars, '+') != 0)\n-\t    warning (\"use of both ` ' and `+' flags in format\");\n+\t    status_warning (status, \"use of both ` ' and `+' flags in format\");\n \t  /* \"If the 0 and - flags both appear,\n \t     the 0 flag will be ignored.\"  */\n \t  if (index (flag_chars, '0') != 0\n \t      && index (flag_chars, '-') != 0)\n-\t    warning (\"use of both `0' and `-' flags in format\");\n+\t    status_warning (status, \"use of both `0' and `-' flags in format\");\n \t  if (index (flag_chars, '\\'') && pedantic)\n-\t    warning (\"ISO C does not support the `'' format flag\");\n+\t    status_warning (status, \"ISO C does not support the `'' format flag\");\n \t  if (index (flag_chars, 'I') && pedantic)\n-\t    warning (\"ISO C does not support the `I' format flag\");\n+\t    status_warning (status, \"ISO C does not support the `I' format flag\");\n \t  if (*format_chars == '*')\n \t    {\n \t      wide = TRUE;\n@@ -2178,13 +2212,13 @@ check_format_info (info, params)\n \t      ++format_chars;\n \t      if (params == 0)\n \t\t{\n-\t\t  tfaff ();\n+\t\t  status_warning (status, \"too few arguments for format\");\n \t\t  return;\n \t\t}\n \t      if (has_operand_number != 0)\n \t\t{\n \t\t  int opnum;\n-\t\t  opnum = maybe_read_dollar_number (&format_chars,\n+\t\t  opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\t    has_operand_number == 1,\n \t\t\t\t\t\t    first_fillin_param,\n \t\t\t\t\t\t    &params);\n@@ -2242,7 +2276,7 @@ check_format_info (info, params)\n \t\t  if (has_operand_number != 0)\n \t\t    {\n \t\t      int opnum;\n-\t\t      opnum = maybe_read_dollar_number (&format_chars,\n+\t\t      opnum = maybe_read_dollar_number (status, &format_chars,\n \t\t\t\t\t\t\thas_operand_number == 1,\n \t\t\t\t\t\t\tfirst_fillin_param,\n \t\t\t\t\t\t\t&params);\n@@ -2260,7 +2294,7 @@ check_format_info (info, params)\n \t\t    {\n \t\t      if (params == 0)\n \t\t        {\n-\t\t\t  tfaff ();\n+\t\t\t  status_warning (status, \"too few arguments for format\");\n \t\t\t  return;\n \t\t\t}\n \t\t      cur_param = TREE_VALUE (params);\n@@ -2327,11 +2361,11 @@ check_format_info (info, params)\n \t    {\n \t      /* Warn if the length modifier is non-standard.  */\n \t      if (length_chars_std == STD_EXT)\n-\t\twarning (\"ISO C does not support the `%s' %s length modifier\",\n+\t\tstatus_warning (status, \"ISO C does not support the `%s' %s length modifier\",\n \t\t\t length_chars, fki->name);\n \t      else if ((length_chars_std == STD_C99 && !flag_isoc99)\n \t\t       || (length_chars_std == STD_C94 && !flag_isoc94))\n-\t\twarning (\"ISO C89 does not support the `%s' %s length modifier\",\n+\t\tstatus_warning (status, \"ISO C89 does not support the `%s' %s length modifier\",\n \t\t\t length_chars, fki->name);\n \t    }\n \t  if (*format_chars == 'a' && info->format_type == scanf_format_type\n@@ -2346,13 +2380,13 @@ check_format_info (info, params)\n \t\t}\n \t    }\n \t  if (suppressed && length_chars_val != FMT_LEN_none)\n-\t    warning (\"use of `*' and `%s' together in format\", length_chars);\n+\t    status_warning (status, \"use of `*' and `%s' together in format\", length_chars);\n \t}\n       format_char = *format_chars;\n       if (format_char == 0\n \t  || (info->format_type != strftime_format_type && format_char == '%'))\n \t{\n-\t  warning (\"conversion lacks type at end of format\");\n+\t  status_warning (status, \"conversion lacks type at end of format\");\n \t  continue;\n \t}\n       format_chars++;\n@@ -2363,51 +2397,51 @@ check_format_info (info, params)\n       if (fci->format_chars == 0)\n \t{\n           if (ISGRAPH(format_char))\n-\t    warning (\"unknown conversion type character `%c' in format\",\n+\t    status_warning (status, \"unknown conversion type character `%c' in format\",\n \t\t     format_char);\n \t  else\n-\t    warning (\"unknown conversion type character 0x%x in format\",\n+\t    status_warning (status, \"unknown conversion type character 0x%x in format\",\n \t\t     format_char);\n \t  continue;\n \t}\n       if (pedantic)\n \t{\n \t  if (fci->std == STD_EXT)\n-\t    warning (\"ISO C does not support the `%%%c' %s format\",\n+\t    status_warning (status, \"ISO C does not support the `%%%c' %s format\",\n \t\t     format_char, fki->name);\n \t  else if ((fci->std == STD_C99 && !flag_isoc99)\n \t\t   || (fci->std == STD_C94 && !flag_isoc94))\n-\t    warning (\"ISO C89 does not support the `%%%c' %s format\",\n+\t    status_warning (status, \"ISO C89 does not support the `%%%c' %s format\",\n \t\t     format_char, fki->name);\n \t  if (index (flag_chars, 'O') != 0)\n \t    {\n \t      if (index (fci->flag_chars, 'o') != 0)\n-\t\twarning (\"ISO C does not support `%%O%c'\", format_char);\n+\t\tstatus_warning (status, \"ISO C does not support `%%O%c'\", format_char);\n \t      else if (!flag_isoc99 && index (fci->flag_chars, 'O') != 0)\n-\t\twarning (\"ISO C89 does not support `%%O%c'\", format_char);\n+\t\tstatus_warning (status, \"ISO C89 does not support `%%O%c'\", format_char);\n \t    }\n \t  if (!flag_isoc99 && index (flag_chars, 'E'))\n-\t    warning (\"ISO C89 does not support `%%E%c'\", format_char);\n+\t    status_warning (status, \"ISO C89 does not support `%%E%c'\", format_char);\n \t}\n       if (wide && index (fci->flag_chars, 'w') == 0)\n-\twarning (\"width used with `%c' format\", format_char);\n+\tstatus_warning (status, \"width used with `%c' format\", format_char);\n       if (index (fci->flag_chars, '3') != 0\n \t  || (format_char == 'y' && index (flag_chars, 'E')))\n-\twarning (\"`%%%c' yields only last 2 digits of year in some locales\",\n+\tstatus_warning (status, \"`%%%c' yields only last 2 digits of year in some locales\",\n \t\t format_char);\n       else if (index (fci->flag_chars, '2') != 0)\n-\twarning (\"`%%%c' yields only last 2 digits of year\", format_char);\n+\tstatus_warning (status, \"`%%%c' yields only last 2 digits of year\", format_char);\n       if (precise && index (fci->flag_chars, 'p') == 0)\n-\twarning (\"precision used with `%c' format\", format_char);\n+\tstatus_warning (status, \"precision used with `%c' format\", format_char);\n       if (aflag && index (fci->flag_chars, 'a') == 0)\n \t{\n-\t  warning (\"`a' flag used with `%c' format\", format_char);\n+\t  status_warning (status, \"`a' flag used with `%c' format\", format_char);\n \t  /* To simplify the following code.  */\n \t  aflag = 0;\n \t}\n       /* The a flag is a GNU extension.  */\n       else if (pedantic && aflag)\n-\twarning (\"ISO C does not support the `a' flag\");\n+\tstatus_warning (status, \"ISO C does not support the `a' flag\");\n       if (info->format_type == scanf_format_type && format_char == '[')\n \t{\n \t  /* Skip over scan set, in case it happens to have '%' in it.  */\n@@ -2421,18 +2455,18 @@ check_format_info (info, params)\n \t    ++format_chars;\n \t  if (*format_chars != ']')\n \t    /* The end of the format string was reached.  */\n-\t    warning (\"no closing `]' for `%%[' format\");\n+\t    status_warning (status, \"no closing `]' for `%%[' format\");\n \t}\n       if (suppressed)\n \t{\n \t  if (index (fci->flag_chars, '*') == 0)\n-\t    warning (\"suppression of `%c' conversion in format\", format_char);\n+\t    status_warning (status, \"suppression of `%c' conversion in format\", format_char);\n \t  continue;\n \t}\n       for (i = 0; flag_chars[i] != 0; ++i)\n \t{\n \t  if (index (fci->flag_chars, flag_chars[i]) == 0)\n-\t    warning (\"flag `%c' used with type `%c'\",\n+\t    status_warning (status, \"flag `%c' used with type `%c'\",\n \t\t     flag_chars[i], format_char);\n \t}\n       if (info->format_type == strftime_format_type)\n@@ -2441,22 +2475,22 @@ check_format_info (info, params)\n \t  && (format_char == 'd' || format_char == 'i'\n \t      || format_char == 'o' || format_char == 'u'\n \t      || format_char == 'x' || format_char == 'X'))\n-\twarning (\"`0' flag ignored with precision specifier and `%c' format\",\n+\tstatus_warning (status, \"`0' flag ignored with precision specifier and `%c' format\",\n \t\t format_char);\n       wanted_type = (fci->types[length_chars_val].type\n \t\t     ? *fci->types[length_chars_val].type : 0);\n       wanted_type_name = fci->types[length_chars_val].name;\n       wanted_type_std = fci->types[length_chars_val].std;\n       if (wanted_type == 0)\n \t{\n-\t  warning (\"use of `%s' length modifier with `%c' type character\",\n+\t  status_warning (status, \"use of `%s' length modifier with `%c' type character\",\n \t\t   length_chars, format_char);\n \t  /* Heuristic: skip one argument when an invalid length/type\n \t     combination is encountered.  */\n \t  arg_num++;\n \t  if (params == 0)\n \t    {\n-\t      tfaff ();\n+\t      status_warning (status, \"too few arguments for format\");\n \t      return;\n \t    }\n \t  params = TREE_CHAIN (params);\n@@ -2470,11 +2504,11 @@ check_format_info (info, params)\n \t       && wanted_type_std > fci->std)\n \t{\n \t  if (wanted_type_std == STD_EXT)\n-\t    warning (\"ISO C does not support the `%%%s%c' %s format\",\n+\t    status_warning (status, \"ISO C does not support the `%%%s%c' %s format\",\n \t\t     length_chars, format_char, fki->name);\n \t  else if ((wanted_type_std == STD_C99 && !flag_isoc99)\n \t\t   || (wanted_type_std == STD_C94 && !flag_isoc94))\n-\t    warning (\"ISO C89 does not support the `%%%s%c' %s format\",\n+\t    status_warning (status, \"ISO C89 does not support the `%%%s%c' %s format\",\n \t\t     length_chars, format_char, fki->name);\n \t}\n \n@@ -2484,7 +2518,7 @@ check_format_info (info, params)\n       if (fci->pointer_count == 0 && wanted_type == void_type_node)\n \t{\n \t  if (main_arg_num != 0)\n-\t    warning (\"operand number specified for format taking no argument\");\n+\t    status_warning (status, \"operand number specified for format taking no argument\");\n \t}\n       else\n \t{\n@@ -2498,14 +2532,14 @@ check_format_info (info, params)\n \t      ++arg_num;\n \t      if (has_operand_number > 0)\n \t\t{\n-\t\t  warning (\"missing $ operand number in format\");\n+\t\t  status_warning (status, \"missing $ operand number in format\");\n \t\t  return;\n \t\t}\n \t      else\n \t\thas_operand_number = 0;\n \t      if (params == 0)\n \t\t{\n-\t\t  tfaff ();\n+\t\t  status_warning (status, \"too few arguments for format\");\n \t\t  return;\n \t\t}\n \t    }\n@@ -2532,7 +2566,7 @@ check_format_info (info, params)\n \t}\n \n       if (first_wanted_type != 0)\n-\tcheck_format_types (first_wanted_type);\n+\tcheck_format_types (status, first_wanted_type);\n \n     }\n }\n@@ -2541,7 +2575,8 @@ check_format_info (info, params)\n /* Check the argument types from a single format conversion (possibly\n    including width and precision arguments).  */\n static void\n-check_format_types (types)\n+check_format_types (status, types)\n+     int *status;\n      format_wanted_type *types;\n {\n   for (; types != 0; types = types->next)\n@@ -2596,7 +2631,7 @@ check_format_types (types)\n \t\t\t  && (TREE_CODE_CLASS (TREE_CODE (cur_param)) == 'c'\n \t\t\t      || (DECL_P (cur_param)\n \t\t\t\t  && TREE_READONLY (cur_param))))))\n-\t\twarning (\"writing into constant object (arg %d)\", arg_num);\n+\t\tstatus_warning (status, \"writing into constant object (arg %d)\", arg_num);\n \n \t      /* If there are extra type qualifiers beyond the first\n \t\t indirection, then this makes the types technically\n@@ -2606,16 +2641,16 @@ check_format_types (types)\n \t\t  && (TYPE_READONLY (cur_type)\n \t\t      || TYPE_VOLATILE (cur_type)\n \t\t      || TYPE_RESTRICT (cur_type)))\n-\t\twarning (\"extra type qualifiers in format argument (arg %d)\",\n+\t\tstatus_warning (status, \"extra type qualifiers in format argument (arg %d)\",\n \t\t\t arg_num);\n \n \t    }\n \t  else\n \t    {\n \t      if (types->pointer_count == 1)\n-\t\twarning (\"format argument is not a pointer (arg %d)\", arg_num);\n+\t\tstatus_warning (status, \"format argument is not a pointer (arg %d)\", arg_num);\n \t      else\n-\t\twarning (\"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n+\t\tstatus_warning (status, \"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n \t      break;\n \t    }\n \t}\n@@ -2709,10 +2744,10 @@ check_format_types (types)\n \t\t&& strcmp (types->wanted_type_name, that) != 0)\n \t      this = types->wanted_type_name;\n \t    if (types->name != 0)\n-\t      warning (\"%s is not type %s (arg %d)\", types->name, this,\n+\t      status_warning (status, \"%s is not type %s (arg %d)\", types->name, this,\n \t\t       arg_num);\n \t    else\n-\t      warning (\"%s format, %s arg (arg %d)\", this, that, arg_num);\n+\t      status_warning (status, \"%s format, %s arg (arg %d)\", this, that, arg_num);\n \t  }\n       }\n     }"}, {"sha": "bb9eee7a6eae6250ab8fcf85ce7fa58eea3eeece", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -396,7 +396,7 @@ extern tree (*make_fname_decl)                  PARAMS ((tree, const char *, int\n extern void declare_function_name\t\tPARAMS ((void));\n extern void decl_attributes\t\t\tPARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));\n-extern void check_function_format\t\tPARAMS ((tree, tree, tree));\n+extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */"}, {"sha": "146143205c6fbada29440506bab37b7fc01023b1", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -1533,7 +1533,7 @@ build_function_call (function, params)\n   /* Check for errors in format strings.  */\n \n   if (warn_format && (name || assembler_name))\n-    check_function_format (name, assembler_name, coerced_params);\n+    check_function_format (NULL, name, assembler_name, coerced_params);\n \n   /* Recognize certain built-in functions so we can make tree-codes\n      other than CALL_EXPR.  We do this when it enables fold-const.c"}, {"sha": "62fa62dd2130ec2f0025a93075c0d954306a49d2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -1,3 +1,9 @@\n+2000-09-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* cp-tree.h (check_function_format): Accept a `status' parameter.\n+\t\n+\t* call.c, typeck.c: Updates calls to `check_function_format'.\n+\n 2000-09-17  Geoffrey Keating  <geoffk@cygnus.com>\n \n \t* decl2.c (handle_class_head): Always push some scope even"}, {"sha": "5af56a47444d17808fc4b8606ecad6872b50135d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -4050,7 +4050,7 @@ build_over_call (cand, args, flags)\n   converted_args = nreverse (converted_args);\n \n   if (warn_format && (DECL_NAME (fn) || DECL_ASSEMBLER_NAME (fn)))\n-    check_function_format (DECL_NAME (fn), DECL_ASSEMBLER_NAME (fn),\n+    check_function_format (NULL, DECL_NAME (fn), DECL_ASSEMBLER_NAME (fn),\n \t\t\t   converted_args); \n \n   /* Avoid actually calling copy constructors and copy assignment operators,"}, {"sha": "adea1b55d9395489481ca988f11936dddc5db8ca", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -3186,7 +3186,7 @@ extern void declare_function_name               PARAMS ((void));\n extern void decl_attributes                     PARAMS ((tree, tree, tree));\n extern void init_function_format_info\t\tPARAMS ((void));\n extern void record_function_format\t\tPARAMS ((tree, tree, int, int, int));\n-extern void check_function_format\t\tPARAMS ((tree, tree, tree));\n+extern void check_function_format\t\tPARAMS ((int *, tree, tree, tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error                     PARAMS ((enum tree_code));"}, {"sha": "f6f7efd5312b360f256ab8a53ebb872af289d127", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f80e6acb17b52b491c82a472828ae727f00db72/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3f80e6acb17b52b491c82a472828ae727f00db72", "patch": "@@ -3026,7 +3026,7 @@ build_function_call_real (function, params, require_complete, flags)\n   /* Check for errors in format strings.  */\n \n   if (warn_format && (name || assembler_name))\n-    check_function_format (name, assembler_name, coerced_params);\n+    check_function_format (NULL, name, assembler_name, coerced_params);\n \n   /* Recognize certain built-in functions so we can make tree-codes\n      other than CALL_EXPR.  We do this when it enables fold-const.c"}]}