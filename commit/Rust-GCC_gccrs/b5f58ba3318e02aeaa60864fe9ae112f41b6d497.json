{"sha": "b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVmNThiYTMzMThlMDJhZWFhNjA4NjRmZTlhZTExMmY0MWI2ZDQ5Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-01-09T18:16:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-09T18:16:40Z"}, "message": "* sanitizer_common/sanitizer_symbolizer_libbacktrace.h\n\t(LibbacktraceSymbolizer::Demangle): New declaration.\n\t* sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc\n\t(POSIXSymbolizer::Demangle): Use libbacktrace_symbolizer_'s Demangle\n\tmethod if possible.\n\t* sanitizer_common/sanitizer_symbolizer_libbacktrace.cc: Include\n\t\"demangle.h\" if SANITIZE_CP_DEMANGLE is defined.\n\t(struct CplusV3DemangleData): New type.\n\t(CplusV3DemangleCallback, CplusV3Demangle): New functions.\n\t(SymbolizeCodePCInfoCallback, SymbolizeCodeCallback,\n\tSymbolizeDataCallback): Use CplusV3Demangle.\n\t* sanitizer_common/Makefile.am (AM_CXXFLAGS): Add\n\t-DSANITIZE_CP_DEMANGLE and -I $(top_srcdir)/../include.\n\t* libbacktrace/backtrace-rename.h (cplus_demangle_builtin_types,\n\tcplus_demangle_fill_ctor, cplus_demangle_fill_dtor,\n\tcplus_demangle_fill_extended_operator, cplus_demangle_fill_name,\n\tcplus_demangle_init_info, cplus_demangle_mangled_name,\n\tcplus_demangle_operators, cplus_demangle_print,\n\tcplus_demangle_print_callback, cplus_demangle_type, cplus_demangle_v3,\n\tcplus_demangle_v3_callback, is_gnu_v3_mangled_ctor,\n\tis_gnu_v3_mangled_dtor, java_demangle_v3, java_demangle_v3_callback):\n\tDefine.\n\t(__asan_internal_memcmp, __asan_internal_strncmp): New prototypes.\n\t(memcmp, strncmp): Redefine.\n\t* libbacktrace/Makefile.am (libsanitizer_libbacktrace_la_SOURCES): Add\n\t../../libiberty/cp-demangle.c.\n\t* libbacktrace/bridge.cc (__asan_internal_memcmp,\n\t__asan_internal_strncmp): New functions.\n\t* sanitizer_common/Makefile.in: Regenerated.\n\t* libbacktrace/Makefile.in: Regenerated.\n\t* configure: Regenerated.\n\t* configure.ac: Regenerated.\n\t* config.h.in: Regenerated.\n\nFrom-SVN: r206477", "tree": {"sha": "4891e38742b6dbf0a0be3981a9ba4dcb067d7930", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4891e38742b6dbf0a0be3981a9ba4dcb067d7930"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2613419a70f578fb8077cc860be1f6cdf29b73c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2613419a70f578fb8077cc860be1f6cdf29b73c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2613419a70f578fb8077cc860be1f6cdf29b73c0"}], "stats": {"total": 191, "additions": 180, "deletions": 11}, "files": [{"sha": "30a26bcd4ef58c3b648ca6e0e961214fd6151051", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -1,5 +1,39 @@\n 2014-01-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* sanitizer_common/sanitizer_symbolizer_libbacktrace.h\n+\t(LibbacktraceSymbolizer::Demangle): New declaration.\n+\t* sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc\n+\t(POSIXSymbolizer::Demangle): Use libbacktrace_symbolizer_'s Demangle\n+\tmethod if possible.\n+\t* sanitizer_common/sanitizer_symbolizer_libbacktrace.cc: Include\n+\t\"demangle.h\" if SANITIZE_CP_DEMANGLE is defined.\n+\t(struct CplusV3DemangleData): New type.\n+\t(CplusV3DemangleCallback, CplusV3Demangle): New functions.\n+\t(SymbolizeCodePCInfoCallback, SymbolizeCodeCallback,\n+\tSymbolizeDataCallback): Use CplusV3Demangle.\n+\t* sanitizer_common/Makefile.am (AM_CXXFLAGS): Add\n+\t-DSANITIZE_CP_DEMANGLE and -I $(top_srcdir)/../include.\n+\t* libbacktrace/backtrace-rename.h (cplus_demangle_builtin_types,\n+\tcplus_demangle_fill_ctor, cplus_demangle_fill_dtor,\n+\tcplus_demangle_fill_extended_operator, cplus_demangle_fill_name,\n+\tcplus_demangle_init_info, cplus_demangle_mangled_name,\n+\tcplus_demangle_operators, cplus_demangle_print,\n+\tcplus_demangle_print_callback, cplus_demangle_type, cplus_demangle_v3,\n+\tcplus_demangle_v3_callback, is_gnu_v3_mangled_ctor,\n+\tis_gnu_v3_mangled_dtor, java_demangle_v3, java_demangle_v3_callback):\n+\tDefine.\n+\t(__asan_internal_memcmp, __asan_internal_strncmp): New prototypes.\n+\t(memcmp, strncmp): Redefine.\n+\t* libbacktrace/Makefile.am (libsanitizer_libbacktrace_la_SOURCES): Add\n+\t../../libiberty/cp-demangle.c.\n+\t* libbacktrace/bridge.cc (__asan_internal_memcmp,\n+\t__asan_internal_strncmp): New functions.\n+\t* sanitizer_common/Makefile.in: Regenerated.\n+\t* libbacktrace/Makefile.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* configure.ac: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n \t* sanitizer_common/Makefile.am (AM_CPPFLAGS): Add\n \t-isystem $(top_srcdir)/include/system.\n \t* sanitizer_common/Makefile.in: Regenerated."}, {"sha": "e4b2786324efe480c0a26953201a4b6ca0fa80ba", "filename": "libsanitizer/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfig.h.in?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -3,6 +3,9 @@\n /* ELF size: 32 or 64 */\n #undef BACKTRACE_ELF_SIZE\n \n+/* Define to 1 if you have the <alloca.h> header file. */\n+#undef HAVE_ALLOCA_H\n+\n /* Define to 1 if you have the __atomic functions */\n #undef HAVE_ATOMIC_FUNCTIONS\n "}, {"sha": "c20735921ef3b0c6af1aa4ed8784a3282343c4bf", "filename": "libsanitizer/configure", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -16134,12 +16134,14 @@ ac_config_commands=\"$ac_config_commands gstdint.h\"\n \n \n \n-for ac_header in sys/mman.h\n+for ac_header in sys/mman.h alloca.h\n do :\n-  ac_fn_c_check_header_mongrel \"$LINENO\" \"sys/mman.h\" \"ac_cv_header_sys_mman_h\" \"$ac_includes_default\"\n-if test \"x$ac_cv_header_sys_mman_h\" = x\"\"yes; then :\n+  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+ac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\n+eval as_val=\\$$as_ac_Header\n+   if test \"x$as_val\" = x\"\"yes; then :\n   cat >>confdefs.h <<_ACEOF\n-#define HAVE_SYS_MMAN_H 1\n+#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n _ACEOF\n \n fi"}, {"sha": "c4641d4728654ad52754a623d8af5ee595f5f480", "filename": "libsanitizer/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fconfigure.ac?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -208,7 +208,7 @@ AC_SUBST(BACKTRACE_SUPPORTED)\n \n GCC_HEADER_STDINT(gstdint.h)\n \n-AC_CHECK_HEADERS(sys/mman.h)\n+AC_CHECK_HEADERS(sys/mman.h alloca.h)\n if test \"$ac_cv_header_sys_mman_h\" = \"no\"; then\n   have_mmap=no\n else"}, {"sha": "39c91aa62b8bfc2c08e8442dbdc40cc544d9bb5c", "filename": "libsanitizer/libbacktrace/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flibbacktrace%2FMakefile.am?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -51,6 +51,7 @@ libsanitizer_libbacktrace_la_SOURCES = \\\n \t../../libbacktrace/internal.h \\\n \t../../libbacktrace/posix.c \\\n \t../../libbacktrace/state.c \\\n+\t../../libiberty/cp-demangle.c \\\n \tbridge.cc\n \n FORMAT_FILES = \\"}, {"sha": "3dca45b6e832b7290564f145c63936882b7a5387", "filename": "libsanitizer/libbacktrace/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flibbacktrace%2FMakefile.in?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -90,7 +90,7 @@ CONFIG_CLEAN_VPATH_FILES =\n LTLIBRARIES = $(noinst_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n am_libsanitizer_libbacktrace_la_OBJECTS = atomic.lo dwarf.lo \\\n-\tfileline.lo posix.lo state.lo bridge.lo\n+\tfileline.lo posix.lo state.lo cp-demangle.lo bridge.lo\n libsanitizer_libbacktrace_la_OBJECTS =  \\\n \t$(am_libsanitizer_libbacktrace_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -280,6 +280,7 @@ libsanitizer_libbacktrace_la_SOURCES = \\\n \t../../libbacktrace/internal.h \\\n \t../../libbacktrace/posix.c \\\n \t../../libbacktrace/state.c \\\n+\t../../libiberty/cp-demangle.c \\\n \tbridge.cc\n \n FORMAT_FILES = \\\n@@ -362,6 +363,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alloc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/atomic.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bridge.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cp-demangle.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dwarf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fileline.Plo@am__quote@\n@@ -428,6 +430,13 @@ state.lo: ../../libbacktrace/state.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o state.lo `test -f '../../libbacktrace/state.c' || echo '$(srcdir)/'`../../libbacktrace/state.c\n \n+cp-demangle.lo: ../../libiberty/cp-demangle.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT cp-demangle.lo -MD -MP -MF $(DEPDIR)/cp-demangle.Tpo -c -o cp-demangle.lo `test -f '../../libiberty/cp-demangle.c' || echo '$(srcdir)/'`../../libiberty/cp-demangle.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/cp-demangle.Tpo $(DEPDIR)/cp-demangle.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='../../libiberty/cp-demangle.c' object='cp-demangle.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o cp-demangle.lo `test -f '../../libiberty/cp-demangle.c' || echo '$(srcdir)/'`../../libiberty/cp-demangle.c\n+\n elf.lo: ../../libbacktrace/elf.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT elf.lo -MD -MP -MF $(DEPDIR)/elf.Tpo -c -o elf.lo `test -f '../../libbacktrace/elf.c' || echo '$(srcdir)/'`../../libbacktrace/elf.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/elf.Tpo $(DEPDIR)/elf.Plo"}, {"sha": "af8f36bd2d39a909a506f30484224ded324a348d", "filename": "libsanitizer/libbacktrace/backtrace-rename.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2Fbacktrace-rename.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2Fbacktrace-rename.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flibbacktrace%2Fbacktrace-rename.h?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -14,25 +14,49 @@\n #define backtrace_vector_grow __asan_backtrace_vector_grow\n #define backtrace_vector_release __asan_backtrace_vector_release\n \n+#define cplus_demangle_builtin_types __asan_cplus_demangle_builtin_types\n+#define cplus_demangle_fill_ctor __asan_cplus_demangle_fill_ctor\n+#define cplus_demangle_fill_dtor __asan_cplus_demangle_fill_dtor\n+#define cplus_demangle_fill_extended_operator __asan_cplus_demangle_fill_extended_operator\n+#define cplus_demangle_fill_name __asan_cplus_demangle_fill_name\n+#define cplus_demangle_init_info __asan_cplus_demangle_init_info\n+#define cplus_demangle_mangled_name __asan_cplus_demangle_mangled_name\n+#define cplus_demangle_operators __asan_cplus_demangle_operators\n+#define cplus_demangle_print __asan_cplus_demangle_print\n+#define cplus_demangle_print_callback __asan_cplus_demangle_print_callback\n+#define cplus_demangle_type __asan_cplus_demangle_type\n+#define cplus_demangle_v3 __asan_cplus_demangle_v3\n+#define cplus_demangle_v3_callback __asan_cplus_demangle_v3_callback\n+#define is_gnu_v3_mangled_ctor __asan_is_gnu_v3_mangled_ctor\n+#define is_gnu_v3_mangled_dtor __asan_is_gnu_v3_mangled_dtor\n+#define java_demangle_v3 __asan_java_demangle_v3\n+#define java_demangle_v3_callback __asan_java_demangle_v3_callback\n+\n #ifndef __cplusplus\n \n #include <string.h>\n \n extern void *__asan_internal_memcpy (void *, const void *, size_t);\n extern void *__asan_internal_memset (void *, int, size_t);\n+extern int __asan_internal_memcmp (const void *, const void *, size_t);\n extern int __asan_internal_strcmp (const char *, const char *);\n+extern int __asan_internal_strncmp (const char *, const char *, size_t);\n extern size_t __asan_internal_strlen (const char *);\n extern size_t __asan_internal_strnlen (const char *, size_t);\n \n #undef memcpy\n #undef memset\n+#undef memcmp\n #undef strcmp\n+#undef strncmp\n #undef strlen\n #undef strnlen\n \n #define memcpy(x,y,z) __asan_internal_memcpy (x, y, z)\n #define memset(x,y,z) __asan_internal_memset (x, y, z)\n+#define memcmp(x,y,z) __asan_internal_memcmp (x, y, z)\n #define strcmp(x,y) __asan_internal_strcmp (x, y)\n+#define strncmp(x,y,z) __asan_internal_strncmp (x, y, z)\n #define strlen(x) __asan_internal_strlen (x)\n #ifdef HAVE_DECL_STRNLEN\n #define strnlen(x,y) __asan_internal_strnlen (x, y)"}, {"sha": "d553c6617d002e4f1c84f848ed8676006233d13f", "filename": "libsanitizer/libbacktrace/bridge.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2Fbridge.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Flibbacktrace%2Fbridge.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Flibbacktrace%2Fbridge.cc?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -51,12 +51,24 @@ __asan_internal_memset (void *dest, int c, size_t n)\n   return __sanitizer::internal_memset (dest, c, n);\n }\n \n+int\n+__asan_internal_memcmp (const void *s1, const void *s2, size_t n)\n+{\n+  return __sanitizer::internal_memcmp (s1, s2, n);\n+}\n+\n int\n __asan_internal_strcmp (const char *s1, const char *s2)\n {\n   return __sanitizer::internal_strcmp (s1, s2);\n }\n \n+int\n+__asan_internal_strncmp (const char *s1, const char *s2, size_t n)\n+{\n+  return __sanitizer::internal_strncmp (s1, s2, n);\n+}\n+\n size_t\n __asan_internal_strlen (const char *str)\n {"}, {"sha": "8e9038dc8cff657b2c02bcb7163ab76d21c3de07", "filename": "libsanitizer/sanitizer_common/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2FMakefile.am?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -7,8 +7,10 @@ DEFS = -D_GNU_SOURCE -D_DEBUG -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D\n AM_CXXFLAGS = -Wall -W -Wno-unused-parameter -Wwrite-strings -pedantic -Wno-long-long  -fPIC -fno-builtin -fno-exceptions -fno-rtti -fomit-frame-pointer -funwind-tables -fvisibility=hidden -Wno-variadic-macros\n AM_CXXFLAGS += $(LIBSTDCXX_RAW_CXX_CXXFLAGS)\n if LIBBACKTRACE_SUPPORTED\n-AM_CXXFLAGS += -DSANITIZER_LIBBACKTRACE -I $(top_srcdir)/../libbacktrace \\\n+AM_CXXFLAGS += -DSANITIZER_LIBBACKTRACE -DSANITIZER_CP_DEMANGLE \\\n+\t       -I $(top_srcdir)/../libbacktrace \\\n \t       -I $(top_builddir)/libbacktrace \\\n+\t       -I $(top_srcdir)/../include \\\n \t       -include $(top_srcdir)/libbacktrace/backtrace-rename.h\n endif\n ACLOCAL_AMFLAGS = -I m4"}, {"sha": "e9fd115e9761c3359abb336be02139c2851a981d", "filename": "libsanitizer/sanitizer_common/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2FMakefile.in?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -35,8 +35,10 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n-@LIBBACKTRACE_SUPPORTED_TRUE@am__append_1 = -DSANITIZER_LIBBACKTRACE -I $(top_srcdir)/../libbacktrace \\\n+@LIBBACKTRACE_SUPPORTED_TRUE@am__append_1 = -DSANITIZER_LIBBACKTRACE -DSANITIZER_CP_DEMANGLE \\\n+@LIBBACKTRACE_SUPPORTED_TRUE@\t       -I $(top_srcdir)/../libbacktrace \\\n @LIBBACKTRACE_SUPPORTED_TRUE@\t       -I $(top_builddir)/libbacktrace \\\n+@LIBBACKTRACE_SUPPORTED_TRUE@\t       -I $(top_srcdir)/../include \\\n @LIBBACKTRACE_SUPPORTED_TRUE@\t       -include $(top_srcdir)/libbacktrace/backtrace-rename.h\n \n subdir = sanitizer_common"}, {"sha": "3023002af47afb8ded369e0886ae638cef05bac6", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_libbacktrace.cc", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.cc?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -20,6 +20,10 @@\n # include \"backtrace-supported.h\"\n # if SANITIZER_POSIX && BACKTRACE_SUPPORTED && !BACKTRACE_USES_MALLOC\n #  include \"backtrace.h\"\n+#  if SANITIZER_CP_DEMANGLE\n+#   undef ARRAY_SIZE\n+#   include \"demangle.h\"\n+#  endif\n # else\n #  define SANITIZER_LIBBACKTRACE 0\n # endif\n@@ -31,6 +35,60 @@ namespace __sanitizer {\n \n namespace {\n \n+#if SANITIZER_CP_DEMANGLE\n+struct CplusV3DemangleData {\n+  char *buf;\n+  uptr size, allocated;\n+};\n+\n+extern \"C\" {\n+static void CplusV3DemangleCallback(const char *s, size_t l, void *vdata) {\n+  CplusV3DemangleData *data = (CplusV3DemangleData *)vdata;\n+  uptr needed = data->size + l + 1;\n+  if (needed > data->allocated) {\n+    data->allocated *= 2;\n+    if (needed > data->allocated)\n+      data->allocated = needed;\n+    char *buf = (char *)InternalAlloc(data->allocated);\n+    if (data->buf) {\n+      internal_memcpy(buf, data->buf, data->size);\n+      InternalFree(data->buf);\n+    }\n+    data->buf = buf;\n+  }\n+  internal_memcpy(data->buf + data->size, s, l);\n+  data->buf[data->size + l] = '\\0';\n+  data->size += l;\n+}\n+}  // extern \"C\"\n+\n+char *CplusV3Demangle(const char *name, bool always_alloc) {\n+  CplusV3DemangleData data;\n+  data.buf = 0;\n+  data.size = 0;\n+  data.allocated = 0;\n+  if (cplus_demangle_v3_callback(name, DMGL_PARAMS | DMGL_ANSI,\n+\t\t\t\t CplusV3DemangleCallback, &data)) {\n+    if (data.size + 64 > data.allocated)\n+      return data.buf;\n+    char *buf = internal_strdup(data.buf);\n+    InternalFree(data.buf);\n+    return buf;\n+  }\n+  if (data.buf)\n+    InternalFree(data.buf);\n+  if (always_alloc)\n+    return internal_strdup(name);\n+  return 0;\n+}\n+#else\n+const char *CplusV3Demangle(const char *name, bool always_alloc) {\n+  if (always_alloc)\n+    return internal_strdup(name);\n+  return 0;\n+}\n+#endif\n+\n struct SymbolizeCodeData {\n   AddressInfo *frames;\n   uptr n_frames;\n@@ -49,7 +107,7 @@ static int SymbolizeCodePCInfoCallback(void *vdata, uintptr_t addr,\n     info->Clear();\n     info->FillAddressAndModuleInfo(addr, cdata->module_name,\n                                    cdata->module_offset);\n-    info->function = internal_strdup(function);\n+    info->function = CplusV3Demangle(function, true);\n     if (filename)\n       info->file = internal_strdup(filename);\n     info->line = lineno;\n@@ -67,7 +125,7 @@ static void SymbolizeCodeCallback(void *vdata, uintptr_t addr,\n     info->Clear();\n     info->FillAddressAndModuleInfo(addr, cdata->module_name,\n                                    cdata->module_offset);\n-    info->function = internal_strdup(symname);\n+    info->function = CplusV3Demangle(symname, true);\n     cdata->n_frames = 1;\n   }\n }\n@@ -76,7 +134,7 @@ static void SymbolizeDataCallback(void *vdata, uintptr_t, const char *symname,\n                                   uintptr_t symval, uintptr_t symsize) {\n   DataInfo *info = (DataInfo *)vdata;\n   if (symname && symval) {\n-    info->name = internal_strdup(symname);\n+    info->name = CplusV3Demangle(symname, true);\n     info->start = symval;\n     info->size = symsize;\n   }\n@@ -121,6 +179,17 @@ bool LibbacktraceSymbolizer::SymbolizeData(DataInfo *info) {\n   return true;\n }\n \n+const char *LibbacktraceSymbolizer::Demangle(const char *name) {\n+#if SANITIZER_CP_DEMANGLE\n+  const char *demangled = CplusV3Demangle(name, false);\n+  if (demangled)\n+    return demangled;\n+  return name;\n+#else\n+  return 0;\n+#endif\n+}\n+\n #else  // SANITIZER_LIBBACKTRACE\n \n LibbacktraceSymbolizer *LibbacktraceSymbolizer::get(LowLevelAllocator *alloc) {\n@@ -139,6 +208,10 @@ bool LibbacktraceSymbolizer::SymbolizeData(DataInfo *info) {\n   return false;\n }\n \n+const char *LibbacktraceSymbolizer::Demangle(const char *name) {\n+  return 0;\n+}\n+\n #endif  // SANITIZER_LIBBACKTRACE\n \n }  // namespace __sanitizer"}, {"sha": "05f0558c3d87e804c1b01733515e2ba74d7f436b", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_libbacktrace.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_libbacktrace.h?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -29,6 +29,8 @@ class LibbacktraceSymbolizer {\n \n   bool SymbolizeData(DataInfo *info);\n \n+  const char *Demangle(const char *name);\n+\n  private:\n   explicit LibbacktraceSymbolizer(void *state) : state_(state) {}\n "}, {"sha": "7aead970382248df8f1ce8c198cf7f0d11c5a8a2", "filename": "libsanitizer/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5f58ba3318e02aeaa60864fe9ae112f41b6d497/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_symbolizer_posix_libcdep.cc?ref=b5f58ba3318e02aeaa60864fe9ae112f41b6d497", "patch": "@@ -513,6 +513,11 @@ class POSIXSymbolizer : public Symbolizer {\n     SymbolizerScope sym_scope(this);\n     if (internal_symbolizer_ != 0)\n       return internal_symbolizer_->Demangle(name);\n+    if (libbacktrace_symbolizer_ != 0) {\n+      const char *demangled = libbacktrace_symbolizer_->Demangle(name);\n+      if (demangled)\n+\treturn demangled;\n+    }\n     return DemangleCXXABI(name);\n   }\n "}]}