{"sha": "5987d8a79cda1069c774e5c302d5597310270026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4N2Q4YTc5Y2RhMTA2OWM3NzRlNWMzMDJkNTU5NzMxMDI3MDAyNg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-03-10T02:54:16Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2021-03-10T03:01:30Z"}, "message": "cris: define DWARF_FRAME_REGISTERS\n\nWhen DWARF_FRAME_REGISTERS isn't defined, the default is\nFIRST_PSEUDO_REGISTER which means that if you add faked\nregisters to the port, used for frame-context related\nelimination, room is allocated for them in the register\ncontext used for frame-unwinding, which is wasteful because\nthey're eliminated before the final form of the code that is\nemitted.\n\nStopping after MOF saves two register slots in the unwind\ncontest, compared to the current default.  For regular C\nprogramming this is uninteresting, but defining\nDWARF_FRAME_REGISTERS now also avoids the need to remember\nto define it later, when twiddling with additional faked\nregisters (alternatively suffering churn from comparing\ndifferences in unwind context).  As expected, no effect on\ntest-results, coremark or local (C-specific)\nmicrobenchmarks.\n\ngcc:\n\t* config/cris/cris.h (DWARF_FRAME_REGISTERS): Define.", "tree": {"sha": "2453ef062219529e4ff34da22ef34b00fc0f02a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2453ef062219529e4ff34da22ef34b00fc0f02a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5987d8a79cda1069c774e5c302d5597310270026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5987d8a79cda1069c774e5c302d5597310270026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5987d8a79cda1069c774e5c302d5597310270026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5987d8a79cda1069c774e5c302d5597310270026/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dc225d311ed87633fa970164bdda19bf228b8a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc225d311ed87633fa970164bdda19bf228b8a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc225d311ed87633fa970164bdda19bf228b8a3"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "4d04ef869f3d508b4cfba878ca14fc066cd1a2ff", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5987d8a79cda1069c774e5c302d5597310270026/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5987d8a79cda1069c774e5c302d5597310270026/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=5987d8a79cda1069c774e5c302d5597310270026", "patch": "@@ -588,6 +588,9 @@ enum reg_class\n \n #define STATIC_CHAIN_REGNUM CRIS_STATIC_CHAIN_REGNUM\n \n+/* No unwind context is needed for faked registers nor DCCR.  Currently not MOF\n+   too, but let's keep that open.  */\n+#define DWARF_FRAME_REGISTERS (CRIS_MOF_REGNUM + 1)\n \n /* Node: Elimination */\n "}]}