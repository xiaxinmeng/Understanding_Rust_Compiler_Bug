{"sha": "c83b4b824214039fea696083e6a888aa7c9063ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzYjRiODI0MjE0MDM5ZmVhNjk2MDgzZTZhODg4YWE3YzkwNjNjZQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2018-07-26T14:48:55Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2018-07-26T14:48:55Z"}, "message": "libsanitizer: Mark REAL(swapcontext) with indirect_return attribute on x86\n\nCherry-pick compiler-rt revision 337603:\n\nWhen shadow stack from Intel CET is enabled, the first instruction of all\nindirect branch targets must be a special instruction, ENDBR.\n\nlib/asan/asan_interceptors.cc has\n\n...\n  int res = REAL(swapcontext)(oucp, ucp);\n...\n\nREAL(swapcontext) is a function pointer to swapcontext in libc.  Since\nswapcontext may return via indirect branch on x86 when shadow stack is\nenabled, as in this case,\n\nint res = REAL(swapcontext)(oucp, ucp);\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  This function may be\nreturned via an indirect branch.\n\nHere compiler must insert ENDBR after call, like\n\ncall *bar(%rip)\nendbr64\n\nI opened an LLVM bug:\n\nhttps://bugs.llvm.org/show_bug.cgi?id=38207\n\nto add the indirect_return attribute so that it can be used to inform\ncompiler to insert ENDBR after REAL(swapcontext) call.  We mark\nREAL(swapcontext) with the indirect_return attribute if it is available.\n\nThis fixed:\n\nhttps://bugs.llvm.org/show_bug.cgi?id=38249\n\nReviewed By: eugenis\n\nDifferential Revision: https://reviews.llvm.org/D49608\n\n\tPR target/86560\n\t* asan/asan_interceptors.cc (swapcontext) Cherry-pick\n\tcompiler-rt revision 337603.\n\t* sanitizer_common/sanitizer_internal_defs.h (__has_attribute):\n\tLikewise.\n\nFrom-SVN: r263009", "tree": {"sha": "29ee396d3994048e553ca56048cded170b39d2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29ee396d3994048e553ca56048cded170b39d2b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83b4b824214039fea696083e6a888aa7c9063ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83b4b824214039fea696083e6a888aa7c9063ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83b4b824214039fea696083e6a888aa7c9063ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83b4b824214039fea696083e6a888aa7c9063ce/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49ba258864794b0f65d0e59d31eea24e94952aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ba258864794b0f65d0e59d31eea24e94952aea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ba258864794b0f65d0e59d31eea24e94952aea"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "8e984f8b2e41d8cb3e6b216e356b7eb04d24f844", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=c83b4b824214039fea696083e6a888aa7c9063ce", "patch": "@@ -1,3 +1,11 @@\n+2018-07-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/86560\n+\t* asan/asan_interceptors.cc (swapcontext) Cherry-pick\n+\tcompiler-rt revision 337603.\n+\t* sanitizer_common/sanitizer_internal_defs.h (__has_attribute):\n+\tLikewise.\n+\n 2018-07-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tRevert"}, {"sha": "552cf9347af531c35b55407de800bd141aa491d1", "filename": "libsanitizer/asan/asan_interceptors.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2Fasan%2Fasan_interceptors.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2Fasan%2Fasan_interceptors.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fasan%2Fasan_interceptors.cc?ref=c83b4b824214039fea696083e6a888aa7c9063ce", "patch": "@@ -267,7 +267,15 @@ INTERCEPTOR(int, swapcontext, struct ucontext_t *oucp,\n   uptr stack, ssize;\n   ReadContextStack(ucp, &stack, &ssize);\n   ClearShadowMemoryForContextStack(stack, ssize);\n+#if __has_attribute(__indirect_return__) && \\\n+    (defined(__x86_64__) || defined(__i386__))\n+  int (*real_swapcontext)(struct ucontext_t *, struct ucontext_t *)\n+    __attribute__((__indirect_return__))\n+    = REAL(swapcontext);\n+  int res = real_swapcontext(oucp, ucp);\n+#else\n   int res = REAL(swapcontext)(oucp, ucp);\n+#endif\n   // swapcontext technically does not return, but program may swap context to\n   // \"oucp\" later, that would look as if swapcontext() returned 0.\n   // We need to clear shadow for ucp once again, as it may be in arbitrary"}, {"sha": "4413a88bea012637751637e826d5d6b8539f3410", "filename": "libsanitizer/sanitizer_common/sanitizer_internal_defs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83b4b824214039fea696083e6a888aa7c9063ce/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_internal_defs.h?ref=c83b4b824214039fea696083e6a888aa7c9063ce", "patch": "@@ -104,6 +104,11 @@\n # define __has_feature(x) 0\n #endif\n \n+// Older GCCs do not understand __has_attribute.\n+#if !defined(__has_attribute)\n+# define __has_attribute(x) 0\n+#endif\n+\n // For portability reasons we do not include stddef.h, stdint.h or any other\n // system header, but we do need some basic types that are not defined\n // in a portable way by the language itself."}]}