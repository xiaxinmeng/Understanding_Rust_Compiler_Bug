{"sha": "99f76d9bacfcef28546dda5a51cb3651ba422518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmNzZkOWJhY2ZjZWYyODU0NmRkYTVhNTFjYjM2NTFiYTQyMjUxOA==", "commit": {"author": {"name": "Alan Lawrence", "email": "alan.lawrence@arm.com", "date": "2014-10-27T14:04:43Z"}, "committer": {"name": "Alan Lawrence", "email": "alalaw01@gcc.gnu.org", "date": "2014-10-27T14:04:43Z"}, "message": "[Vectorizer] Make REDUC_xxx_EXPR tree codes produce a scalar result\n\n\tPR tree-optimization/61114\n\t* expr.c (expand_expr_real_2): For REDUC_{MIN,MAX,PLUS}_EXPR, add\n\textract_bit_field around optab result.\n\n\t* fold-const.c (fold_unary_loc): For REDUC_{MIN,MAX,PLUS}_EXPR, produce\n\tscalar not vector.\n\n\t* tree-cfg.c (verify_gimple_assign_unary): Check result vs operand type\n\tfor REDUC_{MIN,MAX,PLUS}_EXPR.\n\n\t* tree-vect-loop.c (vect_analyze_loop): Update comment.\n\t(vect_create_epilog_for_reduction): For direct vector reduction, use\n\tresult of tree code directly without extract_bit_field.\n\n\t* tree.def (REDUC_MAX_EXPR, REDUC_MIN_EXPR, REDUC_PLUS_EXPR): Update\n\tcomment.\n\nFrom-SVN: r216736", "tree": {"sha": "b3fd50b4cacca8673a98acd16f6b70f7f379c0ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3fd50b4cacca8673a98acd16f6b70f7f379c0ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f76d9bacfcef28546dda5a51cb3651ba422518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f76d9bacfcef28546dda5a51cb3651ba422518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f76d9bacfcef28546dda5a51cb3651ba422518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f76d9bacfcef28546dda5a51cb3651ba422518/comments", "author": null, "committer": null, "parents": [{"sha": "60393bbc613a987e068945e55ab4e5e9dad29742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60393bbc613a987e068945e55ab4e5e9dad29742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60393bbc613a987e068945e55ab4e5e9dad29742"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "c2a25c9ab428b0489c104e29d17947a173ce57b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -1,3 +1,22 @@\n+2014-10-27  Alan Lawrence  <alan.lawrence@arm.com>\n+\n+\tPR tree-optimization/61114\n+\t* expr.c (expand_expr_real_2): For REDUC_{MIN,MAX,PLUS}_EXPR, add\n+\textract_bit_field around optab result.\n+\n+\t* fold-const.c (fold_unary_loc): For REDUC_{MIN,MAX,PLUS}_EXPR, produce\n+\tscalar not vector.\n+\n+\t* tree-cfg.c (verify_gimple_assign_unary): Check result vs operand type\n+\tfor REDUC_{MIN,MAX,PLUS}_EXPR.\n+\n+\t* tree-vect-loop.c (vect_analyze_loop): Update comment.\n+\t(vect_create_epilog_for_reduction): For direct vector reduction, use\n+\tresult of tree code directly without extract_bit_field.\n+\n+\t* tree.def (REDUC_MAX_EXPR, REDUC_MIN_EXPR, REDUC_PLUS_EXPR): Update\n+\tcomment.\n+\n 2014-10-27  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* basic-block.h: Remove all includes."}, {"sha": "e9cabbe412d0c0078ffa901a39345c6c1f13792d", "filename": "gcc/expr.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -9051,7 +9051,17 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       {\n         op0 = expand_normal (treeop0);\n         this_optab = optab_for_tree_code (code, type, optab_default);\n-        temp = expand_unop (mode, this_optab, op0, target, unsignedp);\n+        enum machine_mode vec_mode = TYPE_MODE (TREE_TYPE (treeop0));\n+        temp = expand_unop (vec_mode, this_optab, op0, NULL_RTX, unsignedp);\n+        gcc_assert (temp);\n+        /* The tree code produces a scalar result, but (somewhat by convention)\n+           the optab produces a vector with the result in element 0 if\n+           little-endian, or element N-1 if big-endian.  So pull the scalar\n+           result out of that element.  */\n+        int index = BYTES_BIG_ENDIAN ? GET_MODE_NUNITS (vec_mode) - 1 : 0;\n+        int bitsize = GET_MODE_BITSIZE (GET_MODE_INNER (vec_mode));\n+        temp = extract_bit_field (temp, bitsize, bitsize * index, unsignedp,\n+\t\t\t\t  target, mode, mode);\n         gcc_assert (temp);\n         return temp;\n       }"}, {"sha": "ba9b013db1c6bec12ebc5bf24335c5e32d2cbebc", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -8259,12 +8259,13 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n     case REDUC_MAX_EXPR:\n     case REDUC_PLUS_EXPR:\n       {\n-\tunsigned int nelts = TYPE_VECTOR_SUBPARTS (type), i;\n+\tunsigned int nelts, i;\n \ttree *elts;\n \tenum tree_code subcode;\n \n \tif (TREE_CODE (op0) != VECTOR_CST)\n \t  return NULL_TREE;\n+        nelts = TYPE_VECTOR_SUBPARTS (TREE_TYPE (op0));\n \n \telts = XALLOCAVEC (tree, nelts);\n \tif (!vec_cst_ctor_to_array (op0, elts))\n@@ -8283,10 +8284,9 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t    elts[0] = const_binop (subcode, elts[0], elts[i]);\n \t    if (elts[0] == NULL_TREE || !CONSTANT_CLASS_P (elts[0]))\n \t      return NULL_TREE;\n-\t    elts[i] = build_zero_cst (TREE_TYPE (type));\n \t  }\n \n-\treturn build_vector (type, elts);\n+\treturn elts[0];\n       }\n \n     default:"}, {"sha": "761d6f48fb9c13380bd39592cbdc96d2a08784c7", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -3553,12 +3553,21 @@ verify_gimple_assign_unary (gimple stmt)\n \n         return false;\n       }\n-\n-    case VEC_UNPACK_HI_EXPR:\n-    case VEC_UNPACK_LO_EXPR:\n     case REDUC_MAX_EXPR:\n     case REDUC_MIN_EXPR:\n     case REDUC_PLUS_EXPR:\n+      if (!VECTOR_TYPE_P (rhs1_type)\n+\t  || !useless_type_conversion_p (lhs_type, TREE_TYPE (rhs1_type)))\n+        {\n+\t  error (\"reduction should convert from vector to element type\");\n+\t  debug_generic_expr (lhs_type);\n+\t  debug_generic_expr (rhs1_type);\n+\t  return true;\n+\t}\n+      return false;\n+\n+    case VEC_UNPACK_HI_EXPR:\n+    case VEC_UNPACK_LO_EXPR:\n     case VEC_UNPACK_FLOAT_HI_EXPR:\n     case VEC_UNPACK_FLOAT_LO_EXPR:\n       /* FIXME.  */"}, {"sha": "b4847ab7b76aa4ba3dbe430f489a1d4aae4b44e4", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -1903,9 +1903,9 @@ vect_analyze_loop (struct loop *loop)\n \n    Output:\n    REDUC_CODE - the corresponding tree-code to be used to reduce the\n-      vector of partial results into a single scalar result (which\n-      will also reside in a vector) or ERROR_MARK if the operation is\n-      a supported reduction operation, but does not have such tree-code.\n+      vector of partial results into a single scalar result, or ERROR_MARK\n+      if the operation is a supported reduction operation, but does not have\n+      such a tree-code.\n \n    Return FALSE if CODE currently cannot be vectorized as reduction.  */\n \n@@ -4179,6 +4179,7 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n   if (reduc_code != ERROR_MARK && !slp_reduc)\n     {\n       tree tmp;\n+      tree vec_elem_type;\n \n       /*** Case 1:  Create:\n            v_out2 = reduc_expr <v_out1>  */\n@@ -4187,14 +4188,26 @@ vect_create_epilog_for_reduction (vec<tree> vect_defs, gimple stmt,\n         dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t \"Reduce using direct vector reduction.\\n\");\n \n-      vec_dest = vect_create_destination_var (scalar_dest, vectype);\n-      tmp = build1 (reduc_code, vectype, new_phi_result);\n-      epilog_stmt = gimple_build_assign (vec_dest, tmp);\n-      new_temp = make_ssa_name (vec_dest, epilog_stmt);\n+      vec_elem_type = TREE_TYPE (TREE_TYPE (new_phi_result));\n+      if (!useless_type_conversion_p (scalar_type, vec_elem_type))\n+\t{\n+          tree tmp_dest =\n+\t      vect_create_destination_var (scalar_dest, vec_elem_type);\n+\t  tmp = build1 (reduc_code, vec_elem_type, new_phi_result);\n+\t  epilog_stmt = gimple_build_assign (tmp_dest, tmp);\n+\t  new_temp = make_ssa_name (tmp_dest, epilog_stmt);\n+\t  gimple_assign_set_lhs (epilog_stmt, new_temp);\n+\t  gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n+\n+\t  tmp = build1 (NOP_EXPR, scalar_type, new_temp);\n+\t}\n+      else\n+\ttmp = build1 (reduc_code, scalar_type, new_phi_result);\n+      epilog_stmt = gimple_build_assign (new_scalar_dest, tmp);\n+      new_temp = make_ssa_name (new_scalar_dest, epilog_stmt);\n       gimple_assign_set_lhs (epilog_stmt, new_temp);\n       gsi_insert_before (&exit_gsi, epilog_stmt, GSI_SAME_STMT);\n-\n-      extract_scalar_result = true;\n+      scalar_results.safe_push (new_temp);\n     }\n   else\n     {"}, {"sha": "c830e4bad84c8f418f5cf1627094dba98661f6f1", "filename": "gcc/tree.def", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f76d9bacfcef28546dda5a51cb3651ba422518/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=99f76d9bacfcef28546dda5a51cb3651ba422518", "patch": "@@ -1161,10 +1161,9 @@ DEFTREECODE (TRANSACTION_EXPR, \"transaction_expr\", tcc_expression, 1)\n    result (e.g. summing the elements of the vector, finding the minimum over\n    the vector elements, etc).\n    Operand 0 is a vector.\n-   The expression returns a vector of the same type, with the first\n-   element in the vector holding the result of the reduction of all elements\n-   of the operand.  The content of the other elements in the returned vector\n-   is undefined.  */\n+   The expression returns a scalar, with type the same as the elements of the\n+   vector, holding the result of the reduction of all elements of the operand.\n+   */\n DEFTREECODE (REDUC_MAX_EXPR, \"reduc_max_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_MIN_EXPR, \"reduc_min_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_PLUS_EXPR, \"reduc_plus_expr\", tcc_unary, 1)"}]}