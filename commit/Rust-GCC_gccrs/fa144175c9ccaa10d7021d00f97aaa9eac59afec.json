{"sha": "fa144175c9ccaa10d7021d00f97aaa9eac59afec", "node_id": "C_kwDOANBUbNoAKGZhMTQ0MTc1YzljY2FhMTBkNzAyMWQwMGY5N2FhYTllYWM1OWFmZWM", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2022-11-25T16:06:39Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-12-01T16:11:52Z"}, "message": "RISC-V: Add duplicate vector support.\n\ngcc/ChangeLog:\n\n\t* config/riscv/constraints.md (Wdm): New constraint.\n\t* config/riscv/predicates.md (direct_broadcast_operand): New predicate.\n\t* config/riscv/riscv-protos.h (RVV_VLMAX): New macro.\n\t(emit_pred_op): Refine function.\n\t* config/riscv/riscv-selftests.cc (run_const_vector_selftests): New function.\n\t(run_broadcast_selftests): Ditto.\n\t(BROADCAST_TEST): New tests.\n\t(riscv_run_selftests): More tests.\n\t* config/riscv/riscv-v.cc (emit_pred_move): Refine function.\n\t(emit_vlmax_vsetvl): Ditto.\n\t(emit_pred_op): Ditto.\n\t(expand_const_vector): New function.\n\t(legitimize_move): Add constant vector support.\n\t* config/riscv/riscv.cc (riscv_print_operand): New asm print rule for const vector.\n\t* config/riscv/riscv.h (X0_REGNUM): New macro.\n\t* config/riscv/vector-iterators.md: New attribute.\n\t* config/riscv/vector.md (vec_duplicate<mode>): New pattern.\n\t(@pred_broadcast<mode>): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/dup-1.c: New test.\n\t* gcc.target/riscv/rvv/base/dup-2.c: New test.", "tree": {"sha": "1ca0830910a5d3ae8058f3c3369495abe48e2da4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ca0830910a5d3ae8058f3c3369495abe48e2da4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa144175c9ccaa10d7021d00f97aaa9eac59afec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa144175c9ccaa10d7021d00f97aaa9eac59afec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa144175c9ccaa10d7021d00f97aaa9eac59afec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa144175c9ccaa10d7021d00f97aaa9eac59afec/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41b243302e9964e642924329826448afb21d28e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41b243302e9964e642924329826448afb21d28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41b243302e9964e642924329826448afb21d28e"}], "stats": {"total": 899, "additions": 881, "deletions": 18}, "files": [{"sha": "51cffb2bcb6269460ba2bc4cf7d09baf3dc6d913", "filename": "gcc/config/riscv/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fconstraints.md?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -151,3 +151,8 @@\n  A constraint that matches a vector of immediate all ones.\"\n  (and (match_code \"const_vector\")\n       (match_test \"op == CONSTM1_RTX (GET_MODE (op))\")))\n+\n+(define_constraint \"Wdm\"\n+  \"Vector duplicate memory operand\"\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_code \"reg\" \"0\")))"}, {"sha": "5a5a49bf7c092e997869b0450d7b6679792c7cf5", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -286,6 +286,11 @@\n \t    (match_test \"GET_CODE (op) == UNSPEC\n \t\t\t && (XINT (op, 1) == UNSPEC_VUNDEF)\"))))\n \n+;; The scalar operand can be directly broadcast by RVV instructions.\n+(define_predicate \"direct_broadcast_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_test \"satisfies_constraint_Wdm (op)\")))\n+\n ;; A CONST_INT operand that has exactly two bits cleared.\n (define_predicate \"const_nottwobits_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "27692ffb2102da9c132a108d5d8fe25f770dff3a", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -119,6 +119,7 @@ extern void riscv_run_selftests (void);\n #endif\n \n namespace riscv_vector {\n+#define RVV_VLMAX gen_rtx_REG (Pmode, X0_REGNUM)\n /* Routines implemented in riscv-vector-builtins.cc.  */\n extern void init_builtins (void);\n extern const char *mangle_builtin_type (const_tree);\n@@ -130,6 +131,7 @@ extern tree builtin_decl (unsigned, bool);\n extern rtx expand_builtin (unsigned int, tree, rtx);\n extern bool const_vec_all_same_in_range_p (rtx, HOST_WIDE_INT, HOST_WIDE_INT);\n extern bool legitimize_move (rtx, rtx, machine_mode);\n+extern void emit_pred_op (unsigned, rtx, rtx, machine_mode);\n enum tail_policy\n {\n   TAIL_UNDISTURBED = 0,"}, {"sha": "1bf1a648fa1f6da7247208c073e7e7024dc0eaa6", "filename": "gcc/config/riscv/riscv-selftests.cc", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-selftests.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-selftests.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-selftests.cc?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -33,6 +33,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"selftest.h\"\n #include \"selftest-rtl.h\"\n+#include \"insn-attr.h\"\n+#include \"target.h\"\n+#include \"optabs.h\"\n \n #if CHECKING_P\n using namespace selftest;\n@@ -230,12 +233,136 @@ run_poly_int_selftests (void)\n   run_poly_int_selftest (\"rv32imafd_zve32x1p0\", ABI_ILP32D, POLY_TEST_DIMODE,\n \t\t\t worklist);\n }\n+\n+static void\n+run_const_vector_selftests (void)\n+{\n+  /* We dont't need to do the redundant tests in different march && mabi.\n+     Just pick up the march && mabi which fully support all RVV modes.  */\n+  riscv_selftest_arch_abi_setter rv (\"rv64imafdcv\", ABI_LP64D);\n+  rtl_dump_test t (SELFTEST_LOCATION, locate_file (\"riscv/empty-func.rtl\"));\n+  set_new_first_and_last_insn (NULL, NULL);\n+\n+  machine_mode mode;\n+  std::vector<HOST_WIDE_INT> worklist = {-111, -17, -16, 7, 15, 16, 111};\n+\n+  FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_INT)\n+    {\n+      if (riscv_v_ext_vector_mode_p (mode))\n+\t{\n+\t  for (const HOST_WIDE_INT &val : worklist)\n+\t    {\n+\t      start_sequence ();\n+\t      rtx dest = gen_reg_rtx (mode);\n+\t      rtx dup = gen_const_vec_duplicate (mode, GEN_INT (val));\n+\t      emit_move_insn (dest, dup);\n+\t      rtx_insn *insn = get_last_insn ();\n+\t      rtx src = XEXP (SET_SRC (PATTERN (insn)), 1);\n+\t      /* 1. Should be vmv.v.i for in rang of -16 ~ 15.\n+\t\t 2. Should be vmv.v.x for exceed -16 ~ 15.  */\n+\t      if (IN_RANGE (val, -16, 15))\n+\t\tASSERT_TRUE (rtx_equal_p (src, dup));\n+\t      else\n+\t\tASSERT_TRUE (\n+\t\t  rtx_equal_p (src,\n+\t\t\t       gen_rtx_VEC_DUPLICATE (mode, XEXP (src, 0))));\n+\t      end_sequence ();\n+\t    }\n+\t}\n+    }\n+\n+  FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_FLOAT)\n+    {\n+      if (riscv_v_ext_vector_mode_p (mode))\n+\t{\n+\t  scalar_mode inner_mode = GET_MODE_INNER (mode);\n+\t  REAL_VALUE_TYPE f = REAL_VALUE_ATOF (\"0.2928932\", inner_mode);\n+\t  rtx ele = const_double_from_real_value (f, inner_mode);\n+\n+\t  start_sequence ();\n+\t  rtx dest = gen_reg_rtx (mode);\n+\t  rtx dup = gen_const_vec_duplicate (mode, ele);\n+\t  emit_move_insn (dest, dup);\n+\t  rtx_insn *insn = get_last_insn ();\n+\t  rtx src = XEXP (SET_SRC (PATTERN (insn)), 1);\n+\t  /* Should always be vfmv.v.f.  */\n+\t  ASSERT_TRUE (\n+\t    rtx_equal_p (src, gen_rtx_VEC_DUPLICATE (mode, XEXP (src, 0))));\n+\t  end_sequence ();\n+\t}\n+    }\n+\n+  FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_BOOL)\n+    {\n+      /* Test vmset.m.  */\n+      if (riscv_v_ext_vector_mode_p (mode))\n+\t{\n+\t  start_sequence ();\n+\t  rtx dest = gen_reg_rtx (mode);\n+\t  emit_move_insn (dest, CONSTM1_RTX (mode));\n+\t  rtx_insn *insn = get_last_insn ();\n+\t  rtx src = XEXP (SET_SRC (PATTERN (insn)), 1);\n+\t  ASSERT_TRUE (rtx_equal_p (src, CONSTM1_RTX (mode)));\n+\t  end_sequence ();\n+\t}\n+    }\n+}\n+\n+static void\n+run_broadcast_selftests (void)\n+{\n+  /* We dont't need to do the redundant tests in different march && mabi.\n+     Just pick up the march && mabi which fully support all RVV modes.  */\n+  riscv_selftest_arch_abi_setter rv (\"rv64imafdcv\", ABI_LP64D);\n+  rtl_dump_test t (SELFTEST_LOCATION, locate_file (\"riscv/empty-func.rtl\"));\n+  set_new_first_and_last_insn (NULL, NULL);\n+\n+  machine_mode mode;\n+\n+#define BROADCAST_TEST(MODE_CLASS)                                             \\\n+  FOR_EACH_MODE_IN_CLASS (mode, MODE_VECTOR_INT)                               \\\n+    {                                                                          \\\n+      if (riscv_v_ext_vector_mode_p (mode))                                    \\\n+\t{                                                                      \\\n+\t  rtx_insn *insn;                                                      \\\n+\t  rtx src;                                                             \\\n+\t  scalar_mode inner_mode = GET_MODE_INNER (mode);                      \\\n+\t  /* Test vlse.v with zero stride.  */                                 \\\n+\t  start_sequence ();                                                   \\\n+\t  rtx addr = gen_reg_rtx (Pmode);                                      \\\n+\t  rtx mem = gen_rtx_MEM (inner_mode, addr);                            \\\n+\t  expand_vector_broadcast (mode, mem);                                 \\\n+\t  insn = get_last_insn ();                                             \\\n+\t  src = XEXP (SET_SRC (PATTERN (insn)), 1);                            \\\n+\t  ASSERT_TRUE (MEM_P (XEXP (src, 0)));                                 \\\n+\t  ASSERT_TRUE (                                                        \\\n+\t    rtx_equal_p (src, gen_rtx_VEC_DUPLICATE (mode, XEXP (src, 0))));   \\\n+\t  end_sequence ();                                                     \\\n+\t  /* Test vmv.v.x or vfmv.v.f.  */                                     \\\n+\t  start_sequence ();                                                   \\\n+\t  rtx reg = gen_reg_rtx (inner_mode);                                  \\\n+\t  expand_vector_broadcast (mode, reg);                                 \\\n+\t  insn = get_last_insn ();                                             \\\n+\t  src = XEXP (SET_SRC (PATTERN (insn)), 1);                            \\\n+\t  ASSERT_TRUE (REG_P (XEXP (src, 0)));                                 \\\n+\t  ASSERT_TRUE (                                                        \\\n+\t    rtx_equal_p (src, gen_rtx_VEC_DUPLICATE (mode, XEXP (src, 0))));   \\\n+\t  end_sequence ();                                                     \\\n+\t}                                                                      \\\n+    }\n+\n+  BROADCAST_TEST (MODE_VECTOR_INT)\n+  BROADCAST_TEST (MODE_VECTOR_FLOAT)\n+}\n+\n namespace selftest {\n /* Run all target-specific selftests.  */\n void\n riscv_run_selftests (void)\n {\n   run_poly_int_selftests ();\n+  run_const_vector_selftests ();\n+  run_broadcast_selftests ();\n }\n } // namespace selftest\n #endif /* #if CHECKING_P */"}, {"sha": "fbd8bbfe2543765a290fa7c53d72423c4601dc18", "filename": "gcc/config/riscv/riscv-v.cc", "status": "modified", "additions": 69, "deletions": 17, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv-v.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-v.cc?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -40,6 +40,7 @@\n #include \"target.h\"\n #include \"expr.h\"\n #include \"optabs.h\"\n+#include \"tm-constrs.h\"\n \n using namespace riscv_vector;\n \n@@ -104,34 +105,80 @@ const_vec_all_same_in_range_p (rtx x, HOST_WIDE_INT minval,\n \t  && IN_RANGE (INTVAL (elt), minval, maxval));\n }\n \n-/* Emit an RVV unmask && vl mov from SRC to DEST.  */\n-static void\n-emit_pred_move (rtx dest, rtx src, machine_mode mask_mode)\n+static rtx\n+emit_vlmax_vsetvl (machine_mode vmode)\n {\n-  insn_expander<7> e;\n-  machine_mode mode = GET_MODE (dest);\n   rtx vl = gen_reg_rtx (Pmode);\n-  unsigned int sew = GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL\n+  unsigned int sew = GET_MODE_CLASS (vmode) == MODE_VECTOR_BOOL\n \t\t       ? 8\n-\t\t       : GET_MODE_BITSIZE (GET_MODE_INNER (mode));\n+\t\t       : GET_MODE_BITSIZE (GET_MODE_INNER (vmode));\n \n-  emit_insn (gen_vsetvl_no_side_effects (\n-    Pmode, vl, gen_rtx_REG (Pmode, 0), gen_int_mode (sew, Pmode),\n-    gen_int_mode ((unsigned int) mode, Pmode), const1_rtx, const1_rtx));\n+  emit_insn (\n+    gen_vsetvl_no_side_effects (Pmode, vl, RVV_VLMAX, gen_int_mode (sew, Pmode),\n+\t\t\t\tgen_int_mode ((unsigned int) vmode, Pmode),\n+\t\t\t\tconst1_rtx, const1_rtx));\n+  return vl;\n+}\n+\n+/* Emit an RVV unmask && vl mov from SRC to DEST.  */\n+void\n+emit_pred_op (unsigned icode, rtx dest, rtx src, machine_mode mask_mode)\n+{\n+  insn_expander<7> e;\n+  machine_mode mode = GET_MODE (dest);\n \n   e.add_output_operand (dest, mode);\n   e.add_all_one_mask_operand (mask_mode);\n   e.add_vundef_operand (mode);\n \n-  e.add_input_operand (src, mode);\n+  e.add_input_operand (src, GET_MODE (src));\n \n-  e.add_input_operand (vl, Pmode);\n+  rtx vlmax = emit_vlmax_vsetvl (mode);\n+  e.add_input_operand (vlmax, Pmode);\n \n   e.add_policy_operand (TAIL_AGNOSTIC, MASK_AGNOSTIC);\n \n-  enum insn_code icode;\n-  icode = code_for_pred_mov (mode);\n-  e.expand (icode, true);\n+  e.expand ((enum insn_code) icode, MEM_P (dest) || MEM_P (src));\n+}\n+\n+static void\n+expand_const_vector (rtx target, rtx src, machine_mode mask_mode)\n+{\n+  machine_mode mode = GET_MODE (target);\n+  scalar_mode elt_mode = GET_MODE_INNER (mode);\n+  if (GET_MODE_CLASS (mode) == MODE_VECTOR_BOOL)\n+    {\n+      rtx elt;\n+      gcc_assert (\n+\tconst_vec_duplicate_p (src, &elt)\n+\t&& (rtx_equal_p (elt, const0_rtx) || rtx_equal_p (elt, const1_rtx)));\n+      emit_pred_op (code_for_pred_mov (mode), target, src, mode);\n+      return;\n+    }\n+\n+  rtx elt;\n+  if (const_vec_duplicate_p (src, &elt))\n+    {\n+      rtx tmp = register_operand (target, mode) ? target : gen_reg_rtx (mode);\n+      /* Element in range -16 ~ 15 integer or 0.0 floating-point,\n+\t we use vmv.v.i instruction.  */\n+      if (satisfies_constraint_vi (src) || satisfies_constraint_Wc0 (src))\n+\temit_pred_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n+      else\n+\temit_pred_op (code_for_pred_broadcast (mode), tmp,\n+\t\t      force_reg (elt_mode, elt), mask_mode);\n+\n+      if (tmp != target)\n+\temit_move_insn (target, tmp);\n+      return;\n+    }\n+\n+  /* TODO: We only support const duplicate vector for now. More cases\n+     will be supported when we support auto-vectorization:\n+\n+       1. series vector.\n+       2. multiple elts duplicate vector.\n+       3. multiple patterns with multiple elts.  */\n }\n \n /* Expand a pre-RA RVV data move from SRC to DEST.\n@@ -140,6 +187,11 @@ bool\n legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n {\n   machine_mode mode = GET_MODE (dest);\n+  if (CONST_VECTOR_P (src))\n+    {\n+      expand_const_vector (dest, src, mask_mode);\n+      return true;\n+    }\n   if (known_ge (GET_MODE_SIZE (mode), BYTES_PER_RISCV_VECTOR)\n       && GET_MODE_CLASS (mode) != MODE_VECTOR_BOOL)\n     {\n@@ -153,12 +205,12 @@ legitimize_move (rtx dest, rtx src, machine_mode mask_mode)\n     {\n       rtx tmp = gen_reg_rtx (mode);\n       if (MEM_P (src))\n-\temit_pred_move (tmp, src, mask_mode);\n+\temit_pred_op (code_for_pred_mov (mode), tmp, src, mask_mode);\n       else\n \temit_move_insn (tmp, src);\n       src = tmp;\n     }\n-  emit_pred_move (dest, src, mask_mode);\n+  emit_pred_op (code_for_pred_mov (mode), dest, src, mask_mode);\n   return true;\n }\n "}, {"sha": "bc0411ea86277e410eddd5a2c305e9b2e0756709", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -4229,6 +4229,19 @@ riscv_print_operand (FILE *file, rtx op, int letter)\n \n   switch (letter)\n     {\n+      case 'v': {\n+\trtx elt;\n+\n+\tif (!const_vec_duplicate_p (op, &elt))\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\telse if (satisfies_constraint_Wc0 (op))\n+\t  asm_fprintf (file, \"0\");\n+\telse if (satisfies_constraint_vi (op))\n+\t  asm_fprintf (file, \"%wd\", INTVAL (elt));\n+\telse\n+\t  output_operand_lossage (\"invalid vector constant\");\n+\tbreak;\n+      }\n       case 'm': {\n \tif (riscv_v_ext_vector_mode_p (mode))\n \t  {"}, {"sha": "defb475f948ba1e0b6c259153a02a19c8a317bd3", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -651,6 +651,9 @@ enum reg_class\n #define FP_ARG_FIRST (FP_REG_FIRST + 10)\n #define FP_ARG_LAST  (FP_ARG_FIRST + MAX_ARGS_IN_REGISTERS - 1)\n \n+/* Helper macro for RVV vsetvl instruction generation.  */\n+#define X0_REGNUM GP_REG_FIRST\n+\n #define CALLEE_SAVED_REG_NUMBER(REGNO)\t\t\t\\\n   ((REGNO) >= 8 && (REGNO) <= 9 ? (REGNO) - 8 :\t\t\\\n    (REGNO) >= 18 && (REGNO) <= 27 ? (REGNO) - 16 : -1)"}, {"sha": "92c4bd0a6a37624432fb1d23fe2635bd7047406f", "filename": "gcc/config/riscv/vector-iterators.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fvector-iterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector-iterators.md?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -71,6 +71,15 @@\n   (VNx1DF \"VNx1BI\") (VNx2DF \"VNx2BI\") (VNx4DF \"VNx4BI\") (VNx8DF \"VNx8BI\")\n ])\n \n+(define_mode_attr VEL [\n+  (VNx1QI \"QI\") (VNx2QI \"QI\") (VNx4QI \"QI\") (VNx8QI \"QI\") (VNx16QI \"QI\") (VNx32QI \"QI\") (VNx64QI \"QI\")\n+  (VNx1HI \"HI\") (VNx2HI \"HI\") (VNx4HI \"HI\") (VNx8HI \"HI\") (VNx16HI \"HI\") (VNx32HI \"HI\")\n+  (VNx1SI \"SI\") (VNx2SI \"SI\") (VNx4SI \"SI\") (VNx8SI \"SI\") (VNx16SI \"SI\")\n+  (VNx1DI \"DI\") (VNx2DI \"DI\") (VNx4DI \"DI\") (VNx8DI \"DI\")\n+  (VNx1SF \"SF\") (VNx2SF \"SF\") (VNx4SF \"SF\") (VNx8SF \"SF\") (VNx16SF \"SF\")\n+  (VNx1DF \"DF\") (VNx2DF \"DF\") (VNx4DF \"DF\") (VNx8DF \"DF\")\n+])\n+\n (define_mode_attr sew [\n   (VNx1QI \"8\") (VNx2QI \"8\") (VNx4QI \"8\") (VNx8QI \"8\") (VNx16QI \"8\") (VNx32QI \"8\") (VNx64QI \"8\")\n   (VNx1HI \"16\") (VNx2HI \"16\") (VNx4HI \"16\") (VNx8HI \"16\") (VNx16HI \"16\") (VNx32HI \"16\")"}, {"sha": "611cc862ca8daac5c0505fc56306f5b6ea48c06d", "filename": "gcc/config/riscv/vector.md", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Fconfig%2Friscv%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fvector.md?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -151,6 +151,26 @@\n   [(set_attr \"type\" \"vmov\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; -----------------------------------------------------------------\n+;; ---- Duplicate Operations\n+;; -----------------------------------------------------------------\n+\n+;; According to GCC internal:\n+;; This pattern only handles duplicates of non-constant inputs.\n+;; Constant vectors go through the movm pattern instead.\n+;; So \"direct_broadcast_operand\" can only be mem or reg, no CONSTANT.\n+(define_expand \"vec_duplicate<mode>\"\n+  [(set (match_operand:V 0 \"register_operand\")\n+\t(vec_duplicate:V\n+\t  (match_operand:<VEL> 1 \"direct_broadcast_operand\")))]\n+  \"TARGET_VECTOR\"\n+  {\n+    riscv_vector::emit_pred_op (\n+      code_for_pred_broadcast (<MODE>mode), operands[0], operands[1], <VM>mode);\n+    DONE;\n+  }\n+)\n+\n ;; -----------------------------------------------------------------\n ;; ---- 6. Configuration-Setting Instructions\n ;; -----------------------------------------------------------------\n@@ -368,7 +388,7 @@\n    vle<sew>.v\\t%0,%3%p1\n    vse<sew>.v\\t%3,%0%p1\n    vmv.v.v\\t%0,%3\n-   vmv.v.i\\t%0,v%3\"\n+   vmv.v.i\\t%0,%v3\"\n   \"&& register_operand (operands[0], <MODE>mode)\n    && register_operand (operands[3], <MODE>mode)\n    && satisfies_constraint_vu (operands[2])\"\n@@ -407,3 +427,34 @@\n   \"\"\n   [(set_attr \"type\" \"vldm,vstm,vimov,vmalu,vmalu\")\n    (set_attr \"mode\" \"<MODE>\")])\n+\n+;; -------------------------------------------------------------------------------\n+;; ---- Predicated Broadcast\n+;; -------------------------------------------------------------------------------\n+;; Includes:\n+;; - 7.5. Vector Strided Instructions (zero stride)\n+;; - 11.16 Vector Integer Move Instructions (vmv.v.x)\n+;; - 13.16 Vector Floating-Point Move Instruction (vfmv.v.f)\n+;; -------------------------------------------------------------------------------\n+\n+(define_insn \"@pred_broadcast<mode>\"\n+  [(set (match_operand:V 0 \"register_operand\"                 \"=vr,  vr,  vr,  vr\")\n+\t(if_then_else:V\n+\t  (unspec:<VM>\n+\t    [(match_operand:<VM> 1 \"vector_mask_operand\"      \" Wc1, Wc1, vm, Wc1\")\n+\t     (match_operand 4 \"vector_length_operand\"         \" rK,  rK,  rK,  rK\")\n+\t     (match_operand 5 \"const_int_operand\"             \"  i,   i,   i,   i\")\n+\t     (match_operand 6 \"const_int_operand\"             \"  i,   i,   i,   i\")\n+\t     (reg:SI VL_REGNUM)\n+\t     (reg:SI VTYPE_REGNUM)] UNSPEC_VPREDICATE)\n+\t  (vec_duplicate:V\n+\t    (match_operand:<VEL> 3 \"direct_broadcast_operand\" \"  r,   f, Wdm, Wdm\"))\n+\t  (match_operand:V 2 \"vector_merge_operand\"           \"vu0, vu0, vu0, vu0\")))]\n+  \"TARGET_VECTOR\"\n+  \"@\n+   vmv.v.x\\t%0,%3\n+   vfmv.v.f\\t%0,%3\n+   vlse<sew>.v\\t%0,%3,zero,%1.t\n+   vlse<sew>.v\\t%0,%3,zero\"\n+  [(set_attr \"type\" \"vimov,vfmov,vlds,vlds\")\n+   (set_attr \"mode\" \"<MODE>\")])"}, {"sha": "2a83afae056e1c1d24718166bac46710177c1849", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/dup-1.c", "status": "added", "additions": 521, "deletions": 0, "changes": 521, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-1.c?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -0,0 +1,521 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fgimple\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f1 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8mf8_t> ((vint8mf8_t *)out_2(D)) = _Literal (vint8mf8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f2 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8mf4_t> ((vint8mf4_t *)out_2(D)) = _Literal (vint8mf4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f3 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8mf2_t> ((vint8mf2_t *)out_2(D)) = _Literal (vint8mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f4 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8m1_t> ((vint8m1_t *)out_2(D)) = _Literal (vint8m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f5 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8m2_t> ((vint8m2_t *)out_2(D)) = _Literal (vint8m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f6 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8m4_t> ((vint8m4_t *)out_2(D)) = _Literal (vint8m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f7 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint8m8_t> ((vint8m8_t *)out_2(D)) = _Literal (vint8m8_t) 0;\n+  return;\n+\n+}\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f8 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8mf8_t> ((vuint8mf8_t *)out_2(D)) = _Literal (vuint8mf8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f9 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8mf4_t> ((vuint8mf4_t *)out_2(D)) = _Literal (vuint8mf4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f10 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8mf2_t> ((vuint8mf2_t *)out_2(D)) = _Literal (vuint8mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f11 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8m1_t> ((vuint8m1_t *)out_2(D)) = _Literal (vuint8m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f12 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8m2_t> ((vuint8m2_t *)out_2(D)) = _Literal (vuint8m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f13 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8m4_t> ((vuint8m4_t *)out_2(D)) = _Literal (vuint8m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f14 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint8m8_t> ((vuint8m8_t *)out_2(D)) = _Literal (vuint8m8_t) 0;\n+  return;\n+\n+}\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f15 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16mf4_t> ((vint16mf4_t *)out_2(D)) = _Literal (vint16mf4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f16 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16mf2_t> ((vint16mf2_t *)out_2(D)) = _Literal (vint16mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f17 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16m1_t> ((vint16m1_t *)out_2(D)) = _Literal (vint16m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f18 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16m2_t> ((vint16m2_t *)out_2(D)) = _Literal (vint16m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f19 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16m4_t> ((vint16m4_t *)out_2(D)) = _Literal (vint16m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f20 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint16m8_t> ((vint16m8_t *)out_2(D)) = _Literal (vint16m8_t) 0;\n+  return;\n+\n+}\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f21 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16mf4_t> ((vuint16mf4_t *)out_2(D)) = _Literal (vuint16mf4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f22 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16mf2_t> ((vuint16mf2_t *)out_2(D)) = _Literal (vuint16mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f23 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16m1_t> ((vuint16m1_t *)out_2(D)) = _Literal (vuint16m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f24 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16m2_t> ((vuint16m2_t *)out_2(D)) = _Literal (vuint16m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f25 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16m4_t> ((vuint16m4_t *)out_2(D)) = _Literal (vuint16m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f26 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint16m8_t> ((vuint16m8_t *)out_2(D)) = _Literal (vuint16m8_t) 0;\n+  return;\n+\n+}\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f27 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint32mf2_t> ((vint32mf2_t *)out_2(D)) = _Literal (vint32mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f28 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint32m1_t> ((vint32m1_t *)out_2(D)) = _Literal (vint32m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f29 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint32m2_t> ((vint32m2_t *)out_2(D)) = _Literal (vint32m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f30 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint32m4_t> ((vint32m4_t *)out_2(D)) = _Literal (vint32m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f31 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint32m8_t> ((vint32m8_t *)out_2(D)) = _Literal (vint32m8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f32 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint32mf2_t> ((vuint32mf2_t *)out_2(D)) = _Literal (vuint32mf2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f33 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint32m1_t> ((vuint32m1_t *)out_2(D)) = _Literal (vuint32m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f34 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint32m2_t> ((vuint32m2_t *)out_2(D)) = _Literal (vuint32m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f35 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint32m4_t> ((vuint32m4_t *)out_2(D)) = _Literal (vuint32m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f36 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint32m8_t> ((vuint32m8_t *)out_2(D)) = _Literal (vuint32m8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f37 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint64m1_t> ((vint64m1_t *)out_2(D)) = _Literal (vint64m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f38 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint64m2_t> ((vint64m2_t *)out_2(D)) = _Literal (vint64m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f39 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint64m4_t> ((vint64m4_t *)out_2(D)) = _Literal (vint64m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f40 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vint64m8_t> ((vint64m8_t *)out_2(D)) = _Literal (vint64m8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f41 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint64m1_t> ((vuint64m1_t *)out_2(D)) = _Literal (vuint64m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f42 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint64m2_t> ((vuint64m2_t *)out_2(D)) = _Literal (vuint64m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f43 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint64m4_t> ((vuint64m4_t *)out_2(D)) = _Literal (vuint64m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f44 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vuint64m8_t> ((vuint64m8_t *)out_2(D)) = _Literal (vuint64m8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f45 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat32m1_t> ((vfloat32m1_t *)out_2(D)) = _Literal (vfloat32m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f46 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat32m2_t> ((vfloat32m2_t *)out_2(D)) = _Literal (vfloat32m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f47 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat32m4_t> ((vfloat32m4_t *)out_2(D)) = _Literal (vfloat32m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f48 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat32m8_t> ((vfloat32m8_t *)out_2(D)) = _Literal (vfloat32m8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f49 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat64m1_t> ((vfloat64m1_t *)out_2(D)) = _Literal (vfloat64m1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f50 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat64m2_t> ((vfloat64m2_t *)out_2(D)) = _Literal (vfloat64m2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f51 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat64m4_t> ((vfloat64m4_t *)out_2(D)) = _Literal (vfloat64m4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f52 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vfloat64m8_t> ((vfloat64m8_t *)out_2(D)) = _Literal (vfloat64m8_t) 0;\n+  return;\n+\n+}\n+\n+/* { dg-final { scan-assembler-times {vmv\\.v\\.i\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1]),\\s*0} 52 } } */"}, {"sha": "c6903039c2ae82133e54613eb3d51af273db8ab5", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/dup-2.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa144175c9ccaa10d7021d00f97aaa9eac59afec/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fdup-2.c?ref=fa144175c9ccaa10d7021d00f97aaa9eac59afec", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3 -fgimple\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f1 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool1_t> ((vbool1_t *)out_2(D)) = _Literal (vbool1_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f2 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool2_t> ((vbool2_t *)out_2(D)) = _Literal (vbool2_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f3 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool4_t> ((vbool4_t *)out_2(D)) = _Literal (vbool4_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f4 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool8_t> ((vbool8_t *)out_2(D)) = _Literal (vbool8_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f5 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool16_t> ((vbool16_t *)out_2(D)) = _Literal (vbool16_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f6 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool32_t> ((vbool32_t *)out_2(D)) = _Literal (vbool32_t) 0;\n+  return;\n+\n+}\n+\n+\n+void __GIMPLE (ssa,guessed_local(1073741824))\n+f7 (void * out)\n+{\n+  __BB(2,guessed_local(1073741824)):\n+  __MEM <vbool64_t> ((vbool64_t *)out_2(D)) = _Literal (vbool64_t) 0;\n+  return;\n+\n+}\n+\n+/* { dg-final { scan-assembler-times {vmclr\\.m\\s+(?:v[0-9]|v[1-2][0-9]|v3[0-1])} 7 } } */"}]}