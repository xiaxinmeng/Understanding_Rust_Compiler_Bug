{"sha": "b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMwYmZkNDAyZjUxMDlhZTU0Y2ViMTEzYTk0OTJiOGVjMzczN2UwZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2009-06-30T18:37:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2009-06-30T18:37:57Z"}, "message": "gcc-defs.exp (gcc-set-multilib-library-path): Delete.\n\ngcc/testsuite/\n\t* lib/gcc-defs.exp (gcc-set-multilib-library-path): Delete.\n\t* lib/target-libpath.exp (ld_library_path_vars): New variable.\n\t(init_ld_library_path_env_vars): New function, replacing the\n\torig_*_saved assignments.  Call it after defining it.\n\t(set_ld_library_path_env_vars): Rewrite to use ld_library_path_vars.\n\t(restore_ld_library_path_env_vars): Likewise.\n\t(add_path, find_libgcc_s): New functions.\n\t* lib/objc.exp (objc_init): Use find_libgcc_s instead of\n\tgcc-set-multilib-library-path.\n\t(objc_target_compile): Don't add \".\" to ld_library_path.\n\tUse add_path.\n\t* lib/gfortran.exp (gfortran_link_flags): Don't add \".\" to\n\tld_library_path.  Use add_path.  Use find_libgcc_s instead of\n\tgcc-set-multilib-library-path.\n\t* lib/g++.exp (g++_link_flags): Likewise.\n\t* lib/obj-c++.exp (obj-c++_link_flags): Likewise.\n\t* lib/c-torture.exp: Do not manipulate ld_library_path at the\n\ttop level; do it...\n\t(c-torture-execute): ...here instead.  Use $ld_library_path_multilib\n\tto tell when this needs to happen.  Use find_libgcc_s instead of\n\tgcc-set-multilib-library-path.\n\t* lib/gcc-dg.exp: Likewise.\n\t* lib/gnat.exp (gnat_target_compile): Don't add \".\" to ld_library_path.\n\t* g++.dg/compat/compat.exp (alt_ld_library_path): Don't add \".\"\n\tunless it is in $ALT_LD_LIBRARY_PATH.\n\t* g++.dg/compat/struct-layout-1.exp (alt_ld_library_path): Likewise.\n\nlibffi/\n\t* testsuite/lib/libffi-dg.exp (libffi-init): Don't add \".\"\n\tto ld_library_path.  Use add_path.  Add just find_libgcc_s\n\tto ld_library_path, not every libgcc multilib directory.\n\nlibgomp/\n\t* testsuite/lib/libgomp.exp (libgomp_init): Don't add \".\" to\n\tld_library_path.  Use add_path.  Add just find_libgcc_s to\n\tld_library_path, not every libgcc multilib directory.\n\t* testsuite/libgomp.c/c.exp (ld_library_path): Don't call\n\tgcc-set-multilib-library-path; rely on $always_ld_library_path instead.\n\t* testsuite/libgomp.c++/c++.exp (ld_library_path): Likewise.\n\tUse add_path.\n\t* testsuite/libgomp.fortran/fortran.exp (ld_library_path): Likewise.\n\nlibjava/\n\t* testsuite/lib/libjava.exp (libjava_init): Just add\n\tfind_libgcc_s to libjava_libgcc_s_path, rather than every\n\tlibgcc multilib directory.\n\t(libjava_arguments): Explain why we add \".\" to ld_library_path.\n\t(gcj_invoke, exec_gij, libjava_invoke): Use add_path.\n\nlibmudflap/\n\t* testsuite/lib/libmudflap.exp (libmudflap-init): Don't add \".\"\n\tto ld_library_path.  Use add_path.  Add just find_libgcc_s to\n\tld_library_path, not every libgcc multilib directory.\n\nlibstdc++-v3/\n\t* testsuite/lib/libstdc++.exp (libstdc++_init): Don't add \".\"\n\tto ld_library_path.  Use add_path.  Add just find_libgcc_s to\n\tld_library_path, not every libgcc multilib directory.\n\nFrom-SVN: r149113", "tree": {"sha": "c5037bf69698d3452e00a9f8d93d824f09752eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5037bf69698d3452e00a9f8d93d824f09752eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/comments", "author": null, "committer": null, "parents": [{"sha": "f82a627cf51e998b3d1c5c02f7e7c00b4aef1b0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f82a627cf51e998b3d1c5c02f7e7c00b4aef1b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f82a627cf51e998b3d1c5c02f7e7c00b4aef1b0c"}], "stats": {"total": 742, "additions": 292, "deletions": 450}, "files": [{"sha": "8287bbb918dc320cdd75955a9f46be1697769744", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,32 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* lib/gcc-defs.exp (gcc-set-multilib-library-path): Delete.\n+\t* lib/target-libpath.exp (ld_library_path_vars): New variable.\n+\t(init_ld_library_path_env_vars): New function, replacing the\n+\torig_*_saved assignments.  Call it after defining it.\n+\t(set_ld_library_path_env_vars): Rewrite to use ld_library_path_vars.\n+\t(restore_ld_library_path_env_vars): Likewise.\n+\t(add_path, find_libgcc_s): New functions.\n+\t* lib/objc.exp (objc_init): Use find_libgcc_s instead of\n+\tgcc-set-multilib-library-path.\n+\t(objc_target_compile): Don't add \".\" to ld_library_path.\n+\tUse add_path.\n+\t* lib/gfortran.exp (gfortran_link_flags): Don't add \".\" to\n+\tld_library_path.  Use add_path.  Use find_libgcc_s instead of\n+\tgcc-set-multilib-library-path.\n+\t* lib/g++.exp (g++_link_flags): Likewise.\n+\t* lib/obj-c++.exp (obj-c++_link_flags): Likewise.\n+\t* lib/c-torture.exp: Do not manipulate ld_library_path at the\n+\ttop level; do it...\n+\t(c-torture-execute): ...here instead.  Use $ld_library_path_multilib\n+\tto tell when this needs to happen.  Use find_libgcc_s instead of\n+\tgcc-set-multilib-library-path.\n+\t* lib/gcc-dg.exp: Likewise.\n+\t* lib/gnat.exp (gnat_target_compile): Don't add \".\" to ld_library_path.\n+\t* g++.dg/compat/compat.exp (alt_ld_library_path): Don't add \".\"\n+\tunless it is in $ALT_LD_LIBRARY_PATH.\n+\t* g++.dg/compat/struct-layout-1.exp (alt_ld_library_path): Likewise.\n+\n 2009-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr12.adb: New test."}, {"sha": "0ca91bfb05939dbf5d4565b2a4798bb35b8f6224", "filename": "gcc/testsuite/g++.dg/compat/compat.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -103,14 +103,14 @@ set sid \"cp_compat\"\n # are different.\n set use_alt 0\n set same_alt 0\n-set alt_ld_library_path \".\"\n+set alt_ld_library_path \"\"\n if [info exists ALT_CXX_UNDER_TEST] then {\n     set use_alt 1\n     if [string match \"same\" $ALT_CXX_UNDER_TEST] then {\n \tset same_alt 1\n     } else {\n \tif [info exists ALT_LD_LIBRARY_PATH] then {\n-\t    append alt_ld_library_path \":${ALT_LD_LIBRARY_PATH}\"\n+\t    set alt_ld_library_path $ALT_LD_LIBRARY_PATH\n \t}\n     }\n }"}, {"sha": "f8c26512710bc437cfacac77993c1b03fc21604f", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -109,14 +109,14 @@ set sid \"cp_compat\"\n # are different.\n set use_alt 0\n set same_alt 0\n-set alt_ld_library_path \".\"\n+set alt_ld_library_path \"\"\n if [info exists ALT_CXX_UNDER_TEST] then {\n     set use_alt 1\n     if [string match \"same\" $ALT_CXX_UNDER_TEST] then {\n \tset same_alt 1\n     } else {\n \tif [info exists ALT_LD_LIBRARY_PATH] then {\n-\t    append alt_ld_library_path \":${ALT_LD_LIBRARY_PATH}\"\n+\t    set alt_ld_library_path $ALT_LD_LIBRARY_PATH\n \t}\n     }\n }"}, {"sha": "bc14845b2fe2a73b38a7b1799642c2891e9fe0a7", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -54,15 +54,6 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n-global orig_environment_saved\n-\n-# This file may be sourced, so don't override environment settings\n-# that have been previously setup.\n-if { $orig_environment_saved == 0 } {\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n-    set_ld_library_path_env_vars\n-}\n-\n #\n # c-torture-compile -- runs the Tege C-torture test\n #\n@@ -108,6 +99,13 @@ proc c-torture-compile { src option } {\n #\n proc c-torture-execute { sources args } {\n     global tmpdir tool srcdir output compiler_conditional_xfail_data\n+    global ld_library_path ld_library_path_multilib GCC_UNDER_TEST\n+\n+    if { \"$ld_library_path_multilib\"\n+\t != \"[board_info target multilib_flags]\" } {\n+\tset ld_library_path [find_libgcc_s $GCC_UNDER_TEST]\n+\tset_ld_library_path_env_vars\n+    }\n \n     # Use the first source filename given as the filename under test.\n     set src [lindex $sources 0]"}, {"sha": "f31bbec588ae3ab960d16fbbb3a0ca59d2e0c3a6", "filename": "gcc/testsuite/lib/g++.exp", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fg%2B%2B.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -106,52 +106,51 @@ proc g++_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \".\"\n+    set ld_library_path \"\"\n \n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n     if { $gccpath != \"\" } {\n       if [file exists \"${gccpath}/lib/libstdc++.a\"] {\n-          append ld_library_path \":${gccpath}/lib\"\n+\t  add_path ld_library_path \"${gccpath}/lib\"\n       }\n       if [file exists \"${gccpath}/libg++/libg++.a\"] {\n           append flags \"-L${gccpath}/libg++ \"\n-          append ld_library_path \":${gccpath}/libg++\"\n+\t  add_path ld_library_path \"${gccpath}/libg++\"\n       }\n       if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n           append flags \"-L${gccpath}/libstdc++ \"\n-          append ld_library_path \":${gccpath}/libstdc++\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++\"\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-          append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}.\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] {\n \t  append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n       }\n-\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n       }\n       if [file exists \"${gccpath}/librx/librx.a\"] {\n           append flags \"-L${gccpath}/librx \"\n       }\n-      append ld_library_path [gcc-set-multilib-library-path $GXX_UNDER_TEST]\n+      add_path ld_library_path [find_libgcc_s $GXX_UNDER_TEST]\n     } else {\n       global tool_root_dir\n \n       set libgpp [lookfor_file ${tool_root_dir} libg++]\n       if { $libgpp != \"\" } {\n           append flags \"-L${libgpp} \"\n-          append ld_library_path \":${libgpp}\"\n+\t  add_path ld_library_path ${libgpp}\n       }\n       set libstdcpp [lookfor_file ${tool_root_dir} libstdc++]\n       if { $libstdcpp != \"\" } {\n           append flags \"-L${libstdcpp} \"\n-          append ld_library_path \":${libstdcpp}\"\n+\t  add_path ld_library_path ${libstdcpp}\n       }\n       set libiberty [lookfor_file ${tool_root_dir} libiberty]\n       if { $libiberty != \"\" } {"}, {"sha": "0a5d6a38d0d95d9ba03d7ea18f996dfad948223f", "filename": "gcc/testsuite/lib/gcc-defs.exp", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-defs.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -233,35 +233,3 @@ proc dg-additional-files-options { options source } {\n \n     return $options\n }\n-\n-# Return a colon-separate list of directories to search for libraries\n-# for COMPILER, including multilib directories.\n-\n-proc gcc-set-multilib-library-path { compiler } {\n-    global rootme\n-\n-    # ??? rootme will not be set when testing an installed compiler.\n-    # In that case, we should perhaps use some other method to find\n-    # libraries.\n-    if {![info exists rootme]} {\n-\treturn \"\"\n-    }\n-\n-    set libpath \":${rootme}\"\n-    set compiler [lindex $compiler 0]\n-    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\tforeach i \"[exec $compiler --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t\tcontinue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${rootme}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t\tappend libpath \":${rootme}/${mldir}\"\n-\t    }\n-\t}\n-    }\n-\n-    return $libpath\n-}"}, {"sha": "09b0cf4b49a72001eef3b6356a16d60c61fdf380", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -65,15 +65,6 @@ if ![info exists GCC_UNDER_TEST] {\n     set GCC_UNDER_TEST \"[find_gcc]\"\n }\n \n-global orig_environment_saved\n-\n-# This file may be sourced, so don't override environment settings\n-# that have been previously setup.\n-if { $orig_environment_saved == 0 } {\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n-    set_ld_library_path_env_vars\n-}\n-\n # Define gcc callbacks for dg.exp.\n \n proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n@@ -117,6 +108,14 @@ proc gcc-dg-test-1 { target_compile prog do_what extra_tool_flags } {\n \t    set output_file \"[file rootname [file tail $prog]].o\"\n \t}\n \t\"run\" {\n+\t    global ld_library_path ld_library_path_multilib GCC_UNDER_TEST\n+\n+\t    if { \"$ld_library_path_multilib\"\n+\t\t != \"[board_info target multilib_flags]\" } {\n+\t\tset ld_library_path [find_libgcc_s $GCC_UNDER_TEST]\n+\t\tset_ld_library_path_env_vars\n+\t    }\n+\n \t    set compile_type \"executable\"\n \t    # FIXME: \"./\" is to cope with \".\" not being in $PATH.\n \t    # Should this be handled elsewhere?"}, {"sha": "5c35e031d2b492d0c2140b88293eab6965a697d4", "filename": "gcc/testsuite/lib/gfortran.exp", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgfortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgfortran.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -84,7 +84,7 @@ proc gfortran_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \".\"\n+    set ld_library_path \"\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n@@ -94,20 +94,19 @@ proc gfortran_link_flags { paths } {\n           # for uninstalled testing.\n           append flags \"-B${gccpath}/libgfortran/.libs \"\n           append flags \"-L${gccpath}/libgfortran/.libs \"\n-          append ld_library_path \":${gccpath}/libgfortran/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libgfortran/.libs\"\n       }\n       if [file exists \"${gccpath}/libgfortran/.libs/libgfortran.${shlib_ext}\"] {\n \t  append flags \"-L${gccpath}/libgfortran/.libs \"\n-\t  append ld_library_path \":${gccpath}/libgfortran/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libgfortran/.libs\"\n       }\n       if [file exists \"${gccpath}/libgfortran/libgforbegin.a\"] {\n           append flags \"-L${gccpath}/libgfortran \"\n       }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n       }\n-      append ld_library_path \\\n-\t[gcc-set-multilib-library-path $GFORTRAN_UNDER_TEST]\n+      add_path ld_library_path [find_libgcc_s $GFORTRAN_UNDER_TEST]\n     }\n \n     set_ld_library_path_env_vars"}, {"sha": "bb95487e8bd656e229dddf543c74ad8579214e3a", "filename": "gcc/testsuite/lib/gnat.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fgnat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgnat.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -147,7 +147,7 @@ proc gnat_target_compile { source dest type options } {\n         set GNAT_UNDER_TEST \"$GNAT_UNDER_TEST_ORIG $gnat_rts_opt\"\n     }\n \n-    set ld_library_path \".:${gnat_libgcc_s_path}\"\n+    set ld_library_path ${gnat_libgcc_s_path}\n     lappend options \"compiler=$GNAT_UNDER_TEST -q -f\"\n     lappend options \"timeout=[timeout_value]\"\n "}, {"sha": "4feb8c178c8f36710c31c32b4d0ed2543cc03469", "filename": "gcc/testsuite/lib/obj-c++.exp", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobj-c%2B%2B.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -106,30 +106,30 @@ proc obj-c++_link_flags { paths } {\n     set gccpath ${paths}\n     set libio_dir \"\"\n     set flags \"\"\n-    set ld_library_path \".\"\n+    set ld_library_path \"\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n \n     if { $gccpath != \"\" } {\n       if [file exists \"${gccpath}/lib/libstdc++.a\"] {\n-          append ld_library_path \":${gccpath}/lib\"\n+\t  add_path ld_library_path \"${gccpath}/lib\"\n       }\n       if [file exists \"${gccpath}/libg++/libg++.a\"] {\n           append flags \"-L${gccpath}/libg++ \"\n-          append ld_library_path \":${gccpath}/libg++\"\n+\t  add_path ld_library_path \"${gccpath}/libg++\"\n       }\n       if [file exists \"${gccpath}/libstdc++/libstdc++.a\"] {\n           append flags \"-L${gccpath}/libstdc++ \"\n-          append ld_library_path \":${gccpath}/libstdc++\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++\"\n       }\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.a\"] {\n           append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-          append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       # Look for libstdc++.${shlib_ext}.\n       if [file exists \"${gccpath}/libstdc++-v3/src/.libs/libstdc++.${shlib_ext}\"] {\n \t  append flags \" -L${gccpath}/libstdc++-v3/src/.libs \"\n-\t  append ld_library_path \":${gccpath}/libstdc++-v3/src/.libs\"\n+\t  add_path ld_library_path \"${gccpath}/libstdc++-v3/src/.libs\"\n       }\n       if [file exists \"${gccpath}/libiberty/libiberty.a\"] {\n           append flags \"-L${gccpath}/libiberty \"\n@@ -158,23 +158,21 @@ proc obj-c++_link_flags { paths } {\n       if { $libobjc_dir != \"\" } {\n \t  set libobjc_dir [file dirname ${libobjc_dir}]\n \t  append flags \"-L${libobjc_dir}\"\n-\t  append ld_library_path \":${libobjc_dir}\"\n+\t  add_path ld_library_path ${libobjc_dir}\n       }\n-      append ld_library_path \\\n-\t  [gcc-set-multilib-library-path $OBJCXX_UNDER_TEST]\n-\n+      add_path ld_library_path [find_libgcc_s $OBJCXX_UNDER_TEST]\n     } else {\n       global tool_root_dir;\n \n       set libgpp [lookfor_file ${tool_root_dir} libg++];\n       if { $libgpp != \"\" } {\n           append flags \"-L${libgpp} \";\n-          append ld_library_path \":${libgpp}\"\n+\t  add_path ld_library_path ${libgpp}\n       }\n       set libstdcpp [lookfor_file ${tool_root_dir} libstdc++];\n       if { $libstdcpp != \"\" } {\n           append flags \"-L${libstdcpp} \";\n-          append ld_library_path \":${libstdcpp}\"\n+\t  add_path ld_library_path ${libstdcpp}\n       }\n       set libiberty [lookfor_file ${tool_root_dir} libiberty];\n       if { $libiberty != \"\" } {"}, {"sha": "c0eeb02bd93bf25a166ac5288779dc157773697d", "filename": "gcc/testsuite/lib/objc.exp", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Fobjc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fobjc.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -121,7 +121,7 @@ proc objc_init { args } {\n \n     objc_maybe_build_wrapper \"${tmpdir}/objc-testglue.o\"\n \n-    set objc_libgcc_s_path [gcc-set-multilib-library-path $OBJC_UNDER_TEST]\n+    set objc_libgcc_s_path [find_libgcc_s $OBJC_UNDER_TEST]\n }\n \n proc objc_target_compile { source dest type options } {\n@@ -135,7 +135,7 @@ proc objc_target_compile { source dest type options } {\n     global objc_libgcc_s_path\n     global shlib_ext\n \n-    set ld_library_path \".:${objc_libgcc_s_path}\"\n+    set ld_library_path ${objc_libgcc_s_path}\n     lappend options \"libs=-lobjc\"\n     set shlib_ext [get_shlib_extension]\n     verbose \"shared lib extension: $shlib_ext\"\n@@ -191,7 +191,7 @@ proc objc_target_compile { source dest type options } {\n \tset libobjc_dir [file dirname ${libobjc_dir}]\n \tset objc_link_flags \"-L${libobjc_dir}\"\n \tlappend options \"additional_flags=${objc_link_flags}\"\n-\tappend ld_library_path \":${libobjc_dir}\"\n+\tadd_path ld_library_path ${libobjc_dir}\n     }\n     if { $type == \"precompiled_header\" } {\n \t# If we generating a precompiled header, we have say this is an"}, {"sha": "49accd09687f59af270ad9bc9304fafdadeabf96", "filename": "gcc/testsuite/lib/target-libpath.exp", "status": "modified", "additions": 155, "deletions": 223, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-libpath.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -16,253 +16,142 @@\n \n # This file was contributed by John David Anglin (dave.anglin@nrc-cnrc.gc.ca)\n \n+# A list of ld library path environment variables that might need to be\n+# defined.\n+#\n+# Some variables represent ABI-specific paths, and if these variables\n+# aren't defined, the dynamic loader might fall back on a more general\n+# variable.  We must do the same when trying to read the current setting\n+# of such a path.  Each element of this list is therefore itself a list:\n+# the first element of each sublist specifies the name of the variable,\n+# and the other elements specify fallback alternatives.  We use FOO as a\n+# shorthand for { FOO }.\n+set ld_library_path_vars {\n+    LD_LIBRARY_PATH\n+    LD_RUN_PATH\n+    SHLIB_PATH\n+    { LD_LIBRARYN32_PATH LD_LIBRARY_PATH }\n+    { LD_LIBRARY64_PATH LD_LIBRARY_PATH }\n+    { LD_LIBRARY_PATH_32 LD_LIBRARY_PATH }\n+    { LD_LIBRARY_PATH_64 LD_LIBRARY_PATH }\n+    DYLD_LIBRARY_PATH\n+}\n+\n+# Set up the global orig_FOO_saved variables.  We define this as a function\n+# to avoid polluting the global namespace with local variables.\n+proc init_ld_library_path_env_vars { } {\n+    global ld_library_path_vars\n+\n+    foreach spec $ld_library_path_vars {\n+\tset var orig_[string tolower [lindex $spec 0]]_saved\n+\tglobal $var\n+\tset $var 0\n+    }\n+}\n+init_ld_library_path_env_vars\n set orig_environment_saved 0\n-set orig_ld_library_path_saved 0\n-set orig_ld_run_path_saved 0\n-set orig_shlib_path_saved 0\n-set orig_ld_libraryn32_path_saved 0\n-set orig_ld_library64_path_saved 0\n-set orig_ld_library_path_32_saved 0\n-set orig_ld_library_path_64_saved 0\n-set orig_dyld_library_path_saved 0\n set orig_gcc_exec_prefix_saved 0\n set orig_gcc_exec_prefix_checked 0\n-\n+set ld_library_path_multilib unset\n \n #######################################\n # proc set_ld_library_path_env_vars { }\n #######################################\n \n proc set_ld_library_path_env_vars { } {\n-  global ld_library_path\n-  global orig_environment_saved\n-  global orig_ld_library_path_saved\n-  global orig_ld_run_path_saved\n-  global orig_shlib_path_saved\n-  global orig_ld_libraryn32_path_saved\n-  global orig_ld_library64_path_saved\n-  global orig_ld_library_path_32_saved\n-  global orig_ld_library_path_64_saved\n-  global orig_dyld_library_path_saved\n-  global orig_gcc_exec_prefix_saved\n-  global orig_gcc_exec_prefix_checked\n-  global orig_ld_library_path\n-  global orig_ld_run_path\n-  global orig_shlib_path\n-  global orig_ld_libraryn32_path\n-  global orig_ld_library64_path\n-  global orig_ld_library_path_32\n-  global orig_ld_library_path_64\n-  global orig_dyld_library_path\n-  global orig_gcc_exec_prefix\n-  global TEST_GCC_EXEC_PREFIX\n-  global env\n-\n-  # Save the original GCC_EXEC_PREFIX.\n-  if { $orig_gcc_exec_prefix_checked == 0 } {\n-    if [info exists env(GCC_EXEC_PREFIX)] {\n-      set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n-      set orig_gcc_exec_prefix_saved 1\n+    global ld_library_path\n+    global orig_environment_saved\n+    global ld_library_path_vars\n+    global orig_gcc_exec_prefix_saved\n+    global orig_gcc_exec_prefix_checked\n+    global orig_gcc_exec_prefix\n+    global TEST_GCC_EXEC_PREFIX\n+    global ld_library_path_multilib\n+    global env\n+\n+    # Save the original GCC_EXEC_PREFIX.\n+    if { $orig_gcc_exec_prefix_checked == 0 } {\n+\tif [info exists env(GCC_EXEC_PREFIX)] {\n+\t    set orig_gcc_exec_prefix \"$env(GCC_EXEC_PREFIX)\"\n+\t    set orig_gcc_exec_prefix_saved 1\n+\t}\n+\tset orig_gcc_exec_prefix_checked 1\n     }\n-    set orig_gcc_exec_prefix_checked 1\n-  }\n-\n-  # Set GCC_EXEC_PREFIX for the compiler under test to pick up files not in\n-  # the build tree from a specified location (normally the install tree).\n-  if [info exists TEST_GCC_EXEC_PREFIX] {\n-    setenv GCC_EXEC_PREFIX \"$TEST_GCC_EXEC_PREFIX\"\n-  }\n \n-  # Setting the ld library path causes trouble when testing cross-compilers.\n-  if { [is_remote target] } {\n-    return\n-  }\n-\n-  if { $orig_environment_saved == 0 } {\n-    set orig_environment_saved 1\n-\n-    # Save the original environment.\n-    if [info exists env(LD_LIBRARY_PATH)] {\n-      set orig_ld_library_path \"$env(LD_LIBRARY_PATH)\"\n-      set orig_ld_library_path_saved 1\n-    }\n-    if [info exists env(LD_RUN_PATH)] {\n-      set orig_ld_run_path \"$env(LD_RUN_PATH)\"\n-      set orig_ld_run_path_saved 1\n-    }\n-    if [info exists env(SHLIB_PATH)] {\n-      set orig_shlib_path \"$env(SHLIB_PATH)\"\n-      set orig_shlib_path_saved 1\n-    }\n-    if [info exists env(LD_LIBRARYN32_PATH)] {\n-      set orig_ld_libraryn32_path \"$env(LD_LIBRARYN32_PATH)\"\n-      set orig_ld_libraryn32_path_saved 1\n-    }\n-    if [info exists env(LD_LIBRARY64_PATH)] {\n-      set orig_ld_library64_path \"$env(LD_LIBRARY64_PATH)\"\n-      set orig_ld_library64_path_saved 1\n-    }\n-    if [info exists env(LD_LIBRARY_PATH_32)] {\n-      set orig_ld_library_path_32 \"$env(LD_LIBRARY_PATH_32)\"\n-      set orig_ld_library_path_32_saved 1\n-    }\n-    if [info exists env(LD_LIBRARY_PATH_64)] {\n-      set orig_ld_library_path_64 \"$env(LD_LIBRARY_PATH_64)\"\n-      set orig_ld_library_path_64_saved 1\n+    # Set GCC_EXEC_PREFIX for the compiler under test to pick up files not in\n+    # the build tree from a specified location (normally the install tree).\n+    if [info exists TEST_GCC_EXEC_PREFIX] {\n+\tsetenv GCC_EXEC_PREFIX \"$TEST_GCC_EXEC_PREFIX\"\n     }\n-    if [info exists env(DYLD_LIBRARY_PATH)] {\n-      set orig_dyld_library_path \"$env(DYLD_LIBRARY_PATH)\"\n-      set orig_dyld_library_path_saved 1\n-    }\n-  }\n \n-  # We need to set ld library path in the environment.  Currently,\n-  # unix.exp doesn't set the environment correctly for all systems.\n-  # It only sets SHLIB_PATH and LD_LIBRARY_PATH when it executes a\n-  # program.  We also need the environment set for compilations, etc.\n-  #\n-  # On IRIX 6, we have to set variables akin to LD_LIBRARY_PATH, but\n-  # called LD_LIBRARYN32_PATH (for the N32 ABI) and LD_LIBRARY64_PATH\n-  # (for the 64-bit ABI).  The same applies to Darwin (DYLD_LIBRARY_PATH),\n-  # Solaris 32 bit (LD_LIBRARY_PATH_32), Solaris 64 bit (LD_LIBRARY_PATH_64),\n-  # and HP-UX (SHLIB_PATH).  In some cases, the variables are independent\n-  # of LD_LIBRARY_PATH, and in other cases LD_LIBRARY_PATH is used if the\n-  # variable is not defined.\n-  #\n-  # Doing this is somewhat of a hack as ld_library_path gets repeated in\n-  # SHLIB_PATH and LD_LIBRARY_PATH when unix_load sets these variables.\n-  if { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY_PATH \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARY_PATH \"$ld_library_path\"\n-  }\n-  if { $orig_ld_run_path_saved } {\n-    setenv LD_RUN_PATH \"$ld_library_path:$orig_ld_run_path\"\n-  } else {\n-    setenv LD_RUN_PATH \"$ld_library_path\"\n-  }\n-  # The default shared library dynamic path search for 64-bit\n-  # HP-UX executables searches LD_LIBRARY_PATH before SHLIB_PATH.\n-  # LD_LIBRARY_PATH isn't used for 32-bit executables.  Thus, we\n-  # set LD_LIBRARY_PATH and SHLIB_PATH as if they were independent.\n-  if { $orig_shlib_path_saved } {\n-    setenv SHLIB_PATH \"$ld_library_path:$orig_shlib_path\"\n-  } else {\n-    setenv SHLIB_PATH \"$ld_library_path\"\n-  }\n-  if { $orig_ld_libraryn32_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_libraryn32_path\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARYN32_PATH \"$ld_library_path\"\n-  }\n-  if { $orig_ld_library64_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library64_path\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARY64_PATH \"$ld_library_path\"\n-  }\n-  if { $orig_ld_library_path_32_saved } {\n-    setenv LD_LIBRARY_PATH_32 \"$ld_library_path:$orig_ld_library_path_32\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY_PATH_32 \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARY_PATH_32 \"$ld_library_path\"\n-  }\n-  if { $orig_ld_library_path_64_saved } {\n-    setenv LD_LIBRARY_PATH_64 \"$ld_library_path:$orig_ld_library_path_64\"\n-  } elseif { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY_PATH_64 \"$ld_library_path:$orig_ld_library_path\"\n-  } else {\n-    setenv LD_LIBRARY_PATH_64 \"$ld_library_path\"\n-  }\n-  if { $orig_dyld_library_path_saved } {\n-    setenv DYLD_LIBRARY_PATH \"$ld_library_path:$orig_dyld_library_path\"\n-  } else {\n-    setenv DYLD_LIBRARY_PATH \"$ld_library_path\"\n-  }\n+    # Setting the ld library path causes trouble when testing cross-compilers.\n+    if { [is_remote target] } {\n+\treturn\n+    }\n \n-  verbose -log \"set_ld_library_path_env_vars: ld_library_path=$ld_library_path\"\n+    set ld_library_path_multilib [board_info target multilib_flags]\n+\n+    foreach spec $ld_library_path_vars {\n+\tset var [lindex $spec 0]\n+\tset lvar [string tolower $var]\n+\n+\tglobal orig_$lvar\n+\tglobal orig_${lvar}_saved\n+\n+\tif { $orig_environment_saved == 0 } {\n+\t    if [info exists env($var)] {\n+\t\tset orig_$lvar [set env($var)]\n+\t\tset orig_${lvar}_saved 1\n+\t    }\n+\t}\n+\tset value $ld_library_path\n+\tforeach extra $spec {\n+\t    set lextra [string tolower $extra]\n+\t    if [set orig_${lextra}_saved] {\n+\t\tadd_path value [set orig_$lextra]\n+\t\tbreak\n+\t    }\n+\t}\n+\tsetenv $var $value\n+    }\n+    set orig_environment_saved 1\n+    verbose -log \"set_ld_library_path_env_vars: ld_library_path=$ld_library_path\"\n }\n \n #######################################\n # proc restore_ld_library_path_env_vars { }\n #######################################\n \n proc restore_ld_library_path_env_vars { } {\n-  global orig_environment_saved\n-  global orig_ld_library_path_saved\n-  global orig_ld_run_path_saved\n-  global orig_shlib_path_saved\n-  global orig_ld_libraryn32_path_saved\n-  global orig_ld_library64_path_saved\n-  global orig_ld_library_path_32_saved\n-  global orig_ld_library_path_64_saved\n-  global orig_dyld_library_path_saved\n-  global orig_gcc_exec_prefix_saved\n-  global orig_ld_library_path\n-  global orig_ld_run_path\n-  global orig_shlib_path\n-  global orig_ld_libraryn32_path\n-  global orig_ld_library64_path\n-  global orig_ld_library_path_32\n-  global orig_ld_library_path_64\n-  global orig_dyld_library_path\n-  global orig_gcc_exec_prefix\n-  global env\n+    global orig_environment_saved\n+    global ld_library_path_vars\n+    global orig_gcc_exec_prefix_saved\n+    global orig_gcc_exec_prefix\n+    global env\n+\n+    if { $orig_gcc_exec_prefix_saved } {\n+\tsetenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n+    } elseif [info exists env(GCC_EXEC_PREFIX)] {\n+\tunsetenv GCC_EXEC_PREFIX\n+    }\n \n-  if { $orig_gcc_exec_prefix_saved } {\n-    setenv GCC_EXEC_PREFIX \"$orig_gcc_exec_prefix\"\n-  } elseif [info exists env(GCC_EXEC_PREFIX)] {\n-    unsetenv GCC_EXEC_PREFIX\n-  }\n+    if { $orig_environment_saved == 0 } {\n+\treturn\n+    }\n+\n+    foreach spec $ld_library_path_vars {\n+\tset var [lindex $spec 0]\n+\tset lvar [string tolower $var]\n \n-  if { $orig_environment_saved == 0 } {\n-    return\n-  }\n+\tglobal orig_$lvar\n+\tglobal orig_${lvar}_saved\n \n-  if { $orig_ld_library_path_saved } {\n-    setenv LD_LIBRARY_PATH \"$orig_ld_library_path\"\n-  } elseif [info exists env(LD_LIBRARY_PATH)] {\n-    unsetenv LD_LIBRARY_PATH\n-  }\n-  if { $orig_ld_run_path_saved } {\n-    setenv LD_RUN_PATH \"$orig_ld_run_path\"\n-  } elseif [info exists env(LD_RUN_PATH)] {\n-    unsetenv LD_RUN_PATH\n-  }\n-  if { $orig_shlib_path_saved } {\n-    setenv SHLIB_PATH \"$orig_shlib_path\"\n-  } elseif [info exists env(SHLIB_PATH)] {\n-    unsetenv SHLIB_PATH\n-  }\n-  if { $orig_ld_libraryn32_path_saved } {\n-    setenv LD_LIBRARYN32_PATH \"$orig_ld_libraryn32_path\"\n-  } elseif [info exists env(LD_LIBRARYN32_PATH)] {\n-    unsetenv LD_LIBRARYN32_PATH\n-  }\n-  if { $orig_ld_library64_path_saved } {\n-    setenv LD_LIBRARY64_PATH \"$orig_ld_library64_path\"\n-  } elseif [info exists env(LD_LIBRARY64_PATH)] {\n-    unsetenv LD_LIBRARY64_PATH\n-  }\n-  if { $orig_ld_library_path_32_saved } {\n-    setenv LD_LIBRARY_PATH_32 \"$orig_ld_library_path_32\"\n-  } elseif [info exists env(LD_LIBRARY_PATH_32)] {\n-    unsetenv LD_LIBRARY_PATH_32\n-  }\n-  if { $orig_ld_library_path_64_saved } {\n-    setenv LD_LIBRARY_PATH_64 \"$orig_ld_library_path_64\"\n-  } elseif [info exists env(LD_LIBRARY_PATH_64)] {\n-    unsetenv LD_LIBRARY_PATH_64\n-  }\n-  if { $orig_dyld_library_path_saved } {\n-    setenv DYLD_LIBRARY_PATH \"$orig_dyld_library_path\"\n-  } elseif [info exists env(DYLD_LIBRARY_PATH)] {\n-    unsetenv DYLD_LIBRARY_PATH\n-  }\n+\tif [set orig_${lvar}_saved] {\n+\t    setenv $var [set orig_$lvar]\n+\t} elseif [info exists env($var)] {\n+\t    unsetenv $var\n+\t}\n+    }\n }\n \n #######################################\n@@ -284,3 +173,46 @@ proc get_shlib_extension { } {\n     return $shlib_ext\n }\n \n+# If DIR is not an empty string, add it to the end of variable UPPATH,\n+# which represents a colon-separated path.\n+proc add_path { uppath dir } {\n+    upvar $uppath path\n+\n+    if { $dir != \"\" } {\n+\tif { [info exists path] && $path != \"\" } {\n+\t    append path \":\"\n+\t}\n+\tappend path $dir\n+    }\n+}\n+\n+# Return the directory that contains the shared libgcc for this multilib,\n+# or \"\" if we don't know.\n+proc find_libgcc_s { compiler } {\n+    # Remote host testing requires an installed compiler (get_multilibs\n+    # imposes the same restriction).  It is up to the board file or\n+    # tester to make sure that the installed compiler's libraries\n+    # can be found in the library path.\n+    if { [is_remote host] } {\n+\treturn \"\"\n+    }\n+    # The same goes if we can't find the compiler.\n+    set compiler_path [which [lindex $compiler 0]]\n+    if { $compiler_path == \"\" } {\n+\treturn \"\"\n+    }\n+    # Run the compiler with the current multilib flags to get the\n+    # relative multilib directory.\n+    set subdir [eval exec $compiler [board_info target multilib_flags] \\\n+\t\t    --print-multi-directory]\n+    # We are only interested in cases where libgcc_s is in the same\n+    # directory as the compiler itself.\n+    set dir [file dirname $compiler_path]\n+    if { $subdir != \".\" } {\n+\tset dir [file join $dir $subdir]\n+    }\n+    if { ![file exists $dir] } {\n+\treturn \"\"\n+    }\n+    return $dir\n+}"}, {"sha": "a44375dd5cd1b18dcaf5889b285acda55e48f77e", "filename": "libffi/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,9 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* testsuite/lib/libffi-dg.exp (libffi-init): Don't add \".\"\n+\tto ld_library_path.  Use add_path.  Add just find_libgcc_s\n+\tto ld_library_path, not every libgcc multilib directory.\n+\n 2009-06-16  Wim Lewis  <wiml@hhhh.org>\n \n \t* src/powerpc/ffi.c: Avoid clobbering cr3 and cr4, which are"}, {"sha": "1481360a54080a956b41bcd334d0098454075619", "filename": "libffi/testsuite/lib/libffi-dg.exp", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flib%2Flibffi-dg.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -108,32 +108,11 @@ proc libffi-init { args } {\n     verbose \"libstdc++ $blddircxx\"\n \n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n-    if {$gccdir != \"\"} {\n-\tset gccdir [file dirname $gccdir]\n-    }\n-    verbose \"gccdir $gccdir\"\n-\n-    set ld_library_path \".\"\n-    append ld_library_path \":${gccdir}\"\n-\n-    set compiler \"${gccdir}/xgcc\"\n-    if { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\tforeach i \"[exec $compiler --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t\tcontinue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t\tappend ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t}\n-    }\n+    add_path ld_library_path [find_libgcc_s \"$gccdir/xgcc\"]\n     # add the library path for libffi.\n-    append ld_library_path \":${blddirffi}/.libs\"\n+    add_path ld_library_path \"${blddirffi}/.libs\"\n     # add the library path for libstdc++ as well.\n-    append ld_library_path \":${blddircxx}/src/.libs\"\n+    add_path ld_library_path \"${blddircxx}/src/.libs\"\n \n     verbose \"ld_library_path: $ld_library_path\"\n "}, {"sha": "98a379458decdd2e009e68fc98ff6315db56240a", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,14 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* testsuite/lib/libgomp.exp (libgomp_init): Don't add \".\" to\n+\tld_library_path.  Use add_path.  Add just find_libgcc_s to\n+\tld_library_path, not every libgcc multilib directory.\n+\t* testsuite/libgomp.c/c.exp (ld_library_path): Don't call\n+\tgcc-set-multilib-library-path; rely on $always_ld_library_path instead.\n+\t* testsuite/libgomp.c++/c++.exp (ld_library_path): Likewise.\n+\tUse add_path.\n+\t* testsuite/libgomp.fortran/fortran.exp (ld_library_path): Likewise.\n+\n 2009-06-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* Makefile.am (LTLDFLAGS): Define."}, {"sha": "5a7ec5f9ca5bd1ec26f2359002eeb45d2992c9fe", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -86,39 +86,8 @@ proc libgomp_init { args } {\n \tset CFLAGS \"\"\n     }\n \n-    # Locate libgcc.a so we don't need to account for different values of\n-    # SHLIB_EXT on different platforms\n-    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n-    if {$gccdir != \"\"} {\n-        set gccdir [file dirname $gccdir]\n-    }\n-\n-    # Compute what needs to be put into LD_LIBRARY_PATH\n-    set always_ld_library_path \".:${blddir}/.libs\"\n-\n-    # Compute what needs to be added to the existing LD_LIBRARY_PATH.\n-    if {$gccdir != \"\"} {\n-\t# Add AIX pthread directory first.\n-\tif { [llength [glob -nocomplain ${gccdir}/pthread/libgcc_s*.a]] >= 1 } {\n-\t    append always_ld_library_path \":${gccdir}/pthread\"\n-\t}\n-\tappend always_ld_library_path \":${gccdir}\"\n-\tset compiler [lindex $GCC_UNDER_TEST 0]\n-\n-\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t      continue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t      append always_ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t  }\n-\t}\n-    }\n+    set always_ld_library_path \"${blddir}/.libs\"\n+    add_path always_ld_library_path [find_libgcc_s $GCC_UNDER_TEST]\n \n     set ALWAYS_CFLAGS \"\"\n     if { $blddir != \"\" } {"}, {"sha": "92b8146e505ef12d312e589fe34eaec3e243d9f7", "filename": "libgomp/testsuite/libgomp.c++/c++.exp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fc%2B%2B.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -37,12 +37,10 @@ if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [glob -nocomplain $srcdir/$subdir/*.C]]\n \n+    set ld_library_path $always_ld_library_path\n     if { $blddir != \"\" } {\n-        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n-    } else {\n-        set ld_library_path \"$always_ld_library_path\"\n+\tadd_path ld_library_path \"${blddir}/${lang_library_path}\"\n     }\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n \n     set flags_file \"${blddir}/../libstdc++-v3/scripts/testsuite_flags\""}, {"sha": "e304f560a5ae4eef53509745fc19d298f6821026", "filename": "libgomp/testsuite/libgomp.c/c.exp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Fc.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -20,7 +20,6 @@ dg-init\n set tests [lsort [find $srcdir/$subdir *.c]]\n \n set ld_library_path $always_ld_library_path\n-append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n set_ld_library_path_env_vars\n \n # Main loop."}, {"sha": "a1042d1f35108ae3947a20e3d6a1d22de7df134b", "filename": "libgomp/testsuite/libgomp.fortran/fortran.exp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Ffortran.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -26,12 +26,10 @@ if { $lang_test_file_found } {\n     # Gather a list of all tests.\n     set tests [lsort [find $srcdir/$subdir *.\\[fF\\]{,90,95,03,08}]]\n \n+    set ld_library_path $always_ld_library_path\n     if { $blddir != \"\" } {\n-        set ld_library_path \"$always_ld_library_path:${blddir}/${lang_library_path}\"\n-    } else {\n-        set ld_library_path \"$always_ld_library_path\"\n+\tadd_path ld_library_path \"${blddir}/${lang_library_path}\"\n     }\n-    append ld_library_path [gcc-set-multilib-library-path $GCC_UNDER_TEST]\n     set_ld_library_path_env_vars\n \n     # Main loop."}, {"sha": "3934d4e6983a0ffcfb933f0e3175b6b508b2c7e0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,11 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* testsuite/lib/libjava.exp (libjava_init): Just add\n+\tfind_libgcc_s to libjava_libgcc_s_path, rather than every\n+\tlibgcc multilib directory.\n+\t(libjava_arguments): Explain why we add \".\" to ld_library_path.\n+\t(gcj_invoke, exec_gij, libjava_invoke): Use add_path.\n+\n 2009-06-22  Matthias Klose  <doko@ubuntu.com>\n \n \t* libtool-version: Bump soversion."}, {"sha": "95a3138ce3dade5761a86e08057b2fac1e9ae8b9", "filename": "libjava/testsuite/lib/libjava.exp", "status": "modified", "additions": 10, "deletions": 36, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libjava%2Ftestsuite%2Flib%2Flibjava.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flib%2Flibjava.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -197,36 +197,8 @@ proc libjava_init { args } {\n     }\n \n     # Finally, add the gcc build directory so that we can find the\n-    # shared libgcc.  This, like much of dejagnu, is hideous.\n-    set libjava_libgcc_s_path {}\n-\n-    if { [istarget \"*-*-darwin*\"] } {\n-\tset so_extension \"dylib\"\n-    } elseif { [istarget \"*-*-cygwin*\"] || [istarget \"*-*-mingw*\"] } {\n-\tset so_extension \"dll\"\n-    } else {\n-\tset so_extension \"so\"\n-    }\n-    set gccdir [lookfor_file $tool_root_dir gcc/libgcc_s.${so_extension}]\n-    if {$gccdir != \"\"} {\n-\tset gccdir [file dirname $gccdir]\n-\tlappend libjava_libgcc_s_path $gccdir\n-\tverbose \"libjava_libgcc_s_path = $libjava_libgcc_s_path\"\n-\tset compiler ${gccdir}/xgcc\n-\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\t    foreach i \"[exec $compiler --print-multi-lib]\" {\n-\t\tset mldir \"\"\n-\t\tregexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t\tset mldir [string trimright $mldir \"\\;@\"]\n-\t\tif { \"$mldir\" == \".\" } {\n-\t\t    continue\n-\t\t}\n-\t\tif { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.${so_extension}.*]] >= 1 } {\n-\t\t    lappend libjava_libgcc_s_path \"${gccdir}/${mldir}\"\n-\t\t}\n-\t    }\n-\t}\n-    }\n+    # shared libgcc.\n+    set libjava_libgcc_s_path [find_libgcc_s $GCJ_UNDER_TEST]\n \n     set libjava_initialized 1\n }\n@@ -337,6 +309,8 @@ proc libjava_arguments {{mode compile}} {\n     # Basically we want to build up a colon separated path list from\n     # the value of $libjava.\n \n+    # Add \".\" to the list so that we pick up shared libraries created\n+    # by the testsuite itself.\n     set lpath \".\"\n     foreach dir [list $libjava] {\n \tforeach item [split $dir \" \"] {\n@@ -470,8 +444,8 @@ proc gcj_invoke {program expectFile ld_library_additions} {\n   global ld_library_path\n \n   set ld_library_path \"$libjava_ld_library_path\"\n-  if {[llength $ld_library_additions] > 0} {\n-    append ld_library_path :[join $ld_library_additions :]\n+  foreach path $ld_library_additions {\n+    add_path ld_library_path $path\n   }\n \n   set_ld_library_path_env_vars\n@@ -512,8 +486,8 @@ proc exec_gij {jarfile expectFile {ld_library_additions {}} {addl_flags {}}} {\n   global ld_library_path\n \n   set ld_library_path \"$libjava_ld_library_path\"\n-  if {[llength $ld_library_additions] > 0} {\n-  append ld_library_path :[join $ld_library_additions :]\n+  foreach path $ld_library_additions {\n+    add_path ld_library_path $path\n   }\n \t\n   set_ld_library_path_env_vars\n@@ -562,8 +536,8 @@ proc libjava_invoke {errname testName optName executable inpfile resultfile\n     global ld_library_path\n \n     set ld_library_path \"$libjava_ld_library_path\"\n-    if {[llength $ld_library_additions] > 0} {\n-\tappend ld_library_path :[join $ld_library_additions :]\n+    foreach path $ld_library_additions {\n+\tadd_path ld_library_path $path\n     }\n \n     set_ld_library_path_env_vars"}, {"sha": "11d6f525f4043251363e63621a99e0d2f73644ec", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,9 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* testsuite/lib/libmudflap.exp (libmudflap-init): Don't add \".\"\n+\tto ld_library_path.  Use add_path.  Add just find_libgcc_s to\n+\tld_library_path, not every libgcc multilib directory.\n+\n 2009-04-09  Nick Clifton  <nickc@redhat.com>\n \n \t* mf-hooks1.c: Change copyright header to refer to version 3"}, {"sha": "da91643a7b2881aa18f9d062a065d46131bf8ce5", "filename": "libmudflap/testsuite/lib/libmudflap.exp", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flib%2Flibmudflap.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -60,28 +60,9 @@ proc libmudflap-init { language } {\n     # set LD_LIBRARY_PATH so that libgcc_s, libstdc++ binaries can be found.\n     # locate libgcc.a so we don't need to account for different values of\n     # SHLIB_EXT on different platforms\n-    set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n-    if {$gccdir != \"\"} {\n-\tset gccdir [file dirname $gccdir]\n-    }\n-\n-    set ld_library_path \".\"\n-    append ld_library_path \":${gccdir}\"\n-    append ld_library_path \":${cxxblddir}/src/.libs\"\n-    if {[is_remote host] == 0} {\n-\tforeach i \"[exec ${gccdir}/xgcc --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t\tcontinue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t\tappend ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t}\n-    }\n-    append ld_library_path \":${blddir}/.libs\"\n+    set ld_library_path [find_libgcc_s $cxx]\n+    add_path ld_library_path \"${cxxblddir}/src/.libs\"\n+    add_path ld_library_path \"${blddir}/.libs\"\n \n     set libs \"-L${blddir}/.libs\"\n     set cxxflags \"-ggdb3 -DDEBUG_ASSERT\""}, {"sha": "b1269dda78272c119dccd4ad57144d7492813d14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -1,3 +1,9 @@\n+2009-06-30  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* testsuite/lib/libstdc++.exp (libstdc++_init): Don't add \".\"\n+\tto ld_library_path.  Use add_path.  Add just find_libgcc_s to\n+\tld_library_path, not every libgcc multilib directory.\n+\n 2009-06-30  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/40600"}, {"sha": "99adce94fa32fda84f1538fcc8ab9848b215c2d1", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b30bfd402f5109ae54ceb113a9492b8ec3737e0f/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=b30bfd402f5109ae54ceb113a9492b8ec3737e0f", "patch": "@@ -132,7 +132,6 @@ proc libstdc++_init { testfile } {\n     set gccdir [lookfor_file $tool_root_dir gcc/libgcc.a]\n     if {$gccdir != \"\"} {\n         set gccdir [file dirname $gccdir]\n-\tappend ld_library_path_tmp \":${gccdir}\"\n     }\n     v3track gccdir 3\n \n@@ -142,7 +141,7 @@ proc libstdc++_init { testfile } {\n     if {$libgompdir != \"\"} {\n \tset v3-libgomp 1\n         set libgompdir [file dirname $libgompdir]\n-\tappend ld_library_path_tmp \":${libgompdir}\"\n+\tadd_path ld_library_path_tmp ${libgompdir}\n \tverbose -log \"libgomp support detected\"\n     }\n     v3track libgompdir 3\n@@ -162,22 +161,8 @@ proc libstdc++_init { testfile } {\n     if {$gccdir != \"\"} {\n \tset compiler ${gccdir}/g++\n \tset ld_library_path ${ld_library_path_tmp}\n-\tappend ld_library_path \":${blddir}/src/.libs\"\n-\n-\tif { [is_remote host] == 0 && [which $compiler] != 0 } {\n-\t  foreach i \"[exec $compiler --print-multi-lib]\" {\n-\t    set mldir \"\"\n-\t    regexp -- \"\\[a-z0-9=_/\\.-\\]*;\" $i mldir\n-\t    set mldir [string trimright $mldir \"\\;@\"]\n-\t    if { \"$mldir\" == \".\" } {\n-\t      continue\n-\t    }\n-\t    if { [llength [glob -nocomplain ${gccdir}/${mldir}/libgcc_s*.so.*]] >= 1 } {\n-\t      append ld_library_path \":${gccdir}/${mldir}\"\n-\t    }\n-\t  }\n-\t}\n-\n+\tadd_path ld_library_path \"${blddir}/src/.libs\"\n+\tadd_path ld_library_path [find_libgcc_s $compiler]\n \tset_ld_library_path_env_vars\n \tif [info exists env(LD_LIBRARY_PATH)] {\n \t  verbose -log \"LD_LIBRARY_PATH = $env(LD_LIBRARY_PATH)\""}]}