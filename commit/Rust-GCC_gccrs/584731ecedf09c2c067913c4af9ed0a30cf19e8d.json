{"sha": "584731ecedf09c2c067913c4af9ed0a30cf19e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg0NzMxZWNlZGYwOWMyYzA2NzkxM2M0YWY5ZWQwYTMwY2YxOWU4ZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-01T12:25:53Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-04-01T12:37:51Z"}, "message": "c++: inter-cluster import order [PR 99283]\n\nI finally managed to reduce the testcase without hitting other bugs.\nThis problem is caused by discovering a duplicate in the middle of\nreading in the entity in question.  I had thougt the import seeding at\nthe beginning of a cluster prevented that, but it is insufficient.\nSpecifically an earlier cluster in the same module can cause the\nimport of a duplicate.  Although clusters within a module are\nwell-ordered, there is no ordering between clusters of one module and\nclusters of another module.  And thus we can get duplicate declaration\nloops.  This prevents the problem by also seeding references to\nearlier clusters in the same module.  As the FIXME notes, it is\nsufficient to reference a single entity in any particular earlier\ncluster, plus, we also could determine the implicit dependencies and\nprune that seeding even further.  I do not do that -- it decrease the\nloading that will happen, but would reduce the serialization size.  As\never, let's get correctness first.\n\n\tPR c++/99283\n\tgcc/cp/\n\t* module.cc (trees_out::decl_node): Adjust importedness reference\n\tassert.\n\t(module_state::intercluster_seed): New.  Seed both imports and\n\tinter-cluster references.  Broken out of ...\n\t(module_state::write_cluster): ... here.  Call it.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99283-6.h: New.\n\t* g++.dg/modules/pr99283-6_a.H: New.\n\t* g++.dg/modules/pr99283-6_b.H: New.\n\t* g++.dg/modules/pr99283-6_c.C: New.\n\t* g++.dg/modules/hdr-init-1_c.C: Adjust scan.\n\t* g++.dg/modules/indirect-3_c.C: Adjust scan.\n\t* g++.dg/modules/indirect-4_c.C: Adjust scan.\n\t* g++.dg/modules/lambda-3_b.C: Adjust scan.\n\t* g++.dg/modules/late-ret-3_c.C: Adjust scan.\n\t* g++.dg/modules/pr99425-1_b.H: Adjust scan.\n\t* g++.dg/modules/pr99425-1_c.C: Adjust scan.", "tree": {"sha": "51788e2e9d167fe5311dc91e30f37385ecd1c471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51788e2e9d167fe5311dc91e30f37385ecd1c471"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/584731ecedf09c2c067913c4af9ed0a30cf19e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584731ecedf09c2c067913c4af9ed0a30cf19e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/584731ecedf09c2c067913c4af9ed0a30cf19e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/584731ecedf09c2c067913c4af9ed0a30cf19e8d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "512429a885e87bef51057a001681b7d8d106e807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512429a885e87bef51057a001681b7d8d106e807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512429a885e87bef51057a001681b7d8d106e807"}], "stats": {"total": 315, "additions": 278, "deletions": 37}, "files": [{"sha": "c87ddd16a80dc5aebd00690d29efc2ed347b4f6c", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -3570,6 +3570,7 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n \t\t\t unsigned, unsigned *crc_ptr);\n   bool read_namespaces (unsigned);\n \n+  void intercluster_seed (trees_out &sec, unsigned index, depset *dep);\n   unsigned write_cluster (elf_out *to, depset *depsets[], unsigned size,\n \t\t\t  depset::hash &, unsigned *counts, unsigned *crc_ptr);\n   bool read_cluster (unsigned snum);\n@@ -8548,8 +8549,7 @@ trees_out::decl_node (tree decl, walk_kind ref)\n \tgcc_checking_assert (index == ~import_entity_index (decl));\n \n #if CHECKING_P\n-      if (importedness)\n-\tgcc_assert (!import == (importedness < 0));\n+      gcc_assert (!import || importedness >= 0);\n #endif\n       i (tt_entity);\n       u (import);\n@@ -14419,7 +14419,33 @@ enum ct_bind_flags\n   cbf_wrapped = 0x8,  \t/* ... that is wrapped.  */\n };\n \n-/* Write the cluster of depsets in SCC[0-SIZE).  */\n+/* DEP belongs to a different cluster, seed it to prevent\n+   unfortunately timed duplicate import.  */\n+// FIXME: QOI For inter-cluster references we could just only pick\n+// one entity from an earlier cluster.  Even better track\n+// dependencies between earlier clusters\n+\n+void\n+module_state::intercluster_seed (trees_out &sec, unsigned index_hwm, depset *dep)\n+{\n+  if (dep->is_import ()\n+      || dep->cluster < index_hwm)\n+    {\n+      tree ent = dep->get_entity ();\n+      if (!TREE_VISITED (ent))\n+\t{\n+\t  sec.tree_node (ent);\n+\t  dump (dumper::CLUSTER)\n+\t    && dump (\"Seeded %s %N\",\n+\t\t     dep->is_import () ? \"import\" : \"intercluster\", ent);\n+\t}\n+    }\n+}\n+\n+/* Write the cluster of depsets in SCC[0-SIZE).\n+   dep->section -> section number\n+   dep->cluster -> entity number\n+ */\n \n unsigned\n module_state::write_cluster (elf_out *to, depset *scc[], unsigned size,\n@@ -14431,6 +14457,7 @@ module_state::write_cluster (elf_out *to, depset *scc[], unsigned size,\n \n   trees_out sec (to, this, table, table.section);\n   sec.begin ();\n+  unsigned index_lwm = counts[MSC_entities];\n \n   /* Determine entity numbers, mark for writing.   */\n   dump (dumper::CLUSTER) && dump (\"Cluster members:\") && (dump.indent (), true);\n@@ -14484,10 +14511,10 @@ module_state::write_cluster (elf_out *to, depset *scc[], unsigned size,\n     }\n   dump (dumper::CLUSTER) && (dump.outdent (), true);\n \n-  /* Ensure every imported decl is referenced before we start\n-     streaming.  This ensures that we never encounter the situation\n-     where this cluster instantiates some implicit member that\n-     importing some other decl causes to be instantiated.  */\n+  /* Ensure every out-of-cluster decl is referenced before we start\n+     streaming.  We must do both imports *and* earlier clusters,\n+     because the latter could reach into the former and cause a\n+     duplicate loop.   */\n   sec.set_importing (+1);\n   for (unsigned ix = 0; ix != size; ix++)\n     {\n@@ -14505,30 +14532,14 @@ module_state::write_cluster (elf_out *to, depset *scc[], unsigned size,\n \t\t  depset *bind = dep->deps[ix];\n \t\t  if (bind->get_entity_kind () == depset::EK_USING)\n \t\t    bind = bind->deps[1];\n-\t\t  if (bind->is_import ())\n-\t\t    {\n-\t\t      tree import = bind->get_entity ();\n-\t\t      if (!TREE_VISITED (import))\n-\t\t\t{\n-\t\t\t  sec.tree_node (import);\n-\t\t\t  dump (dumper::CLUSTER)\n-\t\t\t    && dump (\"Seeded import %N\", import);\n-\t\t\t}\n-\t\t    }\n+\n+\t\t  intercluster_seed (sec, index_lwm, bind);\n \t\t}\n \t      /* Also check the namespace itself.  */\n \t      dep = dep->deps[0];\n \t    }\n \n-\t  if (dep->is_import ())\n-\t    {\n-\t      tree import = dep->get_entity ();\n-\t      if (!TREE_VISITED (import))\n-\t\t{\n-\t\t  sec.tree_node (import);\n-\t\t  dump (dumper::CLUSTER) && dump (\"Seeded import %N\", import);\n-\t\t}\n-\t    }\n+\t  intercluster_seed (sec, index_lwm, dep);\n \t}\n     }\n   sec.tree_node (NULL_TREE);"}, {"sha": "2a103c3d0bb7772c6a21401ea894a174c4a2deea", "filename": "gcc/testsuite/g++.dg/modules/hdr-init-1_c.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fhdr-init-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fhdr-init-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fhdr-init-1_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -17,8 +17,8 @@ int main ()\n \n // { dg-final { scan-lang-dump-times {Reading 1 initializers} 2 module } }\n \n-// { dg-final { scan-lang-dump {Read:-1's named merge key \\(new\\) var_decl:'::var'} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s named merge key \\(new\\) var_decl:'::var'} module } }\n // { dg-final { scan-lang-dump-times {Reading definition var_decl '::var@[^\\n]*/hdr-init-1_a.H:1'} 2 module } }\n \n-// { dg-final { scan-lang-dump {Read:-1's named merge key \\(matched\\) var_decl:'::var'} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s named merge key \\(matched\\) var_decl:'::var'} module } }\n "}, {"sha": "ec2fc7683731213e475fcbddf67a97a10d266c23", "filename": "gcc/testsuite/g++.dg/modules/indirect-3_c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-3_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-3_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-3_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -19,6 +19,6 @@ int main ()\n // { dg-final { scan-lang-dump-not {Instantiation:-[0-9]* function_decl:'::foo::X@foo:.::frob@.()<0x0>'} module } }\n \n // { dg-final { scan-lang-dump {Lazily binding '::bar@bar:.::toto'@'bar' section:} module } }\n-// { dg-final { scan-lang-dump {>Loading entity foo\\[1\\] section:1} module } }\n+// { dg-final { scan-lang-dump {>Loading entity foo\\[.\\] section:1} module } }\n // { dg-final { scan-lang-dump {Imported:-[0-9]* template_decl:'::foo@foo:.::template TPL@foo:.'@foo} module } }\n // { dg-final { scan-lang-dump {Reading definition type_decl '::foo@foo:.::TPL@bar:.<0x0>'} module } }"}, {"sha": "d55a2216fb339d4e7f514bacdc91b78e6a5c4546", "filename": "gcc/testsuite/g++.dg/modules/indirect-4_c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-4_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-4_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Findirect-4_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -10,7 +10,7 @@ int main ()\n }\n \n // { dg-final { scan-lang-dump {Lazily binding '::bar@bar:.::quux'@'bar' section:} module } }\n-// { dg-final { scan-lang-dump {>Loading entity foo\\[2\\] section:1} module } }\n+// { dg-final { scan-lang-dump {>Loading entity foo\\[.\\] section:1} module } }\n // { dg-final { scan-lang-dump {Imported:-[0-9]* template_decl:'::foo@foo:.::template TPL@foo:.'@foo} module } }\n \n // { dg-final { scan-lang-dump {Reading definition function_decl '::foo@foo:.::TPL@bar:.<0x1>::frob@bar:.<0x2>'} module } }"}, {"sha": "17afd96774570105dfbb71d1e0e441cd85b13e45", "filename": "gcc/testsuite/g++.dg/modules/lambda-3_b.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flambda-3_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flambda-3_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flambda-3_b.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -4,6 +4,6 @@\n import \"lambda-3_a.H\";\n \n // { dg-final { scan-lang-dump-not {merge key \\(new\\)} module } }\n-// { dg-final { scan-lang-dump {Read -1\\[0\\] matched attached decl '::template ._anon_0<#unnamed#>'} module } }\n-// { dg-final { scan-lang-dump {Read -1\\[0\\] matched attached decl '::._anon_2'} module } }\n-// { dg-final { scan-lang-dump {Read -1\\[0\\] matched attached decl '::._anon_1'} module } }\n+// { dg-final { scan-lang-dump {Read -[0-9]*\\[0\\] matched attached decl '::template ._anon_0<#unnamed#>'} module } }\n+// { dg-final { scan-lang-dump {Read -[0-9]*\\[0\\] matched attached decl '::._anon_2'} module } }\n+// { dg-final { scan-lang-dump {Read -[0-9]*\\[0\\] matched attached decl '::._anon_1'} module } }"}, {"sha": "8ab23a9e3385b29abc528fc81a9869ec4cff90d6", "filename": "gcc/testsuite/g++.dg/modules/late-ret-3_c.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flate-ret-3_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flate-ret-3_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Flate-ret-3_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -19,4 +19,4 @@ int main ()\n   return 0;\n }\n \n-// { dg-final { scan-lang-dump {Read:-1's named merge key \\(matched\\) template_decl:'::template Foo'\\n  Deduping '::template Foo@[^\\n]*/late-ret-3_a.H:.'\\n} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s named merge key \\(matched\\) template_decl:'::template Foo'\\n  Deduping '::template Foo@[^\\n]*/late-ret-3_a.H:.'\\n} module } }"}, {"sha": "383b66c081e07a841d1d5bf474553319839e7b0f", "filename": "gcc/testsuite/g++.dg/modules/pr99283-6.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6.h?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -0,0 +1,23 @@\n+template<bool, typename, typename>\n+struct conditional;\n+\n+template<typename> struct incrementable_traits;\n+\n+template<typename _Iter, typename _Tp>\n+struct __iter_traits_impl;\n+\n+class __max_diff_type;\n+\n+template<typename _Iter>\n+concept weakly_incrementable\n+  =  __is_same (__iter_traits_impl<_Iter, incrementable_traits<_Iter>>,\n+\t\t__max_diff_type);\n+\n+template<typename _Iterator>\n+class reverse_iterator\n+{\n+public:\n+  using iterator_concept\n+    = typename conditional<weakly_incrementable<_Iterator>,\n+\t\t\t   int, int>::type;\n+};"}, {"sha": "176ad9e9e8cb31ea8ef01178dbdfaeed049ce920", "filename": "gcc/testsuite/g++.dg/modules/pr99283-6_a.H", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_a.H?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -0,0 +1,33 @@\n+// { dg-additional-options {-std=c++2a -fmodule-header} }\n+// { dg-module-cmi {}\n+\n+#include \"pr99283-6.h\"\n+\n+template<typename _IteratorL, typename _IteratorR>\n+constexpr bool\n+  operator<(const reverse_iterator<_IteratorL>& __x,\n+\t    const reverse_iterator<_IteratorR>& __y);\n+\n+template<typename _Tp>\n+  struct numeric_limits;\n+\n+class __max_size_type\n+{\n+public:\n+  template<typename _Tp>\n+  constexpr\n+    __max_size_type(_Tp __i) noexcept\n+      : _M_val(__i), _M_msb(__i < 0)\n+  { }\n+\n+  using __rep = __UINT64_TYPE__;\n+private:\n+  __rep _M_val = 0;\n+  unsigned _M_msb:1 = 0;\n+};\n+\n+class __max_diff_type\n+{\n+private:\n+  __max_size_type _M_rep = 0;\n+};"}, {"sha": "123f353467382e99c5f79b67e064e92b5e7e3b62", "filename": "gcc/testsuite/g++.dg/modules/pr99283-6_b.H", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_b.H?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -0,0 +1,164 @@\n+// { dg-additional-options {-std=c++2a -fmodule-header} }\n+// { dg-module-cmi {}\n+\n+#include \"pr99283-6.h\"\n+\n+template<typename _Tp>\n+void __addressof(_Tp& __r)  ;\n+\n+template<typename _Tp, _Tp __v>\n+struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+};\n+\n+template<typename _Tp, _Tp __v>\n+constexpr _Tp integral_constant<_Tp, __v>::value;\n+\n+typedef integral_constant<bool, true> true_type;\n+typedef integral_constant<bool, false> false_type;\n+\n+template<typename _B1, typename _B2>\n+struct __and_\n+  : public conditional<_B1::value, _B2, _B1>::type\n+{ };\n+\n+template<typename _From, typename _To>\n+struct is_convertible\n+  : public true_type\n+{ };\n+\n+template<bool, typename _Tp = void>\n+struct enable_if\n+{ };\n+\n+template<typename _Tp>\n+struct enable_if<true, _Tp>\n+{ typedef _Tp type; };\n+\n+template<bool _Cond, typename _Tp = void>\n+using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n+\n+template<typename A, typename B>\n+using _Require = __enable_if_t<__and_<A, B>::value>;\n+\n+template<bool _Cond, typename _Iftrue, typename _Iffalse>\n+struct conditional\n+{ typedef _Iftrue type; };\n+\n+template<typename> struct iterator_traits;\n+\n+\n+template<typename _IteratorL, typename _IteratorR>\n+constexpr bool\n+  operator!=(const reverse_iterator<_IteratorL>& __x,\n+\t     const reverse_iterator<_IteratorR>& __y);\n+\n+typedef __INT64_TYPE__ int64_t;\n+typedef int64_t intmax_t;\n+\n+template<intmax_t _Num>\n+struct ratio\n+{\n+};\n+\n+namespace chrono\n+{\n+template<typename _Rep>\n+struct duration;\n+\n+template<typename _ToDur, typename _Rep>\n+constexpr _ToDur\n+  duration_cast(const duration<_Rep>& __d)\n+{\n+  typedef typename _ToDur::rep __to_rep;\n+  return _ToDur(static_cast<__to_rep>(static_cast<intmax_t>(__d.count())));\n+}\n+\n+template<typename _Rep>\n+struct duration\n+{\n+  \n+public:\n+  using rep = _Rep;\n+  \n+  constexpr duration() = default;\n+\n+  duration(const duration&) = default;\n+\n+  template<typename _Rep2, typename\n+\t   = _Require<is_convertible<const _Rep2&, rep>,\n+\t\t      true_type>>\n+  constexpr explicit duration(const _Rep2& __rep)\n+    : __r (__rep) {}\n+  \n+  ~duration() = default;\n+  duration& operator=(const duration&) = default;\n+\n+  rep count() const;\n+  \n+private:\n+  rep __r;\n+};\n+\n+using seconds = duration<int64_t>;\n+\n+template<typename _Clock, typename _Dur>\n+struct time_point\n+{\n+  typedef _Dur duration;\n+\n+  duration time_since_epoch() const;\n+\n+private:\n+  duration __d;\n+};\n+\n+struct system_clock\n+{\n+  typedef chrono::seconds duration;\n+\t \n+  typedef chrono::time_point<system_clock, duration> time_point;\n+\n+  static void\n+    to_time_t(const time_point& __t) noexcept\n+  {\n+    duration_cast<chrono::seconds>\n+     (__t.time_since_epoch()).count();\n+  }\n+};\n+\n+}\n+\n+template<typename>\n+class allocator;\n+\n+template<typename _ForwardIterator>\n+constexpr void\n+  __destroy(_ForwardIterator __first, _ForwardIterator __last)\n+{\n+  for (; __first != __last; ++__first)\n+    __addressof (*__first);\n+}\n+\n+template<typename _Alloc>\n+struct allocator_traits\n+{\n+private:\n+  template<typename _Alloc2, typename _Tp>\n+  static constexpr void\n+    _S_destroy(_Alloc2&, _Tp* __p, ...)\n+    noexcept\n+  {\n+    __destroy(__p);\n+  }\n+};\n+\n+template<typename _Tp>\n+struct allocator_traits<allocator<_Tp>>\n+{\n+  using value_type = _Tp;\n+  using pointer = _Tp*;\n+};\n+\n+import \"pr99283-6_a.H\";"}, {"sha": "9492554617d9294c7e71f66a9db3191513ad2d56", "filename": "gcc/testsuite/g++.dg/modules/pr99283-6_c.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99283-6_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -0,0 +1,10 @@\n+// { dg-additional-options {-std=c++2a -fmodules-ts} }\n+\n+import  \"pr99283-6_b.H\";\n+\n+template<typename _Alloc>\n+struct __allocated_ptr\n+{\n+  using value_type = allocator_traits<_Alloc>;\n+};\n+"}, {"sha": "53d28b4ef5e91996378dcdaa0c89303f0544d40f", "filename": "gcc/testsuite/g++.dg/modules/pr99425-1_b.H", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_b.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_b.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_b.H?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -15,5 +15,5 @@ inline void widget (Cont parm)\n   ssize (parm);\n }\n \n-// { dg-final { scan-lang-dump {Read:-[0-9]*'s alias spec merge key \\(new\\) type_decl:'::make_signed_t'\\n  ...  Read:-[0-9]*'s type spec merge key \\(new\\) type_decl:'::make_signed'\\n  Read:-1's named merge key \\(matched\\) template_decl:'::template ssize'} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s alias spec merge key \\(new\\) type_decl:'::make_signed_t'\\n  ...  Read:-[0-9]*'s type spec merge key \\(new\\) type_decl:'::make_signed'\\n  Read:-[0-9]*'s named merge key \\(matched\\) template_decl:'::template ssize'} module } }\n "}, {"sha": "77a35a88b3917892ede58eb349d9ef8c7857ddfd", "filename": "gcc/testsuite/g++.dg/modules/pr99425-1_c.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/584731ecedf09c2c067913c4af9ed0a30cf19e8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99425-1_c.C?ref=584731ecedf09c2c067913c4af9ed0a30cf19e8d", "patch": "@@ -7,5 +7,5 @@ void frob (Cont parm)\n   ssize (parm);\n }\n \n-// { dg-final { scan-lang-dump {Read:-1's named merge key \\(new\\) template_decl:'::template ssize'} module } }\n-// { dg-final { scan-lang-dump {Read:-1's named merge key \\(matched\\) template_decl:'::template ssize'} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s named merge key \\(new\\) template_decl:'::template ssize'} module } }\n+// { dg-final { scan-lang-dump {Read:-[0-9]*'s named merge key \\(matched\\) template_decl:'::template ssize'} module } }"}]}