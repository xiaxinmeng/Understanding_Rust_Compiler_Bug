{"sha": "7c143ed26893366717a402edc90dbdddfb3656ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxNDNlZDI2ODkzMzY2NzE3YTQwMmVkYzkwZGJkZGRmYjM2NTZjYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-11-21T14:09:31Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-11-21T14:09:31Z"}, "message": "h8300.c (print_operand): Use h8300_eightbit_constant_address_p and h8300_tiny_constant_address_p.\n\n\t* config/h8300/h8300.c (print_operand): Use\n\th8300_eightbit_constant_address_p and\n\th8300_tiny_constant_address_p.\n\t(h8300_adjust_insn_length): Likewise.\n\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Remove.\n\t(TINY_CONSTANT_ADDRESS_P): Likewise.\n\t(OK_FOR_U): Use eightbit_constant_address_p.\n\nFrom-SVN: r59343", "tree": {"sha": "86ae65cc653dbf0ad100265e8996768a31051996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86ae65cc653dbf0ad100265e8996768a31051996"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c143ed26893366717a402edc90dbdddfb3656ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c143ed26893366717a402edc90dbdddfb3656ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c143ed26893366717a402edc90dbdddfb3656ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c143ed26893366717a402edc90dbdddfb3656ca/comments", "author": null, "committer": null, "parents": [{"sha": "b5798b2a8b6fa2bd687499d420b9f0a1cd7c8b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5798b2a8b6fa2bd687499d420b9f0a1cd7c8b70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5798b2a8b6fa2bd687499d420b9f0a1cd7c8b70"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "1e29b8d85c18aea424255935ccde9ff4d22abe16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c143ed26893366717a402edc90dbdddfb3656ca", "patch": "@@ -1,3 +1,13 @@\n+2002-11-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (print_operand): Use\n+\th8300_eightbit_constant_address_p and\n+\th8300_tiny_constant_address_p.\n+\t(h8300_adjust_insn_length): Likewise.\n+\t* config/h8300/h8300.h (EIGHTBIT_CONSTANT_ADDRESS_P): Remove.\n+\t(TINY_CONSTANT_ADDRESS_P): Likewise.\n+\t(OK_FOR_U): Use eightbit_constant_address_p.\n+\n 2002-11-21  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* config/s390/libgcc-libc.ver: Add multilib support."}, {"sha": "607259bc9d4136bf4aa411ec0e784e49cff32b6c", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=7c143ed26893366717a402edc90dbdddfb3656ca", "patch": "@@ -1440,10 +1440,9 @@ print_operand (file, x, code)\n \tcase MEM:\n \t  {\n \t    rtx addr = XEXP (x, 0);\n-\t    int eightbit_ok = EIGHTBIT_CONSTANT_ADDRESS_P (addr);\n \t    int tiny_ok = ((GET_CODE (addr) == SYMBOL_REF\n \t\t\t    && TINY_DATA_NAME_P (XSTR (addr, 0)))\n-\t\t\t   || TINY_CONSTANT_ADDRESS_P (addr));\n+\t\t\t   || h8300_tiny_constant_address_p (addr));\n \n \t    fprintf (file, \"@\");\n \t    output_address (addr);\n@@ -1454,7 +1453,7 @@ print_operand (file, x, code)\n \t      {\n \t      case 'R':\n \t\t/* Used for mov.b and bit operations.  */\n-\t\tif (eightbit_ok)\n+\t\tif (h8300_eightbit_constant_address_p (addr))\n \t\t  {\n \t\t    fprintf (file, \":8\");\n \t\t    break;\n@@ -3729,7 +3728,7 @@ h8300_adjust_insn_length (insn, length)\n \n \t  /* @aa:8 is 2 bytes shorter than the longest.  */\n \t  if (GET_MODE (SET_SRC (pat)) == QImode\n-\t      && EIGHTBIT_CONSTANT_ADDRESS_P (addr))\n+\t      && h8300_eightbit_constant_address_p (addr))\n \t    return -2;\n \t}\n       else\n@@ -3752,14 +3751,13 @@ h8300_adjust_insn_length (insn, length)\n \n \t  /* @aa:8 is 6 bytes shorter than the longest.  */\n \t  if (GET_MODE (SET_SRC (pat)) == QImode\n-\t      && ((GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_FLAG (addr))\n-\t\t  || EIGHTBIT_CONSTANT_ADDRESS_P (addr)))\n+\t      && h8300_eightbit_constant_address_p (addr))\n \t    return -6;\n \n \t  /* @aa:16 is 4 bytes shorter than the longest.  */\n \t  if ((GET_CODE (addr) == SYMBOL_REF\n \t       && TINY_DATA_NAME_P (XSTR (addr, 0)))\n-\t      || TINY_CONSTANT_ADDRESS_P (addr))\n+\t      || h8300_tiny_constant_address_p (addr))\n \t    return -4;\n \n \t  /* @aa:24 is 2 bytes shorter than the longest.  */\n@@ -3868,6 +3866,9 @@ h8300_asm_named_section (name, flags)\n }\n #endif /* ! OBJECT_FORMAT_ELF */\n \n+/* Nonzero if X is a constant address suitable as an 8-bit absolute,\n+   which is a special case of the 'R' operand.  */\n+\n int\n h8300_eightbit_constant_address_p (x)\n      rtx x;\n@@ -3897,6 +3898,9 @@ h8300_eightbit_constant_address_p (x)\n \t  || (TARGET_H8300S && IN_RANGE (addr, s1, s2)));\n }\n \n+/* Nonzero if X is a constant address suitable as an 16-bit absolute\n+   on H8/300H and H8S.  */\n+\n int\n h8300_tiny_constant_address_p (x)\n      rtx x;"}, {"sha": "29a9ba49fa8b9d3bfaaae67483636cca6485514c", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c143ed26893366717a402edc90dbdddfb3656ca/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=7c143ed26893366717a402edc90dbdddfb3656ca", "patch": "@@ -858,18 +858,6 @@ struct cum_arg\n    ? !h8300_shift_needs_scratch_p (INTVAL (OP), SImode)\t\\\n    : 0)\n \n-/* Nonzero if X is a constant address suitable as an 8-bit absolute,\n-   which is a special case of the 'R' operand.  */\n-\n-#define EIGHTBIT_CONSTANT_ADDRESS_P(X)\t\t\\\n-  h8300_eightbit_constant_address_p (X)\n-\n-/* Nonzero if X is a constant address suitable as an 16-bit absolute\n-   on H8/300H and H8S.  */\n-\n-#define TINY_CONSTANT_ADDRESS_P(X)\t\t\\\n-  h8300_tiny_constant_address_p (X)\n-\n /* 'U' if valid for a bset destination;\n    i.e. a register, register indirect, or the eightbit memory region\n    (a SYMBOL_REF with an SYMBOL_REF_FLAG set).\n@@ -888,7 +876,7 @@ struct cum_arg\n         && (TARGET_H8300S\t\t\t\t\t\t\\\n \t    || SYMBOL_REF_FLAG (XEXP (XEXP (XEXP (OP, 0), 0), 0))))\t\\\n    || (GET_CODE (OP) == MEM\t\t\t\t\t\t\\\n-       && EIGHTBIT_CONSTANT_ADDRESS_P (XEXP (OP, 0)))\t\t\t\\\n+       && h8300_eightbit_constant_address_p (XEXP (OP, 0)))\t\t\\\n    || (GET_CODE (OP) == MEM && TARGET_H8300S\t\t\t\t\\\n        && GET_CODE (XEXP (OP, 0)) == CONST_INT))\n "}]}