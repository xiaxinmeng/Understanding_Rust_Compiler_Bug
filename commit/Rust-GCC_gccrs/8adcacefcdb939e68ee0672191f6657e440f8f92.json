{"sha": "8adcacefcdb939e68ee0672191f6657e440f8f92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkY2FjZWZjZGI5MzllNjhlZTA2NzIxOTFmNjY1N2U0NDBmOGY5Mg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-03-29T16:16:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-29T16:16:09Z"}, "message": "exp_util.adb (Remove_Side_Effects): Properly propagate arguments to recursive calls.\n\n2005-03-29  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_util.adb (Remove_Side_Effects): Properly propagate arguments to\n\trecursive calls.\n\t(Is_Possibly_Unaligned_Object): Correct typo that\n\tresulted in inaccurate result for unaligned scalars within records.\n\nFrom-SVN: r97173", "tree": {"sha": "c1a971b7a1ac8e4c5d80ce9dc9eb950caae82923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1a971b7a1ac8e4c5d80ce9dc9eb950caae82923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8adcacefcdb939e68ee0672191f6657e440f8f92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8adcacefcdb939e68ee0672191f6657e440f8f92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8adcacefcdb939e68ee0672191f6657e440f8f92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8adcacefcdb939e68ee0672191f6657e440f8f92/comments", "author": null, "committer": null, "parents": [{"sha": "d239991ff65181a5e81cd9e103f5543f1904c042", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d239991ff65181a5e81cd9e103f5543f1904c042", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d239991ff65181a5e81cd9e103f5543f1904c042"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "4868dc1286e8f83ccc1cc9271f7ed0c2187cd0c8", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8adcacefcdb939e68ee0672191f6657e440f8f92/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8adcacefcdb939e68ee0672191f6657e440f8f92/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8adcacefcdb939e68ee0672191f6657e440f8f92", "patch": "@@ -2386,8 +2386,8 @@ package body Exp_Util is\n             --  component of the record, then the component may be unaligned.\n \n             if Is_Packed (Etype (P))\n-              and then Represented_As_Scalar (Etype (P))\n-              and then First_Entity (Etype (Entity (P))) /= C\n+              and then Represented_As_Scalar (Etype (C))\n+              and then First_Entity (Scope (C)) /= C\n             then\n                return True;\n             end if;\n@@ -3212,7 +3212,7 @@ package body Exp_Util is\n \n    --  At the current time, the only types that we return False for (i.e.\n    --  where we decide we know they cannot generate large temps) are ones\n-   --  where we know the size is 128 bits or less at compile time, and we\n+   --  where we know the size is 256 bits or less at compile time, and we\n    --  are still not doing a thorough job on arrays and records ???\n \n    function May_Generate_Large_Temp (Typ : Entity_Id) return Boolean is\n@@ -3295,7 +3295,7 @@ package body Exp_Util is\n       E            : Node_Id;\n \n       function Side_Effect_Free (N : Node_Id) return Boolean;\n-      --  Determines if the tree N represents an expession that is known\n+      --  Determines if the tree N represents an expression that is known\n       --  not to have side effects, and for which no processing is required.\n \n       function Side_Effect_Free (L : List_Id) return Boolean;\n@@ -3639,15 +3639,15 @@ package body Exp_Util is\n       elsif Nkind (Exp) = N_Unchecked_Type_Conversion\n         and then Nkind (Expression (Exp)) = N_Explicit_Dereference\n       then\n-         Remove_Side_Effects (Expression (Exp), Variable_Ref);\n+         Remove_Side_Effects (Expression (Exp), Name_Req, Variable_Ref);\n          Scope_Suppress := Svg_Suppress;\n          return;\n \n       --  If this is a type conversion, leave the type conversion and remove\n       --  the side effects in the expression. This is important in several\n       --  circumstances: for change of representations, and also when this\n       --  is a view conversion to a smaller object, where gigi can end up\n-      --  its own temporary of the wrong size.\n+      --  creating its own temporary of the wrong size.\n \n       --  ??? this transformation is inhibited for elementary types that are\n       --  not involved in a change of representation because it causes\n@@ -3657,7 +3657,7 @@ package body Exp_Util is\n         and then (not Is_Elementary_Type (Underlying_Type (Exp_Type))\n                    or else Nkind (Parent (Exp)) = N_Assignment_Statement)\n       then\n-         Remove_Side_Effects (Expression (Exp), Variable_Ref);\n+         Remove_Side_Effects (Expression (Exp), Name_Req, Variable_Ref);\n          Scope_Suppress := Svg_Suppress;\n          return;\n "}]}