{"sha": "a8aa79754dcc89603567741aac26db144a430700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThhYTc5NzU0ZGNjODk2MDM1Njc3NDFhYWMyNmRiMTQ0YTQzMDcwMA==", "commit": {"author": {"name": "Greg McGary", "email": "gkm@gnu.org", "date": "1999-10-16T01:25:01Z"}, "committer": {"name": "Greg McGary", "email": "gkm@gcc.gnu.org", "date": "1999-10-16T01:25:01Z"}, "message": "flags.h (flag_bounds_check, [...]): New extern decls.\n\n* flags.h (flag_bounds_check, flag_bounded_pointers): New extern decls.\n* toplev.c (flag_bounds_check, flag_bounded_pointers): New flags.\n(f_options): Add \"bounded-pointers\" and \"bounds-check\" entries.\n* c-lang.c (lang_init_options): Set flag_bounds_check as \"unspecified\".\n(lang_init): Set default for flag_bounds_check if still \"unspecified\".\n\nFrom-SVN: r30035", "tree": {"sha": "2409137ecdec41f774cd2f423cc4ae796502a936", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2409137ecdec41f774cd2f423cc4ae796502a936"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8aa79754dcc89603567741aac26db144a430700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aa79754dcc89603567741aac26db144a430700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8aa79754dcc89603567741aac26db144a430700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8aa79754dcc89603567741aac26db144a430700/comments", "author": null, "committer": null, "parents": [{"sha": "a9d3cc3f1a1da3d0e5044249891594933e37ab20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d3cc3f1a1da3d0e5044249891594933e37ab20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d3cc3f1a1da3d0e5044249891594933e37ab20"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "b6e34ecf649dffdb8fc37bd0c3e14f6e60567637", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa79754dcc89603567741aac26db144a430700/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa79754dcc89603567741aac26db144a430700/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8aa79754dcc89603567741aac26db144a430700", "patch": "@@ -1,3 +1,11 @@\n+Fri Oct 15 15:17:29 1999  Greg McGary  <gkm@gnu.org>\n+\n+\t* flags.h (flag_bounds_check, flag_bounded_pointers): New extern decls.\n+\t* toplev.c (flag_bounds_check, flag_bounded_pointers): New flags.\n+\t(f_options): Add \"bounded-pointers\" and \"bounds-check\" entries.\n+\t* c-lang.c (lang_init_options): Set flag_bounds_check as \"unspecified\".\n+\t(lang_init): Set default for flag_bounds_check if still \"unspecified\".\n+\n Sat Oct 16 13:42:29 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (HF mode patterns):  Add missing modes."}, {"sha": "db7618789847a294ef72e65c13498d125af27aac", "filename": "gcc/c-lang.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa79754dcc89603567741aac26db144a430700/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa79754dcc89603567741aac26db144a430700/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=a8aa79754dcc89603567741aac26db144a430700", "patch": "@@ -1,5 +1,5 @@\n /* Language-specific hook definitions for C front end.\n-   Copyright (C) 1991, 1995, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1995, 1997, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"toplev.h\"\n #include \"output.h\"\n+#include \"flags.h\"\n #include \"ggc.h\"\n \n #if USE_CPPLIB\n@@ -56,11 +57,17 @@ lang_init_options ()\n   parse_in.opts = &parse_options;\n   cpp_options_init (&parse_options);\n #endif\n+  /* Mark as \"unspecified\".  */\n+  flag_bounds_check = -1;\n }\n \n void\n lang_init ()\n {\n+  /* If still \"unspecified\", make it match -fbounded-pointers.  */\n+  if (flag_bounds_check < 0)\n+    flag_bounds_check = flag_bounded_pointers;\n+\n   /* the beginning of the file is a new line; check for # */\n   /* With luck, we discover the real source file's name from that\n      and put it in input_filename.  */"}, {"sha": "e8a66bfd2a0f028d074c75c90125edbe1b325298", "filename": "gcc/flags.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa79754dcc89603567741aac26db144a430700/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa79754dcc89603567741aac26db144a430700/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a8aa79754dcc89603567741aac26db144a430700", "patch": "@@ -476,6 +476,21 @@ extern int flag_instrument_function_entry_exit;\n \n /* Perform a peephole pass before sched2. */\n extern int flag_peephole2;\n+\n+/* -fbounded-pointers causes gcc to compile pointers as composite\n+   objects occupying three words: the pointer value, the base address\n+   of the referent object, and the address immediately beyond the end\n+   of the referent object.  The base and extent allow us to perform\n+   runtime bounds checking.  -fbounded-pointers implies -fcheck-bounds.  */\n+extern int flag_bounded_pointers;\n+\n+/* -fcheck-bounds causes gcc to generate array bounds checks.\n+   For C, C++: defaults to value of flag_bounded_pointers.\n+   For ObjC: defaults to off.\n+   For Java: defaults to on.\n+   For Fortran: defaults to off.\n+   For CHILL: defaults to off.  */\n+extern int flag_bounds_check;\n \f\n /* Other basic status info about current function.  */\n "}, {"sha": "753d65d65cf51789699fd31206ea85ffd41554e5", "filename": "gcc/toplev.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8aa79754dcc89603567741aac26db144a430700/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8aa79754dcc89603567741aac26db144a430700/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a8aa79754dcc89603567741aac26db144a430700", "patch": "@@ -752,6 +752,21 @@ int flag_no_ident = 0;\n /* This will perform a peephole pass before sched2. */\n int flag_peephole2 = 0;\n \n+/* -fbounded-pointers causes gcc to compile pointers as composite\n+   objects occupying three words: the pointer value, the base address\n+   of the referent object, and the address immediately beyond the end\n+   of the referent object.  The base and extent allow us to perform\n+   runtime bounds checking.  -fbounded-pointers implies -fcheck-bounds.  */\n+int flag_bounded_pointers = 0;\n+\n+/* -fcheck-bounds causes gcc to generate array bounds checks.\n+   For C, C++: defaults to value of flag_bounded_pointers.\n+   For ObjC: defaults to off.\n+   For Java: defaults to on.\n+   For Fortran: defaults to off.\n+   For CHILL: defaults to off.  */\n+int flag_bounds_check = 0;\n+\n /* Values of the -falign-* flags: how much to align labels in code. \n    0 means `use default', 1 means `don't align'.  \n    For each variable, there is an _log variant which is the power\n@@ -985,7 +1000,11 @@ lang_independent_options f_options[] =\n   { \"peephole2\", &flag_peephole2, 1,\n     \"Enables an rtl peephole pass run before sched2\" },\n   {\"math-errno\", &flag_errno_math, 1,\n-   \"Set errno after built-in math functions\"}\n+   \"Set errno after built-in math functions\"},\n+  {\"bounded-pointers\", &flag_bounded_pointers, 1,\n+   \"Compile pointers as triples: value, base & end\" },\n+  {\"bounds-check\", &flag_bounds_check, 1,\n+   \"Generate code to check bounds before dereferencing pointers and arrays\" }\n };\n \n #define NUM_ELEM(a)  (sizeof (a) / sizeof ((a)[0]))"}]}