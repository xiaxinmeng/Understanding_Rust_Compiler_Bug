{"sha": "473ebbc5827588b98d60d2089eb8c823e74bb5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDczZWJiYzU4Mjc1ODhiOThkNjBkMjA4OWViOGM4MjNlNzRiYjVkOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-09-21T05:55:22Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-21T05:55:22Z"}, "message": "* stor-layout.c (layout_type): Remove obsolete code.\n\nFrom-SVN: r151913", "tree": {"sha": "51af1a212be0bb000965f32bdc30d8b8569d4703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51af1a212be0bb000965f32bdc30d8b8569d4703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/473ebbc5827588b98d60d2089eb8c823e74bb5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473ebbc5827588b98d60d2089eb8c823e74bb5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/473ebbc5827588b98d60d2089eb8c823e74bb5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/473ebbc5827588b98d60d2089eb8c823e74bb5d8/comments", "author": null, "committer": null, "parents": [{"sha": "b31b556704d30cd6a32a6e973728483ae7984336", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31b556704d30cd6a32a6e973728483ae7984336", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31b556704d30cd6a32a6e973728483ae7984336"}], "stats": {"total": 37, "additions": 10, "deletions": 27}, "files": [{"sha": "47c3dfb02b512691d034b9d683b46d1c1c2547ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473ebbc5827588b98d60d2089eb8c823e74bb5d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473ebbc5827588b98d60d2089eb8c823e74bb5d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=473ebbc5827588b98d60d2089eb8c823e74bb5d8", "patch": "@@ -1,3 +1,7 @@\n+2009-09-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* stor-layout.c (layout_type): Remove obsolete code.\n+\n 2009-09-20  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/41395"}, {"sha": "18360bb422d12d77a437fe9caa22e11303d93034", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 6, "deletions": 27, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/473ebbc5827588b98d60d2089eb8c823e74bb5d8/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/473ebbc5827588b98d60d2089eb8c823e74bb5d8/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=473ebbc5827588b98d60d2089eb8c823e74bb5d8", "patch": "@@ -1956,8 +1956,8 @@ layout_type (tree type)\n \t  {\n \t    tree ub = TYPE_MAX_VALUE (index);\n \t    tree lb = TYPE_MIN_VALUE (index);\n+\t    tree element_size = TYPE_SIZE (element);\n \t    tree length;\n-\t    tree element_size;\n \n \t    /* The initial subtraction should happen in the original type so\n \t       that (possible) negative values are handled appropriately.  */\n@@ -1968,23 +1968,6 @@ layout_type (tree type)\n \t\t\t\t\t\t\t    TREE_TYPE (lb),\n \t\t\t\t\t\t\t    ub, lb)));\n \n-\t    /* Special handling for arrays of bits (for Chill).  */\n-\t    element_size = TYPE_SIZE (element);\n-\t    if (TYPE_PACKED (type) && INTEGRAL_TYPE_P (element)\n-\t\t&& (integer_zerop (TYPE_MAX_VALUE (element))\n-\t\t    || integer_onep (TYPE_MAX_VALUE (element)))\n-\t\t&& host_integerp (TYPE_MIN_VALUE (element), 1))\n-\t      {\n-\t\tHOST_WIDE_INT maxvalue\n-\t\t  = tree_low_cst (TYPE_MAX_VALUE (element), 1);\n-\t\tHOST_WIDE_INT minvalue\n-\t\t  = tree_low_cst (TYPE_MIN_VALUE (element), 1);\n-\n-\t\tif (maxvalue - minvalue == 1\n-\t\t    && (maxvalue == 1 || maxvalue == 0))\n-\t\t  element_size = integer_one_node;\n-\t      }\n-\n \t    /* If neither bound is a constant and sizetype is signed, make\n \t       sure the size is never negative.  We should really do this\n \t       if *either* bound is non-constant, but this is the best\n@@ -1998,15 +1981,11 @@ layout_type (tree type)\n \t\t\t\t\t   fold_convert (bitsizetype,\n \t\t\t\t\t\t\t length));\n \n-\t    /* If we know the size of the element, calculate the total\n-\t       size directly, rather than do some division thing below.\n-\t       This optimization helps Fortran assumed-size arrays\n-\t       (where the size of the array is determined at runtime)\n-\t       substantially.\n-\t       Note that we can't do this in the case where the size of\n-\t       the elements is one bit since TYPE_SIZE_UNIT cannot be\n-\t       set correctly in that case.  */\n-\t    if (TYPE_SIZE_UNIT (element) != 0 && ! integer_onep (element_size))\n+\t    /* If we know the size of the element, calculate the total size\n+\t       directly, rather than do some division thing below.  This\n+\t       optimization helps Fortran assumed-size arrays (where the\n+\t       size of the array is determined at runtime) substantially.  */\n+\t    if (TYPE_SIZE_UNIT (element))\n \t      TYPE_SIZE_UNIT (type)\n \t\t= size_binop (MULT_EXPR, TYPE_SIZE_UNIT (element), length);\n \t  }"}]}