{"sha": "2ef278569f60a2c1556f1752aeba39c586521371", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVmMjc4NTY5ZjYwYTJjMTU1NmYxNzUyYWViYTM5YzU4NjUyMTM3MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-12-06T07:53:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-12-06T07:53:15Z"}, "message": "re PR tree-optimization/92819 (Worse code generated on avx2 due to simplify_vector_constructor)\n\n2019-12-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92819\n\t* match.pd (VEC_PERM_EXPR -> BIT_INSERT_EXPR): Handle inserts\n\tinto the last lane.  For two-element vectors try inserting\n\tinto the last lane when inserting into the first fails.\n\n\t* gcc.target/i386/pr92819-1.c: New testcase.\n\t* gcc.target/i386/pr92803.c: Adjust.\n\nFrom-SVN: r279033", "tree": {"sha": "327828c5b3bda519cfed60d710e3a2d0e8e895c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/327828c5b3bda519cfed60d710e3a2d0e8e895c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ef278569f60a2c1556f1752aeba39c586521371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef278569f60a2c1556f1752aeba39c586521371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ef278569f60a2c1556f1752aeba39c586521371", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ef278569f60a2c1556f1752aeba39c586521371/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9961856c3acb8e7d9def11b58001db6af9f14253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9961856c3acb8e7d9def11b58001db6af9f14253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9961856c3acb8e7d9def11b58001db6af9f14253"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "3e747a620c5ef6cf2302b7591831a61904106034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ef278569f60a2c1556f1752aeba39c586521371", "patch": "@@ -1,3 +1,10 @@\n+2019-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92819\n+\t* match.pd (VEC_PERM_EXPR -> BIT_INSERT_EXPR): Handle inserts\n+\tinto the last lane.  For two-element vectors try inserting\n+\tinto the last lane when inserting into the first fails.\n+\n 2019-12-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* common.opt (fprofile-partial-training): Terminate description with"}, {"sha": "e32d800964748db1cbb2bb3324d1ccbc90e0a5db", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2ef278569f60a2c1556f1752aeba39c586521371", "patch": "@@ -6032,7 +6032,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t|| TREE_CODE (cop1) == VECTOR_CST\n \t\t|| TREE_CODE (cop1) == CONSTRUCTOR))\n           {\n-\t    if (sel.series_p (1, 1, nelts + 1, 1))\n+\t    bool insert_first_p = sel.series_p (1, 1, nelts + 1, 1);\n+\t    if (insert_first_p)\n \t      {\n \t        /* After canonicalizing the first elt to come from the\n \t\t   first vector we only can insert the first elt from\n@@ -6041,13 +6042,19 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\tif ((ins = fold_read_from_vector (cop0, sel[0])))\n \t\t  op0 = op1;\n \t      }\n-\t    else\n+\t    /* The above can fail for two-element vectors which always\n+\t       appear to insert the first element, so try inserting\n+\t       into the second lane as well.  For more than two\n+\t       elements that's wasted time.  */\n+\t    if (!insert_first_p || (!ins && maybe_eq (nelts, 2u)))\n \t      {\n \t        unsigned int encoded_nelts = sel.encoding ().encoded_nelts ();\n \t\tfor (at = 0; at < encoded_nelts; ++at)\n \t\t  if (maybe_ne (sel[at], at))\n \t\t    break;\n-\t\tif (at < encoded_nelts && sel.series_p (at + 1, 1, at + 1, 1))\n+\t\tif (at < encoded_nelts\n+\t\t    && (known_eq (at + 1, nelts)\n+\t\t\t|| sel.series_p (at + 1, 1, at + 1, 1)))\n \t\t  {\n \t\t    if (known_lt (poly_uint64 (sel[at]), nelts))\n \t\t      ins = fold_read_from_vector (cop0, sel[at]);"}, {"sha": "bcc65f27336290e18b2c5b4dec44d30626ec0be0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2ef278569f60a2c1556f1752aeba39c586521371", "patch": "@@ -1,3 +1,9 @@\n+2019-12-06  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92819\n+\t* gcc.target/i386/pr92819-1.c: New testcase.\n+\t* gcc.target/i386/pr92803.c: Adjust.\n+\n 2019-12-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/92829"}, {"sha": "d533bae0c26816591a80fb05f1b2e7ccbf02d58a", "filename": "gcc/testsuite/gcc.target/i386/pr92803.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92803.c?ref=2ef278569f60a2c1556f1752aeba39c586521371", "patch": "@@ -31,8 +31,10 @@ barf (v8sf x)\n   return (v4sf) { x[4], x[5], 1.0f, 2.0f };\n }\n \n-/* We expect all CTORs to turn into permutes, the FP converting ones\n+/* For bar we do two inserts, first zero, then convert, then insert *p.  } */\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 2 \"forwprop1\" } } */\n+/* We expect all other CTORs to turn into permutes, the FP converting ones\n    to two each with the one with constants possibly elided in the future\n    by converting 3.0f and 1.0f \"back\" to integers.  */\n-/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 6 \"forwprop1\" } } */\n-/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 5 \"forwprop1\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 4 \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PERM_EXPR\" 3 \"forwprop1\" { xfail *-*-* } } } */"}, {"sha": "0ec0ca52f21a345bd324eedeaf98711f23311aa2", "filename": "gcc/testsuite/gcc.target/i386/pr92819-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ef278569f60a2c1556f1752aeba39c586521371/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92819-1.c?ref=2ef278569f60a2c1556f1752aeba39c586521371", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -msse2 -fdump-tree-forwprop1\" } */\n+\n+typedef double v2df __attribute__((vector_size (16)));\n+\n+v2df\n+foo (v2df x, double *p)\n+{\n+  return (v2df) { x[0], *p };\n+}\n+\n+v2df\n+bar (v2df x, double *p)\n+{\n+  return (v2df) { *p, x[1] };\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"BIT_INSERT_EXPR\" 2 \"forwprop1\" } } */\n+/* { dg-final { scan-assembler \"movhpd\" } } */\n+/* { dg-final { scan-assembler \"movlpd\" } } */"}]}