{"sha": "ef310a95a934d0f38bed0dfdf988373a6b367e16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWYzMTBhOTVhOTM0ZDBmMzhiZWQwZGZkZjk4ODM3M2E2YjM2N2UxNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-01-28T08:15:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-01-28T08:15:42Z"}, "message": "re PR tree-optimization/88739 (Big-endian union bug)\n\n2019-01-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88739\n\t* tree-cfg.c (verify_types_in_gimple_reference): Verify\n\tBIT_FIELD_REFs only are applied to mode-precision operands\n\twhen they are integral.\n\t(verify_gimple_assign_ternary): Likewise for BIT_INSERT_EXPR.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid generating\n\tBIT_FIELD_REFs of non-mode-precision integral operands.\n\nFrom-SVN: r268332", "tree": {"sha": "d6d2beab2165556b6b7b68be5f16474bce7345dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6d2beab2165556b6b7b68be5f16474bce7345dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef310a95a934d0f38bed0dfdf988373a6b367e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef310a95a934d0f38bed0dfdf988373a6b367e16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef310a95a934d0f38bed0dfdf988373a6b367e16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef310a95a934d0f38bed0dfdf988373a6b367e16/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "92ab6b83cdedc8e90dae97c013e1c7a824630a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ab6b83cdedc8e90dae97c013e1c7a824630a31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ab6b83cdedc8e90dae97c013e1c7a824630a31"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "724d120121112541097b47bb58d65ca1ae2ce5a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef310a95a934d0f38bed0dfdf988373a6b367e16", "patch": "@@ -1,3 +1,13 @@\n+2019-01-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88739\n+\t* tree-cfg.c (verify_types_in_gimple_reference): Verify\n+\tBIT_FIELD_REFs only are applied to mode-precision operands\n+\twhen they are integral.\n+\t(verify_gimple_assign_ternary): Likewise for BIT_INSERT_EXPR.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid generating\n+\tBIT_FIELD_REFs of non-mode-precision integral operands.\n+\n 2019-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87214"}, {"sha": "62254270524116f30776791cb04435b090469a62", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ef310a95a934d0f38bed0dfdf988373a6b367e16", "patch": "@@ -3118,6 +3118,12 @@ verify_types_in_gimple_reference (tree expr, bool require_lvalue)\n \t\t     \"match field size of BIT_FIELD_REF\");\n \t      return true;\n \t    }\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (op))\n+\t      && !type_has_mode_precision_p (TREE_TYPE (op)))\n+\t    {\n+\t      error (\"BIT_FIELD_REF of non-mode-precision operand\");\n+\t      return true;\n+\t    }\n \t  if (!AGGREGATE_TYPE_P (TREE_TYPE (op))\n \t      && maybe_gt (size + bitpos,\n \t\t\t   tree_to_poly_uint64 (TYPE_SIZE (TREE_TYPE (op)))))\n@@ -4319,6 +4325,12 @@ verify_gimple_assign_ternary (gassign *stmt)\n \t  error (\"invalid position or size in BIT_INSERT_EXPR\");\n \t  return true;\n \t}\n+      if (INTEGRAL_TYPE_P (rhs1_type)\n+\t  && !type_has_mode_precision_p (rhs1_type))\n+\t{\n+\t  error (\"BIT_INSERT_EXPR into non-mode-precision operand\");\n+\t  return true;\n+\t}\n       if (INTEGRAL_TYPE_P (rhs1_type))\n \t{\n \t  unsigned HOST_WIDE_INT bitpos = tree_to_uhwi (rhs3);"}, {"sha": "81604d2912a7db05fede7a38a83aeb198e3fc7d5", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef310a95a934d0f38bed0dfdf988373a6b367e16/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ef310a95a934d0f38bed0dfdf988373a6b367e16", "patch": "@@ -2298,6 +2298,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n       base2 = get_ref_base_and_extent (gimple_assign_lhs (def_stmt),\n \t\t\t\t       &offset2, &size2, &maxsize2,\n \t\t\t\t       &reverse);\n+      tree def_rhs = gimple_assign_rhs1 (def_stmt);\n       if (!reverse\n \t  && known_size_p (maxsize2)\n \t  && known_eq (maxsize2, size2)\n@@ -2309,11 +2310,13 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_,\n \t     according to endianness.  */\n \t  && (! INTEGRAL_TYPE_P (vr->type)\n \t      || known_eq (ref->size, TYPE_PRECISION (vr->type)))\n-\t  && multiple_p (ref->size, BITS_PER_UNIT))\n+\t  && multiple_p (ref->size, BITS_PER_UNIT)\n+\t  && (! INTEGRAL_TYPE_P (TREE_TYPE (def_rhs))\n+\t      || type_has_mode_precision_p (TREE_TYPE (def_rhs))))\n \t{\n \t  gimple_match_op op (gimple_match_cond::UNCOND,\n \t\t\t      BIT_FIELD_REF, vr->type,\n-\t\t\t      vn_valueize (gimple_assign_rhs1 (def_stmt)),\n+\t\t\t      vn_valueize (def_rhs),\n \t\t\t      bitsize_int (ref->size),\n \t\t\t      bitsize_int (offset - offset2));\n \t  tree val = vn_nary_build_or_lookup (&op);"}]}