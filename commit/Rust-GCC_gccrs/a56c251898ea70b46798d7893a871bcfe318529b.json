{"sha": "a56c251898ea70b46798d7893a871bcfe318529b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU2YzI1MTg5OGVhNzBiNDY3OThkNzg5M2E4NzFiY2ZlMzE4NTI5Yg==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-20T10:32:35Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-07-22T02:40:16Z"}, "message": "Support logic shift left/right for avx512 mask type.\n\ngcc/ChangeLog:\n\n\t* config/i386/constraints.md (Wb): New constraint.\n\t(Ww): Ditto.\n\t* config/i386/i386.md (*ashlhi3_1): Extend to avx512 mask\n\tshift.\n\t(*ashlqi3_1): Ditto.\n\t(*<insn><mode>3_1): Split to ..\n\t(*ashr<mode>3_1): this, ...\n\t(*lshr<mode>3_1): and this, also extend this pattern to avx512\n\tmask registers.\n\t(*<insn><mode>3_1): Split to ..\n\t(*ashr<mode>3_1): this, ...\n\t(*lshrqi3_1): and this, also extend this pattern to avx512\n\tmask registers.\n\t(*lshrhi3_1): And this, also extend this pattern to avx512\n\tmask registers.\n\t* config/i386/sse.md (k<code><mode>): New define_split after\n\tit to convert generic shift pattern to mask shift ones.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/mask-shift.c: New test.", "tree": {"sha": "c377234035d48b0c85d7ca7ac75c3e29612093ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c377234035d48b0c85d7ca7ac75c3e29612093ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a56c251898ea70b46798d7893a871bcfe318529b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56c251898ea70b46798d7893a871bcfe318529b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56c251898ea70b46798d7893a871bcfe318529b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56c251898ea70b46798d7893a871bcfe318529b/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419c6c68e60adc8801b44dab72ebcd680cfe1d97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419c6c68e60adc8801b44dab72ebcd680cfe1d97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419c6c68e60adc8801b44dab72ebcd680cfe1d97"}], "stats": {"total": 269, "additions": 245, "deletions": 24}, "files": [{"sha": "4aa28a5621c26538a874256c4fbe01527b57bbfc", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=a56c251898ea70b46798d7893a871bcfe318529b", "patch": "@@ -222,6 +222,16 @@\n \t    (match_operand 0 \"vector_all_ones_operand\"))))\n \n ;; Integer constant constraints.\n+(define_constraint \"Wb\"\n+  \"Integer constant in the range 0 @dots{} 7, for 8-bit shifts.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 7)\")))\n+\n+(define_constraint \"Ww\"\n+  \"Integer constant in the range 0 @dots{} 15, for 16-bit shifts.\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (ival, 0, 15)\")))\n+\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\"\n   (and (match_code \"const_int\")"}, {"sha": "44ae18eb4b2eca532c9a3e2d0a512e9a835b0d77", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 138, "deletions": 24, "changes": 162, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a56c251898ea70b46798d7893a871bcfe318529b", "patch": "@@ -1136,6 +1136,7 @@\n \n ;; Immediate operand constraint for shifts.\n (define_mode_attr S [(QI \"I\") (HI \"I\") (SI \"I\") (DI \"J\") (TI \"O\")])\n+(define_mode_attr KS [(QI \"Wb\") (HI \"Ww\") (SI \"I\") (DI \"J\")])\n \n ;; Print register name in the specified mode.\n (define_mode_attr k [(QI \"b\") (HI \"w\") (SI \"k\") (DI \"q\")])\n@@ -11088,16 +11089,17 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"*ashl<mode>3_1\"\n-  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,r\")\n-\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,l,rm\")\n-\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,M,r\")))\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,r,?k\")\n+\t(ashift:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,l,rm,k\")\n+\t\t      (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,M,r,<KS>\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, <MODE>mode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n     case TYPE_ISHIFTX:\n+    case TYPE_MSKLOG:\n       return \"#\";\n \n     case TYPE_ALU:\n@@ -11113,7 +11115,7 @@\n \treturn \"sal{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n-  [(set_attr \"isa\" \"*,*,bmi2\")\n+  [(set_attr \"isa\" \"*,*,bmi2,avx512bw\")\n    (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"1\")\n \t      (const_string \"lea\")\n@@ -11123,6 +11125,8 @@\n \t\t      (match_operand 0 \"register_operand\"))\n \t\t (match_operand 2 \"const1_operand\"))\n \t      (const_string \"alu\")\n+\t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"msklog\")\n \t   ]\n \t   (const_string \"ishift\")))\n    (set (attr \"length_immediate\")\n@@ -11218,15 +11222,16 @@\n   \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n \n (define_insn \"*ashlhi3_1\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,Yp\")\n-\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,l\")\n-\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,M\")))\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,Yp,?k\")\n+\t(ashift:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,l,k\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,M,Ww\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, HImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n+    case TYPE_MSKLOG:\n       return \"#\";\n \n     case TYPE_ALU:\n@@ -11241,9 +11246,12 @@\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"*,*,avx512f\")\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"1\")\n \t      (const_string \"lea\")\n+\t    (eq_attr \"alternative\" \"2\")\n+\t      (const_string \"msklog\")\n             (and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\"))\n \t\t (match_operand 2 \"const1_operand\"))\n@@ -11259,18 +11267,19 @@\n \t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"HI,SI\")])\n+   (set_attr \"mode\" \"HI,SI,HI\")])\n \n (define_insn \"*ashlqi3_1\"\n-  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,Yp\")\n-\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,l\")\n-\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI,M\")))\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,Yp,?k\")\n+\t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,l,k\")\n+\t\t   (match_operand:QI 2 \"nonmemory_operand\" \"cI,cI,M,Wb\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (ASHIFT, QImode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n     case TYPE_LEA:\n+    case TYPE_MSKLOG:\n       return \"#\";\n \n     case TYPE_ALU:\n@@ -11298,9 +11307,12 @@\n \t}\n     }\n }\n-  [(set (attr \"type\")\n+  [(set_attr \"isa\" \"*,*,*,avx512dq\")\n+   (set (attr \"type\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"lea\")\n+\t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"msklog\")\n             (and (and (match_test \"TARGET_DOUBLE_WITH_ADD\")\n \t\t      (match_operand 0 \"register_operand\"))\n \t\t (match_operand 2 \"const1_operand\"))\n@@ -11316,7 +11328,7 @@\n \t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"QI,SI,SI\")\n+   (set_attr \"mode\" \"QI,SI,SI,QI\")\n    ;; Potential partial reg stall on alternative 1.\n    (set (attr \"preferred_for_speed\")\n      (cond [(eq_attr \"alternative\" \"1\")\n@@ -11818,13 +11830,13 @@\n   [(set_attr \"type\" \"ishiftx\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"*<insn><mode>3_1\"\n+(define_insn \"*ashr<mode>3_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r\")\n-\t(any_shiftrt:SWI48\n+\t(ashiftrt:SWI48\n \t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,r\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"ix86_binary_operator_ok (ASHIFTRT, <MODE>mode, operands)\"\n {\n   switch (get_attr_type (insn))\n     {\n@@ -11834,9 +11846,9 @@\n     default:\n       if (operands[2] == const1_rtx\n \t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-\treturn \"<shift>{<imodesuffix>}\\t%0\";\n+\treturn \"sar{<imodesuffix>}\\t%0\";\n       else\n-\treturn \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+\treturn \"sar{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n     }\n }\n   [(set_attr \"isa\" \"*,bmi2\")\n@@ -11850,6 +11862,40 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*lshr<mode>3_1\"\n+  [(set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm,r,?k\")\n+\t(lshiftrt:SWI48\n+\t  (match_operand:SWI48 1 \"nonimmediate_operand\" \"0,rm,k\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>,r,<KS>\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, <MODE>mode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ISHIFTX:\n+    case TYPE_MSKLOG:\n+      return \"#\";\n+\n+    default:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"shr{<imodesuffix>}\\t%0\";\n+      else\n+\treturn \"shr{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    }\n+}\n+  [(set_attr \"isa\" \"*,bmi2,avx512bw\")\n+   (set_attr \"type\" \"ishift,ishiftx,msklog\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (and (match_operand 2 \"const1_operand\")\n+\t\t (eq_attr \"alternative\" \"0\"))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n ;; Convert shift to the shiftx pattern to avoid flags dependency.\n (define_split\n   [(set (match_operand:SWI48 0 \"register_operand\")\n@@ -11915,19 +11961,19 @@\n \t(zero_extend:DI (any_shiftrt:SI (match_dup 1) (match_dup 2))))]\n   \"operands[2] = gen_lowpart (SImode, operands[2]);\")\n \n-(define_insn \"*<insn><mode>3_1\"\n+(define_insn \"*ashr<mode>3_1\"\n   [(set (match_operand:SWI12 0 \"nonimmediate_operand\" \"=<r>m\")\n-\t(any_shiftrt:SWI12\n+\t(ashiftrt:SWI12\n \t  (match_operand:SWI12 1 \"nonimmediate_operand\" \"0\")\n \t  (match_operand:QI 2 \"nonmemory_operand\" \"c<S>\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"ix86_binary_operator_ok (ASHIFTRT, <MODE>mode, operands)\"\n {\n   if (operands[2] == const1_rtx\n       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n-    return \"<shift>{<imodesuffix>}\\t%0\";\n+    return \"sar{<imodesuffix>}\\t%0\";\n   else\n-    return \"<shift>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n+    return \"sar{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n }\n   [(set_attr \"type\" \"ishift\")\n    (set (attr \"length_immediate\")\n@@ -11939,6 +11985,74 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn \"*lshrqi3_1\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\"  \"=qm,?k\")\n+\t(lshiftrt:QI\n+\t  (match_operand:QI 1 \"nonimmediate_operand\" \"0, k\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\"    \"cI,Wb\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ISHIFT:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"shr{b}\\t%0\";\n+      else\n+\treturn \"shr{b}\\t{%2, %0|%0, %2}\";\n+    case TYPE_MSKLOG:\n+      return \"#\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"*,avx512dq\")\n+   (set_attr \"type\" \"ishift,msklog\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (and (match_operand 2 \"const1_operand\")\n+\t\t (eq_attr \"alternative\" \"0\"))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"QI\")])\n+\n+(define_insn \"*lshrhi3_1\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm, ?k\")\n+\t(lshiftrt:HI\n+\t  (match_operand:HI 1 \"nonimmediate_operand\" \"0, k\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"cI, Ww\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+{\n+  switch (get_attr_type (insn))\n+    {\n+    case TYPE_ISHIFT:\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+\treturn \"shr{w}\\t%0\";\n+      else\n+\treturn \"shr{w}\\t{%2, %0|%0, %2}\";\n+    case TYPE_MSKLOG:\n+      return \"#\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+  [(set_attr \"isa\" \"*, avx512f\")\n+   (set_attr \"type\" \"ishift,msklog\")\n+   (set (attr \"length_immediate\")\n+     (if_then_else\n+       (and (and (match_operand 2 \"const1_operand\")\n+\t\t (eq_attr \"alternative\" \"0\"))\n+\t    (ior (match_test \"TARGET_SHIFT1\")\n+\t\t (match_test \"optimize_function_for_size_p (cfun)\")))\n+       (const_string \"0\")\n+       (const_string \"*\")))\n+   (set_attr \"mode\" \"HI\")])\n+\n (define_insn \"*<insn><mode>3_1_slp\"\n   [(set (strict_low_part (match_operand:SWI12 0 \"register_operand\" \"+<r>\"))\n \t(any_shiftrt:SWI12 (match_operand:SWI12 1 \"register_operand\" \"0\")"}, {"sha": "f8759e4d758c7a766e268a70be1241673f463925", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a56c251898ea70b46798d7893a871bcfe318529b", "patch": "@@ -1755,6 +1755,20 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_split\n+  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\")\n+\t(any_lshift:SWI1248_AVX512BW\n+\t  (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\")\n+\t  (match_operand 2 \"const_int_operand\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_AVX512F && reload_completed\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (any_lshift:SWI1248_AVX512BW\n+\t     (match_dup 1)\n+\t     (match_dup 2)))\n+      (unspec [(const_int 0)] UNSPEC_MASKOP)])])\n+\n (define_insn \"ktest<mode>\"\n   [(set (reg:CC FLAGS_REG)\n \t(unspec:CC"}, {"sha": "4cb6ef37821702ac1429723d1841bde53df9e02e", "filename": "gcc/testsuite/gcc.target/i386/mask-shift.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a56c251898ea70b46798d7893a871bcfe318529b/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmask-shift.c?ref=a56c251898ea70b46798d7893a871bcfe318529b", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512dq -O2\" } */\n+\n+#include<immintrin.h>\n+void\n+fooq (__m512i a, __m512i b, void* p)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  m1 >>= 4;\n+  _mm512_mask_storeu_epi64 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftrb} \"1\" } }  */\n+\n+void\n+food (__m512i a, __m512i b, void* p)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  m1 >>= 8;\n+  _mm512_mask_storeu_epi32 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftrw} \"1\" } }  */\n+\n+void\n+foow (__m512i a, __m512i b, void* p)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  m1 >>= 16;\n+  _mm512_mask_storeu_epi16 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftrd} \"1\" } }  */\n+\n+void\n+foob (__m512i a, __m512i b, void* p)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  m1 >>= 32;\n+  _mm512_mask_storeu_epi8 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftrq} \"1\" { target { ! ia32 } } } }  */\n+\n+void\n+fooq1 (__m512i a, __m512i b, void* p)\n+{\n+  __mmask8 m1 = _mm512_cmpeq_epi64_mask (a, b);\n+  m1 <<= 4;\n+  _mm512_mask_storeu_epi64 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftlb} \"1\" } }  */\n+\n+void\n+food1 (__m512i a, __m512i b, void* p)\n+{\n+  __mmask16 m1 = _mm512_cmpeq_epi32_mask (a, b);\n+  m1 <<= 8;\n+  _mm512_mask_storeu_epi32 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftlw} \"1\" } }  */\n+\n+void\n+foow1 (__m512i a, __m512i b, void* p)\n+{\n+  __mmask32 m1 = _mm512_cmpeq_epi16_mask (a, b);\n+  m1 <<= 16;\n+  _mm512_mask_storeu_epi16 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftld} \"1\" } }  */\n+\n+void\n+foob1 (__m512i a, __m512i b, void* p)\n+{\n+  __mmask64 m1 = _mm512_cmpeq_epi8_mask (a, b);\n+  m1 <<= 32;\n+  _mm512_mask_storeu_epi8 (p, m1, a);\n+}\n+\n+/* { dg-final { scan-assembler-times {(?n)kshiftlq} \"1\" { target { ! ia32 } } } }  */"}]}