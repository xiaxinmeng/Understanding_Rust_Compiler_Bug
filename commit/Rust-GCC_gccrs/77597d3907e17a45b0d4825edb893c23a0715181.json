{"sha": "77597d3907e17a45b0d4825edb893c23a0715181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc1OTdkMzkwN2UxN2E0NWIwZDQ4MjVlZGI4OTNjMjNhMDcxNTE4MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-01-27T15:49:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-01-27T15:49:00Z"}, "message": "re PR libstdc++/42832 (Revisit std::function for aliasing issues and efficiency)\n\n2010-01-27  Richard Guenther  <rguenther@suse.de>\n\n\tPR libstdc++/42832\n\t* include/std/functional (function<>::swap): Perform bytewise\n\tswap of _M_functor.\n\t* include/tr1/functional (function<>::swap): Likewise.\n\nFrom-SVN: r156290", "tree": {"sha": "41da2c42473b85d27731c803582dd08dd982c329", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/41da2c42473b85d27731c803582dd08dd982c329"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77597d3907e17a45b0d4825edb893c23a0715181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77597d3907e17a45b0d4825edb893c23a0715181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77597d3907e17a45b0d4825edb893c23a0715181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77597d3907e17a45b0d4825edb893c23a0715181/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a78eb7197d02a89c12859159f9e0c32c740701b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a78eb7197d02a89c12859159f9e0c32c740701b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a78eb7197d02a89c12859159f9e0c32c740701b"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "25cda7e571b03d38eca07fff3a57a69d7b09a7a9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=77597d3907e17a45b0d4825edb893c23a0715181", "patch": "@@ -1,3 +1,10 @@\n+2010-01-27  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR libstdc++/42832\n+\t* include/std/functional (function<>::swap): Perform bytewise\n+\tswap of _M_functor.\n+\t* include/tr1/functional (function<>::swap): Likewise.\n+\n 2010-01-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/abi/pre/gnu.ver: Avoid time_get pattern conflicts."}, {"sha": "c390c3bbdcd51f745a188605fc00f4cee6e90517", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=77597d3907e17a45b0d4825edb893c23a0715181", "patch": "@@ -1940,9 +1940,16 @@ namespace std\n        */\n       void swap(function& __x)\n       {\n-\t_Any_data __old_functor = _M_functor;\n-\t_M_functor = __x._M_functor;\n-\t__x._M_functor = __old_functor;\n+\t/* We cannot perform direct assignments of the _M_functor\n+\t   parts as they are of type _Any_data and have a different\n+\t   dynamic type.  Doing so would violate type-based aliasing\n+\t   rules and lead to spurious miscompilations.\n+\t   Instead perform a bytewise exchange of the memory of\n+\t   both POD objects.\n+\t   ???  A wordwise exchange honoring alignment of _M_functor\n+\t   would be more efficient.  See PR42845.  */\n+\tfor (unsigned i = 0; i < sizeof (_M_functor._M_pod_data); ++i)\n+\t  std::swap (_M_functor._M_pod_data[i], __x._M_functor._M_pod_data[i]);\n \t_Manager_type __old_manager = _M_manager;\n \t_M_manager = __x._M_manager;\n \t__x._M_manager = __old_manager;"}, {"sha": "2052f885de8851f05b48fbfd82e88922312ad6d3", "filename": "libstdc++-v3/include/tr1/functional", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77597d3907e17a45b0d4825edb893c23a0715181/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ffunctional?ref=77597d3907e17a45b0d4825edb893c23a0715181", "patch": "@@ -1904,9 +1904,16 @@ namespace tr1\n        */\n       void swap(function& __x)\n       {\n-\t_Any_data __old_functor = _M_functor;\n-\t_M_functor = __x._M_functor;\n-\t__x._M_functor = __old_functor;\n+        /* We cannot perform direct assignments of the _M_functor\n+\t   parts as they are of type _Any_data and have a different\n+\t   dynamic type.  Doing so would violate type-based aliasing\n+\t   rules and lead to spurious miscompilations.\n+\t   Instead perform a bytewise exchange of the memory of\n+\t   both POD objects.\n+\t   ???  A wordwise exchange honoring alignment of _M_functor\n+\t   would be more efficient.  See PR42845.  */\n+\tfor (unsigned i = 0; i < sizeof (_M_functor._M_pod_data); ++i)\n+\t  std::swap (_M_functor._M_pod_data[i], __x._M_functor._M_pod_data[i]);\n \t_Manager_type __old_manager = _M_manager;\n \t_M_manager = __x._M_manager;\n \t__x._M_manager = __old_manager;"}]}