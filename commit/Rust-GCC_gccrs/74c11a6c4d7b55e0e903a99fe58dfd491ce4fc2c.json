{"sha": "74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjMTFhNmM0ZDdiNTVlMGU5MDNhOTlmZTU4ZGZkNDkxY2U0ZmMyYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2008-05-17T08:21:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-05-17T08:21:08Z"}, "message": "trans.c (gnat_to_gnu): Account for dummy types pointed to by the converted pointer types.\n\n\t* trans.c (gnat_to_gnu) <N_Validate_Unchecked_Conversion>: Account\n\tfor dummy types pointed to by the converted pointer types.\n\nFrom-SVN: r135464", "tree": {"sha": "f9545569019d481d033e308ad0d90115d50e0a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9545569019d481d033e308ad0d90115d50e0a21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/comments", "author": null, "committer": null, "parents": [{"sha": "30da41ed0e281e0fd35454eb24490ed35325e9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30da41ed0e281e0fd35454eb24490ed35325e9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30da41ed0e281e0fd35454eb24490ed35325e9b5"}], "stats": {"total": 123, "additions": 94, "deletions": 29}, "files": [{"sha": "5975265e9e5312e54fda724b87468edd888e7860", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "patch": "@@ -1,3 +1,8 @@\n+2008-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* trans.c (gnat_to_gnu) <N_Validate_Unchecked_Conversion>: Account\n+\tfor dummy types pointed to by the converted pointer types.\n+\n 2008-05-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* trans.c (add_decl_expr): At toplevel, mark the TYPE_ADA_SIZE field"}, {"sha": "76592fe2b460469b994c3d93c8bf009cdb4b64a4", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 55, "deletions": 29, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "patch": "@@ -4777,45 +4777,71 @@ gnat_to_gnu (Node_Id gnat_node)\n       break;\n \n     case N_Validate_Unchecked_Conversion:\n-      /* If the result is a pointer type, see if we are either converting\n-\t from a non-pointer or from a pointer to a type with a different\n-\t alias set and warn if so.  If the result defined in the same unit as\n-\t this unchecked conversion, we can allow this because we can know to\n-\t make that type have alias set 0.  */\n       {\n+\tEntity_Id gnat_target_type = Target_Type (gnat_node);\n \ttree gnu_source_type = gnat_to_gnu_type (Source_Type (gnat_node));\n-\ttree gnu_target_type = gnat_to_gnu_type (Target_Type (gnat_node));\n-\n-\tif (POINTER_TYPE_P (gnu_target_type)\n-\t    && !In_Same_Source_Unit (Target_Type (gnat_node), gnat_node)\n-\t    && get_alias_set (TREE_TYPE (gnu_target_type)) != 0\n-\t    && !No_Strict_Aliasing (Underlying_Type (Target_Type (gnat_node)))\n-\t    && (!POINTER_TYPE_P (gnu_source_type)\n-\t\t|| (get_alias_set (TREE_TYPE (gnu_source_type))\n-\t\t    != get_alias_set (TREE_TYPE (gnu_target_type)))))\n+\ttree gnu_target_type = gnat_to_gnu_type (gnat_target_type);\n+\n+\t/* No need for any warning in this case.  */\n+\tif (!flag_strict_aliasing)\n+\t  ;\n+\n+\t/* If the result is a pointer type, see if we are either converting\n+\t   from a non-pointer or from a pointer to a type with a different\n+\t   alias set and warn if so.  If the result is defined in the same\n+\t   unit as this unchecked conversion, we can allow this because we\n+\t   can know to make the pointer type behave properly.  */\n+\telse if (POINTER_TYPE_P (gnu_target_type)\n+\t\t && !In_Same_Source_Unit (gnat_target_type, gnat_node)\n+\t\t && !No_Strict_Aliasing (Underlying_Type (gnat_target_type)))\n \t  {\n-\t    post_error_ne\n-\t      (\"?possible aliasing problem for type&\",\n-\t       gnat_node, Target_Type (gnat_node));\n-\t    post_error\n-\t      (\"\\\\?use -fno-strict-aliasing switch for references\",\n-\t       gnat_node);\n-\t    post_error_ne\n-\t      (\"\\\\?or use `pragma No_Strict_Aliasing (&);`\",\n-\t       gnat_node, Target_Type (gnat_node));\n+\t    tree gnu_source_desig_type = POINTER_TYPE_P (gnu_source_type)\n+\t\t\t\t\t ? TREE_TYPE (gnu_source_type)\n+\t\t\t\t\t : NULL_TREE;\n+\t    tree gnu_target_desig_type = TREE_TYPE (gnu_target_type);\n+\n+\t    if ((TYPE_DUMMY_P (gnu_target_desig_type)\n+\t\t || get_alias_set (gnu_target_desig_type) != 0)\n+\t        && (!POINTER_TYPE_P (gnu_source_type)\n+\t\t    || (TYPE_DUMMY_P (gnu_source_desig_type)\n+\t\t\t!= TYPE_DUMMY_P (gnu_target_desig_type))\n+\t\t    || (TYPE_DUMMY_P (gnu_source_desig_type)\n+\t\t\t&& gnu_source_desig_type != gnu_target_desig_type)\n+\t\t    || (get_alias_set (gnu_source_desig_type)\n+\t\t\t!= get_alias_set (gnu_target_desig_type))))\n+\t      {\n+\t\tpost_error_ne\n+\t\t  (\"?possible aliasing problem for type&\",\n+\t\t   gnat_node, Target_Type (gnat_node));\n+\t\tpost_error\n+\t\t  (\"\\\\?use -fno-strict-aliasing switch for references\",\n+\t\t   gnat_node);\n+\t\tpost_error_ne\n+\t\t  (\"\\\\?or use `pragma No_Strict_Aliasing (&);`\",\n+\t\t   gnat_node, Target_Type (gnat_node));\n+\t      }\n \t  }\n \n-\t/* The No_Strict_Aliasing flag is not propagated to the back-end for\n-\t   fat pointers so unconditionally warn in problematic cases.  */\n+\t/* But if the result is a fat pointer type, we have no mechanism to\n+\t   do that, so we unconditionally warn in problematic cases.  */\n \telse if (TYPE_FAT_POINTER_P (gnu_target_type))\n \t  {\n-\t    tree array_type\n+\t    tree gnu_source_array_type\n+\t      = TYPE_FAT_POINTER_P (gnu_source_type)\n+\t\t? TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_source_type)))\n+\t\t: NULL_TREE;\n+\t    tree gnu_target_array_type\n \t      = TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_target_type)));\n \n-\t    if (get_alias_set (array_type) != 0\n+\t    if ((TYPE_DUMMY_P (gnu_target_array_type)\n+\t\t || get_alias_set (gnu_target_array_type) != 0)\n \t\t&& (!TYPE_FAT_POINTER_P (gnu_source_type)\n-\t\t    || (get_alias_set (TREE_TYPE (TREE_TYPE (TYPE_FIELDS (gnu_source_type))))\n-\t\t\t!= get_alias_set (array_type))))\n+\t\t    || (TYPE_DUMMY_P (gnu_source_array_type)\n+\t\t\t!= TYPE_DUMMY_P (gnu_target_array_type))\n+\t\t    || (TYPE_DUMMY_P (gnu_source_array_type)\n+\t\t\t&& gnu_source_array_type != gnu_target_array_type)\n+\t\t    || (get_alias_set (gnu_source_array_type)\n+\t\t\t!= get_alias_set (gnu_target_array_type))))\n \t      {\n \t\tpost_error_ne\n \t\t  (\"?possible aliasing problem for type&\","}, {"sha": "a50160189cd44a1eda4ffd0341b65391d1350117", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "patch": "@@ -1,3 +1,7 @@\n+2008-05-17  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/warn4.adb: New test.\n+\n 2008-05-16  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/35756"}, {"sha": "94147c1e6f5aee54953eb8aa7fd33f48d46fa6af", "filename": "gcc/testsuite/gnat.dg/warn4.adb", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn4.adb?ref=74c11a6c4d7b55e0e903a99fe58dfd491ce4fc2c", "patch": "@@ -0,0 +1,30 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2\" }\n+\n+with Unchecked_Conversion;\n+\n+procedure Warn4 is\n+\n+   type POSIX_Character is new Standard.Character;\n+   type POSIX_String is array (Positive range <>) of aliased POSIX_Character;\n+\n+   type String_Ptr is access all String;\n+   type POSIX_String_Ptr is access all POSIX_String;\n+\n+   function sptr_to_psptr is new Unchecked_Conversion -- { dg-warning \"aliasing problem\" }\n+     (String_Ptr, POSIX_String_Ptr); -- { dg-warning \"\" \"\" { target *-*-* } 14 }\n+\n+   function To_POSIX_String (Str : String) return POSIX_String;\n+   function To_POSIX_String (Str : String)\n+      return POSIX_String is\n+   begin\n+      return sptr_to_psptr (Str'Unrestricted_Access).all;\n+   end To_POSIX_String;\n+\n+   A : Boolean;\n+   S : String := \"ABCD/abcd\";\n+   P : Posix_String := \"ABCD/abcd\";\n+\n+begin\n+   A := To_POSIX_String (S) = P;\n+end;"}]}