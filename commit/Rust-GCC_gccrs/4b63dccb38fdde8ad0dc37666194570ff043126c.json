{"sha": "4b63dccb38fdde8ad0dc37666194570ff043126c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2M2RjY2IzOGZkZGU4YWQwZGMzNzY2NjE5NDU3MGZmMDQzMTI2Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:13:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-06-26T15:13:41Z"}, "message": "Add more decls for functions in fold-const.c.\n\nFrom-SVN: r4751", "tree": {"sha": "07e8754a8cc4c420178ed5f6498a340963c8dbfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07e8754a8cc4c420178ed5f6498a340963c8dbfe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b63dccb38fdde8ad0dc37666194570ff043126c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b63dccb38fdde8ad0dc37666194570ff043126c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b63dccb38fdde8ad0dc37666194570ff043126c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b63dccb38fdde8ad0dc37666194570ff043126c/comments", "author": null, "committer": null, "parents": [{"sha": "6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc7571d06fbc2f8ae10b02165df7e6a558314a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc7571d06fbc2f8ae10b02165df7e6a558314a7"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "7142f494def53099dea04b6481abbd8ba18ea645", "filename": "gcc/tree.h", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b63dccb38fdde8ad0dc37666194570ff043126c/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b63dccb38fdde8ad0dc37666194570ff043126c/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4b63dccb38fdde8ad0dc37666194570ff043126c", "patch": "@@ -1146,14 +1146,6 @@ extern tree type_hash_canon\t\tPROTO((int, tree));\n \n extern void layout_decl\t\t\tPROTO((tree, unsigned));\n \n-/* Fold constants as much as possible in an expression.\n-   Returns the simplified expression.\n-   Acts only on the top level of the expression;\n-   if the argument itself cannot be simplified, its\n-   subexpressions are not changed.  */\n-\n-extern tree fold\t\t\tPROTO((tree));\n-\n /* Return an expr equal to X but certainly not valid as an lvalue.  */\n \n extern tree non_lvalue\t\t\tPROTO((tree));\n@@ -1428,7 +1420,37 @@ extern int pushcase_range\t\t\tPROTO((tree, tree, tree, tree *));\n \n /* In fold-const.c */\n \n-extern tree invert_truthvalue\t\t\tPROTO((tree));\n+/* Fold constants as much as possible in an expression.\n+   Returns the simplified expression.\n+   Acts only on the top level of the expression;\n+   if the argument itself cannot be simplified, its\n+   subexpressions are not changed.  */\n+\n+extern tree fold\t\tPROTO((tree));\n+\n+extern int force_fit_type\tPROTO((tree, int));\n+extern int add_double\t\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT *, HOST_WIDE_INT *));\n+extern int neg_double\t\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT *, HOST_WIDE_INT *));\n+extern int mul_double\t\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT *, HOST_WIDE_INT *));\n+extern void lshift_double\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, int, HOST_WIDE_INT *,\n+\t\t\t\t       HOST_WIDE_INT *, int));\n+extern void rshift_double\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, int,\n+\t\t\t\t       HOST_WIDE_INT *, HOST_WIDE_INT *, int));\n+extern void lrotate_double\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, int, HOST_WIDE_INT *,\n+\t\t\t\t       HOST_WIDE_INT *));\n+extern void rrotate_double\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, int, HOST_WIDE_INT *,\n+\t\t\t\t       HOST_WIDE_INT *));\n+extern int operand_equal_p\tPROTO((tree, tree, int));\n+extern tree invert_truthvalue\tPROTO((tree));\n \f\n /* The language front-end must define these functions.  */\n "}]}