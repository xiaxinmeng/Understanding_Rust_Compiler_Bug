{"sha": "2314fb700814075525ad6873ecd907d0fe429177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxNGZiNzAwODE0MDc1NTI1YWQ2ODczZWNkOTA3ZDBmZTQyOTE3Nw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1994-09-19T12:46:40Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1994-09-19T12:46:40Z"}, "message": "Add format checking for `q' (quad) modifier.\n\nFrom-SVN: r8093", "tree": {"sha": "e5ba4fb247c4beef172487b66ac45d7d57ada81c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5ba4fb247c4beef172487b66ac45d7d57ada81c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2314fb700814075525ad6873ecd907d0fe429177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2314fb700814075525ad6873ecd907d0fe429177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2314fb700814075525ad6873ecd907d0fe429177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2314fb700814075525ad6873ecd907d0fe429177/comments", "author": null, "committer": null, "parents": [{"sha": "9dd53f1e78d5b2527d8ad5df9bd12b5d069e4831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dd53f1e78d5b2527d8ad5df9bd12b5d069e4831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dd53f1e78d5b2527d8ad5df9bd12b5d069e4831"}], "stats": {"total": 51, "additions": 29, "deletions": 22}, "files": [{"sha": "efc5fcbcdf7a767f065adf7b2ab0d3636e05ff43", "filename": "gcc/c-common.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2314fb700814075525ad6873ecd907d0fe429177/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2314fb700814075525ad6873ecd907d0fe429177/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2314fb700814075525ad6873ecd907d0fe429177", "patch": "@@ -483,9 +483,11 @@ found_attr:;\n \n #define T_I\t&integer_type_node\n #define T_L\t&long_integer_type_node\n+#define T_LL\t&long_long_integer_type_node\n #define T_S\t&short_integer_type_node\n #define T_UI\t&unsigned_type_node\n #define T_UL\t&long_unsigned_type_node\n+#define T_ULL\t&long_long_unsigned_type_node\n #define T_US\t&short_unsigned_type_node\n #define T_F\t&float_type_node\n #define T_D\t&double_type_node\n@@ -506,6 +508,9 @@ typedef struct {\n   /* Type of argument if length modifier `l' is used.\n      If NULL, then this modifier is not allowed.  */\n   tree *llen;\n+  /* Type of argument if length modifier `q' is used.\n+     If NULL, then this modifier is not allowed.  */\n+  tree *qlen;\n   /* Type of argument if length modifier `L' is used.\n      If NULL, then this modifier is not allowed.  */\n   tree *bigllen;\n@@ -514,32 +519,32 @@ typedef struct {\n } format_char_info;\n \n static format_char_info print_char_table[] = {\n-  { \"di\",\t0,\tT_I,\tT_I,\tT_L,\tNULL,\t\"-wp0 +\"\t},\n-  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp0#\"\t\t},\n-  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp0\"\t\t},\n+  { \"di\",\t0,\tT_I,\tT_I,\tT_L,\tT_LL,\tNULL,\t\"-wp0 +\"\t},\n+  { \"oxX\",\t0,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tNULL,\t\"-wp0#\"\t\t},\n+  { \"u\",\t0,\tT_UI,\tT_UI,\tT_UL,\tT_ULL,\tNULL,\t\"-wp0\"\t\t},\n /* Two GNU extensions.  */\n-  { \"Z\",\t0,\tT_ST,\tNULL,\tNULL,\tNULL,\t\"-wp0\"\t\t},\n-  { \"m\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\t\"-wp\"\t\t},\n-  { \"feEgG\",\t0,\tT_D,\tNULL,\tNULL,\tT_LD,\t\"-wp0 +#\"\t},\n-  { \"c\",\t0,\tT_I,\tNULL,\tT_W,\tNULL,\t\"-w\"\t\t},\n-  { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"s\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\t\"-wp\"\t\t},\n-  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n-  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n-  { \"n\",\t1,\tT_I,\tT_S,\tT_L,\tNULL,\t\"\"\t\t},\n+  { \"Z\",\t0,\tT_ST,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp0\"\t\t},\n+  { \"m\",\t0,\tT_UI,\tT_UI,\tT_UL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"feEgG\",\t0,\tT_D,\tNULL,\tNULL,\tNULL,\tT_LD,\t\"-wp0 +#\"\t},\n+  { \"c\",\t0,\tT_I,\tNULL,\tT_W,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"C\",\t0,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"s\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n+  { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n+  { \"n\",\t1,\tT_I,\tT_S,\tT_L,\tT_LL,\tNULL,\t\"\"\t\t},\n   { NULL }\n };\n \n static format_char_info scan_char_table[] = {\n-  { \"di\",\t1,\tT_I,\tT_S,\tT_L,\tNULL,\t\"*\"\t},\n-  { \"ouxX\",\t1,\tT_UI,\tT_US,\tT_UL,\tNULL,\t\"*\"\t},\t\n-  { \"efgEG\",\t1,\tT_F,\tNULL,\tT_D,\tT_LD,\t\"*\"\t},\n-  { \"sc\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\t\"*a\"\t},\n-  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n-  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n-  { \"n\",\t1,\tT_I,\tT_S,\tT_L,\tNULL,\t\"\"\t},\n+  { \"di\",\t1,\tT_I,\tT_S,\tT_L,\tT_LL,\tNULL,\t\"*\"\t},\n+  { \"ouxX\",\t1,\tT_UI,\tT_US,\tT_UL,\tT_ULL,\tNULL,\t\"*\"\t},\t\n+  { \"efgEG\",\t1,\tT_F,\tNULL,\tT_D,\tNULL,\tT_LD,\t\"*\"\t},\n+  { \"sc\",\t1,\tT_C,\tNULL,\tT_W,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"[\",\t1,\tT_C,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n+  { \"C\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n+  { \"n\",\t1,\tT_I,\tT_S,\tT_L,\tT_LL,\tNULL,\t\"\"\t},\n   { NULL }\n };\n \n@@ -885,7 +890,8 @@ check_format_info (info, params)\n \t\t}\n \t    }\n \t}\n-      if (*format_chars == 'h' || *format_chars == 'l' || *format_chars == 'L')\n+      if (*format_chars == 'h' || *format_chars == 'l' || *format_chars == 'q' ||\n+\t  *format_chars == 'L')\n \tlength_char = *format_chars++;\n       else\n \tlength_char = 0;\n@@ -994,6 +1000,7 @@ check_format_info (info, params)\n \tdefault: wanted_type = fci->nolen ? *(fci->nolen) : 0; break;\n \tcase 'h': wanted_type = fci->hlen ? *(fci->hlen) : 0; break;\n \tcase 'l': wanted_type = fci->llen ? *(fci->llen) : 0; break;\n+\tcase 'q': wanted_type = fci->qlen ? *(fci->qlen) : 0; break;\n \tcase 'L': wanted_type = fci->bigllen ? *(fci->bigllen) : 0; break;\n \t}\n       if (wanted_type == 0)"}]}