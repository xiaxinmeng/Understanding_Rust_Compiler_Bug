{"sha": "f474c6f8f92594e09a56c03cdd609d161e690bdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ3NGM2ZjhmOTI1OTRlMDlhNTZjMDNjZGQ2MDlkMTYxZTY5MGJkZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-01-12T21:58:56Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-01-12T21:58:56Z"}, "message": "calls.c (emit_library_call_value_1): Add USEs and CLOBBERs to function usage for arguments passed by reference.\n\n* calls.c (emit_library_call_value_1): Add USEs and CLOBBERs\nto function usage for arguments passed by reference.  Optimize\ncallee-copied arguments.\n* regmove.c (find_related_toplev): Find uses in function usage.\n(replace_in_call_usage): New function.\n(fixup_match_1): Call it.\n* cse.c (cse_insn): Canonicalize registers in function usage.\n* reload1.c (replace_pseudos_in_call_usage): New function.\n(reload): Call it.\n\nFrom-SVN: r38964", "tree": {"sha": "7db1440305362aa4b11577379f87eec6ec050a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db1440305362aa4b11577379f87eec6ec050a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f474c6f8f92594e09a56c03cdd609d161e690bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f474c6f8f92594e09a56c03cdd609d161e690bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f474c6f8f92594e09a56c03cdd609d161e690bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f474c6f8f92594e09a56c03cdd609d161e690bdd/comments", "author": null, "committer": null, "parents": [{"sha": "7dd232a8824ac79a5d17641804ffe1a72f19c387", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd232a8824ac79a5d17641804ffe1a72f19c387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd232a8824ac79a5d17641804ffe1a72f19c387"}], "stats": {"total": 175, "additions": 166, "deletions": 9}, "files": [{"sha": "e8d7d15fd000e4d59c350bb0e47f18c786dfa00e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f474c6f8f92594e09a56c03cdd609d161e690bdd", "patch": "@@ -1,5 +1,15 @@\n 2001-01-12  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* calls.c (emit_library_call_value_1): Add USEs and CLOBBERs\n+\tto function usage for arguments passed by reference.  Optimize\n+\tcallee-copied arguments.\n+\t* regmove.c (find_related_toplev): Find uses in function usage.\n+\t(replace_in_call_usage): New function.\n+\t(fixup_match_1): Call it.\n+\t* cse.c (cse_insn): Canonicalize registers in function usage.\n+\t* reload1.c (replace_pseudos_in_call_usage): New function.\n+\t(reload): Call it.\n+\n \t* Makefile.in: Reverted yesterday's wrong patch.  Installed the\n \tright version.\n "}, {"sha": "95dad19f6c1a9ec27d7f2aac804063b24f5ab35d", "filename": "gcc/calls.c", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f474c6f8f92594e09a56c03cdd609d161e690bdd", "patch": "@@ -3676,16 +3676,44 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n #ifdef FUNCTION_ARG_PASS_BY_REFERENCE\n       if (FUNCTION_ARG_PASS_BY_REFERENCE (args_so_far, mode, NULL_TREE, 1))\n \t{\n-\t  /* We do not support FUNCTION_ARG_CALLEE_COPIES here since it can\n-\t     be viewed as just an efficiency improvement.  */\n-\t  rtx slot = assign_temp (type_for_mode (mode, 0), 0, 1, 1);\n+\t  rtx slot;\n+\t  int must_copy = 1\n+#ifdef FUNCTION_ARG_CALLEE_COPIES\t  \n+\t    && ! FUNCTION_ARG_CALLEE_COPIES (args_so_far, mode,\n+\t\t\t\t\t     NULL_TREE, 1)\n+#endif\n+\t    ;\n+\n+\t  if (GET_MODE (val) == MEM && ! must_copy)\n+\t    slot = val;\n+\t  else if (must_copy)\n+\t    {\n+\t      slot = assign_temp (type_for_mode (mode, 0), 0, 1, 1);\n+\t      emit_move_insn (slot, val);\n+\t    }\n+\t  else\n+\t    {\n+\t      tree type = type_for_mode (mode, 0);\n+\n+\t      slot = gen_rtx_MEM (Pmode,\n+\t\t\t\t  expand_expr (build1 (ADDR_EXPR,\n+\t\t\t\t\t\t       build_pointer_type\n+\t\t\t\t\t\t       (type),\n+\t\t\t\t\t\t       make_tree (type, val)),\n+\t\t\t\t\t       NULL_RTX, VOIDmode, 0));\n+\t    }\n \n \t  call_fusage = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t\t   gen_rtx_USE (VOIDmode, slot),\n \t\t\t\t\t   call_fusage);\n-\t  emit_move_insn (slot, val);\n-\t  val = force_operand (XEXP (slot, 0), NULL_RTX);\n+\t  if (must_copy)\n+\t    call_fusage = gen_rtx_EXPR_LIST (VOIDmode,\n+\t\t\t\t\t     gen_rtx_CLOBBER (VOIDmode,\n+\t\t\t\t\t\t\t      slot),\n+\t\t\t\t\t     call_fusage);\n+\n \t  mode = Pmode;\n+\t  val = force_operand (XEXP (slot, 0), NULL_RTX);\n \t}\n #endif\n "}, {"sha": "7b86d51cb82a0d0d67a90cbdbfb557dbebbf462b", "filename": "gcc/cse.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=f474c6f8f92594e09a56c03cdd609d161e690bdd", "patch": "@@ -1,6 +1,6 @@\n /* Common subexpression elimination for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -4754,8 +4754,11 @@ cse_insn (insn, libcall_insn)\n   if (GET_CODE (insn) == CALL_INSN)\n     {\n       for (tem = CALL_INSN_FUNCTION_USAGE (insn); tem; tem = XEXP (tem, 1))\n-\tif (GET_CODE (XEXP (tem, 0)) == CLOBBER)\n-\t  invalidate (SET_DEST (XEXP (tem, 0)), VOIDmode);\n+\t{\n+\t  if (GET_CODE (XEXP (tem, 0)) == CLOBBER)\n+\t    invalidate (SET_DEST (XEXP (tem, 0)), VOIDmode);\n+\t  XEXP (tem, 0) = canon_reg (XEXP (tem, 0), insn);\n+\t}\n     }\n \n   if (GET_CODE (x) == SET)"}, {"sha": "3c94e18b846504b52e0bedb05b7889552df63e83", "filename": "gcc/regmove.c", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=f474c6f8f92594e09a56c03cdd609d161e690bdd", "patch": "@@ -1,6 +1,6 @@\n /* Move registers around to reduce number of move instructions needed.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1505,6 +1505,17 @@ find_matches (insn, matchp)\n   int op_no;\n   int any_matches = 0;\n \n+  if (GET_CODE (insn) == CALL_INSN\n+      && CALL_INSN_FUNCTION_USAGE (insn))\n+    {\n+      rtx usage;\n+\n+      for (usage = CALL_INSN_FUNCTION_USAGE (insn);\n+\t   usage;\n+\t   usage = XEXP (usage, 1))\n+\tfind_related (&XEXP (usage, 0), insn, luid, call_tally);\n+    }\n+\n   extract_insn (insn);\n   if (! constrain_operands (0))\n     return 0;\n@@ -1571,6 +1582,45 @@ find_matches (insn, matchp)\n   return any_matches;\n }\n \n+/* Try to replace all occurrences of DST_REG with SRC in LOC, that is\n+   assumed to be in INSN.  */\n+\n+static void\n+replace_in_call_usage (loc, dst_reg, src, insn)\n+     rtx *loc;\n+     int dst_reg;\n+     rtx src;\n+     rtx insn;\n+{\n+  rtx x = *loc;\n+  enum rtx_code code;\n+  const char *fmt;\n+  int i, j;\n+\n+  if (! x)\n+    return;\n+  \n+  code = GET_CODE (x);\n+  if (code == REG)\n+    {\n+      if (REGNO (x) != dst_reg)\n+\treturn;\n+\t\n+      validate_change (insn, loc, src, 1);\n+\n+      return;\n+    }\n+  \n+  /* Process each of our operands recursively.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n+    if (*fmt == 'e')\n+      replace_in_call_usage (&XEXP (x, i), dst_reg, src, insn);\n+    else if (*fmt == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\treplace_in_call_usage (& XVECEXP (x, i, j), dst_reg, src, insn);\n+}\n+\n /* Try to replace output operand DST in SET, with input operand SRC.  SET is\n    the only set in INSN.  INSN has just been recognized and constrained.\n    SRC is operand number OPERAND_NUMBER in INSN.\n@@ -1643,6 +1693,10 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \n   for (length = s_length = 0, p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n+      if (GET_CODE (p) == CALL_INSN)\n+\treplace_in_call_usage (& CALL_INSN_FUNCTION_USAGE (p),\n+\t\t\t       REGNO (dst), src, p);\n+\t  \n       /* ??? We can't scan past the end of a basic block without updating\n \t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n       if (perhaps_ends_bb_p (p))"}, {"sha": "ace38ef5edac81d9e50108441813a9de9130a842", "filename": "gcc/reload1.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f474c6f8f92594e09a56c03cdd609d161e690bdd/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f474c6f8f92594e09a56c03cdd609d161e690bdd", "patch": "@@ -577,6 +577,63 @@ compute_use_by_pseudos (to, from)\n \t }\n      });\n }\n+\n+/* Replace all pseudos found in LOC with their corresponding\n+   equivalences.  */\n+\n+static void\n+replace_pseudos_in_call_usage (loc, mem_mode, usage)\n+     rtx *loc;\n+     enum machine_mode mem_mode;\n+     rtx usage;\n+{\n+  rtx x = *loc;\n+  enum rtx_code code;\n+  const char *fmt;\n+  int i, j;\n+\n+  if (! x)\n+    return;\n+  \n+  code = GET_CODE (x);\n+  if (code == REG)\n+    {\n+      if (REGNO (x) < FIRST_PSEUDO_REGISTER)\n+\treturn;\n+\n+      x = eliminate_regs (x, mem_mode, usage);\n+      if (x != *loc)\n+\t{\n+\t  *loc = x;\n+\t  replace_pseudos_in_call_usage (loc, mem_mode, usage);\n+\t  return;\n+\t}\n+\n+      if (reg_renumber [REGNO (x)] < 0)\n+\t*loc = regno_reg_rtx[REGNO (x)];\n+      else if (reg_equiv_mem[REGNO (x)])\n+\t*loc = reg_equiv_mem[REGNO (x)];\n+      else\n+\tabort ();\n+\n+      return;\n+    }\n+  else if (code == MEM)\n+    {\n+      replace_pseudos_in_call_usage (& XEXP (x, 0), GET_MODE (x), usage);\n+      return;\n+    }\n+  \n+  /* Process each of our operands recursively.  */\n+  fmt = GET_RTX_FORMAT (code);\n+  for (i = 0; i < GET_RTX_LENGTH (code); i++, fmt++)\n+    if (*fmt == 'e')\n+      replace_pseudos_in_call_usage (&XEXP (x, i), mem_mode, usage);\n+    else if (*fmt == 'E')\n+      for (j = 0; j < XVECLEN (x, i); j++)\n+\treplace_pseudos_in_call_usage (& XVECEXP (x, i, j), mem_mode, usage);\n+}\n+\n \f\n /* Global variables used by reload and its subroutines.  */\n \n@@ -1114,6 +1171,11 @@ reload (first, global)\n       {\n \trtx *pnote;\n \n+\tif (GET_CODE (insn) == CALL_INSN)\n+\t  replace_pseudos_in_call_usage (& CALL_INSN_FUNCTION_USAGE (insn),\n+\t\t\t\t\t VOIDmode,\n+\t\t\t\t\t CALL_INSN_FUNCTION_USAGE (insn));\n+\n \tif ((GET_CODE (PATTERN (insn)) == USE\n \t     && find_reg_note (insn, REG_EQUAL, NULL_RTX))\n \t    || (GET_CODE (PATTERN (insn)) == CLOBBER"}]}