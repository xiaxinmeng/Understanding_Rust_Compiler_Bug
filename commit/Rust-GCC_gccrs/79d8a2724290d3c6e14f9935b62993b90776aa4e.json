{"sha": "79d8a2724290d3c6e14f9935b62993b90776aa4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlkOGEyNzI0MjkwZDNjNmUxNGY5OTM1YjYyOTkzYjkwNzc2YWE0ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-04-19T16:28:24Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-04-19T16:28:24Z"}, "message": "N3638 changes to return type deduction\n\n\t* decl.c (undeduced_auto_decl): New.\n\t(require_deduced_type): New.\n\t(fndecl_declared_return_type): New.\n\t(decls_match): Use it.\n\t(duplicate_decls): Don't check for auto return.\n\t(grokdeclarator): Reject virtual auto.\n\t* class.c (resolve_address_of_overloaded_function): Handle\n\tauto function templates.\n\t* decl2.c (mark_used): Use undeduced_auto_decl, require_deduced_type.\n\t* cp-tree.h: Declare new fns.\n\t* error.c (dump_function_decl): Use fndecl_declared_return_type.\n\t* search.c (check_final_overrider): Likewise.\n\t* pt.c (make_decltype_auto): New.\n\t(do_auto_deduction): Require plain decltype(auto).\n\t(is_auto): Adjust.\n\nFrom-SVN: r198099", "tree": {"sha": "a187b2259ee70bc4c76bd1bfeafd261b460ed430", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a187b2259ee70bc4c76bd1bfeafd261b460ed430"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79d8a2724290d3c6e14f9935b62993b90776aa4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d8a2724290d3c6e14f9935b62993b90776aa4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79d8a2724290d3c6e14f9935b62993b90776aa4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79d8a2724290d3c6e14f9935b62993b90776aa4e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86c0810c726e89e35cf5c0c037953164e8d38ae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86c0810c726e89e35cf5c0c037953164e8d38ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86c0810c726e89e35cf5c0c037953164e8d38ae0"}], "stats": {"total": 184, "additions": 154, "deletions": 30}, "files": [{"sha": "7e224ae2e0e5688357ed09acd20db73894e184f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -1,5 +1,22 @@\n 2013-04-19  Jason Merrill  <jason@redhat.com>\n \n+\tN3638 changes to return type deduction\n+\t* decl.c (undeduced_auto_decl): New.\n+\t(require_deduced_type): New.\n+\t(fndecl_declared_return_type): New.\n+\t(decls_match): Use it.\n+\t(duplicate_decls): Don't check for auto return.\n+\t(grokdeclarator): Reject virtual auto.\n+\t* class.c (resolve_address_of_overloaded_function): Handle\n+\tauto function templates.\n+\t* decl2.c (mark_used): Use undeduced_auto_decl, require_deduced_type.\n+\t* cp-tree.h: Declare new fns.\n+\t* error.c (dump_function_decl): Use fndecl_declared_return_type.\n+\t* search.c (check_final_overrider): Likewise.\n+\t* pt.c (make_decltype_auto): New.\n+\t(do_auto_deduction): Require plain decltype(auto).\n+\t(is_auto): Adjust.\n+\n \tDR 941\n \t* decl.c (duplicate_decls): Don't propagate DECL_DELETED_FN to\n \ttemplate specializations."}, {"sha": "b936ac85ad7956ebbbca0b4080c648234803dcbf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -7256,19 +7256,38 @@ resolve_address_of_overloaded_function (tree target_type,\n \t       one, or vice versa.  */\n \t    continue;\n \n+\t  tree ret = target_ret_type;\n+\n+\t  /* If the template has a deduced return type, don't expose it to\n+\t     template argument deduction.  */\n+\t  if (undeduced_auto_decl (fn))\n+\t    ret = NULL_TREE;\n+\n \t  /* Try to do argument deduction.  */\n \t  targs = make_tree_vec (DECL_NTPARMS (fn));\n \t  instantiation = fn_type_unification (fn, explicit_targs, targs, args,\n-\t\t\t\t\t      nargs, target_ret_type,\n+\t\t\t\t\t       nargs, ret,\n \t\t\t\t\t      DEDUCE_EXACT, LOOKUP_NORMAL,\n \t\t\t\t\t       false, false);\n \t  if (instantiation == error_mark_node)\n \t    /* Instantiation failed.  */\n \t    continue;\n \n+\t  /* And now force instantiation to do return type deduction.  */\n+\t  if (undeduced_auto_decl (instantiation))\n+\t    {\n+\t      ++function_depth;\n+\t      instantiate_decl (instantiation, /*defer*/false, /*class*/false);\n+\t      --function_depth;\n+\n+\t      require_deduced_type (instantiation);\n+\t    }\n+\n \t  /* See if there's a match.  */\n \t  if (same_type_p (target_fn_type, static_fn_type (instantiation)))\n \t    matches = tree_cons (instantiation, fn, matches);\n+\n+\t  ggc_free (targs);\n \t}\n \n       /* Now, remove all but the most specialized of the matches.  */"}, {"sha": "a5c75486f5ca76059b021ed7636437e01ce53b76", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -5225,6 +5225,9 @@ extern void initialize_artificial_var\t\t(tree, vec<constructor_elt, va_gc> *);\n extern tree check_var_type\t\t\t(tree, tree);\n extern tree reshape_init                        (tree, tree, tsubst_flags_t);\n extern tree next_initializable_field (tree);\n+extern tree fndecl_declared_return_type\t\t(tree);\n+extern bool undeduced_auto_decl\t\t\t(tree);\n+extern void require_deduced_type\t\t(tree);\n \n extern bool defer_mark_used_calls;\n extern GTY(()) vec<tree, va_gc> *deferred_mark_used_calls;\n@@ -5425,6 +5428,7 @@ extern tree check_explicit_specialization\t(tree, tree, int, int);\n extern int num_template_headers_for_class\t(tree);\n extern void check_template_variable\t\t(tree);\n extern tree make_auto\t\t\t\t(void);\n+extern tree make_decltype_auto\t\t\t(void);\n extern tree do_auto_deduction\t\t\t(tree, tree, tree);\n extern tree type_uses_auto\t\t\t(tree);\n extern void append_type_to_template_for_access_check (tree, tree, tree,"}, {"sha": "b2f1c6ef471320cfc2d9c4d7a60a1427f36ddb0c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 39, "deletions": 9, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -992,10 +992,7 @@ decls_match (tree newdecl, tree olddecl)\n \n       /* A declaration with deduced return type should use its pre-deduction\n \t type for declaration matching.  */\n-      if (FNDECL_USED_AUTO (olddecl))\n-\tr2 = DECL_STRUCT_FUNCTION (olddecl)->language->x_auto_return_pattern;\n-      else\n-\tr2 = TREE_TYPE (f2);\n+      r2 = fndecl_declared_return_type (olddecl);\n \n       if (same_type_p (TREE_TYPE (f1), r2))\n \t{\n@@ -1538,11 +1535,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t\t\t      TYPE_ARG_TYPES (TREE_TYPE (olddecl))))\n \t    {\n \t      error (\"new declaration %q#D\", newdecl);\n-\t      if (FNDECL_USED_AUTO (olddecl))\n-\t\terror_at (DECL_SOURCE_LOCATION (olddecl), \"ambiguates old \"\n-\t\t\t  \"declaration with deduced return type\");\n-\t      else\n-\t\terror (\"ambiguates old declaration %q+#D\", olddecl);\n+\t      error (\"ambiguates old declaration %q+#D\", olddecl);\n               return error_mark_node;\n \t    }\n \t  else\n@@ -9503,6 +9496,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t  pedwarn (input_location, 0, \"%qs function uses \"\n \t\t\t\t   \"%<auto%> type specifier without trailing \"\n \t\t\t\t   \"return type\", name);\n+\t\t\telse if (virtualp)\n+\t\t\t  permerror (input_location, \"virtual function cannot \"\n+\t\t\t\t     \"have deduced return type\");\n \t\t      }\n \t\t    else if (!is_auto (type))\n \t\t      {\n@@ -14380,4 +14376,38 @@ cxx_comdat_group (tree decl)\n   return name;\n }\n \n+/* Returns the return type for FN as written by the user, which may include\n+   a placeholder for a deduced return type.  */\n+\n+tree\n+fndecl_declared_return_type (tree fn)\n+{\n+  fn = STRIP_TEMPLATE (fn);\n+  if (FNDECL_USED_AUTO (fn))\n+    return (DECL_STRUCT_FUNCTION (fn)->language\n+\t    ->x_auto_return_pattern);\n+  else\n+    return TREE_TYPE (TREE_TYPE (fn));\n+}\n+\n+/* Returns true iff DECL was declared with an auto return type and it has\n+   not yet been deduced to a real type.  */\n+\n+bool\n+undeduced_auto_decl (tree decl)\n+{\n+  if (cxx_dialect < cxx1y)\n+    return false;\n+  return type_uses_auto (TREE_TYPE (decl));\n+}\n+\n+/* Complain if DECL has an undeduced return type.  */\n+\n+void\n+require_deduced_type (tree decl)\n+{\n+  if (undeduced_auto_decl (decl))\n+    error (\"use of %qD before deduction of %<auto%>\", decl);\n+}\n+\n #include \"gt-cp-decl.h\""}, {"sha": "74e51a8036d3b0dc28f7df81287b72d08e21c1b1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -4578,7 +4578,7 @@ mark_used (tree decl)\n   if ((decl_maybe_constant_var_p (decl)\n        || (TREE_CODE (decl) == FUNCTION_DECL\n \t   && DECL_DECLARED_CONSTEXPR_P (decl))\n-       || type_uses_auto (TREE_TYPE (decl)))\n+       || undeduced_auto_decl (decl))\n       && DECL_LANG_SPECIFIC (decl)\n       && DECL_TEMPLATE_INFO (decl)\n       && !uses_template_parms (DECL_TI_ARGS (decl)))\n@@ -4601,11 +4601,7 @@ mark_used (tree decl)\n       && uses_template_parms (DECL_TI_ARGS (decl)))\n     return true;\n \n-  if (type_uses_auto (TREE_TYPE (decl)))\n-    {\n-      error (\"use of %qD before deduction of %<auto%>\", decl);\n-      return false;\n-    }\n+  require_deduced_type (decl);\n \n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand != 0)"}, {"sha": "6bac7ec88ee8d6a650463b5bc8e2d57dfc671a9d", "filename": "gcc/cp/error.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -1403,7 +1403,10 @@ dump_function_decl (tree t, int flags)\n     show_return = !DECL_CONV_FN_P (t)  && !DECL_CONSTRUCTOR_P (t)\n \t\t  && !DECL_DESTRUCTOR_P (t);\n   if (show_return)\n-    dump_type_prefix (TREE_TYPE (fntype), flags);\n+    {\n+      tree ret = fndecl_declared_return_type (t);\n+      dump_type_prefix (ret, flags);\n+    }\n \n   /* Print the function name.  */\n   if (!do_outer_scope)"}, {"sha": "189348251d01d57880d855b3871d433c03416586", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -11510,7 +11510,7 @@ cp_parser_decltype (cp_parser *parser)\n       cp_lexer_consume_token (parser->lexer);\n       if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))\n \treturn error_mark_node;\n-      expr = make_auto ();\n+      expr = make_decltype_auto ();\n       AUTO_IS_DECLTYPE (expr) = true;\n       goto rewrite;\n     }"}, {"sha": "77329a45b0652f748bc75dc72294e50e186e9385", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -20672,15 +20672,16 @@ make_args_non_dependent (vec<tree, va_gc> *args)\n     }\n }\n \n-/* Returns a type which represents 'auto'.  We use a TEMPLATE_TYPE_PARM\n-   with a level one deeper than the actual template parms.  */\n+/* Returns a type which represents 'auto' or 'decltype(auto)'.  We use a\n+   TEMPLATE_TYPE_PARM with a level one deeper than the actual template\n+   parms.  */\n \n-tree\n-make_auto (void)\n+static tree\n+make_auto_1 (tree name)\n {\n   tree au = cxx_make_type (TEMPLATE_TYPE_PARM);\n   TYPE_NAME (au) = build_decl (BUILTINS_LOCATION,\n-\t\t\t       TYPE_DECL, get_identifier (\"auto\"), au);\n+\t\t\t       TYPE_DECL, name, au);\n   TYPE_STUB_DECL (au) = TYPE_NAME (au);\n   TEMPLATE_TYPE_PARM_INDEX (au) = build_template_parm_index\n     (0, processing_template_decl + 1, processing_template_decl + 1,\n@@ -20692,6 +20693,18 @@ make_auto (void)\n   return au;\n }\n \n+tree\n+make_decltype_auto (void)\n+{\n+  return make_auto_1 (get_identifier (\"decltype(auto)\"));\n+}\n+\n+tree\n+make_auto (void)\n+{\n+  return make_auto_1 (get_identifier (\"auto\"));\n+}\n+\n /* Given type ARG, return std::initializer_list<ARG>.  */\n \n static tree\n@@ -20756,6 +20769,11 @@ do_auto_deduction (tree type, tree init, tree auto_node)\n       bool id = (DECL_P (init) || TREE_CODE (init) == COMPONENT_REF);\n       TREE_VEC_ELT (targs, 0)\n \t= finish_decltype_type (init, id, tf_warning_or_error);\n+      if (type != auto_node)\n+\t{\n+\t  error (\"%qT as type rather than plain %<decltype(auto)%>\", type);\n+\t  return error_mark_node;\n+\t}\n     }\n   else\n     {\n@@ -20834,13 +20852,15 @@ splice_late_return_type (tree type, tree late_return_type)\n   return tsubst (type, argvec, tf_warning_or_error, NULL_TREE);\n }\n \n-/* Returns true iff TYPE is a TEMPLATE_TYPE_PARM representing 'auto'.  */\n+/* Returns true iff TYPE is a TEMPLATE_TYPE_PARM representing 'auto' or\n+   'decltype(auto)'.  */\n \n bool\n is_auto (const_tree type)\n {\n   if (TREE_CODE (type) == TEMPLATE_TYPE_PARM\n-      && TYPE_IDENTIFIER (type) == get_identifier (\"auto\"))\n+      && (TYPE_IDENTIFIER (type) == get_identifier (\"auto\")\n+\t  || TYPE_IDENTIFIER (type) == get_identifier (\"decltype(auto)\")))\n     return true;\n   else\n     return false;"}, {"sha": "b113477d0882aaf02ec9f1636fbad693b276f473", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -1842,8 +1842,8 @@ check_final_overrider (tree overrider, tree basefn)\n {\n   tree over_type = TREE_TYPE (overrider);\n   tree base_type = TREE_TYPE (basefn);\n-  tree over_return = TREE_TYPE (over_type);\n-  tree base_return = TREE_TYPE (base_type);\n+  tree over_return = fndecl_declared_return_type (overrider);\n+  tree base_return = fndecl_declared_return_type (basefn);\n   tree over_throw, base_throw;\n \n   int fail = 0;\n@@ -1897,8 +1897,7 @@ check_final_overrider (tree overrider, tree basefn)\n \t{\n \t  /* can_convert will permit user defined conversion from a\n \t     (reference to) class type. We must reject them.  */\n-\t  over_return = non_reference (TREE_TYPE (over_type));\n-\t  if (CLASS_TYPE_P (over_return))\n+\t  if (CLASS_TYPE_P (non_reference (over_return)))\n \t    fail = 2;\n \t  else\n \t    {"}, {"sha": "e92503376c7a078a34338881696964224f8ef187", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn18.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn18.C?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++1y\" }\n+\n+struct A\n+{\n+  virtual int f() { return 1; }\t // { dg-message \"overriding\" }\n+  virtual auto g() { return 1; } // { dg-error \"virtual\" }\n+};\n+\n+struct B: A\n+{\n+  auto f() { return 1; }\t// { dg-error \"return type\" }\n+};"}, {"sha": "a6f1606748fe773b9e3934af7ea4b3561e142380", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn19.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn19.C?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -0,0 +1,6 @@\n+// { dg-options \"-std=c++1y\" }\n+\n+template <class T>\n+auto f() { return T::i; }\n+\n+extern template auto f<int>(); // does not force instantiation"}, {"sha": "30255583b599c31922ff15d8f9f9cf72ed973819", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn20.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn20.C?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"-std=c++1y\" }\n+\n+template <class T>\n+auto f(T) { return 42; }\n+template <class T>\n+auto g(T) { return 0.0; }\n+\n+int main()\n+{\n+  int (*p)(int) = &f; // OK\n+  p = &g; // { dg-error \"no match\" }\n+}"}, {"sha": "b508af976762b4897c604a355200223d4476c8ec", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn21.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn21.C?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -0,0 +1,6 @@\n+// N3638: decltype(auto) must stand alone\n+// { dg-options \"-std=c++1y\" }\n+\n+void f();\n+decltype(auto) g1() { return &f; }\n+decltype(auto)* g2() { return f; } // { dg-error \"decltype.auto\" }"}, {"sha": "072f6145a2876f2484309c78b9a4894e67f97c73", "filename": "gcc/testsuite/g++.dg/cpp1y/auto-fn8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79d8a2724290d3c6e14f9935b62993b90776aa4e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fauto-fn8.C?ref=79d8a2724290d3c6e14f9935b62993b90776aa4e", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-std=c++1y -pedantic-errors\" }\n \n-auto f() { return 42; }\t\t// { dg-error \"deduced return type\" }\n+auto f() { return 42; }\t\t// { dg-error \"old declaration .auto\" }\n auto f();\t\t\t// OK\n int f();\t\t\t// { dg-error \"new declaration\" }\n "}]}