{"sha": "87bde062dda425ba4dcfd059a96c24be4a5ee5a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiZGUwNjJkZGE0MjViYTRkY2ZkMDU5YTk2YzI0YmU0YTVlZTVhNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-06T22:59:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-05-06T22:59:54Z"}, "message": "compiler: Analyze escape information of interface parameters.\n\nWhen analyzing function calls with interface parameters, all arguments\nrelated to an interface parameter were assumed to escape via the\nfunction arguments.  Now, if an argument is related to a non-escaping\nparameter with an interface type, the argument may be stack-allocated.\n\nFrom-SVN: r222865", "tree": {"sha": "454bb15a23bb83b1772d0827e771fc506dd5efba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454bb15a23bb83b1772d0827e771fc506dd5efba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87bde062dda425ba4dcfd059a96c24be4a5ee5a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87bde062dda425ba4dcfd059a96c24be4a5ee5a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87bde062dda425ba4dcfd059a96c24be4a5ee5a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87bde062dda425ba4dcfd059a96c24be4a5ee5a7/comments", "author": null, "committer": null, "parents": [{"sha": "f1abbf6901a64919e61baf5ff60afa3679f1d086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1abbf6901a64919e61baf5ff60afa3679f1d086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1abbf6901a64919e61baf5ff60afa3679f1d086"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "883e69c41d0e7185f4c0b52949a4f95f0f62f97d", "filename": "gcc/go/gofrontend/escape.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87bde062dda425ba4dcfd059a96c24be4a5ee5a7/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87bde062dda425ba4dcfd059a96c24be4a5ee5a7/gcc%2Fgo%2Fgofrontend%2Fescape.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fescape.cc?ref=87bde062dda425ba4dcfd059a96c24be4a5ee5a7", "patch": "@@ -586,8 +586,20 @@ Build_connection_graphs::handle_call(Named_object* object, Expression* e)\n   // Only call expression statements are interesting\n   // e.g. 'func(var)' for which we can show var does not escape.\n   Call_expression* ce = e->call_expression();\n-  if (ce == NULL || ce->args() == NULL)\n+  if (ce == NULL)\n     return;\n+  else if (ce->args() == NULL)\n+    {\n+      if (ce->fn()->interface_field_reference_expression() != NULL)\n+\t{\n+\t  // This is a call to an interface method with no arguments. OBJECT\n+\t  // must be the receiver and we assume it escapes.\n+\t  Connection_node* rcvr_node =\n+\t    this->gogo_->add_connection_node(object)->connection_node();\n+\t  rcvr_node->set_escape_state(Node::ESCAPE_ARG);\n+\t}\n+      return;\n+    }\n   \n   // If the function call that references OBJECT is unknown, we must be\n   // conservative and assume every argument escapes.  A function call is unknown\n@@ -606,6 +618,8 @@ Build_connection_graphs::handle_call(Named_object* object, Expression* e)\n \t\tthis->gogo_->add_connection_node(arg_no)->connection_node();\n \t      arg_node->set_escape_state(Node::ESCAPE_ARG);\n \t    }\n+\t  else if ((*arg)->call_expression() != NULL)\n+\t    this->handle_call(object, *arg);\n \t}\n       return;\n     }\n@@ -787,7 +801,6 @@ Build_connection_graphs::handle_call(Named_object* object, Expression* e)\n        ++pos)\n     {\n       std::string param_name;\n-      bool param_is_interface = false;\n       if (*pos >= 0 && params->size() <= static_cast<size_t>(*pos))\n \t{\n \t  // There were more arguments than there are parameters. This must be\n@@ -804,11 +817,7 @@ Build_connection_graphs::handle_call(Named_object* object, Expression* e)\n \t  param_name = fntype->receiver()->name();\n \t}\n       else\n-\t{\n-\t  param_name = params->at(*pos).name();\n-\t  param_is_interface =\n-\t    (params->at(*pos).type()->interface_type() != NULL);\n-\t}\n+\tparam_name = params->at(*pos).name();\n \n       if (Gogo::is_sink_name(param_name) || param_name.empty())\n \tcontinue;\n@@ -832,11 +841,6 @@ Build_connection_graphs::handle_call(Named_object* object, Expression* e)\n \n       Node* arg_node = this->gogo_->add_connection_node(object);\n       Node* param_node = this->gogo_->add_connection_node(param_no);\n-\n-      // Act conservatively when an argument is converted into an interface\n-      // value.  FIXME.\n-      if (param_is_interface)\n-\tparam_node->connection_node()->set_escape_state(Node::ESCAPE_ARG);\n       param_node->add_edge(arg_node);\n     }\n "}]}