{"sha": "33433751ff2ac9150ee5766b6f4d803fc04a6571", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0MzM3NTFmZjJhYzkxNTBlZTU3NjZiNmY0ZDgwM2ZjMDRhNjU3MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-03-01T22:29:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-03-01T22:29:56Z"}, "message": "stor-layout.c (layout_decl): Allow front-ends to explicitly set the DECL_SIZE for a FIELD_DECL.\n\n\t* stor-layout.c (layout_decl): Allow front-ends to explicitly set\n\tthe DECL_SIZE for a FIELD_DECL.\n\nFrom-SVN: r32287", "tree": {"sha": "f8bfd9e8d1b872ba19982e0884e92151f9a190b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f8bfd9e8d1b872ba19982e0884e92151f9a190b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33433751ff2ac9150ee5766b6f4d803fc04a6571", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33433751ff2ac9150ee5766b6f4d803fc04a6571", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33433751ff2ac9150ee5766b6f4d803fc04a6571", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33433751ff2ac9150ee5766b6f4d803fc04a6571/comments", "author": null, "committer": null, "parents": [{"sha": "647639eff737551df238e26de77bee37ba75678c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647639eff737551df238e26de77bee37ba75678c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647639eff737551df238e26de77bee37ba75678c"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "9ed3840623ea2438b3af89f58bb87c0f1a20b92c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33433751ff2ac9150ee5766b6f4d803fc04a6571", "patch": "@@ -1,3 +1,8 @@\n+2000-03-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* stor-layout.c (layout_decl): Allow front-ends to explicitly set\n+\tthe DECL_SIZE for a FIELD_DECL.\n+\n 2000-03-01  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/inclhack.tpl: remove unused symlinks"}, {"sha": "c1187b742e912f52bb9fccd9e7eb83eaa42241bf", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=33433751ff2ac9150ee5766b6f4d803fc04a6571", "patch": "@@ -265,45 +265,41 @@ layout_decl (decl, known_align)\n {\n   register tree type = TREE_TYPE (decl);\n   register enum tree_code code = TREE_CODE (decl);\n-  HOST_WIDE_INT spec_size = 0;\n \n   if (code == CONST_DECL)\n     return;\n-  else if (code == FIELD_DECL)\n-    {\n-      if (DECL_SIZE (decl) != 0)\n-\t{\n-\t  spec_size = TREE_INT_CST_LOW (DECL_SIZE (decl));\n-\t  DECL_SIZE (decl) = 0;\n-\t}\n-    }\n   else if (code != VAR_DECL && code != PARM_DECL && code != RESULT_DECL\n-\t   && code != TYPE_DECL)\n+\t   && code != TYPE_DECL && code != FIELD_DECL)\n     abort ();\n \n   if (type == error_mark_node)\n-    {\n-      type = void_type_node;\n-      spec_size = 0;\n-    }\n+    type = void_type_node;\n \n   /* Usually the size and mode come from the data type without change.  */\n-\n   DECL_MODE (decl) = TYPE_MODE (type);\n   TREE_UNSIGNED (decl) = TREE_UNSIGNED (type);\n   if (DECL_SIZE (decl) == 0)\n     {\n       DECL_SIZE (decl) = TYPE_SIZE (type);\n       DECL_SIZE_UNIT (decl) = TYPE_SIZE_UNIT (type);\n     }\n-\n-  if (code == FIELD_DECL && DECL_BIT_FIELD (decl))\n+  else if (code == FIELD_DECL)\n     {\n-      if (spec_size == 0 && DECL_NAME (decl) != 0)\n+      HOST_WIDE_INT spec_size;\n+\n+      /* The front-end may set the explicit width of the field, so its\n+\t size may not be the same as the size of its type.  This happens\n+\t with bitfields, of course (an `int' bitfield may be only 2 bits,\n+\t say), but it also happens with other fields.  For example, the\n+\t C++ front-end creates zero-sized fields corresponding to empty\n+\t base classes, and depends on layout_type setting\n+\t DECL_FIELD_BITPOS correctly for the field.  */\n+      if (integer_zerop (DECL_SIZE (decl)) \n+\t  && DECL_NAME (decl) != NULL_TREE)\n \tabort ();\n \n       /* Size is specified in number of bits.  */\n-      DECL_SIZE (decl) = bitsize_int (spec_size);\n+      spec_size = TREE_INT_CST_LOW (DECL_SIZE (decl));\n       if (spec_size % BITS_PER_UNIT == 0)\n \tDECL_SIZE_UNIT (decl) = size_int (spec_size / BITS_PER_UNIT);\n       else\n@@ -313,8 +309,9 @@ layout_decl (decl, known_align)\n   /* Force alignment required for the data type.\n      But if the decl itself wants greater alignment, don't override that.\n      Likewise, if the decl is packed, don't override it.  */\n-  else if (DECL_ALIGN (decl) == 0\n-\t   || (! DECL_PACKED (decl) &&  TYPE_ALIGN (type) > DECL_ALIGN (decl)))\n+  if (!(code == FIELD_DECL && DECL_BIT_FIELD (decl))\n+      && (DECL_ALIGN (decl) == 0\n+\t  || (! DECL_PACKED (decl) &&  TYPE_ALIGN (type) > DECL_ALIGN (decl))))\n     DECL_ALIGN (decl) = TYPE_ALIGN (type);\n \n   /* See if we can use an ordinary integer mode for a bit-field. "}, {"sha": "85f093d7cc386e95ee95dd7625698f7a7693c75f", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash14.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33433751ff2ac9150ee5766b6f4d803fc04a6571/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash14.C?ref=33433751ff2ac9150ee5766b6f4d803fc04a6571", "patch": "@@ -0,0 +1,23 @@\n+// Build don't link:\n+// Special g++ Options: -fnew-abi\n+// Origin: Mark Mitchell <mark@codesourcery.com>\n+\n+struct S \n+{\n+};\n+\n+struct T : public S \n+{\n+};\n+\n+struct U : public T \n+{\n+};\n+\n+void f (U);\n+\n+int main ()\n+{\n+  U u;\n+  f (u);\n+}"}]}