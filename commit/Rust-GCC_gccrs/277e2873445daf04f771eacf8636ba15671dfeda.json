{"sha": "277e2873445daf04f771eacf8636ba15671dfeda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3ZTI4NzM0NDVkYWYwNGY3NzFlYWNmODYzNmJhMTU2NzFkZmVkYQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-05-22T09:15:37Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-05-22T09:15:37Z"}, "message": "sparc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\n\t* config/sparc/sparc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n\t* config/sparc/sparc.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n\t(sparc_mode_dependent_address_p): New function.\n\nFrom-SVN: r159694", "tree": {"sha": "880b017c21d9882c2137dfb3a9a3490a348c4e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/880b017c21d9882c2137dfb3a9a3490a348c4e9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/277e2873445daf04f771eacf8636ba15671dfeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277e2873445daf04f771eacf8636ba15671dfeda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/277e2873445daf04f771eacf8636ba15671dfeda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/277e2873445daf04f771eacf8636ba15671dfeda/comments", "author": null, "committer": null, "parents": [{"sha": "0350c97ebe00dfbf26b15ddd027d02007324d7ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0350c97ebe00dfbf26b15ddd027d02007324d7ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0350c97ebe00dfbf26b15ddd027d02007324d7ea"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "d6b987672dd596d7c64cefa251c21dd3abb8aab6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=277e2873445daf04f771eacf8636ba15671dfeda", "patch": "@@ -1,3 +1,9 @@\n+2010-05-22  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/sparc/sparc.h (GO_IF_MODE_DEPENDENT_ADDRESS): Remove.\n+\t* config/sparc/sparc.c (TARGET_MODE_DEPENDENT_ADDRESS_P): Define.\n+\t(sparc_mode_dependent_address_p): New function.\n+\n 2010-05-21  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* Makefile.in: Fix c-pch.o and ggc-common.o dependencies on timevars."}, {"sha": "26c96c4312cc0ea7245be02dfc0ce300e912da2d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=277e2873445daf04f771eacf8636ba15671dfeda", "patch": "@@ -412,6 +412,7 @@ static bool sparc_tls_referenced_p (rtx);\n static rtx legitimize_tls_address (rtx);\n static rtx legitimize_pic_address (rtx, rtx);\n static rtx sparc_legitimize_address (rtx, rtx, enum machine_mode);\n+static bool sparc_mode_dependent_address_p (const_rtx);\n static bool sparc_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t     enum machine_mode, const_tree, bool);\n static int sparc_arg_partial_bytes (CUMULATIVE_ARGS *,\n@@ -499,6 +500,8 @@ static bool fpu_option_set = false;\n \n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS sparc_legitimize_address\n+#undef TARGET_MODE_DEPENDENT_ADDRESS_P\n+#define TARGET_MODE_DEPENDENT_ADDRESS_P sparc_mode_dependent_address_p\n \n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN sparc_expand_builtin\n@@ -3519,6 +3522,35 @@ sparc_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n   return x;\n }\n \n+/* Return true if ADDR (a legitimate address expression)\n+   has an effect that depends on the machine mode it is used for.\n+\n+   In PIC mode,\n+\n+      (mem:HI [%l7+a])\n+\n+   is not equivalent to\n+\n+      (mem:QI [%l7+a]) (mem:QI [%l7+a+1])\n+\n+   because [%l7+a+1] is interpreted as the address of (a+1).  */\n+\n+\n+static bool\n+sparc_mode_dependent_address_p (const_rtx addr)\n+{\n+  if (flag_pic && GET_CODE (addr) == PLUS)\n+    {\n+      rtx op0 = XEXP (addr, 0);\n+      rtx op1 = XEXP (addr, 1);\n+      if (op0 == pic_offset_table_rtx\n+\t  && SYMBOLIC_CONST (op1))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n #ifdef HAVE_GAS_HIDDEN\n # define USE_HIDDEN_LINKONCE 1\n #else"}, {"sha": "34cb8e3011e0f99207bf13934fbe519d0a921f1a", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/277e2873445daf04f771eacf8636ba15671dfeda/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=277e2873445daf04f771eacf8636ba15671dfeda", "patch": "@@ -1835,33 +1835,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define RTX_OK_FOR_OLO10_P(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == CONST_INT && INTVAL (X) >= -0x1000 && INTVAL (X) < 0xc00 - 8)\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-\n-   In PIC mode,\n-\n-      (mem:HI [%l7+a])\n-\n-   is not equivalent to\n-   \n-      (mem:QI [%l7+a]) (mem:QI [%l7+a+1])\n-\n-   because [%l7+a+1] is interpreted as the address of (a+1).  */\n-\n-#define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR, LABEL)\t\\\n-{\t\t\t\t\t\t\t\\\n-  if (flag_pic == 1)\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      if (GET_CODE (ADDR) == PLUS)\t\t\t\\\n-\t{\t\t\t\t\t\t\\\n-\t  rtx op0 = XEXP (ADDR, 0);\t\t\t\\\n-\t  rtx op1 = XEXP (ADDR, 1);\t\t\t\\\n-\t  if (op0 == pic_offset_table_rtx\t\t\\\n-\t      && SYMBOLIC_CONST (op1))\t\t\t\\\n-\t    goto LABEL;\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-}\n \f\n /* Try a machine-dependent way of reloading an illegitimate address\n    operand.  If we find one, push the reload and jump to WIN.  This"}]}