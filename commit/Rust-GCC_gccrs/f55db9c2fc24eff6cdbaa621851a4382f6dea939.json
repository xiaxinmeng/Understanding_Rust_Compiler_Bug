{"sha": "f55db9c2fc24eff6cdbaa621851a4382f6dea939", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU1ZGI5YzJmYzI0ZWZmNmNkYmFhNjIxODUxYTQzODJmNmRlYTkzOQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-02-07T21:29:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-02-07T21:29:04Z"}, "message": "defineclass.cc (handleClassBegin): Use _Jv_RegisterInitiatingLoader.\n\n\t* defineclass.cc (handleClassBegin): Use\n\t_Jv_RegisterInitiatingLoader.\n\t* java/lang/Class.h (_Jv_UnregisterInitiatingLoader): Declare.\n\t* java/lang/natVMClassLoader.cc (resolveClass): Don't register\n\tclass.  Use _Jv_UnregisterInitiatingLoader.\n\t* java/lang/natClassLoader.cc (_Jv_UnregisterInitiatingLoader):\n\tNew function.\n\nFrom-SVN: r94717", "tree": {"sha": "9321a4ce5d93e720f8ccef64c5a68a48525104d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9321a4ce5d93e720f8ccef64c5a68a48525104d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f55db9c2fc24eff6cdbaa621851a4382f6dea939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55db9c2fc24eff6cdbaa621851a4382f6dea939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55db9c2fc24eff6cdbaa621851a4382f6dea939", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55db9c2fc24eff6cdbaa621851a4382f6dea939/comments", "author": null, "committer": null, "parents": [{"sha": "b0ad2de2032805ffbaff91d24647dc6fcc8a74ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ad2de2032805ffbaff91d24647dc6fcc8a74ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ad2de2032805ffbaff91d24647dc6fcc8a74ca"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "2ebbbdd3909a340ad39b88d9232116c513d1ce86", "filename": "libjava/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f55db9c2fc24eff6cdbaa621851a4382f6dea939", "patch": "@@ -1,3 +1,13 @@\n+2005-02-07  Tom Tromey  <tromey@redhat.com>\n+\n+\t* defineclass.cc (handleClassBegin): Use\n+\t_Jv_RegisterInitiatingLoader.\n+\t* java/lang/Class.h (_Jv_UnregisterInitiatingLoader): Declare.\n+\t* java/lang/natVMClassLoader.cc (resolveClass): Don't register\n+\tclass.  Use _Jv_UnregisterInitiatingLoader.\n+\t* java/lang/natClassLoader.cc (_Jv_UnregisterInitiatingLoader):\n+\tNew function.\n+\n 2005-02-07  Mark Wielaard  <mark@klomp.org>\n \n         Reported by Timo Lindfors <timo.lindfors@iki.fi>"}, {"sha": "382b321f5918b55efed04a80d9ff6da8aacf9756", "filename": "libjava/defineclass.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fdefineclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fdefineclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fdefineclass.cc?ref=f55db9c2fc24eff6cdbaa621851a4382f6dea939", "patch": "@@ -908,16 +908,14 @@ _Jv_ClassReader::handleClassBegin (int access_flags, int this_class, int super_c\n \tthrow_no_class_def_found_error (\"loading java.lang.Object\");\n     }\n \n-  // In the pre-loading state, it can be looked up in the\n-  // cache only by this thread!  This allows the super-class\n-  // to include references to this class.\n-\n   def->state = JV_STATE_PRELOADING;\n \n-  {\n-    JvSynchronize sync (&java::lang::Class::class$);\n-    _Jv_RegisterClass (def);\n-  }\n+  // Register this class with its defining loader as well (despite the\n+  // name of the function we're calling), so that super class lookups\n+  // work properly.  If there is an error, our caller will unregister\n+  // this class from the class loader.  Also, we don't need to hold a\n+  // lock here, as our caller has acquired it.\n+  _Jv_RegisterInitiatingLoader (def, def->loader);\n \n   if (super_class != 0)\n     {"}, {"sha": "34ff5df634d0ec3c75211ab353a0095b08bcfd00", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=f55db9c2fc24eff6cdbaa621851a4382f6dea939", "patch": "@@ -212,6 +212,7 @@ class java::io::ObjectStreamClass;\n \n void _Jv_RegisterClassHookDefault (jclass klass);\n void _Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n+void _Jv_UnregisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n void _Jv_UnregisterClass (jclass);\n jclass _Jv_FindClass (_Jv_Utf8Const *name,\n \t\t      java::lang::ClassLoader *loader);\n@@ -436,6 +437,7 @@ class java::lang::Class : public java::lang::Object\n \t\t\t\t\t     size_t count);\n   friend void ::_Jv_RegisterClassHookDefault (jclass klass);\n   friend void ::_Jv_RegisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n+  friend void ::_Jv_UnregisterInitiatingLoader (jclass,java::lang::ClassLoader*);\n   friend void ::_Jv_UnregisterClass (jclass);\n   friend jclass (::_Jv_FindClass) (_Jv_Utf8Const *name,\n \t\t\t\t   java::lang::ClassLoader *loader);"}, {"sha": "17b2a8833869071c45a52dbc6ffefd50ff9eab95", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=f55db9c2fc24eff6cdbaa621851a4382f6dea939", "patch": "@@ -110,6 +110,16 @@ _Jv_RegisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n   loader->loadedClasses->put(klass->name->toString(), klass);\n }\n \n+// If we found an error while defining an interpreted class, we must\n+// go back and unregister it.\n+void\n+_Jv_UnregisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n+{\n+  if (! loader)\n+    loader = java::lang::ClassLoader::getSystemClassLoader();\n+  loader->loadedClasses->remove(klass->name->toString());\n+}\n+\n // This function is called many times during startup, before main() is\n // run.  At that point in time we know for certain we are running \n // single-threaded, so we don't need to lock when adding classes to the "}, {"sha": "1da794971546f9f580403dbe36161bd06d108528", "filename": "libjava/java/lang/natVMClassLoader.cc", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f55db9c2fc24eff6cdbaa621851a4382f6dea939/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatVMClassLoader.cc?ref=f55db9c2fc24eff6cdbaa621851a4382f6dea939", "patch": "@@ -57,13 +57,8 @@ java::lang::VMClassLoader::defineClass (java::lang::ClassLoader *loader,\n   jclass klass = VMCompiler::compileClass(loader, name, data,\n \t\t\t\t\t  offset, length, pd);\n \n-  if (klass != NULL)\n-    {\n-      JvSynchronize sync (&java::lang::Class::class$);\n-      _Jv_RegisterClass (klass);\n-    }\n #ifdef INTERPRETER\n-  else\n+  if (klass == NULL)\n     {\n       klass = new java::lang::Class ();\n \n@@ -96,7 +91,7 @@ java::lang::VMClassLoader::defineClass (java::lang::ClassLoader *loader,\n \t  klass->state = JV_STATE_ERROR;\n \t  klass->notifyAll ();\n \n-\t  _Jv_UnregisterClass (klass);\n+\t  _Jv_UnregisterInitiatingLoader (klass, klass->loader);\n \n \t  // If EX is not a ClassNotFoundException, that's ok, because we\n \t  // account for the possibility in defineClass()."}]}