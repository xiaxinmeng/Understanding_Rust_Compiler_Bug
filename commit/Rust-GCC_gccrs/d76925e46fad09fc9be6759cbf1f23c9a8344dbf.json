{"sha": "d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc2OTI1ZTQ2ZmFkMDlmYzliZTY3NTljYmYxZjIzYzlhODM0NGRiZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-21T21:18:51Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-21T21:18:51Z"}, "message": "libstdc++: Support arrays in std::is_nothrow_constructible (PR 94149)\n\nThe front end now supports parenthesized initialization for arrays in\nC++20, so extend std::is_nothrow_constructible to support them too.\n\ngcc/testsuite:\n\n\tPR c++/94149\n\t* g++.dg/cpp2a/paren-init24.C: Fix FIXMEs.\n\nlibstdc++-v3:\n\n\tPR c++/94149\n\t* include/std/type_traits (__is_nt_constructible_impl): Add partial\n\tspecializations for bounded arrays with non-empty initializers.\n\t* testsuite/20_util/is_nothrow_constructible/value_c++20.cc: New test.", "tree": {"sha": "1b7ff4a666d5b11aef097be62965d78e56f52a7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b7ff4a666d5b11aef097be62965d78e56f52a7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81e07d422c5026ed66e3ad72a75d0d2385be1c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81e07d422c5026ed66e3ad72a75d0d2385be1c0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81e07d422c5026ed66e3ad72a75d0d2385be1c0a"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "91fe0587a9575aba7c6d55e7918d35545f088c54", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "patch": "@@ -67,6 +67,11 @@\n \t* g++.dg/coroutines/ramp-return-b.C: New test.\n \t* g++.dg/coroutines/ramp-return-c.C: New test.\n \n+2020-04-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/94149\n+\t* g++.dg/cpp2a/paren-init24.C: Fix FIXMEs.\n+\n 2020-04-17  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94592"}, {"sha": "4e97bbc5b561e9a5199d6f289bb6dd4be99d4e1e", "filename": "gcc/testsuite/g++.dg/cpp2a/paren-init24.C", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fparen-init24.C?ref=d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "patch": "@@ -11,8 +11,7 @@ int main()\n   static_assert(__is_constructible(T, int));\n   static_assert(!__is_constructible(T, int, int));\n   static_assert(std::is_constructible_v<T, int>);\n-  //FIXME: libstdc++ problem?\n-  //static_assert(std::is_nothrow_constructible_v<T, int>);\n+  static_assert(std::is_nothrow_constructible_v<T, int>);\n \n   using T2 = int[2];\n   T2 t2(1);\n@@ -21,6 +20,5 @@ int main()\n   static_assert(__is_constructible(T2, int));\n   static_assert(__is_constructible(T2, int, int));\n   static_assert(std::is_constructible_v<T2, int, int>);\n-  // FIXME libstdc++ problem?\n-  //static_assert(std::is_nothrow_constructible_v<T2, int, int>);\n+  static_assert(std::is_nothrow_constructible_v<T2, int, int>);\n }"}, {"sha": "80c14a7f45b0d2a96e1f0ebf3acd0992738c58a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "patch": "@@ -1,3 +1,10 @@\n+2020-04-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR c++/94149\n+\t* include/std/type_traits (__is_nt_constructible_impl): Add partial\n+\tspecializations for bounded arrays with non-empty initializers.\n+\t* testsuite/20_util/is_nothrow_constructible/value_c++20.cc: New test.\n+\n 2020-04-20  Thomas Rodgers  <trodgers@redhat.com>\n \n \t* testsuite/lib/libstdc++.exp: Add additional_flags="}, {"sha": "f96b5297b83af75822546b2f98f9d58446ba51ca", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "patch": "@@ -986,6 +986,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>\n     { };\n \n+#if __cpp_aggregate_paren_init\n+  template<typename _Tp, size_t _Num, typename _Arg>\n+    struct __is_nt_constructible_impl<true, _Tp[_Num], _Arg>\n+    : public __is_nt_constructible_impl<true, _Tp, _Arg>\n+    { };\n+\n+  template<typename _Tp, size_t _Num, typename... _Args>\n+    struct __is_nt_constructible_impl<true, _Tp[_Num], _Args...>\n+    : public __and_<__is_nt_constructible_impl<true, _Tp, _Args>...>\n+    { };\n+#endif\n+\n   template<typename _Tp, typename... _Args>\n     using __is_nothrow_constructible_impl\n       = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),"}, {"sha": "6bf0a513b14d52d78fa5b5914d56f67c49a7f581", "filename": "libstdc++-v3/testsuite/20_util/is_nothrow_constructible/value_c++20.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d76925e46fad09fc9be6759cbf1f23c9a8344dbf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_nothrow_constructible%2Fvalue_c%2B%2B20.cc?ref=d76925e46fad09fc9be6759cbf1f23c9a8344dbf", "patch": "@@ -0,0 +1,69 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+static_assert( std::is_nothrow_constructible_v<int[1]> );\n+static_assert( std::is_nothrow_constructible_v<int[1], int> );\n+static_assert( std::is_nothrow_constructible_v<int[2], int> );\n+static_assert( std::is_nothrow_constructible_v<int[2], int, int> );\n+static_assert( ! std::is_nothrow_constructible_v<int[1], int, int> );\n+static_assert( ! std::is_nothrow_constructible_v<int[]> );\n+static_assert( ! std::is_nothrow_constructible_v<int[], int> );\n+static_assert( ! std::is_nothrow_constructible_v<int[], int, int> );\n+\n+struct X\n+{\n+  X() = default;\n+  X(int) noexcept { }\n+  X(double) { }\n+};\n+\n+static_assert( std::is_nothrow_constructible_v<X[2]> );\n+static_assert( std::is_nothrow_constructible_v<X[1], X> );\n+static_assert( std::is_nothrow_constructible_v<X[1], int> );\n+static_assert( ! std::is_nothrow_constructible_v<X[1], double> );\n+static_assert( ! std::is_nothrow_constructible_v<X[2], int, double> );\n+\n+struct Y\n+{\n+  int i;\n+  X x;\n+};\n+\n+static_assert( std::is_nothrow_constructible_v<Y> );\n+static_assert( std::is_nothrow_constructible_v<Y, Y> );\n+static_assert( std::is_nothrow_constructible_v<Y, int> );\n+static_assert( ! std::is_nothrow_constructible_v<Y, X> );\n+static_assert( std::is_nothrow_constructible_v<Y, int, X> );\n+static_assert( std::is_nothrow_constructible_v<Y, int, int> );\n+static_assert( ! std::is_nothrow_constructible_v<Y, int, double> );\n+\n+struct Z : Y { };\n+\n+static_assert( std::is_nothrow_constructible_v<Z> );\n+static_assert( std::is_nothrow_constructible_v<Z, Z> );\n+static_assert( std::is_nothrow_constructible_v<Z, Y> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, int> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, int, X> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, int, int> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, Y, double> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, int, double> );\n+static_assert( ! std::is_nothrow_constructible_v<Z, X> );"}]}