{"sha": "27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdkNmJhODg5YjM0ZDM4ZGMxM2I1ZjNhODk1OWM1NzZmZTA0NzdiMQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2016-06-10T09:22:51Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2016-06-10T09:22:51Z"}, "message": "[PR middle-end/71373] Handle more OMP_CLAUSE_* in nested function decomposition\n\n\tgcc/\n\t* gimplify.c (gimplify_adjust_omp_clauses): Discard\n\tOMP_CLAUSE_TILE.\n\t* omp-low.c (scan_sharing_clauses): Don't expect OMP_CLAUSE_TILE.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/combined-directives.c: XFAIL tree scanning\n\tfor OpenACC tile clauses.\n\t* gfortran.dg/goacc/combined-directives.f90: Likewise.\n\n\tgcc/\n\tPR middle-end/71373\n\t* tree-nested.c (convert_nonlocal_omp_clauses)\n\t(convert_local_omp_clauses): Handle OMP_CLAUSE_ASYNC,\n\tOMP_CLAUSE_WAIT, OMP_CLAUSE_INDEPENDENT, OMP_CLAUSE_AUTO,\n\tOMP_CLAUSE__CACHE_, OMP_CLAUSE_TILE.\n\tgcc/testsuite/\n\tPR middle-end/71373\n\t* gcc.dg/goacc/nested-function-1.c: New file.\n\t* gcc.dg/goacc/nested-function-2.c: Likewise.\n\t* gcc.dg/goacc/pr71373.c: Likewise.\n\t* gfortran.dg/goacc/cray-2.f95: Likewise.\n\t* gfortran.dg/goacc/loop-1-2.f95: Likewise.\n\t* gfortran.dg/goacc/loop-3-2.f95: Likewise.\n\t* gfortran.dg/goacc/cray.f95: Update.\n\t* gfortran.dg/goacc/loop-1.f95: Likewise.\n\t* gfortran.dg/goacc/loop-3.f95: Likewise.\n\t* gfortran.dg/goacc/subroutines.f90: Update, and rename to...\n\t* gfortran.dg/goacc/nested-function-1.f90: ... this new file.\n\tlibgomp/testsuite/\n\tPR middle-end/71373\n\t* libgomp.oacc-c/nested-function-1.c: New file.\n\t* libgomp.oacc-c/nested-function-2.c: Likewise.\n\t* libgomp.oacc-fortran/nested-function-1.f90: Likewise.\n\t* libgomp.oacc-fortran/nested-function-2.f90: Likewise.\n\t* libgomp.oacc-fortran/nested-function-3.f90: Likewise.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r237291", "tree": {"sha": "6c4530f1aeeecad6e3d237c3d6c13f195e47fa50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c4530f1aeeecad6e3d237c3d6c13f195e47fa50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b1ffdb16c4a54a4f8ad957143336e279b8d5c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1ffdb16c4a54a4f8ad957143336e279b8d5c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1ffdb16c4a54a4f8ad957143336e279b8d5c60"}], "stats": {"total": 1469, "additions": 1369, "deletions": 100}, "files": [{"sha": "9cab3118d65d7580e00c8bb12b6ad5fe1dda9ea5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,5 +1,15 @@\n 2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR middle-end/71373\n+\t* tree-nested.c (convert_nonlocal_omp_clauses)\n+\t(convert_local_omp_clauses): Handle OMP_CLAUSE_ASYNC,\n+\tOMP_CLAUSE_WAIT, OMP_CLAUSE_INDEPENDENT, OMP_CLAUSE_AUTO,\n+\tOMP_CLAUSE__CACHE_, OMP_CLAUSE_TILE.\n+\n+\t* gimplify.c (gimplify_adjust_omp_clauses): Discard\n+\tOMP_CLAUSE_TILE.\n+\t* omp-low.c (scan_sharing_clauses): Don't expect OMP_CLAUSE_TILE.\n+\n \t* omp-low.c (scan_sharing_clauses): Don't expect\n \tOMP_CLAUSE__CACHE_.\n "}, {"sha": "7c19cf335be163d6591c426eac38a763f3b0c1f9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -8280,7 +8280,13 @@ gimplify_adjust_omp_clauses (gimple_seq *pre_p, gimple_seq body, tree *list_p,\n \tcase OMP_CLAUSE_VECTOR:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n+\t  break;\n+\n \tcase OMP_CLAUSE_TILE:\n+\t  /* We're not yet making use of the information provided by OpenACC\n+\t     tile clauses.  Discard these here, to simplify later middle end\n+\t     processing.  */\n+\t  remove = true;\n \t  break;\n \n \tdefault:"}, {"sha": "22e59094e82e377d1e62e66c2592989112ac7b7c", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -2187,7 +2187,6 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n-\tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n@@ -2200,6 +2199,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n \t    install_var_local (decl, ctx);\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE__CACHE_:\n \tdefault:\n \t  gcc_unreachable ();\n@@ -2357,13 +2357,13 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n-\tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE_INDEPENDENT:\n \tcase OMP_CLAUSE_AUTO:\n \tcase OMP_CLAUSE_SEQ:\n \tcase OMP_CLAUSE__GRIDDIM_:\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n \tcase OMP_CLAUSE__CACHE_:\n \tdefault:\n \t  gcc_unreachable ();"}, {"sha": "325de75e2714389a70797817d3b8b139ac1576de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,4 +1,24 @@\n 2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/71373\n+\t* gcc.dg/goacc/nested-function-1.c: New file.\n+\t* gcc.dg/goacc/nested-function-2.c: Likewise.\n+\t* gcc.dg/goacc/pr71373.c: Likewise.\n+\t* gfortran.dg/goacc/cray-2.f95: Likewise.\n+\t* gfortran.dg/goacc/loop-1-2.f95: Likewise.\n+\t* gfortran.dg/goacc/loop-3-2.f95: Likewise.\n+\t* gfortran.dg/goacc/cray.f95: Update.\n+\t* gfortran.dg/goacc/loop-1.f95: Likewise.\n+\t* gfortran.dg/goacc/loop-3.f95: Likewise.\n+\t* gfortran.dg/goacc/subroutines.f90: Update, and rename to...\n+\t* gfortran.dg/goacc/nested-function-1.f90: ... this new file.\n+\n+2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* c-c++-common/goacc/combined-directives.c: XFAIL tree scanning\n+\tfor OpenACC tile clauses.\n+\t* gfortran.dg/goacc/combined-directives.f90: Likewise.\n \n \tPR c/71381\n \t* c-c++-common/goacc/cache-1.c: Update.  Move invalid usage tests"}, {"sha": "3fa800d7bbe050c0090b4acd1ca0bf31c40ff0c6", "filename": "gcc/testsuite/c-c++-common/goacc/combined-directives.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fcombined-directives.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -111,6 +111,7 @@ test ()\n // { dg-final { scan-tree-dump-times \"acc loop vector\" 2 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"acc loop seq\" 2 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"acc loop auto\" 2 \"gimple\" } }\n-// { dg-final { scan-tree-dump-times \"acc loop tile.2, 3\" 2 \"gimple\" } }\n+// XFAILed: OpenACC tile clauses are discarded during gimplification.\n+// { dg-final { scan-tree-dump-times \"acc loop tile.2, 3\" 2 \"gimple\" { xfail *-*-* } } }\n // { dg-final { scan-tree-dump-times \"acc loop independent private.i\" 2 \"gimple\" } }\n // { dg-final { scan-tree-dump-times \"private.z\" 2 \"gimple\" } }"}, {"sha": "e17c0e2227fc84affe292bfa49be786a4234b94a", "filename": "gcc/testsuite/gcc.dg/goacc/nested-function-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-1.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,100 @@\n+/* Exercise nested function decomposition, gcc/tree-nested.c.  */\n+/* See gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90 for the Fortran\n+   version.  */\n+\n+int main ()\n+{\n+#define N 100\n+  int nonlocal_arg;\n+  int nonlocal_a[N];\n+  int nonlocal_i;\n+  int nonlocal_j;\n+\n+  for (int i = 0; i < N; ++i)\n+    nonlocal_a[i] = 5;\n+  nonlocal_arg = 5;\n+\n+  void local ()\n+  {\n+    int local_i;\n+    int local_arg;\n+    int local_a[N];\n+    int local_j;\n+\n+    for (int i = 0; i < N; ++i)\n+      local_a[i] = 5;\n+    local_arg = 5;\n+\n+#pragma acc kernels loop \\\n+  gang(num:local_arg) worker(local_arg) vector(local_arg) \\\n+  wait async(local_arg)\n+    for (local_i = 0; local_i < N; ++local_i)\n+      {\n+#pragma acc cache (local_a[local_i:5])\n+\tlocal_a[local_i] = 100;\n+#pragma acc loop seq tile(*)\n+\tfor (local_j = 0; local_j < N; ++local_j)\n+\t  ;\n+#pragma acc loop auto independent tile(1)\n+\tfor (local_j = 0; local_j < N; ++local_j)\n+\t  ;\n+      }\n+\n+#pragma acc kernels loop \\\n+  gang(static:local_arg) worker(local_arg) vector(local_arg) \\\n+  wait(local_arg, local_arg + 1, local_arg + 2) async\n+    for (local_i = 0; local_i < N; ++local_i)\n+      {\n+#pragma acc cache (local_a[local_i:4])\n+\tlocal_a[local_i] = 100;\n+#pragma acc loop seq tile(1)\n+\tfor (local_j = 0; local_j < N; ++local_j)\n+\t  ;\n+#pragma acc loop auto independent tile(*)\n+\tfor (local_j = 0; local_j < N; ++local_j)\n+\t  ;\n+      }\n+  }\n+\n+  void nonlocal ()\n+  {\n+    for (int i = 0; i < N; ++i)\n+      nonlocal_a[i] = 5;\n+    nonlocal_arg = 5;\n+\n+#pragma acc kernels loop \\\n+  gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n+  wait async(nonlocal_arg)\n+    for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)\n+      {\n+#pragma acc cache (nonlocal_a[nonlocal_i:3])\n+\tnonlocal_a[nonlocal_i] = 100;\n+#pragma acc loop seq tile(2)\n+\tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n+\t  ;\n+#pragma acc loop auto independent tile(3)\n+\tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n+\t  ;\n+      }\n+\n+#pragma acc kernels loop \\\n+  gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) \\\n+  wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async\n+    for (nonlocal_i = 0; nonlocal_i < N; ++nonlocal_i)\n+      {\n+#pragma acc cache (nonlocal_a[nonlocal_i:2])\n+\tnonlocal_a[nonlocal_i] = 100;\n+#pragma acc loop seq tile(*)\n+\tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n+\t  ;\n+#pragma acc loop auto independent tile(*)\n+\tfor (nonlocal_j = 0; nonlocal_j < N; ++nonlocal_j)\n+\t  ;\n+      }\n+  }\n+\n+  local ();\n+  nonlocal ();\n+\n+  return 0;\n+}"}, {"sha": "70c9ec8ebfae695c93bb9617bef60fef5882f3c9", "filename": "gcc/testsuite/gcc.dg/goacc/nested-function-2.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fnested-function-2.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,45 @@\n+/* Exercise nested function decomposition, gcc/tree-nested.c.  */\n+\n+int\n+main (void)\n+{\n+  int j = 0, k = 6, l = 7, m = 8;\n+  void simple (void)\n+  {\n+    int i;\n+#pragma acc parallel\n+    {\n+#pragma acc loop\n+      for (i = 0; i < m; i+= k)\n+\tj = (m + i - j) * l;\n+    }\n+  }\n+  void collapse (void)\n+  {\n+    int x, y, z;\n+#pragma acc parallel\n+    {\n+#pragma acc loop collapse (3)\n+      for (x = 0; x < k; x++)\n+\tfor (y = -5; y < l; y++)\n+\t  for (z = 0; z < m; z++)\n+\t    j += x + y + z;\n+    }\n+  }\n+  void reduction (void)\n+  {\n+    int x, y, z;\n+#pragma acc parallel reduction (+:j)\n+    {\n+#pragma acc loop reduction (+:j) collapse (3)\n+      for (x = 0; x < k; x++)\n+\tfor (y = -5; y < l; y++)\n+\t  for (z = 0; z < m; z++)\n+\t    j += x + y + z;\n+    }\n+  }\n+  simple();\n+  collapse();\n+  reduction();\n+  return 0;\n+}"}, {"sha": "9381752cc9dede838a3088c63586ce6e5d8b9e78", "filename": "gcc/testsuite/gcc.dg/goacc/pr71373.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr71373.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr71373.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgoacc%2Fpr71373.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,41 @@\n+/* Unintentional nested function usage.  */\n+/* Due to missing right braces '}', the following functions are parsed as\n+   nested functions.  This ran into an ICE.  */\n+\n+void foo (void)\n+{\n+  #pragma acc parallel\n+  {\n+    #pragma acc loop independent\n+    for (int i = 0; i < 16; i++)\n+      ;\n+  // Note right brace '}' commented out here.\n+  //}\n+}\n+void bar (void)\n+{\n+}\n+\n+// Adding right brace '}' here, to make this compile.\n+}\n+\n+\n+// ..., and the other way round:\n+\n+void BAR (void)\n+{\n+// Note right brace '}' commented out here.\n+//}\n+\n+void FOO (void)\n+{\n+  #pragma acc parallel\n+  {\n+    #pragma acc loop independent\n+    for (int i = 0; i < 16; i++)\n+      ;\n+  }\n+}\n+\n+// Adding right brace '}' here, to make this compile.\n+}"}, {"sha": "abb5e6b6c3d1646dfe6cb0ac70a9165c5b10a263", "filename": "gcc/testsuite/gfortran.dg/goacc/combined-directives.f90", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcombined-directives.f90?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -143,7 +143,8 @@ end subroutine test\n ! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. vector\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. seq\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. auto\" 2 \"gimple\" } }\n-! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. tile.2, 3\" 2 \"gimple\" } }\n+! XFAILed: OpenACC tile clauses are discarded during gimplification.\n+! { dg-final { scan-tree-dump-times \"acc loop private.i. private.j. tile.2, 3\" 2 \"gimple\" { xfail *-*-* } } }\n ! { dg-final { scan-tree-dump-times \"acc loop private.i. independent\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"private.z\" 2 \"gimple\" } }\n ! { dg-final { scan-tree-dump-times \"omp target oacc_\\[^ \\]+ map.force_tofrom:y\" 2 \"gimple\" } }"}, {"sha": "51b79b53636f2aa3f66471d71b7468f19b28e1b7", "filename": "gcc/testsuite/gfortran.dg/goacc/cray-2.f95", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray-2.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,56 @@\n+! { dg-additional-options \"-fcray-pointer\" }\n+! See also cray.f95.\n+\n+program test\n+  call oacc1\n+contains\n+  subroutine oacc1\n+    implicit none\n+    integer :: i\n+    real :: pointee\n+    pointer (ptr, pointee)\n+    !$acc declare device_resident (pointee)\n+    !$acc declare device_resident (ptr)\n+    !$acc data copy (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc end data\n+    !$acc data deviceptr (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc end data\n+    !$acc parallel private (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc end parallel\n+    !$acc host_data use_device (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc end host_data\n+    !$acc parallel loop reduction(+:pointee) ! { dg-error \"Cray pointee\" }\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+      !$acc cache (pointee) ! { dg-error \"Cray pointee\" }\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc update host (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc update self (pointee) ! { dg-error \"Cray pointee\" }\n+    !$acc data copy (ptr)\n+    !$acc end data\n+    !$acc data deviceptr (ptr) ! { dg-error \"Cray pointer\" }\n+    !$acc end data\n+    !$acc parallel private (ptr)\n+    !$acc end parallel\n+    !$acc host_data use_device (ptr) ! { dg-error \"Cray pointer\" }\n+    !$acc end host_data\n+    !$acc parallel loop reduction(+:ptr) ! { dg-error \"Cray pointer\" }\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+      !TODO: This must fail, as in openacc-1_0-branch.\n+      !$acc cache (ptr) ! { dg-error \"\" \"TODO\" { xfail *-*-* } }\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (ptr)\n+    !$acc update host (ptr)\n+    !$acc update self (ptr)\n+  end subroutine oacc1\n+end program test"}, {"sha": "d6d531705a696b2bf30951f63b21f5ca2d36e0c9", "filename": "gcc/testsuite/gfortran.dg/goacc/cray.f95", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,5 +1,5 @@\n-! { dg-do compile } \n ! { dg-additional-options \"-fcray-pointer\" }\n+! See also cray-2.f95.\n \n module test\n contains\n@@ -8,8 +8,8 @@ subroutine oacc1\n     integer :: i\n     real :: pointee\n     pointer (ptr, pointee)\n-    !$acc declare device_resident (pointee) \n-    !$acc declare device_resident (ptr) \n+    !$acc declare device_resident (pointee)\n+    !$acc declare device_resident (ptr)\n     !$acc data copy (pointee) ! { dg-error \"Cray pointee\" }\n     !$acc end data\n     !$acc data deviceptr (pointee) ! { dg-error \"Cray pointee\" }"}, {"sha": "79665b948c3bf572d88a136d26e7498aab068934", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-1-2.f95", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1-2.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,176 @@\n+! See also loop-1.f95.\n+\n+program test\n+  call test1\n+contains\n+\n+subroutine test1\n+  integer :: i, j, k, b(10)\n+  integer, dimension (30) :: a\n+  double precision :: d\n+  real :: r\n+  i = 0\n+  !$acc loop\n+  do 100 ! { dg-error \"cannot be a DO WHILE or DO without loop control\" }\n+    if (i .gt. 0) exit ! { dg-error \"EXIT statement\" }\n+  100 i = i + 1\n+  i = 0\n+  !$acc loop\n+  do ! { dg-error \"cannot be a DO WHILE or DO without loop control\" }\n+      if (i .gt. 0) exit ! { dg-error \"EXIT statement\" }\n+       i = i + 1\n+  end do\n+  i = 0\n+  !$acc loop\n+  do 200 while (i .lt. 4) ! { dg-error \"cannot be a DO WHILE or DO without loop control\" }\n+  200 i = i + 1\n+  !$acc loop\n+  do while (i .lt. 8) ! { dg-error \"cannot be a DO WHILE or DO without loop control\" }\n+       i = i + 1\n+  end do\n+  !$acc loop\n+  do 300 d = 1, 30, 6\n+      i = d\n+  300 a(i) = 1\n+  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 32 }\n+  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 32 }\n+  !$acc loop\n+  do d = 1, 30, 5\n+       i = d\n+      a(i) = 2\n+  end do\n+  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 38 }\n+  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 38 }\n+  !$acc loop\n+  do i = 1, 30\n+      if (i .eq. 16) exit ! { dg-error \"EXIT statement\" }\n+  end do\n+  !$acc loop\n+  outer: do i = 1, 30\n+      do j = 5, 10\n+          if (i .eq. 6 .and. j .eq. 7) exit outer ! { dg-error \"EXIT statement\" }\n+      end do\n+  end do outer\n+  last: do i = 1, 30\n+   end do last\n+\n+  ! different types of loop are allowed\n+  !$acc loop\n+  do i = 1,10\n+  end do\n+  !$acc loop\n+  do 400, i = 1,10\n+400   a(i) = i\n+\n+  ! after loop directive must be loop\n+  !$acc loop\n+  a(1) = 1 ! { dg-error \"Expected DO loop\" }\n+  do i = 1,10\n+  enddo\n+\n+  ! combined directives may be used with/without end\n+  !$acc parallel loop\n+  do i = 1,10\n+  enddo\n+  !$acc parallel loop\n+  do i = 1,10\n+  enddo\n+  !$acc end parallel loop\n+  !$acc kernels loop\n+  do i = 1,10\n+  enddo\n+  !$acc kernels loop\n+  do i = 1,10\n+  enddo\n+  !$acc end kernels loop\n+\n+  !$acc kernels loop reduction(max:i)\n+  do i = 1,10\n+  enddo\n+  !$acc kernels\n+  !$acc loop reduction(max:i)\n+  do i = 1,10\n+  enddo\n+  !$acc end kernels\n+\n+  !$acc parallel loop collapse(0) ! { dg-error \"constant positive integer\" }\n+  do i = 1,10\n+  enddo\n+\n+  !$acc parallel loop collapse(-1) ! { dg-error \"constant positive integer\" }\n+  do i = 1,10\n+  enddo\n+\n+  !$acc parallel loop collapse(i) ! { dg-error \"Constant expression required\" }\n+  do i = 1,10\n+  enddo\n+\n+  !$acc parallel loop collapse(4) ! { dg-error \"not enough DO loops for collapsed\" }\n+    do i = 1, 3\n+        do j = 4, 6\n+          do k = 5, 7\n+              a(i+j-k) = i + j + k\n+          end do\n+        end do\n+    end do\n+    !$acc parallel loop collapse(2)\n+    do i = 1, 5, 2\n+        do j = i + 1, 7, i  ! { dg-error \"collapsed loops don.t form rectangular iteration space\" }\n+        end do\n+    end do\n+    !$acc parallel loop collapse(2)\n+    do i = 1, 3\n+        do j = 4, 6\n+        end do\n+    end do\n+    !$acc parallel loop collapse(2)\n+    do i = 1, 3\n+        do j = 4, 6\n+        end do\n+        k = 4\n+    end do\n+    !$acc parallel loop collapse(3-1)\n+    do i = 1, 3\n+        do j = 4, 6\n+        end do\n+        k = 4\n+    end do\n+    !$acc parallel loop collapse(1+1)\n+    do i = 1, 3\n+        do j = 4, 6\n+        end do\n+        k = 4\n+    end do\n+    !$acc parallel loop collapse(2)\n+    do i = 1, 3\n+        do      ! { dg-error \"cannot be a DO WHILE or DO without loop control\" }\n+        end do\n+    end do\n+    !$acc parallel loop collapse(2)\n+    do i = 1, 3\n+        do r = 4, 6\n+        end do\n+        ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 151 }\n+        ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 151 }\n+    end do\n+\n+    ! Both seq and independent are not allowed\n+  !$acc loop independent seq ! { dg-error \"SEQ conflicts with INDEPENDENT\" }\n+  do i = 1,10\n+  enddo\n+\n+\n+  !$acc cache (a(1:10)) ! { dg-error \"ACC CACHE directive must be inside of loop\" }\n+\n+  do i = 1,10\n+    !$acc cache(a(i:i+1))\n+  enddo\n+\n+  do i = 1,10\n+    !$acc cache(a(i:i+1))\n+    a(i) = i\n+    !$acc cache(a(i+2:i+2+1))\n+  enddo\n+\n+end subroutine test1\n+end program test"}, {"sha": "5f81b7a1d19c0d6bdbe6960b9a6521aa38a6e1e0", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-1.f95", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,8 +1,10 @@\n+! See also loop-1-2.f95.\n+\n module test\n   implicit none\n contains\n \n-subroutine test1  \n+subroutine test1\n   integer :: i, j, k, b(10)\n   integer, dimension (30) :: a\n   double precision :: d\n@@ -30,15 +32,15 @@ subroutine test1\n   do 300 d = 1, 30, 6\n       i = d\n   300 a(i) = 1\n-  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 30 }\n-  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 30 }\n+  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 32 }\n+  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 32 }\n   !$acc loop\n   do d = 1, 30, 5\n        i = d\n       a(i) = 2\n   end do\n-  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 36 }\n-  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 36 }\n+  ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 38 }\n+  ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 38 }\n   !$acc loop\n   do i = 1, 30\n       if (i .eq. 16) exit ! { dg-error \"EXIT statement\" }\n@@ -53,7 +55,7 @@ subroutine test1\n    end do last\n \n   ! different types of loop are allowed\n-  !$acc loop \n+  !$acc loop\n   do i = 1,10\n   end do\n   !$acc loop\n@@ -65,8 +67,8 @@ subroutine test1\n   a(1) = 1 ! { dg-error \"Expected DO loop\" }\n   do i = 1,10\n   enddo\n-  \n-  ! combined directives may be used with/without end \n+\n+  ! combined directives may be used with/without end\n   !$acc parallel loop\n   do i = 1,10\n   enddo\n@@ -82,11 +84,11 @@ subroutine test1\n   enddo\n   !$acc end kernels loop\n \n-  !$acc kernels loop reduction(max:i) \n+  !$acc kernels loop reduction(max:i)\n   do i = 1,10\n   enddo\n-  !$acc kernels \n-  !$acc loop reduction(max:i) \n+  !$acc kernels\n+  !$acc loop reduction(max:i)\n   do i = 1,10\n   enddo\n   !$acc end kernels\n@@ -118,7 +120,7 @@ subroutine test1\n     end do\n     !$acc parallel loop collapse(2)\n     do i = 1, 3\n-        do j = 4, 6  \n+        do j = 4, 6\n         end do\n     end do\n     !$acc parallel loop collapse(2)\n@@ -148,8 +150,8 @@ subroutine test1\n     do i = 1, 3\n         do r = 4, 6\n         end do\n-        ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 149 }\n-        ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 149 }\n+        ! { dg-warning \"Deleted feature: Loop variable at .1. must be integer\" \"\" { target *-*-* } 151 }\n+        ! { dg-error \"ACC LOOP iteration variable must be of type integer\" \"\" { target *-*-* } 151 }\n     end do\n \n     ! Both seq and independent are not allowed"}, {"sha": "9be74a8591908f42274190d00ad848721f551247", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-3-2.f95", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3-2.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,58 @@\n+! { dg-additional-options \"-std=f2008\" }\n+! See also loop-3.f95.\n+\n+program test\n+  call test1\n+contains\n+subroutine test1\n+  implicit none\n+  integer :: i, j\n+\n+  ! !$acc end loop not required by spec\n+  !$acc loop\n+  do i = 1,5\n+  enddo\n+  !$acc end loop ! { dg-warning \"Redundant\" }\n+\n+  !$acc loop\n+  do i = 1,5\n+  enddo\n+  j = 1\n+  !$acc end loop ! { dg-error \"Unexpected\" }\n+\n+  !$acc parallel\n+  !$acc loop\n+  do i = 1,5\n+  enddo\n+  !$acc end parallel\n+  !$acc end loop ! { dg-error \"Unexpected\" }\n+\n+  ! OpenACC supports Fortran 2008 do concurrent statement\n+  !$acc loop\n+  do concurrent (i = 1:5)\n+  end do\n+\n+  !$acc loop\n+  outer_loop: do i = 1, 5\n+    inner_loop: do j = 1,5\n+      if (i .eq. j) cycle outer_loop\n+      if (i .ne. j) exit outer_loop ! { dg-error \"EXIT statement\" }\n+    end do inner_loop\n+  end do outer_loop\n+\n+  outer_loop1: do i = 1, 5\n+    !$acc loop\n+    inner_loop1: do j = 1,5\n+      if (i .eq. j) cycle outer_loop1 ! { dg-error \"CYCLE statement\" }\n+    end do inner_loop1\n+  end do outer_loop1\n+\n+  !$acc loop collapse(2)\n+  outer_loop2: do i = 1, 5\n+    inner_loop2: do j = 1,5\n+      if (i .eq. j) cycle outer_loop2 ! { dg-error \"CYCLE statement\" }\n+      if (i .ne. j) exit outer_loop2 ! { dg-error \"EXIT statement\" }\n+    end do inner_loop2\n+  end do outer_loop2\n+end subroutine test1\n+end program test"}, {"sha": "30930f404f3c0639bb9a2c7126f1d661dd0dd4cc", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-3.f95", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-3.f95?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,10 +1,10 @@\n-! { dg-do compile }\n ! { dg-additional-options \"-std=f2008\" }\n+! See also loop-3-2.f95.\n \n subroutine test1\n   implicit none\n   integer :: i, j\n-  \n+\n   ! !$acc end loop not required by spec\n   !$acc loop\n   do i = 1,5\n@@ -23,7 +23,7 @@ subroutine test1\n   enddo\n   !$acc end parallel\n   !$acc end loop ! { dg-error \"Unexpected\" }\n-  \n+\n   ! OpenACC supports Fortran 2008 do concurrent statement\n   !$acc loop\n   do concurrent (i = 1:5)\n@@ -35,7 +35,7 @@ subroutine test1\n       if (i .eq. j) cycle outer_loop\n       if (i .ne. j) exit outer_loop ! { dg-error \"EXIT statement\" }\n     end do inner_loop\n-  end do outer_loop \n+  end do outer_loop\n \n   outer_loop1: do i = 1, 5\n     !$acc loop\n@@ -50,6 +50,5 @@ subroutine test1\n       if (i .eq. j) cycle outer_loop2 ! { dg-error \"CYCLE statement\" }\n       if (i .ne. j) exit outer_loop2 ! { dg-error \"EXIT statement\" }\n     end do inner_loop2\n-  end do outer_loop2 \n+  end do outer_loop2\n end subroutine test1\n-"}, {"sha": "2fcaa400ee3b54757d7aa6b1e60f1815c8b64c4a", "filename": "gcc/testsuite/gfortran.dg/goacc/nested-function-1.f90", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnested-function-1.f90?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,93 @@\n+! Exercise nested function decomposition, gcc/tree-nested.c.\n+! See gcc/testsuite/gcc.dg/goacc/nested-function-1.c for the C version.\n+\n+program main\n+  integer, parameter :: N = 100\n+  integer :: nonlocal_arg\n+  integer :: nonlocal_a(N)\n+  integer :: nonlocal_i\n+  integer :: nonlocal_j\n+\n+  nonlocal_a (:) = 5\n+  nonlocal_arg = 5\n+\n+  call local ()\n+  call nonlocal ()\n+\n+contains\n+\n+  subroutine local ()\n+    integer :: local_i\n+    integer :: local_arg\n+    integer :: local_a(N)\n+    integer :: local_j\n+\n+    local_a (:) = 5\n+    local_arg = 5\n+\n+    !$acc kernels loop &\n+    !$acc gang(num:local_arg) worker(local_arg) vector(local_arg) &\n+    !$acc wait async(local_arg)\n+    do local_i = 1, N\n+       !$acc cache (local_a(local_i:local_i + 5))\n+       local_a(local_i) = 100\n+       !$acc loop seq tile(*)\n+       do local_j = 1, N\n+       enddo\n+       !$acc loop auto independent tile(1)\n+       do local_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+\n+    !$acc kernels loop &\n+    !$acc gang(static:local_arg) worker(local_arg) vector(local_arg) &\n+    !$acc wait(local_arg, local_arg + 1, local_arg + 2) async\n+    do local_i = 1, N\n+       !$acc cache (local_a(local_i:local_i + 4))\n+       local_a(local_i) = 100\n+       !$acc loop seq tile(1)\n+       do local_j = 1, N\n+       enddo\n+       !$acc loop auto independent tile(*)\n+       do local_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+  end subroutine local\n+\n+  subroutine nonlocal ()\n+    nonlocal_a (:) = 5\n+    nonlocal_arg = 5\n+\n+    !$acc kernels loop &\n+    !$acc gang(num:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n+    !$acc wait async(nonlocal_arg)\n+    do nonlocal_i = 1, N\n+       !$acc cache (nonlocal_a(nonlocal_i:nonlocal_i + 3))\n+       nonlocal_a(nonlocal_i) = 100\n+       !$acc loop seq tile(2)\n+       do nonlocal_j = 1, N\n+       enddo\n+       !$acc loop auto independent tile(3)\n+       do nonlocal_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+\n+    !$acc kernels loop &\n+    !$acc gang(static:nonlocal_arg) worker(nonlocal_arg) vector(nonlocal_arg) &\n+    !$acc wait(nonlocal_arg, nonlocal_arg + 1, nonlocal_arg + 2) async\n+    do nonlocal_i = 1, N\n+       !$acc cache (nonlocal_a(nonlocal_i:nonlocal_i + 2))\n+       nonlocal_a(nonlocal_i) = 100\n+       !$acc loop seq tile(*)\n+       do nonlocal_j = 1, N\n+       enddo\n+       !$acc loop auto independent tile(*)\n+       do nonlocal_j = 1, N\n+       enddo\n+    enddo\n+    !$acc end kernels loop\n+  end subroutine nonlocal\n+end program main"}, {"sha": "6cab798d4583a089a38d1adaeeeec8dd06246d76", "filename": "gcc/testsuite/gfortran.dg/goacc/subroutines.f90", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1ffdb16c4a54a4f8ad957143336e279b8d5c60/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1ffdb16c4a54a4f8ad957143336e279b8d5c60/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fsubroutines.f90?ref=4b1ffdb16c4a54a4f8ad957143336e279b8d5c60", "patch": "@@ -1,73 +0,0 @@\n-! Exercise how tree-nested.c handles gang, worker vector and seq.\n-\n-! { dg-do compile } \n-\n-program main\n-  integer, parameter :: N = 100\n-  integer :: nonlocal_arg\n-  integer :: nonlocal_a(N)\n-  integer :: nonlocal_i\n-  integer :: nonlocal_j\n-  \n-  nonlocal_a (:) = 5\n-  nonlocal_arg = 5\n-  \n-  call local ()\n-  call nonlocal ()\n-\n-contains\n-\n-  subroutine local ()\n-    integer :: local_i\n-    integer :: local_arg\n-    integer :: local_a(N)\n-    integer :: local_j\n-    \n-    local_a (:) = 5\n-    local_arg = 5\n-\n-    !$acc kernels loop gang(num:local_arg) worker(local_arg) vector(local_arg)\n-    do local_i = 1, N\n-       local_a(local_i) = 100\n-       !$acc loop seq\n-       do local_j = 1, N\n-       enddo\n-    enddo\n-    !$acc end kernels loop\n-\n-    !$acc kernels loop gang(static:local_arg) worker(local_arg) &\n-    !$acc vector(local_arg)\n-    do local_i = 1, N\n-       local_a(local_i) = 100\n-       !$acc loop seq\n-       do local_j = 1, N\n-       enddo\n-    enddo\n-    !$acc end kernels loop\n-  end subroutine local\n-\n-  subroutine nonlocal ()\n-    nonlocal_a (:) = 5\n-    nonlocal_arg = 5\n-  \n-    !$acc kernels loop gang(num:nonlocal_arg) worker(nonlocal_arg) &\n-    !$acc vector(nonlocal_arg)\n-    do nonlocal_i = 1, N\n-       nonlocal_a(nonlocal_i) = 100\n-       !$acc loop seq\n-       do nonlocal_j = 1, N\n-       enddo\n-    enddo\n-    !$acc end kernels loop\n-\n-    !$acc kernels loop gang(static:nonlocal_arg) worker(nonlocal_arg) &\n-    !$acc vector(nonlocal_arg)\n-    do nonlocal_i = 1, N\n-       nonlocal_a(nonlocal_i) = 100\n-       !$acc loop seq\n-       do nonlocal_j = 1, N\n-       enddo\n-    enddo\n-    !$acc end kernels loop\n-  end subroutine nonlocal\n-end program main"}, {"sha": "6fc6326000061df1a71bed7797cf56ed7cfacfbe", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1114,6 +1114,8 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_ASYNC:\n+\tcase OMP_CLAUSE_WAIT:\n \t  /* Several OpenACC clauses have optional arguments.  Check if they\n \t     are present.  */\n \t  if (OMP_CLAUSE_OPERAND (clause, 0))\n@@ -1197,8 +1199,21 @@ convert_nonlocal_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n \tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n+\tcase OMP_CLAUSE_AUTO:\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n+\t  /* OpenACC tile clauses are discarded during gimplification, so we\n+\t     don't expect to see anything here.  */\n+\t  gcc_unreachable ();\n+\n+\tcase OMP_CLAUSE__CACHE_:\n+\t  /* These clauses belong to the OpenACC cache directive, which is\n+\t     discarded during gimplification, so we don't expect to see\n+\t     anything here.  */\n+\t  gcc_unreachable ();\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n@@ -1790,6 +1805,8 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_GANG:\n \tcase OMP_CLAUSE_WORKER:\n \tcase OMP_CLAUSE_VECTOR:\n+\tcase OMP_CLAUSE_ASYNC:\n+\tcase OMP_CLAUSE_WAIT:\n \t  /* Several OpenACC clauses have optional arguments.  Check if they\n \t     are present.  */\n \t  if (OMP_CLAUSE_OPERAND (clause, 0))\n@@ -1878,8 +1895,21 @@ convert_local_omp_clauses (tree *pclauses, struct walk_stmt_info *wi)\n \tcase OMP_CLAUSE_SIMD:\n \tcase OMP_CLAUSE_DEFAULTMAP:\n \tcase OMP_CLAUSE_SEQ:\n+\tcase OMP_CLAUSE_INDEPENDENT:\n+\tcase OMP_CLAUSE_AUTO:\n \t  break;\n \n+\tcase OMP_CLAUSE_TILE:\n+\t  /* OpenACC tile clauses are discarded during gimplification, so we\n+\t     don't expect to see anything here.  */\n+\t  gcc_unreachable ();\n+\n+\tcase OMP_CLAUSE__CACHE_:\n+\t  /* These clauses belong to the OpenACC cache directive, which is\n+\t     discarded during gimplification, so we don't expect to see\n+\t     anything here.  */\n+\t  gcc_unreachable ();\n+\n \tdefault:\n \t  gcc_unreachable ();\n \t}"}, {"sha": "cf551f49384f640149e2a0aa003345d823adc134", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -1,3 +1,13 @@\n+2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR middle-end/71373\n+\t* libgomp.oacc-c/nested-function-1.c: New file.\n+\t* libgomp.oacc-c/nested-function-2.c: Likewise.\n+\t* libgomp.oacc-fortran/nested-function-1.f90: Likewise.\n+\t* libgomp.oacc-fortran/nested-function-2.f90: Likewise.\n+\t* libgomp.oacc-fortran/nested-function-3.f90: Likewise.\n+\n 2016-06-10  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR c/71381"}, {"sha": "fb2a3acdfa9fdaee5d123c46dc5261a7ad845683", "filename": "libgomp/testsuite/libgomp.oacc-c/nested-function-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-1.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,52 @@\n+/* Exercise nested function decomposition, gcc/tree-nested.c.  */\n+\n+int\n+main (void)\n+{\n+  void test1 ()\n+  {\n+    int i, j, k;\n+    int a[4][7][8];\n+\n+    __builtin_memset (a, 0, sizeof (a));\n+\n+#pragma acc parallel\n+#pragma acc loop collapse(4 - 1)\n+    for (i = 1; i <= 3; i++)\n+      for (j = 4; j <= 6; j++)\n+\tfor (k = 5; k <= 7; k++)\n+\t  a[i][j][k] = i + j + k;\n+\n+    for (i = 1; i <= 3; i++)\n+      for (j = 4; j <= 6; j++)\n+\tfor (k = 5; k <= 7; k++)\n+\t  if (a[i][j][k] != i + j + k)\n+\t    __builtin_abort();\n+  }\n+\n+  void test2 ()\n+  {\n+    int i, j, k;\n+    int a[4][4][4];\n+\n+    __builtin_memset (a, 0, sizeof (a));\n+\n+#pragma acc parallel\n+#pragma acc loop collapse(3)\n+    for (i = 1; i <= 3; i++)\n+      for (j = 1; j <= 3; j++)\n+\tfor (k = 1; k <= 3; k++)\n+\t  a[i][j][k] = 1;\n+\n+    for (i = 1; i <= 3; i++)\n+      for (j = 1; j <= 3; j++)\n+\tfor (k = 1; k <= 3; k++)\n+\t  if (a[i][j][k] != 1)\n+\t    __builtin_abort ();\n+  }\n+\n+  test1 ();\n+  test2 ();\n+\n+  return 0;\n+}"}, {"sha": "2c3f3feb7f84c1b423ec257d40c1100b8fc53831", "filename": "libgomp/testsuite/libgomp.oacc-c/nested-function-2.c", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c%2Fnested-function-2.c?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,155 @@\n+/* Exercise nested function decomposition, gcc/tree-nested.c.  */\n+\n+int\n+main (void)\n+{\n+  int p1 = 2, p2 = 6, p3 = 0, p4 = 4, p5 = 13, p6 = 18, p7 = 1, p8 = 1, p9 = 1;\n+\n+  void test1 ()\n+  {\n+    int i, j, k;\n+    int a[4][4][4];\n+\n+    __builtin_memset (a, '\\0', sizeof (a));\n+\n+#pragma acc parallel\n+#pragma acc loop collapse(3)\n+    for (i = 1; i <= 3; i++)\n+      for (j = 1; j <= 3; j++)\n+\tfor (k = 2; k <= 3; k++)\n+\t  a[i][j][k] = 1;\n+\n+    for (i = 1; i <= 3; i++)\n+      for (j = 1; j <= 3; j++)\n+\tfor (k = 2; k <= 3; k++)\n+\t  if (a[i][j][k] != 1)\n+\t    __builtin_abort();\n+  }\n+\n+  void test2 (int v1, int v2, int v3, int v4, int v5, int v6)\n+  {\n+    int i, j, k, l = 0, r = 0;\n+    int a[7][5][19];\n+    int b[7][5][19];\n+\n+    __builtin_memset (a, '\\0', sizeof (a));\n+    __builtin_memset (b, '\\0', sizeof (b));\n+\n+#pragma acc parallel reduction (||:l)\n+#pragma acc loop reduction (||:l) collapse(3)\n+    for (i = v1; i <= v2; i++)\n+      for (j = v3; j <= v4; j++)\n+\tfor (k = v5; k <= v6; k++)\n+\t  {\n+\t    l = l || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!l)\n+\t      a[i][j][k] += 1;\n+\t  }\n+\n+    for (i = v1; i <= v2; i++)\n+      for (j = v3; j <= v4; j++)\n+\tfor (k = v5; k <= v6; k++)\n+\t  {\n+\t    r = r || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!r)\n+\t      b[i][j][k] += 1;\n+\t  }\n+\n+    if (l != r)\n+      __builtin_abort ();\n+\n+    for (i = v1; i <= v2; i++)\n+      for (j = v3; j <= v4; j++)\n+\tfor (k = v5; k <= v6; k++)\n+\t  if (b[i][j][k] != a[i][j][k])\n+\t    __builtin_abort ();\n+  }\n+\n+  void test3 (int v1, int v2, int v3, int v4, int v5, int v6, int v7, int v8,\n+      int v9)\n+  {\n+    int i, j, k, l = 0, r = 0;\n+    int a[7][5][19];\n+    int b[7][5][19];\n+\n+    __builtin_memset (a, '\\0', sizeof (a));\n+    __builtin_memset (b, '\\0', sizeof (b));\n+\n+#pragma acc parallel reduction (||:l)\n+#pragma acc loop reduction (||:l) collapse(3)\n+    for (i = v1; i <= v2; i += v7)\n+      for (j = v3; j <= v4; j += v8)\n+\tfor (k = v5; k <= v6; k += v9)\n+\t  {\n+\t    l = l || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!l)\n+\t      a[i][j][k] += 1;\n+\t  }\n+\n+    for (i = v1; i <= v2; i += v7)\n+      for (j = v3; j <= v4; j += v8)\n+\tfor (k = v5; k <= v6; k += v9)\n+\t  {\n+\t    r = r || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!r)\n+\t      b[i][j][k] += 1;\n+\t  }\n+\n+    if (l != r)\n+      __builtin_abort ();\n+\n+    for (i = v1; i <= v2; i++)\n+      for (j = v3; j <= v4; j++)\n+\tfor (k = v5; k <= v6; k++)\n+\t  if (b[i][j][k] != a[i][j][k])\n+\t    __builtin_abort ();\n+  }\n+\n+  void test4 ()\n+  {\n+    int i, j, k, l = 0, r = 0;\n+    int a[7][5][19];\n+    int b[7][5][19];\n+    int v1 = p1, v2 = p2, v3 = p3, v4 = p4, v5 = p5, v6 = p6, v7 = p7, v8 = p8,\n+      v9 = p9;\n+\n+    __builtin_memset (a, '\\0', sizeof (a));\n+    __builtin_memset (b, '\\0', sizeof (b));\n+\n+#pragma acc parallel reduction (||:l)\n+#pragma acc loop reduction (||:l) collapse(3)\n+    for (i = v1; i <= v2; i += v7)\n+      for (j = v3; j <= v4; j += v8)\n+\tfor (k = v5; k <= v6; k += v9)\n+\t  {\n+\t    l = l || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!l)\n+\t      a[i][j][k] += 1;\n+\t  }\n+\n+    for (i = v1; i <= v2; i += v7)\n+      for (j = v3; j <= v4; j += v8)\n+\tfor (k = v5; k <= v6; k += v9)\n+\t  {\n+\t    r = r || i < 2 || i > 6 || j < 0 || j > 4 || k < 13 || k > 18;\n+\t    if (!r)\n+\t      b[i][j][k] += 1;\n+\t  }\n+\n+    if (l != r)\n+      __builtin_abort ();\n+\n+    for (i = v1; i <= v2; i++)\n+      for (j = v3; j <= v4; j++)\n+\tfor (k = v5; k <= v6; k++)\n+\t  if (b[i][j][k] != a[i][j][k])\n+\t    __builtin_abort ();\n+  }\n+\n+  test1 ();\n+  test2 (p1, p2, p3, p4, p5, p6);\n+  test3 (p1, p2, p3, p4, p5, p6, p7, p8, p9);\n+  test4 ();\n+\n+  return 0;\n+}"}, {"sha": "fdbca4481f852c841b898b3ae996094f47f37f64", "filename": "libgomp/testsuite/libgomp.oacc-fortran/nested-function-1.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-1.f90?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,70 @@\n+! Exercise nested function decomposition, gcc/tree-nested.c.\n+\n+! { dg-do run }\n+\n+program collapse2\n+  call test1\n+  call test2\n+contains\n+  subroutine test1\n+    integer :: i, j, k, a(1:3, 4:6, 5:7)\n+    logical :: l\n+    l = .false.\n+    a(:, :, :) = 0\n+    !$acc parallel reduction (.or.:l)\n+    !$acc loop worker vector collapse(4 - 1)\n+      do 164 i = 1, 3\n+        do 164 j = 4, 6\n+          do 164 k = 5, 7\n+            a(i, j, k) = i + j + k\n+164      end do\n+    !$acc loop worker vector reduction(.or.:l) collapse(2)\n+firstdo: do i = 1, 3\n+        do j = 4, 6\n+          do k = 5, 7\n+            if (a(i, j, k) .ne. (i + j + k)) l = .true.\n+          end do\n+        end do\n+      end do firstdo\n+    !$acc end parallel\n+    if (l) call abort\n+  end subroutine test1\n+\n+  subroutine test2\n+    integer :: a(3,3,3), k, kk, kkk, l, ll, lll\n+    a = 0\n+    !$acc parallel\n+    ! Use \"gang(static:1)\" here and below to effectively turn gang-redundant\n+    ! execution mode into something like gang-single.\n+    !$acc loop gang(static:1) collapse(1)\n+      do 115 k=1,3\n+         !$acc loop collapse(2)\n+  dokk: do kk=1,3\n+          do kkk=1,3\n+            a(k,kk,kkk) = 1\n+          enddo\n+        enddo dokk\n+115   continue\n+    !$acc loop gang(static:1) collapse(1)\n+      do k=1,3\n+         if (any(a(k,1:3,1:3).ne.1)) call abort\n+      enddo\n+    ! Use \"gang(static:1)\" here and below to effectively turn gang-redundant\n+    ! execution mode into something like gang-single.\n+    !$acc loop gang(static:1) collapse(1)\n+ dol: do 120 l=1,3\n+    !$acc loop collapse(2)\n+  doll: do ll=1,3\n+          do lll=1,3\n+            a(l,ll,lll) = 2\n+          enddo\n+        enddo doll\n+120   end do dol\n+    !$acc loop gang(static:1) collapse(1)\n+     do l=1,3\n+        if (any(a(l,1:3,1:3).ne.2)) call abort\n+     enddo\n+    !$acc end parallel\n+  end subroutine test2\n+\n+end program collapse2"}, {"sha": "4e2819641ea0f3fae94be3b61f79a723cbcbcc46", "filename": "libgomp/testsuite/libgomp.oacc-fortran/nested-function-2.f90", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-2.f90?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,173 @@\n+! Exercise nested function decomposition, gcc/tree-nested.c.\n+\n+! { dg-do run }\n+\n+program collapse3\n+  integer :: p1, p2, p3, p4, p5, p6, p7, p8, p9\n+  p1 = 2\n+  p2 = 6\n+  p3 = -2\n+  p4 = 4\n+  p5 = 13\n+  p6 = 18\n+  p7 = 1\n+  p8 = 1\n+  p9 = 1\n+  call test1\n+  call test2 (p1, p2, p3, p4, p5, p6)\n+  call test3 (p1, p2, p3, p4, p5, p6, p7, p8, p9)\n+  call test4\n+contains\n+  subroutine test1\n+    integer :: a(3,3,3), k, kk, kkk, l, ll, lll\n+    !$acc parallel\n+    !$acc loop collapse(3)\n+      do 115 k=1,3\n+dokk:   do kk=1,3\n+          do kkk=1,3\n+            a(k,kk,kkk) = 1\n+          enddo\n+        enddo dokk\n+115   continue\n+    !$acc end parallel\n+    if (any(a(1:3,1:3,1:3).ne.1)) call abort\n+    !$acc parallel\n+    !$acc loop collapse(3)\n+dol:  do 120 l=1,3\n+doll:   do ll=1,3\n+          do lll=1,3\n+            a(l,ll,lll) = 2\n+          enddo\n+        enddo doll\n+120   end do dol\n+    !$acc end parallel\n+    if (any(a(1:3,1:3,1:3).ne.2)) call abort\n+    end subroutine test1\n+\n+  subroutine test2(v1, v2, v3, v4, v5, v6)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2\n+        do j = v3, v4\n+          do k = v5, v6\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.l) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test2\n+\n+  subroutine test3(v1, v2, v3, v4, v5, v6, v7, v8, v9)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6, v7, v8, v9\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2, v7\n+        do j = v3, v4, v8\n+          do k = v5, v6, v9\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.l) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test3\n+\n+  subroutine test4\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6, v7, v8, v9\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    v1 = p1\n+    v2 = p2\n+    v3 = p3\n+    v4 = p4\n+    v5 = p5\n+    v6 = p6\n+    v7 = p7\n+    v8 = p8\n+    v9 = p9\n+    !$acc parallel reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2, v7\n+        do j = v3, v4, v8\n+          do k = v5, v6, v9\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.r) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+         do k = v5, v6, v9\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+         end do\n+      end do\n+    end do\n+  end subroutine test4\n+\n+end program collapse3"}, {"sha": "2f6485ef8cf012e3a9bdff7e57208b480bff3439", "filename": "libgomp/testsuite/libgomp.oacc-fortran/nested-function-3.f90", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27d6ba889b34d38dc13b5f3a8959c576fe0477b1/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fnested-function-3.f90?ref=27d6ba889b34d38dc13b5f3a8959c576fe0477b1", "patch": "@@ -0,0 +1,244 @@\n+! Exercise nested function decomposition, gcc/tree-nested.c.\n+\n+! { dg-do run }\n+\n+program sub_collapse_3\n+  call test1\n+  call test2 (2, 6, -2, 4, 13, 18)\n+  call test3 (2, 6, -2, 4, 13, 18, 1, 1, 1)\n+  call test4\n+  call test5 (2, 6, -2, 4, 13, 18)\n+  call test6 (2, 6, -2, 4, 13, 18, 1, 1, 1)\n+contains\n+  subroutine test1\n+    integer :: a(3,3,3), k, kk, kkk, l, ll, lll\n+    !$acc parallel\n+    !$acc loop collapse(3)\n+      do 115 k=1,3\n+dokk:   do kk=1,3\n+          do kkk=1,3\n+            a(k,kk,kkk) = 1\n+          enddo\n+        enddo dokk\n+115   continue\n+    !$acc end parallel\n+    if (any(a(1:3,1:3,1:3).ne.1)) call abort\n+    !$acc parallel\n+    !$acc loop collapse(3)\n+dol:  do 120 l=1,3\n+doll:   do ll=1,3\n+          do lll=1,3\n+            a(l,ll,lll) = 2\n+          enddo\n+        enddo doll\n+120   end do dol\n+    !$acc end parallel\n+    if (any(a(1:3,1:3,1:3).ne.2)) call abort\n+  end subroutine test1\n+\n+  subroutine test2(v1, v2, v3, v4, v5, v6)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel pcopyin (v1, v2, v3, v4, v5, v6) reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2\n+        do j = v3, v4\n+          do k = v5, v6\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.l) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test2\n+\n+  subroutine test3(v1, v2, v3, v4, v5, v6, v7, v8, v9)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6, v7, v8, v9\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel pcopyin (v1, v2, v3, v4, v5, v6, v7, v8, v9) reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2, v7\n+        do j = v3, v4, v8\n+          do k = v5, v6, v9\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.l) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test3\n+\n+  subroutine test4\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6, v7, v8, v9\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    v1 = 2\n+    v2 = 6\n+    v3 = -2\n+    v4 = 4\n+    v5 = 13\n+    v6 = 18\n+    v7 = 1\n+    v8 = 1\n+    v9 = 1\n+    !$acc parallel pcopyin (v1, v2, v3, v4, v5, v6, v7, v8, v9) reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2, v7\n+        do j = v3, v4, v8\n+          do k = v5, v6, v9\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.r) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+         do k = v5, v6, v9\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+         end do\n+      end do\n+    end do\n+  end subroutine test4\n+\n+  subroutine test5(v1, v2, v3, v4, v5, v6)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel pcopyin (v1, v2, v3, v4, v5, v6) reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2\n+        do j = v3, v4\n+          do k = v5, v6\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.r) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2\n+      do j = v3, v4\n+        do k = v5, v6\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test5\n+\n+  subroutine test6(v1, v2, v3, v4, v5, v6, v7, v8, v9)\n+    integer :: i, j, k, a(1:7, -3:5, 12:19), b(1:7, -3:5, 12:19)\n+    integer :: v1, v2, v3, v4, v5, v6, v7, v8, v9\n+    logical :: l, r\n+    l = .false.\n+    r = .false.\n+    a(:, :, :) = 0\n+    b(:, :, :) = 0\n+    !$acc parallel pcopyin (v1, v2, v3, v4, v5, v6, v7, v8, v9) reduction (.or.:l)\n+    !$acc loop reduction (.or.:l) collapse (3)\n+      do i = v1, v2, v7\n+        do j = v3, v4, v8\n+          do k = v5, v6, v9\n+            l = l.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+            l = l.or.k.lt.13.or.k.gt.18\n+            if (.not.l) a(i, j, k) = a(i, j, k) + 1\n+            m = i * 100 + j * 10 + k\n+          end do\n+        end do\n+      end do\n+    !$acc end parallel\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+          r = r.or.i.lt.2.or.i.gt.6.or.j.lt.-2.or.j.gt.4\n+          r = r.or.k.lt.13.or.k.gt.18\n+          if (.not.r) b(i, j, k) = b(i, j, k) + 1\n+        end do\n+      end do\n+    end do\n+    if (l .neqv. r) call abort\n+    do i = v1, v2, v7\n+      do j = v3, v4, v8\n+        do k = v5, v6, v9\n+           if (a(i, j, k) .ne. b(i, j, k)) call abort\n+        end do\n+      end do\n+    end do\n+  end subroutine test6\n+\n+end program sub_collapse_3"}]}