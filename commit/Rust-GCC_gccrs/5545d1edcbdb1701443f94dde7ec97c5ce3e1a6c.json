{"sha": "5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "node_id": "C_kwDOANBUbNoAKDU1NDVkMWVkY2JkYjE3MDE0NDNmOTRkZGU3ZWM5N2M1Y2UzZTFhNmM", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T21:23:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-12-30T21:23:58Z"}, "message": "libcpp: Fix up ##__VA_OPT__ handling [PR89971]\n\nIn the following testcase we incorrectly error about pasting / token\nwith padding token (which is a result of __VA_OPT__); instead we should\nlike e.g. for ##arg where arg is empty macro argument clear PASTE_LEFT\nflag of the previous token if __VA_OPT__ doesn't add any real tokens\n(which can happen either because the macro doesn't have any tokens\npassed to ... (i.e. __VA_ARGS__ expands to empty) or when __VA_OPT__\ndoesn't have any tokens in between ()s).\n\n2021-12-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR preprocessor/89971\nlibcpp/\n\t* macro.c (replace_args): For ##__VA_OPT__, if __VA_OPT__ expands\n\tto no tokens at all, drop PASTE_LEFT flag from the previous token.\ngcc/testsuite/\n\t* c-c++-common/cpp/va-opt-9.c: New test.", "tree": {"sha": "91e1d28262ea01451faebec09a45e3545010aa87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91e1d28262ea01451faebec09a45e3545010aa87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be674bdd11d5fa6b20d469e6d6f43c26da9e744f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be674bdd11d5fa6b20d469e6d6f43c26da9e744f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be674bdd11d5fa6b20d469e6d6f43c26da9e744f"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "5f73ad034266b6a293ee5317e6c6c9b20ea8da94", "filename": "gcc/testsuite/c-c++-common/cpp/va-opt-9.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fva-opt-9.c?ref=5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "patch": "@@ -0,0 +1,20 @@\n+/* PR preprocessor/89971 */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99\" { target c } } */\n+/* { dg-options \"-std=c++20\" { target c++ } } */\n+\n+int a, c;\n+#define m1(...) a /##__VA_OPT__(b) c\n+#define m2(...) a /##__VA_OPT__() c\n+#define m3(...) a##__VA_OPT__()##b = 1\n+#define m4(...) a##__VA_OPT__(b c d)##e = 2\n+\n+int\n+foo (void)\n+{\n+  int d = m1();\n+  int e = m2(1);\n+  int m3(1 2 3);\n+  int m4();\n+  return d + e + ab + ae;\n+}"}, {"sha": "369383f98f30aab503f10dca02b4c295d9c8dfed", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=5545d1edcbdb1701443f94dde7ec97c5ce3e1a6c", "patch": "@@ -2094,8 +2094,14 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t  tokens_buff_add_token (buff, virt_locs,\n \t\t\t\t\t t, t->src_loc, t->src_loc,\n \t\t\t\t\t NULL, 0);\n+\t\t  continue;\n \t\t}\n-\t      else if (src->flags & PASTE_LEFT)\n+\t      if (start && paste_flag == start && (*start)->flags & PASTE_LEFT)\n+\t\t/* If __VA_OPT__ expands to nothing (either because __VA_ARGS__\n+\t\t   is empty or because it is __VA_OPT__() ), drop PASTE_LEFT\n+\t\t   flag from previous token.  */\n+\t\tcopy_paste_flag (pfile, start, &pfile->avoid_paste);\n+\t      if (src->flags & PASTE_LEFT)\n \t\t{\n \t\t  /* Don't avoid paste after all.  */\n \t\t  while (paste_flag && paste_flag != start"}]}