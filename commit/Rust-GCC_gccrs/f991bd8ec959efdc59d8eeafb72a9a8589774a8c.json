{"sha": "f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk5MWJkOGVjOTU5ZWZkYzU5ZDhlZWFmYjcyYTlhODU4OTc3NGE4Yw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2017-01-23T11:21:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-23T11:21:37Z"}, "message": "sem_ch3.adb, [...]: Minor reformatting.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch3.adb, exp_spark.adb, exp_attr.adb, sem_ch9.adb, sem_prag.adb,\n\tsem_util.adb, sem_warn.adb, exp_ch3.adb: Minor reformatting.\n\n2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Subprogram): Ensure that all anonymous\n\taccess-to-subprogram types inherit the convention of the\n\tassociated subprogram.\t(Set_Profile_Convention): New routine.\n\t* sem_ch6.adb (Check_Conformance): Do not compare the conventions\n\tof the two entities directly, use Conventions_Match to account\n\tfor anonymous access-to-subprogram and subprogram types.\n\t(Conventions_Match): New routine.\n\nFrom-SVN: r244778", "tree": {"sha": "35d5b222fa688d7fd75383231d62a5ad3002f578", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35d5b222fa688d7fd75383231d62a5ad3002f578"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d553a695b917d3240fcf8ca5ea9e09ad8dd8a5f3"}], "stats": {"total": 209, "additions": 166, "deletions": 43}, "files": [{"sha": "6d68dc1d7d5273c1e7fd1e6764fd49a8579edaf2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -1,3 +1,18 @@\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch3.adb, exp_spark.adb, exp_attr.adb, sem_ch9.adb, sem_prag.adb,\n+\tsem_util.adb, sem_warn.adb, exp_ch3.adb: Minor reformatting.\n+\n+2017-01-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Subprogram): Ensure that all anonymous\n+\taccess-to-subprogram types inherit the convention of the\n+\tassociated subprogram.\t(Set_Profile_Convention): New routine.\n+\t* sem_ch6.adb (Check_Conformance): Do not compare the conventions\n+\tof the two entities directly, use Conventions_Match to account\n+\tfor anonymous access-to-subprogram and subprogram types.\n+\t(Conventions_Match): New routine.\n+\n 2017-01-23  Claire Dross  <dross@adacore.com>\n \n \t* exp_spark.adb (Expand_SPARK_Attribute_Reference): For attributes"}, {"sha": "e3f3f70ca5e94e2b8962ee17deaa58b5526cf8cf", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -2682,8 +2682,8 @@ package body Exp_Attr is\n                         Res := True;\n                      end if;\n                   end if;\n-               else\n \n+               else\n                   --  For access type, apply access check as needed\n \n                   if Is_Access_Type (Ptyp) then\n@@ -2700,9 +2700,9 @@ package body Exp_Attr is\n                   if not Is_Variable (Pref)\n                     or else Present (Formal_Ent)\n                     or else (Ada_Version < Ada_2005\n-                               and then Is_Aliased_View (Pref))\n+                              and then Is_Aliased_View (Pref))\n                     or else (Ada_Version >= Ada_2005\n-                               and then Is_Constrained_Aliased_View (Pref))\n+                              and then Is_Constrained_Aliased_View (Pref))\n                   then\n                      Res := True;\n "}, {"sha": "788cf7f0da7ead1c0e4992531ef5c60fb2f442fa", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -5620,42 +5620,45 @@ package body Exp_Ch3 is\n          if Is_Array_Type (Typ)\n            and then Is_Modular_Integer_Type (Etype (First_Index (Typ)))\n          then\n-            --  To prevent arithmetic overflow with large values, we\n-            --  raise Storage_Error under the following guard:\n-            --\n-            --  (Arr'Last / 2 - Arr'First / 2) > (Typ'Last - 1) / 2\n-\n-            --  This takes care of the boundary case, but it is preferable\n-            --  to use a smaller limit, because even on 64-bit architectures\n-            --  an array of more than 2 ** 30 bytes is likely to raise\n+            --  To prevent arithmetic overflow with large values, we raise\n+            --  Storage_Error under the following guard:\n+\n+            --    (Arr'Last / 2 - Arr'First / 2) > (2 ** 30)\n+\n+            --  This takes care of the boundary case, but it is preferable to\n+            --  use a smaller limit, because even on 64-bit architectures an\n+            --  array of more than 2 ** 30 bytes is likely to raise\n             --  Storage_Error.\n \n             Index_Typ := Etype (First_Index (Typ));\n+\n             if RM_Size (Index_Typ) = RM_Size (Standard_Long_Long_Integer) then\n                Insert_Action (N,\n-                  Make_Raise_Storage_Error (Loc,\n+                 Make_Raise_Storage_Error (Loc,\n                    Condition =>\n                      Make_Op_Ge (Loc,\n                        Left_Opnd  =>\n                          Make_Op_Subtract (Loc,\n-                           Left_Opnd =>\n+                           Left_Opnd  =>\n                              Make_Op_Divide (Loc,\n-                               Left_Opnd =>\n+                               Left_Opnd  =>\n                                  Make_Attribute_Reference (Loc,\n-                                   Prefix => New_Occurrence_Of (Typ, Loc),\n-                                 Attribute_Name => Name_Last),\n-                                Right_Opnd =>\n-                                  Make_Integer_Literal (Loc, Uint_2)),\n+                                   Prefix         =>\n+                                     New_Occurrence_Of (Typ, Loc),\n+                                   Attribute_Name => Name_Last),\n+                               Right_Opnd =>\n+                                 Make_Integer_Literal (Loc, Uint_2)),\n                            Right_Opnd =>\n                              Make_Op_Divide (Loc,\n                                Left_Opnd =>\n                                  Make_Attribute_Reference (Loc,\n-                                   Prefix => New_Occurrence_Of (Typ, Loc),\n+                                   Prefix         =>\n+                                     New_Occurrence_Of (Typ, Loc),\n                                    Attribute_Name => Name_First),\n-                                Right_Opnd =>\n-                                  Make_Integer_Literal (Loc, Uint_2))),\n+                               Right_Opnd =>\n+                                 Make_Integer_Literal (Loc, Uint_2))),\n                        Right_Opnd =>\n-                         Make_Integer_Literal (Loc,  (Uint_2 ** 30))),\n+                         Make_Integer_Literal (Loc, (Uint_2 ** 30))),\n                    Reason    => SE_Object_Too_Large));\n             end if;\n          end if;"}, {"sha": "bd8989048654f1063c92d912cc33bc42ab3cb396", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -174,7 +174,6 @@ package body Exp_SPARK is\n         or else Attr_Id = Attribute_Aft\n         or else Attr_Id = Attribute_Max_Alignment_For_Allocation\n       then\n-\n          --  If the expected type is Long_Long_Integer, there will be no check\n          --  flag as the compiler assumes attributes always fit in this type.\n          --  Since in SPARK_Mode we do not take Storage_Error into account, we\n@@ -187,12 +186,14 @@ package body Exp_SPARK is\n          begin\n             if Attr_Id = Attribute_Range_Length then\n                Typ := Etype (Prefix (N));\n+\n             elsif Attr_Id = Attribute_Length then\n                Typ := Etype (Prefix (N));\n \n                declare\n-                  Indx   : Node_Id;\n-                  J      : Int;\n+                  Indx : Node_Id;\n+                  J    : Int;\n+\n                begin\n                   if Is_Access_Type (Typ) then\n                      Typ := Designated_Type (Typ);"}, {"sha": "e6b934f3e598afee2def95725d3b8934c7bfdfd0", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -7945,17 +7945,69 @@ package body Freeze is\n    -----------------------\n \n    procedure Freeze_Subprogram (E : Entity_Id) is\n-      Retype : Entity_Id;\n+      procedure Set_Profile_Convention (Subp_Id : Entity_Id);\n+      --  Set the conventions of all anonymous access-to-subprogram formals and\n+      --  result subtype of subprogram Subp_Id to the convention of Subp_Id.\n+\n+      ----------------------------\n+      -- Set_Profile_Convention --\n+      ----------------------------\n+\n+      procedure Set_Profile_Convention (Subp_Id : Entity_Id) is\n+         Conv : constant Convention_Id := Convention (Subp_Id);\n+\n+         procedure Set_Type_Convention (Typ : Entity_Id);\n+         --  Set the convention of anonymous access-to-subprogram type Typ and\n+         --  its designated type to Conv.\n+\n+         -------------------------\n+         -- Set_Type_Convention --\n+         -------------------------\n+\n+         procedure Set_Type_Convention (Typ : Entity_Id) is\n+         begin\n+            --  Set the convention on both the anonymous access-to-subprogram\n+            --  type and the subprogram type it points to because both types\n+            --  participate in conformance-related checks.\n+\n+            if Ekind (Typ) = E_Anonymous_Access_Subprogram_Type then\n+               Set_Convention (Typ, Conv);\n+               Set_Convention (Designated_Type (Typ), Conv);\n+            end if;\n+         end Set_Type_Convention;\n+\n+         --  Local variables\n+\n+         Formal : Entity_Id;\n+\n+      --  Start of processing for Set_Profile_Convention\n+\n+      begin\n+         Formal := First_Formal (Subp_Id);\n+         while Present (Formal) loop\n+            Set_Type_Convention (Etype (Formal));\n+            Next_Formal (Formal);\n+         end loop;\n+\n+         if Ekind (Subp_Id) = E_Function then\n+            Set_Type_Convention (Etype (Subp_Id));\n+         end if;\n+      end Set_Profile_Convention;\n+\n+      --  Local variables\n+\n       F      : Entity_Id;\n+      Retype : Entity_Id;\n+\n+   --  Start of processing for Freeze_Subprogram\n \n    begin\n       --  Subprogram may not have an address clause unless it is imported\n \n       if Present (Address_Clause (E)) then\n          if not Is_Imported (E) then\n             Error_Msg_N\n-              (\"address clause can only be given \" &\n-               \"for imported subprogram\",\n+              (\"address clause can only be given for imported subprogram\",\n                Name (Address_Clause (E)));\n          end if;\n       end if;\n@@ -7986,8 +8038,8 @@ package body Freeze is\n       --  referenced data may change even if the address value does not.\n \n       --  Note that if the programmer gave an explicit Pure_Function pragma,\n-      --  then we believe the programmer, and leave the subprogram Pure.\n-      --  We also suppress this check on run-time files.\n+      --  then we believe the programmer, and leave the subprogram Pure. We\n+      --  also suppress this check on run-time files.\n \n       if Is_Pure (E)\n         and then Is_Subprogram (E)\n@@ -7997,6 +8049,20 @@ package body Freeze is\n          Check_Function_With_Address_Parameter (E);\n       end if;\n \n+      --  Ensure that all anonymous access-to-subprogram types inherit the\n+      --  covention of their related subprogram (RM 6.3.1 13.1/3). This is\n+      --  not done for a defaulted convention Ada because those types also\n+      --  default to Ada. Convention Protected must not be propagated when\n+      --  the subprogram is an entry because this would be illegal. The only\n+      --  way to force convention Protected on these kinds of types is to\n+      --  include keyword \"protected\" in the access definition.\n+\n+      if Convention (E) /= Convention_Ada\n+        and then Convention (E) /= Convention_Protected\n+      then\n+         Set_Profile_Convention (E);\n+      end if;\n+\n       --  For non-foreign convention subprograms, this is where we create\n       --  the extra formals (for accessibility level and constrained bit\n       --  information). We delay this till the freeze point precisely so"}, {"sha": "79127a38ffde09d29b2d0e15feba02cc9c04047e", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -11943,7 +11943,7 @@ package body Sem_Ch3 is\n          else\n             Set_Has_Delayed_Freeze (Full,\n               Has_Delayed_Freeze (Full_Base)\n-                and then (not Is_Frozen (Full_Base)));\n+                and then not Is_Frozen (Full_Base));\n          end if;\n       end if;\n "}, {"sha": "2591aafbb850e063017ac6364da32996055327b1", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -4870,6 +4870,12 @@ package body Sem_Ch6 is\n       --  in the message, and also provides the location for posting the\n       --  message in the absence of a specified Err_Loc location.\n \n+      function Conventions_Match\n+        (Id1 : Entity_Id;\n+         Id2 : Entity_Id) return Boolean;\n+      --  Determine whether the conventions of arbitrary entities Id1 and Id2\n+      --  match.\n+\n       -----------------------\n       -- Conformance_Error --\n       -----------------------\n@@ -4929,6 +4935,35 @@ package body Sem_Ch6 is\n          end if;\n       end Conformance_Error;\n \n+      -----------------------\n+      -- Conventions_Match --\n+      -----------------------\n+\n+      function Conventions_Match\n+        (Id1 : Entity_Id;\n+         Id2 : Entity_Id) return Boolean\n+      is\n+      begin\n+         --  Ignore the conventions of anonymous access-to-subprogram types\n+         --  and subprogram types because these are internally generated and\n+         --  the only way these may receive a convention is if they inherit\n+         --  the convention of a related subprogram.\n+\n+         if Ekind_In (Id1, E_Anonymous_Access_Subprogram_Type,\n+                           E_Subprogram_Type)\n+              or else\n+            Ekind_In (Id2, E_Anonymous_Access_Subprogram_Type,\n+                           E_Subprogram_Type)\n+         then\n+            return True;\n+\n+         --  Otherwise compare the conventions directly\n+\n+         else\n+            return Convention (Id1) = Convention (Id2);\n+         end if;\n+      end Conventions_Match;\n+\n       --  Local Variables\n \n       Old_Type           : constant Entity_Id := Etype (Old_Id);\n@@ -5015,7 +5050,7 @@ package body Sem_Ch6 is\n       --  entity is inherited.\n \n       if Ctype >= Subtype_Conformant then\n-         if Convention (Old_Id) /= Convention (New_Id) then\n+         if not Conventions_Match (Old_Id, New_Id) then\n             if not Is_Frozen (New_Id) then\n                null;\n "}, {"sha": "fe9f4ba621b87bd355b2df279cbab9712fe632f3", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -1154,6 +1154,7 @@ package body Sem_Ch9 is\n \n    procedure Analyze_Delay_Relative (N : Node_Id) is\n       E : constant Node_Id := Expression (N);\n+\n    begin\n       Tasking_Used := True;\n       Check_SPARK_05_Restriction (\"delay statement is not allowed\", N);"}, {"sha": "e30ab13f29e200e76707cfb3c02b9a34ce75d27f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -23950,9 +23950,9 @@ package body Sem_Prag is\n \n             --  Attribute 'Result matches attribute 'Result\n \n-            elsif Is_Attribute_Result (Dep_Item)\n-               and then Is_Attribute_Result (Ref_Item)\n-            then\n+            --  ??? this is incorrect, Ref_Item should be checked as well\n+\n+            elsif Is_Attribute_Result (Dep_Item) then\n                Matched := True;\n \n             --  Abstract states, current instances of concurrent types,\n@@ -29491,13 +29491,14 @@ package body Sem_Prag is\n         and then not ASIS_Mode\n       then\n          if Chars (N) = Name_Precondition\n-          or else Chars (N) = Name_Postcondition\n+           or else Chars (N) = Name_Postcondition\n          then\n-            Error_Msg_N (\" Check_Policy is a non-standard pragma??\", N);\n+            Error_Msg_N (\"Check_Policy is a non-standard pragma??\", N);\n             Error_Msg_N\n-              (\" \\use Assertion_Policy and aspect names Pre/Post\"\n-                & \" for Ada2012 conformance?\", N);\n+              (\"\\use Assertion_Policy and aspect names Pre/Post for \"\n+               & \"Ada2012 conformance?\", N);\n          end if;\n+\n          return;\n       end if;\n "}, {"sha": "694e112a5049db585ad12a064e973c19af25cb86", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -5006,6 +5006,7 @@ package body Sem_Util is\n    procedure Copy_SPARK_Mode_Aspect (From : Node_Id; To : Node_Id) is\n       pragma Assert (not Has_Aspects (To));\n       Asp : Node_Id;\n+\n    begin\n       if Has_Aspects (From) then\n          Asp := Find_Aspect (Defining_Entity (From), Aspect_SPARK_Mode);"}, {"sha": "29bdfd4886f85b8bad9094c59775f2268832ddce", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f991bd8ec959efdc59d8eeafb72a9a8589774a8c/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=f991bd8ec959efdc59d8eeafb72a9a8589774a8c", "patch": "@@ -4336,12 +4336,12 @@ package body Sem_Warn is\n                         --  Give appropriate message, distinguishing between\n                         --  assignment statements and out parameters.\n \n-                        if Nkind_In (Parent (LA), N_Procedure_Call_Statement,\n-                                                  N_Parameter_Association)\n+                        if Nkind_In (Parent (LA), N_Parameter_Association,\n+                                                  N_Procedure_Call_Statement)\n                         then\n                            Error_Msg_NE\n-                             (\"?m?& modified by call, but value might not \"\n-                              & \"be referenced\", LA, Ent);\n+                             (\"?m?& modified by call, but value might not be \"\n+                              & \"referenced\", LA, Ent);\n \n                         else\n                            Error_Msg_NE -- CODEFIX"}]}