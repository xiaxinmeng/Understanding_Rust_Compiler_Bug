{"sha": "6e9a32219ba643ca53c2b68822f0eddbf3280503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU5YTMyMjE5YmE2NDNjYTUzYzJiNjg4MjJmMGVkZGJmMzI4MDUwMw==", "commit": {"author": {"name": "Alexey Neyman", "email": "alex.neyman@auriga.ru", "date": "2005-03-08T13:19:40Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-03-08T13:19:40Z"}, "message": "re PR c/14411 (Request for setjmp/longjmp attributes)\n\n        PR c/14411\n        * calls.c (flags_from_decl_or_type): Handle eturns_twice' attribute.\n        * c-common.c (handle_returns_twice): New function.\n        (c_common_attribute_table): Declare eturns_twice' attribute.\n        * doc/extend.texi: Document eturns_twice' attribute.\n        * tree.h (DECL_IS_RETURNS_TWICE): New macro.\n        (struct tree_decl): Add returns_twice_flag.\n\nFrom-SVN: r96101", "tree": {"sha": "cdc25a73277e939285d67c67cd208d1cd34a0bc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc25a73277e939285d67c67cd208d1cd34a0bc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e9a32219ba643ca53c2b68822f0eddbf3280503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9a32219ba643ca53c2b68822f0eddbf3280503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9a32219ba643ca53c2b68822f0eddbf3280503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9a32219ba643ca53c2b68822f0eddbf3280503/comments", "author": null, "committer": null, "parents": [{"sha": "25d8d27de5150007e26f4cb3397b823af63c5344", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25d8d27de5150007e26f4cb3397b823af63c5344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25d8d27de5150007e26f4cb3397b823af63c5344"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "a89869d96bb050bb375e818bb3a18f0a8f6300f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -1,3 +1,13 @@\n+2005-03-08  Alexey Neyman  <alex.neyman@auriga.ru>\n+\n+\tPR c/14411\n+\t* calls.c (flags_from_decl_or_type): Handle eturns_twice' attribute.\n+\t* c-common.c (handle_returns_twice): New function.\n+\t(c_common_attribute_table): Declare eturns_twice' attribute.\n+\t* doc/extend.texi: Document eturns_twice' attribute.\n+\t* tree.h (DECL_IS_RETURNS_TWICE): New macro.\n+\t(struct tree_decl): Add returns_twice_flag.\n+\n 2005-03-08  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-phiopt.c: Fix a comment typo."}, {"sha": "313af75e6a762f67ea8fdf24d4b1c6370072d477", "filename": "gcc/c-common.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -537,6 +537,7 @@ static tree handle_tls_model_attribute (tree *, tree, tree, int,\n static tree handle_no_instrument_function_attribute (tree *, tree,\n \t\t\t\t\t\t     tree, int, bool *);\n static tree handle_malloc_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_returns_twice_attribute (tree *, tree, tree, int, bool *);\n static tree handle_no_limit_stack_attribute (tree *, tree, tree, int,\n \t\t\t\t\t     bool *);\n static tree handle_pure_attribute (tree *, tree, tree, int, bool *);\n@@ -607,6 +608,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_no_instrument_function_attribute },\n   { \"malloc\",                 0, 0, true,  false, false,\n \t\t\t      handle_malloc_attribute },\n+  { \"returns_twice\",          0, 0, true,  false, false,\n+\t\t\t      handle_returns_twice_attribute },\n   { \"no_stack_limit\",         0, 0, true,  false, false,\n \t\t\t      handle_no_limit_stack_attribute },\n   { \"pure\",                   0, 0, true,  false, false,\n@@ -4787,6 +4790,24 @@ handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"returns_twice\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_returns_twice_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    DECL_IS_RETURNS_TWICE (*node) = 1;\n+  else\n+    {\n+      warning (\"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"no_limit_stack\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "d6032fc78bcac4b1cc34bcce2753d2087c7a3448", "filename": "gcc/calls.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -585,6 +585,10 @@ flags_from_decl_or_type (tree exp)\n       if (DECL_IS_MALLOC (exp))\n \tflags |= ECF_MALLOC;\n \n+      /* The function exp may have the `returns_twice' attribute.  */\n+      if (DECL_IS_RETURNS_TWICE (exp))\n+\tflags |= ECF_RETURNS_TWICE;\n+\n       /* The function exp may have the `pure' attribute.  */\n       if (DECL_IS_PURE (exp))\n \tflags |= ECF_PURE | ECF_LIBCALL_BLOCK;"}, {"sha": "84349f3c373a4be35125d3718b7033bd0b665689", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -1476,6 +1476,7 @@ the enclosing block.\n @cindex function attributes\n @cindex declaring attributes of functions\n @cindex functions that never return\n+@cindex functions that return more than once\n @cindex functions that have no side effects\n @cindex functions in arbitrary sections\n @cindex functions that behave like malloc\n@@ -1495,7 +1496,7 @@ The keyword @code{__attribute__} allows you to specify special\n attributes when making a declaration.  This keyword is followed by an\n attribute specification inside double parentheses.  The following\n attributes are currently defined for functions on all targets:\n-@code{noreturn}, @code{noinline}, @code{always_inline},\n+@code{noreturn}, @code{returns_twice}, @code{noinline}, @code{always_inline},\n @code{pure}, @code{const}, @code{nothrow}, @code{sentinel},\n @code{format}, @code{format_arg}, @code{no_instrument_function},\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n@@ -2089,6 +2090,16 @@ safe since the loaders there save all registers.  (Lazy binding can be\n disabled with the linker or the loader if desired, to avoid the\n problem.)\n \n+@item returns_twice\n+@cindex @code{returns_twice} attribute\n+The @code{returns_twice} attribute tells the compiler that a function may\n+return more than one time.  The compiler will ensure that all registers\n+are dead before calling such a function and will emit a warning about\n+the variables that may be clobbered after the second return from the\n+function.  Examples of such functions are @code{setjmp} and @code{vfork}.\n+The @code{longjmp}-like counterpart of such function, if any, might need\n+to be marked with the @code{noreturn} attribute.\n+\n @item saveall\n @cindex save all registers on the H8/300, H8/300H, and H8S\n Use this attribute on the H8/300, H8/300H, and H8S to indicate that"}, {"sha": "9d3f6f10997b1509306556b06bb64603a0e9bffe", "filename": "gcc/testsuite/gcc.dg/attr-returns_twice-1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns_twice-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns_twice-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-returns_twice-1.c?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-W\" } */\n+\n+int newsetjmp(void) __attribute__((returns_twice));\n+void g(int);\n+\n+int\n+main (void)\n+{\n+  register int reg asm (\"esi\") = 1; /* { dg-warning \"might be clobbered\" \"\" } */\n+\n+  if (!newsetjmp ())\n+    {\n+      reg = 2;\n+      g (reg);\n+    }\n+  else\n+    {\n+      g (reg);\n+    }\n+\n+  return 0;\n+}"}, {"sha": "aba12246f784594142ea2a5c7e44287eed77f0b8", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e9a32219ba643ca53c2b68822f0eddbf3280503/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6e9a32219ba643ca53c2b68822f0eddbf3280503", "patch": "@@ -2176,6 +2176,11 @@ struct tree_binfo GTY (())\n    not an alias.  */\n #define DECL_IS_MALLOC(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.malloc_flag)\n \n+/* Nonzero in a FUNCTION_DECL means this function may return more\n+   than once.  */\n+#define DECL_IS_RETURNS_TWICE(NODE) \\\n+  (FUNCTION_DECL_CHECK (NODE)->decl.returns_twice_flag)\n+\n /* Nonzero in a FUNCTION_DECL means this function should be treated\n    as \"pure\" function (like const function, but may read global memory).  */\n #define DECL_IS_PURE(NODE) (FUNCTION_DECL_CHECK (NODE)->decl.pure_flag)\n@@ -2377,7 +2382,8 @@ struct tree_decl GTY(())\n   unsigned preserve_flag: 1;\n   unsigned gimple_formal_temp : 1;\n   unsigned debug_expr_is_from : 1;\n-  /* 12 unused bits.  */\n+  unsigned returns_twice_flag : 1;\n+  /* 11 unused bits.  */\n \n   union tree_decl_u1 {\n     /* In a FUNCTION_DECL for which DECL_BUILT_IN holds, this is"}]}