{"sha": "5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIyZjc2ZTM2ZDg2MWM4ODFjNjc3MGI0ZjQ3YzFmYWU2YzBjODk2NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-15T09:01:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-15T09:01:19Z"}, "message": "aarch64: Fix bootstrap with old binutils [PR93053]\n\nAs reported in the PR, GCC 10 (and also 9.3.1 but not 9.3.0) fails to build\nwhen using older binutils which lack LSE support, because those instructions\nare used in libgcc.\nThanks to Kyrylo's hint, the following patches (hopefully) allow it to build\neven with older binutils by using .inst directive if LSE support isn't\navailable in the assembler.\n\n2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/93053\n\t* configure.ac (LIBGCC_CHECK_AS_LSE): Add HAVE_AS_LSE checking.\n\t* config/aarch64/lse.S: Include auto-target.h, if HAVE_AS_LSE\n\tis not defined, use just .arch armv8-a.\n\t(B, M, N, OPN): Define.\n\t(COMMENT): New .macro.\n\t(CAS, CASP, SWP, LDOP): Use .inst directive if HAVE_AS_LSE is not\n\tdefined.  Otherwise, move the operands right after the glue? and\n\tcomment out operands where the macros are used.\n\t* configure: Regenerated.\n\t* config.in: Regenerated.", "tree": {"sha": "563a3d7aff7d0c6e027f99e6502f92ff05b83257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/563a3d7aff7d0c6e027f99e6502f92ff05b83257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc9294c3c7c81a6d5e1d4dedf58fea87bbadde6"}], "stats": {"total": 133, "additions": 125, "deletions": 8}, "files": [{"sha": "3426ff8470b0b3fe2d652fc9b43cf344f6aba62c", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "patch": "@@ -1,3 +1,17 @@\n+2020-04-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/93053\n+\t* configure.ac (LIBGCC_CHECK_AS_LSE): Add HAVE_AS_LSE checking.\n+\t* config/aarch64/lse.S: Include auto-target.h, if HAVE_AS_LSE\n+\tis not defined, use just .arch armv8-a.\n+\t(B, M, N, OPN): Define.\n+\t(COMMENT): New .macro.\n+\t(CAS, CASP, SWP, LDOP): Use .inst directive if HAVE_AS_LSE is not\n+\tdefined.  Otherwise, move the operands right after the glue? and\n+\tcomment out operands where the macros are used.\n+\t* configure: Regenerated.\n+\t* config.in: Regenerated.\n+\n 2020-04-07  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libgcc/94513"}, {"sha": "5be5321d2584392bac1ec3af779cd96823212902", "filename": "libgcc/config.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.in?ref=5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "patch": "@@ -10,6 +10,9 @@\n    */\n #undef HAVE_AS_CFI_SECTIONS\n \n+/* Define to 1 if the assembler supports LSE. */\n+#undef HAVE_AS_LSE\n+\n /* Define to 1 if the target assembler supports thread-local storage. */\n #undef HAVE_CC_TLS\n "}, {"sha": "f3ccf5cf54343c682666f5bdcf204c834a73ff33", "filename": "libgcc/config/aarch64/lse.S", "status": "modified", "additions": 49, "deletions": 8, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfig%2Faarch64%2Flse.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfig%2Faarch64%2Flse.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flse.S?ref=5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "patch": "@@ -48,8 +48,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n  * separately to minimize code size.\n  */\n \n+#include \"auto-target.h\"\n+\n /* Tell the assembler to accept LSE instructions.  */\n+#ifdef HAVE_AS_LSE\n \t.arch armv8-a+lse\n+#else\n+\t.arch armv8-a\n+#endif\n \n /* Declare the symbol gating the LSE implementations.  */\n \t.hidden\t__aarch64_have_lse_atomics\n@@ -58,12 +64,19 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if SIZE == 1\n # define S     b\n # define UXT   uxtb\n+# define B     0x00000000\n #elif SIZE == 2\n # define S     h\n # define UXT   uxth\n+# define B     0x40000000\n #elif SIZE == 4 || SIZE == 8 || SIZE == 16\n # define S\n # define UXT   mov\n+# if SIZE == 4\n+#  define B    0x80000000\n+# elif SIZE == 8\n+#  define B    0xc0000000\n+# endif\n #else\n # error\n #endif\n@@ -72,18 +85,26 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n # define SUFF  _relax\n # define A\n # define L\n+# define M     0x000000\n+# define N     0x000000\n #elif MODEL == 2\n # define SUFF  _acq\n # define A     a\n # define L\n+# define M     0x400000\n+# define N     0x800000\n #elif MODEL == 3\n # define SUFF  _rel\n # define A\n # define L     l\n+# define M     0x008000\n+# define N     0x400000\n #elif MODEL == 4\n # define SUFF  _acq_rel\n # define A     a\n # define L     l\n+# define M     0x408000\n+# define N     0xc00000\n #else\n # error\n #endif\n@@ -144,9 +165,13 @@ STARTFN\tNAME(cas)\n \tJUMP_IF_NOT_LSE\t8f\n \n #if SIZE < 16\n-#define CAS\tglue4(cas, A, L, S)\n+#ifdef HAVE_AS_LSE\n+# define CAS\tglue4(cas, A, L, S)\ts(0), s(1), [x2]\n+#else\n+# define CAS\t.inst 0x08a07c41 + B + M\n+#endif\n \n-\tCAS\t\ts(0), s(1), [x2]\n+\tCAS\t\t/* s(0), s(1), [x2] */\n \tret\n \n 8:\tUXT\t\ts(tmp0), s(0)\n@@ -160,9 +185,13 @@ STARTFN\tNAME(cas)\n #else\n #define LDXP\tglue3(ld, A, xp)\n #define STXP\tglue3(st, L, xp)\n-#define CASP\tglue3(casp, A, L)\n+#ifdef HAVE_AS_LSE\n+# define CASP\tglue3(casp, A, L)\tx0, x1, x2, x3, [x4]\n+#else\n+# define CASP\t.inst 0x48207c82 + M\n+#endif\n \n-\tCASP\t\tx0, x1, x2, x3, [x4]\n+\tCASP\t\t/* x0, x1, x2, x3, [x4] */\n \tret\n \n 8:\tmov\t\tx(tmp0), x0\n@@ -181,12 +210,16 @@ ENDFN\tNAME(cas)\n #endif\n \n #ifdef L_swp\n-#define SWP\tglue4(swp, A, L, S)\n+#ifdef HAVE_AS_LSE\n+# define SWP\tglue4(swp, A, L, S)\ts(0), s(0), [x1]\n+#else\n+# define SWP\t.inst 0x38208020 + B + N\n+#endif\n \n STARTFN\tNAME(swp)\n \tJUMP_IF_NOT_LSE\t8f\n \n-\tSWP\t\ts(0), s(0), [x1]\n+\tSWP\t\t/* s(0), s(0), [x1] */\n \tret\n \n 8:\tmov\t\ts(tmp0), s(0)\n@@ -204,24 +237,32 @@ ENDFN\tNAME(swp)\n #ifdef L_ldadd\n #define LDNM\tldadd\n #define OP\tadd\n+#define OPN\t0x0000\n #elif defined(L_ldclr)\n #define LDNM\tldclr\n #define OP\tbic\n+#define OPN\t0x1000\n #elif defined(L_ldeor)\n #define LDNM\tldeor\n #define OP\teor\n+#define OPN\t0x2000\n #elif defined(L_ldset)\n #define LDNM\tldset\n #define OP\torr\n+#define OPN\t0x3000\n #else\n #error\n #endif\n-#define LDOP\tglue4(LDNM, A, L, S)\n+#ifdef HAVE_AS_LSE\n+# define LDOP\tglue4(LDNM, A, L, S)\ts(0), s(0), [x1]\n+#else\n+# define LDOP\t.inst 0x38200020 + OPN + B + N\n+#endif\n \n STARTFN\tNAME(LDNM)\n \tJUMP_IF_NOT_LSE\t8f\n \n-\tLDOP\t\ts(0), s(0), [x1]\n+\tLDOP\t\t/* s(0), s(0), [x1] */\n \tret\n \n 8:\tmov\t\ts(tmp0), s(0)"}, {"sha": "26bf75789e0d999fd5edbdc6e93d356474b298be", "filename": "libgcc/configure", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "patch": "@@ -5530,6 +5530,46 @@ $as_echo \"#define HAVE_AS_AVX 1\" >>confdefs.h\n   ;;\n esac\n \n+\n+\n+case \"${target}\" in\n+aarch64*-*-*)\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the assembler supports LSE\" >&5\n+$as_echo_n \"checking if the assembler supports LSE... \" >&6; }\n+if ${libgcc_cv_as_lse+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\t\t\tasm(\".arch armv8-a+lse\\n\\tcas w0, w1, [x2]\");\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  libgcc_cv_as_lse=yes\n+else\n+  libgcc_cv_as_lse=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_as_lse\" >&5\n+$as_echo \"$libgcc_cv_as_lse\" >&6; }\n+  if test x$libgcc_cv_as_lse = xyes; then\n+\n+$as_echo \"#define HAVE_AS_LSE 1\" >>confdefs.h\n+\n+  fi\n+  ;;\n+esac\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for init priority support\" >&5\n $as_echo_n \"checking for init priority support... \" >&6; }\n if ${libgcc_cv_init_priority+:} false; then :"}, {"sha": "bff6e54f22e019f4703f3f7dec9b49b581d317c3", "filename": "libgcc/configure.ac", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b2f76e36d861c881c6770b4f47c1fae6c0c8965/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=5b2f76e36d861c881c6770b4f47c1fae6c0c8965", "patch": "@@ -599,6 +599,25 @@ i[[34567]]86-*-* | x86_64-*-*)\n esac])\n LIBGCC_CHECK_AS_AVX\n \n+dnl Check if as supports LSE instructions.\n+AC_DEFUN([LIBGCC_CHECK_AS_LSE], [\n+case \"${target}\" in\n+aarch64*-*-*)\n+  AC_CACHE_CHECK([if the assembler supports LSE], libgcc_cv_as_lse, [\n+    AC_TRY_COMPILE([],\n+changequote(,)dnl\n+\t\t\tasm(\".arch armv8-a+lse\\n\\tcas w0, w1, [x2]\");\n+changequote([,])dnl\n+\t\t       ,\n+\t\t   [libgcc_cv_as_lse=yes], [libgcc_cv_as_lse=no])\n+  ])\n+  if test x$libgcc_cv_as_lse = xyes; then\n+    AC_DEFINE(HAVE_AS_LSE, 1, [Define to 1 if the assembler supports LSE.])\n+  fi\n+  ;;\n+esac])\n+LIBGCC_CHECK_AS_LSE\n+\n dnl Check if as supports RTM instructions.\n AC_CACHE_CHECK(for init priority support, libgcc_cv_init_priority, [\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM(,"}]}