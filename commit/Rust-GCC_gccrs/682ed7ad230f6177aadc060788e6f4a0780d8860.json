{"sha": "682ed7ad230f6177aadc060788e6f4a0780d8860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyZWQ3YWQyMzBmNjE3N2FhZGMwNjA3ODhlNmY0YTA3ODBkODg2MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-03T08:51:01Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-03T08:51:01Z"}, "message": "x86: Optimize aes<aeswideklvariant>u8 a bit, fix whitespace\n\n2020-11-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\n\t* config/i386/sse.md (aes<aeswideklvariant>u8):\n\tDo not use xmm_regs array.  Fix whitespace.", "tree": {"sha": "6ed691d465af9c926b5af03330386667e4d34794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ed691d465af9c926b5af03330386667e4d34794"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/682ed7ad230f6177aadc060788e6f4a0780d8860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682ed7ad230f6177aadc060788e6f4a0780d8860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682ed7ad230f6177aadc060788e6f4a0780d8860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682ed7ad230f6177aadc060788e6f4a0780d8860/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3f0d218c2cac632cebb913780325a1dff9e157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db3f0d218c2cac632cebb913780325a1dff9e157", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db3f0d218c2cac632cebb913780325a1dff9e157"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "b153a87fb98d0c063614887d467671c985f6827e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 35, "deletions": 32, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682ed7ad230f6177aadc060788e6f4a0780d8860/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682ed7ad230f6177aadc060788e6f4a0780d8860/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=682ed7ad230f6177aadc060788e6f4a0780d8860", "patch": "@@ -23333,10 +23333,10 @@\n ;; KEYLOCKER\n (define_insn \"loadiwkey\"\n   [(unspec_volatile:V2DI [(match_operand:V2DI 0 \"register_operand\" \"v\")\n-                          (match_operand:V2DI 1 \"register_operand\" \"v\")\n-                          (match_operand:V2DI 2 \"register_operand\" \"Yz\")\n-                          (match_operand:SI   3 \"register_operand\" \"a\")]\n-                         UNSPECV_LOADIWKEY)\n+\t\t\t  (match_operand:V2DI 1 \"register_operand\" \"v\")\n+\t\t\t  (match_operand:V2DI 2 \"register_operand\" \"Yz\")\n+\t\t\t  (match_operand:SI   3 \"register_operand\" \"a\")]\n+\t\t\t UNSPECV_LOADIWKEY)\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_KL\"\n   \"loadiwkey\\t{%0, %1|%1, %0}\"\n@@ -23348,7 +23348,7 @@\n \t  (unspec_volatile:SI\n \t    [(match_operand:SI   1 \"register_operand\")\n \t     (reg:V2DI XMM0_REG)]\n-            UNSPECV_ENCODEKEY128U32))])]\n+\t    UNSPECV_ENCODEKEY128U32))])]\n   \"TARGET_KL\"\n {\n   rtx xmm_regs[7];\n@@ -23392,7 +23392,7 @@\n \t  (unspec_volatile:SI\n \t    [(match_operand:SI   1 \"register_operand\" \"r\")\n \t     (reg:V2DI XMM0_REG)]\n-            UNSPECV_ENCODEKEY128U32))])]\n+\t    UNSPECV_ENCODEKEY128U32))])]\n   \"TARGET_KL\"\n   \"encodekey128\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n@@ -23455,37 +23455,42 @@\n   \"encodekey256\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"other\")])\n \n-(define_int_iterator AESDECENCKL [UNSPECV_AESDEC128KLU8  UNSPECV_AESDEC256KLU8\n-                                  UNSPECV_AESENC128KLU8  UNSPECV_AESENC256KLU8])\n+(define_int_iterator AESDECENCKL\n+  [UNSPECV_AESDEC128KLU8  UNSPECV_AESDEC256KLU8\n+   UNSPECV_AESENC128KLU8  UNSPECV_AESENC256KLU8])\n \n-(define_int_attr aesklvariant [(UNSPECV_AESDEC128KLU8 \"dec128kl\")\n-                               (UNSPECV_AESDEC256KLU8 \"dec256kl\")\n-                               (UNSPECV_AESENC128KLU8 \"enc128kl\")\n-                               (UNSPECV_AESENC256KLU8 \"enc256kl\")])\n+(define_int_attr aesklvariant\n+  [(UNSPECV_AESDEC128KLU8 \"dec128kl\")\n+   (UNSPECV_AESDEC256KLU8 \"dec256kl\")\n+   (UNSPECV_AESENC128KLU8 \"enc128kl\")\n+   (UNSPECV_AESENC256KLU8 \"enc256kl\")])\n \n (define_insn \"aes<aesklvariant>u8\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n-        (unspec_volatile:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n-                               (match_operand:BLK   2 \"memory_operand\" \"m\")]\n-                              AESDECENCKL))\n+\t(unspec_volatile:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:BLK   2 \"memory_operand\" \"m\")]\n+\t\t\t      AESDECENCKL))\n    (set (reg:CCZ FLAGS_REG)\n-        (unspec_volatile:CCZ [(match_dup 1) (match_dup 2)] AESDECENCKL))]\n+\t(unspec_volatile:CCZ [(match_dup 1) (match_dup 2)] AESDECENCKL))]\n   \"TARGET_KL\"\n   \"aes<aesklvariant>\\t{%2, %0|%0, %2}\"\n   [(set_attr \"type\" \"other\")])\n \n-(define_int_iterator AESDECENCWIDEKL [UNSPECV_AESDECWIDE128KLU8  UNSPECV_AESDECWIDE256KLU8\n-                                      UNSPECV_AESENCWIDE128KLU8  UNSPECV_AESENCWIDE256KLU8])\n+(define_int_iterator AESDECENCWIDEKL\n+  [UNSPECV_AESDECWIDE128KLU8  UNSPECV_AESDECWIDE256KLU8\n+   UNSPECV_AESENCWIDE128KLU8  UNSPECV_AESENCWIDE256KLU8])\n \n-(define_int_attr aeswideklvariant [(UNSPECV_AESDECWIDE128KLU8 \"decwide128kl\")\n-                                   (UNSPECV_AESDECWIDE256KLU8 \"decwide256kl\")\n-                                   (UNSPECV_AESENCWIDE128KLU8 \"encwide128kl\")\n-                                   (UNSPECV_AESENCWIDE256KLU8 \"encwide256kl\")])\n+(define_int_attr aeswideklvariant\n+  [(UNSPECV_AESDECWIDE128KLU8 \"decwide128kl\")\n+   (UNSPECV_AESDECWIDE256KLU8 \"decwide256kl\")\n+   (UNSPECV_AESENCWIDE128KLU8 \"encwide128kl\")\n+   (UNSPECV_AESENCWIDE256KLU8 \"encwide256kl\")])\n \n-(define_int_attr AESWIDEKLVARIANT [(UNSPECV_AESDECWIDE128KLU8 \"AESDECWIDE128KLU8\")\n-                                   (UNSPECV_AESDECWIDE256KLU8 \"AESDECWIDE256KLU8\")\n-                                   (UNSPECV_AESENCWIDE128KLU8 \"AESENCWIDE128KLU8\")\n-                                   (UNSPECV_AESENCWIDE256KLU8 \"AESENCWIDE256KLU8\")])\n+(define_int_attr AESWIDEKLVARIANT\n+  [(UNSPECV_AESDECWIDE128KLU8 \"AESDECWIDE128KLU8\")\n+   (UNSPECV_AESDECWIDE256KLU8 \"AESDECWIDE256KLU8\")\n+   (UNSPECV_AESENCWIDE128KLU8 \"AESENCWIDE128KLU8\")\n+   (UNSPECV_AESENCWIDE256KLU8 \"AESENCWIDE256KLU8\")])\n \n (define_expand \"aes<aeswideklvariant>u8\"\n   [(match_par_dup 1\n@@ -23495,16 +23500,12 @@\n \t    AESDECENCWIDEKL))])]\n   \"TARGET_WIDEKL\"\n {\n-  rtx xmm_regs[8];\n   rtx tmp_unspec;\n   unsigned i;\n \n   /* parallel rtx for widekl predicate */\n   operands[1] = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (9));\n \n-  for (i = 0; i < 8; i++)\n-    xmm_regs[i] = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n-\n   tmp_unspec\n     = gen_rtx_UNSPEC_VOLATILE (CCZmode,\n \t\t\t       gen_rtvec (1, operands[0]),\n@@ -23516,12 +23517,14 @@\n \n   for (i = 0; i < 8; i++)\n     {\n+      rtx xmm_reg = gen_rtx_REG (V2DImode, GET_SSE_REGNO (i));\n+\n       tmp_unspec\n \t= gen_rtx_UNSPEC_VOLATILE (V2DImode,\n-\t\t\t\t   gen_rtvec (1, xmm_regs[i]),\n+\t\t\t\t   gen_rtvec (1, xmm_reg),\n \t\t\t\t   UNSPECV_<AESWIDEKLVARIANT>);\n       XVECEXP (operands[1], 0, i + 1)\n-\t= gen_rtx_SET (xmm_regs[i], tmp_unspec);\n+\t= gen_rtx_SET (xmm_reg, tmp_unspec);\n     }\n })\n "}]}