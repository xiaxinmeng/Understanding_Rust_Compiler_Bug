{"sha": "46aea93218b08e77f247b597c3dc779e294b77cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDZhZWE5MzIxOGIwOGU3N2YyNDdiNTk3YzNkYzc3OWUyOTRiNzdjYg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-12T17:45:15Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-08-12T17:45:15Z"}, "message": "(sched_analyze_insn): Handle USE before a JUMP_INSN just\nlike a USE before a CALL_INSN.\n\nFrom-SVN: r5141", "tree": {"sha": "c29d6fe9b57ec44202e4ff2b649a40dd810d53fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c29d6fe9b57ec44202e4ff2b649a40dd810d53fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46aea93218b08e77f247b597c3dc779e294b77cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aea93218b08e77f247b597c3dc779e294b77cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46aea93218b08e77f247b597c3dc779e294b77cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46aea93218b08e77f247b597c3dc779e294b77cb/comments", "author": null, "committer": null, "parents": [{"sha": "2e7ac77cb9952913586e6b0e81776710b10e69f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e7ac77cb9952913586e6b0e81776710b10e69f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e7ac77cb9952913586e6b0e81776710b10e69f5"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "c02d349192c56c9896a784a15afa4872096329db", "filename": "gcc/sched.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46aea93218b08e77f247b597c3dc779e294b77cb/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46aea93218b08e77f247b597c3dc779e294b77cb/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=46aea93218b08e77f247b597c3dc779e294b77cb", "patch": "@@ -1963,14 +1963,21 @@ sched_analyze_insn (x, insn)\n   else\n     sched_analyze_2 (x, insn);\n \n-  /* Handle function calls.  */\n-  if (GET_CODE (insn) == CALL_INSN)\n+  /* Handle function calls and function returns created by the epilogue\n+     threading code.  */\n+  if (GET_CODE (insn) == CALL_INSN || GET_CODE (insn) == JUMP_INSN)\n     {\n       rtx dep_insn;\n       rtx prev_dep_insn;\n \n       /* When scheduling instructions, we make sure calls don't lose their\n-\t accompanying USE insns by depending them one on another in order.   */\n+\t accompanying USE insns by depending them one on another in order.\n+\n+\t Also, we must do the same thing for returns created by the epilogue\n+\t threading code.  Note this code works only in this special case,\n+\t because other passes make no guarantee that they will never emit\n+\t an instruction between a USE and a RETURN.  There is such a guarantee\n+\t for USE instructions immediately before a call.  */\n \n       prev_dep_insn = insn;\n       dep_insn = PREV_INSN (insn);"}]}