{"sha": "dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFkNDgyZTZlZTdjODRlOTc5M2U3MjFjMGVjMWM3ZGU2ZTJjYTVkYw==", "commit": {"author": {"name": "Dale Johannesen", "email": "dalej@apple.com", "date": "2002-10-07T17:55:46Z"}, "committer": {"name": "Dale Johannesen", "email": "dalej@gcc.gnu.org", "date": "2002-10-07T17:55:46Z"}, "message": "Permit doloop treatment for preconditioned loops.\n\nFrom-SVN: r57902", "tree": {"sha": "928bfc28c103c04292730977d5b0cbfe5430a895", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/928bfc28c103c04292730977d5b0cbfe5430a895"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/comments", "author": null, "committer": null, "parents": [{"sha": "0c59cbfaf61bce02e64caf4237f1d536a34caa8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c59cbfaf61bce02e64caf4237f1d536a34caa8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c59cbfaf61bce02e64caf4237f1d536a34caa8f"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "adffbeb11cc9b4fa946a7139e3c0cb3f159dc0c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "patch": "@@ -1,3 +1,9 @@\n+2002-10-07  Dale Johannesen  <dalej@apple.com>\n+\t* rtl.h:  Add NOTE_PRECONDITIONED.\n+\t* unroll.c:  Set it.\n+\t* loop.c:  Set loop_info->preconditioned from it.\n+\t* doloop.c:  Permit doloop treatment when loop_info->preconditoned.\n+\n 2002-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/i960/i960.c (i960_setup_incoming_varargs): Create a"}, {"sha": "1f7d47ae035ce51a81123a288017bbdbedbe3bd5", "filename": "gcc/doloop.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Fdoloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Fdoloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoloop.c?ref=dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "patch": "@@ -339,6 +339,7 @@ doloop_valid_p (loop, jump_insn)\n      condition at run-time and have an additional jump around the loop\n      to ensure an infinite loop.  */\n   if (loop_info->comparison_code == NE\n+      && !loop_info->preconditioned\n       && INTVAL (loop_info->increment) != -1\n       && INTVAL (loop_info->increment) != 1)\n     {"}, {"sha": "5db9677ffeb9bfd4720ec7df917938628b627f7a", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "patch": "@@ -2475,7 +2475,8 @@ prescan_loop (loop)\n   loop_info->first_loop_store_insn = NULL_RTX;\n   loop_info->mems_idx = 0;\n   loop_info->num_mem_sets = 0;\n-\n+  /* If loop opts run twice, this was set on 1st pass for 2nd. */\n+  loop_info->preconditioned = NOTE_PRECONDITIONED (end);\n \n   for (insn = start; insn && GET_CODE (insn) != CODE_LABEL;\n        insn = PREV_INSN (insn))"}, {"sha": "9aada8286e5bf6885c2224d81823f43f4696f9b9", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "patch": "@@ -787,6 +787,7 @@ extern const char * const reg_note_name[];\n #define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 4, NOTE)\n #define NOTE_EXPECTED_VALUE(INSN) XCEXP (INSN, 4, NOTE)\n #define NOTE_PREDICTION(INSN)   XCINT (INSN, 4, NOTE)\n+#define NOTE_PRECONDITIONED(INSN)   XCINT (INSN, 4, NOTE)\n \n /* In a NOTE that is a line number, this is the line number.\n    Other kinds of NOTEs are identified by negative numbers here.  */"}, {"sha": "fa04253e0ed1a966d26b63fb0c06752ef61d3a74", "filename": "gcc/unroll.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=dad482e6ee7c84e9793e721c0ec1c7de6e2ca5dc", "patch": "@@ -1136,6 +1136,9 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n   /* And whether the loop has been preconditioned.  */\n   loop_info->preconditioned = loop_preconditioned;\n \n+  /* Remember whether it was preconditioned for the second loop pass. */\n+  NOTE_PRECONDITIONED (loop->end) = loop_preconditioned;\n+\n   /* For each biv and giv, determine whether it can be safely split into\n      a different variable for each unrolled copy of the loop body.\n      We precalculate and save this info here, since computing it is"}]}