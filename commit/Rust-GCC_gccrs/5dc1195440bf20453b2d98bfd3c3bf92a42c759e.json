{"sha": "5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjMTE5NTQ0MGJmMjA0NTNiMmQ5OGJmZDNjM2JmOTJhNDJjNzU5ZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-04-24T16:29:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-04-24T16:29:40Z"}, "message": "re PR c++/35758 (vector_size attribute lost in function arguments for templates)\n\n\tPR c++/35758\n\t* c-common.c (handle_vector_size_attribute): Call\n\tlang_hooks.types.reconstruct_complex_type instead of\n\treconstruct_complex_type.\n\t* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute): Likewise.\n\t* config/spu/spu.c (spu_handle_vector_attribute): Likewise.\n\t* langhooks.h (struct lang_hooks_for_types): Add\n\treconstruct_complex_type hook.\n\t* langhooks-def.h (LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE): Define.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add it.\n\n\t* cp-tree.h (cp_reconstruct_complex_type): New prototype.\n\t* cp-objcp-common.h (LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE): Define.\n\t* decl2.c (is_late_template_attribute): Only make vector_size\n\tlate tmpl attribute if argument is type or value dependent.\n\t(cp_reconstruct_complex_type): New function.\n\n\t* g++.dg/ext/vector14.C: New test.\n\nFrom-SVN: r134639", "tree": {"sha": "2b27f4fd6f66ac33d3f929db98431f16e8e12dd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b27f4fd6f66ac33d3f929db98431f16e8e12dd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f88c6630defca9ff60cc1383837a4dfd4c1b317", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f88c6630defca9ff60cc1383837a4dfd4c1b317", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f88c6630defca9ff60cc1383837a4dfd4c1b317"}], "stats": {"total": 122, "additions": 114, "deletions": 8}, "files": [{"sha": "09609f23e4906d55b713a5def178a76c5cd87c75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -1,3 +1,16 @@\n+2008-04-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/35758\n+\t* c-common.c (handle_vector_size_attribute): Call\n+\tlang_hooks.types.reconstruct_complex_type instead of\n+\treconstruct_complex_type.\n+\t* config/rs6000/rs6000.c (rs6000_handle_altivec_attribute): Likewise.\n+\t* config/spu/spu.c (spu_handle_vector_attribute): Likewise.\n+\t* langhooks.h (struct lang_hooks_for_types): Add\n+\treconstruct_complex_type hook.\n+\t* langhooks-def.h (LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE): Define.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Add it.\n+\n 2008-04-24  Richard Guenther  <rguenther@suse.de>\n \n \t* c-common.h (check_builtin_function_arguments): Declare."}, {"sha": "d110b32b47078b83e1a36d8beffd93aa194148d0", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -6170,7 +6170,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   new_type = build_vector_type (type, nunits);\n \n   /* Build back pointers if needed.  */\n-  *node = reconstruct_complex_type (*node, new_type);\n+  *node = lang_hooks.types.reconstruct_complex_type (*node, new_type);\n \n   return NULL_TREE;\n }"}, {"sha": "8811ea53c763603bcacb1f6cc85505bac5b57136", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -19822,7 +19822,7 @@ rs6000_handle_altivec_attribute (tree *node,\n   *no_add_attrs = true;  /* No need to hang on to the attribute.  */\n \n   if (result)\n-    *node = reconstruct_complex_type (*node, result);\n+    *node = lang_hooks.types.reconstruct_complex_type (*node, result);\n \n   return NULL_TREE;\n }"}, {"sha": "d37f27bc1793c5ee5bc02975cad39d6e3921779a", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -3022,7 +3022,7 @@ spu_handle_vector_attribute (tree * node, tree name,\n   if (!result)\n     warning (0, \"`%s' attribute ignored\", IDENTIFIER_POINTER (name));\n   else\n-    *node = reconstruct_complex_type (*node, result);\n+    *node = lang_hooks.types.reconstruct_complex_type (*node, result);\n \n   return NULL_TREE;\n }"}, {"sha": "9c116c31ef269765c5539d0c6a5f5daa14d48d1f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -1,3 +1,12 @@\n+2008-04-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/35758\n+\t* cp-tree.h (cp_reconstruct_complex_type): New prototype.\n+\t* cp-objcp-common.h (LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE): Define.\n+\t* decl2.c (is_late_template_attribute): Only make vector_size\n+\tlate tmpl attribute if argument is type or value dependent.\n+\t(cp_reconstruct_complex_type): New function.\n+\n 2008-04-24  Richard Guenther  <rguenther@suse.de>\n \n \t* typeck.c (cp_build_function_call): Call"}, {"sha": "b2b8405fccdb6d74b20ade50903de2b5d7975c05", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -125,6 +125,8 @@ extern tree objcp_tsubst_copy_and_build (tree, tree, tsubst_flags_t,\n #define LANG_HOOKS_TYPE_PROMOTES_TO cxx_type_promotes_to\n #undef LANG_HOOKS_REGISTER_BUILTIN_TYPE\n #define LANG_HOOKS_REGISTER_BUILTIN_TYPE c_register_builtin_type\n+#undef LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE\n+#define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE cp_reconstruct_complex_type\n #undef LANG_HOOKS_TO_TARGET_CHARSET\n #define LANG_HOOKS_TO_TARGET_CHARSET c_common_to_target_charset\n #undef LANG_HOOKS_GIMPLIFY_EXPR"}, {"sha": "8d223bc6f27cfb257a88e911d074f5e8c937e4ff", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -4282,6 +4282,7 @@ extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t       tree, bool, tree, tree);\n extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,\n \t\t\t  tree);\n+extern tree cp_reconstruct_complex_type\t\t(tree, tree);\n extern void cplus_decl_attributes\t\t(tree *, tree, int);\n extern void finish_anon_union\t\t\t(tree);\n extern void cp_write_global_declarations\t(void);"}, {"sha": "41af32faec406109e8d1d0f0d2dbb8950790d396", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 58, "deletions": 5, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -991,11 +991,8 @@ is_late_template_attribute (tree attr, tree decl)\n     /* Unknown attribute.  */\n     return false;\n \n-  /* Attribute vector_size handling wants to dive into the back end array\n-     building code, which breaks during template processing.  */\n-  if (is_attribute_p (\"vector_size\", name)\n-      /* Attribute weak handling wants to write out assembly right away.  */\n-      || is_attribute_p (\"weak\", name))\n+  /* Attribute weak handling wants to write out assembly right away.  */\n+  if (is_attribute_p (\"weak\", name))\n     return true;\n \n   /* If any of the arguments are dependent expressions, we can't evaluate\n@@ -1120,6 +1117,62 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n     }\n }\n \n+/* Like reconstruct_complex_type, but handle also template trees.  */\n+\n+tree\n+cp_reconstruct_complex_type (tree type, tree bottom)\n+{\n+  tree inner, outer;\n+\n+  if (TREE_CODE (type) == POINTER_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_pointer_type_for_mode (inner, TYPE_MODE (type),\n+\t\t\t\t\t   TYPE_REF_CAN_ALIAS_ALL (type));\n+    }\n+  else if (TREE_CODE (type) == REFERENCE_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_reference_type_for_mode (inner, TYPE_MODE (type),\n+\t\t\t\t\t     TYPE_REF_CAN_ALIAS_ALL (type));\n+    }\n+  else if (TREE_CODE (type) == ARRAY_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_cplus_array_type (inner, TYPE_DOMAIN (type));\n+      /* Don't call cp_build_qualified_type on ARRAY_TYPEs, the\n+\t element type qualification will be handled by the recursive\n+\t cp_reconstruct_complex_type call and cp_build_qualified_type\n+\t for ARRAY_TYPEs changes the element type.  */\n+      return outer;\n+    }\n+  else if (TREE_CODE (type) == FUNCTION_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_function_type (inner, TYPE_ARG_TYPES (type));\n+    }\n+  else if (TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      /* The build_method_type_directly() routine prepends 'this' to argument list,\n+\t so we must compensate by getting rid of it.  */\n+      outer\n+\t= build_method_type_directly\n+\t    (TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (type))),\n+\t     inner,\n+\t     TREE_CHAIN (TYPE_ARG_TYPES (type)));\n+    }\n+  else if (TREE_CODE (type) == OFFSET_TYPE)\n+    {\n+      inner = cp_reconstruct_complex_type (TREE_TYPE (type), bottom);\n+      outer = build_offset_type (TYPE_OFFSET_BASETYPE (type), inner);\n+    }\n+  else\n+    return bottom;\n+\n+  return cp_build_qualified_type (outer, TYPE_QUALS (type));\n+}\n+\n /* Like decl_attributes, but handle C++ complexity.  */\n \n void"}, {"sha": "aae46406515b9bcd7b27214df11e6c8e425dc6fd", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -167,6 +167,7 @@ extern tree lhd_make_node (enum tree_code);\n   lhd_omp_firstprivatize_type_sizes\n #define LANG_HOOKS_TYPE_HASH_EQ\t\tNULL\n #define LANG_HOOKS_GET_ARRAY_DESCR_INFO\tNULL\n+#define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE reconstruct_complex_type\n #define LANG_HOOKS_HASH_TYPES\t\ttrue\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n@@ -182,6 +183,7 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_OMP_FIRSTPRIVATIZE_TYPE_SIZES, \\\n   LANG_HOOKS_TYPE_HASH_EQ, \\\n   LANG_HOOKS_GET_ARRAY_DESCR_INFO, \\\n+  LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE, \\\n   LANG_HOOKS_HASH_TYPES \\\n }\n "}, {"sha": "6a54b01f060362911358c51923e34942f9e8af37", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -130,6 +130,12 @@ struct lang_hooks_for_types\n      for the debugger about the array bounds, strides, etc.  */\n   bool (*get_array_descr_info) (const_tree, struct array_descr_info *);\n \n+  /* If we requested a pointer to a vector, build up the pointers that\n+     we stripped off while looking for the inner type.  Similarly for\n+     return values from functions.  The argument TYPE is the top of the\n+     chain, and BOTTOM is the new type which we will point to.  */\n+  tree (*reconstruct_complex_type) (tree, tree);\n+\n   /* Nonzero if types that are identical are to be hashed so that only\n      one copy is kept.  If a language requires unique types for each\n      user-specified type, such as Ada, this should be set to TRUE.  */"}, {"sha": "002d24a16ad6b8c154f3649a1d18440472fa844e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -2,6 +2,9 @@\n \n \t* gcc.dg/pr36017.c: Run on all targets, remove -lm from dg-options.\n \n+\tPR c++/35758\n+\t* g++.dg/ext/vector14.C: New test.\n+\n 2008-04-24  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/builtin-constant_p-1.c: New testcase."}, {"sha": "93f9e0e7820c887839c606096afc0b7e230994aa", "filename": "gcc/testsuite/g++.dg/ext/vector14.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc1195440bf20453b2d98bfd3c3bf92a42c759e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvector14.C?ref=5dc1195440bf20453b2d98bfd3c3bf92a42c759e", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/35758\n+// { dg-do compile }\n+\n+#define vector __attribute__((vector_size(16)))\n+\n+template<int N> vector signed int foo (vector float value) {}\n+\n+template<int> void foo (float) {}\n+\n+int\n+main ()\n+{\n+  vector float v;\n+  float f;\n+  foo<1> (v);\n+  foo<1> (f);\n+}"}]}