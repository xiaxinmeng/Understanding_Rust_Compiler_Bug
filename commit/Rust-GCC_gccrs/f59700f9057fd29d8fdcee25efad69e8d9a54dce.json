{"sha": "f59700f9057fd29d8fdcee25efad69e8d9a54dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU5NzAwZjkwNTdmZDI5ZDhmZGNlZTI1ZWZhZDY5ZThkOWE1NGRjZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-05-22T20:31:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-05-22T20:31:46Z"}, "message": "expr.c (expand_expr, [...]): Put into memory if constant and EXPAND_CONST_ADDRESS, not just EXPAND_INITIALIZER.\n\n\t* expr.c (expand_expr, case CONSTRUCTOR): Put into memory if\n\tconstant and EXPAND_CONST_ADDRESS, not just EXPAND_INITIALIZER.\n\nFrom-SVN: r67098", "tree": {"sha": "ae7435c5be3edd410a24ef8dc791b36d82fccc66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae7435c5be3edd410a24ef8dc791b36d82fccc66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f59700f9057fd29d8fdcee25efad69e8d9a54dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59700f9057fd29d8fdcee25efad69e8d9a54dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f59700f9057fd29d8fdcee25efad69e8d9a54dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f59700f9057fd29d8fdcee25efad69e8d9a54dce/comments", "author": null, "committer": null, "parents": [{"sha": "94e01adf1ca0942e6066e648397f47aca0c58509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e01adf1ca0942e6066e648397f47aca0c58509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e01adf1ca0942e6066e648397f47aca0c58509"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "d04de88607042192921bb5e34a78b39f483a3eb6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59700f9057fd29d8fdcee25efad69e8d9a54dce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59700f9057fd29d8fdcee25efad69e8d9a54dce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f59700f9057fd29d8fdcee25efad69e8d9a54dce", "patch": "@@ -2,6 +2,9 @@\n \n \t* c-decl.c (duplicate_decls): Test DECL for ERROR_MARK.\n \n+\t* expr.c (expand_expr, case CONSTRUCTOR): Put into memory if\n+\tconstant and EXPAND_CONST_ADDRESS, not just EXPAND_INITIALIZER.\n+\n 2003-05-22  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* m68hc11.c: Don't use the `0' flag for asm_fprintf specifiers."}, {"sha": "770bef4afa25b3f0b842d37b9509c0e15547e9b7", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f59700f9057fd29d8fdcee25efad69e8d9a54dce/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f59700f9057fd29d8fdcee25efad69e8d9a54dce/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f59700f9057fd29d8fdcee25efad69e8d9a54dce", "patch": "@@ -4982,7 +4982,7 @@ store_constructor (exp, target, cleared, size)\n \t    {\n \t      rtx offset_rtx;\n \n-\t      if (contains_placeholder_p (offset))\n+\t      if (CONTAINS_PLACEHOLDER_P (offset))\n \t\toffset = build (WITH_RECORD_EXPR, sizetype,\n \t\t\t\toffset, make_tree (TREE_TYPE (exp), target));\n \n@@ -5799,8 +5799,7 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t     made during type construction.  */\n \t  if (this_offset == 0)\n \t    break;\n-\t  else if (! TREE_CONSTANT (this_offset)\n-\t\t   && contains_placeholder_p (this_offset))\n+\t  else if (CONTAINS_PLACEHOLDER_P (this_offset))\n \t    this_offset = build (WITH_RECORD_EXPR, sizetype, this_offset, exp);\n \n \t  offset = size_binop (PLUS_EXPR, offset, this_offset);\n@@ -5830,11 +5829,9 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t  /* If the index has a self-referential type, pass it to a\n \t     WITH_RECORD_EXPR; if the component size is, pass our\n \t     component to one.  */\n-\t  if (! TREE_CONSTANT (index)\n-\t      && contains_placeholder_p (index))\n+\t  if (CONTAINS_PLACEHOLDER_P (index))\n \t    index = build (WITH_RECORD_EXPR, TREE_TYPE (index), index, exp);\n-\t  if (! TREE_CONSTANT (unit_size)\n-\t      && contains_placeholder_p (unit_size))\n+\t  if (CONTAINS_PLACEHOLDER_P (unit_size))\n \t    unit_size = build (WITH_RECORD_EXPR, sizetype, unit_size, array);\n \n \t  offset = size_binop (PLUS_EXPR, offset,\n@@ -7163,7 +7160,9 @@ expand_expr (exp, target, tmode, modifier)\n \t\t\t&& ((TREE_CODE (type) == VECTOR_TYPE\n \t\t\t     && !is_zeros_p (exp))\n \t\t\t    || ! mostly_zeros_p (exp)))))\n-\t       || (modifier == EXPAND_INITIALIZER && TREE_CONSTANT (exp)))\n+\t       || ((modifier == EXPAND_INITIALIZER\n+\t\t    || modifier == EXPAND_CONST_ADDRESS)\n+\t\t   && TREE_CONSTANT (exp)))\n \t{\n \t  rtx constructor = output_constant_def (exp, 1);\n "}]}