{"sha": "6910dd7004c16925d3856e45c2bf3c499c60e6a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkxMGRkNzAwNGMxNjkyNWQzODU2ZTQ1YzJiZjNjNDk5YzYwZTZhOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-19T00:47:29Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-03-19T00:47:29Z"}, "message": "(output_function_epilogue): Restore registers using sp+ instead of fp(n) in leaf functions.\n\n(output_function_epilogue): Restore registers using sp+ instead of fp(n) in\nleaf functions.\n(USE_MOVQ, use_movq): Function replaced by macro.\n\nFrom-SVN: r11560", "tree": {"sha": "870b656e87de9ba26893cd8bdc8827583972ab0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/870b656e87de9ba26893cd8bdc8827583972ab0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6910dd7004c16925d3856e45c2bf3c499c60e6a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6910dd7004c16925d3856e45c2bf3c499c60e6a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6910dd7004c16925d3856e45c2bf3c499c60e6a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6910dd7004c16925d3856e45c2bf3c499c60e6a8/comments", "author": null, "committer": null, "parents": [{"sha": "a9f6f5aa7fd77644ba82eb4aba111086608910a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f6f5aa7fd77644ba82eb4aba111086608910a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f6f5aa7fd77644ba82eb4aba111086608910a9"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "2daf05da61ced12f3b1f22b6fa6c79994da99b5e", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6910dd7004c16925d3856e45c2bf3c499c60e6a8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6910dd7004c16925d3856e45c2bf3c499c60e6a8/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=6910dd7004c16925d3856e45c2bf3c499c60e6a8", "patch": "@@ -290,6 +290,7 @@ output_function_epilogue (stream, size)\n   int fsize = (size + 3) & -4;\n   int big = 0;\n   rtx insn = get_last_insn ();\n+  int restore_from_sp = 0;\n   \n   /* If the last insn was a BARRIER, we don't have to write any code.  */\n   if (GET_CODE (insn) == NOTE)\n@@ -337,8 +338,10 @@ output_function_epilogue (stream, size)\n \tmask |= 1 << regno;\n       }\n   offset = foffset + nregs * 4;\n+  restore_from_sp = ! frame_pointer_needed\n+\t     || (! current_function_calls_alloca && leaf_function_p ());\n   if (offset + fsize >= 0x8000\n-      && frame_pointer_needed\n+      && ! restore_from_sp\n       && (mask || fmask || fpoffset))\n     {\n #ifdef MOTOROLA\n@@ -374,7 +377,7 @@ output_function_epilogue (stream, size)\n \t\t\t     offset + fsize, reg_names[i]);\n #endif\n \t      }\n-            else if (! frame_pointer_needed)\n+            else if (restore_from_sp)\n \t      {\n #ifdef MOTOROLA\n \t\tasm_fprintf (stream, \"\\t%Omove.l (%Rsp)+,%s\\n\",\n@@ -415,7 +418,7 @@ output_function_epilogue (stream, size)\n \t\t       offset + fsize, mask);\n #endif\n \t}\n-      else if (! frame_pointer_needed)\n+      else if (restore_from_sp)\n \t{\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\tmovm.l (%Rsp)+,%0I0x%x\\n\", mask);\n@@ -452,7 +455,7 @@ output_function_epilogue (stream, size)\n \t\t       foffset + fsize, fmask);\n #endif\n \t}\n-      else if (! frame_pointer_needed)\n+      else if (restore_from_sp)\n \t{\n #ifdef MOTOROLA\n \t  asm_fprintf (stream, \"\\tfmovm (%Rsp)+,%0I0x%x\\n\", fmask);\n@@ -491,7 +494,7 @@ output_function_epilogue (stream, size)\n \t\t\t   fpoffset + fsize, reg_names[regno]);\n #endif\n \t    }\n-\t  else if (! frame_pointer_needed)\n+\t  else if (restore_from_sp)\n \t    {\n #ifdef MOTOROLA\n \t      asm_fprintf (stream, \"\\tfpmovd (%Rsp)+,%s\\n\",\n@@ -1051,11 +1054,7 @@ legitimize_pic_address (orig, mode, reg)\n \f\n typedef enum { MOVL, SWAP, NEGW, NOTW, NOTB, MOVQ } CONST_METHOD;\n \n-use_movq (i)\n-     int i;\n-{\n-  return (i >= -128 && i <= 127);\n-}\n+#define USE_MOVQ(i)\t((unsigned)((i) + 128) <= 255)\n \n CONST_METHOD\n const_method (constant)\n@@ -1065,21 +1064,21 @@ const_method (constant)\n   unsigned u;\n \n   i = INTVAL (constant);\n-  if (use_movq (i))\n+  if (USE_MOVQ (i))\n     return MOVQ;\n   /* if -256 < N < 256 but N is not in range for a moveq\n      N^ff will be, so use moveq #N^ff, dreg; not.b dreg. */\n-  if (use_movq (i ^ 0xff))\n+  if (USE_MOVQ (i ^ 0xff))\n     return NOTB;\n   /* Likewise, try with not.w */\n-  if (use_movq (i ^ 0xffff))\n+  if (USE_MOVQ (i ^ 0xffff))\n     return NOTW;\n   /* This is the only value where neg.w is useful */\n   if (i == -65408)\n     return NEGW;\n   /* Try also with swap */\n   u = i;\n-  if (use_movq ((u >> 16) | (u << 16)))\n+  if (USE_MOVQ ((u >> 16) | (u << 16)))\n     return SWAP;\n   /* Otherwise, use move.l */\n   return MOVL;"}]}