{"sha": "405def8d4667163a262f6c9fcb4a8f675dae4193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA1ZGVmOGQ0NjY3MTYzYTI2MmY2YzlmY2I0YThmNjc1ZGFlNDE5Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-24T12:25:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-24T12:25:28Z"}, "message": "Make vector::data() return type consistent in C++98\n\n\t* include/bits/stl_vector.h (vector::_M_data_ptr, vector::data):\n\tChange return type of non-standard C++98 extension to match C++11.\n\nFrom-SVN: r241475", "tree": {"sha": "5b3271608e4e24fea113102c1414c3915981d0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3271608e4e24fea113102c1414c3915981d0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/405def8d4667163a262f6c9fcb4a8f675dae4193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405def8d4667163a262f6c9fcb4a8f675dae4193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/405def8d4667163a262f6c9fcb4a8f675dae4193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/405def8d4667163a262f6c9fcb4a8f675dae4193/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89cc66c4786c9af4251dc146b3e37eb1cce2558e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cc66c4786c9af4251dc146b3e37eb1cce2558e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89cc66c4786c9af4251dc146b3e37eb1cce2558e"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "7d0a0022d62116a9737ac18fa8709ed84e45b74a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405def8d4667163a262f6c9fcb4a8f675dae4193/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405def8d4667163a262f6c9fcb4a8f675dae4193/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=405def8d4667163a262f6c9fcb4a8f675dae4193", "patch": "@@ -1,3 +1,8 @@\n+2016-10-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_vector.h (vector::_M_data_ptr, vector::data):\n+\tChange return type of non-standard C++98 extension to match C++11.\n+\n 2016-10-22  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/c++config (_GLIBCXX_BEGIN_NAMESPACE_ALGO)"}, {"sha": "697a73c179f8afc7f5e8f954a41e8fb7f1e9c48d", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/405def8d4667163a262f6c9fcb4a8f675dae4193/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/405def8d4667163a262f6c9fcb4a8f675dae4193/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=405def8d4667163a262f6c9fcb4a8f675dae4193", "patch": "@@ -914,19 +914,11 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *   Returns a pointer such that [data(), data() + size()) is a valid\n        *   range.  For a non-empty %vector, data() == &front().\n        */\n-#if __cplusplus >= 201103L\n       _Tp*\n-#else\n-      pointer\n-#endif\n       data() _GLIBCXX_NOEXCEPT\n       { return _M_data_ptr(this->_M_impl._M_start); }\n \n-#if __cplusplus >= 201103L\n       const _Tp*\n-#else\n-      const_pointer\n-#endif\n       data() const _GLIBCXX_NOEXCEPT\n       { return _M_data_ptr(this->_M_impl._M_start); }\n \n@@ -1558,21 +1550,31 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       }\n #endif\n \n-#if __cplusplus >= 201103L\n       template<typename _Up>\n \t_Up*\n-\t_M_data_ptr(_Up* __ptr) const\n+\t_M_data_ptr(_Up* __ptr) const _GLIBCXX_NOEXCEPT\n \t{ return __ptr; }\n \n+#if __cplusplus >= 201103L\n       template<typename _Ptr>\n \ttypename std::pointer_traits<_Ptr>::element_type*\n \t_M_data_ptr(_Ptr __ptr) const\n \t{ return empty() ? nullptr : std::__addressof(*__ptr); }\n #else\n+      template<typename _Up>\n+\t_Up*\n+\t_M_data_ptr(_Up* __ptr) _GLIBCXX_NOEXCEPT\n+\t{ return __ptr; }\n+\n+      template<typename _Ptr>\n+\tvalue_type*\n+\t_M_data_ptr(_Ptr __ptr)\n+\t{ return __ptr.operator->(); }\n+\n       template<typename _Ptr>\n-\t_Ptr\n+\tconst value_type*\n \t_M_data_ptr(_Ptr __ptr) const\n-\t{ return __ptr; }\n+\t{ return __ptr.operator->(); }\n #endif\n     };\n "}]}