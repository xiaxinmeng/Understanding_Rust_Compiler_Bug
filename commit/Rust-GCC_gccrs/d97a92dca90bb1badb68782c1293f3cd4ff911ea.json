{"sha": "d97a92dca90bb1badb68782c1293f3cd4ff911ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk3YTkyZGNhOTBiYjFiYWRiNjg3ODJjMTI5M2YzY2Q0ZmY5MTFlYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-03T00:16:48Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-03T00:16:48Z"}, "message": "Daily bump.", "tree": {"sha": "6e4ce69879988c58e38a63cb9e49a753f8d6c193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e4ce69879988c58e38a63cb9e49a753f8d6c193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97a92dca90bb1badb68782c1293f3cd4ff911ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97a92dca90bb1badb68782c1293f3cd4ff911ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97a92dca90bb1badb68782c1293f3cd4ff911ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97a92dca90bb1badb68782c1293f3cd4ff911ea/comments", "author": null, "committer": null, "parents": [{"sha": "1c4b7b367cf7fe9dd4206788840621d5946aac39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c4b7b367cf7fe9dd4206788840621d5946aac39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c4b7b367cf7fe9dd4206788840621d5946aac39"}], "stats": {"total": 270, "additions": 269, "deletions": 1}, "files": [{"sha": "662e343142a8ad9f88b7ff341b5eba705eda5e37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,89 @@\n+2021-03-02  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/rs6000.md (tls_get_tpointer_internal): Prepend\n+\tperiod to symbol name.\n+\t(tls_get_addr_internal<mode>): Same.\n+\n+2021-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/99323\n+\t* diagnostic-show-locus.c\n+\t(selftest::test_one_liner_many_fixits_2): Fix accidental usage of\n+\tcolumn 0.\n+\n+2021-03-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99276\n+\t* builtins.c (warn_for_access): Remove stray warning text.\n+\n+2021-03-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/99295\n+\t* doc/extend.texi (attribute malloc): Reword and clarify nonaliasing\n+\tproperty.\n+\n+2021-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/99319\n+\t* dwarf2out.c (output_macinfo_op): Use DW_MACRO_*_str* even with\n+\t-gdwarf-5 -gstrict-dwarf.  For -gsplit-dwarf -gdwarf-5 use\n+\tDW_MACRO_*_strx instead of DW_MACRO_*_strp.  Handle\n+\tDW_MACRO_define_strx and DW_MACRO_undef_strx.\n+\t(save_macinfo_strings): Use DW_MACRO_*_str* even with\n+\t-gdwarf-5 -gstrict-dwarf.  Handle DW_MACRO_define_strx and\n+\tDW_MACRO_undef_strx.\n+\n+2021-03-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/s390-builtin-types.def (BT_FN_V4SF_V8HI_UINT): New\n+\tbuiltin signature.\n+\t(BT_FN_V8HI_V8HI_UINT): Likewise.\n+\t(BT_FN_V8HI_V4SF_V4SF_UINT): Likewise.\n+\t* config/s390/s390-builtins.def (B_NNPA): New macro definition.\n+\t(s390_vclfnhs, s390_vclfnls, s390_vcrnfs, s390_vcfn, s390_vcnf):\n+\tNew builtin definitions.\n+\t* config/s390/s390-c.c (s390_cpu_cpp_builtins_internal): Bump\n+\tvector extension version.\n+\t* config/s390/s390.c (s390_expand_builtin): Check if builtins are\n+\tavailable with current -march level.\n+\t* config/s390/s390.md (UNSPEC_NNPA_VCLFNHS_V8HI)\n+\t(UNSPEC_NNPA_VCLFNLS_V8HI, UNSPEC_NNPA_VCRNFS_V8HI)\n+\t(UNSPEC_NNPA_VCFN_V8HI, UNSPEC_NNPA_VCNF_V8HI): New constants.\n+\t* config/s390/vecintrin.h (vec_extend_to_fp32_hi): New macro.\n+\t(vec_extend_to_fp32_lo): Likewise.\n+\t(vec_round_from_fp32): Likewise.\n+\t(vec_convert_to_fp16): Likewise.\n+\t(vec_convert_from_fp16): Likewise.\n+\t* config/s390/vx-builtins.md (vclfnhs_v8hi): New insn pattern.\n+\t(vclfnls_v8hi): Likewise.\n+\t(vcrnfs_v8hi): Likewise.\n+\t(vcfn_v8hi): Likewise.\n+\t(vcnf_v8hi): Likewise.\n+\n+2021-03-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (processor_flags_table): New entry.\n+\t* config.gcc: Enable arch14 for --with-arch and --with-tune.\n+\t* config/s390/driver-native.c (s390_host_detect_local_cpu): Pick\n+\tarch14 for unknown CPU models.\n+\t* config/s390/s390-opts.h (enum processor_type): Add PROCESSOR_ARCH14.\n+\t* config/s390/s390.c (s390_issue_rate): Add case for PROCESSOR_ARCH14.\n+\t(s390_get_sched_attrmask): Likewise.\n+\t(s390_get_unit_mask): Likewise.\n+\t* config/s390/s390.h (enum processor_flags): Add PF_NNPA and PF_ARCH14.\n+\t(TARGET_CPU_ARCH14, TARGET_CPU_ARCH14_P, TARGET_CPU_NNPA)\n+\t(TARGET_CPU_NNPA_P, TARGET_ARCH14, TARGET_ARCH14_P, TARGET_NNPA)\n+\t(TARGET_NNPA_P): New macro definitions.\n+\t* config/s390/s390.md (\"cpu_facility\", \"enabled\"): Add arch14 and nnpa.\n+\t* config/s390/s390.opt: Add PROCESSOR_ARCH14.\n+\n+2021-03-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/95757\n+\t* tree-vrp.c (register_edge_assert_for): Remove superfluous ()s around\n+\tcondition.  Call register_edge_assert_for_1 for == 0, != 0, == 1 and\n+\t!= 1 comparisons if name is lhs of a comparison.\n+\n 2021-03-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR target/44107"}, {"sha": "91edd6899c621dd9a097f07444df3fa69c9107c0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1 +1 @@\n-20210302\n+20210303"}, {"sha": "97e4853f454ffc8769e15967399bc98bc5048087", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,15 @@\n+2021-03-02  Mikael Pettersson  <mikpelinux@gmail.com>\n+\n+\tPR bootstrap/98590\n+\t* cstreams.c: Ensure fileno_unlocked() is visible on Cygwin.\n+\n+2021-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/99095\n+\t* sem_ch8.adb (Check_Constrained_Object): Restrict again the special\n+\toptimization for limited types to non-array types except in the case\n+\tof an extended return statement.\n+\n 2021-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/99020"}, {"sha": "ce5caa37e060a39f554cd5c2b3ef64979706fb57", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,8 @@\n+2021-03-02  Martin Liska  <mliska@suse.cz>\n+\n+\t* diagnostic-manager.cc (diagnostic_manager::emit_saved_diagnostics):\n+\tDo not pass engine.\n+\n 2021-02-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (exploded_path::exploded_path): New copy-ctor."}, {"sha": "682963b184bd54f95c0b04e5bb58563a652ad3c6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,94 @@\n+2021-03-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/99251\n+\t* class.c (build_base_path): Call build_if_nonnull.\n+\t* cp-tree.h (build_if_nonnull): Declare.\n+\t* rtti.c (ifnonnull): Rename...\n+\t(build_if_nonnull): ...to this.  Set no-warning bit on COND_EXPR.\n+\t(build_dynamic_cast_1): Adjust to name change.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96443\n+\tPR c++/96960\n+\t* constraint.cc (type_deducible_p): Don't substitute into the\n+\tconstraints, and instead just pass 'args' to do_auto_deduction\n+\tas the outer template arguments.\n+\t(tsubst_parameter_mapping): Remove confused code for handling\n+\tplaceholder type arguments.\n+\t(normalize_placeholder_type_constraint): Define.\n+\t(satisfy_constraint_expression): Use it to handle placeholder\n+\t'auto' types.\n+\t* cp-tree.h (PLACEHOLDER_TYPE_CONSTRAINTS_INFO): Define.\n+\t(PLACEHOLDER_TYPE_CONSTRAINTS): Redefine in terms of the above.\n+\t* pt.c (tsubst) <case TEMPLATE_TYPE_PARM>: Use\n+\tPLACEHOLDER_TYPE_CONSTRAINTS_INFO instead.\n+\t(make_constrained_placeholder_type): Set\n+\tPLACEHOLDER_TYPE_CONSTRAINTS_INFO instead.\n+\t(do_auto_deduction): Clarify comments about the outer_targs\n+\tparameter.  Rework satisfaction of a placeholder type constraint\n+\tto pass in the complete set of template arguments directly to\n+\tconstraints_satisfied_p.\n+\t(splice_late_return_type): Use PLACEHOLDER_TYPE_CONSTRAINTS_INFO\n+\tinstead.  Also rebuild the the constraint info on the new auto.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (build_parameter_mapping): Rely on the caller to\n+\tdetermine the in-scope template parameters.\n+\t(norm_info::norm_info): Delegate the tsubst_flags_t constructor\n+\tto the two-parameter constructor.  In the two-parameter\n+\tconstructor, fold in the definition of make_context, set\n+\tinitial_parms appropriately, and don't set the now-removed\n+\torig_decl member.\n+\t(norm_info::make_context): Remove, now that its only use is\n+\tinlined into the caller.\n+\t(norm_info::update_context): Adjust call to\n+\tbuild_parameter_mapping to pass in the relevant set of in-scope\n+\ttemplate parameters.\n+\t(norm_info::ctx_parms): Define this member function.\n+\t(norm_info::context): Initialize to NULL_TREE.\n+\t(norm_info::orig_decl): Remove this data member.\n+\t(norm_info::initial_parms): Define this data member.\n+\t(normalize_atom): Adjust call to build_parameter_mapping to pass\n+\tin the relevant set of in-scope template parameters.  Use\n+\tinfo.initial_parms instead of info.orig_decl.\n+\t(normalize_constraint_expression): Take a norm_info object\n+\tinstead of a bool.  Cache the result of normalization.\n+\t(tsubst_nested_requirement): Call satisfy_constraint_expression\n+\tinstead of satisfy_constraint, so that we normalize on demand.\n+\t(satisfy_constraint_expression): Handle a NESTED_REQ argument.\n+\tAdjust call to normalize_constraint_expression.\n+\t(finish_nested_requirement): Set the TREE_TYPE of the NESTED_REQ\n+\tto current_template_parms.\n+\t(diagnose_nested_requirements): Go through\n+\tsatisfy_constraint_expression, as with tsubst_nested_requirement.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (tsubst_parameter_mapping): Canonicalize the\n+\targuments of a substituted TYPE_ARGUMENT_PACK even if we've\n+\tstarted with a TYPE_ARGUMENT_PACK.\n+\t(finish_requires_expr): Don't set DECL_CONTEXT and\n+\tCONSTRAINT_VAR_P on each of the introduced parameters here.\n+\t* parser.c (cp_parser_requirement_parameter_list): Instead set\n+\tthese fields earlier, here.\n+\t* pt.c (do_auto_deduction): Canonicalize the result of\n+\tdo_auto_deduction.  Pass 'complain' to finish_decltype_type.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (tsubst_simple_requirement): Just return\n+\tboolean_true_node on success.\n+\t(tsubst_type_requirement): Likewise.\n+\t(tsubst_compound_requirement): Likewise.\n+\t(tsubst_nested_requirement): Likewise.\n+\t(tsubst_requirement_body): Remove.\n+\t(check_constaint_variables): Rename to ...\n+\t(check_constraint_variables): ... this.\n+\t(tsubst_constraint_variables): Adjust.\n+\t(tsubst_requires_expr): Fold tsubst_requirement_body into here.\n+\n 2021-03-01  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/99294"}, {"sha": "239a7316adc6c565ee602180b565e016fd9b2f44", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,58 @@\n+2021-03-02  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* gcc.misc-tests/outputs.exp: Skip @file -save-temps\n+\ttests if target test-framework has -L or -I options.\n+\n+2021-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/99323\n+\t* gcc.dg/pr99323-1.c: New test.\n+\t* gcc.dg/pr99323-2.c: New test.\n+\n+2021-03-02  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/99251\n+\t* g++.dg/warn/Wnonnull9.C: Expect no warnings.\n+\t* g++.dg/warn/Wnonnull12.C: New test.\n+\n+2021-03-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/limited5.adb: New test.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/96443\n+\tPR c++/96960\n+\t* g++.dg/concepts/abbrev9.C: New test.\n+\t* g++.dg/cpp2a/concepts-lambda15.C: New test.\n+\t* g++.dg/cpp2a/concepts-placeholder3.C: New test.\n+\t* g++.dg/cpp2a/concepts-return-req2.C: New test.\n+\t* g++.dg/cpp2a/concepts-ts1.C: Add dg-bogus directive to the\n+\tcall to f15 that we expect to accept.\n+\n+2021-03-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp1z/auto1.C: New test.\n+\n+2021-03-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/zvector/vec-nnpa-fp16-convert.c: New test.\n+\t* gcc.target/s390/zvector/vec-nnpa-fp32-convert-1.c: New test.\n+\t* gcc.target/s390/zvector/vec_convert_from_fp16.c: New test.\n+\t* gcc.target/s390/zvector/vec_convert_to_fp16.c: New test.\n+\t* gcc.target/s390/zvector/vec_extend_to_fp32_hi.c: New test.\n+\t* gcc.target/s390/zvector/vec_extend_to_fp32_lo.c: New test.\n+\t* gcc.target/s390/zvector/vec_round_from_fp32.c: New test.\n+\n+2021-03-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* lib/target-supports.exp: Add check for nnpa facility.\n+\n+2021-03-02  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* gcc.target/s390/mul-signed-overflow-1.c: Run only on z14.\n+\t* gcc.target/s390/mul-signed-overflow-2.c: Run only on z14.\n+\n 2021-03-01  Martin Liska  <mliska@suse.cz>\n \n \tPR target/99313"}, {"sha": "02a14e2855aa27453869b56497b4cb5472c13e3d", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,10 @@\n+2021-03-02  Ian Lance Taylor  <iant@golang.org>\n+\n+\tPR libbacktrace/98818\n+\t* dwarf.c (dwarf_buf_error): Add errnum parameter.  Change all\n+\tcallers.\n+\t* backtrace.h: Update backtrace_error_callback comment.\n+\n 2021-02-12  Ian Lance Taylor  <iant@golang.org>\n \n \t* configure.ac: Check for objcopy --add-gnu-debuglink by using"}, {"sha": "815a1f8b9ed163f17f87482f87884e47356a5ba3", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,9 @@\n+2021-03-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/99323\n+\t* line-map.c (rich_location::maybe_add_fixit): Reject fix-it hints\n+\tat column 0.\n+\n 2021-02-24  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/98718"}, {"sha": "0a75105d9a278b224a75ab653976cb3f24be79b6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97a92dca90bb1badb68782c1293f3cd4ff911ea/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=d97a92dca90bb1badb68782c1293f3cd4ff911ea", "patch": "@@ -1,3 +1,9 @@\n+2021-03-02  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\t* config/rs6000/_sprintfkf.h (__sprintfkf): Fix prototype to match\n+\tthe function.\n+\t* config/rs6000/_sprintfkf.c: Include _sprintfkf.h.\n+\n 2021-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgcc/99236"}]}