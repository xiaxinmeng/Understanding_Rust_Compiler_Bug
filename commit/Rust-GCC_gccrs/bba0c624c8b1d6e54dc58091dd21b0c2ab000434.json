{"sha": "bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJhMGM2MjRjOGIxZDZlNTRkYzU4MDkxZGQyMWIwYzJhYjAwMDQzNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-03T21:43:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-06T17:27:00Z"}, "message": "aarch64: Add an and/ior-based movk pattern [PR87763]\n\nThis patch adds a second movk pattern that models the instruction\nas a \"normal\" and/ior operation rather than an insertion.  It fixes\nthe third insv_1.c failure in PR87763, which was a regression from\nGCC 8.\n\n2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR target/87763\n\t* config/aarch64/aarch64-protos.h (aarch64_movk_shift): Declare.\n\t* config/aarch64/aarch64.c (aarch64_movk_shift): New function.\n\t* config/aarch64/aarch64.md (aarch64_movk<mode>): New pattern.\n\ngcc/testsuite/\n\tPR target/87763\n\t* gcc.target/aarch64/movk_2.c: New test.", "tree": {"sha": "8ed844c674d1357b8f72de97999951e19879f18e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed844c674d1357b8f72de97999951e19879f18e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "cea8ffee99c82c6a917b1849ea0e598c2ae0aeef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -1,3 +1,10 @@\n+2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/87763\n+\t* config/aarch64/aarch64-protos.h (aarch64_movk_shift): Declare.\n+\t* config/aarch64/aarch64.c (aarch64_movk_shift): New function.\n+\t* config/aarch64/aarch64.md (aarch64_movk<mode>): New pattern.\n+\n 2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR rtl-optimization/87763"}, {"sha": "d29975a8921ca6aa1fab1aaedfe506c27a0a2605", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -560,6 +560,7 @@ bool aarch64_sve_float_mul_immediate_p (rtx);\n bool aarch64_split_dimode_const_store (rtx, rtx);\n bool aarch64_symbolic_address_p (rtx);\n bool aarch64_uimm12_shift (HOST_WIDE_INT);\n+int aarch64_movk_shift (const wide_int_ref &, const wide_int_ref &);\n bool aarch64_use_return_insn_p (void);\n const char *aarch64_output_casesi (rtx *);\n "}, {"sha": "6a1b4099af125d44a5c9d9437a8f05cd58d7fa88", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -7895,6 +7895,30 @@ aarch64_movw_imm (HOST_WIDE_INT val, scalar_int_mode mode)\n \t  || (val & (((HOST_WIDE_INT) 0xffff) << 16)) == val);\n }\n \n+/* Test whether:\n+\n+     X = (X & AND_VAL) | IOR_VAL;\n+\n+   can be implemented using:\n+\n+     MOVK X, #(IOR_VAL >> shift), LSL #shift\n+\n+   Return the shift if so, otherwise return -1.  */\n+int\n+aarch64_movk_shift (const wide_int_ref &and_val,\n+\t\t    const wide_int_ref &ior_val)\n+{\n+  unsigned int precision = and_val.get_precision ();\n+  unsigned HOST_WIDE_INT mask = 0xffff;\n+  for (unsigned int shift = 0; shift < precision; shift += 16)\n+    {\n+      if (and_val == ~mask && (ior_val & mask) == ior_val)\n+\treturn shift;\n+      mask <<= 16;\n+    }\n+  return -1;\n+}\n+\n /* VAL is a value with the inner mode of MODE.  Replicate it to fill a\n    64-bit (DImode) integer.  */\n "}, {"sha": "9c1f17d0f85d9bbab009e453b5940a3565b782c8", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -1282,6 +1282,23 @@\n   [(set_attr \"type\" \"mov_imm\")]\n )\n \n+;; Match MOVK as a normal AND and IOR operation.\n+(define_insn \"aarch64_movk<mode>\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(ior:GPI (and:GPI (match_operand:GPI 1 \"register_operand\" \"0\")\n+\t\t\t  (match_operand:GPI 2 \"const_int_operand\"))\n+\t\t (match_operand:GPI 3 \"const_int_operand\")))]\n+  \"aarch64_movk_shift (rtx_mode_t (operands[2], <MODE>mode),\n+\t\t       rtx_mode_t (operands[3], <MODE>mode)) >= 0\"\n+  {\n+    int shift = aarch64_movk_shift (rtx_mode_t (operands[2], <MODE>mode),\n+\t\t\t\t    rtx_mode_t (operands[3], <MODE>mode));\n+    operands[2] = gen_int_mode (UINTVAL (operands[3]) >> shift, SImode);\n+    operands[3] = gen_int_mode (shift, SImode);\n+    return \"movk\\\\t%<w>0, #%X2, lsl %3\";\n+  }\n+)\n+\n (define_expand \"movti\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\")\n \t(match_operand:TI 1 \"general_operand\"))]"}, {"sha": "cdb26581b9c27767e3601e5e23373e6e33df2d32", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/87763\n+\t* gcc.target/aarch64/movk_2.c: New test.\n+\n 2020-02-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93597 - ICE with lambda in operator function."}, {"sha": "a0477ad5d425b1ad08825b95fcd47788540a2a2b", "filename": "gcc/testsuite/gcc.target/aarch64/movk_2.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bba0c624c8b1d6e54dc58091dd21b0c2ab000434/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fmovk_2.c?ref=bba0c624c8b1d6e54dc58091dd21b0c2ab000434", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include <stdint.h>\n+\n+#define H3 ((uint64_t) 0xffff << 48)\n+#define H2 ((uint64_t) 0xffff << 32)\n+#define H1 ((uint64_t) 0xffff << 16)\n+#define H0 ((uint64_t) 0xffff)\n+\n+/*\n+** f1:\n+**\tmov\tw0, w1\n+**\tmovk\tw0, #0x9876(?:, lsl #?0)?\n+**\tret\n+*/\n+uint32_t\n+f1 (uint32_t dummy, uint32_t x)\n+{\n+  return (x & 0xffff0000) | 0x9876;\n+}\n+\n+/*\n+** f2:\n+**\tmovk\tw0, #0x1234, lsl #?16\n+**\tret\n+*/\n+uint32_t\n+f2 (uint32_t x)\n+{\n+  return (x & 0xffff) | 0x12340000;\n+}\n+\n+/*\n+** g1:\n+**\tmovk\tx0, #0x1234, lsl #?0\n+**\tret\n+*/\n+uint64_t\n+g1 (uint64_t x)\n+{\n+  return (x & (H3 | H2 | H1)) | 0x1234;\n+}\n+\n+/*\n+** g2:\n+**\tmovk\tx0, #0x900e, lsl #?16\n+**\tret\n+*/\n+uint64_t\n+g2 (uint64_t x)\n+{\n+  return (x & (H3 | H2 | H0)) | ((uint64_t) 0x900e << 16);\n+}\n+\n+/*\n+** g3:\n+**\tmovk\tx0, #0xee33, lsl #?32\n+**\tret\n+*/\n+uint64_t\n+g3 (uint64_t x)\n+{\n+  return (x & (H3 | H1 | H0)) | ((uint64_t) 0xee33 << 32);\n+}\n+\n+/*\n+** g4:\n+**\tmov\tx0, x1\n+**\tmovk\tx0, #0x7654, lsl #?48\n+**\tret\n+*/\n+uint64_t\n+g4 (uint64_t dummy, uint64_t x)\n+{\n+  return (x & (H2 | H1 | H0)) | ((uint64_t) 0x7654 << 48);\n+}"}]}