{"sha": "9a1564bb251c2b31f1fd519eac22485f0a2d181a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExNTY0YmIyNTFjMmIzMWYxZmQ1MTllYWMyMjQ4NWYwYTJkMTgxYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2004-01-27T22:13:28Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2004-01-27T22:13:28Z"}, "message": "call-super-2.m: Make LP64-safe.\n\n\t* objc.dg/call-super-2.m: Make LP64-safe.\n\t* objc.dg/desig-init-1.m: Likewise.\n\nFrom-SVN: r76753", "tree": {"sha": "386ab249f01a0467835792cc7978fb6cc09d17e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/386ab249f01a0467835792cc7978fb6cc09d17e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1564bb251c2b31f1fd519eac22485f0a2d181a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1564bb251c2b31f1fd519eac22485f0a2d181a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1564bb251c2b31f1fd519eac22485f0a2d181a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1564bb251c2b31f1fd519eac22485f0a2d181a/comments", "author": null, "committer": null, "parents": [{"sha": "2d9db8eb8d7554a60095e61841216031fa2c6174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d9db8eb8d7554a60095e61841216031fa2c6174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d9db8eb8d7554a60095e61841216031fa2c6174"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "81e8392db1e263159cb4b702322d6123c0789a4d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a1564bb251c2b31f1fd519eac22485f0a2d181a", "patch": "@@ -1,3 +1,8 @@\n+2004-01-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* objc.dg/call-super-2.m: Make LP64-safe.\n+\t* objc.dg/desig-init-1.m: Likewise.\n+\n 2004-01-27  Devang Patel <dpatel@apple.com>\n \n \t* g++.dg/debug/namespace1.C: New test."}, {"sha": "08eb4bd2ec88a2c03743a3a686cc9b9bf346a408", "filename": "gcc/testsuite/objc.dg/call-super-2.m", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fcall-super-2.m?ref=9a1564bb251c2b31f1fd519eac22485f0a2d181a", "patch": "@@ -44,11 +44,11 @@ - (int) categ_instance_func2;\n @implementation Derived\n + (int) class_func1\n {\n-   int i = (int)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+   int i = (size_t)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n        /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 47 } */\n        /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 47 } */\n        /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 47 } */\n-   return i + (int)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   return i + (size_t)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) class_func2\n {\n@@ -65,21 +65,21 @@ + (int) class_func4\n }   \n + (int) class_func5\n {\n-   int i = (int)[Derived class_func0];    /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n-   return i + (int)[Object class_func0];  /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   int i = (size_t)[Derived class_func0];    /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+   return i + (size_t)[Object class_func0];  /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) class_func6\n {\n-   return (int)[OBJC_GETCLASS(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[OBJC_GETCLASS(\"Object\") class_func1];  /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n }\n + (int) class_func7\n {\n    return [OBJC_GETCLASS(\"Derived\") class_func1];\n }\n - (int) instance_func1\n {\n-   int i = (int)[self instance_func0];     /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n-   return i + (int)[super instance_func0]; /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+   int i = (size_t)[self instance_func0];     /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n+   return i + (size_t)[super instance_func0]; /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n }\n - (int) instance_func2\n {\n@@ -95,12 +95,12 @@ - (int) instance_func4\n }   \n - (int) instance_func5\n {\n-   int i = (int)[Derived instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+instance_func1.\" } */\n-   return i + (int)[Object instance_func1]; /* { dg-warning \".Object. may not respond to .\\\\+instance_func1.\" } */\n+   int i = (size_t)[Derived instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+instance_func1.\" } */\n+   return i + (size_t)[Object instance_func1]; /* { dg-warning \".Object. may not respond to .\\\\+instance_func1.\" } */\n }\n - (int) instance_func6\n {\n-   return (int)[OBJC_GETCLASS(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n+   return (size_t)[OBJC_GETCLASS(\"Object\") class_func1]; /* { dg-warning \".Object. may not respond to .\\\\+class_func1.\" } */\n }\n - (int) instance_func7\n {\n@@ -111,11 +111,11 @@ - (int) instance_func7\n @implementation Derived (Categ)\n + (int) categ_class_func1\n {\n-   int i = (int)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n+   int i = (size_t)[self class_func0];       /* { dg-warning \".Derived. may not respond to .\\\\+class_func0.\" } */\n    i += [self class_func1];\n    i += [self categ_class_func2];\n-   i += (int)[self categ_instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+categ_instance_func1.\" } */\n-   return i + (int)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n+   i += (size_t)[self categ_instance_func1]; /* { dg-warning \".Derived. may not respond to .\\\\+categ_instance_func1.\" } */\n+   return i + (size_t)[super class_func0];   /* { dg-warning \".Object. may not respond to .\\\\+class_func0.\" } */\n }\n + (int) categ_class_func2\n {\n@@ -124,13 +124,13 @@ + (int) categ_class_func2\n }\n - (int) categ_instance_func1\n {\n-   int i = (int)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n+   int i = (size_t)[self instance_func0];    /* { dg-warning \".Derived. may not respond to .\\\\-instance_func0.\" } */\n    i += [(Derived <Func> *)self categ_instance_func2];\n-   i += (int)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n+   i += (size_t)[(Object <Func> *)self categ_instance_func2]; /* { dg-warning \".Object. may not respond to .\\\\-categ_instance_func2.\" } */\n    /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" \"\" { target *-*-* } 129 } */\n-   i += (int)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" } */\n+   i += (size_t)[(id <Func>)self categ_instance_func2];  /* { dg-warning \".\\\\-categ_instance_func2. not implemented by protocol\" } */\n    i += [(id)self categ_instance_func2];\n-   return i + (int)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n+   return i + (size_t)[super instance_func0];   /* { dg-warning \".Object. may not respond to .\\\\-instance_func0.\" } */\n }\n - (int) categ_instance_func2\n {"}, {"sha": "cd56324f4033ecb8f333f7d5c8db6fdd72da94b2", "filename": "gcc/testsuite/objc.dg/desig-init-1.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1564bb251c2b31f1fd519eac22485f0a2d181a/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fdesig-init-1.m?ref=9a1564bb251c2b31f1fd519eac22485f0a2d181a", "patch": "@@ -22,7 +22,7 @@ + (void) doTests {\n     0, \n     [Cls meth1], \n     [2 + 1] = 3, \n-    [2 * 2 ... 5] = (int)[0 meth2], /* { dg-warning \"invalid receiver type\" } */ \n+    [2 * 2 ... 5] = (size_t)[0 meth2], /* { dg-warning \"invalid receiver type\" } */ \n        /* { dg-warning \"Messages without a matching method signature\" \"\" { target *-*-* } 25 } */\n        /* { dg-warning \"will be assumed to return .id. and accept\" \"\" { target *-*-* } 25 } */\n        /* { dg-warning \".\\.\\.\\.. as arguments\" \"\" { target *-*-* } 25 } */"}]}