{"sha": "93671519e202e3bc5ab592bb6318aa738e4ae58f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2NzE1MTllMjAyZTNiYzVhYjU5MmJiNjMxOGFhNzM4ZTRhZTU4Zg==", "commit": {"author": {"name": "Bernd Edlinger", "email": "bernd.edlinger@hotmail.de", "date": "2016-06-06T12:31:59Z"}, "committer": {"name": "Bernd Edlinger", "email": "edlinger@gcc.gnu.org", "date": "2016-06-06T12:31:59Z"}, "message": "re PR c/24414 (Old-style asms don't clobber memory)\n\ngcc/\n2016-06-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c/24414\n        * cfgexpand.c (expand_asm_loc): Remove handling for ADDR_EXPR.\n        Implicitly clobber memory for basic asm with non-empty assembler\n        string.  Use targetm.md_asm_adjust also here.\n        * compare-elim.c (arithmetic_flags_clobber_p): Use asm_noperands here.\n        * final.c (final_scan_insn): Handle basic asm in PARALLEL block.\n        * gimple.c (gimple_asm_clobbers_memory_p): Handle basic asm with\n        non-empty assembler string.\n        * ira.c (compute_regs_asm_clobbered): Use asm_noperands here.\n        * recog.c (asm_noperands): Handle basic asm in PARALLEL block.\n        (decode_asm_operands): Handle basic asm in PARALLEL block.\n        (extract_insn): Handle basic asm in PARALLEL block.\n        * doc/extend.texi: Mention new behavior of basic asm.\n        * config/ia64/ia64 (rtx_needs_barrier): Handle ASM_INPUT here.\n        * config/pa/pa.c (branch_to_delay_slot_p, branch_needs_nop_p,\n        branch_needs_nop_p): Use asm_noperands.\n\ngcc/testsuite/\n2016-06-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n        PR c/24414\n        * gcc.target/i386/pr24414.c: New test.\n\nFrom-SVN: r237133", "tree": {"sha": "4c408260aa6953423d714fd94976bb8529014f19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c408260aa6953423d714fd94976bb8529014f19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93671519e202e3bc5ab592bb6318aa738e4ae58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93671519e202e3bc5ab592bb6318aa738e4ae58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93671519e202e3bc5ab592bb6318aa738e4ae58f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93671519e202e3bc5ab592bb6318aa738e4ae58f/comments", "author": {"login": "bernd-edlinger", "id": 17638929, "node_id": "MDQ6VXNlcjE3NjM4OTI5", "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bernd-edlinger", "html_url": "https://github.com/bernd-edlinger", "followers_url": "https://api.github.com/users/bernd-edlinger/followers", "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}", "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions", "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs", "repos_url": "https://api.github.com/users/bernd-edlinger/repos", "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}", "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "690f24b7754826f08fc19119dd3a30a6c07e9919", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690f24b7754826f08fc19119dd3a30a6c07e9919", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690f24b7754826f08fc19119dd3a30a6c07e9919"}], "stats": {"total": 125, "additions": 111, "deletions": 14}, "files": [{"sha": "3bffb744b8d5b1985247504952c91e71c99bc110", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -1,3 +1,22 @@\n+2016-06-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c/24414\n+\t* cfgexpand.c (expand_asm_loc): Remove handling for ADDR_EXPR.\n+\tImplicitly clobber memory for basic asm with non-empty assembler\n+\tstring.  Use targetm.md_asm_adjust also here.\n+\t* compare-elim.c (arithmetic_flags_clobber_p): Use asm_noperands here.\n+\t* final.c (final_scan_insn): Handle basic asm in PARALLEL block.\n+\t* gimple.c (gimple_asm_clobbers_memory_p): Handle basic asm with\n+\tnon-empty assembler string.\n+\t* ira.c (compute_regs_asm_clobbered): Use asm_noperands here.\n+\t* recog.c (asm_noperands): Handle basic asm in PARALLEL block.\n+\t(decode_asm_operands): Handle basic asm in PARALLEL block.\n+\t(extract_insn): Handle basic asm in PARALLEL block.\n+\t* doc/extend.texi: Mention new behavior of basic asm.\n+\t* config/ia64/ia64 (rtx_needs_barrier): Handle ASM_INPUT here.\n+\t* config/pa/pa.c (branch_to_delay_slot_p, branch_needs_nop_p,\n+\tbranch_needs_nop_p): Use asm_noperands.\n+\n 2016-06-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config/sparc/sparc.md (cpu): Add niagara7 cpu type."}, {"sha": "e4ddb3aac9fdd56c0a96b3bc2f7a69ce578f8c21", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -2674,15 +2674,40 @@ expand_asm_loc (tree string, int vol, location_t locus)\n {\n   rtx body;\n \n-  if (TREE_CODE (string) == ADDR_EXPR)\n-    string = TREE_OPERAND (string, 0);\n-\n   body = gen_rtx_ASM_INPUT_loc (VOIDmode,\n \t\t\t\tggc_strdup (TREE_STRING_POINTER (string)),\n \t\t\t\tlocus);\n \n   MEM_VOLATILE_P (body) = vol;\n \n+  /* Non-empty basic ASM implicitly clobbers memory.  */\n+  if (TREE_STRING_LENGTH (string) != 0)\n+    {\n+      rtx asm_op, clob;\n+      unsigned i, nclobbers;\n+      auto_vec<rtx> input_rvec, output_rvec;\n+      auto_vec<const char *> constraints;\n+      auto_vec<rtx> clobber_rvec;\n+      HARD_REG_SET clobbered_regs;\n+      CLEAR_HARD_REG_SET (clobbered_regs);\n+\n+      clob = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (VOIDmode));\n+      clobber_rvec.safe_push (clob);\n+\n+      if (targetm.md_asm_adjust)\n+\ttargetm.md_asm_adjust (output_rvec, input_rvec,\n+\t\t\t       constraints, clobber_rvec,\n+\t\t\t       clobbered_regs);\n+\n+      asm_op = body;\n+      nclobbers = clobber_rvec.length ();\n+      body = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (1 + nclobbers));\n+\n+      XVECEXP (body, 0, 0) = asm_op;\n+      for (i = 0; i < nclobbers; i++)\n+\tXVECEXP (body, 0, i + 1) = gen_rtx_CLOBBER (VOIDmode, clobber_rvec[i]);\n+    }\n+\n   emit_insn (body);\n }\n "}, {"sha": "e7fdce83734a84fb107ae05c7a72aa0b0e1a3952", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -162,7 +162,7 @@ arithmetic_flags_clobber_p (rtx_insn *insn)\n   if (!NONJUMP_INSN_P (insn))\n     return false;\n   pat = PATTERN (insn);\n-  if (extract_asm_operands (pat))\n+  if (asm_noperands (pat) >= 0)\n     return false;\n \n   if (GET_CODE (pat) == PARALLEL && XVECLEN (pat, 0) == 2)"}, {"sha": "7f439d3fe82f644023c2f1f8ea7cba89d5a942d7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -6558,6 +6558,7 @@ rtx_needs_barrier (rtx x, struct reg_flags flags, int pred)\n \t    case USE:\n \t    case CALL:\n \t    case ASM_OPERANDS:\n+\t    case ASM_INPUT:\n \t      need_barrier |= rtx_needs_barrier (pat, flags, pred);\n \t      break;\n "}, {"sha": "a78405ab792578551dcfb1404c7a8dff6b63b373", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -6442,7 +6442,7 @@ branch_to_delay_slot_p (rtx_insn *insn)\n \t the branch is followed by an asm.  */\n       if (!insn\n \t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n-\t  || extract_asm_operands (PATTERN (insn)) != NULL_RTX\n+\t  || asm_noperands (PATTERN (insn)) >= 0\n \t  || get_attr_length (insn) > 0)\n \tbreak;\n     }\n@@ -6473,7 +6473,7 @@ branch_needs_nop_p (rtx_insn *insn)\n \treturn TRUE;\n \n       if (!(GET_CODE (PATTERN (insn)) == ASM_INPUT\n-\t   || extract_asm_operands (PATTERN (insn)) != NULL_RTX)\n+\t   || asm_noperands (PATTERN (insn)) >= 0)\n \t  && get_attr_length (insn) > 0)\n \tbreak;\n     }\n@@ -6497,7 +6497,7 @@ use_skip_p (rtx_insn *insn)\n       /* We can't rely on the length of asms, so we can't skip asms.  */\n       if (!insn\n \t  || GET_CODE (PATTERN (insn)) == ASM_INPUT\n-\t  || extract_asm_operands (PATTERN (insn)) != NULL_RTX)\n+\t  || asm_noperands (PATTERN (insn)) >= 0)\n \tbreak;\n       if (get_attr_length (insn) == 4\n \t  && jump_insn == next_active_insn (insn))"}, {"sha": "7208f33e76c9b508d7fa658dc31b12c57e4fcea6", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -7581,7 +7581,7 @@ means there is no way to communicate to the compiler what is happening\n inside them.  GCC has no visibility of symbols in the @code{asm} and may\n discard them as unreferenced.  It also does not know about side effects of\n the assembler code, such as modifications to memory or registers.  Unlike\n-some compilers, GCC assumes that no changes to either memory or registers\n+some compilers, GCC assumes that no changes to general purpose registers\n occur.  This assumption may change in a future release.\n \n To avoid complications from future changes to the semantics and the\n@@ -7605,6 +7605,10 @@ all basic @code{asm} blocks use the assembler dialect specified by the\n Basic @code{asm} provides no\n mechanism to provide different assembler strings for different dialects.\n \n+For basic @code{asm} with non-empty assembler string GCC assumes\n+the assembler block does not change any general purpose registers,\n+but it may read or write any globally accessible variable.\n+\n Here is an example of basic @code{asm} for i386:\n \n @example"}, {"sha": "5b04311218e29432dd29bebec06438a92abbb066", "filename": "gcc/final.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -2566,6 +2566,10 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  (*debug_hooks->source_line) (last_linenum, last_filename,\n \t\t\t\t       last_discriminator, is_stmt);\n \n+\tif (GET_CODE (body) == PARALLEL\n+\t    && GET_CODE (XVECEXP (body, 0, 0)) == ASM_INPUT)\n+\t  body = XVECEXP (body, 0, 0);\n+\n \tif (GET_CODE (body) == ASM_INPUT)\n \t  {\n \t    const char *string = XSTR (body, 0);"}, {"sha": "75a1ed8ee0ba71c754647f0a346e176a5d029f52", "filename": "gcc/gimple.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -2583,6 +2583,10 @@ gimple_asm_clobbers_memory_p (const gasm *stmt)\n \treturn true;\n     }\n \n+  /* Non-empty basic ASM implicitly clobbers memory.  */\n+  if (gimple_asm_input_p (stmt) && strlen (gimple_asm_string (stmt)) != 0)\n+    return true;\n+\n   return false;\n }\n "}, {"sha": "c66bb9e78fc99d57f52054ad5861f768893306df", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -2233,7 +2233,7 @@ compute_regs_asm_clobbered (void)\n \t{\n \t  df_ref def;\n \n-\t  if (NONDEBUG_INSN_P (insn) && extract_asm_operands (PATTERN (insn)))\n+\t  if (NONDEBUG_INSN_P (insn) && asm_noperands (PATTERN (insn)) >= 0)\n \t    FOR_EACH_INSN_DEF (def, insn)\n \t      {\n \t\tunsigned int dregno = DF_REF_REGNO (def);"}, {"sha": "80d1779f7e1eeb453ecd19fb3bf178383216158e", "filename": "gcc/recog.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -1470,22 +1470,34 @@ extract_asm_operands (rtx body)\n \n /* If BODY is an insn body that uses ASM_OPERANDS,\n    return the number of operands (both input and output) in the insn.\n+   If BODY is an insn body that uses ASM_INPUT with CLOBBERS in PARALLEL,\n+   return 0.\n    Otherwise return -1.  */\n \n int\n asm_noperands (const_rtx body)\n {\n   rtx asm_op = extract_asm_operands (CONST_CAST_RTX (body));\n-  int n_sets = 0;\n+  int i, n_sets = 0;\n \n   if (asm_op == NULL)\n-    return -1;\n+    {\n+      if (GET_CODE (body) == PARALLEL && XVECLEN (body, 0) >= 2\n+\t  && GET_CODE (XVECEXP (body, 0, 0)) == ASM_INPUT)\n+\t{\n+\t  /* body is [(asm_input ...) (clobber (reg ...))...].  */\n+\t  for (i = XVECLEN (body, 0) - 1; i > 0; i--)\n+\t    if (GET_CODE (XVECEXP (body, 0, i)) != CLOBBER)\n+\t      return -1;\n+\t  return 0;\n+\t}\n+      return -1;\n+    }\n \n   if (GET_CODE (body) == SET)\n     n_sets = 1;\n   else if (GET_CODE (body) == PARALLEL)\n     {\n-      int i;\n       if (GET_CODE (XVECEXP (body, 0, 0)) == SET)\n \t{\n \t  /* Multiple output operands, or 1 output plus some clobbers:\n@@ -1540,9 +1552,12 @@ asm_noperands (const_rtx body)\n    the locations of the operands within the insn into the vector OPERAND_LOCS,\n    and the constraints for the operands into CONSTRAINTS.\n    Write the modes of the operands into MODES.\n+   Write the location info into LOC.\n    Return the assembler-template.\n+   If BODY is an insn body that uses ASM_INPUT with CLOBBERS in PARALLEL,\n+   return the basic assembly string.\n \n-   If MODES, OPERAND_LOCS, CONSTRAINTS or OPERANDS is 0,\n+   If LOC, MODES, OPERAND_LOCS, CONSTRAINTS or OPERANDS is 0,\n    we don't store that info.  */\n \n const char *\n@@ -1603,6 +1618,12 @@ decode_asm_operands (rtx body, rtx *operands, rtx **operand_locs,\n \t      }\n \t    nbase = i;\n \t  }\n+\telse if (GET_CODE (asmop) == ASM_INPUT)\n+\t  {\n+\t    if (loc)\n+\t      *loc = ASM_INPUT_SOURCE_LOCATION (asmop);\n+\t    return XSTR (asmop, 0);\n+\t  }\n \tbreak;\n       }\n \n@@ -2245,7 +2266,8 @@ extract_insn (rtx_insn *insn)\n     case PARALLEL:\n       if ((GET_CODE (XVECEXP (body, 0, 0)) == SET\n \t   && GET_CODE (SET_SRC (XVECEXP (body, 0, 0))) == ASM_OPERANDS)\n-\t  || GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS)\n+\t  || GET_CODE (XVECEXP (body, 0, 0)) == ASM_OPERANDS\n+\t  || GET_CODE (XVECEXP (body, 0, 0)) == ASM_INPUT)\n \tgoto asm_insn;\n       else\n \tgoto normal_insn;"}, {"sha": "0940e916b1667dfa3ab1cc54b247e56c9ab1a03f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -1,3 +1,8 @@\n+2016-06-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\tPR c/24414\n+\t* gcc.target/i386/pr24414.c: New test.\n+\n 2016-06-06  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* gcc.target/sparc/vis4misc.c: New file."}, {"sha": "bd12f0c849207fa7c22c00d30eb9c17a30d30420", "filename": "gcc/testsuite/gcc.target/i386/pr24414.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr24414.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93671519e202e3bc5ab592bb6318aa738e4ae58f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr24414.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr24414.c?ref=93671519e202e3bc5ab592bb6318aa738e4ae58f", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+int test;\n+\n+int\n+main ()\n+{\n+  int x = test;\n+  asm (\"movl $1,test\");\n+  if (x + test != 1)\n+    __builtin_trap ();\n+  return 0;\n+}"}]}