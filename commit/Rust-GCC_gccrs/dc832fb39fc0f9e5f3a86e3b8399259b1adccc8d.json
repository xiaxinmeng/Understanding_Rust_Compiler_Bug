{"sha": "dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "node_id": "C_kwDOANBUbNoAKGRjODMyZmIzOWZjMGY5ZTVmM2E4NmUzYjgzOTkyNTliMWFkY2NjOGQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-25T12:30:51Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-08-31T20:14:34Z"}, "message": "32-bit PA-RISC with HP-UX: remove deprecated ports\n\nChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Delete hpux9 and hpux10.\n\nconfig/ChangeLog:\n\n\t* mh-pa-hpux10: Removed.\n\ncontrib/ChangeLog:\n\n\t* config-list.mk: Remove deprecated ports.\n\ncontrib/header-tools/ChangeLog:\n\n\t* README: Remove deprecated ports.\n\t* reduce-headers: Likewise.\n\ngcc/ChangeLog:\n\n\t* config.build: Remove deprecated ports.\n\t* config.gcc: Likewise.\n\t* config.host: Likewise.\n\t* configure.ac: Likewise.\n\t* configure: Regenerate.\n\t* config/pa/pa-hpux10.h: Removed.\n\t* config/pa/pa-hpux10.opt: Removed.\n\t* config/pa/t-dce-thr: Removed.\n\ngnattools/ChangeLog:\n\n\t* configure.ac: Remove deprecated ports.\n\t* configure: Regenerate.\n\nlibstdc++-v3/ChangeLog:\n\n\t* configure: Regenerate.\n\t* crossconfig.m4: Remove deprecated ports.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/lambda/lambda-conv.C: Remove useless test.\n\t* gcc.c-torture/execute/ieee/hugeval.x: Likewise.\n\t* gcc.dg/torture/pr47917.c: Likewise.\n\t* lib/target-supports.exp: Likewise.\n\nlibgcc/ChangeLog:\n\n\t* config.host: Remove hppa.\n\nlibitm/ChangeLog:\n\n\t* configure: Regenerate.\n\nfixincludes/ChangeLog:\n\n\t* configure: Regenerate.", "tree": {"sha": "551419fd8cf338543102b4e89d83adc666425d60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/551419fd8cf338543102b4e89d83adc666425d60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dbe2801df3010c5549a3ca958194aa77737122d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dbe2801df3010c5549a3ca958194aa77737122d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dbe2801df3010c5549a3ca958194aa77737122d"}], "stats": {"total": 418, "additions": 12, "deletions": 406}, "files": [{"sha": "99a2278f2813c6e61e2421d56dc15fc32bc53db2", "filename": "config/mh-pa-hpux10", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe2801df3010c5549a3ca958194aa77737122d/config%2Fmh-pa-hpux10", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe2801df3010c5549a3ca958194aa77737122d/config%2Fmh-pa-hpux10", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fmh-pa-hpux10?ref=2dbe2801df3010c5549a3ca958194aa77737122d", "patch": "@@ -1,4 +0,0 @@\n-# The ada virtual array implementation requires that indexing be disabled on\n-# hosts such as hpux that use a segmented memory architecture.  Both the c\n-# and ada files need to be compiled with this option for correct operation.\n-ADA_CFLAGS = -mdisable-indexing -D_X_HPUX10"}, {"sha": "e90b8df217ddfa822c8df7fbbc18cf7599161a4b", "filename": "configure", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -3544,11 +3544,6 @@ case \"${target}\" in\n   hppa*64*-*-hpux*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n-  hppa*-hp-hpux11*)\n-    ;;\n-  hppa*-*-hpux*)\n-    noconfigdirs=\"$noconfigdirs target-libffi\"\n-    ;;\n   ia64*-*-*vms*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n@@ -3855,14 +3850,9 @@ case \"${target}\" in\n   h8500-*-*)\n     noconfigdirs=\"$noconfigdirs target-libgloss\"\n     ;;\n-  hppa1.1-*-osf* | hppa1.1-*-bsd* )\n-    ;;\n   hppa*64*-*-hpux*)\n     noconfigdirs=\"$noconfigdirs gdb\"\n     ;;\n-  hppa*-*-hpux11*)\n-    noconfigdirs=\"$noconfigdirs gdb ld\"\n-    ;;\n   hppa*64*-*-linux*)\n     ;;\n   hppa*-*-linux*)\n@@ -4076,9 +4066,6 @@ fi\n   alpha*-linux*)\n     host_makefile_frag=\"config/mh-alpha-linux\"\n     ;;\n-  hppa*-hp-hpux10*)\n-    host_makefile_frag=\"config/mh-pa-hpux10\"\n-    ;;\n   hppa*-hp-hpux*)\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n@@ -18324,7 +18311,6 @@ fi\n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\"\n case \"$target\" in\n   hppa*64*-*-hpux*) ;;\n-  hppa*-*-hpux*) compare_exclusions=\"$compare_exclusions | */libgcc/lib2funcs* | gcc/function-tests.o\" ;;\n   powerpc*-ibm-aix*) compare_exclusions=\"$compare_exclusions | *libgomp*\\$(objext)\" ;;\n esac\n "}, {"sha": "3ecb532138d77efb89de1631cc89a384ef457759", "filename": "configure.ac", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -804,11 +804,6 @@ case \"${target}\" in\n   hppa*64*-*-hpux*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n-  hppa*-hp-hpux11*)\n-    ;;\n-  hppa*-*-hpux*)\n-    noconfigdirs=\"$noconfigdirs target-libffi\"\n-    ;;\n   ia64*-*-*vms*)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n@@ -1112,14 +1107,9 @@ case \"${target}\" in\n   h8500-*-*)\n     noconfigdirs=\"$noconfigdirs target-libgloss\"\n     ;;\n-  hppa1.1-*-osf* | hppa1.1-*-bsd* )\n-    ;;\n   hppa*64*-*-hpux*)\n     noconfigdirs=\"$noconfigdirs gdb\"\n     ;;\n-  hppa*-*-hpux11*)\n-    noconfigdirs=\"$noconfigdirs gdb ld\"\n-    ;;\n   hppa*64*-*-linux*)\n     ;;\n   hppa*-*-linux*)\n@@ -1314,9 +1304,6 @@ case \"${host}\" in\n   alpha*-linux*)\n     host_makefile_frag=\"config/mh-alpha-linux\"\n     ;;\n-  hppa*-hp-hpux10*)\n-    host_makefile_frag=\"config/mh-pa-hpux10\"\n-    ;;\n   hppa*-hp-hpux*)\n     host_makefile_frag=\"config/mh-pa\"\n     ;;\n@@ -3780,7 +3767,6 @@ AC_SUBST(stage2_werror_flag)\n compare_exclusions=\"gcc/cc*-checksum\\$(objext) | gcc/ada/*tools/*\"\n case \"$target\" in\n   hppa*64*-*-hpux*) ;;\n-  hppa*-*-hpux*) compare_exclusions=\"$compare_exclusions | */libgcc/lib2funcs* | gcc/function-tests.o\" ;;\n   powerpc*-ibm-aix*) compare_exclusions=\"$compare_exclusions | *libgomp*\\$(objext)\" ;;\n esac\n AC_SUBST(compare_exclusions)"}, {"sha": "2056a221ac2c789c4fe673d5f71a188daa118dc7", "filename": "contrib/config-list.mk", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -45,9 +45,8 @@ LIST = aarch64-elf aarch64-linux-gnu aarch64-rtems \\\n   epiphany-elf epiphany-elfOPT-with-stack-offset=16 fido-elf \\\n   fr30-elf frv-elf frv-linux ft32-elf h8300-elf hppa-linux-gnu \\\n   hppa-linux-gnuOPT-enable-sjlj-exceptions=yes hppa64-linux-gnu \\\n-  hppa2.0-hpux10.1OPT-enable-obsolete hppa64-hpux11.3 \\\n+  hppa64-hpux11.3 \\\n   hppa64-hpux11.0OPT-enable-sjlj-exceptions=yes \\\n-  hppa2.0-hpux11.9OPT-enable-obsolete \\\n   i686-pc-linux-gnu i686-apple-darwin i686-apple-darwin9 i686-apple-darwin10 \\\n   i486-freebsd4 i686-freebsd6 i686-kfreebsd-gnu \\\n   i686-netbsdelf9 \\"}, {"sha": "48381fe0ba4d1a4bf35d0c845a551e41dac3269c", "filename": "contrib/header-tools/README", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fheader-tools%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fheader-tools%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fheader-tools%2FREADME?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -203,7 +203,7 @@ reduce-headers\n   these targets.  They are also known to the tool.  When building targets it\n   will check those targets before the rest.  \n   This coverage can be achieved by building config-list.mk with :\n-  LIST=\"aarch64-linux-gnu arm-netbsdelf c6x-elf epiphany-elf hppa2.0-hpux10.1 i686-mingw32crt i686-pc-msdosdjgpp mipsel-elf powerpc-eabisimaltivec rs6000-ibm-aix5.1.0 sh-superh-elf sparc64-elf\"\n+  LIST=\"aarch64-linux-gnu arm-netbsdelf c6x-elf epiphany-elf i686-mingw32crt i686-pc-msdosdjgpp mipsel-elf powerpc-eabisimaltivec rs6000-ibm-aix5.1.0 sh-superh-elf sparc64-elf\"\n \n   -b specifies the native bootstrapped build root directory\n   -t specifies a target build root directory that config-list.mk was run from"}, {"sha": "7d236e30688bc5ca56c1c0bf7048889036bc9d13", "filename": "contrib/header-tools/reduce-headers", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fheader-tools%2Freduce-headers", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/contrib%2Fheader-tools%2Freduce-headers", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fheader-tools%2Freduce-headers?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -25,7 +25,6 @@ target_priority = [\n     \"arm-netbsdelf\",\n     \"c6x-elf\",\n     \"epiphany-elf\",\n-    \"hppa2.0-hpux10.1\",\n     \"i686-mingw32crt\",\n     \"i686-pc-msdosdjgpp\",\n     \"mipsel-elf\","}, {"sha": "52ec8db0f892575bca026dfe640fd586e4ca53bf", "filename": "fixincludes/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/fixincludes%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/fixincludes%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Fconfigure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -5347,7 +5347,7 @@ else\n    # Systems known to be in this category are Windows (all variants),\n    # VMS, and Darwin.\n    case \"$host_os\" in\n-     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux11.00)\n         gcc_cv_func_mmap_dev_zero=no ;;\n      *)\n         gcc_cv_func_mmap_dev_zero=yes;;"}, {"sha": "eb3bfbf92e839778a1c41521eb0861139bf87dc1", "filename": "gcc/config.build", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.build", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.build", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.build?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -50,10 +50,7 @@ build_file_translate=\n \n # System-specific settings.\n case $build in\n-  hppa1.0-*-hpux1[01]* | \\\n-  hppa*64*-*-hpux11* | \\\n-  hppa1.1-*-hpux11* | \\\n-  hppa2*-*-hpux11* )\n+  hppa*64*-*-hpux11* )\n     build_install_headers_dir=install-headers-cpio\n     ;;\n   i[34567]86-*-cygwin* | x86_64-*-cygwin* )"}, {"sha": "75aacc3757aac581ae869164564555a37fc2e982", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 82, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -248,8 +248,9 @@ md_file=\n \n # Obsolete configurations.\n case ${target} in\n- hppa[12]*-*-hpux10*\t\t\t\\\n- | hppa[12]*-*-hpux11*\t\t\t\\\n+  *)\n+  ;;\n+  obsoleted-target \\\n  )\n     if test \"x$enable_obsolete\" != xyes; then\n       echo \"*** Configuration ${target} is obsolete.\" >&2\n@@ -1740,42 +1741,6 @@ hppa*-*-netbsd*)\n \ttm_defines=\"${tm_defines} CHAR_FAST8=1 SHORT_FAST16=1\"\n \textra_options=\"${extra_options} netbsd.opt netbsd-elf.opt\"\n \t;;\n-hppa[12]*-*-hpux10*)\n-\tcase ${target} in\n-\thppa1.1-*-* | hppa2*-*-*)\n-\t\ttarget_cpu_default=\"MASK_PA_11\"\n-\t\t;;\n-\tesac\n-\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h \\\n-\t\t pa/pa-hpux.h pa/pa-hpux10.h\"\n-\textra_options=\"${extra_options} pa/pa-hpux.opt pa/pa-hpux10.opt\"\n-\tcase ${target} in\n-\t*-*-hpux10.[1-9]*)\n-\t\ttm_file=\"${tm_file} pa/pa-hpux1010.h\"\n-\t\textra_options=\"${extra_options} pa/pa-hpux1010.opt\"\n-\t\t;;\n-\tesac\n-\tuse_gcc_stdint=provide\n-\ttm_file=\"${tm_file} hpux-stdint.h\"\n-\ttmake_file=\"pa/t-pa t-slibgcc\"\n-\td_target_objs=\"${d_target_objs} pa-d.o\"\n-\tcase ${enable_threads} in\n-\t  \"\")\n-\t    if test x$have_pthread_h = xyes ; then\n-\t      tmake_file=\"${tmake_file} pa/t-dce-thr\"\n-\t    fi\n-\t    ;;\n-\t  yes | dce)\n-\t    tmake_file=\"${tmake_file} pa/t-dce-thr\"\n-\t    ;;\n-\tesac\n-\tuse_collect2=yes\n-\tgas=yes\n-\tif test \"x$with_dwarf2\" != x; then\n-\t\techo \"Warning: dwarf2 debug format is not supported for this target, --with-dwarf2 ignored\" 1>&2\n-\t\tdwarf2=no\n-\tfi\n-\t;;\n hppa*64*-*-hpux11*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_PA_20\"\n \tif test x$gnu_ld = xyes\n@@ -1819,50 +1784,6 @@ hppa*64*-*-hpux11*)\n \t\t;;\n \tesac\n \t;;\n-hppa[12]*-*-hpux11*)\n-\tcase ${target} in\n-\thppa1.1-*-* | hppa2*-*-*)\n-\t\ttarget_cpu_default=\"MASK_PA_11\"\n-\t\t;;\n-\tesac\n-\ttm_file=\"${tm_file} pa/pa32-regs.h dbxelf.h pa/som.h \\\n-\t\t pa/pa-hpux.h pa/pa-hpux1010.h pa/pa-hpux11.h\"\n-\textra_options=\"${extra_options} pa/pa-hpux.opt pa/pa-hpux1010.opt \\\n-\t\t       hpux11.opt\"\n-\tcase ${target} in\n-\t*-*-hpux11.[12]*)\n-\t\ttm_file=\"${tm_file} pa/pa-hpux1111.h\"\n-\t\textra_options=\"${extra_options} pa/pa-hpux1111.opt\"\n-\t\t;;\n-\t*-*-hpux11.[3-9]*)\n-\t\ttm_file=\"${tm_file} pa/pa-hpux1131.h\"\n-\t\textra_options=\"${extra_options} pa/pa-hpux1131.opt\"\n-\t\t;;\n-\tesac\n-\ttmake_file=\"pa/t-pa t-slibgcc\"\n-\td_target_objs=\"${d_target_objs} pa-d.o\"\n-\tcase x${enable_threads} in\n-\tx | xyes | xposix )\n-\t\tthread_file=posix\n-\t\t;;\n-\tesac\n-\tuse_collect2=yes\n-\tgas=yes\n-\tcase ${target} in\n-\t  *-*-hpux11.[01]*)\n-\t\tuse_gcc_stdint=provide\n-\t\ttm_file=\"${tm_file} hpux-stdint.h\"\n-\t\t;;\n-\t  *-*-hpux11.[23]*)\n-\t\tuse_gcc_stdint=wrap\n-\t\ttm_file=\"${tm_file} hpux-stdint.h\"\n-\t\t;;\n-\tesac\n-\tif test \"x$with_dwarf2\" != x; then\n-\t\techo \"Warning: dwarf2 debug format is not supported for this target, --with-dwarf2 ignored\" 1>&2\n-\t\tdwarf2=no\n-\tfi\n-\t;;\n i[34567]86-*-darwin1[89]* | i[34567]86-*-darwin2*)\n \techo \"Error: 32bit target is not supported after Darwin17\" 1>&2\n \t;;"}, {"sha": "992638df3850f82931a66f916b8e841e8d30fda6", "filename": "gcc/config.host", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -201,11 +201,6 @@ esac\n \n # Machine-specific settings.\n case ${host} in\n-  hppa1.0-*-hpux10* | hppa1.1-*-hpux10* | hppa2*-*-hpux10*)\n-    out_host_hook_obj=host-hpux.o\n-    host_xmake_file=\"${host_xmake_file} x-hpux\"\n-    ;;\n-  hppa1.0-*-hpux11* | hppa1.1-*-hpux11* | hppa2*-*-hpux11* | \\\n   hppa*64*-*-hpux11*)\n     out_host_hook_obj=host-hpux.o\n     host_xmake_file=\"${host_xmake_file} x-hpux\""}, {"sha": "92977685790fe6abd7e7be5184cf4ef51034f95f", "filename": "gcc/config/pa/pa-hpux10.h", "status": "removed", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.h?ref=2dbe2801df3010c5549a3ca958194aa77737122d", "patch": "@@ -1,157 +0,0 @@\n-/* Definitions of target machine for GNU compiler, for HP PA-RISC\n-   Copyright (C) 1995-2022 Free Software Foundation, Inc.\n-   Contributed by Tim Moore (moore@defmacro.cs.utah.edu)\n-\n-This file is part of GCC.\n-\n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n-\n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n-\n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>.  */\n-\n-/* GCC always defines __STDC__.  HP C++ compilers don't define it.  This\n-   causes trouble when sys/stdsyms.h is included.  As a work around,\n-   we define __STDC_EXT__.  A similar situation exists with respect to\n-   the definition of __cplusplus.  We define _INCLUDE_LONGLONG\n-   to prevent nlist.h from defining __STDC_32_MODE__ (no longlong\n-   support).  We define __STDCPP__ to get certain system headers\n-   (notably assert.h) to assume standard preprocessor behavior in C++.\n-   We define _XOPEN_SOURCE_EXTENDED when we define _HPUX_SOURCE to avoid\n-   non standard hpux variants in _INCLUDE_XOPEN_SOURCE_EXTENDED.  */\n-#undef TARGET_OS_CPP_BUILTINS\n-#define TARGET_OS_CPP_BUILTINS()\t\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=hpux\");\t\t\t\t\t\\\n-\tbuiltin_assert (\"system=unix\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__hp9000s800\");\t\t\t\t\\\n-\tbuiltin_define (\"__hp9000s800__\");\t\t\t\t\\\n-\tbuiltin_define (\"__hpux\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__hpux__\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__unix\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__unix__\");\t\t\t\t\t\\\n-\tbuiltin_define (\"__STDC_EXT__\");\t\t\t\t\\\n-\tif (c_dialect_cxx ())\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\t\\\n-\t    builtin_define (\"_REENTRANT\");\t\t\t\t\\\n-\t    builtin_define (\"_INCLUDE_LONGLONG\");\t\t\t\\\n-\t    builtin_define (\"__STDCPP__\");\t\t\t\t\\\n-\t    builtin_define (\"_LARGEFILE_SOURCE\");\t\t\t\\\n-\t    builtin_define (\"_LARGEFILE64_SOURCE\");\t\t\t\\\n-\t    if (flag_pa_unix >= 1995)\t\t\t\t\t\\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tbuiltin_define (\"_XOPEN_UNIX\");\t\t\t\t\\\n-\t\tbuiltin_define (\"_XOPEN_SOURCE_EXTENDED\");\t\t\\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\telse if (flag_iso)\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    if (flag_isoc94)\t\t\t\t\t\t\\\n-\t      builtin_define (\"_INCLUDE__STDC_A1_SOURCE\");\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"_HPUX_SOURCE\");\t\t\t\t\\\n-\t    builtin_define (\"_REENTRANT\");\t\t\t\t\\\n-\t    if (preprocessing_trad_p ())\t\t\t\t\\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tbuiltin_define (\"hp9000s800\");\t\t\t\t\\\n-\t\tbuiltin_define (\"hppa\");\t\t\t\t\\\n-\t\tbuiltin_define (\"hpux\");\t\t\t\t\\\n-\t\tbuiltin_define (\"unix\");\t\t\t\t\\\n-\t\tbuiltin_define (\"__CLASSIC_C__\");\t\t\t\\\n-\t\tbuiltin_define (\"_PWB\");\t\t\t\t\\\n-\t\tbuiltin_define (\"PWB\");\t\t\t\t\t\\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t    if (flag_pa_unix >= 1995)\t\t\t\t\t\\\n-\t      {\t\t\t\t\t\t\t\t\\\n-\t\tbuiltin_define (\"_XOPEN_UNIX\");\t\t\t\t\\\n-\t\tbuiltin_define (\"_XOPEN_SOURCE_EXTENDED\");\t\t\\\n-\t      }\t\t\t\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-\tif (TARGET_SIO)\t\t\t\t\t\t\t\\\n-\t  builtin_define (\"_SIO\");\t\t\t\t\t\\\n-\telse\t\t\t\t\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    builtin_define (\"__hp9000s700\");\t\t\t\t\\\n-\t    builtin_define (\"__hp9000s700__\");\t\t\t\t\\\n-\t    builtin_define (\"_WSIO\");\t\t\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define CPP_SPEC \"%{threads: -D_REENTRANT -D_DCE_THREADS}\"\n-\n-/* We can debug dynamically linked executables on hpux9; we also want\n-   dereferencing of a NULL pointer to cause a SEGV.  */\n-#undef LINK_SPEC\n-#if ((TARGET_DEFAULT | TARGET_CPU_DEFAULT) & MASK_PA_11)\n-#define LINK_SPEC \\\n-  \"%{!mpa-risc-1-0:%{!march=1.0:%{static:-L/lib/pa1.1 -L/usr/lib/pa1.1 }}}\\\n-   %{!shared:%{p:-L/lib/libp %{!static:\\\n-     %nwarning: consider linking with '-static' as system libraries with\\n\\\n-     %n  profiling support are only provided in archive format}}}\\\n-   %{!shared:%{pg:-L/lib/libp %{!static:\\\n-     %nwarning: consider linking with '-static' as system libraries with\\n\\\n-     %n  profiling support are only provided in archive format}}}\\\n-   %{!shared:%{!static:%{rdynamic:-E}}}\\\n-   -z %{mlinker-opt:-O} %{!shared:-u main}\\\n-   %{static:-a archive} %{shared:-b}\"\n-#else\n-#define LINK_SPEC \\\n-  \"%{!shared:%{p:-L/lib/libp %{!static:\\\n-     %nwarning: consider linking with '-static' as system libraries with\\n\\\n-     %n  profiling support are only provided in archive format}}}\\\n-   %{!shared:%{pg:-L/lib/libp %{!static:\\\n-     %nwarning: consider linking with '-static' as system libraries with\\n\\\n-     %n  profiling support are only provided in archive format}}}\\\n-   %{!shared:%{!static:%{rdynamic:-E}}}\\\n-   -z %{mlinker-opt:-O} %{!shared:-u main}\\\n-   %{static:-a archive} %{shared:-b}\"\n-#endif\n-\n-/* Like the default, except no -lg.  */\n-#undef LIB_SPEC\n-#define LIB_SPEC \\\n-  \"%{!shared:\\\n-     %{!p:%{!pg:\\\n-       %{!threads:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}\\\n-       %{threads:-lcma -lc}}}\\\n-     %{p:%{!pg:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\\\n-     %{pg:-lc %{static:%{!nolibdld:-a shared -ldld -a archive -lc}}}}\"\n-\n-#undef THREAD_MODEL_SPEC\n-#define THREAD_MODEL_SPEC \"%{!threads:single}%{threads:dce}\"\n-\n-/* Under hpux10, the normal location of the `ld' and `as' programs is the\n-   /usr/ccs/bin directory.  */\n-\n-#ifndef CROSS_DIRECTORY_STRUCTURE\n-#undef MD_EXEC_PREFIX\n-#define MD_EXEC_PREFIX \"/usr/ccs/bin/\"\n-#endif\n-\n-/* Under hpux10, the normal location of the various *crt*.o files is\n-   the /usr/ccs/lib directory.  However, the profiling files are in\n-   /opt/langtools/lib.  */\n-\n-#ifndef CROSS_DIRECTORY_STRUCTURE\n-#undef MD_STARTFILE_PREFIX\n-#define MD_STARTFILE_PREFIX \"/usr/ccs/lib/\"\n-#define MD_STARTFILE_PREFIX_1 \"/opt/langtools/lib/\"\n-#endif\n-\n-/* hpux10 has the new HP assembler.  It's still lousy, but it's a whole lot\n-   better than the assembler shipped with older versions of hpux.  */\n-#undef NEW_HP_ASSEMBLER\n-#define NEW_HP_ASSEMBLER 1"}, {"sha": "d7e639a018d11127952c49c4d5195d2a6f6814e1", "filename": "gcc/config/pa/pa-hpux10.opt", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Fpa-hpux10.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux10.opt?ref=2dbe2801df3010c5549a3ca958194aa77737122d", "patch": "@@ -1,22 +0,0 @@\n-; Options specific to HP-UX 10.\n-\n-; Copyright (C) 2011-2022 Free Software Foundation, Inc.\n-;\n-; This file is part of GCC.\n-;\n-; GCC is free software; you can redistribute it and/or modify it under\n-; the terms of the GNU General Public License as published by the Free\n-; Software Foundation; either version 3, or (at your option) any later\n-; version.\n-;\n-; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n-; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; for more details.\n-;\n-; You should have received a copy of the GNU General Public License\n-; along with GCC; see the file COPYING3.  If not see\n-; <http://www.gnu.org/licenses/>.\n-\n-threads\n-Driver"}, {"sha": "51b3abcf607886993008932ac33c8ccca83e2bda", "filename": "gcc/config/pa/t-dce-thr", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Ft-dce-thr", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dbe2801df3010c5549a3ca958194aa77737122d/gcc%2Fconfig%2Fpa%2Ft-dce-thr", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-dce-thr?ref=2dbe2801df3010c5549a3ca958194aa77737122d", "patch": "@@ -1,2 +0,0 @@\n-MULTILIB_OPTIONS = threads\n-MULTILIB_DIRNAMES = threads"}, {"sha": "acd712f671512518901cbf2c0130be05f1cbb6e3", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -12680,21 +12680,6 @@ objext='.o'\n # Check whether --enable-sjlj-exceptions was given.\n if test \"${enable_sjlj_exceptions+set}\" = set; then :\n   enableval=$enable_sjlj_exceptions; case $target in\n-  *-*-hpux10*)\n-    if test $enableval != yes; then\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: dwarf2 exceptions not supported, sjlj exceptions forced\" >&5\n-$as_echo \"$as_me: WARNING: dwarf2 exceptions not supported, sjlj exceptions forced\" >&2;}\n-      enableval=yes\n-    fi\n-    ;;\n-esac\n-force_sjlj_exceptions=yes\n-else\n-  case $target in\n-  *-*-hpux10*)\n-    force_sjlj_exceptions=yes\n-    enableval=yes\n-    ;;\n   lm32*-*-*)\n      force_sjlj_exceptions=yes\n      enableval=yes\n@@ -19709,7 +19694,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19712 \"configure\"\n+#line 19697 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19815,7 +19800,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 19818 \"configure\"\n+#line 19803 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "73f3f12017c5d1e39afc7beb7e0123b00b46ab50", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -1802,19 +1802,6 @@ AC_ARG_ENABLE(sjlj-exceptions,\n [AS_HELP_STRING([--enable-sjlj-exceptions],\n                 [arrange to use setjmp/longjmp exception handling])],\n [case $target in\n-  *-*-hpux10*)\n-    if test $enableval != yes; then\n-      AC_MSG_WARN([dwarf2 exceptions not supported, sjlj exceptions forced])\n-      enableval=yes\n-    fi\n-    ;;\n-esac\n-force_sjlj_exceptions=yes],\n-[case $target in\n-  *-*-hpux10*)\n-    force_sjlj_exceptions=yes\n-    enableval=yes\n-    ;;\n   lm32*-*-*)\n      force_sjlj_exceptions=yes\n      enableval=yes"}, {"sha": "9f1b89aacccfebae69f0ac6812854da62b51779d", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-conv.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-conv.C?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -1,7 +1,7 @@\n // Test for conversion from stateless lambda to function pointer.\n \n // { dg-do compile { target c++11_only } }\n-// { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*_?_ZZ1fvENKUlvE_cvPFvvEEv\" { target { ! { *-*-darwin* *-*-mingw* *-*-cygwin *-*-hpux10* } } } } }\n+// { dg-final { scan-assembler \"weak\\[^\\n\\r\\]*_?_ZZ1fvENKUlvE_cvPFvvEEv\" { target { ! { *-*-darwin* *-*-mingw* *-*-cygwin } } } } }\n \n inline void f()\n {"}, {"sha": "a6dad81f78a7fafc1ec4ce7181fb2ca4b4145ec6", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/hugeval.x", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fhugeval.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fhugeval.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Fhugeval.x?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -2,9 +2,6 @@\n # instead of +Infinity.\n \n global target_triplet\n-if { [istarget \"hppa*-*-hpux9*\"] || [istarget \"hppa*-*-hpux10*\"] } {\n-      set torture_execute_xfail \"$target_triplet\"\n-}\n \n # VxWorks kernel mode has the same problem.\n if {[istarget \"*-*-vxworks*\"]} {"}, {"sha": "5724907ba1c3efe1bf69984441d7ca81d8344be4", "filename": "gcc/testsuite/gcc.dg/torture/pr47917.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr47917.c?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -2,7 +2,6 @@\n /* { dg-options \"-std=c99\" } */\n /* { dg-options \"-std=gnu99\" { target *-*-hpux* } } */\n /* { dg-additional-options \"-D__USE_MINGW_ANSI_STDIO=1\" { target *-*-mingw* } } */\n-/* { dg-xfail-run-if \"no C99 snprintf function\" { *-*-hpux10* } } */\n /* { dg-xfail-run-if \"non-conforming C99 snprintf\" { *-*-hpux11.[012]* } } */\n \n /* PR middle-end/47917 */"}, {"sha": "236128bf5de10a3d466ae5da99e6c5287271ed2b", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -310,12 +310,6 @@ proc check_weak_available { } {\n \treturn 1\n     }\n \n-    # HP-UX 10.X doesn't support it\n-\n-    if { [istarget hppa*-*-hpux10*] } {\n-\treturn 0\n-    }\n-\n     # nvptx (nearly) supports it\n \n     if { [istarget nvptx-*-*] } {\n@@ -562,8 +556,6 @@ proc check_effective_target_trampolines { } {\n     if { [istarget avr-*-*]\n \t || [istarget msp430-*-*]\n \t || [istarget nvptx-*-*]\n-\t || [istarget hppa2.0w-hp-hpux11.23]\n-\t || [istarget hppa64-hp-hpux11.23]\n \t || [istarget pru-*-*]\n \t || [istarget bpf-*-*] } {\n \treturn 0;\n@@ -2827,10 +2819,7 @@ proc check_mkfifo_available {} {\n \n proc check_cxa_atexit_available { } {\n     return [check_cached_effective_target cxa_atexit_available {\n-\tif { [istarget hppa*-*-hpux10*] } {\n-\t    # HP-UX 10 doesn't have __cxa_atexit but subsequent test passes.\n-\t    expr 0\n-\t} elseif { [istarget *-*-vxworks] } {\n+\tif { [istarget *-*-vxworks] } {\n \t    # vxworks doesn't have __cxa_atexit but subsequent test passes.\n \t    expr 0\n \t} else {"}, {"sha": "423527da1b67a994d52003f24b6f30a1ca24a668", "filename": "gnattools/configure", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gnattools%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gnattools%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -2092,8 +2092,6 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n     indepsw.adb<indepsw-gnu.adb\"\n     ;;\n-  hppa*-hp-hpux10*)\n-    ;;\n   hppa*-hp-hpux11*)\n     TOOLS_TARGET_PAIRS=\"mlib-tgt-specific.adb<mlib-tgt-specific-hpux.adb\"\n     ;;"}, {"sha": "5b6f34ed9f48e8a6675c9c9f2ce4b00680808f0f", "filename": "gnattools/configure.ac", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gnattools%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/gnattools%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gnattools%2Fconfigure.ac?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -93,8 +93,6 @@ case \"${target}\" in\n     mlib-tgt-specific.adb<mlib-tgt-specific-vxworks.adb \\\n     indepsw.adb<indepsw-gnu.adb\"\n     ;;\n-  hppa*-hp-hpux10*)\n-    ;;\n   hppa*-hp-hpux11*)\n     TOOLS_TARGET_PAIRS=\"mlib-tgt-specific.adb<mlib-tgt-specific-hpux.adb\"\n     ;;"}, {"sha": "9dcc2538dc86d54e1ac7346f87df5740d5695f33", "filename": "libgcc/config.host", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -648,17 +648,6 @@ hppa*-*-linux*)\n \textra_parts=\"crtbegin.o crtbeginS.o crtbeginT.o crtend.o crtendS.o\"\n \tmd_unwind_header=pa/linux-unwind.h\n \t;;\n-hppa[12]*-*-hpux10*)\n-\ttmake_file=\"$tmake_file pa/t-hpux pa/t-hpux10 t-libgcc-pic t-slibgcc\"\n-\t# Set the libgcc version number\n-\tif test x$ac_cv_sjlj_exceptions = xyes; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n-\telse\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n-\tfi\n-\ttmake_file=\"$tmake_file pa/t-slibgcc-hpux t-slibgcc-hpux\"\n-\tmd_unwind_header=pa/hpux-unwind.h\n-\t;;\n hppa*64*-*-hpux11*)\n \ttmake_file=\"$tmake_file pa/t-hpux pa/t-pa64 pa/t-dimode\"\n \ttmake_file=\"$tmake_file pa/t-stublib t-libgcc-pic t-slibgcc\"\n@@ -675,17 +664,6 @@ hppa*64*-*-hpux11*)\n \t\t     libgcc_stub.a\"\n \tmd_unwind_header=pa/hpux-unwind.h\n \t;;\n-hppa[12]*-*-hpux11*)\n-\ttmake_file=\"$tmake_file pa/t-hpux pa/t-stublib t-libgcc-pic t-slibgcc\"\n-\t# Set the libgcc version number\n-\tif test x$ac_cv_sjlj_exceptions = xyes; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n-\telse\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n-\tfi\n-\ttmake_file=\"$tmake_file pa/t-slibgcc-hpux t-slibgcc-hpux\"\n-\tmd_unwind_header=pa/hpux-unwind.h\n-\t;;\n hppa*-*-openbsd*)\n \ttmake_file=\"$tmake_file pa/t-openbsd\"\n \t;;"}, {"sha": "f2a80380c4b07c1932f09cfd7232d14554eb3e00", "filename": "libitm/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -16096,7 +16096,7 @@ else\n    # Systems known to be in this category are Windows (all variants),\n    # VMS, and Darwin.\n    case \"$host_os\" in\n-     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux10* | hpux11.00)\n+     *vms* | cygwin* | pe | mingw* | darwin* | ultrix* | hpux11.00)\n         gcc_cv_func_mmap_dev_zero=no ;;\n      *)\n         gcc_cv_func_mmap_dev_zero=yes;;"}, {"sha": "1772eef64a3a9557b27498cc1dcf393929f2e7b3", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -47955,20 +47955,6 @@ $as_echo \"$gcc_cv_have_tls\" >&6; }\n $as_echo \"#define HAVE_TLS 1\" >>confdefs.h\n \n   fi\n-    case \"$target\" in\n-      *-hpux10*)\n-\t$as_echo \"#define HAVE_ISINF 1\" >>confdefs.h\n-\n-\t$as_echo \"#define HAVE_ISINFF 1\" >>confdefs.h\n-\n-\t$as_echo \"#define HAVE_ISNANF 1\" >>confdefs.h\n-\n-\t$as_echo \"#define HAVE_FINITE 1\" >>confdefs.h\n-\n-\t$as_echo \"#define HAVE_FINITEF 1\" >>confdefs.h\n-\n-\t;;\n-    esac\n     ;;\n   *-linux* | *-uclinux* | *-gnu* | *-kfreebsd*-gnu | *-cygwin* | *-solaris*)\n "}, {"sha": "130f47fb1d470289ddea602eca0488845b1af34e", "filename": "libstdc++-v3/crossconfig.m4", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libstdc%2B%2B-v3%2Fcrossconfig.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d/libstdc%2B%2B-v3%2Fcrossconfig.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fcrossconfig.m4?ref=dc832fb39fc0f9e5f3a86e3b8399259b1adccc8d", "patch": "@@ -173,15 +173,6 @@ case \"${host}\" in\n     AC_DEFINE(HAVE_STRTOLD)\n \n     GCC_CHECK_TLS\n-    case \"$target\" in\n-      *-hpux10*)\n-\tAC_DEFINE(HAVE_ISINF)\n-\tAC_DEFINE(HAVE_ISINFF)\n-\tAC_DEFINE(HAVE_ISNANF)\n-\tAC_DEFINE(HAVE_FINITE)\n-\tAC_DEFINE(HAVE_FINITEF)\n-\t;;\n-    esac\n     ;;\n   *-linux* | *-uclinux* | *-gnu* | *-kfreebsd*-gnu | *-cygwin* | *-solaris*)\n     GLIBCXX_CHECK_COMPILER_FEATURES"}]}