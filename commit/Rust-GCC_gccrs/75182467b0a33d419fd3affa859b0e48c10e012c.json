{"sha": "75182467b0a33d419fd3affa859b0e48c10e012c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUxODI0NjdiMGEzM2Q0MTlmZDNhZmZhODU5YjBlNDhjMTBlMDEyYw==", "commit": {"author": {"name": "Jeff Sturm", "email": "jsturm@one-point.com", "date": "2003-11-25T17:32:54Z"}, "committer": {"name": "Jeff Sturm", "email": "jsturm@gcc.gnu.org", "date": "2003-11-25T17:32:54Z"}, "message": "re PR java/13183 ([unit-at-a-time] incorrect multidimensional array initializer with -O2)\n\nFix PR java/13183.\n* constants.c (cpool_for_class): New function.\n(outgoing_cpool): Remove global variable.\n(alloc_name_constant): Use cpool_for_class.\n(build_constants_constructor): Likewise.\n* decl.c (java_expand_body): Set current_class.\n* java-tree.h (outgoing_cpool) Remove declaration.\n(init_outgoing_cpool): Likewise.\n* jcf-parse.c (init_outgoing_cpool): Remove function.\n(parse_class_file): Don't call init_outgoing_cpool.\n* parse.y (java_complete_expand_methods): Don't call\ninit_outgoing_cpool.  Don't save outgoing_cpool.\n(java_expand_classes): Don't restore outgoing_cpool.\n(java_finish_classes): Likewise.\n\nFrom-SVN: r73926", "tree": {"sha": "658c8162441bcbc5b5ac3ccf09f08949ff878437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/658c8162441bcbc5b5ac3ccf09f08949ff878437"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75182467b0a33d419fd3affa859b0e48c10e012c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75182467b0a33d419fd3affa859b0e48c10e012c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75182467b0a33d419fd3affa859b0e48c10e012c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75182467b0a33d419fd3affa859b0e48c10e012c/comments", "author": null, "committer": null, "parents": [{"sha": "fbe3f99721495a80dbee7c0a49009757c4f86a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbe3f99721495a80dbee7c0a49009757c4f86a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbe3f99721495a80dbee7c0a49009757c4f86a5b"}], "stats": {"total": 57, "additions": 36, "deletions": 21}, "files": [{"sha": "1a34e36a6a7623c9f296fbc3d069e73bc264f068", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -1,3 +1,20 @@\n+2003-11-25  Jeff Sturm  <jsturm@one-point.com>\n+\n+\tFix PR java/13183.\n+\t* constants.c (cpool_for_class): New function.\n+\t(outgoing_cpool): Remove global variable.\n+\t(alloc_name_constant): Use cpool_for_class.\n+\t(build_constants_constructor): Likewise.\n+\t* decl.c (java_expand_body): Set current_class.\n+\t* java-tree.h (outgoing_cpool) Remove declaration.\n+\t(init_outgoing_cpool): Likewise.\n+\t* jcf-parse.c (init_outgoing_cpool): Remove function.\n+\t(parse_class_file): Don't call init_outgoing_cpool.\n+\t* parse.y (java_complete_expand_methods): Don't call\n+\tinit_outgoing_cpool.  Don't save outgoing_cpool.\n+\t(java_expand_classes): Don't restore outgoing_cpool.\n+\t(java_finish_classes): Likewise.\n+\n 2003-11-24  Mohan Embar  <gnustuff@thisiscool.com>\n \n \t* Make-lang.in: (java.install-common) Add"}, {"sha": "8a1fe1bb4ea4ae40def704908d851f6b50775348", "filename": "gcc/java/constants.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -37,6 +37,7 @@ static int find_class_or_string_constant (CPool *, int, tree);\n static int find_name_and_type_constant (CPool *, tree, tree);\n static tree get_tag_node (int);\n static tree build_constant_data_ref (void);\n+static CPool *cpool_for_class (tree);\n \n /* Set the INDEX'th constant in CPOOL to have the given TAG and VALUE. */\n \n@@ -315,8 +316,6 @@ write_constant_pool (CPool *cpool, unsigned char *buffer, int length)\n     abort ();\n }\n \n-CPool *outgoing_cpool;\n-\n static GTY(()) tree tag_nodes[13];\n static tree\n get_tag_node (int tag)\n@@ -328,6 +327,21 @@ get_tag_node (int tag)\n   return tag_nodes[tag];\n }\n \n+/* Given a class, return its constant pool, creating one if necessary.  */\n+\n+static CPool *\n+cpool_for_class (tree class)\n+{\n+  CPool *cpool = TYPE_CPOOL (class);\n+\n+  if (cpool == NULL)\n+    {\n+      cpool = ggc_alloc_cleared (sizeof (struct CPool));\n+      TYPE_CPOOL (class) = cpool;\n+    }\n+  return cpool;\n+}\n+\n /* Look for a constant pool entry that matches TAG and NAME.\n    Creates a new entry if not found.\n    TAG is one of CONSTANT_Utf8, CONSTANT_String or CONSTANT_Class.\n@@ -337,6 +351,7 @@ get_tag_node (int tag)\n int\n alloc_name_constant (int tag, tree name)\n {\n+  CPool *outgoing_cpool = cpool_for_class (current_class);\n   return find_tree_constant (outgoing_cpool, tag, name);\n }\n \n@@ -414,6 +429,7 @@ build_ref_from_constant_pool (int index)\n tree\n build_constants_constructor (void)\n {\n+  CPool *outgoing_cpool = cpool_for_class (current_class);\n   tree tags_value, data_value;\n   tree cons;\n   tree tags_list = NULL_TREE;"}, {"sha": "014fcc7baab0e0ba05b8ab01be03deeaac2b75f4", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -1860,6 +1860,7 @@ java_expand_body (tree fndecl)\n \n   current_function_decl = fndecl;\n   input_location = DECL_SOURCE_LOCATION (fndecl);\n+  current_class = DECL_CONTEXT (fndecl);\n \n   timevar_push (TV_EXPAND);\n "}, {"sha": "c0ffac5143e356a4307e6f8799ec68bcf432dd67", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -694,9 +694,6 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n \n #define nativecode_ptr_type_node ptr_type_node\n \n-/* They need to be reset before processing each class */\n-extern GTY(()) struct CPool *outgoing_cpool; \n-\n #define wfl_operator \\\n   java_global_trees[JTI_WFL_OPERATOR]\n \n@@ -1219,7 +1216,6 @@ extern int enclosing_context_p (tree, tree);\n extern void complete_start_java_method (tree);\n extern tree build_result_decl (tree);\n extern void emit_handlers (void);\n-extern void init_outgoing_cpool (void);\n extern void make_class_data (tree);\n extern void register_class (void);\n extern int alloc_name_constant (int, tree);"}, {"sha": "71d447e400d3e1ad6d7b598c1ac7128c4886baca", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -693,12 +693,6 @@ load_inner_classes (tree cur_class)\n     }\n }\n \n-void\n-init_outgoing_cpool (void)\n-{\n-  outgoing_cpool = ggc_alloc_cleared (sizeof (struct CPool));\n-}\n-\n static void\n parse_class_file (void)\n {\n@@ -710,7 +704,6 @@ parse_class_file (void)\n   input_filename = DECL_SOURCE_FILE (TYPE_NAME (current_class));\n   input_line = 0;\n   (*debug_hooks->start_source_file) (input_line, input_filename);\n-  init_outgoing_cpool ();\n \n   /* Currently we always have to emit calls to _Jv_InitClass when\n      compiling from class files.  */"}, {"sha": "267198c65f9555f4d32078475b1cb6bc39d667da", "filename": "gcc/java/parse.y", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75182467b0a33d419fd3affa859b0e48c10e012c/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=75182467b0a33d419fd3affa859b0e48c10e012c", "patch": "@@ -7689,9 +7689,6 @@ java_complete_expand_methods (tree class_decl)\n \n   current_class = TREE_TYPE (class_decl);\n \n-  /* Initialize a new constant pool */\n-  init_outgoing_cpool ();\n-\n   /* Pre-expand <clinit> to figure whether we really need it or\n      not. If we do need it, we pre-expand the static fields so they're\n      ready to be used somewhere else. <clinit> will be fully expanded\n@@ -7775,9 +7772,6 @@ java_complete_expand_methods (tree class_decl)\n       if (DECL_CONSTRUCTOR_P (decl)\n \t  && verify_constructor_circularity (decl, decl))\n \tbreak;\n-\n-  /* Save the constant pool. We'll need to restore it later. */\n-  TYPE_CPOOL (current_class) = outgoing_cpool;\n }\n \n /* Attempt to create <clinit>. Pre-expand static fields so they can be\n@@ -9157,7 +9151,6 @@ java_expand_classes (void)\n \t   current = TREE_CHAIN (current))\n \t{\n \t  current_class = TREE_TYPE (TREE_VALUE (current));\n-\t  outgoing_cpool = TYPE_CPOOL (current_class);\n \t  if (flag_emit_class_files)\n \t    write_classfile (current_class);\n \t  if (flag_emit_xref)\n@@ -9179,7 +9172,6 @@ java_finish_classes (void)\n       for (current = ctxp->class_list; current; current = TREE_CHAIN (current))\n \t{\n \t  current_class = TREE_TYPE (current);\n-\t  outgoing_cpool = TYPE_CPOOL (current_class);\n \t  finish_class ();\n \t}\n     }"}]}