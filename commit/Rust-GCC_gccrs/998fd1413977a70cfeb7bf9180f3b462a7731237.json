{"sha": "998fd1413977a70cfeb7bf9180f3b462a7731237", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk4ZmQxNDEzOTc3YTcwY2ZlYjdiZjkxODBmM2I0NjJhNzczMTIzNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-09T18:50:56Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-03-09T18:50:56Z"}, "message": "re PR rtl-optimization/84682 (internal compiler error: Segmentation fault (process_address_1))\n\n\tPR rtl-optimization/84682\n\t* lra-constraints.c (process_address_1): Check is_address flag\n\tfor address constraints.\n\t(process_alt_operands): Likewise.\n\t* lra.c (lra_set_insn_recog_data): Pass asm operand locs to\n\tpreprocess_constraints.\n\t* recog.h (preprocess_constraints): Add oploc parameter.\n\tAdjust callers.\n\n\tPR rtl-optimization/84682\n\t* gcc.dg/torture/pr84682-1.c: New.\n\t* gcc.dg/torture/pr84682-2.c: New.\n\t* gcc.dg/torture/pr84682-3.c: New.\n\nFrom-SVN: r258393", "tree": {"sha": "12fc5f25e3d71e6b873da993f69004f09ea99260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12fc5f25e3d71e6b873da993f69004f09ea99260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/998fd1413977a70cfeb7bf9180f3b462a7731237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998fd1413977a70cfeb7bf9180f3b462a7731237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/998fd1413977a70cfeb7bf9180f3b462a7731237", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/998fd1413977a70cfeb7bf9180f3b462a7731237/comments", "author": null, "committer": null, "parents": [{"sha": "300e61fa150ce9fa7bc86784aaa6baeffd174c2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/300e61fa150ce9fa7bc86784aaa6baeffd174c2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/300e61fa150ce9fa7bc86784aaa6baeffd174c2f"}], "stats": {"total": 89, "additions": 78, "deletions": 11}, "files": [{"sha": "4d0b1592dafa52636ea6bddec374721892842e54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -1,3 +1,16 @@\n+2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/84682\n+\t* lra-constraints.c (process_address_1): Check is_address flag\n+\tfor address constraints.\n+\t(process_alt_operands): Likewise.\n+\t* lra.c (lra_set_insn_recog_data): Pass asm operand locs to\n+\tpreprocess_constraints.\n+\t* recog.h (preprocess_constraints): Add oploc parameter.\n+\tAdjust callers.\n+\t* recog.c (preprocess_constraints): Test address_operand for\n+\tCT_ADDRESS constraints.\n+\n 2018-03-09  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/83712"}, {"sha": "118b65f6a23c99cbbfb6721595f645fc555150dc", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -2276,6 +2276,12 @@ process_alt_operands (int only_alternative)\n \t\t      break;\n \n \t\t    case CT_ADDRESS:\n+\t\t      /* An asm operand with an address constraint\n+\t\t\t that doesn't satisfy address_operand has\n+\t\t\t is_address cleared, so that we don't try to\n+\t\t\t make a non-address fit.  */\n+\t\t      if (!curr_static_id->operand[nop].is_address)\n+\t\t\tbreak;\n \t\t      /* If we didn't already win, we can reload the address\n \t\t\t into a base register.  */\n \t\t      if (satisfies_address_constraint_p (op, cn))\n@@ -3236,7 +3242,14 @@ process_address_1 (int nop, bool check_only_p,\n       && GET_CODE (XEXP (op, 0)) == SCRATCH)\n     return false;\n \n-  if (insn_extra_address_constraint (cn))\n+  if (insn_extra_address_constraint (cn)\n+      /* When we find an asm operand with an address constraint that\n+\t doesn't satisfy address_operand to begin with, we clear\n+\t is_address, so that we don't try to make a non-address fit.\n+\t If the asm statement got this far, it's because other\n+\t constraints are available, and we'll use them, disregarding\n+\t the unsatisfiable address ones.  */\n+      && curr_static_id->operand[nop].is_address)\n     decompose_lea_address (&ad, curr_id->operand_loc[nop]);\n   /* Do not attempt to decompose arbitrary addresses generated by combine\n      for asm operands with loose constraints, e.g 'X'.  */"}, {"sha": "3e11adf8ce8258647add30415e31ea47c98f1ae5", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -1039,7 +1039,8 @@ lra_set_insn_recog_data (rtx_insn *insn)\n \t{\n \t  operand_alternative *op_alt = XCNEWVEC (operand_alternative,\n \t\t\t\t\t\t  nalt * nop);\n-\t  preprocess_constraints (nop, nalt, constraints, op_alt);\n+\t  preprocess_constraints (nop, nalt, constraints, op_alt,\n+\t\t\t\t  data->operand_loc);\n \t  setup_operand_alternative (data, op_alt);\n \t}\n     }"}, {"sha": "0a8fa2ce46cf617a2372e7996e2492d1589a3ded", "filename": "gcc/recog.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -2331,15 +2331,20 @@ extract_insn (rtx_insn *insn)\n   which_alternative = -1;\n }\n \n-/* Fill in OP_ALT_BASE for an instruction that has N_OPERANDS operands,\n-   N_ALTERNATIVES alternatives and constraint strings CONSTRAINTS.\n-   OP_ALT_BASE has N_ALTERNATIVES * N_OPERANDS entries and CONSTRAINTS\n-   has N_OPERANDS entries.  */\n+/* Fill in OP_ALT_BASE for an instruction that has N_OPERANDS\n+   operands, N_ALTERNATIVES alternatives and constraint strings\n+   CONSTRAINTS.  OP_ALT_BASE has N_ALTERNATIVES * N_OPERANDS entries\n+   and CONSTRAINTS has N_OPERANDS entries.  OPLOC should be passed in\n+   if the insn is an asm statement and preprocessing should take the\n+   asm operands into account, e.g. to determine whether they could be\n+   addresses in constraints that require addresses; it should then\n+   point to an array of pointers to each operand.  */\n \n void\n preprocess_constraints (int n_operands, int n_alternatives,\n \t\t\tconst char **constraints,\n-\t\t\toperand_alternative *op_alt_base)\n+\t\t\toperand_alternative *op_alt_base,\n+\t\t\trtx **oploc)\n {\n   for (int i = 0; i < n_operands; i++)\n     {\n@@ -2426,6 +2431,9 @@ preprocess_constraints (int n_operands, int n_alternatives,\n \t\t      break;\n \n \t\t    case CT_ADDRESS:\n+\t\t      if (oploc && !address_operand (*oploc[i], VOIDmode))\n+\t\t\tbreak;\n+\n \t\t      op_alt[i].is_address = 1;\n \t\t      op_alt[i].cl\n \t\t\t= (reg_class_subunion\n@@ -2470,7 +2478,8 @@ preprocess_insn_constraints (unsigned int icode)\n \n   for (int i = 0; i < n_operands; ++i)\n     constraints[i] = insn_data[icode].operand[i].constraint;\n-  preprocess_constraints (n_operands, n_alternatives, constraints, op_alt);\n+  preprocess_constraints (n_operands, n_alternatives, constraints, op_alt,\n+\t\t\t  NULL);\n \n   this_target_recog->x_op_alt[icode] = op_alt;\n   return op_alt;\n@@ -2493,7 +2502,8 @@ preprocess_constraints (rtx_insn *insn)\n       int n_entries = n_operands * n_alternatives;\n       memset (asm_op_alt, 0, n_entries * sizeof (operand_alternative));\n       preprocess_constraints (n_operands, n_alternatives,\n-\t\t\t      recog_data.constraints, asm_op_alt);\n+\t\t\t      recog_data.constraints, asm_op_alt,\n+\t\t\t      NULL);\n       recog_op_alt = asm_op_alt;\n     }\n }"}, {"sha": "eca62803458c4fdeaebd3247c7e5678cea89875c", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -136,7 +136,7 @@ extern void extract_constrain_insn (rtx_insn *insn);\n extern void extract_constrain_insn_cached (rtx_insn *);\n extern void extract_insn_cached (rtx_insn *);\n extern void preprocess_constraints (int, int, const char **,\n-\t\t\t\t    operand_alternative *);\n+\t\t\t\t    operand_alternative *, rtx **);\n extern const operand_alternative *preprocess_insn_constraints (unsigned int);\n extern void preprocess_constraints (rtx_insn *);\n extern rtx_insn *peep2_next_insn (int);"}, {"sha": "18d987b46d6abd87c1412caeaf591e7053b9911a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -1,3 +1,10 @@\n+2018-03-09  Alexandre Oliva <aoliva@redhat.com>\n+\n+\tPR rtl-optimization/84682\n+\t* gcc.dg/torture/pr84682-1.c: New.\n+\t* gcc.dg/torture/pr84682-2.c: New.\n+\t* gcc.dg/torture/pr84682-3.c: New.\n+\n 2018-03-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84724\n@@ -62,8 +69,8 @@\n \tPR tree-optimization/84746\n \t* gcc.dg/torture/pr84746.c: New testcase.\n \n-2018-03-08  Alexandre Oliva <aoliva@redhat.com>\n \n+2018-03-08  Alexandre Oliva <aoliva@redhat.com>\n \tPR debug/84404\n \tPR debug/84408\n \t* gcc.dg/graphite/pr84404.c: New."}, {"sha": "b189ed78cdc33bd894d9195651f2172af4f2dd82", "filename": "gcc/testsuite/gcc.dg/torture/pr84682-1.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-1.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+\n+void b(char a) {\n+        asm(\"\" : : \"pir\" (a));\n+}"}, {"sha": "5abda5fd136c3f3e3d48e3e9a4fe606208edffc5", "filename": "gcc/testsuite/gcc.dg/torture/pr84682-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-2.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+int a;\n+void b() {\n+  float c;\n+  for (int d; d;)\n+    ;\n+  a = c;\n+  asm(\"\" : : \"pir\"(c));\n+}"}, {"sha": "543a307d6c120c76998c26b86889da8bf85b1b2f", "filename": "gcc/testsuite/gcc.dg/torture/pr84682-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/998fd1413977a70cfeb7bf9180f3b462a7731237/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr84682-3.c?ref=998fd1413977a70cfeb7bf9180f3b462a7731237", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* This is like pr84682-1.c, but with an extra memory constraint, to\n+   check that we don't disable process_address altogether just because\n+   of the disabled address constraint.  */\n+\n+void b(char a) {\n+        asm(\"\" : : \"pmir\" (a));\n+}"}]}