{"sha": "e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNmMWYyNDI2ZDA4MzZkYTA1NGIwMzE2YzcxZWMwM2Y4ZTE4ZDZhMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-01T21:58:22Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1995-02-01T21:58:22Z"}, "message": "Add preliminary V.4 and eABI support.\n\nFrom-SVN: r8851", "tree": {"sha": "6b0034996e0fa9796a11cf3b968e4efd95488c0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b0034996e0fa9796a11cf3b968e4efd95488c0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/comments", "author": null, "committer": null, "parents": [{"sha": "4d30c3638775328b75bde5baf4849c70476f4a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d30c3638775328b75bde5baf4849c70476f4a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d30c3638775328b75bde5baf4849c70476f4a5e"}], "stats": {"total": 332, "additions": 332, "deletions": 0}, "files": [{"sha": "f7375bc03bea47df6b3f97c297a8033a0510e0a3", "filename": "gcc/config/rs6000/eabi.h", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Feabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Feabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.h?ref=e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "patch": "@@ -0,0 +1,60 @@\n+/* Core target definitions for GNU compiler\n+   for IBM RS/6000 PowerPC targeted to embedded ELF systems.\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+   Contributed by Cygnus Support.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* eABI local switches */\n+/* Set PCC_BITFIELD_TYPE_MATTERS to 0 to ignore the type of bitfields\n+   when calculating alignment.  */\n+#define\tMASK_NO_BITFIELD_TYPE\t0x40000000\n+\n+#define\tTARGET_NO_BITFIELD_TYPE\t(target_flags & MASK_NO_BITFIELD_TYPE)\n+#define\tTARGET_BITFIELD_TYPE\t(! TARGET_NO_BITFIELD_TYPE)\n+\n+#define SUBTARGET_SWITCHES\t\t\t\t\t\t\\\n+  { \"bit-align\",\t-MASK_NO_BITFIELD_TYPE },\t\t\t\\\n+  { \"no-bit-align\",\t MASK_NO_BITFIELD_TYPE },\n+\n+#include \"rs6000/sysv4.h\"\n+\n+/* For now, make stabs the default debugging type, not dwarf. */\n+#undef\tPREFERRED_DEBUGGING_TYPE\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Make int foo : 8 not cause structures to be aligned to an int boundary */\n+\n+#undef\tPCC_BITFIELD_TYPE_MATTERS\n+#define\tPCC_BITFIELD_TYPE_MATTERS (TARGET_BITFIELD_TYPE)\n+\n+/* Align stack to 8 byte boundaries, rather than 16 bytes Sys V.4 uses */\n+#undef\tSTACK_BOUNDARY\n+#define\tSTACK_BOUNDARY\t64\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#undef\tBIGGEST_ALIGNMENT\n+#define BIGGEST_ALIGNMENT 64\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (PowerPC Embedded)\");\n+\n+/* FIXME: These should actually indicate PowerPC, when there is some\n+   standard way of expressing that.  */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+  \"-DPPC -D__embedded__ -Asystem(embedded) -Acpu(powerpc) -Amachine(powerpc)\""}, {"sha": "f0c1363e688174e99d1310a0b3173cda70f4028c", "filename": "gcc/config/rs6000/sysv4.h", "status": "added", "additions": 218, "deletions": 0, "changes": 218, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "patch": "@@ -0,0 +1,218 @@\n+/* Target definitions for GNU compiler for PowerPC running System V.4\n+   Copyright (C) 1995, Free Software Foundation, Inc.\n+   Contributed by Cygnus Support.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"rs6000/powerpc.h\"\n+\n+/* Don't generate XCOFF debugging information.  */\n+\n+#undef XCOFF_DEBUGGING_INFO\n+\n+/* Don't use the COFF object file format.  */\n+\n+#undef OBJECT_FORMAT_COFF\n+\n+/* The XCOFF support uses weird symbol suffixes, which we don't want\n+   for ELF.  */\n+\n+#undef RS6000_OUTPUT_BASENAME\n+#define RS6000_OUTPUT_BASENAME(FILE, NAME) assemble_name (FILE, NAME)\n+\n+/* Don't bother to output .extern pseudo-ops.  They are not needed by\n+   ELF assemblers.  */\n+\n+#undef ASM_OUTPUT_EXTERNAL\n+\n+/* Undefine some things which are defined by the generic svr4.h.  */\n+\n+#undef ASM_FILE_END\n+#undef ASM_OUTPUT_EXTERNAL_LIBCALL\n+#undef READONLY_DATA_SECTION\n+#undef SELECT_SECTION\n+#undef ASM_DECLARE_FUNCTION_NAME\n+\n+/* Use the regular svr4 definitions.  */\n+\n+#include \"svr4.h\"\n+\n+/* Prefix and suffix to use to saving floating point */\n+#undef\tSAVE_FP_PREFIX\n+#undef\tSAVE_FP_SUFFIX\n+#define\tSAVE_FP_PREFIX \"_savefpr_\"\n+#define SAVE_FP_SUFFIX \"_l\"\n+\n+/* Prefix and suffix to use to restoring floating point */\n+#undef\tRESTORE_FP_PREFIX\n+#undef\tRESTORE_FP_SUFFIX\n+#define\tRESTORE_FP_PREFIX \"_restfpr_\"\n+#define RESTORE_FP_SUFFIX \"_l\"\n+\n+/* Type used for ptrdiff_t, as a string used in a declaration.  */\n+#undef\tPTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+/* Type used for wchar_t, as a string used in a declaration.  */\n+#undef\tWCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+/* Width of wchar_t in bits.  */\n+#undef\tWCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+/* Align stack to 16 byte boundaries */\n+#undef\tSTACK_BOUNDARY\n+#define\tSTACK_BOUNDARY\t128\n+\n+/* No data type wants to be aligned rounder than this.  */\n+#undef\tBIGGEST_ALIGNMENT\n+#define BIGGEST_ALIGNMENT 128\n+\n+/* Use ELF style section commands.  */\n+\n+#undef TEXT_SECTION_ASM_OP\n+#define TEXT_SECTION_ASM_OP\t\"\\t.section\\t\\\".text\\\"\"\n+\n+#undef DATA_SECTION_ASM_OP\n+#define DATA_SECTION_ASM_OP\t\"\\t.section\\t\\\".data\\\"\"\n+\n+/* Besides the usual ELF sections, we need a toc section.  */\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_const, in_ctors, in_dtors, in_toc\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  TOC_SECTION_FUNCTION\n+\n+#define TOC_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+toc_section ()\t\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_MINIMAL_TOC)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      static int toc_initialized = 0;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (! toc_initialized)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  fprintf (asm_out_file, \"%s\\n\", TOC_SECTION_ASM_OP);\t\t\\\n+\t  fprintf (asm_out_file, \".LCTOC0:\\n\");\t\t\t\t\\\n+\t  fprintf (asm_out_file, \"\\t.tc .LCTOC1\\n\");\t\t\t\\\n+\t  fprintf (asm_out_file, \"%s\\n\", MINIMAL_TOC_SECTION_ASM_OP);\t\\\n+\t  fprintf (asm_out_file, \".LCTOC1:\\n\");\t\t\t\t\\\n+\t  toc_initialized = 1;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_toc)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\",\t\t\t\t\t\\\n+\t       (TARGET_MINIMAL_TOC\t\t\t\t\t\\\n+\t\t? MINIMAL_TOC_SECTION_ASM_OP\t\t\t\t\\\n+\t\t: TOC_SECTION_ASM_OP));\t\t\t\t\t\\\n+      in_section = in_toc;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define TOC_SECTION_ASM_OP \"\\t.section\\t.got,\\\"aw\\\"\"\n+#define MINIMAL_TOC_SECTION_ASM_OP \"\\t.section\\t.got1,\\\"aw\\\"\"\n+\n+/* Use the TOC section for TOC entries.  */\n+\n+#undef SELECT_RTX_SECTION\n+#define SELECT_RTX_SECTION(MODE, X)\t\t\\\n+{ if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (X))\t\\\n+    toc_section ();\t\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    const_section ();\t\t\t\t\\\n+}\n+\n+/* These macros generate the special .type and .size directives which\n+   are used to set the corresponding fields of the linker symbol table\n+   entries in an ELF object file under SVR4.  These macros also output\n+   the starting labels for the relevant functions/objects.  */\n+\n+/* Write the extra assembler code needed to declare a function properly.\n+   Some svr4 assemblers need to also have something extra said about the\n+   function's return value.  We allow for that here.  */\n+\n+extern void svr4_traceback ();\n+\n+#undef\tASM_DECLARE_FUNCTION_NAME\n+#define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    putc (',', FILE);\t\t\t\t\t\t\t\\\n+    fprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n+    putc ('\\n', FILE);\t\t\t\t\t\t\t\\\n+    svr4_traceback (FILE, NAME, DECL);\t\t\t\t\t\\\n+    ASM_DECLARE_RESULT (FILE, DECL_RESULT (DECL));\t\t\t\\\n+    ASM_OUTPUT_LABEL(FILE, NAME);\t\t\t\t\t\\\n+  } while (0)\n+\n+/* How to renumber registers for dbx and gdb.  */\n+\n+#define DBX_REGISTER_NUMBER(REGNO) (REGNO)\n+\n+/* svr4.h overrides ASM_OUTPUT_INTERNAL_LABEL.  */\n+\n+#undef ASM_OUTPUT_INTERNAL_LABEL_PREFIX\n+#define ASM_OUTPUT_INTERNAL_LABEL_PREFIX(FILE,PREFIX)\t\\\n+  fprintf (FILE, \".%s\", PREFIX)\n+\n+/* Pass -mppc to the assembler, since that is what powerpc.h currently\n+   implies.  */\n+#undef ASM_SPEC\n+#define ASM_SPEC \\\n+  \"-u -mppc %{V} %{v:%{!V:-V}} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*}\"\n+/* This is the end of what might become sysv4.h.  */\n+\n+/* Allow stabs and dwarf, prefer dwarf.  */\n+#define PREFERRED_DEBUGGING_TYPE DWARF_DEBUG\n+#define\tDBX_DEBUGGING_INFO\n+#define\tDWARF_DEBUGGING_INFO\n+\n+/* Line numbers are relative to the current function.  */\n+\n+#undef  ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(file, line)\t\t\\\n+  { static int sym_lineno = 1;\t\t\t\t\\\n+    fprintf (file, \".stabn 68,0,%d,.LM%d-%s\\n.LM%d:\\n\",\\\n+\t     line, sym_lineno, \t\t\t\t\\\n+\t     XSTR (XEXP (DECL_RTL (current_function_decl), 0), 0), \\\n+\t     sym_lineno);\t\t\t\t\\\n+    sym_lineno += 1; }\n+\n+/* But, to make this work, we have to output the stabs for the function\n+   name *first*...  */\n+\n+#define\tDBX_FUNCTION_FIRST\n+\n+/* This is the end of what might become sysv4dbx.h.  */\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (PowerPC System V.4)\");\n+\n+/* FIXME: These should actually indicate PowerPC, when there is some\n+   standard way of expressing that.  */\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \\\n+  \"-DPPC -Dunix -D__svr4__ -Asystem(unix) -Asystem(svr4) -Acpu(powerpc) -Amachine(powerpc)\""}, {"sha": "2a661e3599935bc42ef4d607c65a497fdabe3fe0", "filename": "gcc/config/rs6000/x-sysv4", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fx-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fx-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-sysv4?ref=e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "patch": "@@ -0,0 +1,2 @@\n+X_CFLAGS=-DSVR4\n+ALLOCA=alloca.o"}, {"sha": "c09cd676b1906a7c300af45221fc07c3092019c2", "filename": "gcc/config/rs6000/xm-sysv4.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3f1f2426d0836da054b0316c71ec03f8e18d6a3/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h?ref=e3f1f2426d0836da054b0316c71ec03f8e18d6a3", "patch": "@@ -0,0 +1,52 @@\n+/* Configuration for GNU C-compiler for PowerPC running System V.4.\n+   Copyright (C) 1995 Free Software Foundation, Inc.\n+\n+   Cloned from sparc/xm-sysv4.h by Michael Meissner (meissner@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+\n+/* #defines that need visibility everywhere.  */\n+#define FALSE 0\n+#define TRUE 1\n+\n+/* This describes the machine the compiler is hosted on.  */\n+#define HOST_BITS_PER_CHAR 8\n+#define HOST_BITS_PER_SHORT 16\n+#define HOST_BITS_PER_INT 32\n+#define HOST_BITS_PER_LONG 32\n+#if 0\n+#define HOST_BITS_PER_LONGLONG 64\n+#endif\n+\n+/* Doubles are stored in memory with the high order word first.  This\n+   matters when cross-compiling.  */\n+#define HOST_WORDS_BIG_ENDIAN 1\n+\n+/* target machine dependencies.\n+   tm.h is a symbolic link to the actual target specific file.   */\n+#include \"tm.h\"\n+\n+/* Arguments to use with `exit'.  */\n+#define SUCCESS_EXIT_CODE 0\n+#define FATAL_EXIT_CODE 33\n+\n+#include \"xm-svr4.h\"\n+\n+#ifndef __GNUC__\n+#define ONLY_INT_FIELDS\n+#endif"}]}