{"sha": "97955d55bbe5aab1da0427e11e740851c83e18ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5NTVkNTViYmU1YWFiMWRhMDQyN2UxMWU3NDA4NTFjODNlMThmZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2004-03-29T14:48:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-03-29T14:48:45Z"}, "message": "function.c (put_var_into_stack): If old RTL was ADDRESSOF, update the address inside the old RTL.\n\n\t* function.c (put_var_into_stack): If old RTL was ADDRESSOF, update\n\tthe address inside the old RTL.\n\nFrom-SVN: r80057", "tree": {"sha": "0267fcb37b88731de6ad0267822013c7567f8316", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0267fcb37b88731de6ad0267822013c7567f8316"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97955d55bbe5aab1da0427e11e740851c83e18ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97955d55bbe5aab1da0427e11e740851c83e18ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97955d55bbe5aab1da0427e11e740851c83e18ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97955d55bbe5aab1da0427e11e740851c83e18ff/comments", "author": null, "committer": null, "parents": [{"sha": "2820d220585177ca4e2e3136bf8ff255303ba6db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2820d220585177ca4e2e3136bf8ff255303ba6db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2820d220585177ca4e2e3136bf8ff255303ba6db"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "28a63535fe3eb27327e92d5b38d5484e7576e48d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97955d55bbe5aab1da0427e11e740851c83e18ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97955d55bbe5aab1da0427e11e740851c83e18ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97955d55bbe5aab1da0427e11e740851c83e18ff", "patch": "@@ -1,3 +1,8 @@\n+2004-03-29  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* function.c (put_var_into_stack): If old RTL was ADDRESSOF, update\n+\tthe address inside the old RTL.\n+\n 2004-03-28  Zack Weinberg  <zack@codesourcery.com>\n \n \t* c-decl.c: Verify that C_SIZEOF_STRUCT_LANG_IDENTIFIER is correct."}, {"sha": "48e2f5d79d9ec95909079004a7dc400645881159", "filename": "gcc/function.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97955d55bbe5aab1da0427e11e740851c83e18ff/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97955d55bbe5aab1da0427e11e740851c83e18ff/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=97955d55bbe5aab1da0427e11e740851c83e18ff", "patch": "@@ -1287,7 +1287,7 @@ init_temp_slots (void)\n void\n put_var_into_stack (tree decl, int rescan)\n {\n-  rtx reg;\n+  rtx orig_reg, reg;\n   enum machine_mode promoted_mode, decl_mode;\n   struct function *function = 0;\n   tree context;\n@@ -1299,9 +1299,9 @@ put_var_into_stack (tree decl, int rescan)\n   context = decl_function_context (decl);\n \n   /* Get the current rtl used for this object and its original mode.  */\n-  reg = (TREE_CODE (decl) == SAVE_EXPR\n-\t ? SAVE_EXPR_RTL (decl)\n-\t : DECL_RTL_IF_SET (decl));\n+ orig_reg = reg = (TREE_CODE (decl) == SAVE_EXPR\n+\t\t   ? SAVE_EXPR_RTL (decl)\n+\t\t   : DECL_RTL_IF_SET (decl));\n \n   /* No need to do anything if decl has no rtx yet\n      since in that case caller is setting TREE_ADDRESSABLE\n@@ -1366,6 +1366,12 @@ put_var_into_stack (tree decl, int rescan)\n       else\n \tput_reg_into_stack (function, reg, TREE_TYPE (decl), promoted_mode,\n \t\t\t    decl_mode, volatilep, 0, usedp, 0);\n+\n+\t  /* If this was previously a MEM but we've removed the ADDRESSOF,\n+\t     set this address into that MEM so we always use the same\n+\t     rtx for this variable.  */\n+\t  if (orig_reg != reg && GET_CODE (orig_reg) == MEM)\n+\t    XEXP (orig_reg, 0) = XEXP (reg, 0);\n     }\n   else if (GET_CODE (reg) == CONCAT)\n     {"}]}