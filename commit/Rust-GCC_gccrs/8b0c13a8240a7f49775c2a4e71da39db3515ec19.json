{"sha": "8b0c13a8240a7f49775c2a4e71da39db3515ec19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGIwYzEzYTgyNDBhN2Y0OTc3NWMyYTRlNzFkYTM5ZGIzNTE1ZWMxOQ==", "commit": {"author": {"name": "Johannes Singler", "email": "singler@kit.edu", "date": "2009-11-09T16:36:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-11-09T16:36:59Z"}, "message": "multiway_merge.h (multiway_merge_*, [...]): Replace int by appropriate difference_type (typedef to _SeqNumber) or _ThreadIndex.\n\n2009-11-09  Johannes Singler  <singler@kit.edu>\n\n\t* include/parallel/multiway_merge.h (multiway_merge_*,\n\t__sequential_multiway_merge, parallel_multiway_merge): Replace\n\tint by appropriate difference_type (typedef to _SeqNumber) or\n\t_ThreadIndex.\n\t* include/parallel/multiseq_selection.h (multiseq_partition,\n\tmultiseq_selection): Replace int by appropriate difference_type\n\t(typedef to _SeqNumber)\n\t* include/parallel/base.h (__get_max_threads): Replace int by\n\t_ThreadIndex.\n\t* include/parallel/balanced_quicksort.h\n\t(__qsb_local_sort_with_helping, __parallel_sort_qsb): Likewise.\n\t* include/parallel/set_operations.h (__parallel_set_operation):\n\tLikewise.\n\t* include/parallel/unique_copy.h (__parallel_unique_copy): Likewise.\n\t* include/parallel/multiway_mergesort.h (_SplitConsistently,\n\tparallel_sort_mwms_pu, parallel_sort_mwms): Likewise.\n\t* include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n\tLikewise.\n\t* include/parallel/partition.h (__parallel_partition): Replace int\n\tby appropriate difference_type or _ThreadIndex.\n\nFrom-SVN: r154039", "tree": {"sha": "026b205042ea96298e8e0e814c8c833472080fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/026b205042ea96298e8e0e814c8c833472080fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b0c13a8240a7f49775c2a4e71da39db3515ec19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0c13a8240a7f49775c2a4e71da39db3515ec19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b0c13a8240a7f49775c2a4e71da39db3515ec19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b0c13a8240a7f49775c2a4e71da39db3515ec19/comments", "author": null, "committer": null, "parents": [{"sha": "e0dc3601d3d3216b9a67985fd0d7d388751a53e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0dc3601d3d3216b9a67985fd0d7d388751a53e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0dc3601d3d3216b9a67985fd0d7d388751a53e0"}], "stats": {"total": 235, "additions": 139, "deletions": 96}, "files": [{"sha": "856f53887bc8d2596c51b03a543dd5a9889a5e67", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -1,3 +1,26 @@\n+2009-11-09  Johannes Singler  <singler@kit.edu>\n+\n+\t* include/parallel/multiway_merge.h (multiway_merge_*,\n+\t__sequential_multiway_merge, parallel_multiway_merge): Replace\n+\tint by appropriate difference_type (typedef to _SeqNumber) or\n+\t_ThreadIndex.\n+\t* include/parallel/multiseq_selection.h (multiseq_partition,\n+\tmultiseq_selection): Replace int by appropriate difference_type\n+\t(typedef to _SeqNumber)\n+\t* include/parallel/base.h (__get_max_threads): Replace int by\n+\t_ThreadIndex.\n+\t* include/parallel/balanced_quicksort.h\n+\t(__qsb_local_sort_with_helping, __parallel_sort_qsb): Likewise.\n+\t* include/parallel/set_operations.h (__parallel_set_operation):\n+\tLikewise.\n+\t* include/parallel/unique_copy.h (__parallel_unique_copy): Likewise.\n+\t* include/parallel/multiway_mergesort.h (_SplitConsistently,\n+\tparallel_sort_mwms_pu, parallel_sort_mwms): Likewise.\n+\t* include/parallel/partial_sum.h (__parallel_partial_sum_linear):\n+\tLikewise.\n+\t* include/parallel/partition.h (__parallel_partition): Replace int\n+\tby appropriate difference_type or _ThreadIndex.\n+\n 2009-11-08  Jason Merrill  <jason@redhat.com>\n \n \t* include/ext/sso_string_base.h (_M_mutate): Remove extra 'const'."}, {"sha": "4619415a810e4e0aa2af8491098ed318dd9e0c4a", "filename": "libstdc++-v3/include/parallel/balanced_quicksort.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbalanced_quicksort.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -245,7 +245,8 @@ namespace __gnu_parallel\n   template<typename _RAIter, typename _Compare>\n     void\n     __qsb_local_sort_with_helping(_QSBThreadLocal<_RAIter>** __tls,\n-\t\t\t\t  _Compare& __comp, int __iam, bool __wait)\n+\t\t\t\t  _Compare& __comp, _ThreadIndex __iam,\n+\t\t\t\t  bool __wait)\n     {\n       typedef std::iterator_traits<_RAIter> _TraitsType;\n       typedef typename _TraitsType::value_type _ValueType;\n@@ -460,7 +461,7 @@ namespace __gnu_parallel\n       // 2. The largest range has at most length __n\n       // 3. Each range is larger than half of the range remaining\n       volatile _DifferenceType __elements_leftover = __n;\n-      for (int __i = 0; __i < __num_threads; ++__i)\n+      for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \t{\n           __tls[__i]->_M_elements_leftover = &__elements_leftover;\n           __tls[__i]->_M_num_threads = __num_threads;\n@@ -477,12 +478,12 @@ namespace __gnu_parallel\n #if _GLIBCXX_ASSERTIONS\n       // All stack must be empty.\n       _Piece __dummy;\n-      for (int __i = 1; __i < __num_threads; ++__i)\n+      for (_ThreadIndex __i = 1; __i < __num_threads; ++__i)\n \t_GLIBCXX_PARALLEL_ASSERT(\n           !__tls[__i]->_M_leftover_parts.pop_back(__dummy));\n #endif\n \n-      for (int __i = 0; __i < __num_threads; ++__i)\n+      for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \tdelete __tls[__i];\n       delete[] __tls;\n     }"}, {"sha": "e67134c653402d209aa8af15e683e06755a04a5a", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -81,10 +81,10 @@ namespace __gnu_parallel\n   // the OpenMP runtime unless the parallel mode is actually invoked\n   // and active, which imples that the OpenMP runtime is actually\n   // going to be linked in.\n-  inline int\n+  inline _ThreadIndex\n   __get_max_threads() \n   { \n-    int __i = omp_get_max_threads();\n+    _ThreadIndex __i = omp_get_max_threads();\n     return __i > 1 ? __i : 1; \n   }\n "}, {"sha": "1fab257ccdde2c089190849a3e84c840c526ed43", "filename": "libstdc++-v3/include/parallel/multiseq_selection.h", "status": "modified", "additions": 57, "deletions": 51, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiseq_selection.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -133,19 +133,21 @@ namespace __gnu_parallel\n \n       typedef typename std::iterator_traits<_RanSeqs>::value_type::first_type\n         _It;\n+      typedef typename std::iterator_traits<_RanSeqs>::difference_type\n+        _SeqNumber;\n       typedef typename std::iterator_traits<_It>::difference_type\n                _DifferenceType;\n       typedef typename std::iterator_traits<_It>::value_type _ValueType;\n \n-      _Lexicographic<_ValueType, int, _Compare> __lcomp(__comp);\n-      _LexicographicReverse<_ValueType, int, _Compare> __lrcomp(__comp);\n+      _Lexicographic<_ValueType, _SeqNumber, _Compare> __lcomp(__comp);\n+      _LexicographicReverse<_ValueType, _SeqNumber, _Compare> __lrcomp(__comp);\n \n       // Number of sequences, number of elements in total (possibly\n       // including padding).\n       _DifferenceType __m = std::distance(__begin_seqs, __end_seqs), __nn = 0,\n                       __nmax, __n, __r;\n \n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         {\n           __nn += std::distance(__begin_seqs[__i].first,\n                                __begin_seqs[__i].second);\n@@ -156,7 +158,7 @@ namespace __gnu_parallel\n \n       if (__rank == __nn)\n         {\n-          for (int __i = 0; __i < __m; __i++)\n+          for (_SeqNumber __i = 0; __i < __m; __i++)\n             __begin_offsets[__i] = __begin_seqs[__i].second; // Very end.\n           // Return __m - 1;\n           return;\n@@ -174,7 +176,7 @@ namespace __gnu_parallel\n \n       __ns[0] = std::distance(__begin_seqs[0].first, __begin_seqs[0].second);\n       __nmax = __ns[0];\n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         {\n           __ns[__i] = std::distance(__begin_seqs[__i].first,\n                                     __begin_seqs[__i].second);\n@@ -187,7 +189,7 @@ namespace __gnu_parallel\n       // equality iff __nmax = 2^__k - 1.\n       __l = (1ULL << __r) - 1;\n \n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         {\n           __a[__i] = 0;\n           __b[__i] = __l;\n@@ -200,21 +202,21 @@ namespace __gnu_parallel\n #define __S(__i) (__begin_seqs[__i].first)\n \n       // Initial partition.\n-      std::vector<std::pair<_ValueType, int> > __sample;\n+      std::vector<std::pair<_ValueType, _SeqNumber> > __sample;\n \n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         if (__n < __ns[__i])    //__sequence long enough\n           __sample.push_back(std::make_pair(__S(__i)[__n], __i));\n       __gnu_sequential::sort(__sample.begin(), __sample.end(), __lcomp);\n \n-      for (int __i = 0; __i < __m; __i++)       //conceptual infinity\n+      for (_SeqNumber __i = 0; __i < __m; __i++)       //conceptual infinity\n         if (__n >= __ns[__i])   //__sequence too short, conceptual infinity\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n       _DifferenceType __localrank = __rank / __l;\n \n-      int __j;\n+      _SeqNumber __j;\n       for (__j = 0;\n            __j < __localrank && ((__n + 1) <= __ns[__sample[__j].second]);\n            ++__j)\n@@ -227,9 +229,9 @@ namespace __gnu_parallel\n         {\n           __n /= 2;\n \n-          int __lmax_seq = -1;  // to avoid warning\n+          _SeqNumber __lmax_seq = -1;  // to avoid warning\n           const _ValueType* __lmax = NULL; // impossible to avoid the warning?\n-          for (int __i = 0; __i < __m; __i++)\n+          for (_SeqNumber __i = 0; __i < __m; __i++)\n             {\n               if (__a[__i] > 0)\n                 {\n@@ -250,7 +252,7 @@ namespace __gnu_parallel\n                 }\n             }\n \n-          int __i;\n+          _SeqNumber __i;\n           for (__i = 0; __i < __m; __i++)\n             {\n               _DifferenceType __middle = (__b[__i] + __a[__i]) / 2;\n@@ -263,26 +265,26 @@ namespace __gnu_parallel\n             }\n \n           _DifferenceType __leftsize = 0;\n-          for (int __i = 0; __i < __m; __i++)\n+          for (_SeqNumber __i = 0; __i < __m; __i++)\n               __leftsize += __a[__i] / (__n + 1);\n \n           _DifferenceType __skew = __rank / (__n + 1) - __leftsize;\n \n           if (__skew > 0)\n             {\n               // Move to the left, find smallest.\n-              std::priority_queue<std::pair<_ValueType, int>,\n-                std::vector<std::pair<_ValueType, int> >,\n-                _LexicographicReverse<_ValueType, int, _Compare> >\n+              std::priority_queue<std::pair<_ValueType, _SeqNumber>,\n+                std::vector<std::pair<_ValueType, _SeqNumber> >,\n+                _LexicographicReverse<_ValueType, _SeqNumber, _Compare> >\n                 __pq(__lrcomp);\n               \n-              for (int __i = 0; __i < __m; __i++)\n+              for (_SeqNumber __i = 0; __i < __m; __i++)\n                 if (__b[__i] < __ns[__i])\n                   __pq.push(std::make_pair(__S(__i)[__b[__i]], __i));\n \n               for (; __skew != 0 && !__pq.empty(); --__skew)\n                 {\n-                  int __source = __pq.top().second;\n+                  _SeqNumber __source = __pq.top().second;\n                   __pq.pop();\n \n                   __a[__source]\n@@ -297,17 +299,18 @@ namespace __gnu_parallel\n           else if (__skew < 0)\n             {\n               // Move to the right, find greatest.\n-              std::priority_queue<std::pair<_ValueType, int>,\n-                std::vector<std::pair<_ValueType, int> >,\n-                _Lexicographic<_ValueType, int, _Compare> > __pq(__lcomp);\n+              std::priority_queue<std::pair<_ValueType, _SeqNumber>,\n+                std::vector<std::pair<_ValueType, _SeqNumber> >,\n+                _Lexicographic<_ValueType, _SeqNumber, _Compare> >\n+                  __pq(__lcomp);\n \n-              for (int __i = 0; __i < __m; __i++)\n+              for (_SeqNumber __i = 0; __i < __m; __i++)\n                 if (__a[__i] > 0)\n                   __pq.push(std::make_pair(__S(__i)[__a[__i] - 1], __i));\n \n               for (; __skew != 0; ++__skew)\n                 {\n-                  int __source = __pq.top().second;\n+                  _SeqNumber __source = __pq.top().second;\n                   __pq.pop();\n \n                   __a[__source] -= __n + 1;\n@@ -331,7 +334,7 @@ namespace __gnu_parallel\n       // Maximum of left edge, minimum of right edge.\n       _ValueType* __maxleft = NULL;\n       _ValueType* __minright = NULL;\n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         {\n           if (__a[__i] > 0)\n             {\n@@ -357,8 +360,8 @@ namespace __gnu_parallel\n             }\n         }\n \n-      int __seq = 0;\n-      for (int __i = 0; __i < __m; __i++)\n+      _SeqNumber __seq = 0;\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         __begin_offsets[__i] = __S(__i) + __a[__i];\n \n       delete[] __ns;\n@@ -392,19 +395,21 @@ namespace __gnu_parallel\n \n       typedef typename std::iterator_traits<_RanSeqs>::value_type::first_type\n         _It;\n+      typedef typename std::iterator_traits<_RanSeqs>::difference_type\n+        _SeqNumber;\n       typedef typename std::iterator_traits<_It>::difference_type\n         _DifferenceType;\n \n-      _Lexicographic<_Tp, int, _Compare> __lcomp(__comp);\n-      _LexicographicReverse<_Tp, int, _Compare> __lrcomp(__comp);\n+      _Lexicographic<_Tp, _SeqNumber, _Compare> __lcomp(__comp);\n+      _LexicographicReverse<_Tp, _SeqNumber, _Compare> __lrcomp(__comp);\n \n       // Number of sequences, number of elements in total (possibly\n       // including padding).\n       _DifferenceType __m = std::distance(__begin_seqs, __end_seqs);\n       _DifferenceType __nn = 0;\n       _DifferenceType __nmax, __n, __r;\n \n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         __nn += std::distance(__begin_seqs[__i].first,\n \t\t\t      __begin_seqs[__i].second);\n \n@@ -422,7 +427,7 @@ namespace __gnu_parallel\n \n       __ns[0] = std::distance(__begin_seqs[0].first, __begin_seqs[0].second);\n       __nmax = __ns[0];\n-      for (int __i = 0; __i < __m; ++__i)\n+      for (_SeqNumber __i = 0; __i < __m; ++__i)\n         {\n           __ns[__i] = std::distance(__begin_seqs[__i].first,\n                                     __begin_seqs[__i].second);\n@@ -435,7 +440,7 @@ namespace __gnu_parallel\n       // equality iff __nmax = 2^__k - 1\n       __l = __round_up_to_pow2(__r) - 1;\n \n-      for (int __i = 0; __i < __m; ++__i)\n+      for (_SeqNumber __i = 0; __i < __m; ++__i)\n         {\n           __a[__i] = 0;\n           __b[__i] = __l;\n@@ -448,23 +453,23 @@ namespace __gnu_parallel\n #define __S(__i) (__begin_seqs[__i].first)\n \n       // Initial partition.\n-      std::vector<std::pair<_Tp, int> > __sample;\n+      std::vector<std::pair<_Tp, _SeqNumber> > __sample;\n \n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         if (__n < __ns[__i])\n           __sample.push_back(std::make_pair(__S(__i)[__n], __i));\n       __gnu_sequential::sort(__sample.begin(), __sample.end(),\n                              __lcomp, sequential_tag());\n \n       // Conceptual infinity.\n-      for (int __i = 0; __i < __m; __i++)\n+      for (_SeqNumber __i = 0; __i < __m; __i++)\n         if (__n >= __ns[__i])\n           __sample.push_back(\n             std::make_pair(__S(__i)[0] /*__dummy element*/, __i));\n \n       _DifferenceType __localrank = __rank / __l;\n \n-      int __j;\n+      _SeqNumber __j;\n       for (__j = 0;\n            __j < __localrank && ((__n + 1) <= __ns[__sample[__j].second]);\n            ++__j)\n@@ -478,7 +483,7 @@ namespace __gnu_parallel\n           __n /= 2;\n \n           const _Tp* __lmax = NULL;\n-          for (int __i = 0; __i < __m; ++__i)\n+          for (_SeqNumber __i = 0; __i < __m; ++__i)\n             {\n               if (__a[__i] > 0)\n                 {\n@@ -492,7 +497,7 @@ namespace __gnu_parallel\n                 }\n             }\n \n-          int __i;\n+          _SeqNumber __i;\n           for (__i = 0; __i < __m; __i++)\n             {\n               _DifferenceType __middle = (__b[__i] + __a[__i]) / 2;\n@@ -504,25 +509,26 @@ namespace __gnu_parallel\n             }\n \n           _DifferenceType __leftsize = 0;\n-          for (int __i = 0; __i < __m; ++__i)\n+          for (_SeqNumber __i = 0; __i < __m; ++__i)\n               __leftsize += __a[__i] / (__n + 1);\n \n           _DifferenceType __skew = __rank / (__n + 1) - __leftsize;\n \n           if (__skew > 0)\n             {\n               // Move to the left, find smallest.\n-              std::priority_queue<std::pair<_Tp, int>,\n-                std::vector<std::pair<_Tp, int> >,\n-                _LexicographicReverse<_Tp, int, _Compare> > __pq(__lrcomp);\n+              std::priority_queue<std::pair<_Tp, _SeqNumber>,\n+                std::vector<std::pair<_Tp, _SeqNumber> >,\n+                _LexicographicReverse<_Tp, _SeqNumber, _Compare> >\n+                  __pq(__lrcomp);\n \n-              for (int __i = 0; __i < __m; ++__i)\n+              for (_SeqNumber __i = 0; __i < __m; ++__i)\n                 if (__b[__i] < __ns[__i])\n                   __pq.push(std::make_pair(__S(__i)[__b[__i]], __i));\n \n               for (; __skew != 0 && !__pq.empty(); --__skew)\n                 {\n-                  int __source = __pq.top().second;\n+                  _SeqNumber __source = __pq.top().second;\n                   __pq.pop();\n \n                   __a[__source]\n@@ -537,17 +543,17 @@ namespace __gnu_parallel\n           else if (__skew < 0)\n             {\n               // Move to the right, find greatest.\n-              std::priority_queue<std::pair<_Tp, int>,\n-                std::vector<std::pair<_Tp, int> >,\n-                _Lexicographic<_Tp, int, _Compare> > __pq(__lcomp);\n+              std::priority_queue<std::pair<_Tp, _SeqNumber>,\n+                std::vector<std::pair<_Tp, _SeqNumber> >,\n+                _Lexicographic<_Tp, _SeqNumber, _Compare> > __pq(__lcomp);\n \n-              for (int __i = 0; __i < __m; ++__i)\n+              for (_SeqNumber __i = 0; __i < __m; ++__i)\n                 if (__a[__i] > 0)\n                   __pq.push(std::make_pair(__S(__i)[__a[__i] - 1], __i));\n \n               for (; __skew != 0; ++__skew)\n                 {\n-                  int __source = __pq.top().second;\n+                  _SeqNumber __source = __pq.top().second;\n                   __pq.pop();\n \n                   __a[__source] -= __n + 1;\n@@ -573,7 +579,7 @@ namespace __gnu_parallel\n \n       // Impossible to avoid the warning?\n       _Tp __maxleft, __minright;\n-      for (int __i = 0; __i < __m; ++__i)\n+      for (_SeqNumber __i = 0; __i < __m; ++__i)\n         {\n           if (__a[__i] > 0)\n             {\n@@ -617,7 +623,7 @@ namespace __gnu_parallel\n           // We have to calculate an offset.\n           __offset = 0;\n \n-          for (int __i = 0; __i < __m; ++__i)\n+          for (_SeqNumber __i = 0; __i < __m; ++__i)\n             {\n               _DifferenceType lb\n                 = std::lower_bound(__S(__i), __S(__i) + __ns[__i],"}, {"sha": "f66a3e96683f7e629de3b511f59162f80784a087", "filename": "libstdc++-v3/include/parallel/multiway_merge.h", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_merge.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -489,27 +489,29 @@ namespace __gnu_parallel\n       _GLIBCXX_CALL(__length)\n \n       typedef _DifferenceTp _DifferenceType;\n+      typedef typename std::iterator_traits<_RAIterIterator>\n+\t::difference_type _SeqNumber;\n       typedef typename std::iterator_traits<_RAIterIterator>\n \t::value_type::first_type\n \t_RAIter1;\n       typedef typename std::iterator_traits<_RAIter1>::value_type\n \t_ValueType;\n \n-      int __k = static_cast<int>(__seqs_end - __seqs_begin);\n+      _SeqNumber __k = static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n \n       _LT __lt(__k, __comp);\n \n       // Default value for potentially non-default-constructible types.\n       _ValueType* __arbitrary_element = NULL;\n \n-      for (int __t = 0; __t < __k; ++__t)\n+      for (_SeqNumber __t = 0; __t < __k; ++__t)\n \t{\n           if(__arbitrary_element == NULL\n \t     && _GLIBCXX_PARALLEL_LENGTH(__seqs_begin[__t]) > 0)\n             __arbitrary_element = &(*__seqs_begin[__t].first);\n \t}\n \n-      for (int __t = 0; __t < __k; ++__t)\n+      for (_SeqNumber __t = 0; __t < __k; ++__t)\n \t{\n           if (__seqs_begin[__t].first == __seqs_begin[__t].second)\n             __lt.__insert_start(*__arbitrary_element, __t, true);\n@@ -519,7 +521,7 @@ namespace __gnu_parallel\n \n       __lt.__init();\n \n-      int __source;\n+      _SeqNumber __source;\n \n       for (_DifferenceType __i = 0; __i < __length; ++__i)\n \t{\n@@ -574,17 +576,19 @@ namespace __gnu_parallel\n       _GLIBCXX_CALL(__length)\n       typedef _DifferenceTp _DifferenceType;\n \n+      typedef typename std::iterator_traits<_RAIterIterator>\n+\t::difference_type _SeqNumber;\n       typedef typename std::iterator_traits<_RAIterIterator>\n \t::value_type::first_type\n \t_RAIter1;\n       typedef typename std::iterator_traits<_RAIter1>::value_type\n \t_ValueType;\n \n-      int __k = __seqs_end - __seqs_begin;\n+      _SeqNumber __k = __seqs_end - __seqs_begin;\n \n       _LT __lt(__k, __sentinel, __comp);\n \n-      for (int __t = 0; __t < __k; ++__t)\n+      for (_SeqNumber __t = 0; __t < __k; ++__t)\n \t{\n #if _GLIBCXX_ASSERTIONS\n           _GLIBCXX_PARALLEL_ASSERT(__seqs_begin[__t].first\n@@ -595,7 +599,7 @@ namespace __gnu_parallel\n \n       __lt.__init();\n \n-      int __source;\n+      _SeqNumber __source;\n \n #if _GLIBCXX_ASSERTIONS\n       _DifferenceType __i = 0;\n@@ -862,8 +866,9 @@ namespace __gnu_parallel\n \t   typename _DifferenceTp,\n \t   typename _Compare>\n     struct __multiway_merge_k_variant_sentinel_switch<false, __stable,\n-\t\t\t\t\t\t      _RAIterIterator, _RAIter3,\n-\t\t\t\t\t\t      _DifferenceTp, _Compare>\n+\t\t\t\t\t\t      _RAIterIterator,\n+\t\t\t\t\t\t      _RAIter3, _DifferenceTp,\n+\t\t\t\t\t\t      _Compare>\n     {\n       _RAIter3\n       operator()(_RAIterIterator __seqs_begin,\n@@ -920,6 +925,8 @@ namespace __gnu_parallel\n       _GLIBCXX_CALL(__length)\n \n       typedef _DifferenceTp _DifferenceType;\n+      typedef typename std::iterator_traits<_RAIterIterator>\n+\t::difference_type _SeqNumber;\n       typedef typename std::iterator_traits<_RAIterIterator>\n \t::value_type::first_type\n \t_RAIter1;\n@@ -944,7 +951,7 @@ namespace __gnu_parallel\n \treturn __target;\n \n       _RAIter3 __return_target = __target;\n-      int __k = static_cast<int>(__seqs_end - __seqs_begin);\n+      _SeqNumber __k = static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n \n       switch (__k)\n \t{\n@@ -1029,24 +1036,26 @@ namespace __gnu_parallel\n \t\t\t\t      _Compare __comp,\n      std::vector<std::pair<_DifferenceType, _DifferenceType> > *__pieces)\n     {\n+      typedef typename std::iterator_traits<_RAIterIterator>\n+\t::difference_type _SeqNumber;\n       typedef typename std::iterator_traits<_RAIterIterator>\n \t::value_type::first_type\n \t_RAIter1;\n       typedef typename std::iterator_traits<_RAIter1>::value_type\n \t_ValueType;\n \n       // __k sequences.\n-      int __k = static_cast<int>(__seqs_end - __seqs_begin);\n+      _SeqNumber __k = static_cast<_SeqNumber>(__seqs_end - __seqs_begin);\n \n-      int __num_threads = omp_get_num_threads();\n+      _ThreadIndex __num_threads = omp_get_num_threads();\n \n       _DifferenceType __num_samples =\n \t__gnu_parallel::_Settings::get().merge_oversampling * __num_threads;\n \n       _ValueType* __samples = static_cast<_ValueType*>\n \t(::operator new(sizeof(_ValueType) * __k * __num_samples));\n       // Sample.\n-      for (int __s = 0; __s < __k; ++__s)\n+      for (_SeqNumber __s = 0; __s < __k; ++__s)\n \tfor (_DifferenceType __i = 0; __i < __num_samples; ++__i)\n \t  {\n \t    _DifferenceType sample_index = static_cast<_DifferenceType>\n@@ -1062,9 +1071,9 @@ namespace __gnu_parallel\n       _SamplingSorter<__stable, _ValueType*, _Compare>()\n \t(__samples, __samples + (__num_samples * __k), __comp);\n \n-      for (int __slab = 0; __slab < __num_threads; ++__slab)\n+      for (_ThreadIndex __slab = 0; __slab < __num_threads; ++__slab)\n \t// For each slab / processor.\n-\tfor (int __seq = 0; __seq < __k; ++__seq)\n+\tfor (_SeqNumber __seq = 0; __seq < __k; ++__seq)\n \t  {\n \t    // For each sequence.\n \t    if (__slab > 0)\n@@ -1107,16 +1116,18 @@ namespace __gnu_parallel\n \t\t\t\t   _Compare __comp,\n        std::vector<std::pair<_DifferenceType, _DifferenceType> > *__pieces)\n     {\n+      typedef typename std::iterator_traits<_RAIterIterator>\n+\t::difference_type _SeqNumber;\n       typedef typename std::iterator_traits<_RAIterIterator>\n \t::value_type::first_type\n \t_RAIter1;\n \n       const bool __tight = (__total_length == __length);\n \n       // __k sequences.\n-      const int __k = static_cast<int>(__seqs_end - __seqs_begin);\n+      const _SeqNumber __k = __seqs_end - __seqs_begin;\n \n-      const int __num_threads = omp_get_num_threads();\n+      const _ThreadIndex __num_threads = omp_get_num_threads();\n \n       // (Settings::multiway_merge_splitting\n       //  == __gnu_parallel::_Settings::EXACT).\n@@ -1130,7 +1141,7 @@ namespace __gnu_parallel\n \tnew _DifferenceType[__num_threads + 1];\n       equally_split(__length, __num_threads, __borders);\n \n-      for (int __s = 0; __s < (__num_threads - 1); ++__s)\n+      for (_ThreadIndex __s = 0; __s < (__num_threads - 1); ++__s)\n \t{\n \t  __offsets[__s].resize(__k);\n \t  multiseq_partition(__se.begin(), __se.end(), __borders[__s + 1],\n@@ -1148,10 +1159,10 @@ namespace __gnu_parallel\n \t}\n       delete[] __borders;\n \n-      for (int __slab = 0; __slab < __num_threads; ++__slab)\n+      for (_ThreadIndex __slab = 0; __slab < __num_threads; ++__slab)\n \t{\n \t  // For each slab / processor.\n-\t  for (int __seq = 0; __seq < __k; ++__seq)\n+\t  for (_SeqNumber __seq = 0; __seq < __k; ++__seq)\n \t    {\n \t      // For each sequence.\n \t      if (__slab == 0)\n@@ -1218,6 +1229,8 @@ namespace __gnu_parallel\n \t_GLIBCXX_CALL(__length)\n \n \ttypedef _DifferenceTp _DifferenceType;\n+        typedef typename std::iterator_traits<_RAIterIterator>\n+\t  ::difference_type _SeqNumber;\n \ttypedef typename std::iterator_traits<_RAIterIterator>\n           ::value_type::first_type\n           _RAIter1;\n@@ -1227,7 +1240,7 @@ namespace __gnu_parallel\n \t// Leave only non-empty sequences.\n \ttypedef std::pair<_RAIter1, _RAIter1> seq_type;\n \tseq_type* __ne_seqs = new seq_type[__seqs_end - __seqs_begin];\n-\tint __k = 0;\n+\t_SeqNumber __k = 0;\n \t_DifferenceType __total_length = 0;\n \tfor (_RAIterIterator __raii = __seqs_begin;\n              __raii != __seqs_end; ++__raii)\n@@ -1263,7 +1276,7 @@ namespace __gnu_parallel\n \t    // Thread __t will have to merge pieces[__iam][0..__k - 1]\n \t    __pieces = new std::vector<\n \t    std::pair<_DifferenceType, _DifferenceType> >[__num_threads];\n-\t    for (int __s = 0; __s < __num_threads; ++__s)\n+\t    for (_ThreadIndex __s = 0; __s < __num_threads; ++__s)\n \t      __pieces[__s].resize(__k);\n \n \t    _DifferenceType __num_samples =\n@@ -1278,12 +1291,12 @@ namespace __gnu_parallel\n \n \t  _DifferenceType __target_position = 0;\n \n-\t  for (int __c = 0; __c < __k; ++__c)\n+\t  for (_SeqNumber __c = 0; __c < __k; ++__c)\n \t    __target_position += __pieces[__iam][__c].first;\n \n \t  seq_type* __chunks = new seq_type[__k];\n \n-\t  for (int __s = 0; __s < __k; ++__s)\n+\t  for (_SeqNumber __s = 0; __s < __k; ++__s)\n \t    __chunks[__s] = std::make_pair(__ne_seqs[__s].first\n \t\t\t\t\t   + __pieces[__iam][__s].first,\n \t\t\t\t\t   __ne_seqs[__s].first"}, {"sha": "85894719dc0ae56409a1e285320b6abd7d86f923", "filename": "libstdc++-v3/include/parallel/multiway_mergesort.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fmultiway_mergesort.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -154,7 +154,7 @@ namespace __gnu_parallel\n \t\t\t     __sd->_M_starts[__iam + 1], __offsets.begin(),\n \t\t\t     __comp);\n \n-\tfor (int __seq = 0; __seq < __sd->_M_num_threads; __seq++)\n+\tfor (_ThreadIndex __seq = 0; __seq < __sd->_M_num_threads; __seq++)\n \t  {\n \t    // for each sequence\n \t    if (__iam < (__sd->_M_num_threads - 1))\n@@ -361,7 +361,7 @@ namespace __gnu_parallel\n         _SeqVector;\n       _SeqVector __seqs(__sd->_M_num_threads);\n \n-      for (int __s = 0; __s < __sd->_M_num_threads; ++__s)\n+      for (_ThreadIndex __s = 0; __s < __sd->_M_num_threads; ++__s)\n \t{\n \t  __seqs[__s] =\n \t    std::make_pair(__sd->_M_temporary[__s]\n@@ -439,14 +439,14 @@ namespace __gnu_parallel\n \t  __sd._M_offsets = new _DifferenceType[__num_threads - 1];\n \t  __sd._M_pieces\n \t    = new std::vector<_Piece<_DifferenceType> >[__num_threads];\n-\t  for (int __s = 0; __s < __num_threads; ++__s)\n+\t  for (_ThreadIndex __s = 0; __s < __num_threads; ++__s)\n \t    __sd._M_pieces[__s].resize(__num_threads);\n \t  __starts = __sd._M_starts = new _DifferenceType[__num_threads + 1];\n \n \t  _DifferenceType __chunk_length = __n / __num_threads;\n \t  _DifferenceType __split = __n % __num_threads;\n \t  _DifferenceType __pos = 0;\n-\t  for (int __i = 0; __i < __num_threads; ++__i)\n+\t  for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \t    {\n \t      __starts[__i] = __pos;\n \t      __pos += ((__i < __split)"}, {"sha": "487fd6dd666613290c7643c2df42685d710ac09b", "filename": "libstdc++-v3/include/parallel/partial_sum.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartial_sum.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -132,7 +132,7 @@ namespace __gnu_parallel\n \t\t / ((double)__num_threads + __s.partial_sum_dilation)),\n \t\t__borderstart = __n - __num_threads * __chunk_length;\n \t      __borders[0] = 0;\n-\t      for (int __i = 1; __i < (__num_threads + 1); ++__i)\n+\t      for (_ThreadIndex __i = 1; __i < (__num_threads + 1); ++__i)\n \t\t{\n \t\t  __borders[__i] = __borderstart;\n \t\t  __borderstart += __chunk_length;"}, {"sha": "cfc2fd3737e998d379e676a7834b5171c4acfb53", "filename": "libstdc++-v3/include/parallel/partition.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fpartition.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -103,7 +103,7 @@ namespace __gnu_parallel\n \t\t_DifferenceType __num_chunks = ((__right - __left + 1) \n \t\t\t\t\t\t/ __chunk_size);\n \n-\t\tfor (int __r = 0; __r < __num_threads; ++__r)\n+\t\tfor (_ThreadIndex __r = 0; __r < __num_threads; ++__r)\n \t\t  {\n \t\t    __reserved_left[__r] = false;\n \t\t    __reserved_right[__r] = false;\n@@ -222,7 +222,7 @@ namespace __gnu_parallel\n \t\t  // Find spot and swap.\n \t\t  _DifferenceType __swapstart = -1;\n \t\t  omp_set_lock(&__result_lock);\n-\t\t  for (int __r = 0; __r < __leftover_left; ++__r)\n+\t\t  for (_DifferenceType __r = 0; __r < __leftover_left; ++__r)\n \t\t    if (!__reserved_left[__r])\n \t\t      {\n \t\t\t__reserved_left[__r] = true;\n@@ -247,7 +247,7 @@ namespace __gnu_parallel\n \t\t  // Find spot and swap\n \t\t  _DifferenceType __swapstart = -1;\n \t\t  omp_set_lock(&__result_lock);\n-\t\t  for (int __r = 0; __r < __leftover_right; ++__r)\n+\t\t  for (_DifferenceType __r = 0; __r < __leftover_right; ++__r)\n \t\t    if (!__reserved_right[__r])\n \t\t      {\n \t\t\t__reserved_right[__r] = true;\n@@ -269,9 +269,9 @@ namespace __gnu_parallel\n \n #             pragma omp single\n \t      {\n-\t\tfor (int __r = 0; __r < __leftover_left; ++__r)\n+\t\tfor (_DifferenceType __r = 0; __r < __leftover_left; ++__r)\n \t\t  _GLIBCXX_PARALLEL_ASSERT(__reserved_left[__r]);\n-\t\tfor (int __r = 0; __r < __leftover_right; ++__r)\n+\t\tfor (_DifferenceType __r = 0; __r < __leftover_right; ++__r)\n \t\t  _GLIBCXX_PARALLEL_ASSERT(__reserved_right[__r]);\n \t      }\n "}, {"sha": "346fb97775d6a6d2bb7b31a8ac9c652cd3fa9471", "filename": "libstdc++-v3/include/parallel/set_operations.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fset_operations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fset_operations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fset_operations.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -444,7 +444,7 @@ namespace __gnu_parallel\n \tif (__iam == 0)\n \t  {\n \t    // Do the last block.\n-\t    for (int __i = 0; __i < __num_threads; ++__i)\n+\t    for (_ThreadIndex __i = 0; __i < __num_threads; ++__i)\n \t      __r += __lengths[__i];\n \n \t    __block_begin = __block_begins[__num_threads];\n@@ -457,7 +457,7 @@ namespace __gnu_parallel\n \t  }\n           else\n             {\n-              for (int __i = 0; __i < __iam; ++__i)\n+              for (_ThreadIndex __i = 0; __i < __iam; ++__i)\n         \t__r += __lengths[ __i ];\n \n               // Reset begins for copy pass."}, {"sha": "72c84a9ccf2f50496127128b27b0417cef9c64ac", "filename": "libstdc++-v3/include/parallel/unique_copy.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b0c13a8240a7f49775c2a4e71da39db3515ec19/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Funique_copy.h?ref=8b0c13a8240a7f49775c2a4e71da39db3515ec19", "patch": "@@ -129,7 +129,7 @@ namespace __gnu_parallel\n \n \tif (__iam == 0)\n           {\n-            for (int __t = 0; __t < __num_threads; ++__t)\n+            for (_ThreadIndex __t = 0; __t < __num_threads; ++__t)\n               __begin_output += __counter[__t];\n \n             __i = 0;\n@@ -154,7 +154,7 @@ namespace __gnu_parallel\n           }\n \telse\n           {\n-            for (int __t = 0; __t < __iam; __t++)\n+            for (_ThreadIndex __t = 0; __t < __iam; __t++)\n               __begin_output += __counter[__t];\n \n             _OutputIterator __iter_out = __result + __begin_output;\n@@ -168,7 +168,7 @@ namespace __gnu_parallel\n       }\n \n       _DifferenceType __end_output = 0;\n-      for (int __t = 0; __t < __num_threads + 1; __t++)\n+      for (_ThreadIndex __t = 0; __t < __num_threads + 1; __t++)\n \t__end_output += __counter[__t];\n \n       delete[] __borders;"}]}