{"sha": "ef73e13988eeb6e1966237f0af5d1b89c8a31284", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3M2UxMzk4OGVlYjZlMTk2NjIzN2YwYWY1ZDFiODljOGEzMTI4NA==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-21T12:06:52Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-21T12:06:52Z"}, "message": "20000804-1.x: New file, this test fails on 68HC11/HC12 due to the asm instruction.\n\n\t* gcc.c-torture/compile/20000804-1.x: New file, this test fails\n\ton 68HC11/HC12 due to the asm instruction.\n\t* gcc.c-torture/compile/20001205-1.x: New file, ditto.\n\t* gcc.c-torture/compile/920520-1.x: Likewise.\n\t* gcc.c-torture/compile/20001226-1.x: New file, this test fails\n\ton 68HC11/HC12 because the function is larger than 64K.\n\t* gcc.c-torture/compile/961203-1.x: New file, this test fails\n\ton 68HC11/HC12 because the structure is too large.\n\nFrom-SVN: r42381", "tree": {"sha": "4e0a3cee6e34c4c7478bc68088f340ffdec2708c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e0a3cee6e34c4c7478bc68088f340ffdec2708c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef73e13988eeb6e1966237f0af5d1b89c8a31284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef73e13988eeb6e1966237f0af5d1b89c8a31284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef73e13988eeb6e1966237f0af5d1b89c8a31284", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef73e13988eeb6e1966237f0af5d1b89c8a31284/comments", "author": null, "committer": null, "parents": [{"sha": "1f4eb17d51fe16f433f6cd7a9769701ec73d847a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f4eb17d51fe16f433f6cd7a9769701ec73d847a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f4eb17d51fe16f433f6cd7a9769701ec73d847a"}], "stats": {"total": 54, "additions": 53, "deletions": 1}, "files": [{"sha": "55056be69275037bd1c9bbb46281748af85bd20f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -1,3 +1,14 @@\n+2001-05-21  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* gcc.c-torture/compile/20000804-1.x: New file, this test fails\n+\ton 68HC11/HC12 due to the asm instruction.\n+\t* gcc.c-torture/compile/20001205-1.x: New file, ditto.\n+\t* gcc.c-torture/compile/920520-1.x: Likewise.\n+\t* gcc.c-torture/compile/20001226-1.x: New file, this test fails\n+\ton 68HC11/HC12 because the function is larger than 64K.\n+\t* gcc.c-torture/compile/961203-1.x: New file, this test fails\n+\ton 68HC11/HC12 because the structure is too large.\n+\n 2001-05-20  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.c-torture/execute/20010520-1.c: New."}, {"sha": "7538c513f70e484f718b73f480933689e1107b21", "filename": "gcc/testsuite/gcc.c-torture/compile/20000804-1.x", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20000804-1.x?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -0,0 +1,10 @@\n+# This does not work on m68hc11 due to the use of an asm statement\n+# to force a 'long long' (64-bits) to go in a register.\n+\n+global target_triplet\n+if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n+      set torture_compile_xfail \"$target_triplet\"\n+      return 1\n+}\n+\n+return 0"}, {"sha": "bde61fd93da9887dae23eb34b3e756f4f1435411", "filename": "gcc/testsuite/gcc.c-torture/compile/20001205-1.x", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001205-1.x?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -0,0 +1,8 @@\n+# This does not work on m68hc11 due to the asm statement which\n+# forces two 'long' (32-bits) variables to go in registers.\n+\n+global target_triplet\n+if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n+      set torture_compile_xfail \"$target_triplet\"\n+}\n+return 0"}, {"sha": "a8db223e1f9f8142c894cc6ebebff1b57b62ddd4", "filename": "gcc/testsuite/gcc.c-torture/compile/20001226-1.x", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20001226-1.x?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -0,0 +1,9 @@\n+# This does not assemble on m68hc11 because the function is larger\n+# than 64K.\n+\n+global target_triplet\n+if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n+      set torture_compile_xfail \"$target_triplet\"\n+      return 1\n+}\n+return 0"}, {"sha": "3bc5676dde7d76111f33325d3cda04e652e519ce", "filename": "gcc/testsuite/gcc.c-torture/compile/920520-1.x", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F920520-1.x?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -1,2 +1,9 @@\n-set options \"-S\"\n+# This does not work on m68hc11 due to the asm which forces a\n+# float or a double to go in a register.\n+\n+global target_triplet\n+if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"] } {\n+      set torture_compile_xfail \"$target_triplet\"\n+      return 1\n+}\n return 0"}, {"sha": "ce8820d934c5b57593e5a17abaa7b79807f61a5a", "filename": "gcc/testsuite/gcc.c-torture/compile/961203-1.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef73e13988eeb6e1966237f0af5d1b89c8a31284/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F961203-1.x?ref=ef73e13988eeb6e1966237f0af5d1b89c8a31284", "patch": "@@ -0,0 +1,7 @@\n+# Array 'a' in this test is too large to fit in 64K.\n+\n+global target_triplet\n+if { [istarget \"m6811-*-*\"] || [istarget \"m6812-*-*\"]} {\n+\tset torture_compile_xfail \"$target_triplet\"\n+}\n+return 0"}]}