{"sha": "26295a069fd312a8be4a6cd96643117383145cc0", "node_id": "C_kwDOANBUbNoAKDI2Mjk1YTA2OWZkMzEyYThiZTRhNmNkOTY2NDMxMTczODMxNDVjYzA", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-11T11:32:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-11T13:45:30Z"}, "message": "Treat ADDR_EXPR and CONSTRUCTOR as GIMPLE/GENERIC magically\n\nThe following allows to match ADDR_EXPR for both the invariant\n&a.b case as well as the &p->d case in a separate definition\ntransparently.  This also allows to remove the hack we employ\nfor CONSTRUCTOR which we handle for example with\n\n (match vec_same_elem_p\n  CONSTRUCTOR@0\n  (if (TREE_CODE (@0) == SSA_NAME\n       && uniform_vector_p (gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0))))))\n\nNote CONSTUCTORs always appear as separate definition in GIMPLE,\nbut I continue to play safe and ADDR_EXPRs are now matched in\nboth places where previously ADDR_EXPR@0 would have missed\nthe &p->x case.\n\nThis is a prerequesite for the PR89317 fix.\n\n\t* genmatch.cc (dt_node::gen_kids): Handle ADDR_EXPR in both\n\tthe GENERIC and GIMPLE op position.\n\t(dt_simplify::gen): Capture both GENERIC and GIMPLE op\n\tposition for ADDR_EXPR and CONSTRUCTOR.\n\t* match.pd: Simplify CONSTRUCTOR leaf handling.\n\n\t* gcc.dg/tree-ssa/forwprop-3.c: Adjust.\n\t* g++.dg/tree-ssa/pr31146-2.C: Likewise.", "tree": {"sha": "1a9da2a4bef72422499665558a335bb6b9fd3791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a9da2a4bef72422499665558a335bb6b9fd3791"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26295a069fd312a8be4a6cd96643117383145cc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26295a069fd312a8be4a6cd96643117383145cc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26295a069fd312a8be4a6cd96643117383145cc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26295a069fd312a8be4a6cd96643117383145cc0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8d136e50e6f82cba793483d910a2b2643108508", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d136e50e6f82cba793483d910a2b2643108508", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d136e50e6f82cba793483d910a2b2643108508"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "f53e61a4a8d67671733ac719c0eb095378de0f81", "filename": "gcc/genmatch.cc", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Fgenmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Fgenmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.cc?ref=26295a069fd312a8be4a6cd96643117383145cc0", "patch": "@@ -2927,8 +2927,16 @@ dt_node::gen_kids (FILE *f, int indent, bool gimple, int depth)\n \t  if (expr *e = dyn_cast <expr *> (op->op))\n \t    {\n \t      if (e->ops.length () == 0\n+\t\t  /* In GIMPLE a CONSTRUCTOR always appears in a\n+\t\t     separate definition.  */\n \t\t  && (!gimple || !(*e->operation == CONSTRUCTOR)))\n-\t\tgeneric_exprs.safe_push (op);\n+\t\t{\n+\t\t  generic_exprs.safe_push (op);\n+\t\t  /* But ADDR_EXPRs can appear directly when invariant\n+\t\t     and in a separate definition when not.  */\n+\t\t  if (gimple && *e->operation == ADDR_EXPR)\n+\t\t    gimple_exprs.safe_push (op);\n+\t\t}\n \t      else if (e->operation->kind == id_base::FN)\n \t\t{\n \t\t  if (gimple)\n@@ -3599,14 +3607,26 @@ dt_simplify::gen (FILE *f, int indent, bool gimple, int depth ATTRIBUTE_UNUSED)\n   if (s->capture_max >= 0)\n     {\n       char opname[20];\n-      fprintf_indent (f, indent, \"tree captures[%u] ATTRIBUTE_UNUSED = { %s\",\n-\t\t      s->capture_max + 1, indexes[0]->get_name (opname));\n+      fprintf_indent (f, indent, \"tree captures[%u] ATTRIBUTE_UNUSED = {\",\n+\t\t      s->capture_max + 1);\n \n-      for (int i = 1; i <= s->capture_max; ++i)\n+      for (int i = 0; i <= s->capture_max; ++i)\n \t{\n \t  if (!indexes[i])\n \t    break;\n-\t  fprintf (f, \", %s\", indexes[i]->get_name (opname));\n+\t  const char *opstr = indexes[i]->get_name (opname);\n+\t  expr *e = dyn_cast <expr *> (indexes[i]->op);\n+\t  fputs (i == 0 ? \" \" : \", \", f);\n+\t  if (e && gimple\n+\t      /* Transparently handle picking up CONSTRUCTOR and ADDR_EXPR\n+\t\t leafs if they appear in a separate definition.  */\n+\t      && (*e->operation == CONSTRUCTOR\n+\t\t  || *e->operation == ADDR_EXPR))\n+\t    fprintf (f, \"(TREE_CODE (%s) == SSA_NAME \"\n+\t\t     \"? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (%s)) : %s)\",\n+\t\t     opstr, opstr, opstr);\n+\t  else\n+\t    fprintf (f, \"%s\", opstr);\n \t}\n       fprintf (f, \" };\\n\");\n     }"}, {"sha": "046ea2cdef4a1a2e252cb0a471218f3a0bf593d6", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=26295a069fd312a8be4a6cd96643117383145cc0", "patch": "@@ -3925,8 +3925,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n (simplify\n   (view_convert CONSTRUCTOR@0)\n   (with\n-   { tree ctor = (TREE_CODE (@0) == SSA_NAME\n-\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0); }\n+   { tree ctor = @0; }\n    (switch\n     (if (CONSTRUCTOR_NELTS (ctor) == 0)\n      { build_zero_cst (type); })\n@@ -7292,8 +7291,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t  == tree_to_uhwi (TYPE_SIZE (TREE_TYPE (TREE_TYPE (@0))))))))\n   (with\n    {\n-     tree ctor = (TREE_CODE (@0) == SSA_NAME\n-\t\t  ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n+     tree ctor = @0;\n      tree eltype = TREE_TYPE (TREE_TYPE (ctor));\n      unsigned HOST_WIDE_INT width = tree_to_uhwi (TYPE_SIZE (eltype));\n      unsigned HOST_WIDE_INT n = tree_to_uhwi (@1);\n@@ -7941,8 +7939,7 @@ and,\n /* Fold reduction of a single nonzero element constructor.  */\n (for reduc (IFN_REDUC_PLUS IFN_REDUC_IOR IFN_REDUC_XOR)\n   (simplify (reduc (CONSTRUCTOR@0))\n-    (with { tree ctor = (TREE_CODE (@0) == SSA_NAME\n-\t\t\t ? gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0)) : @0);\n+    (with { tree ctor = @0;\n \t    tree elt = ctor_single_nonzero_element (ctor); }\n       (if (elt\n \t   && !HONOR_SNANS (type)\n@@ -8161,8 +8158,7 @@ and,\n \n (match vec_same_elem_p\n  CONSTRUCTOR@0\n- (if (TREE_CODE (@0) == SSA_NAME\n-      && uniform_vector_p (gimple_assign_rhs1 (SSA_NAME_DEF_STMT (@0))))))\n+ (if (uniform_vector_p (@0))))\n \n (match vec_same_elem_p\n  @0"}, {"sha": "10232855e26b869cac9966682c666104c971333e", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr31146-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr31146-2.C?ref=26295a069fd312a8be4a6cd96643117383145cc0", "patch": "@@ -21,4 +21,4 @@ double foo (void)\n }\n \n /* GCC 8 emits operator new () != NULL with -fcheck-new. */\n-/* { dg-final { scan-tree-dump \"Replaced .* != 0B. with .1\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump-times \" != 0B\\\\)\" 1 \"forwprop1\" } } */"}, {"sha": "bfdfba1800c92d106ce8b7afeacc9ff3a04b2bbd", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26295a069fd312a8be4a6cd96643117383145cc0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-3.c?ref=26295a069fd312a8be4a6cd96643117383145cc0", "patch": "@@ -14,4 +14,4 @@ int foo(struct bar *x)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump \"Replaced .p_. < q_.. with .1.\" \"forwprop1\" } } */\n+/* { dg-final { scan-tree-dump \"return 1;\" \"forwprop1\" } } */"}]}