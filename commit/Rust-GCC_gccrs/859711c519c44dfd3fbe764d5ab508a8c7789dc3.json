{"sha": "859711c519c44dfd3fbe764d5ab508a8c7789dc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU5NzExYzUxOWM0NGRmZDNmYmU3NjRkNWFiNTA4YThjNzc4OWRjMw==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@develer.com", "date": "2004-06-05T06:49:00Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-06-05T06:49:00Z"}, "message": "m68k.h: Remove comments copied over from tm.texi.\n\n\t* config/m68k/m68k.h: Remove comments copied over from tm.texi.\n\tRename 68000 and 68k to m68k for consistency in comments.  Remove\n\ttrailing whitespace before EOLs and before TABs.\n\t(MAX_CODE_ALIGN): Remove unused macro.\n\t(CALL_USED_REGISTERS): Reformat and add comments.\n\nFrom-SVN: r82642", "tree": {"sha": "ca1a359ae509fb9c2895deb5b9d506f259d4e45b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca1a359ae509fb9c2895deb5b9d506f259d4e45b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/859711c519c44dfd3fbe764d5ab508a8c7789dc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859711c519c44dfd3fbe764d5ab508a8c7789dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/859711c519c44dfd3fbe764d5ab508a8c7789dc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/859711c519c44dfd3fbe764d5ab508a8c7789dc3/comments", "author": {"login": "codewiz", "id": 1184492, "node_id": "MDQ6VXNlcjExODQ0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1184492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/codewiz", "html_url": "https://github.com/codewiz", "followers_url": "https://api.github.com/users/codewiz/followers", "following_url": "https://api.github.com/users/codewiz/following{/other_user}", "gists_url": "https://api.github.com/users/codewiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/codewiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/codewiz/subscriptions", "organizations_url": "https://api.github.com/users/codewiz/orgs", "repos_url": "https://api.github.com/users/codewiz/repos", "events_url": "https://api.github.com/users/codewiz/events{/privacy}", "received_events_url": "https://api.github.com/users/codewiz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0fa96cea26f4977bab21d76acbcee97a08f6853c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fa96cea26f4977bab21d76acbcee97a08f6853c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fa96cea26f4977bab21d76acbcee97a08f6853c"}], "stats": {"total": 646, "additions": 107, "deletions": 539}, "files": [{"sha": "28e486ccccbdc2bba625a897c801ef27809bb9c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859711c519c44dfd3fbe764d5ab508a8c7789dc3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859711c519c44dfd3fbe764d5ab508a8c7789dc3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=859711c519c44dfd3fbe764d5ab508a8c7789dc3", "patch": "@@ -1,3 +1,11 @@\n+2004-06-04  Bernardo Innocenti  <bernie@develer.com>\n+\n+\t* config/m68k/m68k.h: Remove comments copied over from tm.texi.\n+\tRename 68000 and 68k to m68k for consistency in comments.  Remove\n+\ttrailing whitespace before EOLs and before TABs.\n+\t(MAX_CODE_ALIGN): Remove unused macro.\n+\t(CALL_USED_REGISTERS): Reformat and add comments.\n+\n 2004-06-04  Frank Ch. Eigler  <fche@redhat.com>\n \n \t* gcc.c (MFLIB_SPEC): Remove library references, to require users"}, {"sha": "8a0773088425a2e0a4f45d1ae1cfdaa2abdff937", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 99, "deletions": 539, "changes": 638, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/859711c519c44dfd3fbe764d5ab508a8c7789dc3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/859711c519c44dfd3fbe764d5ab508a8c7789dc3/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=859711c519c44dfd3fbe764d5ab508a8c7789dc3", "patch": "@@ -35,7 +35,6 @@ Boston, MA 02111-1307, USA.  */\n /* Note that some other tm.h files include this one and then override\n    many of the definitions that relate to assembler syntax.  */\n \n-/* Target CPU builtins.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n@@ -59,7 +58,7 @@ Boston, MA 02111-1307, USA.  */\n \t{\t\t\t\t\t\\\n \t  builtin_define_std (\"mc68040\");\t\\\n \t  builtin_define_std (\"mc68030\");\t\\\n- \t  builtin_define_std (\"mc68020\");\t\\\n+\t  builtin_define_std (\"mc68020\");\t\\\n \t}\t\t\t\t\t\\\n       else if (TARGET_68030)\t\t\t\\\n \tbuiltin_define_std (\"mc68030\");\t\t\\\n@@ -111,7 +110,7 @@ Boston, MA 02111-1307, USA.  */\n #define INT_OP_NO_DOT   2\t/* byte, short, long */\n #define INT_OP_DC\t3\t/* dc.b, dc.w, dc.l */\n \n-/* Set the default */\n+/* Set the default.  */\n #define INT_OP_GROUP INT_OP_DOT_WORD\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n@@ -135,7 +134,7 @@ extern int target_flags;\n    of them must be emulated in software by the OS.  When TARGET_68040 is\n    turned on, these instructions won't be used.  This code will still\n    run on a 68030 and 68881/2.  */\n-#define MASK_68040\t(1<<2)\t\n+#define MASK_68040\t(1<<2)\n #define TARGET_68040 (target_flags & MASK_68040)\n \n /* Use the 68040-only fp instructions (-m68040 or -m68060).  */\n@@ -236,12 +235,6 @@ extern int target_flags;\n /* Which bits can be set by specifying a ColdFire */\n #define MASK_ALL_CF_BITS\t(MASK_COLDFIRE|MASK_CF_HWDIV)\n \n-/* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n #define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n   { { \"68020\", - (MASK_ALL_CF_BITS|MASK_68060|MASK_68040|MASK_68040_ONLY),\t\\\n       N_(\"Generate code for a 68020\") },\t\t\t\t\\\n@@ -319,9 +312,9 @@ extern int target_flags;\n \t\t  |MASK_BITFIELD|MASK_68881),\t\t\t\t\\\n       N_(\"Generate code for a cpu32\") },\t\t\t\t\\\n     { \"cpu32\", MASK_68020, \"\" },\t\t\t\t\t\\\n-    { \"align-int\", MASK_ALIGN_INT, \t\t\t\t\t\\\n+    { \"align-int\", MASK_ALIGN_INT,\t\t\t\t\t\\\n       N_(\"Align variables on a 32-bit boundary\") },\t\t\t\\\n-    { \"no-align-int\", -MASK_ALIGN_INT, \t\t\t\t\t\\\n+    { \"no-align-int\", -MASK_ALIGN_INT,\t\t\t\t\t\\\n       N_(\"Align variables on a 16-bit boundary\") },\t\t\t\\\n     { \"sep-data\", MASK_SEP_DATA,\t\t\t\t\t\\\n       N_(\"Enable separate data segment\") },\t\t\t\t\\\n@@ -345,31 +338,13 @@ extern int target_flags;\n     { \"\", TARGET_DEFAULT, \"\" }}\n /* TARGET_DEFAULT is defined in m68k-none.h, netbsd.h, etc.  */\n \n-/* This macro is similar to `TARGET_SWITCHES' but defines names of\n-   command options that have values.  Its definition is an\n-   initializer with a subgrouping for each command option.\n-\n-   Each subgrouping contains a string constant, that defines the\n-   fixed part of the option name, and the address of a variable.  The\n-   variable, type `char *', is set to the variable part of the given\n-   option if the fixed part matches.  The actual option name is made\n-   by appending `-m' to the specified name.  */\n #define TARGET_OPTIONS\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   { \"shared-library-id=\",\t&m68k_library_id_string,\t\t\\\n     N_(\"ID of shared library to build\"), 0},\t\t\t\t\\\n   SUBTARGET_OPTIONS\t\t\t\t\t\t\t\\\n }\n \n-/* Sometimes certain combinations of command options do not make\n-   sense on a particular target machine.  You can define a macro\n-   `OVERRIDE_OPTIONS' to take account of this.  This macro, if\n-   defined, is executed once just after all the command options have\n-   been parsed.\n-\n-   Don't use this macro to turn on various extra optimizations for\n-   `-O'.  That is what `OPTIMIZATION_OPTIONS' is for.  */\n-\n #define OVERRIDE_OPTIONS   override_options()\n \n /* These are meant to be redefined in the host dependent files */\n@@ -379,93 +354,55 @@ extern int target_flags;\n \f\n /* target machine storage layout */\n \n-/* Define for XFmode extended real floating point support.  */\n #define LONG_DOUBLE_TYPE_SIZE 96\n-\n-/* Set the value of FLT_EVAL_METHOD in float.h.  When using 68040 fp\n-   instructions, we get proper intermediate rounding, otherwise we \n-   get extended precision results.  */\n #define TARGET_FLT_EVAL_METHOD (TARGET_68040_ONLY ? 0 : 2)\n \n-/* Define this if most significant bit is lowest numbered\n-   in instructions that operate on numbered bit-fields.\n-   This is true for 68020 insns such as bfins and bfexts.\n-   We make it true always by avoiding using the single-bit insns\n-   except in special cases with constant bit numbers.  */\n #define BITS_BIG_ENDIAN 1\n-\n-/* Define this if most significant byte of a word is the lowest numbered.  */\n-/* That is true on the 68000.  */\n #define BYTES_BIG_ENDIAN 1\n-\n-/* Define this if most significant word of a multiword number is the lowest\n-   numbered.  */\n-/* For 68000 we can decide arbitrarily\n-   since there are no machine instructions for them.\n-   So let's be consistent.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n \n-/* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_SHORT ? 16 : 32)\n-\n-/* Boundary (in *bits*) on which stack pointer should be aligned.  */\n #define STACK_BOUNDARY 16\n-\n-/* Allocation boundary (in *bits*) for the code of a function.  */\n #define FUNCTION_BOUNDARY 16\n-\n-/* Alignment of field after `int : 0' in a structure.  */\n #define EMPTY_FIELD_BOUNDARY 16\n \n-/* No data type wants to be aligned rounder than this. \n+/* No data type wants to be aligned rounder than this.\n    Most published ABIs say that ints should be aligned on 16 bit\n-   boundaries, but cpus with 32-bit busses get better performance\n+   boundaries, but CPUs with 32-bit busses get better performance\n    aligned on 32-bit boundaries.  ColdFires without a misalignment\n    module require 32-bit alignment.  */\n #define BIGGEST_ALIGNMENT (TARGET_ALIGN_INT ? 32 : 16)\n \n-/* Set this nonzero if move instructions will actually fail to work\n-   when given unaligned data.  */\n #define STRICT_ALIGNMENT (TARGET_STRICT_ALIGNMENT)\n \n-/* Maximum power of 2 that code can be aligned to.  */\n-#define MAX_CODE_ALIGN\t2\t\t\t/* 4 byte alignment */\n-\n-/* Maximum number of library ids we permit */\n-#define MAX_LIBRARY_ID 255\n-\n-/* Define number of bits in most basic integer type.\n-   (If undefined, default is BITS_PER_WORD).  */\n-\n #define INT_TYPE_SIZE (TARGET_SHORT ? 16 : 32)\n \n /* Define these to avoid dependence on meaning of `int'.  */\n-\n #define WCHAR_TYPE \"long int\"\n #define WCHAR_TYPE_SIZE 32\n+\n+/* Maximum number of library IDs we permit with -mid-shared-library.  */\n+#define MAX_LIBRARY_ID 255\n+\n \f\n /* Standard register usage.  */\n \n-/* Number of actual hardware registers.\n-   The hardware registers are assigned numbers for the compiler\n-   from 0 to just below FIRST_PSEUDO_REGISTER.\n-   All registers that the compiler knows about must be given numbers,\n-   even those that are not normally considered general registers.\n-   For the 68000, we give the data registers numbers 0-7,\n-   the address registers numbers 010-017,\n-   and the 68881 floating point registers numbers 020-027.  */\n+/* For the m68k, we give the data registers numbers 0-7,\n+   the address registers numbers 010-017 (8-15),\n+   and the 68881 floating point registers numbers 020-027 (16-24).\n+   We also have a fake `arg-pointer' register 030 (25) used for\n+   register elimination.  */\n #define FIRST_PSEUDO_REGISTER 25\n \n-/* This defines the register which is used to hold the offset table for PIC.  */\n+/* All m68k targets (except AmigaOS) use %a5 as the PIC register  */\n #define PIC_OFFSET_TABLE_REGNUM (flag_pic ? 13 : INVALID_REGNUM)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n-   On the 68000, only the stack pointer is such.  */\n-\n+   On the m68k, only the stack pointer is such.\n+   Our fake arg-pointer is obviously fixed as well.  */\n #define FIXED_REGISTERS        \\\n  {/* Data registers.  */       \\\n   0, 0, 0, 0, 0, 0, 0, 0,      \\\n@@ -486,10 +423,19 @@ extern int target_flags;\n    The latter must include the registers where values are returned\n    and the register where structure-value addresses are passed.\n    Aside from that, you can include as many other registers as you like.  */\n-#define CALL_USED_REGISTERS \\\n- {1, 1, 0, 0, 0, 0, 0, 0,   \\\n-  1, 1, 0, 0, 0, 0, 0, 1,   \\\n-  1, 1, 0, 0, 0, 0, 0, 0, 1 }\n+#define CALL_USED_REGISTERS     \\\n+ {/* Data registers.  */        \\\n+  1, 1, 0, 0, 0, 0, 0, 0,       \\\n+                                \\\n+  /* Address registers.  */     \\\n+  1, 1, 0, 0, 0, 0, 0, 1,       \\\n+                                \\\n+  /* Floating point registers   \\\n+     (if available).  */        \\\n+  1, 1, 0, 0, 0, 0, 0, 0,       \\\n+                                \\\n+  /* Arg pointer.  */           \\\n+  1 }\n \n #define REG_ALLOC_ORDER\t\t\\\n { /* d0/d1/a0/a1 */\t\t\\\n@@ -507,39 +453,31 @@ extern int target_flags;\n    This assumes that putting a register in fixed_regs will keep the\n    compiler's mitts completely off it.  We don't bother to zero it out\n    of register classes.  */\n-\n #define CONDITIONAL_REGISTER_USAGE\t\t\t\t\\\n-{ \t\t\t\t\t\t\t\t\\\n-  int i; \t\t\t\t\t\t\t\\\n-  HARD_REG_SET x; \t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  HARD_REG_SET x;\t\t\t\t\t\t\\\n   if (! TARGET_68881)\t\t\t\t\t\t\\\n-    { \t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n       COPY_HARD_REG_SET (x, reg_class_contents[(int)FP_REGS]);\t\\\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++ )\t\t\\\n-       if (TEST_HARD_REG_BIT (x, i)) \t\t\t\t\\\n-\tfixed_regs[i] = call_used_regs[i] = 1; \t\t\t\\\n-    } \t\t\t\t\t\t\t\t\\\n+      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\t\t\\\n+        if (TEST_HARD_REG_BIT (x, i))\t\t\t\t\\\n+\t  fixed_regs[i] = call_used_regs[i] = 1;\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n   if (PIC_OFFSET_TABLE_REGNUM != INVALID_REGNUM)\t\t\\\n     fixed_regs[PIC_OFFSET_TABLE_REGNUM]\t\t\t\t\\\n       = call_used_regs[PIC_OFFSET_TABLE_REGNUM] = 1;\t\t\\\n }\n \n-/* Return number of consecutive hard regs needed starting at reg REGNO\n-   to hold something of mode MODE.\n-   This is ordinarily the length in words of a value of mode MODE\n-   but can be less for certain modes in special long registers.\n-\n-   On the 68000, ordinary registers hold 32 bits worth;\n+/* On the m68k, ordinary registers hold 32 bits worth;\n    for the 68881 registers, a single register is always enough for\n    anything that can be stored in them at all.  */\n #define HARD_REGNO_NREGS(REGNO, MODE)   \\\n   ((REGNO) >= 16 ? GET_MODE_NUNITS (MODE)\t\\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n-/* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n-   On the 68000, the cpu registers can hold any mode but the 68881 registers\n+/* On the m68k, the cpu registers can hold any mode but the 68881 registers\n    can hold only SFmode or DFmode.  */\n-\n #define HARD_REGNO_MODE_OK(REGNO, MODE) \\\n   (((REGNO) < 16\t\t\t\t\t\\\n     && !((REGNO) < 8 && (REGNO) + GET_MODE_SIZE (MODE) / 4 > 8))\t\\\n@@ -548,11 +486,6 @@ extern int target_flags;\n \t   || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT)\t\t\\\n        && GET_MODE_UNIT_SIZE (MODE) <= 12))\n \n-\n-/* Value is 1 if it is a good idea to tie two pseudo registers\n-   when one has mode MODE1 and one has mode MODE2.\n-   If HARD_REGNO_MODE_OK could produce different values for MODE1 and MODE2,\n-   for any hard reg, then this must be 0 for correct output.  */\n #define MODES_TIEABLE_P(MODE1, MODE2)\t\t\t\\\n   (! TARGET_68881\t\t\t\t\t\\\n    || ((GET_MODE_CLASS (MODE1) == MODE_FLOAT\t\t\\\n@@ -563,19 +496,13 @@ extern int target_flags;\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n \n-/* m68000 pc isn't overloaded on a register.  */\n-/* #define PC_REGNUM  */\n-\n-/* Register to use for pushing function arguments.  */\n #define STACK_POINTER_REGNUM 15\n \n-/* Base register for access to local variables of the function.  */\n+/* Most m68k targets use %a6 as a frame pointer.  The AmigaOS\n+   ABI uses %a6 for shared library calls, therefore the frame\n+   pointer is shifted to %a5 on this target.  */\n #define FRAME_POINTER_REGNUM 14\n \n-/* Value should be nonzero if functions must have frame pointers.\n-   Zero means the frame pointer need not be set up (and parms\n-   may be accessed via the stack pointer) in functions that seem suitable.\n-   This is computed in `reload', in reload1.c.  */\n #define FRAME_POINTER_REQUIRED 0\n \n /* Base register for access to arguments of the function.\n@@ -584,36 +511,16 @@ extern int target_flags;\n  */\n #define ARG_POINTER_REGNUM 24\n \n-/* Register in which static-chain is passed to a function.  */\n #define STATIC_CHAIN_REGNUM 8\n \n /* Register in which address to store a structure value\n    is passed to a function.  */\n #define M68K_STRUCT_VALUE_REGNUM 9\n-\f\n-/* Define the classes of registers for register constraints in the\n-   machine description.  Also define ranges of constants.\n \n-   One of the classes must always be named ALL_REGS and include all hard regs.\n-   If there is more than one class, another class must be named NO_REGS\n-   and contain no registers.\n-\n-   The name GENERAL_REGS must be the name of a class (or an alias for\n-   another name such as ALL_REGS).  This is the class of registers\n-   that is allowed by \"g\" or \"r\" in a register constraint.\n-   Also, registers outside this class are allocated only when\n-   instructions express preferences for them.\n-\n-   The classes must be numbered in nondecreasing order; that is,\n-   a larger-numbered class must never be contained completely\n-   in a smaller-numbered class.\n-\n-   For any two classes, it is very desirable that there be another\n-   class that represents their union.  */\n+\f\n \n-/* The 68000 has three kinds of registers, so eight classes would be\n+/* The m68k has three kinds of registers, so eight classes would be\n    a complete set.  One of them is not needed.  */\n-\n enum reg_class {\n   NO_REGS, DATA_REGS,\n   ADDR_REGS, FP_REGS,\n@@ -623,18 +530,12 @@ enum reg_class {\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.  */\n-\n #define REG_CLASS_NAMES \\\n  { \"NO_REGS\", \"DATA_REGS\",              \\\n    \"ADDR_REGS\", \"FP_REGS\",              \\\n    \"GENERAL_REGS\", \"DATA_OR_FP_REGS\",   \\\n    \"ADDR_OR_FP_REGS\", \"ALL_REGS\" }\n \n-/* Define which registers fit in which classes.\n-   This is an initializer for a vector of HARD_REG_SET\n-   of length N_REG_CLASSES.  */\n-\n #define REG_CLASS_CONTENTS \\\n {\t\t\t\t\t\\\n   {0x00000000},  /* NO_REGS */\t\t\\\n@@ -647,40 +548,24 @@ enum reg_class {\n   {0x01ffffff},  /* ALL_REGS */\t\t\\\n }\n \n-/* The same information, inverted:\n-   Return the class number of the smallest class containing\n-   reg number REGNO.  This could be a conditional expression\n-   or could index an array.  */\n-\n extern enum reg_class regno_reg_class[];\n #define REGNO_REG_CLASS(REGNO) (regno_reg_class[(REGNO)])\n-\n-/* The class value for index registers, and the one for base regs.  */\n-\n #define INDEX_REG_CLASS GENERAL_REGS\n #define BASE_REG_CLASS ADDR_REGS\n \n-/* Get reg_class from a letter such as appears in the machine description.\n-   We do a trick here to modify the effective constraints on the\n+/* We do a trick here to modify the effective constraints on the\n    machine description; we zorch the constraint letters that aren't\n    appropriate for a specific target.  This allows us to guarantee\n    that a specific kind of register will not be used for a given target\n    without fiddling with the register classes above.  */\n-\n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'a' ? ADDR_REGS :\t\t\t\\\n    ((C) == 'd' ? DATA_REGS :\t\t\t\\\n     ((C) == 'f' ? (TARGET_68881 ? FP_REGS :\t\\\n \t\t   NO_REGS) :\t\t\t\\\n      NO_REGS)))\n \n-/* The letters I, J, K, L and M in a register constraint string\n-   can be used to stand for particular ranges of immediate operands.\n-   This macro defines what the ranges are.\n-   C is the letter, and VALUE is a constant value.\n-   Return 1 if VALUE is in the range specified by C.\n-\n-   For the 68000, `I' is used for the range 1 to 8\n+/* For the m68k, `I' is used for the range 1 to 8\n    allowed as immediate shift counts and in addq.\n    `J' is used for the range of signed numbers that fit in 16 bits.\n    `K' is for numbers that moveq can't handle.\n@@ -689,7 +574,6 @@ extern enum reg_class regno_reg_class[];\n    'N' is for range 24 to 31, rotatert:SI 8 to 1 expressed as rotate.\n    'O' is for 16 (for rotate using swap).\n    'P' is for range 8 to 15, rotatert:HI 8 to 1 expressed as rotate.  */\n-\n #define CONST_OK_FOR_LETTER_P(VALUE, C) \\\n   ((C) == 'I' ? (VALUE) > 0 && (VALUE) <= 8 : \\\n    (C) == 'J' ? (VALUE) >= -0x8000 && (VALUE) <= 0x7FFF : \\\n@@ -700,33 +584,16 @@ extern enum reg_class regno_reg_class[];\n    (C) == 'O' ? (VALUE) == 16 : \\\n    (C) == 'P' ? (VALUE) >= 8 && (VALUE) <= 15 : 0)\n \n-/*\n- * A small bit of explanation:\n- * \"G\" defines all of the floating constants that are *NOT* 68881\n- * constants.  this is so 68881 constants get reloaded and the\n- * fpmovecr is used.\n- */\n+/* \"G\" defines all of the floating constants that are *NOT* 68881\n+   constants.  This is so 68881 constants get reloaded and the\n+   fpmovecr is used.  */\n #define CONST_DOUBLE_OK_FOR_LETTER_P(VALUE, C)  \\\n   ((C) == 'G' ? ! (TARGET_68881 && standard_68881_constant_p (VALUE)) : 0 )\n \n-/* A C expression that defines the optional machine-dependent constraint\n-   letters that can be used to segregate specific types of operands,  \n-   usually memory references, for the target machine.  It should return 1 if\n-   VALUE corresponds to the operand type represented by the constraint letter\n-   C.  If C is not defined as an extra constraint, the value returned should \n-   be 0 regardless of VALUE.  */\n-\n-/* Letters in the range `Q' through `U' may be defined in a\n-   machine-dependent fashion to stand for arbitrary operand types. \n-   The machine description macro `EXTRA_CONSTRAINT' is passed the\n-   operand as its first argument and the constraint letter as its\n-   second operand.\n-\n-   `Q' means address register indirect addressing mode.\n+/* `Q' means address register indirect addressing mode.\n    `S' is for operands that satisfy 'm' when -mpcrel is in effect.\n    `T' is for operands that satisfy 's' when -mpcrel is not in effect.\n    `U' is for register offset addressing.  */\n-\n #define EXTRA_CONSTRAINT(OP,CODE)\t\t\t\\\n   (((CODE) == 'S')\t\t\t\t\t\\\n    ? (TARGET_PCREL\t\t\t\t\t\\\n@@ -753,14 +620,9 @@ extern enum reg_class regno_reg_class[];\n    :\t\t\t\t\t\t\t\\\n    0))))\n \n-/* Given an rtx X being reloaded into a reg required to be\n-   in class CLASS, return the class of reg to actually use.\n-   In general this is just CLASS; but on some machines\n-   in some cases it is preferable to use a more restrictive class.\n-   On the 68000 series, use a data reg if possible when the\n+/* On the m68k, use a data reg if possible when the\n    value is a constant in the range where moveq could be used\n    and we ensure that QImodes are reloaded into data regs.  */\n-\n #define PREFERRED_RELOAD_CLASS(X,CLASS)  \\\n   ((GET_CODE (X) == CONST_INT\t\t\t\\\n     && (unsigned) (INTVAL (X) + 0x80) < 0x100\t\\\n@@ -782,15 +644,12 @@ extern enum reg_class regno_reg_class[];\n    since QImode stores from address regs are not supported.  We make the\n    assumption that if the class is not ADDR_REGS, then it must be a superset\n    of DATA_REGS.  */\n-\n #define LIMIT_RELOAD_CLASS(MODE, CLASS) \\\n   (((MODE) == QImode && (CLASS) != ADDR_REGS)\t\\\n    ? DATA_REGS\t\t\t\t\t\\\n    : (CLASS))\n \n-/* Return the maximum number of consecutive registers\n-   needed to represent mode MODE in a register of class CLASS.  */\n-/* On the 68000, this is the size of MODE in words,\n+/* On the m68k, this is the size of MODE in words,\n    except in the FP regs, where a single reg is always enough.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\\\n  ((CLASS) == FP_REGS ? 1 \\\n@@ -804,172 +663,88 @@ extern enum reg_class regno_reg_class[];\n \f\n /* Stack layout; function entry, exit and calling.  */\n \n-/* Define this if pushing a word on the stack\n-   makes the stack pointer a smaller address.  */\n #define STACK_GROWS_DOWNWARD\n-\n-/* Define this if the nominal address of the stack frame\n-   is at the high-address end of the local variables;\n-   that is, each additional local variable allocated\n-   goes at a more negative offset in the frame.  */\n #define FRAME_GROWS_DOWNWARD\n-\n-/* Offset within stack frame to start allocating local variables at.\n-   If FRAME_GROWS_DOWNWARD, this is the offset to the END of the\n-   first local allocated.  Otherwise, it is the offset to the BEGINNING\n-   of the first local allocated.  */\n #define STARTING_FRAME_OFFSET 0\n \n-/* If we generate an insn to push BYTES bytes,\n-   this says how many the stack pointer really advances by.\n-   On the 68000, sp@- in a byte insn really pushes a word.\n-   On the 5200 (ColdFire), sp@- in a byte insn pushes just a byte.  */\n+/* On the 680x0, sp@- in a byte insn really pushes a word.\n+   On the ColdFire, sp@- in a byte insn pushes just a byte.  */\n #define PUSH_ROUNDING(BYTES) (TARGET_COLDFIRE ? BYTES : ((BYTES) + 1) & ~1)\n \n /* We want to avoid trying to push bytes.  */\n #define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n   (move_by_pieces_ninsns (SIZE, ALIGN) < MOVE_RATIO \\\n     && (((SIZE) >=16 && (ALIGN) >= 16) || (TARGET_COLDFIRE)))\n \n-/* Offset of first parameter from the argument pointer register value.  */\n #define FIRST_PARM_OFFSET(FNDECL) 8\n \n-/* Value is the number of byte of arguments automatically\n-   popped when returning from a subroutine call.\n-   FUNDECL is the declaration node of the function (as a tree),\n-   FUNTYPE is the data type of the function (as a tree),\n-   or for a library call it is an identifier node for the subroutine name.\n-   SIZE is the number of bytes of arguments passed on the stack.\n-\n-   On the 68000, the RTS insn cannot pop anything.\n+/* On the 68000, the RTS insn cannot pop anything.\n    On the 68010, the RTD insn may be used to pop them if the number\n      of args is fixed, but if the number is variable then the caller\n      must pop them all.  RTD can't be used for library calls now\n      because the library is compiled with the Unix compiler.\n    Use of RTD is a selectable option, since it is incompatible with\n    standard Unix calling sequences.  If the option is not selected,\n    the caller must always pop the args.  */\n-\n #define RETURN_POPS_ARGS(FUNDECL,FUNTYPE,SIZE)   \\\n   ((TARGET_RTD && (!(FUNDECL) || TREE_CODE (FUNDECL) != IDENTIFIER_NODE)\t\\\n     && (TYPE_ARG_TYPES (FUNTYPE) == 0\t\t\t\t\\\n \t|| (TREE_VALUE (tree_last (TYPE_ARG_TYPES (FUNTYPE)))\t\\\n \t    == void_type_node)))\t\t\t\t\\\n    ? (SIZE) : 0)\n \n-/* Define how to find the value returned by a function.\n-   VALTYPE is the data type of the value (as a tree).\n-   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.  */\n-\n-/* On the 68000 the return value is in D0 regardless.  */\n-\n+/* On the m68k the return value is always in D0.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC)  \\\n   gen_rtx_REG (TYPE_MODE (VALTYPE), 0)\n \n-/* Define how to find the value returned by a library function\n-   assuming the value has mode MODE.  */\n-\n-/* On the 68000 the return value is in D0 regardless.  */\n-\n+/* On the m68k the return value is always in D0.  */\n #define LIBCALL_VALUE(MODE)  gen_rtx_REG (MODE, 0)\n \n-/* 1 if N is a possible register number for a function value.\n-   On the 68000, d0 is the only register thus used.  */\n-\n+/* On the m68k, D0 is the only register used.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n /* Define this to be true when FUNCTION_VALUE_REGNO_P is true for\n-   more than one register.  */\n-\n+   more than one register.\n+   XXX This macro is m68k specific and used only for m68kemb.h.  */\n #define NEEDS_UNTYPED_CALL 0\n \n-/* Define this if PCC uses the nonreentrant convention for returning\n-   structure and union values.  */\n-\n #define PCC_STATIC_STRUCT_RETURN\n \n-/* 1 if N is a possible register number for function argument passing.\n-   On the 68000, no registers are used in this way.  */\n-\n+/* On the m68k, all arguments are usually pushed on the stack.  */\n #define FUNCTION_ARG_REGNO_P(N) 0\n \f\n-/* Define a data type for recording info about an argument list\n-   during the scan of that argument list.  This data type should\n-   hold all necessary information about the function itself\n-   and about the args processed so far, enough to enable macros\n-   such as FUNCTION_ARG to determine where the next arg should go.\n-\n-   On the m68k, this is a single integer, which is a number of bytes\n+/* On the m68k, this is a single integer, which is a number of bytes\n    of arguments scanned so far.  */\n-\n #define CUMULATIVE_ARGS int\n \n-/* Initialize a variable CUM of type CUMULATIVE_ARGS\n-   for a call to a function whose data type is FNTYPE.\n-   For a library call, FNTYPE is 0.\n-\n-   On the m68k, the offset starts at 0.  */\n-\n+/* On the m68k, the offset starts at 0.  */\n #define INIT_CUMULATIVE_ARGS(CUM, FNTYPE, LIBNAME, INDIRECT, N_NAMED_ARGS) \\\n  ((CUM) = 0)\n \n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-\n #define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED)\t\\\n  ((CUM) += ((MODE) != BLKmode\t\t\t\\\n \t    ? (GET_MODE_SIZE (MODE) + 3) & ~3\t\\\n \t    : (int_size_in_bytes (TYPE) + 3) & ~3))\n \n-/* Define where to put the arguments to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).\n-\n-   On the m68k all args are always pushed.  */\n-\n+/* On the m68k all args are always pushed.  */\n #define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) 0\n-\n-/* For an arg passed partly in registers and partly in memory,\n-   this is the number of registers used.\n-   For args passed entirely in registers or entirely in memory, zero.  */\n-\n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) 0\n \n-/* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.  */\n-\n #define FUNCTION_PROFILER(FILE, LABELNO)  \\\n   asm_fprintf (FILE, \"\\tlea %LLP%d,%Ra0\\n\\tjsr mcount\\n\", (LABELNO))\n \n-/* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n-   the stack pointer does not matter.  The value is tested only in\n-   functions that have frame pointers.\n-   No definition is equivalent to always zero.  */\n-\n #define EXIT_IGNORE_STACK 1\n \n-/* This is a hook for other tm files to change.  */\n-/* #define FUNCTION_EXTRA_EPILOGUE(FILE, SIZE) */\n-\n /* Determine if the epilogue should be output as RTL.\n-   You should override this if you define FUNCTION_EXTRA_EPILOGUE.  */\n+   You should override this if you define FUNCTION_EXTRA_EPILOGUE.\n+\n+   XXX This macro is m68k-specific and only used in m68k.md.  */\n #define USE_RETURN_INSN use_return_insn ()\n \n /* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n+   of a trampoline, leaving space for the variable parts.\n \n-/* On the 68k, the trampoline looks like this:\n+   On the m68k, the trampoline looks like this:\n      movl #STATIC,a0\n      jmp  FUNCTION\n \n@@ -979,36 +754,25 @@ extern enum reg_class regno_reg_class[];\n    using an out-of-line transfer function or pc-relative data, but\n    the fact remains that the code to jump to the transfer function\n    or the code to load the pc-relative data needs to be flushed\n-   just as much as the \"variable\" portion of the trampoline.  \n+   just as much as the \"variable\" portion of the trampoline.\n    Recognizing that a cache flush is going to be required anyway,\n-   dispense with such notions and build a smaller trampoline.  */\n+   dispense with such notions and build a smaller trampoline.\n \n-/* Since more instructions are required to move a template into\n+   Since more instructions are required to move a template into\n    place than to create it on the spot, don't use a template.  */\n \n-/* Length in units of the trampoline for entering a nested function.  */\n-\n #define TRAMPOLINE_SIZE 12\n-\n-/* Alignment required for a trampoline in bits.  */\n-\n #define TRAMPOLINE_ALIGNMENT 16\n \n /* Targets redefine this to invoke code to either flush the cache,\n    or enable stack execution (or both).  */\n-\n #ifndef FINALIZE_TRAMPOLINE\n #define FINALIZE_TRAMPOLINE(TRAMP)\n #endif\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.\n-\n-   We generate a two-instructions program at address TRAMP :\n+/* We generate a two-instructions program at address TRAMP :\n \tmovea.l &CXT,%a0\n-\tjmp FNADDR\t\t\t\t\t*/\n-\n+\tjmp FNADDR  */\n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   emit_move_insn (gen_rtx_MEM (HImode, TRAMP), GEN_INT(0x207C));\t\\\n@@ -1019,16 +783,15 @@ extern enum reg_class regno_reg_class[];\n   FINALIZE_TRAMPOLINE(TRAMP);\t\t\t\t\t\t\\\n }\n \n-/* This is the library routine that is used\n-   to transfer control from the trampoline\n-   to the actual nested function.\n-   It is defined for backward compatibility,\n-   for linking with object code that used the old\n-   trampoline definition.  */\n+/* This is the library routine that is used to transfer control from the\n+   trampoline to the actual nested function.  It is defined for backward\n+   compatibility, for linking with object code that used the old trampoline\n+   definition.\n \n-/* A colon is used with no explicit operands\n-   to cause the template string to be scanned for %-constructs.  */\n-/* The function name __transfer_from_trampoline is not actually used.\n+   A colon is used with no explicit operands to cause the template string\n+   to be scanned for %-constructs.\n+\n+   The function name __transfer_from_trampoline is not actually used.\n    The function definition just permits use of \"asm with operands\"\n    (though the operand list is empty).  */\n #define TRANSFER_FROM_TRAMPOLINE\t\t\t\t\\\n@@ -1043,52 +806,29 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n   asm (\"rts\":);\t\t\t\t\t\t\t\\\n }\n \f\n-/* Definitions for register eliminations.\n-\n-   This is an array of structures.  Each structure initializes one pair\n-   of eliminable registers.  The \"from\" register number is given first,\n-   followed by \"to\".  Eliminations of the same \"from\" register are listed\n-   in order of preference.\n-\n-   There are two registers that can always be eliminated on the m68k.\n+/* There are two registers that can always be eliminated on the m68k.\n    The frame pointer and the arg pointer can be replaced by either the\n    hard frame pointer or to the stack pointer, depending upon the\n    circumstances.  The hard frame pointer is not used before reload and\n    so it is not eligible for elimination.  */\n-\n #define ELIMINABLE_REGS\t\t\t\t\t\\\n {{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\\\n- { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM },\t\\\n+ { ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM },\t\t\\\n  { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM }}\n \n-/* Given FROM and TO register numbers, say whether this elimination is\n-   allowed.  Frame pointer elimination is automatically handled.\n-\n-   All other eliminations are valid.  */\n-\n #define CAN_ELIMINATE(FROM, TO) \\\n   ((TO) == STACK_POINTER_REGNUM ? ! frame_pointer_needed : 1)\n \n-/* Define the offset between two registers, one to be eliminated, and the other\n-   its replacement, at the start of a routine.  */\n-\n #define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   (OFFSET) = m68k_initial_elimination_offset(FROM, TO)\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n #define HAVE_POST_INCREMENT 1\n-\n #define HAVE_PRE_DECREMENT 1\n \n /* Macros to check register numbers against specific register classes.  */\n \n-/* These assume that REGNO is a hard or pseudo reg number.\n-   They give nonzero only if REGNO is a hard reg of the suitable class\n-   or a pseudo reg currently allocated to a suitable hard reg.\n-   Since they use reg_renumber, they are safe only once reg_renumber\n-   has been allocated, which happens in local-alloc.c.  */\n-\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n ((REGNO) < 16 || (unsigned) reg_renumber[REGNO] < 16)\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n@@ -1101,46 +841,31 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n \n-   These macros are specific to the 68000, and may be used only\n+   These macros are specific to the m68k, and may be used only\n    in code for printing assembler insns and in conditions for\n    define_optimization.  */\n \n /* 1 if X is a data register.  */\n-\n #define DATA_REG_P(X) (REG_P (X) && REGNO_OK_FOR_DATA_P (REGNO (X)))\n \n /* 1 if X is an fp register.  */\n-\n #define FP_REG_P(X) (REG_P (X) && REGNO_OK_FOR_FP_P (REGNO (X)))\n \n /* 1 if X is an address register  */\n-\n #define ADDRESS_REG_P(X) (REG_P (X) && REGNO_OK_FOR_BASE_P (REGNO (X)))\n \f\n-/* Maximum number of registers that can appear in a valid memory address.  */\n \n #define MAX_REGS_PER_ADDRESS 2\n \n-/* Recognize any constant value that is a valid address.  */\n-\n #define CONSTANT_ADDRESS_P(X)   \\\n   (GET_CODE (X) == LABEL_REF || GET_CODE (X) == SYMBOL_REF\t\t\\\n    || GET_CODE (X) == CONST_INT || GET_CODE (X) == CONST\t\t\\\n    || GET_CODE (X) == HIGH)\n \n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n-\n #define LEGITIMATE_CONSTANT_P(X) (GET_MODE (X) != XFmode)\n \n-/* Nonzero if the constant value X is a legitimate general operand\n-   when generating PIC code.  It is given that flag_pic is on and \n-   that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n-\n-   PCREL_GENERAL_OPERAND_OK makes reload accept addresses that are\n-   accepted by insn predicates, but which would otherwise fail the\n-   `general_operand' test.  */\n-\n #ifndef REG_OK_STRICT\n #define PCREL_GENERAL_OPERAND_OK 0\n #else\n@@ -1152,19 +877,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    || (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X))\t\\\n    || PCREL_GENERAL_OPERAND_OK)\n \n-/* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n-   and check its validity for a certain class.\n-   We have two alternate definitions for each of them.\n-   The usual definition accepts all pseudo regs; the other rejects\n-   them unless they have been allocated suitable hard regs.\n-   The symbol REG_OK_STRICT causes the latter definition to be used.\n-\n-   Most source files want to accept pseudo regs in the hope that\n-   they will get allocated to the class that the insn wants them to be in.\n-   Source files for reload pass need to be strict.\n-   After reload, it makes no difference, since pseudo regs have\n-   been eliminated by then.  */\n-\n #ifndef REG_OK_STRICT\n \n /* Nonzero if X is a hard reg that can be used as an index\n@@ -1287,24 +999,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    but memory_address_noforce would alter it.  */\n #define PIC_CASE_VECTOR_ADDRESS(index) index\n \f\n-/* Try machine-dependent ways of modifying an illegitimate address\n-   to be legitimate.  If we find one, return the new, valid address.\n-   This macro is used in only one place: `memory_address' in explow.c.\n-\n-   OLDX is the address as it was before break_out_memory_refs was called.\n-   In some cases it is useful to look at this to decide what needs to be done.\n-\n-   MODE and WIN are passed so that this macro can use\n-   GO_IF_LEGITIMATE_ADDRESS.\n-\n-   It is always safe for this macro to do nothing.  It exists to recognize\n-   opportunities to optimize the output.\n-\n-   For the 68000, we handle X+REG by loading X into a register R and\n+/* For the 68000, we handle X+REG by loading X into a register R and\n    using R+REG.  R will go in an address reg and indexing will be used.\n    However, if REG is a broken-out memory address or multiplication,\n    nothing needs to be done because REG can certainly go in an address reg.  */\n-\n #define COPY_ONCE(Y) if (!copied) { Y = copy_rtx (Y); copied = ch = 1; }\n #define LEGITIMIZE_ADDRESS(X,OLDX,MODE,WIN)   \\\n { register int ch = (X) != (OLDX);\t\t\t\t\t\\\n@@ -1339,51 +1037,23 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \t  XEXP (X, 0) = temp;\t\t\t\t\t\t\\\n \t  goto WIN; }}}\n \n-/* Go to LABEL if ADDR (a legitimate address expression)\n-   has an effect that depends on the machine mode it is used for.\n-   On the 68000, only predecrement and postincrement address depend thus\n+/* On the 68000, only predecrement and postincrement address depend thus\n    (the amount of decrement or increment being the length of the operand).  */\n-\n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\t\\\n  if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC) goto LABEL\n \f\n-/* Specify the machine mode that this machine uses\n-   for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE HImode\n-\n-/* Define as C expression which evaluates to nonzero if the tablejump\n-   instruction expects the table to contain offsets from the address of the\n-   table.\n-   Do not define this if the table should contain absolute addresses.  */\n #define CASE_VECTOR_PC_RELATIVE 1\n \n-/* Define this as 1 if `char' should by default be signed; else as 0.  */\n #define DEFAULT_SIGNED_CHAR 1\n-\n-/* Max number of bytes we can move from memory to memory\n-   in one reasonably fast instruction.  */\n #define MOVE_MAX 4\n-\n-/* Nonzero if access to memory by bytes is slow and undesirable.  */\n #define SLOW_BYTE_ACCESS 0\n \n-/* Value is 1 if truncating an integer of INPREC bits to OUTPREC bits\n-   is done just by pretending it is already truncated.  */\n #define TRULY_NOOP_TRUNCATION(OUTPREC, INPREC) 1\n \n-/* We assume that the store-condition-codes instructions store 0 for false\n-   and some other value for true.  This is the value stored for true.  */\n-\n #define STORE_FLAG_VALUE (-1)\n \n-/* Specify the machine mode that pointers have.\n-   After generation of rtl, the compiler makes no further distinction\n-   between pointers and any other objects of this machine mode.  */\n #define Pmode SImode\n-\n-/* A function address in a call instruction\n-   is a byte address (for indexing purposes)\n-   so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n \f\n@@ -1396,15 +1066,10 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    conditional branch must be output.  */\n #define CC_IN_68881 04000\n \n-/* Store in cc_status the expressions that the condition codes will\n-   describe after execution of an instruction whose pattern is EXP.\n-   Do not alter them if the instruction would not alter the cc's.  */\n-\n /* On the 68000, all the insns to store in an address register fail to\n    set the cc's.  However, in some cases these instructions can make it\n    possibly invalid to use the saved cc's.  In those cases we clear out\n    some or all of the saved cc's so they won't be used.  */\n-\n #define NOTICE_UPDATE_CC(EXP,INSN) notice_update_cc (EXP, INSN)\n \n #define OUTPUT_JUMP(NORMAL, FLOAT, NO_OV)  \\\n@@ -1416,55 +1081,16 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n \f\n /* Control the assembler format that we output.  */\n \n-/* Output to assembler file text saying following lines\n-   may contain character constants, extra white space, comments, etc.  */\n-\n #define ASM_APP_ON \"#APP\\n\"\n-\n-/* Output to assembler file text saying following lines\n-   no longer contain unusual constructs.  */\n-\n #define ASM_APP_OFF \"#NO_APP\\n\"\n-\n-/* Output before read-only data.  */\n-\n #define TEXT_SECTION_ASM_OP \"\\t.text\"\n-\n-/* Output before writable data.  */\n-\n #define DATA_SECTION_ASM_OP \"\\t.data\"\n-\n #define GLOBAL_ASM_OP \"\\t.globl\\t\"\n-\n-/* Here are four prefixes that are used by asm_fprintf to\n-   facilitate customization for alternate assembler syntaxes.\n-   Machines with no likelihood of an alternate syntax need not\n-   define these and need not use asm_fprintf.  */\n-\n-/* The prefix for register names.  Note that REGISTER_NAMES\n-   is supposed to include this prefix.  */\n-\n #define REGISTER_PREFIX \"\"\n-\n-/* The prefix for local labels.  You should be able to define this as\n-   an empty string, or any arbitrary string (such as \".\", \".L%\", etc)\n-   without having to make any other changes to account for the specific\n-   definition.  Note it is a string literal, not interpreted by printf\n-   and friends.  */\n-\n #define LOCAL_LABEL_PREFIX \"\"\n-\n-/* The prefix to add to user-visible assembler symbols.  */\n-\n #define USER_LABEL_PREFIX \"_\"\n-\n-/* The prefix for immediate operands.  */\n-\n #define IMMEDIATE_PREFIX \"#\"\n \n-/* How to refer to registers in assembler output.\n-   This sequence is indexed by compiler's hard-register-number (see above).  */\n-\n #define REGISTER_NAMES \\\n {REGISTER_PREFIX\"d0\", REGISTER_PREFIX\"d1\", REGISTER_PREFIX\"d2\",\t\\\n  REGISTER_PREFIX\"d3\", REGISTER_PREFIX\"d4\", REGISTER_PREFIX\"d5\",\t\\\n@@ -1487,10 +1113,8 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n     && frame_pointer_needed) ? \\\n     M68K_FP_REG_NAME : reg_names[(r)])\n \n-/* How to renumber registers for dbx and gdb.\n-   On the Sun-3, the floating point registers have numbers\n+/* On the Sun-3, the floating point registers have numbers\n    18 to 25, not 16 to 23 as they do in the compiler.  */\n-\n #define DBX_REGISTER_NUMBER(REGNO) ((REGNO) < 16 ? (REGNO) : (REGNO) + 2)\n \n /* Before the prologue, RA is at 0(%sp).  */\n@@ -1518,53 +1142,30 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */\n-#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)       \t\t   \\\n+#define ASM_PREFERRED_EH_DATA_FORMAT(CODE, GLOBAL)\t\t\t   \\\n   (flag_pic\t\t\t\t\t\t\t\t   \\\n    ? ((GLOBAL) ? DW_EH_PE_indirect : 0) | DW_EH_PE_pcrel | DW_EH_PE_sdata4 \\\n    : DW_EH_PE_absptr)\n \n-/* This is how to output a reference to a user-level label named NAME.\n-   `assemble_name' uses this.  */\n-\n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n   asm_fprintf (FILE, \"%U%s\", NAME)\n \n-/* This is how to store into the string LABEL\n-   the symbol_ref name of an internal numbered label where\n-   PREFIX is the class of label and NUM is the number within the class.\n-   This is suitable for output with `assemble_name'.  */\n-\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n-/* This is how to output an insn to push a register on the stack.\n-   It need not be very fast code.  */\n-\n #define ASM_OUTPUT_REG_PUSH(FILE,REGNO)  \\\n   asm_fprintf (FILE, \"\\tmovel %s,%Rsp@-\\n\", reg_names[REGNO])\n-\n-/* This is how to output an insn to pop a register from the stack.\n-   It need not be very fast code.  */\n-\n #define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n   asm_fprintf (FILE, \"\\tmovel %Rsp@+,%s\\n\", reg_names[REGNO])\n \n-/* This is how to output an element of a case-vector that is absolute.\n-   (The 68000 does not use such vectors,\n-   but we must define this macro anyway.)  */\n-\n+/* The m68k does not use absolute case-vectors, but we must define this macro\n+   anyway.  */\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n   asm_fprintf (FILE, \"\\t.long %LL%d\\n\", VALUE)\n \n-/* This is how to output an element of a case-vector that is relative.  */\n-\n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL)  \\\n   asm_fprintf (FILE, \"\\t.word %LL%d-%LL%d\\n\", VALUE, REL)\n \n-/* This is how to output an assembler line\n-   that says to advance the location counter\n-   to a multiple of 2**LOG bytes.  */\n-\n /* We don't have a way to align to more than a two-byte boundary, so do the\n    best we can and don't complain.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n@@ -1574,31 +1175,24 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.skip %u\\n\", (int)(SIZE))\n \n-/* This says how to output an assembler line\n-   to define a global common symbol.  */\n-\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n-/* This says how to output an assembler line\n-   to define a local common symbol.  */\n-\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* Output a float value (represented as a C double) as an immediate operand.\n-   This macro is a 68k-specific macro.  */\n-\n+   This macro is m68k-specific.  */\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n  do {\t\t\t\t\t\t\t\t\\\n       if (CODE == 'f')\t\t\t\t\t\t\\\n         {\t\t\t\t\t\t\t\\\n           char dstr[30];\t\t\t\t\t\\\n-      \t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n+\t  real_to_decimal (dstr, &(VALUE), sizeof (dstr), 9, 0); \\\n           asm_fprintf ((FILE), \"%I0r%s\", dstr);\t\t\t\\\n         }\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\\\n@@ -1610,7 +1204,7 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n      } while (0)\n \n /* Output a double value (represented as a C double) as an immediate operand.\n-   This macro is a 68k-specific macro.  */\n+   This macro is m68k-specific.  */\n #define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n  do { char dstr[30];\t\t\t\t\t\t\t\\\n       real_to_decimal (dstr, &(VALUE), sizeof (dstr), 0, 1);\t\t\\\n@@ -1625,11 +1219,7 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n       asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n     } while (0)\n \n-/* Print operand X (an rtx) in assembler syntax to file FILE.\n-   CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n-   For `%' followed by punctuation, CODE is the punctuation and X is null.\n-\n-   On the 68000, we use several CODE characters:\n+/* On the 68000, we use several CODE characters:\n    '.' for dot needed in Motorola-style opcode names.\n    '-' for an operand pushing on the stack:\n        sp@-, -(sp) or -(%sp) depending on the style of syntax.\n@@ -1657,34 +1247,10 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n    || (CODE) == '+' || (CODE) == '@' || (CODE) == '!'\t\t\t\\\n    || (CODE) == '$' || (CODE) == '&' || (CODE) == '/')\n \n-/* A C compound statement to output to stdio stream STREAM the\n-   assembler syntax for an instruction operand X.  X is an RTL\n-   expression.\n-\n-   CODE is a value that can be used to specify one of several ways\n-   of printing the operand.  It is used when identical operands\n-   must be printed differently depending on the context.  CODE\n-   comes from the `%' specification that was used to request\n-   printing of the operand.  If the specification was just `%DIGIT'\n-   then CODE is 0; if the specification was `%LTR DIGIT' then CODE\n-   is the ASCII code for LTR.\n-\n-   If X is a register, this macro should print the register's name.\n-   The names can be found in an array `reg_names' whose type is\n-   `char *[]'.  `reg_names' is initialized from `REGISTER_NAMES'.\n-\n-   When the machine description has a specification `%PUNCT' (a `%'\n-   followed by a punctuation character), this macro is called with\n-   a null pointer for X and the punctuation character for CODE.\n-\n-   See m68k.c for the m68k specific codes.  */\n \n+/* See m68k.c for the m68k specific codes.  */\n #define PRINT_OPERAND(FILE, X, CODE) print_operand (FILE, X, CODE)\n \n-/* A C compound statement to output to stdio stream STREAM the\n-   assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.  */\n-\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n /* Variables in m68k.c */\n@@ -1706,9 +1272,3 @@ extern int m68k_last_compare_had_fp_operands;\n   {\"valid_dbcc_comparison_p\", {EQ, NE, GTU, LTU, GEU, LEU,\t\t\\\n \t\t\t       GT, LT, GE, LE}},\t\t\t\\\n   {\"extend_operator\", {SIGN_EXTEND, ZERO_EXTEND}},\n-\f\n-/*\n-Local variables:\n-version-control: t\n-End:\n-*/"}]}