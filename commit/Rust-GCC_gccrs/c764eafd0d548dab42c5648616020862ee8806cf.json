{"sha": "c764eafd0d548dab42c5648616020862ee8806cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2NGVhZmQwZDU0OGRhYjQyYzU2NDg2MTYwMjA4NjJlZTg4MDZjZg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-15T00:14:45Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-15T00:14:45Z"}, "message": "(eifrac): If FIXUNS_TRUNC_LIKE_FIX_TRUNC, convert on positive overflow\nas if unsigned.\n\nFrom-SVN: r6554", "tree": {"sha": "2cfbeae247768207db48b7638c51b2cf56b8aea1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cfbeae247768207db48b7638c51b2cf56b8aea1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c764eafd0d548dab42c5648616020862ee8806cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c764eafd0d548dab42c5648616020862ee8806cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c764eafd0d548dab42c5648616020862ee8806cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c764eafd0d548dab42c5648616020862ee8806cf/comments", "author": null, "committer": null, "parents": [{"sha": "7aaf8abb281fccb0e961402c8d19416041864632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aaf8abb281fccb0e961402c8d19416041864632", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aaf8abb281fccb0e961402c8d19416041864632"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "ea89ef80787c168fc2b1c604081aa486d1ff5f90", "filename": "gcc/real.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c764eafd0d548dab42c5648616020862ee8806cf/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c764eafd0d548dab42c5648616020862ee8806cf/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=c764eafd0d548dab42c5648616020862ee8806cf", "patch": "@@ -1,8 +1,7 @@\n /* real.c - implementation of REAL_ARITHMETIC, REAL_VALUE_ATOF,\n    and support for XFmode IEEE extended real floating point arithmetic.\n-   Contributed by Stephen L. Moshier (moshier@world.std.com).\n-\n    Copyright (C) 1993, 1994 Free Software Foundation, Inc.\n+   Contributed by Stephen L. Moshier (moshier@world.std.com).\n \n This file is part of GNU CC.\n \n@@ -3822,16 +3821,13 @@ ultoe (lp, y)\n }\n \n \n-/*\n-;\tFind signed HOST_WIDE_INT integer and floating point fractional parts\n-\n-;\tHOST_WIDE_INT i;\n-;\tunsigned EMUSHORT x[NE], frac[NE];\n-;\txifrac (x, &i, frac);\n+/* Find signed HOST_WIDE_INT integer and floating point fractional\n+   parts of e-type (packed internal format) floating point input X.\n+   The integer output I has the sign of the input, except that\n+   positive overflow is permitted if FIXUNS_TRUNC_LIKE_FIX_TRUNC.\n+   The output e-type fraction FRAC is the positive fractional\n+   part of abs (X).  */\n \n-  The integer output has the sign of the input.  The fraction is\n-the positive fractional part of abs (x).\n-*/\n void \n eifrac (x, i, frac)\n      unsigned EMUSHORT *x;\n@@ -3858,7 +3854,17 @@ eifrac (x, i, frac)\n       if (xi[0])\n \t*i = ((unsigned HOST_WIDE_INT) 1) << (HOST_BITS_PER_WIDE_INT - 1);\n       else\n-\t*i = (((unsigned HOST_WIDE_INT) 1) << (HOST_BITS_PER_WIDE_INT - 1)) - 1;\n+\t{\n+#ifdef FIXUNS_TRUNC_LIKE_FIX_TRUNC\n+\t  /* In this case, let it overflow and convert as if unsigned.  */\n+\t  euifrac (x, &ll, frac);\n+\t  *i = (HOST_WIDE_INT) ll;\n+\t  return;\n+#else\n+\t  /* In other cases, return the largest positive integer.  */\n+\t  *i = (((unsigned HOST_WIDE_INT) 1) << (HOST_BITS_PER_WIDE_INT - 1)) - 1;\n+#endif\n+\t}\n       eshift (xi, k);\n       if (extra_warnings)\n \twarning (\"overflow on truncation to integer\");"}]}