{"sha": "8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0MWIxYjI0ZmExN2ZjNDFhMjhjNDQ2NmIxZGNkOGQ5ZmRjYjE3MA==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2004-11-10T21:32:10Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2004-11-10T21:32:10Z"}, "message": "tree-data-ref.c (build_classic_dist_vector): If either loop is outside of the nest we asked about, the dependence can't matter.\n\n2004-11-10  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-data-ref.c (build_classic_dist_vector): If either loop\n\tis outside of the nest we asked about, the dependence can't\n\tmatter.\n\t(build_classic_dir_vector): Ditto.\n\nFrom-SVN: r90454", "tree": {"sha": "04e059bd31757c6683315f9d6855e4478975f882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04e059bd31757c6683315f9d6855e4478975f882"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "78e54994ff2b5b5c716269ea2e47d021362aea9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e54994ff2b5b5c716269ea2e47d021362aea9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e54994ff2b5b5c716269ea2e47d021362aea9c"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "63a487515241c2c0ce5c9de0f89eceef2533d292", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "patch": "@@ -1,3 +1,10 @@\n+2004-11-10  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-data-ref.c (build_classic_dist_vector): If either loop\n+\tis outside of the nest we asked about, the dependence can't\n+\tmatter.\t\n+\t(build_classic_dir_vector): Ditto.\n+\n 2004-11-10  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \t* tree-ssa-loop-ivopts.c (get_address_cost): Add address elements in"}, {"sha": "825b2b41fa9aa43395bb088b3197b7a6a1cb3597", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20041110-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041110-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041110-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20041110-1.c?ref=8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-linear\" } */\n+\n+/* This testcase was causing an ICE in building distance vectors because\n+   we weren't ignoring the fact that one of the induction variables\n+   involved in the dependence was outside of the loop.  */\n+extern int foo (int, int);\n+int\n+main (void)\n+{\n+  int a[50];\n+  int b[50];\n+  int i, j, k;\n+  for (i = 4; i < 30; i++)\n+    {\n+      for (j = 3; j < 40; j++)\n+\t{\n+\t  for (k = 9; k < 50; k++)\n+\t    {\n+\t      b[j] = a[i];\n+\t      a[k] = b[i];\n+\t    }\n+\t}\n+    }\n+  foo (a[i], b[i]);\n+}"}, {"sha": "3c883465076f59074241c97e12e426012c090374", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8b41b1b24fa17fc41a28c4466b1dcd8d9fdcb170", "patch": "@@ -1816,12 +1816,12 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n \t  struct loop *loop_b = current_loops->parray[loop_nb_b];\n \t  struct loop *loop_first = current_loops->parray[first_loop];\n \n-\t  /* If the loops for both variables are at a lower depth than \n-\t     the first_loop's depth, then they can't possibly have a\n+\t  /* If the loop for either variable is at a lower depth than \n+\t     the first_loop's depth, then we can't possibly have a\n \t     dependency at this level of the loop.  */\n \t     \n \t  if (loop_a->depth < loop_first->depth\n-\t      && loop_b->depth < loop_first->depth)\n+\t      || loop_b->depth < loop_first->depth)\n \t    return false;\n \n \t  if (loop_nb_a != loop_nb_b\n@@ -1992,11 +1992,12 @@ build_classic_dir_vector (struct data_dependence_relation *ddr,\n \t  struct loop *loop_b = current_loops->parray[loop_nb_b];\n \t  struct loop *loop_first = current_loops->parray[first_loop];\n  \n-\t  /* If the loops for both variables are at a lower depth than \n-\t     the first_loop's depth, then they can't possibly matter */\n+\t  /* If the loop for either variable is at a lower depth than \n+\t     the first_loop's depth, then we can't possibly have a\n+\t     dependency at this level of the loop.  */\n \t     \n \t  if (loop_a->depth < loop_first->depth\n-\t      && loop_b->depth < loop_first->depth)\n+\t      || loop_b->depth < loop_first->depth)\n \t    return false;\n \n \t  if (loop_nb_a != loop_nb_b"}]}