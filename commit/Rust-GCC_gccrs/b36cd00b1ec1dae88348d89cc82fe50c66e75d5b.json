{"sha": "b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2Y2QwMGIxZWMxZGFlODgzNDhkODljYzgyZmU1MGM2NmU3NWQ1Yg==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2005-01-08T21:47:36Z"}, "committer": {"name": "Tobias Schl\u00fcter", "email": "tobi@gcc.gnu.org", "date": "2005-01-08T21:47:36Z"}, "message": "trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl, [...]): Remove trailing whitespace.\n\n* trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl,\ngfc_conv_intrinsic_bound, gfc_conv_intrinsic_minmaxloc,\ngfc_conv_intrinsic_ishft, gfc_conv_intrinsic_len): Remove\ntrailing whitespace.\n(prepare_arg_info): Fix formatting, indenting and remove trailing\nwhitespace.\n(gfc_conv_intrinsic_spacing, gfc_conv_intrinsic_trim): Remove\ntrailing whitespace.\n\nFrom-SVN: r93092", "tree": {"sha": "a22a058bb6b8a5ba40f7bc84a22112c7e25d206a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a22a058bb6b8a5ba40f7bc84a22112c7e25d206a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92574caf72dc1e582b2f505f3ac961b9076b1b12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92574caf72dc1e582b2f505f3ac961b9076b1b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92574caf72dc1e582b2f505f3ac961b9076b1b12"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "6d9feac41332ee3805b2a02729a6991b5e520a82", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "patch": "@@ -2,6 +2,15 @@\n \n \t* trans-const.c: Don't include unused math.h.\n \n+\t* trans-intrinsic.c (gfc_get_intrinsic_lib_fndecl,\n+\tgfc_conv_intrinsic_bound, gfc_conv_intrinsic_minmaxloc,\n+\tgfc_conv_intrinsic_ishft, gfc_conv_intrinsic_len): Remove\n+\ttrailing whitespace.\n+\t(prepare_arg_info): Fix formatting, indenting and remove trailing\n+\twhitespace.\n+\t(gfc_conv_intrinsic_spacing, gfc_conv_intrinsic_trim): Remove\n+\ttrailing whitespace.\t\n+\t\n 2005-01-08  Tobias Schl\"uter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \t* gfortran.h: Remove outdated comment.  Don't include stdio.h"}, {"sha": "0deb7e81132278c131180ad3ec9a2aea80ddc26e", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b36cd00b1ec1dae88348d89cc82fe50c66e75d5b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=b36cd00b1ec1dae88348d89cc82fe50c66e75d5b", "patch": "@@ -524,7 +524,7 @@ gfc_get_intrinsic_lib_fndecl (gfc_intrinsic_map_t * m, gfc_expr * expr)\n   if (m->libm_name)\n     {\n       gcc_assert (ts->kind == 4 || ts->kind == 8);\n-      snprintf (name, sizeof (name), \"%s%s%s\", \n+      snprintf (name, sizeof (name), \"%s%s%s\",\n \t\tts->type == BT_COMPLEX ? \"c\" : \"\",\n \t\tm->name,\n \t\tts->kind == 4 ? \"f\" : \"\");\n@@ -683,8 +683,8 @@ gfc_conv_intrinsic_bound (gfc_se * se, gfc_expr * expr, int upper)\n       if (flag_bounds_check)\n         {\n           bound = gfc_evaluate_now (bound, &se->pre);\n-          cond = fold (build2 (LT_EXPR, boolean_type_node, \n-\t\t\t       bound, convert (TREE_TYPE (bound), \n+          cond = fold (build2 (LT_EXPR, boolean_type_node,\n+\t\t\t       bound, convert (TREE_TYPE (bound),\n \t\t\t\t\t       integer_zero_node)));\n           tmp = gfc_rank_cst[GFC_TYPE_ARRAY_RANK (TREE_TYPE (desc))];\n           tmp = fold (build2 (GE_EXPR, boolean_type_node, bound, tmp));\n@@ -1461,7 +1461,7 @@ gfc_conv_intrinsic_minmaxloc (gfc_se * se, gfc_expr * expr, int op)\n   tmp = fold (build3 (COND_EXPR, gfc_array_index_type, cond,\n \t\t      loop.from[0], tmp));\n   gfc_add_modify_expr (&loop.pre, pos, tmp);\n-      \n+\n   gfc_mark_ss_chain_used (arrayss, 1);\n   if (maskss)\n     gfc_mark_ss_chain_used (maskss, 1);\n@@ -1805,12 +1805,12 @@ gfc_conv_intrinsic_ishft (gfc_se * se, gfc_expr * expr)\n   /* The Fortran standard allows shift widths <= BIT_SIZE(I), whereas\n      gcc requires a shift width < BIT_SIZE(I), so we have to catch this\n      special case.  */\n-  num_bits = convert (TREE_TYPE (arg2),\t\n+  num_bits = convert (TREE_TYPE (arg2),\n \t\t      build_int_cst (NULL, TYPE_PRECISION (type)));\n   cond = fold (build2 (GE_EXPR, boolean_type_node, width,\n \t\t       convert (TREE_TYPE (arg2), num_bits)));\n \n-  se->expr = fold (build3 (COND_EXPR, type, cond, \n+  se->expr = fold (build3 (COND_EXPR, type, cond,\n \t\t\t   convert (type, integer_zero_node),\n \t\t\t   tmp));\n }\n@@ -1916,11 +1916,11 @@ gfc_conv_intrinsic_len (gfc_se * se, gfc_expr * expr)\n       break;\n \n     default:\n-\tif (arg->expr_type == EXPR_VARIABLE \n-\t    && (arg->ref == NULL || (arg->ref->next == NULL \n+\tif (arg->expr_type == EXPR_VARIABLE\n+\t    && (arg->ref == NULL || (arg->ref->next == NULL\n \t\t\t\t     && arg->ref->type == REF_ARRAY)))\n \t  {\n-\t    /* This doesn't catch all cases. \n+\t    /* This doesn't catch all cases.\n \t       See http://gcc.gnu.org/ml/fortran/2004-06/msg00165.html\n \t       and the surrounding thread.  */\n \t    sym = arg->symtree->n.sym;\n@@ -2343,9 +2343,9 @@ gfc_conv_intrinsic_verify (gfc_se * se, gfc_expr * expr)\n /* Prepare components and related information of a real number which is\n    the first argument of a elemental functions to manipulate reals.  */\n \n-static\n-void prepare_arg_info (gfc_se * se, gfc_expr * expr, \n-                       real_compnt_info * rcs, int all)\n+static void\n+prepare_arg_info (gfc_se * se, gfc_expr * expr,\n+\t\t  real_compnt_info * rcs, int all)\n {\n    tree arg;\n    tree masktype;\n@@ -2358,7 +2358,7 @@ void prepare_arg_info (gfc_se * se, gfc_expr * expr,\n \n    if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n      gfc_todo_error (\"Non-IEEE floating format\");\n-    \n+\n    gcc_assert (expr->expr_type == EXPR_FUNCTION);\n \n    arg = gfc_conv_intrinsic_function_args (se, expr);\n@@ -2394,19 +2394,19 @@ void prepare_arg_info (gfc_se * se, gfc_expr * expr,\n    rcs->bias = fold (build2 (MINUS_EXPR, masktype, tmp ,one));\n \n    if (all)\n-   { \n-     /* exponent, and fraction  */\n-     tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->emask);\n-     tmp = build2 (RSHIFT_EXPR, masktype, tmp, rcs->fdigits);\n-     exponent = gfc_create_var (masktype, \"exponent\");\n-     gfc_add_modify_expr(&se->pre, exponent, tmp);\n-     rcs->expn = exponent;\n-\n-     tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->fmask);\n-     fraction = gfc_create_var (masktype, \"fraction\");\n-     gfc_add_modify_expr(&se->pre, fraction, tmp);\n-     rcs->frac = fraction;\n-  }\n+     {\n+       /* exponent, and fraction  */\n+       tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->emask);\n+       tmp = build2 (RSHIFT_EXPR, masktype, tmp, rcs->fdigits);\n+       exponent = gfc_create_var (masktype, \"exponent\");\n+       gfc_add_modify_expr(&se->pre, exponent, tmp);\n+       rcs->expn = exponent;\n+\n+       tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->fmask);\n+       fraction = gfc_create_var (masktype, \"fraction\");\n+       gfc_add_modify_expr(&se->pre, fraction, tmp);\n+       rcs->frac = fraction;\n+     }\n }\n \n /* Build a call to __builtin_clz.  */\n@@ -2437,7 +2437,7 @@ call_builtin_clz (tree result_type, tree op0)\n    SPACING (X) = POW (2, e-p)\n \n    We generate:\n-                                                                                \n+\n     t = expn - fdigits // e - p.\n     res = t << fdigits // Form the exponent. Fraction is zero.\n     if (t < 0) // The result is out of range. Denormalized case.\n@@ -2477,7 +2477,7 @@ gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n    So the result's exponent is p. And if X is normalized, X's fraction part\n    is the result's fraction. If X is denormalized, to get the X's fraction we\n    shift X's fraction part to left until the first '1' is removed.\n-   \n+\n    We generate:\n \n     if (expn == 0 && frac == 0)\n@@ -2605,7 +2605,7 @@ gfc_conv_intrinsic_trim (gfc_se * se, gfc_expr * expr)\n   arglist = gfc_chainon_list (arglist, gfc_build_addr_expr (NULL, len));\n   arglist = gfc_chainon_list (arglist, addr);\n   arglist = chainon (arglist, tmp);\n-  \n+\n   tmp = gfc_build_function_call (gfor_fndecl_string_trim, arglist);\n   gfc_add_expr_to_block (&se->pre, tmp);\n "}]}