{"sha": "81cf0354d5f81f2c7600a3bc7ae4600757286995", "node_id": "C_kwDOANBUbNoAKDgxY2YwMzU0ZDVmODFmMmM3NjAwYTNiYzdhZTQ2MDA3NTcyODY5OTU", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-29T15:19:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-11-29T16:01:08Z"}, "message": "libstdc++: Remove unnecessary tag dispatching in std::vector\n\nThere's no need to call a _M_xxx_dispatch function with a\nstatically-known __false_type tag, we can just directly call the\nfunction that should be dispatched to. This will compile a tiny bit\nfaster and save a function call with optimization or inlining turned\noff.\n\nAlso add the always_inline attribute to the __iterator_category helper\nused for dispatching on the iterator category.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator_base_types.h (__iterator_category):\n\tAdd always_inline attribute.\n\t* include/bits/stl_vector.h (assign(Iter, Iter)): Call\n\t_M_assign_aux directly, instead of _M_assign_dispatch.\n\t(insert(const_iterator, Iter, Iter)): Call _M_range_insert\n\tdirectly instead of _M_insert_dispatch.", "tree": {"sha": "fa96fc6258e2224bec647c6c0b6a6ddff53fc89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa96fc6258e2224bec647c6c0b6a6ddff53fc89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81cf0354d5f81f2c7600a3bc7ae4600757286995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cf0354d5f81f2c7600a3bc7ae4600757286995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81cf0354d5f81f2c7600a3bc7ae4600757286995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81cf0354d5f81f2c7600a3bc7ae4600757286995/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ded30b361d2b1e43048b640e9ad6fef161fe9a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ded30b361d2b1e43048b640e9ad6fef161fe9a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ded30b361d2b1e43048b640e9ad6fef161fe9a9"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "5d90c0d8ea73dba7a2ab0f594770804b3b918fcb", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf0354d5f81f2c7600a3bc7ae4600757286995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf0354d5f81f2c7600a3bc7ae4600757286995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=81cf0354d5f81f2c7600a3bc7ae4600757286995", "patch": "@@ -233,6 +233,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  sugar for internal library use only.\n   */\n   template<typename _Iter>\n+    __attribute__((__always_inline__))\n     inline _GLIBCXX_CONSTEXPR\n     typename iterator_traits<_Iter>::iterator_category\n     __iterator_category(const _Iter&)"}, {"sha": "e87fab0e51cf15407870148eb6ecf9d4c6b25049", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81cf0354d5f81f2c7600a3bc7ae4600757286995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81cf0354d5f81f2c7600a3bc7ae4600757286995/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=81cf0354d5f81f2c7600a3bc7ae4600757286995", "patch": "@@ -821,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_GLIBCXX20_CONSTEXPR\n \tvoid\n \tassign(_InputIterator __first, _InputIterator __last)\n-\t{ _M_assign_dispatch(__first, __last, __false_type()); }\n+\t{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }\n #else\n       template<typename _InputIterator>\n \tvoid\n@@ -1478,8 +1478,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t       _InputIterator __last)\n \t{\n \t  difference_type __offset = __position - cbegin();\n-\t  _M_insert_dispatch(begin() + __offset,\n-\t\t\t     __first, __last, __false_type());\n+\t  _M_range_insert(begin() + __offset, __first, __last,\n+\t\t\t  std::__iterator_category(__first));\n \t  return begin() + __offset;\n \t}\n #else"}]}