{"sha": "75df1594ae56dcdcc471f138e088cfa81c48082b", "node_id": "C_kwDOANBUbNoAKDc1ZGYxNTk0YWU1NmRjZGNjNDcxZjEzOGUwODhjZmE4MWM0ODA4MmI", "commit": {"author": {"name": "Yang Yujie", "email": "yangyujie@loongson.cn", "date": "2022-05-19T08:10:15Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-06-08T06:45:02Z"}, "message": "libgccjit: allow common objects in $(EXTRA_GCC_OBJS) and $(EXTRA_OBJS)\n\nThis patch fixes libgccjit build failure on loongarch* targets,\nand could probably be useful for future ports.\n\nFor now, libgccjit is linked with objects from $(EXTRA_GCC_OBJS) and\nlibbackend.a, which contains object files from $(EXTRA_OBJS).\n\nThis effectively forbids any overlap between those two lists, i.e. all\ntarget-specific shared code between the gcc driver and compiler\nexecutables must go into gcc/common/config/<arch>/<arch>-common.cc,\nwhich feels a bit inconvenient when there are a lot of \"common\" stuff\nthat we want to put into separate source files.\n\nBy linking libgccjit with $(EXTRA_GCC_OBJS_EXCLUSIVE), which contains\nall elements from $(EXTRA_GCC_OBJS) but not $(EXTRA_OBJS), this problem\ncan be alleviated.\n\nThis patch does not affect any other target architecture than loongarch,\nand has been bootstrapped and regression-tested on loongarch64-linux-gnuf64\nan x86_64-pc-linux-gnu.\n\n* gcc/jit/ChangeLog:\n\n\t* Make-lang.in: only link objects from $(EXTRA_GCC_OBJS)\n\tthat's not in $(EXTRA_OBJS) into libgccjit.", "tree": {"sha": "ed0e53b000d9e10502ba22f873d423f27de4b09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed0e53b000d9e10502ba22f873d423f27de4b09b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75df1594ae56dcdcc471f138e088cfa81c48082b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCYqBFcwAKCRCsqtIOGecQ\n44P0AP9SQG20ldoelAnTzxqYXB9jjEXOaEkJq6M0umXcaHgwnQEArscAeldDzzgp\nMThNrI5EGopBEbQQfjwBhWy/dv6j6w0=\n=0tI3\n-----END PGP SIGNATURE-----", "payload": "tree ed0e53b000d9e10502ba22f873d423f27de4b09b\nparent 5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5\nauthor Yang Yujie <yangyujie@loongson.cn> 1652947815 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1654670702 +0800\n\nlibgccjit: allow common objects in $(EXTRA_GCC_OBJS) and $(EXTRA_OBJS)\n\nThis patch fixes libgccjit build failure on loongarch* targets,\nand could probably be useful for future ports.\n\nFor now, libgccjit is linked with objects from $(EXTRA_GCC_OBJS) and\nlibbackend.a, which contains object files from $(EXTRA_OBJS).\n\nThis effectively forbids any overlap between those two lists, i.e. all\ntarget-specific shared code between the gcc driver and compiler\nexecutables must go into gcc/common/config/<arch>/<arch>-common.cc,\nwhich feels a bit inconvenient when there are a lot of \"common\" stuff\nthat we want to put into separate source files.\n\nBy linking libgccjit with $(EXTRA_GCC_OBJS_EXCLUSIVE), which contains\nall elements from $(EXTRA_GCC_OBJS) but not $(EXTRA_OBJS), this problem\ncan be alleviated.\n\nThis patch does not affect any other target architecture than loongarch,\nand has been bootstrapped and regression-tested on loongarch64-linux-gnuf64\nan x86_64-pc-linux-gnu.\n\n* gcc/jit/ChangeLog:\n\n\t* Make-lang.in: only link objects from $(EXTRA_GCC_OBJS)\n\tthat's not in $(EXTRA_OBJS) into libgccjit.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75df1594ae56dcdcc471f138e088cfa81c48082b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75df1594ae56dcdcc471f138e088cfa81c48082b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75df1594ae56dcdcc471f138e088cfa81c48082b/comments", "author": {"login": "scylaac", "id": 30362409, "node_id": "MDQ6VXNlcjMwMzYyNDA5", "avatar_url": "https://avatars.githubusercontent.com/u/30362409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scylaac", "html_url": "https://github.com/scylaac", "followers_url": "https://api.github.com/users/scylaac/followers", "following_url": "https://api.github.com/users/scylaac/following{/other_user}", "gists_url": "https://api.github.com/users/scylaac/gists{/gist_id}", "starred_url": "https://api.github.com/users/scylaac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scylaac/subscriptions", "organizations_url": "https://api.github.com/users/scylaac/orgs", "repos_url": "https://api.github.com/users/scylaac/repos", "events_url": "https://api.github.com/users/scylaac/events{/privacy}", "received_events_url": "https://api.github.com/users/scylaac/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "248ec45b72953a32b0015c098dbdf949d37100cb", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75df1594ae56dcdcc471f138e088cfa81c48082b/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75df1594ae56dcdcc471f138e088cfa81c48082b/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=75df1594ae56dcdcc471f138e088cfa81c48082b", "patch": "@@ -157,18 +157,23 @@ LIBGCCJIT_EXTRA_OPTS = $(LIBGCCJIT_VERSION_SCRIPT_OPTION) \\\n endif\n endif\n \n+# Only link objects from $(EXTRA_GCC_OBJS) that's not already\n+# included in libbackend.a ($(EXTRA_OBJS)).\n+EXTRA_GCC_OBJS_EXCLUSIVE = $(foreach _obj1, $(EXTRA_GCC_OBJS), \\\n+\t$(if $(filter $(_obj1), $(EXTRA_OBJS)),, $(_obj1)))\n+\n # We avoid using $(BACKEND) from Makefile.in in order to avoid pulling\n # in main.o\n $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n \tlibbackend.a libcommon-target.a libcommon.a \\\n \t$(CPPLIB) $(LIBDECNUMBER) \\\n \t$(LIBDEPS) $(srcdir)/jit/libgccjit.map \\\n-\t$(EXTRA_GCC_OBJS) $(jit.prev)\n+\t$(EXTRA_GCC_OBJS_EXCLUSIVE) $(jit.prev)\n \t@$(call LINK_PROGRESS,$(INDEX.jit),start)\n \t+$(LLINKER) $(ALL_LINKERFLAGS) $(LDFLAGS) -o $@ -shared \\\n \t     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \\\n \t     $(CPPLIB) $(LIBDECNUMBER) $(EXTRA_GCC_LIBS) $(LIBS) $(BACKENDLIBS) \\\n-\t     $(EXTRA_GCC_OBJS) \\\n+\t     $(EXTRA_GCC_OBJS_EXCLUSIVE) \\\n \t     $(LIBGCCJIT_EXTRA_OPTS)\n \t@$(call LINK_PROGRESS,$(INDEX.jit),end)\n "}]}