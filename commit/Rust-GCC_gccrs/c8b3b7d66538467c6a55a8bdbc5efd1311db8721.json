{"sha": "c8b3b7d66538467c6a55a8bdbc5efd1311db8721", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhiM2I3ZDY2NTM4NDY3YzZhNTVhOGJkYmM1ZWZkMTMxMWRiODcyMQ==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-02-07T19:23:24Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1995-02-07T19:23:24Z"}, "message": "(*): Give names to all anonymous patterns.\n\nFrom-SVN: r8887", "tree": {"sha": "4f6abcfe8cb210cc68b37cd1ab90c1536bf4fde3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f6abcfe8cb210cc68b37cd1ab90c1536bf4fde3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8b3b7d66538467c6a55a8bdbc5efd1311db8721", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b3b7d66538467c6a55a8bdbc5efd1311db8721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8b3b7d66538467c6a55a8bdbc5efd1311db8721", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8b3b7d66538467c6a55a8bdbc5efd1311db8721/comments", "author": null, "committer": null, "parents": [{"sha": "e29eead5ce4e069e5ae22d369eda4e295c833cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29eead5ce4e069e5ae22d369eda4e295c833cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29eead5ce4e069e5ae22d369eda4e295c833cea"}], "stats": {"total": 464, "additions": 232, "deletions": 232}, "files": [{"sha": "223740a126f76f234d52292aa0f10896f96a3a28", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 232, "deletions": 232, "changes": 464, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8b3b7d66538467c6a55a8bdbc5efd1311db8721/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8b3b7d66538467c6a55a8bdbc5efd1311db8721/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=c8b3b7d66538467c6a55a8bdbc5efd1311db8721", "patch": "@@ -688,111 +688,111 @@\n \n ;; Now the DEFINE_INSNs for the compare and scc cases.  First the compares.\n \n-(define_insn \"\"\n+(define_insn \"*cmpsi_insn\"\n   [(set (reg:CC 0)\n \t(compare:CC (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t    (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"cmp %r0,%1\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_fpe_sp32\"\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"! TARGET_V9 && TARGET_FPU\"\n   \"fcmpes %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_fpe_sp32\"\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:DF 0 \"register_operand\" \"e\")\n \t\t       (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"! TARGET_V9 && TARGET_FPU\"\n   \"fcmped %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmptf_fpe_sp32\"\n   [(set (reg:CCFPE 0)\n \t(compare:CCFPE (match_operand:TF 0 \"register_operand\" \"e\")\n \t\t       (match_operand:TF 1 \"register_operand\" \"e\")))]\n   \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fcmpeq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_fp_sp32\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:SF 0 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 1 \"register_operand\" \"f\")))]\n   \"! TARGET_V9 && TARGET_FPU\"\n   \"fcmps %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_fp_sp32\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:DF 0 \"register_operand\" \"e\")\n \t\t      (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"! TARGET_V9 && TARGET_FPU\"\n   \"fcmpd %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmptf_fp_sp32\"\n   [(set (reg:CCFP 0)\n \t(compare:CCFP (match_operand:TF 0 \"register_operand\" \"e\")\n \t\t      (match_operand:TF 1 \"register_operand\" \"e\")))]\n   \"! TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fcmpq %0,%1\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdi_sp64\"\n   [(set (reg:CCX 0)\n \t(compare:CCX (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t     (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_V9\"\n   \"cmp %r0,%1\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_fpe_sp64\"\n   [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFPE (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t       (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n   \"fcmpes %0,%1,%2\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_fpe_sp64\"\n   [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFPE (match_operand:DF 1 \"register_operand\" \"e\")\n \t\t       (match_operand:DF 2 \"register_operand\" \"e\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n   \"fcmped %0,%1,%2\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmptf_fpe_sp64\"\n   [(set (match_operand:CCFPE 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFPE (match_operand:TF 1 \"register_operand\" \"e\")\n \t\t       (match_operand:TF 2 \"register_operand\" \"e\")))]\n   \"TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n   \"fcmpeq %0,%1,%2\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpsf_fp_sp64\"\n   [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFP (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t      (match_operand:SF 2 \"register_operand\" \"f\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n   \"fcmps %0,%1,%2\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmpdf_fp_sp64\"\n   [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFP (match_operand:DF 1 \"register_operand\" \"e\")\n \t\t      (match_operand:DF 2 \"register_operand\" \"e\")))]\n   \"TARGET_V9 && TARGET_FPU\"\n   \"fcmpd %0,%1,%2\"\n   [(set_attr \"type\" \"fpcmp\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmptf_fp_sp64\"\n   [(set (match_operand:CCFP 0 \"ccfp_reg_operand\" \"=c\")\n \t(compare:CCFP (match_operand:TF 1 \"register_operand\" \"e\")\n \t\t      (match_operand:TF 2 \"register_operand\" \"e\")))]\n@@ -803,7 +803,7 @@\n ;; The SEQ and SNE patterns are special because they can be done\n ;; without any branching and do not involve a COMPARE.\n \n-(define_insn \"\"\n+(define_insn \"*snesi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n@@ -813,7 +813,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_snesi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n@@ -823,7 +823,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n@@ -833,7 +833,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_snedi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (ne:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n@@ -843,7 +843,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n@@ -853,7 +853,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_seqsi_zero\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n@@ -863,7 +863,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t       (const_int 0)))\n@@ -873,7 +873,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_seqdi_zero\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (eq:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t       (const_int 0))))\n@@ -887,7 +887,7 @@\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9.\n \n-(define_insn \"\"\n+(define_insn \"*x_plus_i_ne_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n@@ -897,7 +897,7 @@\n   \"subcc %%g0,%1,%%g0\\;addx %2,0,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*x_minus_i_ne_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (ne:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -907,7 +907,7 @@\n   \"subcc %%g0,%1,%%g0\\;subx %2,0,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*x_plus_i_eq_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t(const_int 0))\n@@ -917,7 +917,7 @@\n   \"subcc %%g0,%1,%%g0\\;subx %2,-1,%0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*x_minus_i_eq_0\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 2 \"register_operand\" \"r\")\n \t\t  (eq:SI (match_operand:SI 1 \"register_operand\" \"r\")\n@@ -931,45 +931,45 @@\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9.\n \n-(define_insn \"\"\n+(define_insn \"*sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ltu:SI (reg:CC 0) (const_int 0)))]\n   \"\"\n   \"addx %%g0,0,%0\"\n   [(set_attr \"type\" \"misc\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_sltu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (ltu:SI (reg:CC 0) (const_int 0))))]\n   \"\"\n   \"subx %%g0,0,%0\"\n   [(set_attr \"type\" \"misc\")])\n \n ;; ??? Combine should canonicalize these next two to the same pattern.\n-(define_insn \"\"\n+(define_insn \"*neg_sltu_minus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (neg:SI (ltu:SI (reg:CC 0) (const_int 0)))\n \t\t  (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"subx %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_sltu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (plus:SI (ltu:SI (reg:CC 0) (const_int 0))\n \t\t\t (match_operand:SI 1 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(geu:SI (reg:CC 0) (const_int 0)))]\n   \"\"\n   \"subx %%g0,-1,%0\"\n   [(set_attr \"type\" \"misc\")])\n \n-(define_insn \"\"\n+(define_insn \"*neg_sgeu_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (geu:SI (reg:CC 0) (const_int 0))))]\n   \"\"\n@@ -980,23 +980,23 @@\n ;; ??? The addx/subx insns use the 32 bit carry flag so there are no DImode\n ;; versions for v9.\n \n-(define_insn \"\"\n+(define_insn \"*sltu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (ltu:SI (reg:CC 0) (const_int 0))\n \t\t (match_operand:SI 1 \"arith_operand\" \"rI\")))]\n   \"\"\n   \"addx %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*sltu_plus_x_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (ltu:SI (reg:CC 0) (const_int 0))\n \t\t (plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"addx %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*x_minus_sltu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (ltu:SI (reg:CC 0) (const_int 0))))]\n@@ -1005,31 +1005,31 @@\n   [(set_attr \"type\" \"unary\")])\n \n ;; ??? Combine should canonicalize these next two to the same pattern.\n-(define_insn \"\"\n+(define_insn \"*x_minus_y_minus_sltu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:SI 2 \"arith_operand\" \"rI\"))\n \t\t  (ltu:SI (reg:CC 0) (const_int 0))))]\n   \"\"\n   \"subx %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*x_minus_sltu_plus_y\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (plus:SI (ltu:SI (reg:CC 0) (const_int 0))\n \t\t\t   (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n   \"\"\n   \"subx %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*sgeu_plus_x\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(plus:SI (geu:SI (reg:CC 0) (const_int 0))\n \t\t (match_operand:SI 1 \"register_operand\" \"r\")))]\n   \"\"\n   \"subx %1,-1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*x_minus_sgeu\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t  (geu:SI (reg:CC 0) (const_int 0))))]\n@@ -1043,15 +1043,15 @@\n ;; We have to exclude the cases above, since we will not want combine to\n ;; turn something that does not require a jump into something that does.\n \n-(define_insn \"\"\n+(define_insn \"*scc_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"noov_compare_op\" [(reg 0) (const_int 0)]))]\n   \"\"\n   \"* return output_scc_insn (operands, insn); \"\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"\"\n+(define_insn \"*scc_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operator:DI 1 \"noov_compare_op\" [(reg 0) (const_int 0)]))]\n   \"TARGET_V9\"\n@@ -1251,7 +1251,7 @@\n \f\n ;; Now match both normal and inverted jump.\n \n-(define_insn \"\"\n+(define_insn \"*normal_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"noov_compare_op\"\n \t\t\t\t      [(reg 0) (const_int 0)])\n@@ -1266,7 +1266,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*inverted_branch\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"noov_compare_op\"\n \t\t\t\t      [(reg 0) (const_int 0)])\n@@ -1281,7 +1281,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*normal_fp_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t\t      [(match_operand:CCFP 1 \"ccfp_reg_operand\" \"c\")\n@@ -1297,7 +1297,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*inverted_fp_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t\t      [(match_operand:CCFP 1 \"ccfp_reg_operand\" \"c\")\n@@ -1313,7 +1313,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*normal_fpe_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t\t      [(match_operand:CCFPE 1 \"ccfp_reg_operand\" \"c\")\n@@ -1329,7 +1329,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*inverted_fpe_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"comparison_operator\"\n \t\t\t\t      [(match_operand:CCFPE 1 \"ccfp_reg_operand\" \"c\")\n@@ -1350,7 +1350,7 @@\n \n ;; There are no 32 bit brreg insns.\n \n-(define_insn \"\"\n+(define_insn \"*normal_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_regcmp_op\"\n \t\t\t\t      [(match_operand:DI 1 \"register_operand\" \"r\")\n@@ -1366,7 +1366,7 @@\n }\"\n   [(set_attr \"type\" \"branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*inverted_int_branch_sp64\"\n   [(set (pc)\n \t(if_then_else (match_operator 0 \"v9_regcmp_op\"\n \t\t\t\t      [(match_operand:DI 1 \"register_operand\" \"r\")\n@@ -1384,7 +1384,7 @@\n \f\n ;; Esoteric move insns (lo_sum, high, pic).\n \n-(define_insn \"\"\n+(define_insn \"*lo_sum_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"immediate_operand\" \"in\")))]\n@@ -1398,7 +1398,7 @@\n \n ;; For PIC, symbol_refs are put inside unspec so that the optimizer will not\n ;; confuse them with real addresses.\n-(define_insn \"\"\n+(define_insn \"*pic_lo_sum_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(lo_sum:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t   (unspec:SI [(match_operand:SI 2 \"immediate_operand\" \"in\")] 0)))]\n@@ -1412,23 +1412,23 @@\n \n ;; For PIC, symbol_refs are put inside unspec so that the optimizer will not\n ;; confuse them with real addresses.\n-(define_insn \"\"\n+(define_insn \"*pic_sethi_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (unspec:SI [(match_operand 1 \"\" \"\")] 0)))]\n   \"check_pic (1)\"\n   \"sethi %%hi(%a1),%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*sethi_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"check_pic (1)\"\n   \"sethi %%hi(%a1),%0\"\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*sethi_hi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(high:HI (match_operand 1 \"\" \"\")))]\n   \"check_pic (1)\"\n@@ -1440,7 +1440,7 @@\n ;; It clobbers o7 because the call puts the return address (i.e. pc value)\n ;; there.\n \n-(define_insn \"\"\n+(define_insn \"*move_pic_label_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operand:SI 1 \"move_pic_label\" \"i\"))\n    (set (reg:SI 15) (pc))]\n@@ -1451,7 +1451,7 @@\n \n ;; v9 special pic pattern, for loading the address of a label into a register.\n \n-(define_insn \"\"\n+(define_insn \"*move_pic_label_di\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(match_operand:DI 1 \"move_pic_label\" \"i\"))\n    (set (reg:DI 15) (pc))]\n@@ -1460,7 +1460,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"4\")])\n \n-(define_insn \"\"\n+(define_insn \"*lo_sum_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))]\n@@ -1481,7 +1481,7 @@\n ;; ??? The previous comment is obsolete.\n ;; ??? Optimizer does not handle \"or %o1,%lo(0),%o1\". How about add?\n \n-(define_insn \"\"\n+(define_insn \"*lo_sum_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lo_sum:DI (match_operand:DI 1 \"register_operand\" \"0\")\n \t\t   (match_operand:DI 2 \"immediate_operand\" \"in\")))]\n@@ -1500,7 +1500,7 @@\n   ;; is not an \"arith_operand\".\n   [(set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))]\n   \"! TARGET_V9 && check_pic (1)\"\n@@ -1551,7 +1551,7 @@\n ;;; %uhi and %ulo for them, but gas will handle these correctly.\n ;;; ??? This comment is obsolete, gas handles them now.\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"const_double_operand\" \"\")))\n    (clobber (reg:DI 1))]\n@@ -1593,7 +1593,7 @@\n ;; MEDANY_BASE_REG contains the start address, currently %g4.\n ;; When TARGET_FULLANY, symbolic addresses are 64 bits.\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_medlow\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))\n ;; ??? Why the clobber?\n@@ -1606,7 +1606,7 @@\n ;; WARNING: %0 gets %hi(%1)+%g4.\n ;;          You cannot OR in %lo(%1), it must be added in.\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_medany_data\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"data_segment_operand\" \"\")))\n ;; ??? Why the clobber?\n@@ -1616,7 +1616,7 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_medany_text\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"text_segment_operand\" \"\")))\n ;; ??? Why the clobber?\n@@ -1626,7 +1626,7 @@\n   [(set_attr \"type\" \"move\")\n    (set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*sethi_di_fullany\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(high:DI (match_operand 1 \"\" \"\")))\n    (clobber (reg:DI 1))]\n@@ -1647,7 +1647,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movqi_insn\"\n   [(set (match_operand:QI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,Q\")\n \t(match_operand:QI 1 \"move_operand\" \"rI,K,Q,rJ\"))]\n   \"register_operand (operands[0], QImode)\n@@ -1661,15 +1661,15 @@\n   [(set_attr \"type\" \"move,move,load,store\")\n    (set_attr \"length\" \"*,1,*,1\")])\n \n-(define_insn \"\"\n+(define_insn \"*lo_sum_qi\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n \t(subreg:QI (lo_sum:SI (match_operand:QI 1 \"register_operand\" \"r\")\n \t\t\t      (match_operand 2 \"immediate_operand\" \"in\")) 0))]\n   \"\"\n   \"or %1,%%lo(%a2),%0\"\n   [(set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*store_qi\"\n   [(set (mem:QI (match_operand:SI 0 \"symbolic_operand\" \"\"))\n \t(match_operand:QI 1 \"reg_or_0_operand\" \"rJ\"))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n@@ -1688,7 +1688,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movhi_insn\"\n   [(set (match_operand:HI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,Q\")\n \t(match_operand:HI 1 \"move_operand\" \"rI,K,Q,rJ\"))]\n   \"register_operand (operands[0], HImode)\n@@ -1702,15 +1702,15 @@\n   [(set_attr \"type\" \"move,move,load,store\")\n    (set_attr \"length\" \"*,1,*,1\")])\n \n-(define_insn \"\"\n+(define_insn \"*lo_sum_hi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(lo_sum:HI (match_operand:HI 1 \"register_operand\" \"r\")\n \t\t   (match_operand 2 \"immediate_operand\" \"in\")))]\n   \"\"\n   \"or %1,%%lo(%a2),%0\"\n   [(set_attr \"length\" \"1\")])\n \n-(define_insn \"\"\n+(define_insn \"*store_hi\"\n   [(set (mem:HI (match_operand:SI 0 \"symbolic_operand\" \"\"))\n \t(match_operand:HI 1 \"reg_or_0_operand\" \"rJ\"))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n@@ -1737,7 +1737,7 @@\n ;; problems with register allocation.  Reload might try to put an integer\n ;; in an fp register, or an fp number is an integer register.\n \n-(define_insn \"\"\n+(define_insn \"*movsi_insn\"\n   [(set (match_operand:SI 0 \"reg_or_nonsymb_mem_operand\" \"=r,f,r,r,f,Q,Q\")\n \t(match_operand:SI 1 \"move_operand\" \"rI,!f,K,Q,!Q,rJ,!f\"))]\n   \"register_operand (operands[0], SImode)\n@@ -1754,7 +1754,7 @@\n   [(set_attr \"type\" \"move,fp,move,load,load,store,store\")\n    (set_attr \"length\" \"*,*,1,*,*,*,*\")])\n \n-(define_insn \"\"\n+(define_insn \"*store_si\"\n   [(set (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"\"))\n \t(match_operand:SI 1 \"reg_or_0_operand\" \"rJ\"))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n@@ -1773,7 +1773,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movdi_sp32_insn\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"=r,T,U,Q,r,r,?f,?f,?Q\")\n \t(match_operand:DI 1 \"general_operand\" \"r,U,T,r,Q,i,f,Q,f\"))]\n   \"! TARGET_V9\n@@ -1797,7 +1797,7 @@\n ;;; xor %o0, ((op1 & 0x3ff) | -0x400), %o0\n ;;; This needs the original value of operands[1], not the inverted value.\n \n-(define_insn \"\"\n+(define_insn \"*movdi_sp64_insn\"\n   [(set (match_operand:DI 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,r,Q,?f,?f,?Q\")\n \t(match_operand:DI 1 \"move_operand\" \"rI,K,Q,rJ,f,Q,f\"))]\n   \"TARGET_V9\n@@ -1880,7 +1880,7 @@\n ;  operands[2] = force_not_mem (operands[2]);\n ;}\")\n \n-;(define_insn \"\"\n+;(define_insn \"*block_move_insn\"\n ;  [(set (mem:BLK (match_operand:SI 0 \"register_operand\" \"+r\"))\n ;\t(mem:BLK (match_operand:SI 1 \"register_operand\" \"+r\")))\n ;   (use (match_operand:SI 2 \"nonmemory_operand\" \"rn\"))\n@@ -1900,7 +1900,7 @@\n ;; This pattern forces (set (reg:SF ...) (const_double ...))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movsf pattern.\n-(define_insn \"\"\n+(define_insn \"*movsf_const_insn\"\n   [(set (match_operand:SF 0 \"general_operand\" \"=?r,f,m\")\n \t(match_operand:SF 1 \"\" \"?F,m,G\"))]\n   \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n@@ -1929,7 +1929,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movsf_insn\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\" \"=f,r,f,r,Q,Q\")\n \t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\" \"f,r,Q,Q,f,r\"))]\n   \"TARGET_FPU\n@@ -1948,7 +1948,7 @@\n ;; This is necessary to prevent reload from ever trying to use a `f' reg\n ;; when -mno-fpu.\n \n-(define_insn \"\"\n+(define_insn \"*movsf_no_f_insn\"\n   [(set (match_operand:SF 0 \"reg_or_nonsymb_mem_operand\" \"=r,r,Q\")\n \t(match_operand:SF 1 \"reg_or_nonsymb_mem_operand\" \"r,Q,r\"))]\n   \"! TARGET_FPU\n@@ -1960,7 +1960,7 @@\n    st %r1,%0\"\n   [(set_attr \"type\" \"move,load,store\")])\n \n-(define_insn \"\"\n+(define_insn \"*store_sf\"\n   [(set (mem:SF (match_operand:SI 0 \"symbolic_operand\" \"i\"))\n \t(match_operand:SF 1 \"reg_or_0_operand\" \"rfG\"))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n@@ -1973,7 +1973,7 @@\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movdf pattern.\n \n-(define_insn \"\"\n+(define_insn \"*movdf_const_insn\"\n   [(set (match_operand:DF 0 \"general_operand\" \"=?r,e,o\")\n \t(match_operand:DF 1 \"\" \"?F,m,G\"))]\n   \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n@@ -2010,7 +2010,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movdf_insn\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\" \"=T,U,e,r,Q,Q,e,r\")\n \t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\" \"U,T,e,r,e,r,Q,Q\"))]\n   \"TARGET_FPU\n@@ -2029,7 +2029,7 @@\n ;; This is necessary to prevent reload from ever trying to use a `e' reg\n ;; when -mno-fpu.\n \n-(define_insn \"\"\n+(define_insn \"*movdf_no_e_insn\"\n   [(set (match_operand:DF 0 \"reg_or_nonsymb_mem_operand\" \"=T,U,r,Q,&r\")\n \t(match_operand:DF 1 \"reg_or_nonsymb_mem_operand\" \"U,T,r,r,Q\"))]\n   \"! TARGET_FPU\n@@ -2069,7 +2069,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*store_df\"\n   [(set (mem:DF (match_operand:SI 0 \"symbolic_operand\" \"i,i\"))\n \t(match_operand:DF 1 \"reg_or_0_operand\" \"re,G\"))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n@@ -2088,7 +2088,7 @@\n ;; This pattern forces (set (reg:TF ...) (const_double ...))\n ;; to be reloaded by putting the constant into memory.\n ;; It must come before the more general movtf pattern.\n-(define_insn \"\"\n+(define_insn \"*movtf_const_insn\"\n   [(set (match_operand:TF 0 \"general_operand\" \"=?r,e,o\")\n \t(match_operand:TF 1 \"\" \"?F,m,G\"))]\n   \"TARGET_FPU && GET_CODE (operands[1]) == CONST_DOUBLE\"\n@@ -2129,7 +2129,7 @@\n     DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*movtf_insn\"\n   [(set (match_operand:TF 0 \"reg_or_nonsymb_mem_operand\" \"=e,r,Q,Q,e,&r\")\n \t(match_operand:TF 1 \"reg_or_nonsymb_mem_operand\" \"e,r,e,r,Q,Q\"))]\n   \"TARGET_FPU\n@@ -2148,7 +2148,7 @@\n ;; This is necessary to prevent reload from ever trying to use a `e' reg\n ;; when -mno-fpu.\n \n-(define_insn \"\"\n+(define_insn \"*movtf_no_e_insn\"\n   [(set (match_operand:TF 0 \"reg_or_nonsymb_mem_operand\" \"=r,Q,&r\")\n \t(match_operand:TF 1 \"reg_or_nonsymb_mem_operand\" \"r,r,Q\"))]\n   \"! TARGET_FPU\n@@ -2166,7 +2166,7 @@\n ;; This is disabled because it does not work.  Long doubles have only 8\n ;; byte alignment.  Adding an offset of 8 or 12 to an 8 byte aligned %lo may \n ;; cause it to overflow.  See also GO_IF_LEGITIMATE_ADDRESS.\n-(define_insn \"\"\n+(define_insn \"*store_tf\"\n   [(set (mem:TF (match_operand:SI 0 \"symbolic_operand\" \"i,i\"))\n \t(match_operand:TF 1 \"reg_or_0_operand\" \"re,G\"))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n@@ -2185,7 +2185,7 @@\n ;; Sparc V9 conditional move instructions.\n \n ; ??? There is not actually a 32 bit version of this instruction.\n-(define_insn \"\"\n+(define_insn \"*movsi_cc_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n@@ -2195,7 +2195,7 @@\n   \"mov%C1 %%icc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_cc_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n@@ -2206,7 +2206,7 @@\n   [(set_attr \"type\" \"cmove\")])\n \n ;; ??? There is not actually a 32 bit version of this instruction.\n-(define_insn \"\"\n+(define_insn \"*movdi_ccx_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n@@ -2216,7 +2216,7 @@\n   \"mov%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_ccx_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n@@ -2227,7 +2227,7 @@\n   [(set_attr \"type\" \"cmove\")])\n \n ;; ??? There is not actually a 32 bit version of this instruction.\n-(define_insn \"\"\n+(define_insn \"*movsi_ccfp_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFP 2 \"ccfp_reg_operand\" \"c\")\n@@ -2239,7 +2239,7 @@\n   [(set_attr \"type\" \"cmove\")])\n \n ;; ??? There is not actually a 32 bit version of this instruction.\n-(define_insn \"\"\n+(define_insn \"*movsi_ccfpe_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFPE 2 \"ccfp_reg_operand\" \"c\")\n@@ -2250,7 +2250,7 @@\n   \"mov%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_ccfp_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFP 2 \"ccfp_reg_operand\" \"c\")\n@@ -2261,7 +2261,7 @@\n   \"mov%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_ccfpe_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFPE 2 \"ccfp_reg_operand\" \"c\")\n@@ -2273,7 +2273,7 @@\n   [(set_attr \"type\" \"cmove\")])\n \n ;; ??? There is not actually a 32 bit version of this instruction.\n-(define_insn \"\"\n+(define_insn \"*movsi_cc_reg_sp64\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n@@ -2284,7 +2284,7 @@\n   \"movr%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdi_cc_reg_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n@@ -2295,7 +2295,7 @@\n   \"movr%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_cc_reg_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n@@ -2306,7 +2306,7 @@\n   \"fmovrs%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_cc_reg_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n@@ -2317,7 +2317,7 @@\n   \"fmovrd%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movtf_cc_reg_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"v9_regcmp_op\"\n \t\t\t\t[(match_operand:DI 2 \"register_operand\" \"r\")\n@@ -2328,7 +2328,7 @@\n   \"fmovrq%D1 %2,%r3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_ccfp_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFP 2 \"ccfp_reg_operand\" \"c\")\n@@ -2339,7 +2339,7 @@\n   \"fmovs%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_ccfpe_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFPE 2 \"ccfp_reg_operand\" \"c\")\n@@ -2350,7 +2350,7 @@\n   \"fmovs%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_ccfp_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFP 2 \"ccfp_reg_operand\" \"c\")\n@@ -2361,7 +2361,7 @@\n   \"fmovd%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_ccfpe_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFPE 2 \"ccfp_reg_operand\" \"c\")\n@@ -2372,7 +2372,7 @@\n   \"fmovd%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movtf_ccfp_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFP 2 \"ccfp_reg_operand\" \"c\")\n@@ -2383,7 +2383,7 @@\n   \"fmovq%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movtf_ccfpe_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t[(match_operand:CCFPE 2 \"ccfp_reg_operand\" \"c\")\n@@ -2394,7 +2394,7 @@\n   \"fmovq%C1 %2,%3,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_cc_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n@@ -2404,7 +2404,7 @@\n   \"fmovs%C1 %%icc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_cc_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n@@ -2414,7 +2414,7 @@\n   \"fmovd%C1 %%icc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movtf_cc_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CC 0) (const_int 0)])\n@@ -2424,7 +2424,7 @@\n   \"fmovq%C1 %%icc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movsf_ccx_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n@@ -2434,7 +2434,7 @@\n   \"fmovs%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movdf_ccx_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n@@ -2444,7 +2444,7 @@\n   \"fmovd%C1 %%xcc,%2,%0\"\n   [(set_attr \"type\" \"cmove\")])\n \n-(define_insn \"\"\n+(define_insn \"*movtf_ccx_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(if_then_else (match_operator 1 \"comparison_operator\"\n \t\t\t\t      [(reg:CCX 0) (const_int 0)])\n@@ -2483,7 +2483,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendhisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(zero_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n   \"\"\n@@ -2496,7 +2496,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqihi2_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:HI (match_operand:QI 1 \"sparc_operand\" \"r,Q\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n@@ -2512,7 +2512,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:SI (match_operand:QI 1 \"sparc_operand\" \"r,Q\")))]\n   \"GET_CODE (operands[1]) != CONST_INT\"\n@@ -2528,7 +2528,7 @@\n   \"TARGET_V9\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendqidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:QI 1 \"sparc_operand\" \"r,Q\")))]\n   \"TARGET_V9 && GET_CODE (operands[1]) != CONST_INT\"\n@@ -2561,7 +2561,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_V9\"\n@@ -2576,7 +2576,7 @@\n   \"TARGET_V9\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*zero_extendsidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(zero_extend:DI (match_operand:SI 1 \"sparc_operand\" \"r,Q\")))]\n   \"TARGET_V9 && GET_CODE (operands[1]) != CONST_INT\"\n@@ -2588,15 +2588,15 @@\n \n ;; Simplify comparisons of extended values.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_zero_extendqisi2\"\n   [(set (reg:CC 0)\n \t(compare:CC (zero_extend:SI (match_operand:QI 0 \"register_operand\" \"r\"))\n \t\t    (const_int 0)))]\n   \"\"\n   \"andcc %0,0xff,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_zero_extendqisi2_set\"\n   [(set (reg:CC 0)\n \t(compare:CC (zero_extend:SI (match_operand:QI 1 \"register_operand\" \"r\"))\n \t\t    (const_int 0)))\n@@ -2608,15 +2608,15 @@\n \n ;; Similarly, handle SI->QI mode truncation followed by a compare.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_siqi_trunc\"\n   [(set (reg:CC 0)\n \t(compare:CC (subreg:QI (match_operand:SI 0 \"register_operand\" \"r\") 0)\n \t\t    (const_int 0)))]\n   \"\"\n   \"andcc %0,0xff,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_siqi_trunc_set\"\n   [(set (reg:CC 0)\n \t(compare:CC (subreg:QI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n \t\t    (const_int 0)))\n@@ -2655,7 +2655,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendhisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n   \"\"\n@@ -2692,7 +2692,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendqihi2_insn\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n \t(sign_extend:HI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"\"\n@@ -2722,7 +2722,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendqisi2_insn\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"\"\n@@ -2752,7 +2752,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendqidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:QI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_V9\"\n@@ -2782,7 +2782,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendhidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(sign_extend:DI (match_operand:HI 1 \"memory_operand\" \"m\")))]\n   \"TARGET_V9\"\n@@ -2795,7 +2795,7 @@\n   \"TARGET_V9\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*sign_extendsidi2_insn\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(sign_extend:DI (match_operand:SI 1 \"sparc_operand\" \"r,Q\")))]\n   \"TARGET_V9\"\n@@ -2808,7 +2808,7 @@\n ;; Special pattern for optimizing bit-field compares.  This is needed\n ;; because combine uses this as a canonical form.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_zero_extract\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r\")\n@@ -2826,7 +2826,7 @@\n   return \\\"andcc %0,%1,%%g0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_zero_extract_sp64\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (zero_extract:DI (match_operand:DI 0 \"register_operand\" \"r\")\n@@ -2956,7 +2956,7 @@\n   operands[3] = sparc64_fpconv_stack_temp ();\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*floatdisf2_insn\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t\t   (float:SF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -2973,7 +2973,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"\"\n+(define_insn \"*floatdidf2_insn\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t\t   (float:DF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -2990,7 +2990,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"\"\n+(define_insn \"*floatditf2_insn\"\n   [(parallel [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t\t   (float:TF (match_operand:DI 1 \"general_operand\" \"rm\")))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -3009,21 +3009,21 @@\n \n ;; ??? Ideally, these are what we would like to use.\n \n-(define_insn \"floatdisf2_v9\"\n+(define_insn \"floatdisf2_sp64\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(float:SF (match_operand:DI 1 \"register_operand\" \"e\")))]\n   \"0 && TARGET_V9 && TARGET_FPU\"\n   \"fxtos %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"floatdidf2_v9\"\n+(define_insn \"floatdidf2_sp64\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(float:DF (match_operand:DI 1 \"register_operand\" \"e\")))]\n   \"0 && TARGET_V9 && TARGET_FPU\"\n   \"fxtod %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"floatditf2_v9\"\n+(define_insn \"floatditf2_sp64\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(float:TF (match_operand:DI 1 \"register_operand\" \"e\")))]\n   \"0 && TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n@@ -3098,7 +3098,7 @@\n   operands[3] = sparc64_fpconv_stack_temp ();\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*fix_truncsfdi2_insn\"\n   [(parallel [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t\t   (fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -3115,7 +3115,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"\"\n+(define_insn \"*fix_truncdfdi2_insn\"\n   [(parallel [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t\t   (fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"e\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -3132,7 +3132,7 @@\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"length\" \"3\")])\n \n-(define_insn \"\"\n+(define_insn \"*fix_trunctfdi2_insn\"\n   [(parallel [(set (match_operand:DI 0 \"general_operand\" \"=rm\")\n \t\t   (fix:DI (fix:TF (match_operand:TF 1 \"register_operand\" \"e\"))))\n \t      (clobber (match_operand:DF 2 \"register_operand\" \"=&e\"))\n@@ -3151,21 +3151,21 @@\n \n ;; ??? Ideally, these are what we would like to use.\n \n-(define_insn \"fix_truncsfdi2_v9\"\n+(define_insn \"fix_truncsfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:SF (match_operand:SF 1 \"register_operand\" \"f\"))))]\n   \"0 && TARGET_V9 && TARGET_FPU\"\n   \"fstox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"fix_truncdfdi2_v9\"\n+(define_insn \"fix_truncdfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:DF (match_operand:DF 1 \"register_operand\" \"e\"))))]\n   \"0 && TARGET_V9 && TARGET_FPU\"\n   \"fdtox %1,%0\"\n   [(set_attr \"type\" \"fp\")])\n \n-(define_insn \"fix_trunctfdi2_v9\"\n+(define_insn \"fix_trunctfdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=e\")\n \t(fix:DI (fix:TF (match_operand:TF 1 \"register_operand\" \"e\"))))]\n   \"0 && TARGET_V9 && TARGET_FPU && TARGET_HARD_QUAD\"\n@@ -3192,7 +3192,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*adddi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n@@ -3228,7 +3228,7 @@\n }\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*adddi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3243,7 +3243,7 @@\n   \"add %1,%2,%0\"\n   [(set_attr \"type\" \"ialu\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_plus\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (plus:SI (match_operand:SI 0 \"arith_operand\" \"%r\")\n \t\t\t\t  (match_operand:SI 1 \"arith_operand\" \"rI\"))\n@@ -3252,7 +3252,7 @@\n   \"addcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_plus\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (plus:DI (match_operand:DI 0 \"arith_double_operand\" \"%r\")\n \t\t\t\t   (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n@@ -3261,7 +3261,7 @@\n   \"addcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_plus_set\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t\t\t  (match_operand:SI 2 \"arith_operand\" \"rI\"))\n@@ -3271,7 +3271,7 @@\n   \"\"\n   \"addcc %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_plus_set\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (plus:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t\t\t   (match_operand:DI 2 \"arith_double_operand\" \"rHI\"))\n@@ -3299,7 +3299,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*subdi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n@@ -3335,7 +3335,7 @@\n }\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*subdi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t  (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3350,7 +3350,7 @@\n   \"sub %1,%2,%0\"\n   [(set_attr \"type\" \"ialu\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_minus_cc\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t\t   (match_operand:SI 1 \"arith_operand\" \"rI\"))\n@@ -3359,7 +3359,7 @@\n   \"subcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_minus_ccx\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (minus:DI (match_operand:DI 0 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n@@ -3368,7 +3368,7 @@\n   \"subcc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_minus_cc_set\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t   (match_operand:SI 2 \"arith_operand\" \"rI\"))\n@@ -3378,7 +3378,7 @@\n   \"\"\n   \"subcc %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_minus_ccx_set\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (minus:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t\t    (match_operand:DI 2 \"arith_double_operand\" \"rHI\"))\n@@ -3408,7 +3408,7 @@\n \n ;; It is not known whether this will match.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_mul_set\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n@@ -3433,7 +3433,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*mulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n@@ -3467,7 +3467,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*smulsidi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -3501,7 +3501,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*umulsidi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"register_operand\" \"r\"))))]\n@@ -3535,7 +3535,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*umulsidi3_highpart_sp32\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(truncate:SI\n \t (lshiftrt:DI (mult:DI (zero_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n@@ -3576,7 +3576,7 @@\n \n ;; It is not known whether this will match.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_sdiv_cc_set\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(div:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"rI\")))\n@@ -3605,7 +3605,7 @@\n \n ;; It is not known whether this will match.\n \n-(define_insn \"\"\n+(define_insn \"*cmp_udiv_cc_set\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(udiv:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t(match_operand:SI 2 \"arith_operand\" \"rI\")))\n@@ -3627,7 +3627,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*anddi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3661,7 +3661,7 @@\n }\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*anddi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3691,22 +3691,22 @@\n   operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*and_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"! TARGET_V9\"\n   \"andn %2,%1,%0\\;andn %R2,%R1,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*and_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"TARGET_V9\"\n   \"andn %2,%1,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*and_not_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(and:SI (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n@@ -3721,7 +3721,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*iordi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3755,7 +3755,7 @@\n }\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*iordi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3785,22 +3785,22 @@\n   operands[4] = gen_rtx (CONST_INT, VOIDmode, ~INTVAL (operands[2]));\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*or_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"! TARGET_V9\"\n   \"orn %2,%1,%0\\;orn %R2,%R1,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*or_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ior:DI (not:DI (match_operand:DI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:DI 2 \"register_operand\" \"r\")))]\n   \"TARGET_V9\"\n   \"orn %2,%1,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*or_not_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ior:SI (not:SI (match_operand:SI 1 \"register_operand\" \"r\"))\n \t\t(match_operand:SI 2 \"register_operand\" \"r\")))]\n@@ -3815,7 +3815,7 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*xorsi3_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(xor:DI (match_operand:DI 1 \"arith_double_operand\" \"%r\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3849,7 +3849,7 @@\n }\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*xordi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(xor:DI (match_operand:DI 1 \"arith_double_operand\" \"%rJ\")\n \t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\")))]\n@@ -3896,22 +3896,22 @@\n \n ;; xnor patterns.  Note that (a ^ ~b) == (~a ^ b) == ~(a ^ b).\n ;; Combine now canonicalizes to the rightmost expression.\n-(define_insn \"\"\n+(define_insn \"*xor_not_di_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t\t(match_operand:DI 2 \"register_operand\" \"r\"))))]\n   \"! TARGET_V9\"\n   \"xnor %1,%2,%0\\;xnor %R1,%R2,%R0\"\n   [(set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*xor_not_di_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (xor:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t(match_operand:DI 2 \"arith_double_operand\" \"rHI\"))))]\n   \"TARGET_V9\"\n   \"xnor %r1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*xor_not_si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(not:SI (xor:SI (match_operand:SI 1 \"reg_or_0_operand\" \"rJ\")\n \t\t\t(match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n@@ -3922,7 +3922,7 @@\n ;; These correspond to the above in the case where we also (or only)\n ;; want to set the condition code.  \n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_arith_op\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (match_operator:SI 2 \"cc_arithop\"\n@@ -3933,7 +3933,7 @@\n   \"%A2cc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_arith_op\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (match_operator:DI 2 \"cc_arithop\"\n@@ -3944,7 +3944,7 @@\n   \"%A2cc %0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_arith_op_set\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (match_operator:SI 3 \"cc_arithop\"\n@@ -3956,7 +3956,7 @@\n   \"\"\n   \"%A3cc %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_arith_op_set\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (match_operator:DI 3 \"cc_arithop\"\n@@ -3968,7 +3968,7 @@\n   \"TARGET_V9\"\n   \"%A3cc %1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_xor_not\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (not:SI (xor:SI (match_operand:SI 0 \"reg_or_0_operand\" \"%rJ\")\n@@ -3978,7 +3978,7 @@\n   \"xnorcc %r0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_xor_not\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (not:DI (xor:DI (match_operand:DI 0 \"reg_or_0_operand\" \"%rJ\")\n@@ -3988,7 +3988,7 @@\n   \"xnorcc %r0,%1,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_xor_not_set\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (not:SI (xor:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n@@ -3999,7 +3999,7 @@\n   \"\"\n   \"xnorcc %r1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_xor_not_set\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (not:DI (xor:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ\")\n@@ -4010,7 +4010,7 @@\n   \"TARGET_V9\"\n   \"xnorcc %r1,%2,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_arith_op_not\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (match_operator:SI 2 \"cc_arithopn\"\n@@ -4021,7 +4021,7 @@\n   \"%B2cc %r1,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_arith_op_not\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (match_operator:DI 2 \"cc_arithopn\"\n@@ -4032,7 +4032,7 @@\n   \"%B2cc %r1,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_arith_op_not_set\"\n   [(set (reg:CC 0)\n \t(compare:CC\n \t (match_operator:SI 3 \"cc_arithopn\"\n@@ -4044,7 +4044,7 @@\n   \"\"\n   \"%B3cc %r2,%1,%0\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_arith_op_not_set\"\n   [(set (reg:CCX 0)\n \t(compare:CCX\n \t (match_operator:DI 3 \"cc_arithopn\"\n@@ -4075,7 +4075,7 @@\n     }\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*negdi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))\n    (clobber (reg:SI 0))]\n@@ -4084,7 +4084,7 @@\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*negdi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(neg:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"TARGET_V9\"\n@@ -4099,23 +4099,23 @@\n   \"sub %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_neg\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (neg:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))]\n   \"\"\n   \"subcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_neg\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (neg:DI (match_operand:DI 0 \"arith_double_operand\" \"rHI\"))\n \t\t\t  (const_int 0)))]\n   \"TARGET_V9\"\n   \"subcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_set_neg\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (neg:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t\t (const_int 0)))\n@@ -4125,7 +4125,7 @@\n   \"subcc %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_set_neg\"\n   [(set (reg:CCX_NOOV 0)\n \t(compare:CCX_NOOV (neg:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n \t\t\t  (const_int 0)))\n@@ -4143,15 +4143,15 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*one_cmpldi2_sp32\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_operand:DI 1 \"register_operand\" \"r\")))]\n   \"! TARGET_V9\"\n   \"xnor %%g0,%1,%0\\;xnor %%g0,%R1,%R0\"\n   [(set_attr \"type\" \"unary\")\n    (set_attr \"length\" \"2\")])\n \n-(define_insn \"\"\n+(define_insn \"*one_cmpldi2_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\")))]\n   \"TARGET_V9\"\n@@ -4165,23 +4165,23 @@\n   \"xnor %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_not\"\n   [(set (reg:CC 0)\n \t(compare:CC (not:SI (match_operand:SI 0 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))]\n   \"\"\n   \"xnorcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_not\"\n   [(set (reg:CCX 0)\n \t(compare:CCX (not:DI (match_operand:DI 0 \"arith_double_operand\" \"rHI\"))\n \t\t     (const_int 0)))]\n   \"TARGET_V9\"\n   \"xnorcc %%g0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_set_not\"\n   [(set (reg:CC 0)\n \t(compare:CC (not:SI (match_operand:SI 1 \"arith_operand\" \"rI\"))\n \t\t    (const_int 0)))\n@@ -4191,7 +4191,7 @@\n   \"xnorcc %%g0,%1,%0\"\n   [(set_attr \"type\" \"unary\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_ccx_set_not\"\n   [(set (reg:CCX 0)\n \t(compare:CCX (not:DI (match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n \t\t    (const_int 0)))\n@@ -4275,15 +4275,15 @@\n   \"fmuls %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n-(define_insn \"\"\n+(define_insn \"*muldf3_extend\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(mult:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\"))\n \t\t (float_extend:DF (match_operand:SF 2 \"register_operand\" \"f\"))))]\n   \"(TARGET_V8 || TARGET_V9) && TARGET_FPU\"\n   \"fsmuld %1,%2,%0\"\n   [(set_attr \"type\" \"fpmul\")])\n \n-(define_insn \"\"\n+(define_insn \"*multf3_extend\"\n   [(set (match_operand:TF 0 \"register_operand\" \"=e\")\n \t(mult:TF (float_extend:TF (match_operand:DF 1 \"register_operand\" \"e\"))\n \t\t (float_extend:TF (match_operand:DF 2 \"register_operand\" \"e\"))))]\n@@ -4454,7 +4454,7 @@\n   return \\\"sllx %1,%2,%0\\\";\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_ashift_1\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (ashift:SI (match_operand:SI 0 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1))\n@@ -4463,7 +4463,7 @@\n   \"addcc %0,%0,%%g0\"\n   [(set_attr \"type\" \"compare\")])\n \n-(define_insn \"\"\n+(define_insn \"*cmp_cc_set_ashift_1\"\n   [(set (reg:CC_NOOV 0)\n \t(compare:CC_NOOV (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t\t    (const_int 1))\n@@ -4578,28 +4578,28 @@\n   \"jmp %%o7+%0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*tablejump_sp32\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"! TARGET_PTR64\"\n   \"jmp %a0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*tablejump_sp64\"\n   [(set (pc) (match_operand:DI 0 \"address_operand\" \"p\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n   \"TARGET_PTR64\"\n   \"jmp %a0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*get_pc_sp32\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n    (set (reg:SI 15) (label_ref (match_dup 0)))]\n   \"! TARGET_PTR64\"\n   \"call %l0%#\"\n   [(set_attr \"type\" \"uncond_branch\")])\n \n-(define_insn \"\"\n+(define_insn \"*get_pc_sp64\"\n   [(set (pc) (label_ref (match_operand 0 \"\" \"\")))\n    (set (reg:DI 15) (label_ref (match_dup 0)))]\n   \"TARGET_PTR64\"\n@@ -4609,7 +4609,7 @@\n ;; This pattern recognizes the \"instruction\" that appears in \n ;; a function call that wants a structure value, \n ;; to inform the called function if compiled with Sun CC.\n-;(define_insn \"\"\n+;(define_insn \"*unimp_insn\"\n ;  [(match_operand:SI 0 \"immediate_operand\" \"\")]\n ;  \"GET_CODE (operands[0]) == CONST_INT && INTVAL (operands[0]) > 0\"\n ;  \"unimp %0\"\n@@ -4699,7 +4699,7 @@\n ;; We can't use the same pattern for these two insns, because then registers\n ;; in the address may not be properly reloaded.\n \n-(define_insn \"\"\n+(define_insn \"*call_address_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI 15))]\n@@ -4711,7 +4711,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_symbolic_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:SI 15))]\n@@ -4723,7 +4723,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_address_sp64\"\n   [(call (mem:SI (match_operand:DI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 15))]\n@@ -4735,7 +4735,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_symbolic_sp64\"\n   [(call (mem:SI (match_operand:DI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (clobber (reg:DI 15))]\n@@ -4749,7 +4749,7 @@\n \n ;; This is a call that wants a structure value.\n ;; There is no such critter for v9 (??? we may need one anyway).\n-(define_insn \"\"\n+(define_insn \"*call_address_struct_value_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n@@ -4764,7 +4764,7 @@\n \n ;; This is a call that wants a structure value.\n ;; There is no such critter for v9 (??? we may need one anyway).\n-(define_insn \"\"\n+(define_insn \"*call_symbolic_struct_value_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n@@ -4779,7 +4779,7 @@\n \n ;; This is a call that may want a structure value.  This is used for\n ;; untyped_calls.\n-(define_insn \"\"\n+(define_insn \"*call_address_untyped_struct_value_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"address_operand\" \"p\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n@@ -4793,7 +4793,7 @@\n   [(set_attr \"type\" \"call_no_delay_slot\")])\n \n ;; This is a call that wants a structure value.\n-(define_insn \"\"\n+(define_insn \"*call_symbolic_untyped_struct_value_sp32\"\n   [(call (mem:SI (match_operand:SI 0 \"symbolic_operand\" \"s\"))\n \t (match_operand 1 \"\" \"\"))\n    (match_operand 2 \"immediate_operand\" \"\")\n@@ -4844,7 +4844,7 @@\n   DONE;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"*call_value_address_sp32\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -4857,7 +4857,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_symbolic_sp32\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -4870,7 +4870,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_address_sp64\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:DI 1 \"address_operand\" \"p\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -4883,7 +4883,7 @@\n }\"\n   [(set_attr \"type\" \"call\")])\n \n-(define_insn \"\"\n+(define_insn \"*call_value_symbolic_sp64\"\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:DI 1 \"symbolic_operand\" \"s\"))\n \t      (match_operand 2 \"\" \"\")))\n@@ -5001,13 +5001,13 @@\n   \"\"\n   \"\")\n \n-(define_insn \"\"\n+(define_insn \"*branch_sp32\"\n   [(set (pc) (match_operand:SI 0 \"address_operand\" \"p\"))]\n   \"! TARGET_PTR64\"\n  \"jmp %a0%#\"\n  [(set_attr \"type\" \"uncond_branch\")])\n  \n-(define_insn \"\"\n+(define_insn \"*branch_sp64\"\n   [(set (pc) (match_operand:DI 0 \"address_operand\" \"p\"))]\n   \"TARGET_PTR64\"\n   \"jmp %a0%#\"\n@@ -5517,7 +5517,7 @@\n ;; ??? There are QImode, HImode, and SImode versions of this pattern.\n ;; It might be possible to write one more general pattern instead of three.\n \n-(define_insn \"\"\n+(define_insn \"*return_qi\"\n   [(set (match_operand:QI 0 \"restore_operand\" \"\")\n \t(match_operand:QI 1 \"arith_operand\" \"rI\"))\n    (return)]\n@@ -5531,7 +5531,7 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"*return_hi\"\n   [(set (match_operand:HI 0 \"restore_operand\" \"\")\n \t(match_operand:HI 1 \"arith_operand\" \"rI\"))\n    (return)]\n@@ -5545,7 +5545,7 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"*return_si\"\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(match_operand:SI 1 \"arith_operand\" \"rI\"))\n    (return)]\n@@ -5562,7 +5562,7 @@\n ;; The following pattern is only generated by delayed-branch scheduling,\n ;; when the insn winds up in the epilogue.  This can only happen when\n ;; ! TARGET_FPU because otherwise fp return values are in %f0.\n-(define_insn \"\"\n+(define_insn \"*return_sf_no_fpu\"\n   [(set (match_operand:SF 0 \"restore_operand\" \"r\")\n \t(match_operand:SF 1 \"register_operand\" \"r\"))\n    (return)]\n@@ -5576,7 +5576,7 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"*return_addsi\"\n   [(set (match_operand:SI 0 \"restore_operand\" \"\")\n \t(plus:SI (match_operand:SI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:SI 2 \"arith_operand\" \"rI\")))\n@@ -5591,15 +5591,15 @@\n }\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"*return_di\"\n   [(set (match_operand:DI 0 \"restore_operand\" \"\")\n \t(match_operand:DI 1 \"arith_double_operand\" \"rHI\"))\n    (return)]\n   \"TARGET_V9 && ! TARGET_EPILOGUE\"\n   \"ret\\;restore %%g0,%1,%Y0\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"\"\n+(define_insn \"*return_adddi\"\n   [(set (match_operand:DI 0 \"restore_operand\" \"\")\n \t(plus:DI (match_operand:DI 1 \"arith_operand\" \"%r\")\n \t\t (match_operand:DI 2 \"arith_double_operand\" \"rHI\")))\n@@ -5611,7 +5611,7 @@\n ;; Turned off because it should never match (subtracting a constant\n ;; is turned into addition) and because it would do the wrong thing\n ;; when operand 2 is -4096 (--4096 == 4096 is not a valid immediate).\n-;;(define_insn \"\"\n+;;(define_insn \"*minus_const\"\n ;;  [(set (match_operand:SI 0 \"restore_operand\" \"\")\n ;;\t(minus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n ;;\t\t  (match_operand:SI 2 \"small_int\" \"I\")))\n@@ -5622,7 +5622,7 @@\n \n ;; The following pattern is only generated by delayed-branch scheduling,\n ;; when the insn winds up in the epilogue.\n-(define_insn \"\"\n+(define_insn \"*return_sf\"\n   [(set (reg:SF 32)\n \t(match_operand:SF 0 \"register_operand\" \"f\"))\n    (return)]"}]}