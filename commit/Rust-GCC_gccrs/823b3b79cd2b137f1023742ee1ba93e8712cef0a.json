{"sha": "823b3b79cd2b137f1023742ee1ba93e8712cef0a", "node_id": "C_kwDOANBUbNoAKDgyM2IzYjc5Y2QyYjEzN2YxMDIzNzQyZWUxYmE5M2U4NzEyY2VmMGE", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-02-24T06:42:14Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-03-14T01:22:19Z"}, "message": "Don't fold builtin into gimple when isa mismatches.\n\nThe patch fixes ICE in ix86_gimple_fold_builtin.\n\ngcc/ChangeLog:\n\n\tPR target/104666\n\t* config/i386/i386-expand.cc\n\t(ix86_check_builtin_isa_match):\tNew func.\n\t(ix86_expand_builtin): Move code to\n\tix86_check_builtin_isa_match and call it.\n\t* config/i386/i386-protos.h\n\t(ix86_check_builtin_isa_match): Declare.\n\t* config/i386/i386.cc (ix86_gimple_fold_builtin): Don't fold\n\tbuiltin into gimple when isa mismatches.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr104666.c: New test.", "tree": {"sha": "0abdbde562c7d9ce5053db2871016b462ac56738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0abdbde562c7d9ce5053db2871016b462ac56738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/823b3b79cd2b137f1023742ee1ba93e8712cef0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823b3b79cd2b137f1023742ee1ba93e8712cef0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823b3b79cd2b137f1023742ee1ba93e8712cef0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823b3b79cd2b137f1023742ee1ba93e8712cef0a/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9756c0858f68419b5aa19fb8657af512bb938e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9756c0858f68419b5aa19fb8657af512bb938e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9756c0858f68419b5aa19fb8657af512bb938e2"}], "stats": {"total": 155, "additions": 115, "deletions": 40}, "files": [{"sha": "e85641d3204ccacb3f5bdf04b05dc876d6b2d587", "filename": "gcc/config/i386/i386-expand.cc", "status": "modified", "additions": 57, "deletions": 40, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.cc?ref=823b3b79cd2b137f1023742ee1ba93e8712cef0a", "patch": "@@ -12232,46 +12232,14 @@ ix86_expand_vec_set_builtin (tree exp)\n   return target;\n }\n \n-/* Expand an expression EXP that calls a built-in function,\n-   with result going to TARGET if that's convenient\n-   (and in mode MODE if that's convenient).\n-   SUBTARGET may be used as the target for computing one of EXP's operands.\n-   IGNORE is nonzero if the value is to be ignored.  */\n-\n-rtx\n-ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n-\t\t     machine_mode mode, int ignore)\n+/* Return true if the necessary isa options for this builtin exist,\n+   else false.\n+   fcode = DECL_MD_FUNCTION_CODE (fndecl);  */\n+bool\n+ix86_check_builtin_isa_match (unsigned int fcode,\n+\t\t\t      HOST_WIDE_INT* pbisa,\n+\t\t\t      HOST_WIDE_INT* pbisa2)\n {\n-  size_t i;\n-  enum insn_code icode, icode2;\n-  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n-  tree arg0, arg1, arg2, arg3, arg4;\n-  rtx op0, op1, op2, op3, op4, pat, pat2, insn;\n-  machine_mode mode0, mode1, mode2, mode3, mode4;\n-  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n-\n-  /* For CPU builtins that can be folded, fold first and expand the fold.  */\n-  switch (fcode)\n-    {\n-    case IX86_BUILTIN_CPU_INIT:\n-      {\n-\t/* Make it call __cpu_indicator_init in libgcc. */\n-\ttree call_expr, fndecl, type;\n-        type = build_function_type_list (integer_type_node, NULL_TREE); \n-\tfndecl = build_fn_decl (\"__cpu_indicator_init\", type);\n-\tcall_expr = build_call_expr (fndecl, 0); \n-\treturn expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n-      }\n-    case IX86_BUILTIN_CPU_IS:\n-    case IX86_BUILTIN_CPU_SUPPORTS:\n-      {\n-\ttree arg0 = CALL_EXPR_ARG (exp, 0);\n-\ttree fold_expr = fold_builtin_cpu (fndecl, &arg0);\n-\tgcc_assert (fold_expr != NULL_TREE);\n-\treturn expand_expr (fold_expr, target, mode, EXPAND_NORMAL);\n-      }\n-    }\n-\n   HOST_WIDE_INT isa = ix86_isa_flags;\n   HOST_WIDE_INT isa2 = ix86_isa_flags2;\n   HOST_WIDE_INT bisa = ix86_builtins_isa[fcode].isa;\n@@ -12321,7 +12289,56 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       bisa |= OPTION_MASK_ISA_SSE2;\n     }\n \n-  if ((bisa & isa) != bisa || (bisa2 & isa2) != bisa2)\n+  if (pbisa)\n+    *pbisa = bisa;\n+  if (pbisa2)\n+    *pbisa2 = bisa2;\n+\n+  return (bisa & isa) == bisa && (bisa2 & isa2) == bisa2;\n+}\n+\n+/* Expand an expression EXP that calls a built-in function,\n+   with result going to TARGET if that's convenient\n+   (and in mode MODE if that's convenient).\n+   SUBTARGET may be used as the target for computing one of EXP's operands.\n+   IGNORE is nonzero if the value is to be ignored.  */\n+\n+rtx\n+ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n+\t\t     machine_mode mode, int ignore)\n+{\n+  size_t i;\n+  enum insn_code icode, icode2;\n+  tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n+  tree arg0, arg1, arg2, arg3, arg4;\n+  rtx op0, op1, op2, op3, op4, pat, pat2, insn;\n+  machine_mode mode0, mode1, mode2, mode3, mode4;\n+  unsigned int fcode = DECL_MD_FUNCTION_CODE (fndecl);\n+  HOST_WIDE_INT bisa, bisa2;\n+\n+  /* For CPU builtins that can be folded, fold first and expand the fold.  */\n+  switch (fcode)\n+    {\n+    case IX86_BUILTIN_CPU_INIT:\n+      {\n+\t/* Make it call __cpu_indicator_init in libgcc.  */\n+\ttree call_expr, fndecl, type;\n+\ttype = build_function_type_list (integer_type_node, NULL_TREE);\n+\tfndecl = build_fn_decl (\"__cpu_indicator_init\", type);\n+\tcall_expr = build_call_expr (fndecl, 0);\n+\treturn expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+      }\n+    case IX86_BUILTIN_CPU_IS:\n+    case IX86_BUILTIN_CPU_SUPPORTS:\n+      {\n+\ttree arg0 = CALL_EXPR_ARG (exp, 0);\n+\ttree fold_expr = fold_builtin_cpu (fndecl, &arg0);\n+\tgcc_assert (fold_expr != NULL_TREE);\n+\treturn expand_expr (fold_expr, target, mode, EXPAND_NORMAL);\n+      }\n+    }\n+\n+  if (!ix86_check_builtin_isa_match (fcode, &bisa, &bisa2))\n     {\n       bool add_abi_p = bisa & OPTION_MASK_ISA_64BIT;\n       if (TARGET_ABI_X32)"}, {"sha": "3596ce81ecf2a055dc02ec92d2524ce61dc2f83e", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=823b3b79cd2b137f1023742ee1ba93e8712cef0a", "patch": "@@ -53,6 +53,7 @@ extern bool ix86_using_red_zone (void);\n extern rtx ix86_gen_scratch_sse_rtx (machine_mode);\n \n extern unsigned int ix86_regmode_natural_size (machine_mode);\n+extern bool ix86_check_builtin_isa_match (unsigned int fcode);\n #ifdef RTX_CODE\n extern int standard_80387_constant_p (rtx);\n extern const char *standard_80387_constant_opcode (rtx);\n@@ -405,3 +406,7 @@ extern rtl_opt_pass *make_pass_remove_partial_avx_dependency\n   (gcc::context *);\n \n extern bool ix86_has_no_direct_extern_access;\n+\n+/* In i386-expand.cc.  */\n+bool ix86_check_builtin_isa_match (unsigned int, HOST_WIDE_INT*,\n+\t\t\t\t   HOST_WIDE_INT*);"}, {"sha": "d77ad83e4377d37734bce313071d1c91a5014aa2", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=823b3b79cd2b137f1023742ee1ba93e8712cef0a", "patch": "@@ -18286,6 +18286,10 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   bool is_vshift;\n   unsigned HOST_WIDE_INT elems;\n \n+  /* Don't fold when there's isa mismatch.  */\n+  if (!ix86_check_builtin_isa_match (fn_code, NULL, NULL))\n+    return false;\n+\n   switch (fn_code)\n     {\n     case IX86_BUILTIN_TZCNT32:"}, {"sha": "cfde907e61620a62be3b8846c914385bb2031ce5", "filename": "gcc/testsuite/gcc.target/i386/pr104666.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104666.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/823b3b79cd2b137f1023742ee1ba93e8712cef0a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104666.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr104666.c?ref=823b3b79cd2b137f1023742ee1ba93e8712cef0a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-sse --no-warning\" } */\n+\n+typedef double __m128d __attribute__((__vector_size__(16), __may_alias__));\n+typedef double __m256d __attribute__((__vector_size__(32), __may_alias__));\n+\n+typedef float __m128 __attribute__((__vector_size__(16), __may_alias__));\n+typedef float __m256 __attribute__((__vector_size__(32), __may_alias__));\n+\n+typedef char __m128i __attribute__((__vector_size__(16), __may_alias__));\n+typedef char __m256i __attribute__((__vector_size__(32), __may_alias__));\n+\n+__m128d sse4_1_blendvpd (__m128d a, __m128d b, __m128d c) __attribute__((__target__(\"avx2\")));\n+\n+__m128d\n+generic_blendvpd (__m128d a, __m128d b, __m128d c) /* { dg-error \"SSE register return with SSE disabled\" \"\" { target { ! ia32 } } }  */\n+{\n+  return __builtin_ia32_blendvpd (a, b, c); /* { dg-error \"needs isa option -msse4.1\" \"\" { target ia32 } } */\n+}\n+\n+__m128\n+generic_blendvps (__m128 a, __m128 b, __m128 c)\n+{\n+  return __builtin_ia32_blendvps (a, b, c); /* { dg-error \"needs isa option -msse4.1\" \"\" { target ia32 } } */\n+}\n+\n+__m128i\n+generic_pblendvb (__m128i a, __m128i b, __m128i c)\n+{\n+  return __builtin_ia32_pblendvb128 (a, b, c);/* { dg-error \"needs isa option -msse4.1\" \"\" { target ia32 } } */\n+}\n+\n+__m256i\n+generic_pblendvb256 (__m256i a, __m256i b, __m256i c)\n+{\n+  return __builtin_ia32_pblendvb256 (a, b, c);/* { dg-error \"needs isa option -mavx2\" \"\" { target ia32 } } */\n+}\n+\n+__m256d\n+generic_blendvpd256 (__m256d a, __m256d b, __m256d c)\n+{\n+  return __builtin_ia32_blendvpd256 (a, b, c);/* { dg-error \"needs isa option -mavx\" \"\" { target ia32 } } */\n+}\n+\n+__m256\n+generic_blendvps256 (__m256 a, __m256 b, __m256 c)\n+{\n+  return __builtin_ia32_blendvps256 (a, b, c);/* { dg-error \"needs isa option -mavx\" \"\" { target ia32 } } */\n+}"}]}