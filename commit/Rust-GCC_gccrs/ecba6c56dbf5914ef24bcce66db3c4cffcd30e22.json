{"sha": "ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNiYTZjNTZkYmY1OTE0ZWYyNGJjY2U2NmRiM2M0Y2ZmY2QzMGUyMg==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dseketel@redhat.com", "date": "2008-07-16T23:44:02Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2008-07-16T23:44:02Z"}, "message": "re PR c++/13699 (Extern \"C\" routine in different namespaces accepted with different exception signature)\n\n2008-07-16  Dodji Seketeli  <dseketel@redhat.com>\n\n\tPR c++/13699\n\t* gcc/cp/name-lookup.c (lookup_extern_c_fun_binding_in_all_ns):\n\tNew function.\n\t(pushdecl_maybe_friend): Check if a redeclaration of extern C function\n\tcomplies with exception specification constraints.\n\nFrom-SVN: r137904", "tree": {"sha": "aa1a421373609e8d5b06caf8be49f16a831f2782", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa1a421373609e8d5b06caf8be49f16a831f2782"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/comments", "author": null, "committer": null, "parents": [{"sha": "7386e3ee260414735222ea6559f3bb94ecd011f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7386e3ee260414735222ea6559f3bb94ecd011f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7386e3ee260414735222ea6559f3bb94ecd011f9"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "8f87551ee369bb470b9f61eb5d7beacb7c227c5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "patch": "@@ -1,3 +1,11 @@\n+2008-07-16  Dodji Seketeli  <dseketel@redhat.com>\n+\n+\tPR c++/13699\n+\t* gcc/cp/name-lookup.c (lookup_extern_c_fun_binding_in_all_ns):\n+\tNew function.\n+\t(pushdecl_maybe_friend): Check if a redeclaration of extern C function\n+\tcomplies with exception specification constraints.\n+\n 2008-07-14  Jason Merrill  <jason@redhat.com>\n \n \t* lex.c (init_reswords): Always set D_OBJC."}, {"sha": "45899c535e6df10aa1842b5bb0e20259a11adf61", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "patch": "@@ -50,6 +50,7 @@ static bool qualified_lookup_using_namespace (tree, tree,\n \t\t\t\t\t      struct scope_binding *, int);\n static tree lookup_type_current_level (tree);\n static tree push_using_directive (tree);\n+static cxx_binding* lookup_extern_c_fun_binding_in_all_ns (tree);\n \n /* The :: namespace.  */\n \n@@ -763,6 +764,48 @@ pushdecl_maybe_friend (tree x, bool is_friend)\n \t    }\n \t}\n \n+      /* If x has C linkage-specification, (extern \"C\"),\n+\t lookup its binding, in case it's already bound to an object.\n+\t The lookup is done in all namespaces.\n+\t If we find an existing binding, make sure it has the same\n+\t exception specification as x, otherwise, bail in error [7.5, 7.6].  */\n+      if ((TREE_CODE (x) == FUNCTION_DECL)\n+\t  && DECL_EXTERN_C_P (x)\n+          /* We should ignore declarations happening in system headers.  */\n+\t  && !DECL_IN_SYSTEM_HEADER (x))\n+\t{\n+\t  cxx_binding *function_binding =\n+\t      lookup_extern_c_fun_binding_in_all_ns (x);\n+\t  if (function_binding\n+              && !DECL_IN_SYSTEM_HEADER (function_binding->value))\n+\t    {\n+\t      tree previous = function_binding->value;\n+\n+\t      /* In case either x or previous is declared to throw an exception,\n+\t         make sure both exception speficications are equal.  */\n+\t      if (decls_match (x, previous))\n+\t\t{\n+\t\t  tree x_exception_spec = NULL_TREE;\n+\t\t  tree previous_exception_spec = NULL_TREE;\n+\n+\t\t  x_exception_spec =\n+\t\t\t\tTYPE_RAISES_EXCEPTIONS (TREE_TYPE (x));\n+\t\t  previous_exception_spec =\n+\t\t\t\tTYPE_RAISES_EXCEPTIONS (TREE_TYPE (previous));\n+\t\t  if (!comp_except_specs (previous_exception_spec,\n+\t\t\t\t\t  x_exception_spec,\n+\t\t\t\t\t  true))\n+\t\t    {\n+\t\t      pedwarn (\"declaration of %q#D with C language linkage\", x);\n+\t\t      pedwarn (\"conflicts with previous declaration %q+#D\",\n+\t\t\t        previous);\n+\t\t      pedwarn (\"due to different exception specifications\");\n+\t\t      POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, error_mark_node);\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+\n       if (TREE_CODE (x) == FUNCTION_DECL || DECL_FUNCTION_TEMPLATE_P (x))\n \tcheck_default_args (x);\n \n@@ -1831,6 +1874,39 @@ binding_for_name (cxx_scope *scope, tree name)\n   return result;\n }\n \n+/* Walk through the bindings associated to the name of FUNCTION,\n+   and return the first binding that declares a function with a\n+   \"C\" linkage specification, a.k.a 'extern \"C\"'.\n+   This function looks for the binding, regardless of which scope it\n+   has been defined in. It basically looks in all the known scopes.\n+   Note that this function does not lookup for bindings of builtin functions\n+   or for functions declared in system headers.  */\n+static cxx_binding*\n+lookup_extern_c_fun_binding_in_all_ns (tree function)\n+{\n+  tree name;\n+  cxx_binding *iter;\n+\n+  gcc_assert (function && TREE_CODE (function) == FUNCTION_DECL);\n+\n+  name = DECL_NAME (function);\n+  gcc_assert (name && TREE_CODE (name) == IDENTIFIER_NODE);\n+\n+  for (iter = IDENTIFIER_NAMESPACE_BINDINGS (name);\n+       iter;\n+       iter = iter->previous)\n+    {\n+      if (iter->value\n+\t  && TREE_CODE (iter->value) == FUNCTION_DECL\n+\t  && DECL_EXTERN_C_P (iter->value)\n+\t  && !DECL_ARTIFICIAL (iter->value))\n+\t{\n+\t  return iter;\n+\t}\n+    }\n+  return NULL;\n+}\n+\n /* Insert another USING_DECL into the current binding level, returning\n    this declaration. If this is a redeclaration, do nothing, and\n    return NULL_TREE if this not in namespace scope (in namespace"}, {"sha": "76d17516bc67ad76c231a8109677da9352456cd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "patch": "@@ -1,3 +1,8 @@\n+2008-07-16  Dodji Seketeli  <dseketel@redhat.com>\n+\n+\tPR c++/13699\n+\t* g++.dg/lookup/extern-c-redecl.C: New test.\n+\n 2008-07-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36369"}, {"sha": "31d100a74f96123b47d2f7c415c6927a0f0f6448", "filename": "gcc/testsuite/g++.dg/lookup/extern-c-redecl.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecba6c56dbf5914ef24bcce66db3c4cffcd30e22/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fextern-c-redecl.C?ref=ecba6c56dbf5914ef24bcce66db3c4cffcd30e22", "patch": "@@ -0,0 +1,11 @@\n+// Contributed by Dodji Seketeli <dseketel@redhat.com>\n+// Origin: PR c++/13699\n+// { dg-do compile }\n+\n+namespace A {\n+    extern \"C\" void foo_func () throw(); // { dg-error \"conflicts\" }\n+}\n+// next line should trigger an error because\n+// it conflicts with previous declaration of foo_func (), due to\n+// different exception specifications.\n+extern \"C\" void foo_func (); // { dg-error \"C language|exception specifications\" }"}]}