{"sha": "aadb5b43aed03688d8dd9875de09b8e1e65cb989", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFkYjViNDNhZWQwMzY4OGQ4ZGQ5ODc1ZGUwOWI4ZTFlNjVjYjk4OQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-10T20:35:25Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-09-10T20:35:25Z"}, "message": "re PR target/54089 ([SH] Refactor shift patterns)\n\n\tPR target/54089\n\t* config/sh/sh.h (SH_DYNAMIC_SHIFT_COST): Set always to 1 if\n\tdynamic shifts are available.\n\t(SHIFT_COUNT_TRUNCATED): Always define to 0.  Correct comment.\n\t* config/sh/sh.c (ashl_lshr_seq, ext_ashl_lshr_seq): Add comments.\n\t* config/sh/predicates.md (shift_count_operand): Allow\n\tarith_reg_operand even if TARGET_DYNSHIFT is false.\n\t* config/sh/sh.md (ashlsi3, lshrsi3): Expand library call patterns\n\tif needed.\n\t(ashlsi3_d_call, lshrsi3_d_call): New insns.\n\n\tPR target/54089\n\t* config/sh/lib1funcs.S (ashlsi3): Reimplement as ashlsi3_r0.\n\t(lshrsi3): Reimplement as lshrsi3_r0.\n\n\tPR target/54089\n\t* gcc.target/sh/pr54089-3.c: New.\n\nFrom-SVN: r191161", "tree": {"sha": "438d32c35f3976d35bb70d589d71f65510a0510e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/438d32c35f3976d35bb70d589d71f65510a0510e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aadb5b43aed03688d8dd9875de09b8e1e65cb989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadb5b43aed03688d8dd9875de09b8e1e65cb989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aadb5b43aed03688d8dd9875de09b8e1e65cb989", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aadb5b43aed03688d8dd9875de09b8e1e65cb989/comments", "author": null, "committer": null, "parents": [{"sha": "d5d66749a315a4f515f0d77d2a4f74aa19697d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d66749a315a4f515f0d77d2a4f74aa19697d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d66749a315a4f515f0d77d2a4f74aa19697d64"}], "stats": {"total": 647, "additions": 404, "deletions": 243}, "files": [{"sha": "de27e83656ed853cb697ce0ab2e2b77eeba2499b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -1,11 +1,24 @@\n+2012-09-10  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/sh.h (SH_DYNAMIC_SHIFT_COST): Set always to 1 if\n+\tdynamic shifts are available.\n+\t(SHIFT_COUNT_TRUNCATED): Always define to 0.  Correct comment.\n+\t* config/sh/sh.c (ashl_lshr_seq, ext_ashl_lshr_seq): Add comments.\n+\t* config/sh/predicates.md (shift_count_operand): Allow\n+\tarith_reg_operand even if TARGET_DYNSHIFT is false.\n+\t* config/sh/sh.md (ashlsi3, lshrsi3): Expand library call patterns\n+\tif needed.\n+\t(ashlsi3_d_call, lshrsi3_d_call): New insns.\n+\n 2012-09-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* ira.c (setup_pressure_classes): Handle synonymous classes.\n \n 2012-09-10  Marc Glisse  <marc.glisse@inria.fr>\n \n-        * tree-ssa-forwprop.c (simplify_bitfield_ref): New function.\n-        (ssa_forward_propagate_and_combine): Call it.\n+\t* tree-ssa-forwprop.c (simplify_bitfield_ref): New function.\n+\t(ssa_forward_propagate_and_combine): Call it.\n \n 2012-09-10  Steve Ellcey  <sellcey@mips.com>\n "}, {"sha": "3936ab2953f8c9db9aef0e6667417b3440a65dde", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -791,9 +791,8 @@\n   /* Allow T_REG as shift count for dynamic shifts, although it is not\n      really possible.  It will then be copied to a general purpose reg.  */\n   if (! TARGET_SHMEDIA)\n-    return const_int_operand (op, mode)\n-\t   || (TARGET_DYNSHIFT && (arith_reg_operand (op, mode)\n-\t\t\t\t   || t_reg_operand (op, mode)));\n+    return const_int_operand (op, mode) || arith_reg_operand (op, mode)\n+\t   || (TARGET_DYNSHIFT && t_reg_operand (op, mode));\n \n   return (CONSTANT_P (op)\n \t  ? (CONST_INT_P (op)"}, {"sha": "0abf28facc2106487d292c71ab6e93a31d00ca4c", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -2871,35 +2871,35 @@ struct ashl_lshr_sequence\n \n static const struct ashl_lshr_sequence ashl_lshr_seq[32] =\n {\n-  { 0, { 0 },\t\t    0 },\n+  { 0, { 0 },\t\t    0 },\t\t// 0\n   { 1, { 1 },\t\t    LSHR_CLOBBERS_T },\n   { 1, { 2 },\t\t    0 },\n   { 2, { 2, 1 },\t    LSHR_CLOBBERS_T },\n-  { 2, { 2, 2 },\t    0 },\n+  { 2, { 2, 2 },\t    0 },\t\t// 4\n   { 3, { 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n   { 3, { 2, 2, 2 },\t    0 },\n   { 4, { 2, 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 1, { 8 },\t\t    0 },\n+  { 1, { 8 },\t\t    0 },\t\t// 8\n   { 2, { 8, 1 },\t    LSHR_CLOBBERS_T },\n   { 2, { 8, 2 },\t    0 },\n   { 3, { 8, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 3, { 8, 2, 2 },\t    0 },\n+  { 3, { 8, 2, 2 },\t    0 },\t\t// 12\n   { 4, { 8, 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n   { 3, { 8, -2, 8 },\t    0 },\n   { 3, { 8, -1, 8 },\t    ASHL_CLOBBERS_T },\n-  { 1, { 16 },\t\t    0 },\n+  { 1, { 16 },\t\t    0 },\t\t// 16\n   { 2, { 16, 1 },\t    LSHR_CLOBBERS_T },\n   { 2, { 16, 2 },\t    0 },\n   { 3, { 16, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 3, { 16, 2, 2 },\t    0 },\n+  { 3, { 16, 2, 2 },\t    0 },\t\t// 20\n   { 4, { 16, 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n   { 3, { 16, -2, 8 },\t    0 },\n   { 3, { 16, -1, 8 },\t    ASHL_CLOBBERS_T },\n-  { 2, { 16, 8 },\t    0 },\n+  { 2, { 16, 8 },\t    0 },\t\t// 24\n   { 3, { 16, 1, 8 },\t    LSHR_CLOBBERS_T },\n   { 3, { 16, 8, 2 },\t    0 },\n   { 4, { 16, 8, 1, 2 },     LSHR_CLOBBERS_T },\n-  { 4, { 16, 8, 2, 2 },\t    0 },\n+  { 4, { 16, 8, 2, 2 },\t    0 },\t\t// 28\n   { 4, { 16, -1, -2, 16 },  ASHL_CLOBBERS_T },\n   { 3, { 16, -2, 16 },\t    0 },\n \n@@ -2915,35 +2915,35 @@ static const struct ashl_lshr_sequence ashl_lshr_seq[32] =\n    kind of sign or zero extension.  */\n static const struct ashl_lshr_sequence ext_ashl_lshr_seq[32] =\n {\n-  { 0, { 0 },\t\t    0 },\n+  { 0, { 0 },\t\t    0 },\t\t// 0\n   { 1, { 1 },\t\t    LSHR_CLOBBERS_T },\n   { 1, { 2 },\t\t    0 },\n   { 2, { 2, 1 },\t    LSHR_CLOBBERS_T },\n-  { 2, { 2, 2 },\t    0 },\n+  { 2, { 2, 2 },\t    0 },\t\t// 4\n   { 3, { 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n   { 2, { 8, -2 },\t    0 },\n   { 2, { 8, -1 },\t    ASHL_CLOBBERS_T },\n-  { 1, { 8 },\t\t    0 },\n+  { 1, { 8 },\t\t    0 },\t\t// 8\n   { 2, { 8, 1 },\t    LSHR_CLOBBERS_T },\n   { 2, { 8, 2 },\t    0 },\n   { 3, { 8, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 3, { 8, 2, 2 },\t    0 },\n+  { 3, { 8, 2, 2 },\t    0 },\t\t// 12\n   { 3, { 16, -2, -1 },\t    ASHL_CLOBBERS_T },\n   { 2, { 16, -2 },\t    0 },\n   { 2, { 16, -1 },\t    ASHL_CLOBBERS_T },\n-  { 1, { 16 },\t\t    0 },\n+  { 1, { 16 },\t\t    0 },\t\t// 16\n   { 2, { 16, 1 },\t    LSHR_CLOBBERS_T },\n   { 2, { 16, 2 },\t    0 },\n   { 3, { 16, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 3, { 16, 2, 2 },\t    0 },\n+  { 3, { 16, 2, 2 },\t    0 },\t\t// 20\n   { 4, { 16, 2, 1, 2 },\t    LSHR_CLOBBERS_T },\n   { 3, { 16, -2, 8 },\t    0 },\n   { 3, { 16, -1, 8 },\t    ASHL_CLOBBERS_T },\n-  { 2, { 16, 8 },\t    0 },\n+  { 2, { 16, 8 },\t    0 },\t\t// 24\n   { 3, { 16, 1, 8 },\t    LSHR_CLOBBERS_T },\n   { 3, { 16, 8, 2 },\t    0 },\n   { 4, { 16, 8, 1, 2 },\t    LSHR_CLOBBERS_T },\n-  { 4, { 16, 8, 2, 2 },\t    0 },\n+  { 4, { 16, 8, 2, 2 },\t    0 },\t\t// 28\n   { 4, { 16, -1, -2, 16 },  ASHL_CLOBBERS_T },\n   { 3, { 16, -2, 16 },\t    0 },\n   { 3, { 16, -1, 16 },\t    ASHL_CLOBBERS_T }"}, {"sha": "d72379022bbd6d8d64f7eea5731962563c19ec8a", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -1932,19 +1932,27 @@ struct sh_args {\n    like shad and shld.  */\n #define TARGET_DYNSHIFT (TARGET_SH3 || TARGET_SH2A)\n \n-#define SH_DYNAMIC_SHIFT_COST \\\n-  (TARGET_HARD_SH4 ? 1 : TARGET_DYNSHIFT ? (optimize_size ? 1 : 2) : 20)\n-\n-/* Immediate shift counts are truncated by the output routines (or was it\n-   the assembler?).  Shift counts in a register are truncated by SH.  Note\n-   that the native compiler puts too large (> 32) immediate shift counts\n-   into a register and shifts by the register, letting the SH decide what\n-   to do instead of doing that itself.  */\n-/* ??? The library routines in lib1funcs.S truncate the shift count.\n-   However, the SH3 has hardware shifts that do not truncate exactly as gcc\n-   expects - the sign bit is significant - so it appears that we need to\n-   leave this zero for correct SH3 code.  */\n-#define SHIFT_COUNT_TRUNCATED (! TARGET_SH3 && ! TARGET_SH2A)\n+/* The cost of using the dynamic shift insns (shad, shld) are the same\n+   if they are available.  If they are not available a library function will\n+   be emitted instead, which is more expensive.  */\n+#define SH_DYNAMIC_SHIFT_COST (TARGET_DYNSHIFT ? 1 : 20)\n+\n+/* Defining SHIFT_COUNT_TRUNCATED tells the combine pass that code like\n+   (X << (Y % 32)) for register X, Y is equivalent to (X << Y).\n+   This is not generally true when hardware dynamic shifts (shad, shld) are\n+   used, because they check the sign bit _before_ the modulo op.  The sign\n+   bit determines whether it is a left shift or a right shift:\n+     if (Y < 0)\n+       return X << (Y & 31);\n+     else\n+       return X >> (-Y) & 31);\n+ \n+   The dynamic shift library routines in lib1funcs.S do not use the sign bit\n+   like the hardware dynamic shifts and truncate the shift count to 31.\n+   We define SHIFT_COUNT_TRUNCATED to 0 and express the implied shift count\n+   truncation in the library function call patterns, as this gives slightly\n+   more compact code.  */\n+#define SHIFT_COUNT_TRUNCATED (0)\n \n /* CANONICALIZE_COMPARISON macro for the combine pass.  */\n #define CANONICALIZE_COMPARISON(CODE, OP0, OP1) \\"}, {"sha": "c06a51011b77dcb545578e083de0c624560c16ce", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -4023,6 +4023,17 @@ label:\n \t\t\t\t\t   operands[2]));\n       DONE;\n     }\n+\n+  /* Expand a library call for the dynamic shift.  */\n+  if (!CONST_INT_P (operands[2]) && !TARGET_DYNSHIFT)\n+    {\n+      emit_move_insn (gen_rtx_REG (SImode, R4_REG), operands[1]);\n+      rtx funcaddr = gen_reg_rtx (Pmode);\n+      function_symbol (funcaddr, \"__ashlsi3_r0\", SFUNC_STATIC);\n+      emit_insn (gen_ashlsi3_d_call (operands[0], operands[2], funcaddr));\n+\n+      DONE;\n+    }\n })\n \n (define_insn \"ashlsi3_k\"\n@@ -4067,6 +4078,23 @@ label:\n }\n   [(set_attr \"type\" \"dyn_shift\")])\n \n+;; If dynamic shifts are not available use a library function.\n+;; By specifying the pattern we reduce the number of call clobbered regs.\n+;; In order to make combine understand the truncation of the shift amount\n+;; operand we have to allow it to use pseudo regs for the shift operands.\n+(define_insn \"ashlsi3_d_call\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z\")\n+\t(ashift:SI (reg:SI R4_REG)\n+\t\t   (and:SI (match_operand:SI 1 \"arith_reg_operand\" \"z\")\n+\t\t\t   (const_int 31))))\n+   (use (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))]\n+  \"TARGET_SH1 && !TARGET_DYNSHIFT\"\n+  \"jsr\t@%2%#\"\n+  [(set_attr \"type\" \"sfunc\")\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_insn_and_split \"ashlsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(ashift:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")\n@@ -4512,6 +4540,16 @@ label:\n \t\t operands[2]));\n       DONE;\n     }\n+\n+  /* Expand a library call for the dynamic shift.  */\n+  if (!CONST_INT_P (operands[2]) && !TARGET_DYNSHIFT)\n+    {\n+      emit_move_insn (gen_rtx_REG (SImode, R4_REG), operands[1]);\n+      rtx funcaddr = gen_reg_rtx (Pmode);\n+      function_symbol (funcaddr, \"__lshrsi3_r0\", SFUNC_STATIC);\n+      emit_insn (gen_lshrsi3_d_call (operands[0], operands[2], funcaddr));\n+      DONE;\n+    }\n })\n \n (define_insn \"lshrsi3_k\"\n@@ -4556,6 +4594,23 @@ label:\n }\n   [(set_attr \"type\" \"dyn_shift\")])\n \n+;; If dynamic shifts are not available use a library function.\n+;; By specifying the pattern we reduce the number of call clobbered regs.\n+;; In order to make combine understand the truncation of the shift amount\n+;; operand we have to allow it to use pseudo regs for the shift operands.\n+(define_insn \"lshrsi3_d_call\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=z\")\n+\t(lshiftrt:SI (reg:SI R4_REG)\n+\t\t     (and:SI (match_operand:SI 1 \"arith_reg_operand\" \"z\")\n+\t\t\t     (const_int 31))))\n+   (use (match_operand:SI 2 \"arith_reg_operand\" \"r\"))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))]\n+  \"TARGET_SH1 && !TARGET_DYNSHIFT\"\n+  \"jsr\t@%2%#\"\n+  [(set_attr \"type\" \"sfunc\")\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_insn_and_split \"lshrsi3_n\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"arith_reg_operand\" \"0\")"}, {"sha": "1f8edec5b6d014b0ea159faf7ab937dd2af2f4b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -1,6 +1,11 @@\n+2012-09-10  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* gcc.target/sh/pr54089-3.c: New.\n+\n 2012-09-10  Marc Glisse  <marc.glisse@inria.fr>\n \n-        * gcc.dg/tree-ssa/forwprop-21.c: New testcase.\n+\t* gcc.dg/tree-ssa/forwprop-21.c: New testcase.\n \n 2012-09-10  Aldy Hernandez  <aldyh@redhat.com>\n "}, {"sha": "ffb976ba11ba0fe71e93bbbf2bb59607753308ba", "filename": "gcc/testsuite/gcc.target/sh/pr54089-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54089-3.c?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -0,0 +1,40 @@\n+/* The dynamic shift library functions truncate the shift count to 5 bits.\n+   Verify that this is taken into account and no extra shift count\n+   truncations are generated before the library call.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"*\" } { \"-m1*\" \"-m2\" \"-m2e*\" } } */\n+/* { dg-final { scan-assembler-not \"and\" } } */\n+/* { dg-final { scan-assembler-not \"31\" } } */\n+\n+int\n+test00 (unsigned int a, int* b, int c, int* d, unsigned int e)\n+{\n+  int s = 0;\n+  int i;\n+  for (i = 0; i < c; ++i)\n+    s += d[i] + b[i] + (e << (i & 31));\n+  return s;  \n+}\n+\n+int\n+test01 (unsigned int a, int* b, int c, int* d, unsigned int e)\n+{\n+  int s = 0;\n+  int i;\n+  for (i = 0; i < c; ++i)\n+    s += d[i] + b[i] + (e >> (i & 31));\n+  return s;  \n+}\n+\n+int\n+test03 (unsigned int a, unsigned int b)\n+{\n+  return b << (a & 31);\n+}\n+\n+unsigned int\n+test04 (unsigned int a, int b)\n+{\n+  return a >> (b & 31);\n+}"}, {"sha": "a225e5875e0fdb155392c6af0b1d7ad888e75750", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -1,3 +1,9 @@\n+2012-09-10  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54089\n+\t* config/sh/lib1funcs.S (ashlsi3): Reimplement as ashlsi3_r0.\n+\t(lshrsi3): Reimplement as lshrsi3_r0.\n+\n 2012-09-10  Andreas Schwab  <schwab@linux-m68k.org>\n \n \tPR target/46191"}, {"sha": "c5a00db9a20bb7f62d3eeeb5aa453ea5adca3d51", "filename": "libgcc/config/sh/lib1funcs.S", "status": "modified", "additions": 243, "deletions": 208, "changes": 451, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aadb5b43aed03688d8dd9875de09b8e1e65cb989/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aadb5b43aed03688d8dd9875de09b8e1e65cb989/libgcc%2Fconfig%2Fsh%2Flib1funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsh%2Flib1funcs.S?ref=aadb5b43aed03688d8dd9875de09b8e1e65cb989", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006, 2009\n+   2004, 2005, 2006, 2009, 2012\n    Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n@@ -241,15 +241,15 @@ GLOBAL(ashiftrt_r4_0):\n ! Entry:\n !\n ! r4: Value to shift\n-! r5: Shifts\n+! r5: Shift count\n !\n ! Exit:\n !\n ! r0: Result\n !\n ! Destroys:\n !\n-! (none)\n+! T bit, r5\n !\n \n \t.global\tGLOBAL(ashrsi3)\n@@ -388,318 +388,353 @@ LOCAL(ashrsi3_0):\n \n !\n ! GLOBAL(ashlsi3)\n+! (For compatibility with older binaries, not used by compiler)\n !\n ! Entry:\n-!\n-! r4: Value to shift\n-! r5: Shifts\n+!\tr4: Value to shift\n+!\tr5: Shift count\n !\n ! Exit:\n-!\n-! r0: Result\n+!\tr0: Result\n !\n ! Destroys:\n+!\tT bit\n+!\n !\n-! (none)\n+! GLOBAL(ashlsi3_r0)\n !\n+! Entry:\n+!\tr4: Value to shift\n+!\tr0: Shift count\n+!\n+! Exit:\n+!\tr0: Result\n+!\n+! Destroys:\n+!\tT bit\n+\n \t.global\tGLOBAL(ashlsi3)\n+\t.global GLOBAL(ashlsi3_r0)\n \tHIDDEN_FUNC(GLOBAL(ashlsi3))\n-\t.align\t2\n+\tHIDDEN_FUNC(GLOBAL(ashlsi3_r0))\n GLOBAL(ashlsi3):\n-\tmov\t#31,r0\n-\tand\tr0,r5\n-\tmova\tLOCAL(ashlsi3_table),r0\n-\tmov.b\t@(r0,r5),r5\n+\tmov\tr5,r0\n+\t.align\t2\n+GLOBAL(ashlsi3_r0):\n+\n #ifdef __sh1__\n-\tadd\tr5,r0\n+\tand\t#31,r0\n+\tshll2\tr0\n+\tmov.l\tr4,@-r15\n+\tmov\tr0,r4\n+\tmova\tLOCAL(ashlsi3_table),r0\n+\tadd\tr4,r0\n+\tmov.l\t@r15+,r4\n \tjmp\t@r0\n+\tmov\tr4,r0\n+\t.align 2\n #else\n-\tbraf\tr5\n-#endif\n+\tand\t#31,r0\n+\tshll2\tr0\n+\tbraf\tr0\n \tmov\tr4,r0\n+#endif\n \n-\t.align\t2\n LOCAL(ashlsi3_table):\n-\t.byte\t\tLOCAL(ashlsi3_0)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_1)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_2)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_3)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_4)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_5)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_6)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_7)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_8)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_9)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_10)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_11)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_12)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_13)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_14)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_15)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_16)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_17)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_18)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_19)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_20)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_21)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_22)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_23)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_24)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_25)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_26)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_27)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_28)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_29)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_30)-LOCAL(ashlsi3_table)\n-\t.byte\t\tLOCAL(ashlsi3_31)-LOCAL(ashlsi3_table)\n-\n-LOCAL(ashlsi3_6):\n-\tshll2\tr0\n-LOCAL(ashlsi3_4):\n-\tshll2\tr0\n-LOCAL(ashlsi3_2):\n+\trts\t\t\t\t// << 0\n+\tnop\n+LOCAL(ashlsi_1):\n+\trts\t\t\t\t// << 1\n+\tshll\tr0\n+LOCAL(ashlsi_2):\t\t\t// << 2\n \trts\n \tshll2\tr0\n-\n-LOCAL(ashlsi3_7):\n-\tshll2\tr0\n-LOCAL(ashlsi3_5):\n+\tbra\tLOCAL(ashlsi_1)\t\t// << 3\n \tshll2\tr0\n-LOCAL(ashlsi3_3):\n+\tbra\tLOCAL(ashlsi_2)\t\t// << 4\n \tshll2\tr0\n-LOCAL(ashlsi3_1):\n-\trts\n+\tbra\tLOCAL(ashlsi_5)\t\t// << 5\n \tshll\tr0\n-\n-LOCAL(ashlsi3_14):\n-\tshll2\tr0\n-LOCAL(ashlsi3_12):\n+\tbra\tLOCAL(ashlsi_6)\t\t// << 6\n \tshll2\tr0\n-LOCAL(ashlsi3_10):\n-\tshll2\tr0\n-LOCAL(ashlsi3_8):\n+\tbra\tLOCAL(ashlsi_7)\t\t// << 7\n+\tshll\tr0\n+LOCAL(ashlsi_8):\t\t\t// << 8\n \trts\n \tshll8\tr0\n-\n-LOCAL(ashlsi3_15):\n-\tshll2\tr0\n-LOCAL(ashlsi3_13):\n+\tbra\tLOCAL(ashlsi_8)\t\t// << 9\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_8)\t\t// << 10\n \tshll2\tr0\n-LOCAL(ashlsi3_11):\n+\tbra\tLOCAL(ashlsi_11)\t// << 11\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_12)\t// << 12\n \tshll2\tr0\n-LOCAL(ashlsi3_9):\n+\tbra\tLOCAL(ashlsi_13)\t// << 13\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_14)\t// << 14\n+\tshll8\tr0\n+\tbra\tLOCAL(ashlsi_15)\t// << 15\n \tshll8\tr0\n+LOCAL(ashlsi_16):\t\t\t// << 16\n \trts\n+\tshll16\tr0\n+\tbra\tLOCAL(ashlsi_16)\t// << 17\n \tshll\tr0\n-\n-LOCAL(ashlsi3_22):\n-\tshll2\tr0\n-LOCAL(ashlsi3_20):\n+\tbra\tLOCAL(ashlsi_16)\t// << 18\n \tshll2\tr0\n-LOCAL(ashlsi3_18):\n+\tbra\tLOCAL(ashlsi_19)\t// << 19\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_20)\t// << 20\n \tshll2\tr0\n-LOCAL(ashlsi3_16):\n-\trts\n+\tbra\tLOCAL(ashlsi_21)\t// << 21\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_22)\t// << 22\n \tshll16\tr0\n-\n-LOCAL(ashlsi3_23):\n-\tshll2\tr0\n-LOCAL(ashlsi3_21):\n+\tbra\tLOCAL(ashlsi_23)\t// << 23\n+\tshll16\tr0\n+\tbra\tLOCAL(ashlsi_16)\t// << 24\n+\tshll8\tr0\n+\tbra\tLOCAL(ashlsi_25)\t// << 25\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_26)\t// << 26\n \tshll2\tr0\n-LOCAL(ashlsi3_19):\n+\tbra\tLOCAL(ashlsi_27)\t// << 27\n+\tshll\tr0\n+\tbra\tLOCAL(ashlsi_28)\t// << 28\n \tshll2\tr0\n-LOCAL(ashlsi3_17):\n+\tbra\tLOCAL(ashlsi_29)\t// << 29\n+\tshll16\tr0\n+\tbra\tLOCAL(ashlsi_30)\t// << 30\n \tshll16\tr0\n+\tand\t#1,r0\t\t\t// << 31\n \trts\n-\tshll\tr0\n+\trotr\tr0\n \n-LOCAL(ashlsi3_30):\n-\tshll2\tr0\n-LOCAL(ashlsi3_28):\n+LOCAL(ashlsi_7):\n \tshll2\tr0\n-LOCAL(ashlsi3_26):\n+LOCAL(ashlsi_5):\n+LOCAL(ashlsi_6):\n \tshll2\tr0\n-LOCAL(ashlsi3_24):\n-\tshll16\tr0\n \trts\n-\tshll8\tr0\n-\n-LOCAL(ashlsi3_31):\n+LOCAL(ashlsi_13):\n \tshll2\tr0\n-LOCAL(ashlsi3_29):\n+LOCAL(ashlsi_12):\n+LOCAL(ashlsi_11):\n+\tshll8\tr0\n+\trts\n+LOCAL(ashlsi_21):\n \tshll2\tr0\n-LOCAL(ashlsi3_27):\n+LOCAL(ashlsi_20):\n+LOCAL(ashlsi_19):\n+\tshll16\tr0\n+\trts\n+LOCAL(ashlsi_28):\n+LOCAL(ashlsi_27):\n \tshll2\tr0\n-LOCAL(ashlsi3_25):\n+LOCAL(ashlsi_26):\n+LOCAL(ashlsi_25):\n \tshll16\tr0\n+\trts\n+\tshll8\tr0\n+\n+LOCAL(ashlsi_22):\n+LOCAL(ashlsi_14):\n+\tshlr2\tr0\n+\trts\n \tshll8\tr0\n+\n+LOCAL(ashlsi_23):\n+LOCAL(ashlsi_15):\n+\tshlr\tr0\n \trts\n-\tshll\tr0\n+\tshll8\tr0\n \n-LOCAL(ashlsi3_0):\n+LOCAL(ashlsi_29):\n+\tshlr\tr0\n+LOCAL(ashlsi_30):\n+\tshlr2\tr0\n \trts\n-\tnop\n+\tshll16\tr0\t\n \n \tENDFUNC(GLOBAL(ashlsi3))\n+\tENDFUNC(GLOBAL(ashlsi3_r0))\n #endif\n \n #ifdef L_lshiftrt\n \n !\n ! GLOBAL(lshrsi3)\n+! (For compatibility with older binaries, not used by compiler)\n !\n ! Entry:\n-!\n-! r4: Value to shift\n-! r5: Shifts\n+!\tr4: Value to shift\n+!\tr5: Shift count\n !\n ! Exit:\n-!\n-! r0: Result\n+!\tr0: Result\n !\n ! Destroys:\n+!\tT bit\n !\n-! (none)\n !\n+! GLOBAL(lshrsi3_r0)\n+!\n+! Entry:\n+!\tr4: Value to shift\n+!\tr0: Shift count\n+!\n+! Exit:\n+!\tr0: Result\n+!\n+! Destroys:\n+!\tT bit\n+\n \t.global\tGLOBAL(lshrsi3)\n+\t.global\tGLOBAL(lshrsi3_r0)\n \tHIDDEN_FUNC(GLOBAL(lshrsi3))\n-\t.align\t2\n+\tHIDDEN_FUNC(GLOBAL(lshrsi3_r0))\n GLOBAL(lshrsi3):\n-\tmov\t#31,r0\n-\tand\tr0,r5\n-\tmova\tLOCAL(lshrsi3_table),r0\n-\tmov.b\t@(r0,r5),r5\n+\tmov\tr5,r0\n+\t.align\t2\n+GLOBAL(lshrsi3_r0):\n+\n #ifdef __sh1__\n-\tadd\tr5,r0\n+\tand\t#31,r0\n+\tshll2\tr0\n+\tmov.l\tr4,@-r15\n+\tmov\tr0,r4\n+\tmova\tLOCAL(lshrsi3_table),r0\n+\tadd\tr4,r0\n+\tmov.l\t@r15+,r4\n \tjmp\t@r0\n+\tmov\tr4,r0\n+\t.align 2\n #else\n-\tbraf\tr5\n-#endif\n+\tand\t#31,r0\n+\tshll2\tr0\n+\tbraf\tr0\n \tmov\tr4,r0\n-\n-\t.align\t2\n+#endif\n LOCAL(lshrsi3_table):\n-\t.byte\t\tLOCAL(lshrsi3_0)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_1)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_2)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_3)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_4)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_5)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_6)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_7)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_8)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_9)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_10)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_11)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_12)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_13)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_14)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_15)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_16)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_17)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_18)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_19)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_20)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_21)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_22)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_23)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_24)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_25)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_26)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_27)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_28)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_29)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_30)-LOCAL(lshrsi3_table)\n-\t.byte\t\tLOCAL(lshrsi3_31)-LOCAL(lshrsi3_table)\n-\n-LOCAL(lshrsi3_6):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_4):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_2):\n+\trts\t\t\t\t// >> 0\n+\tnop\n+LOCAL(lshrsi_1):\t\t\t// >> 1\n+\trts\n+\tshlr\tr0\n+LOCAL(lshrsi_2):\t\t\t// >> 2\n \trts\n \tshlr2\tr0\n-\n-LOCAL(lshrsi3_7):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_5):\n+\tbra\tLOCAL(lshrsi_1)\t\t// >> 3\n \tshlr2\tr0\n-LOCAL(lshrsi3_3):\n+\tbra\tLOCAL(lshrsi_2)\t\t// >> 4\n \tshlr2\tr0\n-LOCAL(lshrsi3_1):\n-\trts\n+\tbra\tLOCAL(lshrsi_5)\t\t// >> 5\n \tshlr\tr0\n-\n-LOCAL(lshrsi3_14):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_12):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_10):\n+\tbra\tLOCAL(lshrsi_6)\t\t// >> 6\n \tshlr2\tr0\n-LOCAL(lshrsi3_8):\n+\tbra\tLOCAL(lshrsi_7)\t\t// >> 7\n+\tshlr\tr0\n+LOCAL(lshrsi_8):\t\t\t// >> 8\n \trts\n \tshlr8\tr0\n-\n-LOCAL(lshrsi3_15):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_13):\n+\tbra\tLOCAL(lshrsi_8)\t\t// >> 9\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_8)\t\t// >> 10\n \tshlr2\tr0\n-LOCAL(lshrsi3_11):\n+\tbra\tLOCAL(lshrsi_11)\t// >> 11\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_12)\t// >> 12\n \tshlr2\tr0\n-LOCAL(lshrsi3_9):\n+\tbra\tLOCAL(lshrsi_13)\t// >> 13\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_14)\t// >> 14\n \tshlr8\tr0\n+\tbra\tLOCAL(lshrsi_15)\t// >> 15\n+\tshlr8\tr0\n+LOCAL(lshrsi_16):\t\t\t// >> 16\n \trts\n+\tshlr16\tr0\n+\tbra\tLOCAL(lshrsi_16)\t// >> 17\n \tshlr\tr0\n-\n-LOCAL(lshrsi3_22):\n+\tbra\tLOCAL(lshrsi_16)\t// >> 18\n \tshlr2\tr0\n-LOCAL(lshrsi3_20):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_18):\n+\tbra\tLOCAL(lshrsi_19)\t// >> 19\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_20)\t// >> 20\n \tshlr2\tr0\n-LOCAL(lshrsi3_16):\n-\trts\n+\tbra\tLOCAL(lshrsi_21)\t// >> 21\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_22)\t// >> 22\n \tshlr16\tr0\n-\n-LOCAL(lshrsi3_23):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_21):\n+\tbra\tLOCAL(lshrsi_23)\t// >> 23\n+\tshlr16\tr0\n+\tbra\tLOCAL(lshrsi_16)\t// >> 24\n+\tshlr8\tr0\n+\tbra\tLOCAL(lshrsi_25)\t// >> 25\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_26)\t// >> 26\n \tshlr2\tr0\n-LOCAL(lshrsi3_19):\n+\tbra\tLOCAL(lshrsi_27)\t// >> 27\n+\tshlr\tr0\n+\tbra\tLOCAL(lshrsi_28)\t// >> 28\n \tshlr2\tr0\n-LOCAL(lshrsi3_17):\n+\tbra\tLOCAL(lshrsi_29)\t// >> 29\n \tshlr16\tr0\n+\tbra\tLOCAL(lshrsi_30)\t// >> 30\n+\tshlr16\tr0\n+\tshll\tr0\t\t\t// >> 31\n \trts\n-\tshlr\tr0\n+\tmovt\tr0\n \n-LOCAL(lshrsi3_30):\n+LOCAL(lshrsi_7):\n \tshlr2\tr0\n-LOCAL(lshrsi3_28):\n+LOCAL(lshrsi_5):\n+LOCAL(lshrsi_6):\n \tshlr2\tr0\n-LOCAL(lshrsi3_26):\n-\tshlr2\tr0\n-LOCAL(lshrsi3_24):\n-\tshlr16\tr0\n \trts\n-\tshlr8\tr0\n-\n-LOCAL(lshrsi3_31):\n+LOCAL(lshrsi_13):\n \tshlr2\tr0\n-LOCAL(lshrsi3_29):\n+LOCAL(lshrsi_12):\n+LOCAL(lshrsi_11):\n+\tshlr8\tr0\n+\trts\n+LOCAL(lshrsi_21):\n \tshlr2\tr0\n-LOCAL(lshrsi3_27):\n+LOCAL(lshrsi_20):\n+LOCAL(lshrsi_19):\n+\tshlr16\tr0\n+\trts\n+LOCAL(lshrsi_28):\n+LOCAL(lshrsi_27):\n \tshlr2\tr0\n-LOCAL(lshrsi3_25):\n+LOCAL(lshrsi_26):\n+LOCAL(lshrsi_25):\n \tshlr16\tr0\n+\trts\n+\tshlr8\tr0\n+\n+LOCAL(lshrsi_22):\n+LOCAL(lshrsi_14):\n+\tshll2\tr0\n+\trts\n \tshlr8\tr0\n+\n+LOCAL(lshrsi_23):\n+LOCAL(lshrsi_15):\n+\tshll\tr0\n \trts\n-\tshlr\tr0\n+\tshlr8\tr0\n \n-LOCAL(lshrsi3_0):\n+LOCAL(lshrsi_29):\n+\tshll\tr0\n+LOCAL(lshrsi_30):\n+\tshll2\tr0\n \trts\n-\tnop\n+\tshlr16\tr0\t\n \n \tENDFUNC(GLOBAL(lshrsi3))\n+\tENDFUNC(GLOBAL(lshrsi3_r0))\n #endif\n \n #ifdef L_movmem"}]}