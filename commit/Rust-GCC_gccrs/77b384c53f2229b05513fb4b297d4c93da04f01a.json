{"sha": "77b384c53f2229b05513fb4b297d4c93da04f01a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdiMzg0YzUzZjIyMjliMDU1MTNmYjRiMjk3ZDRjOTNkYTA0ZjAxYQ==", "commit": {"author": {"name": "Thomas Preud'homme", "email": "thomas.preudhomme@arm.com", "date": "2016-11-17T20:12:13Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2016-11-17T20:12:13Z"}, "message": "Fix PR77933: stack corruption on ARM when using high registers and LR\n\n2016-11-17  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n\n    gcc/\n    PR target/77933\n    * config/arm/arm.c (thumb1_expand_prologue): Distinguish between lr\n    being live in the function and lr needing to be saved.  Distinguish\n    between already saved pushable registers and registers to push.\n    Check for LR being an available pushable register.\n\n    gcc/testsuite/\n    PR target/77933\n    * gcc.target/arm/pr77933-1.c: New test.\n    * gcc.target/arm/pr77933-2.c: Likewise.\n\nFrom-SVN: r242559", "tree": {"sha": "57d72e555ae16df422d83d7d1b6434b8123f1ac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57d72e555ae16df422d83d7d1b6434b8123f1ac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77b384c53f2229b05513fb4b297d4c93da04f01a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b384c53f2229b05513fb4b297d4c93da04f01a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77b384c53f2229b05513fb4b297d4c93da04f01a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77b384c53f2229b05513fb4b297d4c93da04f01a/comments", "author": {"login": "RoboTux", "id": 272327, "node_id": "MDQ6VXNlcjI3MjMyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/272327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RoboTux", "html_url": "https://github.com/RoboTux", "followers_url": "https://api.github.com/users/RoboTux/followers", "following_url": "https://api.github.com/users/RoboTux/following{/other_user}", "gists_url": "https://api.github.com/users/RoboTux/gists{/gist_id}", "starred_url": "https://api.github.com/users/RoboTux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RoboTux/subscriptions", "organizations_url": "https://api.github.com/users/RoboTux/orgs", "repos_url": "https://api.github.com/users/RoboTux/repos", "events_url": "https://api.github.com/users/RoboTux/events{/privacy}", "received_events_url": "https://api.github.com/users/RoboTux/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9df71be907c93848f4ab31b280080da59cf5b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9df71be907c93848f4ab31b280080da59cf5b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9df71be907c93848f4ab31b280080da59cf5b5a"}], "stats": {"total": 136, "additions": 124, "deletions": 12}, "files": [{"sha": "1cf436d161276282d924664e217ccd3409131712", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77b384c53f2229b05513fb4b297d4c93da04f01a", "patch": "@@ -1,3 +1,11 @@\n+2016-11-17  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/77933\n+\t* config/arm/arm.c (thumb1_expand_prologue): Distinguish between lr\n+\tbeing live in the function and lr needing to be saved.  Distinguish\n+\tbetween already saved pushable registers and registers to push.\n+\tCheck for LR being an available pushable register.\n+\n 2016-11-17  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n \t* config/i386/i386.md (cmpstrnsi): New test to bail out if neither"}, {"sha": "d7ce87c27ee33b0f14c1a693a81e1de19b610d41", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=77b384c53f2229b05513fb4b297d4c93da04f01a", "patch": "@@ -23593,6 +23593,7 @@ thumb1_expand_prologue (void)\n   unsigned long live_regs_mask;\n   unsigned long l_mask;\n   unsigned high_regs_pushed = 0;\n+  bool lr_needs_saving;\n \n   func_type = arm_current_func_type ();\n \n@@ -23615,6 +23616,7 @@ thumb1_expand_prologue (void)\n \n   offsets = arm_get_frame_offsets ();\n   live_regs_mask = offsets->saved_regs_mask;\n+  lr_needs_saving = live_regs_mask & (1 << LR_REGNUM);\n \n   /* Extract a mask of the ones we can give to the Thumb's push instruction.  */\n   l_mask = live_regs_mask & 0x40ff;\n@@ -23681,6 +23683,7 @@ thumb1_expand_prologue (void)\n \t{\n \t  insn = thumb1_emit_multi_reg_push (l_mask, l_mask);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t  lr_needs_saving = false;\n \n \t  offset = bit_count (l_mask) * UNITS_PER_WORD;\n \t}\n@@ -23745,12 +23748,13 @@ thumb1_expand_prologue (void)\n      be a push of LR and we can combine it with the push of the first high\n      register.  */\n   else if ((l_mask & 0xff) != 0\n-\t   || (high_regs_pushed == 0 && l_mask))\n+\t   || (high_regs_pushed == 0 && lr_needs_saving))\n     {\n       unsigned long mask = l_mask;\n       mask |= (1 << thumb1_extra_regs_pushed (offsets, true)) - 1;\n       insn = thumb1_emit_multi_reg_push (mask, mask);\n       RTX_FRAME_RELATED_P (insn) = 1;\n+      lr_needs_saving = false;\n     }\n \n   if (high_regs_pushed)\n@@ -23768,16 +23772,19 @@ thumb1_expand_prologue (void)\n       /* Here we need to mask out registers used for passing arguments\n \t even if they can be pushed.  This is to avoid using them to stash the high\n \t registers.  Such kind of stash may clobber the use of arguments.  */\n-      pushable_regs = l_mask & (~arg_regs_mask) & 0xff;\n+      pushable_regs = l_mask & (~arg_regs_mask);\n+      if (lr_needs_saving)\n+\tpushable_regs &= ~(1 << LR_REGNUM);\n \n       if (pushable_regs == 0)\n \tpushable_regs = 1 << thumb_find_work_register (live_regs_mask);\n \n       while (high_regs_pushed > 0)\n \t{\n \t  unsigned long real_regs_mask = 0;\n+\t  unsigned long push_mask = 0;\n \n-\t  for (regno = LAST_LO_REGNUM; regno >= 0; regno --)\n+\t  for (regno = LR_REGNUM; regno >= 0; regno --)\n \t    {\n \t      if (pushable_regs & (1 << regno))\n \t\t{\n@@ -23786,6 +23793,7 @@ thumb1_expand_prologue (void)\n \n \t\t  high_regs_pushed --;\n \t\t  real_regs_mask |= (1 << next_hi_reg);\n+\t\t  push_mask |= (1 << regno);\n \n \t\t  if (high_regs_pushed)\n \t\t    {\n@@ -23795,23 +23803,20 @@ thumb1_expand_prologue (void)\n \t\t\t  break;\n \t\t    }\n \t\t  else\n-\t\t    {\n-\t\t      pushable_regs &= ~((1 << regno) - 1);\n-\t\t      break;\n-\t\t    }\n+\t\t    break;\n \t\t}\n \t    }\n \n \t  /* If we had to find a work register and we have not yet\n \t     saved the LR then add it to the list of regs to push.  */\n-\t  if (l_mask == (1 << LR_REGNUM))\n+\t  if (lr_needs_saving)\n \t    {\n-\t      pushable_regs |= l_mask;\n-\t      real_regs_mask |= l_mask;\n-\t      l_mask = 0;\n+\t      push_mask |= 1 << LR_REGNUM;\n+\t      real_regs_mask |= 1 << LR_REGNUM;\n+\t      lr_needs_saving = false;\n \t    }\n \n-\t  insn = thumb1_emit_multi_reg_push (pushable_regs, real_regs_mask);\n+\t  insn = thumb1_emit_multi_reg_push (push_mask, real_regs_mask);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n     }"}, {"sha": "55f7d837aad2f735dc4bc30478040598f183fd4e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77b384c53f2229b05513fb4b297d4c93da04f01a", "patch": "@@ -1,3 +1,9 @@\n+2016-11-17  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n+\n+\tPR target/77933\n+\t* gcc.target/arm/pr77933-1.c: New test.\n+\t* gcc.target/arm/pr77933-2.c: Likewise.\n+\n 2016-11-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/78201"}, {"sha": "95cf68ea7531bcc453371f493a05bd40caa5541b", "filename": "gcc/testsuite/gcc.target/arm/pr77933-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-1.c?ref=77b384c53f2229b05513fb4b297d4c93da04f01a", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+__attribute__ ((noinline, noclone)) void\n+clobber_lr_and_highregs (void)\n+{\n+  __asm__ volatile (\"\" : : : \"r8\", \"r9\", \"lr\");\n+}\n+\n+int\n+main (void)\n+{\n+  int ret;\n+\n+  __asm volatile (\"mov\\tr4, #0xf4\\n\\t\"\n+\t\t  \"mov\\tr5, #0xf5\\n\\t\"\n+\t\t  \"mov\\tr6, #0xf6\\n\\t\"\n+\t\t  \"mov\\tr7, #0xf7\\n\\t\"\n+\t\t  \"mov\\tr0, #0xf8\\n\\t\"\n+\t\t  \"mov\\tr8, r0\\n\\t\"\n+\t\t  \"mov\\tr0, #0xfa\\n\\t\"\n+\t\t  \"mov\\tr10, r0\"\n+\t\t  : : : \"r0\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r10\");\n+\n+  clobber_lr_and_highregs ();\n+\n+  __asm volatile (\"cmp\\tr4, #0xf4\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr5, #0xf5\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr6, #0xf6\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr7, #0xf7\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\tr0, r8\\n\\t\"\n+\t\t  \"cmp\\tr0, #0xf8\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\tr0, r10\\n\\t\"\n+\t\t  \"cmp\\tr0, #0xfa\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\t%0, #1\\n\"\n+\t\t  \"fail:\\n\\t\"\n+\t\t  \"sub\\tr0, #1\"\n+\t\t  : \"=r\" (ret) : :);\n+  return ret;\n+}"}, {"sha": "9028c4fcab4229591fa057f15c641d2b5597cd1d", "filename": "gcc/testsuite/gcc.target/arm/pr77933-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77b384c53f2229b05513fb4b297d4c93da04f01a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr77933-2.c?ref=77b384c53f2229b05513fb4b297d4c93da04f01a", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+/* { dg-options \"-mthumb -O2 -mtpcs-leaf-frame\" } */\n+\n+__attribute__ ((noinline, noclone)) void\n+clobber_lr_and_highregs (void)\n+{\n+  __asm__ volatile (\"\" : : : \"r8\", \"r9\", \"lr\");\n+}\n+\n+int\n+main (void)\n+{\n+  int ret;\n+\n+  __asm volatile (\"mov\\tr4, #0xf4\\n\\t\"\n+\t\t  \"mov\\tr5, #0xf5\\n\\t\"\n+\t\t  \"mov\\tr6, #0xf6\\n\\t\"\n+\t\t  \"mov\\tr7, #0xf7\\n\\t\"\n+\t\t  \"mov\\tr0, #0xf8\\n\\t\"\n+\t\t  \"mov\\tr8, r0\\n\\t\"\n+\t\t  \"mov\\tr0, #0xfa\\n\\t\"\n+\t\t  \"mov\\tr10, r0\"\n+\t\t  : : : \"r0\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r10\");\n+\n+  clobber_lr_and_highregs ();\n+\n+  __asm volatile (\"cmp\\tr4, #0xf4\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr5, #0xf5\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr6, #0xf6\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"cmp\\tr7, #0xf7\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\tr0, r8\\n\\t\"\n+\t\t  \"cmp\\tr0, #0xf8\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\tr0, r10\\n\\t\"\n+\t\t  \"cmp\\tr0, #0xfa\\n\\t\"\n+\t\t  \"bne\\tfail\\n\\t\"\n+\t\t  \"mov\\t%0, #1\\n\"\n+\t\t  \"fail:\\n\\t\"\n+\t\t  \"sub\\tr0, #1\"\n+\t\t  : \"=r\" (ret) : :);\n+  return ret;\n+}"}]}