{"sha": "f71d5704ba64939d2e70d055659cb2d72cbce40e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcxZDU3MDRiYTY0OTM5ZDJlNzBkMDU1NjU5Y2IyZDcyY2JjZTQwZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-06-15T10:41:13Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-06-15T10:41:13Z"}, "message": "re PR ada/53592 (ICE on assignment to component of vector_type)\n\n\tPR ada/53592\n\t* gcc-interface/gigi.h (maybe_vector_array): Make static inline.\n\t* gcc-interface/utils.c (maybe_vector_array): Delete.\n\t* gcc-interface/trans.c (gnat_to_gnu) <N_Indexed_Component>: Mark the\n\tarray object as addressable if it has vector type and is on the LHS.\n\nFrom-SVN: r188653", "tree": {"sha": "148a3d7dce2cb42680ee7534e42f3dec39e30ca7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/148a3d7dce2cb42680ee7534e42f3dec39e30ca7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f71d5704ba64939d2e70d055659cb2d72cbce40e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71d5704ba64939d2e70d055659cb2d72cbce40e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71d5704ba64939d2e70d055659cb2d72cbce40e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71d5704ba64939d2e70d055659cb2d72cbce40e/comments", "author": null, "committer": null, "parents": [{"sha": "2da02156af964dbd197f19cbd7fea003a73aacb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2da02156af964dbd197f19cbd7fea003a73aacb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2da02156af964dbd197f19cbd7fea003a73aacb3"}], "stats": {"total": 72, "additions": 53, "deletions": 19}, "files": [{"sha": "8cca048644c9553ad86c7940859432ef9713f712", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -1,3 +1,11 @@\n+2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/53592\n+\t* gcc-interface/gigi.h (maybe_vector_array): Make static inline.\n+\t* gcc-interface/utils.c (maybe_vector_array): Delete.\n+\t* gcc-interface/trans.c (gnat_to_gnu) <N_Indexed_Component>: Mark the\n+\tarray object as addressable if it has vector type and is on the LHS.\n+\n 2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/53590"}, {"sha": "cfa52b069db0d42fe8519ef74f3cfaa362d9061a", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -783,10 +783,6 @@ extern tree remove_conversions (tree exp, bool true_address);\n    likewise return an expression pointing to the underlying array.  */\n extern tree maybe_unconstrained_array (tree exp);\n \n-/* If EXP's type is a VECTOR_TYPE, return EXP converted to the associated\n-   TYPE_REPRESENTATIVE_ARRAY.  */\n-extern tree maybe_vector_array (tree exp);\n-\n /* Return an expression that does an unchecked conversion of EXPR to TYPE.\n    If NOTRUNC_P is true, truncation operations should be suppressed.  */\n extern tree unchecked_convert (tree type, tree expr, bool notrunc_p);\n@@ -1033,6 +1029,20 @@ extern void enumerate_modes (void (*f) (const char *, int, int, int, int, int,\n /* Convenient shortcuts.  */\n #define VECTOR_TYPE_P(TYPE) (TREE_CODE (TYPE) == VECTOR_TYPE)\n \n+/* If EXP's type is a VECTOR_TYPE, return EXP converted to the associated\n+   TYPE_REPRESENTATIVE_ARRAY.  */\n+\n+static inline tree\n+maybe_vector_array (tree exp)\n+{\n+  tree etype = TREE_TYPE (exp);\n+\n+  if (VECTOR_TYPE_P (etype))\n+    exp = convert (TYPE_REPRESENTATIVE_ARRAY (etype), exp);\n+\n+  return exp;\n+}\n+\n static inline unsigned HOST_WIDE_INT\n ceil_pow2 (unsigned HOST_WIDE_INT x)\n {"}, {"sha": "65231bde84872d589dd0c6d16b129212b60fa579", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -5372,7 +5372,12 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t/* Convert vector inputs to their representative array type, to fit\n \t   what the code below expects.  */\n-\tgnu_array_object = maybe_vector_array (gnu_array_object);\n+\tif (VECTOR_TYPE_P (TREE_TYPE (gnu_array_object)))\n+\t  {\n+\t    if (present_in_lhs_or_actual_p (gnat_node))\n+\t      gnat_mark_addressable (gnu_array_object);\n+\t    gnu_array_object = maybe_vector_array (gnu_array_object);\n+\t  }\n \n \tgnu_array_object = maybe_unconstrained_array (gnu_array_object);\n "}, {"sha": "d2183bbe160648d09497ed3d764a568d9990a0d2", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -5149,20 +5149,6 @@ maybe_unconstrained_array (tree exp)\n \n   return exp;\n }\n-\n-/* If EXP's type is a VECTOR_TYPE, return EXP converted to the associated\n-   TYPE_REPRESENTATIVE_ARRAY.  */\n-\n-tree\n-maybe_vector_array (tree exp)\n-{\n-  tree etype = TREE_TYPE (exp);\n-\n-  if (VECTOR_TYPE_P (etype))\n-    exp = convert (TYPE_REPRESENTATIVE_ARRAY (etype), exp);\n-\n-  return exp;\n-}\n \f\n /* Return true if EXPR is an expression that can be folded as an operand\n    of a VIEW_CONVERT_EXPR.  See ada-tree.h for a complete rationale.  */"}, {"sha": "5efced7c34e81537dad94e57285aa3971e69dbbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -1,3 +1,7 @@\n+2012-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/vect8.ad[sb]: New test.\n+\n 2012-06-14  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/vrp.h: New testcase."}, {"sha": "b13555abd0fe6f9c8c443480e28cb716c75c0820", "filename": "gcc/testsuite/gnat.dg/vect8.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.adb?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -0,0 +1,11 @@\n+package body Vect8 is\n+\n+   function Foo (V : Vec) return Vec is\n+      Ret : Vec;\n+   begin\n+      Ret (1) := V (1) + V (2);\n+      Ret (2) := V (1) - V (2);\n+      return Ret;\n+   end;\n+\n+end Vect8;"}, {"sha": "5406c70f49f74f8a597ccfda35ab06ef974e6b9e", "filename": "gcc/testsuite/gnat.dg/vect8.ads", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f71d5704ba64939d2e70d055659cb2d72cbce40e/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fvect8.ads?ref=f71d5704ba64939d2e70d055659cb2d72cbce40e", "patch": "@@ -0,0 +1,10 @@\n+-- { dg-do compile }\n+\n+package Vect8 is\n+\n+   type Vec is array (1 .. 2) of Long_Float;\n+   pragma Machine_Attribute (Vec, \"vector_type\");\n+\n+   function Foo (V : Vec) return Vec;\n+\n+end Vect8;"}]}