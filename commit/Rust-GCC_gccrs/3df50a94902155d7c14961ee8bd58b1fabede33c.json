{"sha": "3df50a94902155d7c14961ee8bd58b1fabede33c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RmNTBhOTQ5MDIxNTVkN2MxNDk2MWVlOGJkNThiMWZhYmVkZTMzYw==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-05-11T09:38:22Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-05-11T09:38:22Z"}, "message": "tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p): Move from ...\n\n\t* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p): Move\n\tfrom ...\n\t* tree-ssa-address.c (multiplier_allowed_in_address_p): ... to here\n\tas local function.  Include necessary header files.\n\t* tree-ssa-loop-ivopts.h (multiplier_allowed_in_address_p): Delete.\n\nFrom-SVN: r247888", "tree": {"sha": "ff07b422f35c5fa93edf32e438bad9d0b7122f50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff07b422f35c5fa93edf32e438bad9d0b7122f50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3df50a94902155d7c14961ee8bd58b1fabede33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df50a94902155d7c14961ee8bd58b1fabede33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3df50a94902155d7c14961ee8bd58b1fabede33c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3df50a94902155d7c14961ee8bd58b1fabede33c/comments", "author": null, "committer": null, "parents": [{"sha": "3770871408ac00a6f148eebfc037f7b0e6d4719e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3770871408ac00a6f148eebfc037f7b0e6d4719e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3770871408ac00a6f148eebfc037f7b0e6d4719e"}], "stats": {"total": 125, "additions": 66, "deletions": 59}, "files": [{"sha": "262b25aa2f90d61b5e61da0fc3ff2695a08108e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3df50a94902155d7c14961ee8bd58b1fabede33c", "patch": "@@ -1,3 +1,11 @@\n+2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n+\n+\t* tree-ssa-loop-ivopts.c (multiplier_allowed_in_address_p): Move\n+\tfrom ...\n+\t* tree-ssa-address.c (multiplier_allowed_in_address_p): ... to here\n+\tas local function.  Include necessary header files.\n+\t* tree-ssa-loop-ivopts.h (multiplier_allowed_in_address_p): Delete.\n+\n 2017-05-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (autoinc_possible_for_pair): Simplify."}, {"sha": "8aefed695d524d1e6511491672646cb4b714d187", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=3df50a94902155d7c14961ee8bd58b1fabede33c", "patch": "@@ -28,11 +28,13 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"gimple.h\"\n+#include \"memmodel.h\"\n #include \"stringpool.h\"\n #include \"tree-vrp.h\"\n #include \"tree-ssanames.h\"\n #include \"expmed.h\"\n #include \"insn-config.h\"\n+#include \"emit-rtl.h\"\n #include \"recog.h\"\n #include \"tree-pretty-print.h\"\n #include \"fold-const.h\"\n@@ -537,6 +539,62 @@ add_to_parts (struct mem_address *parts, tree elt)\n \t\t\t       parts->base, elt);\n }\n \n+/* Returns true if multiplying by RATIO is allowed in an address.  Test the\n+   validity for a memory reference accessing memory of mode MODE in address\n+   space AS.  */\n+\n+static bool\n+multiplier_allowed_in_address_p (HOST_WIDE_INT ratio, machine_mode mode,\n+\t\t\t\t addr_space_t as)\n+{\n+#define MAX_RATIO 128\n+  unsigned int data_index = (int) as * MAX_MACHINE_MODE + (int) mode;\n+  static vec<sbitmap> valid_mult_list;\n+  sbitmap valid_mult;\n+\n+  if (data_index >= valid_mult_list.length ())\n+    valid_mult_list.safe_grow_cleared (data_index + 1);\n+\n+  valid_mult = valid_mult_list[data_index];\n+  if (!valid_mult)\n+    {\n+      machine_mode address_mode = targetm.addr_space.address_mode (as);\n+      rtx reg1 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1);\n+      rtx reg2 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 2);\n+      rtx addr, scaled;\n+      HOST_WIDE_INT i;\n+\n+      valid_mult = sbitmap_alloc (2 * MAX_RATIO + 1);\n+      bitmap_clear (valid_mult);\n+      scaled = gen_rtx_fmt_ee (MULT, address_mode, reg1, NULL_RTX);\n+      addr = gen_rtx_fmt_ee (PLUS, address_mode, scaled, reg2);\n+      for (i = -MAX_RATIO; i <= MAX_RATIO; i++)\n+\t{\n+\t  XEXP (scaled, 1) = gen_int_mode (i, address_mode);\n+\t  if (memory_address_addr_space_p (mode, addr, as)\n+\t      || memory_address_addr_space_p (mode, scaled, as))\n+\t    bitmap_set_bit (valid_mult, i + MAX_RATIO);\n+\t}\n+\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t{\n+\t  fprintf (dump_file, \"  allowed multipliers:\");\n+\t  for (i = -MAX_RATIO; i <= MAX_RATIO; i++)\n+\t    if (bitmap_bit_p (valid_mult, i + MAX_RATIO))\n+\t      fprintf (dump_file, \" %d\", (int) i);\n+\t  fprintf (dump_file, \"\\n\");\n+\t  fprintf (dump_file, \"\\n\");\n+\t}\n+\n+      valid_mult_list[data_index] = valid_mult;\n+    }\n+\n+  if (ratio > MAX_RATIO || ratio < -MAX_RATIO)\n+    return false;\n+\n+  return bitmap_bit_p (valid_mult, ratio + MAX_RATIO);\n+}\n+\n /* Finds the most expensive multiplication in ADDR that can be\n    expressed in an addressing mode and move the corresponding\n    element(s) to PARTS.  */"}, {"sha": "436538229c1dc0d1425216de7c24f73cc12b07c9", "filename": "gcc/tree-ssa-loop-ivopts.c", "status": "modified", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-loop-ivopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-loop-ivopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.c?ref=3df50a94902155d7c14961ee8bd58b1fabede33c", "patch": "@@ -3898,63 +3898,6 @@ adjust_setup_cost (struct ivopts_data *data, unsigned cost,\n     return cost;\n }\n \n-/* Returns true if multiplying by RATIO is allowed in an address.  Test the\n-   validity for a memory reference accessing memory of mode MODE in\n-   address space AS.  */\n-\n-\n-bool\n-multiplier_allowed_in_address_p (HOST_WIDE_INT ratio, machine_mode mode,\n-\t\t\t\t addr_space_t as)\n-{\n-#define MAX_RATIO 128\n-  unsigned int data_index = (int) as * MAX_MACHINE_MODE + (int) mode;\n-  static vec<sbitmap> valid_mult_list;\n-  sbitmap valid_mult;\n-\n-  if (data_index >= valid_mult_list.length ())\n-    valid_mult_list.safe_grow_cleared (data_index + 1);\n-\n-  valid_mult = valid_mult_list[data_index];\n-  if (!valid_mult)\n-    {\n-      machine_mode address_mode = targetm.addr_space.address_mode (as);\n-      rtx reg1 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 1);\n-      rtx reg2 = gen_raw_REG (address_mode, LAST_VIRTUAL_REGISTER + 2);\n-      rtx addr, scaled;\n-      HOST_WIDE_INT i;\n-\n-      valid_mult = sbitmap_alloc (2 * MAX_RATIO + 1);\n-      bitmap_clear (valid_mult);\n-      scaled = gen_rtx_fmt_ee (MULT, address_mode, reg1, NULL_RTX);\n-      addr = gen_rtx_fmt_ee (PLUS, address_mode, scaled, reg2);\n-      for (i = -MAX_RATIO; i <= MAX_RATIO; i++)\n-\t{\n-\t  XEXP (scaled, 1) = gen_int_mode (i, address_mode);\n-\t  if (memory_address_addr_space_p (mode, addr, as)\n-\t      || memory_address_addr_space_p (mode, scaled, as))\n-\t    bitmap_set_bit (valid_mult, i + MAX_RATIO);\n-\t}\n-\n-      if (dump_file && (dump_flags & TDF_DETAILS))\n-\t{\n-\t  fprintf (dump_file, \"  allowed multipliers:\");\n-\t  for (i = -MAX_RATIO; i <= MAX_RATIO; i++)\n-\t    if (bitmap_bit_p (valid_mult, i + MAX_RATIO))\n-\t      fprintf (dump_file, \" %d\", (int) i);\n-\t  fprintf (dump_file, \"\\n\");\n-\t  fprintf (dump_file, \"\\n\");\n-\t}\n-\n-      valid_mult_list[data_index] = valid_mult;\n-    }\n-\n-  if (ratio > MAX_RATIO || ratio < -MAX_RATIO)\n-    return false;\n-\n-  return bitmap_bit_p (valid_mult, ratio + MAX_RATIO);\n-}\n-\n  /* Calculate the SPEED or size cost of shiftadd EXPR in MODE.  MULT is the\n     EXPR operand holding the shift.  COST0 and COST1 are the costs for\n     calculating the operands of EXPR.  Returns true if successful, and returns"}, {"sha": "f8f31e9385645cfda4ff58c76bbc5de9707d0ad6", "filename": "gcc/tree-ssa-loop-ivopts.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-loop-ivopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3df50a94902155d7c14961ee8bd58b1fabede33c/gcc%2Ftree-ssa-loop-ivopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivopts.h?ref=3df50a94902155d7c14961ee8bd58b1fabede33c", "patch": "@@ -29,8 +29,6 @@ extern bool contains_abnormal_ssa_name_p (tree);\n extern struct loop *outermost_invariant_loop_for_expr (struct loop *, tree);\n extern bool expr_invariant_in_loop_p (struct loop *, tree);\n bool may_be_nonaddressable_p (tree expr);\n-bool multiplier_allowed_in_address_p (HOST_WIDE_INT, machine_mode,\n-\t\t\t\t      addr_space_t);\n void tree_ssa_iv_optimize (void);\n \n #endif /* GCC_TREE_SSA_LOOP_IVOPTS_H */"}]}