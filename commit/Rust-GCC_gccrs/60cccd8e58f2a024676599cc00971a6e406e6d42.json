{"sha": "60cccd8e58f2a024676599cc00971a6e406e6d42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjY2NkOGU1OGYyYTAyNDY3NjU5OWNjMDA5NzFhNmU0MDZlNmQ0Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-08T13:26:07Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-09T09:47:13Z"}, "message": "Fixes parsing if expressions as part of an expression.\n\nThis allows for rust style ternery expressions.\n\nFixes #214", "tree": {"sha": "fbdf44ca68e745e5af0d89fb16789570673c8a75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbdf44ca68e745e5af0d89fb16789570673c8a75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60cccd8e58f2a024676599cc00971a6e406e6d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cccd8e58f2a024676599cc00971a6e406e6d42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60cccd8e58f2a024676599cc00971a6e406e6d42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cccd8e58f2a024676599cc00971a6e406e6d42/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3ddb35959606cbf7059362acfc27a9966ac3d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3ddb35959606cbf7059362acfc27a9966ac3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3ddb35959606cbf7059362acfc27a9966ac3d4"}], "stats": {"total": 60, "additions": 50, "deletions": 10}, "files": [{"sha": "906f6b1589f5ce02a11d491ffc86d81add226953", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=60cccd8e58f2a024676599cc00971a6e406e6d42", "patch": "@@ -7504,12 +7504,23 @@ Parser<ManagedTokenSource>::parse_loop_label ()\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::IfExpr>\n Parser<ManagedTokenSource>::parse_if_expr (\n-  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED)\n+  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED, bool pratt_parse)\n {\n   // TODO: make having outer attributes an error?\n-\n-  Location locus = lexer.peek_token ()->get_locus ();\n-  skip_token (IF);\n+  Location locus = Linemap::unknown_location ();\n+  if (!pratt_parse)\n+    {\n+      locus = lexer.peek_token ()->get_locus ();\n+      if (!skip_token (IF))\n+\t{\n+\t  skip_after_end_block ();\n+\t  return nullptr;\n+\t}\n+    }\n+  else\n+    {\n+      locus = lexer.peek_token ()->get_locus () - 1;\n+    }\n \n   // detect accidental if let\n   if (lexer.peek_token ()->get_id () == LET)\n@@ -7640,12 +7651,23 @@ Parser<ManagedTokenSource>::parse_if_expr (\n template <typename ManagedTokenSource>\n std::unique_ptr<AST::IfLetExpr>\n Parser<ManagedTokenSource>::parse_if_let_expr (\n-  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED)\n+  std::vector<AST::Attribute> outer_attrs ATTRIBUTE_UNUSED, bool pratt_parse)\n {\n   // TODO: make having outer attributes an error?\n-\n-  Location locus = lexer.peek_token ()->get_locus ();\n-  skip_token (IF);\n+  Location locus = Linemap::unknown_location ();\n+  if (!pratt_parse)\n+    {\n+      locus = lexer.peek_token ()->get_locus ();\n+      if (!skip_token (IF))\n+\t{\n+\t  skip_after_end_block ();\n+\t  return nullptr;\n+\t}\n+    }\n+  else\n+    {\n+      locus = lexer.peek_token ()->get_locus () - 1;\n+    }\n \n   // detect accidental if expr parsed as if let expr\n   if (lexer.peek_token ()->get_id () != LET)\n@@ -12399,6 +12421,18 @@ Parser<ManagedTokenSource>::null_denotation (\n     case LEFT_CURLY:\n       // ok - this is an expression with block for once.\n       return parse_block_expr (std::move (outer_attrs), true);\n+    case IF:\n+      // if or if let, so more lookahead to find out\n+      if (lexer.peek_token (1)->get_id () == LET)\n+\t{\n+\t  // if let expr\n+\t  return parse_if_let_expr (std::move (outer_attrs), true);\n+\t}\n+      else\n+\t{\n+\t  // if expr\n+\t  return parse_if_expr (std::move (outer_attrs), true);\n+\t}\n     case MATCH_TOK:\n       // also an expression with block\n       return parse_match_expr (std::move (outer_attrs), true);"}, {"sha": "aeda82b2aed84396b70b6762e5c0ad50e1a384e4", "filename": "gcc/rust/parse/rust-parse.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Frust%2Fparse%2Frust-parse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Frust%2Fparse%2Frust-parse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse.h?ref=60cccd8e58f2a024676599cc00971a6e406e6d42", "patch": "@@ -480,10 +480,12 @@ template <typename ManagedTokenSource> class Parser\n \t\t    bool pratt_parse = false);\n   std::unique_ptr<AST::IfExpr>\n   parse_if_expr (std::vector<AST::Attribute> outer_attrs\n-\t\t = std::vector<AST::Attribute> ());\n+\t\t = std::vector<AST::Attribute> (),\n+\t\t bool pratt_parse = false);\n   std::unique_ptr<AST::IfLetExpr>\n   parse_if_let_expr (std::vector<AST::Attribute> outer_attrs\n-\t\t     = std::vector<AST::Attribute> ());\n+\t\t     = std::vector<AST::Attribute> (),\n+\t\t     bool pratt_parse = false);\n   std::unique_ptr<AST::LoopExpr>\n   parse_loop_expr (std::vector<AST::Attribute> outer_attrs\n \t\t   = std::vector<AST::Attribute> (),"}, {"sha": "e583008380928548ad6fdc64a0a1c204ccdbb878", "filename": "gcc/testsuite/rust.test/compilable/block_expr_parser_bug.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr_parser_bug.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60cccd8e58f2a024676599cc00971a6e406e6d42/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr_parser_bug.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr_parser_bug.rs?ref=60cccd8e58f2a024676599cc00971a6e406e6d42", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let a = 123;\n+    let b = if a > 10 { a - 1 } else { a + 1 };\n+}"}]}