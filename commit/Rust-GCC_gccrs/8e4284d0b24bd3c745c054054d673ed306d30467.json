{"sha": "8e4284d0b24bd3c745c054054d673ed306d30467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGU0Mjg0ZDBiMjRiZDNjNzQ1YzA1NDA1NGQ2NzNlZDMwNmQzMDQ2Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-26T15:50:13Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-26T15:50:13Z"}, "message": "ipa-inline-analysis.c (find_foldable_builtin_expect): Use gimple_call_internal_p.\n\n\t* ipa-inline-analysis.c (find_foldable_builtin_expect): Use\n\tgimple_call_internal_p.\n\t* ipa-split.c (find_return_bb): Likewise.\n\t(execute_split_functions): Likewise.\n\t* omp-low.c (dump_oacc_loop_part): Likewise.\n\t(oacc_loop_xform_head_tail): Likewise.\n\t* predict.c (predict_loops): Likewise.\n\t* sanopt.c (pass_sanopt::execute): Likewise.\n\t* tree-cfg.c (get_abnormal_succ_dispatcher): Likewise.\n\t* tree-parloops.c (oacc_entry_exit_ok_1): Likewise.\n\t* tree-stdarg.c (gimple_call_ifn_va_arg_p): Remove function.\n\t(expand_ifn_va_arg_1): Use gimple_call_internal_p.\n\t(expand_ifn_va_arg): Likewise.\n\t* tree-vect-loop.c (vect_determine_vectorization_factor): Likewise.\n\t(optimize_mask_stores): Likewise.\n\t* tree-vect-stmts.c (vect_simd_lane_linear): Likewise.\n\t(vect_transform_stmt): Likewise.\n\t* tree-vectorizer.c (vect_loop_vectorized_call): Likewise.\n\t* tsan.c (instrument_memory_accesses): Likewise.\n\nFrom-SVN: r240498", "tree": {"sha": "d6490f3739ae65b50b309780a2c142f73d79ed1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6490f3739ae65b50b309780a2c142f73d79ed1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e4284d0b24bd3c745c054054d673ed306d30467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4284d0b24bd3c745c054054d673ed306d30467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e4284d0b24bd3c745c054054d673ed306d30467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e4284d0b24bd3c745c054054d673ed306d30467/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e13996688c8111bc917b9015a0f5fbc936e035d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e13996688c8111bc917b9015a0f5fbc936e035d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e13996688c8111bc917b9015a0f5fbc936e035d"}], "stats": {"total": 102, "additions": 41, "deletions": 61}, "files": [{"sha": "9427b50600776d6d6fc6396a389a14216a2ec00a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -1,3 +1,25 @@\n+2016-09-26  Marek Polacek  <polacek@redhat.com>\n+\n+\t* ipa-inline-analysis.c (find_foldable_builtin_expect): Use\n+\tgimple_call_internal_p.\n+\t* ipa-split.c (find_return_bb): Likewise.\n+\t(execute_split_functions): Likewise.\n+\t* omp-low.c (dump_oacc_loop_part): Likewise.\n+\t(oacc_loop_xform_head_tail): Likewise.\n+\t* predict.c (predict_loops): Likewise.\n+\t* sanopt.c (pass_sanopt::execute): Likewise.\n+\t* tree-cfg.c (get_abnormal_succ_dispatcher): Likewise.\n+\t* tree-parloops.c (oacc_entry_exit_ok_1): Likewise.\n+\t* tree-stdarg.c (gimple_call_ifn_va_arg_p): Remove function.\n+\t(expand_ifn_va_arg_1): Use gimple_call_internal_p.\n+\t(expand_ifn_va_arg): Likewise.\n+\t* tree-vect-loop.c (vect_determine_vectorization_factor): Likewise.\n+\t(optimize_mask_stores): Likewise.\n+\t* tree-vect-stmts.c (vect_simd_lane_linear): Likewise.\n+\t(vect_transform_stmt): Likewise.\n+\t* tree-vectorizer.c (vect_loop_vectorized_call): Likewise.\n+\t* tsan.c (instrument_memory_accesses): Likewise.\n+\n 2016-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n             Alexander Monakov  <amonakov@ispras.ru>\n "}, {"sha": "8228e8ae3e8a272046a85841b49cf10b86a72f10", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -2398,9 +2398,7 @@ find_foldable_builtin_expect (basic_block bb)\n     {\n       gimple *stmt = gsi_stmt (bsi);\n       if (gimple_call_builtin_p (stmt, BUILT_IN_EXPECT)\n-\t  || (is_gimple_call (stmt)\n-\t      && gimple_call_internal_p (stmt)\n-\t      && gimple_call_internal_fn (stmt) == IFN_BUILTIN_EXPECT))\n+\t  || gimple_call_internal_p (stmt, IFN_BUILTIN_EXPECT))\n         {\n           tree var = gimple_call_lhs (stmt);\n           tree arg = gimple_call_arg (stmt, 0);"}, {"sha": "0c25fcae59fa801e5ffdff5ba22725316610757d", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -788,9 +788,7 @@ find_return_bb (void)\n       /* For -fsanitize=thread, allow also TSAN_FUNC_EXIT () in the return\n \t bb.  */\n       else if ((flag_sanitize & SANITIZE_THREAD)\n-\t       && is_gimple_call (stmt)\n-\t       && gimple_call_internal_p (stmt)\n-\t       && gimple_call_internal_fn (stmt) == IFN_TSAN_FUNC_EXIT)\n+\t       && gimple_call_internal_p (stmt, IFN_TSAN_FUNC_EXIT))\n \t;\n       else\n \tbreak;\n@@ -1840,9 +1838,7 @@ execute_split_functions (void)\n \t    }\n \n \t  if ((flag_sanitize & SANITIZE_THREAD)\n-\t      && is_gimple_call (stmt)\n-\t      && gimple_call_internal_p (stmt)\n-\t      && gimple_call_internal_fn (stmt) == IFN_TSAN_FUNC_EXIT)\n+\t      && gimple_call_internal_p (stmt, IFN_TSAN_FUNC_EXIT))\n \t    {\n \t      /* We handle TSAN_FUNC_EXIT for splitting either in the\n \t\t return_bb, or in its immediate predecessors.  */"}, {"sha": "422f2b20c3701cf1e16246fe7ea199874e6da07a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -19047,9 +19047,7 @@ dump_oacc_loop_part (FILE *file, gcall *from, int depth,\n     {\n       gimple *stmt = gsi_stmt (gsi);\n \n-      if (is_gimple_call (stmt)\n-\t  && gimple_call_internal_p (stmt)\n-\t  && gimple_call_internal_fn (stmt) == IFN_UNIQUE)\n+      if (gimple_call_internal_p (stmt, IFN_UNIQUE))\n \t{\n \t  enum ifn_unique_kind k\n \t    = ((enum ifn_unique_kind) TREE_INT_CST_LOW\n@@ -19271,10 +19269,8 @@ oacc_loop_xform_head_tail (gcall *from, int level)\n   for (gimple_stmt_iterator gsi = gsi_for_stmt (from);;)\n     {\n       gimple *stmt = gsi_stmt (gsi);\n-      \n-      if (is_gimple_call (stmt)\n-\t  && gimple_call_internal_p (stmt)\n-\t  && gimple_call_internal_fn (stmt) == IFN_UNIQUE)\n+\n+      if (gimple_call_internal_p (stmt, IFN_UNIQUE))\n \t{\n \t  enum ifn_unique_kind k\n \t    = ((enum ifn_unique_kind)\n@@ -19285,9 +19281,7 @@ oacc_loop_xform_head_tail (gcall *from, int level)\n \t  else if (k == kind && stmt != from)\n \t    break;\n \t}\n-      else if (is_gimple_call (stmt)\n-\t       && gimple_call_internal_p (stmt)\n-\t       && gimple_call_internal_fn (stmt) == IFN_GOACC_REDUCTION)\n+      else if (gimple_call_internal_p (stmt, IFN_GOACC_REDUCTION))\n \t*gimple_call_arg_ptr (stmt, 3) = replacement;\n \n       gsi_next (&gsi);"}, {"sha": "463fd0b610e5f9b0d750939a6398ee551777c461", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -2024,9 +2024,7 @@ predict_loops (void)\n \t\t   && gimple_expr_code (call_stmt) == NOP_EXPR\n \t\t   && TREE_CODE (gimple_assign_rhs1 (call_stmt)) == SSA_NAME)\n \t\t call_stmt = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (call_stmt));\n-\t       if (gimple_code (call_stmt) == GIMPLE_CALL\n-\t\t   && gimple_call_internal_p (call_stmt)\n-\t\t   && gimple_call_internal_fn (call_stmt) == IFN_BUILTIN_EXPECT\n+\t       if (gimple_call_internal_p (call_stmt, IFN_BUILTIN_EXPECT)\n \t\t   && TREE_CODE (gimple_call_arg (call_stmt, 2)) == INTEGER_CST\n \t\t   && tree_fits_uhwi_p (gimple_call_arg (call_stmt, 2))\n \t\t   && tree_to_uhwi (gimple_call_arg (call_stmt, 2))"}, {"sha": "27c43da539f92ac59a7abc1d011f00bab3109356", "filename": "gcc/sanopt.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fsanopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Fsanopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanopt.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -686,8 +686,7 @@ pass_sanopt::execute (function *fun)\n \tfor (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n \t  {\n \t    gimple *stmt = gsi_stmt (gsi);\n-\t    if (is_gimple_call (stmt) && gimple_call_internal_p (stmt)\n-\t\t&& gimple_call_internal_fn (stmt) == IFN_ASAN_CHECK)\n+\t    if (gimple_call_internal_p (stmt, IFN_ASAN_CHECK))\n \t      ++asan_num_accesses;\n \t  }\n     }"}, {"sha": "2ed450c4cabdf7f9bb2d9902b78fecd22160d628", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -621,10 +621,7 @@ get_abnormal_succ_dispatcher (basic_block bb)\n \tgimple_stmt_iterator gsi\n \t  = gsi_start_nondebug_after_labels_bb (e->dest);\n \tgimple *g = gsi_stmt (gsi);\n-\tif (g\n-\t    && is_gimple_call (g)\n-\t    && gimple_call_internal_p (g)\n-\t    && gimple_call_internal_fn (g) == IFN_ABNORMAL_DISPATCHER)\n+\tif (g && gimple_call_internal_p (g, IFN_ABNORMAL_DISPATCHER))\n \t  return e->dest;\n       }\n   return NULL;"}, {"sha": "4779441b0cff33f235be5508e9d30123f4704a8a", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -2990,9 +2990,7 @@ oacc_entry_exit_ok_1 (bitmap in_loop_bbs, vec<basic_block> region_bbs,\n \t\t   && !gimple_vdef (stmt)\n \t\t   && !gimple_vuse (stmt))\n \t    continue;\n-\t  else if (is_gimple_call (stmt)\n-\t\t   && gimple_call_internal_p (stmt)\n-\t\t   && gimple_call_internal_fn (stmt) == IFN_GOACC_DIM_POS)\n+\t  else if (gimple_call_internal_p (stmt, IFN_GOACC_DIM_POS))\n \t    continue;\n \t  else if (gimple_code (stmt) == GIMPLE_RETURN)\n \t    continue;"}, {"sha": "0c5e430920604b962dcf7cb40fac14ced8ad4717", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -991,16 +991,6 @@ optimize_va_list_gpr_fpr_size (function *fun)\n     }\n }\n \n-/* Return true if STMT is IFN_VA_ARG.  */\n-\n-static bool\n-gimple_call_ifn_va_arg_p (gimple *stmt)\n-{\n-  return (is_gimple_call (stmt)\n-\t  && gimple_call_internal_p (stmt)\n-\t  && gimple_call_internal_fn (stmt) == IFN_VA_ARG);\n-}\n-\n /* Expand IFN_VA_ARGs in FUN.  */\n \n static void\n@@ -1018,7 +1008,7 @@ expand_ifn_va_arg_1 (function *fun)\n \ttree ap, aptype, expr, lhs, type;\n \tgimple_seq pre = NULL, post = NULL;\n \n-\tif (!gimple_call_ifn_va_arg_p (stmt))\n+\tif (!gimple_call_internal_p (stmt, IFN_VA_ARG))\n \t  continue;\n \n \tmodified = true;\n@@ -1116,7 +1106,7 @@ expand_ifn_va_arg (function *fun)\n       gimple_stmt_iterator i;\n       FOR_EACH_BB_FN (bb, fun)\n \tfor (i = gsi_start_bb (bb); !gsi_end_p (i); gsi_next (&i))\n-\t  gcc_assert (!gimple_call_ifn_va_arg_p (gsi_stmt (i)));\n+\t  gcc_assert (!gimple_call_internal_p (gsi_stmt (i), IFN_VA_ARG));\n     }\n }\n "}, {"sha": "a84ca3f2f348aa76207e8bb08a83915dbd9f496d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -424,9 +424,7 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t  else\n \t    {\n \t      gcc_assert (!STMT_VINFO_DATA_REF (stmt_info));\n-\t      if (is_gimple_call (stmt)\n-\t\t  && gimple_call_internal_p (stmt)\n-\t\t  && gimple_call_internal_fn (stmt) == IFN_MASK_STORE)\n+\t      if (gimple_call_internal_p (stmt, IFN_MASK_STORE))\n \t\tscalar_type = TREE_TYPE (gimple_call_arg (stmt, 3));\n \t      else\n \t\tscalar_type = TREE_TYPE (gimple_get_lhs (stmt));\n@@ -7180,9 +7178,7 @@ optimize_mask_stores (struct loop *loop)\n \t   gsi_next (&gsi))\n \t{\n \t  stmt = gsi_stmt (gsi);\n-\t  if (is_gimple_call (stmt)\n-\t      && gimple_call_internal_p (stmt)\n-\t      && gimple_call_internal_fn (stmt) == IFN_MASK_STORE)\n+\t  if (gimple_call_internal_p (stmt, IFN_MASK_STORE))\n \t    worklist.safe_push (stmt);\n \t}\n     }"}, {"sha": "47770adcdc0d8218ad5a5084b70da73d9253c2b3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -3003,9 +3003,7 @@ vect_simd_lane_linear (tree op, struct loop *loop,\n \t  default:\n \t    return;\n \t  }\n-      else if (is_gimple_call (def_stmt)\n-\t       && gimple_call_internal_p (def_stmt)\n-\t       && gimple_call_internal_fn (def_stmt) == IFN_GOMP_SIMD_LANE\n+      else if (gimple_call_internal_p (def_stmt, IFN_GOMP_SIMD_LANE)\n \t       && loop->simduid\n \t       && TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME\n \t       && (SSA_NAME_VAR (gimple_call_arg (def_stmt, 0))\n@@ -8446,9 +8444,7 @@ vect_transform_stmt (gimple *stmt, gimple_stmt_iterator *gsi,\n     case call_vec_info_type:\n       done = vectorizable_call (stmt, gsi, &vec_stmt, slp_node);\n       stmt = gsi_stmt (*gsi);\n-      if (is_gimple_call (stmt)\n-\t  && gimple_call_internal_p (stmt)\n-\t  && gimple_call_internal_fn (stmt) == IFN_MASK_STORE)\n+      if (gimple_call_internal_p (stmt, IFN_MASK_STORE))\n \tis_store = true;\n       break;\n "}, {"sha": "22e587afb4c6b5c11bf2e5c0994d2ada618f9ea9", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -436,9 +436,7 @@ vect_loop_vectorized_call (struct loop *loop)\n       if (!gsi_end_p (gsi))\n \t{\n \t  g = gsi_stmt (gsi);\n-\t  if (is_gimple_call (g)\n-\t      && gimple_call_internal_p (g)\n-\t      && gimple_call_internal_fn (g) == IFN_LOOP_VECTORIZED\n+\t  if (gimple_call_internal_p (g, IFN_LOOP_VECTORIZED)\n \t      && (tree_to_shwi (gimple_call_arg (g, 0)) == loop->num\n \t\t  || tree_to_shwi (gimple_call_arg (g, 1)) == loop->num))\n \t    return g;"}, {"sha": "91dbd41a0b49ddf9bea65bddd8738906b1760f97", "filename": "gcc/tsan.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e4284d0b24bd3c745c054054d673ed306d30467/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=8e4284d0b24bd3c745c054054d673ed306d30467", "patch": "@@ -779,9 +779,7 @@ instrument_memory_accesses (void)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n       {\n \tgimple *stmt = gsi_stmt (gsi);\n-\tif (is_gimple_call (stmt)\n-\t    && gimple_call_internal_p (stmt)\n-\t    && gimple_call_internal_fn (stmt) == IFN_TSAN_FUNC_EXIT)\n+\tif (gimple_call_internal_p (stmt, IFN_TSAN_FUNC_EXIT))\n \t  {\n \t    if (fentry_exit_instrument)\n \t      replace_func_exit (stmt);"}]}