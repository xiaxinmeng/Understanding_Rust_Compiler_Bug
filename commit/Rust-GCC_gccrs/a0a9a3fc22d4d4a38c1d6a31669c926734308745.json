{"sha": "a0a9a3fc22d4d4a38c1d6a31669c926734308745", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhOWEzZmMyMmQ0ZDRhMzhjMWQ2YTMxNjY5YzkyNjczNDMwODc0NQ==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-10-15T12:24:53Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-10-15T12:24:53Z"}, "message": "msp430.md (zero_extendqipsi2): New.\n\n2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* config/msp430/msp430.md (zero_extendqipsi2): New.\n\t(zero_extendqisi2): Optimize case where src register and base dst\n\tregister are the same.\n\t(zero_extendhipsi2): Don't use 430X insn for rYs->r case.\n\t(zero_extendpsisi2): Optimize r->m case.\n\tAdd unnamed insn patterns to catch insns combine searches for when\n\toptimizing pointer manipulation.\n\nFrom-SVN: r276997", "tree": {"sha": "ffca4c449ba5675f445e65a7c0b30ce1586a2511", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffca4c449ba5675f445e65a7c0b30ce1586a2511"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0a9a3fc22d4d4a38c1d6a31669c926734308745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a9a3fc22d4d4a38c1d6a31669c926734308745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0a9a3fc22d4d4a38c1d6a31669c926734308745", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0a9a3fc22d4d4a38c1d6a31669c926734308745/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "582b4055ca4dc4260ab1092c6b39b3e792362c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582b4055ca4dc4260ab1092c6b39b3e792362c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582b4055ca4dc4260ab1092c6b39b3e792362c23"}], "stats": {"total": 136, "additions": 118, "deletions": 18}, "files": [{"sha": "ba6121f8ca6c0bf4934d1fefb8174e8778b82a03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a9a3fc22d4d4a38c1d6a31669c926734308745/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a9a3fc22d4d4a38c1d6a31669c926734308745/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0a9a3fc22d4d4a38c1d6a31669c926734308745", "patch": "@@ -1,3 +1,13 @@\n+2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/msp430/msp430.md (zero_extendqipsi2): New.\n+\t(zero_extendqisi2): Optimize case where src register and base dst\n+\tregister are the same.\n+\t(zero_extendhipsi2): Don't use 430X insn for rYs->r case.\n+\t(zero_extendpsisi2): Optimize r->m case.\n+\tAdd unnamed insn patterns to catch insns combine searches for when\n+\toptimizing pointer manipulation.\n+\n 2019-10-15  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* config/msp430/msp430.md: Group zero_extend* insns together."}, {"sha": "da4abe94031b913057954e9ef794b4dc50a6dc52", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 108, "deletions": 18, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0a9a3fc22d4d4a38c1d6a31669c926734308745/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0a9a3fc22d4d4a38c1d6a31669c926734308745/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=a0a9a3fc22d4d4a38c1d6a31669c926734308745", "patch": "@@ -553,6 +553,16 @@\n    SXT%X0\\t%0\"\n )\n \n+;; ------------------------\n+;; ZERO EXTEND INSTRUCTIONS\n+;; Byte-writes to registers clear bits 19:8\n+;;   * Byte-writes to memory do not affect bits 15:8\n+;; Word-writes to registers clear bits 19:16\n+;; PSImode writes to memory clear bits 15:4 of the second memory word\n+;; We define all possible insns since that results in better code than if\n+;; they are inferred.\n+;; ------------------------\n+\n (define_insn \"zero_extendqihi2\"\n   [(set (match_operand:HI\t\t  0 \"msp430_general_dst_operand\" \"=rYs,r,r,m\")\n \t(zero_extend:HI (match_operand:QI 1 \"msp430_general_operand\" \"0,rYs,m,0\")))]\n@@ -564,19 +574,31 @@\n    AND%X0\\t#0xff, %0\"\n )\n \n+(define_insn \"zero_extendqipsi2\"\n+  [(set (match_operand:PSI\t\t   0 \"register_operand\" \"=r,r\")\n+\t(zero_extend:PSI (match_operand:QI 1 \"general_operand\" \"rYs,m\")))]\n+  \"msp430x\"\n+  \"@\n+   MOV.B\\t%1, %0\n+   MOV%X1.B\\t%1, %0\"\n+)\n+\n (define_insn \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=r\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"rm\")))]\n+  [(set (match_operand:SI 0 \"msp430_general_dst_nonv_operand\" \"=r,r\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"0,rm\")))]\n   \"\"\n-  \"MOV%X1.B\\t%1,%L0 { CLR\\t%H0\"\n+  \"@\n+  CLR\\t%H0\n+  MOV%X1.B\\t%1,%L0 { CLR\\t%H0\"\n )\n \n (define_insn \"zero_extendhipsi2\"\n-  [(set (match_operand:PSI\t\t   0 \"msp430_general_dst_operand\" \"=r,m\")\n-\t(zero_extend:PSI (match_operand:HI 1 \"msp430_general_operand\" \"rm,r\")))]\n-  \"\"\n+  [(set (match_operand:PSI\t\t   0 \"msp430_general_dst_operand\" \"=r,r,m\")\n+\t(zero_extend:PSI (match_operand:HI 1 \"msp430_general_operand\"     \"rYs,m,r\")))]\n+  \"msp430x\"\n   \"@\n-  MOVX\\t%1, %0\n+  MOV.W\\t%1, %0\n+  MOV%X1\\t%1, %0\n   MOVX.A\\t%1, %0\"\n )\n \n@@ -616,22 +638,90 @@\n ; the pair is unused and so it can clobber it.  Try compiling 20050826-2.c\n ; at -O2 to see this.\n \n+; FIXME we can use MOVA for r->m if m is &abs20 or z16(rdst)\n (define_insn \"zero_extendpsisi2\"\n-  [(set (match_operand:SI                  0 \"register_operand\" \"+r\")\n-\t(zero_extend:SI (match_operand:PSI 1 \"register_operand\" \"r\")))]\n+  [(set (match_operand:SI\t\t   0 \"register_operand\" \"+r,m\")\n+\t(zero_extend:SI (match_operand:PSI 1 \"register_operand\" \"r,r\")))]\n   \"\"\n-  \"*\n-    if (REGNO (operands[1]) == SP_REGNO)\n-      /* If the source register is the stack pointer, the value\n-         stored in the stack slot will be the value *after* the\n-\t stack pointer has been decremented.  So allow for that\n-\t here.  */\n-      return \\\"PUSHM.A\\t#1, %1 { ADDX.W\\t#4, @r1 { POPX.W\\t%L0 { POPX.W\\t%H0 ; get stack pointer into %L0:%H0\\\";\n-    else\n+  \"@\n+  * if (REGNO (operands[1]) == SP_REGNO) \\\n+      /* If the source register is the stack pointer, the value \\\n+\t stored in the stack slot will be the value *after* the \\\n+\t stack pointer has been decremented.  So allow for that \\\n+\t here.  */ \\\n+      return \\\"PUSHM.A\\t#1, %1 { ADDX.W\\t#4, @r1 { POPX.W\\t%L0 { POPX.W\\t%H0 ; get stack pointer into %L0:%H0\\\"; \\\n+    else \\\n       return \\\"PUSHM.A\\t#1, %1 { POPX.W\\t%L0 { POPX.W\\t%H0 ; move pointer in %1 into reg-pair %L0:%H0\\\";\n-  \"\n+  MOVX.A %1, %0\"\n+)\n+\n+;; Below are unnamed insn patterns to catch pointer manipulation insns\n+;; generated by combine.\n+;; We get large code size bloat when a PSImode pointer is stored in\n+;; memory, so we try to avoid that where possible and keep point manipulation\n+;; between registers.\n+; FIXME many of these should be unnnecessary once combine deals with\n+; (sign_extend (zero_extend)) or (sign_extend (subreg)) BZ 91865.\n+\n+;; This is just another way of writing movqipsi/zero_extendqipsi\n+(define_insn \"\"\n+  [(set (match_operand:PSI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:PSI (subreg:HI (match_operand:QI 1 \"general_operand\" \"rm\") 0)))]\n+  \"msp430x\"\n+  \"MOV%X1.B\\t%1, %0\"\n )\n \n+(define_insn \"\"\n+  [(set (match_operand:PSI\t\t\t\t   0 \"register_operand\" \"=r,r\")\n+\t(sign_extend:PSI (zero_extend:HI (match_operand:QI 1 \"general_operand\" \"rYs,m\"))))]\n+  \"msp430x\"\n+  \"@\n+   MOV.B\\t%1, %0\n+   MOV%X1.B\\t%1, %0\"\n+)\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI (zero_extend:SI (match_operand:QI 1 \"general_operand\" \"rm\"))\n+\t\t   (match_operand:HI 2 \"immediate_operand\" \"M\")))]\n+  \"msp430x\"\n+  \"MOV%X1.B %1, %L0 { RLAM.W %2, %L0 { CLR %H0\"\n+)\n+\n+;; We are taking a char and shifting it and putting the result in 2 registers.\n+;; the high register will always be for 0 shift counts < 8.\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI (zero_extend:SI (subreg:HI (match_operand:QI 1 \"general_operand\" \"rm\") 0))\n+\t\t   (match_operand:HI 2 \"immediate_operand\" \"M\")))]\n+  \"msp430x\"\n+  \"MOV%X1.B %1, %L0 { RLAM.W %2, %L0 { CLR %H0\"\n+)\n+\n+;; Same as above but with a NOP sign_extend round the subreg\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI (zero_extend:SI (sign_extend:PSI (subreg:HI (match_operand:QI 1 \"general_operand\" \"rm\") 0)))\n+\t\t   (match_operand:HI 2 \"immediate_operand\" \"M\")))]\n+  \"msp430x\"\n+  \"MOV%X1.B %1, %L0 { RLAM.W %2, %L0 { CLR %H0\"\n+)\n+\n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:SI (sign_extend:PSI (subreg:HI (match_operand:QI 1 \"general_operand\" \"rm\") 0))))]\n+  \"msp430x\"\n+  \"MOV%X1.B %1, %L0 { CLR %H0\"\n+)\n+\n+(define_insn \"\"\n+  [(set (match_operand:PSI 0 \"register_operand\" \"=r\")\n+\t(ashift:PSI (sign_extend:PSI (subreg:HI (match_operand:QI 1 \"general_operand\" \"rm\") 0))\n+\t\t    (match_operand:HI 2 \"immediate_operand\" \"M\")))]\n+  \"msp430x\"\n+  \"MOV%X1.B %1, %0 { RLAM.W %2, %0\"\n+)\n+;; END msp430 pointer manipulation combine insn patterns\n \n ;; Eliminate extraneous zero-extends mysteriously created by gcc.\n (define_peephole2"}]}