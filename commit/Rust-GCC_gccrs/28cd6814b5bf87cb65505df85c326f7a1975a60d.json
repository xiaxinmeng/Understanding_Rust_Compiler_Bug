{"sha": "28cd6814b5bf87cb65505df85c326f7a1975a60d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhjZDY4MTRiNWJmODdjYjY1NTA1ZGY4NWMzMjZmN2ExOTc1YTYwZA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2016-06-09T11:26:32Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2016-06-09T11:26:32Z"}, "message": "Introduce filtering for edge_predictions.\n\n\t* predict.c (filter_predictions): New function.\n\t(remove_predictions_associated_with_edge): Use the filter\n\tfunction.\n\t(equal_edge_p): New function.\n\nFrom-SVN: r237253", "tree": {"sha": "7133cef2e1c0ff75c2d83d40121ac1869377f5f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7133cef2e1c0ff75c2d83d40121ac1869377f5f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28cd6814b5bf87cb65505df85c326f7a1975a60d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cd6814b5bf87cb65505df85c326f7a1975a60d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28cd6814b5bf87cb65505df85c326f7a1975a60d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28cd6814b5bf87cb65505df85c326f7a1975a60d/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d82e8e465d2466e0aab64bbaf442bfc79cb891e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d82e8e465d2466e0aab64bbaf442bfc79cb891e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d82e8e465d2466e0aab64bbaf442bfc79cb891e"}], "stats": {"total": 44, "additions": 36, "deletions": 8}, "files": [{"sha": "3484047c15c496d636666c6c6f8849842cbfc11d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cd6814b5bf87cb65505df85c326f7a1975a60d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cd6814b5bf87cb65505df85c326f7a1975a60d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28cd6814b5bf87cb65505df85c326f7a1975a60d", "patch": "@@ -1,3 +1,10 @@\n+2016-06-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* predict.c (filter_predictions): New function.\n+\t(remove_predictions_associated_with_edge): Use the filter\n+\tfunction.\n+\t(equal_edge_p): New function.\n+\n 2016-06-09  Stefan Bruens  <stefan.bruens@rwth-aachen.de>\n \n \t* doc/invoke.texi (ARM Options): Use lexicographical ordering."}, {"sha": "f00428fb8ae8fd33a808556129eb78dad2f67486", "filename": "gcc/predict.c", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28cd6814b5bf87cb65505df85c326f7a1975a60d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28cd6814b5bf87cb65505df85c326f7a1975a60d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=28cd6814b5bf87cb65505df85c326f7a1975a60d", "patch": "@@ -609,35 +609,56 @@ gimple_predict_edge (edge e, enum br_predictor predictor, int probability)\n     }\n }\n \n-/* Remove all predictions on given basic block that are attached\n-   to edge E.  */\n+/* Filter edge predictions PREDS by a function FILTER.  DATA are passed\n+   to the filter function.  */\n+\n void\n-remove_predictions_associated_with_edge (edge e)\n+filter_predictions (edge_prediction **preds,\n+\t\t    bool (*filter) (edge_prediction *, void *), void *data)\n {\n   if (!bb_predictions)\n     return;\n \n-  edge_prediction **preds = bb_predictions->get (e->src);\n-\n   if (preds)\n     {\n       struct edge_prediction **prediction = preds;\n       struct edge_prediction *next;\n \n       while (*prediction)\n \t{\n-\t  if ((*prediction)->ep_edge == e)\n+\t  if ((*filter) (*prediction, data))\n+\t    prediction = &((*prediction)->ep_next);\n+\t  else\n \t    {\n \t      next = (*prediction)->ep_next;\n \t      free (*prediction);\n \t      *prediction = next;\n \t    }\n-\t  else\n-\t    prediction = &((*prediction)->ep_next);\n \t}\n     }\n }\n \n+/* Filter function predicate that returns true for a edge predicate P\n+   if its edge is equal to DATA.  */\n+\n+bool\n+equal_edge_p (edge_prediction *p, void *data)\n+{\n+  return p->ep_edge == (edge)data;\n+}\n+\n+/* Remove all predictions on given basic block that are attached\n+   to edge E.  */\n+void\n+remove_predictions_associated_with_edge (edge e)\n+{\n+  if (!bb_predictions)\n+    return;\n+\n+  edge_prediction **preds = bb_predictions->get (e->src);\n+  filter_predictions (preds, equal_edge_p, e);\n+}\n+\n /* Clears the list of predictions stored for BB.  */\n \n static void"}]}