{"sha": "167c7bfa499967104ff514075c581a58d4ac240b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY3YzdiZmE0OTk5NjcxMDRmZjUxNDA3NWM1ODFhNThkNGFjMjQwYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-27T14:54:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-27T14:54:03Z"}, "message": "re PR tree-optimization/69166 (ICE in get_initial_def_for_reduction, at tree-vect-loop.c:4188)\n\n2016-01-27  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/69166\n\t* tree-vect-loop.c (vect_is_simple_reduction): Always check\n\treduction code for commutativity / associativity.\n\n\t* gcc.dg/torture/pr69166.c: New testcase.\n\nFrom-SVN: r232878", "tree": {"sha": "09ba81f79679354fa63f7baab396d5491db9948a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/09ba81f79679354fa63f7baab396d5491db9948a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/167c7bfa499967104ff514075c581a58d4ac240b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167c7bfa499967104ff514075c581a58d4ac240b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/167c7bfa499967104ff514075c581a58d4ac240b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/167c7bfa499967104ff514075c581a58d4ac240b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1430fb1f563dd7434b262d1b1378d9954d13dc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1430fb1f563dd7434b262d1b1378d9954d13dc0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1430fb1f563dd7434b262d1b1378d9954d13dc0c"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "9f8869b6f6dec382bd42d47ad15a4bd3a1ea46fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=167c7bfa499967104ff514075c581a58d4ac240b", "patch": "@@ -1,3 +1,9 @@\n+2016-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69166\n+\t* tree-vect-loop.c (vect_is_simple_reduction): Always check\n+\treduction code for commutativity / associativity.\n+\n 2016-01-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/69355"}, {"sha": "8c7f4ddb3716ad26b46d4c97c62da3d81b56c77b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=167c7bfa499967104ff514075c581a58d4ac240b", "patch": "@@ -1,3 +1,8 @@\n+2016-01-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/69166\n+\t* gcc.dg/torture/pr69166.c: New testcase.\n+\n 2016-01-27  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/69355"}, {"sha": "c10f8e65357e691ad7d3d7a6553173eee48ff392", "filename": "gcc/testsuite/gcc.dg/torture/pr69166.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69166.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69166.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69166.c?ref=167c7bfa499967104ff514075c581a58d4ac240b", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+\n+void fn2(double *e, double a)\n+{\n+  int b = 0;\n+  for (; b < 256; b++)\n+    {\n+      int c = 0;\n+      double x = e[b];\n+      for (; c < 256; ++c)\n+\tx /= a;\n+      e[b] = x;\n+    }\n+}"}, {"sha": "b8303ad41393c4cbb192617ce853451ba15ab3a3", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/167c7bfa499967104ff514075c581a58d4ac240b/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=167c7bfa499967104ff514075c581a58d4ac240b", "patch": "@@ -2750,17 +2750,17 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n       && SSA_NAME_DEF_STMT (op1) == phi)\n     code = PLUS_EXPR;\n \n-  if (check_reduction)\n+  if (code == COND_EXPR)\n     {\n-      if (code == COND_EXPR)\n+      if (check_reduction)\n \t*v_reduc_type = COND_REDUCTION;\n-      else if (!commutative_tree_code (code) || !associative_tree_code (code))\n-\t{\n-\t  if (dump_enabled_p ())\n-\t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n-\t\t\t    \"reduction: not commutative/associative: \");\n-\t  return NULL;\n-\t}\n+    }\n+  else if (!commutative_tree_code (code) || !associative_tree_code (code))\n+    {\n+      if (dump_enabled_p ())\n+\treport_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n+\t\t\t\"reduction: not commutative/associative: \");\n+      return NULL;\n     }\n \n   if (get_gimple_rhs_class (code) != GIMPLE_BINARY_RHS)\n@@ -2856,19 +2856,19 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n      and therefore vectorizing reductions in the inner-loop during\n      outer-loop vectorization is safe.  */\n \n-  if (*v_reduc_type != COND_REDUCTION)\n+  if (*v_reduc_type != COND_REDUCTION\n+      && check_reduction)\n     {\n       /* CHECKME: check for !flag_finite_math_only too?  */\n-      if (SCALAR_FLOAT_TYPE_P (type) && !flag_associative_math\n-\t  && check_reduction)\n+      if (SCALAR_FLOAT_TYPE_P (type) && !flag_associative_math)\n \t{\n \t  /* Changing the order of operations changes the semantics.  */\n \t  if (dump_enabled_p ())\n \t    report_vect_op (MSG_MISSED_OPTIMIZATION, def_stmt,\n \t\t\t\"reduction: unsafe fp math optimization: \");\n \t  return NULL;\n \t}\n-      else if (INTEGRAL_TYPE_P (type) && check_reduction)\n+      else if (INTEGRAL_TYPE_P (type))\n \t{\n \t  if (!operation_no_trapping_overflow (type, code))\n \t    {\n@@ -2891,7 +2891,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, gimple *phi,\n \t      return NULL;\n \t    }\n \t}\n-      else if (SAT_FIXED_POINT_TYPE_P (type) && check_reduction)\n+      else if (SAT_FIXED_POINT_TYPE_P (type))\n \t{\n \t  /* Changing the order of operations changes the semantics.  */\n \t  if (dump_enabled_p ())"}]}