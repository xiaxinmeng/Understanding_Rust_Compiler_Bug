{"sha": "e65f50ec35d3a47891a5dc5ddc06db239139e399", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1ZjUwZWMzNWQzYTQ3ODkxYTVkYzVkZGMwNmRiMjM5MTM5ZTM5OQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2007-09-26T10:46:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-09-26T10:46:30Z"}, "message": "sem_res.adb (Resolve_Call): If the call is dispatching...\n\n2007-09-26  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): If the call is dispatching, generate the\n\tproper kind of reference to the primitive operation, for better source\n\tnavigation.\n\t(Valid_Conversion): A tagged conversion is legal if both operands are\n\ttagged.\n\nFrom-SVN: r128804", "tree": {"sha": "97a79bd6bb6cad8661a9120449347928b062d246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a79bd6bb6cad8661a9120449347928b062d246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65f50ec35d3a47891a5dc5ddc06db239139e399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65f50ec35d3a47891a5dc5ddc06db239139e399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65f50ec35d3a47891a5dc5ddc06db239139e399", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65f50ec35d3a47891a5dc5ddc06db239139e399/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45c8b94ba4eb9acfa5c245c14d7c2b7554477434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45c8b94ba4eb9acfa5c245c14d7c2b7554477434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45c8b94ba4eb9acfa5c245c14d7c2b7554477434"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "718fb242e083b110191128312aaa121a83c75f29", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65f50ec35d3a47891a5dc5ddc06db239139e399/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65f50ec35d3a47891a5dc5ddc06db239139e399/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=e65f50ec35d3a47891a5dc5ddc06db239139e399", "patch": "@@ -2843,6 +2843,8 @@ package body Sem_Res is\n             return;\n          end if;\n \n+         --  Case where actual is present\n+\n          if Present (A)\n            and then (Nkind (Parent (A)) /= N_Parameter_Association\n                        or else\n@@ -4331,7 +4333,6 @@ package body Sem_Res is\n       elsif not (Is_Type (Entity (Subp))) then\n          Nam := Entity (Subp);\n          Set_Entity_With_Style_Check (Subp, Nam);\n-         Generate_Reference (Nam, Subp);\n \n       --  Otherwise we must have the case of an overloaded call\n \n@@ -4344,7 +4345,6 @@ package body Sem_Res is\n             if Covers (Typ, It.Typ) then\n                Nam := It.Nam;\n                Set_Entity_With_Style_Check (Subp, Nam);\n-               Generate_Reference (Nam, Subp);\n                exit;\n             end if;\n \n@@ -4378,7 +4378,7 @@ package body Sem_Res is\n                     Make_Raise_Program_Error (Loc,\n                       Reason => PE_Current_Task_In_Entry_Body));\n                   Set_Etype (N, Rtype);\n-                  exit;\n+                  return;\n                end if;\n             end loop;\n          end;\n@@ -4744,6 +4744,7 @@ package body Sem_Res is\n \n          --  Avoid validation, since it is a static function call\n \n+         Generate_Reference (Nam, Subp);\n          return;\n       end if;\n \n@@ -4788,6 +4789,17 @@ package body Sem_Res is\n          Error_Msg_NE (\"cannot call abstract subprogram &!\", N, Nam);\n       end if;\n \n+      --  If this is a dispatching call, generate the appropriate reference,\n+      --  for better source navigation in GPS.\n+\n+      if Is_Overloadable (Nam)\n+        and then Present (Controlling_Argument (N))\n+      then\n+         Generate_Reference (Nam, Subp, 'R');\n+      else\n+         Generate_Reference (Nam, Subp);\n+      end if;\n+\n       if Is_Intrinsic_Subprogram (Nam) then\n          Check_Intrinsic_Call (N);\n       end if;\n@@ -8677,7 +8689,8 @@ package body Sem_Res is\n             return Valid_Array_Conversion;\n          end if;\n \n-      --  Anonymous access types where target references an interface\n+      --  Ada 2005 (AI-251): Anonymous access types where target references an\n+      --  interface type.\n \n       elsif (Ekind (Target_Type) = E_General_Access_Type\n               or else\n@@ -9020,9 +9033,11 @@ package body Sem_Res is\n               N);\n          return True;\n \n-      --  Tagged types\n+      --  If both are tagged types, check legality of view conversions\n \n-      elsif Is_Tagged_Type (Target_Type) then\n+      elsif Is_Tagged_Type (Target_Type)\n+        and then Is_Tagged_Type (Opnd_Type)\n+      then\n          return Valid_Tagged_Conversion (Target_Type, Opnd_Type);\n \n       --  Types derived from the same root type are convertible"}]}