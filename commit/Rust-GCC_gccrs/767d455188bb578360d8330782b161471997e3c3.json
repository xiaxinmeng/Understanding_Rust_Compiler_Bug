{"sha": "767d455188bb578360d8330782b161471997e3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3ZDQ1NTE4OGJiNTc4MzYwZDgzMzA3ODJiMTYxNDcxOTk3ZTNjMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-24T13:52:21Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-24T13:52:21Z"}, "message": "Switch conversion: support any ax + b transformation (PR tree-optimization/84436).\n\n2018-10-24  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/84436\n\t* tree-switch-conversion.c (switch_conversion::contains_same_values_p):\n\tRemove.\n\t(switch_conversion::contains_linear_function_p): New.\n\t(switch_conversion::build_one_array): Support linear\n\ttransformation on input.\n\t* tree-switch-conversion.h (struct switch_conversion): Add\n\tcontains_linear_function_p declaration.\n2018-10-24  Martin Liska  <mliska@suse.cz>\n\n\tPR tree-optimization/84436\n\t* gcc.dg/tree-ssa/pr84436-1.c: New test.\n\t* gcc.dg/tree-ssa/pr84436-2.c: New test.\n\t* gcc.dg/tree-ssa/pr84436-3.c: New test.\n\t* gcc.dg/tree-ssa/pr84436-4.c: New test.\n\t* gcc.dg/tree-ssa/pr84436-5.c: New test.\n\nFrom-SVN: r265463", "tree": {"sha": "7fa5d72f6fda68e83fd4cf40a560a0509e1ef498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fa5d72f6fda68e83fd4cf40a560a0509e1ef498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767d455188bb578360d8330782b161471997e3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767d455188bb578360d8330782b161471997e3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767d455188bb578360d8330782b161471997e3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767d455188bb578360d8330782b161471997e3c3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5d0cdc9c899a6046c01c1e9e3f19bb5ca08e67f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5d0cdc9c899a6046c01c1e9e3f19bb5ca08e67f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5d0cdc9c899a6046c01c1e9e3f19bb5ca08e67f"}], "stats": {"total": 320, "additions": 301, "deletions": 19}, "files": [{"sha": "5bb6a54134d4899a41251f8b766cb39adf7cc342", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -1,3 +1,14 @@\n+2018-10-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/84436\n+\t* tree-switch-conversion.c (switch_conversion::contains_same_values_p):\n+\tRemove.\n+\t(switch_conversion::contains_linear_function_p): New.\n+\t(switch_conversion::build_one_array): Support linear\n+\ttransformation on input.\n+\t* tree-switch-conversion.h (struct switch_conversion): Add\n+\tcontains_linear_function_p declaration.\n+\n 2018-10-24  Richard Biener  <rguenther@suse.de>\n \n \t* varasm.c (const_hash_1): Return hash of ADDR_EXPR"}, {"sha": "e1679013d088a026265316f63863764d4afa702d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -1,3 +1,12 @@\n+2018-10-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR tree-optimization/84436\n+\t* gcc.dg/tree-ssa/pr84436-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr84436-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr84436-3.c: New test.\n+\t* gcc.dg/tree-ssa/pr84436-4.c: New test.\n+\t* gcc.dg/tree-ssa/pr84436-5.c: New test.\n+\n 2018-10-24  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* gcc.target/s390/20181024-1.c: New test."}, {"sha": "a045b44c2b944c52d03f6c0ca31edbdb6a2a64b7", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-1.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/84436 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv -fdump-tree-optimized\" } */\n+/* { dg-do run } */\n+\n+int\n+__attribute__ ((noipa))\n+foo (int how)\n+{\n+  switch (how) {\n+    case 2: how = 205; break; /* how = 100 * index + 5 */\n+    case 3: how = 305; break;\n+    case 4: how = 405; break;\n+    case 5: how = 505; break;\n+    case 6: how = 605; break;\n+  }\n+  return how;\n+}\n+\n+int main()\n+{\n+  if (foo (2) != 205)\n+  __builtin_abort ();\n+\n+  if (foo (6) != 605)\n+  __builtin_abort ();\n+\n+  if (foo (123) != 123)\n+  __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"100 \\\\*\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-times \".* \\\\+ 5\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "c34027a08b9245eeb58cfb25f66b48be566c5108", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-2.c", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-2.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -0,0 +1,67 @@\n+/* PR tree-optimization/84436 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv -fdump-tree-optimized\" } */\n+\n+char\n+lowerit(char a)\n+{\n+  switch (a)\n+    {\n+    default:\n+      return a;\n+    case 'A':\n+      return 'a';\n+    case 'B':\n+      return 'b';\n+    case 'C':\n+      return 'c';\n+    case 'D':\n+      return 'd';\n+    case 'E':\n+      return 'e';\n+    case 'F':\n+      return 'f';\n+    case 'G':\n+      return 'g';\n+    case 'H':\n+      return 'h';\n+    case 'I':\n+      return 'i';\n+    case 'J':\n+      return 'j';\n+    case 'K':\n+      return 'k';\n+    case 'L':\n+      return 'l';\n+    case 'M':\n+      return 'm';\n+    case 'N':\n+      return 'n';\n+    case 'O':\n+      return 'o';\n+    case 'P':\n+      return 'p';\n+    case 'Q':\n+      return 'q';\n+    case 'R':\n+      return 'r';\n+    case 'S':\n+      return 's';\n+    case 'T':\n+      return 't';\n+    case 'U':\n+      return 'u';\n+    case 'V':\n+      return 'v';\n+    case 'W':\n+      return 'w';\n+    case 'X':\n+      return 'x';\n+    case 'Y':\n+      return 'y';\n+    case 'Z':\n+      return 'z';\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a_.*\\\\+ 32\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "87937f30ab1bdca31d6cf059edc2bdd2908f6962", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-3.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-3.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -0,0 +1,24 @@\n+/* PR tree-optimization/84436 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv -fdump-tree-optimized\" } */\n+\n+enum a { b, c, d };\n+int e;\n+void h(enum a);\n+\n+void f() {\n+  enum a g;\n+  switch (e) {\n+  case '1':\n+    g = b;\n+    break;\n+  case '2':\n+    g = c;\n+    break;\n+  case '3':\n+    g = d;\n+  }\n+  h(g);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \".* \\\\+ 4294967247\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "979250edd1c4324e08c520b2bf91965bed838561", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-4.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-4.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -0,0 +1,38 @@\n+/* PR tree-optimization/84436 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv -fdump-tree-optimized\" } */\n+/* { dg-do run } */\n+\n+enum E\n+{\n+  A, B, C,\n+};\n+\n+int\n+__attribute__ ((noipa))\n+foo(enum E e)\n+{\n+  switch (e)\n+    {\n+    case A: return 0;\n+    case B: return 1;\n+    case C: return 2;\n+    }\n+\n+  return -1;\n+}\n+\n+int main()\n+{\n+  if (foo (A) != 0)\n+  __builtin_abort ();\n+\n+  if (foo (B) != 1)\n+  __builtin_abort ();\n+\n+  if (foo (C) != 2)\n+  __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "3f9e2245e84d3e405d8a9b4486fe3ab27b4fd8db", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr84436-5.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr84436-5.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -0,0 +1,38 @@\n+/* PR tree-optimization/84436 */\n+/* { dg-options \"-O2 -fdump-tree-switchconv -fdump-tree-optimized\" } */\n+/* { dg-do run } */\n+\n+char\n+__attribute__ ((noipa))\n+foo (char how)\n+{\n+  switch (how) {\n+    case -4: how = 96; break;\n+    case -3: how = -120; break;\n+    case -2: how = -80; break;\n+    case -1: how = -40; break;\n+    case 0: how = 0; break;\n+    case 1: how = 40; break;\n+  }\n+  return how;\n+}\n+\n+int main()\n+{\n+  if (foo (-4) != 96)\n+  __builtin_abort ();\n+\n+  if (foo (-3) != -120)\n+  __builtin_abort ();\n+\n+  if (foo (0) != 0)\n+  __builtin_abort ();\n+\n+  if (foo (123) != 123)\n+  __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"40 *\\\\*\" 1 \"switchconv\" } } */\n+/* { dg-final { scan-tree-dump-not \"switch\" \"optimized\" } } */"}, {"sha": "e65552edea52d08ba9c9ecdd85d5209313df4915", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 72, "deletions": 15, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -44,6 +44,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n #include \"gimplify.h\"\n #include \"gimple-iterator.h\"\n #include \"gimplify-me.h\"\n+#include \"gimple-fold.h\"\n #include \"tree-cfg.h\"\n #include \"cfgloop.h\"\n #include \"alloc-pool.h\"\n@@ -439,25 +440,63 @@ switch_conversion::build_constructors ()\n     }\n }\n \n-/* If all values in the constructor vector are the same, return the value.\n-   Otherwise return NULL_TREE.  Not supposed to be called for empty\n-   vectors.  */\n+/* If all values in the constructor vector are products of a linear function\n+   a * x + b, then return true.  When true, COEFF_A and COEFF_B and\n+   coefficients of the linear function.  Note that equal values are special\n+   case of a linear function with a and b equal to zero.  */\n \n-tree\n-switch_conversion::contains_same_values_p (vec<constructor_elt, va_gc> *vec)\n+bool\n+switch_conversion::contains_linear_function_p (vec<constructor_elt, va_gc> *vec,\n+\t\t\t\t\t       wide_int *coeff_a,\n+\t\t\t\t\t       wide_int *coeff_b)\n {\n   unsigned int i;\n-  tree prev = NULL_TREE;\n   constructor_elt *elt;\n \n+  gcc_assert (vec->length () >= 2);\n+\n+  /* Let's try to find any linear function a * x + y that can apply to\n+     given values. 'a' can be calculated as follows:\n+\n+     a = (y2 - y1) / (x2 - x1) where x2 - x1 = 1 (consecutive case indices)\n+     a = y2 - y1\n+\n+     and\n+\n+     b = y2 - a * x2\n+\n+  */\n+\n+  tree elt0 = (*vec)[0].value;\n+  tree elt1 = (*vec)[1].value;\n+\n+  if (TREE_CODE (elt0) != INTEGER_CST || TREE_CODE (elt1) != INTEGER_CST)\n+    return false;\n+\n+  wide_int range_min = wi::to_wide (fold_convert (TREE_TYPE (elt0),\n+\t\t\t\t\t\t  m_range_min));\n+  wide_int y1 = wi::to_wide (elt0);\n+  wide_int y2 = wi::to_wide (elt1);\n+  wide_int a = y2 - y1;\n+  wide_int b = y2 - a * (range_min + 1);\n+\n+  /* Verify that all values fulfill the linear function.  */\n   FOR_EACH_VEC_SAFE_ELT (vec, i, elt)\n     {\n-      if (!prev)\n-\tprev = elt->value;\n-      else if (!operand_equal_p (elt->value, prev, OEP_ONLY_CONST))\n-\treturn NULL_TREE;\n+      if (TREE_CODE (elt->value) != INTEGER_CST)\n+\treturn false;\n+\n+      wide_int value = wi::to_wide (elt->value);\n+      if (a * range_min + b != value)\n+\treturn false;\n+\n+      ++range_min;\n     }\n-  return prev;\n+\n+  *coeff_a = a;\n+  *coeff_b = b;\n+\n+  return true;\n }\n \n /* Return type which should be used for array elements, either TYPE's\n@@ -551,7 +590,7 @@ void\n switch_conversion::build_one_array (int num, tree arr_index_type,\n \t\t\t\t    gphi *phi, tree tidx)\n {\n-  tree name, cst;\n+  tree name;\n   gimple *load;\n   gimple_stmt_iterator gsi = gsi_for_stmt (m_switch);\n   location_t loc = gimple_location (m_switch);\n@@ -561,9 +600,27 @@ switch_conversion::build_one_array (int num, tree arr_index_type,\n   name = copy_ssa_name (PHI_RESULT (phi));\n   m_target_inbound_names[num] = name;\n \n-  cst = contains_same_values_p (m_constructors[num]);\n-  if (cst)\n-    load = gimple_build_assign (name, cst);\n+  wide_int coeff_a, coeff_b;\n+  bool linear_p = contains_linear_function_p (m_constructors[num], &coeff_a,\n+\t\t\t\t\t      &coeff_b);\n+  if (linear_p)\n+    {\n+      if (dump_file && coeff_a.to_uhwi () > 0)\n+\tfprintf (dump_file, \"Linear transformation with A = %\" PRId64\n+\t\t \" and B = %\" PRId64 \"\\n\", coeff_a.to_shwi (),\n+\t\t coeff_b.to_shwi ());\n+\n+      tree t = unsigned_type_for (TREE_TYPE (m_index_expr));\n+      gimple_seq seq = NULL;\n+      tree tmp = gimple_convert (&seq, t, m_index_expr);\n+      tree tmp2 = gimple_build (&seq, MULT_EXPR, t,\n+\t\t\t\twide_int_to_tree (t, coeff_a), tmp);\n+      tree tmp3 = gimple_build (&seq, PLUS_EXPR, t, tmp2,\n+\t\t\t\twide_int_to_tree (t, coeff_b));\n+      tree tmp4 = gimple_convert (&seq, TREE_TYPE (name), tmp3);\n+      gsi_insert_seq_before (&gsi, seq, GSI_SAME_STMT);\n+      load = gimple_build_assign (name, tmp4);\n+    }\n   else\n     {\n       tree array_type, ctor, decl, value_type, fetch, default_type;"}, {"sha": "ceee75017d9a2f056a09d5418398627f7e6800c3", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767d455188bb578360d8330782b161471997e3c3/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=767d455188bb578360d8330782b161471997e3c3", "patch": "@@ -733,10 +733,12 @@ struct switch_conversion\n      order of phi nodes.  */\n   void build_constructors ();\n \n-  /* If all values in the constructor vector are the same, return the value.\n-     Otherwise return NULL_TREE.  Not supposed to be called for empty\n-     vectors.  */\n-  tree contains_same_values_p (vec<constructor_elt, va_gc> *vec);\n+  /* If all values in the constructor vector are products of a linear function\n+     a * x + b, then return true.  When true, COEFF_A and COEFF_B and\n+     coefficients of the linear function.  Note that equal values are special\n+     case of a linear function with a and b equal to zero.  */\n+  bool contains_linear_function_p (vec<constructor_elt, va_gc> *vec,\n+\t\t\t\t   wide_int *coeff_a, wide_int *coeff_b);\n \n   /* Return type which should be used for array elements, either TYPE's\n      main variant or, for integral types, some smaller integral type"}]}