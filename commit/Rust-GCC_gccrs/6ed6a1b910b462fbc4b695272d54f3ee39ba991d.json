{"sha": "6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVkNmExYjkxMGI0NjJmYmM0YjY5NTI3MmQ1NGYzZWUzOWJhOTkxZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-04-07T22:25:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-04-07T22:25:33Z"}, "message": "inclhack.def (rpc_xdr_lvalue_cast_a, [...]): New fixes.\n\n\t* fixinc/inclhack.def (rpc_xdr_lvalue_cast_a,\n\trpc_xdr_lvalue_cast_b): New fixes.\n\t* fixinc/fixincl.x: Regenerate.\n\t* fixinc/tests/base/rpc/xdr.h: Add new tests.\n\nFrom-SVN: r80490", "tree": {"sha": "0d91a33ca6a1dc9fab1aa4304867893833e63593", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d91a33ca6a1dc9fab1aa4304867893833e63593"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc091c8e64a5f68c9632d013e999eb5f8b71136a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc091c8e64a5f68c9632d013e999eb5f8b71136a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc091c8e64a5f68c9632d013e999eb5f8b71136a"}], "stats": {"total": 136, "additions": 131, "deletions": 5}, "files": [{"sha": "34b8e14f8906b97f73c697523fa5391f7bf4d648", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "patch": "@@ -1,3 +1,10 @@\n+2004-04-07  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* fixinc/inclhack.def (rpc_xdr_lvalue_cast_a,\n+\trpc_xdr_lvalue_cast_b): New fixes.\n+\t* fixinc/fixincl.x: Regenerate.\n+\t* fixinc/tests/base/rpc/xdr.h: Add new tests.\n+\n 2004-04-07  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (processor_target_table): Add MASK_MFCRF"}, {"sha": "f3a1149dce1d28a7654a168b4416c36f1d0761e2", "filename": "gcc/fixinc/fixincl.x", "status": "modified", "additions": 89, "deletions": 5, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.x?ref=6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Thursday January 22, 2004 at 08:36:55 PM MET\n+ * It has been AutoGen-ed  Wednesday April  7, 2004 at 10:23:41 PM UTC\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Thu Jan 22 20:36:56 MET 2004\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Wed Apr  7 22:23:41 UTC 2004\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 172 fixup descriptions.\n+ * This file contains 174 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4017,6 +4017,78 @@ static const char* apzRead_Ret_TypePatch[] = {\n     \"(extern int\\t.*), fread\\\\(\\\\), fwrite\\\\(\\\\)(.*)\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Rpc_Xdr_Lvalue_Cast_A fix\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_AName[] =\n+     \"rpc_xdr_lvalue_cast_a\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_AList[] =\n+  \"|rpc/xdr.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzRpc_Xdr_Lvalue_Cast_AMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_ASelect0[] =\n+       \"#define[ \\t]*IXDR_GET_LONG.*\\\\\\\\\\n\\\n+.*__extension__.*\";\n+\n+#define    RPC_XDR_LVALUE_CAST_A_TEST_CT  1\n+static tTestDesc aRpc_Xdr_Lvalue_Cast_ATests[] = {\n+  { TT_EGREP,    zRpc_Xdr_Lvalue_Cast_ASelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Rpc_Xdr_Lvalue_Cast_A\n+ */\n+static const char* apzRpc_Xdr_Lvalue_Cast_APatch[] = {\n+    \"format\",\n+    \"#define IXDR_GET_LONG(buf) ((long)IXDR_GET_U_INT32(buf))\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Rpc_Xdr_Lvalue_Cast_B fix\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_BName[] =\n+     \"rpc_xdr_lvalue_cast_b\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_BList[] =\n+  \"|rpc/xdr.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzRpc_Xdr_Lvalue_Cast_BMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zRpc_Xdr_Lvalue_Cast_BSelect0[] =\n+       \"#define[ \\t]*IXDR_PUT_LONG.*\\\\\\\\\\n\\\n+.*__extension__.*\";\n+\n+#define    RPC_XDR_LVALUE_CAST_B_TEST_CT  1\n+static tTestDesc aRpc_Xdr_Lvalue_Cast_BTests[] = {\n+  { TT_EGREP,    zRpc_Xdr_Lvalue_Cast_BSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Rpc_Xdr_Lvalue_Cast_B\n+ */\n+static const char* apzRpc_Xdr_Lvalue_Cast_BPatch[] = {\n+    \"format\",\n+    \"#define IXDR_PUT_LONG(buf, v) ((long)IXDR_PUT_INT32(buf, (long)(v)))\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Rs6000_Double fix\n@@ -6822,9 +6894,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          193\n+#define REGEX_COUNT          195\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            172\n+#define FIX_COUNT            174\n \n /*\n  *  Enumerate the fixes\n@@ -6929,6 +7001,8 @@ typedef enum {\n     OSF_NAMESPACE_C_FIXIDX,\n     PTHREAD_PAGE_SIZE_FIXIDX,\n     READ_RET_TYPE_FIXIDX,\n+    RPC_XDR_LVALUE_CAST_A_FIXIDX,\n+    RPC_XDR_LVALUE_CAST_B_FIXIDX,\n     RS6000_DOUBLE_FIXIDX,\n     RS6000_FCHMOD_FIXIDX,\n     RS6000_PARAM_FIXIDX,\n@@ -7500,6 +7574,16 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      READ_RET_TYPE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aRead_Ret_TypeTests,   apzRead_Ret_TypePatch, 0 },\n \n+  {  zRpc_Xdr_Lvalue_Cast_AName,    zRpc_Xdr_Lvalue_Cast_AList,\n+     apzRpc_Xdr_Lvalue_Cast_AMachs,\n+     RPC_XDR_LVALUE_CAST_A_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aRpc_Xdr_Lvalue_Cast_ATests,   apzRpc_Xdr_Lvalue_Cast_APatch, 0 },\n+\n+  {  zRpc_Xdr_Lvalue_Cast_BName,    zRpc_Xdr_Lvalue_Cast_BList,\n+     apzRpc_Xdr_Lvalue_Cast_BMachs,\n+     RPC_XDR_LVALUE_CAST_B_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aRpc_Xdr_Lvalue_Cast_BTests,   apzRpc_Xdr_Lvalue_Cast_BPatch, 0 },\n+\n   {  zRs6000_DoubleName,    zRs6000_DoubleList,\n      apzRs6000_DoubleMachs,\n      RS6000_DOUBLE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "086b8c0d42015ada588ceb689e2df3b4fa112fd4", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "patch": "@@ -2229,6 +2229,31 @@ fix = {\n };\n \n \n+/*\n+ *  Fix casts as lvalues in glibc's <rpc/xdr.h>.\n+ */\n+fix = {\n+    hackname  = rpc_xdr_lvalue_cast_a;\n+    files     = rpc/xdr.h;\n+    select    = \"#define[ \\t]*IXDR_GET_LONG.*\\\\\\\\\\n.*__extension__.*\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define IXDR_GET_LONG(buf) ((long)IXDR_GET_U_INT32(buf))\";\n+    test_text = \"#define IXDR_GET_LONG(buf) \\\\\\\\\\n\"\n+                \"\\t((long)ntohl((u_long)*__extension__((u_int32_t*)(buf))++))\";\n+};\n+\n+\n+fix = {\n+    hackname  = rpc_xdr_lvalue_cast_b;\n+    files     = rpc/xdr.h;\n+    select    = \"#define[ \\t]*IXDR_PUT_LONG.*\\\\\\\\\\n.*__extension__.*\";\n+    c_fix     = format;\n+    c_fix_arg = \"#define IXDR_PUT_LONG(buf, v) ((long)IXDR_PUT_INT32(buf, (long)(v)))\";\n+    test_text = \"#define IXDR_PUT_LONG(buf, v) \\\\\\\\\\n\"\n+                \"\\t(*__extension__((u_int32_t*)(buf))++ = (long)htonl((u_long)(v)))\";\n+};\n+\n+\n /*\n  *  function class(double x) conflicts with C++ keyword on rs/6000\n  */"}, {"sha": "7b9f9bae9618cc044e601f3b2ef0872c02eaa442", "filename": "gcc/fixinc/tests/base/rpc/xdr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ed6a1b910b462fbc4b695272d54f3ee39ba991d/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ftests%2Fbase%2Frpc%2Fxdr.h?ref=6ed6a1b910b462fbc4b695272d54f3ee39ba991d", "patch": "@@ -9,6 +9,16 @@\n \n \n \n+#if defined( RPC_XDR_LVALUE_CAST_A_CHECK )\n+#define IXDR_GET_LONG(buf) ((long)IXDR_GET_U_INT32(buf))\n+#endif  /* RPC_XDR_LVALUE_CAST_A_CHECK */\n+\n+\n+#if defined( RPC_XDR_LVALUE_CAST_B_CHECK )\n+#define IXDR_PUT_LONG(buf, v) ((long)IXDR_PUT_INT32(buf, (long)(v)))\n+#endif  /* RPC_XDR_LVALUE_CAST_B_CHECK */\n+\n+\n #if defined( STRUCT_FILE_CHECK )\n struct __file_s;\n extern void xdrstdio_create( struct __file_s* );"}]}