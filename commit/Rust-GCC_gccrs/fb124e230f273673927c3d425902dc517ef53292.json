{"sha": "fb124e230f273673927c3d425902dc517ef53292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmIxMjRlMjMwZjI3MzY3MzkyN2MzZDQyNTkwMmRjNTE3ZWY1MzI5Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-06-20T10:25:17Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-06-20T10:25:17Z"}, "message": "i386.md (rounding_insn): New int attribute.\n\n2012-06-20  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (rounding_insn): New int attribute.\n\t(<rounding_insn>xf2): Macroize insn from\n\t{floor,ceil,btrunc}xf2 using FRNDINT_ROUNDING int iterator.\n\t(l<rounding_insn>xf<mode>2): Rename from l<rounding>xf<mode>2.\n\n2012-06-20  Uros Bizjak  <ubizjak@gmail.com>\n\n\t* config/i386/i386.md (IEEE_MAXMIN): New int iterator.\n\t(ieee_maxmin): New int attribute.\n\t(*ieee_s<ieee_maxmin><mode>3): Macroize insn from\n\t*ieee_s{max,min}<mode>3 using IEEE_MAXMIN mode iterator.\n\nFrom-SVN: r188824", "tree": {"sha": "922c391874cc03582e7cc1f9535db7c6820741a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/922c391874cc03582e7cc1f9535db7c6820741a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb124e230f273673927c3d425902dc517ef53292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb124e230f273673927c3d425902dc517ef53292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb124e230f273673927c3d425902dc517ef53292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb124e230f273673927c3d425902dc517ef53292/comments", "author": null, "committer": null, "parents": [{"sha": "34dd397b05402820fbb3d790bbf6a7e668acb3b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34dd397b05402820fbb3d790bbf6a7e668acb3b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34dd397b05402820fbb3d790bbf6a7e668acb3b7"}], "stats": {"total": 110, "additions": 48, "deletions": 62}, "files": [{"sha": "d1fca42e2648014c1825b06cf893c39e05c66e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb124e230f273673927c3d425902dc517ef53292/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb124e230f273673927c3d425902dc517ef53292/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb124e230f273673927c3d425902dc517ef53292", "patch": "@@ -1,3 +1,17 @@\n+2012-06-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (rounding_insn): New int attribute.\n+\t(<rounding_insn>xf2): Macroize insn from\n+\t{floor,ceil,btrunc}xf2 using FRNDINT_ROUNDING int iterator.\n+\t(l<rounding_insn>xf<mode>2): Rename from l<rounding>xf<mode>2.\n+\n+2012-06-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (IEEE_MAXMIN): New int iterator.\n+\t(ieee_maxmin): New int attribute.\n+\t(*ieee_s<ieee_maxmin><mode>3): Macroize insn from\n+\t*ieee_s{max,min}<mode>3 using IEEE_MAXMIN mode iterator.\n+\n 2012-06-20  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/arm/arm.h (EMIT_EABI_ATTRIBUTE): Remove.\n@@ -40,12 +54,12 @@\n \tit is used.\n \n 2012-06-19  Tom de Vries  <vries@codesourcery.com>\n-            Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\t    Maxim Kuvyrkov  <maxim@codesourcery.com>\n \n \t* config/mips/constraints.md (ZR): New constraint.\n \t* config/mips/predicates.md (mem_noofs_operand): New predicate.\n \t* config/mips/mips.c (mips_print_operand): Handle new print modifier.\n-        * config/mips/mips.h (TARGET_XLP): Define.\n+\t* config/mips/mips.h (TARGET_XLP): Define.\n \t(TARGET_SYNC_AFTER_SC): Update.\n \t(ISA_HAS_SWAP, ISA_HAS_LDADD): Define.\n \t* config/mips/sync.md (atomic_exchange, atomic_fetch_add): Use"}, {"sha": "af80786028aaeca51e1332cee61ac87e1fbe28d0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 60, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb124e230f273673927c3d425902dc517ef53292/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb124e230f273673927c3d425902dc517ef53292/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fb124e230f273673927c3d425902dc517ef53292", "patch": "@@ -15108,6 +15108,14 @@\n \t[UNSPEC_FIST_FLOOR\n \t UNSPEC_FIST_CEIL])\n \n+;; Base name for define_insn\n+(define_int_attr rounding_insn\n+\t[(UNSPEC_FRNDINT_FLOOR \"floor\")\n+\t (UNSPEC_FRNDINT_CEIL \"ceil\")\n+\t (UNSPEC_FRNDINT_TRUNC \"btrunc\")\n+\t (UNSPEC_FIST_FLOOR \"floor\")\n+\t (UNSPEC_FIST_CEIL \"ceil\")])\n+\n (define_int_attr rounding\n \t[(UNSPEC_FRNDINT_FLOOR \"floor\")\n \t (UNSPEC_FRNDINT_CEIL \"ceil\")\n@@ -15161,17 +15169,14 @@\n    (set_attr \"i387_cw\" \"<rounding>\")\n    (set_attr \"mode\" \"XF\")])\n \n-(define_expand \"floorxf2\"\n-  [(use (match_operand:XF 0 \"register_operand\"))\n-   (use (match_operand:XF 1 \"register_operand\"))]\n+(define_expand \"<rounding_insn>xf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")]\n+\t\t\t      FRNDINT_ROUNDING))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-{\n-  if (optimize_insn_for_size_p ())\n-    FAIL;\n-  emit_insn (gen_frndintxf2_floor (operands[0], operands[1]));\n-  DONE;\n-})\n+   && flag_unsafe_math_optimizations\n+   && !optimize_insn_for_size_p ()\")\n \n (define_expand \"floor<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n@@ -15213,18 +15218,6 @@\n   DONE;\n })\n \n-(define_expand \"ceilxf2\"\n-  [(use (match_operand:XF 0 \"register_operand\"))\n-   (use (match_operand:XF 1 \"register_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-{\n-  if (optimize_insn_for_size_p ())\n-    FAIL;\n-  emit_insn (gen_frndintxf2_ceil (operands[0], operands[1]));\n-  DONE;\n-})\n-\n (define_expand \"ceil<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"register_operand\"))]\n@@ -15265,18 +15258,6 @@\n   DONE;\n })\n \n-(define_expand \"btruncxf2\"\n-  [(use (match_operand:XF 0 \"register_operand\"))\n-   (use (match_operand:XF 1 \"register_operand\"))]\n-  \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-{\n-  if (optimize_insn_for_size_p ())\n-    FAIL;\n-  emit_insn (gen_frndintxf2_trunc (operands[0], operands[1]));\n-  DONE;\n-})\n-\n (define_expand \"btrunc<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n    (use (match_operand:MODEF 1 \"register_operand\"))]\n@@ -15357,14 +15338,12 @@\n    (set_attr \"mode\" \"XF\")])\n \n (define_expand \"nearbyintxf2\"\n-  [(use (match_operand:XF 0 \"register_operand\"))\n-   (use (match_operand:XF 1 \"register_operand\"))]\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")]\n+\t\t\t      UNSPEC_FRNDINT_MASK_PM))\n+\t      (clobber (reg:CC FLAGS_REG))])]\n   \"TARGET_USE_FANCY_MATH_387\n-   && flag_unsafe_math_optimizations\"\n-{\n-  emit_insn (gen_frndintxf2_mask_pm (operands[0], operands[1]));\n-  DONE;\n-})\n+   && flag_unsafe_math_optimizations\")\n \n (define_expand \"nearbyint<mode>2\"\n   [(use (match_operand:MODEF 0 \"register_operand\"))\n@@ -15531,7 +15510,7 @@\n \t      (use (match_dup 2))\n \t      (use (match_dup 3))])])\n \n-(define_expand \"l<rounding>xf<mode>2\"\n+(define_expand \"l<rounding_insn>xf<mode>2\"\n   [(parallel [(set (match_operand:SWI248x 0 \"nonimmediate_operand\")\n \t\t   (unspec:SWI248x [(match_operand:XF 1 \"register_operand\")]\n \t\t\t\t   FIST_ROUNDING))\n@@ -16616,31 +16595,24 @@\n ;; Their operands are not commutative, and thus they may be used in the\n ;; presence of -0.0 and NaN.\n \n-(define_insn \"*ieee_smin<mode>3\"\n-  [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n-\t(unspec:MODEF\n-\t  [(match_operand:MODEF 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")]\n-\t UNSPEC_IEEE_MIN))]\n-  \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n-  \"@\n-   min<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vmin<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"type\" \"sseadd\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+(define_int_iterator IEEE_MAXMIN\n+\t[UNSPEC_IEEE_MAX\n+\t UNSPEC_IEEE_MIN])\n+\n+(define_int_attr ieee_maxmin\n+\t[(UNSPEC_IEEE_MAX \"max\")\n+\t (UNSPEC_IEEE_MIN \"min\")])\n \n-(define_insn \"*ieee_smax<mode>3\"\n+(define_insn \"*ieee_s<ieee_maxmin><mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=x,x\")\n \t(unspec:MODEF\n \t  [(match_operand:MODEF 1 \"register_operand\" \"0,x\")\n \t   (match_operand:MODEF 2 \"nonimmediate_operand\" \"xm,xm\")]\n-\t UNSPEC_IEEE_MAX))]\n+\t  IEEE_MAXMIN))]\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"@\n-   max<ssemodesuffix>\\t{%2, %0|%0, %2}\n-   vmax<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+   <ieee_maxmin><ssemodesuffix>\\t{%2, %0|%0, %2}\n+   v<ieee_maxmin><ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"type\" \"sseadd\")"}]}