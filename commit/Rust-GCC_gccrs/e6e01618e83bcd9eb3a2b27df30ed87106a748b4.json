{"sha": "e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZlMDE2MThlODNiY2Q5ZWIzYTJiMjdkZjMwZWQ4NzEwNmE3NDhiNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-19T19:36:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-08-19T19:36:10Z"}, "message": "libstdc++: Make make-unsigned-like-t<__int128> work [PR 96042]\n\nAs well as ensuring that numeric_limits<__int128> is defined, we need to\nensure that make-unsigned-like-t and to-unsigned-like work correctly for\n128-bit integers in strict mode. This ensures that a subrange created\nfrom an iota_view's iterator and sentinel can represent its size.\n\nCo-authored-by: Patrick Palka  <ppalka@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n2020-08-19  Jonathan Wakely  <jwakely@redhat.com>\n\t    Patrick Palka  <ppalka@redhat.com>\n\n\tPR libstdc++/96042\n\t* include/bits/range_access.h (__detail::__to_unsigned_like):\n\tDo not use make_unsigned_t<T> in the return type, as it can\n\tresult in an error before the integral<T> constraint is checked.\n\t[__STRICT_ANSI__]: Add overloads for 128-bit integer types.\n\t(__detail::__make_unsigned_like_t): Define as the return type\n\tof __to_unsigned_like.\n\t* testsuite/std/ranges/subrange/96042.cc: New test.", "tree": {"sha": "59cd46e74d878fe3800ca553e434e8adcc1cb92b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59cd46e74d878fe3800ca553e434e8adcc1cb92b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e01618e83bcd9eb3a2b27df30ed87106a748b4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23ebfda0e352fa0a92c6b012458ecb65505a135f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23ebfda0e352fa0a92c6b012458ecb65505a135f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23ebfda0e352fa0a92c6b012458ecb65505a135f"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "bafced31ea81de7c4d8483ca5b0090d04c8a7c45", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e01618e83bcd9eb3a2b27df30ed87106a748b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e01618e83bcd9eb3a2b27df30ed87106a748b4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "patch": "@@ -364,13 +364,23 @@ namespace ranges\n     { return __max_size_type(__t); }\n \n     template<integral _Tp>\n-      constexpr make_unsigned_t<_Tp>\n+      constexpr auto\n       __to_unsigned_like(_Tp __t) noexcept\n-      { return __t; }\n+      { return static_cast<make_unsigned_t<_Tp>>(__t); }\n \n-    template<typename _Tp, bool _MaxDiff = same_as<_Tp, __max_diff_type>>\n+#if defined __STRICT_ANSI__ && defined __SIZEOF_INT128__\n+    constexpr unsigned __int128\n+    __to_unsigned_like(__int128 __t) noexcept\n+    { return __t; }\n+\n+    constexpr unsigned __int128\n+    __to_unsigned_like(unsigned __int128 __t) noexcept\n+    { return __t; }\n+#endif\n+\n+    template<typename _Tp>\n       using __make_unsigned_like_t\n-\t= conditional_t<_MaxDiff, __max_size_type, make_unsigned_t<_Tp>>;\n+\t= decltype(__detail::__to_unsigned_like(std::declval<_Tp>()));\n \n     // Part of the constraints of ranges::borrowed_range\n     template<typename _Tp>"}, {"sha": "5826203f03c781c887d1cf1d02c2167f2e1b1d63", "filename": "libstdc++-v3/testsuite/std/ranges/subrange/96042.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6e01618e83bcd9eb3a2b27df30ed87106a748b4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6e01618e83bcd9eb3a2b27df30ed87106a748b4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsubrange%2F96042.cc?ref=e6e01618e83bcd9eb3a2b27df30ed87106a748b4", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=c++20\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <ranges>\n+\n+constexpr bool\n+test01()\n+{\n+  using I = unsigned long long;\n+  // view with a difference type that doesn't fit in long long:\n+  std::ranges::iota_view<I, I> v(0, std::numeric_limits<I>::max());\n+  // view with a size type that doesn't fit in unsigned long long:\n+  std::ranges::subrange sr{v.begin(), v.end()};\n+  auto sz = std::ranges::size(sr);\n+  return sz == std::numeric_limits<I>::max();\n+}\n+static_assert( test01() );"}]}