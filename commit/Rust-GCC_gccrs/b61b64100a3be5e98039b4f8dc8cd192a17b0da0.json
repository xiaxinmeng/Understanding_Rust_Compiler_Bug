{"sha": "b61b64100a3be5e98039b4f8dc8cd192a17b0da0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYxYjY0MTAwYTNiZTVlOTgwMzliNGY4ZGM4Y2QxOTJhMTdiMGRhMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-08T22:40:11Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-08T22:40:11Z"}, "message": "(expand_assignment): Remove bogus resetting of alignment to inner alignment.\n\n(expand_expr, case COMPONENT_REF): Likewise.\n\nFrom-SVN: r13114", "tree": {"sha": "18557124b43a8449972c0b46ab9bf989162001ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18557124b43a8449972c0b46ab9bf989162001ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b61b64100a3be5e98039b4f8dc8cd192a17b0da0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61b64100a3be5e98039b4f8dc8cd192a17b0da0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b61b64100a3be5e98039b4f8dc8cd192a17b0da0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b61b64100a3be5e98039b4f8dc8cd192a17b0da0/comments", "author": null, "committer": null, "parents": [{"sha": "4e97601f107e6597ef2da0fadf5624137a1d50f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e97601f107e6597ef2da0fadf5624137a1d50f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e97601f107e6597ef2da0fadf5624137a1d50f5"}], "stats": {"total": 16, "additions": 0, "deletions": 16}, "files": [{"sha": "60501a55962f9ef980f9d515516bb7d6c9061ba8", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b61b64100a3be5e98039b4f8dc8cd192a17b0da0/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b61b64100a3be5e98039b4f8dc8cd192a17b0da0/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=b61b64100a3be5e98039b4f8dc8cd192a17b0da0", "patch": "@@ -2807,14 +2807,6 @@ expand_assignment (to, from, want_value, suggest_reg)\n \t  to_rtx = change_address (to_rtx, VOIDmode,\n \t\t\t\t   gen_rtx (PLUS, ptr_mode, XEXP (to_rtx, 0),\n \t\t\t\t\t    force_reg (ptr_mode, offset_rtx)));\n-\t  /* If we have a variable offset, the known alignment\n-\t     is only that of the innermost structure containing the field.\n-\t     (Actually, we could sometimes do better by using the\n-\t     align of an element of the innermost array, but no need.)  */\n-\t  if (TREE_CODE (to) == COMPONENT_REF\n-\t      || TREE_CODE (to) == BIT_FIELD_REF)\n-\t    alignment\n-\t      = TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (to, 0))) / BITS_PER_UNIT;\n \t}\n       if (volatilep)\n \t{\n@@ -5508,14 +5500,6 @@ expand_expr (exp, target, tmode, modifier)\n \t    op0 = change_address (op0, VOIDmode,\n \t\t\t\t  gen_rtx (PLUS, ptr_mode, XEXP (op0, 0),\n \t\t\t\t\t   force_reg (ptr_mode, offset_rtx)));\n-\t  /* If we have a variable offset, the known alignment\n-\t     is only that of the innermost structure containing the field.\n-\t     (Actually, we could sometimes do better by using the\n-\t     size of an element of the innermost array, but no need.)  */\n-\t  if (TREE_CODE (exp) == COMPONENT_REF\n-\t      || TREE_CODE (exp) == BIT_FIELD_REF)\n-\t    alignment = (TYPE_ALIGN (TREE_TYPE (TREE_OPERAND (exp, 0)))\n-\t\t\t / BITS_PER_UNIT);\n \t  }\n \n \t/* Don't forget about volatility even if this is a bitfield.  */"}]}