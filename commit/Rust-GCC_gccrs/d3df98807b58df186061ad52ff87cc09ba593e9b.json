{"sha": "d3df98807b58df186061ad52ff87cc09ba593e9b", "node_id": "C_kwDOANBUbNoAKGQzZGY5ODgwN2I1OGRmMTg2MDYxYWQ1MmZmODdjYzA5YmE1OTNlOWI", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-26T10:45:28Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-09-26T10:45:28Z"}, "message": "OpenACC: Fix reduction tree-sharing issue [PR106982]\n\nThe tree for var == incoming == outgound was\n'MEM <double[5]> [(double *)&reduced]' which caused the ICE\n\"incorrect sharing of tree nodes\".\n\n\tPR middle-end/106982\n\ngcc/ChangeLog:\n\n\t* omp-low.cc (lower_oacc_reductions): Add some unshare_expr.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/goacc/reduction-7.c: New test.\n\t* c-c++-common/goacc/reduction-8.c: New test.", "tree": {"sha": "074360d892578a63fd2a22546a43a09fdf67555d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/074360d892578a63fd2a22546a43a09fdf67555d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3df98807b58df186061ad52ff87cc09ba593e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3df98807b58df186061ad52ff87cc09ba593e9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3df98807b58df186061ad52ff87cc09ba593e9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3df98807b58df186061ad52ff87cc09ba593e9b/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2387cfc7f6e2065f5c040d62763f6f3a5997a444", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2387cfc7f6e2065f5c040d62763f6f3a5997a444", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2387cfc7f6e2065f5c040d62763f6f3a5997a444"}], "stats": {"total": 53, "additions": 45, "deletions": 8}, "files": [{"sha": "dc42c752017311ffeca934f94d40186b5352b783", "filename": "gcc/omp-low.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Fomp-low.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Fomp-low.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.cc?ref=d3df98807b58df186061ad52ff87cc09ba593e9b", "patch": "@@ -7631,6 +7631,7 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t      incoming = build_simple_mem_ref (incoming);\n \t  }\n \telse\n+\t  /* Note that 'var' might be a mem ref.  */\n \t  v1 = v2 = v3 = var;\n \n \t/* Determine position in reduction buffer, which may be used\n@@ -7659,26 +7660,28 @@ lower_oacc_reductions (location_t loc, tree clauses, tree level, bool inner,\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, setup_code,\n \t\t\t\t\t  unshare_expr (ref_to_res),\n-\t\t\t\t\t  incoming, level, op, off);\n+\t\t\t\t\t  unshare_expr (incoming),\n+\t\t\t\t\t  level, op, off);\n \ttree init_call\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, init_code,\n \t\t\t\t\t  unshare_expr (ref_to_res),\n-\t\t\t\t\t  v1, level, op, off);\n+\t\t\t\t\t  unshare_expr (v1), level, op, off);\n \ttree fini_call\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, fini_code,\n \t\t\t\t\t  unshare_expr (ref_to_res),\n-\t\t\t\t\t  v2, level, op, off);\n+\t\t\t\t\t  unshare_expr (v2), level, op, off);\n \ttree teardown_call\n \t  = build_call_expr_internal_loc (loc, IFN_GOACC_REDUCTION,\n \t\t\t\t\t  TREE_TYPE (var), 6, teardown_code,\n-\t\t\t\t\t  ref_to_res, v3, level, op, off);\n+\t\t\t\t\t  ref_to_res, unshare_expr (v3),\n+\t\t\t\t\t  level, op, off);\n \n-\tgimplify_assign (v1, setup_call, &before_fork);\n-\tgimplify_assign (v2, init_call, &after_fork);\n-\tgimplify_assign (v3, fini_call, &before_join);\n-\tgimplify_assign (outgoing, teardown_call, &after_join);\n+\tgimplify_assign (unshare_expr (v1), setup_call, &before_fork);\n+\tgimplify_assign (unshare_expr (v2), init_call, &after_fork);\n+\tgimplify_assign (unshare_expr (v3), fini_call, &before_join);\n+\tgimplify_assign (unshare_expr (outgoing), teardown_call, &after_join);\n       }\n \n   /* Now stitch things together.  */"}, {"sha": "482b0ab1984e75bd822efea2b6e825f598921f25", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-7.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-7.c?ref=d3df98807b58df186061ad52ff87cc09ba593e9b", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+\n+/* PR middle-end/106982 */\n+\n+long long n = 100;\n+int multiplicitive_n = 128;\n+\n+void test1(double *rand, double *a, double *b, double *c)\n+{\n+#pragma acc data copyin(a[0:10*multiplicitive_n], b[0:10*multiplicitive_n]) copyout(c[0:10])\n+    {\n+#pragma acc parallel loop\n+        for (int i = 0; i < 10; ++i)\n+        {\n+        double temp = 1.0;\n+#pragma acc loop vector reduction(*:temp)\n+        for (int j = 0; j < multiplicitive_n; ++j)\n+          temp *= a[(i * multiplicitive_n) + j] + b[(i * multiplicitive_n) + j];\n+        c[i] = temp;\n+        }\n+    }\n+}"}, {"sha": "2c3ed499d5b63c394373b0b816cea0b18f322cdd", "filename": "gcc/testsuite/c-c++-common/goacc/reduction-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3df98807b58df186061ad52ff87cc09ba593e9b/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Freduction-8.c?ref=d3df98807b58df186061ad52ff87cc09ba593e9b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+/* PR middle-end/106982 */\n+\n+void test1(double *c)\n+{\n+    double reduced[5];\n+#pragma acc parallel loop gang private(reduced)\n+    for (int x = 0; x < 5; ++x)\n+#pragma acc loop worker reduction(*:reduced)\n+      for (int y = 0; y < 5; ++y) { }\n+}"}]}