{"sha": "5251caf233025a931b174c6b4f173f4e23b87167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI1MWNhZjIzMzAyNWE5MzFiMTc0YzZiNGYxNzNmNGUyM2I4NzE2Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-12-06T12:55:14Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-12-06T12:55:14Z"}, "message": "Fix bug when large stack frames (> 32k) are used, and saving both GP and FP registers.\n\nFrom-SVN: r2840", "tree": {"sha": "f356f471b6cb586b2a91c9ebde7da93f311a42c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f356f471b6cb586b2a91c9ebde7da93f311a42c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5251caf233025a931b174c6b4f173f4e23b87167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5251caf233025a931b174c6b4f173f4e23b87167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5251caf233025a931b174c6b4f173f4e23b87167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5251caf233025a931b174c6b4f173f4e23b87167/comments", "author": null, "committer": null, "parents": [{"sha": "2649b2ee2e6ea57aab3098201a3d607d2314746e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2649b2ee2e6ea57aab3098201a3d607d2314746e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2649b2ee2e6ea57aab3098201a3d607d2314746e"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "018e9ab9cdb4f8c0ad30375a356e604392250a61", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5251caf233025a931b174c6b4f173f4e23b87167/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5251caf233025a931b174c6b4f173f4e23b87167/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=5251caf233025a931b174c6b4f173f4e23b87167", "patch": "@@ -3914,7 +3914,7 @@ save_restore (file, gp_op, gp_2word_op, fp_op)\n   unsigned long fmask\t  = current_frame_info.fmask;\n   unsigned long gp_offset;\n   unsigned long fp_offset;\n-  unsigned long max_offset;\n+  unsigned long min_offset;\n   char *base_reg;\n \n   if (mask == 0 && fmask == 0)\n@@ -3923,17 +3923,17 @@ save_restore (file, gp_op, gp_2word_op, fp_op)\n   base_reg   = reg_names[STACK_POINTER_REGNUM];\n   gp_offset  = current_frame_info.gp_sp_offset;\n   fp_offset  = current_frame_info.fp_sp_offset;\n-  max_offset = (gp_offset > fp_offset) ? gp_offset : fp_offset;\n+  min_offset = (gp_offset < fp_offset && mask != 0) ? gp_offset : fp_offset;\n \n   /* Deal with calling functions with a large structure.  */\n-  if (max_offset >= 32768)\n+  if (min_offset >= 32768)\n     {\n       char *temp = reg_names[MIPS_TEMP2_REGNUM];\n-      fprintf (file, \"\\tli\\t%s,%ld\\n\", temp, max_offset);\n+      fprintf (file, \"\\tli\\t%s,%ld\\n\", temp, min_offset);\n       fprintf (file, \"\\taddu\\t%s,%s,%s\\n\", temp, temp, base_reg);\n       base_reg = temp;\n-      gp_offset = max_offset - gp_offset;\n-      fp_offset = max_offset - fp_offset;\n+      gp_offset = min_offset - gp_offset;\n+      fp_offset = min_offset - fp_offset;\n     }\n \n   /* Save registers starting from high to low.  The debuggers prefer\n@@ -3982,28 +3982,28 @@ save_restore_insns (store_p)\n      int store_p;\t\t/* true if this is prologue */\n {\n   int regno;\n-  rtx base_reg_rtx\t  = stack_pointer_rtx;\n-  unsigned long mask\t  = current_frame_info.mask;\n-  unsigned long fmask\t  = current_frame_info.fmask;\n+  rtx base_reg_rtx\t\t= stack_pointer_rtx;\n+  unsigned long mask\t\t= current_frame_info.mask;\n+  unsigned long fmask\t\t= current_frame_info.fmask;\n   unsigned long gp_offset;\n   unsigned long fp_offset;\n-  unsigned long max_offset;\n+  unsigned long min_offset;\n \n   if (mask == 0 && fmask == 0)\n     return;\n \n   gp_offset  = current_frame_info.gp_sp_offset;\n   fp_offset  = current_frame_info.fp_sp_offset;\n-  max_offset = (gp_offset > fp_offset) ? gp_offset : fp_offset;\n+  min_offset = (gp_offset < fp_offset && mask != 0) ? gp_offset : fp_offset;\n \n   /* Deal with calling functions with a large structure.  */\n-  if (max_offset >= 32768)\n+  if (min_offset >= 32768)\n     {\n       base_reg_rtx = gen_rtx (REG, Pmode, MIPS_TEMP2_REGNUM);\n-      emit_move_insn (base_reg_rtx, GEN_INT (max_offset));\n+      emit_move_insn (base_reg_rtx, GEN_INT (min_offset));\n       emit_insn (gen_addsi3 (base_reg_rtx, base_reg_rtx, stack_pointer_rtx));\n-      gp_offset = max_offset - gp_offset;\n-      fp_offset = max_offset - fp_offset;\n+      gp_offset = min_offset - gp_offset;\n+      fp_offset = min_offset - fp_offset;\n     }\n \n   /* Save registers starting from high to low.  The debuggers prefer"}]}