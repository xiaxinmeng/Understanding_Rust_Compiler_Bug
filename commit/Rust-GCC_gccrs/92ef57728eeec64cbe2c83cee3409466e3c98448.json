{"sha": "92ef57728eeec64cbe2c83cee3409466e3c98448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlZjU3NzI4ZWVlYzY0Y2JlMmM4M2NlZTM0MDk0NjZlM2M5ODQ0OA==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2019-08-21T08:29:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-21T08:29:56Z"}, "message": "[Ada] Do not rewrite argument of pragma Entry_Queue_Length in analysis\n\nIt was unusual for the analysis phase of compiler to rewrite static\nexpression of pragma Entry_Queue_Length with its value. This typically\nhappens when expanding the AST and only if needed for a given backend.\nIn particular, GNATprove doesn't need such an expansion and actually\nneeds the unrewritten AST to detect references to constants declared\nwith SPARK_Mode => Off within a code with SPARK_Mode => On.\n\nThis change has no impact on compilation, so no frontend test is\nprovided.\n\n2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n\ngcc/ada/\n\n\t* sem_prag.adb (Max_Entry_Queue_Length): Do not substitute\n\texpression of the pragma argument with its value during\n\tanalysis.\n\t* sem_util.adb (Get_Max_Queue_Length): Compute value of the\n\tpragma argument when needed.\n\nFrom-SVN: r274781", "tree": {"sha": "1d2840945e7053df731fc142f7149d51afd1702d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d2840945e7053df731fc142f7149d51afd1702d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ef57728eeec64cbe2c83cee3409466e3c98448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ef57728eeec64cbe2c83cee3409466e3c98448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ef57728eeec64cbe2c83cee3409466e3c98448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ef57728eeec64cbe2c83cee3409466e3c98448/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c34f30d16b99d7d0898d19193b3890452efa7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c34f30d16b99d7d0898d19193b3890452efa7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c34f30d16b99d7d0898d19193b3890452efa7cf"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "1a2ccbc65a971bbc0809efdc948aa781a9b99354", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92ef57728eeec64cbe2c83cee3409466e3c98448", "patch": "@@ -1,3 +1,11 @@\n+2019-08-21  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Max_Entry_Queue_Length): Do not substitute\n+\texpression of the pragma argument with its value during\n+\tanalysis.\n+\t* sem_util.adb (Get_Max_Queue_Length): Compute value of the\n+\tpragma argument when needed.\n+\n 2019-08-21  Yannick Moy  <moy@adacore.com>\n \n \t* checks.adb (Install_Null_Excluding_Check): Do not install"}, {"sha": "5a561ea64b2b3187309f9ccc1a14b86bf751ef8b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=92ef57728eeec64cbe2c83cee3409466e3c98448", "patch": "@@ -19599,15 +19599,6 @@ package body Sem_Prag is\n \n             end if;\n \n-            --  Manually substitute the expression value of the pragma argument\n-            --  if it's not an integer literal because this is not taken care\n-            --  of automatically elsewhere.\n-\n-            if Nkind (Arg) /= N_Integer_Literal then\n-               Rewrite (Arg, Make_Integer_Literal (Sloc (Arg), Val));\n-               Set_Etype (Arg, Etype (Original_Node (Arg)));\n-            end if;\n-\n             Record_Rep_Item (Entry_Id, N);\n          end Max_Entry_Queue_Length;\n "}, {"sha": "86ae740b686a464ed81992764b93527b7f587f4c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ef57728eeec64cbe2c83cee3409466e3c98448/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=92ef57728eeec64cbe2c83cee3409466e3c98448", "patch": "@@ -9763,7 +9763,8 @@ package body Sem_Util is\n          return Uint_0;\n       end if;\n \n-      Max := Intval (Expression (First (Pragma_Argument_Associations (Prag))));\n+      Max := Expr_Value\n+        (Expression (First (Pragma_Argument_Associations (Prag))));\n \n       --  Since -1 and 0 are equivalent, return 0 for instances of -1 for\n       --  uniformity."}]}