{"sha": "c54ec67ce7019a0f5212ca95054cfe972c587b21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU0ZWM2N2NlNzAxOWEwZjUyMTJjYTk1MDU0Y2ZlOTcyYzU4N2IyMQ==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2008-04-08T06:46:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-04-08T06:46:28Z"}, "message": "2008-04-08  Jose Ruiz  <ruiz@adacore.com>\n\t    Tristan Gingold  <gingold@adacore.com>\n\n\t* s-interr-dummy.adb, s-interr-vms.adb, s-interr-sigaction.adb\n\t(Install_Restricted_Handlers): New procedure\n\twhich is a simplified version of Install_Handlers that does not store\n\tpreviously installed.\n\n\t* s-interr-vxworks.adb: Fix ACATS cxc3001\n\tOn VxWorks interrupts can't be detached.\n\t(Install_Restricted_Handlers): New procedure.\n\n\t* s-interr.ads, s-interr.adb (Install_Restricted_Handlers): New\n\tprocedure.\n\nFrom-SVN: r134015", "tree": {"sha": "cdda307ff40e6bcf89e53ab4c6b562fff161596c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdda307ff40e6bcf89e53ab4c6b562fff161596c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c54ec67ce7019a0f5212ca95054cfe972c587b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54ec67ce7019a0f5212ca95054cfe972c587b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c54ec67ce7019a0f5212ca95054cfe972c587b21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c54ec67ce7019a0f5212ca95054cfe972c587b21/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cf177287b1d1d835a2e3d169d8c4a3fe3eb6ae5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf177287b1d1d835a2e3d169d8c4a3fe3eb6ae5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf177287b1d1d835a2e3d169d8c4a3fe3eb6ae5c"}], "stats": {"total": 126, "additions": 85, "deletions": 41}, "files": [{"sha": "343f8f559f1ec6208787183fea36ec0f78708425", "filename": "gcc/ada/s-interr-dummy.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-dummy.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-dummy.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-dummy.adb?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -7,7 +7,7 @@\n --                                  B o d y                                 --\n --                                                                          --\n --             Copyright (C) 1991-1994, Florida State University            --\n---                     Copyright (C) 1995-2007, AdaCore                     --\n+--                     Copyright (C) 1995-2008, AdaCore                     --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -185,6 +185,15 @@ package body System.Interrupts is\n       Unimplemented;\n    end Install_Handlers;\n \n+   ---------------------------------\n+   -- Install_Restricted_Handlers --\n+   ---------------------------------\n+\n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array) is\n+   begin\n+      Unimplemented;\n+   end Install_Restricted_Handlers;\n+\n    ----------------\n    -- Is_Blocked --\n    ----------------"}, {"sha": "14bb9707fecaec3a43861033db3f98c6f4e10bc0", "filename": "gcc/ada/s-interr-sigaction.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-sigaction.adb?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -290,6 +290,17 @@ package body System.Interrupts is\n       end loop;\n    end Install_Handlers;\n \n+   ---------------------------------\n+   -- Install_Restricted_Handlers --\n+   ---------------------------------\n+\n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array) is\n+   begin\n+      for N in Handlers'Range loop\n+         Attach_Handler (Handlers (N).Handler, Handlers (N).Interrupt, True);\n+      end loop;\n+   end Install_Restricted_Handlers;\n+\n    ---------------------\n    -- Current_Handler --\n    ---------------------"}, {"sha": "2711e036cbedfc014dfbc234c180c3a469dfd30a", "filename": "gcc/ada/s-interr-vms.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vms.adb?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -736,7 +736,7 @@ package body System.Interrupts is\n \n       --  Abort_Task_Interrupt is one of the Interrupt unmasked\n       --  in all tasks. We mask the Interrupt in this particular task\n-      --  so that \"sigwait\" is possible to catch an explicitely sent\n+      --  so that \"sigwait\" is possible to catch an explicitly sent\n       --  Abort_Task_Interrupt from the Server_Tasks.\n \n       --  This sigwaiting is needed so that we make sure a Server_Task is\n@@ -1096,6 +1096,17 @@ package body System.Interrupts is\n       end loop;\n    end Install_Handlers;\n \n+   ---------------------------------\n+   -- Install_Restricted_Handlers --\n+   ---------------------------------\n+\n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array) is\n+   begin\n+      for N in Handlers'Range loop\n+         Attach_Handler (Handlers (N).Handler, Handlers (N).Interrupt, True);\n+      end loop;\n+   end Install_Restricted_Handlers;\n+\n --  Elaboration code for package System.Interrupts\n \n begin"}, {"sha": "fac4cfc8619ffd5b85c5fe0c23de41f5a9b5230e", "filename": "gcc/ada/s-interr-vxworks.adb", "status": "modified", "additions": 31, "deletions": 36, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vxworks.adb?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -191,10 +191,10 @@ package body System.Interrupts is\n    Interrupt_Access_Hold : Interrupt_Task_Access;\n    --  Variable for allocating an Interrupt_Server_Task\n \n-   Default_Handler : array (HW_Interrupt) of Interfaces.VxWorks.VOIDFUNCPTR;\n-   --  Vectored interrupt handlers installed prior to program startup.\n-   --  These are saved only when the umbrella handler is installed for\n-   --  a given interrupt number.\n+   Handler_Installed : array (HW_Interrupt) of Boolean := (others => False);\n+   --  True if Notify_Interrupt was connected to the interrupt.  Handlers\n+   --  can be connected but disconnection is not possible on VxWorks.\n+   --  Therefore we ensure Notify_Installed is connected at most once.\n \n    -----------------------\n    -- Local Subprograms --\n@@ -215,9 +215,6 @@ package body System.Interrupts is\n    procedure Notify_Interrupt (Param : System.Address);\n    --  Umbrella handler for vectored interrupts (not signals)\n \n-   procedure Install_Default_Action (Interrupt : HW_Interrupt);\n-   --  Restore a handler that was in place prior to program execution\n-\n    procedure Install_Umbrella_Handler\n      (Interrupt : HW_Interrupt;\n       Handler   : Interfaces.VxWorks.VOIDFUNCPTR);\n@@ -448,20 +445,6 @@ package body System.Interrupts is\n       Unimplemented (\"Ignore_Interrupt\");\n    end Ignore_Interrupt;\n \n-   ----------------------------\n-   -- Install_Default_Action --\n-   ----------------------------\n-\n-   procedure Install_Default_Action (Interrupt : HW_Interrupt) is\n-   begin\n-      --  Restore original interrupt handler\n-\n-      Interfaces.VxWorks.intVecSet\n-        (Interfaces.VxWorks.INUM_TO_IVEC (Integer (Interrupt)),\n-         Default_Handler (Interrupt));\n-      Default_Handler (Interrupt) := null;\n-   end Install_Default_Action;\n-\n    ----------------------\n    -- Install_Handlers --\n    ----------------------\n@@ -490,6 +473,17 @@ package body System.Interrupts is\n       end loop;\n    end Install_Handlers;\n \n+   ---------------------------------\n+   -- Install_Restricted_Handlers --\n+   ---------------------------------\n+\n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array) is\n+   begin\n+      for N in Handlers'Range loop\n+         Attach_Handler (Handlers (N).Handler, Handlers (N).Interrupt, True);\n+      end loop;\n+   end Install_Restricted_Handlers;\n+\n    ------------------------------\n    -- Install_Umbrella_Handler --\n    ------------------------------\n@@ -503,10 +497,6 @@ package body System.Interrupts is\n       Vec : constant Interrupt_Vector :=\n               INUM_TO_IVEC (Interfaces.VxWorks.int (Interrupt));\n \n-      Old_Handler : constant VOIDFUNCPTR :=\n-                      intVecGet\n-                        (INUM_TO_IVEC (Interfaces.VxWorks.int (Interrupt)));\n-\n       Stat : Interfaces.VxWorks.STATUS;\n       pragma Unreferenced (Stat);\n       --  ??? shouldn't we test Stat at least in a pragma Assert?\n@@ -517,10 +507,9 @@ package body System.Interrupts is\n       --  when an interrupt occurs, so the umbrella handler has a different\n       --  wrapper generated by intConnect for each interrupt number.\n \n-      if Default_Handler (Interrupt) = null then\n-         Stat :=\n-           intConnect (Vec, Handler, System.Address (Interrupt));\n-         Default_Handler (Interrupt) := Old_Handler;\n+      if not Handler_Installed (Interrupt) then\n+         Stat := intConnect (Vec, Handler, System.Address (Interrupt));\n+         Handler_Installed (Interrupt) := True;\n       end if;\n    end Install_Umbrella_Handler;\n \n@@ -616,8 +605,10 @@ package body System.Interrupts is\n \n    --  Umbrella handler for vectored hardware interrupts (as opposed to\n    --  signals and exceptions).  As opposed to the signal implementation,\n-   --  this handler is only installed in the vector table while there is\n-   --  an active association of an Ada handler to the interrupt.\n+   --  this handler is installed in the vector table when the first Ada\n+   --  handler is attached to the interrupt.  However because VxWorks don't\n+   --  support disconnecting handlers, this subprogram always test wether\n+   --  or not an Ada handler is effectively attached.\n \n    --  Otherwise, the handler that existed prior to program startup is\n    --  in the vector table.  This ensures that handlers installed by\n@@ -633,11 +624,15 @@ package body System.Interrupts is\n    procedure Notify_Interrupt (Param : System.Address) is\n       Interrupt : constant Interrupt_ID := Interrupt_ID (Param);\n \n+      Id : constant SEM_ID := Semaphore_ID_Map (Interrupt);\n+\n       Discard_Result : STATUS;\n       pragma Unreferenced (Discard_Result);\n \n    begin\n-      Discard_Result := semGive (Semaphore_ID_Map (Interrupt));\n+      if Id /= 0 then\n+         Discard_Result := semGive (Id);\n+      end if;\n    end Notify_Interrupt;\n \n    ---------------\n@@ -773,9 +768,6 @@ package body System.Interrupts is\n          use type STATUS;\n \n       begin\n-         --  Hardware interrupt\n-\n-         Install_Default_Action (HW_Interrupt (Interrupt));\n \n          --  Flush server task off semaphore, allowing it to terminate\n \n@@ -1093,6 +1085,10 @@ package body System.Interrupts is\n \n             POP.Write_Lock (Self_Id);\n \n+            --  Unassociate the interrupt handler.\n+\n+            Semaphore_ID_Map (Interrupt) := 0;\n+\n             --  Delete the associated semaphore\n \n             S := semDelete (Int_Sema);\n@@ -1101,7 +1097,6 @@ package body System.Interrupts is\n \n             --  Set status for the Interrupt_Manager\n \n-            Semaphore_ID_Map (Interrupt) := 0;\n             Server_ID (Interrupt) := Null_Task;\n             POP.Unlock (Self_Id);\n "}, {"sha": "3fe420303a6d225044ff2749b0d393d87edc8cd7", "filename": "gcc/ada/s-interr.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -451,6 +451,17 @@ package body System.Interrupts is\n       end loop;\n    end Install_Handlers;\n \n+   ---------------------------------\n+   -- Install_Restricted_Handlers --\n+   ---------------------------------\n+\n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array) is\n+   begin\n+      for N in Handlers'Range loop\n+         Attach_Handler (Handlers (N).Handler, Handlers (N).Interrupt, True);\n+      end loop;\n+   end Install_Restricted_Handlers;\n+\n    ----------------\n    -- Is_Blocked --\n    ----------------\n@@ -942,7 +953,7 @@ package body System.Interrupts is\n \n       --  Abort_Task_Interrupt is one of the Interrupt unmasked\n       --  in all tasks. We mask the Interrupt in this particular task\n-      --  so that \"sigwait\" is possible to catch an explicitely sent\n+      --  so that \"sigwait\" is possible to catch an explicitly sent\n       --  Abort_Task_Interrupt from the Server_Tasks.\n \n       --  This sigwaiting is needed so that we make sure a Server_Task is\n@@ -1228,7 +1239,7 @@ package body System.Interrupts is\n \n       --  Abort_Task_Interrupt is one of the Interrupt unmasked in all tasks.\n       --  We mask the Interrupt in this particular task so that \"sigwait\" is\n-      --  possible to catch an explicitely sent Abort_Task_Interrupt from the\n+      --  possible to catch an explicitly sent Abort_Task_Interrupt from the\n       --  Interrupt_Manager.\n \n       --  There are two Interrupt interrupts that this task catch through\n@@ -1412,7 +1423,7 @@ package body System.Interrupts is\n          end if;\n \n          --  Undefer abort here to allow a window for this task to be aborted\n-         --  at the time of system shutdown. We also explicitely test for\n+         --  at the time of system shutdown. We also explicitly test for\n          --  Pending_Action in case System.Parameters.No_Abort is True.\n \n       end loop;"}, {"sha": "022d05471a3c76369e8b5b3eb056d953cd46efd5", "filename": "gcc/ada/s-interr.ads", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c54ec67ce7019a0f5212ca95054cfe972c587b21/gcc%2Fada%2Fs-interr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.ads?ref=c54ec67ce7019a0f5212ca95054cfe972c587b21", "patch": "@@ -268,4 +268,11 @@ package System.Interrupts is\n    --  Store the old handlers in Object.Previous_Handlers and install\n    --  the new static handlers.\n \n+   procedure Install_Restricted_Handlers (Handlers : New_Handler_Array);\n+   --  Install the static Handlers for the given interrupts and do not store\n+   --  previously installed handlers. This procedure is used when the Ravenscar\n+   --  restrictions are in place since in that case there are only\n+   --  library-level protected handlers that will be installed at\n+   --  initialization and never be replaced.\n+\n end System.Interrupts;"}]}