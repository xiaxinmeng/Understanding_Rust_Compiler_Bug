{"sha": "a31517cb9ababe3195888eb91e7c1aa821540fc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMxNTE3Y2I5YWJhYmUzMTk1ODg4ZWI5MWU3YzFhYTgyMTU0MGZjNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-11-15T19:58:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-11-15T19:58:27Z"}, "message": "libstdc++: Implement LWG 3149 for std::default_constructible\n\nThe change approved in Belfast did not actually rename the concept from\nstd::default_constructible to std::default_initializable, even though\nthat was intended. That is expected to be done soon as a separate issue,\nso I'm implementing that now too.\n\n\t* include/bits/iterator_concepts.h (weakly_incrementable): Adjust.\n\t* include/std/concepts (default_constructible): Rename to\n\tdefault_initializable and require default-list-initialization and\n\tdefault-initialization to be valid (LWG 3149).\n\t(semiregular): Adjust to new name.\n\t* testsuite/std/concepts/concepts.lang/concept.defaultconstructible/\n\t1.cc: Rename directory to concept.defaultinitializable and adjust to\n\tnew name.\n\t* testsuite/std/concepts/concepts.lang/concept.defaultinitializable/\n\tlwg3149.cc: New test.\n\t* testsuite/util/testsuite_iterators.h (test_range): Adjust.\n\nFrom-SVN: r278314", "tree": {"sha": "6f62001b4e6af88518d48534874d32f3f6f97b3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f62001b4e6af88518d48534874d32f3f6f97b3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a31517cb9ababe3195888eb91e7c1aa821540fc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31517cb9ababe3195888eb91e7c1aa821540fc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a31517cb9ababe3195888eb91e7c1aa821540fc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a31517cb9ababe3195888eb91e7c1aa821540fc4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01eb211bade92275e39254cc5a0dc21834dbcac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01eb211bade92275e39254cc5a0dc21834dbcac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01eb211bade92275e39254cc5a0dc21834dbcac4"}], "stats": {"total": 110, "additions": 85, "deletions": 25}, "files": [{"sha": "3e4e898ba819401558572281a6797dff866f2c33", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -1,5 +1,17 @@\n 2019-11-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/iterator_concepts.h (weakly_incrementable): Adjust.\n+\t* include/std/concepts (default_constructible): Rename to\n+\tdefault_initializable and require default-list-initialization and\n+\tdefault-initialization to be valid (LWG 3149).\n+\t(semiregular): Adjust to new name.\n+\t* testsuite/std/concepts/concepts.lang/concept.defaultconstructible/\n+\t1.cc: Rename directory to concept.defaultinitializable and adjust to\n+\tnew name.\n+\t* testsuite/std/concepts/concepts.lang/concept.defaultinitializable/\n+\tlwg3149.cc: New test.\n+\t* testsuite/util/testsuite_iterators.h (test_range): Adjust.\n+\n \t* src/c++17/fs_path.cc [_GLIBCXX_FILESYSTEM_IS_WINDOWS]\n \t(is_disk_designator): New helper function.\n \t(path::_Parser::root_path()): Use is_disk_designator."}, {"sha": "3843ba5d57fa9414941864f9f898680cf880a41a", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -506,7 +506,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// Requirements on types that can be incremented with ++.\n   template<typename _Iter>\n-    concept weakly_incrementable = default_constructible<_Iter>\n+    concept weakly_incrementable = default_initializable<_Iter>\n       && movable<_Iter>\n       && requires(_Iter __i)\n       {"}, {"sha": "98b38940c56e5e25d0dcb6b9937dd8ccfdfb2e5d", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -138,9 +138,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     concept constructible_from\n       = destructible<_Tp> && is_constructible_v<_Tp, _Args...>;\n \n-  /// [concept.defaultconstructible], concept default_constructible\n+  /// [concept.defaultinitializable], concept default_initializable\n   template<typename _Tp>\n-    concept default_constructible = constructible_from<_Tp>;\n+    concept default_initializable = constructible_from<_Tp>\n+      && requires\n+      {\n+\t_Tp{};\n+\t(void) ::new _Tp;\n+      };\n \n   /// [concept.moveconstructible], concept move_constructible\n   template<typename _Tp>\n@@ -249,7 +254,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       && assignable_from<_Tp&, const _Tp&>;\n \n   template<typename _Tp>\n-    concept semiregular = copyable<_Tp> && default_constructible<_Tp>;\n+    concept semiregular = copyable<_Tp> && default_initializable<_Tp>;\n \n   // [concepts.compare], comparison concepts\n "}, {"sha": "ed69e5c17260ecc8564a1f2446ac1066d64b79d4", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.defaultinitializable/1.cc", "status": "renamed", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2F1.cc?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -20,28 +20,28 @@\n \n #include <concepts>\n \n-static_assert( !std::default_constructible<void> );\n-static_assert( std::default_constructible<void*> );\n-static_assert( std::default_constructible<const void*> );\n-static_assert( std::default_constructible<char> );\n-static_assert( std::default_constructible<float> );\n-static_assert( std::default_constructible<const int> );\n-static_assert( std::default_constructible<int*> );\n-static_assert( !std::default_constructible<int&> );\n-static_assert( !std::default_constructible<int&&> );\n-static_assert( !std::default_constructible<const int&> );\n-static_assert( !std::default_constructible<int[]> );\n-static_assert( std::default_constructible<int[2]> );\n-static_assert( !std::default_constructible<int()> );\n-static_assert( std::default_constructible<int(*)()> );\n-static_assert( !std::default_constructible<int(&)()> );\n+static_assert( !std::default_initializable<void> );\n+static_assert( std::default_initializable<void*> );\n+static_assert( std::default_initializable<const void*> );\n+static_assert( std::default_initializable<char> );\n+static_assert( std::default_initializable<float> );\n+static_assert( !std::default_initializable<const int> );\n+static_assert( std::default_initializable<int*> );\n+static_assert( !std::default_initializable<int&> );\n+static_assert( !std::default_initializable<int&&> );\n+static_assert( !std::default_initializable<const int&> );\n+static_assert( !std::default_initializable<int[]> );\n+static_assert( std::default_initializable<int[2]> );\n+static_assert( !std::default_initializable<int()> );\n+static_assert( std::default_initializable<int(*)()> );\n+static_assert( !std::default_initializable<int(&)()> );\n \n enum E { };\n-static_assert( std::default_constructible<E> );\n+static_assert( std::default_initializable<E> );\n enum class CE { };\n-static_assert( std::default_constructible<CE> );\n+static_assert( std::default_initializable<CE> );\n struct A { };\n-static_assert( std::default_constructible<A> );\n+static_assert( std::default_initializable<A> );\n union B { };\n static_assert( std::constructible_from<B> );\n \n@@ -50,7 +50,7 @@ struct C\n   C(void* = nullptr) { }\n   ~C() noexcept(false) { }\n };\n-static_assert( !std::default_constructible<C> );\n+static_assert( !std::default_initializable<C> );\n \n class D\n {\n@@ -60,4 +60,4 @@ class D\n private:\n   ~D() { }\n };\n-static_assert( !std::default_constructible<D> );\n+static_assert( !std::default_initializable<D> );", "previous_filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.defaultconstructible/1.cc"}, {"sha": "024601ba86422472c5d1099a1a41907823a528ba", "filename": "libstdc++-v3/testsuite/std/concepts/concepts.lang/concept.defaultinitializable/lwg3149.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2Flwg3149.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2Flwg3149.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Fconcepts%2Fconcepts.lang%2Fconcept.defaultinitializable%2Flwg3149.cc?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <concepts>\n+\n+// Default-initialization of const T is only valid for class types that are\n+// const-default-constructible.\n+static_assert( !std::default_initializable<const int> );\n+static_assert( !std::default_initializable<const int[1]> );\n+struct A { int i; };\n+static_assert( !std::default_initializable<const A> );\n+static_assert( !std::default_initializable<const A[1]> );\n+struct B { int i; long l; };\n+static_assert( !std::default_initializable<const B> );\n+static_assert( !std::default_initializable<const B[1]> );\n+struct C : A { };\n+static_assert( !std::default_initializable<const C> );\n+static_assert( !std::default_initializable<const C[1]> );\n+struct D { A a; };\n+static_assert( !std::default_initializable<const D> );\n+static_assert( !std::default_initializable<const D[1]> );\n+\n+struct S0 { explicit S0() = default; };\n+struct S1 { S0 x; }; // Note: aggregate\n+// S1{} would be ill-formed, due to copy-list-initialization of S1::x from {}\n+static_assert( !std::default_initializable<S1> );"}, {"sha": "13993a4209b59cf21b3c4e4d2c2763c983bd00c3", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a31517cb9ababe3195888eb91e7c1aa821540fc4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=a31517cb9ababe3195888eb91e7c1aa821540fc4", "patch": "@@ -682,7 +682,7 @@ namespace __gnu_test\n       auto\n       get_iterator(T* p)\n       {\n-\tif constexpr (std::default_constructible<Iter<T>>)\n+\tif constexpr (std::default_initializable<Iter<T>>)\n \t  return Iter<T>(p, &bounds);\n \telse\n \t  return iterator(p, &bounds);"}]}