{"sha": "5fd4bc96306dccae16acb28c38ab63f213555c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkNGJjOTYzMDZkY2NhZTE2YWNiMjhjMzhhYjYzZjIxMzU1NWMwNA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-09-19T10:37:40Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-09-19T10:37:40Z"}, "message": "[Patch] Teach genrecog/genoutput that scratch registers require write  constraint modifiers\n\ngcc/\n\n\t* doc/md.texi (Modifiers): Consistently use \"read/write\"\n\tnomenclature rather than \"input/output\".\n\t* genrecog.c (constraints_supported_in_insn_p): New.\n\t(validate_pattern): If needed, also check constraints on\n\tMATCH_SCRATCH operands.\n\t* genoutput.c (validate_insn_alternatives): Catch earlyclobber\n\toperands with no '=' or '+' modifier.\n\nFrom-SVN: r215388", "tree": {"sha": "8bd390b80abad2692fc08820202511642a15bafb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bd390b80abad2692fc08820202511642a15bafb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fd4bc96306dccae16acb28c38ab63f213555c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd4bc96306dccae16acb28c38ab63f213555c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fd4bc96306dccae16acb28c38ab63f213555c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fd4bc96306dccae16acb28c38ab63f213555c04/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "727dc1217d05e7879a782b534deb0ec65bce5c91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/727dc1217d05e7879a782b534deb0ec65bce5c91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/727dc1217d05e7879a782b534deb0ec65bce5c91"}], "stats": {"total": 115, "additions": 87, "deletions": 28}, "files": [{"sha": "c2200fcdc426b94a471a1727ca08e5c628ae9f5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5fd4bc96306dccae16acb28c38ab63f213555c04", "patch": "@@ -1,3 +1,13 @@\n+2014-09-19  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* doc/md.texi (Modifiers): Consistently use \"read/write\"\n+\tnomenclature rather than \"input/output\".\n+\t* genrecog.c (constraints_supported_in_insn_p): New.\n+\t(validate_pattern): If needed, also check constraints on\n+\tMATCH_SCRATCH operands.\n+\t* genoutput.c (validate_insn_alternatives): Catch earlyclobber\n+\toperands with no '=' or '+' modifier.\n+\n 2014-09-19  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.md (stack_protect_test_<mode>): Mark"}, {"sha": "435d8500953e824f0b1ef21e709349a065b397bc", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=5fd4bc96306dccae16acb28c38ab63f213555c04", "patch": "@@ -1546,18 +1546,18 @@ Here are constraint modifier characters.\n @table @samp\n @cindex @samp{=} in constraint\n @item =\n-Means that this operand is write-only for this instruction: the previous\n-value is discarded and replaced by output data.\n+Means that this operand is written to by this instruction:\n+the previous value is discarded and replaced by new data.\n \n @cindex @samp{+} in constraint\n @item +\n Means that this operand is both read and written by the instruction.\n \n When the compiler fixes up the operands to satisfy the constraints,\n-it needs to know which operands are inputs to the instruction and\n-which are outputs from it.  @samp{=} identifies an output; @samp{+}\n-identifies an operand that is both input and output; all other operands\n-are assumed to be input only.\n+it needs to know which operands are read by the instruction and\n+which are written by it.  @samp{=} identifies an operand which is only\n+written; @samp{+} identifies an operand that is both read and written; all\n+other operands are assumed to only be read.\n \n If you specify @samp{=} or @samp{+} in a constraint, you put it in the\n first character of the constraint string.\n@@ -1566,34 +1566,37 @@ first character of the constraint string.\n @cindex earlyclobber operand\n @item &\n Means (in a particular alternative) that this operand is an\n-@dfn{earlyclobber} operand, which is modified before the instruction is\n+@dfn{earlyclobber} operand, which is written before the instruction is\n finished using the input operands.  Therefore, this operand may not lie\n-in a register that is used as an input operand or as part of any memory\n+in a register that is read by the instruction or as part of any memory\n address.\n \n @samp{&} applies only to the alternative in which it is written.  In\n constraints with multiple alternatives, sometimes one alternative\n requires @samp{&} while others do not.  See, for example, the\n @samp{movdf} insn of the 68000.\n \n-An input operand can be tied to an earlyclobber operand if its only\n-use as an input occurs before the early result is written.  Adding\n-alternatives of this form often allows GCC to produce better code\n-when only some of the inputs can be affected by the earlyclobber.\n-See, for example, the @samp{mulsi3} insn of the ARM@.\n+A operand which is read by the instruction can be tied to an earlyclobber\n+operand if its only use as an input occurs before the early result is\n+written.  Adding alternatives of this form often allows GCC to produce\n+better code when only some of the read operands can be affected by the\n+earlyclobber. See, for example, the @samp{mulsi3} insn of the ARM@.\n \n-Furthermore, if the @dfn{earlyclobber} operand is also read/write operand, then\n-that operand is modified only after it's used.\n+Furthermore, if the @dfn{earlyclobber} operand is also a read/write\n+operand, then that operand is written only after it's used.\n \n-@samp{&} does not obviate the need to write @samp{=} or @samp{+}.\n+@samp{&} does not obviate the need to write @samp{=} or @samp{+}.  As\n+@dfn{earlyclobber} operands are always written, a read-only\n+@dfn{earlyclobber} operand is ill-formed and will be rejected by the\n+compiler.\n \n @cindex @samp{%} in constraint\n @item %\n Declares the instruction to be commutative for this operand and the\n following operand.  This means that the compiler may interchange the\n two operands if that is the cheapest way to make all operands fit the\n constraints.  @samp{%} applies to all alternatives and must appear as\n-the first character in the constraint.  Only input operands can use\n+the first character in the constraint.  Only read-only operands can use\n @samp{%}.\n \n @ifset INTERNALS"}, {"sha": "b1321d83ac39eb5f8cd639f30c63513c9df03a99", "filename": "gcc/genoutput.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=5fd4bc96306dccae16acb28c38ab63f213555c04", "patch": "@@ -769,6 +769,7 @@ validate_insn_alternatives (struct data *d)\n \tchar c;\n \tint which_alternative = 0;\n \tint alternative_count_unsure = 0;\n+\tbool seen_write = false;\n \n \tfor (p = d->operand[start].constraint; (c = *p); p += len)\n \t  {\n@@ -777,6 +778,18 @@ validate_insn_alternatives (struct data *d)\n \t      error_with_line (d->lineno,\n \t\t\t       \"character '%c' can only be used at the\"\n \t\t\t       \" beginning of a constraint string\", c);\n+\n+\t    if (c == '=' || c == '+')\n+\t      seen_write = true;\n+\n+\t    /* Earlyclobber operands must always be marked write-only\n+\t       or read/write.  */\n+\t    if (!seen_write && c == '&')\n+\t      error_with_line (d->lineno,\n+\t\t\t       \"earlyclobber operands may not be\"\n+\t\t\t       \" read-only in alternative %d\",\n+\t\t\t       which_alternative);\n+\n \t    if (ISSPACE (c) || strchr (indep_constraints, c))\n \t      len = 1;\n \t    else if (ISDIGIT (c))"}, {"sha": "b3b5bb46addcf78536d2db3bbc7aa9227afc25e2", "filename": "gcc/genrecog.c", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fd4bc96306dccae16acb28c38ab63f213555c04/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=5fd4bc96306dccae16acb28c38ab63f213555c04", "patch": "@@ -415,6 +415,18 @@ find_matching_operand (rtx pattern, int n)\n   return NULL;\n }\n \n+/* In DEFINE_EXPAND, DEFINE_SPLIT, and DEFINE_PEEPHOLE2, we\n+   don't use the MATCH_OPERAND constraint, only the predicate.\n+   This is confusing to folks doing new ports, so help them\n+   not make the mistake.  */\n+\n+static bool\n+constraints_supported_in_insn_p (rtx insn)\n+{\n+  return !(GET_CODE (insn) == DEFINE_EXPAND\n+\t   || GET_CODE (insn) == DEFINE_SPLIT\n+\t   || GET_CODE (insn) == DEFINE_PEEPHOLE2);\n+}\n \n /* Check for various errors in patterns.  SET is nonnull for a destination,\n    and is the complete set pattern.  SET_CODE is '=' for normal sets, and\n@@ -432,7 +444,32 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n   switch (code)\n     {\n     case MATCH_SCRATCH:\n-      return;\n+      {\n+\tconst char constraints0 = XSTR (pattern, 1)[0];\n+\n+\tif (!constraints_supported_in_insn_p (insn))\n+\t  {\n+\t    if (constraints0)\n+\t      {\n+\t\terror_with_line (pattern_lineno,\n+\t\t\t\t \"constraints not supported in %s\",\n+\t\t\t\t rtx_name[GET_CODE (insn)]);\n+\t      }\n+\t    return;\n+\t  }\n+\n+\t/* If a MATCH_SCRATCH is used in a context requiring an write-only\n+\t   or read/write register, validate that.  */\n+\tif (set_code == '='\n+\t    && constraints0 != '='\n+\t    && constraints0 != '+')\n+\t  {\n+\t    error_with_line (pattern_lineno,\n+\t\t\t     \"operand %d missing output reload\",\n+\t\t\t     XINT (pattern, 0));\n+\t  }\n+\treturn;\n+      }\n     case MATCH_DUP:\n     case MATCH_OP_DUP:\n     case MATCH_PAR_DUP:\n@@ -467,18 +504,14 @@ validate_pattern (rtx pattern, rtx insn, rtx set, int set_code)\n \t  {\n \t    const char constraints0 = XSTR (pattern, 2)[0];\n \n-\t    /* In DEFINE_EXPAND, DEFINE_SPLIT, and DEFINE_PEEPHOLE2, we\n-\t       don't use the MATCH_OPERAND constraint, only the predicate.\n-\t       This is confusing to folks doing new ports, so help them\n-\t       not make the mistake.  */\n-\t    if (GET_CODE (insn) == DEFINE_EXPAND\n-\t\t|| GET_CODE (insn) == DEFINE_SPLIT\n-\t\t|| GET_CODE (insn) == DEFINE_PEEPHOLE2)\n+\t    if (!constraints_supported_in_insn_p (insn))\n \t      {\n \t\tif (constraints0)\n-\t\t  error_with_line (pattern_lineno,\n-\t\t\t\t   \"constraints not supported in %s\",\n-\t\t\t\t   rtx_name[GET_CODE (insn)]);\n+\t\t  {\n+\t\t    error_with_line (pattern_lineno,\n+\t\t\t\t     \"constraints not supported in %s\",\n+\t\t\t\t     rtx_name[GET_CODE (insn)]);\n+\t\t  }\n \t      }\n \n \t    /* A MATCH_OPERAND that is a SET should have an output reload.  */"}]}