{"sha": "6f4229658a77a80aedbe50f435ea8c693e745583", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0MjI5NjU4YTc3YTgwYWVkYmU1MGY0MzVlYThjNjkzZTc0NTU4Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-11T19:13:59Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-11T19:13:59Z"}, "message": "Add wchar_t counterparts of the basic_streambbuf<char> tests.\n\n2004-07-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tAdd wchar_t counterparts of the basic_streambbuf<char> tests.\n\t* testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc: New.\n\t* testsuite/27_io/basic_streambuf/imbue/wchar_t/1.cc, 9322.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/9701-3.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc, 2.cc,\n\t3599.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputbackc/wchar_t/9538.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc, 1057.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_streambuf/sync/wchar_t/1057.cc: Likewise.\n\n\t* testsuite/27_io/basic_streambuf/imbue/char/1.cc, 9322.cc: Minor\n\ttweaks.\n\t* testsuite/27_io/basic_streambuf/overflow/char/2.cc, 3599.cc:\n\tLikewise.\n\t* testsuite/27_io/basic_streambuf/sputn/char/1057.cc: Likewise.\n\t* testsuite/27_io/basic_streambuf/sync/char/1057.cc: Likewise.\n\nFrom-SVN: r84526", "tree": {"sha": "c22f42857af14d7d2783e7b05df4aecad23368a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c22f42857af14d7d2783e7b05df4aecad23368a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4229658a77a80aedbe50f435ea8c693e745583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4229658a77a80aedbe50f435ea8c693e745583", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4229658a77a80aedbe50f435ea8c693e745583", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4229658a77a80aedbe50f435ea8c693e745583/comments", "author": null, "committer": null, "parents": [{"sha": "9675412fd923871ec44eb30d70d3ef0f9d7811b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9675412fd923871ec44eb30d70d3ef0f9d7811b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9675412fd923871ec44eb30d70d3ef0f9d7811b6"}], "stats": {"total": 1280, "additions": 1274, "deletions": 6}, "files": [{"sha": "f7a49d7c355b0919b6538ad1a5828daa8da58565", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -1,3 +1,27 @@\n+2004-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tAdd wchar_t counterparts of the basic_streambbuf<char> tests.\n+\t* testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc: New.\n+\t* testsuite/27_io/basic_streambuf/imbue/wchar_t/1.cc, 9322.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_streambuf/in_avail/wchar_t/9701-3.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc, 2.cc,\n+\t3599.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputbackc/wchar_t/9538.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc, 1057.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_streambuf/sync/wchar_t/1057.cc: Likewise.\n+\n+\t* testsuite/27_io/basic_streambuf/imbue/char/1.cc, 9322.cc: Minor\n+\ttweaks.\n+\t* testsuite/27_io/basic_streambuf/overflow/char/2.cc, 3599.cc:\n+\tLikewise.\n+\t* testsuite/27_io/basic_streambuf/sputn/char/1057.cc: Likewise.\n+\t* testsuite/27_io/basic_streambuf/sync/char/1057.cc: Likewise.\n+\n 2004-07-11  Phil Edwards  <phil@codesourcery.com>\n \n \t* acinclude.m4:  Cosmetic shell syntax fixes."}, {"sha": "a97b35f4d11ba9cce29c7d7d1d76d5fd94f5e992", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/cons/wchar_t/1.cc", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fcons%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,111 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::wstreambuf::traits_type traits_type;\n+  typedef std::wstreambuf::char_type char_type;\n+\n+  testbuf(): std::wstreambuf() \n+  { }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test __attribute__((unused)) = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(wchar_t* beg, wchar_t* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  testbuf buf01;\n+\n+  // 27.5.2.1 basic_streambuf ctors\n+  // default ctor initializes \n+  // - all pointer members to null pointers\n+  // - locale to current global locale\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "24469ba99de39a9c06b7ee5f11abe3f4293a0cd2", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/char/1.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -20,6 +20,7 @@\n // USA.\n \n #include <streambuf>\n+#include <locale>\n #include <testsuite_hooks.h>\n \n class testbuf : public std::streambuf"}, {"sha": "964fcca3cf3d9e494e879fbdd1819de84a02cf7e", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/char/9322.cc", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fchar%2F9322.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -29,10 +29,8 @@\n \n // 27.5.2 template class basic_streambuf\n \n-#include <cstring> // for memset, memcmp\n #include <streambuf>\n-#include <sstream>\n-#include <ostream>\n+#include <locale>\n #include <testsuite_hooks.h>\n \n class testbuf : public std::streambuf"}, {"sha": "3f735fdae518fafaf9938c228a71dba70c35192f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/wchar_t/1.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,53 @@\n+// 981208 bkoz test functionality of basic_streambuf for char_type == wchar_t\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <streambuf>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+  typedef std::wstreambuf::traits_type traits_type;\n+\n+  testbuf() : std::wstreambuf() { }\n+};\n+\n+// test the streambuf locale settings\n+void test02() \n+{\n+  testbuf buf;\n+  std::locale loc_c = std::locale::classic();\n+  loc_c = buf.getloc();\n+  buf.pubimbue(loc_c); //This should initialize _M_init to true\n+  std::locale loc_tmp = buf.getloc(); \n+  VERIFY( loc_tmp == loc_c );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+\n+// more candy!!!"}, {"sha": "68a467822a0a4bda3188ab8da8556214c83b16f7", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/imbue/wchar_t/9322.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F9322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F9322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fimbue%2Fwchar_t%2F9322.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,71 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+  typedef std::wstreambuf::traits_type traits_type;\n+\n+  testbuf() : std::wstreambuf() { }\n+};\n+\n+// libstdc++/9322\n+void test08()\n+{\n+  using std::locale;\n+  bool test __attribute__((unused)) = true;\n+\n+  locale loc;\n+  testbuf ob;\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale::global(__gnu_test::try_named_locale(\"en_US\"));\n+  VERIFY( ob.getloc() == loc );\n+\n+  locale loc_de = __gnu_test::try_named_locale(\"de_DE\");\n+  locale ret = ob.pubimbue(loc_de);\n+  VERIFY( ob.getloc() == loc_de );\n+  VERIFY( ret == loc );\n+\n+  locale::global(loc);\n+  VERIFY( ob.getloc() == loc_de );\n+}\n+\n+int main() \n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "239f790fe473a124a2cfebef5ed8146e47b265c3", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/in_avail/wchar_t/9701-3.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F9701-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F9701-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fin_avail%2Fwchar_t%2F9701-3.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.5.2.2.3 Get area\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+class Derived_fbuf : public std::wfilebuf\n+{\n+public:\n+  const char_type* pub_egptr() const\n+  { return egptr(); }\n+\n+  const char_type* pub_gptr() const\n+  { return gptr(); }\n+};\n+\n+// libstdc++/9701 (in_avail)\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  const char* name = \"tmp_file1_w\";\n+\n+  Derived_fbuf df2;\n+  df2.open(name, ios_base::in | ios_base::out | ios_base::trunc);\n+\n+  df2.sputn(L\"Comomoc\", 7);\n+\n+  df2.pubseekoff(0, ios_base::beg);\n+  df2.sbumpc();\n+  df2.sputbackc(L't');\n+\n+  VERIFY( df2.pub_gptr() < df2.pub_egptr() );\n+  VERIFY( df2.in_avail() == df2.pub_egptr() - df2.pub_gptr() );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "dbf79bd384a7747bd945cadd12de7eb0767f6dfa", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/2.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F2.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -31,6 +31,7 @@\n \n #include <streambuf>\n #include <ostream>\n+#include <string>\n #include <testsuite_hooks.h>\n \n // test03"}, {"sha": "82040cdf3428b14fce1f82bf27c93ef2ab0925d4", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/char/3599.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fchar%2F3599.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -55,10 +55,10 @@ test07()\n   std::ostream out(&ob); \n \n   out << \"gasp\";\n-  VERIFY(out.good());\n+  VERIFY( out.good() );\n \n   out << std::endl;\n-  VERIFY(out.good());\n+  VERIFY( out.good() );\n }\n \n int main() "}, {"sha": "0bada3a73575ea717ec93e5b5dd3634e5f112247", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/wchar_t/1.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,119 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::wstreambuf::traits_type traits_type;\n+  typedef std::wstreambuf::char_type char_type;\n+\n+  testbuf(): std::wstreambuf() \n+  { }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test __attribute__((unused)) = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(wchar_t* beg, wchar_t* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  wchar_t lit01[52];\n+  std::wcscpy(lit01, L\"chicago underground trio/possible cube on delmark\");\n+  testbuf buf01;\n+\n+  // pbackfail\n+  int i01 = 3;\n+  buf01.pub_setg(lit01, lit01, (lit01 + i01));\n+  VERIFY( i01 == buf01.in_avail() );\n+  int_type intt01 = traits_type::to_int_type(L'b');\n+  VERIFY( traits_type::eof() == buf01.pub_pbackfail(intt01) );\n+\n+  // overflow\n+  VERIFY( traits_type::eof() == buf01.pub_overflow(intt01) );\n+  VERIFY( traits_type::eof() == buf01.pub_overflow() );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[0]) );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "87a650c7fc6f3e6f70bedd4efd32f85911d94278", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/wchar_t/2.cc", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F2.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,81 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <ostream>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// test03\n+// http://gcc.gnu.org/ml/libstdc++/2000-q1/msg00151.html\n+template<typename charT, typename traits = std::char_traits<charT> >\n+  class basic_nullbuf : public std::basic_streambuf<charT, traits>\n+  {\n+  protected:\n+    typedef typename\n+      std::basic_streambuf<charT, traits>::int_type int_type;\n+    virtual int_type \n+    overflow(int_type c) \n+    {  return traits::not_eof(c); }\n+  };\n+\n+typedef basic_nullbuf<wchar_t> nullbuf;\n+\n+template<typename T>\n+  wchar_t\n+  print(const T& x) \n+  {\n+   nullbuf ob;\n+   std::wostream out(&ob); \n+   out << x << std::endl;\n+   return (!out ? L'0' : L'1');\n+ }\n+\n+void test03() \n+{\n+  bool test __attribute__((unused)) = true;\n+  const std::wstring control01(L\"11111\");\n+  std::wstring test01;\n+\n+  test01 += print(true);\n+  test01 += print(3.14159);\n+  test01 += print(10);\n+  test01 += print(L'x');\n+  test01 += print(L\"pipo\");\n+\n+  VERIFY( test01 == control01 );\n+}\n+\n+int main() \n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "b0dcd1637e2624054b9c157ad1469dcd4bbcf10f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/overflow/wchar_t/3599.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F3599.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F3599.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Foverflow%2Fwchar_t%2F3599.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,68 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/3599\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+  typedef std::wstreambuf::traits_type traits_type;\n+\n+  testbuf() : std::wstreambuf() { }\n+ \n+protected:\n+  int_type \n+  overflow(int_type c __attribute__((unused)) = traits_type::eof()) \n+  { return traits_type::not_eof(0); }\n+};\n+\n+void\n+test07()\n+{\n+  bool test __attribute__((unused)) = true;\n+  testbuf ob;\n+  std::wostream out(&ob); \n+\n+  out << L\"gasp\";\n+  VERIFY( out.good() );\n+\n+  out << std::endl;\n+  VERIFY( out.good() );\n+}\n+\n+int main() \n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "1b0137e0db3c19d6b97c56b6a90d7664d027533b", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetc/wchar_t/1.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetc%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,121 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::wstreambuf::traits_type traits_type;\n+  typedef std::wstreambuf::char_type char_type;\n+\n+  testbuf(): std::wstreambuf() \n+  { }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test __attribute__((unused)) = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(wchar_t* beg, wchar_t* end)\n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  wchar_t lit01[52];\n+  std::wcscpy(lit01, L\"chicago underground trio/possible cube on delmark\");\n+  testbuf buf01;\n+\n+  // 27.5.2.3.1 get area\n+  // 27.5.2.2.3 get area\n+  // 27.5.2.4.3 get area\n+  int i01 = 3;\n+  buf01.pub_setg(lit01, lit01, (lit01 + i01));\n+  VERIFY( i01 == buf01.in_avail() );\n+\n+  VERIFY( buf01.pub_uflow() == lit01[0] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[1]) );\n+  VERIFY( buf01.pub_uflow() == lit01[1] );\n+  VERIFY( buf01.sgetc() == traits_type::to_int_type(lit01[2]) );\n+  VERIFY( buf01.pub_uflow() == lit01[2] );\n+  VERIFY( buf01.sgetc() == traits_type::eof() );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d67f94aafb99fcbeb98683a69d699c18afd1e293", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sgetn/wchar_t/1.cc", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsgetn%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,133 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::wstreambuf::traits_type traits_type;\n+  typedef std::wstreambuf::char_type char_type;\n+\n+  testbuf(): std::wstreambuf() \n+  { }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test __attribute__((unused)) = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(wchar_t* beg, wchar_t* end) \n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test02()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  const wchar_t* lit00 = L\"chicago underground trio/possible cube on delmark\";\n+  size_t i01 = traits_type::length(lit00);\n+  wchar_t lit01[i01];\n+  std::wcscpy(lit01, lit00);\n+\n+  testbuf buf01;\n+\n+  // 27.5.2.1 basic_streambuf ctors\n+  // default ctor initializes \n+  // - all pointer members to null pointers\n+  // - locale to current global locale\n+  VERIFY( buf01.check_pointers() );\n+  VERIFY( buf01.getloc() == std::locale() );\n+\n+  // 27.5.2.2.5 Put area\n+\n+  wchar_t carray01[i01];\n+  std::wmemset(carray01, 0, i01);\n+  \n+  buf01.pub_setg(lit01, lit01, lit01 + i01);\n+  buf01.sgetn(carray01, 0);\n+  VERIFY( carray01[0] == 0 );\n+  buf01.sgetn(carray01, 1);\n+  VERIFY( carray01[0] == L'c' );\n+  buf01.sgetn(carray01 + 1, i01 - 1);\n+  VERIFY( carray01[0] == L'c' );\n+  VERIFY( carray01[1] == L'h' );\n+  VERIFY( carray01[i01 - 1] == L'k' );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "19e794d18517e62f09320c752eb7e3833212662f", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputbackc/wchar_t/9538.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fwchar_t%2F9538.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fwchar_t%2F9538.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputbackc%2Fwchar_t%2F9538.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,66 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <streambuf>\n+#include <locale>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+class MyTraits : public std::char_traits<wchar_t>\n+{\n+public:\n+  static bool eq(wchar_t c1, wchar_t c2)\n+  {\n+    bool test __attribute__((unused)) = true;\n+    VERIFY( c1 != L'X' );\n+    VERIFY( c2 != L'X' );\n+    return std::char_traits<wchar_t>::eq(c1, c2);\n+  }\n+};\n+\n+class MyBuf : public std::basic_streambuf<wchar_t, MyTraits>\n+{\n+  wchar_t buffer[8];\n+\n+public:\n+  MyBuf()\n+  {\n+    std::wmemset(buffer, L'X', sizeof(buffer) / sizeof(buffer[0]));\n+    std::wmemset(buffer + 2, L'f', 4);\n+    setg(buffer + 2, buffer + 2, buffer + 6);\n+  }\n+};\n+\n+// libstdc++/9538\n+void test08()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  MyBuf mb;\n+  mb.sputbackc(L'a');\n+}\n+\n+int main() \n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "01dc431b10d4c326452e791b53c65ba91cd3ba90", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputc/wchar_t/1057.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputc%2Fwchar_t%2F1057.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,62 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <string>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::wstreambuf\n+{\n+  wchar_t foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::wstring text1 = L\"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as sputc writes to null pointer\n+  nsp.sputc(L'a');\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f3b40500a8a75fc7961de54e00479d562c441577", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/char/1057.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fchar%2F1057.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -30,7 +30,7 @@\n // 27.5.2 template class basic_streambuf\n \n #include <streambuf>\n-#include <sstream>\n+#include <string>\n #include <testsuite_hooks.h>\n \n class nullsetpbuf : public std::streambuf"}, {"sha": "d638b79dc56c3bab7c3cf0d3d3285c55c5055eef", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/wchar_t/1.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,127 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <cwchar>\n+#include <testsuite_hooks.h>\n+\n+class testbuf : public std::wstreambuf\n+{\n+public:\n+\n+  // Typedefs:\n+  typedef std::wstreambuf::traits_type traits_type;\n+  typedef std::wstreambuf::char_type char_type;\n+\n+  testbuf(): std::wstreambuf() \n+  { }\n+\n+  bool\n+  check_pointers()\n+  { \n+    bool test __attribute__((unused)) = true;\n+    VERIFY( this->eback() == NULL );\n+    VERIFY( this->gptr() == NULL );\n+    VERIFY( this->egptr() == NULL );\n+    VERIFY( this->pbase() == NULL );\n+    VERIFY( this->pptr() == NULL );\n+    VERIFY( this->epptr() == NULL );\n+    return test;\n+  }\n+\n+  int_type \n+  pub_uflow() \n+  { return (this->uflow()); }\n+\n+  int_type \n+  pub_overflow(int_type __c = traits_type::eof()) \n+  { return (this->overflow(__c)); }\n+\n+  int_type \n+  pub_pbackfail(int_type __c) \n+  { return (this->pbackfail(__c)); }\n+\n+  void \n+  pub_setg(wchar_t* beg, wchar_t* cur, wchar_t* end) \n+  { this->setg(beg, cur, end); }\n+\n+  void \n+  pub_setp(wchar_t* beg, wchar_t* end)\n+  { this->setp(beg, end); }\n+\n+protected:\n+  int_type \n+  underflow() \n+  { \n+    int_type __retval = traits_type::eof();\n+    if (this->gptr() < this->egptr())\n+      __retval = traits_type::not_eof(0); \n+    return __retval;\n+  }\n+};\n+\n+void test01()\n+{\n+  typedef testbuf::traits_type traits_type;\n+  typedef testbuf::int_type int_type;\n+\n+  bool test __attribute__((unused)) = true;\n+  testbuf buf01;\n+\n+  // sputn/xsputn\n+  const wchar_t* lit01 = L\"isotope 217: the unstable molecule on thrill jockey\";\n+  const int i02 = std::wcslen(lit01);\n+  wchar_t lit02[i02];\n+  std::wcscpy(lit02, lit01);\n+\n+  wchar_t carray[i02 + 1];\n+  std::wmemset(carray, 0, i02 + 1);\n+\n+  buf01.pub_setp(carray, (carray + i02));\n+  buf01.sputn(lit02, 0);\n+  VERIFY( carray[0] == 0 );\n+  VERIFY( lit02[0] == L'i' );\n+  buf01.sputn(lit02, 1);\n+  VERIFY( lit02[0] == carray[0] );\n+  VERIFY( lit02[1] == L's' );\n+  VERIFY( carray[1] == 0 );\n+  buf01.sputn(lit02 + 1, 10);\n+  VERIFY( std::memcmp(lit02, carray, 10) == 0 );\n+  buf01.sputn(lit02 + 11, 20);\n+  VERIFY( std::memcmp(lit02, carray, 30) == 0 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d25b015c5a24cbaa939c54fce98fad80391594b3", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sputn/wchar_t/1057.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsputn%2Fwchar_t%2F1057.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,62 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+class nullsetpbuf : public std::wstreambuf\n+{\n+  wchar_t foo[64];\n+public:\n+  nullsetpbuf()\n+  {\n+    setp(foo, foo + 64);\n+    setp(NULL, NULL);\n+  }\n+};\n+\n+// libstdc++/1057\n+void test05()\n+{\n+  std::wstring text1 = L\"abcdefghijklmn\";\n+  \n+  nullsetpbuf nsp;\n+  // Immediate crash as xsputn writes to null pointer\n+  nsp.sputn(text1.c_str(), text1.length());\n+}\n+\n+int main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "9bc2ac00664b7425cdf1902adb080cc14665e3ed", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sync/char/1057.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fchar%2F1057.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -30,6 +30,7 @@\n // 27.5.2 template class basic_streambuf\n \n #include <streambuf>\n+#include <string>\n #include <testsuite_hooks.h>\n \n class setpbuf : public std::streambuf"}, {"sha": "5877cc1be0e51ca406acd3fb832a9a6e5628818b", "filename": "libstdc++-v3/testsuite/27_io/basic_streambuf/sync/wchar_t/1057.cc", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fwchar_t%2F1057.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4229658a77a80aedbe50f435ea8c693e745583/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fwchar_t%2F1057.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_streambuf%2Fsync%2Fwchar_t%2F1057.cc?ref=6f4229658a77a80aedbe50f435ea8c693e745583", "patch": "@@ -0,0 +1,110 @@\n+// 1999-10-11 bkoz\n+\n+// Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.5.2 template class basic_streambuf\n+\n+#include <streambuf>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+class setpbuf : public std::wstreambuf\n+{\n+  wchar_t\tbuffer[4];\n+  std::wstring \tresult;\n+\n+public:\n+\n+  std::wstring&\n+  get_result()\n+  { return result; }\n+\n+  setpbuf()\n+  {\n+    wchar_t foo[32];\n+    setp(foo, foo + 32);\n+    setp(buffer, buffer + 4);\n+  }\n+\n+  ~setpbuf()\n+  { sync(); }\n+\n+  virtual int_type \n+  overflow(int_type n)\n+  {\n+    if (sync() != 0)\n+      return traits_type::eof();\n+    \n+    result += traits_type::to_char_type(n);\n+    \n+    return n;\n+  }\n+  \n+  virtual int \n+  sync()\n+  {\n+    result.append(pbase(), pptr());\n+    setp(buffer, buffer + 4);\n+    return 0;\n+  }\n+};\n+\n+// libstdc++/1057\n+void test04()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::wstring text = L\"abcdefghijklmn\";\n+  \n+  // 01\n+  setpbuf sp1;\n+  // Here xsputn writes over sp1.result\n+  sp1.sputn(text.c_str(), text.length());\n+\n+  // This crashes when result is accessed\n+  sp1.pubsync();\n+  VERIFY( sp1.get_result() == text );\n+  \n+  // 02\n+  setpbuf sp2;\n+  for (std::wstring::size_type i = 0; i < text.length(); ++i)\n+    {\n+      // sputc also writes over result\n+      sp2.sputc(text[i]);\n+    }\n+  \n+  // Crash here\n+  sp2.pubsync();\n+  VERIFY( sp2.get_result() == text );\n+}\n+\n+int main() \n+{\n+  test04();\n+  return 0;\n+}"}]}