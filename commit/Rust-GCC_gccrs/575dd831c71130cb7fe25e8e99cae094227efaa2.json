{"sha": "575dd831c71130cb7fe25e8e99cae094227efaa2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc1ZGQ4MzFjNzExMzBjYjdmZTI1ZThlOTljYWUwOTQyMjdlZmFhMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-08-24T04:11:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-08-24T04:11:23Z"}, "message": "c_locale_gnu.cc: Minor tweaks.\n\n\n2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* config/locale/c_locale_gnu.cc: Minor tweaks.\n\t(moneypunct<wchar_t>): Implement.\n\t* include/bits/locale_facets.h: Same.\n\t* testsuite/22_locale/moneypunct.cc: New file.\n\t* testsuite/22_locale/moneypunct_byname.cc: New file.\n\t* testsuite/22_locale/moneypunct_char_members.cc: New file.\n\nFrom-SVN: r45142", "tree": {"sha": "91cc009349f5e01ae49f6480f16b455673e69f09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cc009349f5e01ae49f6480f16b455673e69f09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/575dd831c71130cb7fe25e8e99cae094227efaa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575dd831c71130cb7fe25e8e99cae094227efaa2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/575dd831c71130cb7fe25e8e99cae094227efaa2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/575dd831c71130cb7fe25e8e99cae094227efaa2/comments", "author": null, "committer": null, "parents": [{"sha": "a9e7dc6cdf5ea4bcee15f152ab58f8664a2afa4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e7dc6cdf5ea4bcee15f152ab58f8664a2afa4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e7dc6cdf5ea4bcee15f152ab58f8664a2afa4c"}], "stats": {"total": 356, "additions": 340, "deletions": 16}, "files": [{"sha": "672ed390434f0e780e2b26906fe487c72b4996ec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -1,3 +1,12 @@\n+2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* config/locale/c_locale_gnu.cc: Minor tweaks.\n+\t(moneypunct<wchar_t>): Implement.\n+\t* include/bits/locale_facets.h: Same.\n+\t* testsuite/22_locale/moneypunct.cc: New file.\n+\t* testsuite/22_locale/moneypunct_byname.cc: New file.\n+\t* testsuite/22_locale/moneypunct_char_members.cc: New file.\t\n+\n 2001-08-23  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/os/gnu-linux/bits/os_defines.h: Correct __s390__ definitions."}, {"sha": "57c69e59951e3c489900cdcc56b82c293b5b7812", "filename": "libstdc++-v3/config/locale/c_locale_gnu.cc", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fc_locale_gnu.cc?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -1,4 +1,3 @@\n-\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n // Copyright (C) 2001 Free Software Foundation, Inc.\n@@ -44,9 +43,9 @@ namespace std\n   locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s)\n   {\n     // XXX\n-    // perhaps locale::categories could be made equivalent to LC_*_MASK\n-    //    _M_c_locale = __newlocale(1 << LC_ALL, __str.c_str(), NULL);\n-    //    _M_c_locale = __newlocale(locale::all, __str.c_str(), NULL);\n+    // Perhaps locale::categories could be made equivalent to LC_*_MASK ?\n+    // _M_c_locale = __newlocale(1 << LC_ALL, __s, 0);\n+    // _M_c_locale = __newlocale(locale::all, __s, 0);\n     __cloc = __newlocale(1 << LC_ALL, __s, 0);\n     if (!__cloc)\n       {\n@@ -181,19 +180,62 @@ namespace std\n #ifdef _GLIBCPP_USE_WCHAR_T\n   template<> \n     void\n-    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale /*__cloc*/)\n+    moneypunct<wchar_t>::_M_initialize_moneypunct(__c_locale __cloc)\n     {\n-      // XXX implement\n-      // \"C\" locale\n-      _M_decimal_point = L'.';\n-      _M_thousands_sep = L',';\n-      _M_grouping = \"\";\n-      _M_curr_symbol = string_type();\n-      _M_positive_sign = string_type();\n-      _M_negative_sign = string_type();\n-      _M_frac_digits = 0;\n-      _M_pos_format = money_base::_S_default_pattern;\n-      _M_neg_format = money_base::_S_default_pattern;\n+      if (!__cloc)\n+\t{\n+\t  // \"C\" locale\n+\t  _M_decimal_point = L'.';\n+\t  _M_thousands_sep = L',';\n+\t  _M_grouping = \"\";\n+\t  _M_curr_symbol = string_type();\n+\t  _M_positive_sign = string_type();\n+\t  _M_negative_sign = string_type();\n+\t  _M_frac_digits = 0;\n+\t  _M_pos_format = money_base::_S_default_pattern;\n+\t  _M_neg_format = money_base::_S_default_pattern;\n+\t}\n+      else\n+\t{\n+\t  // Named locale.\n+\t  _M_decimal_point = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_DECIMAL_POINT_WC, __cloc));\n+\t  _M_thousands_sep = reinterpret_cast<wchar_t>(__nl_langinfo_l(_NL_NUMERIC_THOUSANDS_SEP_WC,__cloc));\n+\t  _M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n+\t  _M_positive_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__POSITIVE_SIGN, __cloc));\n+\t  _M_negative_sign = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__NEGATIVE_SIGN, __cloc));\n+\t  if (intl)\n+\t    {\n+\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__INT_CURR_SYMBOL, __cloc));\n+\t      _M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, \n+\t\t\t\t\t\t   __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t  else\n+\t    {\n+\t      _M_curr_symbol = reinterpret_cast<wchar_t*>(__nl_langinfo_l(__CURRENCY_SYMBOL, __cloc));\n+\t      _M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS, __cloc));\n+\t      char __ppreceeds = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n+\t      char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n+\t      char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n+\t      _M_pos_format = _S_construct_pattern(__ppreceeds, __pspace, \n+\t\t\t\t\t\t   __pposn);\n+\t      char __npreceeds = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n+\t      char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n+\t      char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t      _M_neg_format = _S_construct_pattern(__npreceeds, __nspace, \n+\t\t\t\t\t\t   __nposn);\n+\t    }\n+\t}\n     }\n #endif\n }  // namespace std"}, {"sha": "ffef999ca05fc0b947533d2edf1e2239f89134f4", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -1448,6 +1448,7 @@ namespace std\n     class moneypunct_byname : public moneypunct<_CharT, _Intl>\n     {\n       __c_locale\t\t\t_M_c_locale_moneypunct;\n+\n     public:\n       typedef _CharT \t\t\tchar_type;\n       typedef basic_string<_CharT> \tstring_type;"}, {"sha": "256369a00935c06fb73774cfb7b65a4724f90c48", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct.cc?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -0,0 +1,52 @@\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::moneypunct<char> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_moneypunct: public std::moneypunct<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_moneypunct facet01;\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "e86c80e7426f1d5f219a7f009271d1878b5eed5a", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname.cc?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -0,0 +1,102 @@\n+// 2001-08-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.4 Template class moneypunct_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test = true;\n+  string str;\n+\n+  locale loc_byname(locale::classic(), new moneypunct_byname<char>(\"de_DE\"));\n+  str = loc_byname.name();\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+\n+  locale loc_c = locale::classic();\n+\n+  VERIFY( loc_de != loc_byname );\n+\n+  // cache the moneypunct facets\n+  const moneypunct<char>& monp_c = use_facet<moneypunct<char> >(loc_c); \n+  const moneypunct<char>& monp_byname = \n+                                    use_facet<moneypunct<char> >(loc_byname); \n+  const moneypunct<char>& monp_de = use_facet<moneypunct<char> >(loc_de); \n+\n+  // sanity check that the data match\n+  char dp1 = monp_de.decimal_point();\n+  char th1 = monp_de.thousands_sep();\n+  string g1 = monp_de.grouping();\n+  string cs1 = monp_de.curr_symbol();\n+  string ps1 = monp_de.positive_sign();\n+  string ns1 = monp_de.negative_sign();\n+  int fd1 = monp_de.frac_digits();\n+  pattern pos1 = monp_de.pos_format();\n+  pattern neg1 = monp_de.neg_format();\n+\n+  char dp2 = monp_byname.decimal_point();\n+  char th2 = monp_byname.thousands_sep();\n+  string g2 = monp_byname.grouping();\n+  string cs2 = monp_byname.curr_symbol();\n+  string ps2 = monp_byname.positive_sign();\n+  string ns2 = monp_byname.negative_sign();\n+  int fd2 = monp_byname.frac_digits();\n+  pattern pos2 = monp_byname.pos_format();\n+  pattern neg2 = monp_byname.neg_format();\n+\n+  VERIFY( dp1 == dp2 );\n+  VERIFY( th1 == th2 );\n+  VERIFY( g1 == g2 );\n+  VERIFY( cs1 == cs2 );\n+  VERIFY( ps1 == ps2 );\n+  VERIFY( ns1 == ns2 );\n+  VERIFY( fd1 == fd2 );\n+  VERIFY(static_cast<part>(pos1.field[0]) == static_cast<part>(pos2.field[0]));\n+  VERIFY(static_cast<part>(pos1.field[1]) == static_cast<part>(pos2.field[1]));\n+  VERIFY(static_cast<part>(pos1.field[2]) == static_cast<part>(pos2.field[2]));\n+  VERIFY(static_cast<part>(pos1.field[3]) == static_cast<part>(pos2.field[3]));\n+\n+  VERIFY(static_cast<part>(neg1.field[0]) == static_cast<part>(neg2.field[0]));\n+  VERIFY(static_cast<part>(neg1.field[1]) == static_cast<part>(neg2.field[1]));\n+  VERIFY(static_cast<part>(neg1.field[2]) == static_cast<part>(neg2.field[2]));\n+  VERIFY(static_cast<part>(neg1.field[3]) == static_cast<part>(neg2.field[3]));\n+\n+  // ...and don't match \"C\"\n+  char dp3 = monp_c.decimal_point();\n+  VERIFY( dp1 != dp3 );\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "1ddd4268c5ce4ddb3090a247c7dae484a3eace77", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_char_members.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_char_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_char_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_char_members.cc?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -0,0 +1,108 @@\n+// 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3.1 moneypunct members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test = true;\n+  string str;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  str = loc_c.name();\n+\n+  locale loc_us(\"en_US\");\n+  str = loc_us.name();\n+  VERIFY( loc_c != loc_us );\n+\n+  locale loc_fr(\"fr_FR\");\n+  str = loc_fr.name();\n+  VERIFY( loc_c != loc_fr );\n+\n+  locale loc_de(\"de_DE\");\n+  str = loc_de.name();\n+  VERIFY( loc_c != loc_de );\n+\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  const moneypunct<char>& monp_c = use_facet<moneypunct<char> >(loc_c); \n+  const moneypunct<char>& monp_us = use_facet<moneypunct<char> >(loc_us); \n+  const moneypunct<char>& monp_fr = use_facet<moneypunct<char> >(loc_fr); \n+  const moneypunct<char>& monp_de = use_facet<moneypunct<char> >(loc_de); \n+\n+  // sanity check the data is correct.\n+  char dp1 = monp_c.decimal_point();\n+  char th1 = monp_c.thousands_sep();\n+  string g1 = monp_c.grouping();\n+  string cs1 = monp_c.curr_symbol();\n+  string ps1 = monp_c.positive_sign();\n+  string ns1 = monp_c.negative_sign();\n+  int fd1 = monp_c.frac_digits();\n+  pattern pos1 = monp_c.pos_format();\n+  pattern neg1 = monp_c.neg_format();\n+\n+  char dp2 = monp_de.decimal_point();\n+  char th2 = monp_de.thousands_sep();\n+  string g2 = monp_de.grouping();\n+  string cs2 = monp_de.curr_symbol();\n+  string ps2 = monp_de.positive_sign();\n+  string ns2 = monp_de.negative_sign();\n+  int fd2 = monp_de.frac_digits();\n+  pattern pos2 = monp_de.pos_format();\n+  pattern neg2 = monp_de.neg_format();\n+\n+  VERIFY( dp1 != dp2 );\n+  VERIFY( th1 != th2 );\n+  VERIFY( g1 != g2 );\n+  VERIFY( cs1 != cs2 );\n+  //  VERIFY( ps1 != ps2 );\n+  VERIFY( ns1 != ns2 );\n+  VERIFY( fd1 != fd2 );\n+  VERIFY(static_cast<part>(pos1.field[0]) != static_cast<part>(pos2.field[0]));\n+  VERIFY(static_cast<part>(pos1.field[1]) != static_cast<part>(pos2.field[1]));\n+  VERIFY(static_cast<part>(pos1.field[2]) != static_cast<part>(pos2.field[2]));\n+  VERIFY(static_cast<part>(pos1.field[3]) != static_cast<part>(pos2.field[3]));\n+\n+  VERIFY(static_cast<part>(neg1.field[0]) != static_cast<part>(neg2.field[0]));\n+  VERIFY(static_cast<part>(neg1.field[1]) != static_cast<part>(neg2.field[1]));\n+  VERIFY(static_cast<part>(neg1.field[2]) != static_cast<part>(neg2.field[2]));\n+  VERIFY(static_cast<part>(neg1.field[3]) != static_cast<part>(neg2.field[3]));\n+}\n+\n+int main()\n+{\n+  test01();\n+\n+  return 0;\n+}"}, {"sha": "6b6d7d80a0f361f35dc6fd179fd67ab8aa13e1dc", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/575dd831c71130cb7fe25e8e99cae094227efaa2/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname.cc?ref=575dd831c71130cb7fe25e8e99cae094227efaa2", "patch": "@@ -23,6 +23,9 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n+// XXX This test is not working for non-glibc locale models.\n+// { dg-do run { xfail *-*-* } }\n+\n void test01()\n {\n   using namespace std;\n@@ -36,9 +39,12 @@ void test01()\n   locale loc_de(\"de_DE\");\n   str = loc_de.name();\n \n+  locale loc_c = locale::classic();\n+\n   VERIFY( loc_de != loc_byname );\n \n   // cache the numpunct facets\n+  const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n   const numpunct<char>& nump_byname = use_facet<numpunct<char> >(loc_byname); \n   const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n \n@@ -60,6 +66,10 @@ void test01()\n   VERIFY( g1 == g2 );\n   VERIFY( t1 == t2 );\n   VERIFY( f1 == f2 );\n+\n+  // ...and don't match \"C\"\n+  char dp3 = nump_c.decimal_point();\n+  VERIFY( dp1 != dp3 );\n }\n \n int main()"}]}