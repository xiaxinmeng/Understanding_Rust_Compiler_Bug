{"sha": "d1b382088a11a55c13fe0a9769a3c46a72836dd1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiMzgyMDg4YTExYTU1YzEzZmUwYTk3NjlhM2M0NmE3MjgzNmRkMQ==", "commit": {"author": {"name": "Taras Glek", "email": "tglek@mozilla.com", "date": "2009-04-22T18:29:36Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2009-04-22T18:29:36Z"}, "message": "hashtab.h: Update GTY annotations to new syntax\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* include/hashtab.h: Update GTY annotations to new syntax\n\t* include/splay-tree.h: Likewise\n\n\ngcc/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* alias.c: Update GTY annotations to new syntax\n\t* basic-block.h: Likewise\n\t* bitmap.h: Likewise\n\t* c-common.h: Likewise\n\t* c-decl.c: Likewise\n\t* c-parser.c: Likewise\n\t* c-pragma.c: Likewise\n\t* c-tree.h: Likewise\n\t* cfgloop.h: Likewise\n\t* cgraph.h: Likewise\n\t* config/alpha/alpha.c: Likewise\n\t* config/arm/arm.h: Likewise\n\t* config/avr/avr.h: Likewise\n\t* config/bfin/bfin.c: Likewise\n\t* config/cris/cris.c: Likewise\n\t* config/darwin.c: Likewise\n\t* config/frv/frv.c: Likewise\n\t* config/i386/i386.c: Likewise\n\t* config/i386/i386.h: Likewise\n\t* config/i386/winnt.c: Likewise\n\t* config/ia64/ia64.h: Likewise\n\t* config/iq2000/iq2000.c: Likewise\n\t* config/mips/mips.c: Likewise\n\t* config/mmix/mmix.h: Likewise\n\t* config/pa/pa.c: Likewise\n\t* config/pa/pa.h: Likewise\n\t* config/rs6000/rs6000.c: Likewise\n\t* config/s390/s390.c: Likewise\n\t* config/sparc/sparc.c: Likewise\n\t* config/xtensa/xtensa.c: Likewise\n\t* cselib.h: Likewise\n\t* dbxout.c: Likewise\n\t* dwarf2out.c: Likewise\n\t* except.c: Likewise\n\t* except.h: Likewise\n\t* fixed-value.h: Likewise\n\t* function.c: Likewise\n\t* function.h: Likewise\n\t* gimple.h: Likewise\n\t* integrate.c: Likewise\n\t* optabs.c: Likewise\n\t* output.h: Likewise\n\t* real.h: Likewise\n\t* rtl.h: Likewise\n\t* stringpool.c: Likewise\n\t* tree-data-ref.c: Likewise\n\t* tree-flow.h: Likewise\n\t* tree-scalar-evolution.c: Likewise\n\t* tree-ssa-address.c: Likewise\n\t* tree-ssa-alias.h: Likewise\n\t* tree-ssa-operands.h: Likewise\n\t* tree.c: Likewise\n\t* tree.h: Likewise\n\t* varasm.c: Likewise\n\t* varray.h: Likewise\n\t* vec.h: Likewise\n\t* coretypes.h: Do not define GTY macro if it is already defined\n\t* doc/gty.texi: Update GTY documentation to new syntax\n\t* gengtype-lex.l: Enforce attribute-like syntax for GTY annotations on structs\n\t* gengtype-parse.c: Likewise\n\n\ngcc/ada/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* gcc-interface/ada-tree.h: Update GTY annotations to new syntax\n\t* gcc-interface/trans.c: Likewise\n\t* gcc-interface/utils.c: Likewise\n\n\ngcc/cp/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* cp-tree.h: Update GTY annotations to new syntax\n\t* decl.c: Likewise\n\t* mangle.c: Likewise\n\t* name-lookup.c: Likewise\n\t* name-lookup.h: Likewise\n\t* parser.c: Likewise\n\t* pt.c: Likewise\n\t* rtti.c: Likewise\n\t* semantics.c: Likewise\n\t* typeck2.c: Likewise\n\n\ngcc/fortran/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* f95-lang.c: Update GTY annotations to new syntax\n\t* trans-intrinsic.c: Likewise\n\t* trans-io.c: Likewise\n\t* trans.h: Likewise\n\n\ngcc/java/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* builtins.c: Update GTY annotations to new syntax\n\t* decl.c: Likewise\n\t* java-tree.h: Likewise\n\t* jcf.h: Likewise\n\t* lang.c: Likewise\n\n\ngcc/objc/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* objc-act.c: Update GTY annotations to new syntax\n\t* objc-act.h: Likewise\n\n\nlibcpp/ChangeLog\n\n2009-04-21  Taras Glek <tglek@mozilla.com>\n\n\t* include/cpp-id-data.h: Update GTY annotations to new syntax\n\t* include/cpplib.h: Likewise\n\t* include/line-map.h: Likewise\n\t* include/symtab.h: Likewise\n\nFrom-SVN: r146607", "tree": {"sha": "c5c412bca065fddee835089ec9fbd863ee283f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5c412bca065fddee835089ec9fbd863ee283f18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1b382088a11a55c13fe0a9769a3c46a72836dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b382088a11a55c13fe0a9769a3c46a72836dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b382088a11a55c13fe0a9769a3c46a72836dd1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b382088a11a55c13fe0a9769a3c46a72836dd1/comments", "author": null, "committer": null, "parents": [{"sha": "a123d17589827622c6c77681a2f5d16f0f492f8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a123d17589827622c6c77681a2f5d16f0f492f8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a123d17589827622c6c77681a2f5d16f0f492f8e"}], "stats": {"total": 1138, "additions": 510, "deletions": 628}, "files": [{"sha": "43ccf0198782fc83400c3d346c6db31d5aa4dd5a", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,8 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* include/hashtab.h: Update GTY annotations to new syntax\n+\t* include/splay-tree.h: Likewise\n+\n 2009-04-17  Ben Elliston  <bje@au.ibm.com>\n \n \t* config.sub, config.guess: Update from upstream sources."}, {"sha": "379a7b56083aa058d39da05251d36002707b514f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,68 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* alias.c: Update GTY annotations to new syntax.\n+\t* basic-block.h: Likewise.\n+\t* bitmap.h: Likewise.\n+\t* c-common.h: Likewise.\n+\t* c-decl.c: Likewise.\n+\t* c-parser.c: Likewise.\n+\t* c-pragma.c: Likewise.\n+\t* c-tree.h: Likewise.\n+\t* cfgloop.h: Likewise.\n+\t* cgraph.h: Likewise.\n+\t* config/alpha/alpha.c: Likewise.\n+\t* config/arm/arm.h: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\t* config/bfin/bfin.c: Likewise.\n+\t* config/cris/cris.c: Likewise.\n+\t* config/darwin.c: Likewise.\n+\t* config/frv/frv.c: Likewise.\n+\t* config/i386/i386.c: Likewise.\n+\t* config/i386/i386.h: Likewise.\n+\t* config/i386/winnt.c: Likewise.\n+\t* config/ia64/ia64.h: Likewise.\n+\t* config/iq2000/iq2000.c: Likewise.\n+\t* config/mips/mips.c: Likewise.\n+\t* config/mmix/mmix.h: Likewise.\n+\t* config/pa/pa.c: Likewise.\n+\t* config/pa/pa.h: Likewise.\n+\t* config/rs6000/rs6000.c: Likewise.\n+\t* config/s390/s390.c: Likewise.\n+\t* config/sparc/sparc.c: Likewise.\n+\t* config/xtensa/xtensa.c: Likewise.\n+\t* cselib.h: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* dwarf2out.c: Likewise.\n+\t* except.c: Likewise.\n+\t* except.h: Likewise.\n+\t* fixed-value.h: Likewise.\n+\t* function.c: Likewise.\n+\t* function.h: Likewise.\n+\t* gimple.h: Likewise.\n+\t* integrate.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* output.h: Likewise.\n+\t* real.h: Likewise.\n+\t* rtl.h: Likewise.\n+\t* stringpool.c: Likewise.\n+\t* tree-data-ref.c: Likewise.\n+\t* tree-flow.h: Likewise.\n+\t* tree-scalar-evolution.c: Likewise.\n+\t* tree-ssa-address.c: Likewise.\n+\t* tree-ssa-alias.h: Likewise.\n+\t* tree-ssa-operands.h: Likewise.\n+\t* tree.c: Likewise.\n+\t* tree.h: Likewise.\n+\t* varasm.c: Likewise.\n+\t* varray.h: Likewise.\n+\t* vec.h: Likewise.\n+\t* coretypes.h: Do not define GTY macro if it is already\n+\tdefined.\n+\t* doc/gty.texi: Update GTY documentation to new syntax.\n+\t* gengtype-lex.l: Enforce attribute-like syntax for GTY\n+\tannotations on structs.\n+\t* gengtype-parse.c: Likewise.\n+\n 2009-04-22  Mark Heffernan  <meheff@google.com>\n \n        * gcc.c (LINK_COMMAND_SPEC): Link with gcov with -fprofile-generate=."}, {"sha": "7628abb53e2d84ae68116589461ed9ba3bfc8b1c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,9 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* gcc-interface/ada-tree.h: Update GTY annotations to new syntax.\n+\t* gcc-interface/trans.c: Likewise.\n+\t* gcc-interface/utils.c: Likewise.\n+\n 2009-04-22  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb: Create block around procedure call when actual is a"}, {"sha": "f26781eff0aaacba35f1b84378a47d5c4deff9bc", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -24,14 +24,13 @@\n  ****************************************************************************/\n \n /* Ada uses the lang_decl and lang_type fields to hold a tree.  */\n-union lang_tree_node\n-  GTY((desc (\"0\"),\n-       chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.t)\")))\n+union GTY((desc (\"0\"),\n+           chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.t)\"))) lang_tree_node\n {\n   union tree_node GTY((tag (\"0\"))) t;\n };\n-struct lang_decl GTY(()) { tree t; };\n-struct lang_type GTY(()) { tree t; };\n+struct GTY(()) lang_decl {tree t; };\n+struct GTY(()) lang_type {tree t; };\n \n /* Define macros to get and set the tree in TYPE_ and DECL_LANG_SPECIFIC.  */\n #define GET_TYPE_LANG_SPECIFIC(NODE) \\"}, {"sha": "cfc9fbc3faac157b70dc7d3418eeef7f807aab0c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -108,8 +108,7 @@ bool type_annotate_only;\n /* When not optimizing, we cache the 'First, 'Last and 'Length attributes\n    of unconstrained array IN parameters to avoid emitting a great deal of\n    redundant instructions to recompute them each time.  */\n-struct parm_attr GTY (())\n-{\n+struct GTY (()) parm_attr {\n   int id; /* GTY doesn't like Entity_Id.  */\n   int dim;\n   tree first;\n@@ -122,8 +121,7 @@ typedef struct parm_attr *parm_attr;\n DEF_VEC_P(parm_attr);\n DEF_VEC_ALLOC_P(parm_attr,gc);\n \n-struct language_function GTY(())\n-{\n+struct GTY(()) language_function {\n   VEC(parm_attr,gc) *parm_attr_cache;\n };\n \n@@ -135,7 +133,7 @@ struct language_function GTY(())\n    of a IF.  In the case where it represents a lexical scope, we may also\n    have a BLOCK node corresponding to it and/or cleanups.  */\n \n-struct stmt_group GTY((chain_next (\"%h.previous\"))) {\n+struct GTY((chain_next (\"%h.previous\"))) stmt_group {\n   struct stmt_group *previous;\t/* Previous code group.  */\n   tree stmt_list;\t\t/* List of statements for this code group.  */\n   tree block;\t\t\t/* BLOCK for this code group, if any.  */\n@@ -152,7 +150,7 @@ static GTY((deletable)) struct stmt_group *stmt_group_free_list;\n \n    ??? gnat_node should be Node_Id, but gengtype gets confused.  */\n \n-struct elab_info GTY((chain_next (\"%h.next\"))) {\n+struct GTY((chain_next (\"%h.next\"))) elab_info {\n   struct elab_info *next;\t/* Pointer to next in chain.  */\n   tree elab_proc;\t\t/* Elaboration procedure.  */\n   int gnat_node;\t\t/* The N_Compilation_Unit.  */"}, {"sha": "088c83ad23d74bf000bf154a89fffc61e2300eb5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -160,8 +160,7 @@ static GTY(()) tree float_types[NUM_MACHINE_MODES];\n /* For each binding contour we allocate a binding_level structure to indicate\n    the binding depth.  */\n \n-struct gnat_binding_level GTY((chain_next (\"%h.chain\")))\n-{\n+struct GTY((chain_next (\"%h.chain\"))) gnat_binding_level {\n   /* The binding level containing this one (the enclosing binding level). */\n   struct gnat_binding_level *chain;\n   /* The BLOCK node for this level.  */"}, {"sha": "85db75569c81da54e3e70c3e39687226f3fbd8aa", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -128,8 +128,7 @@ along with GCC; see the file COPYING3.  If not see\n    However, this is no actual entry for alias set zero.  It is an\n    error to attempt to explicitly construct a subset of zero.  */\n \n-struct alias_set_entry GTY(())\n-{\n+struct GTY(()) alias_set_entry {\n   /* The alias set number, as stored in MEM_ALIAS_SET.  */\n   alias_set_type alias_set;\n "}, {"sha": "da262ac72b02d83159fb18b061f1797b75e7e81b", "filename": "gcc/basic-block.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -119,8 +119,7 @@ extern regset regs_invalidated_by_call_regset;\n typedef HOST_WIDEST_INT gcov_type;\n \n /* Control flow edge information.  */\n-struct edge_def GTY(())\n-{\n+struct GTY(()) edge_def {\n   /* The two blocks at the ends of the edge.  */\n   struct basic_block_def *src;\n   struct basic_block_def *dest;\n@@ -217,8 +216,7 @@ struct rtl_bb_info;\n    basic blocks.  */\n \n /* Basic block information indexed by block number.  */\n-struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")))\n-{\n+struct GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\"))) basic_block_def {\n   /* The edges into and out of the block.  */\n   VEC(edge,gc) *preds;\n   VEC(edge,gc) *succs;\n@@ -257,8 +255,7 @@ struct basic_block_def GTY((chain_next (\"%h.next_bb\"), chain_prev (\"%h.prev_bb\")\n   int flags;\n };\n \n-struct rtl_bb_info GTY(())\n-{\n+struct GTY(()) rtl_bb_info {\n   /* The first and last insns of the block.  */\n   rtx head_;\n   rtx end_;\n@@ -272,8 +269,7 @@ struct rtl_bb_info GTY(())\n   int visited;\n };\n \n-struct gimple_bb_info GTY(())\n-{\n+struct GTY(()) gimple_bb_info {\n   /* Sequence of statements in this block.  */\n   gimple_seq seq;\n \n@@ -369,8 +365,7 @@ enum dom_state\n    The x_* prefixing is necessary because otherwise references to the\n    fields of this struct are interpreted as the defines for backward\n    source compatibility following the definition of this struct.  */\n-struct control_flow_graph GTY(())\n-{\n+struct GTY(()) control_flow_graph {\n   /* Block pointers for the exit and entry of a function.\n      These are always the head and tail of the basic block list.  */\n   basic_block x_entry_block_ptr;"}, {"sha": "54267c26fdc6bc1100012cd64e3c61d814390f03", "filename": "gcc/bitmap.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -42,8 +42,7 @@ typedef unsigned long BITMAP_WORD;\n #define BITMAP_ELEMENT_ALL_BITS (BITMAP_ELEMENT_WORDS * BITMAP_WORD_BITS)\n \n /* Obstack for allocating bitmaps and elements from.  */\n-typedef struct bitmap_obstack GTY (())\n-{\n+typedef struct GTY (()) bitmap_obstack {\n   struct bitmap_element_def *elements;\n   struct bitmap_head_def *heads;\n   struct obstack GTY ((skip)) obstack;\n@@ -61,8 +60,7 @@ typedef struct bitmap_obstack GTY (())\n    bitmap_elt_clear_from to be implemented in unit time rather than\n    linear in the number of elements to be freed.  */\n \n-typedef struct bitmap_element_def GTY(())\n-{\n+typedef struct GTY(()) bitmap_element_def {\n   struct bitmap_element_def *next;\t\t/* Next element.  */\n   struct bitmap_element_def *prev;\t\t/* Previous element.  */\n   unsigned int indx;\t\t\t/* regno/BITMAP_ELEMENT_ALL_BITS.  */\n@@ -74,7 +72,7 @@ struct bitmap_descriptor;\n    statistics we need to add a bitmap descriptor pointer.  As it is\n    not collected, we can just GTY((skip)) it.   */\n \n-typedef struct bitmap_head_def GTY(()) {\n+typedef struct GTY(()) bitmap_head_def {\n   bitmap_element *first;\t/* First element in linked list.  */\n   bitmap_element *current;\t/* Last element looked at.  */\n   unsigned int indx;\t\t/* Index of last element looked at.  */"}, {"sha": "e697488d885a4cc1e71a9ed2f6f81826a2172311", "filename": "gcc/c-common.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -229,8 +229,7 @@ enum c_tree_index\n \n /* Identifier part common to the C front ends.  Inherits from\n    tree_identifier, despite appearances.  */\n-struct c_common_identifier GTY(())\n-{\n+struct GTY(()) c_common_identifier {\n   struct tree_common common;\n   struct cpp_hashnode node;\n };\n@@ -334,8 +333,7 @@ extern GTY(()) tree c_global_trees[CTI_MAX];\n \n /* In a RECORD_TYPE, a sorted array of the fields of the type, not a\n    tree for size reasons.  */\n-struct sorted_fields_type GTY(())\n-{\n+struct GTY(()) sorted_fields_type {\n   int len;\n   tree GTY((length (\"%h.len\"))) elts[1];\n };\n@@ -362,7 +360,7 @@ extern c_language_kind c_language;\n \n /* Information about a statement tree.  */\n \n-struct stmt_tree_s GTY(()) {\n+struct GTY(()) stmt_tree_s {\n   /* The current statement list being collected.  */\n   tree x_cur_stmt_list;\n \n@@ -388,7 +386,7 @@ typedef struct stmt_tree_s *stmt_tree;\n /* Global state pertinent to the current function.  Some C dialects\n    extend this structure with additional fields.  */\n \n-struct c_language_function GTY(()) {\n+struct GTY(()) c_language_function {\n   /* While we are parsing the function, this contains information\n      about the statement-tree that we are building.  */\n   struct stmt_tree_s x_stmt_tree;"}, {"sha": "d2dbfbeea81f2bc3bdf30165c65dded9d79d3584", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -198,8 +198,7 @@ bool c_override_global_bindings_to_false;\n    in all such cases, the binding in the outer scope will have its\n    invisible bit true.  */\n \n-struct c_binding GTY((chain_next (\"%h.prev\")))\n-{\n+struct GTY((chain_next (\"%h.prev\"))) c_binding {\n   tree decl;\t\t\t/* the decl bound */\n   tree type;\t\t\t/* the type in this scope */\n   tree id;\t\t\t/* the identifier it's bound to */\n@@ -236,8 +235,7 @@ struct c_binding GTY((chain_next (\"%h.prev\")))\n    These describe the values of the identifier in the three different\n    namespaces defined by the language.  */\n \n-struct lang_identifier GTY(())\n-{\n+struct GTY(()) lang_identifier {\n   struct c_common_identifier common_id;\n   struct c_binding *symbol_binding; /* vars, funcs, constants, typedefs */\n   struct c_binding *tag_binding;    /* struct/union/enum tags */\n@@ -250,10 +248,9 @@ extern char C_SIZEOF_STRUCT_LANG_IDENTIFIER_isnt_accurate\n \n /* The resulting tree type.  */\n \n-union lang_tree_node\n-  GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n-       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : ((union lang_tree_node *) TREE_CHAIN (&%h.generic))\")))\n-{\n+union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n+       chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE ? (union lang_tree_node *) TYPE_NEXT_VARIANT (&%h.generic) : ((union lang_tree_node *) TREE_CHAIN (&%h.generic))\")))  lang_tree_node\n+ {\n   union tree_node GTY ((tag (\"0\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\")))\n     generic;\n@@ -305,8 +302,7 @@ union lang_tree_node\n    pop_scope relies on this.  */\n \n \n-struct c_scope GTY((chain_next (\"%h.outer\")))\n-{\n+struct GTY((chain_next (\"%h.outer\"))) c_scope {\n   /* The scope containing this one.  */\n   struct c_scope *outer;\n "}, {"sha": "8e74faf8e01f4fee20838e1fc5e27981be41bc27", "filename": "gcc/c-parser.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -137,8 +137,7 @@ typedef enum c_id_kind {\n \n /* A single C token after string literal concatenation and conversion\n    of preprocessing tokens to tokens.  */\n-typedef struct c_token GTY (())\n-{\n+typedef struct GTY (()) c_token {\n   /* The kind of token.  */\n   ENUM_BITFIELD (cpp_ttype) type : 8;\n   /* If this token is a CPP_NAME, this value indicates whether also\n@@ -159,8 +158,7 @@ typedef struct c_token GTY (())\n /* A parser structure recording information about the state and\n    context of parsing.  Includes lexer information with up to two\n    tokens of look-ahead; more are not needed for C.  */\n-typedef struct c_parser GTY(())\n-{\n+typedef struct GTY(()) c_parser {\n   /* The look-ahead tokens.  */\n   c_token tokens[2];\n   /* How many look-ahead tokens are available (0, 1 or 2).  */"}, {"sha": "f33ae50f4300dd868e8fbb96996fe28a42db0333", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -43,8 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #define GCC_BAD2(gmsgid, arg) \\\n   do { warning (OPT_Wpragmas, gmsgid, arg); return; } while (0)\n \n-typedef struct align_stack GTY(())\n-{\n+typedef struct GTY(()) align_stack {\n   int\t\t       alignment;\n   tree\t\t       id;\n   struct align_stack * prev;\n@@ -244,14 +243,12 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n }\n #endif  /* HANDLE_PRAGMA_PACK */\n \n-struct def_pragma_macro_value GTY(())\n-{\n+struct GTY(()) def_pragma_macro_value {\n   struct def_pragma_macro_value *prev;\n   cpp_macro *value;\n };\n \n-struct def_pragma_macro GTY(())\n-{\n+struct GTY(()) def_pragma_macro {\n   hashval_t hash;\n   const char *name;\n   struct def_pragma_macro_value value;\n@@ -1009,8 +1006,7 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n /* Stack of the #pragma GCC options created with #pragma GCC push_option.  Save\n    both the binary representation of the options and the TREE_LIST of\n    strings that will be added to the function's attribute list.  */\n-typedef struct opt_stack GTY(())\n-{\n+typedef struct GTY(()) opt_stack {\n   struct opt_stack *prev;\n   tree target_binary;\n   tree target_strings;"}, {"sha": "64e491e1e33a2357363c16c98b8c1bdad5c51441", "filename": "gcc/c-tree.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -33,8 +33,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Language-specific declaration information.  */\n \n-struct lang_decl GTY(())\n-{\n+struct GTY(()) lang_decl {\n   char dummy;\n };\n \n@@ -57,8 +56,7 @@ struct lang_decl GTY(())\n    and C_RID_YYCODE is the token number wanted by Yacc.  */\n #define C_IS_RESERVED_WORD(ID) TREE_LANG_FLAG_0 (ID)\n \n-struct lang_type GTY(())\n-{\n+struct GTY(()) lang_type {\n   /* In a RECORD_TYPE, a sorted array of the fields of the type.  */\n   struct sorted_fields_type * GTY ((reorder (\"resort_sorted_fields\"))) s;\n   /* In an ENUMERAL_TYPE, the min and max values.  */\n@@ -407,8 +405,7 @@ struct c_parm {\n    that keep track of the progress of compilation of the current function.\n    Used for nested functions.  */\n \n-struct language_function GTY(())\n-{\n+struct GTY(()) language_function {\n   struct c_language_function base;\n   tree x_break_label;\n   tree x_cont_label;"}, {"sha": "d95e50d585e8e5686fee398cf24ba11c8b7776ca", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -38,16 +38,14 @@ enum lpt_dec\n   LPT_UNROLL_STUPID\n };\n \n-struct lpt_decision GTY (())\n-{\n+struct GTY (()) lpt_decision {\n   enum lpt_dec decision;\n   unsigned times;\n };\n \n /* The structure describing a bound on number of iterations of a loop.  */\n \n-struct nb_iter_bound GTY ((chain_next (\"%h.next\")))\n-{\n+struct GTY ((chain_next (\"%h.next\"))) nb_iter_bound {\n   /* The statement STMT is executed at most ...  */\n   gimple stmt;\n \n@@ -71,8 +69,7 @@ struct nb_iter_bound GTY ((chain_next (\"%h.next\")))\n \n /* Description of the loop exit.  */\n \n-struct loop_exit GTY (())\n-{\n+struct GTY (()) loop_exit {\n   /* The exit edge.  */\n   struct edge_def *e;\n \n@@ -100,8 +97,7 @@ enum loop_estimation\n };\n \n /* Structure to hold information for each natural loop.  */\n-struct loop GTY ((chain_next (\"%h.next\")))\n-{\n+struct GTY ((chain_next (\"%h.next\"))) loop {\n   /* Index into loops array.  */\n   int num;\n \n@@ -181,8 +177,7 @@ enum\n #define AVOID_CFG_MODIFICATIONS (LOOPS_MAY_HAVE_MULTIPLE_LATCHES)\n \n /* Structure to hold CFG information about natural loops within a function.  */\n-struct loops GTY (())\n-{\n+struct GTY (()) loops {\n   /* State of loops.  */\n   int state;\n "}, {"sha": "b100fa6ddc4d7855c0d157423e218d1a44e7f5c9", "filename": "gcc/cgraph.h", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -51,8 +51,7 @@ extern const char * const cgraph_availability_names[];\n /* Information about the function collected locally.\n    Available after function is analyzed.  */\n \n-struct cgraph_local_info GTY(())\n-{\n+struct GTY(()) cgraph_local_info {\n   struct inline_summary {\n     /* Estimated stack frame consumption by the function.  */\n     HOST_WIDE_INT estimated_self_stack_size;\n@@ -93,8 +92,7 @@ struct cgraph_local_info GTY(())\n /* Information about the function that needs to be computed globally\n    once compilation is finished.  Available only with -funit-at-a-time.  */\n \n-struct cgraph_global_info GTY(())\n-{\n+struct GTY(()) cgraph_global_info {\n   /* Estimated stack frame consumption by the function.  */\n   HOST_WIDE_INT estimated_stack_size;\n   /* Expected offset of the stack frame of inlined function.  */\n@@ -117,16 +115,14 @@ struct cgraph_global_info GTY(())\n /* Information about the function that is propagated by the RTL backend.\n    Available only for functions that has been already assembled.  */\n \n-struct cgraph_rtl_info GTY(())\n-{\n+struct GTY(()) cgraph_rtl_info {\n    unsigned int preferred_incoming_stack_boundary;\n };\n \n /* The cgraph data structure.\n    Each function decl has assigned cgraph_node listing callees and callers.  */\n \n-struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n-{\n+struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\"))) cgraph_node {\n   tree decl;\n   struct cgraph_edge *callees;\n   struct cgraph_edge *callers;\n@@ -197,7 +193,7 @@ DEF_VEC_ALLOC_P(cgraph_node_ptr,gc);\n \n /* A cgraph node set is a collection of cgraph nodes.  A cgraph node\n    can appear in multiple sets.  */\n-struct cgraph_node_set_def GTY(())\n+struct GTY(()) cgraph_node_set_def\n {\n   htab_t GTY((param_is (struct cgraph_node_set_element_def))) hashtab;\n   VEC(cgraph_node_ptr, gc) *nodes;\n@@ -212,7 +208,7 @@ DEF_VEC_ALLOC_P(cgraph_node_set,heap);\n \n /* A cgraph node set element contains an index in the vector of nodes in\n    the set.  */\n-struct cgraph_node_set_element_def GTY(())\n+struct GTY(()) cgraph_node_set_element_def\n {\n   struct cgraph_node *node;\n   HOST_WIDE_INT index;\n@@ -235,8 +231,7 @@ typedef enum {\n   CIF_N_REASONS\n } cgraph_inline_failed_t;\n \n-struct cgraph_edge GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\")))\n-{\n+struct GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\"))) cgraph_edge {\n   struct cgraph_node *caller;\n   struct cgraph_node *callee;\n   struct cgraph_edge *prev_caller;\n@@ -275,8 +270,7 @@ DEF_VEC_ALLOC_P(cgraph_edge_p,heap);\n /* The varpool data structure.\n    Each static variable decl has assigned varpool_node.  */\n \n-struct varpool_node GTY((chain_next (\"%h.next\")))\n-{\n+struct GTY((chain_next (\"%h.next\"))) varpool_node {\n   tree decl;\n   /* Pointer to the next function in varpool_nodes.  */\n   struct varpool_node *next;\n@@ -306,8 +300,7 @@ struct varpool_node GTY((chain_next (\"%h.next\")))\n \n /* Every top level asm statement is put into a cgraph_asm_node.  */\n \n-struct cgraph_asm_node GTY(())\n-{\n+struct GTY(()) cgraph_asm_node {\n   /* Next asm node.  */\n   struct cgraph_asm_node *next;\n   /* String for this asm node.  */"}, {"sha": "9df8c117dbc390cdfec439e0b2b9aa70960c56d8", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -2852,7 +2852,7 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n /* Look up the function X_floating library function name for the\n    given operation.  */\n \n-struct xfloating_op GTY(())\n+struct GTY(()) xfloating_op\n {\n   const enum rtx_code code;\n   const char *const GTY((skip)) osf_func;\n@@ -4746,7 +4746,7 @@ alpha_multipass_dfa_lookahead (void)\n \f\n /* Machine-specific function data.  */\n \n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* For unicosmk.  */\n   /* List of call information words for calls from this function.  */\n@@ -9487,15 +9487,15 @@ alpha_elf_section_type_flags (tree decl, const char *name, int reloc)\n enum links_kind {KIND_UNUSED, KIND_LOCAL, KIND_EXTERN};\n enum reloc_kind {KIND_LINKAGE, KIND_CODEADDR};\n \n-struct alpha_links GTY(())\n+struct GTY(()) alpha_links\n {\n   int num;\n   rtx linkage;\n   enum links_kind lkind;\n   enum reloc_kind rkind;\n };\n \n-struct alpha_funcs GTY(())\n+struct GTY(()) alpha_funcs\n {\n   int num;\n   splay_tree GTY ((param1_is (char *), param2_is (struct alpha_links *)))"}, {"sha": "15913d2ca441ef93d074a20b7f0ee5c809870158", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1571,7 +1571,7 @@ do {\t\t\t\t\t\t\t\t\t      \\\n    in the direction of stack growth.\n    Only soft_frame is used in thumb mode.  */\n \n-typedef struct arm_stack_offsets GTY(())\n+typedef struct GTY(()) arm_stack_offsets\n {\n   int saved_args;\t/* ARG_POINTER_REGNUM.  */\n   int frame;\t\t/* ARM_HARD_FRAME_POINTER_REGNUM.  */\n@@ -1585,7 +1585,7 @@ arm_stack_offsets;\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n-typedef struct machine_function GTY(())\n+typedef struct GTY(()) machine_function\n {\n   /* Additional stack adjustment in __builtin_eh_throw.  */\n   rtx eh_epilogue_sp_ofs;"}, {"sha": "32508dfe2eb4ffc9833e9a7f15fb3261c637f012", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1090,7 +1090,7 @@ mmcu=*:-mmcu=%*}\"\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* 'true' - if the current function is a leaf function.  */\n   int is_leaf;"}, {"sha": "adb72b077a826b3be29a2ab1813798e92bc43fec", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -58,7 +58,7 @@\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* Set if we are notified by the doloop pass that a hardware loop\n      was created.  */\n@@ -3610,7 +3610,7 @@ DEF_VEC_ALLOC_P (loop_info,heap);\n \n /* Information about a loop we have found (or are in the process of\n    finding).  */\n-struct loop_info GTY (())\n+struct GTY (()) loop_info\n {\n   /* loop number, for dumps */\n   int loop_no;"}, {"sha": "2112670de6c75af5fb7bd0166d1edcacea882c54", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -63,7 +63,7 @@ enum cris_retinsn_type\n  { CRIS_RETINSN_UNKNOWN = 0, CRIS_RETINSN_RET, CRIS_RETINSN_JUMP };\n \n /* Per-function machine data.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n  {\n    int needs_return_address_on_stack;\n "}, {"sha": "f8c982e384298b87119db4eab296f99756712d0b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -314,7 +314,7 @@ machopic_output_function_base_name (FILE *file)\n /* The suffix attached to stub symbols.  */\n #define STUB_SUFFIX \"$stub\"\n \n-typedef struct machopic_indirection GTY (())\n+typedef struct GTY (()) machopic_indirection\n {\n   /* The SYMBOL_REF for the entity referenced.  */\n   rtx symbol;"}, {"sha": "ecaf6d7d6b295759143f44fe82223add5379402f", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -139,7 +139,7 @@ struct frv_io {\n        REG++)\n \n /* This structure contains machine specific function data.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* True if we have created an rtx that relies on the stack frame.  */\n   int frame_needed;"}, {"sha": "51a2f71a8474431b40de3e763b065ca71bf33024", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1722,8 +1722,7 @@ static int const x86_64_int_return_registers[4] =\n \n /* Define the structure for the machine field in struct function.  */\n \n-struct stack_local_entry GTY(())\n-{\n+struct GTY(()) stack_local_entry {\n   unsigned short mode;\n   unsigned short n;\n   rtx rtl;\n@@ -20864,8 +20863,7 @@ static GTY(()) tree ix86_builtins[(int) IX86_BUILTIN_MAX];\n /* Table of all of the builtin functions that are possible with different ISA's\n    but are waiting to be built until a function is declared to use that\n    ISA.  */\n-struct builtin_isa GTY(())\n-{\n+struct GTY(()) builtin_isa {\n   tree type;\t\t\t/* builtin type to use in the declaration */\n   const char *name;\t\t/* function name */\n   int isa;\t\t\t/* isa_flags this builtin is defined for */"}, {"sha": "b3972a3f7c29fa77556641ecda3acfb3a9f8fe55", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -2420,8 +2420,7 @@ enum ix86_stack_slot\n \f\n #define FASTCALL_PREFIX '@'\n \f\n-struct machine_function GTY(())\n-{\n+struct GTY(()) machine_function {\n   struct stack_local_entry *stack_locals;\n   const char *some_ld_name;\n   int varargs_gpr_size;"}, {"sha": "62ac279ccd4abd01759f92399525fc89567a3984", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -539,7 +539,7 @@ i386_pe_declare_function_type (FILE *file, const char *name, int pub)\n \n /* Keep a list of external functions.  */\n \n-struct extern_list GTY(())\n+struct GTY(()) extern_list\n {\n   struct extern_list *next;\n   tree decl;\n@@ -568,7 +568,7 @@ i386_pe_record_external_function (tree decl, const char *name)\n \n /* Keep a list of exported symbols.  */\n \n-struct export_list GTY(())\n+struct GTY(()) export_list\n {\n   struct export_list *next;\n   const char *name;"}, {"sha": "74e507883267c2236d0431118134e6fe8df1d241", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1931,7 +1931,7 @@ extern int ia64_final_schedule;\n #define EH_RETURN_DATA_REGNO(N) ((N) < 4 ? (N) + 15 : INVALID_REGNUM)\n \n /* This function contains machine specific function data.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* The new stack pointer when unwinding from EH.  */\n   rtx ia64_eh_epilogue_sp;"}, {"sha": "1a99eeabb14c438b3589d128831dda39495e0d6c", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -89,7 +89,7 @@ struct iq2000_frame_info\n   int  num_gp;\t\t\t/* Number of gp registers saved.  */\n } iq2000_frame_info;\n \n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* Current frame information, calculated by compute_frame_size.  */\n   long total_size;\t\t/* # bytes that the entire frame takes up.  */"}, {"sha": "a677f9392b4d3cf674416db7ed8366eceaba7be5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -241,7 +241,7 @@ static const char *const mips_fp_conditions[] = {\n };\n \n /* Information about a function's frame layout.  */\n-struct mips_frame_info GTY(()) {\n+struct GTY(())  mips_frame_info {\n   /* The size of the frame in bytes.  */\n   HOST_WIDE_INT total_size;\n \n@@ -292,7 +292,7 @@ struct mips_frame_info GTY(()) {\n   HOST_WIDE_INT hard_frame_pointer_offset;\n };\n \n-struct machine_function GTY(()) {\n+struct GTY(())  machine_function {\n   /* The register returned by mips16_gp_pseudo_reg; see there for details.  */\n   rtx mips16_gp_pseudo_rtx;\n \n@@ -1106,7 +1106,7 @@ static const struct mips_rtx_cost_data mips_rtx_cost_data[PROCESSOR_MAX] = {\n \f\n /* This hash table keeps track of implicit \"mips16\" and \"nomips16\" attributes\n    for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n-struct mflip_mips16_entry GTY (()) {\n+struct GTY (())  mflip_mips16_entry {\n   const char *name;\n   bool mips16_p;\n };\n@@ -5540,7 +5540,7 @@ mips_load_call_address (enum mips_call_type type, rtx dest, rtx addr)\n /* Each locally-defined hard-float MIPS16 function has a local symbol\n    associated with it.  This hash table maps the function symbol (FUNC)\n    to the local symbol (LOCAL). */\n-struct mips16_local_alias GTY(()) {\n+struct GTY(()) mips16_local_alias {\n   rtx func;\n   rtx local;\n };"}, {"sha": "a7fb6e5884e6bc2a036efe89d535e1da591e25c4", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -89,7 +89,7 @@ extern GTY(()) rtx mmix_compare_op1;\n /* Per-function machine data.  This is normally an opaque type just\n    defined and used in the tm.c file, but we need to see the definition in\n    mmix.md too.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n  {\n    int has_landing_pad;\n    int highest_saved_stack_register;"}, {"sha": "08c987fbedf10492935c105efb4dce612cce35b0", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -196,7 +196,7 @@ static unsigned int last_address;\n \n /* Variables to handle plabels that we discover are necessary at assembly\n    output time.  They are output after the current function.  */\n-struct deferred_plabel GTY(())\n+struct GTY(()) deferred_plabel\n {\n   rtx internal_label;\n   rtx symbol;\n@@ -9602,7 +9602,7 @@ pa_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n    at the end of the file if and only if SYMBOL_REF_REFERENCED_P is true.\n    This avoids putting out names that are never really used.  */\n \n-typedef struct extern_symbol GTY(())\n+typedef struct GTY(()) extern_symbol\n {\n   tree decl;\n   const char *name;"}, {"sha": "ee890935b301f48eae8e5638d148db034663a8f8", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -249,7 +249,7 @@ do {\t\t\t\t\t\t\t\t\\\n #define CAN_DEBUG_WITHOUT_FP\n \f\n /* target machine storage layout */\n-typedef struct machine_function GTY(())\n+typedef struct GTY(()) machine_function\n {\n   /* Flag indicating that a .NSUBSPA directive has been output for\n      this function.  */"}, {"sha": "c785bf83863a9efccbbe28ef90860e39ccada594", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -113,7 +113,7 @@ typedef struct rs6000_stack {\n \n /* A C structure for machine-specific, per-function data.\n    This is added to the cfun structure.  */\n-typedef struct machine_function GTY(())\n+typedef struct GTY(()) machine_function\n {\n   /* Flags if __builtin_return_address (n) with n >= 1 was used.  */\n   int ra_needs_full_frame;\n@@ -974,7 +974,7 @@ static enum machine_mode rs6000_eh_return_filter_mode (void);\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n-struct toc_hash_struct GTY(())\n+struct GTY(()) toc_hash_struct\n {\n   /* `key' will satisfy CONSTANT_P; in fact, it will satisfy\n      ASM_OUTPUT_SPECIAL_POOL_ENTRY_P.  */"}, {"sha": "7c485fd527c2d9e2be0c6ab6a63dbafa6b50494d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -260,7 +260,7 @@ HOST_WIDE_INT s390_stack_guard = 0;\n /* The following structure is embedded in the machine \n    specific part of struct function.  */\n \n-struct s390_frame_layout GTY (())\n+struct GTY (()) s390_frame_layout\n {\n   /* Offset within stack frame.  */\n   HOST_WIDE_INT gprs_offset;\n@@ -303,7 +303,7 @@ struct s390_frame_layout GTY (())\n \n /* Define the structure for the machine field in struct function.  */\n \n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   struct s390_frame_layout frame_layout;\n "}, {"sha": "88d786b9f232d69f6feabc878baf83c94afadfde", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -321,7 +321,7 @@ char sparc_leaf_regs[] =\n   1, 1, 1, 1, 1, 1, 1, 1,\n   1, 1, 1, 1, 1};\n \n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   /* Some local-dynamic TLS symbol name.  */\n   const char *some_ld_name;"}, {"sha": "14825c31de32769c9df124b49bf23eb2939eec6d", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -89,7 +89,7 @@ unsigned xtensa_current_frame_size;\n #define LARGEST_MOVE_RATIO 15\n \n /* Define the structure for the machine field in struct function.  */\n-struct machine_function GTY(())\n+struct GTY(()) machine_function\n {\n   int accesses_prev_frame;\n   bool need_a7_copy;"}, {"sha": "a04953e40bf30c92d4b555e0c9dcffc2a88e1aaf", "filename": "gcc/coretypes.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -37,7 +37,9 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #ifndef GCC_CORETYPES_H\n #define GCC_CORETYPES_H\n \n+#ifndef GTY\n #define GTY(x)  /* nothing - marker for gengtype */\n+#endif\n \n #ifndef USED_FOR_TARGET\n "}, {"sha": "b560aa871f0feaf61e3ea6fd336bc1059bc5ec14", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,16 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* cp-tree.h: Update GTY annotations to new syntax.\n+\t* decl.c: Likewise.\n+\t* mangle.c: Likewise.\n+\t* name-lookup.c: Likewise.\n+\t* name-lookup.h: Likewise.\n+\t* parser.c: Likewise.\n+\t* pt.c: Likewise.\n+\t* rtti.c: Likewise.\n+\t* semantics.c: Likewise.\n+\t* typeck2.c: Likewise.\n+\n 2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/14875"}, {"sha": "a4fc7c00a9798ebfdd1e1a94f0a5d0311202e935", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 25, "deletions": 49, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -219,8 +219,7 @@ framework extensions, you must include this file before toplev.h, not after.\n \f\n /* Language-dependent contents of an identifier.  */\n \n-struct lang_identifier GTY(())\n-{\n+struct GTY(()) lang_identifier {\n   struct c_common_identifier c_common;\n   cxx_binding *namespace_bindings;\n   cxx_binding *bindings;\n@@ -237,8 +236,7 @@ struct lang_identifier GTY(())\n #define LANG_IDENTIFIER_CAST(NODE) \\\n \t((struct lang_identifier*)IDENTIFIER_NODE_CHECK (NODE))\n \n-struct template_parm_index_s GTY(())\n-{\n+struct GTY(()) template_parm_index_s {\n   struct tree_common common;\n   int index;\n   int level;\n@@ -247,8 +245,7 @@ struct template_parm_index_s GTY(())\n };\n typedef struct template_parm_index_s template_parm_index;\n \n-struct ptrmem_cst GTY(())\n-{\n+struct GTY(()) ptrmem_cst {\n   struct tree_common common;\n   /* This isn't used, but the middle-end expects all constants to have\n      this field.  */\n@@ -331,8 +328,7 @@ typedef struct ptrmem_cst * ptrmem_cst_t;\n    is not important for this node.  */\n #define OVL_USED(NODE)\t\tTREE_USED (NODE)\n \n-struct tree_overload GTY(())\n-{\n+struct GTY(()) tree_overload {\n   struct tree_common common;\n   tree function;\n };\n@@ -363,8 +359,7 @@ struct tree_overload GTY(())\n #define BASELINK_QUALIFIED_P(NODE) \\\n   TREE_LANG_FLAG_0 (BASELINK_CHECK (NODE))\n \n-struct tree_baselink GTY(())\n-{\n+struct GTY(()) tree_baselink {\n   struct tree_common common;\n   tree binfo;\n   tree functions;\n@@ -453,8 +448,7 @@ typedef enum cp_id_kind\n #define DEFARG_INSTANTIATIONS(NODE) \\\n   (((struct tree_default_arg *)DEFAULT_ARG_CHECK (NODE))->instantiations)\n \n-struct tree_default_arg GTY (())\n-{\n+struct GTY (()) tree_default_arg {\n   struct tree_common common;\n   struct cp_token_cache *tokens;\n   VEC(tree,gc) *instantiations;\n@@ -475,16 +469,14 @@ struct tree_default_arg GTY (())\n #define STATIC_ASSERT_SOURCE_LOCATION(NODE) \\\n   (((struct tree_static_assert *)STATIC_ASSERT_CHECK (NODE))->location)\n \n-struct tree_static_assert GTY (())\n-{\n+struct GTY (()) tree_static_assert {\n   struct tree_common common;\n   tree condition;\n   tree message;\n   location_t location;\n };\n \n-struct tree_argument_pack_select GTY (())\n-{\n+struct GTY (()) tree_argument_pack_select {\n   struct tree_common common;\n   tree argument_pack;\n   int index;\n@@ -524,8 +516,7 @@ typedef enum cp_trait_kind\n #define TRAIT_EXPR_KIND(NODE) \\\n   (((struct tree_trait_expr *)TRAIT_EXPR_CHECK (NODE))->kind)\n \n-struct tree_trait_expr GTY (())\n-{\n+struct GTY (()) tree_trait_expr {\n   struct tree_common common;\n   tree type1;\n   tree type2;  \n@@ -549,9 +540,8 @@ enum cp_tree_node_structure_enum {\n };\n \n /* The resulting tree type.  */\n-union lang_tree_node GTY((desc (\"cp_tree_node_structure (&%h)\"),\n-       chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n-{\n+union GTY((desc (\"cp_tree_node_structure (&%h)\"),\n+       chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\"))) lang_tree_node {\n   union tree_node GTY ((tag (\"TS_CP_GENERIC\"),\n \t\t\tdesc (\"tree_node_structure (&%h)\"))) generic;\n   struct template_parm_index_s GTY ((tag (\"TS_CP_TPI\"))) tpi;\n@@ -747,8 +737,7 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n \n /* Global state.  */\n \n-struct saved_scope GTY(())\n-{\n+struct GTY(()) saved_scope {\n   VEC(cxx_saved_binding,gc) *old_bindings;\n   tree old_namespace;\n   tree decl_ns_list;\n@@ -826,8 +815,7 @@ struct saved_scope GTY(())\n \n extern GTY(()) struct saved_scope *scope_chain;\n \n-struct cxx_int_tree_map GTY(())\n-{\n+struct GTY(()) cxx_int_tree_map {\n   unsigned int uid;\n   tree to;\n };\n@@ -837,8 +825,7 @@ extern int cxx_int_tree_map_eq (const void *, const void *);\n \n /* Global state pertinent to the current function.  */\n \n-struct language_function GTY(())\n-{\n+struct GTY(()) language_function {\n   struct c_language_function base;\n \n   tree x_cdtor_label;\n@@ -1061,8 +1048,7 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define CLASSTYPE_VISIBILITY_SPECIFIED(TYPE)\t\\\n \tDECL_VISIBILITY_SPECIFIED (TYPE_NAME (TYPE))\n \n-typedef struct tree_pair_s GTY (())\n-{\n+typedef struct GTY (()) tree_pair_s {\n   tree purpose;\n   tree value;\n } tree_pair_s;\n@@ -1073,8 +1059,7 @@ DEF_VEC_ALLOC_O (tree_pair_s,gc);\n /* This is a few header flags for 'struct lang_type'.  Actually,\n    all but the first are used only for lang_type_class; they\n    are put in this structure to save space.  */\n-struct lang_type_header GTY(())\n-{\n+struct GTY(()) lang_type_header {\n   BOOL_BITFIELD is_lang_type_class : 1;\n \n   BOOL_BITFIELD has_type_conversion : 1;\n@@ -1100,8 +1085,7 @@ struct lang_type_header GTY(())\n    many (i.e., thousands) of classes can easily be generated.\n    Therefore, we should endeavor to keep the size of this structure to\n    a minimum.  */\n-struct lang_type_class GTY(())\n-{\n+struct GTY(()) lang_type_class {\n   struct lang_type_header h;\n \n   unsigned char align;\n@@ -1176,14 +1160,12 @@ struct lang_type_class GTY(())\n   tree objc_info;\n };\n \n-struct lang_type_ptrmem GTY(())\n-{\n+struct GTY(()) lang_type_ptrmem {\n   struct lang_type_header h;\n   tree record;\n };\n \n-struct lang_type GTY(())\n-{\n+struct GTY(()) lang_type {\n   union lang_type_u\n   {\n     struct lang_type_header GTY((skip (\"\"))) h;\n@@ -1593,8 +1575,7 @@ struct lang_type GTY(())\n      || TREE_CODE (NODE) == CONST_DECL\t\t\t\\\n      || TREE_CODE (NODE) == USING_DECL))\n \n-struct lang_decl_flags GTY(())\n-{\n+struct GTY(()) lang_decl_flags {\n   ENUM_BITFIELD(languages) language : 4;\n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n@@ -1653,8 +1634,7 @@ struct lang_decl_flags GTY(())\n /* sorted_fields is sorted based on a pointer, so we need to be able\n    to resort it if pointers get rearranged.  */\n \n-struct lang_decl GTY(())\n-{\n+struct GTY(()) lang_decl {\n   struct lang_decl_flags decl_flags;\n \n   union lang_decl_u4\n@@ -2517,8 +2497,7 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n /* Abstract iterators for AGGR_INIT_EXPRs.  */\n \n /* Structure containing iterator state.  */\n-typedef struct aggr_init_expr_arg_iterator_d GTY (())\n-{\n+typedef struct GTY (()) aggr_init_expr_arg_iterator_d {\n   tree t;\t/* the aggr_init_expr */\n   int n;\t/* argument count */\n   int i;\t/* next argument index */\n@@ -3970,8 +3949,7 @@ extern void init_reswords (void);\n    opname_tab[(int) MINUS_EXPR] == \"-\".  */\n extern const char **opname_tab, **assignop_tab;\n \n-typedef struct operator_name_info_t GTY(())\n-{\n+typedef struct GTY(()) operator_name_info_t {\n   /* The IDENTIFIER_NODE for the operator.  */\n   tree identifier;\n   /* The name of the operator.  */\n@@ -4160,8 +4138,7 @@ struct cp_declarator {\n };\n \n /* A level of template instantiation.  */\n-struct tinst_level GTY(())\n-{\n+struct GTY(()) tinst_level {\n   /* The immediately deeper level in the chain.  */\n   struct tinst_level *next;\n \n@@ -4694,8 +4671,7 @@ extern int shared_member_p\t\t\t(tree);\n \n /* The representation of a deferred access check.  */\n \n-typedef struct deferred_access_check GTY(())\n-{\n+typedef struct GTY(()) deferred_access_check {\n   /* The base class in which the declaration is referenced. */\n   tree binfo;\n   /* The declaration whose access must be checked.  */"}, {"sha": "e06dce2719a3ccf79f222dfd830e5c21ca71428d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -169,8 +169,7 @@ tree integer_two_node, integer_three_node;\n /* Used only for jumps to as-yet undefined labels, since jumps to\n    defined labels can have their validity checked immediately.  */\n \n-struct named_label_use_entry GTY(())\n-{\n+struct GTY(()) named_label_use_entry {\n   struct named_label_use_entry *next;\n   /* The binding level to which this entry is *currently* attached.\n      This is initially the binding level in which the goto appeared,\n@@ -192,8 +191,7 @@ struct named_label_use_entry GTY(())\n    we can clear out their names' definitions at the end of the\n    function, and so we can check the validity of jumps to these labels.  */\n \n-struct named_label_entry GTY(())\n-{\n+struct GTY(()) named_label_entry {\n   /* The decl itself.  */\n   tree label_decl;\n "}, {"sha": "ff77981c264d7e6e93860e679853b0cef3674e4d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -90,8 +90,7 @@ along with GCC; see the file COPYING3.  If not see\n \t   && (PRIMARY_TEMPLATE_P (CLASSTYPE_TI_TEMPLATE (NODE))))))\n \n /* Things we only need one of.  This module is not reentrant.  */\n-typedef struct globals GTY(())\n-{\n+typedef struct GTY(()) globals {\n   /* An array of the current substitution candidates, in the order\n      we've seen them.  */\n   VEC(tree,gc) *substitutions;"}, {"sha": "e499edeabbaa0ede1844c8ebc73819d96095930e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -125,8 +125,7 @@ binding_entry_free (binding_entry entry)\n \n /* The datatype used to implement the mapping from names to types at\n    a given scope.  */\n-struct binding_table_s GTY(())\n-{\n+struct GTY(()) binding_table_s {\n   /* Array of chains of \"binding_entry\"s  */\n   binding_entry * GTY((length (\"%h.chain_count\"))) chain;\n "}, {"sha": "6de4cfa7d43b55ea0bf54365562322228853fae6", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -31,8 +31,7 @@ typedef struct binding_entry_s *binding_entry;\n /* The type of a routine repeatedly called by binding_table_foreach.  */\n typedef void (*bt_foreach_proc) (binding_entry, void *);\n \n-struct binding_entry_s GTY(())\n-{\n+struct GTY(()) binding_entry_s {\n   binding_entry chain;\n   tree name;\n   tree type;\n@@ -63,8 +62,7 @@ typedef struct cp_binding_level cxx_scope;\n    currently being defined.  */\n #define INHERITED_VALUE_BINDING_P(NODE) ((NODE)->value_is_inherited)\n \n-struct cxx_binding GTY(())\n-{\n+struct GTY(()) cxx_binding {\n   /* Link to chain together various bindings for this name.  */\n   cxx_binding *previous;\n   /* The non-type entity this name is bound to.  */\n@@ -79,8 +77,7 @@ struct cxx_binding GTY(())\n \n /* Datatype used to temporarily save C++ bindings (for implicit\n    instantiations purposes and like).  Implemented in decl.c.  */\n-typedef struct cxx_saved_binding GTY(())\n-{\n+typedef struct GTY(()) cxx_saved_binding {\n   /* The name of the current binding.  */\n   tree identifier;\n   /* The binding we're saving.  */\n@@ -141,8 +138,7 @@ typedef enum tag_scope {\n \t\t\t\t\t   and [class.friend]/9.  */\n } tag_scope;\n \n-typedef struct cp_class_binding GTY(())\n-{\n+typedef struct GTY(()) cp_class_binding {\n   cxx_binding base;\n   /* The bound name.  */\n   tree identifier;\n@@ -175,8 +171,7 @@ DEF_VEC_ALLOC_O(cp_class_binding,gc);\n /* Note that the information in the `names' component of the global contour\n    is duplicated in the IDENTIFIER_GLOBAL_VALUEs of all identifiers.  */\n \n-struct cp_binding_level GTY(())\n-  {\n+struct GTY(()) cp_binding_level {\n     /* A chain of _DECL nodes for all variables, constants, functions,\n        and typedef types.  These are in the reverse of the order\n        supplied.  There may be OVERLOADs on this list, too, but they"}, {"sha": "806d6f9645aa35ecc87548c2cb63a0a443c2b9e5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -48,8 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n /* A token's value and its associated deferred access checks and\n    qualifying scope.  */\n \n-struct tree_check GTY(())\n-{\n+struct GTY(()) tree_check {\n   /* The value associated with the token.  */\n   tree value;\n   /* The checks that have been associated with value.  */\n@@ -61,8 +60,7 @@ struct tree_check GTY(())\n \n /* A C++ token.  */\n \n-typedef struct cp_token GTY (())\n-{\n+typedef struct GTY (()) cp_token {\n   /* The kind of token.  */\n   ENUM_BITFIELD (cpp_ttype) type : 8;\n   /* If this token is a keyword, this value indicates which keyword.\n@@ -104,8 +102,7 @@ static cp_token eof_token =\n    it to the parser.  Tokens are never added to the cp_lexer after\n    it is created.  */\n \n-typedef struct cp_lexer GTY (())\n-{\n+typedef struct GTY (()) cp_lexer {\n   /* The memory allocated for the buffer.  NULL if this lexer does not\n      own the token buffer.  */\n   cp_token * GTY ((length (\"%h.buffer_length\"))) buffer;\n@@ -144,8 +141,7 @@ typedef struct cp_lexer GTY (())\n    a cp_token_cache, since everything in here is referenced through\n    a lexer.  */\n \n-typedef struct cp_token_cache GTY(())\n-{\n+typedef struct GTY(()) cp_token_cache {\n   /* The beginning of the token range.  */\n   cp_token * GTY((skip)) first;\n \n@@ -1282,8 +1278,7 @@ typedef struct cp_parser_expression_stack_entry\n   cp_parser_expression_stack[NUM_PREC_VALUES];\n \n /* Context that is saved and restored when parsing tentatively.  */\n-typedef struct cp_parser_context GTY (())\n-{\n+typedef struct GTY (()) cp_parser_context {\n   /* If this is a tentative parsing context, the status of the\n      tentative parse.  */\n   enum cp_parser_status_kind status;\n@@ -1389,8 +1384,7 @@ cp_parser_context_new (cp_parser_context* next)\n \n /* The cp_parser structure represents the C++ parser.  */\n \n-typedef struct cp_parser GTY(())\n-{\n+typedef struct GTY(()) cp_parser {\n   /* The lexer from which we are obtaining tokens.  */\n   cp_lexer *lexer;\n "}, {"sha": "a4a5c10af7d78c39a242bd0cea52ece5ac9c89be", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -54,7 +54,7 @@ typedef int (*tree_fn_t) (tree, void*);\n /* The PENDING_TEMPLATES is a TREE_LIST of templates whose\n    instantiations have been deferred, either because their definitions\n    were not yet available, or because we were putting off doing the work.  */\n-struct pending_template GTY (()) {\n+struct GTY (()) pending_template {\n   struct pending_template *next;\n   struct tinst_level *tinst;\n };"}, {"sha": "9246fc2854d18821a37ffcb4156e57114df5a96a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -64,8 +64,7 @@ along with GCC; see the file COPYING3.  If not see\n    translation, when we are emitting the type info objects.  */\n \n /* Auxiliary data we hold for each type_info derived object we need.  */\n-typedef struct tinfo_s GTY (())\n-{\n+typedef struct GTY (()) tinfo_s {\n   tree type;  /* The RECORD_TYPE for this type_info object */\n \n   tree vtable; /* The VAR_DECL of the vtable.  Only filled at end of"}, {"sha": "47d9a24d606af87ff65c481a46ec3e6369a8a2b7", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -108,8 +108,7 @@ static tree finalize_nrv_r (tree *, int *, void *);\n       In case of parsing error, we simply call `pop_deferring_access_checks'\n       without `perform_deferred_access_checks'.  */\n \n-typedef struct deferred_access GTY(())\n-{\n+typedef struct GTY(()) deferred_access {\n   /* A VEC representing name-lookups for which we have deferred\n      checking access controls.  We cannot check the accessibility of\n      names used in a decl-specifier-seq until we know what is being"}, {"sha": "5ed7818732f19aa0b4e83927a5e8d16e6d7ab564", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -112,8 +112,7 @@ readonly_error (tree arg, const char* string)\n /* Structure that holds information about declarations whose type was\n    incomplete and we could not check whether it was abstract or not.  */\n \n-struct pending_abstract_type GTY((chain_next (\"%h.next\")))\n-{\n+struct GTY((chain_next (\"%h.next\"))) pending_abstract_type {\n   /* Declaration which we are checking for abstractness. It is either\n      a DECL node, or an IDENTIFIER_NODE if we do not have a full\n      declaration available.  */"}, {"sha": "fccc6a2cd32fcff970625a279bea5bde9aff80cd", "filename": "gcc/cselib.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -19,8 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n /* Describe a value.  */\n-typedef struct cselib_val_struct GTY(())\n-{\n+typedef struct GTY(()) cselib_val_struct {\n   /* The hash value.  */\n   unsigned int value;\n \n@@ -39,8 +38,7 @@ typedef struct cselib_val_struct GTY(())\n } cselib_val;\n \n /* A list of rtl expressions that hold the same value.  */\n-struct elt_loc_list GTY(())\n-{\n+struct GTY(()) elt_loc_list {\n   /* Next element in the list.  */\n   struct elt_loc_list *next;\n   /* An rtl expression that holds the value.  */\n@@ -50,8 +48,7 @@ struct elt_loc_list GTY(())\n };\n \n /* A list of cselib_val structures.  */\n-struct elt_list GTY(())\n-{\n+struct GTY(()) elt_list {\n   struct elt_list *next;\n   cselib_val *elt;\n };"}, {"sha": "dd05076bb63e4feade5e3d72e0b1c5fda1ca42c3", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -171,8 +171,7 @@ enum typestatus {TYPE_UNSEEN, TYPE_XREF, TYPE_DEFINED};\n    The file_number and type_number elements are used if DBX_USE_BINCL\n    is defined.  */\n \n-struct typeinfo GTY(())\n-{\n+struct GTY(()) typeinfo {\n   enum typestatus status;\n   int file_number;\n   int type_number;"}, {"sha": "ef7a5d42fdb0075e893dd6114f7f956b15b05b50", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -46,12 +46,12 @@ In a structure field definition, before the name of the field.\n Here are some examples of marking simple data structures and globals.\n \n @smallexample\n-struct @var{tag} GTY(())\n+struct GTY(()) @var{tag}\n @{\n   @var{fields}@dots{}\n @};\n \n-typedef struct @var{tag} GTY(())\n+typedef struct GTY(()) @var{tag}\n @{\n   @var{fields}@dots{}\n @} *@var{typename};\n@@ -136,7 +136,7 @@ There are two places the type machinery will need to be explicitly told\n the length of an array.  The first case is when a structure ends in a\n variable-length array, like this:\n @smallexample\n-struct rtvec_def GTY(()) @{\n+struct GTY(()) rtvec_def @{\n   int num_elem;         /* @r{number of elements} */\n   rtx GTY ((length (\"%h.num_elem\"))) elem[1];\n @};\n@@ -194,7 +194,7 @@ constant.\n \n For example,\n @smallexample\n-struct tree_binding GTY(())\n+struct GTY(()) tree_binding\n @{\n   struct tree_common common;\n   union tree_binding_u @{"}, {"sha": "b55d5ff76a58f8e64b9d958991069ba6ee3ab12d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 46, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -220,17 +220,15 @@ enum dw_cfi_oprnd_type {\n   dw_cfi_oprnd_loc\n };\n \n-typedef union dw_cfi_oprnd_struct GTY(())\n-{\n+typedef union GTY(()) dw_cfi_oprnd_struct {\n   unsigned int GTY ((tag (\"dw_cfi_oprnd_reg_num\"))) dw_cfi_reg_num;\n   HOST_WIDE_INT GTY ((tag (\"dw_cfi_oprnd_offset\"))) dw_cfi_offset;\n   const char * GTY ((tag (\"dw_cfi_oprnd_addr\"))) dw_cfi_addr;\n   struct dw_loc_descr_struct * GTY ((tag (\"dw_cfi_oprnd_loc\"))) dw_cfi_loc;\n }\n dw_cfi_oprnd;\n \n-typedef struct dw_cfi_struct GTY(())\n-{\n+typedef struct GTY(()) dw_cfi_struct {\n   dw_cfi_ref dw_cfi_next;\n   enum dwarf_call_frame_info dw_cfi_opc;\n   dw_cfi_oprnd GTY ((desc (\"dw_cfi_oprnd1_desc (%1.dw_cfi_opc)\")))\n@@ -245,8 +243,7 @@ dw_cfi_node;\n    It can now be either REG + CFA_OFFSET or *(REG + BASE_OFFSET) + CFA_OFFSET.\n    Instead of passing around REG and OFFSET, we pass a copy\n    of this structure.  */\n-typedef struct cfa_loc GTY(())\n-{\n+typedef struct GTY(()) cfa_loc {\n   HOST_WIDE_INT offset;\n   HOST_WIDE_INT base_offset;\n   unsigned int reg;\n@@ -259,8 +256,7 @@ typedef struct cfa_loc GTY(())\n    CIE obviates the need to keep track of multiple CIE's\n    in the DWARF generation routines below.  */\n \n-typedef struct dw_fde_struct GTY(())\n-{\n+typedef struct GTY(()) dw_fde_struct {\n   tree decl;\n   const char *dw_fde_begin;\n   const char *dw_fde_current_label;\n@@ -376,8 +372,7 @@ static GTY(()) dw_cfi_ref cie_cfi_head;\n static unsigned current_funcdef_fde;\n #endif\n \n-struct indirect_string_node GTY(())\n-{\n+struct GTY(()) indirect_string_node {\n   const char *str;\n   unsigned int refcount;\n   unsigned int form;\n@@ -1498,8 +1493,7 @@ dwarf2out_args_size_adjust (HOST_WIDE_INT offset, const char *label)\n    of the prologue or (b) the register is clobbered.  This clusters\n    register saves so that there are fewer pc advances.  */\n \n-struct queued_reg_save GTY(())\n-{\n+struct GTY(()) queued_reg_save {\n   struct queued_reg_save *next;\n   rtx reg;\n   HOST_WIDE_INT cfa_offset;\n@@ -1509,7 +1503,7 @@ struct queued_reg_save GTY(())\n static GTY(()) struct queued_reg_save *queued_reg_saves;\n \n /* The caller's ORIG_REG is saved in SAVED_IN_REG.  */\n-struct reg_saved_in_data GTY(()) {\n+struct GTY(()) reg_saved_in_data {\n   rtx orig_reg;\n   rtx saved_in_reg;\n };\n@@ -3388,8 +3382,7 @@ dwarf2out_switch_text_section (void)\n    for emitting location expressions.  */\n \n /* Data about a single source file.  */\n-struct dwarf_file_data GTY(())\n-{\n+struct GTY(()) dwarf_file_data {\n   const char * filename;\n   int emitted_number;\n };\n@@ -3405,7 +3398,7 @@ typedef const struct die_struct *const_dw_die_ref;\n typedef struct dw_loc_descr_struct *dw_loc_descr_ref;\n typedef struct dw_loc_list_struct *dw_loc_list_ref;\n \n-typedef struct deferred_locations_struct GTY(()) \n+typedef struct GTY(()) deferred_locations_struct\n {\n   tree variable;\n   dw_die_ref die;\n@@ -3444,17 +3437,15 @@ enum dw_val_class\n /* Describe a double word constant value.  */\n /* ??? Every instance of long_long in the code really means CONST_DOUBLE.  */\n \n-typedef struct dw_long_long_struct GTY(())\n-{\n+typedef struct GTY(()) dw_long_long_struct {\n   unsigned long hi;\n   unsigned long low;\n }\n dw_long_long_const;\n \n /* Describe a floating point constant value, or a vector constant value.  */\n \n-typedef struct dw_vec_struct GTY(())\n-{\n+typedef struct GTY(()) dw_vec_struct {\n   unsigned char * GTY((length (\"%h.length\"))) array;\n   unsigned length;\n   unsigned elt_size;\n@@ -3464,8 +3455,7 @@ dw_vec_const;\n /* The dw_val_node describes an attribute's value, as it is\n    represented internally.  */\n \n-typedef struct dw_val_struct GTY(())\n-{\n+typedef struct GTY(()) dw_val_struct {\n   enum dw_val_class val_class;\n   union dw_val_struct_union\n     {\n@@ -3495,8 +3485,7 @@ dw_val_node;\n /* Locations in memory are described using a sequence of stack machine\n    operations.  */\n \n-typedef struct dw_loc_descr_struct GTY(())\n-{\n+typedef struct GTY(()) dw_loc_descr_struct {\n   dw_loc_descr_ref dw_loc_next;\n   enum dwarf_location_atom dw_loc_opc;\n   int dw_loc_addr;\n@@ -3508,8 +3497,7 @@ dw_loc_descr_node;\n /* Location lists are ranges + location descriptions for that range,\n    so you can track variables that are in different places over\n    their entire life.  */\n-typedef struct dw_loc_list_struct GTY(())\n-{\n+typedef struct GTY(()) dw_loc_list_struct {\n   dw_loc_list_ref dw_loc_next;\n   const char *begin; /* Label for begin address of range */\n   const char *end;  /* Label for end address of range */\n@@ -4617,17 +4605,15 @@ typedef struct dw_ranges_by_label_struct *dw_ranges_by_label_ref;\n    entry.  The label gives the PC value associated with\n    the line number entry.  */\n \n-typedef struct dw_line_info_struct GTY(())\n-{\n+typedef struct GTY(()) dw_line_info_struct {\n   unsigned long dw_file_num;\n   unsigned long dw_line_num;\n }\n dw_line_info_entry;\n \n /* Line information for functions in separate sections; each one gets its\n    own sequence.  */\n-typedef struct dw_separate_line_info_struct GTY(())\n-{\n+typedef struct GTY(()) dw_separate_line_info_struct {\n   unsigned long dw_file_num;\n   unsigned long dw_line_num;\n   unsigned long function;\n@@ -4638,8 +4624,7 @@ dw_separate_line_info_entry;\n    a link to the next attribute in the chain, and an attribute value.\n    Attributes are typically linked below the DIE they modify.  */\n \n-typedef struct dw_attr_struct GTY(())\n-{\n+typedef struct GTY(()) dw_attr_struct {\n   enum dwarf_attribute dw_attr;\n   dw_val_node dw_attr_val;\n }\n@@ -4652,8 +4637,7 @@ DEF_VEC_ALLOC_O(dw_attr_node,gc);\n    The children of each node form a circular list linked by\n    die_sib.  die_child points to the node *before* the \"first\" child node.  */\n \n-typedef struct die_struct GTY((chain_circular (\"%h.die_sib\")))\n-{\n+typedef struct GTY((chain_circular (\"%h.die_sib\"))) die_struct {\n   enum dwarf_tag die_tag;\n   char *die_symbol;\n   VEC(dw_attr_node,gc) * die_attr;\n@@ -4681,8 +4665,7 @@ die_node;\n \n /* The pubname structure */\n \n-typedef struct pubname_struct GTY(())\n-{\n+typedef struct GTY(()) pubname_struct {\n   dw_die_ref die;\n   const char *name;\n }\n@@ -4691,22 +4674,19 @@ pubname_entry;\n DEF_VEC_O(pubname_entry);\n DEF_VEC_ALLOC_O(pubname_entry, gc);\n \n-struct dw_ranges_struct GTY(())\n-{\n+struct GTY(()) dw_ranges_struct {\n   /* If this is positive, it's a block number, otherwise it's a\n      bitwise-negated index into dw_ranges_by_label.  */\n   int num;\n };\n \n-struct dw_ranges_by_label_struct GTY(())\n-{\n+struct GTY(()) dw_ranges_by_label_struct {\n   const char *begin;\n   const char *end;\n };\n \n /* The limbo die list structure.  */\n-typedef struct limbo_die_struct GTY(())\n-{\n+typedef struct GTY(()) limbo_die_struct {\n   dw_die_ref die;\n   tree created_for;\n   struct limbo_die_struct *next;\n@@ -4811,17 +4791,15 @@ static GTY ((param_is (struct die_struct))) htab_t decl_die_table;\n static GTY ((param_is (struct die_struct))) htab_t common_block_die_table;\n \n /* Node of the variable location list.  */\n-struct var_loc_node GTY ((chain_next (\"%h.next\")))\n-{\n+struct GTY ((chain_next (\"%h.next\"))) var_loc_node {\n   rtx GTY (()) var_loc_note;\n   const char * GTY (()) label;\n   const char * GTY (()) section_label;\n   struct var_loc_node * GTY (()) next;\n };\n \n /* Variable location list.  */\n-struct var_loc_list_def GTY (())\n-{\n+struct GTY (()) var_loc_list_def {\n   struct var_loc_node * GTY (()) first;\n \n   /* Do not mark the last element of the chained list because"}, {"sha": "0a2bf3284c0d80028a9dfd52ec234c1eca851800", "filename": "gcc/except.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -96,8 +96,7 @@ tree (*lang_eh_runtime_type) (tree);\n \n /* A hash table of label to region number.  */\n \n-struct ehl_map_entry GTY(())\n-{\n+struct GTY(()) ehl_map_entry {\n   rtx label;\n   struct eh_region *region;\n };\n@@ -115,7 +114,7 @@ static int sjlj_fc_lsda_ofs;\n static int sjlj_fc_jbuf_ofs;\n \f\n \n-struct call_site_record GTY(())\n+struct GTY(()) call_site_record\n {\n   rtx landing_pad;\n   int action;\n@@ -1207,8 +1206,7 @@ lookup_type_for_runtime (tree type)\n \f\n /* Represent an entry in @TTypes for either catch actions\n    or exception filter actions.  */\n-struct ttypes_filter GTY(())\n-{\n+struct GTY(()) ttypes_filter {\n   tree t;\n   int filter;\n };"}, {"sha": "ba75d306976368d729fabdf1babcadc7b107ca61", "filename": "gcc/except.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -25,7 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n struct function;\n \n /* Describes one exception region.  */\n-struct eh_region GTY(())\n+struct GTY(()) eh_region\n {\n   /* The immediately surrounding region.  */\n   struct eh_region *outer;\n@@ -115,7 +115,7 @@ DEF_VEC_ALLOC_P(eh_region, heap);\n \n /* Per-function EH data.  Used to save exception status for each\n    function.  */\n-struct eh_status GTY(())\n+struct GTY(()) eh_status\n {\n   /* The tree of all regions for this function.  */\n   struct eh_region *region_tree;\n@@ -264,8 +264,7 @@ extern tree (*lang_eh_runtime_type) (tree);\n # define USING_SJLJ_EXCEPTIONS\t\tMUST_USE_SJLJ_EXCEPTIONS\n #endif\n \n-struct throw_stmt_node GTY(())\n-{\n+struct GTY(()) throw_stmt_node {\n   gimple stmt;\n   int region_nr;\n };"}, {"sha": "ca0ee93d48af32e22c79ada809c8d91938eb0e72", "filename": "gcc/fixed-value.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffixed-value.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffixed-value.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"real.h\"\n #include \"double-int.h\"\n \n-struct fixed_value GTY(())\n+struct GTY(()) fixed_value\n {\n   double_int data;\t\t/* Store data up to 2 wide integers.  */\n   enum machine_mode mode;\t/* Use machine mode to know IBIT and FBIT.  */"}, {"sha": "2932af3fdac1530215f88d80c6dd560cc075abb9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* f95-lang.c: Update GTY annotations to new syntax.\n+\t* trans-intrinsic.c: Likewise.\n+\t* trans-io.c: Likewise.\n+\t* trans.h: Likewise.\n+\n 2009-04-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/39735"}, {"sha": "1aab3bf6cc3121c6a1dd18de167459cefadaa3cb", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -52,19 +52,17 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Language-dependent contents of an identifier.  */\n \n-struct lang_identifier\n-GTY(())\n-{\n+struct GTY(())\n+lang_identifier {\n   struct tree_identifier common;\n };\n \n /* The resulting tree type.  */\n \n-union lang_tree_node\n-GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n+union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n      chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n \n-{\n+lang_tree_node {\n   union tree_node GTY((tag (\"0\"),\n \t\t       desc (\"tree_node_structure (&%h)\"))) generic;\n   struct lang_identifier GTY((tag (\"1\"))) identifier;\n@@ -74,9 +72,8 @@ GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n    that keep track of the progress of compilation of the current function.\n    Used for nested functions.  */\n \n-struct language_function\n-GTY(())\n-{\n+struct GTY(())\n+language_function {\n   /* struct gfc_language_function base; */\n   struct binding_level *binding_level;\n };\n@@ -309,9 +306,8 @@ gfc_print_identifier (FILE * file ATTRIBUTE_UNUSED,\n \n    Binding contours are used to create GCC tree BLOCK nodes.  */\n \n-struct binding_level\n-GTY(())\n-{\n+struct GTY(())\n+binding_level {\n   /* A chain of ..._DECL nodes for all variables, constants, functions,\n      parameters and type declarations.  These ..._DECL nodes are chained\n      through the TREE_CHAIN field. Note that these ..._DECL nodes are stored"}, {"sha": "8705b94dd8d039b38239abcd0742610cb55cc233", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -45,8 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n \n /* This maps fortran intrinsic math functions to external library or GCC\n    builtin functions.  */\n-typedef struct gfc_intrinsic_map_t\tGTY(())\n-{\n+typedef struct GTY(()) gfc_intrinsic_map_t {\n   /* The explicit enum is required to work around inadequacies in the\n      garbage collection/gengtype parsing mechanism.  */\n   enum gfc_isym_id id;"}, {"sha": "b8ff5f36f53fd4fa2682a7c45579f7c237e27aca", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -64,8 +64,7 @@ enum iofield_type\n   IOPARM_type_num\n };\n \n-typedef struct gfc_st_parameter_field GTY(())\n-{\n+typedef struct GTY(()) gfc_st_parameter_field {\n   const char *name;\n   unsigned int mask;\n   enum ioparam_type param_type;\n@@ -75,8 +74,7 @@ typedef struct gfc_st_parameter_field GTY(())\n }\n gfc_st_parameter_field;\n \n-typedef struct gfc_st_parameter GTY(())\n-{\n+typedef struct GTY(()) gfc_st_parameter {\n   const char *name;\n   tree type;\n }"}, {"sha": "b6b3279b4a9ca7b8d77b36f8ff9387fc59906726", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -429,8 +429,7 @@ void gfc_generate_block_data (gfc_namespace *);\n /* Output a decl for a module variable.  */\n void gfc_generate_module_vars (gfc_namespace *);\n \n-struct module_htab_entry GTY(())\n-{\n+struct GTY(()) module_htab_entry {\n   const char *name;\n   tree namespace_decl;\n   htab_t GTY ((param_is (union tree_node))) decls;\n@@ -543,8 +542,7 @@ extern GTY(()) tree gfor_fndecl_associated;\n /* Math functions.  Many other math functions are handled in\n    trans-intrinsic.c.  */\n \n-typedef struct gfc_powdecl_list GTY(())\n-{\n+typedef struct GTY(()) gfc_powdecl_list {\n   tree integer;\n   tree real;\n   tree cmplx;\n@@ -615,8 +613,7 @@ enum gfc_array_kind\n };\n \n /* Array types only.  */\n-struct lang_type\t\tGTY(())\n-{\n+struct GTY(())\tlang_type\t {\n   int rank;\n   enum gfc_array_kind akind;\n   tree lbound[GFC_MAX_DIMENSIONS];\n@@ -629,8 +626,7 @@ struct lang_type\t\tGTY(())\n   tree span;\n };\n \n-struct lang_decl\t\tGTY(())\n-{\n+struct GTY(()) lang_decl {\n   /* Dummy variables.  */\n   tree saved_descriptor;\n   /* Assigned integer nodes.  Stringlength is the IO format string's length."}, {"sha": "9d9d3ad5066296bfd4a3c5f254568decd95ca13b", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -450,8 +450,7 @@ assign_stack_local (enum machine_mode mode, HOST_WIDE_INT size, int align)\n    level where they are defined.  They are marked a \"kept\" so that\n    free_temp_slots will not free them.  */\n \n-struct temp_slot GTY(())\n-{\n+struct GTY(()) temp_slot {\n   /* Points to next temporary slot.  */\n   struct temp_slot *next;\n   /* Points to previous temporary slot.  */\n@@ -488,8 +487,7 @@ struct temp_slot GTY(())\n static GTY((param_is(struct temp_slot_address_entry))) htab_t temp_slot_address_table;\n \n /* Entry for the above hash table.  */\n-struct temp_slot_address_entry GTY(())\n-{\n+struct GTY(()) temp_slot_address_entry {\n   hashval_t hash;\n   rtx address;\n   struct temp_slot *temp_slot;"}, {"sha": "cd9f59eece60c6c4ddd007a8f759af5dca36ebd7", "filename": "gcc/function.h", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -31,16 +31,14 @@ along with GCC; see the file COPYING3.  If not see\n    The main insn-chain is saved in the last element of the chain,\n    unless the chain is empty.  */\n \n-struct sequence_stack GTY(())\n-{\n+struct GTY(()) sequence_stack {\n   /* First and last insns in the chain of the saved sequence.  */\n   rtx first;\n   rtx last;\n   struct sequence_stack *next;\n };\n \f\n-struct emit_status GTY(())\n-{\n+struct GTY(()) emit_status {\n   /* This is reset to LAST_VIRTUAL_REGISTER + 1 at the start of each function.\n      After rtl generation, it is 1 plus the largest register number used.  */\n   int x_reg_rtx_no;\n@@ -96,8 +94,7 @@ extern GTY ((length (\"crtl->emit.x_reg_rtx_no\"))) rtx * regno_reg_rtx;\n \n #define REGNO_POINTER_ALIGN(REGNO) (crtl->emit.regno_pointer_align[REGNO])\n \n-struct expr_status GTY(())\n-{\n+struct GTY(()) expr_status {\n   /* Number of units that we should eventually pop off the stack.\n      These are the arguments to function calls that have already returned.  */\n   int x_pending_stack_adjust;\n@@ -142,8 +139,7 @@ DEF_VEC_P(call_site_record);\n DEF_VEC_ALLOC_P(call_site_record, gc);\n \n /* RTL representation of exception handling.  */\n-struct rtl_eh GTY(())\n-{\n+struct GTY(()) rtl_eh {\n   rtx filter;\n   rtx exc_ptr;\n \n@@ -194,8 +190,7 @@ enum function_frequency {\n   FUNCTION_FREQUENCY_HOT\n };\n \n-struct varasm_status GTY(())\n-{\n+struct GTY(()) varasm_status {\n   /* If we're using a per-function constant pool, this is it.  */\n   struct rtx_constant_pool *pool;\n \n@@ -205,8 +200,7 @@ struct varasm_status GTY(())\n };\n \n /* Information mainlined about RTL representation of incoming arguments.  */\n-struct incoming_args GTY(())\n-{\n+struct GTY(()) incoming_args {\n   /* Number of bytes of args popped by function being compiled on its return.\n      Zero if no bytes are to be popped.\n      May affect compilation of return insn or of function epilogue.  */\n@@ -235,8 +229,7 @@ struct incoming_args GTY(())\n };\n \n /* Data for function partitioning.  */\n-struct function_subsections GTY(())\n-{\n+struct GTY(()) function_subsections {\n   /* Assembly labels for the hot and cold text sections, to\n      be used by debugger functions for determining the size of text\n      sections.  */\n@@ -253,8 +246,7 @@ struct function_subsections GTY(())\n };\n \n /* Datastructures maintained for currently processed function in RTL form.  */\n-struct rtl_data GTY(())\n-{\n+struct GTY(()) rtl_data {\n   struct expr_status expr;\n   struct emit_status emit;\n   struct varasm_status varasm;\n@@ -471,8 +463,7 @@ extern GTY(()) struct rtl_data x_rtl;\n /* This structure can save all the important global and static variables\n    describing the status of the current function.  */\n \n-struct function GTY(())\n-{\n+struct GTY(()) function {\n   struct eh_status *eh;\n \n   /* The control flow graph for this function.  */"}, {"sha": "da118d02b28f269f86f8de30ee316b857ae5aecb", "filename": "gcc/gengtype-lex.l", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgengtype-lex.l", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgengtype-lex.l", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-lex.l?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -189,9 +189,6 @@ EOID\t[^[:alnum:]_]\n }\n \n ^{HWS}\"#\"{HWS}\"define\"{WS}\"GTY(\" /* do nothing */\n-{WS}\"GTY\"{WS}?\"(\"\t{\n-  error_at_line (&lexer_line, \"stray GTY marker\");\n-}\n \n %%\n "}, {"sha": "6b0cd2e1a24d839309a637de493827289c2b6079", "filename": "gcc/gengtype-parse.c", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgengtype-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgengtype-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-parse.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -677,7 +677,6 @@ static type_p\n type (options_p *optsp, bool nested)\n {\n   const char *s;\n-  bool is_union;\n   *optsp = 0;\n   switch (token ())\n     {\n@@ -694,34 +693,58 @@ type (options_p *optsp, bool nested)\n     case UNION:\n       {\n \toptions_p opts = 0;\n-\n-\tis_union = (token() == UNION);\n+    /* GTY annotations follow attribute syntax \n+       GTY_BEFORE_ID is for union/struct declarations\n+       GTY_AFTER_ID is for variable declarations.  */\n+    enum {\n+        NO_GTY,\n+        GTY_BEFORE_ID,\n+        GTY_AFTER_ID\n+    } is_gty = NO_GTY;\n+    bool is_union = (token () == UNION);\n \tadvance ();\n \n-\tif (token () == ID)\n-\t  s = advance ();\n-\telse\n-\t  s = xasprintf (\"anonymous:%s:%d\", lexer_line.file, lexer_line.line);\n-\n \t/* Top-level structures that are not explicitly tagged GTY(())\n \t   are treated as mere forward declarations.  This is because\n \t   there are a lot of structures that we don't need to know\n \t   about, and some of those have weird macro stuff in them\n \t   that we can't handle.  */\n \tif (nested || token () == GTY_TOKEN)\n \t  {\n-\t    opts = gtymarker_opt ();\n-\t    if (token () == '{')\n-\t      {\n-\t\tpair_p fields;\n-\t\tadvance ();\n-\t\tfields = struct_field_seq ();\n-\t\trequire ('}');\n-\t\treturn new_structure (s, is_union, &lexer_line, fields, opts);\n-\t      }\n+        is_gty = GTY_BEFORE_ID;\n+        opts = gtymarker_opt ();\n \t  }\n-\telse if (token () == '{')\n-\t  consume_balanced ('{', '}');\n+\n+\tif (token () == ID)\n+\t  s = advance ();\n+\telse\n+\t  s = xasprintf (\"anonymous:%s:%d\", lexer_line.file, lexer_line.line);\n+\n+        /* Unfortunately above GTY_TOKEN check does not capture the\n+           typedef struct_type GTY case.  */\n+\tif (token () == GTY_TOKEN)\n+\t  {\n+        is_gty = GTY_AFTER_ID;\n+        opts = gtymarker_opt ();\n+\t  }\n+        \n+    if (is_gty) \n+      {\n+        if (token () == '{')\n+          {\n+            pair_p fields;\n+\n+            if (is_gty == GTY_AFTER_ID) \n+                parse_error (\"GTY must be specified before identifier\");\n+              \n+            advance ();\n+            fields = struct_field_seq ();\n+            require ('}');\n+            return new_structure (s, is_union, &lexer_line, fields, opts);\n+          }\n+      } \n+    else if (token () == '{')\n+      consume_balanced ('{', '}');\n \tif (opts)\n \t  *optsp = opts;\n \treturn find_structure (s, is_union);"}, {"sha": "5a4cb3e9ba5c74219596f38e2f8fc9093508585f", "filename": "gcc/gimple.h", "status": "modified", "additions": 27, "deletions": 49, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -125,16 +125,14 @@ enum plf_mask {\n };\n \n /* A node in a gimple_seq_d.  */\n-struct gimple_seq_node_d GTY((chain_next (\"%h.next\"), chain_prev (\"%h.prev\")))\n-{\n+struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) gimple_seq_node_d {\n   gimple stmt;\n   struct gimple_seq_node_d *prev;\n   struct gimple_seq_node_d *next;\n };\n \n /* A double-linked sequence of gimple statements.  */\n-struct gimple_seq_d GTY ((chain_next (\"%h.next_free\")))\n-{\n+struct GTY ((chain_next (\"%h.next_free\"))) gimple_seq_d {\n   /* First and last statements in the sequence.  */\n   gimple_seq_node first;\n   gimple_seq_node last;\n@@ -262,8 +260,7 @@ typedef struct\n /* Data structure definitions for GIMPLE tuples.  NOTE: word markers\n    are for 64 bit hosts.  */\n \n-struct gimple_statement_base GTY(())\n-{\n+struct GTY(()) gimple_statement_base {\n   /* [ WORD 1 ]\n      Main identifying code for a tuple.  */\n   ENUM_BITFIELD(gimple_code) code : 8;\n@@ -325,7 +322,7 @@ struct gimple_statement_base GTY(())\n \n /* Base structure for tuples with operands.  */\n \n-struct gimple_statement_with_ops_base GTY(())\n+struct GTY(()) gimple_statement_with_ops_base\n {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n@@ -342,7 +339,7 @@ struct gimple_statement_with_ops_base GTY(())\n \n /* Statements that take register operands.  */\n \n-struct gimple_statement_with_ops GTY(())\n+struct GTY(()) gimple_statement_with_ops\n {\n   /* [ WORD 1-6 ]  */\n   struct gimple_statement_with_ops_base opbase;\n@@ -357,7 +354,7 @@ struct gimple_statement_with_ops GTY(())\n \n /* Base for statements that take both memory and register operands.  */\n \n-struct gimple_statement_with_memory_ops_base GTY(())\n+struct GTY(()) gimple_statement_with_memory_ops_base\n {\n   /* [ WORD 1-6 ]  */\n   struct gimple_statement_with_ops_base opbase;\n@@ -372,7 +369,7 @@ struct gimple_statement_with_memory_ops_base GTY(())\n \n /* Statements that take both memory and register operands.  */\n \n-struct gimple_statement_with_memory_ops GTY(())\n+struct GTY(()) gimple_statement_with_memory_ops\n {\n   /* [ WORD 1-8 ]  */\n   struct gimple_statement_with_memory_ops_base membase;\n@@ -387,8 +384,7 @@ struct gimple_statement_with_memory_ops GTY(())\n \n /* OpenMP statements (#pragma omp).  */\n \n-struct gimple_statement_omp GTY(())\n-{\n+struct GTY(()) gimple_statement_omp {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -399,8 +395,7 @@ struct gimple_statement_omp GTY(())\n \n /* GIMPLE_BIND */\n \n-struct gimple_statement_bind GTY(())\n-{\n+struct GTY(()) gimple_statement_bind {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -423,8 +418,7 @@ struct gimple_statement_bind GTY(())\n \n /* GIMPLE_CATCH */\n \n-struct gimple_statement_catch GTY(())\n-{\n+struct GTY(()) gimple_statement_catch {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -438,8 +432,7 @@ struct gimple_statement_catch GTY(())\n \n /* GIMPLE_EH_FILTER */\n \n-struct gimple_statement_eh_filter GTY(())\n-{\n+struct GTY(()) gimple_statement_eh_filter {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -458,8 +451,7 @@ struct gimple_statement_eh_filter GTY(())\n \n /* GIMPLE_PHI */\n \n-struct gimple_statement_phi GTY(())\n-{\n+struct GTY(()) gimple_statement_phi {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -477,8 +469,7 @@ struct gimple_statement_phi GTY(())\n \n /* GIMPLE_RESX */\n \n-struct gimple_statement_resx GTY(())\n-{\n+struct GTY(()) gimple_statement_resx {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -490,8 +481,7 @@ struct gimple_statement_resx GTY(())\n \n /* GIMPLE_TRY */\n \n-struct gimple_statement_try GTY(())\n-{\n+struct GTY(()) gimple_statement_try {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -520,8 +510,7 @@ enum gimple_try_flags\n \n /* GIMPLE_WITH_CLEANUP_EXPR */\n \n-struct gimple_statement_wce GTY(())\n-{\n+struct GTY(()) gimple_statement_wce {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -538,7 +527,7 @@ struct gimple_statement_wce GTY(())\n \n /* GIMPLE_ASM  */\n \n-struct gimple_statement_asm GTY(())\n+struct GTY(()) gimple_statement_asm\n {\n   /* [ WORD 1-8 ]  */\n   struct gimple_statement_with_memory_ops_base membase;\n@@ -562,8 +551,7 @@ struct gimple_statement_asm GTY(())\n \n /* GIMPLE_OMP_CRITICAL */\n \n-struct gimple_statement_omp_critical GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_critical {\n   /* [ WORD 1-5 ]  */\n   struct gimple_statement_omp omp;\n \n@@ -573,8 +561,7 @@ struct gimple_statement_omp_critical GTY(())\n };\n \n \n-struct gimple_omp_for_iter GTY(())\n-{\n+struct GTY(()) gimple_omp_for_iter {\n   /* Condition code.  */\n   enum tree_code cond;\n \n@@ -593,8 +580,7 @@ struct gimple_omp_for_iter GTY(())\n \n /* GIMPLE_OMP_FOR */\n \n-struct gimple_statement_omp_for GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_for {\n   /* [ WORD 1-5 ]  */\n   struct gimple_statement_omp omp;\n \n@@ -616,8 +602,7 @@ struct gimple_statement_omp_for GTY(())\n \n /* GIMPLE_OMP_PARALLEL */\n \n-struct gimple_statement_omp_parallel GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_parallel {\n   /* [ WORD 1-5 ]  */\n   struct gimple_statement_omp omp;\n \n@@ -637,8 +622,7 @@ struct gimple_statement_omp_parallel GTY(())\n \n /* GIMPLE_OMP_TASK */\n \n-struct gimple_statement_omp_task GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_task {\n   /* [ WORD 1-8 ]  */\n   struct gimple_statement_omp_parallel par;\n \n@@ -659,8 +643,7 @@ struct gimple_statement_omp_task GTY(())\n \n /* GIMPLE_OMP_SECTIONS */\n \n-struct gimple_statement_omp_sections GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_sections {\n   /* [ WORD 1-5 ]  */\n   struct gimple_statement_omp omp;\n \n@@ -678,8 +661,7 @@ struct gimple_statement_omp_sections GTY(())\n    Note: This does not inherit from gimple_statement_omp, because we\n          do not need the body field.  */\n \n-struct gimple_statement_omp_continue GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_continue {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -692,8 +674,7 @@ struct gimple_statement_omp_continue GTY(())\n \n /* GIMPLE_OMP_SINGLE */\n \n-struct gimple_statement_omp_single GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_single {\n   /* [ WORD 1-5 ]  */\n   struct gimple_statement_omp omp;\n \n@@ -706,8 +687,7 @@ struct gimple_statement_omp_single GTY(())\n    Note: This is based on gimple_statement_base, not g_s_omp, because g_s_omp\n    contains a sequence, which we don't need here.  */\n \n-struct gimple_statement_omp_atomic_load GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_atomic_load {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -718,8 +698,7 @@ struct gimple_statement_omp_atomic_load GTY(())\n /* GIMPLE_OMP_ATOMIC_STORE.\n    See note on GIMPLE_OMP_ATOMIC_LOAD.  */\n \n-struct gimple_statement_omp_atomic_store GTY(())\n-{\n+struct GTY(()) gimple_statement_omp_atomic_store {\n   /* [ WORD 1-4 ]  */\n   struct gimple_statement_base gsbase;\n \n@@ -738,8 +717,7 @@ enum gimple_statement_structure_enum {\n /* Define the overall contents of a gimple tuple.  It may be any of the\n    structures declared above for various types of tuples.  */\n \n-union gimple_statement_d GTY ((desc (\"gimple_statement_structure (&%h)\")))\n-{\n+union GTY ((desc (\"gimple_statement_structure (&%h)\"))) gimple_statement_d {\n   struct gimple_statement_base GTY ((tag (\"GSS_BASE\"))) gsbase;\n   struct gimple_statement_with_ops GTY ((tag (\"GSS_WITH_OPS\"))) gsops;\n   struct gimple_statement_with_memory_ops GTY ((tag (\"GSS_WITH_MEM_OPS\"))) gsmem;"}, {"sha": "30ef854ffffb61e583736446bcdbdf092ef55921", "filename": "gcc/integrate.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -53,11 +53,11 @@ along with GCC; see the file COPYING3.  If not see\n \f\n \n /* Private type used by {get/has}_hard_reg_initial_val.  */\n-typedef struct initial_value_pair GTY(()) {\n+typedef struct GTY(()) initial_value_pair {\n   rtx hard_reg;\n   rtx pseudo;\n } initial_value_pair;\n-typedef struct initial_value_struct GTY(()) {\n+typedef struct GTY(()) initial_value_struct {\n   int num_entries;\n   int max_entries;\n   initial_value_pair * GTY ((length (\"%h.num_entries\"))) entries;"}, {"sha": "364ddb3a7b6b7d4c70c4f16976f87272c9d066e9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,11 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* builtins.c: Update GTY annotations to new syntax\n+\t* decl.c: Likewise\n+\t* java-tree.h: Likewise\n+\t* jcf.h: Likewise\n+\t* lang.c: Likewise\n+\n 2009-04-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ChangeLog, ChangeLog.ptr, ChangeLog.tree-ssa: Add copyright and"}, {"sha": "4fac1446f979f899deb0c2064018342fea64c1c5", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -65,15 +65,13 @@ typedef tree builtin_creator_function (tree, tree);\n \n /* Hold a char*, before initialization, or a tree, after\n    initialization.  */\n-union string_or_tree GTY(())\n-{\n+union GTY(()) string_or_tree {\n   const char * GTY ((tag (\"0\"))) s;\n   tree GTY ((tag (\"1\"))) t;\n };\n \n /* Used to hold a single builtin record.  */\n-struct builtin_record GTY(())\n-{\n+struct GTY(()) builtin_record {\n   union string_or_tree GTY ((desc (\"1\"))) class_name;\n   union string_or_tree GTY ((desc (\"1\"))) method_name;\n   builtin_creator_function * GTY((skip)) creator;"}, {"sha": "bd0cc8e4de6d96bc7fde5e7fb3cb4b215bc926e5", "filename": "gcc/java/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -351,8 +351,8 @@ find_stack_slot (int index, tree type)\n \t\t\t      type, -1);\n }\n \n-struct binding_level GTY(())\n-  {\n+struct GTY(())\n+  binding_level {\n     /* A chain of _DECL nodes for all variables, constants, functions,\n      * and typedef types.  These are in the reverse of the order supplied.\n      */"}, {"sha": "9ab76606b46cbc4aeab16e0165af14ea3a4af545", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -635,8 +635,7 @@ extern GTY(()) tree java_global_trees[JTI_MAX];\n /* The decl for \"_Jv_ResolvePoolEntry\".  */\n extern GTY(()) tree soft_resolvepoolentry_node;\n \n-struct lang_identifier GTY(())\n-{\n+struct GTY(()) lang_identifier {\n   struct tree_identifier ignore;\n   tree global_value;\n   tree local_value;\n@@ -647,11 +646,10 @@ struct lang_identifier GTY(())\n };\n \n /* The resulting tree type.  */\n-union lang_tree_node \n-  GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n+union GTY((desc (\"TREE_CODE (&%h.generic) == IDENTIFIER_NODE\"),\n        chain_next (\"(union lang_tree_node *)TREE_CHAIN (&%h.generic)\")))\n-\n-{\n+ \n+  lang_tree_node {\n   union tree_node GTY ((tag (\"0\"), \n \t\t\tdesc (\"tree_node_structure (&%h)\"))) \n     generic;\n@@ -772,8 +770,7 @@ union lang_tree_node\n    || TREE_CODE (NODE) == REAL_CST)\n \n /* DECL_LANG_SPECIFIC for FUNCTION_DECLs. */\n-struct lang_decl_func GTY(())\n-{\n+struct GTY(()) lang_decl_func {\n   /*  tree chain; not yet used. */\n   long code_offset;\n   int code_length;\n@@ -803,8 +800,7 @@ struct lang_decl_func GTY(())\n   unsigned int varargs : 1;\t/* Varargs method.  */\n };\n \n-struct treetreehash_entry GTY(())\n-{\n+struct GTY(()) treetreehash_entry {\n   tree key;\n   tree value;\n };\n@@ -840,8 +836,7 @@ typedef enum\n   JV_ANNOTATION_DEFAULT_KIND\n } jv_attr_kind;\n \n-typedef struct type_assertion GTY(())\n-{\n+typedef struct GTY(()) type_assertion {\n   int assertion_code; /* 'opcode' for the type of this assertion. */\n   tree op1;           /* First operand. */\n   tree op2;           /* Second operand. */\n@@ -853,8 +848,7 @@ extern htab_t java_treetreehash_create (size_t size, int ggc);\n \n /* DECL_LANG_SPECIFIC for VAR_DECL, PARM_DECL and sometimes FIELD_DECL\n    (access methods on outer class fields) and final fields. */\n-struct lang_decl_var GTY(())\n-{\n+struct GTY(()) lang_decl_var {\n   int slot_number;\n   int start_pc;\n   int end_pc;\n@@ -871,8 +865,7 @@ struct lang_decl_var GTY(())\n \n enum lang_decl_desc {LANG_DECL_FUNC, LANG_DECL_VAR};\n \n-struct lang_decl GTY(())\n-{\n+struct GTY(()) lang_decl {\n   enum lang_decl_desc desc;\n   union lang_decl_u\n     {\n@@ -927,8 +920,7 @@ struct lang_decl GTY(())\n #define TYPE_REFLECTION_DATASIZE(T)\t\t\t\t\t\\\n \t\t\t\t(TYPE_LANG_SPECIFIC (T)->reflection_datasize)\n \n-struct lang_type GTY(())\n-{\n+struct GTY(()) lang_type {\n   tree signature;\n   struct JCF *jcf;\n   struct CPool *cpool;"}, {"sha": "7e8d18d9b3fa76886337a4e8bfb9ebeaf9e99c35", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -66,15 +66,15 @@ jcf_open_exact_case (const char* filename, int oflag);\n struct JCF;\n typedef int (*jcf_filbuf_t) (struct JCF*, int needed);\n \n-union cpool_entry GTY(()) {\n+union GTY(()) cpool_entry {\n   jword GTY ((tag (\"0\"))) w;\n   tree GTY ((tag (\"1\"))) t;\n };\n \n #define cpool_entry_is_tree(tag) \\\n   (tag & CONSTANT_ResolvedFlag) || tag == CONSTANT_Utf8\n \n-typedef struct CPool GTY(()) {\n+typedef struct GTY(()) CPool {\n   /* Available number of elements in the constants array, before it\n      must be re-allocated. */\n   int capacity;\n@@ -92,7 +92,7 @@ struct ZipDirectory;\n \n /* JCF encapsulates the state of reading a Java Class File. */\n \n-typedef struct JCF GTY(()) {\n+typedef struct GTY(()) JCF {\n   unsigned char * GTY ((skip)) buffer;\n   unsigned char * GTY ((skip)) buffer_end;\n   unsigned char * GTY ((skip)) read_ptr;"}, {"sha": "61337ccf2a9d2cdddf99d729192159a7cc766bab", "filename": "gcc/java/lang.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -111,8 +111,7 @@ static int dependency_tracking = 0;\n #define DEPEND_TARGET_SET 4\n #define DEPEND_FILE_ALREADY_SET 8\n \n-struct language_function GTY(())\n-{\n+struct GTY(()) language_function {\n   int unused;\n };\n "}, {"sha": "9a9c875621e8c8d02304856dde49b0702a9596df", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,8 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* objc-act.c: Update GTY annotations to new syntax\n+\t* objc-act.h: Likewise\n+\n 2009-04-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ChangeLog: Add copyright and license notices."}, {"sha": "d3c5a197203e8762cfdc20bdb7a7d0808bb8934f", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -389,8 +389,7 @@ static int flag_typed_selectors;\n /* Store all constructed constant strings in a hash table so that\n    they get uniqued properly.  */\n \n-struct string_descriptor GTY(())\n-{\n+struct GTY(()) string_descriptor {\n   /* The literal argument .  */\n   tree literal;\n \n@@ -401,8 +400,7 @@ struct string_descriptor GTY(())\n static GTY((param_is (struct string_descriptor))) htab_t string_htab;\n \n /* Store the EH-volatilized types in a hash table, for easy retrieval.  */\n-struct volatilized_type GTY(())\n-{\n+struct GTY(()) volatilized_type {\n   tree type;\n };\n \n@@ -3297,8 +3295,7 @@ objc_generate_write_barrier (tree lhs, enum tree_code modifycode, tree rhs)\n   return result;\n }\n \n-struct interface_tuple GTY(())\n-{\n+struct GTY(()) interface_tuple {\n   tree id;\n   tree class_name;\n };"}, {"sha": "f81559643c33cf98257707edfeb38ac9edcc3932", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -126,13 +126,11 @@ enum gimplify_status objc_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n typedef struct hashed_entry\t*hash;\n typedef struct hashed_attribute\t*attr;\n \n-struct hashed_attribute GTY(())\n-{\n+struct GTY(()) hashed_attribute {\n   attr next;\n   tree value;\n };\n-struct hashed_entry GTY(())\n-{\n+struct GTY(()) hashed_entry {\n   attr list;\n   hash next;\n   tree key;\n@@ -145,8 +143,7 @@ extern GTY ((length (\"SIZEHASHTABLE\"))) hash *cls_method_hash_list;\n \n /* Objective-C/Objective-C++ @implementation list.  */\n \n-struct imp_entry GTY(())\n-{\n+struct GTY(()) imp_entry {\n   struct imp_entry *next;\n   tree imp_context;\n   tree imp_template;"}, {"sha": "a8a6f485a548f59e1058a56685f8db3471583325", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -132,8 +132,7 @@ void debug_optab_libfuncs (void);\n \n /* Info about libfunc.  We use same hashtable for normal optabs and conversion\n    optab.  In the first case mode2 is unused.  */\n-struct libfunc_entry GTY(())\n-{\n+struct GTY(()) libfunc_entry {\n   size_t optab;\n   enum machine_mode mode1, mode2;\n   rtx libfunc;"}, {"sha": "ecccbdd9ac992191163f53f0ded04349486e3ff4", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -98,7 +98,7 @@ print \"\"\n print \"#if !defined(GCC_DRIVER) && !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\"\n print \"\"\n print \"/* Structure to save/restore optimization and target specific options.  */\";\n-print \"struct cl_optimization GTY(())\";\n+print \"struct GTY(()) cl_optimization\";\n print \"{\";\n \n n_opt_char = 2;\n@@ -154,7 +154,7 @@ print \"\";\n \n # Target and optimization save/restore/print functions.\n print \"/* Structure to save/restore selected target specific options.  */\";\n-print \"struct cl_target_option GTY(())\";\n+print \"struct GTY(()) cl_target_option\";\n print \"{\";\n \n n_target_char = 0;"}, {"sha": "e7871f980e20144c30701488d313ec3b7ceaab38", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -470,13 +470,13 @@ enum section_category\n };\n \n /* Information that is provided by all instances of the section type.  */\n-struct section_common GTY(()) {\n+struct GTY(()) section_common {\n   /* The set of SECTION_* flags that apply to this section.  */\n   unsigned int flags;\n };\n \n /* Information about a SECTION_NAMED section.  */\n-struct named_section GTY(()) {\n+struct GTY(()) named_section {\n   struct section_common common;\n \n   /* The name of the section.  */\n@@ -492,7 +492,7 @@ struct named_section GTY(()) {\n typedef void (*unnamed_section_callback) (const void *);\n \n /* Information about a SECTION_UNNAMED section.  */\n-struct unnamed_section GTY(()) {\n+struct GTY(()) unnamed_section {\n   struct section_common common;\n \n   /* The callback used to switch to the section, and the data that\n@@ -518,16 +518,15 @@ typedef bool (*noswitch_section_callback) (tree decl, const char *name,\n \t\t\t\t\t   unsigned HOST_WIDE_INT rounded);\n \n /* Information about a SECTION_NOSWITCH section.  */\n-struct noswitch_section GTY(()) {\n+struct GTY(()) noswitch_section {\n   struct section_common common;\n \n   /* The callback used to assemble decls in this section.  */\n   noswitch_section_callback GTY ((skip)) callback;\n };\n \n /* Information about a section, which may be named or unnamed.  */\n-union section GTY ((desc (\"SECTION_STYLE (&(%h))\")))\n-{\n+union GTY ((desc (\"SECTION_STYLE (&(%h))\"))) section {\n   struct section_common GTY ((skip)) common;\n   struct named_section GTY ((tag (\"SECTION_NAMED\"))) named;\n   struct unnamed_section GTY ((tag (\"SECTION_UNNAMED\"))) unnamed;"}, {"sha": "47efac5d2ae953b8e7826b1b85062dac801d047a", "filename": "gcc/real.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -43,8 +43,7 @@ enum real_value_class {\n #define SIGSZ\t\t\t(SIGNIFICAND_BITS / HOST_BITS_PER_LONG)\n #define SIG_MSB\t\t\t((unsigned long)1 << (HOST_BITS_PER_LONG - 1))\n \n-struct real_value GTY(())\n-{\n+struct GTY(()) real_value {\n   /* Use the same underlying type for all bit-fields, so as to make\n      sure they're packed together, otherwise REAL_VALUE_TYPE_SIZE will\n      be miscomputed.  */"}, {"sha": "06b0caeca531a0042d5447442257a5f711744253", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -139,7 +139,7 @@ typedef struct\n /* ALIGN and SIZE are the alignment and size of the MEM itself,\n    while EXPR can describe a larger underlying object, which might have a\n    stricter alignment; OFFSET is the offset of the MEM within that object.  */\n-typedef struct mem_attrs GTY(())\n+typedef struct GTY(()) mem_attrs\n {\n   tree expr;\t\t\t/* expr corresponding to MEM.  */\n   rtx offset;\t\t\t/* Offset from start of DECL, as CONST_INT.  */\n@@ -155,8 +155,7 @@ typedef struct mem_attrs GTY(())\n    object in the low part of a 4-byte register, the OFFSET field\n    will be -3 rather than 0.  */\n \n-typedef struct reg_attrs GTY(())\n-{\n+typedef struct GTY(()) reg_attrs {\n   tree decl;\t\t\t/* decl corresponding to REG.  */\n   HOST_WIDE_INT offset;\t\t/* Offset from start of DECL.  */\n } reg_attrs;\n@@ -185,7 +184,7 @@ typedef union rtunion_def rtunion;\n /* This structure remembers the position of a SYMBOL_REF within an\n    object_block structure.  A SYMBOL_REF only provides this information\n    if SYMBOL_REF_HAS_BLOCK_INFO_P is true.  */\n-struct block_symbol GTY(()) {\n+struct GTY(()) block_symbol {\n   /* The usual SYMBOL_REF fields.  */\n   rtunion GTY ((skip)) fld[3];\n \n@@ -203,8 +202,7 @@ DEF_VEC_ALLOC_P(rtx,gc);\n \n /* Describes a group of objects that are to be placed together in such\n    a way that their relative positions are known.  */\n-struct object_block GTY(())\n-{\n+struct GTY(()) object_block {\n   /* The section in which these objects should be placed.  */\n   section *sect;\n \n@@ -237,9 +235,8 @@ struct object_block GTY(())\n \n /* RTL expression (\"rtx\").  */\n \n-struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n-\t\t    chain_prev (\"RTX_PREV (&%h)\")))\n-{\n+struct GTY((chain_next (\"RTX_NEXT (&%h)\"),\n+\t\t    chain_prev (\"RTX_PREV (&%h)\"))) rtx_def {\n   /* The kind of expression this is.  */\n   ENUM_BITFIELD(rtx_code) code: 16;\n \n@@ -357,7 +354,7 @@ struct rtx_def GTY((chain_next (\"RTX_NEXT (&%h)\"),\n    for a variable number of things.  The principle use is inside\n    PARALLEL expressions.  */\n \n-struct rtvec_def GTY(()) {\n+struct GTY(()) rtvec_def {\n   int num_elem;\t\t/* number of elements */\n   rtx GTY ((length (\"%h.num_elem\"))) elem[1];\n };"}, {"sha": "072af72de8fc66a8aa5205832682f2cdaebf3ae9", "filename": "gcc/stringpool.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fstringpool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fstringpool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstringpool.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -214,8 +214,7 @@ gt_pch_n_S (const void *x)\n /* SPD is saved in the PCH file and holds the information needed\n    to restore the string pool.  */\n \n-struct string_pool_data GTY(())\n-{\n+struct GTY(()) string_pool_data {\n   struct ht_identifier * * \n     GTY((length (\"%h.nslots\"),\n \t nested_ptr (union tree_node, \"%h ? GCC_IDENT_TO_HT_IDENT (%h) : NULL\","}, {"sha": "0a1850f85bbefdbf816072973de60f3389acebcf", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -4587,7 +4587,7 @@ dot_rdg (struct graph *rdg)\n /* This structure is used for recording the mapping statement index in\n    the RDG.  */\n \n-struct rdg_vertex_info GTY(())\n+struct GTY(()) rdg_vertex_info\n {\n   gimple stmt;\n   int index;"}, {"sha": "b59774f29ceb3ba60de486e6534f8e963b331609", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -45,8 +45,7 @@ struct static_var_ann_d;\n /* Gimple dataflow datastructure. All publicly available fields shall have\n    gimple_ accessor defined in tree-flow-inline.h, all publicly modifiable\n    fields should have gimple_set accessor.  */\n-struct gimple_df GTY(())\n-{\n+struct GTY(()) gimple_df {\n   /* Array of all variables referenced in the function.  */\n   htab_t GTY((param_is (union tree_node))) referenced_vars;\n \n@@ -124,7 +123,7 @@ typedef struct\n ---------------------------------------------------------------------------*/\n \n /* Aliasing information for SSA_NAMEs representing pointer variables.  */\n-struct ptr_info_def GTY(())\n+struct GTY(()) ptr_info_def\n {\n   /* The points-to solution, TBAA-pruned if the pointer is dereferenced.  */\n   struct pt_solution pt;\n@@ -136,8 +135,7 @@ struct ptr_info_def GTY(())\n ---------------------------------------------------------------------------*/\n enum tree_ann_type { TREE_ANN_COMMON, VAR_ANN, FUNCTION_ANN };\n \n-struct tree_ann_common_d GTY(())\n-{\n+struct GTY(()) tree_ann_common_d {\n   /* Annotation type.  */\n   enum tree_ann_type type;\n \n@@ -205,8 +203,7 @@ enum noalias_state {\n };\n \n \n-struct var_ann_d GTY(())\n-{\n+struct GTY(()) var_ann_d {\n   struct tree_ann_common_d common;\n \n   /* Used by the out of SSA pass to determine whether this variable has\n@@ -248,14 +245,12 @@ struct var_ann_d GTY(())\n \n /* Container for variable annotation used by hashtable for annotations for\n    static variables.  */\n-struct static_var_ann_d GTY(())\n-{\n+struct GTY(()) static_var_ann_d {\n   struct var_ann_d ann;\n   unsigned int uid;\n };\n \n-struct function_ann_d GTY(())\n-{\n+struct GTY(()) function_ann_d {\n   struct tree_ann_common_d common;\n };\n \n@@ -354,8 +349,7 @@ typedef struct immediate_use_iterator_d\n \n \n \n-union tree_ann_d GTY((desc (\"ann_type ((tree_ann_t)&%h)\")))\n-{\n+union GTY((desc (\"ann_type ((tree_ann_t)&%h)\"))) tree_ann_d {\n   struct tree_ann_common_d GTY((tag (\"TREE_ANN_COMMON\"))) common;\n   struct var_ann_d GTY((tag (\"VAR_ANN\"))) vdecl;\n   struct function_ann_d GTY((tag (\"FUNCTION_ANN\"))) fdecl;\n@@ -379,8 +373,7 @@ static inline int get_lineno (const_gimple);\n /*---------------------------------------------------------------------------\n                   Structure representing predictions in tree level.\n ---------------------------------------------------------------------------*/\n-struct edge_prediction GTY((chain_next (\"%h.ep_next\")))\n-{\n+struct GTY((chain_next (\"%h.ep_next\"))) edge_prediction {\n   struct edge_prediction *ep_next;\n   edge ep_edge;\n   enum br_predictor ep_predictor;\n@@ -394,8 +387,7 @@ static inline void set_phi_nodes (basic_block, gimple_seq);\n /*---------------------------------------------------------------------------\n \t\t\t      Global declarations\n ---------------------------------------------------------------------------*/\n-struct int_tree_map GTY(())\n-{\n+struct GTY(()) int_tree_map {\n   \n   unsigned int uid;\n   tree to;\n@@ -645,8 +637,7 @@ extern bool gimple_stmt_may_fallthru (gimple);\n /* In tree-ssa.c  */\n \n /* Mapping for redirected edges.  */\n-struct _edge_var_map GTY(())\n-{\n+struct GTY(()) _edge_var_map {\n   tree result;\t\t\t/* PHI result.  */\n   tree def;\t\t\t/* PHI arg definition.  */\n };"}, {"sha": "2d31f9f534ccb7f5b6495297315379abb8a81772", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -282,8 +282,7 @@ static tree analyze_scalar_evolution_1 (struct loop *, tree, tree);\n    basic block INSTANTIATED_BELOW, the value of VAR can be expressed\n    as CHREC.  */\n \n-struct scev_info_str GTY(())\n-{\n+struct GTY(()) scev_info_str {\n   basic_block instantiated_below;\n   tree var;\n   tree chrec;"}, {"sha": "7a2ba3991721e6d6e5112d2503f3994c535b064c", "filename": "gcc/tree-ssa-address.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-address.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -70,8 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n /* A \"template\" for memory address, used to determine whether the address is\n    valid for mode.  */\n \n-struct mem_addr_template GTY (())\n-{\n+struct GTY (()) mem_addr_template {\n   rtx ref;\t\t\t/* The template.  */\n   rtx * GTY ((skip)) step_p;\t/* The point in template where the step should be\n \t\t\t\t   filled in.  */"}, {"sha": "5f951ae162527d220e5f3441536dcb3817f80e42", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -48,7 +48,7 @@ enum escape_type\n \n    The points-to solution is a union of pt_vars and the abstract\n    sets specified by the flags.  */\n-struct pt_solution GTY(())\n+struct GTY(()) pt_solution\n {\n   /* Nonzero if points-to analysis couldn't determine where this pointer\n      is pointing to.  */"}, {"sha": "691db93bc4c48b23cf544171629d4d72fa660719", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -53,14 +53,13 @@ typedef struct use_optype_d *use_optype_p;\n    operand memory manager.  Operands are suballocated out of this block.  The\n    MEM array varies in size.  */\n    \n-struct ssa_operand_memory_d GTY((chain_next(\"%h.next\")))\n-{\n+struct GTY((chain_next(\"%h.next\"))) ssa_operand_memory_d {\n   struct ssa_operand_memory_d *next;\n   char mem[1];\n };\n \n /* Per-function operand caches.  */\n-struct ssa_operands GTY(()) {\n+struct GTY(()) ssa_operands {\n    struct ssa_operand_memory_d *operand_memory;\n    unsigned operand_memory_index;\n    /* Current size of the operand memory buffer.  */"}, {"sha": "bcb8a0c1130dcd4de102053905c93c4529d04867", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -148,8 +148,7 @@ static GTY(()) int next_type_uid = 1;\n /* Since we cannot rehash a type after it is in the table, we have to\n    keep the hash code.  */\n \n-struct type_hash GTY(())\n-{\n+struct GTY(()) type_hash {\n   unsigned long hash;\n   tree type;\n };"}, {"sha": "ef1b42031a3a80203e3180f078151ace7a469c45", "filename": "gcc/tree.h", "status": "modified", "additions": 49, "deletions": 94, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -342,8 +342,7 @@ enum omp_clause_code\n    fields.  */\n union tree_ann_d;\n \n-struct tree_base GTY(())\n-{\n+struct GTY(()) tree_base {\n   ENUM_BITFIELD(tree_code) code : 16;\n \n   unsigned side_effects_flag : 1;\n@@ -379,8 +378,7 @@ struct tree_base GTY(())\n   union tree_ann_d *ann;\n };\n \n-struct tree_common GTY(())\n-{\n+struct GTY(()) tree_common {\n   struct tree_base base;\n   tree chain;\n   tree type;\n@@ -1364,8 +1362,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n \t== (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (B))\t\\\n        && TREE_INT_CST_LOW (A) < TREE_INT_CST_LOW (B)))\n \n-struct tree_int_cst GTY(())\n-{\n+struct GTY(()) tree_int_cst {\n   struct tree_common common;\n   double_int int_cst;\n };\n@@ -1378,8 +1375,7 @@ struct real_value;\n #define TREE_REAL_CST_PTR(NODE) (REAL_CST_CHECK (NODE)->real_cst.real_cst_ptr)\n #define TREE_REAL_CST(NODE) (*TREE_REAL_CST_PTR (NODE))\n \n-struct tree_real_cst GTY(())\n-{\n+struct GTY(()) tree_real_cst {\n   struct tree_common common;\n   struct real_value * real_cst_ptr;\n };\n@@ -1390,8 +1386,7 @@ struct fixed_value;\n #define TREE_FIXED_CST_PTR(NODE) (FIXED_CST_CHECK (NODE)->fixed_cst.fixed_cst_ptr)\n #define TREE_FIXED_CST(NODE) (*TREE_FIXED_CST_PTR (NODE))\n \n-struct tree_fixed_cst GTY(())\n-{\n+struct GTY(()) tree_fixed_cst {\n   struct tree_common common;\n   struct fixed_value * fixed_cst_ptr;\n };\n@@ -1401,8 +1396,7 @@ struct tree_fixed_cst GTY(())\n #define TREE_STRING_POINTER(NODE) \\\n   ((const char *)(STRING_CST_CHECK (NODE)->string.str))\n \n-struct tree_string GTY(())\n-{\n+struct GTY(()) tree_string {\n   struct tree_common common;\n   int length;\n   char str[1];\n@@ -1412,8 +1406,7 @@ struct tree_string GTY(())\n #define TREE_REALPART(NODE) (COMPLEX_CST_CHECK (NODE)->complex.real)\n #define TREE_IMAGPART(NODE) (COMPLEX_CST_CHECK (NODE)->complex.imag)\n \n-struct tree_complex GTY(())\n-{\n+struct GTY(()) tree_complex {\n   struct tree_common common;\n   tree real;\n   tree imag;\n@@ -1422,8 +1415,7 @@ struct tree_complex GTY(())\n /* In a VECTOR_CST node.  */\n #define TREE_VECTOR_CST_ELTS(NODE) (VECTOR_CST_CHECK (NODE)->vector.elements)\n \n-struct tree_vector GTY(())\n-{\n+struct GTY(()) tree_vector {\n   struct tree_common common;\n   tree elements;\n };\n@@ -1446,8 +1438,7 @@ struct tree_vector GTY(())\n   ((tree) ((char *) (NODE) - sizeof (struct tree_common)))\n #define GCC_IDENT_TO_HT_IDENT(NODE) (&((struct tree_identifier *) (NODE))->id)\n \n-struct tree_identifier GTY(())\n-{\n+struct GTY(()) tree_identifier {\n   struct tree_common common;\n   struct ht_identifier id;\n };\n@@ -1456,8 +1447,7 @@ struct tree_identifier GTY(())\n #define TREE_PURPOSE(NODE) (TREE_LIST_CHECK (NODE)->list.purpose)\n #define TREE_VALUE(NODE) (TREE_LIST_CHECK (NODE)->list.value)\n \n-struct tree_list GTY(())\n-{\n+struct GTY(()) tree_list {\n   struct tree_common common;\n   tree purpose;\n   tree value;\n@@ -1470,8 +1460,7 @@ struct tree_list GTY(())\n \n #define TREE_VEC_ELT(NODE,I) TREE_VEC_ELT_CHECK (NODE, I)\n \n-struct tree_vec GTY(())\n-{\n+struct GTY(()) tree_vec {\n   struct tree_common common;\n   int length;\n   tree GTY ((length (\"TREE_VEC_LENGTH ((tree)&%h)\"))) a[1];\n@@ -1516,17 +1505,15 @@ struct tree_vec GTY(())\n    element. INDEX can optionally design the position of VALUE: in arrays,\n    it is the index where VALUE has to be placed; in structures, it is the\n    FIELD_DECL of the member.  */\n-typedef struct constructor_elt_d GTY(())\n-{\n+typedef struct GTY(()) constructor_elt_d {\n   tree index;\n   tree value;\n } constructor_elt;\n \n DEF_VEC_O(constructor_elt);\n DEF_VEC_ALLOC_O(constructor_elt,gc);\n \n-struct tree_constructor GTY(())\n-{\n+struct GTY(()) tree_constructor {\n   struct tree_common common;\n   VEC(constructor_elt,gc) *elts;\n };\n@@ -1820,8 +1807,7 @@ enum omp_clause_default_kind\n #define OMP_CLAUSE_DEFAULT_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_DEFAULT)->omp_clause.subcode.default_kind)\n \n-struct tree_exp GTY(())\n-{\n+struct GTY(()) tree_exp {\n   struct tree_common common;\n   location_t locus;\n   tree block;\n@@ -1879,8 +1865,7 @@ struct ptr_info_def;\n \n /* Immediate use linking structure.  This structure is used for maintaining\n    a doubly linked list of uses of an SSA_NAME.  */\n-typedef struct ssa_use_operand_d GTY(())\n-{\n+typedef struct GTY(()) ssa_use_operand_d {\n   struct ssa_use_operand_d* GTY((skip(\"\"))) prev;\n   struct ssa_use_operand_d* GTY((skip(\"\"))) next;\n   /* Immediate uses for a given SSA name are maintained as a cyclic\n@@ -1895,8 +1880,7 @@ typedef struct ssa_use_operand_d GTY(())\n /* Return the immediate_use information for an SSA_NAME. */\n #define SSA_NAME_IMM_USE_NODE(NODE) SSA_NAME_CHECK (NODE)->ssa_name.imm_uses\n \n-struct tree_ssa_name GTY(())\n-{\n+struct GTY(()) tree_ssa_name {\n   struct tree_common common;\n \n   /* _DECL wrapped by this SSA name.  */\n@@ -1922,8 +1906,7 @@ struct tree_ssa_name GTY(())\n   struct ssa_use_operand_d imm_uses;\n };\n \f\n-struct phi_arg_d GTY(())\n-{\n+struct GTY(()) phi_arg_d {\n   /* imm_use MUST be the first element in struct because we do some\n      pointer arithmetic with it.  See phi_arg_index_from_use.  */\n   struct ssa_use_operand_d imm_use;\n@@ -1943,8 +1926,7 @@ struct phi_arg_d GTY(())\n #define OMP_CLAUSE_OPERAND(NODE, I)\t\t\t\t\\\n \tOMP_CLAUSE_ELT_CHECK (NODE, I)\n \n-struct tree_omp_clause GTY(())\n-{\n+struct GTY(()) tree_omp_clause {\n   struct tree_common common;\n   enum omp_clause_code code;\n   union omp_clause_subcode {\n@@ -2013,8 +1995,7 @@ struct varray_head_tag;\n \n #define BLOCK_SOURCE_LOCATION(NODE) (BLOCK_CHECK (NODE)->block.locus)\n \n-struct tree_block GTY(())\n-{\n+struct GTY(()) tree_block {\n   struct tree_common common;\n \n   unsigned abstract_flag : 1;\n@@ -2259,8 +2240,7 @@ extern enum machine_mode vector_type_mode (const_tree);\n \n struct die_struct;\n \n-struct tree_type GTY(())\n-{\n+struct GTY(()) tree_type {\n   struct tree_common common;\n   tree values;\n   tree size;\n@@ -2413,8 +2393,7 @@ struct tree_type GTY(())\n #define BINFO_INHERITANCE_CHAIN(NODE) \\\n \t(TREE_BINFO_CHECK(NODE)->binfo.inheritance)\n \n-struct tree_binfo GTY (())\n-{\n+struct GTY (()) tree_binfo {\n   struct tree_common common;\n \n   tree offset;\n@@ -2487,8 +2466,7 @@ struct function;\n     scope\".  */\n #define DECL_CONTEXT(NODE) (DECL_MINIMAL_CHECK (NODE)->decl_minimal.context)\n #define DECL_FIELD_CONTEXT(NODE) (FIELD_DECL_CHECK (NODE)->decl_minimal.context)\n-struct tree_decl_minimal GTY(())\n-{\n+struct GTY(()) tree_decl_minimal {\n   struct tree_common common;\n   location_t locus;\n   unsigned int uid;\n@@ -2642,8 +2620,7 @@ struct tree_decl_minimal GTY(())\n #define DECL_NO_TBAA_P(DECL) \\\n   DECL_COMMON_CHECK (DECL)->decl_common.no_tbaa_flag\n \n-struct tree_decl_common GTY(())\n-{\n+struct GTY(()) tree_decl_common {\n   struct tree_decl_minimal common;\n   tree size;\n \n@@ -2745,8 +2722,7 @@ extern void decl_value_expr_insert (tree, tree);\n /* In VAR_DECL and PARM_DECL nodes, nonzero means declared `register'.  */\n #define DECL_REGISTER(NODE) (DECL_WRTL_CHECK (NODE)->decl_common.decl_flag_0)\n \n-struct tree_decl_with_rtl GTY(())\n-{\n+struct GTY(()) tree_decl_with_rtl {\n   struct tree_decl_common common;\n   rtx rtl;\n };\n@@ -2814,8 +2790,7 @@ struct tree_decl_with_rtl GTY(())\n #define DECL_NONADDRESSABLE_P(NODE) \\\n   (FIELD_DECL_CHECK (NODE)->decl_common.decl_flag_3)\n \n-struct tree_field_decl GTY(())\n-{\n+struct GTY(()) tree_field_decl {\n   struct tree_decl_common common;\n \n   tree offset;\n@@ -2836,18 +2811,15 @@ struct tree_field_decl GTY(())\n    jumping into such a binding contour has been printed for this label.  */\n #define DECL_ERROR_ISSUED(NODE) (LABEL_DECL_CHECK (NODE)->decl_common.decl_flag_0)\n \n-struct tree_label_decl GTY(())\n-{\n+struct GTY(()) tree_label_decl {\n   struct tree_decl_with_rtl common;\n };\n \n-struct tree_result_decl GTY(())\n-{\n+struct GTY(()) tree_result_decl {\n   struct tree_decl_with_rtl common;\n };\n \n-struct tree_const_decl GTY(())\n-{\n+struct GTY(()) tree_const_decl {\n   struct tree_decl_with_rtl common;\n };\n \n@@ -2859,8 +2831,7 @@ struct tree_const_decl GTY(())\n    where the data was actually passed.  */\n #define DECL_INCOMING_RTL(NODE) (PARM_DECL_CHECK (NODE)->parm_decl.incoming_rtl)\n \n-struct tree_parm_decl GTY(())\n-{\n+struct GTY(()) tree_parm_decl {\n   struct tree_decl_with_rtl common;\n   rtx incoming_rtl;\n };\n@@ -2982,8 +2953,7 @@ extern void decl_restrict_base_insert (tree, tree);\n    multiple translation units should be merged.  */\n #define DECL_ONE_ONLY(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.one_only)\n \n-struct tree_decl_with_vis GTY(())\n-{\n+struct GTY(()) tree_decl_with_vis {\n  struct tree_decl_with_rtl common;\n  tree assembler_name;\n  tree section_name;\n@@ -3087,8 +3057,7 @@ extern void decl_fini_priority_insert (tree, priority_type);\n #define DECL_THREAD_LOCAL_P(NODE) \\\n   (VAR_DECL_CHECK (NODE)->decl_with_vis.tls_model >= TLS_MODEL_REAL)\n \n-struct tree_var_decl GTY(())\n-{\n+struct GTY(()) tree_var_decl {\n   struct tree_decl_with_vis common;\n };\n \n@@ -3107,9 +3076,8 @@ struct tree_var_decl GTY(())\n    C++ also uses this field in namespaces, hence the DECL_NON_COMMON_CHECK.  */\n #define DECL_VINDEX(NODE) (DECL_NON_COMMON_CHECK (NODE)->decl_non_common.vindex)\n \n-struct tree_decl_non_common GTY(())\n-\n-{\n+struct GTY(())\n+ tree_decl_non_common {\n   struct tree_decl_with_vis common;\n   /* C++ uses this in namespaces.  */\n   tree saved_tree;\n@@ -3244,8 +3212,7 @@ struct tree_decl_non_common GTY(())\n    FUNCTION_DECL from non_common, or inherit non_common from FUNCTION_DECL,\n    which seemed a bit strange.  */\n \n-struct tree_function_decl GTY(())\n-{\n+struct GTY(()) tree_function_decl {\n   struct tree_decl_non_common common;\n \n   struct function *f;\n@@ -3298,8 +3265,7 @@ struct tree_function_decl GTY(())\n #define IMPORTED_DECL_ASSOCIATED_DECL(NODE) \\\n (DECL_INITIAL (IMPORTED_DECL_CHECK (NODE)))\n \n-struct tree_type_decl GTY(())\n-{\n+struct GTY(()) tree_type_decl {\n   struct tree_decl_non_common common;\n \n };\n@@ -3315,17 +3281,15 @@ struct tree_type_decl GTY(())\n #define STATEMENT_LIST_TAIL(NODE) \\\n   (STATEMENT_LIST_CHECK (NODE)->stmt_list.tail)\n \n-struct tree_statement_list_node\n-  GTY ((chain_next (\"%h.next\"), chain_prev (\"%h.prev\")))\n-{\n+struct GTY ((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) tree_statement_list_node\n+ {\n   struct tree_statement_list_node *prev;\n   struct tree_statement_list_node *next;\n   tree stmt;\n };\n \n-struct tree_statement_list\n-  GTY(())\n-{\n+struct GTY(()) tree_statement_list\n+ {\n   struct tree_common common;\n   struct tree_statement_list_node *head;\n   struct tree_statement_list_node *tail;\n@@ -3334,8 +3298,7 @@ struct tree_statement_list\n \n /* Optimization options used by a function.  */\n \n-struct tree_optimization_option GTY(())\n-{\n+struct GTY(()) tree_optimization_option {\n   struct tree_common common;\n \n   /* The optimization options used by the user.  */\n@@ -3350,8 +3313,7 @@ extern tree build_optimization_node (void);\n \n /* Target options used by a function.  */\n \n-struct tree_target_option GTY(())\n-{\n+struct GTY(()) tree_target_option {\n   struct tree_common common;\n \n   /* The optimization options used by the user.  */\n@@ -3369,9 +3331,8 @@ extern tree build_target_option_node (void);\n    It may be any of the structures declared above\n    for various types of node.  */\n \n-union tree_node GTY ((ptr_alias (union lang_tree_node),\n-\t\t      desc (\"tree_node_structure (&%h)\")))\n-{\n+union GTY ((ptr_alias (union lang_tree_node),\n+\t\t      desc (\"tree_node_structure (&%h)\"))) tree_node {\n   struct tree_base GTY ((tag (\"TS_BASE\"))) base;\n   struct tree_common GTY ((tag (\"TS_COMMON\"))) common;\n   struct tree_int_cst GTY ((tag (\"TS_INT_CST\"))) int_cst;\n@@ -5166,8 +5127,7 @@ extern void vect_set_verbosity_level (const char *);\n \n /* In tree.c.  */\n \n-struct tree_map_base GTY(())\n-{\n+struct GTY(()) tree_map_base {\n   tree from;\n };\n \n@@ -5177,8 +5137,7 @@ extern int tree_map_base_marked_p (const void *);\n \n /* Map from a tree to another tree.  */\n \n-struct tree_map GTY(())\n-{\n+struct GTY(()) tree_map {\n   struct tree_map_base base;\n   unsigned int hash;\n   tree to;\n@@ -5190,8 +5149,7 @@ extern unsigned int tree_map_hash (const void *);\n \n /* Map from a tree to an int.  */\n \n-struct tree_int_map GTY(())\n-{\n+struct GTY(()) tree_int_map {\n   struct tree_map_base base;\n   unsigned int to;\n };\n@@ -5202,8 +5160,7 @@ struct tree_int_map GTY(())\n \n /* Map from a tree to initialization/finalization priorities.  */\n \n-struct tree_priority_map GTY(())\n-{\n+struct GTY(()) tree_priority_map {\n   struct tree_map_base base;\n   priority_type init;\n   priority_type fini;\n@@ -5249,15 +5206,13 @@ tree_operand_length (const_tree node)\n    defined by this point.  */\n \n /* Structure containing iterator state.  */\n-typedef struct call_expr_arg_iterator_d GTY (())\n-{\n+typedef struct GTY (()) call_expr_arg_iterator_d {\n   tree t;\t/* the call_expr */\n   int n;\t/* argument count */\n   int i;\t/* next argument index */\n } call_expr_arg_iterator;\n \n-typedef struct const_call_expr_arg_iterator_d GTY (())\n-{\n+typedef struct GTY (()) const_call_expr_arg_iterator_d {\n   const_tree t;\t/* the call_expr */\n   int n;\t/* argument count */\n   int i;\t/* next argument index */"}, {"sha": "9dcae52e344ba5c231c83e5d27d2270355ff462c", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -2713,8 +2713,7 @@ assemble_real (REAL_VALUE_TYPE d, enum machine_mode mode, unsigned int align)\n    Store them both in the structure *VALUE.\n    EXP must be reducible.  */\n \n-struct addr_const GTY(())\n-{\n+struct GTY(()) addr_const {\n   rtx base;\n   HOST_WIDE_INT offset;\n };\n@@ -2782,8 +2781,7 @@ decode_addr_const (tree exp, struct addr_const *value)\n    Each constant in memory thus far output is recorded\n    in `const_desc_table'.  */\n \n-struct constant_descriptor_tree GTY(())\n-{\n+struct GTY(()) constant_descriptor_tree {\n   /* A MEM for the constant.  */\n   rtx rtl;\n \n@@ -3368,8 +3366,7 @@ lookup_constant_def (tree exp)\n    can use one per-file pool.  Should add a targetm bit to tell the\n    difference.  */\n \n-struct rtx_constant_pool GTY(())\n-{\n+struct GTY(()) rtx_constant_pool {\n   /* Pointers to first and last constant in pool, as ordered by offset.  */\n   struct constant_descriptor_rtx *first;\n   struct constant_descriptor_rtx *last;\n@@ -3385,8 +3382,7 @@ struct rtx_constant_pool GTY(())\n   HOST_WIDE_INT offset;\n };\n \n-struct constant_descriptor_rtx GTY((chain_next (\"%h.next\")))\n-{\n+struct GTY((chain_next (\"%h.next\"))) constant_descriptor_rtx {\n   struct constant_descriptor_rtx *next;\n   rtx mem;\n   rtx sym;\n@@ -5180,8 +5176,7 @@ globalize_decl (tree decl)\n    of an alias.  This requires that the decl have been defined.  Aliases\n    that precede their definition have to be queued for later processing.  */\n \n-typedef struct alias_pair GTY(())\n-{\n+typedef struct GTY(()) alias_pair {\n   tree decl;\n   tree target;\n } alias_pair;"}, {"sha": "fbccde34d261cc669dbb6620d55da9babed4f09c", "filename": "gcc/varray.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -62,7 +62,7 @@ enum varray_data_enum {\n };\n \n /* Union of various array types that are used.  */\n-typedef union varray_data_tag GTY (()) {\n+typedef union GTY (()) varray_data_tag {\n   char\t\t\t  GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_C\")))\t\tvdt_c[1];\n   unsigned char\t\t  GTY ((length (\"%0.num_elements\"),\n@@ -110,7 +110,7 @@ typedef union varray_data_tag GTY (()) {\n } varray_data;\n \n /* Virtual array of pointers header.  */\n-struct varray_head_tag GTY(()) {\n+struct GTY(()) varray_head_tag {\n   size_t\tnum_elements;\t/* Maximum element number allocated.  */\n   size_t        elements_used;  /* The number of elements used, if\n \t\t\t\t   using VARRAY_PUSH/VARRAY_POP.  */"}, {"sha": "e242baaa1d1c3a66c96d809f12c47e95ecb33b17", "filename": "gcc/vec.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/gcc%2Fvec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -471,7 +471,7 @@ typedef struct VEC(T,B) \t\t\t\t \t\t  \\\n } VEC(T,B)\n \n #define VEC_T_GTY(T,B)\t\t\t\t\t\t\t  \\\n-typedef struct VEC(T,B) GTY(())\t\t\t\t \t\t  \\\n+typedef struct GTY(()) VEC(T,B)\t\t\t\t \t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   unsigned num;\t\t\t\t\t\t\t\t  \\\n   unsigned alloc;\t\t\t\t\t\t\t  \\\n@@ -480,7 +480,7 @@ typedef struct VEC(T,B) GTY(())\t\t\t\t \t\t  \\\n \n /* Derived vector type, user visible.  */\n #define VEC_TA_GTY(T,B,A,GTY)\t\t\t\t\t\t  \\\n-typedef struct VEC(T,A) GTY\t\t\t\t\t\t  \\\n+typedef struct GTY VEC(T,A)\t\t\t\t\t\t  \\\n {\t\t\t\t\t\t\t\t\t  \\\n   VEC(T,B) base;\t\t\t\t\t\t\t  \\\n } VEC(T,A)"}, {"sha": "4f67448a9af8f15d947e35988158353018e0736c", "filename": "include/hashtab.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -96,8 +96,7 @@ typedef void (*htab_free_with_arg) (void *, void *);\n    functions mentioned below.  The size of this structure is subject to\n    change.  */\n \n-struct htab GTY(())\n-{\n+struct GTY(()) htab {\n   /* Pointer to hash function.  */\n   htab_hash hash_f;\n "}, {"sha": "8f236e09ccf6d7aa735c116744dbc6ac3944c864", "filename": "include/splay-tree.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/include%2Fsplay-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/include%2Fsplay-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fsplay-tree.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -86,8 +86,7 @@ typedef void *(*splay_tree_allocate_fn) (int, void *);\n typedef void (*splay_tree_deallocate_fn) (void *, void *);\n \n /* The nodes in the splay tree.  */\n-struct splay_tree_node_s GTY(())\n-{\n+struct GTY(()) splay_tree_node_s {\n   /* The key.  */\n   splay_tree_key GTY ((use_param1)) key;\n \n@@ -100,8 +99,7 @@ struct splay_tree_node_s GTY(())\n };\n \n /* The splay tree itself.  */\n-struct splay_tree_s GTY(())\n-{\n+struct GTY(()) splay_tree_s {\n   /* The root of the tree.  */\n   splay_tree_node GTY ((use_params)) root;\n "}, {"sha": "a9ccc59717b90826903f046ed80722fbdbf45c2a", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -1,3 +1,10 @@\n+2009-04-21  Taras Glek <tglek@mozilla.com>\n+\n+\t* include/cpp-id-data.h: Update GTY annotations to new syntax.\n+\t* include/cpplib.h: Likewise.\n+\t* include/line-map.h: Likewise.\n+\t* include/symtab.h: Likewise.\n+\n 2009-04-22  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c++/14875"}, {"sha": "a57edad521d5769ae3e6f53f5e5341ea7d3d07fc", "filename": "libcpp/include/cpp-id-data.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fcpp-id-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fcpp-id-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpp-id-data.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -25,17 +25,15 @@ typedef unsigned char uchar;\n #define UC (const unsigned char *)  /* Intended use: UC\"string\" */\n \n /* Chained list of answers to an assertion.  */\n-struct answer GTY(())\n-{\n+struct GTY(()) answer {\n   struct answer *next;\n   unsigned int count;\n   cpp_token GTY ((length (\"%h.count\"))) first[1];\n };\n \n /* Each macro definition is recorded in a cpp_macro structure.\n    Variadic macros cannot occur with traditional cpp.  */\n-struct cpp_macro GTY(())\n-{\n+struct GTY(()) cpp_macro {\n   /* Parameters, if any.  */\n   cpp_hashnode ** GTY ((nested_ptr (union tree_node,\n \t\t\"%h ? CPP_HASHNODE (GCC_IDENT_TO_HT_IDENT (%h)) : NULL\","}, {"sha": "80e905686fc67968d62cb472cef64fb7ebab609f", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -162,8 +162,7 @@ enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_STDC89, CLK_STDC94, CLK_STDC99,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX0X, CLK_CXX0X, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n-struct cpp_string GTY(())\n-{\n+struct GTY(()) cpp_string {\n   unsigned int len;\n   const unsigned char *text;\n };\n@@ -196,8 +195,7 @@ enum cpp_token_fld_kind {\n \n /* A preprocessing token.  This has been carefully packed and should\n    occupy 16 bytes on 32-bit hosts and 24 bytes on 64-bit hosts.  */\n-struct cpp_token GTY(())\n-{\n+struct GTY(()) cpp_token {\n   source_location src_loc;\t/* Location of first char of token.  */\n   ENUM_BITFIELD(cpp_ttype) type : CHAR_BIT;  /* token type */\n   unsigned short flags;\t\t/* flags - see above */\n@@ -604,8 +602,7 @@ enum {\n    ends.  Also used to store CPP identifiers, which are a superset of\n    identifiers in the grammatical sense.  */\n \n-union _cpp_hashnode_value GTY(())\n-{\n+union GTY(()) _cpp_hashnode_value {\n   /* If a macro.  */\n   cpp_macro * GTY((tag (\"NTV_MACRO\"))) macro;\n   /* Answers to an assertion.  */\n@@ -616,8 +613,7 @@ union _cpp_hashnode_value GTY(())\n   unsigned short GTY ((tag (\"NTV_ARGUMENT\"))) arg_index;\n };\n \n-struct cpp_hashnode GTY(())\n-{\n+struct GTY(()) cpp_hashnode {\n   struct ht_identifier ident;\n   unsigned int is_directive : 1;\n   unsigned int directive_index : 7;\t/* If is_directive,"}, {"sha": "b556013af62aacd7175de6324b916697f093d915", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -58,8 +58,7 @@ typedef void *(*line_map_realloc) (void *, size_t);\n    creation of this line map, SYSP is one for a system header, two for\n    a C system header file that therefore needs to be extern \"C\"\n    protected in C++, and zero otherwise.  */\n-struct line_map GTY(())\n-{\n+struct GTY(()) line_map {\n   const char *to_file;\n   linenum_type to_line;\n   source_location start_location;\n@@ -72,8 +71,7 @@ struct line_map GTY(())\n };\n \n /* A set of chronological line_map structures.  */\n-struct line_maps GTY(())\n-{\n+struct GTY(()) line_maps {\n   struct line_map * GTY ((length (\"%h.used\"))) maps;\n   unsigned int allocated;\n   unsigned int used;"}, {"sha": "e7c593731bc9bcef655439663edca07b69f08ca6", "filename": "libcpp/include/symtab.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fsymtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b382088a11a55c13fe0a9769a3c46a72836dd1/libcpp%2Finclude%2Fsymtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fsymtab.h?ref=d1b382088a11a55c13fe0a9769a3c46a72836dd1", "patch": "@@ -27,8 +27,7 @@ along with this program; see the file COPYING3.  If not see\n /* This is what each hash table entry points to.  It may be embedded\n    deeply within another object.  */\n typedef struct ht_identifier ht_identifier;\n-struct ht_identifier GTY(())\n-{\n+struct GTY(()) ht_identifier {\n   const unsigned char *str;\n   unsigned int len;\n   unsigned int hash_value;"}]}