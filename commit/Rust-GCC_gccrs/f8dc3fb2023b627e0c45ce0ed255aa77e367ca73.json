{"sha": "f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhkYzNmYjIwMjNiNjI3ZTBjNDVjZTBlZDI1NWFhNzdlMzY3Y2E3Mw==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2019-02-06T21:48:45Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2019-02-06T21:48:45Z"}, "message": "re PR rtl-optimization/89225 (LRA hang on ppc64le compiling glibc starting with r268404)\n\n2019-02-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/89225\n\t* lra-constaints.c (simplify_operand_subreg): Add subreg mode\n\tsizes check.\n\n2019-02-06  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/89225\n\t* gcc.target/powerpc/pr89225.c: New.\n\nFrom-SVN: r268597", "tree": {"sha": "d324efb4c403f7bfa863e2d57ba2fc0507eb5b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d324efb4c403f7bfa863e2d57ba2fc0507eb5b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a4f73f96f182d9aff6ec63c3926a773a2a2c4075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4f73f96f182d9aff6ec63c3926a773a2a2c4075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4f73f96f182d9aff6ec63c3926a773a2a2c4075"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "3b8a343f1d590a84eacca8760004a3c1fe496e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "patch": "@@ -1,3 +1,9 @@\n+2019-02-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/89225\n+\t* lra-constaints.c (simplify_operand_subreg): Add subreg mode\n+\tsizes check.\n+\n 2019-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/i386/i386.c (ix86_expand_prologue): Emit a memory blockage"}, {"sha": "3b975cc2c9ab405fb436cfc1cd4d38efff7db81c", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "patch": "@@ -1533,9 +1533,12 @@ simplify_operand_subreg (int nop, machine_mode reg_mode)\n \t     a word.\n \n \t     If valid memory becomes invalid after subreg elimination\n-\t     we still have to reload memory.\n+\t     and address might be different we still have to reload\n+\t     memory.\n \t  */\n-\t  if ((! addr_was_valid || addr_is_valid)\n+\t  if ((! addr_was_valid\n+\t       || addr_is_valid\n+\t       || known_eq (GET_MODE_SIZE (mode), GET_MODE_SIZE (innermode)))\n \t      && !(maybe_ne (GET_MODE_PRECISION (mode),\n \t\t\t     GET_MODE_PRECISION (innermode))\n \t\t   && known_le (GET_MODE_SIZE (mode), UNITS_PER_WORD)"}, {"sha": "32b3cb18c380a7cad6f2dc86932763006724a888", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "patch": "@@ -1,3 +1,8 @@\n+2019-02-06  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/89225\n+\t* gcc.target/powerpc/pr89225.c: New.\n+\n 2019-02-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt76.adb: New test."}, {"sha": "ac7f8533fb1065d83476c11bd65a7403bd58fc8b", "filename": "gcc/testsuite/gcc.target/powerpc/pr89225.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89225.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8dc3fb2023b627e0c45ce0ed255aa77e367ca73/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89225.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr89225.c?ref=f8dc3fb2023b627e0c45ce0ed255aa77e367ca73", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do compile  { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-options \"-O2 -fstack-protector-strong -mlong-double-128\" } */\n+\n+extern long double foo (long double);\n+extern double bar (double);\n+typedef long long int64_t;\n+typedef unsigned long long uint64_t;\n+typedef union { int64_t i[2]; long double x; double d[2]; } mynumber;\n+static const double t512 = 0x1p512, tm256 = 0x1p-256, two54 = 0x1p54, twom54 = 0x1p-54;\n+\n+long double\n+foo (long double x)\n+{\n+  static const long double big = 134217728.0, big1 = 134217729.0;\n+  long double t, s, i;\n+  mynumber a, c;\n+  uint64_t k, l;\n+  int64_t m, n;\n+  double d;\n+\n+  a.x = x;\n+  k = a.i[0] & 0x7fffffffffffffffL;\n+\n+  if (k > 0x000fffff00000000L && k < 0x7ff0000000000000L)\n+    {\n+      if (x < 0)\n+\treturn (big1 - big1) / (big - big);\n+      l = (k & 0x001fffffffffffffL) | 0x3fe0000000000000L;\n+      if ((a.i[1] & 0x7fffffffffffffffL) != 0)\n+\t{\n+\t  n = (int64_t) ((l - k) * 2) >> 53;\n+\t  m = (a.i[1] >> 52) & 0x7ff;\n+\t  if (m == 0)\n+\t    {\n+\t      a.d[1] *= two54;\n+\t      m = ((a.i[1] >> 52) & 0x7ff) - 54;\n+\t    }\n+\t  m += n;\n+\t  if (m > 0)\n+\t    a.i[1] = (a.i[1] & 0x800fffffffffffffL) | (m << 52);\n+\t  else if (m <= -54)\n+\t    {\n+\t      a.i[1] &= 0x8000000000000000L;\n+\t    }\n+\t  else\n+\t    {\n+\t      m += 54;\n+\t      a.i[1] = (a.i[1] & 0x800fffffffffffffL) | (m << 52);\n+\t      a.d[1] *= twom54;\n+\t    }\n+\t}\n+      a.i[0] = l;\n+      s = a.x;\n+      d = bar (a.d[0]);\n+      c.i[0] = 0x2000000000000000L + ((k & 0x7fe0000000000000L) >> 1);\n+      c.i[1] = 0;\n+      i = d;\n+      t = 0.5L * (i + s / i);\n+      i = 0.5L * (t + s / t);\n+      return c.x * i;\n+    }\n+  else\n+    {\n+      if (k >= 0x7ff0000000000000L)\n+\n+\treturn x * x + x;\n+      if (x == 0)\n+\treturn x;\n+      if (x < 0)\n+\treturn (big1 - big1) / (big - big);\n+      return tm256 * foo (x * t512);\n+    }\n+}"}]}