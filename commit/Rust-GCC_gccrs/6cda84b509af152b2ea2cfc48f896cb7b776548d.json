{"sha": "6cda84b509af152b2ea2cfc48f896cb7b776548d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkYTg0YjUwOWFmMTUyYjJlYTJjZmM0OGY4OTZjYjdiNzc2NTQ4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-07-08T22:11:59Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-08T22:11:59Z"}, "message": "tree-vect-stmts.c (scan_operand_equal_p): Look through MEM_REF with SSA_NAME address of POINTER_PLUS_EXPR.\n\n\t* tree-vect-stmts.c (scan_operand_equal_p): Look through MEM_REF\n\twith SSA_NAME address of POINTER_PLUS_EXPR.  Handle MULT_EXPR\n\tand casts in offset when different, both through gimple stmts\n\tand through trees.  Rewritten using loops to minimize code duplication\n\tfor each operand.\n\n\t* g++.dg/vect/simd-6.cc: Replace xfail with target x86.\n\t* g++.dg/vect/simd-9.cc: Likewise.\n\n\t* testsuite/libgomp.c++/scan-13.C: Replace xfail with target x86.\n\t* testsuite/libgomp.c++/scan-16.C: Likewise.\n\nFrom-SVN: r273249", "tree": {"sha": "5151ee337a9fdc75b10037a4bd232f54d2c54467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5151ee337a9fdc75b10037a4bd232f54d2c54467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cda84b509af152b2ea2cfc48f896cb7b776548d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cda84b509af152b2ea2cfc48f896cb7b776548d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cda84b509af152b2ea2cfc48f896cb7b776548d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cda84b509af152b2ea2cfc48f896cb7b776548d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c6e2f8274d1e6a621e410dc945488aa9ff6f779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c6e2f8274d1e6a621e410dc945488aa9ff6f779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c6e2f8274d1e6a621e410dc945488aa9ff6f779"}], "stats": {"total": 126, "additions": 100, "deletions": 26}, "files": [{"sha": "543337667dd302c323669f8f7cba22b4f9f95d3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,3 +1,11 @@\n+2019-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree-vect-stmts.c (scan_operand_equal_p): Look through MEM_REF\n+\twith SSA_NAME address of POINTER_PLUS_EXPR.  Handle MULT_EXPR\n+\tand casts in offset when different, both through gimple stmts\n+\tand through trees.  Rewritten using loops to minimize code duplication\n+\tfor each operand.\n+\n 2019-07-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* emit-rtl.c (set_insn_locations): New function moved from..."}, {"sha": "31ba4200c041c889361023ec26ba64934aa9b362", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,5 +1,8 @@\n 2019-07-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* g++.dg/vect/simd-6.cc: Replace xfail with target x86.\n+\t* g++.dg/vect/simd-9.cc: Likewise.\n+\n \tPR c++/91110\n \t* g++.dg/gomp/pr91110.C: New test.\n "}, {"sha": "883b769a9b854bd8c1915648d15ea8996d461f05", "filename": "gcc/testsuite/g++.dg/vect/simd-6.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-6.cc?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-effective-target size32plus }\n // { dg-additional-options \"-fopenmp-simd\" }\n // { dg-additional-options \"-mavx\" { target avx_runtime } }\n-// { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* } } }\n \n #include \"../../gcc.dg/vect/tree-vect.h\"\n "}, {"sha": "4c5b0508fbd79f0e6aa311072062725536d8e2a3", "filename": "gcc/testsuite/g++.dg/vect/simd-9.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fsimd-9.cc?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-effective-target size32plus }\n // { dg-additional-options \"-fopenmp-simd\" }\n // { dg-additional-options \"-mavx\" { target avx_runtime } }\n-// { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"vectorized \\[1-3] loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* } } }\n \n #include \"../../gcc.dg/vect/tree-vect.h\"\n "}, {"sha": "10ce2a22f85e96ff882e7b688366ec499ccb52fb", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 80, "deletions": 22, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -6334,30 +6334,88 @@ get_group_alias_ptr_type (stmt_vec_info first_stmt_info)\n static bool\n scan_operand_equal_p (tree ref1, tree ref2)\n {\n-  machine_mode mode1, mode2;\n-  poly_int64 bitsize1, bitsize2, bitpos1, bitpos2;\n-  tree offset1, offset2;\n-  int unsignedp1, unsignedp2, reversep1, reversep2;\n-  int volatilep1 = 0, volatilep2 = 0;\n-  tree base1 = get_inner_reference (ref1, &bitsize1, &bitpos1, &offset1,\n-\t\t\t\t    &mode1, &unsignedp1, &reversep1,\n-\t\t\t\t    &volatilep1);\n-  tree base2 = get_inner_reference (ref2, &bitsize2, &bitpos2, &offset2,\n-\t\t\t\t    &mode2, &unsignedp2, &reversep2,\n-\t\t\t\t    &volatilep2);\n-  if (reversep1 || reversep2 || volatilep1 || volatilep2)\n-    return false;\n-  if (!operand_equal_p (base1, base2, 0))\n-    return false;\n-  if (maybe_ne (bitpos1, 0) || maybe_ne (bitpos2, 0))\n-    return false;\n-  if (maybe_ne (bitsize1, bitsize2))\n+  tree ref[2] = { ref1, ref2 };\n+  poly_int64 bitsize[2], bitpos[2];\n+  tree offset[2], base[2];\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      machine_mode mode;\n+      int unsignedp, reversep, volatilep = 0;\n+      base[i] = get_inner_reference (ref[i], &bitsize[i], &bitpos[i],\n+      \t\t\t\t     &offset[i], &mode, &unsignedp,\n+      \t\t\t\t     &reversep, &volatilep);\n+      if (reversep || volatilep || maybe_ne (bitpos[i], 0))\n+\treturn false;\n+      if (TREE_CODE (base[i]) == MEM_REF\n+\t  && offset[i] == NULL_TREE\n+\t  && TREE_CODE (TREE_OPERAND (base[i], 0)) == SSA_NAME)\n+\t{\n+\t  gimple *def_stmt = SSA_NAME_DEF_STMT (TREE_OPERAND (base[i], 0));\n+\t  if (is_gimple_assign (def_stmt)\n+\t      && gimple_assign_rhs_code (def_stmt) == POINTER_PLUS_EXPR\n+\t      && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == ADDR_EXPR\n+\t      && TREE_CODE (gimple_assign_rhs2 (def_stmt)) == SSA_NAME)\n+\t    {\n+\t      if (maybe_ne (mem_ref_offset (base[i]), 0))\n+\t\treturn false;\n+\t      base[i] = TREE_OPERAND (gimple_assign_rhs1 (def_stmt), 0);\n+\t      offset[i] = gimple_assign_rhs2 (def_stmt);\n+\t    }\n+\t}\n+    }\n+\n+  if (!operand_equal_p (base[0], base[1], 0))\n     return false;\n-  if (offset1 != offset2\n-      && (!offset1\n-\t  || !offset2\n-\t  || !operand_equal_p (offset1, offset2, 0)))\n+  if (maybe_ne (bitsize[0], bitsize[1]))\n     return false;\n+  if (offset[0] != offset[1])\n+    {\n+      if (!offset[0] || !offset[1])\n+\treturn false;\n+      if (!operand_equal_p (offset[0], offset[1], 0))\n+\t{\n+\t  tree step[2];\n+\t  for (int i = 0; i < 2; ++i)\n+\t    {\n+\t      step[i] = integer_one_node;\n+\t      if (TREE_CODE (offset[i]) == SSA_NAME)\n+\t\t{\n+\t\t  gimple *def_stmt = SSA_NAME_DEF_STMT (offset[i]);\n+\t\t  if (is_gimple_assign (def_stmt)\n+\t\t      && gimple_assign_rhs_code (def_stmt) == MULT_EXPR\n+\t\t      && (TREE_CODE (gimple_assign_rhs2 (def_stmt))\n+\t\t\t  == INTEGER_CST))\n+\t\t    {\n+\t\t      step[i] = gimple_assign_rhs2 (def_stmt);\n+\t\t      offset[i] = gimple_assign_rhs1 (def_stmt);\n+\t\t    }\n+\t\t}\n+\t      else if (TREE_CODE (offset[i]) == MULT_EXPR)\n+\t\t{\n+\t\t  step[i] = TREE_OPERAND (offset[i], 1);\n+\t\t  offset[i] = TREE_OPERAND (offset[i], 0);\n+\t\t}\n+\t      tree rhs1 = NULL_TREE;\n+\t      if (TREE_CODE (offset[i]) == SSA_NAME)\n+\t\t{\n+\t\t  gimple *def_stmt = SSA_NAME_DEF_STMT (offset[i]);\n+\t\t  if (gimple_assign_cast_p (def_stmt))\n+\t\t    rhs1 = gimple_assign_rhs1 (def_stmt);\n+\t\t}\n+\t      else if (CONVERT_EXPR_P (offset[i]))\n+\t\trhs1 = TREE_OPERAND (offset[i], 0);\n+\t      if (rhs1\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (offset[i]))\n+\t\t  && (TYPE_PRECISION (TREE_TYPE (offset[i]))\n+\t\t      >= TYPE_PRECISION (TREE_TYPE (rhs1))))\n+\t\toffset[i] = rhs1;\n+\t    }\n+\t  if (!operand_equal_p (offset[0], offset[1], 0)\n+\t      || !operand_equal_p (step[0], step[1], 0))\n+\t    return false;\n+\t}\n+    }\n   return true;\n }\n "}, {"sha": "53125a5ac379cc84c34744dbb7704211455306a4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,3 +1,8 @@\n+2019-07-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* testsuite/libgomp.c++/scan-13.C: Replace xfail with target x86.\n+\t* testsuite/libgomp.c++/scan-16.C: Likewise.\n+\n 2019-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/scan-19.c: New test."}, {"sha": "9d0062556d39f8f755856bbc7c13280bc0b6da73", "filename": "libgomp/testsuite/libgomp.c++/scan-13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-13.C?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-effective-target size32plus }\n // { dg-additional-options \"-O2 -fopenmp -fdump-tree-vect-details\" }\n // { dg-additional-options \"-mavx\" { target avx_runtime } }\n-// { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* } } }\n \n extern \"C\" void abort ();\n "}, {"sha": "108660bfbe964fefcaf586b69a8a56b665e5e871", "filename": "libgomp/testsuite/libgomp.c++/scan-16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda84b509af152b2ea2cfc48f896cb7b776548d/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fscan-16.C?ref=6cda84b509af152b2ea2cfc48f896cb7b776548d", "patch": "@@ -1,7 +1,7 @@\n // { dg-require-effective-target size32plus }\n // { dg-additional-options \"-O2 -fopenmp -fdump-tree-vect-details\" }\n // { dg-additional-options \"-mavx\" { target avx_runtime } }\n-// { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"vectorized \\[2-6] loops\" 2 \"vect\" { target i?86-*-* x86_64-*-* } } }\n \n extern \"C\" void abort ();\n "}]}