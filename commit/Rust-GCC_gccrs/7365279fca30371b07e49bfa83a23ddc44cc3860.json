{"sha": "7365279fca30371b07e49bfa83a23ddc44cc3860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM2NTI3OWZjYTMwMzcxYjA3ZTQ5YmZhODNhMjNkZGM0NGNjMzg2MA==", "commit": {"author": {"name": "Boris Kolpackov", "email": "boris@gcc.gnu.org", "date": "2018-01-18T13:17:37Z"}, "committer": {"name": "Boris Kolpackov", "email": "boris@gcc.gnu.org", "date": "2018-01-18T13:17:37Z"}, "message": "Add ability to remap file names in __FILE__, etc (PR other/70268)\n\nThis commit adds the -fmacro-prefix-map option that allows remapping of file\nnames in __FILE__, __BASE_FILE__, and __builtin_FILE(), similar to how\n-fdebug-prefix-map allows to do the same for debug information.\n\nAdditionally, it adds -ffile-prefix-map which can be used to specify both\nmappings with a single option (and, should we need to add more -f*-prefix-map\noptions in the future, those as well).\n\nlibcpp/ChangeLog:\n\n2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n\n        PR other/70268\n        * include/cpplib.h (cpp_callbacks::remap_filename): New callback.\n        * libcpp/macro.c (_cpp_builtin_macro_text): Call remap_filename for\n        __FILE__ and __BASE_FILE__.\n\n\ngcc/ChangeLog:\n\n2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n\n        PR other/70268\n        * common.opt: (-ffile-prefix-map): New option.\n        * opts.c (common_handle_option): Defer it.\n        * opts-global.c (handle_common_deferred_options): Handle it.\n        * debug.h (remap_debug_filename, add_debug_prefix_map): Move to...\n        * file-prefix-map.h: New file.\n        (remap_debug_filename, add_debug_prefix_map): ...here.\n        (add_macro_prefix_map, add_file_prefix_map, remap_macro_filename): New.\n        * final.c (debug_prefix_map, add_debug_prefix_map\n        remap_debug_filename): Move to...\n        * file-prefix-map.c: New file.\n        (file_prefix_map, add_prefix_map, remap_filename) ...here and rename,\n        generalize, get rid of alloca(), use strrchr() instead of strchr().\n        (add_macro_prefix_map, add_debug_prefix_map, add_file_prefix_map):\n        Implement in terms of add_prefix_map().\n        (remap_macro_filename, remap_debug_filename): Implement in term of\n        remap_filename().\n        * Makefile.in (OBJS, PLUGIN_HEADERS): Add new files.\n        * builtins.c (fold_builtin_FILE): Call remap_macro_filename().\n        * dbxout.c: Include file-prefix-map.h.\n        * varasm.c: Likewise.\n        * vmsdbgout.c: Likewise.\n        * xcoffout.c: Likewise.\n        * dwarf2out.c: Likewise plus omit new options from DW_AT_producer.\n        * doc/cppopts.texi (-fmacro-prefix-map): Document.\n        * doc/invoke.texi (-ffile-prefix-map): Document.\n\t(-fdebug-prefix-map): Update description.\n\n\ngcc/c-family/ChangeLog:\n\n2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n\n        PR other/70268\n        * c-family/c.opt (-fmacro-prefix-map): New option.\n        * c-family/c-opts.c (c_common_handle_option): Handle it.\n        * c-family/c-lex.c (init_c_lex): Set remap_filename cpp callback.\n        * c-family/c-ppoutput.c (init_pp_output): Likewise.\n\n\ngcc/testsuite/ChangeLog:\n\n2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n\n        PR other/70268\n        * c-c++-common/ffile-prefix-map.c: New test.\n        * c-c++-common/fmacro-prefix-map.c: New test.\n        * c-c++-common/cpp/ffile-prefix-map.c: New test.\n        * c-c++-common/cpp/fmacro-prefix-map.c: New test.\n\nFrom-SVN: r256847", "tree": {"sha": "0cf4591ae68fe77087037b6e15317e5792deed8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cf4591ae68fe77087037b6e15317e5792deed8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7365279fca30371b07e49bfa83a23ddc44cc3860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7365279fca30371b07e49bfa83a23ddc44cc3860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7365279fca30371b07e49bfa83a23ddc44cc3860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7365279fca30371b07e49bfa83a23ddc44cc3860/comments", "author": null, "committer": null, "parents": [{"sha": "82a7bb2dff8f2055e64f14cff0e3e29d0c83c195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82a7bb2dff8f2055e64f14cff0e3e29d0c83c195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82a7bb2dff8f2055e64f14cff0e3e29d0c83c195"}], "stats": {"total": 436, "additions": 340, "deletions": 96}, "files": [{"sha": "19116fb62444baa3d7a133fed76dc9476114d2fa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1,3 +1,33 @@\n+2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n+\n+        PR other/70268\n+        * common.opt: (-ffile-prefix-map): New option.\n+        * opts.c (common_handle_option): Defer it.\n+        * opts-global.c (handle_common_deferred_options): Handle it.\n+        * debug.h (remap_debug_filename, add_debug_prefix_map): Move to...\n+        * file-prefix-map.h: New file.\n+        (remap_debug_filename, add_debug_prefix_map): ...here.\n+        (add_macro_prefix_map, add_file_prefix_map, remap_macro_filename): New.\n+        * final.c (debug_prefix_map, add_debug_prefix_map\n+        remap_debug_filename): Move to...\n+        * file-prefix-map.c: New file.\n+        (file_prefix_map, add_prefix_map, remap_filename) ...here and rename,\n+        generalize, get rid of alloca(), use strrchr() instead of strchr().\n+        (add_macro_prefix_map, add_debug_prefix_map, add_file_prefix_map):\n+        Implement in terms of add_prefix_map().\n+        (remap_macro_filename, remap_debug_filename): Implement in term of\n+        remap_filename().\n+        * Makefile.in (OBJS, PLUGIN_HEADERS): Add new files.\n+        * builtins.c (fold_builtin_FILE): Call remap_macro_filename().\n+        * dbxout.c: Include file-prefix-map.h.\n+        * varasm.c: Likewise.\n+        * vmsdbgout.c: Likewise.\n+        * xcoffout.c: Likewise.\n+        * dwarf2out.c: Likewise plus omit new options from DW_AT_producer.\n+        * doc/cppopts.texi (-fmacro-prefix-map): Document.\n+        * doc/invoke.texi (-ffile-prefix-map): Document.\n+\t(-fdebug-prefix-map): Update description.\n+\n 2018-01-18  Martin Liska  <mliska@suse.cz>\n \n \t* config/i386/i386.c (indirect_thunk_name): Document that also\n@@ -73,7 +103,7 @@\n \n \t* config/aarch64/aarch64.md (movti_aarch64): Use Uti constraint.\n \t* config/aarch64/aarch64.c (aarch64_mov128_immediate): New function.\n-\t(aarch64_legitimate_constant_p): Just support CONST_DOUBLE \n+\t(aarch64_legitimate_constant_p): Just support CONST_DOUBLE\n \tSF/DF/TF mode to avoid creating illegal CONST_WIDE_INT immediates.\n \t* config/aarch64/aarch64-protos.h (aarch64_mov128_immediate):\n \tAdd declaration."}, {"sha": "6c37e46f7929ca2ec68fe9c047f04f205ccc67d8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1285,6 +1285,7 @@ OBJS = \\\n \texpmed.o \\\n \texpr.o \\\n \tfibonacci_heap.o \\\n+\tfile-prefix-map.o \\\n \tfinal.o \\\n \tfixed-value.o \\\n \tfold-const.o \\\n@@ -3506,8 +3507,8 @@ PLUGIN_HEADERS = $(TREE_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   tree-ssa-loop-niter.h tree-ssa-ter.h tree-ssa-threadedge.h \\\n   tree-ssa-threadupdate.h inchash.h wide-int.h signop.h hash-map.h \\\n   hash-set.h dominance.h cfg.h cfgrtl.h cfganal.h cfgbuild.h cfgcleanup.h \\\n-  lcm.h cfgloopmanip.h builtins.def chkp-builtins.def pass-instances.def \\\n-  params.list\n+  lcm.h cfgloopmanip.h file-prefix-map.h builtins.def chkp-builtins.def \\\n+  pass-instances.def params.list\n \n # generate the 'build fragment' b-header-vars\n s-header-vars: Makefile"}, {"sha": "683c6ec6e5b814ee2650f8a5bf538d4f394c7ae6", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -70,6 +70,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"case-cfn-macros.h\"\n #include \"gimple-fold.h\"\n #include \"intl.h\"\n+#include \"file-prefix-map.h\" /* remap_macro_filename()  */\n \n struct target_builtins default_target_builtins;\n #if SWITCHABLE_TARGET\n@@ -8871,7 +8872,13 @@ static inline tree\n fold_builtin_FILE (location_t loc)\n {\n   if (const char *fname = LOCATION_FILE (loc))\n+    {\n+      /* The documentation says this builtin is equivalent to the preprocessor\n+\t __FILE__ macro so it appears appropriate to use the same file prefix\n+\t mappings.  */\n+      fname = remap_macro_filename (fname);\n     return build_string_literal (strlen (fname) + 1, fname);\n+    }\n \n   return build_string_literal (1, \"\");\n }"}, {"sha": "7d293826e5dc5d86053ea31b1f07bf887ac20ea2", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1,3 +1,11 @@\n+2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n+\n+        PR other/70268\n+        * c-family/c.opt (-fmacro-prefix-map): New option.\n+        * c-family/c-opts.c (c_common_handle_option): Handle it.\n+        * c-family/c-lex.c (init_c_lex): Set remap_filename cpp callback.\n+        * c-family/c-ppoutput.c (init_pp_output): Likewise.\n+\n 2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/83814\n@@ -119,7 +127,7 @@\n \n 2017-12-14  Qing Zhao  <qing.zhao@oracle.com>\n \n-\tPR middle_end/79538 \n+\tPR middle_end/79538\n \t* c-cppbuiltin.c (builtin_define_with_hex_fp_value):\n \tAdjust the size of buf1 and buf2, add a new buf to avoid\n \tformat-overflow warning.\n@@ -463,7 +471,7 @@\n \t(set_std_cxx17): ... this.\n \t(c_common_handle_option): Rename OPT_std_c__1z to OPT_std_c__17\n \tand OPT_std_gnu__1z to OPT_std_gnu__17.  Adjust set_std_cxx1z\n-\tcaller.  \n+\tcaller.\n \t(c_common_post_options): Use cxx17 instead of cxx1z.  Adjust\n \tcomments.\n \n@@ -2430,7 +2438,7 @@\n \t    Matthias Klose  <doko@debian.org>\n \n \t* c-common.c (get_source_date_epoch): New function, gets the environment\n-\tvariable SOURCE_DATE_EPOCH and parses it as long long with error \n+\tvariable SOURCE_DATE_EPOCH and parses it as long long with error\n \thandling.\n \t* c-common.h (get_source_date_epoch): Prototype.\n \t* c-lex.c (c_lex_with_flags): set parse_in->source_date_epoch.\n@@ -2901,7 +2909,7 @@\n 2015-11-12  James Norris  <jnorris@codesourcery.com>\n \t    Joseph Myers  <joseph@codesourcery.com>\n \n-\t* c-pragma.c (oacc_pragmas): Add entry for declare directive. \n+\t* c-pragma.c (oacc_pragmas): Add entry for declare directive.\n \t* c-pragma.h (enum pragma_kind): Add PRAGMA_OACC_DECLARE.\n \t(enum pragma_omp_clause): Add PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT and\n \tPRAGMA_OACC_CLAUSE_LINK."}, {"sha": "a4ad0a30f38836d42f50aeb67b05eac6acae9e42", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stor-layout.h\"\n #include \"c-pragma.h\"\n #include \"debug.h\"\n+#include \"file-prefix-map.h\" /* remap_macro_filename()  */\n \n #include \"attribs.h\"\n \n@@ -82,6 +83,7 @@ init_c_lex (void)\n   cb->has_attribute = c_common_has_attribute;\n   cb->get_source_date_epoch = cb_get_source_date_epoch;\n   cb->get_suggestion = cb_get_suggestion;\n+  cb->remap_filename = remap_macro_filename;\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE"}, {"sha": "3db01d453a6864b1f6055f0df9c98b0fb8416288", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -40,6 +40,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"plugin.h\"\t\t/* For PLUGIN_INCLUDE_FILE event.  */\n #include \"mkdeps.h\"\n #include \"dumpfile.h\"\n+#include \"file-prefix-map.h\"    /* add_*_prefix_map()  */\n \n #ifndef DOLLARS_IN_IDENTIFIERS\n # define DOLLARS_IN_IDENTIFIERS true\n@@ -448,6 +449,10 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->dollars_in_ident = value;\n       break;\n \n+    case OPT_fmacro_prefix_map_:\n+      add_macro_prefix_map (arg);\n+      break;\n+\n     case OPT_ffreestanding:\n       value = !value;\n       /* Fall through.  */"}, {"sha": "8c525caf28daa9e66652a8d9f6e38fe707210583", "filename": "gcc/c-family/c-ppoutput.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-ppoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc-ppoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ppoutput.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -22,6 +22,7 @@\n #include \"c-common.h\"\t\t/* For flags.  */\n #include \"../libcpp/internal.h\"\n #include \"c-pragma.h\"\t\t/* For parse_in.  */\n+#include \"file-prefix-map.h\"    /* remap_macro_filename()  */\n \n /* Encapsulates state used to convert a stream of tokens into a text\n    file.  */\n@@ -151,6 +152,7 @@ init_pp_output (FILE *out_stream)\n \n   cb->has_attribute = c_common_has_attribute;\n   cb->get_source_date_epoch = cb_get_source_date_epoch;\n+  cb->remap_filename = remap_macro_filename;\n \n   /* Initialize the print structure.  */\n   print.src_line = 1;"}, {"sha": "9c7172607a7e0ee8094f23dfafab68eb2e81eb21", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1390,6 +1390,10 @@ fdollars-in-identifiers\n C ObjC C++ ObjC++\n Permit '$' as an identifier character.\n \n+fmacro-prefix-map=\n+C ObjC C++ ObjC++ Joined RejectNegative\n+-fmacro-prefix-map=<old>=<new> Map one directory name to another in __FILE__, __BASE_FILE__, and __builtin_FILE().\n+\n fdump-ada-spec\n C ObjC C++ ObjC++ RejectNegative Var(flag_dump_ada_spec)\n Write all declarations as Ada code transitively."}, {"sha": "874d0c2e72b53672066d7d61b76ef6c4753b9c53", "filename": "gcc/common.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1175,7 +1175,11 @@ Common RejectNegative Joined Var(common_deferred_options) Defer\n \n fdebug-prefix-map=\n Common Joined RejectNegative Var(common_deferred_options) Defer\n-Map one directory name to another in debug information.\n+-fdebug-prefix-map=<old>=<new> Map one directory name to another in debug information.\n+\n+ffile-prefix-map=\n+Common Joined RejectNegative Var(common_deferred_options) Defer\n+-ffile-prefix-map=<old>=<new> Map one directory name to another in compilation result.\n \n fdebug-types-section\n Common Report Var(flag_debug_types_section) Init(0)"}, {"sha": "a77e652d3d21884132d04aaf00eea45c042f87af", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -91,6 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"common/common-target.h\"\n #include \"langhooks.h\"\n #include \"expr.h\"\n+#include \"file-prefix-map.h\" /* remap_debug_filename()  */\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\""}, {"sha": "e1dfe4befaa1c15a20ca812da93ce63fe9cdbbc6", "filename": "gcc/debug.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -249,9 +249,6 @@ extern bool dwarf2out_do_frame (void);\n extern bool dwarf2out_do_cfi_asm (void);\n extern void dwarf2out_switch_text_section (void);\n \n-const char *remap_debug_filename (const char *);\n-void add_debug_prefix_map (const char *);\n-\n /* For -fdump-go-spec.  */\n \n extern const struct gcc_debug_hooks *"}, {"sha": "7af15ddc617573286bdb64adb1721426ae1e0116", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -287,6 +287,17 @@ When this option is given no argument, the default parameter value is\n \n Note that @code{-ftrack-macro-expansion=2} is activated by default.\n \n+@item -fmacro-prefix-map=@var{old}=@var{new}\n+@opindex fmacro-prefix-map\n+When preprocessing files residing in directory @file{@var{old}},\n+expand the @code{__FILE__} and @code{__BASE_FILE__} macros as if the\n+files resided in directory @file{@var{new}} instead.  This can be used\n+to change an absolute path to a relative path by using @file{.} for\n+@var{new} which can result in more reproducible builds that are\n+location independent.  This option also affects\n+@code{__builtin_FILE()} during compilation.  See also\n+@option{-ffile-prefix-map}.\n+\n @item -fexec-charset=@var{charset}\n @opindex fexec-charset\n @cindex character set, execution\n@@ -534,4 +545,3 @@ token in the output is preceded by the dump of the map its location\n belongs to.\n \n When used from GCC without @option{-E}, this option has no effect.\n-"}, {"sha": "8c1d9b3c65283dbfeb7e7c5ae5840951c40b532c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -172,7 +172,8 @@ in the following sections.\n @gccoptlist{-c  -S  -E  -o @var{file}  -x @var{language}  @gol\n -v  -###  --help@r{[}=@var{class}@r{[},@dots{}@r{]]}  --target-help  --version @gol\n -pass-exit-codes  -pipe  -specs=@var{file}  -wrapper  @gol\n-@@@var{file}  -fplugin=@var{file}  -fplugin-arg-@var{name}=@var{arg}  @gol\n+@@@var{file}  -ffile-prefix-map=@var{old}=@var{new}  @gol\n+-fplugin=@var{file}  -fplugin-arg-@var{name}=@var{arg}  @gol\n -fdump-ada-spec@r{[}-slim@r{]}  -fada-spec-parent=@var{unit}  -fdump-go-spec=@var{file}}\n \n @item C Language Options\n@@ -481,9 +482,9 @@ Objective-C and Objective-C++ Dialects}.\n -dD  -dI  -dM  -dN  -dU @gol\n -fdebug-cpp  -fdirectives-only  -fdollars-in-identifiers  @gol\n -fexec-charset=@var{charset}  -fextended-identifiers  @gol\n--finput-charset=@var{charset}  -fno-canonical-system-headers @gol\n--fpch-deps  -fpch-preprocess  -fpreprocessed @gol\n--ftabstop=@var{width}  -ftrack-macro-expansion  @gol\n+-finput-charset=@var{charset} -fmacro-prefix-map=@var{old}=@var{new}  @gol\n+-fno-canonical-system-headers @gol -fpch-deps  -fpch-preprocess  @gol\n+-fpreprocessed -ftabstop=@var{width}  -ftrack-macro-expansion  @gol\n -fwide-exec-charset=@var{charset}  -fworking-directory @gol\n -H  -imacros @var{file}  -include @var{file} @gol\n -M  -MD  -MF  -MG  -MM  -MMD  -MP  -MQ  -MT @gol\n@@ -1660,6 +1661,16 @@ This invokes all subprograms of @command{gcc} under\n @samp{gdb --args}, thus the invocation of @command{cc1} is\n @samp{gdb --args cc1 @dots{}}.\n \n+@item -ffile-prefix-map=@var{old}=@var{new}\n+@opindex ffile-prefix-map\n+When compiling files residing in directory @file{@var{old}}, record\n+any references to them in the result of the compilation as if the\n+files resided in directory @file{@var{new}} instead.  Specifying this\n+option is equivalent to specifying all the individual\n+@option{-f*-prefix-map} options.  This can be used to make reproducible\n+builds that are location independent.  See also\n+@option{-fmacro-prefix-map} and @option{-fdebug-prefix-map}.\n+\n @item -fplugin=@var{name}.so\n @opindex fplugin\n Load the plugin code in file @var{name}.so, assumed to be a\n@@ -7103,13 +7114,14 @@ link processing time.  Merging is enabled by default.\n \n @item -fdebug-prefix-map=@var{old}=@var{new}\n @opindex fdebug-prefix-map\n-When compiling files in directory @file{@var{old}}, record debugging\n-information describing them as in @file{@var{new}} instead.  This can be\n-used to replace a build-time path with an install-time path in the debug info.\n-It can also be used to change an absolute path to a relative path by using\n-@file{.} for @var{new}.  This can give more reproducible builds, which are\n-location independent, but may require an extra command to tell GDB where to\n-find the source files.\n+When compiling files residing in directory @file{@var{old}}, record\n+debugging information describing them as if the files resided in\n+directory @file{@var{new}} instead.  This can be used to replace a\n+build-time path with an install-time path in the debug info.  It can\n+also be used to change an absolute path to a relative path by using\n+@file{.} for @var{new}.  This can give more reproducible builds, which\n+are location independent, but may require an extra command to tell GDB\n+where to find the source files. See also @option{-ffile-prefix-map}.\n \n @item -fvar-tracking\n @opindex fvar-tracking"}, {"sha": "948b3cbe5918afadcd0afbcb74fe6c5670866d83", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -95,6 +95,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"rtl-iter.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\"\n+#include \"file-prefix-map.h\" /* remap_debug_filename()  */\n \n static void dwarf2out_source_line (unsigned int, unsigned int, const char *,\n \t\t\t\t   int, bool);\n@@ -23535,6 +23536,8 @@ gen_producer_string (void)\n       case OPT_fltrans_output_list_:\n       case OPT_fresolution_:\n       case OPT_fdebug_prefix_map_:\n+      case OPT_fmacro_prefix_map_:\n+      case OPT_ffile_prefix_map_:\n       case OPT_fcompare_debug:\n \t/* Ignore these.  */\n \tcontinue;"}, {"sha": "88248146ab61bd3f1ba7911650e3765b3fbbf044", "filename": "gcc/file-prefix-map.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffile-prefix-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffile-prefix-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-prefix-map.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,132 @@\n+/* Implementation of file prefix remapping support (-f*-prefix-map options).\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"diagnostic.h\"\n+#include \"file-prefix-map.h\"\n+\n+/* Structure recording the mapping from source file and directory names at\n+   compile time to those to be embedded in the compilation result (debug\n+   information, the __FILE__ macro expansion, etc).  */\n+struct file_prefix_map\n+{\n+  const char *old_prefix;\n+  const char *new_prefix;\n+  size_t old_len;\n+  size_t new_len;\n+  struct file_prefix_map *next;\n+};\n+\n+/* Record a file prefix mapping in the specified map.  ARG is the argument to\n+   -f*-prefix-map and must be of the form OLD=NEW.  OPT is the option name\n+   for diagnostics.  */\n+static void\n+add_prefix_map (file_prefix_map *&maps, const char *arg, const char *opt)\n+{\n+  file_prefix_map *map;\n+  const char *p;\n+\n+  /* Note: looking for the last '='. The thinking is we can control the paths\n+     inside our projects but not where the users build them.  */\n+  p = strrchr (arg, '=');\n+  if (!p)\n+    {\n+      error (\"invalid argument %qs to %qs\", arg, opt);\n+      return;\n+    }\n+  map = XNEW (file_prefix_map);\n+  map->old_prefix = xstrndup (arg, p - arg);\n+  map->old_len = p - arg;\n+  p++;\n+  map->new_prefix = xstrdup (p);\n+  map->new_len = strlen (p);\n+  map->next = maps;\n+  maps = map;\n+}\n+\n+/* Perform user-specified mapping of filename prefixes.  Return the\n+   GC-allocated new name corresponding to FILENAME or FILENAME if no\n+   remapping was performed.  */\n+\n+static const char *\n+remap_filename (file_prefix_map *maps, const char *filename)\n+{\n+  file_prefix_map *map;\n+  char *s;\n+  const char *name;\n+  size_t name_len;\n+\n+  for (map = maps; map; map = map->next)\n+    if (filename_ncmp (filename, map->old_prefix, map->old_len) == 0)\n+      break;\n+  if (!map)\n+    return filename;\n+  name = filename + map->old_len;\n+  name_len = strlen (name) + 1;\n+\n+  s = (char *) ggc_alloc_atomic (name_len + map->new_len);\n+  memcpy (s, map->new_prefix, map->new_len);\n+  memcpy (s + map->new_len, name, name_len);\n+  return s;\n+}\n+\n+/* NOTE: if adding another -f*-prefix-map option then don't forget to\n+   ignore it in DW_AT_producer (dwarf2out.c).  */\n+\n+/* Linked lists of file_prefix_map structures.  */\n+static file_prefix_map *macro_prefix_maps; /* -fmacro-prefix-map  */\n+static file_prefix_map *debug_prefix_maps; /* -fdebug-prefix-map  */\n+\n+/* Record a file prefix mapping for -fmacro-prefix-map.  */\n+void\n+add_macro_prefix_map (const char *arg)\n+{\n+  add_prefix_map (macro_prefix_maps, arg, \"-fmacro-prefix-map\");\n+}\n+\n+/* Record a file prefix mapping for -fdebug-prefix-map.  */\n+void\n+add_debug_prefix_map (const char *arg)\n+{\n+  add_prefix_map (debug_prefix_maps, arg, \"-fdebug-prefix-map\");\n+}\n+\n+/* Record a file prefix mapping for all -f*-prefix-map.  */\n+void\n+add_file_prefix_map (const char *arg)\n+{\n+  add_prefix_map (macro_prefix_maps, arg, \"-ffile-prefix-map\");\n+  add_prefix_map (debug_prefix_maps, arg, \"-ffile-prefix-map\");\n+}\n+\n+/* Remap using -fmacro-prefix-map.  Return the GC-allocated new name\n+   corresponding to FILENAME or FILENAME if no remapping was performed.  */\n+const char *\n+remap_macro_filename (const char *filename)\n+{\n+  return remap_filename (macro_prefix_maps, filename);\n+}\n+\n+/* Remap using -fdebug-prefix-map.  Return the GC-allocated new name\n+   corresponding to FILENAME or FILENAME if no remapping was performed.  */\n+const char *\n+remap_debug_filename (const char *filename)\n+{\n+  return remap_filename (debug_prefix_maps, filename);\n+}"}, {"sha": "3309eeed6463b405c8dde1bcb3bc378b68de322f", "filename": "gcc/file-prefix-map.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffile-prefix-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffile-prefix-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffile-prefix-map.h?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,28 @@\n+/* Declarations for file prefix remapping support (-f*-prefix-map options).\n+   Copyright (C) 2017 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by the\n+   Free Software Foundation; either version 3, or (at your option) any\n+   later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_FILE_PREFIX_MAP_H\n+#define GCC_FILE_PREFIX_MAP_H\n+\n+void add_macro_prefix_map (const char *);\n+void add_debug_prefix_map (const char *);\n+void add_file_prefix_map (const char *);\n+\n+const char *remap_macro_filename (const char *);\n+const char *remap_debug_filename (const char *);\n+\n+#endif /* !GCC_FILE_PREFIX_MAP_H  */"}, {"sha": "578e5d6af4c709d29644cfd153962d5f2cc9c226", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 69, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -196,7 +196,7 @@ static int dialect_number;\n /* Nonnull if the insn currently being emitted was a COND_EXEC pattern.  */\n rtx current_insn_predicate;\n \n-/* True if printing into -fdump-final-insns= dump.  */   \n+/* True if printing into -fdump-final-insns= dump.  */\n bool final_insns_dump_p;\n \n /* True if profile_function should be called, but hasn't been called yet.  */\n@@ -760,7 +760,7 @@ compute_alignments (void)\n       if (!has_fallthru\n \t  && (branch_count > count_threshold\n \t      || (bb->count > bb->prev_bb->count.apply_scale (10, 1)\n-\t\t  && (bb->prev_bb->count \n+\t\t  && (bb->prev_bb->count\n \t\t      <= ENTRY_BLOCK_PTR_FOR_FN (cfun)\n \t\t\t   ->count.apply_scale (1, 2)))))\n \t{\n@@ -804,7 +804,7 @@ compute_alignments (void)\n \n /* Grow the LABEL_ALIGN array after new labels are created.  */\n \n-static void \n+static void\n grow_label_align (void)\n {\n   int old = max_labelno;\n@@ -1507,72 +1507,6 @@ asm_str_count (const char *templ)\n   return count;\n }\n \f\n-/* ??? This is probably the wrong place for these.  */\n-/* Structure recording the mapping from source file and directory\n-   names at compile time to those to be embedded in debug\n-   information.  */\n-struct debug_prefix_map\n-{\n-  const char *old_prefix;\n-  const char *new_prefix;\n-  size_t old_len;\n-  size_t new_len;\n-  struct debug_prefix_map *next;\n-};\n-\n-/* Linked list of such structures.  */\n-static debug_prefix_map *debug_prefix_maps;\n-\n-\n-/* Record a debug file prefix mapping.  ARG is the argument to\n-   -fdebug-prefix-map and must be of the form OLD=NEW.  */\n-\n-void\n-add_debug_prefix_map (const char *arg)\n-{\n-  debug_prefix_map *map;\n-  const char *p;\n-\n-  p = strchr (arg, '=');\n-  if (!p)\n-    {\n-      error (\"invalid argument %qs to -fdebug-prefix-map\", arg);\n-      return;\n-    }\n-  map = XNEW (debug_prefix_map);\n-  map->old_prefix = xstrndup (arg, p - arg);\n-  map->old_len = p - arg;\n-  p++;\n-  map->new_prefix = xstrdup (p);\n-  map->new_len = strlen (p);\n-  map->next = debug_prefix_maps;\n-  debug_prefix_maps = map;\n-}\n-\n-/* Perform user-specified mapping of debug filename prefixes.  Return\n-   the new name corresponding to FILENAME.  */\n-\n-const char *\n-remap_debug_filename (const char *filename)\n-{\n-  debug_prefix_map *map;\n-  char *s;\n-  const char *name;\n-  size_t name_len;\n-\n-  for (map = debug_prefix_maps; map; map = map->next)\n-    if (filename_ncmp (filename, map->old_prefix, map->old_len) == 0)\n-      break;\n-  if (!map)\n-    return filename;\n-  name = filename + map->old_len;\n-  name_len = strlen (name) + 1;\n-  s = (char *) alloca (name_len + map->new_len);\n-  memcpy (s, map->new_prefix, map->new_len);\n-  memcpy (s + map->new_len, name, name_len);\n-  return ggc_strdup (s);\n-}\n-\f\n /* Return true if DWARF2 debug info can be emitted for DECL.  */\n \n static bool"}, {"sha": "f33c9da4c3fec21f707e1e71d2c4d3b70c92289f", "filename": "gcc/opts-global.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fopts-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fopts-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-global.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -38,6 +38,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"stringpool.h\"\n #include \"attribs.h\"\n #include \"asan.h\"\n+#include \"file-prefix-map.h\" /* add_*_prefix_map()  */\n \n typedef const char *const_char_p; /* For DEF_VEC_P.  */\n \n@@ -365,6 +366,10 @@ handle_common_deferred_options (void)\n \t  add_debug_prefix_map (opt->arg);\n \t  break;\n \n+\tcase OPT_ffile_prefix_map_:\n+\t  add_file_prefix_map (opt->arg);\n+\t  break;\n+\n \tcase OPT_fdump_:\n \t  if (!g->get_dumps ()->dump_switch_p (opt->arg))\n \t    error (\"unrecognized command line option %<-fdump-%s%>\", opt->arg);"}, {"sha": "f2795f98bf444dad13622aea74ec37dd35149aee", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -2103,6 +2103,7 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_fdebug_prefix_map_:\n+    case OPT_ffile_prefix_map_:\n       /* Deferred.  */\n       break;\n "}, {"sha": "0ae3871d0893fcde7281c27e78b0baf686f1377e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1,3 +1,11 @@\n+2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n+\n+        PR other/70268\n+        * c-c++-common/ffile-prefix-map.c: New test.\n+        * c-c++-common/fmacro-prefix-map.c: New test.\n+        * c-c++-common/cpp/ffile-prefix-map.c: New test.\n+        * c-c++-common/cpp/fmacro-prefix-map.c: New test.\n+\n 2018-01-18  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.target/i386/indirect-thunk-3.c: Remove duplicate options."}, {"sha": "294875b717d6d1e98b4a69204cf5fb57cbefd53d", "filename": "gcc/testsuite/c-c++-common/cpp/ffile-prefix-map.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fffile-prefix-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fffile-prefix-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fffile-prefix-map.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-ffile-prefix-map==FILE-PREFIX\" } */\n+\n+#pragma message \"FILE starts with \" __FILE__       /* { dg-message \"FILE starts with FILE-PREFIX\" } */\n+#pragma message \"BASE_FILE starts with \" __BASE_FILE__  /* { dg-message \"BASE_FILE starts with FILE-PREFIX\" } */"}, {"sha": "43dc4bb287e36280f32d104a8faee8175b4b2277", "filename": "gcc/testsuite/c-c++-common/cpp/fmacro-prefix-map.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmacro-prefix-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmacro-prefix-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Ffmacro-prefix-map.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fmacro-prefix-map==MACRO-PREFIX\" } */\n+\n+#pragma message \"FILE starts with \" __FILE__       /* { dg-message \"FILE starts with MACRO-PREFIX\" } */\n+#pragma message \"BASE_FILE starts with \" __BASE_FILE__  /* { dg-message \"BASE_FILE starts with MACRO-PREFIX\" } */"}, {"sha": "88c29ca829bf3b0a86443d0108fc4eb6910ac6c5", "filename": "gcc/testsuite/c-c++-common/ffile-prefix-map.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fffile-prefix-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fffile-prefix-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fffile-prefix-map.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,12 @@\n+/* Test __builtin_FILE(). */\n+/* { dg-do run } */\n+/* { dg-options \"-ffile-prefix-map==FILE-PREFIX\" } */\n+\n+#include <stdio.h>\n+\n+int main ()\n+{\n+  printf (\"__builtin_FILE starts with %s\\n\", __builtin_FILE ());\n+}\n+\n+/* { dg-output \"__builtin_FILE starts with FILE-PREFIX\" } */"}, {"sha": "db51587cb4f7e33ebf83f09465acf4e8ac4c01bd", "filename": "gcc/testsuite/c-c++-common/fmacro-prefix-map.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmacro-prefix-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmacro-prefix-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ffmacro-prefix-map.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -0,0 +1,12 @@\n+/* Test __builtin_FILE(). */\n+/* { dg-do run } */\n+/* { dg-options \"-fmacro-prefix-map==MACRO-PREFIX\" } */\n+\n+#include <stdio.h>\n+\n+int main ()\n+{\n+  printf (\"__builtin_FILE starts with %s\\n\", __builtin_FILE ());\n+}\n+\n+/* { dg-output \"__builtin_FILE starts with MACRO-PREFIX\" } */"}, {"sha": "b045efaabf5d0f622bdf30bbc3afed9bf92239f0", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"asan.h\"\n #include \"rtl-iter.h\"\n+#include \"file-prefix-map.h\" /* remap_debug_filename()  */\n \n #ifdef XCOFF_DEBUGGING_INFO\n #include \"xcoffout.h\"\t\t/* Needed for external data declarations.  */"}, {"sha": "ad0eac2e7d015be10c0ec50ccf3ac17c69a5f4aa", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"function.h\"\n #include \"target.h\"\n+#include \"file-prefix-map.h\" /* remap_debug_filename()  */\n \n /* Difference in seconds between the VMS Epoch and the Unix Epoch */\n static const long long vms_epoch_offset = 3506716800ll;"}, {"sha": "53156a70fcb563974d08d516a3d51d8d0644521e", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"varasm.h\"\n #include \"output.h\"\n #include \"debug.h\"\n+#include \"file-prefix-map.h\" /* remap_debug_filename()  */\n \n #ifdef XCOFF_DEBUGGING_INFO\n "}, {"sha": "5d2aa26b7bfb9ff63fdee8f6a63f736b6a9d8146", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -1,3 +1,10 @@\n+2018-01-18  Boris Kolpackov  <boris@codesynthesis.com>\n+\n+        PR other/70268\n+        * include/cpplib.h (cpp_callbacks::remap_filename): New callback.\n+        * libcpp/macro.c (_cpp_builtin_macro_text): Call remap_filename for\n+        __FILE__ and __BASE_FILE__.\n+\n 2018-01-10  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \n \t* lex.c (search_line_fast): Remove illegal coercion of an\n@@ -19,7 +26,7 @@\n 2017-12-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* internal.h (maybe_print_line): Change signature.\n-\t\n+\n 2017-12-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/79228\n@@ -714,9 +721,9 @@\n \t* init.c (cpp_init_source_date_epoch): New function.\n \t* internal.h: Added source_date_epoch variable to struct\n \tcpp_reader to store a reproducible date.\n-\t* macro.c (_cpp_builtin_macro_text): Set pfile->date timestamp from \n-\tpfile->source_date_epoch instead of localtime if source_date_epoch is \n-\tset, to be used for __DATE__ and __TIME__ macros to help reproducible \n+\t* macro.c (_cpp_builtin_macro_text): Set pfile->date timestamp from\n+\tpfile->source_date_epoch instead of localtime if source_date_epoch is\n+\tset, to be used for __DATE__ and __TIME__ macros to help reproducible\n \tbuilds.\n \n 2016-04-13  Bernd Schmidt  <bschmidt@redhat.com>"}, {"sha": "9814d0d862b95a8c18747d6fb14acb77bae6b9e4", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -622,6 +622,10 @@ struct cpp_callbacks\n      C++-style comments it does not include the terminating newline.  */\n   void (*comment) (cpp_reader *, source_location, const unsigned char *,\n \t\t   size_t);\n+\n+  /* Callback for filename remapping in __FILE__ and __BASE_FILE__ macro\n+     expansions.  */\n+  const char *(*remap_filename) (const char*);\n };\n \n #ifdef VMS"}, {"sha": "c5f3ffde7227bea0e1c356fdca02f05fecc13a18", "filename": "libcpp/macro.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7365279fca30371b07e49bfa83a23ddc44cc3860/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=7365279fca30371b07e49bfa83a23ddc44cc3860", "patch": "@@ -450,6 +450,8 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n \t    if (!name)\n \t      abort ();\n \t  }\n+\tif (pfile->cb.remap_filename)\n+\t  name = pfile->cb.remap_filename (name);\n \tlen = strlen (name);\n \tbuf = _cpp_unaligned_alloc (pfile, len * 2 + 3);\n \tresult = buf;"}]}