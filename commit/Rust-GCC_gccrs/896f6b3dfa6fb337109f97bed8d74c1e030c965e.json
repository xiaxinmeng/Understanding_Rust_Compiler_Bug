{"sha": "896f6b3dfa6fb337109f97bed8d74c1e030c965e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2ZjZiM2RmYTZmYjMzNzEwOWY5N2JlZDhkNzRjMWUwMzBjOTY1ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2017-11-15T07:01:01Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2017-11-15T07:01:01Z"}, "message": "Zero vptr in dtor for -fsanitize=vptr.\n\n2017-11-15  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (begin_destructor_body): In case of VPTR sanitization\n\t(with disabled recovery), zero vptr in order to catch virtual calls\n\tafter lifetime of an object.\n2017-11-15  Martin Liska  <mliska@suse.cz>\n\n\t* g++.dg/ubsan/vptr-12.C: New test.\n\nFrom-SVN: r254754", "tree": {"sha": "cf440ff8306354ca1233cc796105d1c100583a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf440ff8306354ca1233cc796105d1c100583a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896f6b3dfa6fb337109f97bed8d74c1e030c965e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896f6b3dfa6fb337109f97bed8d74c1e030c965e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896f6b3dfa6fb337109f97bed8d74c1e030c965e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896f6b3dfa6fb337109f97bed8d74c1e030c965e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a6fc98713d6f9b98d186a52ffc3160819bd580e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a6fc98713d6f9b98d186a52ffc3160819bd580e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a6fc98713d6f9b98d186a52ffc3160819bd580e"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "578299ef0e26b16d594356418f67b8b9094fb4d5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=896f6b3dfa6fb337109f97bed8d74c1e030c965e", "patch": "@@ -1,3 +1,9 @@\n+2017-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (begin_destructor_body): In case of VPTR sanitization\n+\t(with disabled recovery), zero vptr in order to catch virtual calls\n+\tafter lifetime of an object.\n+\n 2017-11-14  Jason Merrill  <jason@redhat.com>\n \n \tUse GTY((cache)) on some hash tables."}, {"sha": "041893db937443a5f7d9302a202c8769981d0ba4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=896f6b3dfa6fb337109f97bed8d74c1e030c965e", "patch": "@@ -15246,7 +15246,26 @@ begin_destructor_body (void)\n       if (flag_lifetime_dse\n \t  /* Clobbering an empty base is harmful if it overlays real data.  */\n \t  && !is_empty_class (current_class_type))\n-\tfinish_decl_cleanup (NULL_TREE, build_clobber_this ());\n+      {\n+\tif (sanitize_flags_p (SANITIZE_VPTR)\n+\t    && (flag_sanitize_recover & SANITIZE_VPTR) == 0\n+\t    && TYPE_CONTAINS_VPTR_P (current_class_type))\n+\t  {\n+\t    tree binfo = TYPE_BINFO (current_class_type);\n+\t    tree ref\n+\t      = cp_build_indirect_ref (current_class_ptr, RO_NULL,\n+\t\t\t\t       tf_warning_or_error);\n+\n+\t    tree vtbl_ptr = build_vfield_ref (ref, TREE_TYPE (binfo));\n+\t    tree vtbl = build_zero_cst (TREE_TYPE (vtbl_ptr));\n+\t    tree stmt = cp_build_modify_expr (input_location, vtbl_ptr,\n+\t\t\t\t\t      NOP_EXPR, vtbl,\n+\t\t\t\t\t      tf_warning_or_error);\n+\t    finish_decl_cleanup (NULL_TREE, stmt);\n+\t  }\n+\telse\n+\t  finish_decl_cleanup (NULL_TREE, build_clobber_this ());\n+      }\n \n       /* And insert cleanups for our bases and members so that they\n \t will be properly destroyed if we throw.  */"}, {"sha": "fd2b5d049ea0f9da9283826ffadffa374e6b4156", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=896f6b3dfa6fb337109f97bed8d74c1e030c965e", "patch": "@@ -1,3 +1,7 @@\n+2017-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* g++.dg/ubsan/vptr-12.C: New test.\n+\n 2017-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/81156"}, {"sha": "f23bbc3fd10d2b799eaa75a9b7e38458403526e9", "filename": "gcc/testsuite/g++.dg/ubsan/vptr-12.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896f6b3dfa6fb337109f97bed8d74c1e030c965e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fvptr-12.C?ref=896f6b3dfa6fb337109f97bed8d74c1e030c965e", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do run }\n+// { dg-shouldfail \"ubsan\" }\n+// { dg-options \"-fsanitize=vptr -fno-sanitize-recover=vptr\" }\n+\n+struct MyClass\n+{\n+  virtual ~MyClass () {}\n+  virtual void Doit () {}\n+};\n+\n+int\n+main ()\n+{\n+  MyClass *c = new MyClass;\n+  c->~MyClass ();\n+  c->Doit ();\n+\n+  return 0;\n+}\n+\n+// { dg-output \"\\[^\\n\\r]*vptr-12.C:16:\\[0-9]*: runtime error: member call on address 0x\\[0-9a-fA-F]* which does not point to an object of type 'MyClass'(\\n|\\r\\n|\\r)\" }\n+// { dg-output \"0x\\[0-9a-fA-F]*: note: object has invalid vptr\" }"}]}