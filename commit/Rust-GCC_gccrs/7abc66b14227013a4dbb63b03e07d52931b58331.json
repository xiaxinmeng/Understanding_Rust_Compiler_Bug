{"sha": "7abc66b14227013a4dbb63b03e07d52931b58331", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FiYzY2YjE0MjI3MDEzYTRkYmI2M2IwM2UwN2Q1MjkzMWI1ODMzMQ==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2005-04-29T14:09:45Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2005-04-29T14:09:45Z"}, "message": "crtstuff.c: Handle targets that use .init_array.\n\n\t* crtstuff.c: Handle targets that use .init_array.\n\t* function.c (HAS_INIT_SECTION): Do not define. Instead, make sure\n\tthat INVOKE__main is set correctly.\n\t(expand_main_function): Test INVOKE__main.\n\t* libgcc2.c: Do not define __main when using .init_array.\n\t* config/arm/arm.c (arm_elf_asm_constructor): New function.\n\t* config/arm/arm.h (CTORS_SECTION_ASM_OP): Define, with specialized\n\tlibgcc version.\n\t(DTORS_SECTION_ASM_OP): Likewise.\n\t(CTOR_LIST_BEGIN): Define specially when in libgcc.\n\t(CTOR_LIST_END): Likewise.\n\t(DTOR_LIST_BEGIN): Likewise.\n\t(DTOR_LIST_END): Likewise.\n\t* config/arm/bpapi.h (INIT_SECTION_ASM_OP): Do not define it.\n\t(FINI_SECTION_ASM_OP): Likewise.\n\t(INIT_ARRAY_SECTION_ASM_OP): Define.\n\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.\n\t* config/arm/elf.h (TARGET_ASM_CONSTRUCTOR): Define.\n\t(SUPPORTS_INIT_PRIORITY): Evaluate to false for EABI based targets.\n\t* doc/tm.texi (INIT_ARRAY_SECTION_ASM_OP): Document.\n\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.\n\nCo-Authored-By: Mark Mitchell <mark@codesourcery.com>\nCo-Authored-By: Paul Brook <paul@codesourcery.com>\n\nFrom-SVN: r98986", "tree": {"sha": "a069a1c7e66dac7e1d042f7a22530125e2918422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a069a1c7e66dac7e1d042f7a22530125e2918422"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7abc66b14227013a4dbb63b03e07d52931b58331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abc66b14227013a4dbb63b03e07d52931b58331", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7abc66b14227013a4dbb63b03e07d52931b58331", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7abc66b14227013a4dbb63b03e07d52931b58331/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa9dcfc4a46eddb8411f7affe732348f6a241c7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa9dcfc4a46eddb8411f7affe732348f6a241c7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa9dcfc4a46eddb8411f7affe732348f6a241c7d"}], "stats": {"total": 166, "additions": 155, "deletions": 11}, "files": [{"sha": "5d30e2c5b0fe4e5177deb3e23ea91c5770389d53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -1,3 +1,29 @@\n+2005-04-29  Julian Brown  <julian@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n+\t    Paul Brook  <paul@codesourcery.com>\n+\n+\t* crtstuff.c: Handle targets that use .init_array.\n+\t* function.c (HAS_INIT_SECTION): Do not define. Instead, make sure\n+\tthat INVOKE__main is set correctly.\n+\t(expand_main_function): Test INVOKE__main.\n+\t* libgcc2.c: Do not define __main when using .init_array.\n+\t* config/arm/arm.c (arm_elf_asm_constructor): New function.\n+\t* config/arm/arm.h (CTORS_SECTION_ASM_OP): Define, with specialized\n+\tlibgcc version.\n+\t(DTORS_SECTION_ASM_OP): Likewise.\n+\t(CTOR_LIST_BEGIN): Define specially when in libgcc.\n+\t(CTOR_LIST_END): Likewise.\n+\t(DTOR_LIST_BEGIN): Likewise.\n+\t(DTOR_LIST_END): Likewise.\n+\t* config/arm/bpapi.h (INIT_SECTION_ASM_OP): Do not define it.\n+\t(FINI_SECTION_ASM_OP): Likewise.\n+\t(INIT_ARRAY_SECTION_ASM_OP): Define.\n+\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.\n+\t* config/arm/elf.h (TARGET_ASM_CONSTRUCTOR): Define.\n+\t(SUPPORTS_INIT_PRIORITY): Evaluate to false for EABI based targets.\n+\t* doc/tm.texi (INIT_ARRAY_SECTION_ASM_OP): Document.\n+\t(FINI_ARRAY_SECTION_ASM_OP): Likewise.  \n+\n 2005-04-29  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/m68k/m68k.c (m68k_initial_elimination_offset): Use"}, {"sha": "6c0b896ec239526f384b7b7b73f4b60ef88ba666", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -144,6 +144,9 @@ static void emit_constant_insn (rtx cond, rtx pattern);\n static int arm_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t  tree, bool);\n \n+#ifdef OBJECT_FORMAT_ELF\n+static void arm_elf_asm_constructor (rtx, int);\n+#endif\n #ifndef ARM_PE\n static void arm_encode_section_info (tree, rtx, int);\n #endif\n@@ -10780,6 +10783,26 @@ arm_assemble_integer (rtx x, unsigned int size, int aligned_p)\n \n   return default_assemble_integer (x, size, aligned_p);\n }\n+\n+\n+/* Add a function to the list of static constructors.  */\n+\n+static void\n+arm_elf_asm_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n+{\n+  if (!TARGET_AAPCS_BASED)\n+    {\n+      default_named_section_asm_out_constructor (symbol, priority);\n+      return;\n+    }\n+\n+  /* Put these in the .init_array section, using a special relocation.  */\n+  ctors_section ();\n+  assemble_align (POINTER_SIZE);\n+  fputs (\"\\t.word\\t\", asm_out_file);\n+  output_addr_const (asm_out_file, symbol);\n+  fputs (\"(target1)\\n\", asm_out_file);\n+}\n #endif\n \f\n /* A finite state machine takes care of noticing whether or not instructions"}, {"sha": "4f0eeec613841534ad0a0953d711a8527923718e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -2122,6 +2122,48 @@ typedef struct\n #define ASM_OUTPUT_LABELREF(FILE, NAME)\t\t\\\n    arm_asm_output_labelref (FILE, NAME)\n \n+/* The EABI specifies that constructors should go in .init_array.\n+   Other targets use .ctors for compatibility.  */\n+#define ARM_EABI_CTORS_SECTION_OP \\\n+  \"\\t.section\\t.init_array,\\\"aw\\\",%init_array\"\n+#define ARM_EABI_DTORS_SECTION_OP \\\n+  \"\\t.section\\t.fini_array,\\\"aw\\\",%fini_array\"\n+#define ARM_CTORS_SECTION_OP \\\n+  \"\\t.section\\t.ctors,\\\"aw\\\",%progbits\"\n+#define ARM_DTORS_SECTION_OP \\\n+  \"\\t.section\\t.dtors,\\\"aw\\\",%progbits\"\n+\n+/* Define CTORS_SECTION_ASM_OP.  */\n+#undef CTORS_SECTION_ASM_OP\n+#undef DTORS_SECTION_ASM_OP\n+#ifndef IN_LIBGCC2\n+# define CTORS_SECTION_ASM_OP \\\n+   (TARGET_AAPCS_BASED ? ARM_EABI_CTORS_SECTION_OP : ARM_CTORS_SECTION_OP)\n+# define DTORS_SECTION_ASM_OP \\\n+   (TARGET_AAPCS_BASED ? ARM_EABI_DTORS_SECTION_OP : ARM_DTORS_SECTION_OP)\n+#else /* !defined (IN_LIBGCC2) */\n+/* In libgcc, CTORS_SECTION_ASM_OP must be a compile-time constant,\n+   so we cannot use the definition above.  */\n+# ifdef __ARM_EABI__\n+/* The .ctors section is not part of the EABI, so we do not define\n+   CTORS_SECTION_ASM_OP when in libgcc; that prevents crtstuff\n+   from trying to use it.  We do define it when doing normal\n+   compilation, as .init_array can be used instead of .ctors.  */\n+/* There is no need to emit begin or end markers when using\n+   init_array; the dynamic linker will compute the size of the\n+   array itself based on special symbols created by the static\n+   linker.  However, we do need to arrange to set up\n+   exception-handling here.  */\n+#   define CTOR_LIST_BEGIN asm (ARM_EABI_CTORS_SECTION_OP)\n+#   define CTOR_LIST_END /* empty */\n+#   define DTOR_LIST_BEGIN asm (ARM_EABI_DTORS_SECTION_OP)\n+#   define DTOR_LIST_END /* empty */\n+# else /* !defined (__ARM_EABI__) */\n+#   define CTORS_SECTION_ASM_OP ARM_CTORS_SECTION_OP\n+#   define DTORS_SECTION_ASM_OP ARM_DTORS_SECTION_OP\n+# endif /* !defined (__ARM_EABI__) */\n+#endif /* !defined (IN_LIBCC2) */\n+\n /* True if the operating system can merge entities with vague linkage\n    (e.g., symbols in COMDAT group) during dynamic linking.  */\n #ifndef TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P"}, {"sha": "037b26de145147f1c338d65f530d06bac43d3f3e", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -100,3 +100,10 @@\n \n #define TARGET_OS_CPP_BUILTINS() \\\n   TARGET_BPABI_CPP_BUILTINS()\n+\n+/* The BPABI specifies the use of .{init,fini}_array.  Therefore, we\n+   do not want GCC to put anything into the .{init,fini} sections.  */\n+#undef INIT_SECTION_ASM_OP\n+#undef FINI_SECTION_ASM_OP\n+#define INIT_ARRAY_SECTION_ASM_OP ARM_EABI_CTORS_SECTION_OP\n+#define FINI_ARRAY_SECTION_ASM_OP ARM_EABI_DTORS_SECTION_OP"}, {"sha": "9a48a9b30e22a62fcb9161cd8943f48f6b41cc9c", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -120,6 +120,10 @@\n #define TARGET_ASM_FILE_START_FILE_DIRECTIVE true\n \f\n \n+/* Output an element in the static constructor array.  */\n+#undef TARGET_ASM_CONSTRUCTOR\n+#define TARGET_ASM_CONSTRUCTOR arm_elf_asm_constructor\n+\n /* For PIC code we need to explicitly specify (PLT) and (GOT) relocs.  */\n #define NEED_PLT_RELOC\tflag_pic\n #define NEED_GOT_RELOC\tflag_pic\n@@ -143,4 +147,5 @@\n     }\t\t\t\t\t\t\t\\\n   while (0)\n \n-#define SUPPORTS_INIT_PRIORITY 1\n+/* The EABI doesn't provide a way of implementing init_priority.  */\n+#define SUPPORTS_INIT_PRIORITY (!TARGET_AAPCS_BASED)"}, {"sha": "6fd365577b90fa75eb157352481e48104d6e4e35", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -211,7 +211,7 @@ STATIC void *__JCR_LIST__[]\n   = { };\n #endif /* JCR_SECTION_NAME */\n \n-#ifdef INIT_SECTION_ASM_OP\n+#if defined(INIT_SECTION_ASM_OP) || defined(INIT_ARRAY_SECTION_ASM_OP)\n \n #ifdef OBJECT_FORMAT_ELF\n \n@@ -256,9 +256,11 @@ extern void __cxa_finalize (void *) TARGET_ATTRIBUTE_WEAK;\n static void __attribute__((used))\n __do_global_dtors_aux (void)\n {\n+#ifndef FINI_ARRAY_SECTION_ASM_OP\n   static func_ptr *p = __DTOR_LIST__ + 1;\n-  static _Bool completed;\n   func_ptr f;\n+#endif /* !defined(FINI_ARRAY_SECTION_ASM_OP)  */\n+  static _Bool completed;\n \n   if (__builtin_expect (completed, 0))\n     return;\n@@ -268,11 +270,16 @@ __do_global_dtors_aux (void)\n     __cxa_finalize (__dso_handle);\n #endif\n \n+#ifdef FINI_ARRAY_SECTION_ASM_OP\n+  /* If we are using .fini_array then destructors will be run via that\n+     mechanism.  */\n+#else /* !defined (FINI_ARRAY_SECTION_ASM_OP) */\n   while ((f = *p))\n     {\n       p++;\n       f ();\n     }\n+#endif /* !defined(FINI_ARRAY_SECTION_ASM_OP) */\n \n #ifdef USE_EH_FRAME_REGISTRY\n #ifdef CRT_GET_RFIB_DATA\n@@ -290,7 +297,13 @@ __do_global_dtors_aux (void)\n }\n \n /* Stick a call to __do_global_dtors_aux into the .fini section.  */\n+#ifdef FINI_SECTION_ASM_OP\n CRT_CALL_STATIC_FUNCTION (FINI_SECTION_ASM_OP, __do_global_dtors_aux)\n+#else /* !defined(FINI_SECTION_ASM_OP) */\n+static func_ptr __do_global_dtors_aux_fini_array_entry[]\n+  __attribute__ ((__unused__, section(\".fini_array\")))\n+  = { __do_global_dtors_aux };\n+#endif /* !defined(FINI_SECTION_ASM_OP) */\n \n #if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n /* Stick a call to __register_frame_info into the .init section.  For some\n@@ -324,7 +337,13 @@ frame_dummy (void)\n #endif /* JCR_SECTION_NAME */\n }\n \n+#ifdef INIT_SECTION_ASM_OP\n CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, frame_dummy)\n+#else /* defined(INIT_SECTION_ASM_OP) */\n+static func_ptr __frame_dummy_init_array_entry[]\n+  __attribute__ ((__unused__, section(\".init_array\")))\n+  = { frame_dummy };\n+#endif /* !defined(INIT_SECTION_ASM_OP) */\n #endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME */\n \n #else  /* OBJECT_FORMAT_ELF */\n@@ -480,7 +499,11 @@ STATIC void *__JCR_END__[1]\n    = { 0 };\n #endif /* JCR_SECTION_NAME */\n \n-#ifdef INIT_SECTION_ASM_OP\n+#ifdef INIT_ARRAY_SECTION_ASM_OP\n+\n+/* If we are using .init_array, there is nothing to do.  */\n+\n+#elif defined(INIT_SECTION_ASM_OP)\n \n #ifdef OBJECT_FORMAT_ELF\n static void __attribute__((used))"}, {"sha": "4c883f43384d9b2f4b825dd0b85e5de0b72997a2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -6019,6 +6019,22 @@ finalization code.  If not defined, GCC will assume such a section does\n not exist.\n @end defmac\n \n+@defmac INIT_ARRAY_SECTION_ASM_OP\n+If defined, a C expression whose value is a string, including spacing,\n+containing the assembler operation to identify the following data as\n+part of the @code{.init_array} (or equivalent) section.  If not\n+defined, GCC will assume such a section does not exist.  Do not define\n+both this macro and @code{INIT_SECTION_ASM_OP}.\n+@end defmac\n+ \n+@defmac FINI_ARRAY_SECTION_ASM_OP\n+If defined, a C expression whose value is a string, including spacing,\n+containing the assembler operation to identify the following data as\n+part of the @code{.fini_array} (or equivalent) section.  If not\n+defined, GCC will assume such a section does not exist.  Do not define\n+both this macro and @code{FINI_SECTION_ASM_OP}.\n+@end defmac\n+\n @defmac CRT_CALL_STATIC_FUNCTION (@var{section_op}, @var{function})\n If defined, an ASM statement that switches to a different section\n via @var{section_op}, calls @var{function}, and switches back to"}, {"sha": "a092d6c62e0d6dbab1b545fa2744475c6de043e6", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -4035,11 +4035,12 @@ init_function_for_compilation (void)\n   VARRAY_GROW (sibcall_epilogue, 0);\n }\n \n-/* Expand a call to __main at the beginning of a possible main function.  */\n-\n-#if defined(INIT_SECTION_ASM_OP) && !defined(INVOKE__main)\n-#undef HAS_INIT_SECTION\n-#define HAS_INIT_SECTION\n+/* Define IVOKE__main if we should emit a call to __main at the start\n+   of \"main\".  */ \n+#if (!defined(INVOKE__main)\t\t\t\\\n+     && !defined(INIT_SECTION_ASM_OP)\t\t\\\n+     && !defined(INIT_ARRAY_SECTION_ASM_OP))\n+#define INVOKE__main\n #endif\n \n void\n@@ -4081,7 +4082,7 @@ expand_main_function (void)\n     }\n #endif\n \n-#ifndef HAS_INIT_SECTION\n+#if defined(INVOKE__main)\n   emit_library_call (init_one_libfunc (NAME__MAIN), LCT_NORMAL, VOIDmode, 0);\n #endif\n }"}, {"sha": "fb1dce548ec9e45b35b569605dd8705f1f247980", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7abc66b14227013a4dbb63b03e07d52931b58331/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=7abc66b14227013a4dbb63b03e07d52931b58331", "patch": "@@ -1905,6 +1905,7 @@ TRANSFER_FROM_TRAMPOLINE\n #ifdef L__main\n \n #include \"gbl-ctors.h\"\n+\n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n    give the same symbol without quotes for an alternative entry point.  You\n@@ -1914,7 +1915,7 @@ TRANSFER_FROM_TRAMPOLINE\n #define SYMBOL__MAIN __main\n #endif\n \n-#ifdef INIT_SECTION_ASM_OP\n+#if defined (INIT_SECTION_ASM_OP) || defined (INIT_ARRAY_SECTION_ASM_OP)\n #undef HAS_INIT_SECTION\n #define HAS_INIT_SECTION\n #endif"}]}