{"sha": "bd6f5b5cb203d46babb682c1379cce168f7eab41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ2ZjViNWNiMjAzZDQ2YmFiYjY4MmMxMzc5Y2NlMTY4ZjdlYWI0MQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-06-16T08:46:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:46:48Z"}, "message": "sem_warn.adb (Warn_On_Known_Condition): If the constant expression appears within a negation (either from source or as...\n\n2005-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_warn.adb (Warn_On_Known_Condition): If the constant expression\n\tappears within a negation (either from source or as a rewriting of\n\tinequality) adjust text of warning accordingly.\n\nFrom-SVN: r101061", "tree": {"sha": "2fd9de2fcc2da74af54d178a347c530dfa49dd8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fd9de2fcc2da74af54d178a347c530dfa49dd8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd6f5b5cb203d46babb682c1379cce168f7eab41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6f5b5cb203d46babb682c1379cce168f7eab41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd6f5b5cb203d46babb682c1379cce168f7eab41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd6f5b5cb203d46babb682c1379cce168f7eab41/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59e5fbe064423bf109f2e0525d45872f8c77ae05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e5fbe064423bf109f2e0525d45872f8c77ae05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e5fbe064423bf109f2e0525d45872f8c77ae05"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "28cb9ded1ee3f38e0d972659fd725f507d46ae54", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd6f5b5cb203d46babb682c1379cce168f7eab41/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd6f5b5cb203d46babb682c1379cce168f7eab41/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=bd6f5b5cb203d46babb682c1379cce168f7eab41", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1999-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1627,14 +1627,32 @@ package body Sem_Warn is\n          end loop;\n \n          --  Here we issue the warning unless some sub-operand has warnings\n-         --  set off, in which case we suppress the warning for the node.\n+         --  set off, in which case we suppress the warning for the node. If\n+         --  the original expression is an inequality, it has been expanded\n+         --  into a negation, and the value of the original expression is the\n+         --  negation of the equality. If the expression is an entity that\n+         --  appears within a negation, it is clearer to flag the negation\n+         --  itself, and report on its constant value.\n \n          if not Operand_Has_Warnings_Suppressed (C) then\n-            if Entity (C) = Standard_True then\n-               Error_Msg_N (\"condition is always True?\", C);\n-            else\n-               Error_Msg_N (\"condition is always False?\", C);\n-            end if;\n+            declare\n+               True_Branch : Boolean := Entity (C) = Standard_True;\n+               Cond        : Node_Id := C;\n+\n+            begin\n+               if Present (Parent (C))\n+                 and then Nkind (Parent (C)) = N_Op_Not\n+               then\n+                  True_Branch := not True_Branch;\n+                  Cond        := Parent (C);\n+               end if;\n+\n+               if True_Branch then\n+                  Error_Msg_N (\"condition is always True?\", Cond);\n+               else\n+                  Error_Msg_N (\"condition is always False?\", Cond);\n+               end if;\n+            end;\n          end if;\n       end if;\n    end Warn_On_Known_Condition;"}]}