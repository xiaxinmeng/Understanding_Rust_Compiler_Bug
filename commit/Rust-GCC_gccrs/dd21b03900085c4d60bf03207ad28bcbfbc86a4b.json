{"sha": "dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQyMWIwMzkwMDA4NWM0ZDYwYmYwMzIwN2FkMjhiY2JmYmM4NmE0Yg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-07-09T10:10:03Z"}, "committer": {"name": "Bin Cheng", "email": "bin.cheng@linux.alibaba.com", "date": "2020-07-09T10:14:26Z"}, "message": "Schedule reduction partition in the last.\n\nIf reduction partition's SCC is broken by runtime alias checks, force\na negative post order to it so that it will be scheduled in the last.\n\n2020-07-09  Bin Cheng  <bin.cheng@linux.alibaba.com>\n\ngcc/\n\tPR tree-optimization/95804\n\t* tree-loop-distribution.c (break_alias_scc_partitions): Force\n\tnegative post order to reduction partition.\n\ngcc/testsuite/\n\tPR tree-optimization/95804\n\t* gcc.dg/tree-ssa/pr95804.c: New test.", "tree": {"sha": "9faa1ceaf5595589ac8c7966a9a8fbff60c6a37f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9faa1ceaf5595589ac8c7966a9a8fbff60c6a37f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd21b03900085c4d60bf03207ad28bcbfbc86a4b/comments", "author": null, "committer": null, "parents": [{"sha": "5acef69f9d3d9f3c537b5e5157519edf02f86c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5acef69f9d3d9f3c537b5e5157519edf02f86c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5acef69f9d3d9f3c537b5e5157519edf02f86c4d"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "83c0ab45cf50d0edc3e11fea4e6da104745af1ae", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr95804.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd21b03900085c4d60bf03207ad28bcbfbc86a4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95804.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd21b03900085c4d60bf03207ad28bcbfbc86a4b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95804.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr95804.c?ref=dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "patch": "@@ -0,0 +1,18 @@\n+/* PR tree-optimization/95804 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c, d, e, f;\n+void g() {\n+  short *h = (short*)&d;\n+  char *i = (char*)&b;\n+  for (; e; e++) {\n+    for (; f; f++) {\n+      b = 3;\n+      if ((c = 8) >= *i)\n+        a = 5 ? *h : 0;\n+      h = (short*)g;\n+    }\n+    i = (char*)&c;\n+  }\n+}"}, {"sha": "888af48946f58121c0dfae46b3ff2895bbf1930d", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd21b03900085c4d60bf03207ad28bcbfbc86a4b/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd21b03900085c4d60bf03207ad28bcbfbc86a4b/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=dd21b03900085c4d60bf03207ad28bcbfbc86a4b", "patch": "@@ -2509,10 +2509,25 @@ loop_distribution::break_alias_scc_partitions (struct graph *rdg,\n \t    }\n \t}\n       /* Restore the postorder information if it's corrupted in finding SCC\n-\t with alias dependence edges skipped.  */\n+\t with alias dependence edges skipped.  If reduction partition's SCC is\n+\t broken by runtime alias checks, we force a negative post order to it\n+\t making sure it will be scheduled in the last.  */\n       if (num_sccs_no_alias > 0)\n-\tfor (i = 0; i < pg->n_vertices; ++i)\n-\t  pg->vertices[i].post = cbdata.vertices_post[i];\n+\t{\n+\t  j = -1;\n+\t  for (i = 0; i < pg->n_vertices; ++i)\n+\t    {\n+\t      pg->vertices[i].post = cbdata.vertices_post[i];\n+\t      struct pg_vdata *data = (struct pg_vdata *)pg->vertices[i].data;\n+\t      if (data->partition && partition_reduction_p (data->partition))\n+\t\t{\n+\t\t  gcc_assert (j == -1);\n+\t\t  j = i;\n+\t\t}\n+\t    }\n+\t  if (j >= 0)\n+\t    pg->vertices[j].post = -1;\n+\t}\n \n       free (cbdata.vertices_component);\n       free (cbdata.vertices_post);"}]}