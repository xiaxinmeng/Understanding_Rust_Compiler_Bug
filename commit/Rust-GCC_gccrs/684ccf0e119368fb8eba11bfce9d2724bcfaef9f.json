{"sha": "684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg0Y2NmMGUxMTkzNjhmYjhlYmExMWJmY2U5ZDI3MjRiY2ZhZWY5Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-19T18:38:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-09-19T18:38:10Z"}, "message": "i386.c (ix86_split_long_move): Do not handle address used for LEA in a special way.\n\n\t* config/i386/i386.c (ix86_split_long_move): Do not handle\n\taddress used for LEA in a special way.\n\nFrom-SVN: r252984", "tree": {"sha": "4b86c3db7097fa641cc443d43221641d25fa117b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b86c3db7097fa641cc443d43221641d25fa117b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684ccf0e119368fb8eba11bfce9d2724bcfaef9f/comments", "author": null, "committer": null, "parents": [{"sha": "23b49089a4f20c24535c964d1b0eba0995dff6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b49089a4f20c24535c964d1b0eba0995dff6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b49089a4f20c24535c964d1b0eba0995dff6c8"}], "stats": {"total": 46, "additions": 10, "deletions": 36}, "files": [{"sha": "35a36024ec243901ca8bdacec219030e0490262f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684ccf0e119368fb8eba11bfce9d2724bcfaef9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684ccf0e119368fb8eba11bfce9d2724bcfaef9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "patch": "@@ -1,8 +1,13 @@\n-2017-09-17  Segher Boessenkool  <segher@kernel.crashing.org>\n+2017-09-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_split_long_move): Do not handle\n+\taddress used for LEA in a special way.\n+\n+2017-09-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* simplify-rtx.c (simplify_binary_operation_1): Fix typo in comment.\n \n-2017-09-18  Martin Sebor  <msebor@redhat.com>\n+2017-09-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81854\n \t* cgraphunit.c (handle_alias_pairs): Reject aliases between functions"}, {"sha": "1c765fbc74ccbe4271556974b5d6368d629fdb16", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/684ccf0e119368fb8eba11bfce9d2724bcfaef9f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/684ccf0e119368fb8eba11bfce9d2724bcfaef9f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=684ccf0e119368fb8eba11bfce9d2724bcfaef9f", "patch": "@@ -26706,7 +26706,7 @@ ix86_split_long_move (rtx operands[])\n \t Do an lea to the last part and use only one colliding move.  */\n       else if (collisions > 1)\n \t{\n-\t  rtx base, addr, tls_base = NULL_RTX;\n+\t  rtx base, addr;\n \n \t  collisions = 1;\n \n@@ -26723,44 +26723,13 @@ ix86_split_long_move (rtx operands[])\n \t      struct ix86_address parts;\n \t      int ok = ix86_decompose_address (addr, &parts);\n \t      gcc_assert (ok);\n-\t      if (parts.seg == DEFAULT_TLS_SEG_REG)\n-\t\t{\n-\t\t  /* It is not valid to use %gs: or %fs: in\n-\t\t     lea though, so we need to remove it from the\n-\t\t     address used for lea and add it to each individual\n-\t\t     memory loads instead.  */\n-\t\t  addr = copy_rtx (addr);\n-\t\t  rtx *x = &addr;\n-\t\t  while (GET_CODE (*x) == PLUS)\n-\t\t    {\n-\t\t      for (i = 0; i < 2; i++)\n-\t\t\t{\n-\t\t\t  rtx u = XEXP (*x, i);\n-\t\t\t  if (GET_CODE (u) == ZERO_EXTEND)\n-\t\t\t    u = XEXP (u, 0);\n-\t\t\t  if (GET_CODE (u) == UNSPEC\n-\t\t\t      && XINT (u, 1) == UNSPEC_TP)\n-\t\t\t    {\n-\t\t\t      tls_base = XEXP (*x, i);\n-\t\t\t      *x = XEXP (*x, 1 - i);\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t}\n-\t\t      if (tls_base)\n-\t\t\tbreak;\n-\t\t      x = &XEXP (*x, 0);\n-\t\t    }\n-\t\t  gcc_assert (tls_base);\n-\t\t}\n+\t      /* It is not valid to use %gs: or %fs: in lea.  */\n+\t      gcc_assert (parts.seg == ADDR_SPACE_GENERIC);\n \t    }\n \t  emit_insn (gen_rtx_SET (base, addr));\n-\t  if (tls_base)\n-\t    base = gen_rtx_PLUS (GET_MODE (base), base, tls_base);\n \t  part[1][0] = replace_equiv_address (part[1][0], base);\n \t  for (i = 1; i < nparts; i++)\n \t    {\n-\t      if (tls_base)\n-\t\tbase = copy_rtx (base);\n \t      tmp = plus_constant (Pmode, base, UNITS_PER_WORD * i);\n \t      part[1][i] = replace_equiv_address (part[1][i], tmp);\n \t    }"}]}