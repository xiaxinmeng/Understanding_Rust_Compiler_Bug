{"sha": "476ff787366cedb6f4123c0a5647522698570d5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDc2ZmY3ODczNjZjZWRiNmY0MTIzYzBhNTY0NzUyMjY5ODU3MGQ1Zg==", "commit": {"author": {"name": "Andrey Turetskiy", "email": "andrey.turetskiy@intel.com", "date": "2014-11-28T13:59:49Z"}, "committer": {"name": "Ilya Verbin", "email": "iverbin@gcc.gnu.org", "date": "2014-11-28T13:59:49Z"}, "message": "omp-low.c (lower_omp_critical): Mark critical sections inside target functions as offloadable.\n\ngcc/\n\t* omp-low.c (lower_omp_critical): Mark critical sections\n\tinside target functions as offloadable.\nlibgomp/\n\t* testsuite/libgomp.c/target-critical-1.c: New test.\n\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\n\nFrom-SVN: r218158", "tree": {"sha": "22ee2a0bf35a38fa8e4d06500af857978daffe56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22ee2a0bf35a38fa8e4d06500af857978daffe56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/476ff787366cedb6f4123c0a5647522698570d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476ff787366cedb6f4123c0a5647522698570d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476ff787366cedb6f4123c0a5647522698570d5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476ff787366cedb6f4123c0a5647522698570d5f/comments", "author": null, "committer": null, "parents": [{"sha": "f672337f6d90a131b716f1f42cb82b8fd0c43b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f672337f6d90a131b716f1f42cb82b8fd0c43b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f672337f6d90a131b716f1f42cb82b8fd0c43b78"}], "stats": {"total": 107, "additions": 97, "deletions": 10}, "files": [{"sha": "3165e49961984350ba641f65037502032a457030", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476ff787366cedb6f4123c0a5647522698570d5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476ff787366cedb6f4123c0a5647522698570d5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=476ff787366cedb6f4123c0a5647522698570d5f", "patch": "@@ -1,3 +1,9 @@\n+2014-11-28  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* omp-low.c (lower_omp_critical): Mark critical sections\n+\tinside target functions as offloadable.\n+\n 2014-11-28  Ilya Verbin  <ilya.verbin@intel.com>\n \n \t* lto-wrapper.c (run_gcc): Set have_lto and have_offload if at least one"}, {"sha": "6c5774c2606f39d7aa7b26333171dac2e07ac0e3", "filename": "gcc/omp-low.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476ff787366cedb6f4123c0a5647522698570d5f/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476ff787366cedb6f4123c0a5647522698570d5f/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=476ff787366cedb6f4123c0a5647522698570d5f", "patch": "@@ -9366,23 +9366,27 @@ lower_omp_critical (gimple_stmt_iterator *gsi_p, omp_context *ctx)\n \t  DECL_ARTIFICIAL (decl) = 1;\n \t  DECL_IGNORED_P (decl) = 1;\n \n-\t  /* If '#pragma omp critical' is inside target region, the symbol must\n-\t     be marked for offloading.  */\n-\t  omp_context *octx;\n-\t  for (octx = ctx->outer; octx; octx = octx->outer)\n-\t    if (is_targetreg_ctx (octx))\n-\t      {\n-\t\tvarpool_node::get_create (decl)->offloadable = 1;\n-\t\tbreak;\n-\t      }\n-\n \t  varpool_node::finalize_decl (decl);\n \n \t  critical_name_mutexes->put (name, decl);\n \t}\n       else\n \tdecl = *n;\n \n+      /* If '#pragma omp critical' is inside target region or\n+\t inside function marked as offloadable, the symbol must be\n+\t marked as offloadable too.  */\n+      omp_context *octx;\n+      if (cgraph_node::get (current_function_decl)->offloadable)\n+\tvarpool_node::get_create (decl)->offloadable = 1;\n+      else\n+\tfor (octx = ctx->outer; octx; octx = octx->outer)\n+\t  if (is_targetreg_ctx (octx))\n+\t    {\n+\t      varpool_node::get_create (decl)->offloadable = 1;\n+\t      break;\n+\t    }\n+\n       lock = builtin_decl_explicit (BUILT_IN_GOMP_CRITICAL_NAME_START);\n       lock = build_call_expr_loc (loc, lock, 1, build_fold_addr_expr_loc (loc, decl));\n "}, {"sha": "7ec3fb1e261956b149d9901059bab4f0a599f9ea", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476ff787366cedb6f4123c0a5647522698570d5f/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476ff787366cedb6f4123c0a5647522698570d5f/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=476ff787366cedb6f4123c0a5647522698570d5f", "patch": "@@ -1,3 +1,8 @@\n+2014-11-28  Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\n+\t* testsuite/libgomp.c/target-critical-1.c: New test.\n+\n 2014-11-26  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libgomp.c/examples-4/e.53.4.c: Add -DITESTITERS=20"}, {"sha": "84ad55823cb7fdaec10e9985e7a5852398e9c388", "filename": "libgomp/testsuite/libgomp.c/target-critical-1.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/476ff787366cedb6f4123c0a5647522698570d5f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-critical-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/476ff787366cedb6f4123c0a5647522698570d5f/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-critical-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2Ftarget-critical-1.c?ref=476ff787366cedb6f4123c0a5647522698570d5f", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+\n+#include <omp.h>\n+#include <stdlib.h>\n+\n+#define N 2000\n+\n+#pragma omp declare target\n+int foo ()\n+{\n+  int A[N];\n+  int i, nthreads;\n+  int res = 0;\n+\n+  #pragma omp parallel shared (A, nthreads)\n+    {\n+      #pragma omp master\n+\tnthreads = omp_get_num_threads ();\n+\n+      #pragma omp for\n+\tfor (i = 0; i < N; i++)\n+\t  A[i] = 0;\n+\n+      #pragma omp critical (crit1)\n+        for (i = 0; i < N; i++)\n+\t  A[i]++;\n+    }\n+\n+  for (i = 0; i < N; i++)\n+    if (A[i] != nthreads)\n+      res = 1;\n+\n+  return res;\n+}\n+#pragma omp end declare target\n+\n+int main ()\n+{\n+  int res1, res2;\n+\n+  #pragma omp target map (from: res1, res2)\n+    {\n+      int B[N];\n+      int i, nthreads;\n+\n+      res1 = foo ();\n+\n+      #pragma omp parallel shared (B, nthreads)\n+\t{\n+\t  #pragma omp master\n+\t    nthreads = omp_get_num_threads ();\n+\n+\t  #pragma omp for\n+\t    for (i = 0; i < N; i++)\n+\t      B[i] = 0;\n+\n+\t  #pragma omp critical (crit2)\n+\t    for (i = 0; i < N; i++)\n+\t      B[i]++;\n+\t}\n+\n+      res2 = 0;\n+      for (i = 0; i < N; i++)\n+\tif (B[i] != nthreads)\n+\t  res2 = 1;\n+    }\n+\n+  if (res1 || res2)\n+    abort ();\n+\n+  return 0;\n+}"}]}