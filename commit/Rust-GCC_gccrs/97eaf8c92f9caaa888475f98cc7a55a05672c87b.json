{"sha": "97eaf8c92f9caaa888475f98cc7a55a05672c87b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlYWY4YzkyZjljYWFhODg4NDc1Zjk4Y2M3YTU1YTA1NjcyYzg3Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-04T13:20:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-04T13:23:22Z"}, "message": "c++: Module API declarations\n\nThis provides the inline predicates about module state, and declares\nthe functions to be provided.\n\n\tgcc/cp/\n\t* cp-tree.h: Add various inline module state predicates, and\n\tdeclare the API that will be provided by modules.cc", "tree": {"sha": "7326be7ba7d9c59c58b83baa2ed209b5269337d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7326be7ba7d9c59c58b83baa2ed209b5269337d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97eaf8c92f9caaa888475f98cc7a55a05672c87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97eaf8c92f9caaa888475f98cc7a55a05672c87b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97eaf8c92f9caaa888475f98cc7a55a05672c87b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97eaf8c92f9caaa888475f98cc7a55a05672c87b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "704ccefb576dcf30b27a4b9bdacb6e15902f5307", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704ccefb576dcf30b27a4b9bdacb6e15902f5307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704ccefb576dcf30b27a4b9bdacb6e15902f5307"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "c7f8371c6650c35d8c6f932dcdacfe5840f14008", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97eaf8c92f9caaa888475f98cc7a55a05672c87b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97eaf8c92f9caaa888475f98cc7a55a05672c87b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=97eaf8c92f9caaa888475f98cc7a55a05672c87b", "patch": "@@ -6886,6 +6886,103 @@ extern bool ctor_omit_inherited_parms\t\t(tree);\n extern tree locate_ctor\t\t\t\t(tree);\n extern tree implicitly_declare_fn               (special_function_kind, tree,\n \t\t\t\t\t\t bool, tree, tree);\n+/* In module.cc  */\n+class module_state; /* Forward declare.  */\n+inline bool modules_p () { return flag_modules != 0; }\n+\n+/* The kind of module or part thereof that we're in.  */\n+enum module_kind_bits\n+{\n+  MK_MODULE = 1 << 0,     /* This TU is a module.  */\n+  MK_GLOBAL = 1 << 1,     /* Entities are in the global module.  */\n+  MK_INTERFACE = 1 << 2,  /* This TU is an interface.  */\n+  MK_PARTITION = 1 << 3,  /* This TU is a partition.  */\n+  MK_EXPORTING = 1 << 4,  /* We are in an export region.  */\n+};\n+\n+/* We do lots of bit-manipulation, so an unsigned is easier.  */\n+extern unsigned module_kind;\n+\n+/*  MK_MODULE & MK_GLOBAL have the following combined meanings:\n+ MODULE GLOBAL\n+   0\t  0\tnot a module\n+   0\t  1\tGMF of named module (we've not yet seen module-decl)\n+   1\t  0\tpurview of named module\n+   1\t  1\theader unit.   */\n+\n+inline bool module_purview_p ()\n+{ return module_kind & MK_MODULE; }\n+inline bool global_purview_p ()\n+{ return module_kind & MK_GLOBAL; }\n+\n+inline bool not_module_p ()\n+{ return (module_kind & (MK_MODULE | MK_GLOBAL)) == 0; }\n+inline bool named_module_p ()\n+{ /* This is a named module if exactly one of MODULE and GLOBAL is\n+     set.  */\n+  /* The divides are constant shifts!  */\n+  return ((module_kind / MK_MODULE) ^ (module_kind / MK_GLOBAL)) & 1;\n+}\n+inline bool header_module_p ()\n+{ return (module_kind & (MK_MODULE | MK_GLOBAL)) == (MK_MODULE | MK_GLOBAL); }\n+inline bool named_module_purview_p ()\n+{ return (module_kind & (MK_MODULE | MK_GLOBAL)) == MK_MODULE; }\n+inline bool module_interface_p ()\n+{ return module_kind & MK_INTERFACE; }\n+inline bool module_partition_p ()\n+{ return module_kind & MK_PARTITION; }\n+inline bool module_has_cmi_p ()\n+{ return module_kind & (MK_INTERFACE | MK_PARTITION); }\n+\n+/* We're currently exporting declarations.  */\n+inline bool module_exporting_p ()\n+{ return module_kind & MK_EXPORTING; }\n+\n+extern module_state *get_module (tree name, module_state *parent = NULL,\n+\t\t\t\t bool partition = false);\n+extern bool module_may_redeclare (tree decl);\n+\n+extern int module_initializer_kind ();\n+extern void module_add_import_initializers ();\n+\n+/* Where the namespace-scope decl was originally declared.  */\n+extern void set_originating_module (tree, bool friend_p = false);\n+extern tree get_originating_module_decl (tree) ATTRIBUTE_PURE;\n+extern int get_originating_module (tree, bool for_mangle = false) ATTRIBUTE_PURE;\n+extern unsigned get_importing_module (tree, bool = false) ATTRIBUTE_PURE;\n+\n+/* Where current instance of the decl got declared/defined/instantiated.  */\n+extern void set_instantiating_module (tree);\n+extern void set_defining_module (tree);\n+extern void maybe_attach_decl (tree ctx, tree decl);\n+\n+extern void mangle_module (int m, bool include_partition);\n+extern void mangle_module_fini ();\n+extern void lazy_load_binding (unsigned mod, tree ns, tree id,\n+\t\t\t       binding_slot *bslot);\n+extern void lazy_load_specializations (tree tmpl);\n+extern void lazy_load_members (tree decl);\n+extern bool lazy_specializations_p (unsigned, bool, bool);\n+extern module_state *preprocess_module (module_state *, location_t,\n+\t\t\t\t\tbool in_purview, \n+\t\t\t\t\tbool is_import, bool export_p,\n+\t\t\t\t\tcpp_reader *reader);\n+extern void preprocessed_module (cpp_reader *reader);\n+extern void import_module (module_state *, location_t, bool export_p,\n+\t\t\t   tree attr, cpp_reader *);\n+extern void declare_module (module_state *, location_t, bool export_p,\n+\t\t\t    tree attr, cpp_reader *);\n+extern void init_modules (cpp_reader *);\n+extern void fini_modules ();\n+extern void maybe_check_all_macros (cpp_reader *);\n+extern void finish_module_processing (cpp_reader *);\n+extern char const *module_name (unsigned, bool header_ok);\n+extern bitmap get_import_bitmap ();\n+extern bitmap module_visible_instantiation_path (bitmap *);\n+extern void module_begin_main_file (cpp_reader *, line_maps *,\n+\t\t\t\t    const line_map_ordinary *);\n+extern void module_preprocess_options (cpp_reader *);\n+extern bool handle_module_option (unsigned opt, const char *arg, int value);\n \n /* In optimize.c */\n extern bool maybe_clone_body\t\t\t(tree);"}]}