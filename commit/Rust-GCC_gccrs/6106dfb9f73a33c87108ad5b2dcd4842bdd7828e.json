{"sha": "6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjEwNmRmYjlmNzNhMzNjODcxMDhhZDViMmRjZDQ4NDJiZGQ3ODI4ZQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-11-30T14:15:20Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-01-14T17:48:00Z"}, "message": "[nvptx libgomp plugin] Build only in supported configurations\n\nAs recently again discussed in <https://gcc.gnu.org/PR97436> \"[nvptx] -m32\nsupport\", nvptx offloading other than for 64-bit host has never been\nimplemented, tested, supported.  So we simply should buildn't the nvptx libgomp\nplugin in this case.\n\nThis avoids build problems if, for example, in a (standard) bi-arch\nx86_64-pc-linux-gnu '-m64'/'-m32' build, libcuda is available only in a 64-bit\nvariant but not in a 32-bit one, which, for example, is the case if you build\nGCC against the CUDA toolkit's 'stubs/libcuda.so' (see\n<https://stackoverflow.com/a/52784819>).\n\nThis amends PR65099 commit a92defdab79a1268f4b9dcf42b937e4002a4cf15 (r225560)\n\"[nvptx offloading] Only 64-bit configurations are currently supported\" to\nmatch the way we're doing this for the HSA/GCN plugins.\n\n\tlibgomp/\n\tPR libgomp/65099\n\t* plugin/configfrag.ac (PLUGIN_NVPTX): Restrict to supported\n\tconfigurations.\n\t* configure: Regenerate.\n\t* plugin/plugin-nvptx.c (nvptx_get_num_devices): Remove 64-bit\n\tcheck.", "tree": {"sha": "e630592c2d1f65096bace48916a55b24d1665001", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e630592c2d1f65096bace48916a55b24d1665001"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a4f5e4eacfbbbd0ca5f1e3f946c27d63e2b533"}], "stats": {"total": 187, "additions": 105, "deletions": 82}, "files": [{"sha": "48bf8e4a72c4792ff1c32257e415a817be9096dd", "filename": "libgomp/configure", "status": "modified", "additions": 51, "deletions": 35, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfigure?ref=6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "patch": "@@ -15272,21 +15272,30 @@ if test x\"$enable_offload_targets\" != x; then\n \ttgt_plugin=intelmic\n \t;;\n       nvptx*)\n-\ttgt_plugin=nvptx\n-\tPLUGIN_NVPTX=$tgt\n-\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n-\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n-\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n-\t  PLUGIN_NVPTX_LIBS='-lcuda'\n-\n-\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n-\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n-\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n-\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n-\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n-\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n-\t  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+\tcase \"${target}\" in\n+\t  aarch64*-*-* | powerpc64le-*-* | x86_64-*-*)\n+\t    case \" ${CC} ${CFLAGS} \" in\n+\t      *\" -m32 \"* | *\" -mx32 \"*)\n+\t\t# PR libgomp/65099: Currently, we only support offloading in\n+\t\t# 64-bit configurations.\n+\t\tPLUGIN_NVPTX=0\n+\t\t;;\n+\t      *)\n+\t\ttgt_plugin=nvptx\n+\t\tPLUGIN_NVPTX=$tgt\n+\t\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n+\t\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n+\t\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n+\t\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n+\t\t  PLUGIN_NVPTX_LIBS='-lcuda'\n+\n+\t\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n+\t\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n+\t\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n+\t\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n+\t\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n+\t\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n+\t\t  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include \"cuda.h\"\n int\n@@ -15302,28 +15311,35 @@ if ac_fn_c_try_link \"$LINENO\"; then :\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n-\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n-\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n-\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n-\tfi\n-\tcase $PLUGIN_NVPTX in\n-\t  nvptx*)\n-\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n-\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n-\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n-\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n-\t      PLUGIN_NVPTX=1\n-\t      PLUGIN_NVPTX_CPPFLAGS='-I$(srcdir)/plugin/cuda'\n-\t      PLUGIN_NVPTX_LIBS='-ldl'\n-\t      PLUGIN_NVPTX_DYNAMIC=1\n-\t    else\n-\t      PLUGIN_NVPTX=0\n-\t      as_fn_error $? \"CUDA driver package required for nvptx support\" \"$LINENO\" 5\n-\t    fi\n-\t  ;;\n+\t\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n+\t\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n+\t\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n+\t\tfi\n+\t\tcase $PLUGIN_NVPTX in\n+\t\t  nvptx*)\n+\t\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n+\t\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n+\t\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n+\t\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n+\t\t      PLUGIN_NVPTX=1\n+\t\t      PLUGIN_NVPTX_CPPFLAGS='-I$(srcdir)/plugin/cuda'\n+\t\t      PLUGIN_NVPTX_LIBS='-ldl'\n+\t\t      PLUGIN_NVPTX_DYNAMIC=1\n+\t\t    else\n+\t\t      PLUGIN_NVPTX=0\n+\t\t      as_fn_error $? \"CUDA driver package required for nvptx support\" \"$LINENO\" 5\n+\t\t    fi\n+\t\t    ;;\n+\t\tesac\n+\t\t;;\n+\t    esac\n+\t    ;;\n+\t  *-*-*)\n+\t    # Target architecture not supported.\n+\t    PLUGIN_NVPTX=0\n+\t    ;;\n \tesac\n \t;;\n-\n       amdgcn*)\n \tcase \"${target}\" in\n \t  x86_64-*-*)"}, {"sha": "88550982eabe9ad309fe54a52efd28076a7b420f", "filename": "libgomp/plugin/configfrag.ac", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fplugin%2Fconfigfrag.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fplugin%2Fconfigfrag.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fconfigfrag.ac?ref=6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "patch": "@@ -158,47 +158,63 @@ if test x\"$enable_offload_targets\" != x; then\n \ttgt_plugin=intelmic\n \t;;\n       nvptx*)\n-\ttgt_plugin=nvptx\n-\tPLUGIN_NVPTX=$tgt\n-\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n-\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n-\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n-\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n-\t  PLUGIN_NVPTX_LIBS='-lcuda'\n+\tcase \"${target}\" in\n+\t  aarch64*-*-* | powerpc64le-*-* | x86_64-*-*)\n+\t    case \" ${CC} ${CFLAGS} \" in\n+\t      *\" -m32 \"* | *\" -mx32 \"*)\n+\t\t# PR libgomp/65099: Currently, we only support offloading in\n+\t\t# 64-bit configurations.\n+\t\tPLUGIN_NVPTX=0\n+\t\t;;\n+\t      *)\n+\t\ttgt_plugin=nvptx\n+\t\tPLUGIN_NVPTX=$tgt\n+\t\tif test \"x$CUDA_DRIVER_LIB\" != xno \\\n+\t\t   && test \"x$CUDA_DRIVER_LIB\" != xno; then\n+\t\t  PLUGIN_NVPTX_CPPFLAGS=$CUDA_DRIVER_CPPFLAGS\n+\t\t  PLUGIN_NVPTX_LDFLAGS=$CUDA_DRIVER_LDFLAGS\n+\t\t  PLUGIN_NVPTX_LIBS='-lcuda'\n \n-\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n-\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n-\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n-\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n-\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n-\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n-\t  AC_LINK_IFELSE(\n-\t    [AC_LANG_PROGRAM(\n-\t      [#include \"cuda.h\"],\n-\t\t[CUresult r = cuCtxPushCurrent (NULL);])],\n-\t    [PLUGIN_NVPTX=1])\n-\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n-\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n-\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n-\tfi\n-\tcase $PLUGIN_NVPTX in\n-\t  nvptx*)\n-\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n-\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n-\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n-\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n-\t      PLUGIN_NVPTX=1\n-\t      PLUGIN_NVPTX_CPPFLAGS='-I$(srcdir)/plugin/cuda'\n-\t      PLUGIN_NVPTX_LIBS='-ldl'\n-\t      PLUGIN_NVPTX_DYNAMIC=1\n-\t    else\n-\t      PLUGIN_NVPTX=0\n-\t      AC_MSG_ERROR([CUDA driver package required for nvptx support])\n-\t    fi\n-\t  ;;\n+\t\t  PLUGIN_NVPTX_save_CPPFLAGS=$CPPFLAGS\n+\t\t  CPPFLAGS=\"$PLUGIN_NVPTX_CPPFLAGS $CPPFLAGS\"\n+\t\t  PLUGIN_NVPTX_save_LDFLAGS=$LDFLAGS\n+\t\t  LDFLAGS=\"$PLUGIN_NVPTX_LDFLAGS $LDFLAGS\"\n+\t\t  PLUGIN_NVPTX_save_LIBS=$LIBS\n+\t\t  LIBS=\"$PLUGIN_NVPTX_LIBS $LIBS\"\n+\t\t  AC_LINK_IFELSE(\n+\t\t    [AC_LANG_PROGRAM(\n+\t\t      [#include \"cuda.h\"],\n+\t\t\t[CUresult r = cuCtxPushCurrent (NULL);])],\n+\t\t    [PLUGIN_NVPTX=1])\n+\t\t  CPPFLAGS=$PLUGIN_NVPTX_save_CPPFLAGS\n+\t\t  LDFLAGS=$PLUGIN_NVPTX_save_LDFLAGS\n+\t\t  LIBS=$PLUGIN_NVPTX_save_LIBS\n+\t\tfi\n+\t\tcase $PLUGIN_NVPTX in\n+\t\t  nvptx*)\n+\t\t    if (test \"x$CUDA_DRIVER_INCLUDE\" = x \\\n+\t\t\t|| test \"x$CUDA_DRIVER_INCLUDE\" = xno) \\\n+\t\t       && (test \"x$CUDA_DRIVER_LIB\" = x \\\n+\t\t\t   || test \"x$CUDA_DRIVER_LIB\" = xno); then\n+\t\t      PLUGIN_NVPTX=1\n+\t\t      PLUGIN_NVPTX_CPPFLAGS='-I$(srcdir)/plugin/cuda'\n+\t\t      PLUGIN_NVPTX_LIBS='-ldl'\n+\t\t      PLUGIN_NVPTX_DYNAMIC=1\n+\t\t    else\n+\t\t      PLUGIN_NVPTX=0\n+\t\t      AC_MSG_ERROR([CUDA driver package required for nvptx support])\n+\t\t    fi\n+\t\t    ;;\n+\t\tesac\n+\t\t;;\n+\t    esac\n+\t    ;;\n+\t  *-*-*)\n+\t    # Target architecture not supported.\n+\t    PLUGIN_NVPTX=0\n+\t    ;;\n \tesac\n \t;;\n-\n       amdgcn*)\n \tcase \"${target}\" in\n \t  x86_64-*-*)"}, {"sha": "1215212d501b5cb3dd99d39645370dc9cbeaf92a", "filename": "libgomp/plugin/plugin-nvptx.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fplugin%2Fplugin-nvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6106dfb9f73a33c87108ad5b2dcd4842bdd7828e/libgomp%2Fplugin%2Fplugin-nvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-nvptx.c?ref=6106dfb9f73a33c87108ad5b2dcd4842bdd7828e", "patch": "@@ -572,15 +572,6 @@ nvptx_get_num_devices (void)\n {\n   int n;\n \n-  /* PR libgomp/65099: Currently, we only support offloading in 64-bit\n-     configurations.  */\n-  if (sizeof (void *) != 8)\n-    {\n-      GOMP_PLUGIN_debug (0, \"Disabling nvptx offloading;\"\n-\t\t\t \" only 64-bit configurations are supported\\n\");\n-      return 0;\n-    }\n-\n   /* This function will be called before the plugin has been initialized in\n      order to enumerate available devices, but CUDA API routines can't be used\n      until cuInit has been called.  Just call it now (but don't yet do any"}]}