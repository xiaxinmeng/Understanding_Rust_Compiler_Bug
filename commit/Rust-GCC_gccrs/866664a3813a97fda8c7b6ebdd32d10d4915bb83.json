{"sha": "866664a3813a97fda8c7b6ebdd32d10d4915bb83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY2NjY0YTM4MTNhOTdmZGE4YzdiNmViZGQzMmQxMGQ0OTE1YmI4Mw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-24T12:51:19Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-03-24T12:51:19Z"}, "message": "re PR fortran/78865 (ICE in create_tmp_var, at gimple-expr.c:473)\n\n2019-03-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/78865\n\t* interface.c (compare_actual_formal): Change errors about\n\tmissing or extra to gfc_error_now to make sure they are issued.\n\tChange \"spec\" to \"specifier\" in message.\n\t* resolve.c (resolve_global_procedure): Also check for mismatching\n\tinterface with global symbols if the namespace has already been\n\tresolved.\n\n2019-03-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/78865\n\t* gfortran.dg/altreturn_10.f90: New test.\n\t* gfortran.dg/whole_file_3.f90: Change dg-warning to dg-error.\n\nFrom-SVN: r269895", "tree": {"sha": "2bc39173ae2171234cb20a861d40984cdfcf11ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc39173ae2171234cb20a861d40984cdfcf11ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/866664a3813a97fda8c7b6ebdd32d10d4915bb83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866664a3813a97fda8c7b6ebdd32d10d4915bb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866664a3813a97fda8c7b6ebdd32d10d4915bb83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866664a3813a97fda8c7b6ebdd32d10d4915bb83/comments", "author": null, "committer": null, "parents": [{"sha": "c1e62ea1afea4c19cbe010a424f6b3cf7c181859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1e62ea1afea4c19cbe010a424f6b3cf7c181859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1e62ea1afea4c19cbe010a424f6b3cf7c181859"}], "stats": {"total": 135, "additions": 89, "deletions": 46}, "files": [{"sha": "3ce7de368520fbe959d171ed7655763c9cc8f859", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -1,3 +1,13 @@\n+2019-03-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/78865\n+\t* interface.c (compare_actual_formal): Change errors about\n+\tmissing or extra to gfc_error_now to make sure they are issued.\n+\tChange \"spec\" to \"specifier\" in message.\n+\t* resolve.c (resolve_global_procedure): Also check for mismatching\n+\tinterface with global symbols if the namespace has already been\n+\tresolved.\n+\n 2019-03-21  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR fortran/72741"}, {"sha": "5b8a0f92643acb1d3ac91a814953f3bf27db83d0", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -2969,17 +2969,19 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \n       if (f->sym == NULL)\n \t{\n+\t  /* These errors have to be issued, otherwise an ICE can occur.\n+\t     See PR 78865.  */\n \t  if (where)\n-\t    gfc_error (\"Missing alternate return spec in subroutine call \"\n-\t\t       \"at %L\", where);\n+\t    gfc_error_now (\"Missing alternate return specifier in subroutine \"\n+\t\t\t   \"call at %L\", where);\n \t  return false;\n \t}\n \n       if (a->expr == NULL)\n \t{\n \t  if (where)\n-\t    gfc_error (\"Unexpected alternate return spec in subroutine \"\n-\t\t       \"call at %L\", where);\n+\t    gfc_error_now (\"Unexpected alternate return specifier in \"\n+\t\t\t   \"subroutine call at %L\", where);\n \t  return false;\n \t}\n "}, {"sha": "3513a44ede383b3719f0c111a0e97d33cabc7fb9", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -2498,62 +2498,64 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n       && gsym->type != GSYM_UNKNOWN\n       && !gsym->binding_label\n       && gsym->ns\n-      && gsym->ns->resolved != -1\n       && gsym->ns->proc_name\n       && not_in_recursive (sym, gsym->ns)\n       && not_entry_self_reference (sym, gsym->ns))\n     {\n       gfc_symbol *def_sym;\n+      def_sym = gsym->ns->proc_name;\n \n-      /* Resolve the gsymbol namespace if needed.  */\n-      if (!gsym->ns->resolved)\n+      if (gsym->ns->resolved != -1)\n \t{\n-\t  gfc_symbol *old_dt_list;\n \n-\t  /* Stash away derived types so that the backend_decls do not\n-\t     get mixed up.  */\n-\t  old_dt_list = gfc_derived_types;\n-\t  gfc_derived_types = NULL;\n+\t  /* Resolve the gsymbol namespace if needed.  */\n+\t  if (!gsym->ns->resolved)\n+\t    {\n+\t      gfc_symbol *old_dt_list;\n \n-\t  gfc_resolve (gsym->ns);\n+\t      /* Stash away derived types so that the backend_decls\n+\t\t do not get mixed up.  */\n+\t      old_dt_list = gfc_derived_types;\n+\t      gfc_derived_types = NULL;\n \n-\t  /* Store the new derived types with the global namespace.  */\n-\t  if (gfc_derived_types)\n-\t    gsym->ns->derived_types = gfc_derived_types;\n+\t      gfc_resolve (gsym->ns);\n \n-\t  /* Restore the derived types of this namespace.  */\n-\t  gfc_derived_types = old_dt_list;\n-\t}\n+\t      /* Store the new derived types with the global namespace.  */\n+\t      if (gfc_derived_types)\n+\t\tgsym->ns->derived_types = gfc_derived_types;\n \n-      /* Make sure that translation for the gsymbol occurs before\n-\t the procedure currently being resolved.  */\n-      ns = gfc_global_ns_list;\n-      for (; ns && ns != gsym->ns; ns = ns->sibling)\n-\t{\n-\t  if (ns->sibling == gsym->ns)\n-\t    {\n-\t      ns->sibling = gsym->ns->sibling;\n-\t      gsym->ns->sibling = gfc_global_ns_list;\n-\t      gfc_global_ns_list = gsym->ns;\n-\t      break;\n+\t      /* Restore the derived types of this namespace.  */\n+\t      gfc_derived_types = old_dt_list;\n \t    }\n-\t}\n \n-      def_sym = gsym->ns->proc_name;\n+\t  /* Make sure that translation for the gsymbol occurs before\n+\t     the procedure currently being resolved.  */\n+\t  ns = gfc_global_ns_list;\n+\t  for (; ns && ns != gsym->ns; ns = ns->sibling)\n+\t    {\n+\t      if (ns->sibling == gsym->ns)\n+\t\t{\n+\t\t  ns->sibling = gsym->ns->sibling;\n+\t\t  gsym->ns->sibling = gfc_global_ns_list;\n+\t\t  gfc_global_ns_list = gsym->ns;\n+\t\t  break;\n+\t\t}\n+\t    }\n \n-      /* This can happen if a binding name has been specified.  */\n-      if (gsym->binding_label && gsym->sym_name != def_sym->name)\n-\tgfc_find_symbol (gsym->sym_name, gsym->ns, 0, &def_sym);\n+\t  /* This can happen if a binding name has been specified.  */\n+\t  if (gsym->binding_label && gsym->sym_name != def_sym->name)\n+\t    gfc_find_symbol (gsym->sym_name, gsym->ns, 0, &def_sym);\n \n-      if (def_sym->attr.entry_master)\n-\t{\n-\t  gfc_entry_list *entry;\n-\t  for (entry = gsym->ns->entries; entry; entry = entry->next)\n-\t    if (strcmp (entry->sym->name, sym->name) == 0)\n-\t      {\n-\t\tdef_sym = entry->sym;\n-\t\tbreak;\n-\t      }\n+\t  if (def_sym->attr.entry_master)\n+\t    {\n+\t      gfc_entry_list *entry;\n+\t      for (entry = gsym->ns->entries; entry; entry = entry->next)\n+\t\tif (strcmp (entry->sym->name, sym->name) == 0)\n+\t\t  {\n+\t\t    def_sym = entry->sym;\n+\t\t    break;\n+\t\t  }\n+\t    }\n \t}\n \n       if (sym->attr.function && !gfc_compare_types (&sym->ts, &def_sym->ts))"}, {"sha": "7d2a0b1797f55526e369f7164169486b032fb5c1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -1,3 +1,13 @@\n+2019-03-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/78865\n+\t* interface.c (compare_actual_formal): Change errors about\n+\tmissing or extra to gfc_error_now to make sure they are issued.\n+\tChange \"spec\" to \"specifier\" in message.\n+\t* resolve.c (resolve_global_procedure): Also check for mismatching\n+\tinterface with global symbols if the namespace has already been\n+\tresolved.\n+\n 2019-03-22  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/89676"}, {"sha": "7e5d56977ea1a0e277251b39348ce6faee71e07e", "filename": "gcc/testsuite/gfortran.dg/altreturn_10.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Faltreturn_10.f90?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+! { dg-options -Os }\n+! PR 78865 - this used to ICE.\n+program p\n+   call sub (3)\n+end\n+subroutine sub (x)\n+   integer :: x, i, n\n+   do i = 1, x\n+      if ( n /= 0 ) stop\n+      call sub2\n+   end do\n+   print *, x, n\n+end\n+subroutine sub2\n+   call sub (*99) ! { dg-error \"Unexpected alternate return specifier\" }\n+   call sub (99.) ! { dg-warning \"Type mismatch in argument\" }\n+99 stop\n+end"}, {"sha": "06898272c56214f366914a414024855ba033c0da", "filename": "gcc/testsuite/gfortran.dg/whole_file_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866664a3813a97fda8c7b6ebdd32d10d4915bb83/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwhole_file_3.f90?ref=866664a3813a97fda8c7b6ebdd32d10d4915bb83", "patch": "@@ -14,8 +14,8 @@ SUBROUTINE PHLOAD (READER,*)\n \n       program test\n       EXTERNAL R\n-      call PHLOAD (R, 1) ! { dg-warning \"Missing alternate return spec\" }\n-      CALL PHLOAD (R, 2) ! { dg-warning \"Missing alternate return spec\" }\n+      call PHLOAD (R, 1) ! { dg-error \"Missing alternate return specifier\" }\n+      CALL PHLOAD (R, 2) ! { dg-error \"Missing alternate return specifier\" }\n       CALL PHLOAD (R, *999) ! This one is OK\n  999  continue\n       END program test"}]}