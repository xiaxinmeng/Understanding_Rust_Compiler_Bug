{"sha": "516fd7cedb025b09000563cdba6214461621400d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE2ZmQ3Y2VkYjAyNWIwOTAwMDU2M2NkYmE2MjE0NDYxNjIxNDAwZA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2019-11-20T15:04:34Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2019-11-20T15:04:34Z"}, "message": "Add pool_allocator for fibonaci heaps.\n\n\t* fibonacci_heap.h (fibonacci_heap<K,V>::fibonacci_heap):\n\tAdd allocator parameter.\n\t(fibonacci_heap<K,V>::~fibonacci_heap): Optimize destruction.\n\t(fibonacci_heap<K,V>::m_allocator): New.\n\t(fibonacci_heap<K,V>::m_own_allocator): New.\n\t(fibonacci_heap<K,V>::insert): Use allocator.\n\t(fibonacci_heap<K,V>::extract_min): Likewise.\n\t(fibonacci_heap<K,V>::union_with): Assert that both heaps share\n\tallocator.\n\t(fibonacci_heap<K,V>::consolidate): Allocate constant sized vector\n\ton stack.\n\t* fibonacci_heap.c: Include alloc-pool\n\t(test_empty_heap): Initialize allocator.\n\t(test_union): Likewise.\n\t* bb-reorder.c: Include alloc-pool.h.\n\t* tracer.c: Inlclude alloc-pool.h.\n\nFrom-SVN: r278501", "tree": {"sha": "61c772013cc91032ba6dcdcaffd99445d40bd10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61c772013cc91032ba6dcdcaffd99445d40bd10b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/516fd7cedb025b09000563cdba6214461621400d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516fd7cedb025b09000563cdba6214461621400d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/516fd7cedb025b09000563cdba6214461621400d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/516fd7cedb025b09000563cdba6214461621400d/comments", "author": null, "committer": null, "parents": [{"sha": "f6fbdc385ae9fd3f07b2f5fe8b7fe2a134622be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6fbdc385ae9fd3f07b2f5fe8b7fe2a134622be7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6fbdc385ae9fd3f07b2f5fe8b7fe2a134622be7"}], "stats": {"total": 89, "additions": 73, "deletions": 16}, "files": [{"sha": "6eb037f7d453f3bdb9d7dced376b1e8b6ef12fd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516fd7cedb025b09000563cdba6214461621400d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516fd7cedb025b09000563cdba6214461621400d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=516fd7cedb025b09000563cdba6214461621400d", "patch": "@@ -1,3 +1,22 @@\n+2019-11-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fibonacci_heap.h (fibonacci_heap<K,V>::fibonacci_heap):\n+\tAdd allocator parameter.\n+\t(fibonacci_heap<K,V>::~fibonacci_heap): Optimize destruction.\n+\t(fibonacci_heap<K,V>::m_allocator): New.\n+\t(fibonacci_heap<K,V>::m_own_allocator): New.\n+\t(fibonacci_heap<K,V>::insert): Use allocator.\n+\t(fibonacci_heap<K,V>::extract_min): Likewise.\n+\t(fibonacci_heap<K,V>::union_with): Assert that both heaps share\n+\tallocator.\n+\t(fibonacci_heap<K,V>::consolidate): Allocate constant sized vector\n+\ton stack.\n+\t* fibonacci_heap.c: Include alloc-pool\n+\t(test_empty_heap): Initialize allocator.\n+\t(test_union): Likewise.\n+\t* bb-reorder.c: Include alloc-pool.h.\n+\t* tracer.c: Inlclude alloc-pool.h.\n+\n 2019-11-20  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (DFS::sccstack): Turn into auto-vec."}, {"sha": "d1a2f1e1115c5ae4b4557aac1c795d1a4f1d12cb", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516fd7cedb025b09000563cdba6214461621400d/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516fd7cedb025b09000563cdba6214461621400d/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=516fd7cedb025b09000563cdba6214461621400d", "patch": "@@ -112,6 +112,7 @@\n #include \"cfgcleanup.h\"\n #include \"bb-reorder.h\"\n #include \"except.h\"\n+#include \"alloc-pool.h\"\n #include \"fibonacci_heap.h\"\n #include \"stringpool.h\"\n #include \"attribs.h\""}, {"sha": "2470715a70c6c9dae74ed8e7ba5be890ac20f145", "filename": "gcc/fibonacci_heap.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ffibonacci_heap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ffibonacci_heap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffibonacci_heap.c?ref=516fd7cedb025b09000563cdba6214461621400d", "patch": "@@ -21,6 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n+#include \"alloc-pool.h\"\n #include \"fibonacci_heap.h\"\n #include \"selftest.h\"\n \n@@ -38,13 +39,14 @@ typedef fibonacci_heap <int, int> int_heap_t;\n static void\n test_empty_heap ()\n {\n-  int_heap_t *h1 = new int_heap_t (INT_MIN);\n+  pool_allocator allocator (\"fibheap test\", sizeof (int_heap_node_t));\n+  int_heap_t *h1 = new int_heap_t (INT_MIN, &allocator);\n \n   ASSERT_TRUE (h1->empty ());\n   ASSERT_EQ (0, h1->nodes ());\n   ASSERT_EQ (NULL, h1->min ());\n \n-  int_heap_t *h2 = new int_heap_t (INT_MIN);\n+  int_heap_t *h2 = new int_heap_t (INT_MIN, &allocator);\n \n   int_heap_t *r = h1->union_with (h2);\n   ASSERT_TRUE (r->empty ());\n@@ -169,12 +171,13 @@ static void\n test_union ()\n {\n   int value = 777;\n+  pool_allocator allocator (\"fibheap test\", sizeof (int_heap_node_t));\n \n-  int_heap_t *heap1 = new int_heap_t (INT_MIN);\n+  int_heap_t *heap1 = new int_heap_t (INT_MIN, &allocator);\n   for (unsigned i = 0; i < 2 * TEST_HEAP_N; i++)\n     heap1->insert (i, &value);\n \n-  int_heap_t *heap2 = new int_heap_t (INT_MIN);\n+  int_heap_t *heap2 = new int_heap_t (INT_MIN, &allocator);\n   for (unsigned i = 2 * TEST_HEAP_N; i < 3 * TEST_HEAP_N; i++)\n     heap2->insert (i, &value);\n \n@@ -196,12 +199,13 @@ static void\n test_union_of_equal_heaps ()\n {\n   int value = 777;\n+  pool_allocator allocator (\"fibheap test\", sizeof (int_heap_node_t));\n \n-  int_heap_t *heap1 = new int_heap_t (INT_MIN);\n+  int_heap_t *heap1 = new int_heap_t (INT_MIN, &allocator);\n   for (unsigned i = 0; i < TEST_HEAP_N; i++)\n     heap1->insert (i, &value);\n \n-  int_heap_t *heap2 = new int_heap_t (INT_MIN);\n+  int_heap_t *heap2 = new int_heap_t (INT_MIN, &allocator);\n   for (unsigned i = 0; i < TEST_HEAP_N; i++)\n     heap2->insert (i, &value);\n "}, {"sha": "9961648d505ae99e13c94c14ef05fc6d9f2fd00a", "filename": "gcc/fibonacci_heap.h", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ffibonacci_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ffibonacci_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffibonacci_heap.h?ref=516fd7cedb025b09000563cdba6214461621400d", "patch": "@@ -145,17 +145,36 @@ class fibonacci_heap\n   friend class fibonacci_node<K,V>;\n \n public:\n-  /* Default constructor.  */\n-  fibonacci_heap (K global_min_key): m_nodes (0), m_min (NULL), m_root (NULL),\n-    m_global_min_key (global_min_key)\n+  /* Default constructor.  ALLOCATOR is optional and is primarily useful\n+     when heaps are going to be merged (in that case they need to be allocated\n+     in same alloc pool).  */\n+  fibonacci_heap (K global_min_key, pool_allocator *allocator = NULL):\n+    m_nodes (0), m_min (NULL), m_root (NULL),\n+    m_global_min_key (global_min_key),\n+    m_allocator (allocator), m_own_allocator (false)\n   {\n+    if (!m_allocator)\n+      {\n+\tm_allocator = new pool_allocator (\"Fibonacci heap\",\n+\t\t\t\t\t    sizeof (fibonacci_node_t));\n+\tm_own_allocator = true;\n+      }\n   }\n \n   /* Destructor.  */\n   ~fibonacci_heap ()\n   {\n-    while (m_min != NULL)\n-      delete (extract_minimum_node ());\n+    /* Actual memory will be released by the destructor of m_allocator.  */\n+    if (need_finalization_p<fibonacci_node_t> () || !m_own_allocator)\n+      while (m_min != NULL)\n+\t{\n+\t  fibonacci_node_t *n = extract_minimum_node ();\n+\t  n->~fibonacci_node_t ();\n+\t  if (!m_own_allocator)\n+\t    m_allocator->remove (n);\n+\t}\n+    if (m_own_allocator)\n+      delete m_allocator;\n   }\n \n   /* Insert new node given by KEY and DATA associated with the key.  */\n@@ -259,6 +278,11 @@ class fibonacci_heap\n   fibonacci_node_t *m_root;\n   /* Global minimum given in the heap construction.  */\n   K m_global_min_key;\n+\n+  /* Allocator used to hold nodes.  */\n+  pool_allocator *m_allocator;\n+  /* True if alocator is owned by the current heap only.  */\n+  bool m_own_allocator;\n };\n \n /* Remove fibonacci heap node.  */\n@@ -333,7 +357,8 @@ fibonacci_node<K,V>*\n fibonacci_heap<K,V>::insert (K key, V *data)\n {\n   /* Create the new node.  */\n-  fibonacci_node<K,V> *node = new fibonacci_node_t (key, data);\n+  fibonacci_node<K,V> *node = new (m_allocator->allocate ())\n+\t\t\t\t  fibonacci_node_t (key, data);\n \n   return insert_node (node);\n }\n@@ -438,7 +463,10 @@ fibonacci_heap<K,V>::extract_min (bool release)\n       ret = z->m_data;\n \n       if (release)\n-        delete (z);\n+\t{\n+\t  z->~fibonacci_node_t ();\n+\t  m_allocator->remove (z);\n+\t}\n     }\n \n   return ret;\n@@ -474,6 +502,9 @@ fibonacci_heap<K,V>::union_with (fibonacci_heap<K,V> *heapb)\n \n   fibonacci_node<K,V> *a_root, *b_root;\n \n+  /* Both heaps must share allocator.  */\n+  gcc_checking_assert (m_allocator == heapb->m_allocator);\n+\n   /* If one of the heaps is empty, the union is just the other heap.  */\n   if ((a_root = heapa->m_root) == NULL)\n     {\n@@ -616,12 +647,13 @@ fibonacci_heap<K,V>::remove_root (fibonacci_node<K,V> *node)\n template<class K, class V>\n void fibonacci_heap<K,V>::consolidate ()\n {\n-  int D = 1 + 8 * sizeof (long);\n-  auto_vec<fibonacci_node<K,V> *> a (D);\n-  a.safe_grow_cleared (D);\n+  const int D = 1 + 8 * sizeof (long);\n+  auto_vec<fibonacci_node<K,V> *, D> a;\n   fibonacci_node<K,V> *w, *x, *y;\n   int i, d;\n \n+  a.quick_grow_cleared (D);\n+\n   while ((w = m_root) != NULL)\n     {\n       x = w;"}, {"sha": "7db0d285a707395e9def00bf92789d101427b396", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/516fd7cedb025b09000563cdba6214461621400d/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=516fd7cedb025b09000563cdba6214461621400d", "patch": "@@ -49,6 +49,7 @@\n #include \"tree-ssa.h\"\n #include \"tree-inline.h\"\n #include \"cfgloop.h\"\n+#include \"alloc-pool.h\"\n #include \"fibonacci_heap.h\"\n #include \"tracer.h\"\n "}]}