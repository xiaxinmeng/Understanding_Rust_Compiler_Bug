{"sha": "225ccc68d7a040c5db248b52dd4a4ed0acafd622", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI1Y2NjNjhkN2EwNDBjNWRiMjQ4YjUyZGQ0YTRlZDBhY2FmZDYyMg==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-23T21:40:20Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2013-03-23T21:40:20Z"}, "message": "df-core.c (rest_of_handle_df_initialize): Use XCNEWVEC instead of XNEWVEC followed by memset.\n\n\t* df-core.c (rest_of_handle_df_initialize): Use XCNEWVEC instead\n\tof XNEWVEC followed by memset.\n\t(df_worklist_dataflow): Use XNEWVEC instead of xmalloc with a cast.\n\nFrom-SVN: r197011", "tree": {"sha": "a239bd380b042d9cb7f211fb26c77c14065c461f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a239bd380b042d9cb7f211fb26c77c14065c461f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/225ccc68d7a040c5db248b52dd4a4ed0acafd622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225ccc68d7a040c5db248b52dd4a4ed0acafd622", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225ccc68d7a040c5db248b52dd4a4ed0acafd622", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225ccc68d7a040c5db248b52dd4a4ed0acafd622/comments", "author": null, "committer": null, "parents": [{"sha": "17a02b06481e4ff25a059646a420a27fc8fb68d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a02b06481e4ff25a059646a420a27fc8fb68d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a02b06481e4ff25a059646a420a27fc8fb68d0"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "387ccf3758afc3e3bed2a3ff9ab1135a3561bff2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ccc68d7a040c5db248b52dd4a4ed0acafd622/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ccc68d7a040c5db248b52dd4a4ed0acafd622/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=225ccc68d7a040c5db248b52dd4a4ed0acafd622", "patch": "@@ -1,3 +1,9 @@\n+2013-03-23  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* df-core.c (rest_of_handle_df_initialize): Use XCNEWVEC instead\n+\tof XNEWVEC followed by memset.\n+\t(df_worklist_dataflow): Use XNEWVEC instead of xmalloc with a cast.\n+\n 2013-03-23  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* config/avr/avr.c, config/bfin/bfin.c, config/c6x/c6x.c,"}, {"sha": "d392cd6867e23a88712b70b420d28ffcfb573d5a", "filename": "gcc/df-core.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/225ccc68d7a040c5db248b52dd4a4ed0acafd622/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/225ccc68d7a040c5db248b52dd4a4ed0acafd622/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=225ccc68d7a040c5db248b52dd4a4ed0acafd622", "patch": "@@ -727,9 +727,7 @@ rest_of_handle_df_initialize (void)\n   df->n_blocks_inverted = inverted_post_order_compute (df->postorder_inverted);\n   gcc_assert (df->n_blocks == df->n_blocks_inverted);\n \n-  df->hard_regs_live_count = XNEWVEC (unsigned int, FIRST_PSEUDO_REGISTER);\n-  memset (df->hard_regs_live_count, 0,\n-\t  sizeof (unsigned int) * FIRST_PSEUDO_REGISTER);\n+  df->hard_regs_live_count = XCNEWVEC (unsigned int, FIRST_PSEUDO_REGISTER);\n \n   df_hard_reg_init ();\n   /* After reload, some ports add certain bits to regs_ever_live so\n@@ -1074,8 +1072,7 @@ df_worklist_dataflow (struct dataflow *dataflow,\n   gcc_assert (dir != DF_NONE);\n \n   /* BBINDEX_TO_POSTORDER maps the bb->index to the reverse postorder.  */\n-  bbindex_to_postorder =\n-    (unsigned int *)xmalloc (last_basic_block * sizeof (unsigned int));\n+  bbindex_to_postorder = XNEWVEC (unsigned int, last_basic_block);\n \n   /* Initialize the array to an out-of-bound value.  */\n   for (i = 0; i < last_basic_block; i++)"}]}