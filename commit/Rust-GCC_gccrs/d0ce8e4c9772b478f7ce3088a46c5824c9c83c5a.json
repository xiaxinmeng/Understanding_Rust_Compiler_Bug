{"sha": "d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjZThlNGM5NzcyYjQ3OGY3Y2UzMDg4YTQ2YzU4MjRjOWM4M2M1YQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-11-12T00:08:41Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-11-12T00:08:41Z"}, "message": "tree-ssa.c (walk_use_def_chains_1): Make the visited map a pointer set instead of a bitmap.\n\n\t* tree-ssa.c (walk_use_def_chains_1): Make the visited map a\n\tpointer set instead of a bitmap.\n\t(walk_use_def_chains): Create, pass and clean up that pointer_set.\n\n\t* tree-ssa-alias.c (struct alias_info): Make the ssa_names_visited\n\tfield an sbitmap.\n\t(init_alias_info): Allocate and zero it here.\n\t(delete_alias_info): Delete it here.\n\t(collect_points_to_info_for): Use it.\n\nFrom-SVN: r90508", "tree": {"sha": "549c93fd7b517405b6cf8a6a87d32d1556f8e140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549c93fd7b517405b6cf8a6a87d32d1556f8e140"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/comments", "author": null, "committer": null, "parents": [{"sha": "903676f62fc20f2bf6b7732ad0466f0749b49300", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903676f62fc20f2bf6b7732ad0466f0749b49300", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903676f62fc20f2bf6b7732ad0466f0749b49300"}], "stats": {"total": 40, "additions": 27, "deletions": 13}, "files": [{"sha": "873a00500f965e87a12303730d31b1c3f3f71543", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "patch": "@@ -1,3 +1,15 @@\n+2004-11-12  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree-ssa.c (walk_use_def_chains_1): Make the visited map a\n+\tpointer set instead of a bitmap.\n+\t(walk_use_def_chains): Create, pass and clean up that pointer_set.\n+\n+\t* tree-ssa-alias.c (struct alias_info): Make the ssa_names_visited\n+\tfield an sbitmap.\n+\t(init_alias_info): Allocate and zero it here.\n+\t(delete_alias_info): Delete it here.\n+\t(collect_points_to_info_for): Use it.\n+\n 2004-11-11  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* alias.c (record_alias_subset, addr_side_effect_eval):"}, {"sha": "2da76ce6bb5914ddc39821d69a07b1d81662484c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "patch": "@@ -73,7 +73,7 @@ struct alias_info\n   /* SSA names visited while collecting points-to information.  If bit I\n      is set, it means that SSA variable with version I has already been\n      visited.  */\n-  bitmap ssa_names_visited;\n+  sbitmap ssa_names_visited;\n \n   /* Array of SSA_NAME pointers processed by the points-to collector.  */\n   varray_type processed_ptrs;\n@@ -368,7 +368,8 @@ init_alias_info (void)\n   static bool aliases_computed_p = false;\n \n   ai = xcalloc (1, sizeof (struct alias_info));\n-  ai->ssa_names_visited = BITMAP_XMALLOC ();\n+  ai->ssa_names_visited = sbitmap_alloc (num_ssa_names);\n+  sbitmap_zero (ai->ssa_names_visited);\n   VARRAY_TREE_INIT (ai->processed_ptrs, 50, \"processed_ptrs\");\n   ai->addresses_needed = BITMAP_XMALLOC ();\n   VARRAY_UINT_INIT (ai->num_references, num_referenced_vars, \"num_references\");\n@@ -449,7 +450,7 @@ delete_alias_info (struct alias_info *ai)\n {\n   size_t i;\n \n-  BITMAP_XFREE (ai->ssa_names_visited);\n+  sbitmap_free (ai->ssa_names_visited);\n   ai->processed_ptrs = NULL;\n   BITMAP_XFREE (ai->addresses_needed);\n \n@@ -484,9 +485,9 @@ collect_points_to_info_for (struct alias_info *ai, tree ptr)\n {\n   gcc_assert (POINTER_TYPE_P (TREE_TYPE (ptr)));\n \n-  if (!bitmap_bit_p (ai->ssa_names_visited, SSA_NAME_VERSION (ptr)))\n+  if (!TEST_BIT (ai->ssa_names_visited, SSA_NAME_VERSION (ptr)))\n     {\n-      bitmap_set_bit (ai->ssa_names_visited, SSA_NAME_VERSION (ptr));\n+      SET_BIT (ai->ssa_names_visited, SSA_NAME_VERSION (ptr));\n       walk_use_def_chains (ptr, collect_points_to_info_r, ai, true);\n       VARRAY_PUSH_TREE (ai->processed_ptrs, ptr);\n     }"}, {"sha": "d0419b70dff0b54ffac849210100aa1c9e74ceee", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d0ce8e4c9772b478f7ce3088a46c5824c9c83c5a", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"diagnostic.h\"\n #include \"bitmap.h\"\n+#include \"pointer-set.h\"\n #include \"tree-flow.h\"\n #include \"tree-gimple.h\"\n #include \"tree-inline.h\"\n@@ -905,8 +906,10 @@ tree_ssa_useless_type_conversion (tree expr)\n /* Internal helper for walk_use_def_chains.  VAR, FN and DATA are as\n    described in walk_use_def_chains.\n    \n-   VISITED is a bitmap used to mark visited SSA_NAMEs to avoid\n-      infinite loops.\n+   VISITED is a pointer set used to mark visited SSA_NAMEs to avoid\n+      infinite loops.  We used to have a bitmap for this to just mark\n+      SSA versions we had visited.  But non-sparse bitmaps are way too\n+      expensive, while sparse bitmaps may cause quadratic behavior.\n \n    IS_DFS is true if the caller wants to perform a depth-first search\n       when visiting PHI nodes.  A DFS will visit each PHI argument and\n@@ -916,15 +919,13 @@ tree_ssa_useless_type_conversion (tree expr)\n \n static bool\n walk_use_def_chains_1 (tree var, walk_use_def_chains_fn fn, void *data,\n-\t\t       bitmap visited, bool is_dfs)\n+\t\t       struct pointer_set_t *visited, bool is_dfs)\n {\n   tree def_stmt;\n \n-  if (bitmap_bit_p (visited, SSA_NAME_VERSION (var)))\n+  if (pointer_set_insert (visited, var))\n     return false;\n \n-  bitmap_set_bit (visited, SSA_NAME_VERSION (var));\n-\n   def_stmt = SSA_NAME_DEF_STMT (var);\n \n   if (TREE_CODE (def_stmt) != PHI_NODE)\n@@ -1002,9 +1003,9 @@ walk_use_def_chains (tree var, walk_use_def_chains_fn fn, void *data,\n     (*fn) (var, def_stmt, data);\n   else\n     {\n-      bitmap visited = BITMAP_XMALLOC ();\n+      struct pointer_set_t *visited = pointer_set_create ();\n       walk_use_def_chains_1 (var, fn, data, visited, is_dfs);\n-      BITMAP_XFREE (visited);\n+      pointer_set_destroy (visited);\n     }\n }\n "}]}