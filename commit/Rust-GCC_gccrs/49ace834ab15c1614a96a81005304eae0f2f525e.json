{"sha": "49ace834ab15c1614a96a81005304eae0f2f525e", "node_id": "C_kwDOANBUbNoAKDQ5YWNlODM0YWIxNWMxNjE0YTk2YTgxMDA1MzA0ZWFlMGYyZjUyNWU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-13T00:16:30Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-05-13T00:16:30Z"}, "message": "Daily bump.", "tree": {"sha": "ae79b452e5c313b94e6c74ea0c2f63a7bebd904a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae79b452e5c313b94e6c74ea0c2f63a7bebd904a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ace834ab15c1614a96a81005304eae0f2f525e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ace834ab15c1614a96a81005304eae0f2f525e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ace834ab15c1614a96a81005304eae0f2f525e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ace834ab15c1614a96a81005304eae0f2f525e/comments", "author": null, "committer": null, "parents": [{"sha": "3e948d645bc9086eee28407fcc67d05b3450bb78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e948d645bc9086eee28407fcc67d05b3450bb78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e948d645bc9086eee28407fcc67d05b3450bb78"}], "stats": {"total": 469, "additions": 468, "deletions": 1}, "files": [{"sha": "eecedab76e99ad43904ee82b6f23693029821c95", "filename": "gcc/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,37 @@\n+2022-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/105577\n+\t* dse.cc (rest_of_handle_dse): Make sure to purge dead EH\n+\tedges before running fast DCE via df_analyze.\n+\n+2022-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105562\n+\t* tree-ssa-sccvn.cc (vn_reference_lookup_3): Disambiguate\n+\tagainst all CLOBBER defs if there's not an obvious must-alias\n+\tand we are not doing redundant store elimination.\n+\t(vn_walk_cb_data::redundant_store_removal_p): New field.\n+\t(vn_reference_lookup_pieces): Initialize it.\n+\t(vn_reference_lookup): Add argument to specify if we are\n+\tdoing redundant store removal.\n+\t(eliminate_dom_walker::eliminate_stmt): Specify we do.\n+\t* tree-ssa-sccvn.h (vn_reference_lookup): Adjust.\n+\n+2022-05-12  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/104371\n+\t* config/i386/sse.md (vi1avx2const): New define_mode_attr.\n+\t(pxor/pcmpeqb/pmovmskb/cmp 0xffff to ptest splitter):\n+\tNew define_split pattern.\n+\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gimplify.cc (gimplify_omp_depend): Don't build_fold_addr_expr\n+\tif null_pointer_node.\n+\t(gimplify_scan_omp_clauses): Likewise.\n+\t* tree-pretty-print.cc (dump_omp_clause): Print null_pointer_node\n+\tas omp_all_memory.\n+\n 2022-05-11  Patrick Palka  <ppalka@redhat.com>\n \n \t* tree.h (TREE_VEC_BEGIN): Define."}, {"sha": "7d15185cd15a12cd7a0b7e38c4a126954a60aafe", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1 +1 @@\n-20220512\n+20220513"}, {"sha": "01ecdb8e8bc3cec053f94f2e5211310b75cca042", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 302, "deletions": 0, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,305 @@\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat1drv.adb (Gnat1drv): Skip postponed checks when there are\n+\terrors.\n+\n+2022-05-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst: Fix URL.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-05-12  Bob Duff  <duff@adacore.com>\n+\n+\t* namet.ads, namet.adb (Write_Name_For_Debug): Add Quote\n+\tparameter to allow conditional addition of quotes. Note that\n+\tsome calls to Write_Name_For_Debug, for example for file names,\n+\tshouldn't have quotes, as in some_package.adb:123:45.\n+\t* treepr.adb (Print_Name): Add double quotes around the name\n+\tusing the above Quote parameters.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Actuals): Simplify with N_Op_Compare.\n+\t* sem_util.adb (Replace_Null_Operand,\n+\tNull_To_Null_Address_Convert_OK): Likewise.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Is_Selector_Name): Remove spec.\n+\t* sem_util.adb (Is_Selector_Name): Remove body.\n+\n+2022-05-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_warn.adb (Has_Junk_Name): Add more dummy names.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Fix comment and implement\n+\tit precisely.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* atree.adb, atree.ads: Move WITH clause from spec to body; to\n+\tprevent new warnings stopping the bootstrap.\n+\t* fmap.adb, fname-sf.adb, libgnat/a-direct.adb,\n+\tlibgnat/s-bignum.adb: Remove unnecessary WITH clauses; to\n+\tprevent new warnings stopping the bootstrap.\n+\t* sem_ch12.adb (Analyze_Subprogram_Instantiation): Only set\n+\tIs_Instantiated flag when the instance is in the extended main\n+\tsource unit.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-valuei.ads: Remove pragma Warnings Off.\n+\t* libgnat/s-valueu.ads: Same.\n+\t* libgnat/s-valuti.ads: Same.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_util.adb (Check_Result_And_Post_State): Exempt trivial\n+\tpost.\n+\n+2022-05-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* ali.adb, ali.ads, bcheck.adb, exp_ch11.adb, fe.h,\n+\tgnat1drv.adb, opt.adb, opt.ads, targparm.adb, targparm.ads,\n+\tlib-writ.adb: Get rid of Frontend_Exceptions processing.\n+\t* libgnat/system-aix.ads, libgnat/system-darwin-arm.ads,\n+\tlibgnat/system-darwin-ppc.ads, libgnat/system-darwin-x86.ads,\n+\tlibgnat/system-djgpp.ads, libgnat/system-dragonfly-x86_64.ads,\n+\tlibgnat/system-freebsd.ads, libgnat/system-hpux-ia64.ads,\n+\tlibgnat/system-hpux.ads, libgnat/system-linux-alpha.ads,\n+\tlibgnat/system-linux-arm.ads, libgnat/system-linux-hppa.ads,\n+\tlibgnat/system-linux-ia64.ads, libgnat/system-linux-m68k.ads,\n+\tlibgnat/system-linux-mips.ads, libgnat/system-linux-ppc.ads,\n+\tlibgnat/system-linux-riscv.ads, libgnat/system-linux-s390.ads,\n+\tlibgnat/system-linux-sh4.ads, libgnat/system-linux-sparc.ads,\n+\tlibgnat/system-linux-x86.ads, libgnat/system-lynxos178-ppc.ads,\n+\tlibgnat/system-lynxos178-x86.ads, libgnat/system-mingw.ads,\n+\tlibgnat/system-qnx-aarch64.ads, libgnat/system-rtems.ads,\n+\tlibgnat/system-solaris-sparc.ads,\n+\tlibgnat/system-solaris-x86.ads,\n+\tlibgnat/system-vxworks-arm-rtp-smp.ads,\n+\tlibgnat/system-vxworks-arm-rtp.ads,\n+\tlibgnat/system-vxworks-arm.ads,\n+\tlibgnat/system-vxworks-e500-kernel.ads,\n+\tlibgnat/system-vxworks-e500-rtp-smp.ads,\n+\tlibgnat/system-vxworks-e500-rtp.ads,\n+\tlibgnat/system-vxworks-ppc-kernel.ads,\n+\tlibgnat/system-vxworks-ppc-rtp-smp.ads,\n+\tlibgnat/system-vxworks-ppc-rtp.ads,\n+\tlibgnat/system-vxworks-x86-kernel.ads,\n+\tlibgnat/system-vxworks-x86-rtp-smp.ads,\n+\tlibgnat/system-vxworks-x86-rtp.ads,\n+\tlibgnat/system-vxworks7-aarch64-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-aarch64.ads,\n+\tlibgnat/system-vxworks7-arm-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-arm.ads,\n+\tlibgnat/system-vxworks7-e500-kernel.ads,\n+\tlibgnat/system-vxworks7-e500-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-e500-rtp.ads,\n+\tlibgnat/system-vxworks7-ppc-kernel.ads,\n+\tlibgnat/system-vxworks7-ppc-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-ppc-rtp.ads,\n+\tlibgnat/system-vxworks7-ppc64-kernel.ads,\n+\tlibgnat/system-vxworks7-ppc64-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-x86-kernel.ads,\n+\tlibgnat/system-vxworks7-x86-rtp-smp.ads,\n+\tlibgnat/system-vxworks7-x86-rtp.ads,\n+\tlibgnat/system-vxworks7-x86_64-kernel.ads,\n+\tlibgnat/system-vxworks7-x86_64-rtp-smp.ads: Remove\n+\tFrontend_Exceptions line.\n+\t* gcc-interface/decl.cc, gcc-interface/trans.cc\n+\t(gnat_to_gnu_entity, gnat_to_gnu_subprog_type, gigi,\n+\tgnat_to_gnu): Remove Front_End_SJLJ processing and always assume\n+\tBack_End_Exceptions.\n+\n+2022-05-12  Bob Duff  <duff@adacore.com>\n+\n+\t* namet.ads, namet.adb (Write_Name_For_Debug): New more-robust\n+\tversion of Write_Name.\n+\t(Destroy_Global_Name_Buffer): New procedure to help detect bugs\n+\trelated to use of Global_Name_Buffer.  Misc cleanup and comment\n+\timprovements. E.g. we don't need to document every detail of\n+\tdebugging printouts, especially since they can change.\n+\t* uname.ads, uname.adb (Write_Unit_Name_For_Debug): New\n+\tmore-robust version of Write_Unit_Name.\n+\t(Get_Unit_Name_String): Pass buffer in, instead of using the\n+\tglobal variable. Misc cleanup. Remove the \"special fudge\", which\n+\tis apparently not needed, and anyway the comment \"the %s or %b\n+\thas already been eliminated\" seems wrong.\n+\t(Write_Unit_Name): Call the new version of Get_Unit_Name_String.\n+\t* errout.adb (Set_Msg_Insertion_Unit_Name): Call the new version\n+\tof Get_Unit_Name_String. We pass the global variable here,\n+\tbecause it's too much trouble to disentangle such uses in\n+\tErrout.\n+\t* sem_util.ads, sem_util.adb, sem_dist.adb\n+\t(Get_Library_Unit_Name): New version of\n+\tGet_Library_Unit_Name_String that avoids usage of the global\n+\tvariable.\n+\t* casing.ads, casing.adb, exp_prag.adb, exp_util.adb\n+\t(Set_All_Upper_Case): Remove. There is no need for a wrapper\n+\there -- code is clearer without it.\n+\t* treepr.adb (Print_Name): Call Write_Name_For_Debug, which\n+\tdeals with No_Name (etc), rather than duplicating that here.\n+\tNote that the call to Get_Name_String was superfluous.\n+\t(Tree_Dump): Call Write_Unit_Name_For_Debug instead of\n+\tWrite_Unit_Name, which crashes if not Is_Valid_Name.\n+\t* erroutc.ads: Improve comments.\n+\t* erroutc.adb (Set_Msg_Name_Buffer): Call\n+\tDestroy_Global_Name_Buffer to detect potential bugs where it\n+\tincorrectly looks at the global variable.\n+\t* sinput.adb (Write_Location): Call Write_Name_For_Debug instead\n+\tof Write_Name, so it won't blow up on invalid data.\n+\t* sinput.ads: Improve comments; remove some verbosity.\n+\t* libgnat/s-imagef.adb: Fix typo in comment.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imageu.adb (Set_Image_Unsigned): Add lemma.\n+\t* libgnat/s-valueu.adb (Scan_Raw_Unsigned): Add assertion.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-aridou.ads: Remove use-clause, add renames and\n+\tsubtypes.\n+\t* libgnat/s-exponn.ads: Same.\n+\t* libgnat/s-expont.ads: Same.\n+\t* libgnat/s-widthu.ads: Same.\n+\n+2022-05-12  Etienne Servais  <servais@adacore.com>\n+\n+\t* csets.adb (Fold_Latin_9): Fix y with diaeresis.\n+\t(Fold_IBM_PC_850): Fix o with stroke.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_type.adb (Valid_Boolean_Arg): Remove redundant guard.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_type.adb (Valid_Boolean_Arg): Operands of Raise_Type are\n+\tvalid boolean arguments.\n+\n+2022-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Possible_Type_For_Conditional_Expression): Add\n+\ttest for subtype conformance in the cases of\n+\taccess-to-subprogram types.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imagef.adb: Justify false message from CodePeer.\n+\n+2022-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Case_Expression): Rewrite.\n+\t(Analyze_If_Expression): Likewise.\n+\t(Possible_Type_For_Conditional_Expression): New function.\n+\t* sem_type.adb (Specific_Type): Retur the base type in more\n+\tcases.\n+\n+2022-05-12  Yannick Moy  <moy@adacore.com>\n+\n+\t* libgnat/s-imagef.adb: Adapt to new signature of Image_I, by\n+\tproviding ghost imported subprograms. For now, no contract is\n+\tused on these subprograms, as System.Image_F is not proved.\n+\t* libgnat/s-imagef.ads: Add modular type Uns as formal\n+\tparameter, to use in defining Int_Params for instantiating\n+\tImage_I.\n+\t* libgnat/s-imagei.adb: Add contracts and ghost code.\n+\t* libgnat/s-imagei.ads: Replace Int formal parameter by package\n+\tInt_Params, which bundles type Int and Uns with ghost\n+\tsubprograms.  Add contracts.\n+\t* libgnat/s-imfi128.ads: Adapt to new formal of Image_F.\n+\t* libgnat/s-imfi32.ads: Adapt to new formal of Image_F.\n+\t* libgnat/s-imfi64.ads: Adapt to new formal of Image_F.\n+\t* libgnat/s-imgint.ads: Adapt to new formals of Image_I.\n+\t* libgnat/s-imglli.ads: Adapt to new formals of Image_I.\n+\t* libgnat/s-imgllli.ads: Adapt to new formals of Image_I.\n+\t* libgnat/s-valint.ads: Adapt to new formals of Value_I.\n+\t* libgnat/s-vallli.ads: Adapt to new formals of Value_I.\n+\t* libgnat/s-valllli.ads: Adapt to new formals of Value_I.\n+\t* libgnat/s-valuei.adb (Prove_Scan_Only_Decimal_Ghost): New\n+\tghost lemma.\n+\t* libgnat/s-valuei.ads: New formal parameters to prove the new\n+\tlemma.\n+\t* libgnat/s-valuti.ads (Int_Params): Define a generic package to\n+\tbe used as a trait-like formal parameter in Image_I and other\n+\tgenerics that need to instantiate Image_I.\n+\t* libgnat/s-widthu.ads (Big_10): Qualify the 10 literal.\n+\n+2022-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Find_Arithmetic_Types): Use local variables.\n+\t(Find_Boolean_Types): Rewrite modeled on Find_Arithmetic_Types.\n+\n+2022-05-12  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* doc/gnat_rm/security_hardening_features.rst (Hardened\n+\tBooleans): New.\n+\t* exp_util.adb (Adjust_Condition): Perform validity checking on\n+\thardbool-annotated types even with -gnatVT.\n+\t* gnat_rm.texi: Regenerate.\n+\t* gcc-interface/utils.cc (gnat_internal_attribute_table): Ignore\n+\thardbool.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch9.adb (Build_Protected_Entry): Set scope of the nested\n+\tblock to spec and not the body of the procedure created for a\n+\tprotected entry.\n+\n+2022-05-12  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_ch3.adb (Find_Type_Of_Object): Remove duplicate \"i\" in\n+\tcomment.\n+\n+2022-05-12  Marc Poulhi\u00e8s  <poulhies@adacore.com>\n+\n+\t* csets.adb (Initialize): Only treat square bracket as valid\n+\tidentifier character for Ada versions prior to Ada 2022.\n+\t* style.ads (Check_Left_Paren): Rename...\n+\t(Check_Left_Paren_Square_Bracket): ...to this.\n+\t* styleg.adb (Check_Left_Bracket): Rename...\n+\t(Check_Left_Paren_Square_Bracket): ...to this.\n+\t* styleg.ads (Check_Left_Paren): Rename...\n+\t(Check_Left_Paren_Square_Bracket): ...to this.\n+\t* scng.adb (Scan): Add check for spacing around left square\n+\tbracket and use new name for Check_Left_Paren_Square_Bracket.\n+\t* libgnat/a-szmzco.ads (Control_Ranges, Graphic_Ranges)\n+\t(Letter_Ranges, Decimal_Digit_Ranges, ISO_646_Ranges)\n+\t(Character_Ranges): Fix style (remove extra space).\n+\t* libgnat/a-swmwco.ads (Control_Ranges, Graphic_Ranges)\n+\t(Letter_Ranges, Decimal_Digit_Ranges, ISO_646_Ranges)\n+\t(Character_Ranges): Likewise.\n+\t* opt.adb (Set_Config_Switches): Remove [ from Identifier_Char\n+\tset.\n+\n+2022-05-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_type.adb (Specific_Type): Add swapped cases for interfaces.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst:\n+\t(Export_Object, Import_Object, Short_Descriptors): Fix pragma\n+\tsyntax specification.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* ali.adb (Hash): Reuse GNAT.String_Hash.Hash and don't pollute\n+\tthe Name_Id table.\n+\n+2022-05-12  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/the_gnat_compilation_model.rst (Configuration\n+\tPragmas): Add Aggregate_Individually_Assign; otherwise the list\n+\tis complete except for some obsoleted pragmas, which most likely\n+\tare intentionally omitted.\n+\t* gnat_ugn.texi: Regenerate.\n+\n 2022-05-11  Yannick Moy  <moy@adacore.com>\n \n \t* libgnat/s-imaged.ads: Remove Pure."}, {"sha": "31c817a2fa4a56b76cbe2b3a2444fcf46ea20388", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,9 @@\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (enum rid): Add RID_OMP_ALL_MEMORY.\n+\t* c-omp.cc (c_finish_omp_depobj): Don't build_fold_addr_expr\n+\tif null_pointer_node.\n+\n 2022-05-11  Martin Liska  <mliska@suse.cz>\n \n \tPR target/105355"}, {"sha": "6db1152d521e02b752e1af791d7d2eadea0359c6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,15 @@\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.cc (c_parse_init): Register omp_all_memory as keyword\n+\tif flag_openmp.\n+\t(c_parser_postfix_expression): Diagnose uses of omp_all_memory\n+\tin postfix expressions.\n+\t(c_parser_omp_variable_list): Handle omp_all_memory in depend\n+\tclause.\n+\t* c-typeck.cc (c_finish_omp_clauses): Handle omp_all_memory\n+\tkeyword in depend clause as null_pointer_node, diagnose invalid\n+\tuses.\n+\n 2022-05-09  Martin Liska  <mliska@suse.cz>\n \n \t* c-parser.cc (c_parser_conditional_expression): Use {,UN}LIKELY"}, {"sha": "3402904e750617090c961b693b89c7698664bf98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,29 @@\n+2022-05-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-tree.h (TMPL_ARGS_LEVEL): Assert LEVEL is 1 when\n+\tTMPL_ARGS_HAVE_MULTIPLE_LEVELS is false.\n+\t* pt.cc (try_class_unification): Correctly copy multidimensional\n+\ttargs.  Free the copy of targs.\n+\t(unify_pack_expansion): Fix level comparison.\n+\n+2022-05-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* parser.cc (cp_parser_linkage_specification): Implement\n+\tglobal module attachment semantics.\n+\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* lex.cc (init_reswords): Register omp_all_memory as keyword\n+\tif flag_openmp.\n+\t* parser.cc (cp_parser_primary_expression): Diagnose uses of\n+\tomp_all_memory in postfix expressions.\n+\t(cp_parser_omp_var_list_no_open): Handle omp_all_memory in depend\n+\tclause.\n+\t* semantics.cc (finish_omp_clauses): Handle omp_all_memory\n+\tkeyword in depend clause as null_pointer_node, diagnose invalid\n+\tuses.\n+\t* pt.cc (tsubst_omp_clause_decl): Pass through omp_all_memory.\n+\n 2022-05-11  Patrick Palka  <ppalka@redhat.com>\n \n \t* constraint.cc (tsubst_parameter_mapping): Convert loop over"}, {"sha": "262f3fc09830bcdded6ff7573805f9fa118215ac", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,36 @@\n+2022-05-12  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* g++.target/powerpc/pr101168.C: Require VSX.\n+\n+2022-05-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/105562\n+\t* g++.dg/warn/uninit-pr105562.C: New testcase.\n+\n+2022-05-12  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/lang-3_a.C: New.\n+\t* g++.dg/modules/lang-3_b.C: New.\n+\t* g++.dg/modules/lang-3_c.C: New.\n+\n+2022-05-12  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\tPR target/104371\n+\t* gcc.target/i386/pr104371-1.c: New test.\n+\t* gcc.target/i386/pr104371-2.c: Ditto.\n+\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/all-memory-1.c: New test.\n+\t* c-c++-common/gomp/all-memory-2.c: New test.\n+\t* c-c++-common/gomp/all-memory-3.c: New test.\n+\t* g++.dg/gomp/all-memory-1.C: New test.\n+\t* g++.dg/gomp/all-memory-2.C: New test.\n+\n+2022-05-12  jiawei  <jiawei@iscas.ac.cn>\n+\n+\t* c-c++-common/Wconversion-1.c: Update type.\n+\n 2022-05-11  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/105541"}, {"sha": "6d8baf20c19c931464166329b609b4ee664a8e23", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,50 @@\n+2022-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* Makefile.am (libgomp_la_LIBADD): Initialize.\n+\t* plugin/configfrag.ac (DL_LIBS): New.\n+\t(PLUGIN_GCN_LIBS): Remove.\n+\t(PLUGIN_NVPTX_LIBS): Don't set in the 'PLUGIN_NVPTX_DYNAMIC' case.\n+\t* plugin/Makefrag.am (libgomp_la_LIBADD)\n+\t(libgomp_plugin_gcn_la_LIBADD): Consider '$(DL_LIBS)'.\n+\t(libgomp_plugin_nvptx_la_LIBADD) <PLUGIN_NVPTX_DYNAMIC>: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n+2022-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/Makefrag.am: Handle 'PLUGIN_NVPTX_DYNAMIC'.\n+\t* plugin/configfrag.ac (PLUGIN_NVPTX_DYNAMIC): Change\n+\t'AC_DEFINE_UNQUOTED' into 'AM_CONDITIONAL'.\n+\t* plugin/plugin-nvptx.c: Split 'PLUGIN_NVPTX_DYNAMIC' into\n+\t'PLUGIN_NVPTX_INCLUDE_SYSTEM_CUDA_H' and\n+\t'PLUGIN_NVPTX_LINK_LIBCUDA'.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n+2022-05-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* plugin/configfrag.ac: Don't 'AC_SUBST' and 'AC_DEFINE_UNQUOTED'\n+\tfor 'PLUGIN_GCN', 'PLUGIN_NVPTX'.\n+\t* Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\t* testsuite/Makefile.in: Likewise.\n+\n+2022-05-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.h (struct gomp_task): Add depend_all_memory member.\n+\t* task.c (gomp_init_task): Initialize depend_all_memory.\n+\t(gomp_task_handle_depend): Handle omp_all_memory.\n+\t(gomp_task_run_post_handle_depend_hash): Clear\n+\tparent->depend_all_memory if equal to current task.\n+\t(gomp_task_maybe_wait_for_dependencies): Handle omp_all_memory.\n+\t* testsuite/libgomp.c-c++-common/depend-1.c: New test.\n+\t* testsuite/libgomp.c-c++-common/depend-2.c: New test.\n+\t* testsuite/libgomp.c-c++-common/depend-3.c: New test.\n+\n 2022-05-11  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* plugin/configfrag.ac: Remove '--with-hsa-runtime',"}, {"sha": "b20ba3e7580564ffa659da7291414268efcf9f08", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ace834ab15c1614a96a81005304eae0f2f525e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ace834ab15c1614a96a81005304eae0f2f525e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=49ace834ab15c1614a96a81005304eae0f2f525e", "patch": "@@ -1,3 +1,10 @@\n+2022-05-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* config/locale/dragonfly/numeric_members.cc: Remove whitespace.\n+\t* config/locale/gnu/numeric_members.cc: Likewise.\n+\t* include/bits/locale_facets_nonio.h: Likewise.\n+\t* libsupc++/typeinfo: Likewise.\n+\n 2022-05-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/105284"}]}