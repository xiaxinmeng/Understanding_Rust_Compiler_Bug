{"sha": "cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhMTIxYWM3YTUwZTUzZmFhNjFmMjgyZjZlZjIxYjU4ZmU4ZTdmZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-21T22:01:25Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-21T22:01:25Z"}, "message": "PR libstdc++/83328 add correct basic_string::insert for initializer_list\n\nThe SSO basic_string has a non-standard insert(iterator, initializer_list)\noverload, from a C++0x draft. This adds the correct overload, while also\npreserving the old one so that the old symbol is still exported from the\nlibrary.\n\nThe COW basic_string doesn't have any of the C++11 changes to the insert\noverloads (they all still have non-const iterator parameters and the\nones that should return an iterator still return void). This doesn't\nmake any change to the COW string.\n\n\tPR libstdc++/83328\n\t* acinclude.m4 (libtool_VERSION): Bump to 6:26:0.\n\t* config/abi/pre/gnu.ver: Add GLIBCXX_3.4.26 and export new symbol.\n\t* configure: Regenerate.\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::insert(const_iterator, initializer_list<C>)): Add.\n\t[_GLIBCXX_USE_CXX11_ABI && !_GLIBCXX_DEFINING_STRING_INSTANTIATIONS]\n\t(basic_string::insert(iterator, initializer_list<C>)): Suppress\n\tdefinition.\n\t* include/debug/string (basic_string::insert(iterator, C)): Change\n\tfirst parameter to const_iterator.\n\t(basic_string::insert(iterator, size_type, C)): Likewise. Change\n\treturn type to iterator.\n\t(basic_string::insert(iterator, InputIterator, InputIterator)):\n\tLikewise.\n\t(basic_string::insert(iterator, initializer_list<C>)): Change first\n\tparameter to const_iterator and return type to iterator.\n\t* src/c++11/string-inst.cc: Extend comment.\n\t* testsuite/21_strings/basic_string/modifiers/insert/char/83328.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/83328.cc:\n\tNew.\n\t* testsuite/util/testsuite_abi.cc: Add new symbol version.\n\nFrom-SVN: r261866", "tree": {"sha": "eca3dd7424fe9f58436af970b91afff468a6e0c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca3dd7424fe9f58436af970b91afff468a6e0c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cfd86209522dac51933a7d3c92135f392b16131", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cfd86209522dac51933a7d3c92135f392b16131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cfd86209522dac51933a7d3c92135f392b16131"}], "stats": {"total": 198, "additions": 181, "deletions": 17}, "files": [{"sha": "d4f27cd09b6141fc2db6c636756ef6fd2d5b0cb5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -1,5 +1,29 @@\n 2018-06-21  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/83328\n+\t* acinclude.m4 (libtool_VERSION): Bump to 6:26:0.\n+\t* config/abi/pre/gnu.ver: Add GLIBCXX_3.4.26 and export new symbol.\n+\t* configure: Regenerate.\n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::insert(const_iterator, initializer_list<C>)): Add.\n+\t[_GLIBCXX_USE_CXX11_ABI && !_GLIBCXX_DEFINING_STRING_INSTANTIATIONS]\n+\t(basic_string::insert(iterator, initializer_list<C>)): Suppress\n+\tdefinition.\n+\t* include/debug/string (basic_string::insert(iterator, C)): Change\n+\tfirst parameter to const_iterator.\n+\t(basic_string::insert(iterator, size_type, C)): Likewise. Change\n+\treturn type to iterator.\n+\t(basic_string::insert(iterator, InputIterator, InputIterator)):\n+\tLikewise.\n+\t(basic_string::insert(iterator, initializer_list<C>)): Change first\n+\tparameter to const_iterator and return type to iterator.\n+\t* src/c++11/string-inst.cc: Extend comment.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/char/83328.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/modifiers/insert/wchar_t/83328.cc:\n+\tNew.\n+\t* testsuite/util/testsuite_abi.cc: Add new symbol version.\n+\n \t* config/abi/post/x86_64-linux-gnu/baseline_symbols.txt: Update.\n \n \tPR libstdc++/70940"}, {"sha": "cf5add167e6bd6fbe3b3d3648c93790c93e87434", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -3749,7 +3749,7 @@ changequote([,])dnl\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:25:0\n+libtool_VERSION=6:26:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "b59b9a0ff1f1cb3dfa2f993f81d0cea1807218a5", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -1703,7 +1703,34 @@ GLIBCXX_3.4.21 {\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE13*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE14_M_replace_aux*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE1[5-9]*;\n-    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[2-9]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE2at*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE3end*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4back*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4nposE;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4rend*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE4swap*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE5begin*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE5clear*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE5erase*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE5front*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6append*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6assign*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertI*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEmPK[cw];\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEmPK[cw]m;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEmRKS4_;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEmRKS4_mm;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEmm[cw];\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEN9__gnu_cxx17__normal_iteratorIP[cw]*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEN9__gnu_cxx17__normal_iteratorIPK[cw]S4_EE[cw];\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEN9__gnu_cxx17__normal_iteratorIPK[cw]S4_EEm[cw];\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6rbegin*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6resize*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7replace*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE7reserve*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE8pop_back*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE9push_back*;\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE[7-9]_[MS]_*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EPK*;\n     _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS[34]_;\n@@ -1982,6 +2009,13 @@ GLIBCXX_3.4.25 {\n \n } GLIBCXX_3.4.24;\n \n+GLIBCXX_3.4.26 {\n+\n+    # std::basic_string::insert(const_iterator, initializer_list)\n+    _ZNSt7__cxx1112basic_stringI[cw]St11char_traitsI[cw]ESaI[cw]EE6insertEN9__gnu_cxx17__normal_iteratorIPK[cw]S4_EESt16initializer_listI[cw]E;\n+\n+} GLIBCXX_3.4.25;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "d126addd40a1156b894bf49b496e18fab37824d0", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -79187,7 +79187,7 @@ $as_echo \"$as_me: WARNING: === Symbol versioning will be disabled.\" >&2;}\n fi\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:25:0\n+libtool_VERSION=6:26:0\n \n # Everything parsed; figure out what files and settings to use.\n case $enable_symvers in"}, {"sha": "a77074da249c4e7f80e924bda870f1f54890843e", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -1598,12 +1598,19 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n        *  @param __l  The initializer_list of characters to insert.\n        *  @throw  std::length_error  If new length exceeds @c max_size().\n        */\n+      iterator\n+      insert(const_iterator __p, initializer_list<_CharT> __l)\n+      { return this->insert(__p, __l.begin(), __l.end()); }\n+\n+#ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS\n+      // See PR libstdc++/83328\n       void\n       insert(iterator __p, initializer_list<_CharT> __l)\n       {\n \t_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());\n \tthis->insert(__p - begin(), __l.begin(), __l.size());\n       }\n+#endif\n #endif // C++11\n \n       /**"}, {"sha": "aa611b2d4a9b7c5bd6076b15b7b76d57feb497e1", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -544,45 +544,48 @@ template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n     }\n \n     iterator\n-    insert(iterator __p, _CharT __c)\n+    insert(const_iterator __p, _CharT __c)\n     {\n       __glibcxx_check_insert(__p);\n       typename _Base::iterator __res = _Base::insert(__p.base(), __c);\n       this->_M_invalidate_all();\n       return iterator(__res, this);\n     }\n \n-    void\n-    insert(iterator __p, size_type __n, _CharT __c)\n+    iterator\n+    insert(const_iterator __p, size_type __n, _CharT __c)\n     {\n       __glibcxx_check_insert(__p);\n-      _Base::insert(__p.base(), __n, __c);\n+      typename _Base::iterator __res = _Base::insert(__p.base(), __n, __c);\n       this->_M_invalidate_all();\n+      return iterator(__res, this);\n     }\n \n     template<typename _InputIterator>\n-      void\n-      insert(iterator __p, _InputIterator __first, _InputIterator __last)\n+      iterator\n+      insert(const_iterator __p, _InputIterator __first, _InputIterator __last)\n       {\n \ttypename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n \t__glibcxx_check_insert_range2(__p, __first, __last, __dist);\n \n+\ttypename _Base::iterator __res;\n \tif (__dist.second >= __dp_sign)\n-\t  _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n-\t\t\t\t    __gnu_debug::__unsafe(__last));\n+\t  __res = _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n+\t\t\t\t__gnu_debug::__unsafe(__last));\n \telse\n-\t  _Base::insert(__p.base(), __first, __last);\n-\n+\t  __res = _Base::insert(__p.base(), __first, __last);\n \tthis->_M_invalidate_all();\n+\treturn iterator(__res, this);\n       }\n \n #if __cplusplus >= 201103L\n-    void\n-    insert(iterator __p, std::initializer_list<_CharT> __l)\n+    iterator\n+    insert(const_iterator __p, std::initializer_list<_CharT> __l)\n     {\n       __glibcxx_check_insert(__p);\n-      _Base::insert(__p.base(), __l);\n+      const auto __res = _Base::insert(__p.base(), __l);\n       this->_M_invalidate_all();\n+      return iterator(__res, this);\n     }\n #endif // C++11\n "}, {"sha": "1ea2f2f548f3ccc4dfe6bcec7fc58cfb4257039a", "filename": "libstdc++-v3/src/c++11/string-inst.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-inst.cc?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -39,6 +39,8 @@\n // basic_string(size_type, _CharT, const _Alloc&) constructors from being\n // replaced by constrained function templates, so that we instantiate the\n // pre-C++17 definitions.\n+// This also causes the instantiation of the non-standard C++0x-era\n+// insert(iterator, initializer_list<C>) overload, see PR libstdc++/83328\n #define _GLIBCXX_DEFINING_STRING_INSTANTIATIONS 1\n \n #include <string>"}, {"sha": "0480ce74531c2b6bbf91b72d8841c0fc7aa2ee1d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/char/83328.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fchar%2F83328.cc?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+// PR libstdc++/83328\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::string s = \"insert\";\n+  auto iter = s.insert(s.cbegin() + 2, std::initializer_list<char>{});\n+  VERIFY( iter == s.begin() + 2 );\n+\n+  iter = s.insert(s.cend(), { 'e', 'd' });\n+  std::string::iterator* check_type = &iter;\n+  VERIFY( iter == s.cend() - 2 );\n+  VERIFY( s == \"inserted\" );\n+\n+  iter = s.insert(s.begin() + 6, { ' ', 'r', 'e', 't', 'r', 'i' });\n+  VERIFY( iter == s.begin() + 6 );\n+  VERIFY( s == \"insert retried\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "af4e29103be143170223b2f5cb54b628af4b321c", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/modifiers/insert/wchar_t/83328.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F83328.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F83328.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Fmodifiers%2Finsert%2Fwchar_t%2F83328.cc?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+// PR libstdc++/83328\n+\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wstring s = L\"insert\";\n+  auto iter = s.insert(s.cbegin() + 2, std::initializer_list<wchar_t>{});\n+  VERIFY( iter == s.begin() + 2 );\n+\n+  iter = s.insert(s.cend(), { L'e', L'd' });\n+  std::wstring::iterator* check_type = &iter;\n+  VERIFY( iter == s.cend() - 2 );\n+  VERIFY( s == L\"inserted\" );\n+\n+  iter = s.insert(s.begin() + 6, { L' ', L'r', L'e', L't', L'r', L'i' });\n+  VERIFY( iter == s.begin() + 6 );\n+  VERIFY( s == L\"insert retried\" );\n+\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "c9aaf74133f608461d709d5847a9ad6e1cff5122", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda121ac7a50e53faa61f282f6ef21b58fe8e7fd/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=cda121ac7a50e53faa61f282f6ef21b58fe8e7fd", "patch": "@@ -206,6 +206,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.23\");\n       known_versions.push_back(\"GLIBCXX_3.4.24\");\n       known_versions.push_back(\"GLIBCXX_3.4.25\");\n+      known_versions.push_back(\"GLIBCXX_3.4.26\");\n       known_versions.push_back(\"CXXABI_1.3\");\n       known_versions.push_back(\"CXXABI_LDBL_1.3\");\n       known_versions.push_back(\"CXXABI_1.3.1\");\n@@ -236,7 +237,7 @@ check_version(symbol& test, bool added)\n \ttest.version_status = symbol::incompatible;\n \n       // Check that added symbols are added in the latest pre-release version.\n-      bool latestp = (test.version_name == \"GLIBCXX_3.4.25\"\n+      bool latestp = (test.version_name == \"GLIBCXX_3.4.26\"\n \t\t     || test.version_name == \"CXXABI_1.3.11\"\n \t\t     || test.version_name == \"CXXABI_FLOAT128\"\n \t\t     || test.version_name == \"CXXABI_TM_1\");"}]}