{"sha": "0cc5ae8d62ce64803914496b45b817f27813cff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNjNWFlOGQ2MmNlNjQ4MDM5MTQ0OTZiNDViODE3ZjI3ODEzY2ZmMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-03-17T02:36:08Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-03-17T02:36:08Z"}, "message": "DR 1518 PR c++/54835\n\n\tDR 1518\n\tPR c++/54835\n\t* call.c (convert_like_real): Check for explicit constructors\n\teven for value-initialization.\n\nFrom-SVN: r196732", "tree": {"sha": "94fd27a2297724703a28eb97885a0cee7748efea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94fd27a2297724703a28eb97885a0cee7748efea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cc5ae8d62ce64803914496b45b817f27813cff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc5ae8d62ce64803914496b45b817f27813cff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cc5ae8d62ce64803914496b45b817f27813cff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cc5ae8d62ce64803914496b45b817f27813cff2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb3c050e515c697b2b69991ce9c7a770e301ac92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c050e515c697b2b69991ce9c7a770e301ac92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3c050e515c697b2b69991ce9c7a770e301ac92"}], "stats": {"total": 33, "additions": 18, "deletions": 15}, "files": [{"sha": "70a71beddf0af5befefbf29d99f67d8cc603534c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0cc5ae8d62ce64803914496b45b817f27813cff2", "patch": "@@ -1,5 +1,10 @@\n 2013-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tDR 1518\n+\tPR c++/54835\n+\t* call.c (convert_like_real): Check for explicit constructors\n+\teven for value-initialization.\n+\n \tPR c++/54946\n \t* pt.c (convert_nontype_argument): Handle invalid pointer.\n "}, {"sha": "e40c45fb87181fb72435c406473110ec7cf92123", "filename": "gcc/cp/call.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=0cc5ae8d62ce64803914496b45b817f27813cff2", "patch": "@@ -5856,6 +5856,17 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \ttree convfn = cand->fn;\n \tunsigned i;\n \n+\t/* When converting from an init list we consider explicit\n+\t   constructors, but actually trying to call one is an error.  */\n+\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n+\t    /* Unless this is for direct-list-initialization.  */\n+\t    && !(BRACE_ENCLOSED_INITIALIZER_P (expr)\n+\t\t && CONSTRUCTOR_IS_DIRECT_INIT (expr)))\n+\t  {\n+\t    error (\"converting to %qT from initializer list would use \"\n+\t\t   \"explicit constructor %qD\", totype, convfn);\n+\t  }\n+\n \t/* If we're initializing from {}, it's value-initialization.  */\n \tif (BRACE_ENCLOSED_INITIALIZER_P (expr)\n \t    && CONSTRUCTOR_NELTS (expr) == 0\n@@ -5874,20 +5885,6 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \n \texpr = mark_rvalue_use (expr);\n \n-\t/* When converting from an init list we consider explicit\n-\t   constructors, but actually trying to call one is an error.  */\n-\tif (DECL_NONCONVERTING_P (convfn) && DECL_CONSTRUCTOR_P (convfn)\n-\t    /* Unless this is for direct-list-initialization.  */\n-\t    && !(BRACE_ENCLOSED_INITIALIZER_P (expr)\n-\t\t && CONSTRUCTOR_IS_DIRECT_INIT (expr))\n-\t    /* Unless we're calling it for value-initialization from an\n-\t       empty list, since that is handled separately in 8.5.4.  */\n-\t    && cand->num_convs > 0)\n-\t  {\n-\t    error (\"converting to %qT from initializer list would use \"\n-\t\t   \"explicit constructor %qD\", totype, convfn);\n-\t  }\n-\n \t/* Set user_conv_p on the argument conversions, so rvalue/base\n \t   handling knows not to allow any more UDCs.  */\n \tfor (i = 0; i < cand->num_convs; ++i)"}, {"sha": "8cf36be1ca1a223203e8a2de52aae1b662dd9591", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist40.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cc5ae8d62ce64803914496b45b817f27813cff2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist40.C?ref=0cc5ae8d62ce64803914496b45b817f27813cff2", "patch": "@@ -1,3 +1,4 @@\n+// PR c++/54835, DR 1518\n // { dg-options \"-std=c++0x\" }\n \n struct A\n@@ -7,6 +8,6 @@ struct A\n \n int main()\n {\n-  A a1 = { };\n+  A a1 = { };\t\t\t// { dg-error \"explicit\" }\n   A a2 = { 24 };\t\t// { dg-error \"explicit\" }\n }"}]}