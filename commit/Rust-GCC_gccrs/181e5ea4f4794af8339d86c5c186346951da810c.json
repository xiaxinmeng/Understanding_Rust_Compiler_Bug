{"sha": "181e5ea4f4794af8339d86c5c186346951da810c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgxZTVlYTRmNDc5NGFmODMzOWQ4NmM1YzE4NjM0Njk1MWRhODEwYw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2010-11-02T14:53:15Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-11-02T14:53:15Z"}, "message": "configure.ac: Remove elf_getshdrstrndx test.\n\n\t* configure.ac: Remove elf_getshdrstrndx test.  Don't substitute\n\tLTO_BINARY_READER or LTO_USE_LIBELF.  Remove LIBELFLIBS and\n\tLIBELFINC.  Remove HAVE_libelf.\n\t* config.gcc: Don't set lto_binary_reader.\n\t* Makefile.in (LIBELFLIBS, LIBELFINC): Remove variables.\n\t(LTO_BINARY_READER, LTO_USE_LIBELF): Remove variables.\n\t(LIBS): Remove $(LIBELFLIBS).\n\t(INCLUDES): Remove $(LIBELFINC).\n\t* configure: Rebuild.\n\t* config.in: Rebuild.\n\nFrom-SVN: r166189", "tree": {"sha": "5dd74ca20c7f0977e2a1fd71bf3c80e5ead08e8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd74ca20c7f0977e2a1fd71bf3c80e5ead08e8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/181e5ea4f4794af8339d86c5c186346951da810c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/181e5ea4f4794af8339d86c5c186346951da810c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/181e5ea4f4794af8339d86c5c186346951da810c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/181e5ea4f4794af8339d86c5c186346951da810c/comments", "author": null, "committer": null, "parents": [{"sha": "5239874d719f7bc6ba6615e3972c2e5f9187b63a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5239874d719f7bc6ba6615e3972c2e5f9187b63a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5239874d719f7bc6ba6615e3972c2e5f9187b63a"}], "stats": {"total": 176, "additions": 18, "deletions": 158}, "files": [{"sha": "8a258c484009448eab92b121344383325bdab409", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -1,3 +1,16 @@\n+2010-11-02  Ian Lance Taylor  <iant@google.com>\n+\n+\t* configure.ac: Remove elf_getshdrstrndx test.  Don't substitute\n+\tLTO_BINARY_READER or LTO_USE_LIBELF.  Remove LIBELFLIBS and\n+\tLIBELFINC.  Remove HAVE_libelf.\n+\t* config.gcc: Don't set lto_binary_reader.\n+\t* Makefile.in (LIBELFLIBS, LIBELFINC): Remove variables.\n+\t(LTO_BINARY_READER, LTO_USE_LIBELF): Remove variables.\n+\t(LIBS): Remove $(LIBELFLIBS).\n+\t(INCLUDES): Remove $(LIBELFINC).\n+\t* configure: Rebuild.\n+\t* config.in: Rebuild.\n+\n 2010-11-02  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/microblaze/microblaze-protos.h (function_arg): Delete."}, {"sha": "2e7b3d19dfc238ceccab4bbfb5bab474bfc18ef8", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -319,17 +319,9 @@ PPLINC = @PPLINC@\n CLOOGLIBS = @CLOOGLIBS@\n CLOOGINC = @CLOOGINC@\n \n-# How to find libelf\n-LIBELFLIBS = @LIBELFLIBS@\n-LIBELFINC = @LIBELFINC@\n-\n # Set to 'yes' if the LTO front end is enabled.\n enable_lto = @enable_lto@\n \n-# Set according to LTO object file format.\n-LTO_BINARY_READER = @LTO_BINARY_READER@\n-LTO_USE_LIBELF = @LTO_USE_LIBELF@\n-\n # Compiler and flags needed for plugin support\n ifneq ($(ENABLE_BUILD_WITH_CXX),yes)\n PLUGINCC = @CC@\n@@ -1034,7 +1026,7 @@ BUILD_LIBDEPS= $(BUILD_LIBIBERTY)\n LIBS = @LIBS@ $(CPPLIB) $(LIBINTL) $(LIBICONV) $(LIBIBERTY) $(LIBDECNUMBER) \\\n \t$(HOST_LIBS)\n BACKENDLIBS = $(CLOOGLIBS) $(PPLLIBS) $(GMPLIBS) $(PLUGINLIBS) $(HOST_LIBS) \\\n-\t$(ZLIB) $(LIBELFLIBS)\n+\t$(ZLIB)\n # Any system libraries needed just for GNAT.\n SYSLIBS = @GNAT_LIBEXC@\n \n@@ -1065,7 +1057,7 @@ BUILD_ERRORS = build/errors.o\n INCLUDES = -I. -I$(@D) -I$(srcdir) -I$(srcdir)/$(@D) \\\n \t   -I$(srcdir)/../include @INCINTL@ \\\n \t   $(CPPINC) $(GMPINC) $(DECNUMINC) \\\n-\t   $(PPLINC) $(CLOOGINC) $(LIBELFINC)\n+\t   $(PPLINC) $(CLOOGINC)\n \n .c.o:\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $< $(OUTPUT_OPTION)"}, {"sha": "9b8e0a4291180539ca8378b826256b3ca39b24f4", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -219,8 +219,6 @@ default_gnu_indirect_function=no\n target_gtfiles=\n need_64bit_hwint=\n need_64bit_isa=\n-# Selects the object file format reader/writer used by LTO.\n-lto_binary_reader=lto-elf\n \n # Don't carry these over build->host->target.  Please.\n xm_file=\n@@ -1160,13 +1158,11 @@ i[34567]86-*-darwin*)\n \t# support.\n \twith_cpu=${with_cpu:-generic}\n \ttmake_file=\"${tmake_file} t-slibgcc-darwin i386/t-crtpc i386/t-crtfm\"\n-\tlto_binary_reader=lto-macho\n \t;;\n x86_64-*-darwin*)\n \twith_cpu=${with_cpu:-generic}\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin64 t-slibgcc-darwin i386/t-crtpc i386/t-crtfm\"\n \ttm_file=\"${tm_file} ${cpu_type}/darwin64.h\"\n-\tlto_binary_reader=lto-macho\n \t;;\n i[34567]86-*-elf*)\n \ttm_file=\"${tm_file} i386/unix.h i386/att.h dbxelf.h elfos.h newlib-stdint.h i386/i386elf.h\"\n@@ -1421,7 +1417,6 @@ i[34567]86-*-pe | i[34567]86-*-cygwin*)\n \t\tthread_file='posix'\n \tfi\n \tuse_gcc_stdint=wrap\n-\tlto_binary_reader=lto-coff\n \t;;\n i[34567]86-*-mingw* | x86_64-*-mingw*)\n \ttm_file=\"${tm_file} i386/unix.h i386/bsd.h i386/gas.h dbxcoff.h i386/cygming.h i386/mingw32.h\"\n@@ -1494,7 +1489,6 @@ i[34567]86-*-mingw* | x86_64-*-mingw*)\n \tcxx_target_objs=\"${cxx_target_objs} winnt-cxx.o msformat-c.o\"\n \tdefault_use_cxa_atexit=yes\n \tuse_gcc_stdint=wrap\n-\tlto_binary_reader=lto-coff\n \tcase ${enable_threads} in\n \t  \"\" | yes | win32)\t  thread_file='win32'\n \t  tmake_file=\"${tmake_file} i386/t-gthr-win32\"\n@@ -2006,15 +2000,13 @@ powerpc-*-darwin*)\n \t    ;;\n \tesac\n \ttmake_file=\"${tmake_file} t-slibgcc-darwin\"\n-\tlto_binary_reader=lto-macho\n \textra_headers=altivec.h\n \t;;\n powerpc64-*-darwin*)\n \textra_options=\"${extra_options} ${cpu_type}/darwin.opt\"\n \textra_parts=\"crt2.o\"\n \ttmake_file=\"${tmake_file} ${cpu_type}/t-darwin64 t-slibgcc-darwin\"\n \ttm_file=\"${tm_file} ${cpu_type}/darwin8.h ${cpu_type}/darwin64.h\"\n-\tlto_binary_reader=lto-macho\n \textra_headers=altivec.h\n \t;;\n powerpc*-*-freebsd*)"}, {"sha": "6e3d03fb088a234f20b38f04239694b97d6de7a4", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -826,24 +826,6 @@\n #endif\n \n \n-/* Define to 1 if you have the `elf_getshdrstrndx' function. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_ELF_GETSHDRSTRNDX\n-#endif\n-\n-\n-/* Define to 1 if you have the `elf_getshstrndx' function. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_ELF_GETSHSTRNDX\n-#endif\n-\n-\n-/* Define if elf_getshstrndx has gABI conformant return values. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_ELF_GETSHSTRNDX_GABI\n-#endif\n-\n-\n /* Define to 1 if you have the <fcntl.h> header file. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_FCNTL_H\n@@ -1522,12 +1504,6 @@\n #endif\n \n \n-/* Define if libelf is in use. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_libelf\n-#endif\n-\n-\n /* Define as const if the declaration of iconv() needs const. */\n #ifndef USED_FOR_TARGET\n #undef ICONV_CONST"}, {"sha": "da157e09f74606b28941dadffcc223805a224228", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 83, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -602,8 +602,6 @@ ac_subst_vars='LTLIBOBJS\n LIBOBJS\n enable_plugin\n pluginlibs\n-LIBELFINC\n-LIBELFLIBS\n CLOOGINC\n CLOOGLIBS\n PPLINC\n@@ -672,8 +670,6 @@ subdirs\n slibdir\n dollar\n gcc_tooldir\n-LTO_USE_LIBELF\n-LTO_BINARY_READER\n enable_lto\n MAINT\n zlibinc\n@@ -933,9 +929,7 @@ GMPINC\n PPLLIBS\n PPLINC\n CLOOGLIBS\n-CLOOGINC\n-LIBELFLIBS\n-LIBELFINC'\n+CLOOGINC'\n \n \n # Initialize some variables set by options.\n@@ -1681,8 +1675,6 @@ Some influential environment variables:\n   PPLINC      How to find PPL include files\n   CLOOGLIBS   How to link CLOOG\n   CLOOGINC    How to find CLOOG include files\n-  LIBELFLIBS  How to link libelf\n-  LIBELFINC   How to find libelf include files\n \n Use these variables to override the choices made by `configure' or to help\n it to find libraries and programs with nonstandard names/locations.\n@@ -8431,59 +8423,6 @@ fi\n done\n \n \n-save_CPPFLAGS=\"$CPPFLAGS\"\n-save_LIBS=\"$LIBS\"\n-LIBS=\"$LIBS $LIBELFLIBS\"\n-for ac_func in elf_getshdrstrndx\n-do :\n-  ac_fn_c_check_func \"$LINENO\" \"elf_getshdrstrndx\" \"ac_cv_func_elf_getshdrstrndx\"\n-if test \"x$ac_cv_func_elf_getshdrstrndx\" = x\"\"yes; then :\n-  cat >>confdefs.h <<_ACEOF\n-#define HAVE_ELF_GETSHDRSTRNDX 1\n-_ACEOF\n-\n-else\n-  for ac_func in elf_getshstrndx\n-do :\n-  ac_fn_c_check_func \"$LINENO\" \"elf_getshstrndx\" \"ac_cv_func_elf_getshstrndx\"\n-if test \"x$ac_cv_func_elf_getshstrndx\" = x\"\"yes; then :\n-  cat >>confdefs.h <<_ACEOF\n-#define HAVE_ELF_GETSHSTRNDX 1\n-_ACEOF\n- if test \"$cross_compiling\" = yes; then :\n-  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n-$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n-as_fn_error \"cannot run test program while cross compiling\n-See \\`config.log' for more details.\" \"$LINENO\" 5; }\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <stdlib.h>\n-#include <libelf.h>\n-int main()\n-{\n-  return elf_getshstrndx (NULL, 0) == 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_run \"$LINENO\"; then :\n-\n-$as_echo \"#define HAVE_ELF_GETSHSTRNDX_GABI 1\" >>confdefs.h\n-\n-fi\n-rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n-  conftest.$ac_objext conftest.beam conftest.$ac_ext\n-fi\n-\n-fi\n-done\n-\n-\n-fi\n-done\n-\n-LIBS=\"$save_LIBS\"\n-CPPFLAGS=\"$save_CPPFLAGS\"\n-\n if test x$ac_cv_func_mbstowcs = xyes; then\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether mbstowcs works\" >&5\n $as_echo_n \"checking whether mbstowcs works... \" >&6; }\n@@ -17143,7 +17082,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17146 \"configure\"\n+#line 17085 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17249,7 +17188,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17252 \"configure\"\n+#line 17191 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -25498,17 +25437,6 @@ $as_echo \"#define ENABLE_LTO 1\" >>confdefs.h\n \n \t\t    enable_lto=yes\n \n-\t\t    # LTO needs to speak the platform's object file format, and has a\n-\t\t    # number of implementations of the required binary file access APIs.\n-\t\t    # ELF is the most common, and default.  We only link libelf if ELF\n-\t\t    # is indeed the selected format.\n-\t\t    LTO_BINARY_READER=${lto_binary_reader}\n-\t\t    LTO_USE_LIBELF=-lelf\n-\t\t    if test \"x$lto_binary_reader\" != \"xlto-elf\" ; then\n-\t\t      LTO_USE_LIBELF=\n-\t\t    fi\n-\n-\n \t\t    ;;\n \t\t*) ;;\n \tesac\n@@ -25688,14 +25616,6 @@ $as_echo \"#define HAVE_cloog 1\" >>confdefs.h\n \n fi\n \n-\n-\n-if test \"x${LIBELFLIBS}\" != \"x\" ; then\n-\n-$as_echo \"#define HAVE_libelf 1\" >>confdefs.h\n-\n-fi\n-\n # Check for plugin support\n # Check whether --enable-plugin was given.\n if test \"${enable_plugin+set}\" = set; then :"}, {"sha": "966dbd38bc15c6fa0ed95fd7afb5043f94e3bd7c", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/181e5ea4f4794af8339d86c5c186346951da810c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=181e5ea4f4794af8339d86c5c186346951da810c", "patch": "@@ -975,22 +975,6 @@ AC_CHECK_FUNCS(times clock kill getrlimit setrlimit atoll atoq \\\n \tgettimeofday mbstowcs wcswidth mmap mincore setlocale \\\n \tgcc_UNLOCKED_FUNCS)\n \n-save_CPPFLAGS=\"$CPPFLAGS\"\n-save_LIBS=\"$LIBS\"\n-LIBS=\"$LIBS $LIBELFLIBS\"\n-AC_CHECK_FUNCS(elf_getshdrstrndx,,\n-  [AC_CHECK_FUNCS(elf_getshstrndx,\n-    [AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdlib.h>\n-#include <libelf.h>\n-int main()\n-{\n-  return elf_getshstrndx (NULL, 0) == 0;\n-}]])], AC_DEFINE(HAVE_ELF_GETSHSTRNDX_GABI, 1,\n-        [Define if elf_getshstrndx has gABI conformant return values.]))])]\n-  )\n-LIBS=\"$save_LIBS\"\n-CPPFLAGS=\"$save_CPPFLAGS\"\n-\n if test x$ac_cv_func_mbstowcs = xyes; then\n   AC_CACHE_CHECK(whether mbstowcs works, gcc_cv_func_mbstowcs_works,\n [    AC_RUN_IFELSE([AC_LANG_SOURCE([[#include <stdlib.h>\n@@ -4461,17 +4445,6 @@ changequote([,])dnl\n \t\t    AC_DEFINE(ENABLE_LTO, 1, [Define to enable LTO support.])\n \t\t    enable_lto=yes\n \t\t    AC_SUBST(enable_lto)\n-\t\t    # LTO needs to speak the platform's object file format, and has a\n-\t\t    # number of implementations of the required binary file access APIs.\n-\t\t    # ELF is the most common, and default.  We only link libelf if ELF\n-\t\t    # is indeed the selected format.\n-\t\t    LTO_BINARY_READER=${lto_binary_reader}\n-\t\t    LTO_USE_LIBELF=-lelf\n-\t\t    if test \"x$lto_binary_reader\" != \"xlto-elf\" ; then\n-\t\t      LTO_USE_LIBELF=\n-\t\t    fi\n-\t\t    AC_SUBST(LTO_BINARY_READER)\n-\t\t    AC_SUBST(LTO_USE_LIBELF)\n \t\t    ;;\n \t\t*) ;;\n \tesac\n@@ -4644,12 +4617,6 @@ if test \"x${CLOOGLIBS}\" != \"x\" ; then\n    AC_DEFINE(HAVE_cloog, 1, [Define if cloog is in use.])\n fi\n \n-AC_ARG_VAR(LIBELFLIBS,[How to link libelf])\n-AC_ARG_VAR(LIBELFINC,[How to find libelf include files])\n-if test \"x${LIBELFLIBS}\" != \"x\" ; then \n-   AC_DEFINE(HAVE_libelf, 1, [Define if libelf is in use.])\n-fi\n-\n # Check for plugin support\n AC_ARG_ENABLE(plugin,\n [  --enable-plugin         enable plugin support],"}]}