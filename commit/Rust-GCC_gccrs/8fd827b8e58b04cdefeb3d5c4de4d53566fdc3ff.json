{"sha": "8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkODI3YjhlNThiMDRjZGVmZWIzZDVjNGRlNGQ1MzU2NmZkYzNmZg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2015-04-09T19:40:09Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2015-04-09T19:40:09Z"}, "message": "re PR target/65710 (Thumb1 ICE caused by no register to spill)\n\n2015-04-09  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/65710\n\t* lra-int.h (lra_bad_spill_regno_start): New.\n\t* lra.c (lra_bad_spill_regno_start): New.\n\t(lra): Set up lra_bad_spill_regno_start.  Set up\n\tlra_constraint_new_regno_start unconditionally.\n\t* lra-assigns.c (spill_for): Use lra_bad_spill_regno_start for\n\tspill preferences.\n\nFrom-SVN: r221956", "tree": {"sha": "9684a6d40e6a42b869a0f236d04ab6c6882b0ca8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9684a6d40e6a42b869a0f236d04ab6c6882b0ca8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf1b77dd092bb694be6fb0b1fcc369327db6143f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1b77dd092bb694be6fb0b1fcc369327db6143f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1b77dd092bb694be6fb0b1fcc369327db6143f"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "17fe5a153e29406fc0d092e2758d17b2151d71d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "patch": "@@ -1,3 +1,13 @@\n+2015-04-09  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/65710\n+\t* lra-int.h (lra_bad_spill_regno_start): New.\n+\t* lra.c (lra_bad_spill_regno_start): New.\n+\t(lra): Set up lra_bad_spill_regno_start.  Set up\n+\tlra_constraint_new_regno_start unconditionally.\n+\t* lra-assigns.c (spill_for): Use lra_bad_spill_regno_start for\n+\tspill preferences.\n+\n 2015-04-09  Marek Polacek  <polacek@redhat.com>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a74d8abc3abf5b4b9e20c3d3b651248445c4ba88", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "patch": "@@ -910,6 +910,7 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n   enum reg_class rclass;\n   unsigned int spill_regno, reload_regno, uid;\n   int insn_pseudos_num, best_insn_pseudos_num;\n+  int bad_spills_num, smallest_bad_spills_num;\n   lra_live_range_t r;\n   bitmap_iterator bi;\n \n@@ -928,6 +929,7 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n   best_hard_regno = -1;\n   best_cost = INT_MAX;\n   best_insn_pseudos_num = INT_MAX;\n+  smallest_bad_spills_num = INT_MAX;\n   rclass_size = ira_class_hard_regs_num[rclass];\n   mode = PSEUDO_REGNO_MODE (regno);\n   /* Invalidate try_hard_reg_pseudos elements.  */\n@@ -958,13 +960,16 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n \t\t&& ! bitmap_bit_p (&lra_optional_reload_pseudos, spill_regno)))\n \t  goto fail;\n       insn_pseudos_num = 0;\n+      bad_spills_num = 0;\n       if (lra_dump_file != NULL)\n \tfprintf (lra_dump_file, \"\t Trying %d:\", hard_regno);\n       sparseset_clear (live_range_reload_inheritance_pseudos);\n       EXECUTE_IF_SET_IN_BITMAP (&spill_pseudos_bitmap, 0, spill_regno, bi)\n \t{\n \t  if (bitmap_bit_p (&insn_conflict_pseudos, spill_regno))\n \t    insn_pseudos_num++;\n+\t  if (spill_regno >= (unsigned int) lra_bad_spill_regno_start)\n+\t    bad_spills_num++;\n \t  for (r = lra_reg_info[spill_regno].live_ranges;\n \t       r != NULL;\n \t       r = r->next)\n@@ -1035,7 +1040,9 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n \t    }\n \t  if (best_insn_pseudos_num > insn_pseudos_num\n \t      || (best_insn_pseudos_num == insn_pseudos_num\n-\t\t  && best_cost > cost))\n+\t\t  && (bad_spills_num < smallest_bad_spills_num\n+\t\t      || (bad_spills_num == smallest_bad_spills_num\n+\t\t\t  && best_cost > cost))))\n \t    {\n \t      best_insn_pseudos_num = insn_pseudos_num;\n \t      best_cost = cost;"}, {"sha": "12923ee216a792bdb944266abdf13c77e1b44291", "filename": "gcc/lra-int.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "patch": "@@ -333,6 +333,7 @@ extern void lra_register_new_scratch_op (rtx_insn *, int);\n \n extern int lra_new_regno_start;\n extern int lra_constraint_new_regno_start;\n+extern int lra_bad_spill_regno_start;\n extern bitmap_head lra_inheritance_pseudos;\n extern bitmap_head lra_split_regs;\n extern bitmap_head lra_subreg_reload_pseudos;"}, {"sha": "f4d7a3c071fb0c784cd22a957817d216bf015a71", "filename": "gcc/lra.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=8fd827b8e58b04cdefeb3d5c4de4d53566fdc3ff", "patch": "@@ -2180,6 +2180,10 @@ int lra_new_regno_start;\n /* Start of reload pseudo regnos before the new spill pass.  */\n int lra_constraint_new_regno_start;\n \n+/* Avoid spilling pseudos with regno more than the following value if\n+   it is possible.  */\n+int lra_bad_spill_regno_start;\n+\n /* Inheritance pseudo regnos before the new spill pass.\t */\n bitmap_head lra_inheritance_pseudos;\n \n@@ -2269,6 +2273,7 @@ lra (FILE *f)\n      permit changing reg classes for pseudos created by this\n      simplification.  */\n   lra_constraint_new_regno_start = lra_new_regno_start = max_reg_num ();\n+  lra_bad_spill_regno_start = INT_MAX;\n   remove_scratches ();\n   scratch_p = lra_constraint_new_regno_start != max_reg_num ();\n \n@@ -2406,12 +2411,14 @@ lra (FILE *f)\n       /* Assignment of stack slots changes elimination offsets for\n \t some eliminations.  So update the offsets here.  */\n       lra_eliminate (false, false);\n-      /* After switching off inheritance and rematerialization passes,\n-\t don't forget reload pseudos after spilling sub-pass to avoid\n-\t LRA cycling in some complicated cases.  */\n-      if (lra_inheritance_iter <= LRA_MAX_INHERITANCE_PASSES\n-\t  || lra_rematerialization_iter <= LRA_MAX_REMATERIALIZATION_PASSES)\n-\tlra_constraint_new_regno_start = max_reg_num ();\n+      lra_constraint_new_regno_start = max_reg_num ();\n+      if (lra_bad_spill_regno_start == INT_MAX\n+\t  && lra_inheritance_iter > LRA_MAX_INHERITANCE_PASSES\n+\t  && lra_rematerialization_iter > LRA_MAX_REMATERIALIZATION_PASSES)\n+\t/* After switching off inheritance and rematerialization\n+\t   passes, avoid spilling reload pseudos will be created to\n+\t   prevent LRA cycling in some complicated cases.  */\n+\tlra_bad_spill_regno_start = lra_constraint_new_regno_start;\n       lra_assignment_iter_after_spill = 0;\n     }\n   restore_scratches ();"}]}