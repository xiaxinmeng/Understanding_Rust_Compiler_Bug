{"sha": "86e6a239c4226f1469e7eefc8b917375ae5dd62c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlNmEyMzljNDIyNmYxNDY5ZTdlZWZjOGI5MTczNzVhZTVkZDYyYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-09-02T10:11:39Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-09-02T10:11:39Z"}, "message": "re PR fortran/45489 (Default initialization of derived-type function result missing)\n\n2010-09-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/45489\n        * resolve.c (apply_default_init): Mark symbol as referenced,\n        if it is initialized.\n        (resolve_symbol): Change intialized check for BT_DERIVED such\n        that also function results get initialized; remove now obsolete\n        gfc_set_sym_referenced for BT_CLASS.\n\n2010-09-02  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/45489\n        * gfortran.dg/initialization_27.f90: New.\n\nFrom-SVN: r163767", "tree": {"sha": "d1872a63f899f7cd461f400b2798d6e7839b642b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1872a63f899f7cd461f400b2798d6e7839b642b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86e6a239c4226f1469e7eefc8b917375ae5dd62c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e6a239c4226f1469e7eefc8b917375ae5dd62c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86e6a239c4226f1469e7eefc8b917375ae5dd62c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86e6a239c4226f1469e7eefc8b917375ae5dd62c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cfc20f00b63a9371784f0de6b70b4598adbca7de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc20f00b63a9371784f0de6b70b4598adbca7de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc20f00b63a9371784f0de6b70b4598adbca7de"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "fb1fa4d26649c277b4c0ee98656b70eefe86a60b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=86e6a239c4226f1469e7eefc8b917375ae5dd62c", "patch": "@@ -1,3 +1,12 @@\n+2010-09-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/45489\n+\t* resolve.c (apply_default_init): Mark symbol as referenced,\n+\tif it is initialized.\n+\t(resolve_symbol): Change intialized check for BT_DERIVED such\n+\tthat also function results get initialized; remove now obsolete\n+\tgfc_set_sym_referenced for BT_CLASS.\n+\n 2010-09-01  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/44541"}, {"sha": "26175e4512cac3f81db8fea7d04fc8c593b754ac", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=86e6a239c4226f1469e7eefc8b917375ae5dd62c", "patch": "@@ -9476,6 +9476,7 @@ apply_default_init (gfc_symbol *sym)\n     return;\n \n   build_init_assign (sym, init);\n+  sym->attr.referenced = 1;\n }\n \n /* Build an initializer for a local integer, real, complex, logical, or\n@@ -12148,7 +12149,6 @@ resolve_symbol (gfc_symbol *sym)\n      described in 14.7.5, to those variables that have not already\n      been assigned one.  */\n   if (sym->ts.type == BT_DERIVED\n-      && sym->attr.referenced\n       && sym->ns == gfc_current_ns\n       && !sym->value\n       && !sym->attr.allocatable\n@@ -12158,6 +12158,7 @@ resolve_symbol (gfc_symbol *sym)\n \n       if ((!a->save && !a->dummy && !a->pointer\n \t   && !a->in_common && !a->use_assoc\n+\t   && (a->referenced || a->result)\n \t   && !(a->function && sym != sym->result))\n \t  || (a->dummy && a->intent == INTENT_OUT && !a->pointer))\n \tapply_default_init (sym);\n@@ -12166,10 +12167,7 @@ resolve_symbol (gfc_symbol *sym)\n   if (sym->ts.type == BT_CLASS && sym->ns == gfc_current_ns\n       && sym->attr.dummy && sym->attr.intent == INTENT_OUT\n       && !sym->attr.pointer && !sym->attr.allocatable)\n-    {\n-      apply_default_init (sym);\n-      gfc_set_sym_referenced (sym);\n-    }\n+    apply_default_init (sym);\n \n   /* If this symbol has a type-spec, check it.  */\n   if (sym->attr.flavor == FL_VARIABLE || sym->attr.flavor == FL_PARAMETER"}, {"sha": "d6b58a64991be31b2943ce3ea5cb4e2a731ac7dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=86e6a239c4226f1469e7eefc8b917375ae5dd62c", "patch": "@@ -1,3 +1,8 @@\n+2010-09-02  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/45489\n+\t* gfortran.dg/initialization_27.f90: New.\n+\n 2010-09-02  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/bb-slp-8.c: Separate the interesting part and the"}, {"sha": "680a457e8f1a24ed5409c364666ba801e715b933", "filename": "gcc/testsuite/gfortran.dg/initialization_27.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_27.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86e6a239c4226f1469e7eefc8b917375ae5dd62c/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_27.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finitialization_27.f90?ref=86e6a239c4226f1469e7eefc8b917375ae5dd62c", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run}\n+!\n+! PR fortran/45489\n+!\n+! Check that non-referenced variables are default\n+! initialized if they are INTENT(OUT) or function results.\n+! Only the latter (i.e. \"x=f()\") was not working before\n+! PR 45489 was fixed.\n+!\n+program test_init\n+  implicit none\n+  integer, target :: tgt\n+  type A\n+    integer, pointer:: p => null ()\n+    integer:: i=3\n+  end type A\n+  type(A):: x, y(3)\n+  x=f()\n+  if (associated(x%p) .or. x%i /= 3) call abort ()\n+  y(1)%p => tgt\n+  y%i = 99\n+  call sub1(3,y)\n+  if (associated(y(1)%p) .or. any(y(:)%i /= 3)) call abort ()\n+  y(1)%p => tgt\n+  y%i = 99\n+  call sub2(y)\n+  if (associated(y(1)%p) .or. any(y(:)%i /= 3)) call abort ()\n+contains\n+ function f() result (fr)\n+    type(A):: fr\n+ end function f\n+ subroutine sub1(n,x)\n+   integer :: n\n+   type(A), intent(out) :: x(n:n+2)\n+ end subroutine sub1\n+ subroutine sub2(x)\n+   type(A), intent(out) :: x(:)\n+ end subroutine sub2\n+end program test_init"}]}