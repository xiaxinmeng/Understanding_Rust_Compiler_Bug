{"sha": "3536cd7e049cff68dfc38f6c660a0e88fe0c439c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzNmNkN2UwNDljZmY2OGRmYzM4ZjZjNjYwYTBlODhmZTBjNDM5Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:39:14Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-10-11T18:39:14Z"}, "message": "(cons_up_default_function): Mark methods in a template class as template instances.\n\n(cons_up_default_function): Mark methods in a template class\n        as template instances.  Store the values of interface_unknown and\n        interface_only for do_pending_inlines.\n        (do_pending_inlines): Use them.\n\nFrom-SVN: r8251", "tree": {"sha": "db06e392d347a1cb60787e3e5cf0066ad1901319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db06e392d347a1cb60787e3e5cf0066ad1901319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3536cd7e049cff68dfc38f6c660a0e88fe0c439c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3536cd7e049cff68dfc38f6c660a0e88fe0c439c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3536cd7e049cff68dfc38f6c660a0e88fe0c439c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3536cd7e049cff68dfc38f6c660a0e88fe0c439c/comments", "author": null, "committer": null, "parents": [{"sha": "b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8bca6f2af3f5e5937b9b4bc72aee23dcc501d20"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "deffa0429ec0c422ec25f3755b9a3e9ae39d8ba0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3536cd7e049cff68dfc38f6c660a0e88fe0c439c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3536cd7e049cff68dfc38f6c660a0e88fe0c439c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=3536cd7e049cff68dfc38f6c660a0e88fe0c439c", "patch": "@@ -1123,6 +1123,8 @@ do_pending_inlines ()\n \t  {\n \t    tree f = t->fndecl;\n \t    DECL_PENDING_INLINE_INFO (f) = 0;\n+\t    interface_unknown = t->interface == 1;\n+\t    interface_only = t->interface == 0;\n \t    switch (- t->lineno)\n \t      {\n \t      case 0: case 1:\n@@ -1147,7 +1149,10 @@ do_pending_inlines ()\n \t  tail = t;\n       }\n     if (bottom)\n-      obstack_free (&synth_obstack, bottom);      \n+      {\n+\tobstack_free (&synth_obstack, bottom);\n+\textract_interface_info ();\n+      }\n     t = prev;\n   }\n \n@@ -1772,6 +1777,9 @@ cons_up_default_function (type, name, kind)\n   if (fn == void_type_node)\n     return fn;\n \n+  if (CLASSTYPE_TEMPLATE_INSTANTIATION (type))\n+    SET_DECL_IMPLICIT_INSTANTIATION (fn);\n+\n   /* This kludge should go away when synthesized methods are handled\n      properly, i.e. only when needed.  */\n   {\n@@ -1780,6 +1788,7 @@ cons_up_default_function (type, name, kind)\n       obstack_alloc (&synth_obstack, sizeof (struct pending_inline));\n     t->lineno = -kind;\n     t->can_free = 0;\n+    t->interface = (interface_unknown ? 1 : (interface_only ? 0 : 2));\n     store_pending_inline (fn, t);\n   }\n "}]}