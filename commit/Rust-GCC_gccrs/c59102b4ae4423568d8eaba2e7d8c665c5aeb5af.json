{"sha": "c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU5MTAyYjRhZTQ0MjM1NjhkOGVhYmEyZTdkOGM2NjVjNWFlYjVhZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-19T10:59:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-19T10:59:44Z"}, "message": "emit-rtl.c (subreg_realpart_p): Remove.\n\n\t* emit-rtl.c (subreg_realpart_p): Remove.\n\t(reorder_insns_with_line_notes): Likewise.\n\t(end_full_sequence): Likewise.\n\t* rtl.h: Remove the prototype for the above functions.\n\nFrom-SVN: r78092", "tree": {"sha": "d6b4275d33fe7968e806f5b1a4cb17ec447268df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6b4275d33fe7968e806f5b1a4cb17ec447268df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/comments", "author": null, "committer": null, "parents": [{"sha": "3ad17f7bb5f47201b858f83476ded95672d57a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ad17f7bb5f47201b858f83476ded95672d57a76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ad17f7bb5f47201b858f83476ded95672d57a76"}], "stats": {"total": 57, "additions": 7, "deletions": 50}, "files": [{"sha": "2c3c558eb0bf182cdc4472b5738be93204901c0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "patch": "@@ -1,3 +1,10 @@\n+2004-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* emit-rtl.c (subreg_realpart_p): Remove.\n+\t(reorder_insns_with_line_notes): Likewise.\n+\t(end_full_sequence): Likewise.\n+\t* rtl.h: Remove the prototype for the above functions.\n+\n 2004-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/arc/arc.h, config/arm/arm.h, config/frv/frv.h,"}, {"sha": "6274aed6d8c49aaf9f8163bdd10a4eedc9a1cc11", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "patch": "@@ -1112,21 +1112,6 @@ gen_imagpart (enum machine_mode mode, rtx x)\n   else\n     return gen_highpart (mode, x);\n }\n-\n-/* Return 1 iff X, assumed to be a SUBREG,\n-   refers to the real part of the complex value in its containing reg.\n-   Complex values are always stored with the real part in the first word,\n-   regardless of WORDS_BIG_ENDIAN.  */\n-\n-int\n-subreg_realpart_p (rtx x)\n-{\n-  if (GET_CODE (x) != SUBREG)\n-    abort ();\n-\n-  return ((unsigned int) SUBREG_BYTE (x)\n-\t  < (unsigned int) GET_MODE_UNIT_SIZE (GET_MODE (SUBREG_REG (x))));\n-}\n \f\n /* Assuming that X is an rtx (e.g., MEM, REG or SUBREG) for a value,\n    return an rtx (MEM, SUBREG, or CONST_INT) that refers to the\n@@ -3755,27 +3740,6 @@ find_line_note (rtx insn)\n   return insn;\n }\n \n-/* Like reorder_insns, but inserts line notes to preserve the line numbers\n-   of the moved insns when debugging.  This may insert a note between AFTER\n-   and FROM, and another one after TO.  */\n-\n-void\n-reorder_insns_with_line_notes (rtx from, rtx to, rtx after)\n-{\n-  rtx from_line = find_line_note (from);\n-  rtx after_line = find_line_note (after);\n-\n-  reorder_insns (from, to, after);\n-\n-  if (from_line == after_line)\n-    return;\n-\n-  if (from_line)\n-    emit_note_copy_after (from_line, after);\n-  if (after_line)\n-    emit_note_copy_after (after_line, to);\n-}\n-\n /* Remove unnecessary notes from the instruction stream.  */\n \n void\n@@ -4904,17 +4868,6 @@ end_sequence (void)\n   free_sequence_stack = tem;\n }\n \n-/* This works like end_sequence, but records the old sequence in FIRST\n-   and LAST.  */\n-\n-void\n-end_full_sequence (rtx *first, rtx *last)\n-{\n-  *first = first_insn;\n-  *last = last_insn;\n-  end_sequence ();\n-}\n-\n /* Return 1 if currently emitting into a sequence.  */\n \n int"}, {"sha": "796f0fa0b05fccd22d2ed6e26b022087a52aa276", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c59102b4ae4423568d8eaba2e7d8c665c5aeb5af/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=c59102b4ae4423568d8eaba2e7d8c665c5aeb5af", "patch": "@@ -1518,7 +1518,6 @@ extern void start_sequence (void);\n extern void push_to_sequence (rtx);\n extern void end_sequence (void);\n extern void push_to_full_sequence (rtx, rtx);\n-extern void end_full_sequence (rtx*, rtx*);\n extern rtx immed_double_const (HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t       enum machine_mode);\n \n@@ -2071,7 +2070,6 @@ extern void init_emit (void);\n extern void init_emit_once (int);\n extern void push_topmost_sequence (void);\n extern void pop_topmost_sequence (void);\n-extern int subreg_realpart_p (rtx);\n extern void reverse_comparison (rtx);\n extern void set_new_first_and_last_insn (rtx, rtx);\n extern void set_new_last_label_num (int);\n@@ -2085,7 +2083,6 @@ extern void add_insn (rtx);\n extern void add_insn_before (rtx, rtx);\n extern void add_insn_after (rtx, rtx);\n extern void remove_insn (rtx);\n-extern void reorder_insns_with_line_notes (rtx, rtx, rtx);\n extern void emit_insn_after_with_line_notes (rtx, rtx, rtx);\n extern enum rtx_code classify_insn (rtx);\n extern rtx emit (rtx);"}]}