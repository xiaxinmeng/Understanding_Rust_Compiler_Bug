{"sha": "6f983e60987f47647031b396c0451fc799df985a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY5ODNlNjA5ODdmNDc2NDcwMzFiMzk2YzA0NTFmYzc5OWRmOTg1YQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-19T16:57:10Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-19T16:57:10Z"}, "message": "Add subclasses for the various kinds of instruction\n\n2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n\n\t* coretypes.h (class rtx_debug_insn): Add forward declaration.\n\t(class rtx_nonjump_insn): Likewise.\n\t(class rtx_jump_insn): Likewise.\n\t(class rtx_call_insn): Likewise.\n\t(class rtx_jump_table_data): Likewise.\n\t(class rtx_barrier): Likewise.\n\t(class rtx_code_label): Likewise.\n\t(class rtx_note): Likewise.\n\n\t* rtl.h (class rtx_debug_insn): New, a subclass of rtx_insn,\n\tadding the invariant DEBUG_INSN_P (X).\n\t(class rtx_nonjump_insn): New, a subclass of rtx_insn, adding\n\tthe invariant NONJUMP_INSN_P (X).\n\t(class rtx_jump_insn): New, a subclass of rtx_insn, adding\n\tthe invariant JUMP_P (X).\n\t(class rtx_call_insn): New, a subclass of rtx_insn, adding\n\tthe invariant CALL_P (X).\n\t(class rtx_jump_table): New, a subclass of rtx_insn, adding the\n\tinvariant JUMP_TABLE_DATA_P (X).\n\t(class rtx_barrier): New, a subclass of rtx_insn, adding the\n\tinvariant BARRIER_P (X).\n\t(class rtx_code_label): New, a subclass of rtx_insn, adding\n\tthe invariant LABEL_P (X).\n\t(class rtx_note): New, a subclass of rtx_insn, adding\n\tthe invariant NOTE_P(X).\n\t(is_a_helper <rtx_debug_insn *>::test): New.\n\t(is_a_helper <rtx_nonjump_insn *>::test): New.\n\t(is_a_helper <rtx_jump_insn *>::test): New.\n\t(is_a_helper <rtx_call_insn *>::test): New.\n\t(is_a_helper <rtx_jump_table_data *>::test): New functions,\n\toverloaded for both rtx and rtx_insn *.\n\t(is_a_helper <rtx_barrier *>::test): New.\n\t(is_a_helper <rtx_code_label *>::test): New functions, overloaded\n\tfor both rtx and rtx_insn *.\n\t(is_a_helper <rtx_note *>::test): New.\n\nFrom-SVN: r214172", "tree": {"sha": "4550c13f23ecc152f4ab5c1843b7907197af5a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4550c13f23ecc152f4ab5c1843b7907197af5a78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f983e60987f47647031b396c0451fc799df985a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f983e60987f47647031b396c0451fc799df985a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f983e60987f47647031b396c0451fc799df985a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f983e60987f47647031b396c0451fc799df985a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1068ced544257c6c2f804bb231c032e0fda90756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1068ced544257c6c2f804bb231c032e0fda90756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1068ced544257c6c2f804bb231c032e0fda90756"}], "stats": {"total": 229, "additions": 228, "deletions": 1}, "files": [{"sha": "348f445f4a9e8ef82136936c77fcda4cb6a62c73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f983e60987f47647031b396c0451fc799df985a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f983e60987f47647031b396c0451fc799df985a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f983e60987f47647031b396c0451fc799df985a", "patch": "@@ -1,3 +1,41 @@\n+2014-08-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* coretypes.h (class rtx_debug_insn): Add forward declaration.\n+\t(class rtx_nonjump_insn): Likewise.\n+\t(class rtx_jump_insn): Likewise.\n+\t(class rtx_call_insn): Likewise.\n+\t(class rtx_jump_table_data): Likewise.\n+\t(class rtx_barrier): Likewise.\n+\t(class rtx_code_label): Likewise.\n+\t(class rtx_note): Likewise.\n+\n+\t* rtl.h (class rtx_debug_insn): New, a subclass of rtx_insn,\n+\tadding the invariant DEBUG_INSN_P (X).\n+\t(class rtx_nonjump_insn): New, a subclass of rtx_insn, adding\n+\tthe invariant NONJUMP_INSN_P (X).\n+\t(class rtx_jump_insn): New, a subclass of rtx_insn, adding\n+\tthe invariant JUMP_P (X).\n+\t(class rtx_call_insn): New, a subclass of rtx_insn, adding\n+\tthe invariant CALL_P (X).\n+\t(class rtx_jump_table): New, a subclass of rtx_insn, adding the\n+\tinvariant JUMP_TABLE_DATA_P (X).\n+\t(class rtx_barrier): New, a subclass of rtx_insn, adding the\n+\tinvariant BARRIER_P (X).\n+\t(class rtx_code_label): New, a subclass of rtx_insn, adding\n+\tthe invariant LABEL_P (X).\n+\t(class rtx_note): New, a subclass of rtx_insn, adding\n+\tthe invariant NOTE_P(X).\n+\t(is_a_helper <rtx_debug_insn *>::test): New.\n+\t(is_a_helper <rtx_nonjump_insn *>::test): New.\n+\t(is_a_helper <rtx_jump_insn *>::test): New.\n+\t(is_a_helper <rtx_call_insn *>::test): New.\n+\t(is_a_helper <rtx_jump_table_data *>::test): New functions,\n+\toverloaded for both rtx and rtx_insn *.\n+\t(is_a_helper <rtx_barrier *>::test): New.\n+\t(is_a_helper <rtx_code_label *>::test): New functions, overloaded\n+\tfor both rtx and rtx_insn *.\n+\t(is_a_helper <rtx_note *>::test): New.\n+\n 2014-08-19  Marek Polacek  <polacek@redhat.com>\n \n \t* config/alpha/alpha.h (CLZ_DEFINED_VALUE_AT_ZERO,"}, {"sha": "87aec0f998193ba96fee742229bf3adea90d5339", "filename": "gcc/coretypes.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f983e60987f47647031b396c0451fc799df985a/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f983e60987f47647031b396c0451fc799df985a/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=6f983e60987f47647031b396c0451fc799df985a", "patch": "@@ -57,10 +57,18 @@ typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;\n \n /* Subclasses of rtx_def, using indentation to show the class\n-   hierarchy.\n+   hierarchy, along with the relevant invariant.\n    Where possible, keep this list in the same order as in rtl.def.  */\n class rtx_def;\n   class rtx_insn;\n+    class rtx_debug_insn;      /* DEBUG_INSN_P (X) */\n+    class rtx_nonjump_insn;    /* NONJUMP_INSN_P (X) */\n+    class rtx_jump_insn;       /* JUMP_P (X) */\n+    class rtx_call_insn;       /* CALL_P (X) */\n+    class rtx_jump_table_data; /* JUMP_TABLE_DATA_P (X) */\n+    class rtx_barrier;         /* BARRIER_P (X) */\n+    class rtx_code_label;      /* LABEL_P (X) */\n+    class rtx_note;            /* NOTE_P (X) */\n \n struct rtvec_def;\n typedef struct rtvec_def *rtvec;"}, {"sha": "9e95ad85454907289afc08007751b9639834b1e8", "filename": "gcc/rtl.h", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f983e60987f47647031b396c0451fc799df985a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f983e60987f47647031b396c0451fc799df985a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=6f983e60987f47647031b396c0451fc799df985a", "patch": "@@ -421,6 +421,99 @@ class GTY(()) rtx_insn : public rtx_def\n   */\n };\n \n+/* Subclasses of rtx_insn.  */\n+\n+class GTY(()) rtx_debug_insn : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       DEBUG_INSN_P (X) aka (GET_CODE (X) == DEBUG_INSN)\n+     i.e. an annotation for tracking variable assignments.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(DEBUG_INSN, \"debug_insn\", \"uuBeiie\", RTX_INSN)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_nonjump_insn : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       NONJUMP_INSN_P (X) aka (GET_CODE (X) == INSN)\n+     i.e an instruction that cannot jump.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(INSN, \"insn\", \"uuBeiie\", RTX_INSN)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_jump_insn : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       JUMP_P (X) aka (GET_CODE (X) == JUMP_INSN)\n+     i.e. an instruction that can possibly jump.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(JUMP_INSN, \"jump_insn\", \"uuBeiie0\", RTX_INSN)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_call_insn : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       CALL_P (X) aka (GET_CODE (X) == CALL_INSN)\n+     i.e. an instruction that can possibly call a subroutine\n+     but which will not change which instruction comes next\n+     in the current function.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(CALL_INSN, \"call_insn\", \"uuBeiiee\", RTX_INSN)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_jump_table_data : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       JUMP_TABLE_DATA_P (X) aka (GET_CODE (INSN) == JUMP_TABLE_DATA)\n+     i.e. a data for a jump table, considered an instruction for\n+     historical reasons.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(JUMP_TABLE_DATA, \"jump_table_data\", \"uuBe0000\", RTX_INSN)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_barrier : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       BARRIER_P (X) aka (GET_CODE (X) == BARRIER)\n+     i.e. a marker that indicates that control will not flow through.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(BARRIER, \"barrier\", \"uu00000\", RTX_EXTRA)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_code_label : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       LABEL_P (X) aka (GET_CODE (X) == CODE_LABEL)\n+     i.e. a label in the assembler.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(CODE_LABEL, \"code_label\", \"uuB00is\", RTX_EXTRA)\n+     from rtl.def.  */\n+};\n+\n+class GTY(()) rtx_note : public rtx_insn\n+{\n+  /* No extra fields, but adds the invariant:\n+       NOTE_P(X) aka (GET_CODE (X) == NOTE)\n+     i.e. a note about the corresponding source code.\n+\n+     This is an instance of:\n+       DEF_RTL_EXPR(NOTE, \"note\", \"uuB0ni\", RTX_EXTRA)\n+     from rtl.def.  */\n+};\n+\n /* The size in bytes of an rtx header (code, mode and flags).  */\n #define RTX_HDR_SIZE offsetof (struct rtx_def, u)\n \n@@ -606,6 +699,94 @@ is_a_helper <const rtx_insn *>::test (const_rtx rt)\n \t  || LABEL_P (rt));\n }\n \n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_debug_insn *>::test (rtx rt)\n+{\n+  return DEBUG_INSN_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_nonjump_insn *>::test (rtx rt)\n+{\n+  return NONJUMP_INSN_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_jump_insn *>::test (rtx rt)\n+{\n+  return JUMP_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_call_insn *>::test (rtx rt)\n+{\n+  return CALL_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_jump_table_data *>::test (rtx rt)\n+{\n+  return JUMP_TABLE_DATA_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_jump_table_data *>::test (rtx_insn *insn)\n+{\n+  return JUMP_TABLE_DATA_P (insn);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_barrier *>::test (rtx rt)\n+{\n+  return BARRIER_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_code_label *>::test (rtx rt)\n+{\n+  return LABEL_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_code_label *>::test (rtx_insn *insn)\n+{\n+  return LABEL_P (insn);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_note *>::test (rtx rt)\n+{\n+  return NOTE_P (rt);\n+}\n+\n+template <>\n+template <>\n+inline bool\n+is_a_helper <rtx_note *>::test (rtx_insn *insn)\n+{\n+  return NOTE_P (insn);\n+}\n+\n /* Predicate yielding nonzero iff X is a return or simple_return.  */\n #define ANY_RETURN_P(X) \\\n   (GET_CODE (X) == RETURN || GET_CODE (X) == SIMPLE_RETURN)"}]}