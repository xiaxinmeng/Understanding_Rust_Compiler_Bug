{"sha": "bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "node_id": "C_kwDOANBUbNoAKGJjN2U5Zjc2NzU2ZjJmMTY0YmI1ZGM3MGI1OWJjMGQ4MzhmOWZhOTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-17T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-17T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "7454dfaf2148017a073bf7fa0e835c0a4d367f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7454dfaf2148017a073bf7fa0e835c0a4d367f99"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/comments", "author": null, "committer": null, "parents": [{"sha": "6ab98d8b58fe4d3c8fce8f34b9efc416b7670c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab98d8b58fe4d3c8fce8f34b9efc416b7670c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab98d8b58fe4d3c8fce8f34b9efc416b7670c1c"}], "stats": {"total": 232, "additions": 231, "deletions": 1}, "files": [{"sha": "0154e462eeab960d17f857ea217f6017206ce6ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,113 @@\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gimple-ssa-warn-access.cc (warn_string_no_nul): Add\n+\tauto_diagnostic_group to group any warning with its note.\n+\t(maybe_warn_for_bound): Likewise.\n+\t(check_access): Likewise.\n+\t(warn_dealloc_offset): Likewise.\n+\t(pass_waccess::maybe_warn_memmodel): Likewise.\n+\t(pass_waccess::maybe_check_dealloc_call): Likewise.\n+\t(pass_waccess::warn_invalid_pointer): Likewise.\n+\t(pass_waccess::check_dangling_stores): Likewise.\n+\n+2022-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* opts.cc (common_handle_option) [OPT_fsanitize_]: Set\n+\topts_set->x_flag_sanitize.\n+\n+2022-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* flags.h (issue_strict_overflow_warning): Comment #endif.\n+\n+2022-06-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gimple-range-cache.cc (ranger_cache::apply_inferred_ranges): If name\n+\twas invaraint before, clear the invariant bit.\n+\t* gimple-range-gori.cc (gori_map::set_range_invariant): Add a flag.\n+\t* gimple-range-gori.h (gori_map::set_range_invariant): Adjust prototype.\n+\n+2022-06-16  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-ssa-propagate.cc (before_dom_children): Call value_of_stmt.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105983\n+\t* match.pd (y == XXX_MIN || x < y -> x <= y - 1,\n+\ty != XXX_MIN && x >= y -> x > y - 1): Use :cs instead of :s\n+\ton non-equality comparisons.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105984\n+\t* match.pd (__builtin_mul_overflow_p (x, cst, (stype) 0) ->\n+\tx > stype_max / cst || x < stype_min / cst): fold_convert @1\n+\tto TREE_TYPE (@0) just once and test for negative divisor\n+\talso on that folded constant instead of on @1.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/105951\n+\t* tree-ssa-ccp.cc (optimize_atomic_bit_test_and,\n+\toptimize_atomic_op_fetch_cmp_0): Remember gimple_call_fn (call)\n+\tas last argument to the internal functions.\n+\t* builtins.cc (expand_ifn_atomic_bit_test_and): Adjust for the\n+\textra call argument to ifns.  If expand_atomic_fetch_op fails for the\n+\tlhs == NULL_TREE case, fall through into the optab code with\n+\tgen_reg_rtx (mode) as target.  If second expand_atomic_fetch_op\n+\tfails, construct a CALL_EXPR and expand that.\n+\t(expand_ifn_atomic_op_fetch_cmp_0): Adjust for the extra call argument\n+\tto ifns.  If expand_atomic_fetch_op fails, construct a CALL_EXPR and\n+\texpand that.\n+\n+2022-06-16  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/103316\n+\t* config/rs6000/rs6000-builtin.cc (rs6000_gimple_fold_builtin): Enable\n+\tgimple folding for RS6000_BIF_VCMPEQUT, RS6000_BIF_VCMPNET,\n+\tRS6000_BIF_CMPGE_1TI, RS6000_BIF_CMPGE_U1TI, RS6000_BIF_VCMPGTUT,\n+\tRS6000_BIF_VCMPGTST, RS6000_BIF_CMPLE_1TI, RS6000_BIF_CMPLE_U1TI.\n+\t* config/rs6000/vector.md (VEC_IC): New mode iterator.  Add support\n+\tfor new Power10 V1TI instructions.\n+\t(vec_cmp<mode><mode>): Set mode iterator to VEC_IC.\n+\t(vec_cmpu<mode><mode>): Likewise.\n+\t(vector_nlt<mode>): Set mode iterator to VEC_IC.\n+\t(vector_nltv1ti): Remove.\n+\t(vector_gtu<mode>): Set mode iterator to VEC_IC.\n+\t(vector_gtuv1ti): Remove.\n+\t(vector_nltu<mode>): Set mode iterator to VEC_IC.\n+\t(vector_nltuv1ti): Remove.\n+\t(vector_geu<mode>): Set mode iterator to VEC_IC.\n+\t(vector_ngt<mode>): Likewise.\n+\t(vector_ngtv1ti): Remove.\n+\t(vector_ngtu<mode>): Set mode iterator to VEC_IC.\n+\t(vector_ngtuv1ti): Remove.\n+\t(vector_gtu_<mode>_p): Set mode iterator to VEC_IC.\n+\t(vector_gtu_v1ti_p): Remove.\n+\t(vrotl<mode>3): Set mode iterator to VEC_IC.  Emit insns for V1TI.\n+\t(vrotlv1ti3): Remove.\n+\t(vashr<mode>3): Set mode iterator to VEC_IC.  Emit insns for V1TI.\n+\t(vashrv1ti3): Remove.\n+\n+2022-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* gengtype-state.cc (read_a_state_token): Do not skip extra\n+\tcharacter after escaped sequence.\n+\n+2022-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\tPR driver/105564\n+\t* spellcheck.cc (test_find_closest_string): Add new test.\n+\t* spellcheck.h (class best_match): Prefer a difference in\n+\ttrailing sign symbol.\n+\n+2022-06-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR tree-optimization/53533\n+\t* match.pd: Simplify (B * v + C) * D -> BD * v + CD and\n+\t(v + B) * C + D -> C * v + BCD when B,C,D are all INTEGER_CST,\n+\tand there's no overflow or !TYPE_OVERFLOW_UNDEFINED.\n+\n 2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* config/xtensa/xtensa.md (DSC): New split pattern and mode iterator."}, {"sha": "0ebec288c7fc7a60c223460fe1532f2e6eef09ca", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1 +1 @@\n-20220616\n+20220617"}, {"sha": "f69a5b68b42065c8da852764bb08d5ea7e88aafa", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,19 @@\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* varargs.cc (va_arg_type_mismatch::emit): Associate the warning\n+\twith CWE-686 (\"Function Call With Incorrect Argument Type\").\n+\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* varargs.cc: Include \"diagnostic-metadata.h\".\n+\t(va_list_exhausted::emit): Associate the warning with\n+\tCWE-685 (\"Function Call With Incorrect Number of Arguments\").\n+\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sm-file.cc (double_fclose::emit): Associate the warning with\n+\tCWE-1341 (\"Multiple Releases of Same Resource or Handle\").\n+\n 2022-06-15  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/105962"}, {"sha": "077b726d09ceab947b1d271d0e56e2bce4418f76", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,26 @@\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-decl.cc (implicitly_declare): Add auto_diagnostic_group to\n+\tgroup the warning with any note.\n+\t(warn_about_goto): Likewise to group error or warning with note.\n+\tBail out if the warning wasn't emitted, to avoid emitting orphan\n+\tnotes.\n+\t(lookup_label_for_goto): Add auto_diagnostic_group to\n+\tgroup the error with the note.\n+\t(check_earlier_gotos): Likewise.\n+\t(c_check_switch_jump_warnings): Likewise for any error/warning.\n+\tConditionalize emission of the notes.\n+\t(diagnose_uninitialized_cst_member): Likewise for warning,\n+\tconditionalizing emission of the note.\n+\t(grokdeclarator): Add auto_diagnostic_group to group the \"array\n+\ttype has incomplete element type\" error with any note.\n+\t(parser_xref_tag): Add auto_diagnostic_group to group warnings\n+\twith their notes.  Conditionalize emission of notes.\n+\t(start_struct): Add auto_diagnostic_group to group the\n+\t\"redefinition of\" errors with any note.\n+\t(start_enum): Likewise for \"redeclaration of %<enum %E%>\" error.\n+\t(check_for_loop_decls): Likewise for pre-C99 error.\n+\n 2022-06-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.cc (c_parser_omp_clause_linear): Parse OpenMP 5.2"}, {"sha": "658525d60344d13a09a7f5203817392949e5b21e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,14 @@\n+2022-06-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl2.cc (finish_objects): Add startp parameter, adjust.\n+\t(generate_ctor_or_dtor_function): Detect empty fn, and don't\n+\tgenerate unnecessary code.  Remove objc startup here ...\n+\t(c_parse_final_cleanyps): ... do it here.\n+\n+2022-06-16  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl2.cc (struct priority_map_traits): Remove unused param.\n+\n 2022-06-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* module.cc (module_state::write_readme): Use less confusing"}, {"sha": "5cdb3905d17b389dc12dad25195324bb4db8f27d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,60 @@\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/stdarg-1.c\n+\t(__analyzer_called_by_test_type_mismatch_1): Verify that\n+\t-Wanalyzer-va-arg-type-mismatch is associated with CWE-686.\n+\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/stdarg-1.c\n+\t(__analyzer_called_by_test_not_enough_args): Verify that\n+\t-Wanalyzer-va-list-exhausted is associated with CWE-685.\n+\n+2022-06-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/file-1.c (test_1): Verify that double-fclose is\n+\tassociated with CWE-1341.\n+\n+2022-06-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/init-2_b.C: Add init check.\n+\t* g++.dg/modules/init-2_c.C: Add init check.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105983\n+\t* gcc.dg/tree-ssa/pr105983.c: New test.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/105984\n+\t* gcc.c-torture/execute/pr105984.c: New test.\n+\n+2022-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/105951\n+\t* gcc.target/i386/pr105951-1.c: New test.\n+\t* gcc.target/i386/pr105951-2.c: New test.\n+\n+2022-06-16  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/103316\n+\t* gcc.target/powerpc/pr103316.c: New.\n+\t* gcc.target/powerpc/fold-vec-cmp-int128.c: New.\n+\n+2022-06-16  Jia-wei Chen  <jiawei@iscas.ac.cn>\n+\n+\t* gcc.target/riscv/pr105666.c: New options.\n+\n+2022-06-16  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr53533-1.c: New test.\n+\t* gcc.target/i386/pr53533-2.c: New test.\n+\t* gcc.target/i386/pr53533-3.c: New test.\n+\t* gcc.target/i386/pr53533-4.c: New test.\n+\t* gcc.target/i386/pr53533-5.c: New test.\n+\t* gcc.dg/vect/slp-11a.c: Adjust testcase.\n+\n 2022-06-15  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n \n \t* gcc.target/xtensa/sibcalls.c: New."}, {"sha": "c061aeb17b2cbd4470dc7c24e6ff0815eb14381d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bc7e9f76756f2f164bb5dc70b59bc0d838f9fa96", "patch": "@@ -1,3 +1,16 @@\n+2022-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/105995\n+\t* include/bits/basic_string.h (_M_use_local_data): Initialize\n+\tthe entire SSO buffer.\n+\t* testsuite/21_strings/basic_string/cons/char/105995.cc: New test.\n+\n+2022-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101482\n+\t* include/ext/vstring.h (operator==): Always check lengths\n+\tbefore comparing.\n+\n 2022-06-15  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/105717"}]}