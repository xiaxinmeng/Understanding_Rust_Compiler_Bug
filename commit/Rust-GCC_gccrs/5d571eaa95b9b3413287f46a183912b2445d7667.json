{"sha": "5d571eaa95b9b3413287f46a183912b2445d7667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1NzFlYWE5NWI5YjM0MTMyODdmNDZhMTgzOTEyYjI0NDVkNzY2Nw==", "commit": {"author": {"name": "Ozkan Sezer", "email": "sezeroz@gmail.com", "date": "2009-11-06T10:16:30Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2009-11-06T10:16:30Z"}, "message": "configure.ac (FLAGS_FOR_TARGET): Add -L and -isystem paths for *-w64-mingw* and x86_64-*mingw*.\n\n2009-11-06  Ozkan Sezer  <sezeroz@gmail.com>\n\n        * configure.ac (FLAGS_FOR_TARGET):  Add -L and -isystem\n        paths for *-w64-mingw* and x86_64-*mingw*.\n        * configure: Regenerated.\n\nFrom-SVN: r153964", "tree": {"sha": "077b8d18779bf14df90afd1fa407698da23f01f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077b8d18779bf14df90afd1fa407698da23f01f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d571eaa95b9b3413287f46a183912b2445d7667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d571eaa95b9b3413287f46a183912b2445d7667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d571eaa95b9b3413287f46a183912b2445d7667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d571eaa95b9b3413287f46a183912b2445d7667/comments", "author": {"login": "sezero", "id": 4222725, "node_id": "MDQ6VXNlcjQyMjI3MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/4222725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sezero", "html_url": "https://github.com/sezero", "followers_url": "https://api.github.com/users/sezero/followers", "following_url": "https://api.github.com/users/sezero/following{/other_user}", "gists_url": "https://api.github.com/users/sezero/gists{/gist_id}", "starred_url": "https://api.github.com/users/sezero/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sezero/subscriptions", "organizations_url": "https://api.github.com/users/sezero/orgs", "repos_url": "https://api.github.com/users/sezero/repos", "events_url": "https://api.github.com/users/sezero/events{/privacy}", "received_events_url": "https://api.github.com/users/sezero/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d32599a6e99da9345d2b7d94834b7e9dfcc109a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d32599a6e99da9345d2b7d94834b7e9dfcc109a8"}], "stats": {"total": 52, "additions": 35, "deletions": 17}, "files": [{"sha": "600e9149f730b6190524895782e20821be84b8ae", "filename": "ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d571eaa95b9b3413287f46a183912b2445d7667/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d571eaa95b9b3413287f46a183912b2445d7667/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=5d571eaa95b9b3413287f46a183912b2445d7667", "patch": "@@ -1,3 +1,9 @@\n+2009-11-06  Ozkan Sezer  <sezeroz@gmail.com>\n+\n+\t* configure.ac (FLAGS_FOR_TARGET):  Add -L and -isystem\n+\tpaths for *-w64-mingw* and x86_64-*mingw*.\n+\t* configure: Regenerated.\n+\n 2009-11-05  Joern Rennecke <amylaar@spamcop.net>\n \n \t* MAINTAINERS (Write After Approval): Add entry for my INRIA work."}, {"sha": "c6a848bc6a7ade370809a5a9074c7370149e33a2", "filename": "configure", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d571eaa95b9b3413287f46a183912b2445d7667/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d571eaa95b9b3413287f46a183912b2445d7667/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=5d571eaa95b9b3413287f46a183912b2445d7667", "patch": "@@ -7803,8 +7803,9 @@ case \" $target_configdirs \" in\n   case \" $target_configargs \" in\n   *\" --with-newlib \"*)\n    case \"$target\" in\n-   *-cygwin*)\n-     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include' ;;\n+    *-cygwin*)\n+      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include'\n+      ;;\n    esac\n \n    # If we're not building GCC, don't discard standard headers.\n@@ -7860,12 +7861,17 @@ case \" $target_configdirs \" in\n   esac\n   ;;\n esac\n+\n case \"$target\" in\n-x86_64-*-mingw* | *-w64-mingw*)\n-  ;;\n-*-mingw*)\n-  # Can't be handled as Cygwin above since Mingw does not use newlib.\n-  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup/mingw -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/mingw/include -isystem $$s/winsup/w32api/include' ;;\n+  x86_64-*mingw* | *-w64-mingw*)\n+  # MinGW-w64 does not use newlib, nor does it use winsup. It may,\n+  # however, use a symlink named 'mingw' in ${prefix} .\n+    FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L${prefix}/${target}/lib -L${prefix}/mingw/lib -isystem ${prefix}/${target}/include -isystem ${prefix}/mingw/include'\n+    ;;\n+  *-mingw*)\n+  # MinGW can't be handled as Cygwin above since it does not use newlib.\n+    FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup/mingw -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/mingw/include -isystem $$s/winsup/w32api/include'\n+    ;;\n esac\n \n # Allow the user to override the flags for"}, {"sha": "5f7f9d1d33f57617bd4b284a04c0a2423c302567", "filename": "configure.ac", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d571eaa95b9b3413287f46a183912b2445d7667/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d571eaa95b9b3413287f46a183912b2445d7667/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=5d571eaa95b9b3413287f46a183912b2445d7667", "patch": "@@ -747,10 +747,10 @@ case \"${target}\" in\n   i[[3456789]]86-*-mingw*)\n     target_configdirs=\"$target_configdirs target-winsup\"\n     noconfigdirs=\"$noconfigdirs expect target-libgloss target-newlib ${libgcj}\"\n-    ;;    \n+    ;;\n   x86_64-*-mingw*)\n     noconfigdirs=\"$noconfigdirs expect target-libgloss target-newlib ${libgcj}\"\n-    ;;    \n+    ;;\n   *-*-cygwin*)\n     target_configdirs=\"$target_configdirs target-libtermcap target-winsup\"\n     noconfigdirs=\"$noconfigdirs target-gperf target-libgloss\"\n@@ -760,7 +760,7 @@ case \"${target}\" in\n     elif test -d \"$srcdir/newlib\"; then\n       echo \"Warning: winsup/cygwin is missing so newlib can't be built.\"\n     fi\n-    ;;    \n+    ;;\n   i[[3456789]]86-moss-msdos | i[[3456789]]86-*-moss* | \\\n   i[[3456789]]86-*-uwin* | i[[3456789]]86-*-interix* )\n     ;;\n@@ -2959,8 +2959,9 @@ case \" $target_configdirs \" in\n   case \" $target_configargs \" in\n   *\" --with-newlib \"*)\n    case \"$target\" in\n-   *-cygwin*)\n-     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include' ;;\n+    *-cygwin*)\n+      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include'\n+      ;;\n    esac\n \n    # If we're not building GCC, don't discard standard headers.\n@@ -3016,12 +3017,17 @@ case \" $target_configdirs \" in\n   esac\n   ;;\n esac\n+\n case \"$target\" in\n-x86_64-*-mingw* | *-w64-mingw*)\n-  ;;\n-*-mingw*)\n-  # Can't be handled as Cygwin above since Mingw does not use newlib.\n-  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup/mingw -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/mingw/include -isystem $$s/winsup/w32api/include' ;;\n+  x86_64-*mingw* | *-w64-mingw*)\n+  # MinGW-w64 does not use newlib, nor does it use winsup. It may,\n+  # however, use a symlink named 'mingw' in ${prefix} .\n+    FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L${prefix}/${target}/lib -L${prefix}/mingw/lib -isystem ${prefix}/${target}/include -isystem ${prefix}/mingw/include'\n+    ;;\n+  *-mingw*)\n+  # MinGW can't be handled as Cygwin above since it does not use newlib.\n+    FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup/mingw -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/mingw/include -isystem $$s/winsup/w32api/include'\n+    ;;\n esac\n \n # Allow the user to override the flags for"}]}