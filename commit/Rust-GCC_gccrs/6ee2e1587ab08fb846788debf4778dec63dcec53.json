{"sha": "6ee2e1587ab08fb846788debf4778dec63dcec53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlMmUxNTg3YWIwOGZiODQ2Nzg4ZGViZjQ3NzhkZWM2M2RjZWM1Mw==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2006-04-18T08:23:39Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2006-04-18T08:23:39Z"}, "message": "re PR target/27117 (SH backend cheats to reload -- disables indexed addressing but uses it internally)\n\n2006-04-18  Paolo Bonzini  <bonzini@gnu.org>\n\n        PR target/27117\n\n\tPartial revert of revision 112637\n\t2006-04-03  Paolo Bonzini  <bonzini@gnu.org>\n\t\t    Dale Johannesen  <dalej@apple.com>\n\n\tPR target/19653\n\t* regclass.c (struct reg_pref): Update documentation.\n\t(regclass): Set prefclass to NO_REGS if memory is the best option.\n\t(record_reg_classes): Cope with a prefclass set to NO_REGS.\n\nFrom-SVN: r113026", "tree": {"sha": "9cf5cf16274c44ee1026b11a9f22a35865c4e991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cf5cf16274c44ee1026b11a9f22a35865c4e991"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee2e1587ab08fb846788debf4778dec63dcec53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2e1587ab08fb846788debf4778dec63dcec53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee2e1587ab08fb846788debf4778dec63dcec53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee2e1587ab08fb846788debf4778dec63dcec53/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e3949961fb3341f3c445a7ddd1537068440b268e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3949961fb3341f3c445a7ddd1537068440b268e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3949961fb3341f3c445a7ddd1537068440b268e"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "8574f89c36d1640210f2c5145858d6e3ccb173a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2e1587ab08fb846788debf4778dec63dcec53/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2e1587ab08fb846788debf4778dec63dcec53/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ee2e1587ab08fb846788debf4778dec63dcec53", "patch": "@@ -1,3 +1,16 @@\n+2006-04-18  Paolo Bonzini  <bonzini@gnu.org>\n+\n+        PR target/27117\n+\n+\tPartial revert of revision 112637\n+\t2006-04-03  Paolo Bonzini  <bonzini@gnu.org>\n+\t\t    Dale Johannesen  <dalej@apple.com>\n+\n+\tPR target/19653\n+\t* regclass.c (struct reg_pref): Update documentation.\n+\t(regclass): Set prefclass to NO_REGS if memory is the best option.\n+\t(record_reg_classes): Cope with a prefclass set to NO_REGS.\n+\n 2006-04-18  Paolo Bonzini  <bonzini@gnu.org>\n \n         PR tree-optimization/26821"}, {"sha": "7b2d5b1f3fb4b769fdc450167b34b129c0d4f0a5", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee2e1587ab08fb846788debf4778dec63dcec53/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee2e1587ab08fb846788debf4778dec63dcec53/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=6ee2e1587ab08fb846788debf4778dec63dcec53", "patch": "@@ -811,8 +811,7 @@ struct costs\n /* Structure used to record preferences of given pseudo.  */\n struct reg_pref\n {\n-  /* (enum reg_class) prefclass is the preferred class.  May be\n-     NO_REGS if no class is better than memory.  */\n+  /* (enum reg_class) prefclass is the preferred class.  */\n   char prefclass;\n \n   /* altclass is a register class that we should use for allocating\n@@ -1315,10 +1314,6 @@ regclass (rtx f, int nregs)\n \t\tbest = reg_class_subunion[(int) best][class];\n \t    }\n \n-\t  /* If no register class is better than memory, use memory. */\n-\t  if (p->mem_cost < best_cost)\n-\t    best = NO_REGS;\n-\n \t  /* Record the alternate register class; i.e., a class for which\n \t     every register in it is better than using memory.  If adding a\n \t     class would make a smaller class (i.e., no union of just those\n@@ -1529,7 +1524,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t     to what we would add if this register were not in the\n \t\t     appropriate class.  */\n \n-\t\t  if (reg_pref && reg_pref[REGNO (op)].prefclass != NO_REGS)\n+\t\t  if (reg_pref)\n \t\t    alt_cost\n \t\t      += (may_move_in_cost[mode]\n \t\t\t  [(unsigned char) reg_pref[REGNO (op)].prefclass]\n@@ -1755,7 +1750,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t\t     to what we would add if this register were not in the\n \t\t     appropriate class.  */\n \n-\t\t  if (reg_pref && reg_pref[REGNO (op)].prefclass != NO_REGS)\n+\t\t  if (reg_pref)\n \t\t    alt_cost\n \t\t      += (may_move_in_cost[mode]\n \t\t\t  [(unsigned char) reg_pref[REGNO (op)].prefclass]\n@@ -1841,8 +1836,7 @@ record_reg_classes (int n_alts, int n_ops, rtx *ops,\n \t  int class;\n \t  unsigned int nr;\n \n-\t  if (regno >= FIRST_PSEUDO_REGISTER && reg_pref != 0\n-\t      && reg_pref[regno].prefclass != NO_REGS)\n+\t  if (regno >= FIRST_PSEUDO_REGISTER && reg_pref != 0)\n \t    {\n \t      enum reg_class pref = reg_pref[regno].prefclass;\n "}]}