{"sha": "a60369f0feec139f72e799012ae27afd8c9c3559", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYwMzY5ZjBmZWVjMTM5ZjcyZTc5OTAxMmFlMjdhZmQ4YzljMzU1OQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-06-06T16:21:41Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-06-06T16:21:41Z"}, "message": "m68k.c (legitimize_pic_address): Move prototype ...\n\n\t* m68k.c (legitimize_pic_address): Move prototype ...\n\n\t* m68k-protos.h (legitimize_pic_address): ... here.\n\n\t* m68k.md (legitimize_pic_address): Delete prototypes.\n\t(untyped_call): Invoke GEN_CALL(), not gen_call().\n\n\t* nextstep.c: Include system.h and toplev.h.\n\t(get_directive_line): Don't prototype.\n\t(handle_pragma): Mark parameters with ATTRIBUTE_UNUSED and constify.\n\n\t* nextstep.h (handle_pragma): Prototype.\n\t(SECTION_FUNCTION): Prototype FUNCTION().  Move prototype of\n\tobjc_section_init ...\n\t(EXTRA_SECTION_FUNCTIONS): ... here.\n\nFrom-SVN: r34427", "tree": {"sha": "9b1b7d40605ffed1e0f1ea9d2b1f658133c29792", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b1b7d40605ffed1e0f1ea9d2b1f658133c29792"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a60369f0feec139f72e799012ae27afd8c9c3559", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60369f0feec139f72e799012ae27afd8c9c3559", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a60369f0feec139f72e799012ae27afd8c9c3559", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a60369f0feec139f72e799012ae27afd8c9c3559/comments", "author": null, "committer": null, "parents": [{"sha": "df07dc5beb013b1487e8a98505dbe8f0f1a365d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df07dc5beb013b1487e8a98505dbe8f0f1a365d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df07dc5beb013b1487e8a98505dbe8f0f1a365d0"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "39713e03a6b5c40d2818179539fae8641b7e16b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -1,3 +1,21 @@\n+2000-06-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* m68k.c (legitimize_pic_address): Move prototype ...\n+\t\n+\t* m68k-protos.h (legitimize_pic_address): ... here.\n+\n+\t* m68k.md (legitimize_pic_address): Delete prototypes.\n+\t(untyped_call): Invoke GEN_CALL(), not gen_call().\n+\n+\t* nextstep.c: Include system.h and toplev.h.\n+\t(get_directive_line): Don't prototype.\n+\t(handle_pragma): Mark parameters with ATTRIBUTE_UNUSED and constify.\n+\n+\t* nextstep.h (handle_pragma): Prototype.\n+\t(SECTION_FUNCTION): Prototype FUNCTION().  Move prototype of\n+\tobjc_section_init ...\n+\t(EXTRA_SECTION_FUNCTIONS): ... here.\n+\n Tue Jun  6 08:17:26 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* sdbout.c (struct sdb_file): NAME now const."}, {"sha": "b73c628a9ff2833fb1b302ae3a00f28415857cc5", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -61,6 +61,7 @@ extern int general_src_operand PARAMS ((rtx, enum machine_mode));\n extern int nonimmediate_src_operand PARAMS ((rtx, enum machine_mode));\n extern int memory_src_operand PARAMS ((rtx, enum machine_mode));\n extern int pcrel_address PARAMS ((rtx, enum machine_mode));\n+extern rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n #endif /* RTX_CODE */\n \n extern int flags_in_68881 PARAMS ((void));"}, {"sha": "43d3421db4171861f02d10cf7e4c1a7b559e757c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -54,7 +54,6 @@ enum reg_class regno_reg_class[]\n int switch_table_difference_label_flag;\n \n static rtx find_addr_reg PARAMS ((rtx));\n-rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n static const char *singlemove_string PARAMS ((rtx *));\n \f\n "}, {"sha": "4be439cf06f40478af1ec476cc1378b69c0f2286", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -509,7 +509,6 @@\n          Call legitimize_pic_address with the source, mode, and a relocation\n          register (a new pseudo, or the final destination if reload_in_progress\n          is set).   Then fall through normally */\n-      extern rtx legitimize_pic_address();\n       rtx temp = reload_in_progress ? operands[0] : gen_reg_rtx (Pmode);\n       operands[1] = legitimize_pic_address (operands[1], SImode, temp);\n     }\n@@ -955,7 +954,6 @@\n          Call legitimize_pic_address with the source, mode, and a relocation\n          register (a new pseudo, or the final destination if reload_in_progress\n          is set).   Then fall through normally */\n-      extern rtx legitimize_pic_address();\n       rtx temp = reload_in_progress ? operands[0] : gen_reg_rtx (Pmode);\n       operands[1] = legitimize_pic_address (operands[1], SImode, temp);\n     }\n@@ -6940,7 +6938,7 @@\n {\n   int i;\n \n-  emit_call_insn (gen_call (operands[0], const0_rtx, NULL, const0_rtx));\n+  emit_call_insn (GEN_CALL (operands[0], const0_rtx, NULL, const0_rtx));\n \n   for (i = 0; i < XVECLEN (operands[2], 0); i++)\n     {"}, {"sha": "f15ae04654ffa0b6a1a69a7522daa3cf701668a7", "filename": "gcc/config/nextstep.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fnextstep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fnextstep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.c?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -20,9 +20,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n-#include <stdio.h>\n+#include \"system.h\"\n #include \"flags.h\"\n #include \"tree.h\"\n+#include \"toplev.h\"\n \n /* Make everything that used to go in the text section really go there.  */\n \n@@ -38,18 +39,16 @@ static int pragma_initialized;\n \n static int initial_optimize_flag;\n \n-extern char *get_directive_line ();\n-\n /* Called from check_newline via the macro HANDLE_PRAGMA.\n    FINPUT is the source file input stream.\n    CH is the first character after `#pragma'.\n    The result is 1 if the pragma was handled.  */\n \n int\n handle_pragma (p_getc, p_ungetc, pname)\n-     int (*  p_getc) PARAMS ((void));\n-     void (* p_ungetc) PARAMS ((int));\n-     char * pname;\n+     int (*  p_getc) PARAMS ((void)) ATTRIBUTE_UNUSED;\n+     void (* p_ungetc) PARAMS ((int)) ATTRIBUTE_UNUSED;\n+     const char *pname;\n {\n   int retval = 0;\n "}, {"sha": "5c0e828fa030317d68640ec04ebed26c07e25b06", "filename": "gcc/config/nextstep.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fnextstep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a60369f0feec139f72e799012ae27afd8c9c3559/gcc%2Fconfig%2Fnextstep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnextstep.h?ref=a60369f0feec139f72e799012ae27afd8c9c3559", "patch": "@@ -259,7 +259,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tHANDLE_PRAGMA\n #define HANDLE_PRAGMA(GETC, UNGETC, NAME) handle_pragma (GETC, UNGETC, NAME)\n-extern int handle_pragma ();\n+extern int handle_pragma PARAMS ((int(*)(void), void (*)(int), const char *));\n \n /* Give methods pretty symbol names on NeXT. */\n \n@@ -320,10 +320,10 @@ extern int handle_pragma ();\n \n #undef\tSECTION_FUNCTION\n #define SECTION_FUNCTION(FUNCTION, SECTION, DIRECTIVE, WAS_TEXT, OBJC)\t\\\n+extern void FUNCTION PARAMS ((void));\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n FUNCTION ()\t\t\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  extern void objc_section_init ();\t\t\t\t\t\\\n   extern int flag_no_mach_text_sections;\t\t\t\t\\\n   \t\t\t\t\t\t\t\t\t\\\n   if (WAS_TEXT && flag_no_mach_text_sections)       \t\t\t\\\n@@ -353,6 +353,7 @@ FUNCTION ()\t\t\t\t\t\t\t\t\\\n \n #undef\tEXTRA_SECTION_FUNCTIONS\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\\\n+extern void objc_section_init PARAMS ((void));\t\\\n SECTION_FUNCTION (const_section,\t\t\\\n \t\t  in_const,\t\t\t\\\n \t\t  \".const\", 1, 0)\t\t\\"}]}