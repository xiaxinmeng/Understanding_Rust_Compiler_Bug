{"sha": "e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "node_id": "C_kwDOANBUbNoAKGUxMmY2NmQ5NmZlNDFjOGVmOGEwZDAxYjZhODM5NGNkNmJjZTM5Nzg", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-17T04:59:03Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-09-28T20:01:14Z"}, "message": "c: [PR32122] Require pointer types for computed gotos\n\nSo GCC has always accepted non-pointer types in computed gotos but\nthat was wrong based on the documentation:\nAny expression of type void * is allowed.\n\nSo this fixes the problem by requiring the type to\nbe a pointer type.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR c/32122\n\ngcc/c/ChangeLog:\n\n\t* c-parser.c (c_parser_statement_after_labels): Pass\n\tthe c_expr instead of the tree to c_finish_goto_ptr.\n\t* c-typeck.c (c_finish_goto_ptr): Change the second\n\targument type to c_expr.\n\t* c-tree.h (c_finish_goto_ptr): Likewise.\n\tError out if the expression was not of a pointer type.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/comp-goto-5.c: New test.\n\t* gcc.dg/comp-goto-6.c: New test.", "tree": {"sha": "fa2b27371e00155ebf3f6ee89a78f8cee7ffb4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa2b27371e00155ebf3f6ee89a78f8cee7ffb4a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44c5f3d9f46705a262911c2098c1568d7e8ac2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c44c5f3d9f46705a262911c2098c1568d7e8ac2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c44c5f3d9f46705a262911c2098c1568d7e8ac2d"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "21ff25d3b2c1622a99fa78e3a4e979073c95c9fc", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "patch": "@@ -6141,7 +6141,7 @@ c_parser_statement_after_labels (c_parser *parser, bool *if_p,\n \t      c_parser_consume_token (parser);\n \t      val = c_parser_expression (parser);\n \t      val = convert_lvalue_to_rvalue (loc, val, false, true);\n-\t      stmt = c_finish_goto_ptr (loc, val.value);\n+\t      stmt = c_finish_goto_ptr (loc, val);\n \t    }\n \t  else\n \t    c_parser_error (parser, \"expected identifier or %<*%>\");"}, {"sha": "a046c6b092684527c7c1f363b9a6c4231b2f6842", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "patch": "@@ -746,7 +746,7 @@ extern tree c_finish_expr_stmt (location_t, tree);\n extern tree c_finish_return (location_t, tree, tree);\n extern tree c_finish_bc_stmt (location_t, tree, bool);\n extern tree c_finish_goto_label (location_t, tree);\n-extern tree c_finish_goto_ptr (location_t, tree);\n+extern tree c_finish_goto_ptr (location_t, c_expr val);\n extern tree c_expr_to_decl (tree, bool *, bool *);\n extern tree c_finish_omp_construct (location_t, enum tree_code, tree, tree);\n extern tree c_finish_oacc_data (location_t, tree, tree);"}, {"sha": "b472e448011ef11878763b0294cafd1d7f6e6da8", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "patch": "@@ -10783,10 +10783,19 @@ c_finish_goto_label (location_t loc, tree label)\n    the GOTO.  */\n \n tree\n-c_finish_goto_ptr (location_t loc, tree expr)\n+c_finish_goto_ptr (location_t loc, c_expr val)\n {\n+  tree expr = val.value;\n   tree t;\n   pedwarn (loc, OPT_Wpedantic, \"ISO C forbids %<goto *expr;%>\");\n+  if (expr != error_mark_node\n+      && !POINTER_TYPE_P (TREE_TYPE (expr))\n+      && !null_pointer_constant_p (expr))\n+    {\n+      error_at (val.get_location (),\n+\t\t\"computed goto must be pointer type\");\n+      expr = build_zero_cst (ptr_type_node);\n+    }\n   expr = c_fully_fold (expr, false, NULL);\n   expr = convert (ptr_type_node, expr);\n   t = build1 (GOTO_EXPR, void_type_node, expr);"}, {"sha": "d487729a5d4bd7020d29f53a3a1a6e2788dd87e3", "filename": "gcc/testsuite/gcc.dg/comp-goto-5.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-5.c?ref=e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "patch": "@@ -0,0 +1,11 @@\n+/* PR c/32122 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+enum {a=1};\n+void foo()\n+{\n+  goto *\n+        a; /* { dg-error \"computed goto must be pointer type\" } */\n+}\n+"}, {"sha": "497f6cd76ca4037eb16b97a8dbdc89ecfabf3271", "filename": "gcc/testsuite/gcc.dg/comp-goto-6.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcomp-goto-6.c?ref=e12f66d96fe41c8ef8a0d01b6a8394cd6bce3978", "patch": "@@ -0,0 +1,6 @@\n+/* PR c/32122 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+void foo(void *a) { goto *10000000; } /* { dg-error \"computed goto must be pointer type\" } */\n+void foo1(void *a) { goto *a; }\n+"}]}