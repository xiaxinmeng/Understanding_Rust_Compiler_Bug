{"sha": "1af4bba82ed51ba8108d40badd3d39204f810838", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmNGJiYTgyZWQ1MWJhODEwOGQ0MGJhZGQzZDM5MjA0ZjgxMDgzOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-08-21T01:53:11Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-08-21T01:53:11Z"}, "message": "tree-ssa-alias.c (eq_ptr_info, [...]): New function.\n\n\t* tree-ssa-alias.c (eq_ptr_info, ptr_info_hash): New function.\n\t(create_name_tags): Instead of quadratic checking use hashtable.\n\t* bitmap.h: Include hashtab.h.\n\t(bitmap_hash): Declare.\n\t* bitmap.c (bitmap_hash): New function.\n\nFrom-SVN: r116285", "tree": {"sha": "a77296eaee0dcde8be19fcb23b3aaf14b92825ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77296eaee0dcde8be19fcb23b3aaf14b92825ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af4bba82ed51ba8108d40badd3d39204f810838", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4bba82ed51ba8108d40badd3d39204f810838", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af4bba82ed51ba8108d40badd3d39204f810838", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af4bba82ed51ba8108d40badd3d39204f810838/comments", "author": null, "committer": null, "parents": [{"sha": "70d539ce3a777b83d929c6de70b14a6eb7f3a100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70d539ce3a777b83d929c6de70b14a6eb7f3a100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70d539ce3a777b83d929c6de70b14a6eb7f3a100"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "bb37d46af010e11b4c0434efb5f487d3d3376765", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1af4bba82ed51ba8108d40badd3d39204f810838", "patch": "@@ -1,3 +1,11 @@\n+2006-08-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-ssa-alias.c (eq_ptr_info, ptr_info_hash): New function.\n+\t(create_name_tags): Instead of quadratic checking use hashtable.\n+\t* bitmap.h: Include hashtab.h.\n+\t(bitmap_hash): Declare.\n+\t* bitmap.c (bitmap_hash): New function.\n+\n 2006-08-20  Jan Hubicka  <jh@suse.cz>\n \n \tPR rtl-optimization/28071"}, {"sha": "4ac38b04c2b7b3cfa88f604b02f485af62de0b86", "filename": "gcc/bitmap.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=1af4bba82ed51ba8108d40badd3d39204f810838", "patch": "@@ -1520,4 +1520,21 @@ bitmap_print (FILE *file, bitmap head, const char *prefix, const char *suffix)\n   fputs (suffix, file);\n }\n \n+/* Compute hash of bitmap (for purposes of hashing).  */\n+hashval_t\n+bitmap_hash (bitmap head)\n+{\n+  bitmap_element *ptr;\n+  BITMAP_WORD hash = 0;\n+  int ix;\n+\n+  for (ptr = head->first; ptr; ptr = ptr->next)\n+    {\n+      hash ^= ptr->indx;\n+      for (ix = 0; ix != BITMAP_ELEMENT_WORDS; ix++)\n+\thash ^= ptr->bits[ix];\n+    }\n+  return (hashval_t)hash;\n+}\n+\n #include \"gt-bitmap.h\""}, {"sha": "3da58c5ba2b02967ea775dca938924f8f9d47d87", "filename": "gcc/bitmap.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=1af4bba82ed51ba8108d40badd3d39204f810838", "patch": "@@ -21,6 +21,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n #ifndef GCC_BITMAP_H\n #define GCC_BITMAP_H\n+#include \"hashtab.h\"\n \n /* Fundamental storage type for bitmap.  */\n \n@@ -164,6 +165,9 @@ extern void bitmap_obstack_free (bitmap);\n #define bitmap_zero(a) bitmap_clear (a)\n extern unsigned bitmap_first_set_bit (bitmap);\n \n+/* Compute bitmap hash (for purposes of hashing etc.)  */\n+extern hashval_t bitmap_hash(bitmap);\n+\n /* Allocate a bitmap from a bit obstack.  */\n #define BITMAP_ALLOC(OBSTACK) bitmap_obstack_alloc (OBSTACK)\n "}, {"sha": "cf5ed4e1669cf33db7be6eb03ae55fe71f53b1ca", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af4bba82ed51ba8108d40badd3d39204f810838/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1af4bba82ed51ba8108d40badd3d39204f810838", "patch": "@@ -987,6 +987,23 @@ delete_alias_info (struct alias_info *ai)\n   delete_points_to_sets ();\n }\n \n+/* Used for hashing to identify pointer infos with identical\n+   pt_vars bitmaps.  */\n+static int\n+eq_ptr_info (const void *p1, const void *p2)\n+{\n+  const struct ptr_info_def *n1 = (const struct ptr_info_def *) p1;\n+  const struct ptr_info_def *n2 = (const struct ptr_info_def *) p2;\n+  return bitmap_equal_p (n1->pt_vars, n2->pt_vars);\n+}\n+\n+static hashval_t\n+ptr_info_hash (const void *p)\n+{\n+  const struct ptr_info_def *n = (const struct ptr_info_def *) p;\n+  return bitmap_hash (n->pt_vars);\n+}\n+\n /* Create name tags for all the pointers that have been dereferenced.\n    We only create a name tag for a pointer P if P is found to point to\n    a set of variables (so that we can alias them to *P) or if it is\n@@ -1002,6 +1019,7 @@ create_name_tags (void)\n   size_t i;\n   VEC (tree, heap) *with_ptvars = NULL;\n   tree ptr;\n+  htab_t ptr_hash;\n \n   /* Collect the list of pointers with a non-empty points to set.  */\n   for (i = 1; i < num_ssa_names; i++)\n@@ -1036,15 +1054,15 @@ create_name_tags (void)\n   if (!with_ptvars)\n     return;\n \n+  ptr_hash = htab_create (10, ptr_info_hash, eq_ptr_info, NULL);\n   /* Now go through the pointers with pt_vars, and find a name tag\n      with the same pt_vars as this pointer, or create one if one\n      doesn't exist.  */\n   for (i = 0; VEC_iterate (tree, with_ptvars, i, ptr); i++)\n     {\n       struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr);\n-      size_t j;\n-      tree ptr2;\n       tree old_name_tag = pi->name_mem_tag;\n+      struct ptr_info_def **slot;\n       \n       /* If PTR points to a set of variables, check if we don't\n \t have another pointer Q with the same points-to set before\n@@ -1057,22 +1075,19 @@ create_name_tags (void)\n \t problems if they both had different name tags because\n \t they would have different SSA version numbers (which\n \t would force us to take the name tags in and out of SSA).  */\n-      for (j = 0; j < i && VEC_iterate (tree, with_ptvars, j, ptr2); j++)\n+\n+      slot = (struct ptr_info_def **) htab_find_slot (ptr_hash, pi, INSERT);\n+      if (*slot)\n+        pi->name_mem_tag = (*slot)->name_mem_tag;\n+      else\n \t{\n-\t  struct ptr_info_def *qi = SSA_NAME_PTR_INFO (ptr2);\n-\t  \n-\t  if (bitmap_equal_p (pi->pt_vars, qi->pt_vars))\n-\t    {\n-\t      pi->name_mem_tag = qi->name_mem_tag;\n-\t      break;\n-\t    }\n+\t  *slot = pi;\n+\t  /* If we didn't find a pointer with the same points-to set\n+\t     as PTR, create a new name tag if needed.  */\n+\t  if (pi->name_mem_tag == NULL_TREE)\n+\t    pi->name_mem_tag = get_nmt_for (ptr);\n \t}\n       \n-      /* If we didn't find a pointer with the same points-to set\n-\t as PTR, create a new name tag if needed.  */\n-      if (pi->name_mem_tag == NULL_TREE)\n-\tpi->name_mem_tag = get_nmt_for (ptr);\n-      \n       /* If the new name tag computed for PTR is different than\n \t the old name tag that it used to have, then the old tag\n \t needs to be removed from the IL, so we mark it for\n@@ -1086,6 +1101,7 @@ create_name_tags (void)\n       /* Mark the new name tag for renaming.  */\n       mark_sym_for_renaming (pi->name_mem_tag);\n     }\n+  htab_delete (ptr_hash);\n \n   VEC_free (tree, heap, with_ptvars);\n }"}]}