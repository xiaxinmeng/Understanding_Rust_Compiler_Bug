{"sha": "a98480ddbbe03479ae6606ed674de2999e24c022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk4NDgwZGRiYmUwMzQ3OWFlNjYwNmVkNjc0ZGUyOTk5ZTI0YzAyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:47:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-07T13:47:31Z"}, "message": "[multiple changes]\n\n2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Issue an error regardless of the\n\tSPARK_Mode when a ghost type is effectively volatile.\n\t* sem_ch3.adb (Analyze_Object_Contract): Decouple the checks\n\trelated to Ghost from SPARK_Mode.\n\t* sem_res.adb (Check_Ghost_Policy): Issue an error regardless\n\tof the SPARK_Mode when the Ghost policies do not match.\n\t* sem_util.adb (Check_Ghost_Completion): Issue an error regardless\n\tof the SPARK_Mode when the Ghost policies do not match.\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch5.adb (Analyze_Iterator_Specification): return if name\n\tin iterator does not have any usable aspect for iteration.\n\n2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Null_Procedure): Reject a null procedure\n\tthat there is a previous null procedure in scope with a matching\n\tprofile.\n\n2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* atree.adb (Copy_Separate_Tree): Copy the aspect specifications.\n\t* inline.adb (Has_Some_Contract): Do the check only when the\n\trelated entity has been analyzed.\n\nFrom-SVN: r217224", "tree": {"sha": "64a829e3ff948170473eeee464b5cd264f7144fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a829e3ff948170473eeee464b5cd264f7144fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a98480ddbbe03479ae6606ed674de2999e24c022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98480ddbbe03479ae6606ed674de2999e24c022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a98480ddbbe03479ae6606ed674de2999e24c022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a98480ddbbe03479ae6606ed674de2999e24c022/comments", "author": null, "committer": null, "parents": [{"sha": "e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8de1a820f28cfdd7b8a588dd28277cc8db25ce3"}], "stats": {"total": 192, "additions": 116, "deletions": 76}, "files": [{"sha": "3386f6a9911a5d2af29966df5eee84639891e840", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -1,3 +1,31 @@\n+2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Issue an error regardless of the\n+\tSPARK_Mode when a ghost type is effectively volatile.\n+\t* sem_ch3.adb (Analyze_Object_Contract): Decouple the checks\n+\trelated to Ghost from SPARK_Mode.\n+\t* sem_res.adb (Check_Ghost_Policy): Issue an error regardless\n+\tof the SPARK_Mode when the Ghost policies do not match.\n+\t* sem_util.adb (Check_Ghost_Completion): Issue an error regardless\n+\tof the SPARK_Mode when the Ghost policies do not match.\n+\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Iterator_Specification): return if name\n+\tin iterator does not have any usable aspect for iteration.\n+\n+2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Null_Procedure): Reject a null procedure\n+\tthat there is a previous null procedure in scope with a matching\n+\tprofile.\n+\n+2014-11-07  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* atree.adb (Copy_Separate_Tree): Copy the aspect specifications.\n+\t* inline.adb (Has_Some_Contract): Do the check only when the\n+\trelated entity has been analyzed.\n+\n 2014-11-07  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_fixd.adb (Expand_Multiply_Fixed_By_Fixed_Giving_Integer):"}, {"sha": "eb196e4fa1c59f45ae0ffe9b0cf1d4e0194271c4", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -892,6 +892,16 @@ package body Atree is\n          Set_Field4 (New_Id, Possible_Copy (Field4 (New_Id)));\n          Set_Field5 (New_Id, Possible_Copy (Field5 (New_Id)));\n \n+         --  Explicitly copy the aspect specifications as those do not reside\n+         --  in a node field.\n+\n+         if Permits_Aspect_Specifications (Source)\n+           and then Has_Aspects (Source)\n+         then\n+            Set_Aspect_Specifications\n+              (New_Id, Copy_List (Aspect_Specifications (Source)));\n+         end if;\n+\n          --  Set Entity field to Empty to ensure that no entity references\n          --  are shared between the two, if the source is already analyzed.\n "}, {"sha": "9ba6f24c734f1fc6fd2d644a1413f508e88cee12", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 19, "deletions": 34, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -2398,6 +2398,24 @@ package body Freeze is\n                         Set_Has_Non_Standard_Rep (Base_Type (Arr), True);\n                         Set_Is_Bit_Packed_Array  (Base_Type (Arr), True);\n                         Set_Is_Packed            (Base_Type (Arr), True);\n+\n+                        --  Make sure that we have the necessary routines to\n+                        --  implement the packing, and complain now if not.\n+\n+                        declare\n+                           CS : constant Int   := UI_To_Int (Csiz);\n+                           RE : constant RE_Id := Get_Id (CS);\n+\n+                        begin\n+                           if RE /= RE_Null\n+                             and then not RTE_Available (RE)\n+                           then\n+                              Error_Msg_CRT\n+                                (\"packing of \" & UI_Image (Csiz)\n+                                 & \"-bit components\",\n+                                 First_Subtype (Etype (Arr)));\n+                           end if;\n+                        end;\n                      end if;\n                   end;\n                end if;\n@@ -2650,37 +2668,6 @@ package body Freeze is\n             Create_Packed_Array_Impl_Type (Arr);\n             Freeze_And_Append (Packed_Array_Impl_Type (Arr), N, Result);\n \n-            --  Make sure that we have the necessary routines to implement the\n-            --  packing, and complain now if not. Note that we only test this\n-            --  for constrained array types.\n-\n-            if Is_Constrained (Arr)\n-              and then Is_Bit_Packed_Array (Arr)\n-              and then Present (Packed_Array_Impl_Type (Arr))\n-              and then Is_Array_Type (Packed_Array_Impl_Type (Arr))\n-            then\n-               declare\n-                  CS : constant Uint  := Component_Size (Arr);\n-                  RE : constant RE_Id := Get_Id (UI_To_Int (CS));\n-\n-               begin\n-                  if RE /= RE_Null\n-                    and then not RTE_Available (RE)\n-                  then\n-                     Error_Msg_CRT\n-                       (\"packing of \" & UI_Image (CS) & \"-bit components\",\n-                        First_Subtype (Etype (Arr)));\n-\n-                     --  Cancel the packing\n-\n-                     Set_Is_Packed (Base_Type (Arr), False);\n-                     Set_Is_Bit_Packed_Array (Base_Type (Arr), False);\n-                     Set_Packed_Array_Impl_Type (Arr, Empty);\n-                     goto Skip_Packed;\n-                  end if;\n-               end;\n-            end if;\n-\n             --  Size information of packed array type is copied to the array\n             --  type, since this is really the representation. But do not\n             --  override explicit existing size values. If the ancestor subtype\n@@ -2702,8 +2689,6 @@ package body Freeze is\n             end if;\n          end if;\n \n-         <<Skip_Packed>>\n-\n          --  For non-packed arrays set the alignment of the array to the\n          --  alignment of the component type if it is unknown. Skip this\n          --  in atomic case (atomic arrays may need larger alignments).\n@@ -4835,7 +4820,7 @@ package body Freeze is\n          if Is_Ghost_Entity (E)\n            and then Is_Effectively_Volatile (E)\n          then\n-            SPARK_Msg_N (\"ghost type & cannot be volatile\", E);\n+            Error_Msg_N (\"ghost type & cannot be volatile\", E);\n          end if;\n \n          --  Deal with special cases of freezing for subtype"}, {"sha": "812002b4ed07382790d754ffa08b7f184cecc2ad", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -1316,12 +1316,23 @@ package body Inline is\n       -----------------------\n \n       function Has_Some_Contract (Id : Entity_Id) return Boolean is\n-         Items : constant Node_Id := Contract (Id);\n+         Items : Node_Id;\n+\n       begin\n-         return Present (Items)\n-           and then (Present (Pre_Post_Conditions (Items)) or else\n-                     Present (Contract_Test_Cases (Items)) or else\n-                     Present (Classifications     (Items)));\n+         --  A call to an expression function may precede the actual body which\n+         --  is inserted at the end of the enclosing declarations. Ensure that\n+         --  the related entity is analyzed before inspecting the contract.\n+\n+         if Analyzed (Id) then\n+            Items := Contract (Id);\n+\n+            return Present (Items)\n+              and then (Present (Pre_Post_Conditions (Items)) or else\n+                        Present (Contract_Test_Cases (Items)) or else\n+                        Present (Classifications     (Items)));\n+         end if;\n+\n+         return False;\n       end Has_Some_Contract;\n \n       -----------------------------"}, {"sha": "969283251e842c07466f9e8f1b9555cac900c7f3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -3185,24 +3185,22 @@ package body Sem_Ch3 is\n                      Obj_Id);\n                end if;\n             end if;\n+         end if;\n \n-            if Is_Ghost_Entity (Obj_Id) then\n+         if Is_Ghost_Entity (Obj_Id) then\n \n-               --  A Ghost object cannot be effectively volatile\n-               --  (SPARK RM 6.9(8)).\n+            --  A Ghost object cannot be effectively volatile (SPARK RM 6.9(8))\n \n-               if Is_Effectively_Volatile (Obj_Id) then\n-                  SPARK_Msg_N (\"ghost variable & cannot be volatile\", Obj_Id);\n+            if Is_Effectively_Volatile (Obj_Id) then\n+               Error_Msg_N (\"ghost variable & cannot be volatile\", Obj_Id);\n \n-               --  A Ghost object cannot be imported or exported\n-               --  (SPARK RM 6.9(8)).\n+            --  A Ghost object cannot be imported or exported (SPARK RM 6.9(8))\n \n-               elsif Is_Imported (Obj_Id) then\n-                  SPARK_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n+            elsif Is_Imported (Obj_Id) then\n+               Error_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n \n-               elsif Is_Exported (Obj_Id) then\n-                  SPARK_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n-               end if;\n+            elsif Is_Exported (Obj_Id) then\n+               Error_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n             end if;\n          end if;\n \n@@ -3256,10 +3254,10 @@ package body Sem_Ch3 is\n \n       if Is_Ghost_Entity (Obj_Id) then\n          if Is_Exported (Obj_Id) then\n-            SPARK_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n+            Error_Msg_N (\"ghost object & cannot be exported\", Obj_Id);\n \n          elsif Is_Imported (Obj_Id) then\n-            SPARK_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n+            Error_Msg_N (\"ghost object & cannot be imported\", Obj_Id);\n          end if;\n       end if;\n    end Analyze_Object_Contract;\n@@ -4788,8 +4786,6 @@ package body Sem_Ch3 is\n \n             when Class_Wide_Kind =>\n                Set_Ekind                (Id, E_Class_Wide_Subtype);\n-               Set_First_Entity         (Id, First_Entity       (T));\n-               Set_Last_Entity          (Id, Last_Entity        (T));\n                Set_Class_Wide_Type      (Id, Class_Wide_Type    (T));\n                Set_Cloned_Subtype       (Id, T);\n                Set_Is_Tagged_Type       (Id, True);"}, {"sha": "2a809be40f46de6b7a2e58df47215eb65e7c1776", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -2063,6 +2063,10 @@ package body Sem_Ch5 is\n                   Error_Msg_NE\n                     (\"\\to iterate directly over the elements of a container, \"\n                      & \"write `of &`\", Name (N), Original_Node (Name (N)));\n+\n+                  --  No point in continuing analysis of iterator spec.\n+\n+                  return;\n                end if;\n             end if;\n "}, {"sha": "8536aa6500719c7d9308549b64e7eff696e6b60d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -1453,6 +1453,11 @@ package body Sem_Ch6 is\n          --  there are various error checks that are applied on this body\n          --  when it is analyzed (e.g. correct aspect placement).\n \n+         if Has_Completion (Prev) then\n+            Error_Msg_Sloc := Sloc (Prev);\n+            Error_Msg_NE (\"duplicate body for & declared#\", N, Prev);\n+         end if;\n+\n          Is_Completion := True;\n          Rewrite (N, Null_Body);\n          Analyze (N);"}, {"sha": "0b295f9faa3c524b051fa7c4a5621430c3ed9501", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -846,16 +846,16 @@ package body Sem_Res is\n          if Is_Checked_Ghost_Entity (Id) and then Policy = Name_Ignore then\n             Error_Msg_Sloc := Sloc (Err_N);\n \n-            SPARK_Msg_N  (\"incompatible ghost policies in effect\", Err_N);\n-            SPARK_Msg_NE (\"\\& declared with ghost policy Check\", Err_N, Id);\n-            SPARK_Msg_NE (\"\\& used # with ghost policy Ignore\", Err_N, Id);\n+            Error_Msg_N  (\"incompatible ghost policies in effect\", Err_N);\n+            Error_Msg_NE (\"\\& declared with ghost policy Check\", Err_N, Id);\n+            Error_Msg_NE (\"\\& used # with ghost policy Ignore\", Err_N, Id);\n \n          elsif Is_Ignored_Ghost_Entity (Id) and then Policy = Name_Check then\n             Error_Msg_Sloc := Sloc (Err_N);\n \n-            SPARK_Msg_N  (\"incompatible ghost policies in effect\", Err_N);\n-            SPARK_Msg_NE (\"\\& declared with ghost policy Ignore\", Err_N, Id);\n-            SPARK_Msg_NE (\"\\& used # with ghost policy Check\", Err_N, Id);\n+            Error_Msg_N  (\"incompatible ghost policies in effect\", Err_N);\n+            Error_Msg_NE (\"\\& declared with ghost policy Ignore\", Err_N, Id);\n+            Error_Msg_NE (\"\\& used # with ghost policy Check\", Err_N, Id);\n          end if;\n       end Check_Ghost_Policy;\n \n@@ -873,7 +873,7 @@ package body Sem_Res is\n       --  its behavior or value.\n \n       else\n-         SPARK_Msg_N\n+         Error_Msg_N\n            (\"ghost entity cannot appear in this context (SPARK RM 6.9(12))\",\n             Ghost_Ref);\n       end if;\n@@ -7089,12 +7089,13 @@ package body Sem_Res is\n                  (\"volatile object cannot appear in this context \"\n                   & \"(SPARK RM 7.1.3(13))\", N);\n             end if;\n+         end if;\n+      end if;\n \n-         --  A Ghost entity must appear in a specific context\n+      --  A Ghost entity must appear in a specific context\n \n-         elsif Is_Ghost_Entity (E) and then Comes_From_Source (N) then\n-            Check_Ghost_Context (E, N);\n-         end if;\n+      if Is_Ghost_Entity (E) and then Comes_From_Source (N) then\n+         Check_Ghost_Context (E, N);\n       end if;\n    end Resolve_Entity_Name;\n "}, {"sha": "fc160e17d361ac3df0642b6f624f60aaf43d3d51", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a98480ddbbe03479ae6606ed674de2999e24c022/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=a98480ddbbe03479ae6606ed674de2999e24c022", "patch": "@@ -2688,18 +2688,18 @@ package body Sem_Util is\n       then\n          Error_Msg_Sloc := Sloc (Full_View);\n \n-         SPARK_Msg_N (\"incompatible ghost policies in effect\",   Partial_View);\n-         SPARK_Msg_N (\"\\& declared with ghost policy Check\",     Partial_View);\n-         SPARK_Msg_N (\"\\& completed # with ghost policy Ignore\", Partial_View);\n+         Error_Msg_N (\"incompatible ghost policies in effect\",   Partial_View);\n+         Error_Msg_N (\"\\& declared with ghost policy Check\",     Partial_View);\n+         Error_Msg_N (\"\\& completed # with ghost policy Ignore\", Partial_View);\n \n       elsif Is_Ignored_Ghost_Entity (Partial_View)\n         and then Policy = Name_Check\n       then\n          Error_Msg_Sloc := Sloc (Full_View);\n \n-         SPARK_Msg_N (\"incompatible ghost policies in effect\",  Partial_View);\n-         SPARK_Msg_N (\"\\& declared with ghost policy Ignore\",   Partial_View);\n-         SPARK_Msg_N (\"\\& completed # with ghost policy Check\", Partial_View);\n+         Error_Msg_N (\"incompatible ghost policies in effect\",  Partial_View);\n+         Error_Msg_N (\"\\& declared with ghost policy Ignore\",   Partial_View);\n+         Error_Msg_N (\"\\& completed # with ghost policy Check\", Partial_View);\n       end if;\n    end Check_Ghost_Completion;\n \n@@ -2722,8 +2722,8 @@ package body Sem_Util is\n       --  The parent type of a Ghost type extension must be Ghost\n \n       elsif not Is_Ghost_Entity (Parent_Typ) then\n-         SPARK_Msg_N  (\"type extension & cannot be ghost\", Typ);\n-         SPARK_Msg_NE (\"\\parent type & is not ghost\", Typ, Parent_Typ);\n+         Error_Msg_N  (\"type extension & cannot be ghost\", Typ);\n+         Error_Msg_NE (\"\\parent type & is not ghost\", Typ, Parent_Typ);\n          return;\n       end if;\n \n@@ -2735,8 +2735,8 @@ package body Sem_Util is\n             Iface := Node (Iface_Elmt);\n \n             if not Is_Ghost_Entity (Iface) then\n-               SPARK_Msg_N  (\"type extension & cannot be ghost\", Typ);\n-               SPARK_Msg_NE (\"\\interface type & is not ghost\", Typ, Iface);\n+               Error_Msg_N  (\"type extension & cannot be ghost\", Typ);\n+               Error_Msg_NE (\"\\interface type & is not ghost\", Typ, Iface);\n                return;\n             end if;\n "}]}