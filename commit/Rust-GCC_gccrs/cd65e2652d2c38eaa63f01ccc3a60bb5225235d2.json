{"sha": "cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Q2NWUyNjUyZDJjMzhlYWE2M2YwMWNjYzNhNjBiYjUyMjUyMzVkMg==", "commit": {"author": {"name": "Dennis Zhang", "email": "dennis.zhang@arm.com", "date": "2019-06-28T08:42:09Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-06-28T08:42:09Z"}, "message": "[Arm] Remove constraint strings from define_expand constructs in the back end\n\nA number of Arm define_expand patterns have specified constraints for\ntheir operands. But the constraint strings are ignored at expand time\nand are therefore redundant/useless. We now avoid specifying constraints\nin new define_expands, but we should clean up the existing define_expand\ndefinitions.\n\n2019-06-28  Dennis Zhang  <dennis.zhang@arm.com>\n\n        * config/arm/arm.md: Remove redundant constraints from\n        define_expand but leave reload_inm and reload_outm patterns\n        untouched since they need special constraints to work.\n        * config/arm/arm-fixed.md: Remove redundant constraints from\n        define_expand.\n        * config/arm/iwmmxt.md: Likewise.\n        * config/arm/neon.md: Likewise.\n        * config/arm/sync.md: Likewise.\n        * config/arm/thumb1.md: Likewise.\n        * config/arm/vec-common.md: Likewise.\n\nFrom-SVN: r272779", "tree": {"sha": "2946c42737d359f3725667360d353672df17d405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2946c42737d359f3725667360d353672df17d405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/comments", "author": null, "committer": null, "parents": [{"sha": "494cd9e8050006089381f5361953f5cecb5de861", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/494cd9e8050006089381f5361953f5cecb5de861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/494cd9e8050006089381f5361953f5cecb5de861"}], "stats": {"total": 1252, "additions": 634, "deletions": 618}, "files": [{"sha": "898b5a1d10c9ee030a8d28983502eff4ed9983e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -1,3 +1,16 @@\n+2019-06-28  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/arm/arm.md: Remove redundant constraints from\n+\tdefine_expand but leave reload_inm and reload_outm patterns\n+\tuntouched since they need special constraints to work.\n+\t* config/arm/arm-fixed.md: Remove redundant constraints from\n+\tdefine_expand.\n+\t* config/arm/iwmmxt.md: Likewise.\n+\t* config/arm/neon.md: Likewise.\n+\t* config/arm/sync.md: Likewise.\n+\t* config/arm/thumb1.md: Likewise.\n+\t* config/arm/vec-common.md: Likewise.\n+\n 2019-06-27  Ilia Diachkov  <ilia.diachkov@optimitech.com>\n \n \t* doc/install.texi: Document --disable-tm-clone-registry."}, {"sha": "fcab40d13f634a678ea6dffa3406c155998f720f", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -98,9 +98,9 @@\n ; Note: none of these do any rounding.\n \n (define_expand \"mulqq3\"\n-  [(set (match_operand:QQ 0 \"s_register_operand\" \"\")\n-\t(mult:QQ (match_operand:QQ 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:QQ 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:QQ 0 \"s_register_operand\")\n+\t(mult:QQ (match_operand:QQ 1 \"s_register_operand\")\n+\t\t (match_operand:QQ 2 \"s_register_operand\")))]\n   \"TARGET_DSP_MULTIPLY && arm_arch_thumb2\"\n {\n   rtx tmp1 = gen_reg_rtx (HImode);\n@@ -116,9 +116,9 @@\n })\n \n (define_expand \"mulhq3\"\n-  [(set (match_operand:HQ 0 \"s_register_operand\" \"\")\n-\t(mult:HQ (match_operand:HQ 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:HQ 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:HQ 0 \"s_register_operand\")\n+\t(mult:HQ (match_operand:HQ 1 \"s_register_operand\")\n+\t\t (match_operand:HQ 2 \"s_register_operand\")))]\n   \"TARGET_DSP_MULTIPLY && arm_arch_thumb2\"\n {\n   rtx tmp = gen_reg_rtx (SImode);\n@@ -134,9 +134,9 @@\n })\n \n (define_expand \"mulsq3\"\n-  [(set (match_operand:SQ 0 \"s_register_operand\" \"\")\n-\t(mult:SQ (match_operand:SQ 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SQ 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SQ 0 \"s_register_operand\")\n+\t(mult:SQ (match_operand:SQ 1 \"s_register_operand\")\n+\t\t (match_operand:SQ 2 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n@@ -156,9 +156,9 @@\n ;; Accumulator multiplies.\n \n (define_expand \"mulsa3\"\n-  [(set (match_operand:SA 0 \"s_register_operand\" \"\")\n-\t(mult:SA (match_operand:SA 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SA 0 \"s_register_operand\")\n+\t(mult:SA (match_operand:SA 1 \"s_register_operand\")\n+\t\t (match_operand:SA 2 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n@@ -175,9 +175,9 @@\n })\n \n (define_expand \"mulusa3\"\n-  [(set (match_operand:USA 0 \"s_register_operand\" \"\")\n-\t(mult:USA (match_operand:USA 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:USA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:USA 0 \"s_register_operand\")\n+\t(mult:USA (match_operand:USA 1 \"s_register_operand\")\n+\t\t  (match_operand:USA 2 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n@@ -317,9 +317,9 @@\n \t\t      (const_int 32)))])\n \n (define_expand \"mulha3\"\n-  [(set (match_operand:HA 0 \"s_register_operand\" \"\")\n-\t(mult:HA (match_operand:HA 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:HA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:HA 0 \"s_register_operand\")\n+\t(mult:HA (match_operand:HA 1 \"s_register_operand\")\n+\t\t (match_operand:HA 2 \"s_register_operand\")))]\n   \"TARGET_DSP_MULTIPLY && arm_arch_thumb2\"\n {\n   rtx tmp = gen_reg_rtx (SImode);\n@@ -333,9 +333,9 @@\n })\n \n (define_expand \"muluha3\"\n-  [(set (match_operand:UHA 0 \"s_register_operand\" \"\")\n-\t(mult:UHA (match_operand:UHA 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:UHA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:UHA 0 \"s_register_operand\")\n+\t(mult:UHA (match_operand:UHA 1 \"s_register_operand\")\n+\t\t  (match_operand:UHA 2 \"s_register_operand\")))]\n   \"TARGET_DSP_MULTIPLY\"\n {\n   rtx tmp1 = gen_reg_rtx (SImode);\n@@ -353,9 +353,9 @@\n })\n \n (define_expand \"ssmulha3\"\n-  [(set (match_operand:HA 0 \"s_register_operand\" \"\")\n-\t(ss_mult:HA (match_operand:HA 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:HA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:HA 0 \"s_register_operand\")\n+\t(ss_mult:HA (match_operand:HA 1 \"s_register_operand\")\n+\t\t    (match_operand:HA 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_DSP_MULTIPLY && arm_arch6\"\n {\n   rtx tmp = gen_reg_rtx (SImode);\n@@ -373,9 +373,9 @@\n })\n \n (define_expand \"usmuluha3\"\n-  [(set (match_operand:UHA 0 \"s_register_operand\" \"\")\n-\t(us_mult:UHA (match_operand:UHA 1 \"s_register_operand\" \"\")\n-\t\t     (match_operand:UHA 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:UHA 0 \"s_register_operand\")\n+\t(us_mult:UHA (match_operand:UHA 1 \"s_register_operand\")\n+\t\t     (match_operand:UHA 2 \"s_register_operand\")))]\n   \"TARGET_INT_SIMD\"\n {\n   rtx tmp1 = gen_reg_rtx (SImode);"}, {"sha": "8f4a4c26ea849a023f2e63d2efbf327423512dfc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 315, "deletions": 312, "changes": 627, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -444,9 +444,9 @@\n \n (define_expand \"adddi3\"\n  [(parallel\n-   [(set (match_operand:DI           0 \"s_register_operand\" \"\")\n-\t  (plus:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t           (match_operand:DI 2 \"arm_adddi_operand\"  \"\")))\n+   [(set (match_operand:DI           0 \"s_register_operand\")\n+\t  (plus:DI (match_operand:DI 1 \"s_register_operand\")\n+\t           (match_operand:DI 2 \"arm_adddi_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n@@ -573,9 +573,9 @@\n })\n \n (define_expand \"addsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"\")\n-\t(plus:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:SI          0 \"s_register_operand\")\n+\t(plus:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t (match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT && CONST_INT_P (operands[2]))\n@@ -1266,26 +1266,26 @@\n \")\n \n (define_expand \"addsf3\"\n-  [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n-\t(plus:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF          0 \"s_register_operand\")\n+\t(plus:SF (match_operand:SF 1 \"s_register_operand\")\n+\t\t (match_operand:SF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"adddf3\"\n-  [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n-\t(plus:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF          0 \"s_register_operand\")\n+\t(plus:DF (match_operand:DF 1 \"s_register_operand\")\n+\t\t (match_operand:DF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n \n (define_expand \"subdi3\"\n  [(parallel\n-   [(set (match_operand:DI            0 \"s_register_operand\" \"\")\n-\t  (minus:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t            (match_operand:DI 2 \"s_register_operand\" \"\")))\n+   [(set (match_operand:DI            0 \"s_register_operand\")\n+\t  (minus:DI (match_operand:DI 1 \"s_register_operand\")\n+\t            (match_operand:DI 2 \"s_register_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   \"\n@@ -1459,9 +1459,9 @@\n )\n \n (define_expand \"subsi3\"\n-  [(set (match_operand:SI           0 \"s_register_operand\" \"\")\n-\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SI           0 \"s_register_operand\")\n+\t(minus:SI (match_operand:SI 1 \"reg_or_int_operand\")\n+\t\t  (match_operand:SI 2 \"s_register_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[1]))\n@@ -1562,17 +1562,17 @@\n )\n \n (define_expand \"subsf3\"\n-  [(set (match_operand:SF           0 \"s_register_operand\" \"\")\n-\t(minus:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:SF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF           0 \"s_register_operand\")\n+\t(minus:SF (match_operand:SF 1 \"s_register_operand\")\n+\t\t  (match_operand:SF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"subdf3\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"\")\n-\t(minus:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:DF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF           0 \"s_register_operand\")\n+\t(minus:DF (match_operand:DF 1 \"s_register_operand\")\n+\t\t  (match_operand:DF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n@@ -1581,9 +1581,9 @@\n ;; Multiplication insns\n \n (define_expand \"mulhi3\"\n-  [(set (match_operand:HI 0 \"s_register_operand\" \"\")\n-\t(mult:HI (match_operand:HI 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:HI 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:HI 0 \"s_register_operand\")\n+\t(mult:HI (match_operand:HI 1 \"s_register_operand\")\n+\t\t (match_operand:HI 2 \"s_register_operand\")))]\n   \"TARGET_DSP_MULTIPLY\"\n   \"\n   {\n@@ -1595,9 +1595,9 @@\n )\n \n (define_expand \"mulsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"\")\n-\t(mult:SI (match_operand:SI 2 \"s_register_operand\" \"\")\n-\t\t (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SI          0 \"s_register_operand\")\n+\t(mult:SI (match_operand:SI 2 \"s_register_operand\")\n+\t\t (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_EITHER\"\n   \"\"\n )\n@@ -1783,12 +1783,12 @@\n )\n \n (define_expand \"maddsidi4\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n \t(plus:DI\n \t (mult:DI\n-\t  (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n-\t (match_operand:DI 3 \"s_register_operand\" \"\")))]\n+\t  (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n+\t (match_operand:DI 3 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n   \"\")\n \n@@ -1825,10 +1825,10 @@\n ;; expander and two different starred insns.\n \n (define_expand \"mulsidi3\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n \t(mult:DI\n-\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))))]\n+\t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\"))))]\n   \"TARGET_32BIT\"\n   \"\"\n )\n@@ -1856,10 +1856,10 @@\n )\n \n (define_expand \"umulsidi3\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n \t(mult:DI\n-\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))))]\n+\t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\"))))]\n   \"TARGET_32BIT\"\n   \"\"\n )\n@@ -1887,12 +1887,12 @@\n )\n \n (define_expand \"umaddsidi4\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n \t(plus:DI\n \t (mult:DI\n-\t  (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n-\t (match_operand:DI 3 \"s_register_operand\" \"\")))]\n+\t  (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n+\t (match_operand:DI 3 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n   \"\")\n \n@@ -1924,12 +1924,12 @@\n \n (define_expand \"smulsi3_highpart\"\n   [(parallel\n-    [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+    [(set (match_operand:SI 0 \"s_register_operand\")\n \t  (truncate:SI\n \t   (lshiftrt:DI\n \t    (mult:DI\n-\t     (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t     (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n+\t     (sign_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t     (sign_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n \t    (const_int 32))))\n      (clobber (match_scratch:SI 3 \"\"))])]\n   \"TARGET_32BIT\"\n@@ -1968,12 +1968,12 @@\n \n (define_expand \"umulsi3_highpart\"\n   [(parallel\n-    [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+    [(set (match_operand:SI 0 \"s_register_operand\")\n \t  (truncate:SI\n \t   (lshiftrt:DI\n \t    (mult:DI\n-\t     (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n-\t      (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n+\t     (zero_extend:DI (match_operand:SI 1 \"s_register_operand\"))\n+\t      (zero_extend:DI (match_operand:SI 2 \"s_register_operand\")))\n \t    (const_int 32))))\n      (clobber (match_scratch:SI 3 \"\"))])]\n   \"TARGET_32BIT\"\n@@ -2152,34 +2152,34 @@\n    (set_attr \"predicable\" \"yes\")])\n \n (define_expand \"mulsf3\"\n-  [(set (match_operand:SF          0 \"s_register_operand\" \"\")\n-\t(mult:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:SF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF          0 \"s_register_operand\")\n+\t(mult:SF (match_operand:SF 1 \"s_register_operand\")\n+\t\t (match_operand:SF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"muldf3\"\n-  [(set (match_operand:DF          0 \"s_register_operand\" \"\")\n-\t(mult:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t (match_operand:DF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF          0 \"s_register_operand\")\n+\t(mult:DF (match_operand:DF 1 \"s_register_operand\")\n+\t\t (match_operand:DF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n \f\n ;; Division insns\n \n (define_expand \"divsf3\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(div:SF (match_operand:SF 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:SF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"s_register_operand\")\n+\t(div:SF (match_operand:SF 1 \"s_register_operand\")\n+\t\t(match_operand:SF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_expand \"divdf3\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(div:DF (match_operand:DF 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DF 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"s_register_operand\")\n+\t(div:DF (match_operand:DF 1 \"s_register_operand\")\n+\t\t(match_operand:DF 2 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \f\n@@ -2270,9 +2270,9 @@\n )\n \n (define_expand \"anddi3\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n-\t(and:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"neon_inv_logic_op2\" \"\")))]\n+  [(set (match_operand:DI         0 \"s_register_operand\")\n+\t(and:DI (match_operand:DI 1 \"s_register_operand\")\n+\t\t(match_operand:DI 2 \"neon_inv_logic_op2\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (!TARGET_NEON && !TARGET_IWMMXT)\n@@ -2374,9 +2374,9 @@\n )\n \n (define_expand \"andsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(and:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(and:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT)\n@@ -2727,10 +2727,10 @@\n ;;; this insv pattern, so this pattern needs to be reevalutated.\n \n (define_expand \"insv\"\n-  [(set (zero_extract (match_operand 0 \"nonimmediate_operand\" \"\")\n-                      (match_operand 1 \"general_operand\" \"\")\n-                      (match_operand 2 \"general_operand\" \"\"))\n-        (match_operand 3 \"reg_or_int_operand\" \"\"))]\n+  [(set (zero_extract (match_operand 0 \"nonimmediate_operand\")\n+                      (match_operand 1 \"general_operand\")\n+                      (match_operand 2 \"general_operand\"))\n+        (match_operand 3 \"reg_or_int_operand\"))]\n   \"TARGET_ARM || arm_arch_thumb2\"\n   \"\n   {\n@@ -3151,9 +3151,9 @@\n )\n \n (define_expand \"iordi3\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n-\t(ior:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"neon_logic_op2\" \"\")))]\n+  [(set (match_operand:DI         0 \"s_register_operand\")\n+\t(ior:DI (match_operand:DI 1 \"s_register_operand\")\n+\t\t(match_operand:DI 2 \"neon_logic_op2\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (!TARGET_NEON && !TARGET_IWMMXT)\n@@ -3246,9 +3246,9 @@\n )\n \n (define_expand \"iorsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(ior:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(ior:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2]))\n@@ -3348,9 +3348,9 @@\n )\n \n (define_expand \"xordi3\"\n-  [(set (match_operand:DI         0 \"s_register_operand\" \"\")\n-\t(xor:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:DI 2 \"arm_xordi_operand\" \"\")))]\n+  [(set (match_operand:DI         0 \"s_register_operand\")\n+\t(xor:DI (match_operand:DI 1 \"s_register_operand\")\n+\t\t(match_operand:DI 2 \"arm_xordi_operand\")))]\n   \"TARGET_32BIT\"\n   {\n     /* The iWMMXt pattern for xordi3 accepts only register operands but we want\n@@ -3445,9 +3445,9 @@\n )\n \n (define_expand \"xorsi3\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(xor:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(xor:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t(match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_EITHER\"\n   \"if (CONST_INT_P (operands[2]))\n     {\n@@ -3686,9 +3686,9 @@\n \n (define_expand \"smaxsi3\"\n   [(parallel [\n-    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t (smax:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"\")))\n+    (set (match_operand:SI 0 \"s_register_operand\")\n+\t (smax:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t  (match_operand:SI 2 \"arm_rhs_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_32BIT\"\n   \"\n@@ -3746,9 +3746,9 @@\n \n (define_expand \"sminsi3\"\n   [(parallel [\n-    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t (smin:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"\")))\n+    (set (match_operand:SI 0 \"s_register_operand\")\n+\t (smin:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t  (match_operand:SI 2 \"arm_rhs_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_32BIT\"\n   \"\n@@ -3796,9 +3796,9 @@\n \n (define_expand \"umaxsi3\"\n   [(parallel [\n-    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t (umax:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"\")))\n+    (set (match_operand:SI 0 \"s_register_operand\")\n+\t (umax:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t  (match_operand:SI 2 \"arm_rhs_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_32BIT\"\n   \"\"\n@@ -3829,9 +3829,9 @@\n \n (define_expand \"uminsi3\"\n   [(parallel [\n-    (set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t (umin:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"\")))\n+    (set (match_operand:SI 0 \"s_register_operand\")\n+\t (umin:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t  (match_operand:SI 2 \"arm_rhs_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_32BIT\"\n   \"\"\n@@ -4037,9 +4037,9 @@\n ;; Shift and rotation insns\n \n (define_expand \"ashldi3\"\n-  [(set (match_operand:DI            0 \"s_register_operand\" \"\")\n-        (ashift:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-                   (match_operand:SI 2 \"general_operand\" \"\")))]\n+  [(set (match_operand:DI            0 \"s_register_operand\")\n+        (ashift:DI (match_operand:DI 1 \"s_register_operand\")\n+                   (match_operand:SI 2 \"general_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (TARGET_NEON)\n@@ -4079,9 +4079,9 @@\n )\n \n (define_expand \"ashlsi3\"\n-  [(set (match_operand:SI            0 \"s_register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n+  [(set (match_operand:SI            0 \"s_register_operand\")\n+\t(ashift:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t   (match_operand:SI 2 \"arm_rhs_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n@@ -4094,9 +4094,9 @@\n )\n \n (define_expand \"ashrdi3\"\n-  [(set (match_operand:DI              0 \"s_register_operand\" \"\")\n-        (ashiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-                     (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:DI              0 \"s_register_operand\")\n+        (ashiftrt:DI (match_operand:DI 1 \"s_register_operand\")\n+                     (match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (TARGET_NEON)\n@@ -4130,9 +4130,9 @@\n )\n \n (define_expand \"ashrsi3\"\n-  [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n+  [(set (match_operand:SI              0 \"s_register_operand\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n@@ -4142,9 +4142,9 @@\n )\n \n (define_expand \"lshrdi3\"\n-  [(set (match_operand:DI              0 \"s_register_operand\" \"\")\n-        (lshiftrt:DI (match_operand:DI 1 \"s_register_operand\" \"\")\n-                     (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:DI              0 \"s_register_operand\")\n+        (lshiftrt:DI (match_operand:DI 1 \"s_register_operand\")\n+                     (match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (TARGET_NEON)\n@@ -4178,9 +4178,9 @@\n )\n \n (define_expand \"lshrsi3\"\n-  [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n+  [(set (match_operand:SI              0 \"s_register_operand\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (CONST_INT_P (operands[2])\n@@ -4193,9 +4193,9 @@\n )\n \n (define_expand \"rotlsi3\"\n-  [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n-\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_int_operand\" \"\")))]\n+  [(set (match_operand:SI              0 \"s_register_operand\")\n+\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t     (match_operand:SI 2 \"reg_or_int_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (CONST_INT_P (operands[2]))\n@@ -4210,9 +4210,9 @@\n )\n \n (define_expand \"rotrsi3\"\n-  [(set (match_operand:SI              0 \"s_register_operand\" \"\")\n-\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"arm_rhs_operand\" \"\")))]\n+  [(set (match_operand:SI              0 \"s_register_operand\")\n+\t(rotatert:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t     (match_operand:SI 2 \"arm_rhs_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT)\n@@ -4320,10 +4320,10 @@\n ;; to reduce register pressure later on.\n \n (define_expand \"extzv\"\n-  [(set (match_operand 0 \"s_register_operand\" \"\")\n-\t(zero_extract (match_operand 1 \"nonimmediate_operand\" \"\")\n-\t\t      (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (match_operand 3 \"const_int_operand\" \"\")))]\n+  [(set (match_operand 0 \"s_register_operand\")\n+\t(zero_extract (match_operand 1 \"nonimmediate_operand\")\n+\t\t      (match_operand 2 \"const_int_operand\")\n+\t\t      (match_operand 3 \"const_int_operand\")))]\n   \"TARGET_THUMB1 || arm_arch_thumb2\"\n   \"\n   {\n@@ -4401,20 +4401,20 @@\n ;; Helper for extzv, for the Thumb-1 register-shifts case.\n \n (define_expand \"extzv_t1\"\n-  [(set (match_operand:SI 4 \"s_register_operand\" \"\")\n-\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_int_operand\" \"\")))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 4 \"s_register_operand\")\n+\t(ashift:SI (match_operand:SI 1 \"nonimmediate_operand\")\n+\t\t   (match_operand:SI 2 \"const_int_operand\")))\n+   (set (match_operand:SI 0 \"s_register_operand\")\n \t(lshiftrt:SI (match_dup 4)\n-\t\t     (match_operand:SI 3 \"const_int_operand\" \"\")))]\n+\t\t     (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_THUMB1\"\n   \"\")\n \n (define_expand \"extv\"\n-  [(set (match_operand 0 \"s_register_operand\" \"\")\n-\t(sign_extract (match_operand 1 \"nonimmediate_operand\" \"\")\n-\t\t      (match_operand 2 \"const_int_operand\" \"\")\n-\t\t      (match_operand 3 \"const_int_operand\" \"\")))]\n+  [(set (match_operand 0 \"s_register_operand\")\n+\t(sign_extract (match_operand 1 \"nonimmediate_operand\")\n+\t\t      (match_operand 2 \"const_int_operand\")\n+\t\t      (match_operand 3 \"const_int_operand\")))]\n   \"arm_arch_thumb2\"\n {\n   HOST_WIDE_INT width = INTVAL (operands[2]);\n@@ -4472,10 +4472,10 @@\n ; Helper to expand register forms of extv with the proper modes.\n \n (define_expand \"extv_regsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(sign_extract:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n-\t\t\t (match_operand 2 \"const_int_operand\" \"\")\n-\t\t\t (match_operand 3 \"const_int_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(sign_extract:SI (match_operand:SI 1 \"s_register_operand\")\n+\t\t\t (match_operand 2 \"const_int_operand\")\n+\t\t\t (match_operand 3 \"const_int_operand\")))]\n   \"\"\n {\n })\n@@ -4676,8 +4676,8 @@\n \n (define_expand \"negdi2\"\n  [(parallel\n-   [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n-\t (neg:DI (match_operand:DI 1 \"s_register_operand\" \"\")))\n+   [(set (match_operand:DI 0 \"s_register_operand\")\n+\t (neg:DI (match_operand:DI 1 \"s_register_operand\")))\n     (clobber (reg:CC CC_REGNUM))])]\n   \"TARGET_EITHER\"\n   {\n@@ -4730,8 +4730,8 @@\n )\n \n (define_expand \"negsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(neg:SI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(neg:SI (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_EITHER\"\n   \"\"\n )\n@@ -4749,15 +4749,15 @@\n )\n \n (define_expand \"negsf2\"\n-  [(set (match_operand:SF         0 \"s_register_operand\" \"\")\n-\t(neg:SF (match_operand:SF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF         0 \"s_register_operand\")\n+\t(neg:SF (match_operand:SF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\"\n )\n \n (define_expand \"negdf2\"\n-  [(set (match_operand:DF         0 \"s_register_operand\" \"\")\n-\t(neg:DF (match_operand:DF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF         0 \"s_register_operand\")\n+\t(neg:DF (match_operand:DF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \n@@ -4881,8 +4881,8 @@\n \n (define_expand \"abssi2\"\n   [(parallel\n-    [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t  (abs:SI (match_operand:SI 1 \"s_register_operand\" \"\")))\n+    [(set (match_operand:SI         0 \"s_register_operand\")\n+\t  (abs:SI (match_operand:SI 1 \"s_register_operand\")))\n      (clobber (match_dup 2))])]\n   \"TARGET_EITHER\"\n   \"\n@@ -5010,32 +5010,32 @@\n )\n \n (define_expand \"abssf2\"\n-  [(set (match_operand:SF         0 \"s_register_operand\" \"\")\n-\t(abs:SF (match_operand:SF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF         0 \"s_register_operand\")\n+\t(abs:SF (match_operand:SF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_expand \"absdf2\"\n-  [(set (match_operand:DF         0 \"s_register_operand\" \"\")\n-\t(abs:DF (match_operand:DF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF         0 \"s_register_operand\")\n+\t(abs:DF (match_operand:DF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\")\n \n (define_expand \"sqrtsf2\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(sqrt:SF (match_operand:SF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"s_register_operand\")\n+\t(sqrt:SF (match_operand:SF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\")\n \n (define_expand \"sqrtdf2\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(sqrt:DF (match_operand:DF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"s_register_operand\")\n+\t(sqrt:DF (match_operand:DF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \n (define_expand \"one_cmpldi2\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n-\t(not:DI (match_operand:DI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n+\t(not:DI (match_operand:DI 1 \"s_register_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   if (!TARGET_NEON && !TARGET_IWMMXT)\n@@ -5084,8 +5084,8 @@\n )\n \n (define_expand \"one_cmplsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(not:SI (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(not:SI (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_EITHER\"\n   \"\"\n )\n@@ -5128,8 +5128,8 @@\n ;; Fixed <--> Floating conversion insns\n \n (define_expand \"floatsihf2\"\n-  [(set (match_operand:HF           0 \"general_operand\" \"\")\n-\t(float:HF (match_operand:SI 1 \"general_operand\" \"\")))]\n+  [(set (match_operand:HF           0 \"general_operand\")\n+\t(float:HF (match_operand:SI 1 \"general_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -5142,8 +5142,8 @@\n )\n \n (define_expand \"floatdihf2\"\n-  [(set (match_operand:HF           0 \"general_operand\" \"\")\n-\t(float:HF (match_operand:DI 1 \"general_operand\" \"\")))]\n+  [(set (match_operand:HF           0 \"general_operand\")\n+\t(float:HF (match_operand:DI 1 \"general_operand\")))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -5156,22 +5156,22 @@\n )\n \n (define_expand \"floatsisf2\"\n-  [(set (match_operand:SF           0 \"s_register_operand\" \"\")\n-\t(float:SF (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF           0 \"s_register_operand\")\n+\t(float:SF (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"floatsidf2\"\n-  [(set (match_operand:DF           0 \"s_register_operand\" \"\")\n-\t(float:DF (match_operand:SI 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF           0 \"s_register_operand\")\n+\t(float:DF (match_operand:SI 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n \n (define_expand \"fix_trunchfsi2\"\n-  [(set (match_operand:SI         0 \"general_operand\" \"\")\n-\t(fix:SI (fix:HF (match_operand:HF 1 \"general_operand\"  \"\"))))]\n+  [(set (match_operand:SI         0 \"general_operand\")\n+\t(fix:SI (fix:HF (match_operand:HF 1 \"general_operand\"))))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -5182,8 +5182,8 @@\n )\n \n (define_expand \"fix_trunchfdi2\"\n-  [(set (match_operand:DI         0 \"general_operand\" \"\")\n-\t(fix:DI (fix:HF (match_operand:HF 1 \"general_operand\"  \"\"))))]\n+  [(set (match_operand:DI         0 \"general_operand\")\n+\t(fix:DI (fix:HF (match_operand:HF 1 \"general_operand\"))))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -5194,25 +5194,25 @@\n )\n \n (define_expand \"fix_truncsfsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(fix:SI (fix:SF (match_operand:SF 1 \"s_register_operand\"  \"\"))))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(fix:SI (fix:SF (match_operand:SF 1 \"s_register_operand\"))))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n \")\n \n (define_expand \"fix_truncdfsi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"\")\n-\t(fix:SI (fix:DF (match_operand:DF 1 \"s_register_operand\"  \"\"))))]\n+  [(set (match_operand:SI         0 \"s_register_operand\")\n+\t(fix:SI (fix:DF (match_operand:DF 1 \"s_register_operand\"))))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\n \")\n \n ;; Truncation insns\n \n (define_expand \"truncdfsf2\"\n-  [(set (match_operand:SF  0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SF  0 \"s_register_operand\")\n \t(float_truncate:SF\n- \t (match_operand:DF 1 \"s_register_operand\" \"\")))]\n+\t (match_operand:DF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\"\n )\n@@ -5225,9 +5225,9 @@\n ;; a single-step instruction.\n \n (define_expand \"truncdfhf2\"\n-  [(set (match_operand:HF  0 \"s_register_operand\" \"\")\n+  [(set (match_operand:HF  0 \"s_register_operand\")\n \t(float_truncate:HF\n-\t (match_operand:DF 1 \"s_register_operand\" \"\")))]\n+\t (match_operand:DF 1 \"s_register_operand\")))]\n   \"(TARGET_EITHER && flag_unsafe_math_optimizations)\n    || (TARGET_32BIT && TARGET_FP16_TO_DOUBLE)\"\n {\n@@ -5330,8 +5330,8 @@\n })\n \n (define_expand \"zero_extendhisi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_EITHER\"\n {\n   if (TARGET_ARM && !arm_arch4 && MEM_P (operands[1]))\n@@ -5392,8 +5392,8 @@\n )\n \n (define_expand \"zero_extendqisi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(zero_extend:SI (match_operand:QI 1 \"nonimmediate_operand\")))]\n   \"TARGET_EITHER\"\n {\n   if (TARGET_ARM && !arm_arch6 && !MEM_P (operands[1]))\n@@ -5514,8 +5514,8 @@\n )\n \n (define_expand \"extendhisi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\")))]\n   \"TARGET_EITHER\"\n {\n   if (TARGET_THUMB1)\n@@ -5633,9 +5633,9 @@\n \n (define_expand \"extendqihi2\"\n   [(set (match_dup 2)\n-\t(ashift:SI (match_operand:QI 1 \"arm_reg_or_extendqisi_mem_op\" \"\")\n+\t(ashift:SI (match_operand:QI 1 \"arm_reg_or_extendqisi_mem_op\")\n \t\t   (const_int 24)))\n-   (set (match_operand:HI 0 \"s_register_operand\" \"\")\n+   (set (match_operand:HI 0 \"s_register_operand\")\n \t(ashiftrt:SI (match_dup 2)\n \t\t     (const_int 24)))]\n   \"TARGET_ARM\"\n@@ -5665,8 +5665,8 @@\n )\n \n (define_expand \"extendqisi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(sign_extend:SI (match_operand:QI 1 \"arm_reg_or_extendqisi_mem_op\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(sign_extend:SI (match_operand:QI 1 \"arm_reg_or_extendqisi_mem_op\")))]\n   \"TARGET_EITHER\"\n {\n   if (!arm_arch4 && MEM_P (operands[1]))\n@@ -5727,8 +5727,8 @@\n )\n \n (define_expand \"extendsfdf2\"\n-  [(set (match_operand:DF                  0 \"s_register_operand\" \"\")\n-\t(float_extend:DF (match_operand:SF 1 \"s_register_operand\"  \"\")))]\n+  [(set (match_operand:DF                  0 \"s_register_operand\")\n+\t(float_extend:DF (match_operand:SF 1 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"\"\n )\n@@ -5739,8 +5739,8 @@\n ;; This is always safe for an extend.\n \n (define_expand \"extendhfdf2\"\n-  [(set (match_operand:DF\t\t   0 \"s_register_operand\" \"\")\n-\t(float_extend:DF (match_operand:HF 1 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF\t\t   0 \"s_register_operand\")\n+\t(float_extend:DF (match_operand:HF 1 \"s_register_operand\")))]\n   \"TARGET_EITHER\"\n {\n   /* We don't have a direct instruction for this, so go via SFmode.  */\n@@ -5763,18 +5763,18 @@\n ;; I don't think these are a good idea on the arm, there just aren't enough\n ;; registers\n ;;(define_expand \"loadti\"\n-;;  [(set (match_operand:TI 0 \"s_register_operand\" \"\")\n-;;\t(mem:TI (match_operand:SI 1 \"address_operand\" \"\")))]\n+;;  [(set (match_operand:TI 0 \"s_register_operand\")\n+;;\t(mem:TI (match_operand:SI 1 \"address_operand\")))]\n ;;  \"\" \"\")\n \n ;;(define_expand \"storeti\"\n-;;  [(set (mem:TI (match_operand:TI 0 \"address_operand\" \"\"))\n-;;\t(match_operand:TI 1 \"s_register_operand\" \"\"))]\n+;;  [(set (mem:TI (match_operand:TI 0 \"address_operand\"))\n+;;\t(match_operand:TI 1 \"s_register_operand\"))]\n ;;  \"\" \"\")\n \n ;;(define_expand \"movti\"\n-;;  [(set (match_operand:TI 0 \"general_operand\" \"\")\n-;;\t(match_operand:TI 1 \"general_operand\" \"\"))]\n+;;  [(set (match_operand:TI 0 \"general_operand\")\n+;;\t(match_operand:TI 1 \"general_operand\"))]\n ;;  \"\"\n ;;  \"\n ;;{\n@@ -5819,8 +5819,8 @@\n ;;  }\")\n \n (define_expand \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t(match_operand:DI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DI 0 \"general_operand\")\n+\t(match_operand:DI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   if (can_create_pseudo_p ())\n@@ -5992,8 +5992,8 @@\n )\n \n (define_expand \"movsi\"\n-  [(set (match_operand:SI 0 \"general_operand\" \"\")\n-        (match_operand:SI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SI 0 \"general_operand\")\n+        (match_operand:SI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -6183,8 +6183,8 @@\n ;;\n ;; Note: Update arm.c: legitimize_pic_address() when changing this pattern.\n (define_expand \"calculate_pic_address\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(mem:SI (plus:SI (match_operand:SI 1 \"register_operand\")\n \t\t\t (unspec:SI [(match_operand:SI 2 \"\" \"\")]\n \t\t\t\t    UNSPEC_PIC_SYM))))]\n   \"flag_pic\"\n@@ -6474,8 +6474,8 @@\n )\n \n (define_expand \"storehi_single_op\"\n-  [(set (match_operand:HI 0 \"memory_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:HI 0 \"memory_operand\")\n+\t(match_operand:HI 1 \"general_operand\"))]\n   \"TARGET_32BIT && arm_arch4\"\n   \"\n   if (!s_register_operand (operands[1], HImode))\n@@ -6484,8 +6484,8 @@\n )\n \n (define_expand \"movhi\"\n-  [(set (match_operand:HI 0 \"general_operand\" \"\")\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:HI 0 \"general_operand\")\n+\t(match_operand:HI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_ARM)\n@@ -6709,11 +6709,11 @@\n \n (define_expand \"movhi_bigend\"\n   [(set (match_dup 2)\n-\t(rotate:SI (subreg:SI (match_operand:HI 1 \"memory_operand\" \"\") 0)\n+\t(rotate:SI (subreg:SI (match_operand:HI 1 \"memory_operand\") 0)\n \t\t   (const_int 16)))\n    (set (match_dup 3)\n \t(ashiftrt:SI (match_dup 2) (const_int 16)))\n-   (set (match_operand:HI 0 \"s_register_operand\" \"\")\n+   (set (match_operand:HI 0 \"s_register_operand\")\n \t(match_dup 4))]\n   \"TARGET_ARM\"\n   \"\n@@ -6766,6 +6766,8 @@\n ;; We use a DImode scratch because we may occasionally need an additional\n ;; temporary if the address isn't offsettable -- push_reload doesn't seem\n ;; to take any notice of the \"o\" constraints on reload_memory_operand operand.\n+;; The reload_in<m> and reload_out<m> patterns require special constraints\n+;; to be correctly handled in default_secondary_reload function.\n (define_expand \"reload_outhi\"\n   [(parallel [(match_operand:HI 0 \"arm_reload_memory_operand\" \"=o\")\n \t      (match_operand:HI 1 \"s_register_operand\"        \"r\")\n@@ -6793,8 +6795,8 @@\n \")\n \n (define_expand \"movqi\"\n-  [(set (match_operand:QI 0 \"general_operand\" \"\")\n-        (match_operand:QI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:QI 0 \"general_operand\")\n+        (match_operand:QI 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   /* Everything except mem = const or mem = mem can be done easily */\n@@ -6891,8 +6893,8 @@\n \n ;; HFmode moves\n (define_expand \"movhf\"\n-  [(set (match_operand:HF 0 \"general_operand\" \"\")\n-\t(match_operand:HF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:HF 0 \"general_operand\")\n+\t(match_operand:HF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT)\n@@ -6955,8 +6957,8 @@\n )\n \n (define_expand \"movsf\"\n-  [(set (match_operand:SF 0 \"general_operand\" \"\")\n-\t(match_operand:SF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:SF 0 \"general_operand\")\n+\t(match_operand:SF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT)\n@@ -7050,8 +7052,8 @@\n )\n \n (define_expand \"movdf\"\n-  [(set (match_operand:DF 0 \"general_operand\" \"\")\n-\t(match_operand:DF 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:DF 0 \"general_operand\")\n+\t(match_operand:DF 1 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   if (TARGET_32BIT)\n@@ -7087,6 +7089,7 @@\n \n ;; Reloading a df mode value stored in integer regs to memory can require a\n ;; scratch reg.\n+;; Another reload_out<m> pattern that requires special constraints.\n (define_expand \"reload_outdf\"\n   [(match_operand:DF 0 \"arm_reload_memory_operand\" \"=o\")\n    (match_operand:DF 1 \"s_register_operand\" \"r\")\n@@ -7233,10 +7236,10 @@\n \n \n (define_expand \"setmemsi\"\n-  [(match_operand:BLK 0 \"general_operand\" \"\")\n-   (match_operand:SI 1 \"const_int_operand\" \"\")\n-   (match_operand:SI 2 \"const_int_operand\" \"\")\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+  [(match_operand:BLK 0 \"general_operand\")\n+   (match_operand:SI 1 \"const_int_operand\")\n+   (match_operand:SI 2 \"const_int_operand\")\n+   (match_operand:SI 3 \"const_int_operand\")]\n   \"TARGET_32BIT\"\n {\n   if (arm_gen_setmem (operands))\n@@ -7251,10 +7254,10 @@\n ;; many registers that there is then probably a better way.\n \n (define_expand \"cpymemqi\"\n-  [(match_operand:BLK 0 \"general_operand\" \"\")\n-   (match_operand:BLK 1 \"general_operand\" \"\")\n-   (match_operand:SI 2 \"const_int_operand\" \"\")\n-   (match_operand:SI 3 \"const_int_operand\" \"\")]\n+  [(match_operand:BLK 0 \"general_operand\")\n+   (match_operand:BLK 1 \"general_operand\")\n+   (match_operand:SI 2 \"const_int_operand\")\n+   (match_operand:SI 3 \"const_int_operand\")]\n   \"\"\n   \"\n   if (TARGET_32BIT)\n@@ -7304,8 +7307,8 @@\n (define_expand \"cbranchsi4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"expandable_comparison_operator\"\n-\t       [(match_operand:SI 1 \"s_register_operand\" \"\")\n-\t        (match_operand:SI 2 \"nonmemory_operand\" \"\")])\n+\t       [(match_operand:SI 1 \"s_register_operand\")\n+\t        (match_operand:SI 2 \"nonmemory_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_EITHER\"\n@@ -7331,8 +7334,8 @@\n (define_expand \"cbranchsf4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"expandable_comparison_operator\"\n-\t       [(match_operand:SF 1 \"s_register_operand\" \"\")\n-\t        (match_operand:SF 2 \"vfp_compare_operand\" \"\")])\n+\t       [(match_operand:SF 1 \"s_register_operand\")\n+\t        (match_operand:SF 2 \"vfp_compare_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n@@ -7343,8 +7346,8 @@\n (define_expand \"cbranchdf4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"expandable_comparison_operator\"\n-\t       [(match_operand:DF 1 \"s_register_operand\" \"\")\n-\t        (match_operand:DF 2 \"vfp_compare_operand\" \"\")])\n+\t       [(match_operand:DF 1 \"s_register_operand\")\n+\t        (match_operand:DF 2 \"vfp_compare_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n@@ -7355,8 +7358,8 @@\n (define_expand \"cbranchdi4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"expandable_comparison_operator\"\n-\t       [(match_operand:DI 1 \"s_register_operand\" \"\")\n-\t        (match_operand:DI 2 \"cmpdi_operand\" \"\")])\n+\t       [(match_operand:DI 1 \"s_register_operand\")\n+\t        (match_operand:DI 2 \"cmpdi_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_32BIT\"\n@@ -7608,7 +7611,7 @@\n ; scc insns\n \n (define_expand \"cstore_cc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n \t(match_operator:SI 1 \"\" [(match_operand 2 \"\" \"\")\n \t\t\t\t (match_operand 3 \"\" \"\")]))]\n   \"TARGET_32BIT\"\n@@ -7674,10 +7677,10 @@\n )\n \n (define_expand \"cstoresi4\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n \t(match_operator:SI 1 \"expandable_comparison_operator\"\n-\t [(match_operand:SI 2 \"s_register_operand\" \"\")\n-\t  (match_operand:SI 3 \"reg_or_int_operand\" \"\")]))]\n+\t [(match_operand:SI 2 \"s_register_operand\")\n+\t  (match_operand:SI 3 \"reg_or_int_operand\")]))]\n   \"TARGET_32BIT || TARGET_THUMB1\"\n   \"{\n   rtx op3, scratch, scratch2;\n@@ -7828,30 +7831,30 @@\n )\n \n (define_expand \"cstoresf4\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n \t(match_operator:SI 1 \"expandable_comparison_operator\"\n-\t [(match_operand:SF 2 \"s_register_operand\" \"\")\n-\t  (match_operand:SF 3 \"vfp_compare_operand\" \"\")]))]\n+\t [(match_operand:SF 2 \"s_register_operand\")\n+\t  (match_operand:SF 3 \"vfp_compare_operand\")]))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"emit_insn (gen_cstore_cc (operands[0], operands[1],\n \t\t\t     operands[2], operands[3])); DONE;\"\n )\n \n (define_expand \"cstoredf4\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n \t(match_operator:SI 1 \"expandable_comparison_operator\"\n-\t [(match_operand:DF 2 \"s_register_operand\" \"\")\n-\t  (match_operand:DF 3 \"vfp_compare_operand\" \"\")]))]\n+\t [(match_operand:DF 2 \"s_register_operand\")\n+\t  (match_operand:DF 3 \"vfp_compare_operand\")]))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && !TARGET_VFP_SINGLE\"\n   \"emit_insn (gen_cstore_cc (operands[0], operands[1],\n \t\t\t     operands[2], operands[3])); DONE;\"\n )\n \n (define_expand \"cstoredi4\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n \t(match_operator:SI 1 \"expandable_comparison_operator\"\n-\t [(match_operand:DI 2 \"s_register_operand\" \"\")\n-\t  (match_operand:DI 3 \"cmpdi_operand\" \"\")]))]\n+\t [(match_operand:DI 2 \"s_register_operand\")\n+\t  (match_operand:DI 3 \"cmpdi_operand\")]))]\n   \"TARGET_32BIT\"\n   \"{\n      if (!arm_validize_comparison (&operands[1],\n@@ -7868,10 +7871,10 @@\n ;; Conditional move insns\n \n (define_expand \"movsicc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SI (match_operand 1 \"expandable_comparison_operator\" \"\")\n-\t\t\t (match_operand:SI 2 \"arm_not_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"arm_not_operand\" \"\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(if_then_else:SI (match_operand 1 \"expandable_comparison_operator\")\n+\t\t\t (match_operand:SI 2 \"arm_not_operand\")\n+\t\t\t (match_operand:SI 3 \"arm_not_operand\")))]\n   \"TARGET_32BIT\"\n   \"\n   {\n@@ -7912,10 +7915,10 @@\n )\n \n (define_expand \"movsfcc\"\n-  [(set (match_operand:SF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:SF (match_operand 1 \"arm_cond_move_operator\" \"\")\n-\t\t\t (match_operand:SF 2 \"s_register_operand\" \"\")\n-\t\t\t (match_operand:SF 3 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"s_register_operand\")\n+\t(if_then_else:SF (match_operand 1 \"arm_cond_move_operator\")\n+\t\t\t (match_operand:SF 2 \"s_register_operand\")\n+\t\t\t (match_operand:SF 3 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT\"\n   \"\n   {\n@@ -7934,10 +7937,10 @@\n )\n \n (define_expand \"movdfcc\"\n-  [(set (match_operand:DF 0 \"s_register_operand\" \"\")\n-\t(if_then_else:DF (match_operand 1 \"arm_cond_move_operator\" \"\")\n-\t\t\t (match_operand:DF 2 \"s_register_operand\" \"\")\n-\t\t\t (match_operand:DF 3 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:DF 0 \"s_register_operand\")\n+\t(if_then_else:DF (match_operand 1 \"arm_cond_move_operator\")\n+\t\t\t (match_operand:DF 2 \"s_register_operand\")\n+\t\t\t (match_operand:DF 3 \"s_register_operand\")))]\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\n   {\n@@ -8133,8 +8136,8 @@\n )\n \n (define_expand \"call\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t            (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t            (match_operand 1 \"general_operand\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])]\n   \"TARGET_EITHER\"\n@@ -8172,15 +8175,15 @@\n )\n \n (define_expand \"call_internal\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t            (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t            (match_operand 1 \"general_operand\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])])\n \n (define_expand \"nonsecure_call_internal\"\n-  [(parallel [(call (unspec:SI [(match_operand 0 \"memory_operand\" \"\")]\n+  [(parallel [(call (unspec:SI [(match_operand 0 \"memory_operand\")]\n \t\t\t       UNSPEC_NONSECURE_MEM)\n-\t\t    (match_operand 1 \"general_operand\" \"\"))\n+\t\t    (match_operand 1 \"general_operand\"))\n \t      (use (match_operand 2 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])]\n   \"use_cmse\"\n@@ -8221,8 +8224,8 @@\n \n (define_expand \"call_value\"\n   [(parallel [(set (match_operand       0 \"\" \"\")\n-\t           (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t         (match_operand 2 \"general_operand\" \"\")))\n+\t           (call (match_operand 1 \"memory_operand\")\n+\t\t         (match_operand 2 \"general_operand\")))\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])]\n   \"TARGET_EITHER\"\n@@ -8262,16 +8265,16 @@\n \n (define_expand \"call_value_internal\"\n   [(parallel [(set (match_operand       0 \"\" \"\")\n-\t           (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t         (match_operand 2 \"general_operand\" \"\")))\n+\t           (call (match_operand 1 \"memory_operand\")\n+\t\t         (match_operand 2 \"general_operand\")))\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])])\n \n (define_expand \"nonsecure_call_value_internal\"\n   [(parallel [(set (match_operand       0 \"\" \"\")\n-\t\t   (call (unspec:SI [(match_operand 1 \"memory_operand\" \"\")]\n+\t\t   (call (unspec:SI [(match_operand 1 \"memory_operand\")]\n \t\t\t\t    UNSPEC_NONSECURE_MEM)\n-\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t\t\t (match_operand 2 \"general_operand\")))\n \t      (use (match_operand 3 \"\" \"\"))\n \t      (clobber (reg:SI LR_REGNUM))])]\n   \"use_cmse\"\n@@ -8361,15 +8364,15 @@\n )\n \n (define_expand \"sibcall_internal\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t\t    (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t\t    (match_operand 1 \"general_operand\"))\n \t      (return)\n \t      (use (match_operand 2 \"\" \"\"))])])\n \n ;; We may also be able to do sibcalls for Thumb, but it's much harder...\n (define_expand \"sibcall\"\n-  [(parallel [(call (match_operand 0 \"memory_operand\" \"\")\n-\t\t    (match_operand 1 \"general_operand\" \"\"))\n+  [(parallel [(call (match_operand 0 \"memory_operand\")\n+\t\t    (match_operand 1 \"general_operand\"))\n \t      (return)\n \t      (use (match_operand 2 \"\" \"\"))])]\n   \"TARGET_32BIT\"\n@@ -8394,15 +8397,15 @@\n \n (define_expand \"sibcall_value_internal\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t\t   (call (match_operand 1 \"memory_operand\")\n+\t\t\t (match_operand 2 \"general_operand\")))\n \t      (return)\n \t      (use (match_operand 3 \"\" \"\"))])])\n \n (define_expand \"sibcall_value\"\n   [(parallel [(set (match_operand 0 \"\" \"\")\n-\t\t   (call (match_operand 1 \"memory_operand\" \"\")\n-\t\t\t (match_operand 2 \"general_operand\" \"\")))\n+\t\t   (call (match_operand 1 \"memory_operand\")\n+\t\t\t (match_operand 2 \"general_operand\")))\n \t      (return)\n \t      (use (match_operand 3 \"\" \"\"))])]\n   \"TARGET_32BIT\"\n@@ -8571,7 +8574,7 @@\n   [(set (match_dup 1)\n       (compare:CC_NOOV (unspec [(const_int 0)] UNSPEC_CHECK_ARCH)\n \t\t       (const_int 0)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 0 \"s_register_operand\")\n       (if_then_else:SI (eq (match_dup 1) (const_int 0))\n \t\t       (const_int -1)\n \t\t       (const_int 67108860)))] ; 0x03fffffc\n@@ -8663,7 +8666,7 @@\n )\n \n (define_expand \"untyped_return\"\n-  [(match_operand:BLK 0 \"memory_operand\" \"\")\n+  [(match_operand:BLK 0 \"memory_operand\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_EITHER\"\n   \"\n@@ -8749,8 +8752,8 @@\n ;; Named patterns for stack smashing protection.\n (define_expand \"stack_protect_combined_set\"\n   [(parallel\n-     [(set (match_operand:SI 0 \"memory_operand\" \"\")\n-\t   (unspec:SI [(match_operand:SI 1 \"guard_operand\" \"\")]\n+     [(set (match_operand:SI 0 \"memory_operand\")\n+\t   (unspec:SI [(match_operand:SI 1 \"guard_operand\")]\n \t\t      UNSPEC_SP_SET))\n       (clobber (match_scratch:SI 2 \"\"))\n       (clobber (match_scratch:SI 3 \"\"))])]\n@@ -8816,8 +8819,8 @@\n   [(parallel\n      [(set (pc)\n \t   (if_then_else\n-\t\t(eq (match_operand:SI 0 \"memory_operand\" \"\")\n-\t\t    (unspec:SI [(match_operand:SI 1 \"guard_operand\" \"\")]\n+\t\t(eq (match_operand:SI 0 \"memory_operand\")\n+\t\t    (unspec:SI [(match_operand:SI 1 \"guard_operand\")]\n \t\t\t       UNSPEC_SP_TEST))\n \t\t(label_ref (match_operand 2))\n \t\t(pc)))\n@@ -8905,9 +8908,9 @@\n )\n \n (define_expand \"casesi\"\n-  [(match_operand:SI 0 \"s_register_operand\" \"\")\t; index to jump on\n-   (match_operand:SI 1 \"const_int_operand\" \"\")\t; lower bound\n-   (match_operand:SI 2 \"const_int_operand\" \"\")\t; total range\n+  [(match_operand:SI 0 \"s_register_operand\")\t; index to jump on\n+   (match_operand:SI 1 \"const_int_operand\")\t; lower bound\n+   (match_operand:SI 2 \"const_int_operand\")\t; total range\n    (match_operand:SI 3 \"\" \"\")\t\t\t; table label\n    (match_operand:SI 4 \"\" \"\")]\t\t\t; Out of range label\n   \"(TARGET_32BIT || optimize_size || flag_pic) && !target_pure_code\"\n@@ -8986,7 +8989,7 @@\n \n (define_expand \"indirect_jump\"\n   [(set (pc)\n-\t(match_operand:SI 0 \"s_register_operand\" \"\"))]\n+\t(match_operand:SI 0 \"s_register_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   /* Thumb-2 doesn't have mov pc, reg.  Explicitly set the low bit of the\n@@ -11041,9 +11044,9 @@\n )\n \n (define_expand \"eh_epilogue\"\n-  [(use (match_operand:SI 0 \"register_operand\" \"\"))\n-   (use (match_operand:SI 1 \"register_operand\" \"\"))\n-   (use (match_operand:SI 2 \"register_operand\" \"\"))]\n+  [(use (match_operand:SI 0 \"register_operand\"))\n+   (use (match_operand:SI 1 \"register_operand\"))\n+   (use (match_operand:SI 2 \"register_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -11628,7 +11631,7 @@\n ;; Patterns for exception handling\n \n (define_expand \"eh_return\"\n-  [(use (match_operand 0 \"general_operand\" \"\"))]\n+  [(use (match_operand 0 \"general_operand\"))]\n   \"TARGET_EITHER\"\n   \"\n   {\n@@ -11702,7 +11705,7 @@\n \n ;; For thread pointer builtin\n (define_expand \"get_thread_pointersi\"\n-  [(match_operand:SI 0 \"s_register_operand\" \"=r\")]\n+  [(match_operand:SI 0 \"s_register_operand\")]\n  \"\"\n  \"\n  {\n@@ -11744,20 +11747,20 @@\n )\n \n (define_expand \"arm_legacy_rev\"\n-  [(set (match_operand:SI 2 \"s_register_operand\" \"\")\n-\t(xor:SI (rotatert:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 2 \"s_register_operand\")\n+\t(xor:SI (rotatert:SI (match_operand:SI 1 \"s_register_operand\")\n \t\t\t     (const_int 16))\n \t\t(match_dup 1)))\n    (set (match_dup 2)\n \t(lshiftrt:SI (match_dup 2)\n \t\t     (const_int 8)))\n-   (set (match_operand:SI 3 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 3 \"s_register_operand\")\n \t(rotatert:SI (match_dup 1)\n \t\t     (const_int 8)))\n    (set (match_dup 2)\n \t(and:SI (match_dup 2)\n \t\t(const_int -65281)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 0 \"s_register_operand\")\n \t(xor:SI (match_dup 3)\n \t\t(match_dup 2)))]\n   \"TARGET_32BIT\"\n@@ -11766,18 +11769,18 @@\n \n ;; Reuse temporaries to keep register pressure down.\n (define_expand \"thumb_legacy_rev\"\n-  [(set (match_operand:SI 2 \"s_register_operand\" \"\")\n-     (ashift:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+  [(set (match_operand:SI 2 \"s_register_operand\")\n+     (ashift:SI (match_operand:SI 1 \"s_register_operand\")\n                 (const_int 24)))\n-   (set (match_operand:SI 3 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 3 \"s_register_operand\")\n      (lshiftrt:SI (match_dup 1)\n \t\t  (const_int 24)))\n    (set (match_dup 3)\n      (ior:SI (match_dup 3)\n \t     (match_dup 2)))\n-   (set (match_operand:SI 4 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 4 \"s_register_operand\")\n      (const_int 16))\n-   (set (match_operand:SI 5 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 5 \"s_register_operand\")\n      (rotatert:SI (match_dup 1)\n \t\t  (match_dup 4)))\n    (set (match_dup 2)\n@@ -11792,7 +11795,7 @@\n    (set (match_dup 5)\n      (rotatert:SI (match_dup 5)\n \t\t  (match_dup 4)))\n-   (set (match_operand:SI 0 \"s_register_operand\" \"\")\n+   (set (match_operand:SI 0 \"s_register_operand\")\n      (ior:SI (match_dup 5)\n              (match_dup 3)))]\n   \"TARGET_THUMB\"\n@@ -11808,9 +11811,9 @@\n ;; rsbpl   r0, r1, #0\n \n (define_expand \"modsi3\"\n-  [(match_operand:SI 0 \"register_operand\" \"\")\n-   (match_operand:SI 1 \"register_operand\" \"\")\n-   (match_operand:SI 2 \"const_int_operand\" \"\")]\n+  [(match_operand:SI 0 \"register_operand\")\n+   (match_operand:SI 1 \"register_operand\")\n+   (match_operand:SI 2 \"const_int_operand\")]\n   \"TARGET_32BIT\"\n   {\n     HOST_WIDE_INT val = INTVAL (operands[2]);\n@@ -11869,8 +11872,8 @@\n )\n \n (define_expand \"bswapsi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-  \t(bswap:SI (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+  [(set (match_operand:SI 0 \"s_register_operand\")\n+\t(bswap:SI (match_operand:SI 1 \"s_register_operand\")))]\n \"TARGET_EITHER && (arm_arch6 || !optimize_size)\"\n \"\n     if (!arm_arch6)\n@@ -11965,8 +11968,8 @@\n )\n \n (define_expand \"bswaphi2\"\n-  [(set (match_operand:HI 0 \"s_register_operand\" \"=r\")\n-\t(bswap:HI (match_operand:HI 1 \"s_register_operand\" \"r\")))]\n+  [(set (match_operand:HI 0 \"s_register_operand\")\n+\t(bswap:HI (match_operand:HI 1 \"s_register_operand\")))]\n \"arm_arch6\"\n \"\"\n )"}, {"sha": "310019aa5ceef98047b310284123f66940430095", "filename": "gcc/config/arm/iwmmxt.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fiwmmxt.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiwmmxt.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -256,55 +256,55 @@\n \n (define_expand \"iwmmxt_setwcgr0\"\n   [(set (reg:SI WCGR0)\n-\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+\t(match_operand:SI 0 \"register_operand\"))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_setwcgr1\"\n   [(set (reg:SI WCGR1)\n-\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+\t(match_operand:SI 0 \"register_operand\"))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_setwcgr2\"\n   [(set (reg:SI WCGR2)\n-\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+\t(match_operand:SI 0 \"register_operand\"))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_setwcgr3\"\n   [(set (reg:SI WCGR3)\n-\t(match_operand:SI 0 \"register_operand\"  \"\"))]\n+\t(match_operand:SI 0 \"register_operand\"))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_getwcgr0\"\n-  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n         (reg:SI WCGR0))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_getwcgr1\"\n-  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n         (reg:SI WCGR1))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_getwcgr2\"\n-  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n         (reg:SI WCGR2))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}\n )\n \n (define_expand \"iwmmxt_getwcgr3\"\n-  [(set (match_operand:SI 0 \"register_operand\"  \"\")\n+  [(set (match_operand:SI 0 \"register_operand\")\n         (reg:SI WCGR3))]\n   \"TARGET_REALLY_IWMMXT\"\n   {}"}, {"sha": "4bfe770f827301c234aaa2775f3d86a95f329fd9", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 227, "deletions": 227, "changes": 454, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -123,8 +123,8 @@\n    sub-reg and may ICE if it can't.  */\n \n (define_expand \"movti\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:TI 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\")\n+\t(match_operand:TI 1 \"general_operand\"))]\n   \"TARGET_NEON\"\n {\n   if (can_create_pseudo_p ())\n@@ -135,8 +135,8 @@\n })\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VSTRUCT 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\")\n+\t(match_operand:VSTRUCT 1 \"general_operand\"))]\n   \"TARGET_NEON\"\n {\n   if (can_create_pseudo_p ())\n@@ -392,9 +392,9 @@\n )\n \n (define_expand \"vec_set<mode>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:VDQ 0 \"s_register_operand\")\n+   (match_operand:<V_elem> 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   HOST_WIDE_INT elem = HOST_WIDE_INT_1 << INTVAL (operands[2]);\n@@ -471,7 +471,7 @@\n )\n \n (define_expand \"vec_init<mode><V_elem_l>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\" \"\")\n+  [(match_operand:VDQ 0 \"s_register_operand\")\n    (match_operand 1 \"\" \"\")]\n   \"TARGET_NEON\"\n {\n@@ -628,9 +628,9 @@\n    and disabled for -Os since it increases code size .  */\n \n (define_expand \"div<mode>3\"\n-  [(set (match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n-        (div:VCVTF (match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n-\t\t  (match_operand:VCVTF 2 \"s_register_operand\" \"w\")))]\n+  [(set (match_operand:VCVTF 0 \"s_register_operand\")\n+        (div:VCVTF (match_operand:VCVTF 1 \"s_register_operand\")\n+\t\t  (match_operand:VCVTF 2 \"s_register_operand\")))]\n   \"TARGET_NEON && !optimize_size\n    && flag_reciprocal_math\"\n   {\n@@ -1138,9 +1138,9 @@\n )\n \n (define_expand \"vashr<mode>3\"\n-  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"\")\n-\t(ashiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n-\t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\" \"\")))]\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\")\n+\t(ashiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\")\n+\t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\")))]\n   \"TARGET_NEON\"\n {\n   if (s_register_operand (operands[2], <MODE>mode))\n@@ -1155,9 +1155,9 @@\n })\n \n (define_expand \"vlshr<mode>3\"\n-  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"\")\n-\t(lshiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n-\t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\" \"\")))]\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\")\n+\t(lshiftrt:VDQIW (match_operand:VDQIW 1 \"s_register_operand\")\n+\t\t\t(match_operand:VDQIW 2 \"imm_rshift_or_reg_neon\")))]\n   \"TARGET_NEON\"\n {\n   if (s_register_operand (operands[2], <MODE>mode))\n@@ -1359,11 +1359,11 @@\n ;; Widening operations\n \n (define_expand \"widen_ssum<mode>3\"\n-  [(set (match_operand:<V_double_width> 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:<V_double_width> 0 \"s_register_operand\")\n \t(plus:<V_double_width>\n \t (sign_extend:<V_double_width>\n-\t  (match_operand:VQI 1 \"s_register_operand\" \"\"))\n-\t (match_operand:<V_double_width> 2 \"s_register_operand\" \"\")))]\n+\t  (match_operand:VQI 1 \"s_register_operand\"))\n+\t (match_operand:<V_double_width> 2 \"s_register_operand\")))]\n   \"TARGET_NEON\"\n   {\n     machine_mode mode = GET_MODE (operands[1]);\n@@ -1429,11 +1429,11 @@\n )\n \n (define_expand \"widen_usum<mode>3\"\n-  [(set (match_operand:<V_double_width> 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:<V_double_width> 0 \"s_register_operand\")\n \t(plus:<V_double_width>\n \t (zero_extend:<V_double_width>\n-\t  (match_operand:VQI 1 \"s_register_operand\" \"\"))\n-\t (match_operand:<V_double_width> 2 \"s_register_operand\" \"\")))]\n+\t  (match_operand:VQI 1 \"s_register_operand\"))\n+\t (match_operand:<V_double_width> 2 \"s_register_operand\")))]\n   \"TARGET_NEON\"\n   {\n     machine_mode mode = GET_MODE (operands[1]);\n@@ -1564,8 +1564,8 @@\n )\n \n (define_expand \"move_hi_quad_<mode>\"\n- [(match_operand:ANY128 0 \"s_register_operand\" \"\")\n-  (match_operand:<V_HALF> 1 \"s_register_operand\" \"\")]\n+ [(match_operand:ANY128 0 \"s_register_operand\")\n+  (match_operand:<V_HALF> 1 \"s_register_operand\")]\n  \"TARGET_NEON\"\n {\n   emit_move_insn (simplify_gen_subreg (<V_HALF>mode, operands[0], <MODE>mode,\n@@ -1575,8 +1575,8 @@\n })\n \n (define_expand \"move_lo_quad_<mode>\"\n- [(match_operand:ANY128 0 \"s_register_operand\" \"\")\n-  (match_operand:<V_HALF> 1 \"s_register_operand\" \"\")]\n+ [(match_operand:ANY128 0 \"s_register_operand\")\n+  (match_operand:<V_HALF> 1 \"s_register_operand\")]\n  \"TARGET_NEON\"\n {\n   emit_move_insn (simplify_gen_subreg (<V_HALF>mode, operands[0],\n@@ -1588,8 +1588,8 @@\n ;; Reduction operations\n \n (define_expand \"reduc_plus_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VD 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VD 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n@@ -1601,8 +1601,8 @@\n })\n \n (define_expand \"reduc_plus_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VQ 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQ 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n    && !BYTES_BIG_ENDIAN\"\n {\n@@ -1615,8 +1615,8 @@\n })\n \n (define_expand \"reduc_plus_scal_v2di\"\n-  [(match_operand:DI 0 \"nonimmediate_operand\" \"=w\")\n-   (match_operand:V2DI 1 \"s_register_operand\" \"\")]\n+  [(match_operand:DI 0 \"nonimmediate_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")]\n   \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx vec = gen_reg_rtx (V2DImode);\n@@ -1637,8 +1637,8 @@\n )\n \n (define_expand \"reduc_smin_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VD 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VD 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n@@ -1651,8 +1651,8 @@\n })\n \n (define_expand \"reduc_smin_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VQ 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQ 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n    && !BYTES_BIG_ENDIAN\"\n {\n@@ -1665,8 +1665,8 @@\n })\n \n (define_expand \"reduc_smax_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VD 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VD 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n@@ -1678,8 +1678,8 @@\n })\n \n (define_expand \"reduc_smax_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VQ 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQ 1 \"s_register_operand\")]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\n    && !BYTES_BIG_ENDIAN\"\n {\n@@ -1692,8 +1692,8 @@\n })\n \n (define_expand \"reduc_umin_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VDI 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VDI 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n@@ -1705,8 +1705,8 @@\n })\n \n (define_expand \"reduc_umin_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VQI 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQI 1 \"s_register_operand\")]\n   \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n@@ -1718,8 +1718,8 @@\n })\n \n (define_expand \"reduc_umax_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VDI 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VDI 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx vec = gen_reg_rtx (<MODE>mode);\n@@ -1731,8 +1731,8 @@\n })\n \n (define_expand \"reduc_umax_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\" \"\")\n-   (match_operand:VQI 1 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQI 1 \"s_register_operand\")]\n   \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   rtx step1 = gen_reg_rtx (<V_HALF>mode);\n@@ -1867,13 +1867,13 @@\n ;; element-wise.\n \n (define_expand \"vcond<mode><mode>\"\n-  [(set (match_operand:VDQW 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:VDQW 0 \"s_register_operand\")\n \t(if_then_else:VDQW\n \t  (match_operator 3 \"comparison_operator\"\n-\t    [(match_operand:VDQW 4 \"s_register_operand\" \"\")\n-\t     (match_operand:VDQW 5 \"nonmemory_operand\" \"\")])\n-\t  (match_operand:VDQW 1 \"s_register_operand\" \"\")\n-\t  (match_operand:VDQW 2 \"s_register_operand\" \"\")))]\n+\t    [(match_operand:VDQW 4 \"s_register_operand\")\n+\t     (match_operand:VDQW 5 \"nonmemory_operand\")])\n+\t  (match_operand:VDQW 1 \"s_register_operand\")\n+\t  (match_operand:VDQW 2 \"s_register_operand\")))]\n   \"TARGET_NEON && (!<Is_float_mode> || flag_unsafe_math_optimizations)\"\n {\n   int inverse = 0;\n@@ -2032,13 +2032,13 @@\n })\n \n (define_expand \"vcondu<mode><mode>\"\n-  [(set (match_operand:VDQIW 0 \"s_register_operand\" \"\")\n+  [(set (match_operand:VDQIW 0 \"s_register_operand\")\n \t(if_then_else:VDQIW\n \t  (match_operator 3 \"arm_comparison_operator\"\n-\t    [(match_operand:VDQIW 4 \"s_register_operand\" \"\")\n-\t     (match_operand:VDQIW 5 \"s_register_operand\" \"\")])\n-\t  (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n-\t  (match_operand:VDQIW 2 \"s_register_operand\" \"\")))]\n+\t    [(match_operand:VDQIW 4 \"s_register_operand\")\n+\t     (match_operand:VDQIW 5 \"s_register_operand\")])\n+\t  (match_operand:VDQIW 1 \"s_register_operand\")\n+\t  (match_operand:VDQIW 2 \"s_register_operand\")))]\n   \"TARGET_NEON\"\n {\n   rtx mask;\n@@ -2103,9 +2103,9 @@\n ; good for plain vadd, vaddq.\n \n (define_expand \"neon_vadd<mode>\"\n-  [(match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n-   (match_operand:VCVTF 2 \"s_register_operand\" \"w\")]\n+  [(match_operand:VCVTF 0 \"s_register_operand\")\n+   (match_operand:VCVTF 1 \"s_register_operand\")\n+   (match_operand:VCVTF 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n@@ -2250,10 +2250,10 @@\n )\n \n (define_expand \"neon_vmla<mode>\"\n-  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-   (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n-   (match_operand:VDQW 3 \"s_register_operand\" \"w\")]\n+  [(match_operand:VDQW 0 \"s_register_operand\")\n+   (match_operand:VDQW 1 \"s_register_operand\")\n+   (match_operand:VDQW 2 \"s_register_operand\")\n+   (match_operand:VDQW 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n@@ -2741,10 +2741,10 @@\n )\n \n (define_expand \"neon_vmls<mode>\"\n-  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VDQW 1 \"s_register_operand\" \"0\")\n-   (match_operand:VDQW 2 \"s_register_operand\" \"w\")\n-   (match_operand:VDQW 3 \"s_register_operand\" \"w\")]\n+  [(match_operand:VDQW 0 \"s_register_operand\")\n+   (match_operand:VDQW 1 \"s_register_operand\")\n+   (match_operand:VDQW 2 \"s_register_operand\")\n+   (match_operand:VDQW 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n@@ -2849,9 +2849,9 @@\n )\n \n (define_expand \"neon_vsub<mode>\"\n-  [(match_operand:VCVTF 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VCVTF 1 \"s_register_operand\" \"w\")\n-   (match_operand:VCVTF 2 \"s_register_operand\" \"w\")]\n+  [(match_operand:VCVTF 0 \"s_register_operand\")\n+   (match_operand:VCVTF 1 \"s_register_operand\")\n+   (match_operand:VCVTF 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   if (!<Is_float_mode> || flag_unsafe_math_optimizations)\n@@ -2930,10 +2930,10 @@\n ;; These may expand to an UNSPEC pattern when a floating point mode is used\n ;; without unsafe math optimizations.\n (define_expand \"neon_vc<cmp_op><mode>\"\n-  [(match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w,w\")\n+  [(match_operand:<V_cmp_result> 0 \"s_register_operand\")\n      (neg:<V_cmp_result>\n-       (COMPARISONS:VDQW (match_operand:VDQW 1 \"s_register_operand\" \"w,w\")\n-                         (match_operand:VDQW 2 \"reg_or_zero_operand\" \"w,Dz\")))]\n+       (COMPARISONS:VDQW (match_operand:VDQW 1 \"s_register_operand\")\n+                         (match_operand:VDQW 2 \"reg_or_zero_operand\")))]\n   \"TARGET_NEON\"\n   {\n     /* For FP comparisons use UNSPECS unless -funsafe-math-optimizations\n@@ -3359,9 +3359,9 @@\n )\n \n (define_expand \"neon_vpadd<mode>\"\n-  [(match_operand:VD 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VD 1 \"s_register_operand\" \"w\")\n-   (match_operand:VD 2 \"s_register_operand\" \"w\")]\n+  [(match_operand:VD 0 \"s_register_operand\")\n+   (match_operand:VD 1 \"s_register_operand\")\n+   (match_operand:VD 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vpadd_internal<mode> (operands[0], operands[1],\n@@ -3451,8 +3451,8 @@\n )\n \n (define_expand \"neon_vabs<mode>\"\n-  [(match_operand:VDQW 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQW 1 \"s_register_operand\" \"\")]\n+  [(match_operand:VDQW 0 \"s_register_operand\")\n+   (match_operand:VDQW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_abs<mode>2 (operands[0], operands[1]));\n@@ -3477,8 +3477,8 @@\n )\n \n (define_expand \"neon_vneg<mode>\"\n-  [(match_operand:VDQW 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQW 1 \"s_register_operand\" \"\")]\n+  [(match_operand:VDQW 0 \"s_register_operand\")\n+   (match_operand:VDQW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neg<mode>2 (operands[0], operands[1]));\n@@ -3678,8 +3678,8 @@\n )\n \n (define_expand \"neon_vclz<mode>\"\n-  [(match_operand:VDQIW 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQIW 1 \"s_register_operand\" \"\")]\n+  [(match_operand:VDQIW 0 \"s_register_operand\")\n+   (match_operand:VDQIW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_clz<mode>2 (operands[0], operands[1]));\n@@ -3695,8 +3695,8 @@\n )\n \n (define_expand \"neon_vcnt<mode>\"\n-  [(match_operand:VE 0 \"s_register_operand\" \"=w\")\n-   (match_operand:VE 1 \"s_register_operand\" \"w\")]\n+  [(match_operand:VE 0 \"s_register_operand\")\n+   (match_operand:VE 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_popcount<mode>2 (operands[0], operands[1]));\n@@ -3731,8 +3731,8 @@\n )\n \n (define_expand \"neon_vmvn<mode>\"\n-  [(match_operand:VDQIW 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQIW 1 \"s_register_operand\" \"\")]\n+  [(match_operand:VDQIW 0 \"s_register_operand\")\n+   (match_operand:VDQIW 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_one_cmpl<mode>2 (operands[0], operands[1]));\n@@ -3832,9 +3832,9 @@\n )\n \n (define_expand \"neon_vget_lane<mode>\"\n-  [(match_operand:<V_ext> 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQW 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:<V_ext> 0 \"s_register_operand\")\n+   (match_operand:VDQW 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   if (BYTES_BIG_ENDIAN)\n@@ -3862,9 +3862,9 @@\n })\n \n (define_expand \"neon_vget_laneu<mode>\"\n-  [(match_operand:<V_ext> 0 \"s_register_operand\" \"\")\n-   (match_operand:VDQIW 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:<V_ext> 0 \"s_register_operand\")\n+   (match_operand:VDQIW 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   if (BYTES_BIG_ENDIAN)\n@@ -3892,19 +3892,19 @@\n })\n \n (define_expand \"neon_vget_lanedi\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"=r\")\n-   (match_operand:DI 1 \"s_register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n \n (define_expand \"neon_vget_lanev2di\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"\")\n-   (match_operand:V2DI 1 \"s_register_operand\" \"\")\n-   (match_operand:SI 2 \"immediate_operand\" \"\")]\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:V2DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   int lane;\n@@ -3931,10 +3931,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vset_lane<mode>\"\n-  [(match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n-   (match_operand:<V_elem> 1 \"s_register_operand\" \"r\")\n-   (match_operand:VDQ 2 \"s_register_operand\" \"0\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  [(match_operand:VDQ 0 \"s_register_operand\")\n+   (match_operand:<V_elem> 1 \"s_register_operand\")\n+   (match_operand:VDQ 2 \"s_register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   unsigned int elt = INTVAL (operands[3]);\n@@ -3954,19 +3954,19 @@ if (BYTES_BIG_ENDIAN)\n ; See neon_vget_lanedi comment for reasons operands 2 & 3 are ignored.\n \n (define_expand \"neon_vset_lanedi\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:DI 1 \"s_register_operand\" \"r\")\n-   (match_operand:DI 2 \"s_register_operand\" \"0\")\n-   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:DI 2 \"s_register_operand\")\n+   (match_operand:SI 3 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n \n (define_expand \"neon_vcreate<mode>\"\n-  [(match_operand:VD_RE 0 \"s_register_operand\" \"\")\n-   (match_operand:DI 1 \"general_operand\" \"\")]\n+  [(match_operand:VD_RE 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"general_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx src = gen_lowpart (<MODE>mode, operands[1]);\n@@ -4009,8 +4009,8 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"neon_vdup_ndi\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:DI 1 \"s_register_operand\" \"r\")]\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_move_insn (operands[0], operands[1]);\n@@ -4074,9 +4074,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"neon_vdup_lane<mode>\"\n-  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n-   (match_operand:<V_double_vector_mode> 1 \"s_register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:VDQW 0 \"s_register_operand\")\n+   (match_operand:<V_double_vector_mode> 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   if (BYTES_BIG_ENDIAN)\n@@ -4113,9 +4113,9 @@ if (BYTES_BIG_ENDIAN)\n \n ; Scalar index is ignored, since only zero is valid here.\n (define_expand \"neon_vdup_lanedi\"\n-  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:DI 1 \"s_register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_move_insn (operands[0], operands[1]);\n@@ -4124,9 +4124,9 @@ if (BYTES_BIG_ENDIAN)\n \n ; Likewise for v2di, as the DImode second operand has only a single element.\n (define_expand \"neon_vdup_lanev2di\"\n-  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-   (match_operand:DI 1 \"s_register_operand\" \"w\")\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:V2DI 0 \"s_register_operand\")\n+   (match_operand:DI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"immediate_operand\")]\n   \"TARGET_NEON\"\n {\n   emit_insn (gen_neon_vdup_nv2di (operands[0], operands[1]));\n@@ -4655,9 +4655,9 @@ if (BYTES_BIG_ENDIAN)\n ; using vld1_lane, but that hasn't been done yet.\n \n (define_expand \"neon_vmul_n<mode>\"\n-  [(match_operand:VMD 0 \"s_register_operand\" \"\")\n-   (match_operand:VMD 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMD 0 \"s_register_operand\")\n+   (match_operand:VMD 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4668,9 +4668,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmul_n<mode>\"\n-  [(match_operand:VMQ 0 \"s_register_operand\" \"\")\n-   (match_operand:VMQ 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMQ 0 \"s_register_operand\")\n+   (match_operand:VMQ 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<V_HALF>mode);\n@@ -4694,9 +4694,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmulls_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:VMDI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4707,9 +4707,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmullu_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:VMDI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4720,9 +4720,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqdmull_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:VMDI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4733,9 +4733,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqdmulh_n<mode>\"\n-  [(match_operand:VMDI 0 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMDI 0 \"s_register_operand\")\n+   (match_operand:VMDI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4746,9 +4746,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqrdmulh_n<mode>\"\n-  [(match_operand:VMDI 0 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMDI 0 \"s_register_operand\")\n+   (match_operand:VMDI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4759,9 +4759,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqdmulh_n<mode>\"\n-  [(match_operand:VMQI 0 \"s_register_operand\" \"\")\n-   (match_operand:VMQI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMQI 0 \"s_register_operand\")\n+   (match_operand:VMQI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<V_HALF>mode);\n@@ -4772,9 +4772,9 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqrdmulh_n<mode>\"\n-  [(match_operand:VMQI 0 \"s_register_operand\" \"\")\n-   (match_operand:VMQI 1 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 2 \"s_register_operand\" \"\")]\n+  [(match_operand:VMQI 0 \"s_register_operand\")\n+   (match_operand:VMQI 1 \"s_register_operand\")\n+   (match_operand:<V_elem> 2 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<V_HALF>mode);\n@@ -4785,10 +4785,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmla_n<mode>\"\n-  [(match_operand:VMD 0 \"s_register_operand\" \"\")\n-   (match_operand:VMD 1 \"s_register_operand\" \"\")\n-   (match_operand:VMD 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:VMD 0 \"s_register_operand\")\n+   (match_operand:VMD 1 \"s_register_operand\")\n+   (match_operand:VMD 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4799,10 +4799,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmla_n<mode>\"\n-  [(match_operand:VMQ 0 \"s_register_operand\" \"\")\n-   (match_operand:VMQ 1 \"s_register_operand\" \"\")\n-   (match_operand:VMQ 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:VMQ 0 \"s_register_operand\")\n+   (match_operand:VMQ 1 \"s_register_operand\")\n+   (match_operand:VMQ 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<V_HALF>mode);\n@@ -4813,10 +4813,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmlals_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4827,10 +4827,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmlalu_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4841,10 +4841,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqdmlal_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4855,10 +4855,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmls_n<mode>\"\n-  [(match_operand:VMD 0 \"s_register_operand\" \"\")\n-   (match_operand:VMD 1 \"s_register_operand\" \"\")\n-   (match_operand:VMD 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:VMD 0 \"s_register_operand\")\n+   (match_operand:VMD 1 \"s_register_operand\")\n+   (match_operand:VMD 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4869,10 +4869,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmls_n<mode>\"\n-  [(match_operand:VMQ 0 \"s_register_operand\" \"\")\n-   (match_operand:VMQ 1 \"s_register_operand\" \"\")\n-   (match_operand:VMQ 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:VMQ 0 \"s_register_operand\")\n+   (match_operand:VMQ 1 \"s_register_operand\")\n+   (match_operand:VMQ 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<V_HALF>mode);\n@@ -4883,10 +4883,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmlsls_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4897,10 +4897,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vmlslu_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4911,10 +4911,10 @@ if (BYTES_BIG_ENDIAN)\n })\n \n (define_expand \"neon_vqdmlsl_n<mode>\"\n-  [(match_operand:<V_widen> 0 \"s_register_operand\" \"\")\n-   (match_operand:<V_widen> 1 \"s_register_operand\" \"\")\n-   (match_operand:VMDI 2 \"s_register_operand\" \"\")\n-   (match_operand:<V_elem> 3 \"s_register_operand\" \"\")]\n+  [(match_operand:<V_widen> 0 \"s_register_operand\")\n+   (match_operand:<V_widen> 1 \"s_register_operand\")\n+   (match_operand:VMDI 2 \"s_register_operand\")\n+   (match_operand:<V_elem> 3 \"s_register_operand\")]\n   \"TARGET_NEON\"\n {\n   rtx tmp = gen_reg_rtx (<MODE>mode);\n@@ -4988,10 +4988,10 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"neon_vbsl<mode>\"\n-  [(set (match_operand:VDQX 0 \"s_register_operand\" \"\")\n-        (unspec:VDQX [(match_operand:<V_cmp_result> 1 \"s_register_operand\" \"\")\n-                      (match_operand:VDQX 2 \"s_register_operand\" \"\")\n-                      (match_operand:VDQX 3 \"s_register_operand\" \"\")]\n+  [(set (match_operand:VDQX 0 \"s_register_operand\")\n+        (unspec:VDQX [(match_operand:<V_cmp_result> 1 \"s_register_operand\")\n+                      (match_operand:VDQX 2 \"s_register_operand\")\n+                      (match_operand:VDQX 3 \"s_register_operand\")]\n                      UNSPEC_VBSL))]\n   \"TARGET_NEON\"\n {\n@@ -5470,7 +5470,7 @@ if (BYTES_BIG_ENDIAN)\n \t  (unspec:VDQWH [(match_operand:VDQWH 1 \"s_register_operand\")\n \t\t\t(match_operand:VDQWH 2 \"s_register_operand\")]\n \t   UNSPEC_VUZP1))\n-     (set (match_operand:VDQWH 3 \"s_register_operand\" \"\")\n+     (set (match_operand:VDQWH 3 \"s_register_operand\")\n \t  (unspec:VDQWH [(match_dup 1) (match_dup 2)] UNSPEC_VUZP2))])]\n   \"TARGET_NEON\"\n   \"\"\n@@ -5566,8 +5566,8 @@ if (BYTES_BIG_ENDIAN)\n \n ;; Special case for DImode.  Treat it exactly like a simple load.\n (define_expand \"neon_vld1_dupdi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"\")\n-        (unspec:DI [(match_operand:DI 1 \"neon_struct_operand\" \"\")]\n+  [(set (match_operand:DI 0 \"s_register_operand\")\n+        (unspec:DI [(match_operand:DI 1 \"neon_struct_operand\")]\n \t\t   UNSPEC_VLD1))]\n   \"TARGET_NEON\"\n   \"\"\n@@ -6541,7 +6541,7 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_unpack<US>_hi_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n    (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   {\n@@ -6560,8 +6560,8 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_unpack<US>_lo_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n-   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))]\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n   {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n@@ -6591,9 +6591,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>mult_lo_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n-   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n-   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))\n+   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\"))]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n@@ -6625,9 +6625,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>mult_hi_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n-   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n-   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\" \"\"))]\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))\n+   (SE:<V_unpack> (match_operand:VU 2 \"register_operand\"))]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n    rtvec v = rtvec_alloc (<V_mode_nunits>/2)  ;\n@@ -6658,9 +6658,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>shiftl_lo_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n-   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))\n+   (match_operand:SI 2 \"immediate_operand\")]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n   emit_insn (gen_neon_vec_<US>shiftl_<V_half> (operands[0],\n@@ -6671,9 +6671,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>shiftl_hi_<mode>\"\n-  [(match_operand:<V_unpack> 0 \"register_operand\" \"\")\n-   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\" \"\"))\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:<V_unpack> 0 \"register_operand\")\n+   (SE:<V_unpack> (match_operand:VU 1 \"register_operand\"))\n+   (match_operand:SI 2 \"immediate_operand\")]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n  {\n   emit_insn (gen_neon_vec_<US>shiftl_<V_half> (operands[0],\n@@ -6694,7 +6694,7 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_unpack<US>_lo_<mode>\"\n- [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+ [(match_operand:<V_double_width> 0 \"register_operand\")\n   (SE:<V_double_width>(match_operand:VDI 1 \"register_operand\"))]\n  \"TARGET_NEON\"\n {\n@@ -6707,7 +6707,7 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_unpack<US>_hi_<mode>\"\n- [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n+ [(match_operand:<V_double_width> 0 \"register_operand\")\n   (SE:<V_double_width>(match_operand:VDI 1 \"register_operand\"))]\n  \"TARGET_NEON\"\n {\n@@ -6731,9 +6731,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>mult_hi_<mode>\"\n-  [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n-   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n-   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\" \"\"))]\n+  [(match_operand:<V_double_width> 0 \"register_operand\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\"))\n+   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\"))]\n  \"TARGET_NEON\"\n  {\n    rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n@@ -6746,9 +6746,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>mult_lo_<mode>\"\n-  [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n-   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n-   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\" \"\"))]\n+  [(match_operand:<V_double_width> 0 \"register_operand\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\"))\n+   (SE:<V_double_width> (match_operand:VDI 2 \"register_operand\"))]\n  \"TARGET_NEON\"\n  {\n    rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n@@ -6761,9 +6761,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>shiftl_hi_<mode>\"\n- [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n-   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+ [(match_operand:<V_double_width> 0 \"register_operand\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\"))\n+   (match_operand:SI 2 \"immediate_operand\")]\n  \"TARGET_NEON\"\n  {\n    rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n@@ -6775,9 +6775,9 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_widen_<US>shiftl_lo_<mode>\"\n-  [(match_operand:<V_double_width> 0 \"register_operand\" \"\")\n-   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\" \"\"))\n-   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n+  [(match_operand:<V_double_width> 0 \"register_operand\")\n+   (SE:<V_double_width> (match_operand:VDI 1 \"register_operand\"))\n+   (match_operand:SI 2 \"immediate_operand\")]\n  \"TARGET_NEON\"\n  {\n    rtx tmpreg = gen_reg_rtx (<V_widen>mode);\n@@ -6815,8 +6815,8 @@ if (BYTES_BIG_ENDIAN)\n )\n \n (define_expand \"vec_pack_trunc_<mode>\"\n- [(match_operand:<V_narrow_pack> 0 \"register_operand\" \"\")\n-  (match_operand:VSHFT 1 \"register_operand\" \"\")\n+ [(match_operand:<V_narrow_pack> 0 \"register_operand\")\n+  (match_operand:VSHFT 1 \"register_operand\")\n   (match_operand:VSHFT 2 \"register_operand\")]\n  \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {"}, {"sha": "3d49aef7805c6da5d877732cfe89947cdad03c9d", "filename": "gcc/config/arm/sync.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fsync.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -170,11 +170,11 @@\n })\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n-  [(match_operand:SI 0 \"s_register_operand\" \"\")\t\t;; bool out\n-   (match_operand:QHSD 1 \"s_register_operand\" \"\")\t;; val out\n-   (match_operand:QHSD 2 \"mem_noofs_operand\" \"\")\t;; memory\n-   (match_operand:QHSD 3 \"general_operand\" \"\")\t\t;; expected\n-   (match_operand:QHSD 4 \"s_register_operand\" \"\")\t;; desired\n+  [(match_operand:SI 0 \"s_register_operand\")\t\t;; bool out\n+   (match_operand:QHSD 1 \"s_register_operand\")\t\t;; val out\n+   (match_operand:QHSD 2 \"mem_noofs_operand\")\t\t;; memory\n+   (match_operand:QHSD 3 \"general_operand\")\t\t;; expected\n+   (match_operand:QHSD 4 \"s_register_operand\")\t\t;; desired\n    (match_operand:SI 5 \"const_int_operand\")\t\t;; is_weak\n    (match_operand:SI 6 \"const_int_operand\")\t\t;; mod_s\n    (match_operand:SI 7 \"const_int_operand\")]\t\t;; mod_f"}, {"sha": "b142bfcb837befebc0298713d3454ac33941c956", "filename": "gcc/config/arm/thumb1.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fthumb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fthumb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb1.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -794,9 +794,9 @@\n    (set_attr \"conds\" \"clob,nocond,nocond,nocond,nocond,clob,nocond\")])\n \n (define_expand \"thumb_movhi_clobber\"\n-  [(set (match_operand:HI     0 \"memory_operand\"   \"\")\n-\t(match_operand:HI     1 \"register_operand\" \"\"))\n-   (clobber (match_operand:DI 2 \"register_operand\" \"\"))]\n+  [(set (match_operand:HI     0 \"memory_operand\")\n+\t(match_operand:HI     1 \"register_operand\"))\n+   (clobber (match_operand:DI 2 \"register_operand\"))]\n   \"TARGET_THUMB1\"\n   \"\n   if (strict_memory_address_p (HImode, XEXP (operands[0], 0))\n@@ -977,8 +977,8 @@\n (define_expand \"cbranchqi4\"\n   [(set (pc) (if_then_else\n \t      (match_operator 0 \"lt_ge_comparison_operator\"\n-\t       [(match_operand:QI 1 \"memory_operand\" \"\")\n-\t        (match_operand:QI 2 \"const0_operand\" \"\")])\n+\t       [(match_operand:QI 1 \"memory_operand\")\n+\t        (match_operand:QI 2 \"const0_operand\")])\n \t      (label_ref (match_operand 3 \"\" \"\"))\n \t      (pc)))]\n   \"TARGET_THUMB1\"\n@@ -1616,8 +1616,8 @@\n \n (define_expand \"cstoresi_eq0_thumb1\"\n   [(parallel\n-    [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t  (eq:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+    [(set (match_operand:SI 0 \"s_register_operand\")\n+\t  (eq:SI (match_operand:SI 1 \"s_register_operand\")\n \t\t (const_int 0)))\n      (clobber (match_dup:SI 2))])]\n   \"TARGET_THUMB1\"\n@@ -1626,8 +1626,8 @@\n \n (define_expand \"cstoresi_ne0_thumb1\"\n   [(parallel\n-    [(set (match_operand:SI 0 \"s_register_operand\" \"\")\n-\t  (ne:SI (match_operand:SI 1 \"s_register_operand\" \"\")\n+    [(set (match_operand:SI 0 \"s_register_operand\")\n+\t  (ne:SI (match_operand:SI 1 \"s_register_operand\")\n \t\t (const_int 0)))\n      (clobber (match_dup:SI 2))])]\n   \"TARGET_THUMB1\"\n@@ -1838,8 +1838,8 @@\n )\n \n (define_expand \"thumb1_casesi_internal_pic\"\n-  [(match_operand:SI 0 \"s_register_operand\" \"\")\n-   (match_operand:SI 1 \"thumb1_cmp_operand\" \"\")\n+  [(match_operand:SI 0 \"s_register_operand\")\n+   (match_operand:SI 1 \"thumb1_cmp_operand\")\n    (match_operand 2 \"\" \"\")\n    (match_operand 3 \"\" \"\")]\n   \"TARGET_THUMB1\"\n@@ -1911,7 +1911,7 @@\n \n ;; Miscellaneous Thumb patterns\n (define_expand \"tablejump\"\n-  [(parallel [(set (pc) (match_operand:SI 0 \"register_operand\" \"\"))\n+  [(parallel [(set (pc) (match_operand:SI 0 \"register_operand\"))\n \t      (use (label_ref (match_operand 1 \"\" \"\")))])]\n   \"TARGET_THUMB1\"\n   \""}, {"sha": "99a430e32e6c6efa681c8c57b6c9934bc0ce78df", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd65e2652d2c38eaa63f01ccc3a60bb5225235d2/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=cd65e2652d2c38eaa63f01ccc3a60bb5225235d2", "patch": "@@ -21,8 +21,8 @@\n ;; Vector Moves\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:VALL 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:VALL 1 \"general_operand\" \"\"))]\n+  [(set (match_operand:VALL 0 \"nonimmediate_operand\")\n+\t(match_operand:VALL 1 \"general_operand\"))]\n   \"TARGET_NEON\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n@@ -42,78 +42,78 @@\n ;; patterns separately for IWMMXT and Neon.\n \n (define_expand \"add<mode>3\"\n-  [(set (match_operand:VALL 0 \"s_register_operand\" \"\")\n-        (plus:VALL (match_operand:VALL 1 \"s_register_operand\" \"\")\n-                   (match_operand:VALL 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VALL 0 \"s_register_operand\")\n+        (plus:VALL (match_operand:VALL 1 \"s_register_operand\")\n+                   (match_operand:VALL 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"sub<mode>3\"\n-  [(set (match_operand:VALL 0 \"s_register_operand\" \"\")\n-        (minus:VALL (match_operand:VALL 1 \"s_register_operand\" \"\")\n-                    (match_operand:VALL 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VALL 0 \"s_register_operand\")\n+        (minus:VALL (match_operand:VALL 1 \"s_register_operand\")\n+                    (match_operand:VALL 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"mul<mode>3\"\n-  [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n-        (mult:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VALLW 0 \"s_register_operand\")\n+        (mult:VALLW (match_operand:VALLW 1 \"s_register_operand\")\n+\t\t    (match_operand:VALLW 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (<MODE>mode == V4HImode && TARGET_REALLY_IWMMXT)\"\n {\n })\n \n (define_expand \"smin<mode>3\"\n-  [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n-\t(smin:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VALLW 0 \"s_register_operand\")\n+\t(smin:VALLW (match_operand:VALLW 1 \"s_register_operand\")\n+\t\t    (match_operand:VALLW 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"umin<mode>3\"\n-  [(set (match_operand:VINTW 0 \"s_register_operand\" \"\")\n-\t(umin:VINTW (match_operand:VINTW 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:VINTW 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VINTW 0 \"s_register_operand\")\n+\t(umin:VINTW (match_operand:VINTW 1 \"s_register_operand\")\n+\t\t    (match_operand:VINTW 2 \"s_register_operand\")))]\n   \"TARGET_NEON\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"smax<mode>3\"\n-  [(set (match_operand:VALLW 0 \"s_register_operand\" \"\")\n-\t(smax:VALLW (match_operand:VALLW 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:VALLW 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VALLW 0 \"s_register_operand\")\n+\t(smax:VALLW (match_operand:VALLW 1 \"s_register_operand\")\n+\t\t    (match_operand:VALLW 2 \"s_register_operand\")))]\n   \"(TARGET_NEON && ((<MODE>mode != V2SFmode && <MODE>mode != V4SFmode)\n \t\t    || flag_unsafe_math_optimizations))\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"umax<mode>3\"\n-  [(set (match_operand:VINTW 0 \"s_register_operand\" \"\")\n-\t(umax:VINTW (match_operand:VINTW 1 \"s_register_operand\" \"\")\n-\t\t    (match_operand:VINTW 2 \"s_register_operand\" \"\")))]\n+  [(set (match_operand:VINTW 0 \"s_register_operand\")\n+\t(umax:VINTW (match_operand:VINTW 1 \"s_register_operand\")\n+\t\t    (match_operand:VINTW 2 \"s_register_operand\")))]\n   \"TARGET_NEON\n    || (TARGET_REALLY_IWMMXT && VALID_IWMMXT_REG_MODE (<MODE>mode))\"\n {\n })\n \n (define_expand \"vec_perm<mode>\"\n-  [(match_operand:VE 0 \"s_register_operand\" \"\")\n-   (match_operand:VE 1 \"s_register_operand\" \"\")\n-   (match_operand:VE 2 \"s_register_operand\" \"\")\n-   (match_operand:VE 3 \"s_register_operand\" \"\")]\n+  [(match_operand:VE 0 \"s_register_operand\")\n+   (match_operand:VE 1 \"s_register_operand\")\n+   (match_operand:VE 2 \"s_register_operand\")\n+   (match_operand:VE 3 \"s_register_operand\")]\n   \"TARGET_NEON && !BYTES_BIG_ENDIAN\"\n {\n   arm_expand_vec_perm (operands[0], operands[1], operands[2], operands[3]);"}]}