{"sha": "e75b2c67e56f1c4f532e76798afab98155805f78", "node_id": "C_kwDOANBUbNoAKGU3NWIyYzY3ZTU2ZjFjNGY1MzJlNzY3OThhZmFiOTgxNTU4MDVmNzg", "commit": {"author": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2023-01-26T13:00:14Z"}, "committer": {"name": "Gerald Pfeifer", "email": "gerald@pfeifer.com", "date": "2023-01-26T13:10:47Z"}, "message": "libstdc++: Move www.open-std.org to https in bugs manual\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/xml/manual/intro.xml: Update links to www.open-std.org to\n\tuse https.\n\t* doc/html/manual/bugs.html: Regenerate.", "tree": {"sha": "45991c190ccfa6bb5d74f3ac0f45c79e9c7f7f63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45991c190ccfa6bb5d74f3ac0f45c79e9c7f7f63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e75b2c67e56f1c4f532e76798afab98155805f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75b2c67e56f1c4f532e76798afab98155805f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e75b2c67e56f1c4f532e76798afab98155805f78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e75b2c67e56f1c4f532e76798afab98155805f78/comments", "author": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GeraldPfeifer", "id": 4573532, "node_id": "MDQ6VXNlcjQ1NzM1MzI=", "avatar_url": "https://avatars.githubusercontent.com/u/4573532?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GeraldPfeifer", "html_url": "https://github.com/GeraldPfeifer", "followers_url": "https://api.github.com/users/GeraldPfeifer/followers", "following_url": "https://api.github.com/users/GeraldPfeifer/following{/other_user}", "gists_url": "https://api.github.com/users/GeraldPfeifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/GeraldPfeifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GeraldPfeifer/subscriptions", "organizations_url": "https://api.github.com/users/GeraldPfeifer/orgs", "repos_url": "https://api.github.com/users/GeraldPfeifer/repos", "events_url": "https://api.github.com/users/GeraldPfeifer/events{/privacy}", "received_events_url": "https://api.github.com/users/GeraldPfeifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71a128a3e1ff6ee5274fc2df49ea650bc9e6c2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c71a128a3e1ff6ee5274fc2df49ea650bc9e6c2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c71a128a3e1ff6ee5274fc2df49ea650bc9e6c2d"}], "stats": {"total": 320, "additions": 160, "deletions": 160}, "files": [{"sha": "97b7d4d3b83d5cdfdfa63dcc258ab3a6be60ba51", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 157, "deletions": 157, "changes": 314, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75b2c67e56f1c4f532e76798afab98155805f78/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75b2c67e56f1c4f532e76798afab98155805f78/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=e75b2c67e56f1c4f532e76798afab98155805f78", "patch": "@@ -14,7 +14,7 @@\n \tHere are the issues which have resulted in code changes to the library.\n \tThe links are to the full version of the Issues List.\n         You can read the full version online\n-\tat the <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">ISO C++\n+\tat the <a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">ISO C++\n \tCommittee homepage</a>.\n       </p><p>\n \tIf a DR is not listed here, we may simply not have gotten to\n@@ -24,261 +24,261 @@\n \tdirectories for appearances of\n \t<code class=\"constant\">_GLIBCXX_RESOLVE_LIB_DEFECTS</code> for examples\n \tof style.  Note that we usually do not make changes to the\n-\tcode until an issue has reached <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n-      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><a id=\"manual.bugs.dr5\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n+\tcode until an issue has reached <a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n+      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><a id=\"manual.bugs.dr5\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n \t<span class=\"bold\"><strong>string::compare specification questionable</strong></span>\n     </span></dt><dd><p>This should be two overloaded functions rather than a single function.\n-    </p></dd><dt><a id=\"manual.bugs.dr17\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr17\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n \t<span class=\"bold\"><strong>Bad bool parsing</strong></span>\n     </span></dt><dd><p>Apparently extracting Boolean values was messed up...\n-    </p></dd><dt><a id=\"manual.bugs.dr19\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr19\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n \t<span class=\"bold\"><strong>\"Noconv\" definition too vague</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">codecvt::do_in</code> returns <code class=\"code\">noconv</code> there are\n \tno changes to the values in <code class=\"code\">[to, to_limit)</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr22\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr22\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n \t<span class=\"bold\"><strong>Member open vs flags</strong></span>\n     </span></dt><dd><p>Re-opening a file stream does <span class=\"emphasis\"><em>not</em></span> clear the state flags.\n-    </p></dd><dt><a id=\"manual.bugs.dr23\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr23\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n \t<span class=\"bold\"><strong>Num_get overflow result</strong></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><a id=\"manual.bugs.dr25\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr25\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n \t<span class=\"bold\"><strong>String operator&lt;&lt; uses width() value wrong</strong></span>\n     </span></dt><dd><p>Padding issues.\n-    </p></dd><dt><a id=\"manual.bugs.dr48\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr48\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n \t<span class=\"bold\"><strong>Use of non-existent exception constructor</strong></span>\n     </span></dt><dd><p>An instance of <code class=\"code\">ios_base::failure</code> is constructed instead.\n-    </p></dd><dt><a id=\"manual.bugs.dr49\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr49\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n \t<span class=\"bold\"><strong>Underspecification of ios_base::sync_with_stdio</strong></span>\n     </span></dt><dd><p>The return type is the <span class=\"emphasis\"><em>previous</em></span> state of synchronization.\n-    </p></dd><dt><a id=\"manual.bugs.dr50\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr50\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n \t<span class=\"bold\"><strong>Copy constructor and assignment operator of ios_base</strong></span>\n     </span></dt><dd><p>These members functions are declared <code class=\"code\">private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n-    </p></dd><dt><a id=\"manual.bugs.dr60\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr60\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n \t<span class=\"bold\"><strong>What is a formatted input function?</strong></span>\n     </span></dt><dd><p>This DR made many widespread changes to <code class=\"code\">basic_istream</code>\n \tand <code class=\"code\">basic_ostream</code> all of which have been implemented.\n-    </p></dd><dt><a id=\"manual.bugs.dr63\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr63\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n \t<span class=\"bold\"><strong>Exception-handling policy for unformatted output</strong></span>\n     </span></dt><dd><p>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n-    </p></dd><dt><a id=\"manual.bugs.dr68\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr68\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n \t<span class=\"bold\"><strong>Extractors for char* should store null at end</strong></span>\n     </span></dt><dd><p>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n-    </p></dd><dt><a id=\"manual.bugs.dr74\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr74\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n \t<span class=\"bold\"><strong>Garbled text for codecvt::do_max_length</strong></span>\n     </span></dt><dd><p>The text of the standard was gibberish.  Typos gone rampant.\n-    </p></dd><dt><a id=\"manual.bugs.dr75\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr75\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n \t<span class=\"bold\"><strong>Contradiction in codecvt::length's argument types</strong></span>\n     </span></dt><dd><p>Change the first parameter to <code class=\"code\">stateT&amp;</code> and implement\n \tthe new effects paragraph.\n-    </p></dd><dt><a id=\"manual.bugs.dr83\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr83\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n \t<span class=\"bold\"><strong>string::npos vs. string::max_size()</strong></span>\n     </span></dt><dd><p>Safety checks on the size of the string should test against\n \t<code class=\"code\">max_size()</code> rather than <code class=\"code\">npos</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr90\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr90\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n \t<span class=\"bold\"><strong>Incorrect description of operator&gt;&gt; for strings</strong></span>\n     </span></dt><dd><p>The effect contain <code class=\"code\">isspace(c,getloc())</code> which must be\n \treplaced by <code class=\"code\">isspace(c,is.getloc())</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr91\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr91\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n \t<span class=\"bold\"><strong>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</strong></span>\n     </span></dt><dd><p>They behave as a formatted input function and as an unformatted\n \tinput function, respectively (except that <code class=\"code\">getline</code> is\n \tnot required to set <code class=\"code\">gcount</code>).\n-    </p></dd><dt><a id=\"manual.bugs.dr103\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr103\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n \t<span class=\"bold\"><strong>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</strong></span>\n     </span></dt><dd><p>For associative containers where the value type is the same as\n \tthe key type, both <code class=\"code\">iterator</code> and <code class=\"code\">const_iterator\n \t</code> are constant iterators.\n-    </p></dd><dt><a id=\"manual.bugs.dr109\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr109\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n \t<span class=\"bold\"><strong>Missing binders for non-const sequence elements</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">binder1st</code> and <code class=\"code\">binder2nd</code> didn't have an\n \t<code class=\"code\">operator()</code> taking a non-const parameter.\n-    </p></dd><dt><a id=\"manual.bugs.dr110\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr110\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n \t<span class=\"bold\"><strong>istreambuf_iterator::equal not const</strong></span>\n     </span></dt><dd><p>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n-    </p></dd><dt><a id=\"manual.bugs.dr117\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr117\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n \t<span class=\"bold\"><strong>basic_ostream uses nonexistent num_put member functions</strong></span>\n     </span></dt><dd><p><code class=\"code\">num_put::put()</code> was overloaded on the wrong types.\n-    </p></dd><dt><a id=\"manual.bugs.dr118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr118\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n \t<span class=\"bold\"><strong>basic_istream uses nonexistent num_get member functions</strong></span>\n     </span></dt><dd><p>Same as 117, but for <code class=\"code\">num_get::get()</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr129\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr129\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n \t<span class=\"bold\"><strong>Need error indication from seekp() and seekg()</strong></span>\n     </span></dt><dd><p>These functions set <code class=\"code\">failbit</code> on error now.\n-    </p></dd><dt><a id=\"manual.bugs.dr130\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr130\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n \t<span class=\"bold\"><strong>Return type of container::erase(iterator) differs for associative containers</strong></span>\n     </span></dt><dd><p>Make member <code class=\"code\">erase</code> return iterator for <code class=\"code\">set</code>, <code class=\"code\">multiset</code>, <code class=\"code\">map</code>, <code class=\"code\">multimap</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr136\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr136\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n \t<span class=\"bold\"><strong>seekp, seekg setting wrong streams?</strong></span>\n     </span></dt><dd><p><code class=\"code\">seekp</code> should only set the output stream, and\n \t<code class=\"code\">seekg</code> should only set the input stream.\n-    </p></dd><dt><a id=\"manual.bugs.dr167\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr167\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n \t<span class=\"bold\"><strong>Improper use of traits_type::length()</strong></span>\n     </span></dt><dd><p><code class=\"code\">op&lt;&lt;</code> with a <code class=\"code\">const char*</code> was\n \tcalculating an incorrect number of characters to write.\n-    </p></dd><dt><a id=\"manual.bugs.dr169\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr169\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n \t<span class=\"bold\"><strong>Bad efficiency of overflow() mandated</strong></span>\n     </span></dt><dd><p>Grow efficiently the internal array object.\n-    </p></dd><dt><a id=\"manual.bugs.dr171\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr171\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n \t<span class=\"bold\"><strong>Strange seekpos() semantics due to joint position</strong></span>\n     </span></dt><dd><p>Quite complex to summarize...\n-    </p></dd><dt><a id=\"manual.bugs.dr181\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr181\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n \t<span class=\"bold\"><strong>make_pair() unintended behavior</strong></span>\n     </span></dt><dd><p>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n-    </p></dd><dt><a id=\"manual.bugs.dr195\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr195\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n \t<span class=\"bold\"><strong>Should basic_istream::sentry's constructor ever set eofbit?</strong></span>\n     </span></dt><dd><p>Yes, it can, specifically if EOF is reached while skipping whitespace.\n-    </p></dd><dt><a id=\"manual.bugs.dr206\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#206\" target=\"_top\">206</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr206\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#206\" target=\"_top\">206</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">operator new(size_t, nothrow)</code> may become\n \t  unlinked to ordinary <code class=\"code\">operator new</code> if ordinary\n \t  version replaced\n \t</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">nothrow</code> forms of new and delete were\n       changed to call the throwing forms, handling any exception by\n       catching it and returning a null pointer.\n-    </p></dd><dt><a id=\"manual.bugs.dr211\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr211\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n \t<span class=\"bold\"><strong>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</strong></span>\n     </span></dt><dd><p>If nothing is extracted into the string, <code class=\"code\">op&gt;&gt;</code> now\n \tsets <code class=\"code\">failbit</code> (which can cause an exception, etc., etc.).\n-    </p></dd><dt><a id=\"manual.bugs.dr214\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr214\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n \t<span class=\"bold\"><strong>set::find() missing const overload</strong></span>\n     </span></dt><dd><p>Both <code class=\"code\">set</code> and <code class=\"code\">multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n-    </p></dd><dt><a id=\"manual.bugs.dr231\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr231\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n \t<span class=\"bold\"><strong>Precision in iostream?</strong></span>\n     </span></dt><dd><p>For conversion from a floating-point type, <code class=\"code\">str.precision()</code>\n \tis specified in the conversion specification.\n-    </p></dd><dt><a id=\"manual.bugs.dr233\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr233\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n \t<span class=\"bold\"><strong>Insertion hints in associative containers</strong></span>\n     </span></dt><dd><p>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n-    </p></dd><dt><a id=\"manual.bugs.dr235\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr235\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n \t<span class=\"bold\"><strong>No specification of default ctor for reverse_iterator</strong></span>\n     </span></dt><dd><p>The declaration of <code class=\"code\">reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n-    </p></dd><dt><a id=\"manual.bugs.dr241\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr241\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n \t<span class=\"bold\"><strong>Does unique_copy() require CopyConstructible and Assignable?</strong></span>\n     </span></dt><dd><p>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n-    </p></dd><dt><a id=\"manual.bugs.dr243\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr243\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n \t<span class=\"bold\"><strong>get and getline when sentry reports failure</strong></span>\n     </span></dt><dd><p>Store a null character only if the character array has a non-zero size.\n-    </p></dd><dt><a id=\"manual.bugs.dr251\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr251\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n \t<span class=\"bold\"><strong>basic_stringbuf missing allocator_type</strong></span>\n     </span></dt><dd><p>This nested typedef was originally not specified.\n-    </p></dd><dt><a id=\"manual.bugs.dr253\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr253\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n \t<span class=\"bold\"><strong>valarray helper functions are almost entirely useless</strong></span>\n     </span></dt><dd><p>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n-    </p></dd><dt><a id=\"manual.bugs.dr265\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr265\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n \t<span class=\"bold\"><strong>std::pair::pair() effects overly restrictive</strong></span>\n     </span></dt><dd><p>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n-    </p></dd><dt><a id=\"manual.bugs.dr266\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr266\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n \t<span class=\"bold\"><strong>bad_exception::~bad_exception() missing Effects clause</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n-    </p></dd><dt><a id=\"manual.bugs.dr271\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr271\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n \t<span class=\"bold\"><strong>basic_iostream missing typedefs</strong></span>\n     </span></dt><dd><p>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code class=\"code\">basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n-    </p></dd><dt><a id=\"manual.bugs.dr275\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr275\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n \t<span class=\"bold\"><strong>Wrong type in num_get::get() overloads</strong></span>\n     </span></dt><dd><p>Similar to 118.\n-    </p></dd><dt><a id=\"manual.bugs.dr280\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr280\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n \t<span class=\"bold\"><strong>Comparison of reverse_iterator to const reverse_iterator</strong></span>\n     </span></dt><dd><p>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n-    </p></dd><dt><a id=\"manual.bugs.dr292\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr292\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n \t<span class=\"bold\"><strong>Effects of a.copyfmt (a)</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;rhs)</code> do nothing.\n-    </p></dd><dt><a id=\"manual.bugs.dr300\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr300\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n \t<span class=\"bold\"><strong>List::merge() specification incomplete</strong></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;x)</code> do nothing.\n-    </p></dd><dt><a id=\"manual.bugs.dr303\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr303\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n \t<span class=\"bold\"><strong>Bitset input operator underspecified</strong></span>\n     </span></dt><dd><p>Basically, compare the input character to\n \t\t    <code class=\"code\">is.widen(0)</code> and <code class=\"code\">is.widen(1)</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr305\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr305\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n \t<span class=\"bold\"><strong>Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</strong></span>\n     </span></dt><dd><p>Do not specify what <code class=\"code\">codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n-    </p></dd><dt><a id=\"manual.bugs.dr328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr328\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n \t<span class=\"bold\"><strong>Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</strong></span>\n     </span></dt><dd><p>Change the format string to \"%.0Lf\".\n-    </p></dd><dt><a id=\"manual.bugs.dr365\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr365\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n \t<span class=\"bold\"><strong>Lack of const-qualification in clause 27</strong></span>\n     </span></dt><dd><p>Add const overloads of <code class=\"code\">is_open</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr387\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr387\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n \t<span class=\"bold\"><strong>std::complex over-encapsulated</strong></span>\n     </span></dt><dd><p>Add the <code class=\"code\">real(T)</code> and <code class=\"code\">imag(T)</code>\n \t\t    members;  in C++11 mode, also adjust the existing\n \t\t    <code class=\"code\">real()</code> and <code class=\"code\">imag()</code> members and\n \t\t    free functions.\n-    </p></dd><dt><a id=\"manual.bugs.dr389\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr389\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n \t<span class=\"bold\"><strong>Const overload of valarray::operator[] returns\n \t\t  by value</strong></span>\n     </span></dt><dd><p>Change it to return a <code class=\"code\">const T&amp;</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr396\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr396\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n \t<span class=\"bold\"><strong>what are characters zero and one</strong></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><a id=\"manual.bugs.dr402\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr402\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n \t<span class=\"bold\"><strong>Wrong new expression in [some_]allocator::construct</strong></span>\n     </span></dt><dd><p>Replace \"new\" with \"::new\".\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#408\" target=\"_top\">408</a>:\n \t<span class=\"bold\"><strong>\n \tIs vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n \t</strong></span>\n     </span></dt><dd><p>Tweak the debug-mode checks in _Safe_iterator.\n-    </p></dd><dt><a id=\"manual.bugs.dr409\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr409\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n \t<span class=\"bold\"><strong>Closing an fstream should clear the error state</strong></span>\n     </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n-    </p></dd><dt><a id=\"manual.bugs.dr415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#415\" target=\"_top\">415</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr415\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#415\" target=\"_top\">415</a>:\n \t<span class=\"bold\"><strong>Behavior of std::ws</strong></span>\n     </span></dt><dd><p>Change it to be an unformatted input function\n       (i.e. construct a sentry and catch exceptions).\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#431\" target=\"_top\">431</a>:\n \t<span class=\"bold\"><strong>Swapping containers with unequal allocators</strong></span>\n     </span></dt><dd><p>Implement Option 3, as per N1599.\n-    </p></dd><dt><a id=\"manual.bugs.dr432\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr432\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n \t<span class=\"bold\"><strong>stringbuf::overflow() makes only one write position\n \t    available</strong></span>\n     </span></dt><dd><p>Implement the resolution, beyond DR 169.\n-    </p></dd><dt><a id=\"manual.bugs.dr434\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr434\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n \t<span class=\"bold\"><strong>bitset::to_string() hard to use</strong></span>\n     </span></dt><dd><p>Add three overloads, taking fewer template arguments.\n-    </p></dd><dt><a id=\"manual.bugs.dr438\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr438\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n \t<span class=\"bold\"><strong>Ambiguity in the \"do the right thing\" clause</strong></span>\n     </span></dt><dd><p>Implement the resolution, basically cast less.\n-    </p></dd><dt><a id=\"manual.bugs.dr445\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr445\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n \t<span class=\"bold\"><strong>iterator_traits::reference unspecified for some iterator categories</strong></span>\n     </span></dt><dd><p>Change <code class=\"code\">istreambuf_iterator::reference</code> in C++11 mode.\n-    </p></dd><dt><a id=\"manual.bugs.dr453\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr453\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n \t<span class=\"bold\"><strong>basic_stringbuf::seekoff need not always fail for an empty stream</strong></span>\n     </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n-    </p></dd><dt><a id=\"manual.bugs.dr455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr455\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n \t<span class=\"bold\"><strong>cerr::tie() and wcerr::tie() are overspecified</strong></span>\n     </span></dt><dd><p>Initialize cerr tied to cout and wcerr tied to wcout.\n-    </p></dd><dt><a id=\"manual.bugs.dr464\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr464\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n \t<span class=\"bold\"><strong>Suggestion for new member functions in standard containers</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n \t<code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr467\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr467\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n \t<span class=\"bold\"><strong>char_traits::lt(), compare(), and memcmp()</strong></span>\n     </span></dt><dd><p>Change <code class=\"code\">lt</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr508\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr508\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n \t<span class=\"bold\"><strong>Bad parameters for ranlux64_base_01</strong></span>\n     </span></dt><dd><p>Fix the parameters.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#512\" target=\"_top\">512</a>:\n@@ -288,338 +288,338 @@\n \t<span class=\"bold\"><strong>Is it undefined if a function in the standard changes in\n \t    parameters?</strong></span>\n     </span></dt><dd><p>Use &amp;value.\n-    </p></dd><dt><a id=\"manual.bugs.dr538\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr538\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n \t<span class=\"bold\"><strong>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</strong></span>\n     </span></dt><dd><p>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n-    </p></dd><dt><a id=\"manual.bugs.dr539\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr539\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n \t<span class=\"bold\"><strong>partial_sum and adjacent_difference should mention\n \t    requirements</strong></span>\n     </span></dt><dd><p>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n-    </p></dd><dt><a id=\"manual.bugs.dr541\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr541\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n \t<span class=\"bold\"><strong>shared_ptr template assignment and void</strong></span>\n     </span></dt><dd><p>Add an auto_ptr&lt;void&gt; specialization.\n-    </p></dd><dt><a id=\"manual.bugs.dr543\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr543\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n \t<span class=\"bold\"><strong>valarray slice default constructor</strong></span>\n     </span></dt><dd><p>Follow the straightforward proposed resolution.\n-    </p></dd><dt><a id=\"manual.bugs.dr550\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr550\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n \t<span class=\"bold\"><strong>What should the return type of pow(float,int) be?</strong></span>\n     </span></dt><dd><p>In C++11 mode, remove the pow(float,int), etc., signatures.\n-    </p></dd><dt><a id=\"manual.bugs.dr581\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#581\" target=\"_top\">581</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr581\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#581\" target=\"_top\">581</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">flush()</code> not unformatted function</strong></span>\n     </span></dt><dd><p>Change it to be a unformatted output function (i.e. construct a sentry and catch exceptions).\n-    </p></dd><dt><a id=\"manual.bugs.dr586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr586\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n \t<span class=\"bold\"><strong>string inserter not a formatted function</strong></span>\n     </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions).\n-    </p></dd><dt><a id=\"manual.bugs.dr596\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr596\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n \t<span class=\"bold\"><strong>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</strong></span>\n     </span></dt><dd><p>Add the missing modes to fopen_mode.\n-    </p></dd><dt><a id=\"manual.bugs.dr630\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr630\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n \t<span class=\"bold\"><strong>arrays of valarray</strong></span>\n     </span></dt><dd><p>Implement the simple resolution.\n-    </p></dd><dt><a id=\"manual.bugs.dr660\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr660\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n \t<span class=\"bold\"><strong>Missing bitwise operations</strong></span>\n     </span></dt><dd><p>Add the missing operations.\n-    </p></dd><dt><a id=\"manual.bugs.dr691\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr691\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n \t<span class=\"bold\"><strong>const_local_iterator cbegin, cend missing from TR1</strong></span>\n     </span></dt><dd><p>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n-    </p></dd><dt><a id=\"manual.bugs.dr693\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr693\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n \t<span class=\"bold\"><strong>std::bitset::all() missing</strong></span>\n     </span></dt><dd><p>Add it, consistently with the discussion.\n-    </p></dd><dt><a id=\"manual.bugs.dr695\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr695\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n \t<span class=\"bold\"><strong>ctype&lt;char&gt;::classic_table() not accessible</strong></span>\n     </span></dt><dd><p>Make the member functions table and classic_table public.\n-    </p></dd><dt><a id=\"manual.bugs.dr696\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr696\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n \t<span class=\"bold\"><strong>istream::operator&gt;&gt;(int&amp;) broken</strong></span>\n     </span></dt><dd><p>Implement the straightforward resolution.\n-    </p></dd><dt><a id=\"manual.bugs.dr761\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr761\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n \t<span class=\"bold\"><strong>unordered_map needs an at() member function</strong></span>\n     </span></dt><dd><p>In C++11 mode, add at() and at() const.\n-    </p></dd><dt><a id=\"manual.bugs.dr775\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr775\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n \t<span class=\"bold\"><strong>Tuple indexing should be unsigned?</strong></span>\n     </span></dt><dd><p>Implement the int -&gt; size_t replacements.\n-    </p></dd><dt><a id=\"manual.bugs.dr776\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr776\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n \t<span class=\"bold\"><strong>Undescribed assign function of std::array</strong></span>\n     </span></dt><dd><p>In C++11 mode, remove assign, add fill.\n-    </p></dd><dt><a id=\"manual.bugs.dr781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr781\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n \t<span class=\"bold\"><strong>std::complex should add missing C99 functions</strong></span>\n     </span></dt><dd><p>In C++11 mode, add std::proj.\n-    </p></dd><dt><a id=\"manual.bugs.dr809\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr809\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n \t<span class=\"bold\"><strong>std::swap should be overloaded for array types</strong></span>\n     </span></dt><dd><p>Add the overload.\n-    </p></dd><dt><a id=\"manual.bugs.dr853\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr853\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n \t<span class=\"bold\"><strong>to_string needs updating with zero and one</strong></span>\n     </span></dt><dd><p>Update / add the signatures.\n-    </p></dd><dt><a id=\"manual.bugs.dr865\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr865\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n \t<span class=\"bold\"><strong>More algorithms that throw away information</strong></span>\n     </span></dt><dd><p>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n-    </p></dd><dt><a id=\"manual.bugs.dr1203\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1203\" target=\"_top\">1203</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr1203\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1203\" target=\"_top\">1203</a>:\n \t<span class=\"bold\"><strong>More useful rvalue stream insertion</strong></span>\n     </span></dt><dd><p>Return the stream as its original type, not the base class.\n-    </p></dd><dt><a id=\"manual.bugs.dr1339\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr1339\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n \t<span class=\"bold\"><strong>uninitialized_fill_n should return the end of its range</strong></span>\n     </span></dt><dd><p>Return the end of the filled range.\n-    </p></dd><dt><a id=\"manual.bugs.dr2021\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2021\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n \t<span class=\"bold\"><strong>Further incorrect uses of <code class=\"code\">result_of</code></strong></span>\n     </span></dt><dd><p>Correctly decay types in signature of <code class=\"code\">std::async</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2049\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2049\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">is_destructible</code> underspecified</strong></span>\n     </span></dt><dd><p>Handle non-object types.\n-    </p></dd><dt><a id=\"manual.bugs.dr2056\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2056\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n \t<span class=\"bold\"><strong>future_errc enums start with value 0 (invalid value for broken_promise)</strong></span>\n     </span></dt><dd><p>Reorder enumerators.\n-    </p></dd><dt><a id=\"manual.bugs.dr2059\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2059\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n \t<span class=\"bold\"><strong>C++0x ambiguity problem with map::erase</strong></span>\n     </span></dt><dd><p>Add additional overloads.\n-    </p></dd><dt><a id=\"manual.bugs.dr2062\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2062\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n \t<span class=\"bold\"><strong>2062. Effect contradictions w/o no-throw guarantee of <code class=\"code\">std::function</code> swaps</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to swap functions.\n-    </p></dd><dt><a id=\"manual.bugs.dr2063\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2063\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n \t<span class=\"bold\"><strong>Contradictory requirements for string move assignment</strong></span>\n     </span></dt><dd><p>Respect propagation trait for move assignment.\n-    </p></dd><dt><a id=\"manual.bugs.dr2064\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2064\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n \t<span class=\"bold\"><strong>More noexcept issues in basic_string</strong></span>\n     </span></dt><dd><p>Add noexcept to the comparison operators.\n-    </p></dd><dt><a id=\"manual.bugs.dr2067\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2067\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n \t<span class=\"bold\"><strong>packaged_task should have deleted copy c'tor with const parameter</strong></span>\n     </span></dt><dd><p>Fix signatures.\n-    </p></dd><dt><a id=\"manual.bugs.dr2101\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2101\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n \t<span class=\"bold\"><strong>Some transformation types can produce impossible types</strong></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><a id=\"manual.bugs.dr2106\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2106\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n \t<span class=\"bold\"><strong>move_iterator wrapping iterators returning prvalues</strong></span>\n     </span></dt><dd><p>Change the <code class=\"code\">reference</code> type.\n-    </p></dd><dt><a id=\"manual.bugs.dr2108\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2108\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n \t<span class=\"bold\"><strong>No way to identify allocator types that always compare equal</strong></span>\n     </span></dt><dd><p>Define and use <code class=\"code\">is_always_equal</code> even for C++11.\n-    </p></dd><dt><a id=\"manual.bugs.dr2118\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2118\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</strong></span>\n     </span></dt><dd><p>Adjust constraints to allow safe conversions.\n-    </p></dd><dt><a id=\"manual.bugs.dr2127\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2127\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n \t<span class=\"bold\"><strong>Move-construction with <code class=\"code\">raw_storage_iterator</code></strong></span>\n     </span></dt><dd><p>Add assignment operator taking an rvalue.\n-    </p></dd><dt><a id=\"manual.bugs.dr2132\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2132\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">std::function</code> ambiguity</strong></span>\n     </span></dt><dd><p>Constrain the constructor to only accept callable types.\n-    </p></dd><dt><a id=\"manual.bugs.dr2141\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2141\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">common_type</code> trait produces reference types</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">decay</code> for the result type.\n-    </p></dd><dt><a id=\"manual.bugs.dr2144\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2144\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n \t<span class=\"bold\"><strong>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>\n-    </p></dd><dt><a id=\"manual.bugs.dr2145\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2145\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">error_category</code> default constructor</strong></span>\n     </span></dt><dd><p>Declare a public constexpr constructor.\n-    </p></dd><dt><a id=\"manual.bugs.dr2162\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2162\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2187\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2187\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n-    </p></dd><dt><a id=\"manual.bugs.dr2192\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2192\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n \t<span class=\"bold\"><strong>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</strong></span>\n     </span></dt><dd><p>Move all declarations to a common header and remove the\n     generic <code class=\"code\">abs</code> which accepted unsigned arguments.\n-    </p></dd><dt><a id=\"manual.bugs.dr2196\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2196\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n \t<span class=\"bold\"><strong>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</strong></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><a id=\"manual.bugs.dr2212\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2212\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">tuple_size</code> for <code class=\"code\">const pair</code> request <code class=\"code\">&lt;tuple&gt;</code> header</strong></span>\n     </span></dt><dd><p>The <code class=\"code\">tuple_size</code> and <code class=\"code\">tuple_element</code>\n     partial specializations are defined in <code class=\"code\">&lt;utility&gt;</code> which\n     is included by <code class=\"code\">&lt;array&gt;</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2296\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2296\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">std::addressof</code> should be constexpr</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">__builtin_addressof</code> and add\n     <code class=\"code\">constexpr</code> to <code class=\"code\">addressof</code> for C++17 and later.\n-    </p></dd><dt><a id=\"manual.bugs.dr2306\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2306\" target=\"_top\">2306</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2306\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2306\" target=\"_top\">2306</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">match_results::reference</code> should be <code class=\"code\">value_type&amp;</code>, not <code class=\"code\">const value_type&amp;</code></strong></span>\n     </span></dt><dd><p>Change typedef.\n-    </p></dd><dt><a id=\"manual.bugs.dr2313\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2313\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></strong></span>\n     </span></dt><dd><p>Update definitions of the partial specializations for const and volatile types.\n-    </p></dd><dt><a id=\"manual.bugs.dr2328\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2328\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n \t<span class=\"bold\"><strong>Rvalue stream extraction should use perfect forwarding</strong></span>\n     </span></dt><dd><p>Use perfect forwarding for right operand.\n-    </p></dd><dt><a id=\"manual.bugs.dr2329\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2329\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</strong></span>\n     </span></dt><dd><p>Add deleted overloads for rvalue strings.\n-    </p></dd><dt><a id=\"manual.bugs.dr2332\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2332\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</strong></span>\n     </span></dt><dd><p>Add deleted constructors.\n-    </p></dd><dt><a id=\"manual.bugs.dr2354\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2354\" target=\"_top\">2332</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2354\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2354\" target=\"_top\">2332</a>:\n \t<span class=\"bold\"><strong>Unnecessary copying when inserting into maps with braced-init syntax</strong></span>\n     </span></dt><dd><p>Add overloads of <code class=\"code\">insert</code> taking <code class=\"code\">value_type&amp;&amp;</code> rvalues.\n-    </p></dd><dt><a id=\"manual.bugs.dr2399\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2399\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</strong></span>\n     </span></dt><dd><p>Constrain the constructor to require convertibility.\n-    </p></dd><dt><a id=\"manual.bugs.dr2400\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2400\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">addressof</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2401\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2401\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to the assignment and comparisons.\n-    </p></dd><dt><a id=\"manual.bugs.dr2407\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2407\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code class=\"code\">explicit</code>\n \t</strong></span>\n     </span></dt><dd><p>Remove <code class=\"code\">explicit</code> from the constructor.\n-    </p></dd><dt><a id=\"manual.bugs.dr2408\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2408\" target=\"_top\">2408</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2408\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2408\" target=\"_top\">2408</a>:\n \t<span class=\"bold\"><strong>SFINAE-friendly\n          <code class=\"code\">common_type</code>/<code class=\"code\">iterator_traits</code>\n          is missing in C++14\n \t</strong></span>\n     </span></dt><dd><p>Make <code class=\"code\">iterator_traits</code> empty if any of the\n       types is not present in the iterator.\n       Make <code class=\"code\">common_type&lt;&gt;</code> empty.\n-    </p></dd><dt><a id=\"manual.bugs.dr2415\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2415\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n \t<span class=\"bold\"><strong>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></strong></span>\n     </span></dt><dd><p>Create empty an <code class=\"code\">shared_ptr</code> from an empty\n                     <code class=\"code\">unique_ptr</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2418\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2418\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">apply</code> does not work with member pointers</strong></span>\n     </span></dt><dd><p>Use <code class=\"code\">mem_fn</code> for member pointers.\n-    </p></dd><dt><a id=\"manual.bugs.dr2440\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2440\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></strong></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2441\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2441\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n \t<span class=\"bold\"><strong>Exact-width atomic typedefs should be provided</strong></span>\n     </span></dt><dd><p>Define the typedefs.\n-    </p></dd><dt><a id=\"manual.bugs.dr2442\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2442\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></strong></span>\n     </span></dt><dd><p>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code class=\"code\">std::invoke</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2454\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2454\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n \t<span class=\"bold\"><strong>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n \t</strong></span>\n     </span></dt><dd><p>Add the <code class=\"code\">base()</code> member function.\n-    </p></dd><dt><a id=\"manual.bugs.dr2455\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2455\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n \t<span class=\"bold\"><strong>Allocator default construction should be allowed to throw\n \t</strong></span>\n     </span></dt><dd><p>Make <code class=\"code\">noexcept</code> specifications conditional.\n-    </p></dd><dt><a id=\"manual.bugs.dr2458\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2458\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n \t<span class=\"bold\"><strong>N3778 and new library deallocation signatures\n \t</strong></span>\n     </span></dt><dd><p>Remove unused overloads.\n-    </p></dd><dt><a id=\"manual.bugs.dr2459\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2459\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">std::polar</code> should require a non-negative rho\n \t</strong></span>\n     </span></dt><dd><p>Add debug mode assertion.\n-    </p></dd><dt><a id=\"manual.bugs.dr2465\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2465\" target=\"_top\">2465</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2465\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2465\" target=\"_top\">2465</a>:\n \t<span class=\"bold\"><strong>SFINAE-friendly <code class=\"code\">common_type</code> is nearly impossible\n        to specialize correctly and regresses key functionality\n \t</strong></span>\n     </span></dt><dd><p>Detect whether <code class=\"code\">decay_t</code> changes either type\n       and use the decayed types if so.\n-    </p></dd><dt><a id=\"manual.bugs.dr2466\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2466\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n \t</strong></span>\n     </span></dt><dd><p>Divide by the object type.\n-    </p></dd><dt><a id=\"manual.bugs.dr2484\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2484\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n \t</strong></span>\n     </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n     ill-formed.\n-    </p></dd><dt><a id=\"manual.bugs.dr2487\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2487\" target=\"_top\">2487</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2487\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2487\" target=\"_top\">2487</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">bind()</code> should be <code class=\"code\">const</code>-overloaded\n \tnot <span class=\"emphasis\"><em>cv</em></span>-overloaded\n \t</strong></span>\n     </span></dt><dd><p>Deprecate volatile-qualified <code class=\"code\">operator()</code>\n     for C++17, make it ill-formed for C++20.\n-    </p></dd><dt><a id=\"manual.bugs.dr2499\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2499\" target=\"_top\">2499</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2499\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2499\" target=\"_top\">2499</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code> makes it hard to avoid buffer overflows\n \t</strong></span>\n     </span></dt><dd><p>Replace <code class=\"code\">operator&gt;&gt;(basic_istream&amp;, CharT*)</code>\n      and other overloads writing through pointers.\n-    </p></dd><dt><a id=\"manual.bugs.dr2537\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2537\" target=\"_top\">2537</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2537\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2537\" target=\"_top\">2537</a>:\n \t<span class=\"bold\"><strong>Constructors for <code class=\"code\">priority_queue</code> taking allocators\n \t should call <code class=\"code\">make_heap</code>\n \t</strong></span>\n     </span></dt><dd><p>Call <code class=\"code\">make_heap</code>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2566\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2566\" target=\"_top\">2566</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2566\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2566\" target=\"_top\">2566</a>:\n \t<span class=\"bold\"><strong>Requirements on the first template parameter of container adaptors\n \t</strong></span>\n     </span></dt><dd><p>Add static assertions to enforce the requirement.\n-    </p></dd><dt><a id=\"manual.bugs.dr2583\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2583\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n \t<span class=\"bold\"><strong>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n \t</strong></span>\n     </span></dt><dd><p>Add new constructor.\n-    </p></dd><dt><a id=\"manual.bugs.dr2586\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2586\" target=\"_top\">2586</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2586\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2586\" target=\"_top\">2586</a>:\n \t<span class=\"bold\"><strong>Wrong value category used in <code class=\"code\">scoped_allocator_adaptor::construct()</code>\n \t</strong></span>\n     </span></dt><dd><p>Change internal helper for uses-allocator construction\n       to always check using const lvalue allocators.\n-    </p></dd><dt><a id=\"manual.bugs.dr2684\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2684\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">priority_queue</code> lacking comparator typedef\n \t</strong></span>\n     </span></dt><dd><p>Define the <code class=\"code\">value_compare</code> typedef.\n-    </p></dd><dt><a id=\"manual.bugs.dr2735\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2735\" target=\"_top\">2735</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2735\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2735\" target=\"_top\">2735</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">std::abs(short)</code>,\n \t <code class=\"code\">std::abs(signed char)</code> and others should return\n \t <code class=\"code\">int</code> instead of <code class=\"code\">double</code> in order to be\n \t compatible with C++98 and C\n \t</strong></span>\n     </span></dt><dd><p>Resolved by the changes for\n       <a class=\"link\" href=\"bugs.html#manual.bugs.dr2192\">2192</a>.\n-    </p></dd><dt><a id=\"manual.bugs.dr2770\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2770\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n \t</strong></span>\n     </span></dt><dd><p>Safely detect <code class=\"code\">tuple_size&lt;T&gt;::value</code> and\n       only use it if valid.\n-    </p></dd><dt><a id=\"manual.bugs.dr2781\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2781\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n \t<span class=\"bold\"><strong>Contradictory requirements for <code class=\"code\">std::function</code>\n          and <code class=\"code\">std::reference_wrapper</code>\n \t</strong></span>\n     </span></dt><dd><p>Remove special handling for <code class=\"code\">reference_wrapper</code>\n       arguments and store them directly as the target object.\n-    </p></dd><dt><a id=\"manual.bugs.dr2802\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" target=\"_top\">2802</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2802\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" target=\"_top\">2802</a>:\n \t<span class=\"bold\"><strong>Add noexcept to several <code class=\"code\">shared_ptr</code> related\n          functions\n \t</strong></span>\n     </span></dt><dd><p>Add noexcept.\n-    </p></dd><dt><a id=\"manual.bugs.dr2873\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2873\" target=\"_top\">2873</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2873\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2873\" target=\"_top\">2873</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">shared_ptr</code> constructor requirements for a deleter\n \t</strong></span>\n     </span></dt><dd><p>Use rvalues for deleters.\n-    </p></dd><dt><a id=\"manual.bugs.dr2921\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2921\" target=\"_top\">2921</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2921\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2921\" target=\"_top\">2921</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">packaged_task</code> and type-erased allocators\n \t</strong></span>\n     </span></dt><dd><p>For C++17 mode, remove the constructors taking\n       an allocator argument.\n-    </p></dd><dt><a id=\"manual.bugs.dr2942\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2942\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2942\" target=\"_top\">2942</a>:\n \t<span class=\"bold\"><strong>LWG 2873's resolution missed\n          <code class=\"code\">weak_ptr::owner_before</code>\n \t</strong></span>\n     </span></dt><dd><p>Add noexcept.\n-    </p></dd><dt><a id=\"manual.bugs.dr2996\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2996\" target=\"_top\">2996</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2996\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2996\" target=\"_top\">2996</a>:\n \t<span class=\"bold\"><strong>Missing rvalue overloads for\n          <code class=\"code\">shared_ptr</code> operations\n \t</strong></span>\n     </span></dt><dd><p>Add additional constructor and cast overloads.\n-    </p></dd><dt><a id=\"manual.bugs.dr2993\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2993\" target=\"_top\">2993</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr2993\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2993\" target=\"_top\">2993</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">reference_wrapper&lt;T&gt;</code> conversion from <code class=\"code\">T&amp;&amp;</code>\n \t</strong></span>\n     </span></dt><dd><p>Replaced the constructors with a constrained template,\n       to prevent participation in overload resolution when not valid.\n-    </p></dd><dt><a id=\"manual.bugs.dr3074\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3074\" target=\"_top\">3074</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr3074\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3074\" target=\"_top\">3074</a>:\n \t<span class=\"bold\"><strong>Non-member functions for <code class=\"code\">valarray</code> should only deduce from the <code class=\"code\">valarray</code>\n \t</strong></span>\n     </span></dt><dd><p>Change scalar operands to be non-deduced context, so that\n       they will allow conversions from other types to the value_type.\n-    </p></dd><dt><a id=\"manual.bugs.dr3076\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3076\" target=\"_top\">3076</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr3076\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3076\" target=\"_top\">3076</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">basic_string</code> CTAD ambiguity\n \t</strong></span>\n     </span></dt><dd><p>Change constructors to constrained templates.\n-    </p></dd><dt><a id=\"manual.bugs.dr3096\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3096\" target=\"_top\">3096</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr3096\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3096\" target=\"_top\">3096</a>:\n \t<span class=\"bold\"><strong><code class=\"code\">path::lexically_relative</code> is confused by trailing slashes\n \t</strong></span>\n     </span></dt><dd><p>Implement the fix for trailing slashes.\n-    </p></dd><dt><a id=\"manual.bugs.dr3656\"></a><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3656\" target=\"_top\">3656</a>:\n+    </p></dd><dt><a id=\"manual.bugs.dr3656\"></a><span class=\"term\"><a class=\"link\" href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#3656\" target=\"_top\">3656</a>:\n \t<span class=\"bold\"><strong>Inconsistent bit operations returning a count\n \t</strong></span>\n     </span></dt><dd><p>Changed <code class=\"code\">bit_width</code> to return <code class=\"code\">int</code>."}, {"sha": "03d538546b770eb561d0bb475bfbf2ac0647d541", "filename": "libstdc++-v3/doc/xml/manual/intro.xml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e75b2c67e56f1c4f532e76798afab98155805f78/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e75b2c67e56f1c4f532e76798afab98155805f78/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fintro.xml?ref=e75b2c67e56f1c4f532e76798afab98155805f78", "patch": "@@ -1,7 +1,7 @@\n <?xml version='1.0'?>\n <!DOCTYPE part [\n   <!ENTITY DR\n-\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html\">\n+\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html\">\n ] >\n \n <part xmlns=\"http://docbook.org/ns/docbook\" version=\"5.0\" xml:id=\"manual.intro\" xreflabel=\"Introduction\">\n@@ -225,7 +225,7 @@ requirements of the license of GCC.\n \tHere are the issues which have resulted in code changes to the library.\n \tThe links are to the full version of the Issues List.\n         You can read the full version online\n-\tat the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/\">ISO C++\n+\tat the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://www.open-std.org/jtc1/sc22/wg21/\">ISO C++\n \tCommittee homepage</link>.\n       </para>\n       <para>\n@@ -236,7 +236,7 @@ requirements of the license of GCC.\n \tdirectories for appearances of\n \t<constant>_GLIBCXX_RESOLVE_LIB_DEFECTS</constant> for examples\n \tof style.  Note that we usually do not make changes to the\n-\tcode until an issue has reached <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</link> status.\n+\tcode until an issue has reached <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\">DR</link> status.\n       </para>\n \n       <variablelist>"}]}