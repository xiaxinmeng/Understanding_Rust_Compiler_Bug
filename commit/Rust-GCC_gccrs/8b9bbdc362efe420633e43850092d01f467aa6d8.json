{"sha": "8b9bbdc362efe420633e43850092d01f467aa6d8", "node_id": "C_kwDOANBUbNoAKDhiOWJiZGMzNjJlZmU0MjA2MzNlNDM4NTAwOTJkMDFmNDY3YWE2ZDg", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-08-05T14:31:19Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:20Z"}, "message": "[Ada] Improve detection of illegal Iterable aspects\n\nHandling of aspect Iterable was lacking guards against illegal code, so\nthe compiler either crashed or emitted cryptic errors while expanding\nloops that rely on this aspect.\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_aspects.rst\n\t(Aspect Iterable): Include Last and Previous primitives in\n\tsyntactic and semantic description.\n\t* exp_attr.adb\n\t(Expand_N_Attribute_Reference): Don't expect attributes like\n\tIterable that can only appear in attribute definition clauses.\n\t* sem_ch13.adb\n\t(Analyze_Attribute_Definition_Clause): Prevent crash on\n\tnon-aggregate Iterable attribute; improve basic diagnosis of\n\tattribute values.\n\t(Resolve_Iterable_Operation): Improve checks for illegal\n\tprimitives in aspect Iterable, e.g. with wrong number of formal\n\tparameters.\n\t(Validate_Iterable_Aspect): Prevent crashes on syntactically\n\tillegal aspect expression.\n\t* sem_util.adb\n\t(Get_Cursor_Type): Fix style.\n\t* gnat_ugn.texi, gnat_rm.texi: Regenerate.", "tree": {"sha": "1f66eea81dcb093b509dd15270d2da67373caaef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f66eea81dcb093b509dd15270d2da67373caaef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b9bbdc362efe420633e43850092d01f467aa6d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9bbdc362efe420633e43850092d01f467aa6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9bbdc362efe420633e43850092d01f467aa6d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9bbdc362efe420633e43850092d01f467aa6d8/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b15134378bfba88effc523f4eb2c20a9486a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b15134378bfba88effc523f4eb2c20a9486a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b15134378bfba88effc523f4eb2c20a9486a63"}], "stats": {"total": 112, "additions": 71, "deletions": 41}, "files": [{"sha": "4541f2bc70b23f391d3015b968f449353d7682a0", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -317,23 +317,27 @@ The following is a typical example of use:\n   type List is private with\n       Iterable => (First       => First_Cursor,\n                    Next        => Advance,\n-                   Has_Element => Cursor_Has_Element,\n-                  [Element     => Get_Element]);\n+                   Has_Element => Cursor_Has_Element\n+                 [,Element     => Get_Element]\n+                 [,Last        => Last_Cursor]\n+                 [,Previous    => Retreat]);\n \n-* The value denoted by ``First`` must denote a primitive operation of the\n-  container type that returns a ``Cursor``, which must a be a type declared in\n+* The values of ``First`` and ``Last`` are primitive operations of the\n+  container type that return a ``Cursor``, which must be a type declared in\n   the container package or visible from it. For example:\n \n .. code-block:: ada\n \n   function First_Cursor (Cont : Container) return Cursor;\n+  function Last_Cursor  (Cont : Container) return Cursor;\n \n-* The value of ``Next`` is a primitive operation of the container type that takes\n-  both a container and a cursor and yields a cursor. For example:\n+* The values of ``Next`` and ``Previous`` are primitive operations of the container type that take\n+  both a container and a cursor and yield a cursor. For example:\n \n .. code-block:: ada\n \n   function Advance (Cont : Container; Position : Cursor) return Cursor;\n+  function Retreat (Cont : Container; Position : Cursor) return Cursor;\n \n * The value of ``Has_Element`` is a primitive operation of the container type\n   that takes both a container and a cursor and yields a boolean. For example:"}, {"sha": "d28bb0864150550bfa021aeb8031eed8b2b0ad7c", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -2079,7 +2079,8 @@ package body Exp_Attr is\n \n       case Id is\n \n-      --  Attributes related to Ada 2012 iterators\n+      --  Attributes related to Ada 2012 iterators. They are only allowed in\n+      --  attribute definition clauses and should never be expanded.\n \n       when Attribute_Constant_Indexing\n          | Attribute_Default_Iterator\n@@ -2088,7 +2089,7 @@ package body Exp_Attr is\n          | Attribute_Iterator_Element\n          | Attribute_Variable_Indexing\n       =>\n-         null;\n+         raise Program_Error;\n \n       --  Internal attributes used to deal with Ada 2012 delayed aspects. These\n       --  were already rejected by the parser. Thus they shouldn't appear here."}, {"sha": "e63c757ac0ff1f210af91e4aeb032bced7d8a043", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -9774,33 +9774,37 @@ The following is a typical example of use:\n type List is private with\n     Iterable => (First       => First_Cursor,\n                  Next        => Advance,\n-                 Has_Element => Cursor_Has_Element,\n-                [Element     => Get_Element]);\n+                 Has_Element => Cursor_Has_Element\n+               [,Element     => Get_Element]\n+               [,Last        => Last_Cursor]\n+               [,Previous    => Retreat]);\n @end example\n \n \n @itemize *\n \n @item \n-The value denoted by @code{First} must denote a primitive operation of the\n-container type that returns a @code{Cursor}, which must a be a type declared in\n+The values of @code{First} and @code{Last} are primitive operations of the\n+container type that return a @code{Cursor}, which must be a type declared in\n the container package or visible from it. For example:\n @end itemize\n \n @example\n function First_Cursor (Cont : Container) return Cursor;\n+function Last_Cursor  (Cont : Container) return Cursor;\n @end example\n \n \n @itemize *\n \n @item \n-The value of @code{Next} is a primitive operation of the container type that takes\n-both a container and a cursor and yields a cursor. For example:\n+The values of @code{Next} and @code{Previous} are primitive operations of the container type that take\n+both a container and a cursor and yield a cursor. For example:\n @end itemize\n \n @example\n function Advance (Cont : Container; Position : Cursor) return Cursor;\n+function Retreat (Cont : Container; Position : Cursor) return Cursor;\n @end example\n \n "}, {"sha": "9865ef64fc1cd03726359cc290e1875414f03537", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -29308,8 +29308,8 @@ to permit their use in free software.\n \n @printindex ge\n \n-@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n @anchor{cf}@w{                              }\n+@anchor{gnat_ugn/gnat_utility_programs switches-related-to-project-files}@w{                              }\n \n @c %**end of body\n @bye"}, {"sha": "940379812306f2b96eb9a95381cba74442eff914", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 46, "deletions": 25, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -6959,6 +6959,7 @@ package body Sem_Ch13 is\n \n             if Nkind (Expr) /= N_Aggregate then\n                Error_Msg_N (\"aspect Iterable must be an aggregate\", Expr);\n+               return;\n             end if;\n \n             declare\n@@ -6969,7 +6970,9 @@ package body Sem_Ch13 is\n                while Present (Assoc) loop\n                   Analyze (Expression (Assoc));\n \n-                  if not Is_Entity_Name (Expression (Assoc)) then\n+                  if not Is_Entity_Name (Expression (Assoc))\n+                    or else Ekind (Entity (Expression (Assoc))) /= E_Function\n+                  then\n                      Error_Msg_N (\"value must be a function\", Assoc);\n                   end if;\n \n@@ -15875,22 +15878,34 @@ package body Sem_Ch13 is\n \n          Ent := Entity (N);\n          F1  := First_Formal (Ent);\n+         F2  := Next_Formal (F1);\n \n-         if Nam in Name_First | Name_Last then\n+         if Nam = Name_First then\n \n-            --  First or Last (Container) => Cursor\n+            --  First (Container) => Cursor\n \n             if Etype (Ent) /= Cursor then\n                Error_Msg_N (\"primitive for First must yield a cursor\", N);\n+            elsif Present (F2) then\n+               Error_Msg_N (\"no match for First iterable primitive\", N);\n+            end if;\n+\n+         elsif Nam = Name_Last then\n+\n+            --  Last (Container) => Cursor\n+\n+            if Etype (Ent) /= Cursor then\n+               Error_Msg_N (\"primitive for Last must yield a cursor\", N);\n+            elsif Present (F2) then\n+               Error_Msg_N (\"no match for Last iterable primitive\", N);\n             end if;\n \n          elsif Nam = Name_Next then\n \n             --  Next (Container, Cursor) => Cursor\n \n-            F2 := Next_Formal (F1);\n-\n-            if Etype (F2) /= Cursor\n+            if No (F2)\n+              or else Etype (F2) /= Cursor\n               or else Etype (Ent) /= Cursor\n               or else Present (Next_Formal (F2))\n             then\n@@ -15901,9 +15916,8 @@ package body Sem_Ch13 is\n \n             --  Previous (Container, Cursor) => Cursor\n \n-            F2 := Next_Formal (F1);\n-\n-            if Etype (F2) /= Cursor\n+            if No (F2)\n+              or else Etype (F2) /= Cursor\n               or else Etype (Ent) /= Cursor\n               or else Present (Next_Formal (F2))\n             then\n@@ -15914,17 +15928,17 @@ package body Sem_Ch13 is\n \n             --  Has_Element (Container, Cursor) => Boolean\n \n-            F2 := Next_Formal (F1);\n-\n-            if Etype (F2) /= Cursor\n+            if No (F2)\n+              or else Etype (F2) /= Cursor\n               or else Etype (Ent) /= Standard_Boolean\n               or else Present (Next_Formal (F2))\n             then\n                Error_Msg_N (\"no match for Has_Element iterable primitive\", N);\n             end if;\n \n          elsif Nam = Name_Element then\n-            F2 := Next_Formal (F1);\n+\n+            --  Element (Container, Cursor) => Element_Type;\n \n             if No (F2)\n               or else Etype (F2) /= Cursor\n@@ -17084,34 +17098,41 @@ package body Sem_Ch13 is\n    ------------------------------\n \n    procedure Validate_Iterable_Aspect (Typ : Entity_Id; ASN : Node_Id) is\n+      Aggr  : constant Node_Id := Expression (ASN);\n       Assoc : Node_Id;\n       Expr  : Node_Id;\n \n       Prim   : Node_Id;\n-      Cursor : constant Entity_Id := Get_Cursor_Type (ASN, Typ);\n+      Cursor : Entity_Id;\n \n-      First_Id       : Entity_Id;\n-      Last_Id        : Entity_Id;\n-      Next_Id        : Entity_Id;\n-      Has_Element_Id : Entity_Id;\n-      Element_Id     : Entity_Id;\n+      First_Id       : Entity_Id := Empty;\n+      Last_Id        : Entity_Id := Empty;\n+      Next_Id        : Entity_Id := Empty;\n+      Has_Element_Id : Entity_Id := Empty;\n+      Element_Id     : Entity_Id := Empty;\n \n    begin\n+      if Nkind (Aggr) /= N_Aggregate then\n+         Error_Msg_N (\"aspect Iterable must be an aggregate\", Aggr);\n+         return;\n+      end if;\n+\n+      Cursor := Get_Cursor_Type (ASN, Typ);\n+\n       --  If previous error aspect is unusable\n \n       if Cursor = Any_Type then\n          return;\n       end if;\n \n-      First_Id       := Empty;\n-      Last_Id        := Empty;\n-      Next_Id        := Empty;\n-      Has_Element_Id := Empty;\n-      Element_Id     := Empty;\n+      if not Is_Empty_List (Expressions (Aggr)) then\n+         Error_Msg_N\n+           (\"illegal positional association\", First (Expressions (Aggr)));\n+      end if;\n \n       --  Each expression must resolve to a function with the proper signature\n \n-      Assoc := First (Component_Associations (Expression (ASN)));\n+      Assoc := First (Component_Associations (Aggr));\n       while Present (Assoc) loop\n          Expr := Expression (Assoc);\n          Analyze (Expr);"}, {"sha": "d0a4a0720da6e374f8e806fda825f615113357bd", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b9bbdc362efe420633e43850092d01f467aa6d8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8b9bbdc362efe420633e43850092d01f467aa6d8", "patch": "@@ -10894,7 +10894,7 @@ package body Sem_Util is\n       --  First.\n \n       Assoc := First (Component_Associations (Expression (Aspect)));\n-      First_Op  := Any_Id;\n+      First_Op := Any_Id;\n       while Present (Assoc) loop\n          if Chars (First (Choices (Assoc))) = Name_First then\n             First_Op := Expression (Assoc);"}]}