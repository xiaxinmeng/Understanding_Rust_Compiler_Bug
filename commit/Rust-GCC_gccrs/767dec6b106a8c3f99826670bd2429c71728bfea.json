{"sha": "767dec6b106a8c3f99826670bd2429c71728bfea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY3ZGVjNmIxMDZhOGMzZjk5ODI2NjcwYmQyNDI5YzcxNzI4YmZlYQ==", "commit": {"author": {"name": "Kazuhiro Inaoka", "email": "inaoka.kazuhiro@renesas.com", "date": "2004-07-07T11:11:08Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-07-07T11:11:08Z"}, "message": "re PR c++/1679 (c++ -v -save-temps -DHAVE_CONFIG_H -I. -I. -I. -I./.. -isystem /usr/local/X11/include -DNDEBUG -O2 -g -W -Wall -trigraphs  -c HelpCB.C)\n\nPR target/1679.\n* config/m32r/m32r.c (m32r_function_symbol): New function: Generate a symbol\n  name RTX with the correct m32r specific flags\tset.\n  (block_move_call): Use new function to generate correct symbol.\n* config/m32r/m32r-protos.h: Add prototype for new funcion.\n* config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Use the new function.\n\nFrom-SVN: r84200", "tree": {"sha": "066d86f7259601c54a285ad1d0effa51ccaa3524", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/066d86f7259601c54a285ad1d0effa51ccaa3524"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/767dec6b106a8c3f99826670bd2429c71728bfea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767dec6b106a8c3f99826670bd2429c71728bfea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/767dec6b106a8c3f99826670bd2429c71728bfea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/767dec6b106a8c3f99826670bd2429c71728bfea/comments", "author": null, "committer": null, "parents": [{"sha": "604a320594b012c8d2cda2fc5d2bbd3230d034b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/604a320594b012c8d2cda2fc5d2bbd3230d034b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/604a320594b012c8d2cda2fc5d2bbd3230d034b1"}], "stats": {"total": 39, "additions": 37, "deletions": 2}, "files": [{"sha": "35a65f6779f3fc20d138c0e027215d677fd81847", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=767dec6b106a8c3f99826670bd2429c71728bfea", "patch": "@@ -1,3 +1,14 @@\n+2004-07-06  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n+\n+\tPR target/1679.\n+\t* config/m32r/m32r.c (m32r_function_symbol): New function:\n+\tGenerate a symbol name RTX with the correct m32r specific flags\n+\tset. \n+\t(block_move_call): Use new function to generate correct symbol.\n+\t* config/m32r/m32r-protos.h: Add prototype for new funcion.\n+\t* config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Use the new\n+\tfunction.\n+\n 2004-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tree.h (TYPE_BINFO_OFFSET, TYPE_BINFO_VTABLE,"}, {"sha": "17ab18d6c364bd3fc6b6d3e280e8c27450bb2873", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=767dec6b106a8c3f99826670bd2429c71728bfea", "patch": "@@ -59,6 +59,7 @@ extern int    m32r_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int    m32r_legitimate_pic_operand_p (rtx);\n extern rtx    m32r_legitimize_pic_address (rtx, rtx);\n extern rtx    m32r_return_addr (int);\n+extern rtx    m32r_function_symbol (const char *);\n \n #ifdef HAVE_MACHINE_MODES\n extern int    call_address_operand (rtx, Mmode);"}, {"sha": "44d67d3a22b6cdd5075f53cc0822dfdf7057886f", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=767dec6b106a8c3f99826670bd2429c71728bfea", "patch": "@@ -2590,6 +2590,29 @@ m32r_not_same_reg (rtx a, rtx b)\n }\n \n \f\n+rtx\n+m32r_function_symbol (const char *name)\n+{\n+  int extra_flags = 0;\n+  enum m32r_model model;\n+  rtx sym = gen_rtx_SYMBOL_REF (Pmode, name);\n+\n+  if (TARGET_MODEL_SMALL)\n+    model = M32R_MODEL_SMALL;\n+  else if (TARGET_MODEL_MEDIUM)\n+    model = M32R_MODEL_MEDIUM;\n+  else if (TARGET_MODEL_LARGE)\n+    model = M32R_MODEL_LARGE;\n+  else\n+    abort (); /* Shouldn't happen.  */\n+  extra_flags |= model << SYMBOL_FLAG_MODEL_SHIFT;\n+                                                                                \n+  if (extra_flags)\n+    SYMBOL_REF_FLAGS (sym) |= extra_flags;\n+\n+  return sym;\n+}\n+\n /* Use a library function to move some bytes.  */\n \n static void\n@@ -2601,7 +2624,7 @@ block_move_call (rtx dest_reg, rtx src_reg, rtx bytes_rtx)\n       && GET_MODE (bytes_rtx) != Pmode)\n     bytes_rtx = convert_to_mode (Pmode, bytes_rtx, 1);\n \n-  emit_library_call (gen_rtx_SYMBOL_REF (Pmode, \"memcpy\"), 0,\n+  emit_library_call (m32r_function_symbol (\"memcpy\"), 0,\n \t\t     VOIDmode, 3, dest_reg, Pmode, src_reg, Pmode,\n \t\t     convert_to_mode (TYPE_MODE (sizetype), bytes_rtx,\n \t\t\t\t      TYPE_UNSIGNED (sizetype)),"}, {"sha": "0f119447a20c53e460a84fe44d8c4499ed2273c5", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/767dec6b106a8c3f99826670bd2429c71728bfea/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=767dec6b106a8c3f99826670bd2429c71728bfea", "patch": "@@ -1253,7 +1253,7 @@ L2:     .word STATIC\n \temit_insn (gen_flush_icache (validize_mem (gen_rtx_MEM (SImode, TRAMP)),\\\n \t\t\t\t     GEN_INT (m32r_cache_flush_trap) ));\t\\\n       else if (m32r_cache_flush_func && m32r_cache_flush_func[0])\t\t\\\n-\temit_library_call (gen_rtx_SYMBOL_REF (Pmode, m32r_cache_flush_func), \t\\\n+\temit_library_call (m32r_function_symbol (m32r_cache_flush_func), \t\\\n \t\t\t   0, VOIDmode, 3, TRAMP, Pmode,\t\t\t\\\n \t\t\t   GEN_INT (TRAMPOLINE_SIZE), SImode,\t\t\t\\\n \t\t\t   GEN_INT (3), SImode);\t\t\t\t\\"}]}