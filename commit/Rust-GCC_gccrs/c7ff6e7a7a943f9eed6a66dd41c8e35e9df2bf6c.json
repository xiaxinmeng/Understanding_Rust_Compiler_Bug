{"sha": "c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmZjZlN2E3YTk0M2Y5ZWVkNmE2NmRkNDFjOGUzNWU5ZGYyYmY2Yw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-07-06T10:47:31Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-07-06T10:47:31Z"}, "message": "libgcc2.h (word_type): Type definition removed.\n\n2007-07-06  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* libgcc2.h (word_type): Type definition removed.\n\t(cmp_return_type, shift_count_type): Type definitions added.\n\t(__lshrdi3, __ashldi3, __ashrdi3): word_type of second parameter\n\treplaced with shift_count_type.\n\t(__cmpdi2, __ucmpdi2): word_type of return type replaced with\n\tcmp_return_type.\n\t* libgcc2.c (__udivmoddi4, __moddi3): Type of local variable c\n\tchanged from word_type to Wtype.\n\t(__lshrdi3, __ashldi3, __ashrdi3): word_type of second parameter\n\treplaced with shift_count_type.\n\t(__cmpdi2, __ucmpdi2): word_type of return type replaced with\n\tcmp_return_type.\n\t* c-common.c (handle_mode_attribute): Handling for libgcc_cmp_return and\n\tlibgcc_shift_count attribute added.\n\t* target-def.h (TARGET_LIBGCC_CMP_RETURN_MODE,\n\tTARGET_LIBGCC_SHIFT_COUNT_MODE): New target hooks defined.\n\t(TARGET_INITIALIZER): New target hooks added.\n\t* targhooks.c (default_libgcc_cmp_return_mode,\n\tdefault_libgcc_shift_count_mode): Default implementations for the new\n\ttarget hooks added.\n\t* targhooks.h (default_libgcc_cmp_return_mode,\n\tdefault_libgcc_shift_count_mode): Function prototypes added.\n\t* target.h (struct gcc_target): Fields for the new target hooks added.\n\t* optabs.c (expand_binop): Use shift_count_mode when expanding shift\n\tas library call.\n\t(prepare_cmp_insn): Use cmp_return_mode when expanding comparison as\n\tlibrary call.\n\n\t* doc/tm.texi (TARGET_LIBGCC_CMP_RETURN_MODE,\n\tTARGET_LIBGCC_SHIFT_COUNT_MODE): Documentation added.\n\n\t* config/s390/s390.c (s390_libgcc_cmp_return_mode,\n\ts390_libgcc_shift_count_mode): Functions added.\n\t(TARGET_LIBGCC_CMP_RETURN_MODE,\tTARGET_LIBGCC_SHIFT_COUNT_MODE): Target\n\thooks defined.\n\nFrom-SVN: r126410", "tree": {"sha": "5d263d30ab0db65a0e38c1d8aa4ab05795f921c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d263d30ab0db65a0e38c1d8aa4ab05795f921c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/comments", "author": null, "committer": null, "parents": [{"sha": "713df810031e8183d0ec88a490a8677ab0932e2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713df810031e8183d0ec88a490a8677ab0932e2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713df810031e8183d0ec88a490a8677ab0932e2c"}], "stats": {"total": 142, "additions": 122, "deletions": 20}, "files": [{"sha": "6fab540420546c523ce9b55e2f000494c398a40f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -1,3 +1,41 @@\n+2007-07-06  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* libgcc2.h (word_type): Type definition removed.\n+\t(cmp_return_type, shift_count_type): Type definitions added.\n+\t(__lshrdi3, __ashldi3, __ashrdi3): word_type of second parameter\n+\treplaced with shift_count_type.\n+\t(__cmpdi2, __ucmpdi2): word_type of return type replaced with\n+\tcmp_return_type.\n+\t* libgcc2.c (__udivmoddi4, __moddi3): Type of local variable c\n+\tchanged from word_type to Wtype.\n+\t(__lshrdi3, __ashldi3, __ashrdi3): word_type of second parameter\n+\treplaced with shift_count_type.\n+\t(__cmpdi2, __ucmpdi2): word_type of return type replaced with\n+\tcmp_return_type.\n+\t* c-common.c (handle_mode_attribute): Handling for libgcc_cmp_return and\n+\tlibgcc_shift_count attribute added.\n+\t* target-def.h (TARGET_LIBGCC_CMP_RETURN_MODE,\n+\tTARGET_LIBGCC_SHIFT_COUNT_MODE): New target hooks defined.\n+\t(TARGET_INITIALIZER): New target hooks added.\n+\t* targhooks.c (default_libgcc_cmp_return_mode,\n+\tdefault_libgcc_shift_count_mode): Default implementations for the new\n+\ttarget hooks added.\n+\t* targhooks.h (default_libgcc_cmp_return_mode,\n+\tdefault_libgcc_shift_count_mode): Function prototypes added.\n+\t* target.h (struct gcc_target): Fields for the new target hooks added.\n+\t* optabs.c (expand_binop): Use shift_count_mode when expanding shift\n+\tas library call.\n+\t(prepare_cmp_insn): Use cmp_return_mode when expanding comparison as\n+\tlibrary call.\n+\n+\t* doc/tm.texi (TARGET_LIBGCC_CMP_RETURN_MODE,\n+\tTARGET_LIBGCC_SHIFT_COUNT_MODE): Documentation added.\n+\n+\t* config/s390/s390.c (s390_libgcc_cmp_return_mode,\n+\ts390_libgcc_shift_count_mode): Functions added.\n+\t(TARGET_LIBGCC_CMP_RETURN_MODE,\tTARGET_LIBGCC_SHIFT_COUNT_MODE): Target\n+\thooks defined.\n+\n 2007-07-06  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.c (compute_frame_size): Restore the original"}, {"sha": "cc8c7ff945af2331d91206cde0b52b03d491ca47", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -4975,6 +4975,10 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \tmode = word_mode;\n       else if (!strcmp (p, \"pointer\"))\n \tmode = ptr_mode;\n+      else if (!strcmp (p, \"libgcc_cmp_return\"))\n+\tmode = targetm.libgcc_cmp_return_mode ();\n+      else if (!strcmp (p, \"libgcc_shift_count\"))\n+\tmode = targetm.libgcc_shift_count_mode ();\n       else\n \tfor (j = 0; j < NUM_MACHINE_MODES; j++)\n \t  if (!strcmp (p, GET_MODE_NAME (j)))"}, {"sha": "572c8f62972ef2450aa45404fdcf4bc41eedc3a3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -323,6 +323,18 @@ struct machine_function GTY(())\n #define REGNO_PAIR_OK(REGNO, MODE)                               \\\n   (HARD_REGNO_NREGS ((REGNO), (MODE)) == 1 || !((REGNO) & 1))\n \n+static enum machine_mode\n+s390_libgcc_cmp_return_mode (void)\n+{\n+  return TARGET_64BIT ? DImode : SImode;\n+}\n+\n+static enum machine_mode\n+s390_libgcc_shift_count_mode (void)\n+{\n+  return TARGET_64BIT ? DImode : SImode;\n+}\n+\n /* Return true if the back end supports mode MODE.  */\n static bool\n s390_scalar_mode_supported_p (enum machine_mode mode)\n@@ -9341,6 +9353,12 @@ s390_reorg (void)\n #undef TARGET_SECONDARY_RELOAD\n #define TARGET_SECONDARY_RELOAD s390_secondary_reload\n \n+#undef TARGET_LIBGCC_CMP_RETURN_MODE\n+#define TARGET_LIBGCC_CMP_RETURN_MODE s390_libgcc_cmp_return_mode\n+\n+#undef TARGET_LIBGCC_SHIFT_COUNT_MODE\n+#define TARGET_LIBGCC_SHIFT_COUNT_MODE s390_libgcc_shift_count_mode\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}, {"sha": "3a66303a5d922107207bd396e589bda344244599", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -1334,6 +1334,20 @@ You would most commonly define this macro if the @code{allocate_stack}\n pattern needs to support both a 32- and a 64-bit mode.\n @end defmac\n \n+@deftypefn {Target Hook} {enum machine_mode} TARGET_LIBGCC_CMP_RETURN_MODE ()\n+This target hook should return the mode to be used for the return value\n+of compare instructions expanded to libgcc calls.  If not defined\n+@code{word_mode} is returned which is the right choice for a majority of\n+targets.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} {enum machine_mode} TARGET_LIBGCC_SHIFT_COUNT_MODE ()\n+This target hook should return the mode to be used for the shift count operand\n+of shift instructions expanded to libgcc calls.  If not defined\n+@code{word_mode} is returned which is the right choice for a majority of\n+targets.\n+@end deftypefn\n+\n @defmac TARGET_FLOAT_FORMAT\n A code distinguishing the floating point format of the target machine.\n There are four defined values:"}, {"sha": "5351a3b1cfa75c40586263fb90dca899805da6f0", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -406,16 +406,16 @@ __mulvDI3 (DWtype u, DWtype v)\n \f\n \n /* Unless shift functions are defined with full ANSI prototypes,\n-   parameter b will be promoted to int if word_type is smaller than an int.  */\n+   parameter b will be promoted to int if shift_count_type is smaller than an int.  */\n #ifdef L_lshrdi3\n DWtype\n-__lshrdi3 (DWtype u, word_type b)\n+__lshrdi3 (DWtype u, shift_count_type b)\n {\n   if (b == 0)\n     return u;\n \n   const DWunion uu = {.ll = u};\n-  const word_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n+  const shift_count_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n   DWunion w;\n \n   if (bm <= 0)\n@@ -437,13 +437,13 @@ __lshrdi3 (DWtype u, word_type b)\n \n #ifdef L_ashldi3\n DWtype\n-__ashldi3 (DWtype u, word_type b)\n+__ashldi3 (DWtype u, shift_count_type b)\n {\n   if (b == 0)\n     return u;\n \n   const DWunion uu = {.ll = u};\n-  const word_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n+  const shift_count_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n   DWunion w;\n \n   if (bm <= 0)\n@@ -465,13 +465,13 @@ __ashldi3 (DWtype u, word_type b)\n \n #ifdef L_ashrdi3\n DWtype\n-__ashrdi3 (DWtype u, word_type b)\n+__ashrdi3 (DWtype u, shift_count_type b)\n {\n   if (b == 0)\n     return u;\n \n   const DWunion uu = {.ll = u};\n-  const word_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n+  const shift_count_type bm = (sizeof (Wtype) * BITS_PER_UNIT) - b;\n   DWunion w;\n \n   if (bm <= 0)\n@@ -1082,7 +1082,7 @@ __udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)\n DWtype\n __divdi3 (DWtype u, DWtype v)\n {\n-  word_type c = 0;\n+  Wtype c = 0;\n   DWunion uu = {.ll = u};\n   DWunion vv = {.ll = v};\n   DWtype w;\n@@ -1106,7 +1106,7 @@ __divdi3 (DWtype u, DWtype v)\n DWtype\n __moddi3 (DWtype u, DWtype v)\n {\n-  word_type c = 0;\n+  Wtype c = 0;\n   DWunion uu = {.ll = u};\n   DWunion vv = {.ll = v};\n   DWtype w;\n@@ -1146,7 +1146,7 @@ __udivdi3 (UDWtype n, UDWtype d)\n #endif\n \f\n #ifdef L_cmpdi2\n-word_type\n+cmp_return_type\n __cmpdi2 (DWtype a, DWtype b)\n {\n   const DWunion au = {.ll = a};\n@@ -1165,7 +1165,7 @@ __cmpdi2 (DWtype a, DWtype b)\n #endif\n \n #ifdef L_ucmpdi2\n-word_type\n+cmp_return_type\n __ucmpdi2 (DWtype a, DWtype b)\n {\n   const DWunion au = {.ll = a};"}, {"sha": "944f6faca1c1cc82c6c46bd391154d6081422099", "filename": "gcc/libgcc2.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Flibgcc2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Flibgcc2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.h?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -173,7 +173,8 @@ typedef\t\tfloat TFtype\t__attribute__ ((mode (TF)));\n typedef _Complex float TCtype\t__attribute__ ((mode (TC)));\n #endif\n \n-typedef int word_type __attribute__ ((mode (__word__)));\n+typedef int cmp_return_type __attribute__((mode (__libgcc_cmp_return__)));\n+typedef int shift_count_type __attribute__((mode (__libgcc_shift_count__)));\n \n /* Make sure that we don't accidentally use any normal C language built-in\n    type names in the first part of this file.  Instead we want to use *only*\n@@ -329,18 +330,18 @@ extern UDWtype __udivmoddi4 (UDWtype, UDWtype, UDWtype *);\n extern DWtype __negdi2 (DWtype);\n #endif\n \n-extern DWtype __lshrdi3 (DWtype, word_type);\n-extern DWtype __ashldi3 (DWtype, word_type);\n-extern DWtype __ashrdi3 (DWtype, word_type);\n+extern DWtype __lshrdi3 (DWtype, shift_count_type);\n+extern DWtype __ashldi3 (DWtype, shift_count_type);\n+extern DWtype __ashrdi3 (DWtype, shift_count_type);\n \n /* __udiv_w_sdiv is static inline when building other libgcc2 portions.  */\n #if (!defined(L_udivdi3) && !defined(L_divdi3) && \\\n      !defined(L_umoddi3) && !defined(L_moddi3))\n extern UWtype __udiv_w_sdiv (UWtype *, UWtype, UWtype, UWtype);\n #endif\n \n-extern word_type __cmpdi2 (DWtype, DWtype);\n-extern word_type __ucmpdi2 (DWtype, DWtype);\n+extern cmp_return_type __cmpdi2 (DWtype, DWtype);\n+extern cmp_return_type __ucmpdi2 (DWtype, DWtype);\n \n #if MIN_UNITS_PER_WORD > 1\n extern SItype __bswapsi2 (SItype);"}, {"sha": "9cd550763ff85b3b433acb9b657d6be329a013de", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -1980,10 +1980,10 @@ expand_binop (enum machine_mode mode, optab binoptab, rtx op0, rtx op1,\n \n       if (shift_op)\n \t{\n-\t  op1_mode = word_mode;\n+\t  op1_mode = targetm.libgcc_shift_count_mode ();\n \t  /* Specify unsigned here,\n \t     since negative shift counts are meaningless.  */\n-\t  op1x = convert_to_mode (word_mode, op1, 1);\n+\t  op1x = convert_to_mode (op1_mode, op1, 1);\n \t}\n \n       if (GET_MODE (op0) != VOIDmode\n@@ -3909,7 +3909,8 @@ prepare_cmp_insn (rtx *px, rtx *py, enum rtx_code *pcomparison, rtx size,\n \tlibfunc = ucmp_optab->handlers[(int) mode].libfunc;\n \n       result = emit_library_call_value (libfunc, NULL_RTX, LCT_CONST_MAKE_BLOCK,\n-\t\t\t\t\tword_mode, 2, x, mode, y, mode);\n+\t\t\t\t\ttargetm.libgcc_cmp_return_mode (),\n+\t\t\t\t\t2, x, mode, y, mode);\n \n       /* There are two kinds of comparison routines. Biased routines\n \t return 0/1/2, and unbiased routines return -1/0/1. Other parts"}, {"sha": "31cb8f858827590c6ddaf03eceb8d1fe2ba1df96", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -374,6 +374,10 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n /* In except.c */\n #define TARGET_EH_RETURN_FILTER_MODE  default_eh_return_filter_mode\n \n+/* In libgcc2.c */\n+#define TARGET_LIBGCC_CMP_RETURN_MODE  default_libgcc_cmp_return_mode\n+#define TARGET_LIBGCC_SHIFT_COUNT_MODE default_libgcc_shift_count_mode\n+\n /* In tree.c.  */\n #define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n #define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n@@ -669,6 +673,8 @@ Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n   TARGET_HANDLE_OPTION,\t\t\t\t\\\n   TARGET_HELP,\t\t\t\t\t\\\n   TARGET_EH_RETURN_FILTER_MODE,\t\t\t\\\n+  TARGET_LIBGCC_CMP_RETURN_MODE,                \\\n+  TARGET_LIBGCC_SHIFT_COUNT_MODE,               \\\n   TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n   TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n   TARGET_ATTRIBUTE_TABLE,\t\t\t\\"}, {"sha": "89ad0df087f485543f2bfdc7122909f79931d3db", "filename": "gcc/target.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -432,6 +432,12 @@ struct gcc_target\n   /* Return machine mode for filter value.  */\n   enum machine_mode (* eh_return_filter_mode) (void);\n \n+  /* Return machine mode for libgcc expanded cmp instructions.  */\n+  enum machine_mode (* libgcc_cmp_return_mode) (void);\n+\n+  /* Return machine mode for libgcc expanded shift instructions.  */\n+  enum machine_mode (* libgcc_shift_count_mode) (void);\n+\n   /* Given two decls, merge their attributes and return the result.  */\n   tree (* merge_decl_attributes) (tree, tree);\n "}, {"sha": "b063e72305d6db457e2960ac441848efe32bdeff", "filename": "gcc/targhooks.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -140,6 +140,18 @@ default_eh_return_filter_mode (void)\n   return word_mode;\n }\n \n+enum machine_mode\n+default_libgcc_cmp_return_mode (void)\n+{\n+  return word_mode;\n+}\n+\n+enum machine_mode\n+default_libgcc_shift_count_mode (void)\n+{\n+  return word_mode;\n+}\n+\n /* The default implementation of TARGET_SHIFT_TRUNCATION_MASK.  */\n \n unsigned HOST_WIDE_INT"}, {"sha": "a326194b4a3e5163306e47129ace0eb8c0c8a9c4", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=c7ff6e7a7a943f9eed6a66dd41c8e35e9df2bf6c", "patch": "@@ -31,6 +31,8 @@ extern rtx default_builtin_setjmp_frame_value (void);\n extern bool default_pretend_outgoing_varargs_named (CUMULATIVE_ARGS *);\n \n extern enum machine_mode default_eh_return_filter_mode (void);\n+extern enum machine_mode default_libgcc_cmp_return_mode (void);\n+extern enum machine_mode default_libgcc_shift_count_mode (void);\n extern unsigned HOST_WIDE_INT default_shift_truncation_mask\n   (enum machine_mode);\n extern unsigned int default_min_divisions_for_recip_mul (enum machine_mode);"}]}