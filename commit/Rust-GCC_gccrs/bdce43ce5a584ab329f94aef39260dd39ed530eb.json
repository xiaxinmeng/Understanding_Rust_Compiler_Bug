{"sha": "bdce43ce5a584ab329f94aef39260dd39ed530eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRjZTQzY2U1YTU4NGFiMzI5Zjk0YWVmMzkyNjBkZDM5ZWQ1MzBlYg==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-06T12:18:49Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2021-04-09T11:47:27Z"}, "message": "i386: move non-target attributes out of target section\n\ngcc/ChangeLog:\n\n\t* doc/extend.texi: Move non-target attributes on the top level.", "tree": {"sha": "e9625eed61de0cad6eca643bf4d485f208ff2333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9625eed61de0cad6eca643bf4d485f208ff2333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bdce43ce5a584ab329f94aef39260dd39ed530eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdce43ce5a584ab329f94aef39260dd39ed530eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdce43ce5a584ab329f94aef39260dd39ed530eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdce43ce5a584ab329f94aef39260dd39ed530eb/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd1271e71b16b535d0016229dff6e89a3deb280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd1271e71b16b535d0016229dff6e89a3deb280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd1271e71b16b535d0016229dff6e89a3deb280"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "849c88024736e5f254e8bdee2a35b158778277af", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bdce43ce5a584ab329f94aef39260dd39ed530eb/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bdce43ce5a584ab329f94aef39260dd39ed530eb/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=bdce43ce5a584ab329f94aef39260dd39ed530eb", "patch": "@@ -6924,6 +6924,35 @@ Specify which floating-point unit to use.  You must specify the\n @code{target(\"fpmath=sse+387\")} because the comma would separate\n different options.\n \n+@item prefer-vector-width=@var{OPT}\n+@cindex @code{prefer-vector-width} function attribute, x86\n+On x86 targets, the @code{prefer-vector-width} attribute informs the\n+compiler to use @var{OPT}-bit vector width in instructions\n+instead of the default on the selected platform.\n+\n+Valid @var{OPT} values are:\n+\n+@table @samp\n+@item none\n+No extra limitations applied to GCC other than defined by the selected platform.\n+\n+@item 128\n+Prefer 128-bit vector width for instructions.\n+\n+@item 256\n+Prefer 256-bit vector width for instructions.\n+\n+@item 512\n+Prefer 512-bit vector width for instructions.\n+@end table\n+\n+On the x86, the inliner does not inline a\n+function that has different target options than the caller, unless the\n+callee has a subset of the target options of the caller.  For example\n+a function declared with @code{target(\"sse3\")} can inline a function\n+with @code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n+@end table\n+\n @item indirect_branch(\"@var{choice}\")\n @cindex @code{indirect_branch} function attribute, x86\n On x86 targets, the @code{indirect_branch} attribute causes the compiler\n@@ -7027,35 +7056,6 @@ On x86 targets, the @code{fentry_section} attribute sets the name\n of the section to record function entry instrumentation calls in when\n enabled with @option{-pg -mrecord-mcount}\n \n-@item prefer-vector-width=@var{OPT}\n-@cindex @code{prefer-vector-width} function attribute, x86\n-On x86 targets, the @code{prefer-vector-width} attribute informs the\n-compiler to use @var{OPT}-bit vector width in instructions\n-instead of the default on the selected platform.\n-\n-Valid @var{OPT} values are:\n-\n-@table @samp\n-@item none\n-No extra limitations applied to GCC other than defined by the selected platform.\n-\n-@item 128\n-Prefer 128-bit vector width for instructions.\n-\n-@item 256\n-Prefer 256-bit vector width for instructions.\n-\n-@item 512\n-Prefer 512-bit vector width for instructions.\n-@end table\n-\n-@end table\n-\n-On the x86, the inliner does not inline a\n-function that has different target options than the caller, unless the\n-callee has a subset of the target options of the caller.  For example\n-a function declared with @code{target(\"sse3\")} can inline a function\n-with @code{target(\"sse2\")}, since @code{-msse3} implies @code{-msse2}.\n @end table\n \n @node Xstormy16 Function Attributes"}]}