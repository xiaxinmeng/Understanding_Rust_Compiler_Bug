{"sha": "4b26d10bccf3532cfee49f09346f0c1376d9968b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIyNmQxMGJjY2YzNTMyY2ZlZTQ5ZjA5MzQ2ZjBjMTM3NmQ5OTY4Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-01-26T02:40:31Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-01-26T02:40:31Z"}, "message": "builtins.c (fold_builtin_1): Treat ccos and ccosh as 'even' functions.\n\n\t* builtins.c (fold_builtin_1): Treat ccos and ccosh as 'even'\n\tfunctions.\n\n\t* fold-const.c (negate_mathfn_p): Treat casin, casinh, catan,\n\tcatanh, cproj, csin, csinh, ctan and ctanh as 'odd' functions.\n\t\ntestsuite:\n\t* gcc.dg/builtins-20.c: Add more cases.\n\t* gcc.dg/torture/builtin-symmetric-1.c: Likewise.\n\nFrom-SVN: r121200", "tree": {"sha": "89c8c348a9e0651724438367caf493fd2c71f690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89c8c348a9e0651724438367caf493fd2c71f690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b26d10bccf3532cfee49f09346f0c1376d9968b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b26d10bccf3532cfee49f09346f0c1376d9968b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b26d10bccf3532cfee49f09346f0c1376d9968b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b26d10bccf3532cfee49f09346f0c1376d9968b/comments", "author": null, "committer": null, "parents": [{"sha": "db9c839733fa461c08576e7fbbd0e305af7fecfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db9c839733fa461c08576e7fbbd0e305af7fecfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db9c839733fa461c08576e7fbbd0e305af7fecfb"}], "stats": {"total": 206, "additions": 199, "deletions": 7}, "files": [{"sha": "960199789fe18a4fb629f323662ee1e9041318ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -1,3 +1,11 @@\n+2007-01-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_1): Treat ccos and ccosh as 'even'\n+\tfunctions.\n+\n+\t* fold-const.c (negate_mathfn_p): Treat casin, casinh, catan,\n+\tcatanh, cproj, csin, csinh, ctan and ctanh as 'odd' functions.\n+\n 2007-01-25  DJ Delorie  <dj@redhat.com>\n \n \t* config/m32c/m32c.c (m32c_cannot_change_mode_class): We don't"}, {"sha": "d1223795b3d858a3f9b2c9516631dec55d52b144", "filename": "gcc/builtins.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -9344,6 +9344,18 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n \t\t\t\t\tTREE_VALUE (arglist)));\n       break;\n \n+    CASE_FLT_FN (BUILT_IN_CCOS):\n+    CASE_FLT_FN (BUILT_IN_CCOSH):\n+      /* These functions are \"even\", i.e. f(x) == f(-x).  */\n+      if (validate_arglist (arglist, COMPLEX_TYPE, VOID_TYPE))\n+        {\n+\t  tree narg = fold_strip_sign_ops (TREE_VALUE (arglist));\n+\t  if (narg)\n+\t    return build_function_call_expr (fndecl,\n+\t\t\t\t\t     build_tree_list (NULL_TREE, narg));\n+\t}\n+      break;\n+\n     CASE_FLT_FN (BUILT_IN_CABS):\n       return fold_builtin_cabs (arglist, type, fndecl);\n "}, {"sha": "cd4d6847065d892bcaba7b3f8149fb338af17347", "filename": "gcc/fold-const.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -913,7 +913,16 @@ negate_mathfn_p (enum built_in_function code)\n     CASE_FLT_FN (BUILT_IN_ASINH):\n     CASE_FLT_FN (BUILT_IN_ATAN):\n     CASE_FLT_FN (BUILT_IN_ATANH):\n+    CASE_FLT_FN (BUILT_IN_CASIN):\n+    CASE_FLT_FN (BUILT_IN_CASINH):\n+    CASE_FLT_FN (BUILT_IN_CATAN):\n+    CASE_FLT_FN (BUILT_IN_CATANH):\n     CASE_FLT_FN (BUILT_IN_CBRT):\n+    CASE_FLT_FN (BUILT_IN_CPROJ):\n+    CASE_FLT_FN (BUILT_IN_CSIN):\n+    CASE_FLT_FN (BUILT_IN_CSINH):\n+    CASE_FLT_FN (BUILT_IN_CTAN):\n+    CASE_FLT_FN (BUILT_IN_CTANH):\n     CASE_FLT_FN (BUILT_IN_ERF):\n     CASE_FLT_FN (BUILT_IN_LLROUND):\n     CASE_FLT_FN (BUILT_IN_LROUND):"}, {"sha": "a2c5b133a102ed3024d97630563a4f17271c1d7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -1,3 +1,8 @@\n+2007-01-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/builtins-20.c: Add more cases.\n+\t* gcc.dg/torture/builtin-symmetric-1.c: Likewise.\n+\n 2007-01-25  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR fortran/30437"}, {"sha": "3c8ac76d58836e5ab4e4824a08f8b2a318d98d98", "filename": "gcc/testsuite/gcc.dg/builtins-20.c", "status": "modified", "additions": 129, "deletions": 6, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-20.c?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -23,6 +23,8 @@ extern double fmax (double, double);\n extern double hypot (double, double);\n extern double pure (double) __attribute__ ((__pure__));\n extern double carg (__complex__ double);\n+extern __complex__ double ccos (__complex__ double);\n+extern __complex__ double ctan (__complex__ double);\n extern float cosf (float);\n extern float sinf (float);\n extern float tanf (float);\n@@ -34,6 +36,8 @@ extern float fmaxf (float, float);\n extern float hypotf (float, float);\n extern float puref (float) __attribute__ ((__pure__));\n extern float cargf (__complex__ float);\n+extern __complex__ float ccosf (__complex__ float);\n+extern __complex__ float ctanf (__complex__ float);\n extern long double cosl (long double);\n extern long double sinl (long double);\n extern long double tanl (long double);\n@@ -45,6 +49,8 @@ extern long double fmaxl (long double, long double);\n extern long double hypotl (long double, long double);\n extern long double purel (long double) __attribute__ ((__pure__));\n extern long double cargl (__complex__ long double);\n+extern __complex__ long double ccosl (__complex__ long double);\n+extern __complex__ long double ctanl (__complex__ long double);\n \n extern void link_error(void);\n \n@@ -193,10 +199,49 @@ void test2(double x, double y)\n     link_error ();\n }\n \n-void test3(__complex__ double z)\n+void test3(__complex__ double x, __complex__ double y, int i)\n {\n-  if (carg(z) != atan2(__imag__ z, __real__ z))\n+  if (carg(x) != atan2(__imag__ x, __real__ x))\n     link_error ();\n+\n+  if (ccos(x) != ccos(-x))\n+    link_error();\n+\n+  if (ccos(ctan(x)) != ccos(ctan(-x)))\n+    link_error();\n+\n+  if (ctan(x-y) != -ctan(y-x))\n+    link_error();\n+\n+  if (ccos(x/y) != ccos(-x/y))\n+    link_error();\n+\n+  if (ccos(x/y) != ccos(x/-y))\n+    link_error();\n+\n+  if (ccos(x/ctan(y)) != ccos(-x/ctan(-y)))\n+    link_error();\n+\n+  if (ccos(x*y) != ccos(-x*y))\n+    link_error();\n+\n+  if (ccos(x*y) != ccos(x*-y))\n+    link_error();\n+\n+  if (ccos(ctan(x)*y) != ccos(ctan(-x)*-y))\n+    link_error();\n+\n+  if (ccos(ctan(x/y)) != ccos(-ctan(x/-y)))\n+    link_error();\n+\n+  if (ccos(i ? x : y) != ccos(i ? -x : y))\n+    link_error();\n+\n+  if (ccos(i ? x : y) != ccos(i ? x : -y))\n+    link_error();\n+\n+  if (ccos(i ? x : ctan(y/x)) != ccos(i ? -x : -ctan(-y/x)))\n+    link_error();\n }\n \n void test1f(float x)\n@@ -346,10 +391,49 @@ void test2f(float x, float y)\n     link_error ();\n }\n \n-void test3f(__complex__ float z)\n+void test3f(__complex__ float x, __complex__ float y, int i)\n {\n-  if (cargf(z) != atan2f(__imag__ z, __real__ z))\n+  if (cargf(x) != atan2f(__imag__ x, __real__ x))\n     link_error ();\n+\n+  if (ccosf(x) != ccosf(-x))\n+    link_error();\n+\n+  if (ccosf(ctanf(x)) != ccosf(ctanf(-x)))\n+    link_error();\n+\n+  if (ctanf(x-y) != -ctanf(y-x))\n+    link_error();\n+\n+  if (ccosf(x/y) != ccosf(-x/y))\n+    link_error();\n+\n+  if (ccosf(x/y) != ccosf(x/-y))\n+    link_error();\n+\n+  if (ccosf(x/ctanf(y)) != ccosf(-x/ctanf(-y)))\n+    link_error();\n+\n+  if (ccosf(x*y) != ccosf(-x*y))\n+    link_error();\n+\n+  if (ccosf(x*y) != ccosf(x*-y))\n+    link_error();\n+\n+  if (ccosf(ctanf(x)*y) != ccosf(ctanf(-x)*-y))\n+    link_error();\n+\n+  if (ccosf(ctanf(x/y)) != ccosf(-ctanf(x/-y)))\n+    link_error();\n+\n+  if (ccosf(i ? x : y) != ccosf(i ? -x : y))\n+    link_error();\n+\n+  if (ccosf(i ? x : y) != ccosf(i ? x : -y))\n+    link_error();\n+\n+  if (ccosf(i ? x : ctanf(y/x)) != ccosf(i ? -x : -ctanf(-y/x)))\n+    link_error();\n }\n \n void test1l(long double x)\n@@ -499,10 +583,49 @@ void test2l(long double x, long double y)\n     link_error ();\n }\n \n-void test3l(__complex__ long double z)\n+void test3l(__complex__ long double x, __complex__ long double y, int i)\n {\n-  if (cargl(z) != atan2l(__imag__ z, __real__ z))\n+  if (cargl(x) != atan2l(__imag__ x, __real__ x))\n     link_error ();\n+\n+  if (ccosl(x) != ccosl(-x))\n+    link_error();\n+\n+  if (ccosl(ctanl(x)) != ccosl(ctanl(-x)))\n+    link_error();\n+\n+  if (ctanl(x-y) != -ctanl(y-x))\n+    link_error();\n+\n+  if (ccosl(x/y) != ccosl(-x/y))\n+    link_error();\n+\n+  if (ccosl(x/y) != ccosl(x/-y))\n+    link_error();\n+\n+  if (ccosl(x/ctanl(y)) != ccosl(-x/ctanl(-y)))\n+    link_error();\n+\n+  if (ccosl(x*y) != ccosl(-x*y))\n+    link_error();\n+\n+  if (ccosl(x*y) != ccosl(x*-y))\n+    link_error();\n+\n+  if (ccosl(ctanl(x)*y) != ccosl(ctanl(-x)*-y))\n+    link_error();\n+\n+  if (ccosl(ctanl(x/y)) != ccosl(-ctanl(x/-y)))\n+    link_error();\n+\n+  if (ccosl(i ? x : y) != ccosl(i ? -x : y))\n+    link_error();\n+\n+  if (ccosl(i ? x : y) != ccosl(i ? x : -y))\n+    link_error();\n+\n+  if (ccosl(i ? x : ctanl(y/x)) != ccosl(i ? -x : -ctanl(-y/x)))\n+    link_error();\n }\n \n int main()"}, {"sha": "4834d8e2b3266b56424b485251d24f41e5a74b04", "filename": "gcc/testsuite/gcc.dg/torture/builtin-symmetric-1.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b26d10bccf3532cfee49f09346f0c1376d9968b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c?ref=4b26d10bccf3532cfee49f09346f0c1376d9968b", "patch": "@@ -21,6 +21,16 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n   } while (0)\n \n+/* Test that FUNC(-ARG) == FUNC(ARG), where ARG has a complex type.  */\n+#define TESTIT_EVEN_C(FUNC) do { \\\n+  if (__builtin_##FUNC##f(-cxf) != __builtin_##FUNC##f(cxf)) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC(-cx) != __builtin_##FUNC(cx)) \\\n+    link_error(__LINE__); \\\n+  if (__builtin_##FUNC##l(-cxl) != __builtin_##FUNC##l(cxl)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n /* Test that FUNC(-VAR) == FUNC(VAR), where VAR has an int type.  */\n #define TESTIT_EVEN_I(FUNC,VAR) do { \\\n   if (__builtin_##FUNC(-VAR) != __builtin_##FUNC(VAR)) \\\n@@ -37,13 +47,28 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n   } while (0)\n \n+/* Test that -FUNC(ARG) == FUNC(-ARG), where ARG has a complex type.  */\n+#define TESTIT_ODD_C(FUNC) do { \\\n+  if (-__builtin_##FUNC##f(-cxf) != __builtin_##FUNC##f(cxf)) \\\n+    link_error(__LINE__); \\\n+  if (-__builtin_##FUNC(-cx) != __builtin_##FUNC(cx)) \\\n+    link_error(__LINE__); \\\n+  if (-__builtin_##FUNC##l(-cxl) != __builtin_##FUNC##l(cxl)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n void foo (float xf, double x, long double xl,\n+\t  __complex__ float cxf, __complex__ double cx, __complex__ long double cxl,\n \t  int i, long l, long long ll, __INTMAX_TYPE__ im)\n {\n   TESTIT_EVEN(cos);\n   TESTIT_EVEN(cosh);\n   TESTIT_EVEN(fabs);\n \n+  TESTIT_EVEN_C(ccos);\n+  TESTIT_EVEN_C(ccosh);\n+  TESTIT_EVEN_C(cabs);\n+\n   TESTIT_EVEN_I(abs, i);\n   TESTIT_EVEN_I(imaxabs, im);\n   TESTIT_EVEN_I(labs, l);\n@@ -67,10 +92,20 @@ void foo (float xf, double x, long double xl,\n   TESTIT_ODD(tan);\n   TESTIT_ODD(tanh);\n   TESTIT_ODD(trunc);\n+\n+  TESTIT_ODD_C(casin);\n+  TESTIT_ODD_C(casinh);\n+  TESTIT_ODD_C(catan);\n+  TESTIT_ODD_C(catanh);\n+  TESTIT_ODD_C(cproj);\n+  TESTIT_ODD_C(csin);\n+  TESTIT_ODD_C(csinh);\n+  TESTIT_ODD_C(ctan);\n+  TESTIT_ODD_C(ctanh);\n }\n \n int main()\n {\n-  foo (1,1,1,1,1,1,1);\n+  foo (1,1,1,1,1,1,1,1,1,1);\n   return 0;\n }"}]}