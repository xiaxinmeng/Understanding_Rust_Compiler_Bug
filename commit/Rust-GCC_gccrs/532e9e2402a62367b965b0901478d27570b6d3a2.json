{"sha": "532e9e2402a62367b965b0901478d27570b6d3a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMyZTllMjQwMmE2MjM2N2I5NjViMDkwMTQ3OGQyNzU3MGI2ZDNhMg==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-18T17:16:21Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-18T17:16:21Z"}, "message": "[ARM][GCC][4/4x]: MVE intrinsics with quaternary operands.\n\nThis patch supports following MVE ACLE intrinsics with quaternary operands.\n\nvabdq_m_f32, vabdq_m_f16, vaddq_m_f32, vaddq_m_f16, vaddq_m_n_f32, vaddq_m_n_f16, vandq_m_f32, vandq_m_f16, vbicq_m_f32, vbicq_m_f16, vbrsrq_m_n_f32, vbrsrq_m_n_f16, vcaddq_rot270_m_f32, vcaddq_rot270_m_f16, vcaddq_rot90_m_f32, vcaddq_rot90_m_f16, vcmlaq_m_f32, vcmlaq_m_f16, vcmlaq_rot180_m_f32, vcmlaq_rot180_m_f16, vcmlaq_rot270_m_f32, vcmlaq_rot270_m_f16, vcmlaq_rot90_m_f32, vcmlaq_rot90_m_f16, vcmulq_m_f32, vcmulq_m_f16, vcmulq_rot180_m_f32, vcmulq_rot180_m_f16, vcmulq_rot270_m_f32, vcmulq_rot270_m_f16, vcmulq_rot90_m_f32, vcmulq_rot90_m_f16, vcvtq_m_n_s32_f32, vcvtq_m_n_s16_f16, vcvtq_m_n_u32_f32, vcvtq_m_n_u16_f16, veorq_m_f32, veorq_m_f16, vfmaq_m_f32, vfmaq_m_f16, vfmaq_m_n_f32, vfmaq_m_n_f16, vfmasq_m_n_f32, vfmasq_m_n_f16, vfmsq_m_f32, vfmsq_m_f16, vmaxnmq_m_f32, vmaxnmq_m_f16, vminnmq_m_f32, vminnmq_m_f16, vmulq_m_f32, vmulq_m_f16, vmulq_m_n_f32, vmulq_m_n_f16, vornq_m_f32, vornq_m_f16, vorrq_m_f32, vorrq_m_f16, vsubq_m_f32, vsubq_m_f16, vsubq_m_n_f32, vsubq_m_n_f16.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1]  https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm_mve.h (vabdq_m_f32): Define macro.\n\t(vabdq_m_f16): Likewise.\n\t(vaddq_m_f32): Likewise.\n\t(vaddq_m_f16): Likewise.\n\t(vaddq_m_n_f32): Likewise.\n\t(vaddq_m_n_f16): Likewise.\n\t(vandq_m_f32): Likewise.\n\t(vandq_m_f16): Likewise.\n\t(vbicq_m_f32): Likewise.\n\t(vbicq_m_f16): Likewise.\n\t(vbrsrq_m_n_f32): Likewise.\n\t(vbrsrq_m_n_f16): Likewise.\n\t(vcaddq_rot270_m_f32): Likewise.\n\t(vcaddq_rot270_m_f16): Likewise.\n\t(vcaddq_rot90_m_f32): Likewise.\n\t(vcaddq_rot90_m_f16): Likewise.\n\t(vcmlaq_m_f32): Likewise.\n\t(vcmlaq_m_f16): Likewise.\n\t(vcmlaq_rot180_m_f32): Likewise.\n\t(vcmlaq_rot180_m_f16): Likewise.\n\t(vcmlaq_rot270_m_f32): Likewise.\n\t(vcmlaq_rot270_m_f16): Likewise.\n\t(vcmlaq_rot90_m_f32): Likewise.\n\t(vcmlaq_rot90_m_f16): Likewise.\n\t(vcmulq_m_f32): Likewise.\n\t(vcmulq_m_f16): Likewise.\n\t(vcmulq_rot180_m_f32): Likewise.\n\t(vcmulq_rot180_m_f16): Likewise.\n\t(vcmulq_rot270_m_f32): Likewise.\n\t(vcmulq_rot270_m_f16): Likewise.\n\t(vcmulq_rot90_m_f32): Likewise.\n\t(vcmulq_rot90_m_f16): Likewise.\n\t(vcvtq_m_n_s32_f32): Likewise.\n\t(vcvtq_m_n_s16_f16): Likewise.\n\t(vcvtq_m_n_u32_f32): Likewise.\n\t(vcvtq_m_n_u16_f16): Likewise.\n\t(veorq_m_f32): Likewise.\n\t(veorq_m_f16): Likewise.\n\t(vfmaq_m_f32): Likewise.\n\t(vfmaq_m_f16): Likewise.\n\t(vfmaq_m_n_f32): Likewise.\n\t(vfmaq_m_n_f16): Likewise.\n\t(vfmasq_m_n_f32): Likewise.\n\t(vfmasq_m_n_f16): Likewise.\n\t(vfmsq_m_f32): Likewise.\n\t(vfmsq_m_f16): Likewise.\n\t(vmaxnmq_m_f32): Likewise.\n\t(vmaxnmq_m_f16): Likewise.\n\t(vminnmq_m_f32): Likewise.\n\t(vminnmq_m_f16): Likewise.\n\t(vmulq_m_f32): Likewise.\n\t(vmulq_m_f16): Likewise.\n\t(vmulq_m_n_f32): Likewise.\n\t(vmulq_m_n_f16): Likewise.\n\t(vornq_m_f32): Likewise.\n\t(vornq_m_f16): Likewise.\n\t(vorrq_m_f32): Likewise.\n\t(vorrq_m_f16): Likewise.\n\t(vsubq_m_f32): Likewise.\n\t(vsubq_m_f16): Likewise.\n\t(vsubq_m_n_f32): Likewise.\n\t(vsubq_m_n_f16): Likewise.\n\t(__attribute__): Likewise.\n\t(__arm_vabdq_m_f32): Likewise.\n\t(__arm_vabdq_m_f16): Likewise.\n\t(__arm_vaddq_m_f32): Likewise.\n\t(__arm_vaddq_m_f16): Likewise.\n\t(__arm_vaddq_m_n_f32): Likewise.\n\t(__arm_vaddq_m_n_f16): Likewise.\n\t(__arm_vandq_m_f32): Likewise.\n\t(__arm_vandq_m_f16): Likewise.\n\t(__arm_vbicq_m_f32): Likewise.\n\t(__arm_vbicq_m_f16): Likewise.\n\t(__arm_vbrsrq_m_n_f32): Likewise.\n\t(__arm_vbrsrq_m_n_f16): Likewise.\n\t(__arm_vcaddq_rot270_m_f32): Likewise.\n\t(__arm_vcaddq_rot270_m_f16): Likewise.\n\t(__arm_vcaddq_rot90_m_f32): Likewise.\n\t(__arm_vcaddq_rot90_m_f16): Likewise.\n\t(__arm_vcmlaq_m_f32): Likewise.\n\t(__arm_vcmlaq_m_f16): Likewise.\n\t(__arm_vcmlaq_rot180_m_f32): Likewise.\n\t(__arm_vcmlaq_rot180_m_f16): Likewise.\n\t(__arm_vcmlaq_rot270_m_f32): Likewise.\n\t(__arm_vcmlaq_rot270_m_f16): Likewise.\n\t(__arm_vcmlaq_rot90_m_f32): Likewise.\n\t(__arm_vcmlaq_rot90_m_f16): Likewise.\n\t(__arm_vcmulq_m_f32): Likewise.\n\t(__arm_vcmulq_m_f16): Likewise.\n\t(__arm_vcmulq_rot180_m_f32): Define intrinsic.\n\t(__arm_vcmulq_rot180_m_f16): Likewise.\n\t(__arm_vcmulq_rot270_m_f32): Likewise.\n\t(__arm_vcmulq_rot270_m_f16): Likewise.\n\t(__arm_vcmulq_rot90_m_f32): Likewise.\n\t(__arm_vcmulq_rot90_m_f16): Likewise.\n\t(__arm_vcvtq_m_n_s32_f32): Likewise.\n\t(__arm_vcvtq_m_n_s16_f16): Likewise.\n\t(__arm_vcvtq_m_n_u32_f32): Likewise.\n\t(__arm_vcvtq_m_n_u16_f16): Likewise.\n\t(__arm_veorq_m_f32): Likewise.\n\t(__arm_veorq_m_f16): Likewise.\n\t(__arm_vfmaq_m_f32): Likewise.\n\t(__arm_vfmaq_m_f16): Likewise.\n\t(__arm_vfmaq_m_n_f32): Likewise.\n\t(__arm_vfmaq_m_n_f16): Likewise.\n\t(__arm_vfmasq_m_n_f32): Likewise.\n\t(__arm_vfmasq_m_n_f16): Likewise.\n\t(__arm_vfmsq_m_f32): Likewise.\n\t(__arm_vfmsq_m_f16): Likewise.\n\t(__arm_vmaxnmq_m_f32): Likewise.\n\t(__arm_vmaxnmq_m_f16): Likewise.\n\t(__arm_vminnmq_m_f32): Likewise.\n\t(__arm_vminnmq_m_f16): Likewise.\n\t(__arm_vmulq_m_f32): Likewise.\n\t(__arm_vmulq_m_f16): Likewise.\n\t(__arm_vmulq_m_n_f32): Likewise.\n\t(__arm_vmulq_m_n_f16): Likewise.\n\t(__arm_vornq_m_f32): Likewise.\n\t(__arm_vornq_m_f16): Likewise.\n\t(__arm_vorrq_m_f32): Likewise.\n\t(__arm_vorrq_m_f16): Likewise.\n\t(__arm_vsubq_m_f32): Likewise.\n\t(__arm_vsubq_m_f16): Likewise.\n\t(__arm_vsubq_m_n_f32): Likewise.\n\t(__arm_vsubq_m_n_f16): Likewise.\n\t(vabdq_m): Define polymorphic variant.\n\t(vaddq_m): Likewise.\n\t(vaddq_m_n): Likewise.\n\t(vandq_m): Likewise.\n\t(vbicq_m): Likewise.\n\t(vbrsrq_m_n): Likewise.\n\t(vcaddq_rot270_m): Likewise.\n\t(vcaddq_rot90_m): Likewise.\n\t(vcmlaq_m): Likewise.\n\t(vcmlaq_rot180_m): Likewise.\n\t(vcmlaq_rot270_m): Likewise.\n\t(vcmlaq_rot90_m): Likewise.\n\t(vcmulq_m): Likewise.\n\t(vcmulq_rot180_m): Likewise.\n\t(vcmulq_rot270_m): Likewise.\n\t(vcmulq_rot90_m): Likewise.\n\t(veorq_m): Likewise.\n\t(vfmaq_m): Likewise.\n\t(vfmaq_m_n): Likewise.\n\t(vfmasq_m_n): Likewise.\n\t(vfmsq_m): Likewise.\n\t(vmaxnmq_m): Likewise.\n\t(vminnmq_m): Likewise.\n\t(vmulq_m): Likewise.\n\t(vmulq_m_n): Likewise.\n\t(vornq_m): Likewise.\n\t(vsubq_m): Likewise.\n\t(vsubq_m_n): Likewise.\n\t(vorrq_m): Likewise.\n\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n\tbuiltin qualifier.\n\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE): Likewise.\n\t* config/arm/mve.md (mve_vabdq_m_f<mode>): Define RTL pattern.\n\t(mve_vaddq_m_f<mode>): Likewise.\n\t(mve_vaddq_m_n_f<mode>): Likewise.\n\t(mve_vandq_m_f<mode>): Likewise.\n\t(mve_vbicq_m_f<mode>): Likewise.\n\t(mve_vbrsrq_m_n_f<mode>): Likewise.\n\t(mve_vcaddq_rot270_m_f<mode>): Likewise.\n\t(mve_vcaddq_rot90_m_f<mode>): Likewise.\n\t(mve_vcmlaq_m_f<mode>): Likewise.\n\t(mve_vcmlaq_rot180_m_f<mode>): Likewise.\n\t(mve_vcmlaq_rot270_m_f<mode>): Likewise.\n\t(mve_vcmlaq_rot90_m_f<mode>): Likewise.\n\t(mve_vcmulq_m_f<mode>): Likewise.\n\t(mve_vcmulq_rot180_m_f<mode>): Likewise.\n\t(mve_vcmulq_rot270_m_f<mode>): Likewise.\n\t(mve_vcmulq_rot90_m_f<mode>): Likewise.\n\t(mve_veorq_m_f<mode>): Likewise.\n\t(mve_vfmaq_m_f<mode>): Likewise.\n\t(mve_vfmaq_m_n_f<mode>): Likewise.\n\t(mve_vfmasq_m_n_f<mode>): Likewise.\n\t(mve_vfmsq_m_f<mode>): Likewise.\n\t(mve_vmaxnmq_m_f<mode>): Likewise.\n\t(mve_vminnmq_m_f<mode>): Likewise.\n\t(mve_vmulq_m_f<mode>): Likewise.\n\t(mve_vmulq_m_n_f<mode>): Likewise.\n\t(mve_vornq_m_f<mode>): Likewise.\n\t(mve_vorrq_m_f<mode>): Likewise.\n\t(mve_vsubq_m_f<mode>): Likewise.\n\t(mve_vsubq_m_n_f<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vabdq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vandq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbicq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/veorq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vornq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vorrq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32.c: Likewise.", "tree": {"sha": "48058a1945321182060862c21f578f25cee7cbc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48058a1945321182060862c21f578f25cee7cbc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/532e9e2402a62367b965b0901478d27570b6d3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532e9e2402a62367b965b0901478d27570b6d3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/532e9e2402a62367b965b0901478d27570b6d3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/532e9e2402a62367b965b0901478d27570b6d3a2/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2170a379b0fcd79191b5363cddaf0cbc508fd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2170a379b0fcd79191b5363cddaf0cbc508fd2b"}], "stats": {"total": 4373, "additions": 3722, "deletions": 651}, "files": [{"sha": "3b1154bca4c88cf1d01878b59d83c48ea6c430a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 192, "deletions": 0, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -1,3 +1,195 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (vabdq_m_f32): Define macro.\n+\t(vabdq_m_f16): Likewise.\n+\t(vaddq_m_f32): Likewise.\n+\t(vaddq_m_f16): Likewise.\n+\t(vaddq_m_n_f32): Likewise.\n+\t(vaddq_m_n_f16): Likewise.\n+\t(vandq_m_f32): Likewise.\n+\t(vandq_m_f16): Likewise.\n+\t(vbicq_m_f32): Likewise.\n+\t(vbicq_m_f16): Likewise.\n+\t(vbrsrq_m_n_f32): Likewise.\n+\t(vbrsrq_m_n_f16): Likewise.\n+\t(vcaddq_rot270_m_f32): Likewise.\n+\t(vcaddq_rot270_m_f16): Likewise.\n+\t(vcaddq_rot90_m_f32): Likewise.\n+\t(vcaddq_rot90_m_f16): Likewise.\n+\t(vcmlaq_m_f32): Likewise.\n+\t(vcmlaq_m_f16): Likewise.\n+\t(vcmlaq_rot180_m_f32): Likewise.\n+\t(vcmlaq_rot180_m_f16): Likewise.\n+\t(vcmlaq_rot270_m_f32): Likewise.\n+\t(vcmlaq_rot270_m_f16): Likewise.\n+\t(vcmlaq_rot90_m_f32): Likewise.\n+\t(vcmlaq_rot90_m_f16): Likewise.\n+\t(vcmulq_m_f32): Likewise.\n+\t(vcmulq_m_f16): Likewise.\n+\t(vcmulq_rot180_m_f32): Likewise.\n+\t(vcmulq_rot180_m_f16): Likewise.\n+\t(vcmulq_rot270_m_f32): Likewise.\n+\t(vcmulq_rot270_m_f16): Likewise.\n+\t(vcmulq_rot90_m_f32): Likewise.\n+\t(vcmulq_rot90_m_f16): Likewise.\n+\t(vcvtq_m_n_s32_f32): Likewise.\n+\t(vcvtq_m_n_s16_f16): Likewise.\n+\t(vcvtq_m_n_u32_f32): Likewise.\n+\t(vcvtq_m_n_u16_f16): Likewise.\n+\t(veorq_m_f32): Likewise.\n+\t(veorq_m_f16): Likewise.\n+\t(vfmaq_m_f32): Likewise.\n+\t(vfmaq_m_f16): Likewise.\n+\t(vfmaq_m_n_f32): Likewise.\n+\t(vfmaq_m_n_f16): Likewise.\n+\t(vfmasq_m_n_f32): Likewise.\n+\t(vfmasq_m_n_f16): Likewise.\n+\t(vfmsq_m_f32): Likewise.\n+\t(vfmsq_m_f16): Likewise.\n+\t(vmaxnmq_m_f32): Likewise.\n+\t(vmaxnmq_m_f16): Likewise.\n+\t(vminnmq_m_f32): Likewise.\n+\t(vminnmq_m_f16): Likewise.\n+\t(vmulq_m_f32): Likewise.\n+\t(vmulq_m_f16): Likewise.\n+\t(vmulq_m_n_f32): Likewise.\n+\t(vmulq_m_n_f16): Likewise.\n+\t(vornq_m_f32): Likewise.\n+\t(vornq_m_f16): Likewise.\n+\t(vorrq_m_f32): Likewise.\n+\t(vorrq_m_f16): Likewise.\n+\t(vsubq_m_f32): Likewise.\n+\t(vsubq_m_f16): Likewise.\n+\t(vsubq_m_n_f32): Likewise.\n+\t(vsubq_m_n_f16): Likewise.\n+\t(__attribute__): Likewise.\n+\t(__arm_vabdq_m_f32): Likewise.\n+\t(__arm_vabdq_m_f16): Likewise.\n+\t(__arm_vaddq_m_f32): Likewise.\n+\t(__arm_vaddq_m_f16): Likewise.\n+\t(__arm_vaddq_m_n_f32): Likewise.\n+\t(__arm_vaddq_m_n_f16): Likewise.\n+\t(__arm_vandq_m_f32): Likewise.\n+\t(__arm_vandq_m_f16): Likewise.\n+\t(__arm_vbicq_m_f32): Likewise.\n+\t(__arm_vbicq_m_f16): Likewise.\n+\t(__arm_vbrsrq_m_n_f32): Likewise.\n+\t(__arm_vbrsrq_m_n_f16): Likewise.\n+\t(__arm_vcaddq_rot270_m_f32): Likewise.\n+\t(__arm_vcaddq_rot270_m_f16): Likewise.\n+\t(__arm_vcaddq_rot90_m_f32): Likewise.\n+\t(__arm_vcaddq_rot90_m_f16): Likewise.\n+\t(__arm_vcmlaq_m_f32): Likewise.\n+\t(__arm_vcmlaq_m_f16): Likewise.\n+\t(__arm_vcmlaq_rot180_m_f32): Likewise.\n+\t(__arm_vcmlaq_rot180_m_f16): Likewise.\n+\t(__arm_vcmlaq_rot270_m_f32): Likewise.\n+\t(__arm_vcmlaq_rot270_m_f16): Likewise.\n+\t(__arm_vcmlaq_rot90_m_f32): Likewise.\n+\t(__arm_vcmlaq_rot90_m_f16): Likewise.\n+\t(__arm_vcmulq_m_f32): Likewise.\n+\t(__arm_vcmulq_m_f16): Likewise.\n+\t(__arm_vcmulq_rot180_m_f32): Define intrinsic.\n+\t(__arm_vcmulq_rot180_m_f16): Likewise.\n+\t(__arm_vcmulq_rot270_m_f32): Likewise.\n+\t(__arm_vcmulq_rot270_m_f16): Likewise.\n+\t(__arm_vcmulq_rot90_m_f32): Likewise.\n+\t(__arm_vcmulq_rot90_m_f16): Likewise.\n+\t(__arm_vcvtq_m_n_s32_f32): Likewise.\n+\t(__arm_vcvtq_m_n_s16_f16): Likewise.\n+\t(__arm_vcvtq_m_n_u32_f32): Likewise.\n+\t(__arm_vcvtq_m_n_u16_f16): Likewise.\n+\t(__arm_veorq_m_f32): Likewise.\n+\t(__arm_veorq_m_f16): Likewise.\n+\t(__arm_vfmaq_m_f32): Likewise.\n+\t(__arm_vfmaq_m_f16): Likewise.\n+\t(__arm_vfmaq_m_n_f32): Likewise.\n+\t(__arm_vfmaq_m_n_f16): Likewise.\n+\t(__arm_vfmasq_m_n_f32): Likewise.\n+\t(__arm_vfmasq_m_n_f16): Likewise.\n+\t(__arm_vfmsq_m_f32): Likewise.\n+\t(__arm_vfmsq_m_f16): Likewise.\n+\t(__arm_vmaxnmq_m_f32): Likewise.\n+\t(__arm_vmaxnmq_m_f16): Likewise.\n+\t(__arm_vminnmq_m_f32): Likewise.\n+\t(__arm_vminnmq_m_f16): Likewise.\n+\t(__arm_vmulq_m_f32): Likewise.\n+\t(__arm_vmulq_m_f16): Likewise.\n+\t(__arm_vmulq_m_n_f32): Likewise.\n+\t(__arm_vmulq_m_n_f16): Likewise.\n+\t(__arm_vornq_m_f32): Likewise.\n+\t(__arm_vornq_m_f16): Likewise.\n+\t(__arm_vorrq_m_f32): Likewise.\n+\t(__arm_vorrq_m_f16): Likewise.\n+\t(__arm_vsubq_m_f32): Likewise.\n+\t(__arm_vsubq_m_f16): Likewise.\n+\t(__arm_vsubq_m_n_f32): Likewise.\n+\t(__arm_vsubq_m_n_f16): Likewise.\n+\t(vabdq_m): Define polymorphic variant.\n+\t(vaddq_m): Likewise.\n+\t(vaddq_m_n): Likewise.\n+\t(vandq_m): Likewise.\n+\t(vbicq_m): Likewise.\n+\t(vbrsrq_m_n): Likewise.\n+\t(vcaddq_rot270_m): Likewise.\n+\t(vcaddq_rot90_m): Likewise.\n+\t(vcmlaq_m): Likewise.\n+\t(vcmlaq_rot180_m): Likewise.\n+\t(vcmlaq_rot270_m): Likewise.\n+\t(vcmlaq_rot90_m): Likewise.\n+\t(vcmulq_m): Likewise.\n+\t(vcmulq_rot180_m): Likewise.\n+\t(vcmulq_rot270_m): Likewise.\n+\t(vcmulq_rot90_m): Likewise.\n+\t(veorq_m): Likewise.\n+\t(vfmaq_m): Likewise.\n+\t(vfmaq_m_n): Likewise.\n+\t(vfmasq_m_n): Likewise.\n+\t(vfmsq_m): Likewise.\n+\t(vmaxnmq_m): Likewise.\n+\t(vminnmq_m): Likewise.\n+\t(vmulq_m): Likewise.\n+\t(vmulq_m_n): Likewise.\n+\t(vornq_m): Likewise.\n+\t(vsubq_m): Likewise.\n+\t(vsubq_m_n): Likewise.\n+\t(vorrq_m): Likewise.\n+\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_NONE_IMM_UNONE): Use\n+\tbuiltin qualifier.\n+\t(QUADOP_NONE_NONE_NONE_NONE_UNONE): Likewise.\n+\t(QUADOP_UNONE_UNONE_NONE_IMM_UNONE): Likewise.\n+\t* config/arm/mve.md (mve_vabdq_m_f<mode>): Define RTL pattern.\n+\t(mve_vaddq_m_f<mode>): Likewise.\n+\t(mve_vaddq_m_n_f<mode>): Likewise.\n+\t(mve_vandq_m_f<mode>): Likewise.\n+\t(mve_vbicq_m_f<mode>): Likewise.\n+\t(mve_vbrsrq_m_n_f<mode>): Likewise.\n+\t(mve_vcaddq_rot270_m_f<mode>): Likewise.\n+\t(mve_vcaddq_rot90_m_f<mode>): Likewise.\n+\t(mve_vcmlaq_m_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot180_m_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot270_m_f<mode>): Likewise.\n+\t(mve_vcmlaq_rot90_m_f<mode>): Likewise.\n+\t(mve_vcmulq_m_f<mode>): Likewise.\n+\t(mve_vcmulq_rot180_m_f<mode>): Likewise.\n+\t(mve_vcmulq_rot270_m_f<mode>): Likewise.\n+\t(mve_vcmulq_rot90_m_f<mode>): Likewise.\n+\t(mve_veorq_m_f<mode>): Likewise.\n+\t(mve_vfmaq_m_f<mode>): Likewise.\n+\t(mve_vfmaq_m_n_f<mode>): Likewise.\n+\t(mve_vfmasq_m_n_f<mode>): Likewise.\n+\t(mve_vfmsq_m_f<mode>): Likewise.\n+\t(mve_vmaxnmq_m_f<mode>): Likewise.\n+\t(mve_vminnmq_m_f<mode>): Likewise.\n+\t(mve_vmulq_m_f<mode>): Likewise.\n+\t(mve_vmulq_m_n_f<mode>): Likewise.\n+\t(mve_vornq_m_f<mode>): Likewise.\n+\t(mve_vorrq_m_f<mode>): Likewise.\n+\t(mve_vsubq_m_f<mode>): Likewise.\n+\t(mve_vsubq_m_n_f<mode>): Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "4f8135d83f942e54b4db9dd43954af8bf027746e", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 1446, "deletions": 650, "changes": 2096, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=532e9e2402a62367b965b0901478d27570b6d3a2"}, {"sha": "b448889fc5f22e11975af97016d1908043254727", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -654,3 +654,34 @@ VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlsldavhaxq_p_s, v4si)\n VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlsldavhaq_p_s, v4si)\n VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlaldavhaxq_p_s, v4si)\n VAR1 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vrmlaldavhaq_p_s, v4si)\n+VAR2 (QUADOP_UNONE_UNONE_NONE_IMM_UNONE, vcvtq_m_n_from_f_u, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_IMM_UNONE, vcvtq_m_n_from_f_s, v8hi, v4si)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vbrsrq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsubq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vsubq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vorrq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vornq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmulq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vminnmq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vmaxnmq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vfmsq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vfmasq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vfmaq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vfmaq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, veorq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmulq_rot90_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmulq_rot270_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmulq_rot180_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmulq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmlaq_rot90_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmlaq_rot270_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmlaq_rot180_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcmlaq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcaddq_rot90_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vcaddq_rot270_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vbicq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vandq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_n_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vaddq_m_f, v8hf, v4sf)\n+VAR2 (QUADOP_NONE_NONE_NONE_NONE_UNONE, vabdq_m_f, v8hf, v4sf)"}, {"sha": "bf4eb5da11c27d8a10d7804ad28de9c40cb1878a", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 498, "deletions": 1, "changes": 499, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -186,7 +186,12 @@\n \t\t\t VQDMULLTQ_M_N_S VQDMULLTQ_M_S VQRSHRUNBQ_M_N_S\n \t\t\t VQRSHRUNTQ_M_N_SVQSHRUNBQ_M_N_S VQSHRUNTQ_M_N_S\n \t\t\t VRMLALDAVHAQ_P_U VRMLALDAVHAXQ_P_S VRMLSLDAVHAQ_P_S\n-\t\t\t VRMLSLDAVHAXQ_P_S VQRSHRUNTQ_M_N_S VQSHRUNBQ_M_N_S])\n+\t\t\t VRMLSLDAVHAXQ_P_S VQRSHRUNTQ_M_N_S VQSHRUNBQ_M_N_S\n+\t\t\t VCMLAQ_M_F VCMLAQ_ROT180_M_F VCMLAQ_ROT270_M_F\n+\t\t\t VCMLAQ_ROT90_M_F VCMULQ_M_F VCMULQ_ROT180_M_F\n+\t\t\t VCMULQ_ROT270_M_F VCMULQ_ROT90_M_F VFMAQ_M_F\n+\t\t\t VFMAQ_M_N_F VFMASQ_M_N_F VFMSQ_M_F VMAXNMQ_M_F\n+\t\t\t VMINNMQ_M_F VSUBQ_M_F])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -7443,3 +7448,495 @@\n   \"vpst\\;vrmlsldavhaxt.s32\\t%Q0, %R0, %q2, %q3\"\n   [(set_attr \"type\" \"mve_move\")\n    (set_attr \"length\"\"8\")])\n+;;\n+;; [vabdq_m_f])\n+;;\n+(define_insn \"mve_vabdq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VABDQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vabdt.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddq_m_f])\n+;;\n+(define_insn \"mve_vaddq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADDQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vaddt.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vaddq_m_n_f])\n+;;\n+(define_insn \"mve_vaddq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VADDQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vaddt.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vandq_m_f])\n+;;\n+(define_insn \"mve_vandq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VANDQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vandt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vbicq_m_f])\n+;;\n+(define_insn \"mve_vbicq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VBICQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vbict %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vbrsrq_m_n_f])\n+;;\n+(define_insn \"mve_vbrsrq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:SI 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VBRSRQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vbrsrt.%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcaddq_rot270_m_f])\n+;;\n+(define_insn \"mve_vcaddq_rot270_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCADDQ_ROT270_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcaddt.f%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcaddq_rot90_m_f])\n+;;\n+(define_insn \"mve_vcaddq_rot90_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCADDQ_ROT90_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcaddt.f%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmlaq_m_f])\n+;;\n+(define_insn \"mve_vcmlaq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMLAQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmlat.f%#<V_sz_elem>\t%q0, %q2, %q3, #0\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmlaq_rot180_m_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot180_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMLAQ_ROT180_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmlat.f%#<V_sz_elem>\t%q0, %q2, %q3, #180\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmlaq_rot270_m_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot270_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMLAQ_ROT270_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmlat.f%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmlaq_rot90_m_f])\n+;;\n+(define_insn \"mve_vcmlaq_rot90_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMLAQ_ROT90_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmlat.f%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmulq_m_f])\n+;;\n+(define_insn \"mve_vcmulq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMULQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmult.f%#<V_sz_elem>\t%q0, %q2, %q3, #0\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmulq_rot180_m_f])\n+;;\n+(define_insn \"mve_vcmulq_rot180_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMULQ_ROT180_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmult.f%#<V_sz_elem>\t%q0, %q2, %q3, #180\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmulq_rot270_m_f])\n+;;\n+(define_insn \"mve_vcmulq_rot270_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMULQ_ROT270_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmult.f%#<V_sz_elem>\t%q0, %q2, %q3, #270\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmulq_rot90_m_f])\n+;;\n+(define_insn \"mve_vcmulq_rot90_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VCMULQ_ROT90_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vcmult.f%#<V_sz_elem>\t%q0, %q2, %q3, #90\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [veorq_m_f])\n+;;\n+(define_insn \"mve_veorq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VEORQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;veort %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vfmaq_m_f])\n+;;\n+(define_insn \"mve_vfmaq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VFMAQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vfmat.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vfmaq_m_n_f])\n+;;\n+(define_insn \"mve_vfmaq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VFMAQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vfmat.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vfmasq_m_n_f])\n+;;\n+(define_insn \"mve_vfmasq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VFMASQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vfmast.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vfmsq_m_f])\n+;;\n+(define_insn \"mve_vfmsq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VFMSQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vfmst.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmaxnmq_m_f])\n+;;\n+(define_insn \"mve_vmaxnmq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMAXNMQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmaxnmt.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vminnmq_m_f])\n+;;\n+(define_insn \"mve_vminnmq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMINNMQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vminnmt.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulq_m_f])\n+;;\n+(define_insn \"mve_vmulq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmult.f%#<V_sz_elem>\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vmulq_m_n_f])\n+;;\n+(define_insn \"mve_vmulq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VMULQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vmult.f%#<V_sz_elem>\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vornq_m_f])\n+;;\n+(define_insn \"mve_vornq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VORNQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vornt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vorrq_m_f])\n+;;\n+(define_insn \"mve_vorrq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VORRQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vorrt %q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vsubq_m_f])\n+;;\n+(define_insn \"mve_vsubq_m_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSUBQ_M_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vsubt.f%#<V_sz_elem>\\t%q0, %q2, %q3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vsubq_m_n_f])\n+;;\n+(define_insn \"mve_vsubq_m_n_f<mode>\"\n+  [\n+   (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0\")\n+\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:<V_elem> 3 \"s_register_operand\" \"r\")\n+\t\t       (match_operand:HI 4 \"vpr_register_operand\" \"Up\")]\n+\t VSUBQ_M_N_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vpst\\;vsubt.f%#<V_sz_elem>\\t%q0, %q2, %3\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])"}, {"sha": "4ed6dc7fafb4e0f3c15d44c856c64cb59c5e9209", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -1,3 +1,70 @@\n+2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vabdq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vandq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbicq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_m_n_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/veorq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vfmsq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmulq_m_n_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vornq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vorrq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vsubq_m_n_f32.c: Likewise.\n+\n 2020-03-18  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "dac3dd7f200267cfc5bb95c9d42af238a8e06fe9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f16\"  }  } */"}, {"sha": "d1b59ea0abe73d258cc4d40440b75ed07319d545", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vabdq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvabdq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vabdq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vabdt.f32\"  }  } */"}, {"sha": "b52b719dd24dbd49400a4d73b961b7f36f021d28", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */"}, {"sha": "c3e7c2d10e78872ed0c90ee597b29362e6b573c2", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */"}, {"sha": "94d6b6f4b57e4df84859e4aa1d769d56a4c3f914", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f16\"  }  } */"}, {"sha": "ab100cb378569fc375b33cf7c413c46646c71999", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m_n_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vaddq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vaddt.f32\"  }  } */"}, {"sha": "c641fce286d2953e75014f20346d83c52d61ee72", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "a3344d2ee49fd7d3d4ffa2e5b52aba2d396599d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vandq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvandq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vandq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vandt\"  }  } */"}, {"sha": "f3237a86d847253973aa45d374230a19a23867e7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "975d9db43f499f4f37abaf8509bd5d289bb757b3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbicq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbicq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vbicq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbict\"  }  } */"}, {"sha": "afb5ef8ff83be2ae046b608758fda7a9f0a6e5d3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.16\"  }  } */"}, {"sha": "3b612cbf1fc3749855a150e8aac96a2d86f0335b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vbrsrq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvbrsrq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m_n_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, int32_t b, mve_pred16_t p)\n+{\n+  return vbrsrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vbrsrt.32\"  }  } */"}, {"sha": "52af15c342dee8b9d7055064b8da71d02b8ee634", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */"}, {"sha": "b5fb2e17f2f0ae90465c65bcabc867ca53ee306f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot270_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot270_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */"}, {"sha": "8db12c8da0550bf26bd79d3e829162d2625b2b1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f16\"  }  } */"}, {"sha": "fae494c0febc38e48726066abd1e6a698675b801", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcaddq_rot90_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcaddq_rot90_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcaddq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcaddt.f32\"  }  } */"}, {"sha": "3f86c8cf713db2d7c953ac4ef7dc38ad441a7522", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */"}, {"sha": "3cc3342451f3df682c4652deb55f652999681a1b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */"}, {"sha": "197d8ce0dfc977510d520c1e3f37e977dd9010af", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot180_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot180_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */"}, {"sha": "3bd195f489a10a2ba6647795c0cf6274ddd616dd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot180_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot180_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot180_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot180_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */"}, {"sha": "29e863857c4816a618a4d8af6304c1b3263420f7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot270_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot270_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */"}, {"sha": "a4ca602bf58b604a03913f68e083e43446dee2a8", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot270_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot270_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot270_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot270_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */"}, {"sha": "55afaf309ca0d483b4febb6846e4a6367d19ce74", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot90_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot90_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f16\"  }  } */"}, {"sha": "89be04bb1dd94b00f95630d1d12e3f915f196838", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmlaq_rot90_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmlaq_rot90_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot90_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vcmlaq_rot90_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmlat.f32\"  }  } */"}, {"sha": "c83be6e64093842eaf9b8c89dc645232da5c0cc6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */"}, {"sha": "acea3b4b9e5173bbd030db558cdd81b532813131", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */"}, {"sha": "78e7606a074377fb7d1eeb2e371f62f67562a891", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */"}, {"sha": "8643de02f9480368b5ad7863c46466076dcb2e1d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot180_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot180_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot180_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */"}, {"sha": "632e21cb74ff22c83fe5ce46feda8db3349cf3ef", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */"}, {"sha": "e5f35de635de7b8e2a2c15714ad57b3e3d6ea35d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot270_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot270_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot270_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */"}, {"sha": "dfd5d0f724a8d27689bbbc0c1ec79a28e466afb0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f16\"  }  } */"}, {"sha": "7b877918f1b810587961413c8326597971046fa6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmulq_rot90_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmulq_rot90_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vcmulq_rot90_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcmult.f32\"  }  } */"}, {"sha": "62c3086b114be64a10568f690fe091a9e9f58aae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_s16_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s16_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_s16_f16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s16.f16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s16.f16\"  }  } */"}, {"sha": "0eeba941fb8285161e279180eb56840f3fbdbab5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_s32_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_s32_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_s32_f32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s32.f32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.s32.f32\"  }  } */"}, {"sha": "fbc3b9c6f9a200c86240cfac0bcf7b6018574f1a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_u16_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u16_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_u16_f16 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u16.f16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t inactive, float16x8_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u16.f16\"  }  } */"}, {"sha": "b7719dee5f2e574d37191c1dfb953b812c897b7d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_m_n_u32_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_m_n_u32_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n_u32_f32 (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u32.f32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t inactive, float32x4_t a, mve_pred16_t p)\n+{\n+  return vcvtq_m_n (inactive, a, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vcvtt.u32.f32\"  }  } */"}, {"sha": "8a70933e413bff5c7c3da52c6e79bec654f4a6f3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "37ab556cc9bda08e1e034b8f0154c47b50b6e198", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/veorq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fveorq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return veorq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"veort\"  }  } */"}, {"sha": "f27d664698dd6043b95130858d2cf4d533c4ac84", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f16\"  }  } */"}, {"sha": "7e7d38f5e239f44857bdb68359c0365c1f3b2e41", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f32\"  }  } */"}, {"sha": "93c8aa389ee08c1f412944a0a18ef3dd6251b8a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m_n_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f16\"  }  } */"}, {"sha": "1f9189a7a2ff82d73142c52a45fc4aeca18509f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmaq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmaq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m_n_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmaq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmat.f32\"  }  } */"}, {"sha": "4f9117901f2dbe6ac659e42bdd18f088062a8a60", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m_n_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmast.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmast.f16\"  }  } */"}, {"sha": "e630f44d862ced41c9fc6a4912f1d115b5b1b362", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmasq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmasq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m_n_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmast.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32_t c, mve_pred16_t p)\n+{\n+  return vfmasq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmast.f32\"  }  } */"}, {"sha": "2cda2e9d1387436985c8ddf208c435d6f023173a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmsq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vfmsq_m_f16 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmst.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t a, float16x8_t b, float16x8_t c, mve_pred16_t p)\n+{\n+  return vfmsq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmst.f16\"  }  } */"}, {"sha": "773edf02c5c0475d3e772b35313d6cec7c815d04", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vfmsq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvfmsq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vfmsq_m_f32 (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmst.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t a, float32x4_t b, float32x4_t c, mve_pred16_t p)\n+{\n+  return vfmsq_m (a, b, c, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vfmst.f32\"  }  } */"}, {"sha": "43858dc2480dc45068b8f324ed03e136454ca283", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f16\"  }  } */"}, {"sha": "a3b7e8f4e3bdd170c5f94a79b50b2f7d089646b9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmaxnmq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmaxnmq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmaxnmq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmaxnmt.f32\"  }  } */"}, {"sha": "d01e26696b26491eb4b7720062d77524f9473c23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vminnmq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f16\"  }  } */"}, {"sha": "5193b2faa1642bd11cd5154feee778d74cea5f23", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vminnmq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvminnmq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vminnmq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vminnmt.f32\"  }  } */"}, {"sha": "43b751ba962fc56ad04eb18573bfd644403112cb", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */"}, {"sha": "6dee7647e94f7c30a20b260c137ba54f80207ed4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */"}, {"sha": "a0b2d53396820fec79e5e060d10d1b4b8ff3407f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f16\"  }  } */"}, {"sha": "c4571953888ae06faceb3f8649e56a46992901d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmulq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmulq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m_n_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vmulq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vmult.f32\"  }  } */"}, {"sha": "9833268b68fd3fd9073212478c45949f37a7241e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "48a720ac5d60f117633cf90dac94ac277f8554ae", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vornq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvornq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vornq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vornt\"  }  } */"}, {"sha": "6e8591e5da4c92c4abe50ab3d57ce92b548ab0cd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "09ee673a1b2cb892b40e6e74761169cc3b1ef871", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vorrq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvorrq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vorrq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vorrt\"  }  } */"}, {"sha": "383491dce93202d608a8937f25bfdce8a52f7944", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16x8_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f16\"  }  } */"}, {"sha": "327b5247ed5fb01b2cfbad72cf8ee980fe4269fd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32x4_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f32\"  }  } */"}, {"sha": "5657c36aeb74c91486db2342b2db4890a99caa56", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_n_f16.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f16.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float16x8_t\n+foo (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_n_f16 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f16\"  }  } */\n+\n+float16x8_t\n+foo1 (float16x8_t inactive, float16x8_t a, float16_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f16\"  }  } */"}, {"sha": "c9502cd1c9002f612b9a67632001ff08b2f549d4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vsubq_m_n_f32.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/532e9e2402a62367b965b0901478d27570b6d3a2/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvsubq_m_n_f32.c?ref=532e9e2402a62367b965b0901478d27570b6d3a2", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+float32x4_t\n+foo (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vsubq_m_n_f32 (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f32\"  }  } */\n+\n+float32x4_t\n+foo1 (float32x4_t inactive, float32x4_t a, float32_t b, mve_pred16_t p)\n+{\n+  return vsubq_m (inactive, a, b, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vsubt.f32\"  }  } */"}]}