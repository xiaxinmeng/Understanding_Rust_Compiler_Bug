{"sha": "3571ae2e08289a7f84999a095a40923c2365259e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3MWFlMmUwODI4OWE3Zjg0OTk5YTA5NWE0MDkyM2MyMzY1MjU5ZQ==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2008-07-22T13:29:31Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2008-07-22T13:29:31Z"}, "message": "c-typeck.c (build_external_ref): Don't call assemble_external.\n\n2008-07-22  Rafael Avila de Espindola  <espindola@google.com>\n\n       * c-typeck.c (build_external_ref): Don't call assemble_external.\n       * final.c (output_operand): Call assemble_external.\n\nFrom-SVN: r138057", "tree": {"sha": "4f5e14aa862d2a03cd920142d392ac2c21a6b6a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f5e14aa862d2a03cd920142d392ac2c21a6b6a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3571ae2e08289a7f84999a095a40923c2365259e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3571ae2e08289a7f84999a095a40923c2365259e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3571ae2e08289a7f84999a095a40923c2365259e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3571ae2e08289a7f84999a095a40923c2365259e/comments", "author": null, "committer": null, "parents": [{"sha": "4a799ae7a6714d267309dd89fbd291d51ed02b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a799ae7a6714d267309dd89fbd291d51ed02b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a799ae7a6714d267309dd89fbd291d51ed02b7d"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "4d05bef2957b09cf818bdf79cc8095389b1ecb6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3571ae2e08289a7f84999a095a40923c2365259e", "patch": "@@ -1,3 +1,8 @@\n+2008-07-22  Rafael Avila de Espindola  <espindola@google.com>\n+\n+       * c-typeck.c (build_external_ref): Don't call assemble_external.\n+       * final.c (output_operand): Call assemble_external.\n+\n 2008-07-21  DJ Delorie  <dj@redhat.com>\n \n \t* config/h8300/h8300.c (h8300_hard_regno_scratch_ok): New."}, {"sha": "a47d632429347a4db13c21cfef70ed0c01611c72", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=3571ae2e08289a7f84999a095a40923c2365259e", "patch": "@@ -2191,8 +2191,6 @@ build_external_ref (tree id, int fun, location_t loc)\n   /* Recursive call does not count as usage.  */\n   if (ref != current_function_decl) \n     {\n-      if (!skip_evaluation)\n-\tassemble_external (ref);\n       TREE_USED (ref) = 1;\n     }\n "}, {"sha": "787c43abad5aa9d860268c1e1ca0380026a60240", "filename": "gcc/final.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3571ae2e08289a7f84999a095a40923c2365259e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=3571ae2e08289a7f84999a095a40923c2365259e", "patch": "@@ -3344,6 +3344,14 @@ output_operand (rtx x, int code ATTRIBUTE_UNUSED)\n   gcc_assert (!x || !REG_P (x) || REGNO (x) < FIRST_PSEUDO_REGISTER);\n \n   PRINT_OPERAND (asm_out_file, x, code);\n+  if (x && MEM_P (x) && GET_CODE (XEXP (x, 0)) == SYMBOL_REF)\n+    {\n+      tree t;\n+      x = XEXP (x, 0);\n+      t = SYMBOL_REF_DECL (x);\n+      if (t)\n+\tassemble_external (t);\n+    }\n }\n \n /* Print a memory reference operand for address X"}]}