{"sha": "82f2836c6e0eab99dc2ed4d761fbc611408902a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJmMjgzNmM2ZTBlYWI5OWRjMmVkNGQ3NjFmYmM2MTE0MDg5MDJhMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2013-01-04T16:50:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-01-04T16:50:28Z"}, "message": "re PR c++/55877 (Anon visibility issues)\n\n\tPR c++/55877\n\t* decl.c (reset_type_linkage, bt_reset_linkage): New.\n\t(grokdeclarator): Use reset_type_linkage.\n\t* name-lookup.c (binding_table_foreach): Handle null table.\n\t* tree.c (decl_anon_ns_mem_p): Check TYPE_MAIN_DECL, not TYPE_NAME.\n\nFrom-SVN: r194910", "tree": {"sha": "272133bc00c41ec2517ff7555854b0777de65f72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/272133bc00c41ec2517ff7555854b0777de65f72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82f2836c6e0eab99dc2ed4d761fbc611408902a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f2836c6e0eab99dc2ed4d761fbc611408902a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f2836c6e0eab99dc2ed4d761fbc611408902a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f2836c6e0eab99dc2ed4d761fbc611408902a1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1582c67762711468720324ddbfd6c305b7eee6b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1582c67762711468720324ddbfd6c305b7eee6b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1582c67762711468720324ddbfd6c305b7eee6b1"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "1aecad0bbd825db721db1d5c83611b28ac0735b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=82f2836c6e0eab99dc2ed4d761fbc611408902a1", "patch": "@@ -1,3 +1,11 @@\n+2013-01-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/55877\n+\t* decl.c (reset_type_linkage, bt_reset_linkage): New.\n+\t(grokdeclarator): Use reset_type_linkage.\n+\t* name-lookup.c (binding_table_foreach): Handle null table.\n+\t* tree.c (decl_anon_ns_mem_p): Check TYPE_MAIN_DECL, not TYPE_NAME.\n+\n 2013-01-04  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/54526 (again)"}, {"sha": "9640824f7265c25760139f7089a40d7642681dcd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=82f2836c6e0eab99dc2ed4d761fbc611408902a1", "patch": "@@ -8513,6 +8513,23 @@ check_var_type (tree identifier, tree type)\n   return type;\n }\n \n+/* Functions for adjusting the visibility of a tagged type and its nested\n+   types when it gets a name for linkage purposes from a typedef.  */\n+\n+static void bt_reset_linkage (binding_entry, void *);\n+static void\n+reset_type_linkage (tree type)\n+{\n+  set_linkage_according_to_type (type, TYPE_MAIN_DECL (type));\n+  if (CLASS_TYPE_P (type))\n+    binding_table_foreach (CLASSTYPE_NESTED_UTDS (type), bt_reset_linkage, NULL);\n+}\n+static void\n+bt_reset_linkage (binding_entry b, void */*data*/)\n+{\n+  reset_type_linkage (b->type);\n+}\n+\n /* Given declspecs and a declarator (abstract or otherwise), determine\n    the name and type of the object declared and construct a DECL node\n    for it.\n@@ -10053,8 +10070,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      = TYPE_IDENTIFIER (type);\n \n \t  /* Adjust linkage now that we aren't anonymous anymore.  */\n-\t  set_linkage_according_to_type (type, TYPE_MAIN_DECL (type));\n-\t  determine_visibility (TYPE_MAIN_DECL (type));\n+\t  reset_type_linkage (type);\n \n \t  /* FIXME remangle member functions; member functions of a\n \t     type with external linkage have external linkage.  */"}, {"sha": "754e830af1faf58ee64327ff389bfb7d78263b3b", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=82f2836c6e0eab99dc2ed4d761fbc611408902a1", "patch": "@@ -251,9 +251,13 @@ binding_table_find (binding_table table, tree name)\n void\n binding_table_foreach (binding_table table, bt_foreach_proc proc, void *data)\n {\n-  const size_t chain_count = table->chain_count;\n+  size_t chain_count;\n   size_t i;\n \n+  if (!table)\n+    return;\n+\n+  chain_count = table->chain_count;\n   for (i = 0; i < chain_count; ++i)\n     {\n       binding_entry entry = table->chain[i];"}, {"sha": "fcab1a44ff6b8796b42d75b75c99004d8ce26299", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=82f2836c6e0eab99dc2ed4d761fbc611408902a1", "patch": "@@ -2404,7 +2404,7 @@ decl_anon_ns_mem_p (const_tree decl)\n       /* Classes and namespaces inside anonymous namespaces have\n          TREE_PUBLIC == 0, so we can shortcut the search.  */\n       else if (TYPE_P (decl))\n-\treturn (TREE_PUBLIC (TYPE_NAME (decl)) == 0);\n+\treturn (TREE_PUBLIC (TYPE_MAIN_DECL (decl)) == 0);\n       else if (TREE_CODE (decl) == NAMESPACE_DECL)\n \treturn (TREE_PUBLIC (decl) == 0);\n       else"}, {"sha": "dfb4f12bbe87320a66d8903a0bab879d73e3002d", "filename": "gcc/testsuite/g++.dg/ext/visibility/anon11.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82f2836c6e0eab99dc2ed4d761fbc611408902a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvisibility%2Fanon11.C?ref=82f2836c6e0eab99dc2ed4d761fbc611408902a1", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/55877\n+// { dg-final { scan-assembler-not \"\\\\.local\" } }\n+\n+typedef struct {\n+  typedef enum { X, Y } A;\n+  typedef struct { } B;\n+  struct C { };\n+} D;\n+\n+D d;\n+D::A a;\n+D::B b;\n+D::C c;"}]}