{"sha": "ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "node_id": "C_kwDOANBUbNoAKGVjZGJlYmRlN2NiOWFiNjNhZTYyYmRmOTI5NmZlMTE4YTUwN2IxNzI", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-13T08:26:29Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-15T13:17:23Z"}, "message": "RISC-V: Add vmsne vx C++ tests\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_m_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv32-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv32-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv32-3.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv64-1.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv64-2.C: New test.\n\t* g++.target/riscv/rvv/base/vmsne_vx_rv64-3.C: New test.", "tree": {"sha": "f450a986bf686b2ab2268554982e76f1ce56365f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f450a986bf686b2ab2268554982e76f1ce56365f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae"}], "stats": {"total": 5229, "additions": 5229, "deletions": 0}, "files": [{"sha": "92b69e8d0e1f691c2ca7406a9829247de8a662fe", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "3441bfa3aadf3e693c322b3a63169f1412171801", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "0da07de1cb3eeeb5ce1ac9fa776c91c61aeeeb7e", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv32-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "00e51962af33261862e9cc15539baa181a64f5a7", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "cf3abd9c581f7b97d2bdd5187b39695eacc9000d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "daa45e9c772cca15510d7a75076117e81104ed69", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_m_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_m_rv64-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(mask,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "e7a200c677fb2cc0cce28fd37e3fab11b4baefdd", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "f194a6fd7be39a7fa39fed02bc150cbcd0a79009", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "91d59df58d535afbab7f3a86f08acb94d03de89d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv32-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v0.t\\s+} 8 } } */"}, {"sha": "7512c172192511ad23972ca96d0ec24769ac8e6f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "71b49babbbfcf6b21431447e58c1d5a2873f93a5", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "9979c7c5fc5d5cae304739e83bfbfb8107eb5ad0", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_mu_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_mu_rv64-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne_mu(vbool1_t mask,vbool1_t merge,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne_mu(vbool2_t mask,vbool2_t merge,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne_mu(vbool4_t mask,vbool4_t merge,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne_mu(vbool64_t mask,vbool64_t merge,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne_mu(vbool32_t mask,vbool32_t merge,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne_mu(vbool16_t mask,vbool16_t merge,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne_mu(vbool8_t mask,vbool8_t merge,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne_mu(mask,merge,op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*mu\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v0.t\\s+} 2 } } */"}, {"sha": "fda59ab61f16596ae2077e4db7ba091e776de3c9", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv32-1.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "1a6bb8b207fb1412108b6236130a5f3aa94e315d", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv32-2.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "e771daaf7d5402b779702ce743fda2ff8285ce7f", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv32-3.C", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv32-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vmsne\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+\\s+} 8 } } */"}, {"sha": "588a9e56623668e1715b60278e4640410b80ffd6", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv64-1.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-1.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "4b7da9ac30bea900773e097481f6d37d5216d00c", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv64-2.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-2.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}, {"sha": "ee2ad90cf6dd09d8390d8147d9f904cb8ef53dfa", "filename": "gcc/testsuite/g++.target/riscv/rvv/base/vmsne_vx_rv64-3.C", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecdbebde7cb9ab63ae62bdf9296fe118a507b172/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Friscv%2Frvv%2Fbase%2Fvmsne_vx_rv64-3.C?ref=ecdbebde7cb9ab63ae62bdf9296fe118a507b172", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint8mf8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint8mf4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint8mf2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint8m1_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint8m2_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint8m4_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vint8m8_t op1,int8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint16mf4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint16mf2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint16m1_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint16m2_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint16m4_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vint16m8_t op1,int16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint32mf2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint32m1_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint32m2_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint32m4_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vint32m8_t op1,int32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vint64m1_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vint64m2_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vint64m4_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vint64m8_t op1,int64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint8mf8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint8mf4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint8mf2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint8m1_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint8m2_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint8m4_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool1_t test___riscv_vmsne(vbool1_t mask,vuint8m8_t op1,uint8_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint16mf4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint16mf2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint16m1_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint16m2_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint16m4_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool2_t test___riscv_vmsne(vbool2_t mask,vuint16m8_t op1,uint16_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint32mf2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint32m1_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint32m2_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint32m4_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool4_t test___riscv_vmsne(vbool4_t mask,vuint32m8_t op1,uint32_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool64_t test___riscv_vmsne(vbool64_t mask,vuint64m1_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool32_t test___riscv_vmsne(vbool32_t mask,vuint64m2_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool16_t test___riscv_vmsne(vbool16_t mask,vuint64m4_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+vbool8_t test___riscv_vmsne(vbool8_t mask,vuint64m8_t op1,uint64_t op2,size_t vl)\n+{\n+    return __riscv_vmsne(op1,op2,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vmsne\\.vx\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\\s+} 2 } } */"}]}