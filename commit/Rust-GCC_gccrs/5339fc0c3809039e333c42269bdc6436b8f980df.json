{"sha": "5339fc0c3809039e333c42269bdc6436b8f980df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMzOWZjMGMzODA5MDM5ZTMzM2M0MjI2OWJkYzY0MzZiOGY5ODBkZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-26T09:02:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-26T09:02:04Z"}, "message": "i386.c (ix86_debug_options): Remove prototype.\n\n\t* config/i386/i386.c (ix86_debug_options): Remove prototype.\n\t(x86_64_elf_select_section): Ditto.\n\t(ix86_handle_tm_regparm_attribute): Remove ATTRIBUTE_UNUSED on used\n\targuments.\n\t(ix86_pass_by_reference): Ditto.\n\t(ix86_return_in_memory): Ditto.\n\t(output_set_got): Ditto.\n\t(ix86_unary_operator_ok): Ditto.\n\t(ix86_expand_builtin): Ditto.\n\nFrom-SVN: r201988", "tree": {"sha": "39c64ffe8c7cbe454b99e3647974216f764fdd49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39c64ffe8c7cbe454b99e3647974216f764fdd49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5339fc0c3809039e333c42269bdc6436b8f980df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5339fc0c3809039e333c42269bdc6436b8f980df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5339fc0c3809039e333c42269bdc6436b8f980df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5339fc0c3809039e333c42269bdc6436b8f980df/comments", "author": null, "committer": null, "parents": [{"sha": "00d34d3ab19f3a9e9f3f90f5b83f7ece4daa8a62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00d34d3ab19f3a9e9f3f90f5b83f7ece4daa8a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00d34d3ab19f3a9e9f3f90f5b83f7ece4daa8a62"}], "stats": {"total": 58, "additions": 31, "deletions": 27}, "files": [{"sha": "b1e23340b1ed5b0e65e4a5ed13034523add76d70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5339fc0c3809039e333c42269bdc6436b8f980df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5339fc0c3809039e333c42269bdc6436b8f980df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5339fc0c3809039e333c42269bdc6436b8f980df", "patch": "@@ -1,7 +1,18 @@\n+2013-08-26  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_debug_options): Remove prototype.\n+\t(x86_64_elf_select_section): Ditto.\n+\t(ix86_handle_tm_regparm_attribute): Remove ATTRIBUTE_UNUSED on used\n+\targuments.\n+\t(ix86_pass_by_reference): Ditto.\n+\t(ix86_return_in_memory): Ditto.\n+\t(output_set_got): Ditto.\n+\t(ix86_unary_operator_ok): Ditto.\n+\t(ix86_expand_builtin): Ditto.\n+\n 2013-08-23  Jan Hubicka  <jh@suse.cz>\n \n-\t* cgraph.c (cgraph_turn_edge_to_speculative):\n-\tFix debug output.\n+\t* cgraph.c (cgraph_turn_edge_to_speculative): Fix debug output.\n \n 2013-08-23  Jan Hubicka  <jh@suse.cz>\n \n@@ -188,7 +199,8 @@\n \t(dump_type_inheritance_graph): Do not ICE when there are no ODR types.\n \t(maybe_record_node): Record node in cached_polymorphic_call_targets.\n \t(record_binfo): Add comment.\n-\t(free_polymorphic_call_targets_hash): Do not ICE when cache is not built.\n+\t(free_polymorphic_call_targets_hash): Do not ICE when cache is not\n+\tbuilt.\n \t(devirt_node_removal_hook): Do not iCE when cache is freed.\n \t(possible_polymorphic_call_target_p): New predicate.\n \t(update_type_inheritance_graph): New function.\n@@ -275,7 +287,8 @@\n \t(*movsf_internal): Likewise.\n \t(*fop_<mode>_comm_sse): Replace constraint \"x\" with new constraint \"v\".\n \t(<code><mode>3): Likewise.\n-\t* config/i386/i386.opt (mavx512f, mavx512pf, mavx512er, mavx512cd): New.\n+\t* config/i386/i386.opt (mavx512f, mavx512pf, mavx512er, mavx512cd):\n+\tNew.\n \t* config/i386/mmx.md (*mov<mode>_internal): Replace constraint \"x\"\n \twith the new constraint \"v\".\n \t* config/i386/sse.md (*mov<mode>_internal): Support new registers and\n@@ -363,8 +376,7 @@\n \n 2013-08-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n-\t* config/sol2-10.h (TARGET_LIBC_HAS_FUNCTION): Don't nest\n-\tcomment.\n+\t* config/sol2-10.h (TARGET_LIBC_HAS_FUNCTION): Don't nest comment.\n \n 2013-08-21  Jeff Law  <law@redhat.com>\n \n@@ -548,8 +560,8 @@\n \t(BUILT_IN_FABSD128): Likewise.\n \t* builtins.c (expand_builtin): Add support for new DFP ABS builtins.\n \t(fold_builtin_1): Likewise.\n-\t* config/rs6000/dfp.md (*negtd2_fpr): Handle non-overlapping destination\n-\tand source operands.\n+\t* config/rs6000/dfp.md (*negtd2_fpr): Handle non-overlapping\n+\tdestination and source operands.\n \t(*abstd2_fpr): Likewise.\n \t(*nabstd2_fpr): Likewise.\n \n@@ -579,7 +591,7 @@\n \t(DEF_C99_COMPL_BUILTIN): New define. Change all complex c99 builtin\n \tdefinitions to using this define.\n \t* config/darwin-protos.h (darwin_libc_has_function): New.\n-\t* config/darwin.c: (darwin_libc_has_function: Ditto.\n+\t* config/darwin.c (darwin_libc_has_function): Ditto.\n \t* config/alpha/linux.h: Remove TARGET_C99_FUNCTIONS and\n \tTARGET_HAS_SINCOS. Redefine TARGET_LIBC_HAS_FUNCTION.\n \t* config/darwin.h: Ditto.\n@@ -727,8 +739,7 @@\n \tunspec enumeration.\n \t(power8 fusion peephole/peephole2): Rework the fusion peepholes to\n \tadjust the register addis loads up in the peephole2 pass.  Do not\n-\tdepend on the register live/dead state when the peephole pass is\n-\tdone.\n+\tdepend on the register live/dead state when the peephole pass is done.\n \n 2013-08-16  David Malcolm  <dmalcolm@redhat.com>\n "}, {"sha": "442b4f6fefcf7522e6b8fb6c988c9df238dfcea8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5339fc0c3809039e333c42269bdc6436b8f980df/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5339fc0c3809039e333c42269bdc6436b8f980df/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5339fc0c3809039e333c42269bdc6436b8f980df", "patch": "@@ -2321,7 +2321,6 @@ enum ix86_function_specific_strings\n \n static char *ix86_target_string (HOST_WIDE_INT, int, const char *,\n \t\t\t\t const char *, enum fpmath_unit, bool);\n-static void ix86_debug_options (void) ATTRIBUTE_UNUSED;\n static void ix86_function_specific_save (struct cl_target_option *);\n static void ix86_function_specific_restore (struct cl_target_option *);\n static void ix86_function_specific_print (FILE *, int,\n@@ -2754,7 +2753,7 @@ ix86_profile_before_prologue (void)\n \n /* Function that is callable from the debugger to print the current\n    options.  */\n-void\n+void ATTRIBUTE_UNUSED\n ix86_debug_options (void)\n {\n   char *opts = ix86_target_string (ix86_isa_flags, target_flags,\n@@ -4848,10 +4847,7 @@ ix86_in_large_data_p (tree exp)\n    RELOC indicates whether forming the initial value of DECL requires\n    link-time relocations.  */\n \n-static section * x86_64_elf_select_section (tree, int, unsigned HOST_WIDE_INT)\n-\tATTRIBUTE_UNUSED;\n-\n-static section *\n+static section * ATTRIBUTE_UNUSED\n x86_64_elf_select_section (tree decl, int reloc,\n \t\t\t   unsigned HOST_WIDE_INT align)\n {\n@@ -5303,8 +5299,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n static tree\n ix86_handle_tm_regparm_attribute (tree *node, tree name ATTRIBUTE_UNUSED,\n     \t\t\t\t  tree args ATTRIBUTE_UNUSED,\n-\t\t\t\t  int flags ATTRIBUTE_UNUSED,\n-\t\t\t\t  bool *no_add_attrs)\n+\t\t\t\t  int flags, bool *no_add_attrs)\n {\n   tree alt;\n \n@@ -7228,8 +7223,7 @@ ix86_function_arg (cumulative_args_t cum_v, enum machine_mode omode,\n    appropriate for passing a pointer to that type.  */\n \n static bool\n-ix86_pass_by_reference (cumulative_args_t cum_v ATTRIBUTE_UNUSED,\n-\t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n+ix86_pass_by_reference (cumulative_args_t cum_v, enum machine_mode mode,\n \t\t\tconst_tree type, bool named ATTRIBUTE_UNUSED)\n {\n   CUMULATIVE_ARGS *cum = get_cumulative_args (cum_v);\n@@ -7762,7 +7756,7 @@ return_in_memory_ms_64 (const_tree type, enum machine_mode mode)\n }\n \n static bool\n-ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n+ix86_return_in_memory (const_tree type, const_tree fntype)\n {\n #ifdef SUBTARGET_RETURN_IN_MEMORY\n   return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n@@ -8950,7 +8944,7 @@ ix86_code_end (void)\n /* Emit code for the SET_GOT patterns.  */\n \n const char *\n-output_set_got (rtx dest, rtx label ATTRIBUTE_UNUSED)\n+output_set_got (rtx dest, rtx label)\n {\n   rtx xops[3];\n \n@@ -18060,7 +18054,7 @@ ix86_dep_by_shift_count (const_rtx set_insn, const_rtx use_insn)\n bool\n ix86_unary_operator_ok (enum rtx_code code ATTRIBUTE_UNUSED,\n \t\t\tenum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\trtx operands[2] ATTRIBUTE_UNUSED)\n+\t\t\trtx operands[2])\n {\n   /* If one of operands is memory, source and destination must match.  */\n   if ((MEM_P (operands[0])\n@@ -32154,9 +32148,8 @@ ix86_expand_vec_set_builtin (tree exp)\n    IGNORE is nonzero if the value is to be ignored.  */\n \n static rtx\n-ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n-\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t     int ignore ATTRIBUTE_UNUSED)\n+ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n+\t\t     enum machine_mode mode, int ignore)\n {\n   const struct builtin_description *d;\n   size_t i;"}]}