{"sha": "3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEwMWZhYWI0NjIwYWQ0OTc1M2EyZWM4YTMzZTA4ZWU5ZjhjMGJjYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-08-24T19:00:59Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-08-24T19:00:59Z"}, "message": "alpha.c (alpha_mangle_type, [...]): Constify.\n\n\t* config/alpha/alpha.c (alpha_mangle_type, decl_has_samegp,\n\talpha_in_small_data_p, alpha_split_complex_arg,\n\talpha_stdarg_optimize_hook, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n\tConstify.\n\t* config/arm/arm-protos.h (arm_mangle_type): Likewise.\n\t* config/arm/arm.c (arm_comp_type_attributes, arm_mangle_type):\n\tLikewise.\n\t* config/bfin/bfin.c (funkind, bfin_comp_type_attributes,\n\tTARGET_ASM_CAN_OUTPUT_MI_THUNK): Likewise.\n\t* config/darwin-protos.h (darwin_binds_local_p): Likewise.\n\t* config/darwin.c (darwin_binds_local_p): Likewise.\n\t* config/frv/frv.c (frv_string_begins_with, frv_in_small_data_p):\n\tLikewise.\n\t* config/i386/i386-protos.h (i386_pe_binds_local_p,\n\ti386_pe_valid_dllimport_attribute_p): Likewise.\n\t* config/i386/i386.c (ix86_function_regparm,\n\tix86_comp_type_attributes, ix86_ms_bitfield_layout_p,\n\tx86_can_output_mi_thunk, ix86_mangle_type,\n\tTARGET_USE_BLOCKS_FOR_CONSTANT_P): Likewise.\n\t* config/i386/winnt.c (i386_pe_valid_dllimport_attribute_p,\n\ti386_pe_binds_local_p): Likewise.\n\t* config/ia64/ia64.c\n\t(ia64_first_cycle_multipass_dfa_lookahead_guard_spec,\n\tia64_needs_block_p, ia64_in_small_data_p, ia64_mangle_type,\n\tia64_invalid_conversion, ia64_invalid_unary_op,\n\tia64_invalid_binary_op, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n\tLikewise.\n\t* config/m32c/m32c.c (m32c_comp_type_attributes): Likewise.\n\t* config/m32r/m32r.c (m32r_in_small_data_p): Likewise.\n\t* config/m68k/m68k.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): Likewise.\n\t* config/mips/mips.c (mips_use_blocks_for_constant_p,\n\tmips_in_small_data_p, mips_use_anchors_for_symbol_p,\n\tmips_comp_type_attributes, TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n\tmips_near_type_p, mips_far_type_p, mips_global_symbol_p,\n\tmips_symbol_binds_local_p, mips_classify_symbol): Likewise.\n\t* config/pa/pa.c (pa_commutative_p): Likewise.\n\t* config/rs6000/rs6000-protos.h (rs6000_elf_in_small_data_p):\n\tLikewise.\n\t* config/rs6000/rs6000.c (rs6000_invalid_within_doloop,\n\trs6000_ms_bitfield_layout_p, rs6000_mangle_type,\n\trs6000_use_blocks_for_constant_p,\n\trs6000_vector_alignment_reachable, rs6000_is_opaque_type,\n\tinvalid_arg_for_unprototyped_fn, TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n\tTARGET_SPLIT_COMPLEX_ARG, rs6000_elf_in_small_data_p): Likewise.\n\t* config/s390/s390.c (s390_mangle_type,\n\tTARGET_ASM_CAN_OUTPUT_MI_THUNK, TARGET_INVALID_WITHIN_DOLOOP):\n\tLikewise.\n\t* config/score/score.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n\tth_in_small_data_p): Likewise.\n\t* config/sh/sh.c (sh_ms_bitfield_layout_p,\n\tsh_dwarf_calling_convention, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n\tLikewise.\n\t* config/sparc/sparc.c (sparc_can_output_mi_thunk,\n\tsparc_mangle_type): Likewise.\n\t* config/spu/spu.c (spu_vector_alignment_reachable): Likewise.\n\t* config/xtensa/xtensa.c (TARGET_SPLIT_COMPLEX_ARG): Likewise.\n\t* emit-rtl.c (const_fixed_htab_hash, const_fixed_htab_eq):\n\tLikewise.\n\t* hooks.c (hook_bool_mode_const_rtx_false,\n\thook_bool_mode_const_rtx_true,\n\thook_bool_const_tree_hwi_hwi_const_tree_false,\n\thook_bool_const_tree_hwi_hwi_const_tree_true,\n\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n\thook_constcharptr_const_tree_null,\n\thook_constcharptr_const_rtx_null,\n\thook_constcharptr_const_tree_const_tree_null,\n\thook_constcharptr_int_const_tree_null,\n\thook_constcharptr_int_const_tree_const_tree_null): New.\n\t(hook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n\thook_bool_tree_hwi_hwi_tree_false,\n\thook_bool_tree_hwi_hwi_tree_true, hook_int_tree_0,\n\thook_int_tree_tree_1, hook_constcharptr_tree_null,\n\thook_constcharptr_rtx_null, hook_constcharptr_tree_tree_null,\n\thook_constcharptr_int_tree_null,\n\thook_constcharptr_int_tree_tree_null): Delete.\n\t(default_can_output_mi_thunk_no_vcall): Constify.\n\t* hooks.h (hook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n\thook_bool_tree_hwi_hwi_tree_false,\n\thook_bool_tree_hwi_hwi_tree_true, hook_int_tree_0,\n\thook_int_tree_tree_1, hook_constcharptr_tree_null,\n\thook_constcharptr_rtx_null, hook_constcharptr_tree_tree_null,\n\thook_constcharptr_int_tree_null,\n\thook_constcharptr_int_tree_tree_null): Delete.\n\t(hook_bool_mode_const_rtx_false, hook_bool_mode_const_rtx_true,\n\thook_bool_const_tree_hwi_hwi_const_tree_false,\n\thook_bool_const_tree_hwi_hwi_const_tree_true,\n\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n\thook_constcharptr_const_tree_null,\n\thook_constcharptr_const_rtx_null,\n\thook_constcharptr_const_tree_const_tree_null,\n\thook_constcharptr_int_const_tree_null,\n\thook_constcharptr_int_const_tree_const_tree_null): New.\n\t(default_can_output_mi_thunk_no_vcall): Constify.\n\t* integrate.c (function_attribute_inlinable_p): Likewise.\n\t* integrate.h (function_attribute_inlinable_p): Likewise.\n\t* jump.c (rtx_renumbered_equal_p): Likewise.\n\t* output.h (decl_readonly_section, categorize_decl_for_section,\n\tdefault_use_anchors_for_symbol_p, default_binds_local_p,\n\tdefault_binds_local_p_1): Likewise.\n\t* rtl.h (rtx_renumbered_equal_p, decl_default_tls_model):\n\tLikewise.\n\t* target-def.h (TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n\tTARGET_VALID_DLLIMPORT_ATTRIBUTE_P, TARGET_VECTOR_OPAQUE_P,\n\tTARGET_COMMUTATIVE_P, TARGET_USE_BLOCKS_FOR_CONSTANT_P,\n\tTARGET_COMP_TYPE_ATTRIBUTES,\n\tTARGET_FUNCTION_ATTRIBUTE_INLINABLE_P,\n\tTARGET_MS_BITFIELD_LAYOUT_P, TARGET_MANGLE_TYPE,\n\tTARGET_IN_SMALL_DATA_P, TARGET_INVALID_CONVERSION,\n\tTARGET_INVALID_UNARY_OP, TARGET_INVALID_BINARY_OP,\n\tTARGET_DWARF_CALLING_CONVENTION): Likewise.\n\t* target.h (can_output_mi_thunk, needs_block_p,\n\tfirst_cycle_multipass_dfa_lookahead_guard_spec,\n\tvector_alignment_reachable, comp_type_attributes,\n\tfunction_attribute_inlinable_p, ms_bitfield_layout_p, mangle_type,\n\tcommutative_p, use_blocks_for_constant_p,\n\tuse_anchors_for_symbol_p, in_small_data_p, binds_local_p,\n\tvector_opaque_p, dwarf_calling_convention, stdarg_optimize_hook,\n\tinvalid_within_doloop, valid_dllimport_attribute_p,\n\tsplit_complex_arg, invalid_arg_for_unprototyped_fn,\n\tinvalid_conversion, invalid_unary_op, invalid_binary_op):\n\tLikewise.\n\t* targhooks.c (default_invalid_within_doloop,\n\thook_invalid_arg_for_unprototyped_fn,\n\tdefault_builtin_vector_alignment_reachable): Likewise.\n\t(hook_bool_rtx_commutative_p): Delete.\n\t(hook_bool_const_rtx_commutative_p): New.\n\t* targhooks.h (default_invalid_within_doloop,\n\tdefault_builtin_vector_alignment_reachable,\n\thook_invalid_arg_for_unprototyped_fn): Constify.\n\t(hook_bool_rtx_commutative_p): Delete.\n\t(hook_bool_const_rtx_commutative_p): New.\n\t* varasm.c (bss_initializer_p, decl_default_tls_model,\n\tcategorize_decl_for_section, decl_readonly_section,\n\tdefault_use_anchors_for_symbol_p, default_binds_local_p,\n\tdefault_binds_local_p_1): Constify.\n\nFrom-SVN: r127785", "tree": {"sha": "c0a35ce1c69be62a71bf5cadd5147b20b7e2fe31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0a35ce1c69be62a71bf5cadd5147b20b7e2fe31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/comments", "author": null, "committer": null, "parents": [{"sha": "80bf9cff52f780dd79f24a985f8512e610801eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80bf9cff52f780dd79f24a985f8512e610801eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80bf9cff52f780dd79f24a985f8512e610801eac"}], "stats": {"total": 587, "additions": 366, "deletions": 221}, "files": [{"sha": "789d74ec0dd0085223e8bb53705772e32ed38490", "filename": "gcc/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -1,3 +1,141 @@\n+2007-08-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* config/alpha/alpha.c (alpha_mangle_type, decl_has_samegp,\n+\talpha_in_small_data_p, alpha_split_complex_arg,\n+\talpha_stdarg_optimize_hook, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n+\tConstify.\n+\t* config/arm/arm-protos.h (arm_mangle_type): Likewise.\n+\t* config/arm/arm.c (arm_comp_type_attributes, arm_mangle_type):\n+\tLikewise.\n+\t* config/bfin/bfin.c (funkind, bfin_comp_type_attributes,\n+\tTARGET_ASM_CAN_OUTPUT_MI_THUNK): Likewise.\n+\t* config/darwin-protos.h (darwin_binds_local_p): Likewise.\n+\t* config/darwin.c (darwin_binds_local_p): Likewise.\n+\t* config/frv/frv.c (frv_string_begins_with, frv_in_small_data_p):\n+\tLikewise.\n+\t* config/i386/i386-protos.h (i386_pe_binds_local_p,\n+\ti386_pe_valid_dllimport_attribute_p): Likewise.\n+\t* config/i386/i386.c (ix86_function_regparm,\n+\tix86_comp_type_attributes, ix86_ms_bitfield_layout_p,\n+\tx86_can_output_mi_thunk, ix86_mangle_type,\n+\tTARGET_USE_BLOCKS_FOR_CONSTANT_P): Likewise.\n+\t* config/i386/winnt.c (i386_pe_valid_dllimport_attribute_p,\n+\ti386_pe_binds_local_p): Likewise.\n+\t* config/ia64/ia64.c\n+\t(ia64_first_cycle_multipass_dfa_lookahead_guard_spec,\n+\tia64_needs_block_p, ia64_in_small_data_p, ia64_mangle_type,\n+\tia64_invalid_conversion, ia64_invalid_unary_op,\n+\tia64_invalid_binary_op, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n+\tLikewise.\n+\t* config/m32c/m32c.c (m32c_comp_type_attributes): Likewise.\n+\t* config/m32r/m32r.c (m32r_in_small_data_p): Likewise.\n+\t* config/m68k/m68k.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK): Likewise.\n+\t* config/mips/mips.c (mips_use_blocks_for_constant_p,\n+\tmips_in_small_data_p, mips_use_anchors_for_symbol_p,\n+\tmips_comp_type_attributes, TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n+\tmips_near_type_p, mips_far_type_p, mips_global_symbol_p,\n+\tmips_symbol_binds_local_p, mips_classify_symbol): Likewise.\n+\t* config/pa/pa.c (pa_commutative_p): Likewise.\n+\t* config/rs6000/rs6000-protos.h (rs6000_elf_in_small_data_p):\n+\tLikewise.\n+\t* config/rs6000/rs6000.c (rs6000_invalid_within_doloop,\n+\trs6000_ms_bitfield_layout_p, rs6000_mangle_type,\n+\trs6000_use_blocks_for_constant_p,\n+\trs6000_vector_alignment_reachable, rs6000_is_opaque_type,\n+\tinvalid_arg_for_unprototyped_fn, TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n+\tTARGET_SPLIT_COMPLEX_ARG, rs6000_elf_in_small_data_p): Likewise.\n+\t* config/s390/s390.c (s390_mangle_type,\n+\tTARGET_ASM_CAN_OUTPUT_MI_THUNK, TARGET_INVALID_WITHIN_DOLOOP):\n+\tLikewise.\n+\t* config/score/score.c (TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n+\tth_in_small_data_p): Likewise.\n+\t* config/sh/sh.c (sh_ms_bitfield_layout_p,\n+\tsh_dwarf_calling_convention, TARGET_ASM_CAN_OUTPUT_MI_THUNK):\n+\tLikewise.\n+\t* config/sparc/sparc.c (sparc_can_output_mi_thunk,\n+\tsparc_mangle_type): Likewise.\n+\t* config/spu/spu.c (spu_vector_alignment_reachable): Likewise.\n+\t* config/xtensa/xtensa.c (TARGET_SPLIT_COMPLEX_ARG): Likewise.\n+\t* emit-rtl.c (const_fixed_htab_hash, const_fixed_htab_eq):\n+\tLikewise.\n+\t* hooks.c (hook_bool_mode_const_rtx_false,\n+\thook_bool_mode_const_rtx_true,\n+\thook_bool_const_tree_hwi_hwi_const_tree_false,\n+\thook_bool_const_tree_hwi_hwi_const_tree_true,\n+\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n+\thook_constcharptr_const_tree_null,\n+\thook_constcharptr_const_rtx_null,\n+\thook_constcharptr_const_tree_const_tree_null,\n+\thook_constcharptr_int_const_tree_null,\n+\thook_constcharptr_int_const_tree_const_tree_null): New.\n+\t(hook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n+\thook_bool_tree_hwi_hwi_tree_false,\n+\thook_bool_tree_hwi_hwi_tree_true, hook_int_tree_0,\n+\thook_int_tree_tree_1, hook_constcharptr_tree_null,\n+\thook_constcharptr_rtx_null, hook_constcharptr_tree_tree_null,\n+\thook_constcharptr_int_tree_null,\n+\thook_constcharptr_int_tree_tree_null): Delete.\n+\t(default_can_output_mi_thunk_no_vcall): Constify.\n+\t* hooks.h (hook_bool_mode_rtx_false, hook_bool_mode_rtx_true,\n+\thook_bool_tree_hwi_hwi_tree_false,\n+\thook_bool_tree_hwi_hwi_tree_true, hook_int_tree_0,\n+\thook_int_tree_tree_1, hook_constcharptr_tree_null,\n+\thook_constcharptr_rtx_null, hook_constcharptr_tree_tree_null,\n+\thook_constcharptr_int_tree_null,\n+\thook_constcharptr_int_tree_tree_null): Delete.\n+\t(hook_bool_mode_const_rtx_false, hook_bool_mode_const_rtx_true,\n+\thook_bool_const_tree_hwi_hwi_const_tree_false,\n+\thook_bool_const_tree_hwi_hwi_const_tree_true,\n+\thook_int_const_tree_0, hook_int_const_tree_const_tree_1,\n+\thook_constcharptr_const_tree_null,\n+\thook_constcharptr_const_rtx_null,\n+\thook_constcharptr_const_tree_const_tree_null,\n+\thook_constcharptr_int_const_tree_null,\n+\thook_constcharptr_int_const_tree_const_tree_null): New.\n+\t(default_can_output_mi_thunk_no_vcall): Constify.\n+\t* integrate.c (function_attribute_inlinable_p): Likewise.\n+\t* integrate.h (function_attribute_inlinable_p): Likewise.\n+\t* jump.c (rtx_renumbered_equal_p): Likewise.\n+\t* output.h (decl_readonly_section, categorize_decl_for_section,\n+\tdefault_use_anchors_for_symbol_p, default_binds_local_p,\n+\tdefault_binds_local_p_1): Likewise.\n+\t* rtl.h (rtx_renumbered_equal_p, decl_default_tls_model):\n+\tLikewise.\n+\t* target-def.h (TARGET_ASM_CAN_OUTPUT_MI_THUNK,\n+\tTARGET_VALID_DLLIMPORT_ATTRIBUTE_P, TARGET_VECTOR_OPAQUE_P,\n+\tTARGET_COMMUTATIVE_P, TARGET_USE_BLOCKS_FOR_CONSTANT_P,\n+\tTARGET_COMP_TYPE_ATTRIBUTES,\n+\tTARGET_FUNCTION_ATTRIBUTE_INLINABLE_P,\n+\tTARGET_MS_BITFIELD_LAYOUT_P, TARGET_MANGLE_TYPE,\n+\tTARGET_IN_SMALL_DATA_P, TARGET_INVALID_CONVERSION,\n+\tTARGET_INVALID_UNARY_OP, TARGET_INVALID_BINARY_OP,\n+\tTARGET_DWARF_CALLING_CONVENTION): Likewise.\n+\t* target.h (can_output_mi_thunk, needs_block_p,\n+\tfirst_cycle_multipass_dfa_lookahead_guard_spec,\n+\tvector_alignment_reachable, comp_type_attributes,\n+\tfunction_attribute_inlinable_p, ms_bitfield_layout_p, mangle_type,\n+\tcommutative_p, use_blocks_for_constant_p,\n+\tuse_anchors_for_symbol_p, in_small_data_p, binds_local_p,\n+\tvector_opaque_p, dwarf_calling_convention, stdarg_optimize_hook,\n+\tinvalid_within_doloop, valid_dllimport_attribute_p,\n+\tsplit_complex_arg, invalid_arg_for_unprototyped_fn,\n+\tinvalid_conversion, invalid_unary_op, invalid_binary_op):\n+\tLikewise.\n+\t* targhooks.c (default_invalid_within_doloop,\n+\thook_invalid_arg_for_unprototyped_fn,\n+\tdefault_builtin_vector_alignment_reachable): Likewise.\n+\t(hook_bool_rtx_commutative_p): Delete.\n+\t(hook_bool_const_rtx_commutative_p): New.\n+\t* targhooks.h (default_invalid_within_doloop,\n+\tdefault_builtin_vector_alignment_reachable,\n+\thook_invalid_arg_for_unprototyped_fn): Constify.\n+\t(hook_bool_rtx_commutative_p): Delete.\n+\t(hook_bool_const_rtx_commutative_p): New.\n+\t* varasm.c (bss_initializer_p, decl_default_tls_model,\n+\tcategorize_decl_for_section, decl_readonly_section,\n+\tdefault_use_anchors_for_symbol_p, default_binds_local_p,\n+\tdefault_binds_local_p_1): Constify.\n+\n 2007-08-24  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define"}, {"sha": "48696b5ddbdbe40cc90c003ca2a902c2a663a0da", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -240,7 +240,7 @@ alpha_handle_option (size_t code, const char *arg, int value)\n /* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-alpha_mangle_type (tree type)\n+alpha_mangle_type (const_tree type)\n {\n   if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n       && TARGET_LONG_DOUBLE_128)\n@@ -717,7 +717,7 @@ tls_symbolic_operand_type (rtx symbol)\n    function in the current unit of translation.  */\n \n static bool\n-decl_has_samegp (tree decl)\n+decl_has_samegp (const_tree decl)\n {\n   /* Functions that are not local can be overridden, and thus may\n      not share the same gp.  */\n@@ -740,7 +740,7 @@ decl_has_samegp (tree decl)\n /* Return true if EXP should be placed in the small data section.  */\n \n static bool\n-alpha_in_small_data_p (tree exp)\n+alpha_in_small_data_p (const_tree exp)\n {\n   /* We want to merge strings, so we never consider them small data.  */\n   if (TREE_CODE (exp) == STRING_CST)\n@@ -5762,7 +5762,7 @@ function_value (const_tree valtype, const_tree func ATTRIBUTE_UNUSED,\n    should not split these values.  */\n \n static bool\n-alpha_split_complex_arg (tree type)\n+alpha_split_complex_arg (const_tree type)\n {\n   return TYPE_MODE (type) != TCmode;\n }\n@@ -5864,7 +5864,7 @@ va_list_skip_additions (tree lhs)\n    current statement.  */\n \n static bool\n-alpha_stdarg_optimize_hook (struct stdarg_info *si, tree lhs, tree rhs)\n+alpha_stdarg_optimize_hook (struct stdarg_info *si, const_tree lhs, const_tree rhs)\n {\n   tree base, offset, arg1, arg2;\n   int offset_arg = 1;\n@@ -10650,7 +10650,7 @@ alpha_init_libfuncs (void)\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK alpha_output_mi_thunk_osf\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n #undef TARGET_STDARG_OPTIMIZE_HOOK\n #define TARGET_STDARG_OPTIMIZE_HOOK alpha_stdarg_optimize_hook\n #endif"}, {"sha": "fd81903eae151c57061f6dd58bfde52c6b730a03", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -214,6 +214,6 @@ extern void arm_pr_long_calls (struct cpp_reader *);\n extern void arm_pr_no_long_calls (struct cpp_reader *);\n extern void arm_pr_long_calls_off (struct cpp_reader *);\n \n-extern const char *arm_mangle_type (tree);\n+extern const char *arm_mangle_type (const_tree);\n \n #endif /* ! GCC_ARM_PROTOS_H */"}, {"sha": "fca424aa5772d4ba8d73fa3d63aca0957370d2e1", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -116,7 +116,7 @@ static tree arm_handle_notshared_attribute (tree *, tree, tree, int, bool *);\n static void arm_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arm_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void thumb1_output_function_prologue (FILE *, HOST_WIDE_INT);\n-static int arm_comp_type_attributes (tree, tree);\n+static int arm_comp_type_attributes (const_tree, const_tree);\n static void arm_set_default_type_attributes (tree);\n static int arm_adjust_cost (rtx, rtx, rtx, int);\n static int count_insns_for_constant (HOST_WIDE_INT, int);\n@@ -3185,7 +3185,7 @@ arm_handle_notshared_attribute (tree *node,\n    are compatible, and 2 if they are nearly compatible (which causes a\n    warning to be generated).  */\n static int\n-arm_comp_type_attributes (tree type1, tree type2)\n+arm_comp_type_attributes (const_tree type1, const_tree type2)\n {\n   int l1, l2, s1, s2;\n \n@@ -18966,7 +18966,7 @@ static arm_mangle_map_entry arm_mangle_map[] = {\n };\n \n const char *\n-arm_mangle_type (tree type)\n+arm_mangle_type (const_tree type)\n {\n   arm_mangle_map_entry *pos = arm_mangle_map;\n "}, {"sha": "2d27c3244b65925b9c3250f0b9cba951ee98078d", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -140,7 +140,8 @@ conditional_register_usage (void)\n /* Examine machine-dependent attributes of function type FUNTYPE and return its\n    type.  See the definition of E_FUNKIND.  */\n \n-static e_funkind funkind (tree funtype)\n+static e_funkind\n+funkind (const_tree funtype)\n {\n   tree attrs = TYPE_ATTRIBUTES (funtype);\n   if (lookup_attribute (\"interrupt_handler\", attrs))\n@@ -4578,7 +4579,7 @@ handle_int_attribute (tree *node, tree name,\n    warning to be generated).  */\n \n static int\n-bfin_comp_type_attributes (tree type1, tree type2)\n+bfin_comp_type_attributes (const_tree type1, const_tree type2)\n {\n   e_funkind kind1, kind2;\n \n@@ -5376,7 +5377,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK bfin_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST bfin_adjust_cost"}, {"sha": "a8ce17c01110a1d3f80723e5a17bf7a14374ceb8", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -84,7 +84,7 @@ extern void darwin_asm_output_dwarf_delta (FILE *, int, const char *,\n \t\t\t\t\t   const char *);\n extern void darwin_asm_output_dwarf_offset (FILE *, int, const char *,\n \t\t\t\t\t    section *);\n-extern bool darwin_binds_local_p (tree);\n+extern bool darwin_binds_local_p (const_tree);\n extern void darwin_cpp_builtins (struct cpp_reader *);\n extern void darwin_asm_output_anchor (rtx symbol);\n extern bool darwin_kextabi_p (void);"}, {"sha": "92ffb821cbb0ad831fcbd3890f7d083932feff98", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -1671,7 +1671,7 @@ darwin_file_end (void)\n    functions at dynamic-link time, except for vtables in kexts.  */\n \n bool\n-darwin_binds_local_p (tree decl)\n+darwin_binds_local_p (const_tree decl)\n {\n   return default_binds_local_p_1 (decl,\n \t\t\t\t  TARGET_KEXTABI && DARWIN_VTABLE_P (decl));"}, {"sha": "9c31b8bb5007774227cd8916815782953073d27b", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -270,7 +270,7 @@ frv_cpu_t frv_cpu_type = CPU_TYPE;\t/* value of -mcpu= */\n \n static bool frv_handle_option\t\t\t(size_t, const char *, int);\n static int frv_default_flags_for_cpu\t\t(void);\n-static int frv_string_begins_with\t\t(tree, const char *);\n+static int frv_string_begins_with\t\t(const_tree, const char *);\n static FRV_INLINE bool frv_small_data_reloc_p\t(rtx, int);\n static void frv_print_operand_memory_reference_reg\n \t\t\t\t\t\t(FILE *, rtx);\n@@ -358,7 +358,7 @@ static bool frv_assemble_integer\t\t(rtx, unsigned, int);\n static void frv_init_builtins\t\t\t(void);\n static rtx frv_expand_builtin\t\t\t(tree, rtx, rtx, enum machine_mode, int);\n static void frv_init_libfuncs\t\t\t(void);\n-static bool frv_in_small_data_p\t\t\t(tree);\n+static bool frv_in_small_data_p\t\t\t(const_tree);\n static void frv_asm_output_mi_thunk\n   (FILE *, tree, HOST_WIDE_INT, HOST_WIDE_INT, tree);\n static void frv_setup_incoming_varargs\t\t(CUMULATIVE_ARGS *,\n@@ -833,9 +833,9 @@ frv_optimization_options (int level, int size ATTRIBUTE_UNUSED)\n /* Return true if NAME (a STRING_CST node) begins with PREFIX.  */\n \n static int\n-frv_string_begins_with (tree name, const char *prefix)\n+frv_string_begins_with (const_tree name, const char *prefix)\n {\n-  int prefix_len = strlen (prefix);\n+  const int prefix_len = strlen (prefix);\n \n   /* Remember: NAME's length includes the null terminator.  */\n   return (TREE_STRING_LENGTH (name) > prefix_len\n@@ -9430,10 +9430,10 @@ frv_expand_builtin (tree exp,\n }\n \n static bool\n-frv_in_small_data_p (tree decl)\n+frv_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n-  tree section_name;\n+  const_tree section_name;\n \n   /* Don't apply the -G flag to internal compiler structures.  We\n      should leave such structures in the main data section, partly"}, {"sha": "a12a4f114f14057cfd9a2e181ff1757a430796b7", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -211,9 +211,9 @@ extern void i386_pe_declare_function_type (FILE *, const char *, int);\n extern void i386_pe_record_external_function (tree, const char *);\n extern void i386_pe_maybe_record_exported_symbol (tree, const char *, int);\n extern void i386_pe_encode_section_info (tree, rtx, int);\n-extern bool i386_pe_binds_local_p (tree);\n+extern bool i386_pe_binds_local_p (const_tree);\n extern const char *i386_pe_strip_name_encoding_full (const char *);\n-extern bool i386_pe_valid_dllimport_attribute_p (tree);\n+extern bool i386_pe_valid_dllimport_attribute_p (const_tree);\n extern unsigned int i386_pe_section_type_flags (tree, const char *, int);\n extern void i386_pe_asm_named_section (const char *, unsigned int, tree);\n extern void i386_pe_asm_output_aligned_decl_common (FILE *, tree,"}, {"sha": "42684db4499d78ab95fc0f8b85bed9f804af429e", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -1574,7 +1574,7 @@ static bool ext_80387_constants_init = 0;\n \f\n static struct machine_function * ix86_init_machine_status (void);\n static rtx ix86_function_value (const_tree, const_tree, bool);\n-static int ix86_function_regparm (tree, tree);\n+static int ix86_function_regparm (const_tree, const_tree);\n static void ix86_compute_frame_layout (struct ix86_frame *);\n static bool ix86_expand_vector_init_one_nonzero (bool, enum machine_mode,\n \t\t\t\t\t\t rtx, rtx, int);\n@@ -2905,7 +2905,7 @@ ix86_handle_cconv_attribute (tree *node, tree name,\n    warning to be generated).  */\n \n static int\n-ix86_comp_type_attributes (tree type1, tree type2)\n+ix86_comp_type_attributes (const_tree type1, const_tree type2)\n {\n   /* Check for mismatch of non-default calling convention.  */\n   const char *const rtdstr = TARGET_RTD ? \"cdecl\" : \"stdcall\";\n@@ -2938,7 +2938,7 @@ ix86_comp_type_attributes (tree type1, tree type2)\n    or considering a libcall.  */\n \n static int\n-ix86_function_regparm (tree type, tree decl)\n+ix86_function_regparm (const_tree type, const_tree decl)\n {\n   tree attr;\n   int regparm = ix86_regparm;\n@@ -2957,7 +2957,8 @@ ix86_function_regparm (tree type, tree decl)\n   if (decl && TREE_CODE (decl) == FUNCTION_DECL\n       && flag_unit_at_a_time && !profile_flag)\n     {\n-      struct cgraph_local_info *i = cgraph_local_info (decl);\n+      /* FIXME: remove this CONST_CAST when cgraph.[ch] is constified.  */\n+      struct cgraph_local_info *i = cgraph_local_info ((tree)CONST_CAST(decl));\n       if (i && i->local)\n \t{\n \t  int local_regparm, globals = 0, regno;\n@@ -21150,7 +21151,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n }\n \n static bool\n-ix86_ms_bitfield_layout_p (tree record_type)\n+ix86_ms_bitfield_layout_p (const_tree record_type)\n {\n   return (TARGET_MS_BITFIELD_LAYOUT &&\n \t  !lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (record_type)))\n@@ -21192,9 +21193,9 @@ x86_this_parameter (tree function)\n /* Determine whether x86_output_mi_thunk can succeed.  */\n \n static bool\n-x86_can_output_mi_thunk (tree thunk ATTRIBUTE_UNUSED,\n+x86_can_output_mi_thunk (const_tree thunk ATTRIBUTE_UNUSED,\n \t\t\t HOST_WIDE_INT delta ATTRIBUTE_UNUSED,\n-\t\t\t HOST_WIDE_INT vcall_offset, tree function)\n+\t\t\t HOST_WIDE_INT vcall_offset, const_tree function)\n {\n   /* 64-bit can handle anything.  */\n   if (TARGET_64BIT)\n@@ -22834,7 +22835,7 @@ i386_solaris_elf_named_section (const char *name, unsigned int flags,\n /* Return the mangling of TYPE if it is an extended fundamental type.  */\n \n static const char *\n-ix86_mangle_type (tree type)\n+ix86_mangle_type (const_tree type)\n {\n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -23580,7 +23581,7 @@ static const struct attribute_spec ix86_attribute_table[] =\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ix86_cannot_force_const_mem\n #undef TARGET_USE_BLOCKS_FOR_CONSTANT_P\n-#define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_rtx_true\n+#define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_const_rtx_true\n \n #undef TARGET_DELEGITIMIZE_ADDRESS\n #define TARGET_DELEGITIMIZE_ADDRESS ix86_delegitimize_address"}, {"sha": "26fe33670b872950fee65cd75d523c17cfc8aa47", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -146,7 +146,7 @@ i386_pe_determine_dllimport_p (tree decl)\n /* Handle the -mno-fun-dllimport target switch.  */\n \n bool\n-i386_pe_valid_dllimport_attribute_p (tree decl)\n+i386_pe_valid_dllimport_attribute_p (const_tree decl)\n {\n    if (TARGET_NOP_FUN_DLLIMPORT && TREE_CODE (decl) == FUNCTION_DECL)\n      return false;\n@@ -328,7 +328,7 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n }\n \n bool\n-i386_pe_binds_local_p (tree exp)\n+i386_pe_binds_local_p (const_tree exp)\n {\n   /* PE does not do dynamic binding.  Indeed, the only kind of\n      non-local reference comes from a dllimport'd symbol.  */"}, {"sha": "46f75c5a205c73fe00271f4de6da9c6851d3ce5e", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -169,14 +169,14 @@ static void ia64_dependencies_evaluation_hook (rtx, rtx);\n static void ia64_init_dfa_pre_cycle_insn (void);\n static rtx ia64_dfa_pre_cycle_insn (void);\n static int ia64_first_cycle_multipass_dfa_lookahead_guard (rtx);\n-static bool ia64_first_cycle_multipass_dfa_lookahead_guard_spec (rtx);\n+static bool ia64_first_cycle_multipass_dfa_lookahead_guard_spec (const_rtx);\n static int ia64_dfa_new_cycle (FILE *, int, rtx, int, int, int *);\n static void ia64_h_i_d_extended (void);\n static int ia64_mode_to_int (enum machine_mode);\n static void ia64_set_sched_flags (spec_info_t);\n static int ia64_speculate_insn (rtx, ds_t, rtx *);\n static rtx ia64_gen_spec_insn (rtx, ds_t, int, bool, bool);\n-static bool ia64_needs_block_p (rtx);\n+static bool ia64_needs_block_p (const_rtx);\n static rtx ia64_gen_check (rtx, rtx, bool);\n static int ia64_spec_check_p (rtx);\n static int ia64_spec_check_src_p (rtx);\n@@ -211,7 +211,7 @@ static void emit_all_insn_group_barriers (FILE *);\n static void final_emit_insn_group_barriers (FILE *);\n static void emit_predicate_relation_info (void);\n static void ia64_reorg (void);\n-static bool ia64_in_small_data_p (tree);\n+static bool ia64_in_small_data_p (const_tree);\n static void process_epilogue (FILE *, rtx, bool, bool);\n static int process_set (FILE *, rtx, rtx, bool, bool);\n \n@@ -278,10 +278,10 @@ static tree ia64_gimplify_va_arg (tree, tree, tree *, tree *);\n static bool ia64_scalar_mode_supported_p (enum machine_mode mode);\n static bool ia64_vector_mode_supported_p (enum machine_mode mode);\n static bool ia64_cannot_force_const_mem (rtx);\n-static const char *ia64_mangle_type (tree);\n-static const char *ia64_invalid_conversion (tree, tree);\n-static const char *ia64_invalid_unary_op (int, tree);\n-static const char *ia64_invalid_binary_op (int, tree, tree);\n+static const char *ia64_mangle_type (const_tree);\n+static const char *ia64_invalid_conversion (const_tree, const_tree);\n+static const char *ia64_invalid_unary_op (int, const_tree);\n+static const char *ia64_invalid_binary_op (int, const_tree, const_tree);\n static enum machine_mode ia64_c_mode_for_suffix (char);\n \f\n /* Table of valid machine attributes.  */\n@@ -396,7 +396,7 @@ static const struct attribute_spec ia64_attribute_table[] =\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK ia64_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START ia64_file_start\n@@ -6578,7 +6578,7 @@ ia64_first_cycle_multipass_dfa_lookahead_guard (rtx insn)\n    can be chosen.  */\n \n static bool\n-ia64_first_cycle_multipass_dfa_lookahead_guard_spec (rtx insn)\n+ia64_first_cycle_multipass_dfa_lookahead_guard_spec (const_rtx insn)\n {\n   gcc_assert (insn  && INSN_P (insn));\n   /* Size of ALAT is 32.  As far as we perform conservative data speculation,\n@@ -7039,7 +7039,7 @@ enum { SPEC_GEN_CHECK_MUTATION_OFFSET = 5 * SPEC_N };\n \n /* Return nonzero, if INSN needs branchy recovery check.  */\n static bool\n-ia64_needs_block_p (rtx insn)\n+ia64_needs_block_p (const_rtx insn)\n {\n   int check_no;\n \n@@ -8714,7 +8714,7 @@ ia64_eh_uses (int regno)\n    types which can't go in sdata/sbss.  */\n \n static bool\n-ia64_in_small_data_p (tree exp)\n+ia64_in_small_data_p (const_tree exp)\n {\n   if (TARGET_NO_SDATA)\n     return false;\n@@ -9768,7 +9768,7 @@ ia64_profile_hook (int labelno)\n /* Return the mangling of TYPE if it is an extended fundamental type.  */\n \n static const char *\n-ia64_mangle_type (tree type)\n+ia64_mangle_type (const_tree type)\n {\n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -9793,7 +9793,7 @@ ia64_mangle_type (tree type)\n /* Return the diagnostic message string if conversion from FROMTYPE to\n    TOTYPE is not allowed, NULL otherwise.  */\n static const char *\n-ia64_invalid_conversion (tree fromtype, tree totype)\n+ia64_invalid_conversion (const_tree fromtype, const_tree totype)\n {\n   /* Reject nontrivial conversion to or from __fpreg.  */\n   if (TYPE_MODE (fromtype) == RFmode\n@@ -9809,7 +9809,7 @@ ia64_invalid_conversion (tree fromtype, tree totype)\n /* Return the diagnostic message string if the unary operation OP is\n    not permitted on TYPE, NULL otherwise.  */\n static const char *\n-ia64_invalid_unary_op (int op, tree type)\n+ia64_invalid_unary_op (int op, const_tree type)\n {\n   /* Reject operations on __fpreg other than unary + or &.  */\n   if (TYPE_MODE (type) == RFmode\n@@ -9822,7 +9822,7 @@ ia64_invalid_unary_op (int op, tree type)\n /* Return the diagnostic message string if the binary operation OP is\n    not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n static const char *\n-ia64_invalid_binary_op (int op ATTRIBUTE_UNUSED, tree type1, tree type2)\n+ia64_invalid_binary_op (int op ATTRIBUTE_UNUSED, const_tree type1, const_tree type2)\n {\n   /* Reject operations on __fpreg.  */\n   if (TYPE_MODE (type1) == RFmode || TYPE_MODE (type2) == RFmode)"}, {"sha": "de9831102720119daaf9c9037063b3326de9fcae", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -64,7 +64,7 @@ static tree interrupt_handler (tree *, tree, tree, int, bool *);\n static tree function_vector_handler (tree *, tree, tree, int, bool *);\n static int interrupt_p (tree node);\n static bool m32c_asm_integer (rtx, unsigned int, int);\n-static int m32c_comp_type_attributes (tree, tree);\n+static int m32c_comp_type_attributes (const_tree, const_tree);\n static bool m32c_fixed_condition_code_regs (unsigned int *, unsigned int *);\n static struct machine_function *m32c_init_machine_status (void);\n static void m32c_insert_attributes (tree, tree *);\n@@ -2829,8 +2829,8 @@ static const struct attribute_spec m32c_attribute_table[] = {\n #undef TARGET_COMP_TYPE_ATTRIBUTES\n #define TARGET_COMP_TYPE_ATTRIBUTES m32c_comp_type_attributes\n static int\n-m32c_comp_type_attributes (tree type1 ATTRIBUTE_UNUSED,\n-\t\t\t   tree type2 ATTRIBUTE_UNUSED)\n+m32c_comp_type_attributes (const_tree type1 ATTRIBUTE_UNUSED,\n+\t\t\t   const_tree type2 ATTRIBUTE_UNUSED)\n {\n   /* 0=incompatible 1=compatible 2=warning */\n   return 1;"}, {"sha": "1edd6597211deb16ad105d3ed5728fbe94ae23bf", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -80,7 +80,7 @@ static int    m32r_adjust_priority (rtx, int);\n static int    m32r_issue_rate (void);\n \n static void m32r_encode_section_info (tree, rtx, int);\n-static bool m32r_in_small_data_p (tree);\n+static bool m32r_in_small_data_p (const_tree);\n static bool m32r_return_in_memory (const_tree, const_tree);\n static void m32r_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t\t tree, int *, int);\n@@ -445,9 +445,9 @@ m32r_encode_section_info (tree decl, rtx rtl, int first)\n    the object doesn't fit the linker will give an error.  */\n \n static bool\n-m32r_in_small_data_p (tree decl)\n+m32r_in_small_data_p (const_tree decl)\n {\n-  tree section;\n+  const_tree section;\n \n   if (TREE_CODE (decl) != VAR_DECL)\n     return false;"}, {"sha": "395161fff6622192bb657590f7e782d7cc0c23a6", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -177,7 +177,7 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK m68k_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_ASM_FILE_START_APP_OFF\n #define TARGET_ASM_FILE_START_APP_OFF true"}, {"sha": "0dd25fc2f70eb6ba23f621864abfa98034e67dff", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -291,7 +291,7 @@ static bool mips_valid_base_register_p (rtx, enum machine_mode, int);\n static bool mips_classify_address (struct mips_address_info *, rtx,\n \t\t\t\t   enum machine_mode, int);\n static bool mips_cannot_force_const_mem (rtx);\n-static bool mips_use_blocks_for_constant_p (enum machine_mode, rtx);\n+static bool mips_use_blocks_for_constant_p (enum machine_mode, const_rtx);\n static int mips_symbol_insns (enum mips_symbol_type, enum machine_mode);\n static bool mips16_unextended_reference_p (enum machine_mode mode, rtx, rtx);\n static rtx mips_force_temporary (rtx, rtx);\n@@ -344,8 +344,8 @@ static int symbolic_expression_p (rtx);\n static section *mips_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t unsigned HOST_WIDE_INT);\n static section *mips_function_rodata_section (tree);\n-static bool mips_in_small_data_p (tree);\n-static bool mips_use_anchors_for_symbol_p (rtx);\n+static bool mips_in_small_data_p (const_tree);\n+static bool mips_use_anchors_for_symbol_p (const_rtx);\n static int mips_fpr_return_fields (const_tree, tree *);\n static bool mips_return_in_msb (const_tree);\n static rtx mips_return_fpr_pair (enum machine_mode mode,\n@@ -423,7 +423,7 @@ static rtx mips_expand_builtin_compare (enum mips_builtin_type,\n static rtx mips_expand_builtin_bposge (enum mips_builtin_type, rtx);\n static void mips_encode_section_info (tree, rtx, int);\n static void mips_extra_live_on_entry (bitmap);\n-static int mips_comp_type_attributes (tree, tree);\n+static int mips_comp_type_attributes (const_tree, const_tree);\n static int mips_mode_rep_extended (enum machine_mode, enum machine_mode);\n static bool mips_offset_within_alignment_p (rtx, HOST_WIDE_INT);\n static void mips_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n@@ -1292,7 +1292,7 @@ static const unsigned char mips16e_save_restore_regs[] = {\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK mips_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_SETUP_INCOMING_VARARGS\n #define TARGET_SETUP_INCOMING_VARARGS mips_setup_incoming_varargs\n@@ -1357,13 +1357,13 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n    attributes on the given TYPE.  */\n \n static bool\n-mips_near_type_p (tree type)\n+mips_near_type_p (const_tree type)\n {\n   return lookup_attribute (\"near\", TYPE_ATTRIBUTES (type)) != NULL;\n }\n \n static bool\n-mips_far_type_p (tree type)\n+mips_far_type_p (const_tree type)\n {\n   return (lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (type)) != NULL\n \t  || lookup_attribute (\"far\", TYPE_ATTRIBUTES (type)) != NULL);\n@@ -1375,7 +1375,7 @@ mips_far_type_p (tree type)\n    warning to be generated).  */\n \n static int\n-mips_comp_type_attributes (tree type1, tree type2)\n+mips_comp_type_attributes (const_tree type1, const_tree type2)\n {\n   /* Check for mismatch of non-default calling convention.  */\n   if (TREE_CODE (type1) != FUNCTION_TYPE)\n@@ -1412,11 +1412,10 @@ mips_split_plus (rtx x, rtx *base_ptr, HOST_WIDE_INT *offset_ptr)\n    (in the STB_GLOBAL sense).  */\n \n static bool\n-mips_global_symbol_p (rtx x)\n+mips_global_symbol_p (const_rtx x)\n {\n-  tree decl;\n+  const_tree const decl = SYMBOL_REF_DECL (x);\n \n-  decl = SYMBOL_REF_DECL (x);\n   if (!decl)\n     return !SYMBOL_REF_LOCAL_P (x);\n \n@@ -1429,7 +1428,7 @@ mips_global_symbol_p (rtx x)\n /* Return true if SYMBOL_REF X binds locally.  */\n \n static bool\n-mips_symbol_binds_local_p (rtx x)\n+mips_symbol_binds_local_p (const_rtx x)\n {\n   return (SYMBOL_REF_DECL (x)\n \t  ? targetm.binds_local_p (SYMBOL_REF_DECL (x))\n@@ -1440,7 +1439,7 @@ mips_symbol_binds_local_p (rtx x)\n    LABEL_REF X in context CONTEXT.  */\n \n static enum mips_symbol_type\n-mips_classify_symbol (rtx x, enum mips_symbol_context context)\n+mips_classify_symbol (const_rtx x, enum mips_symbol_context context)\n {\n   if (TARGET_RTP_PIC)\n     return SYMBOL_GOT_DISP;\n@@ -1789,7 +1788,7 @@ mips_cannot_force_const_mem (rtx x)\n \n static bool\n mips_use_blocks_for_constant_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t\trtx x ATTRIBUTE_UNUSED)\n+\t\t\t\tconst_rtx x ATTRIBUTE_UNUSED)\n {\n   return !TARGET_MIPS16_PCREL_LOADS;\n }\n@@ -8367,7 +8366,7 @@ mips_function_rodata_section (tree decl)\n    mips_classify_symbol decide when to use %gp_rel(...)($gp) accesses.  */\n \n static bool\n-mips_in_small_data_p (tree decl)\n+mips_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n \n@@ -8416,7 +8415,7 @@ mips_in_small_data_p (tree decl)\n    where the PC acts as an anchor.  */\n \n static bool\n-mips_use_anchors_for_symbol_p (rtx symbol)\n+mips_use_anchors_for_symbol_p (const_rtx symbol)\n {\n   switch (mips_classify_symbol (symbol, SYMBOL_CONTEXT_MEM))\n     {"}, {"sha": "24b798e1265243b24b6c07756d9c0073956407cf", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -126,7 +126,7 @@ static void pa_init_builtins (void);\n static rtx hppa_builtin_saveregs (void);\n static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static bool pa_scalar_mode_supported_p (enum machine_mode);\n-static bool pa_commutative_p (rtx x, int outer_code);\n+static bool pa_commutative_p (const_rtx x, int outer_code);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n static inline void pa_file_start_level (void) ATTRIBUTE_UNUSED;\n@@ -8135,7 +8135,7 @@ pa_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n    space register selection rules for memory addresses.  Therefore, we\n    don't consider a + b == b + a, as this might be inside a MEM.  */\n static bool\n-pa_commutative_p (rtx x, int outer_code)\n+pa_commutative_p (const_rtx x, int outer_code)\n {\n   return (COMMUTATIVE_P (x)\n \t  && (TARGET_NO_SPACE_REGS"}, {"sha": "c73da36eb9a6bff628e19dc51b3315013943f8c3", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -128,7 +128,7 @@ extern rtx rs6000_libcall_value (enum machine_mode);\n extern rtx rs6000_va_arg (tree, tree);\n extern int function_ok_for_sibcall (tree);\n extern void rs6000_elf_declare_function_name (FILE *, const char *, tree);\n-extern bool rs6000_elf_in_small_data_p (tree);\n+extern bool rs6000_elf_in_small_data_p (const_tree);\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding (enum machine_mode, const_tree);"}, {"sha": "dbf7e785a65567a044fb1ffccdbb13a04c7f0ac6", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -702,7 +702,7 @@ struct processor_costs power6_cost = {\n \n \f\n static bool rs6000_function_ok_for_sibcall (tree, tree);\n-static const char *rs6000_invalid_within_doloop (rtx);\n+static const char *rs6000_invalid_within_doloop (const_rtx);\n static rtx rs6000_generate_compare (enum rtx_code);\n static void rs6000_emit_stack_tie (void);\n static void rs6000_frame_related (rtx, rtx, HOST_WIDE_INT, rtx, rtx);\n@@ -728,10 +728,10 @@ static void rs6000_assemble_visibility (tree, int);\n static int rs6000_ra_ever_killed (void);\n static tree rs6000_handle_longcall_attribute (tree *, tree, tree, int, bool *);\n static tree rs6000_handle_altivec_attribute (tree *, tree, tree, int, bool *);\n-static bool rs6000_ms_bitfield_layout_p (tree);\n+static bool rs6000_ms_bitfield_layout_p (const_tree);\n static tree rs6000_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static void rs6000_eliminate_indexed_memrefs (rtx operands[2]);\n-static const char *rs6000_mangle_type (tree);\n+static const char *rs6000_mangle_type (const_tree);\n extern const struct attribute_spec rs6000_attribute_table[];\n static void rs6000_set_default_type_attributes (tree);\n static bool rs6000_reg_live_or_pic_offset_p (int);\n@@ -753,7 +753,7 @@ static section *rs6000_elf_select_rtx_section (enum machine_mode, rtx,\n static void rs6000_elf_encode_section_info (tree, rtx, int)\n      ATTRIBUTE_UNUSED;\n #endif\n-static bool rs6000_use_blocks_for_constant_p (enum machine_mode, rtx);\n+static bool rs6000_use_blocks_for_constant_p (enum machine_mode, const_rtx);\n #if TARGET_XCOFF\n static void rs6000_xcoff_asm_output_anchor (rtx);\n static void rs6000_xcoff_asm_globalize_label (FILE *, const char *);\n@@ -805,7 +805,7 @@ static tree rs6000_builtin_mul_widen_odd (tree);\n static tree rs6000_builtin_conversion (enum tree_code, tree);\n \n static void def_builtin (int, const char *, tree, int);\n-static bool rs6000_vector_alignment_reachable (tree, bool);\n+static bool rs6000_vector_alignment_reachable (const_tree, bool);\n static void rs6000_init_builtins (void);\n static rtx rs6000_expand_unop_builtin (enum insn_code, tree, rtx);\n static rtx rs6000_expand_binop_builtin (enum insn_code, tree, rtx);\n@@ -850,7 +850,7 @@ static void compute_save_world_info (rs6000_stack_t *info_ptr);\n static void is_altivec_return_reg (rtx, void *);\n static rtx generate_set_vrsave (rtx, rs6000_stack_t *, int);\n int easy_vector_constant (rtx, enum machine_mode);\n-static bool rs6000_is_opaque_type (tree);\n+static bool rs6000_is_opaque_type (const_tree);\n static rtx rs6000_dwarf_register_span (rtx);\n static void rs6000_init_dwarf_reg_sizes_extra (tree);\n static rtx rs6000_legitimize_tls_address (rtx, enum tls_model);\n@@ -883,7 +883,7 @@ static bool rs6000_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t      const_tree, bool);\n static int rs6000_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t     tree, bool);\n-static const char *invalid_arg_for_unprototyped_fn (tree, tree, tree);\n+static const char *invalid_arg_for_unprototyped_fn (const_tree, const_tree, const_tree);\n #if TARGET_MACHO\n static void macho_branch_islands (void);\n static int no_previous_def (tree function_name);\n@@ -1100,7 +1100,7 @@ static const char alt_reg_names[][8] =\n #define TARGET_ASM_OUTPUT_MI_THUNK rs6000_output_mi_thunk\n \n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_FUNCTION_OK_FOR_SIBCALL\n #define TARGET_FUNCTION_OK_FOR_SIBCALL rs6000_function_ok_for_sibcall\n@@ -1141,7 +1141,7 @@ static const char alt_reg_names[][8] =\n #undef TARGET_PRETEND_OUTGOING_VARARGS_NAMED\n #define TARGET_PRETEND_OUTGOING_VARARGS_NAMED hook_bool_CUMULATIVE_ARGS_true\n #undef TARGET_SPLIT_COMPLEX_ARG\n-#define TARGET_SPLIT_COMPLEX_ARG hook_bool_tree_true\n+#define TARGET_SPLIT_COMPLEX_ARG hook_bool_const_tree_true\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK rs6000_must_pass_in_stack\n #undef TARGET_PASS_BY_REFERENCE\n@@ -1914,7 +1914,7 @@ rs6000_builtin_mul_widen_odd (tree type)\n    how may iterations are required to reach desired alignment.  */\n \n static bool\n-rs6000_vector_alignment_reachable (tree type ATTRIBUTE_UNUSED, bool is_packed)\n+rs6000_vector_alignment_reachable (const_tree type ATTRIBUTE_UNUSED, bool is_packed)\n {\n   if (is_packed)\n     return false;\n@@ -14119,7 +14119,7 @@ rs6000_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n    PowerPC uses the COUNT register for branch on table instructions.  */\n \n static const char *\n-rs6000_invalid_within_doloop (rtx insn)\n+rs6000_invalid_within_doloop (const_rtx insn)\n {\n   if (CALL_P (insn))\n     return \"Function call in the loop.\";\n@@ -19003,7 +19003,7 @@ rs6000_handle_altivec_attribute (tree *node,\n    elements; we must teach the compiler how to mangle them.  */\n \n static const char *\n-rs6000_mangle_type (tree type)\n+rs6000_mangle_type (const_tree type)\n {\n   type = TYPE_MAIN_VARIANT (type);\n \n@@ -19133,7 +19133,7 @@ rs6000_handle_struct_attribute (tree *node, tree name,\n }\n \n static bool\n-rs6000_ms_bitfield_layout_p (tree record_type)\n+rs6000_ms_bitfield_layout_p (const_tree record_type)\n {\n   return (TARGET_USE_MS_BITFIELD_LAYOUT &&\n           !lookup_attribute (\"gcc_struct\", TYPE_ATTRIBUTES (record_type)))\n@@ -19235,7 +19235,7 @@ rs6000_elf_encode_section_info (tree decl, rtx rtl, int first)\n }\n \n bool\n-rs6000_elf_in_small_data_p (tree decl)\n+rs6000_elf_in_small_data_p (const_tree decl)\n {\n   if (rs6000_sdata == SDATA_NONE)\n     return false;\n@@ -19279,7 +19279,7 @@ rs6000_elf_in_small_data_p (tree decl)\n /* Implement TARGET_USE_BLOCKS_FOR_CONSTANT_P.  */\n \n static bool\n-rs6000_use_blocks_for_constant_p (enum machine_mode mode, rtx x)\n+rs6000_use_blocks_for_constant_p (enum machine_mode mode, const_rtx x)\n {\n   return !ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (x, mode);\n }\n@@ -20965,7 +20965,7 @@ rs6000_initial_elimination_offset (int from, int to)\n /* Return true if TYPE is a SPE or AltiVec opaque type.  */\n \n static bool\n-rs6000_is_opaque_type (tree type)\n+rs6000_is_opaque_type (const_tree type)\n {\n   return (type == opaque_V2SI_type_node\n \t      || type == opaque_V2SF_type_node\n@@ -21092,7 +21092,7 @@ rs6000_vector_mode_supported_p (enum machine_mode mode)\n \n /* Target hook for invalid_arg_for_unprototyped_fn. */\n static const char *\n-invalid_arg_for_unprototyped_fn (tree typelist, tree funcdecl, tree val)\n+invalid_arg_for_unprototyped_fn (const_tree typelist, const_tree funcdecl, const_tree val)\n {\n   return (!rs6000_darwin64_abi\n \t  && typelist == 0"}, {"sha": "c93fe997abbc5b9298a4c21a846de22159ee4257", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -4370,7 +4370,7 @@ s390_output_dwarf_dtprel (FILE *file, int size, rtx x)\n /* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-s390_mangle_type (tree type)\n+s390_mangle_type (const_tree type)\n {\n   if (TYPE_MAIN_VARIANT (type) == long_double_type_node\n       && TARGET_LONG_DOUBLE_128)\n@@ -9290,7 +9290,7 @@ s390_reorg (void)\n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK s390_output_mi_thunk\n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef  TARGET_SCHED_ADJUST_PRIORITY\n #define TARGET_SCHED_ADJUST_PRIORITY s390_adjust_priority\n@@ -9334,7 +9334,7 @@ s390_reorg (void)\n #define TARGET_CC_MODES_COMPATIBLE s390_cc_modes_compatible\n \n #undef TARGET_INVALID_WITHIN_DOLOOP\n-#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_rtx_null\n+#define TARGET_INVALID_WITHIN_DOLOOP hook_constcharptr_const_rtx_null\n \n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL"}, {"sha": "6dba9903b7efab34347678903d32398aa26804eb", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -101,7 +101,7 @@ static int score_address_cost (rtx);\n #define TARGET_ASM_OUTPUT_MI_THUNK      th_output_mi_thunk\n \n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK  hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK  hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS    hook_bool_const_tree_true\n@@ -427,7 +427,7 @@ th_select_rtx_section (enum machine_mode mode, rtx x,\n \n /* Implement TARGET_IN_SMALL_DATA_P.  */\n static bool\n-th_in_small_data_p (tree decl)\n+th_in_small_data_p (const_tree decl)\n {\n   HOST_WIDE_INT size;\n "}, {"sha": "941aadb9f009f1564f41af49c78543fa0d8c8ff3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -214,7 +214,7 @@ static bool sh_function_ok_for_sibcall (tree, tree);\n static bool sh_cannot_modify_jumps_p (void);\n static int sh_target_reg_class (void);\n static bool sh_optimize_target_register_callee_saved (bool);\n-static bool sh_ms_bitfield_layout_p (tree);\n+static bool sh_ms_bitfield_layout_p (const_tree);\n \n static void sh_init_builtins (void);\n static void sh_media_init_builtins (void);\n@@ -255,7 +255,7 @@ static bool sh_callee_copies (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      const_tree, bool);\n static int sh_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t         tree, bool);\n-static int sh_dwarf_calling_convention (tree);\n+static int sh_dwarf_calling_convention (const_tree);\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -281,7 +281,7 @@ static int sh_dwarf_calling_convention (tree);\n #define TARGET_ASM_OUTPUT_MI_THUNK sh_output_mi_thunk\n \n #undef TARGET_ASM_CAN_OUTPUT_MI_THUNK\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_true\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_true\n \n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START sh_file_start\n@@ -9346,7 +9346,7 @@ sh_optimize_target_register_callee_saved (bool after_prologue_epilogue_gen)\n }\n \n static bool\n-sh_ms_bitfield_layout_p (tree record_type ATTRIBUTE_UNUSED)\n+sh_ms_bitfield_layout_p (const_tree record_type ATTRIBUTE_UNUSED)\n {\n   return (TARGET_SH5 || TARGET_HITACHI || sh_attr_renesas_p (record_type));\n }\n@@ -9774,7 +9774,7 @@ sh_vector_mode_supported_p (enum machine_mode mode)\n /* Implements target hook dwarf_calling_convention.  Return an enum\n    of dwarf_calling_convention.  */\n int\n-sh_dwarf_calling_convention (tree func)\n+sh_dwarf_calling_convention (const_tree func)\n {\n   if (sh_attr_renesas_p (func))\n     return DW_CC_GNU_renesas_sh;"}, {"sha": "3ad1a7f3cdf5c1e2eedc340b02929705792b31e7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -372,8 +372,8 @@ static int sparc_vis_mul8x16 (int, int);\n static tree sparc_handle_vis_mul8x16 (int, tree, tree, tree);\n static void sparc_output_mi_thunk (FILE *, tree, HOST_WIDE_INT,\n \t\t\t\t   HOST_WIDE_INT, tree);\n-static bool sparc_can_output_mi_thunk (tree, HOST_WIDE_INT,\n-\t\t\t\t       HOST_WIDE_INT, tree);\n+static bool sparc_can_output_mi_thunk (const_tree, HOST_WIDE_INT,\n+\t\t\t\t       HOST_WIDE_INT, const_tree);\n static struct machine_function * sparc_init_machine_status (void);\n static bool sparc_cannot_force_const_mem (rtx);\n static rtx sparc_tls_get_addr (void);\n@@ -395,7 +395,7 @@ static void sparc_dwarf_handle_frame_unspec (const char *, rtx, int);\n static void sparc_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n static void sparc_file_end (void);\n #ifdef TARGET_ALTERNATE_LONG_DOUBLE_MANGLING\n-static const char *sparc_mangle_type (tree);\n+static const char *sparc_mangle_type (const_tree);\n #endif\n #ifdef SUBTARGET_ATTRIBUTE_TABLE\n const struct attribute_spec sparc_attribute_table[];\n@@ -8788,10 +8788,10 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n    assembler code for the thunk function specified by the arguments\n    it is passed, and false otherwise.  */\n static bool\n-sparc_can_output_mi_thunk (tree thunk_fndecl ATTRIBUTE_UNUSED,\n+sparc_can_output_mi_thunk (const_tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t\t\t   HOST_WIDE_INT delta ATTRIBUTE_UNUSED,\n \t\t\t   HOST_WIDE_INT vcall_offset,\n-\t\t\t   tree function ATTRIBUTE_UNUSED)\n+\t\t\t   const_tree function ATTRIBUTE_UNUSED)\n {\n   /* Bound the loop used in the default method above.  */\n   return (vcall_offset >= -32768 || ! fixed_regs[5]);\n@@ -8890,7 +8890,7 @@ sparc_file_end (void)\n /* Implement TARGET_MANGLE_TYPE.  */\n \n static const char *\n-sparc_mangle_type (tree type)\n+sparc_mangle_type (const_tree type)\n {\n   if (!TARGET_64BIT\n       && TYPE_MAIN_VARIANT (type) == long_double_type_node"}, {"sha": "eda0de03813e38f0c46bf5fed04a4c2c26f405cc", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -135,7 +135,7 @@ static tree spu_builtin_mul_widen_even (tree);\n static tree spu_builtin_mul_widen_odd (tree);\n static tree spu_builtin_mask_for_load (void);\n static int spu_builtin_vectorization_cost (bool);\n-static bool spu_vector_alignment_reachable (tree, bool);\n+static bool spu_vector_alignment_reachable (const_tree, bool);\n \n extern const char *reg_names[];\n rtx spu_compare_op0, spu_compare_op1;\n@@ -5485,7 +5485,7 @@ spu_builtin_vectorization_cost (bool runtime_test)\n    how may iterations are required to reach desired alignment.  */\n \n static bool\n-spu_vector_alignment_reachable (tree type ATTRIBUTE_UNUSED, bool is_packed)\n+spu_vector_alignment_reachable (const_tree type ATTRIBUTE_UNUSED, bool is_packed)\n {\n   if (is_packed)\n     return false;"}, {"sha": "2b307997c438f980bacdd902bfbd51b633bd3d24", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -188,7 +188,7 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY xtensa_return_in_memory\n #undef TARGET_SPLIT_COMPLEX_ARG\n-#define TARGET_SPLIT_COMPLEX_ARG hook_bool_tree_true\n+#define TARGET_SPLIT_COMPLEX_ARG hook_bool_const_tree_true\n #undef TARGET_MUST_PASS_IN_STACK\n #define TARGET_MUST_PASS_IN_STACK must_pass_in_stack_var_size\n "}, {"sha": "2a98a4669c2b4a4d269608d988dd2926b778ebc3", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -259,7 +259,7 @@ const_double_htab_eq (const void *x, const void *y)\n static hashval_t\n const_fixed_htab_hash (const void *x)\n {\n-  rtx value = (rtx) x;\n+  const_rtx const value = (const_rtx) x;\n   hashval_t h;\n \n   h = fixed_hash (CONST_FIXED_VALUE (value));\n@@ -274,7 +274,7 @@ const_fixed_htab_hash (const void *x)\n static int\n const_fixed_htab_eq (const void *x, const void *y)\n {\n-  rtx a = (rtx)x, b = (rtx)y;\n+  const_rtx const a = (const_rtx) x, b = (const_rtx) y;\n \n   if (GET_MODE (a) != GET_MODE (b))\n     return 0;"}, {"sha": "289275e84415d156fcb6619bff1c0eb0be525d88", "filename": "gcc/hooks.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -71,16 +71,16 @@ hook_bool_mode_false (enum machine_mode mode ATTRIBUTE_UNUSED)\n \n /* Generic hook that takes (enum machine_mode, rtx) and returns false.  */\n bool\n-hook_bool_mode_rtx_false (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t  rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_const_rtx_false (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t\tconst_rtx value ATTRIBUTE_UNUSED)\n {\n   return false;\n }\n \n /* Generic hook that takes (enum machine_mode, rtx) and returns true.  */\n bool\n-hook_bool_mode_rtx_true (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t\t rtx value ATTRIBUTE_UNUSED)\n+hook_bool_mode_const_rtx_true (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t       const_rtx value ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n@@ -93,19 +93,19 @@ hook_void_FILEptr_constcharptr (FILE *a ATTRIBUTE_UNUSED, const char *b ATTRIBUT\n \n /* Used for the TARGET_ASM_CAN_OUTPUT_MI_THUNK hook.  */\n bool\n-hook_bool_tree_hwi_hwi_tree_false (tree a ATTRIBUTE_UNUSED,\n-\t\t\t\t   HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n-\t\t\t\t   HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n-\t\t\t\t   tree d ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_hwi_hwi_const_tree_false (const_tree a ATTRIBUTE_UNUSED,\n+\t\t\t\t\t       HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n+\t\t\t\t\t       HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n+\t\t\t\t\t       const_tree d ATTRIBUTE_UNUSED)\n {\n   return false;\n }\n \n bool\n-hook_bool_tree_hwi_hwi_tree_true (tree a ATTRIBUTE_UNUSED,\n-\t\t\t\t  HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n-\t\t\t\t  HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n-\t\t\t\t  tree d ATTRIBUTE_UNUSED)\n+hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree a ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      HOST_WIDE_INT c ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      const_tree d ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n@@ -126,23 +126,23 @@ hook_bool_size_t_constcharptr_int_true (size_t a ATTRIBUTE_UNUSED,\n }\n \n bool\n-default_can_output_mi_thunk_no_vcall (tree a ATTRIBUTE_UNUSED,\n+default_can_output_mi_thunk_no_vcall (const_tree a ATTRIBUTE_UNUSED,\n \t\t\t\t      HOST_WIDE_INT b ATTRIBUTE_UNUSED,\n \t\t\t\t      HOST_WIDE_INT c,\n-\t\t\t\t      tree d ATTRIBUTE_UNUSED)\n+\t\t\t\t      const_tree d ATTRIBUTE_UNUSED)\n {\n   return c == 0;\n }\n \n int\n-hook_int_tree_0 (tree a ATTRIBUTE_UNUSED)\n+hook_int_const_tree_0 (const_tree a ATTRIBUTE_UNUSED)\n {\n   return 0;\n }\n \n /* ??? Used for comp_type_attributes, which ought to return bool.  */\n int\n-hook_int_tree_tree_1 (tree a ATTRIBUTE_UNUSED, tree b ATTRIBUTE_UNUSED)\n+hook_int_const_tree_const_tree_1 (const_tree a ATTRIBUTE_UNUSED, const_tree b ATTRIBUTE_UNUSED)\n {\n   return 1;\n }\n@@ -272,7 +272,7 @@ hook_tree_tree_tree_tree_3rd_identity (tree a ATTRIBUTE_UNUSED,\n \n /* Generic hook that takes a tree and returns a NULL string.  */\n const char *\n-hook_constcharptr_tree_null (tree t ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_tree_null (const_tree t ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n@@ -293,29 +293,29 @@ hook_tree_tree_tree_null (tree t0 ATTRIBUTE_UNUSED, tree t1 ATTRIBUTE_UNUSED)\n \n /* Generic hook that takes a rtx and returns a NULL string.  */\n const char *\n-hook_constcharptr_rtx_null (rtx r ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_rtx_null (const_rtx r ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_tree_tree_null (tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t\t  tree t1 ATTRIBUTE_UNUSED)\n+hook_constcharptr_const_tree_const_tree_null (const_tree t0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t      const_tree t1 ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_int_tree_null (int i ATTRIBUTE_UNUSED,\n-\t\t\t\t tree t0 ATTRIBUTE_UNUSED)\n+hook_constcharptr_int_const_tree_null (int i ATTRIBUTE_UNUSED,\n+\t\t\t\t       const_tree t0 ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n \n const char *\n-hook_constcharptr_int_tree_tree_null (int i ATTRIBUTE_UNUSED,\n-\t\t\t\t      tree t0 ATTRIBUTE_UNUSED,\n-\t\t\t\t      tree t1 ATTRIBUTE_UNUSED)\n+hook_constcharptr_int_const_tree_const_tree_null (int i ATTRIBUTE_UNUSED,\n+\t\t\t\t\t\t  const_tree t0 ATTRIBUTE_UNUSED,\n+\t\t\t\t\t\t  const_tree t1 ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }"}, {"sha": "838a4223fe31112310ec3eb446f8f9acb1ba4444", "filename": "gcc/hooks.h", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -28,16 +28,20 @@ extern bool hook_bool_void_false (void);\n extern bool hook_bool_void_true (void);\n extern bool hook_bool_bool_false (bool);\n extern bool hook_bool_mode_false (enum machine_mode);\n-extern bool hook_bool_mode_rtx_false (enum machine_mode, rtx);\n-extern bool hook_bool_mode_rtx_true (enum machine_mode, rtx);\n+extern bool hook_bool_mode_const_rtx_false (enum machine_mode, const_rtx);\n+extern bool hook_bool_mode_const_rtx_true (enum machine_mode, const_rtx);\n extern bool hook_bool_tree_false (tree);\n extern bool hook_bool_const_tree_false (const_tree);\n extern bool hook_bool_tree_true (tree);\n extern bool hook_bool_const_tree_true (const_tree);\n-extern bool hook_bool_tree_hwi_hwi_tree_false (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t\ttree);\n-extern bool hook_bool_tree_hwi_hwi_tree_true (tree, HOST_WIDE_INT, HOST_WIDE_INT,\n-\t\t\t\t       tree);\n+extern bool hook_bool_const_tree_hwi_hwi_const_tree_false (const_tree,\n+\t\t\t\t\t\t\t   HOST_WIDE_INT,\n+\t\t\t\t\t\t\t   HOST_WIDE_INT,\n+\t\t\t\t\t\t\t   const_tree);\n+extern bool hook_bool_const_tree_hwi_hwi_const_tree_true (const_tree,\n+\t\t\t\t\t\t\t  HOST_WIDE_INT,\n+\t\t\t\t\t\t\t  HOST_WIDE_INT,\n+\t\t\t\t\t\t\t  const_tree);\n extern bool hook_bool_rtx_false (rtx);\n extern bool hook_bool_uintp_uintp_false (unsigned int *, unsigned int *);\n extern bool hook_bool_rtx_int_int_intp_false (rtx, int, int, int *);\n@@ -52,8 +56,8 @@ extern void hook_void_FILEptr_constcharptr (FILE *, const char *);\n extern void hook_void_tree (tree);\n extern void hook_void_tree_treeptr (tree, tree *);\n \n-extern int hook_int_tree_0 (tree);\n-extern int hook_int_tree_tree_1 (tree, tree);\n+extern int hook_int_const_tree_0 (const_tree);\n+extern int hook_int_const_tree_const_tree_1 (const_tree, const_tree);\n extern int hook_int_rtx_0 (rtx);\n extern int hook_int_size_t_constcharptr_int_0 (size_t, const char *, int);\n extern int hook_int_void_no_regs (void);\n@@ -64,16 +68,16 @@ extern tree hook_tree_tree_tree_bool_null (tree, tree, bool);\n \n extern unsigned hook_uint_uint_constcharptrptr_0 (unsigned, const char **);\n \n-extern bool default_can_output_mi_thunk_no_vcall (tree, HOST_WIDE_INT,\n-\t\t\t\t\t   HOST_WIDE_INT, tree);\n+extern bool default_can_output_mi_thunk_no_vcall (const_tree, HOST_WIDE_INT,\n+\t\t\t\t\t\t  HOST_WIDE_INT, const_tree);\n \n extern rtx hook_rtx_rtx_identity (rtx);\n extern rtx hook_rtx_rtx_null (rtx);\n extern rtx hook_rtx_tree_int_null (tree, int);\n \n-extern const char *hook_constcharptr_tree_null (tree);\n-extern const char *hook_constcharptr_rtx_null (rtx);\n-extern const char *hook_constcharptr_tree_tree_null (tree, tree);\n-extern const char *hook_constcharptr_int_tree_null (int, tree);\n-extern const char *hook_constcharptr_int_tree_tree_null (int, tree, tree);\n+extern const char *hook_constcharptr_const_tree_null (const_tree);\n+extern const char *hook_constcharptr_const_rtx_null (const_rtx);\n+extern const char *hook_constcharptr_const_tree_const_tree_null (const_tree, const_tree);\n+extern const char *hook_constcharptr_int_const_tree_null (int, const_tree);\n+extern const char *hook_constcharptr_int_const_tree_const_tree_null (int, const_tree, const_tree);\n #endif"}, {"sha": "7eb29f20303fc0c507c9d60cd4a6173d7ac9fafb", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -69,15 +69,15 @@ static void set_block_abstract_flags (tree, int);\n /* Return false if the function FNDECL cannot be inlined on account of its\n    attributes, true otherwise.  */\n bool\n-function_attribute_inlinable_p (tree fndecl)\n+function_attribute_inlinable_p (const_tree fndecl)\n {\n   if (targetm.attribute_table)\n     {\n-      tree a;\n+      const_tree a;\n \n       for (a = DECL_ATTRIBUTES (fndecl); a; a = TREE_CHAIN (a))\n \t{\n-\t  tree name = TREE_PURPOSE (a);\n+\t  const_tree name = TREE_PURPOSE (a);\n \t  int i;\n \n \t  for (i = 0; targetm.attribute_table[i].name != NULL; i++)"}, {"sha": "c074047084d5d9ec2a0214764986edf391b9c50a", "filename": "gcc/integrate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -32,5 +32,5 @@ extern void allocate_initial_values (rtx *);\n /* Check whether there's any attribute in a function declaration that\n    makes the function uninlinable.  Returns false if it finds any,\n    true otherwise.  */\n-extern bool function_attribute_inlinable_p (tree);\n+extern bool function_attribute_inlinable_p (const_tree);\n "}, {"sha": "bda82a221bc8a1adb9f49fb04ae7f76d72ad8fbe", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -1419,7 +1419,7 @@ invert_jump (rtx jump, rtx nlabel, int delete_unused)\n    reversed.  */\n \n int\n-rtx_renumbered_equal_p (rtx x, rtx y)\n+rtx_renumbered_equal_p (const_rtx x, const_rtx y)\n {\n   int i;\n   const enum rtx_code code = GET_CODE (x);"}, {"sha": "ae8404e7fe11dc8081e5ace592c10486264e1872", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -378,7 +378,7 @@ extern bool first_function_block_is_cold;\n \n /* Decide whether DECL needs to be in a writable section.\n    RELOC is the same as for SELECT_SECTION.  */\n-extern bool decl_readonly_section (tree, int);\n+extern bool decl_readonly_section (const_tree, int);\n \n /* This can be used to compute RELOC for the function above, when\n    given a constant expression.  */\n@@ -579,7 +579,7 @@ extern unsigned int default_section_type_flags (tree, const char *, int);\n extern bool have_global_bss_p (void);\n extern void default_no_named_section (const char *, unsigned int, tree);\n extern void default_elf_asm_named_section (const char *, unsigned int, tree);\n-extern enum section_category categorize_decl_for_section (tree, int);\n+extern enum section_category categorize_decl_for_section (const_tree, int);\n extern void default_coff_asm_named_section (const char *, unsigned int, tree);\n extern void default_pe_asm_named_section (const char *, unsigned int, tree);\n \n@@ -602,9 +602,9 @@ extern section *default_elf_select_rtx_section (enum machine_mode, rtx,\n extern void default_encode_section_info (tree, rtx, int);\n extern const char *default_strip_name_encoding (const char *);\n extern void default_asm_output_anchor (rtx);\n-extern bool default_use_anchors_for_symbol_p (rtx);\n-extern bool default_binds_local_p (tree);\n-extern bool default_binds_local_p_1 (tree, int);\n+extern bool default_use_anchors_for_symbol_p (const_rtx);\n+extern bool default_binds_local_p (const_tree);\n+extern bool default_binds_local_p_1 (const_tree, int);\n extern void default_globalize_label (FILE *, const char *);\n extern void default_globalize_decl_name (FILE *, tree);\n extern void default_emit_unwind_label (FILE *, tree, int, int);"}, {"sha": "386013fdfdeff05123b2216b3b38ceb260eb06f5", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -2036,7 +2036,7 @@ extern int only_sets_cc0_p (const_rtx);\n extern int sets_cc0_p (const_rtx);\n extern int invert_jump_1 (rtx, rtx);\n extern int invert_jump (rtx, rtx, int);\n-extern int rtx_renumbered_equal_p (rtx, rtx);\n+extern int rtx_renumbered_equal_p (const_rtx, const_rtx);\n extern int true_regnum (const_rtx);\n extern unsigned int reg_or_subregno (const_rtx);\n extern int redirect_jump_1 (rtx, rtx);\n@@ -2218,7 +2218,7 @@ extern rtx emit_library_call_value (rtx, rtx, enum libcall_type,\n \n /* In varasm.c */\n extern void init_varasm_once (void);\n-extern enum tls_model decl_default_tls_model (tree);\n+extern enum tls_model decl_default_tls_model (const_tree);\n   \n /* In rtl.c */\n extern void traverse_md_constants (int (*) (void **, void *), void *);"}, {"sha": "0ffad7c836a46a03b975b24c08ebebe54b45af75", "filename": "gcc/target-def.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -142,7 +142,7 @@\n #endif\n \n #define TARGET_ASM_OUTPUT_MI_THUNK NULL\n-#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_tree_hwi_hwi_tree_false\n+#define TARGET_ASM_CAN_OUTPUT_MI_THUNK hook_bool_const_tree_hwi_hwi_const_tree_false\n \n #if !defined(TARGET_HAVE_CTORS_DTORS)\n # if defined(TARGET_ASM_CONSTRUCTOR) && defined(TARGET_ASM_DESTRUCTOR)\n@@ -174,7 +174,7 @@\n #endif\n \n #ifndef TARGET_VALID_DLLIMPORT_ATTRIBUTE_P\n-#define TARGET_VALID_DLLIMPORT_ATTRIBUTE_P hook_bool_tree_true\n+#define TARGET_VALID_DLLIMPORT_ATTRIBUTE_P hook_bool_const_tree_true\n #endif\n \n #ifndef TARGET_HAVE_TLS\n@@ -450,7 +450,7 @@\n #endif\n \n #ifndef TARGET_VECTOR_OPAQUE_P\n-#define TARGET_VECTOR_OPAQUE_P hook_bool_tree_false\n+#define TARGET_VECTOR_OPAQUE_P hook_bool_const_tree_false\n #endif\n \n /* In hooks.c.  */\n@@ -459,32 +459,32 @@\n #define TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED hook_bool_bool_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n #define TARGET_CANNOT_COPY_INSN_P NULL\n-#define TARGET_COMMUTATIVE_P hook_bool_rtx_commutative_p\n+#define TARGET_COMMUTATIVE_P hook_bool_const_rtx_commutative_p\n #define TARGET_DELEGITIMIZE_ADDRESS hook_rtx_rtx_identity\n-#define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_rtx_false\n+#define TARGET_USE_BLOCKS_FOR_CONSTANT_P hook_bool_mode_const_rtx_false\n #define TARGET_MIN_ANCHOR_OFFSET 0\n #define TARGET_MAX_ANCHOR_OFFSET 0\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P default_use_anchors_for_symbol_p\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n-#define TARGET_COMP_TYPE_ATTRIBUTES hook_int_tree_tree_1\n+#define TARGET_COMP_TYPE_ATTRIBUTES hook_int_const_tree_const_tree_1\n #ifndef TARGET_SET_DEFAULT_TYPE_ATTRIBUTES\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES hook_void_tree\n #endif\n #define TARGET_INSERT_ATTRIBUTES hook_void_tree_treeptr\n-#define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_tree_false\n-#define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_tree_false\n+#define TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P hook_bool_const_tree_false\n+#define TARGET_MS_BITFIELD_LAYOUT_P hook_bool_const_tree_false\n #define TARGET_ALIGN_ANON_BITFIELD hook_bool_void_false\n #define TARGET_NARROW_VOLATILE_BITFIELD hook_bool_void_false\n #define TARGET_RTX_COSTS hook_bool_rtx_int_int_intp_false\n-#define TARGET_MANGLE_TYPE hook_constcharptr_tree_null\n+#define TARGET_MANGLE_TYPE hook_constcharptr_const_tree_null\n #define TARGET_ALLOCATE_INITIAL_VALUE NULL\n \n #ifndef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS hook_void_void\n #endif\n \n #ifndef TARGET_IN_SMALL_DATA_P\n-#define TARGET_IN_SMALL_DATA_P hook_bool_tree_false\n+#define TARGET_IN_SMALL_DATA_P hook_bool_const_tree_false\n #endif\n \n #ifndef TARGET_MANGLE_DECL_ASSEMBLER_NAME\n@@ -499,9 +499,9 @@\n #define TARGET_INVALID_ARG_FOR_UNPROTOTYPED_FN hook_invalid_arg_for_unprototyped_fn\n #endif\n \n-#define TARGET_INVALID_CONVERSION hook_constcharptr_tree_tree_null\n-#define TARGET_INVALID_UNARY_OP hook_constcharptr_int_tree_null\n-#define TARGET_INVALID_BINARY_OP hook_constcharptr_int_tree_tree_null\n+#define TARGET_INVALID_CONVERSION hook_constcharptr_const_tree_const_tree_null\n+#define TARGET_INVALID_UNARY_OP hook_constcharptr_int_const_tree_null\n+#define TARGET_INVALID_BINARY_OP hook_constcharptr_int_const_tree_const_tree_null\n \n #define TARGET_FIXED_CONDITION_CODE_REGS hook_bool_uintp_uintp_false\n \n@@ -521,7 +521,7 @@\n \n #define TARGET_MD_ASM_CLOBBERS hook_tree_tree_tree_tree_3rd_identity\n \n-#define TARGET_DWARF_CALLING_CONVENTION hook_int_tree_0\n+#define TARGET_DWARF_CALLING_CONVENTION hook_int_const_tree_0\n \n #define TARGET_DWARF_HANDLE_FRAME_UNSPEC 0\n "}, {"sha": "e6cb8322e09c87e7437a96990e8f33a17da8e522", "filename": "gcc/target.h", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -208,9 +208,9 @@ struct gcc_target\n        too much undo-able setup involved in invoking output_mi_thunk.\n        Could be fixed by making output_mi_thunk emit rtl instead of\n        text to the output file.  */\n-    bool (* can_output_mi_thunk) (tree thunk_decl, HOST_WIDE_INT delta,\n+    bool (* can_output_mi_thunk) (const_tree thunk_decl, HOST_WIDE_INT delta,\n \t\t\t\t  HOST_WIDE_INT vcall_offset,\n-\t\t\t\t  tree function_decl);\n+\t\t\t\t  const_tree function_decl);\n \n     /* Output any boilerplate text needed at the beginning of a\n        translation unit.  */\n@@ -373,7 +373,7 @@ struct gcc_target\n        by the insn scheduler.  It should return true if the check instruction\n        corresponding to the instruction passed as the parameter needs a\n        recovery block.  */\n-    bool (* needs_block_p) (rtx);\n+    bool (* needs_block_p) (const_rtx);\n \n     /* The following member value is a pointer to a function called\n        by the insn scheduler.  It should return a pattern for the check\n@@ -391,7 +391,7 @@ struct gcc_target\n        passed as the parameter, the insn will not be chosen to be\n        issued.  This hook is used to discard speculative instructions,\n        that stand at the first position of the ready list.  */\n-    bool (* first_cycle_multipass_dfa_lookahead_guard_spec) (rtx);\n+    bool (* first_cycle_multipass_dfa_lookahead_guard_spec) (const_rtx);\n \n     /* The following member value is a pointer to a function that provides\n        information about the speculation capabilities of the target.\n@@ -428,7 +428,7 @@ struct gcc_target\n \n     /* Return true if vector alignment is reachable (by peeling N\n        iterations) for the given type.  */\n-    bool (* vector_alignment_reachable) (tree, bool);\n+    bool (* vector_alignment_reachable) (const_tree, bool);\n   } vectorize;\n \n   /* The initial value of target_flags.  */\n@@ -467,7 +467,7 @@ struct gcc_target\n   /* Return zero if the attributes on TYPE1 and TYPE2 are incompatible,\n      one if they are compatible and two if they are nearly compatible\n      (which causes a warning to be generated).  */\n-  int (* comp_type_attributes) (tree type1, tree type2);\n+  int (* comp_type_attributes) (const_tree type1, const_tree type2);\n \n   /* Assign default attributes to the newly defined TYPE.  */\n   void (* set_default_type_attributes) (tree type);\n@@ -477,11 +477,11 @@ struct gcc_target\n \n   /* Return true if FNDECL (which has at least one machine attribute)\n      can be inlined despite its machine attributes, false otherwise.  */\n-  bool (* function_attribute_inlinable_p) (tree fndecl);\n+  bool (* function_attribute_inlinable_p) (const_tree fndecl);\n \n   /* Return true if bitfields in RECORD_TYPE should follow the\n      Microsoft Visual C++ bitfield layout rules.  */\n-  bool (* ms_bitfield_layout_p) (tree record_type);\n+  bool (* ms_bitfield_layout_p) (const_tree record_type);\n \n   /* True if the target supports decimal floating point.  */\n   bool (* decimal_float_supported_p) (void);\n@@ -519,7 +519,7 @@ struct gcc_target\n   /* For a vendor-specific TYPE, return a pointer to a statically-allocated\n      string containing the C++ mangling for TYPE.  In all other cases, return\n      NULL.  */\n-  const char * (* mangle_type) (tree type);\n+  const char * (* mangle_type) (const_tree type);\n \n   /* Make any adjustments to libfunc names needed for this target.  */\n   void (* init_libfuncs) (void);\n@@ -550,32 +550,32 @@ struct gcc_target\n   bool (* cannot_copy_insn_p) (rtx);\n \n   /* True if X is considered to be commutative.  */\n-  bool (* commutative_p) (rtx, int);\n+  bool (* commutative_p) (const_rtx, int);\n \n   /* Given an address RTX, undo the effects of LEGITIMIZE_ADDRESS.  */\n   rtx (* delegitimize_address) (rtx);\n \n   /* True if the given constant can be put into an object_block.  */\n-  bool (* use_blocks_for_constant_p) (enum machine_mode, rtx);\n+  bool (* use_blocks_for_constant_p) (enum machine_mode, const_rtx);\n \n   /* The minimum and maximum byte offsets for anchored addresses.  */\n   HOST_WIDE_INT min_anchor_offset;\n   HOST_WIDE_INT max_anchor_offset;\n \n   /* True if section anchors can be used to access the given symbol.  */\n-  bool (* use_anchors_for_symbol_p) (rtx);\n+  bool (* use_anchors_for_symbol_p) (const_rtx);\n \n   /* True if it is OK to do sibling call optimization for the specified\n      call expression EXP.  DECL will be the called function, or NULL if\n      this is an indirect call.  */\n   bool (*function_ok_for_sibcall) (tree decl, tree exp);\n \n   /* True if EXP should be placed in a \"small data\" section.  */\n-  bool (* in_small_data_p) (tree);\n+  bool (* in_small_data_p) (const_tree);\n \n   /* True if EXP names an object for which name resolution must resolve\n      to the current module.  */\n-  bool (* binds_local_p) (tree);\n+  bool (* binds_local_p) (const_tree);\n \n   /* Modify and return the identifier of a DECL's external name,\n      originally identified by ID, as required by the target,\n@@ -621,7 +621,7 @@ struct gcc_target\n   bool (* vector_mode_supported_p) (enum machine_mode mode);\n \n   /* True if a vector is opaque.  */\n-  bool (* vector_opaque_p) (tree);\n+  bool (* vector_opaque_p) (const_tree);\n \n   /* Compute a (partial) cost for rtx X.  Return true if the complete\n      cost has been computed, and false if subexpressions should be\n@@ -712,7 +712,7 @@ struct gcc_target\n      enum dwarf_calling_convention, but because of forward declarations\n      and not wanting to include dwarf2.h everywhere target.h is included\n      the function is being declared as an int.  */\n-  int (* dwarf_calling_convention) (tree);\n+  int (* dwarf_calling_convention) (const_tree);\n \n   /* This target hook allows the backend to emit frame-related insns that\n      contain UNSPECs or UNSPEC_VOLATILEs.  The call frame debugging info\n@@ -727,7 +727,7 @@ struct gcc_target\n      from VA_ARG_EXPR.  LHS is left hand side of MODIFY_EXPR, RHS\n      is right hand side.  Returns true if the statements doesn't need\n      to be checked for va_list references.  */\n-  bool (* stdarg_optimize_hook) (struct stdarg_info *ai, tree lhs, tree rhs);\n+  bool (* stdarg_optimize_hook) (struct stdarg_info *ai, const_tree lhs, const_tree rhs);\n \n   /* This target hook allows the operating system to override the DECL\n      that represents the external variable that contains the stack\n@@ -740,12 +740,12 @@ struct gcc_target\n \n   /* Returns NULL if target supports the insn within a doloop block,\n      otherwise it returns an error message.  */\n-  const char * (*invalid_within_doloop) (rtx);\n+  const char * (*invalid_within_doloop) (const_rtx);\n \n   /* DECL is a variable or function with __attribute__((dllimport))\n      specified.  Use this hook if the target needs to add extra validation\n      checks to  handle_dll_attribute ().  */\n-  bool (* valid_dllimport_attribute_p) (tree decl);\n+  bool (* valid_dllimport_attribute_p) (const_tree decl);\n \n   /* Functions relating to calls - argument passing, returns, etc.  */\n   struct calls {\n@@ -775,7 +775,7 @@ struct gcc_target\n \n     /* Given a complex type T, return true if a parameter of type T\n        should be passed as two scalars.  */\n-    bool (* split_complex_arg) (tree type);\n+    bool (* split_complex_arg) (const_tree type);\n \n     /* Return true if type T, mode MODE, may not be passed in registers,\n        but must be passed on the stack.  */\n@@ -797,8 +797,9 @@ struct gcc_target\n \n     /* Return the diagnostic message string if function without a prototype\n        is not allowed for this 'val' argument; NULL otherwise. */\n-    const char *(*invalid_arg_for_unprototyped_fn) (tree typelist,\n-\t\t\t\t\t     \t    tree funcdecl, tree val);\n+    const char *(*invalid_arg_for_unprototyped_fn) (const_tree typelist,\n+\t\t\t\t\t     \t    const_tree funcdecl,\n+\t\t\t\t\t\t    const_tree val);\n \n     /* Return an rtx for the return value location of the function\n        specified by FN_DECL_OR_TYPE with a return type of RET_TYPE.  */\n@@ -812,15 +813,15 @@ struct gcc_target\n \n   /* Return the diagnostic message string if conversion from FROMTYPE\n      to TOTYPE is not allowed, NULL otherwise.  */\n-  const char *(*invalid_conversion) (tree fromtype, tree totype);\n+  const char *(*invalid_conversion) (const_tree fromtype, const_tree totype);\n \n   /* Return the diagnostic message string if the unary operation OP is\n      not permitted on TYPE, NULL otherwise.  */\n-  const char *(*invalid_unary_op) (int op, tree type);\n+  const char *(*invalid_unary_op) (int op, const_tree type);\n \n   /* Return the diagnostic message string if the binary operation OP\n      is not permitted on TYPE1 and TYPE2, NULL otherwise.  */\n-  const char *(*invalid_binary_op) (int op, tree type1, tree type2);\n+  const char *(*invalid_binary_op) (int op, const_tree type1, const_tree type2);\n \n   /* Return the class for a secondary reload, and fill in extra information.  */\n   enum reg_class (*secondary_reload) (bool, rtx, enum reg_class,"}, {"sha": "b4469403c53980b6c50d25fa4c3f26ca9f417cea", "filename": "gcc/targhooks.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -336,7 +336,7 @@ default_fixed_point_supported_p (void)\n    these cases.  */\n \n const char *\n-default_invalid_within_doloop (rtx insn)\n+default_invalid_within_doloop (const_rtx insn)\n {\n   if (CALL_P (insn))\n     return \"Function call in loop.\";\n@@ -412,9 +412,9 @@ hook_void_bitmap (bitmap regs ATTRIBUTE_UNUSED)\n \n const char *\n hook_invalid_arg_for_unprototyped_fn (\n-\ttree typelist ATTRIBUTE_UNUSED,\n-\ttree funcdecl ATTRIBUTE_UNUSED,\n-\ttree val ATTRIBUTE_UNUSED)\n+\tconst_tree typelist ATTRIBUTE_UNUSED,\n+\tconst_tree funcdecl ATTRIBUTE_UNUSED,\n+\tconst_tree val ATTRIBUTE_UNUSED)\n {\n   return NULL;\n }\n@@ -510,7 +510,8 @@ default_hidden_stack_protect_fail (void)\n }\n \n bool\n-hook_bool_rtx_commutative_p (rtx x, int outer_code ATTRIBUTE_UNUSED)\n+hook_bool_const_rtx_commutative_p (const_rtx x,\n+\t\t\t\t   int outer_code ATTRIBUTE_UNUSED)\n {\n   return COMMUTATIVE_P (x);\n }\n@@ -665,7 +666,7 @@ tree default_mangle_decl_assembler_name (tree decl ATTRIBUTE_UNUSED,\n }\n \n bool\n-default_builtin_vector_alignment_reachable (tree type, bool is_packed)\n+default_builtin_vector_alignment_reachable (const_tree type, bool is_packed)\n {\n   if (is_packed)\n     return false;"}, {"sha": "62d4ea4d748e5692ff5892dd10ad69ef5ea4d213", "filename": "gcc/targhooks.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -57,7 +57,7 @@ extern bool default_scalar_mode_supported_p (enum machine_mode);\n extern bool default_decimal_float_supported_p (void);\n extern bool default_fixed_point_supported_p (void);\n \n-extern const char * default_invalid_within_doloop (rtx);\n+extern const char * default_invalid_within_doloop (const_rtx);\n \n extern tree default_builtin_vectorized_function\n   (enum built_in_function, tree, tree);\n@@ -66,7 +66,7 @@ extern tree default_builtin_vectorized_conversion (enum tree_code, tree);\n \n extern tree default_builtin_reciprocal (enum built_in_function, bool, bool);\n \n-extern bool default_builtin_vector_alignment_reachable (tree, bool);\n+extern bool default_builtin_vector_alignment_reachable (const_tree, bool);\n \n /* These are here, and not in hooks.[ch], because not all users of\n    hooks.h include tm.h, and thus we don't have CUMULATIVE_ARGS.  */\n@@ -81,8 +81,8 @@ extern bool hook_bool_CUMULATIVE_ARGS_mode_tree_bool_true\n extern int hook_int_CUMULATIVE_ARGS_mode_tree_bool_0\n   (CUMULATIVE_ARGS *, enum machine_mode, tree, bool);\n extern const char *hook_invalid_arg_for_unprototyped_fn\n-  (tree, tree, tree);\n-extern bool hook_bool_rtx_commutative_p (rtx, int);\n+  (const_tree, const_tree, const_tree);\n+extern bool hook_bool_const_rtx_commutative_p (const_rtx, int);\n extern rtx default_function_value (const_tree, const_tree, bool);\n extern rtx default_internal_arg_pointer (void);\n extern enum reg_class default_secondary_reload (bool, rtx, enum reg_class,"}, {"sha": "29e6649db0af3c0d76d487c635e00b07c19381b4", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3101faab4620ad49753a2ec8a33e08ee9f8c0bcb/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=3101faab4620ad49753a2ec8a33e08ee9f8c0bcb", "patch": "@@ -1056,7 +1056,7 @@ decode_reg_name (const char *asmspec)\n /* Return true if DECL's initializer is suitable for a BSS section.  */\n \n static bool\n-bss_initializer_p (tree decl)\n+bss_initializer_p (const_tree decl)\n {\n   return (DECL_INITIAL (decl) == NULL\n \t  || DECL_INITIAL (decl) == error_mark_node\n@@ -5544,7 +5544,7 @@ init_varasm_once (void)\n }\n \n enum tls_model\n-decl_default_tls_model (tree decl)\n+decl_default_tls_model (const_tree decl)\n {\n   enum tls_model kind;\n   bool is_local;\n@@ -5784,7 +5784,7 @@ default_select_section (tree decl, int reloc,\n }\n \n enum section_category\n-categorize_decl_for_section (tree decl, int reloc)\n+categorize_decl_for_section (const_tree decl, int reloc)\n {\n   enum section_category ret;\n \n@@ -5866,7 +5866,7 @@ categorize_decl_for_section (tree decl, int reloc)\n }\n \n bool\n-decl_readonly_section (tree decl, int reloc)\n+decl_readonly_section (const_tree decl, int reloc)\n {\n   switch (categorize_decl_for_section (decl, reloc))\n     {\n@@ -6154,7 +6154,7 @@ default_asm_output_anchor (rtx symbol)\n /* The default implementation of TARGET_USE_ANCHORS_FOR_SYMBOL_P.  */\n \n bool\n-default_use_anchors_for_symbol_p (rtx symbol)\n+default_use_anchors_for_symbol_p (const_rtx symbol)\n {\n   section *sect;\n   tree decl;\n@@ -6193,13 +6193,13 @@ default_use_anchors_for_symbol_p (rtx symbol)\n    wrt cross-module name binding.  */\n \n bool\n-default_binds_local_p (tree exp)\n+default_binds_local_p (const_tree exp)\n {\n   return default_binds_local_p_1 (exp, flag_shlib);\n }\n \n bool\n-default_binds_local_p_1 (tree exp, int shlib)\n+default_binds_local_p_1 (const_tree exp, int shlib)\n {\n   bool local_p;\n "}]}