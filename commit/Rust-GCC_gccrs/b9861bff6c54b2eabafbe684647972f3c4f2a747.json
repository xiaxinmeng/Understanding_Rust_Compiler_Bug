{"sha": "b9861bff6c54b2eabafbe684647972f3c4f2a747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4NjFiZmY2YzU0YjJlYWJhZmJlNjg0NjQ3OTcyZjNjNGYyYTc0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-06-20T17:16:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-06-20T17:16:27Z"}, "message": "stmt.c (warn_if_unused_value): Add locus argument.\n\n        * stmt.c (warn_if_unused_value): Add locus argument.\n        * tree.h (warn_if_unused_value): Update decl.\n        * c-typeck.c (internal_build_compound_expr): Update call.\n        * c-gimplify.c (gimplify_expr_stmt): Likewise.\n\nFrom-SVN: r83416", "tree": {"sha": "ed8b5243c2eb8d695f4aecb713b9176aeb3cafe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed8b5243c2eb8d695f4aecb713b9176aeb3cafe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9861bff6c54b2eabafbe684647972f3c4f2a747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9861bff6c54b2eabafbe684647972f3c4f2a747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9861bff6c54b2eabafbe684647972f3c4f2a747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9861bff6c54b2eabafbe684647972f3c4f2a747/comments", "author": null, "committer": null, "parents": [{"sha": "9127884102347420f8185b819c137610b7e51126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9127884102347420f8185b819c137610b7e51126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9127884102347420f8185b819c137610b7e51126"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "8d02e2b387c007057c747a8cf6ec203b71e405f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9861bff6c54b2eabafbe684647972f3c4f2a747", "patch": "@@ -1,3 +1,10 @@\n+2004-06-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* stmt.c (warn_if_unused_value): Add locus argument.\n+\t* tree.h (warn_if_unused_value): Update decl.\n+\t* c-typeck.c (internal_build_compound_expr): Update call.\n+\t* c-gimplify.c (gimplify_expr_stmt): Likewise.\n+\n 2004-06-20  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/16089"}, {"sha": "9259923794f0c2fa545f1399af250591bbd01ec7", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=b9861bff6c54b2eabafbe684647972f3c4f2a747", "patch": "@@ -239,12 +239,7 @@ gimplify_expr_stmt (tree *stmt_p)\n \t    warning (\"statement with no effect\");\n \t}\n       else if (warn_unused_value)\n-\t{\n-\t  /* Kludge for 20020220-2.c.  warn_if_unused_value shouldn't use\n-\t     the stmt file location info.  */\n-\t  set_file_and_line_for_stmt (input_location);\n-\t  warn_if_unused_value (stmt);\n-\t}\n+\twarn_if_unused_value (stmt, input_location);\n     }\n \n   if (stmt == NULL_TREE)"}, {"sha": "99bb78d7c1d75fb8fbe07f203d6483f78db16209", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b9861bff6c54b2eabafbe684647972f3c4f2a747", "patch": "@@ -2949,7 +2949,7 @@ internal_build_compound_expr (tree list, int first_p)\n      `foo() + bar(), baz()' the result of the `+' operator is not used,\n      so we should issue a warning.  */\n   else if (warn_unused_value)\n-    warn_if_unused_value (TREE_VALUE (list));\n+    warn_if_unused_value (TREE_VALUE (list), input_location);\n \n   return build (COMPOUND_EXPR, TREE_TYPE (rest), TREE_VALUE (list), rest);\n }"}, {"sha": "4d878e3b081385acf08870e31000f56f727e045b", "filename": "gcc/stmt.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b9861bff6c54b2eabafbe684647972f3c4f2a747", "patch": "@@ -2097,7 +2097,7 @@ expand_expr_stmt_value (tree exp, int want_value, int maybe_last)\n       && warn_unused_value)\n     {\n       if (TREE_SIDE_EFFECTS (exp))\n-\twarn_if_unused_value (exp);\n+\twarn_if_unused_value (exp, emit_locus);\n       else if (!VOID_TYPE_P (TREE_TYPE (exp)) && !TREE_NO_WARNING (exp))\n \twarning (\"%Hstatement with no effect\", &emit_locus);\n     }\n@@ -2155,11 +2155,13 @@ expand_expr_stmt_value (tree exp, int want_value, int maybe_last)\n }\n \n /* Warn if EXP contains any computations whose results are not used.\n-   Return 1 if a warning is printed; 0 otherwise.  */\n+   Return 1 if a warning is printed; 0 otherwise.  LOCUS is the \n+   (potential) location of the expression.  */\n \n int\n-warn_if_unused_value (tree exp)\n+warn_if_unused_value (tree exp, location_t locus)\n {\n+ restart:\n   if (TREE_USED (exp))\n     return 0;\n \n@@ -2169,6 +2171,9 @@ warn_if_unused_value (tree exp)\n   if (VOID_TYPE_P (TREE_TYPE (exp)))\n     return 0;\n \n+  if (EXPR_LOCUS (exp))\n+    locus = *EXPR_LOCUS (exp);\n+\n   switch (TREE_CODE (exp))\n     {\n     case PREINCREMENT_EXPR:\n@@ -2187,25 +2192,29 @@ warn_if_unused_value (tree exp)\n \n     case BIND_EXPR:\n       /* For a binding, warn if no side effect within it.  */\n-      return warn_if_unused_value (TREE_OPERAND (exp, 1));\n+      exp = BIND_EXPR_BODY (exp);\n+      goto restart;\n \n     case SAVE_EXPR:\n-      return warn_if_unused_value (TREE_OPERAND (exp, 0));\n+      exp = TREE_OPERAND (exp, 0);\n+      goto restart;\n \n     case TRUTH_ORIF_EXPR:\n     case TRUTH_ANDIF_EXPR:\n       /* In && or ||, warn if 2nd operand has no side effect.  */\n-      return warn_if_unused_value (TREE_OPERAND (exp, 1));\n+      exp = TREE_OPERAND (exp, 1);\n+      goto restart;\n \n     case COMPOUND_EXPR:\n       if (TREE_NO_WARNING (exp))\n \treturn 0;\n-      if (warn_if_unused_value (TREE_OPERAND (exp, 0)))\n+      if (warn_if_unused_value (TREE_OPERAND (exp, 0), locus))\n \treturn 1;\n       /* Let people do `(foo (), 0)' without a warning.  */\n       if (TREE_CONSTANT (TREE_OPERAND (exp, 1)))\n \treturn 0;\n-      return warn_if_unused_value (TREE_OPERAND (exp, 1));\n+      exp = TREE_OPERAND (exp, 1);\n+      goto restart;\n \n     case NOP_EXPR:\n     case CONVERT_EXPR:\n@@ -2233,7 +2242,10 @@ warn_if_unused_value (tree exp)\n       /* Don't warn about automatic dereferencing of references, since\n \t the user cannot control it.  */\n       if (TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == REFERENCE_TYPE)\n-\treturn warn_if_unused_value (TREE_OPERAND (exp, 0));\n+\t{\n+\t  exp = TREE_OPERAND (exp, 0);\n+\t  goto restart;\n+\t}\n       /* Fall through.  */\n \n     default:\n@@ -2255,7 +2267,7 @@ warn_if_unused_value (tree exp)\n       if (TREE_SIDE_EFFECTS (exp))\n \treturn 0;\n \n-      warning (\"%Hvalue computed is not used\", &emit_locus);\n+      warning (\"%Hvalue computed is not used\", &locus);\n       return 1;\n     }\n }"}, {"sha": "d5d87b69d655959a9a653d64822f9394e483aa53", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9861bff6c54b2eabafbe684647972f3c4f2a747/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=b9861bff6c54b2eabafbe684647972f3c4f2a747", "patch": "@@ -3240,7 +3240,7 @@ extern tree expand_start_stmt_expr (int);\n extern tree expand_end_stmt_expr (tree);\n extern void expand_expr_stmt (tree);\n extern void expand_expr_stmt_value (tree, int, int);\n-extern int warn_if_unused_value (tree);\n+extern int warn_if_unused_value (tree, location_t);\n extern void expand_decl_init (tree);\n extern void clear_last_expr (void);\n extern void expand_label (tree);"}]}