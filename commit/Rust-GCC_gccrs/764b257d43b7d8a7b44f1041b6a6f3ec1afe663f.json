{"sha": "764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY0YjI1N2Q0M2I3ZDhhN2I0NGYxMDQxYjZhNmYzZWMxYWZlNjYzZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-05-07T14:36:11Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-05-07T14:36:11Z"}, "message": "i386.md (*addqi_1): Add preferred_for_speed attribute to disparage alternatives 3 and 4 for...\n\n\t* config/i386/i386.md (*addqi_1): Add preferred_for_speed attribute\n\tto disparage alternatives 3 and 4 for TARGET_PARTIAL_REG_STALL targets.\n\t(*andqi_1): Add preferred_for_speed attribute to disparage\n\talternative 2 for TARGET_PARTIAL_REG_STALL targets.\n\t(*<code>qi_1): Ditto.\n\t(*one_cmplqi2_1): Add preferred_for_speed attribute to disparage\n\talternative 1 for TARGET_PARTIAL_REG_STALL targets.\n\t(*ashlqi3_1): Ditto.\n\t(*swap<mode>): Merge from *swap<mode>_1 and *swap<mode>_2 patterns.\n\tAdd preferred_for_size attribute to disparage alternative 0 and\n\tpreferred_for_speed attribute to disparage alternative 1 for\n\tTARGET_PARTIAL_REG_STALL targets.\n\nFrom-SVN: r235996", "tree": {"sha": "0fbec96de2e26107747cd7678085a840148265a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fbec96de2e26107747cd7678085a840148265a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ec4a8cd76196b82dfa1b6e16b6646e6342c969f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ec4a8cd76196b82dfa1b6e16b6646e6342c969f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ec4a8cd76196b82dfa1b6e16b6646e6342c969f"}], "stats": {"total": 94, "additions": 63, "deletions": 31}, "files": [{"sha": "6626ba4a083dee17050dd92f68182062d7668306", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "patch": "@@ -1,3 +1,18 @@\n+2016-05-07  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*addqi_1): Add preferred_for_speed attribute\n+\tto disparage alternatives 3 and 4 for TARGET_PARTIAL_REG_STALL targets.\n+\t(*andqi_1): Add preferred_for_speed attribute to disparage\n+\talternative 2 for TARGET_PARTIAL_REG_STALL targets.\n+\t(*<code>qi_1): Ditto.\n+\t(*one_cmplqi2_1): Add preferred_for_speed attribute to disparage\n+\talternative 1 for TARGET_PARTIAL_REG_STALL targets.\n+\t(*ashlqi3_1): Ditto.\n+\t(*swap<mode>): Merge from *swap<mode>_1 and *swap<mode>_2 patterns.\n+\tAdd preferred_for_size attribute to disparage alternative 0 and\n+\tpreferred_for_speed attribute to disparage alternative 1 for\n+\tTARGET_PARTIAL_REG_STALL targets.\n+\n 2016-05-07  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/70956"}, {"sha": "52b0775703e13a9cf7282089c06a29d59e71aeae", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "patch": "@@ -2699,34 +2699,31 @@\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n-(define_insn \"*swap<mode>_1\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"+r\")\n-\t(match_operand:SWI12 1 \"register_operand\" \"+r\"))\n+(define_insn \"*swap<mode>\"\n+  [(set (match_operand:SWI12 0 \"register_operand\" \"+<r>,r\")\n+\t(match_operand:SWI12 1 \"register_operand\" \"+<r>,r\"))\n    (set (match_dup 1)\n \t(match_dup 0))]\n-  \"!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun)\"\n-  \"xchg{l}\\t%k1, %k0\"\n+  \"\"\n+  \"@\n+   xchg{<imodesuffix>}\\t%1, %0\n+   xchg{l}\\t%k1, %k0\"\n   [(set_attr \"type\" \"imov\")\n-   (set_attr \"mode\" \"SI\")\n+   (set_attr \"mode\" \"<MODE>,SI\")\n+   (set (attr \"preferred_for_size\")\n+     (cond [(eq_attr \"alternative\" \"0\")\n+\t      (symbol_ref \"false\")]\n+\t   (symbol_ref \"true\")))\n+   ;; Potential partial reg stall on alternative 1.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))\n    (set_attr \"pent_pair\" \"np\")\n    (set_attr \"athlon_decode\" \"vector\")\n    (set_attr \"amdfam10_decode\" \"double\")\n    (set_attr \"bdver1_decode\" \"double\")])\n \n-;; Not added amdfam10_decode since TARGET_PARTIAL_REG_STALL\n-;; is disabled for AMDFAM10\n-(define_insn \"*swap<mode>_2\"\n-  [(set (match_operand:SWI12 0 \"register_operand\" \"+<r>\")\n-\t(match_operand:SWI12 1 \"register_operand\" \"+<r>\"))\n-   (set (match_dup 1)\n-\t(match_dup 0))]\n-  \"TARGET_PARTIAL_REG_STALL\"\n-  \"xchg{<imodesuffix>}\\t%1, %0\"\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"mode\" \"<MODE>\")\n-   (set_attr \"pent_pair\" \"np\")\n-   (set_attr \"athlon_decode\" \"vector\")])\n-\n (define_expand \"movstrict<mode>\"\n   [(set (strict_low_part (match_operand:SWI12 0 \"nonimmediate_operand\"))\n \t(match_operand:SWI12 1 \"general_operand\"))]\n@@ -5607,15 +5604,14 @@\n \t(const_string \"*\")))\n    (set_attr \"mode\" \"HI,HI,HI,SI\")])\n \n-;; %%% Potential partial reg stall on alternatives 3 and 4.  What to do?\n (define_insn \"*addqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,q,r,r,Yp\")\n \t(plus:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,q,0,r,Yp\")\n \t\t (match_operand:QI 2 \"general_operand\" \"qn,qm,0,rn,0,ln\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (PLUS, QImode, operands)\"\n {\n-  bool widen = (which_alternative == 3 || which_alternative == 4);\n+  bool widen = (get_attr_mode (insn) != MODE_QI);\n \n   switch (get_attr_type (insn))\n     {\n@@ -5664,7 +5660,12 @@\n \t(and (eq_attr \"type\" \"alu\") (match_operand 2 \"const128_operand\"))\n \t(const_string \"1\")\n \t(const_string \"*\")))\n-   (set_attr \"mode\" \"QI,QI,QI,SI,SI,SI\")])\n+   (set_attr \"mode\" \"QI,QI,QI,SI,SI,SI\")\n+   ;; Potential partial reg stall on alternatives 3 and 4.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"3,4\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*addqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n@@ -8215,7 +8216,6 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"HI,HI,SI,HI\")])\n \n-;; %%% Potential partial reg stall on alternative 2.  What to do?\n (define_insn \"*andqi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,q,r,!k\")\n \t(and:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n@@ -8238,7 +8238,12 @@\n     }\n }\n   [(set_attr \"type\" \"alu,alu,alu,msklog\")\n-   (set_attr \"mode\" \"QI,QI,SI,HI\")])\n+   (set_attr \"mode\" \"QI,QI,SI,HI\")\n+   ;; Potential partial reg stall on alternative 2.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*andqi_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm,q\"))\n@@ -8723,7 +8728,6 @@\n   [(set_attr \"type\" \"alu,alu,msklog\")\n    (set_attr \"mode\" \"HI\")])\n \n-;; %%% Potential partial reg stall on alternative 2.  What to do?\n (define_insn \"*<code>qi_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,m,r,!k\")\n \t(any_or:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0,k\")\n@@ -8736,7 +8740,12 @@\n    <logic>{l}\\t{%k2, %k0|%k0, %k2}\n    k<logic>w\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"alu,alu,alu,msklog\")\n-   (set_attr \"mode\" \"QI,QI,SI,HI\")])\n+   (set_attr \"mode\" \"QI,QI,SI,HI\")\n+   ;; Potential partial reg stall on alternative 2.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))])\n \n ;; See comment for addsi_1_zext why we do use nonimmediate_operand\n (define_insn \"*<code>si_1_zext\"\n@@ -9513,7 +9522,6 @@\n    (set_attr \"prefix\" \"*,vex\")\n    (set_attr \"mode\" \"HI\")])\n \n-;; %%% Potential partial reg stall on alternative 1.  What to do?\n (define_insn \"*one_cmplqi2_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,!k\")\n \t(not:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,k\")))]\n@@ -9536,7 +9544,12 @@\n   [(set_attr \"isa\" \"*,*,avx512f\")\n    (set_attr \"type\" \"negnot,negnot,msklog\")\n    (set_attr \"prefix\" \"*,*,vex\")\n-   (set_attr \"mode\" \"QI,SI,QI\")])\n+   (set_attr \"mode\" \"QI,SI,QI\")\n+   ;; Potential partial reg stall on alternative 1.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))])\n \n ;; ??? Currently never generated - xor is used instead.\n (define_insn \"*one_cmplsi2_1_zext\"\n@@ -9955,7 +9968,6 @@\n        (const_string \"*\")))\n    (set_attr \"mode\" \"HI,SI\")])\n \n-;; %%% Potential partial reg stall on alternative 1.  What to do?\n (define_insn \"*ashlqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,r,Yp\")\n \t(ashift:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0,l\")\n@@ -10011,7 +10023,12 @@\n \t\t\t   (match_test \"optimize_function_for_size_p (cfun)\")))))\n        (const_string \"0\")\n        (const_string \"*\")))\n-   (set_attr \"mode\" \"QI,SI,SI\")])\n+   (set_attr \"mode\" \"QI,SI,SI\")\n+   ;; Potential partial reg stall on alternative 1.\n+   (set (attr \"preferred_for_speed\")\n+     (cond [(eq_attr \"alternative\" \"1\")\n+\t      (symbol_ref \"!TARGET_PARTIAL_REG_STALL\")]\n+\t   (symbol_ref \"true\")))])\n \n (define_insn \"*ashlqi3_1_slp\"\n   [(set (strict_low_part (match_operand:QI 0 \"nonimmediate_operand\" \"+qm\"))"}]}