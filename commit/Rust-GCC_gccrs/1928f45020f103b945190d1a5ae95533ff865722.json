{"sha": "1928f45020f103b945190d1a5ae95533ff865722", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkyOGY0NTAyMGYxMDNiOTQ1MTkwZDFhNWFlOTU1MzNmZjg2NTcyMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T15:47:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-11T15:47:23Z"}, "message": "[multiple changes]\n\n2010-10-11  Robert Dewar  <dewar@adacore.com>\n\n\t* debug.adb: Remove d.A flag to delay address clause (not needed any\n\tmore). Add d.A flag to enable tree read/write of aspect spec hash table\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Properly delay address\n\tclause.\n\t(Rep_Item_Too_Late): No need for special processing for delayed rep\n\titems (and it caused difficulties in the address case).\n\t* tree_gen.adb: Only write aspect spec hash table if -gnatd.A is set\n\t* tree_in.adb: Only write aspect spec hash table if -gnatd.A is set\n\n2010-10-11  Pat Rogers  <rogers@adacore.com>\n\n\t* gnat_ugn.texi: Minor editing.\n\nFrom-SVN: r165316", "tree": {"sha": "444ab818bb867feee7661eee1e4537161e9429f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/444ab818bb867feee7661eee1e4537161e9429f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1928f45020f103b945190d1a5ae95533ff865722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1928f45020f103b945190d1a5ae95533ff865722", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1928f45020f103b945190d1a5ae95533ff865722", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1928f45020f103b945190d1a5ae95533ff865722/comments", "author": null, "committer": null, "parents": [{"sha": "40b7ae584b92e8bbeba399490a11db54f1fa4ff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40b7ae584b92e8bbeba399490a11db54f1fa4ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40b7ae584b92e8bbeba399490a11db54f1fa4ff1"}], "stats": {"total": 111, "additions": 49, "deletions": 62}, "files": [{"sha": "89ee482d598b2d2b549fc88e80f18f7ed9b3f71a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -1,3 +1,18 @@\n+2010-10-11  Robert Dewar  <dewar@adacore.com>\n+\n+\t* debug.adb: Remove d.A flag to delay address clause (not needed any\n+\tmore). Add d.A flag to enable tree read/write of aspect spec hash table\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Properly delay address\n+\tclause.\n+\t(Rep_Item_Too_Late): No need for special processing for delayed rep\n+\titems (and it caused difficulties in the address case).\n+\t* tree_gen.adb: Only write aspect spec hash table if -gnatd.A is set\n+\t* tree_in.adb: Only write aspect spec hash table if -gnatd.A is set\n+\n+2010-10-11  Pat Rogers  <rogers@adacore.com>\n+\n+\t* gnat_ugn.texi: Minor editing.\n+\n 2010-10-11  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* gcc-interface/utils2.c (gnat_build_constructor): Use VEC_qsort."}, {"sha": "4abd1f513eb25fd4396208f3aa923578a522ef88", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -118,7 +118,7 @@ package body Debug is\n    --  d.y\n    --  d.z\n \n-   --  d.A  Properly defer address aspect\n+   --  d.A  Read/write Aspect_Specifications hash table to tree\n    --  d.B\n    --  d.C  Generate concatenation call, do not generate inline code\n    --  d.D\n@@ -558,11 +558,10 @@ package body Debug is\n    --  d.w  This flag turns off the scanning of loops to detect possible\n    --       infinite loops.\n \n-   --  d.A  Properly defer address aspect. In the case where the expression\n-   --       of an address aspect is non-static, we should defer the evaluation\n-   --       of the expression till the freeze point, but this does not seem to\n-   --       work properly. So we have this debug switch temporarily so that we\n-   --       can easily investigate this problem.\n+   --  d.A  There seems to be a problem with ASIS if we activate the circuit\n+   --       for reading and writing the aspect specification hash table, so\n+   --       for now, this is controlled by the debug flag d.A. The hash table\n+   --       is only written and read if this flag is set.\n \n    --  d.x  No exception handlers in generated code. This causes exception\n    --       handlers to be eliminated from the generated code. They are still"}, {"sha": "0610735d1605e32200b0270ed21fc9c9601bfe9f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -5048,9 +5048,9 @@ gnat_rm, GNAT Reference manual}.\n @table @option\n @c !sort!\n @item -gnatwa\n-@emph{Activate all optional errors.}\n+@emph{Activate most optional warnings.}\n @cindex @option{-gnatwa} (@command{gcc})\n-This switch activates most optional warning messages, see remaining list\n+This switch activates most optional warning messages.  See the remaining list\n in this section for details on optional warning messages that can be\n individually controlled.  The warnings that are not turned on by this\n switch are\n@@ -10409,11 +10409,11 @@ subprograms.\n @item\n @cindex pragma Inline\n @findex Inline\n-Either @code{pragma Inline} applies to the subprogram and the\n-@option{^-gnatn^/INLINE^} switch is used on the command line, or it is local\n-to the unit and called once from within it, or it is small and optimization\n-level @option{-O2} is specified, or automatic inlining (optimization level\n-@option{-O3}) is specified.\n+Any one of the following applies: @code{pragma Inline} is applied to the\n+subprogram and the @option{^-gnatn^/INLINE^} switch is specified; the\n+subprogram is local to the unit and called once from within it; the\n+subprogram is small and optimization level @option{-O2} is specified;\n+optimization level @option{-O3}) is specified.\n @end itemize\n \n @noindent"}, {"sha": "71966d879373a0a20793336f95d5113bc78be771", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 47, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -26,7 +26,6 @@\n with Aspects;  use Aspects;\n with Atree;    use Atree;\n with Checks;   use Checks;\n-with Debug;    use Debug;\n with Einfo;    use Einfo;\n with Elists;   use Elists;\n with Errout;   use Errout;\n@@ -765,7 +764,8 @@ package body Sem_Ch13 is\n                --  Aspects corresponding to attribute definition clauses with\n                --  the exception of Address which is treated specially.\n \n-               when Aspect_Alignment      |\n+               when Aspect_Address        |\n+                    Aspect_Alignment      |\n                     Aspect_Bit_Order      |\n                     Aspect_Component_Size |\n                     Aspect_External_Tag   |\n@@ -780,6 +780,8 @@ package body Sem_Ch13 is\n                   --  Preanalyze the expression with the appropriate type\n \n                   case A_Id is\n+                     when Aspect_Address      =>\n+                        T := RTE (RE_Address);\n                      when Aspect_Bit_Order    =>\n                         T := RTE (RE_Bit_Order);\n                      when Aspect_External_Tag =>\n@@ -811,38 +813,6 @@ package body Sem_Ch13 is\n                      Delay_Required := True;\n                   end if;\n \n-               --  Address aspect, treated specially because we have some\n-               --  strange problem in the back end if we try to delay ???\n-\n-               when Aspect_Address =>\n-\n-                  --  Construct the attribute definition clause\n-\n-                  Aitem :=\n-                    Make_Attribute_Definition_Clause (Sloc (Aspect),\n-                      Name       => Ent,\n-                      Chars      => Chars (Id),\n-                      Expression => Relocate_Node (Expr));\n-\n-                  --  If -gnatd.A is set, do the delay if needed (this is\n-                  --  so we can debug the relevant problem).\n-\n-                  if Debug_Flag_Dot_AA then\n-                     Preanalyze_Spec_Expression\n-                       (Expression (Aitem), RTE (RE_Address));\n-\n-                     if Is_OK_Static_Expression (Expression (Aitem)) then\n-                        Delay_Required := False;\n-                     else\n-                        Delay_Required := True;\n-                     end if;\n-\n-                  --  Here if -gnatd.A not set, never do the delay\n-\n-                  else\n-                     Delay_Required := False;\n-                  end if;\n-\n                --  Aspects corresponding to pragmas with two arguments, where\n                --  the first argument is a local name referring to the entity,\n                --  and the second argument is the aspect definition expression.\n@@ -1190,8 +1160,8 @@ package body Sem_Ch13 is\n          A : Node_Id;\n \n       begin\n-         --  Nothing to do if this attribute definition clause comes from an\n-         --  aspect specification, since we could not be duplicating an\n+         --  Nothing to do if this attribute definition clause comes from\n+         --  an aspect specification, since we could not be duplicating an\n          --  explicit clause, and we dealt with the case of duplicated aspects\n          --  in Analyze_Aspect_Specifications.\n \n@@ -5022,17 +4992,6 @@ package body Sem_Ch13 is\n    --  Start of processing for Rep_Item_Too_Late\n \n    begin\n-      --  If this is from an aspect that was delayed till the freeze point,\n-      --  then we skip this check entirely, since it is not required and\n-      --  furthermore can generate false errors. Also we don't need to chain\n-      --  the item into the rep item chain in that case, it is already there!\n-\n-      if Nkind_In (N, N_Attribute_Definition_Clause, N_Pragma)\n-        and then Is_Delayed_Aspect (N)\n-      then\n-         return False;\n-      end if;\n-\n       --  First make sure entity is not frozen (RM 13.1(9)). Exclude imported\n       --  types, which may be frozen if they appear in a representation clause\n       --  for a local type."}, {"sha": "67f588d2badac9d39689aa3f1d6ec112ae49f2dc", "filename": "gcc/ada/tree_gen.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Ftree_gen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Ftree_gen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_gen.adb?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -25,6 +25,7 @@\n \n with Aspects;\n with Atree;\n+with Debug;\n with Elists;\n with Fname;\n with Lib;\n@@ -51,7 +52,13 @@ begin\n    if Opt.Tree_Output then\n       Osint.C.Tree_Create;\n       Opt.Tree_Write;\n-      Aspects.Tree_Write;\n+\n+      --  For now, only write aspect specifications hash table if -gnatd.A set\n+\n+      if Debug.Debug_Flag_Dot_AA then\n+         Aspects.Tree_Write;\n+      end if;\n+\n       Atree.Tree_Write;\n       Elists.Tree_Write;\n       Fname.Tree_Write;"}, {"sha": "200c566fba97463f3221d41c7f1599dd899e6ab3", "filename": "gcc/ada/tree_in.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Ftree_in.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1928f45020f103b945190d1a5ae95533ff865722/gcc%2Fada%2Ftree_in.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftree_in.adb?ref=1928f45020f103b945190d1a5ae95533ff865722", "patch": "@@ -32,6 +32,7 @@\n with Aspects;\n with Atree;\n with Csets;\n+with Debug;\n with Elists;\n with Fname;\n with Lib;\n@@ -51,7 +52,13 @@ procedure Tree_In (Desc : File_Descriptor) is\n begin\n    Tree_IO.Tree_Read_Initialize (Desc);\n    Opt.Tree_Read;\n-   Aspects.Tree_Read;\n+\n+   --  For now, only  read aspect specifications hash table if -gnatd.A is set\n+\n+   if Debug.Debug_Flag_Dot_AA then\n+      Aspects.Tree_Read;\n+   end if;\n+\n    Atree.Tree_Read;\n    Elists.Tree_Read;\n    Fname.Tree_Read;"}]}