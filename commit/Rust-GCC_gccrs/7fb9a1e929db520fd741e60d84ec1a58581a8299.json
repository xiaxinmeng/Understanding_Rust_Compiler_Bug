{"sha": "7fb9a1e929db520fd741e60d84ec1a58581a8299", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiOWExZTkyOWRiNTIwZmQ3NDFlNjBkODRlYzFhNTg1ODFhODI5OQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-25T21:44:34Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-02-25T21:44:34Z"}, "message": "c++: Fix pretty printing the context of local class [PR99213]\n\nMy r10-7705 patch for PR94521 made us set TFF_NO_FUNCTION_ARGUMENTS when\npretty printing the function scope of a local class type in order to\neliminate infinite recursion with a function signature that contains\ndecltype([]{}).  But due to the way dump_function_decl works, this\nchange regressed our pretty printing of local class types whose context\ncontains a class template specialization, as in the testcase below, in\nwhich we wrongly pretty print the two local types as 'A<T>::f<char>::S1'\nand 'B<T>::f<int>::S2'.\n\nThis patch makes dump_scope pass TFF_NO_TEMPLATE_BINDINGS instead of\nTFF_NO_FUNCTION_ARGUMENTS when pretty printing a function scope.  It\nappears this is the strictly better flag to use: it avoids the infinite\nrecursion issue, it restores pretty printing of the function parameter\nlist, and it stops dump_function_decl from trying to print a function\ntemplate specialization in its own weird way.\n\nSummary of pretty printing differences for the below testcase:\n\n  r10-7704:   A<T>::f() [with U = char; T = int]::S1\n              B<T>::f() [with T = int]::S2\n\n  r10-7705:   A<T>::f<char>::S1\n              B<T>::f<int>::S2\n\n  this patch: A<int>::f<char>()::S1\n              B<int>::f()::S2\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99213\n\tPR c++/94521\n\t* error.c (dump_scope): Pass TFF_NO_TEMPLATE_BINDINGS instead of\n\tTFF_NO_FUNCTION_ARGUMENTS when dumping a function scope.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99213\n\tPR c++/94521\n\t* g++.dg/diagnostic/local1.C: New test.", "tree": {"sha": "6466778fc7fd42d5dd7bc2bf9948424abd4a1498", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6466778fc7fd42d5dd7bc2bf9948424abd4a1498"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb9a1e929db520fd741e60d84ec1a58581a8299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb9a1e929db520fd741e60d84ec1a58581a8299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb9a1e929db520fd741e60d84ec1a58581a8299", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb9a1e929db520fd741e60d84ec1a58581a8299/comments", "author": null, "committer": null, "parents": [{"sha": "676f6f3277181662cf3ed07769edfa2d4fb7df28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/676f6f3277181662cf3ed07769edfa2d4fb7df28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/676f6f3277181662cf3ed07769edfa2d4fb7df28"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "ff4ae6f4b2304745aa0b37fee713417782918613", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb9a1e929db520fd741e60d84ec1a58581a8299/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb9a1e929db520fd741e60d84ec1a58581a8299/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7fb9a1e929db520fd741e60d84ec1a58581a8299", "patch": "@@ -243,9 +243,7 @@ dump_scope (cxx_pretty_printer *pp, tree scope, int flags)\n     }\n   else if ((flags & TFF_SCOPE) && TREE_CODE (scope) == FUNCTION_DECL)\n     {\n-      if (DECL_USE_TEMPLATE (scope))\n-\tf |= TFF_NO_FUNCTION_ARGUMENTS;\n-      dump_function_decl (pp, scope, f);\n+      dump_function_decl (pp, scope, f | TFF_NO_TEMPLATE_BINDINGS);\n       pp_cxx_colon_colon (pp);\n     }\n }"}, {"sha": "5905b571a4483d5a5663f3daf10b25cd87cc2bd3", "filename": "gcc/testsuite/g++.dg/diagnostic/local1.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb9a1e929db520fd741e60d84ec1a58581a8299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flocal1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb9a1e929db520fd741e60d84ec1a58581a8299/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flocal1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Flocal1.C?ref=7fb9a1e929db520fd741e60d84ec1a58581a8299", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/99213\n+// { dg-do compile { target c++14 } }\n+\n+template <class T>\n+struct A {\n+  template <class U>\n+  static auto f() {\n+    struct S1{};\n+    return S1{};\n+  }\n+};\n+\n+using type = void;\n+using type = decltype(A<int>::f<char>()); // { dg-error \"A<int>::f<char>\\\\(\\\\)::S1\"  }\n+\n+template <class T>\n+struct B {\n+  static auto f() {\n+    struct S2{};\n+    return S2{};\n+  }\n+};\n+\n+using type = void;\n+using type = decltype(B<int>::f()); // { dg-error \"B<int>::f\\\\(\\\\)::S2\"  }"}]}