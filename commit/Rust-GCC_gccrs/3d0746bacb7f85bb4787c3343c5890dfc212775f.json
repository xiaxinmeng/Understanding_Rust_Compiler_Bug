{"sha": "3d0746bacb7f85bb4787c3343c5890dfc212775f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QwNzQ2YmFjYjdmODViYjQ3ODdjMzM0M2M1ODkwZGZjMjEyNzc1Zg==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-04T19:42:50Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-04T19:42:50Z"}, "message": "larith.asm (divmodhi4): Empty for 68HC12.\n\n\t* config/m68hc11/larith.asm (divmodhi4): Empty for 68HC12.\n\t(__mulsi3): Rewrite for 68HC12.\n\t* config/m68hc11/m68hc11.md (divmodhi4): Use idivs for 68HC12.\n\tMark 'x' constraint with earlyclobber to prevent a\n\tRELOAD_FOR_OTHER_ADDRESS to go in it.\n\t(mulhi3_m68hc12): New pattern.\n\t(mulhi3_m68hc11): Rename of mulhi3.\n\t(mulhi3): New expand for 68HC12 optimisation.\n\t(umulhisi3, mulhisi3): New patterns for 68HC12.\n\nFrom-SVN: r41841", "tree": {"sha": "9fffb1e1e52aaae9f704c86c76fbc4d213797ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fffb1e1e52aaae9f704c86c76fbc4d213797ecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d0746bacb7f85bb4787c3343c5890dfc212775f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0746bacb7f85bb4787c3343c5890dfc212775f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d0746bacb7f85bb4787c3343c5890dfc212775f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d0746bacb7f85bb4787c3343c5890dfc212775f/comments", "author": null, "committer": null, "parents": [{"sha": "85595239746fad58951aa889065ce3332e4e3086", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85595239746fad58951aa889065ce3332e4e3086", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85595239746fad58951aa889065ce3332e4e3086"}], "stats": {"total": 129, "additions": 118, "deletions": 11}, "files": [{"sha": "b89fd9439973909f7276ad9bec7f5a04e75cf99e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d0746bacb7f85bb4787c3343c5890dfc212775f", "patch": "@@ -1,3 +1,15 @@\n+2001-05-04  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/larith.asm (divmodhi4): Empty for 68HC12.\n+\t(__mulsi3): Rewrite for 68HC12.\n+\t* config/m68hc11/m68hc11.md (divmodhi4): Use idivs for 68HC12.\n+\tMark 'x' constraint with earlyclobber to prevent a \n+\tRELOAD_FOR_OTHER_ADDRESS to go in it.\n+\t(mulhi3_m68hc12): New pattern.\n+\t(mulhi3_m68hc11): Rename of mulhi3.\n+\t(mulhi3): New expand for 68HC12 optimisation.\n+\t(umulhisi3, mulhisi3): New patterns for 68HC12.\n+\n 2001-05-04  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n \n \t* config/m68hc11/m68hc11.md (*tbne, *tbeq): New patterns for 68HC12."}, {"sha": "07f09ead0e108d0a7be771ede9d1d511e66f9b6c", "filename": "gcc/config/m68hc11/larith.asm", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2Fconfig%2Fm68hc11%2Flarith.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Flarith.asm?ref=3d0746bacb7f85bb4787c3343c5890dfc212775f", "patch": "@@ -628,6 +628,9 @@ Return_zero:\n #endif\n \n #ifdef L_divmodhi4\n+#ifndef mc68hc12\n+/* 68HC12 signed divisions are generated inline (idivs).  */\n+\n \t.sect .text\n \t.globl __divmodhi4\n \n@@ -692,6 +695,7 @@ Numerator_neg_denominator_pos:\n \tcomb\n \taddd\t#1\n \trts\n+#endif /* !mc68hc12 */\n #endif\n \n #ifdef L_mulqi3\n@@ -865,11 +869,27 @@ Ret:\n ;\n ;\n \n+__mulsi3:\n+#ifdef mc68hc12\n+\tpshd\t\t\t\t; Save A.low\n+\tldy\t4,sp\n+\temul\t\t\t\t; A.low * B.high\n+\tldy\t6,sp\n+\texg\tx,d\n+\temul\t\t\t\t; A.high * B.low\n+\tleax\td,x\n+\tldy\t6,sp\n+\tpuld\n+\temul\t\t\t\t; A.low * B.low\n+\texg\td,y\n+\tleax\td,x\n+\texg\td,y\n+\trts\n+#else\n B_low\t=\t8\n B_high\t=\t6\n A_low\t=\t0\n A_high\t=\t2\n-__mulsi3:\n \tpshx\n \tpshb\n \tpsha\n@@ -882,11 +902,7 @@ __mulsi3:\n ;\n ; If A.high is 0, optimize into: (A.low * B.high) << 16 + (A.low * B.low)\n ;\n-#ifdef mc68hc12\n-\tcpx\t#0\n-#else\n \tstx\t*_.tmp\n-#endif\n \tbeq\tA_high_zero\n \tbsr\t___mulhi3\t\t; A.high * B.low\n ;\n@@ -984,6 +1000,7 @@ A_low_B_low:\n \tbsr\t__mulhi32\n \tbra\tReturn\n #endif\n+#endif\n \n #ifdef L_map_data\n "}, {"sha": "8afe311e702361c74b4cf7887c1b62760e89acc8", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d0746bacb7f85bb4787c3343c5890dfc212775f/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=3d0746bacb7f85bb4787c3343c5890dfc212775f", "patch": "@@ -2618,18 +2618,88 @@\n ;; 32 and 64-bit multiply are handled by the library\n ;;\n \n-(define_insn \"mulhi3\"\n+(define_expand \"mulsi3\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t(mult:SI (match_operand:SI 1 \"general_operand\" \"\")\n+\t\t (match_operand:SI 2 \"general_operand\" \"\")))]\n+  \"\"\n+  \"m68hc11_emit_libcall (\\\"__mulsi3\\\", MULT, SImode, SImode, 3, operands);\n+   DONE;\")\n+\n+(define_expand \"mulhi3\"\n+  [(parallel [(set (match_operand:HI 0 \"register_operand\" \"\")\n+\t\t       (mult:HI (match_operand:HI 1 \"register_operand\" \"\")\n+\t\t\t        (match_operand:HI 2 \"register_operand\" \"\")))\n+              (clobber (match_scratch:HI 3 \"\"))])]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"mulhi3_m68hc11\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(mult:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-\t\t (match_operand:HI 2 \"register_operand\" \"x\")))]\n-  \"\"\n+\t\t (match_operand:HI 2 \"register_operand\" \"x\")))\n+   (clobber (match_scratch:HI 3 \"=X\"))]\n+  \"TARGET_M6811\"\n   \"*\n {\n   CC_STATUS_INIT;\n   /* D * X -> D  (X and Y are preserved by this function call).  */\n   return \\\"jsr\\\\t___mulhi3\\\";\n }\")\n \n+(define_insn \"mulhi3_m68hc12\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n+\t(mult:HI (match_operand:HI 1 \"register_operand\" \"%0,0\")\n+\t\t (match_operand:HI 2 \"register_operand\" \"y,x\")))\n+   (clobber (match_scratch:HI 3 \"=2,2\"))]\n+  \"TARGET_M6812\"\n+  \"*\n+{\n+  CC_STATUS_INIT;\n+  if (X_REG_P (operands[2]))\n+    return \\\"exg\\\\tx,y\\\\n\\\\temul\\\\n\\\\texg\\\\tx,y\\\";\n+  else\n+    return \\\"emul\\\";\n+}\")\n+\n+(define_insn \"umulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+        (mult:SI (zero_extend:SI\n+\t\t     (match_operand:HI 1 \"register_operand\" \"%d,d\"))\n+\t\t (zero_extend:SI\n+\t             (match_operand:HI 2 \"register_operand\" \"y,x\"))))\n+   (clobber (match_scratch:HI 3 \"=2,X\"))]\n+  \"TARGET_M6812\"\n+  \"*\n+{\n+  if (X_REG_P (operands [2]))\n+    output_asm_insn (\\\"exg\\\\tx,y\\\", operands);\n+\n+  /* Can't use the carry after that; other flags are ok when testing\n+     the 32-bit result.  */\n+  cc_status.flags |= CC_NO_OVERFLOW;\n+  return \\\"emul\\\\n\\\\texg\\\\tx,y\\\";\n+}\")\n+\n+(define_insn \"mulhisi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n+        (mult:SI (sign_extend:SI\n+\t\t     (match_operand:HI 1 \"register_operand\" \"%d,d\"))\n+\t\t (sign_extend:SI\n+\t             (match_operand:HI 2 \"register_operand\" \"y,x\"))))\n+   (clobber (match_scratch:HI 3 \"=2,X\"))]\n+  \"TARGET_M6812\"\n+  \"*\n+{\n+  if (X_REG_P (operands [2]))\n+    output_asm_insn (\\\"exg\\\\tx,y\\\", operands);\n+\n+  /* Can't use the carry after that; other flags are ok when testing\n+     the 32-bit result.  */\n+  cc_status.flags |= CC_NO_OVERFLOW;\n+  return \\\"emuls\\\\n\\\\texg\\\\tx,y\\\";\n+}\")\n+\n (define_insn \"umulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n         (mult:HI (zero_extend:HI\n@@ -2741,7 +2811,7 @@\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n           (div:HI (match_operand:HI 1 \"register_operand\" \"0,0\")\n \t          (match_operand:HI 2 \"general_operand\" \"A,ium\")))\n-   (set (match_operand:HI 3 \"register_operand\" \"=x,x\")\n+   (set (match_operand:HI 3 \"register_operand\" \"=&x,&x\")\n \t(mod:HI (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"*\n@@ -2758,8 +2828,16 @@\n           output_asm_insn (\\\"ldx\\\\t%2\\\", operands);\n \t}\n     }\n-  CC_STATUS_INIT;\n-  return \\\"bsr\\\\t__divmodhi4\\\";\n+  if (TARGET_M6812)\n+    {\n+      /* Flags are ok after that.  */\n+      return \\\"idivs\\\\n\\\\txgdx\\\";      \n+    }\n+  else\n+    {\n+      CC_STATUS_INIT;\n+      return \\\"bsr\\\\t__divmodhi4\\\";\n+    }\n }\")\n \n (define_insn \"udivmodhi4\""}]}