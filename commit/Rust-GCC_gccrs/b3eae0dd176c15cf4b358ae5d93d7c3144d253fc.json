{"sha": "b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlYWUwZGQxNzZjMTVjZjRiMzU4YWU1ZDkzZDdjMzE0NGQyNTNmYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-08-29T19:40:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-08-29T19:40:41Z"}, "message": "Fix lambdas in template default argument of inherited ctor.\n\n\t* method.c (synthesized_method_base_walk): Replace an inherited\n\ttemplate with its specialization.\n\t(synthesized_method_walk): Make inheriting_ctor a pointer.\n\t(maybe_explain_implicit_delete, explain_implicit_non_constexpr)\n\t(deduce_inheriting_ctor, implicitly_declare_fn): Adjust.\n\nFrom-SVN: r251426", "tree": {"sha": "56846a8b93ef1c41a69cffc87d9b92ea5838a49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56846a8b93ef1c41a69cffc87d9b92ea5838a49b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cc20315a7e67b6ebbdbfbb736122476bf28f041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc20315a7e67b6ebbdbfbb736122476bf28f041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc20315a7e67b6ebbdbfbb736122476bf28f041"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "1e68776fe03eb044ecdbca6b81f646899e5d9432", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "patch": "@@ -1,5 +1,12 @@\n 2017-08-29  Jason Merrill  <jason@redhat.com>\n \n+\tFix lambdas in template default argument of inherited ctor.\n+\t* method.c (synthesized_method_base_walk): Replace an inherited\n+\ttemplate with its specialization.\n+\t(synthesized_method_walk): Make inheriting_ctor a pointer.\n+\t(maybe_explain_implicit_delete, explain_implicit_non_constexpr)\n+\t(deduce_inheriting_ctor, implicitly_declare_fn): Adjust.\n+\n \t* pt.c (build_deduction_guide): Set DECL_ABSTRACT_ORIGIN on the\n \ttemplate, not the function.\n \t(template_guide_p): Adjust."}, {"sha": "012d02aa4ee840258dfc0c3202963e1d9adbd955", "filename": "gcc/cp/method.c", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "patch": "@@ -1458,7 +1458,7 @@ static tree\n synthesized_method_base_walk (tree binfo, tree base_binfo, \n \t\t\t      int quals, bool copy_arg_p,\n \t\t\t      bool move_p, bool ctor_p,\n-\t\t\t      tree inheriting_ctor, tree inherited_parms,\n+\t\t\t      tree *inheriting_ctor, tree inherited_parms,\n \t\t\t      tree fnname, int flags, bool diag,\n \t\t\t      tree *spec_p, bool *trivial_p,\n \t\t\t      bool *deleted_p, bool *constexpr_p)\n@@ -1469,8 +1469,9 @@ synthesized_method_base_walk (tree binfo, tree base_binfo,\n \n   if (copy_arg_p)\n     argtype = build_stub_type (BINFO_TYPE (base_binfo), quals, move_p);\n-  else if ((inherited_binfo\n-\t    = binfo_inherited_from (binfo, base_binfo, inheriting_ctor)))\n+  else if (inheriting_ctor\n+\t   && (inherited_binfo\n+\t       = binfo_inherited_from (binfo, base_binfo, *inheriting_ctor)))\n     {\n       argtype = inherited_parms;\n       /* Don't check access on the inherited constructor.  */\n@@ -1492,6 +1493,12 @@ synthesized_method_base_walk (tree binfo, tree base_binfo,\n   if (defer != dk_no_deferred)\n     pop_deferring_access_checks ();\n \n+  /* Replace an inherited template with the appropriate specialization.  */\n+  if (inherited_binfo && rval\n+      && DECL_P (*inheriting_ctor) && DECL_P (rval)\n+      && DECL_CONTEXT (*inheriting_ctor) == DECL_CONTEXT (rval))\n+    *inheriting_ctor = DECL_CLONED_FUNCTION (rval);\n+\n   process_subob_fn (rval, spec_p, trivial_p, deleted_p,\n \t\t    constexpr_p, diag, BINFO_TYPE (base_binfo));\n   if (ctor_p &&\n@@ -1526,7 +1533,7 @@ static void\n synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n \t\t\t tree *spec_p, bool *trivial_p, bool *deleted_p,\n \t\t\t bool *constexpr_p, bool diag,\n-\t\t\t tree inheriting_ctor, tree inherited_parms)\n+\t\t\t tree *inheriting_ctor, tree inherited_parms)\n {\n   tree binfo, base_binfo, fnname;\n   int i;\n@@ -1581,7 +1588,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n     }\n \n   gcc_assert ((sfk == sfk_inheriting_constructor)\n-\t      == (inheriting_ctor != NULL_TREE));\n+\t      == (inheriting_ctor && *inheriting_ctor != NULL_TREE));\n \n   /* If that user-written default constructor would satisfy the\n      requirements of a constexpr constructor (7.1.5), the\n@@ -1656,7 +1663,7 @@ synthesized_method_walk (tree ctype, special_function_kind sfk, bool const_p,\n   tree scope = push_scope (ctype);\n \n   int flags = LOOKUP_NORMAL | LOOKUP_SPECULATIVE;\n-  if (!inheriting_ctor)\n+  if (sfk != sfk_inheriting_constructor)\n     flags |= LOOKUP_DEFAULTED;\n \n   tsubst_flags_t complain = diag ? tf_warning_or_error : tf_none;\n@@ -1770,9 +1777,9 @@ get_defaulted_eh_spec (tree decl, tsubst_flags_t complain)\n   bool const_p = CP_TYPE_CONST_P (non_reference (parm_type));\n   tree spec = empty_except_spec;\n   bool diag = !DECL_DELETED_FN (decl) && (complain & tf_error);\n+  tree inh = DECL_INHERITED_CTOR (decl);\n   synthesized_method_walk (ctype, sfk, const_p, &spec, NULL, NULL,\n-\t\t\t   NULL, diag, DECL_INHERITED_CTOR (decl),\n-\t\t\t   parms);\n+\t\t\t   NULL, diag, &inh, parms);\n   return spec;\n }\n \n@@ -1847,18 +1854,19 @@ maybe_explain_implicit_delete (tree decl)\n \t  tree raises = NULL_TREE;\n \t  bool deleted_p = false;\n \t  tree scope = push_scope (ctype);\n+\t  tree inh = DECL_INHERITED_CTOR (decl);\n \n \t  synthesized_method_walk (ctype, sfk, const_p,\n \t\t\t\t   &raises, NULL, &deleted_p, NULL, false,\n-\t\t\t\t   DECL_INHERITED_CTOR (decl), parms);\n+\t\t\t\t   &inh, parms);\n \t  if (deleted_p)\n \t    {\n \t      inform (DECL_SOURCE_LOCATION (decl),\n \t\t      \"%q#D is implicitly deleted because the default \"\n \t\t      \"definition would be ill-formed:\", decl);\n \t      synthesized_method_walk (ctype, sfk, const_p,\n \t\t\t\t       NULL, NULL, NULL, NULL, true,\n-\t\t\t\t       DECL_INHERITED_CTOR (decl), parms);\n+\t\t\t\t       &inh, parms);\n \t    }\n \t  else if (!comp_except_specs\n \t\t   (TYPE_RAISES_EXCEPTIONS (TREE_TYPE (decl)),\n@@ -1887,11 +1895,12 @@ explain_implicit_non_constexpr (tree decl)\n {\n   tree parm_type = TREE_VALUE (FUNCTION_FIRST_USER_PARMTYPE (decl));\n   bool const_p = CP_TYPE_CONST_P (non_reference (parm_type));\n+  tree inh = DECL_INHERITED_CTOR (decl);\n   bool dummy;\n   synthesized_method_walk (DECL_CLASS_CONTEXT (decl),\n \t\t\t   special_function_p (decl), const_p,\n \t\t\t   NULL, NULL, NULL, &dummy, true,\n-\t\t\t   DECL_INHERITED_CTOR (decl),\n+\t\t\t   &inh,\n \t\t\t   FUNCTION_FIRST_USER_PARMTYPE (decl));\n }\n \n@@ -1906,22 +1915,25 @@ deduce_inheriting_ctor (tree decl)\n   gcc_assert (DECL_INHERITED_CTOR (decl));\n   tree spec;\n   bool trivial, constexpr_, deleted;\n+  tree inh = DECL_INHERITED_CTOR (decl);\n   synthesized_method_walk (DECL_CONTEXT (decl), sfk_inheriting_constructor,\n \t\t\t   false, &spec, &trivial, &deleted, &constexpr_,\n \t\t\t   /*diag*/false,\n-\t\t\t   DECL_INHERITED_CTOR (decl),\n+\t\t\t   &inh,\n \t\t\t   FUNCTION_FIRST_USER_PARMTYPE (decl));\n   if (TREE_CODE (inherited_ctor_binfo (decl)) != TREE_BINFO)\n     /* Inherited the same constructor from different base subobjects.  */\n     deleted = true;\n   DECL_DELETED_FN (decl) = deleted;\n   TREE_TYPE (decl) = build_exception_variant (TREE_TYPE (decl), spec);\n+  SET_DECL_INHERITED_CTOR (decl, inh);\n \n   tree clone;\n   FOR_EACH_CLONE (clone, decl)\n     {\n       DECL_DELETED_FN (clone) = deleted;\n       TREE_TYPE (clone) = build_exception_variant (TREE_TYPE (clone), spec);\n+      SET_DECL_INHERITED_CTOR (clone, inh);\n     }\n }\n \n@@ -2035,12 +2047,12 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       raises = noexcept_deferred_spec;\n       synthesized_method_walk (type, kind, const_p, NULL, &trivial_p,\n \t\t\t       &deleted_p, &constexpr_p, false,\n-\t\t\t       inherited_ctor, inherited_parms);\n+\t\t\t       &inherited_ctor, inherited_parms);\n     }\n   else\n     synthesized_method_walk (type, kind, const_p, &raises, &trivial_p,\n \t\t\t     &deleted_p, &constexpr_p, false,\n-\t\t\t     inherited_ctor, inherited_parms);\n+\t\t\t     &inherited_ctor, inherited_parms);\n   /* Don't bother marking a deleted constructor as constexpr.  */\n   if (deleted_p)\n     constexpr_p = false;\n@@ -2153,7 +2165,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       input_location = DECL_SOURCE_LOCATION (fn);\n       synthesized_method_walk (type, kind, const_p,\n \t\t\t       NULL, NULL, NULL, NULL, true,\n-\t\t\t       NULL_TREE, NULL_TREE);\n+\t\t\t       NULL, NULL_TREE);\n       input_location = loc;\n     }\n "}, {"sha": "dd95894755c97611be4fb01d21bc03f27ef2c346", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-mangle5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3eae0dd176c15cf4b358ae5d93d7c3144d253fc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-mangle5.C?ref=b3eae0dd176c15cf4b358ae5d93d7c3144d253fc", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-final { scan-assembler \"_ZZN1AIiEC4IiEET_S2_Ed_NKUlvE_clEv\" } }\n+\n+template <class T> struct A\n+{\n+  template <class U>\n+  A(U, U = []{ return 42; }());\n+};\n+\n+struct B: A<int>\n+{\n+  using A::A;\n+};\n+\n+B b(24);"}]}