{"sha": "deeab82073c53d3999f99bcb70a278756a79880d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVlYWI4MjA3M2M1M2QzOTk5Zjk5YmNiNzBhMjc4NzU2YTc5ODgwZA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T08:25:52Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2005-05-15T08:25:52Z"}, "message": "chdir.c, [...]: Include <string.h> for prototypes.\n\n\t* intrinsics/chdir.c, intrinsics/getlog.c, intrinsics/link.c,\n\tintrinsics/symlnk.c, intrinsics/perror.c: Include <string.h> for\n\tprototypes.\n\n\t* runtime/string.c (compare0): Remove unused variable.\n\t* io/unit.c (init_units): Remove unused variables.\n\t* intrinsics/getcwd.c (getcwd_i4_sub): Remove unused variable.\n\t* intrinsics/unlink.c (unlink_i4_sub): Remove unused variable.\n\t* intrinsics/stat.c (stat_i4_sub, fstat_i8_sub, fstat_i4_sub,\n\tstat_i8_sub): Remove unused variable.\n\nFrom-SVN: r99716", "tree": {"sha": "5c5e356ef64577e81376928db6d155510e4b04b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c5e356ef64577e81376928db6d155510e4b04b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/deeab82073c53d3999f99bcb70a278756a79880d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deeab82073c53d3999f99bcb70a278756a79880d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deeab82073c53d3999f99bcb70a278756a79880d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deeab82073c53d3999f99bcb70a278756a79880d/comments", "author": null, "committer": null, "parents": [{"sha": "64fbae219b6b6567a5cdbea568a3a5b45743e2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64fbae219b6b6567a5cdbea568a3a5b45743e2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64fbae219b6b6567a5cdbea568a3a5b45743e2ec"}], "stats": {"total": 136, "additions": 77, "deletions": 59}, "files": [{"sha": "54a80e4fc536cb6e1fdd20ef15f29f5b247c03b1", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,3 +1,16 @@\n+2005-05-15  Andreas Jaeger  <aj@suse.de>\n+\n+\t* intrinsics/chdir.c, intrinsics/getlog.c, intrinsics/link.c,\n+\tintrinsics/symlnk.c, intrinsics/perror.c: Include <string.h> for\n+\tprototypes.\n+\n+\t* runtime/string.c (compare0): Remove unused variable.\n+\t* io/unit.c (init_units): Remove unused variables.\n+\t* intrinsics/getcwd.c (getcwd_i4_sub): Remove unused variable.\n+\t* intrinsics/unlink.c (unlink_i4_sub): Remove unused variable.\n+\t* intrinsics/stat.c (stat_i4_sub, fstat_i8_sub, fstat_i4_sub,\n+\tstat_i8_sub): Remove unused variable.\n+\n 2005-05-12  Thomas Koenig  <Thomas.Koenig@online.de>\n \n \tPR libfortran/21324\n@@ -179,7 +192,7 @@\n \tfrom WRITING to READING.\n \n 2005-04-22  Paul Thomas  <pault@gcc.gnu.org>\n-\t    Jerry DeLisle  <jvdelisle@verizon.net> \n+\t    Jerry DeLisle  <jvdelisle@verizon.net>\n \n \t* io/write.c (nml_write_obj): Provide 1 more byte for ext_name.\n \t* io/list_read.c (nml_get_obj_data): Put extra brackets in get_mem\n@@ -355,7 +368,7 @@\n \tenvironment variables we want to be positive.\n \t(init_integer): Function to allow negative environment\n \tvariables (e.g. for GFORTRAN_STDIN_UNIT).\n-\t\n+\n 2005-04-10  Thomas Koenig <Thomas.Koenig@online.de>\n \n \tPR libfortran/17992\n@@ -466,7 +479,7 @@\n 2005-04-09  Thomas Koenig <Thomas.Koenig@online.de>\n \n \tPR libfortran/20163\n-\t* runtime/string.c (compare0): Use fstrlen() to \n+\t* runtime/string.c (compare0): Use fstrlen() to\n \tstrip trailing blanks from option string.\n \n 2005-04-09  Andrew Pinski  <pinskia@physics.uc.edu>"}, {"sha": "817371f84a8b06ecf11fdf0d98ef4e20658d7d18", "filename": "libgfortran/intrinsics/chdir.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fchdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fchdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fchdir.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -35,6 +35,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"../io/io.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -60,11 +63,11 @@ chdir_i4_sub (char *dir, GFC_INTEGER_4 *status, gfc_charlen_type dir_len)\n   /* Make a null terminated copy of the strings.  */\n   str = gfc_alloca (dir_len + 1);\n   memcpy (str, dir, dir_len);\n-  str[dir_len] = '\\0'; \n+  str[dir_len] = '\\0';\n \n   val = chdir (str);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(chdir_i4_sub);\n@@ -85,11 +88,11 @@ chdir_i8_sub (char *dir, GFC_INTEGER_8 *status, gfc_charlen_type dir_len)\n   /* Make a null terminated copy of the strings.  */\n   str = gfc_alloca (dir_len + 1);\n   memcpy (str, dir, dir_len);\n-  str[dir_len] = '\\0'; \n+  str[dir_len] = '\\0';\n \n   val = chdir (str);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(chdir_i8_sub);"}, {"sha": "89e481d015d3fb53f5049af514b16894d937f92a", "filename": "libgfortran/intrinsics/getcwd.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fgetcwd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fgetcwd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetcwd.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the GETCWD intrinsic.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -46,7 +46,7 @@ iexport_proto(getcwd_i4_sub);\n void\n getcwd_i4_sub (char *cwd, GFC_INTEGER_4 *status, gfc_charlen_type cwd_len)\n {\n-  char str[cwd_len + 1], *s;\n+  char str[cwd_len + 1];\n   GFC_INTEGER_4 stat;\n \n   memset(cwd, ' ', (size_t) cwd_len);\n@@ -58,7 +58,7 @@ getcwd_i4_sub (char *cwd, GFC_INTEGER_4 *status, gfc_charlen_type cwd_len)\n       stat = 0;\n       memcpy (cwd, str, strlen (str));\n     }\n-  if (status != NULL) \n+  if (status != NULL)\n     *status = stat;\n }\n iexport(getcwd_i4_sub);"}, {"sha": "9eda12ee5dadf62a8186071799c1e3367e76ffe0", "filename": "libgfortran/intrinsics/getlog.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fgetlog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fgetlog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fgetlog.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -31,6 +31,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"config.h\"\n #include \"libgfortran.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -44,7 +47,7 @@ Boston, MA 02111-1307, USA.  */\n void PREFIX(getlog) (char *, gfc_charlen_type);\n export_proto_np(PREFIX(getlog));\n \n-void \n+void\n PREFIX(getlog) (char * login, gfc_charlen_type login_len)\n {\n   int p_len;"}, {"sha": "8d131fef2b47fd4c3d9baf19efd53ee347d2897a", "filename": "libgfortran/intrinsics/link.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Flink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Flink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Flink.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -35,6 +35,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"../io/io.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -64,15 +67,15 @@ link_i4_sub (char *path1, char *path2, GFC_INTEGER_4 *status,\n   /* Make a null terminated copy of the strings.  */\n   str1 = gfc_alloca (path1_len + 1);\n   memcpy (str1, path1, path1_len);\n-  str1[path1_len] = '\\0'; \n+  str1[path1_len] = '\\0';\n \n   str2 = gfc_alloca (path2_len + 1);\n   memcpy (str2, path2, path2_len);\n-  str2[path2_len] = '\\0'; \n+  str2[path2_len] = '\\0';\n \n   val = link (str1, str2);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(link_i4_sub);\n@@ -97,15 +100,15 @@ link_i8_sub (char *path1, char *path2, GFC_INTEGER_8 *status,\n   /* Make a null terminated copy of the strings.  */\n   str1 = gfc_alloca (path1_len + 1);\n   memcpy (str1, path1, path1_len);\n-  str1[path1_len] = '\\0'; \n+  str1[path1_len] = '\\0';\n \n   str2 = gfc_alloca (path2_len + 1);\n   memcpy (str2, path2, path2_len);\n-  str2[path2_len] = '\\0'; \n+  str2[path2_len] = '\\0';\n \n   val = link (str1, str2);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(link_i8_sub);"}, {"sha": "8926901fb9e3749aca91483f74d6423e373b306a", "filename": "libgfortran/intrinsics/perror.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fperror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fperror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fperror.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -36,6 +36,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"../io/io.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n \n /* SUBROUTINE PERROR(STRING)\n    CHARACTER(len=*), INTENT(IN) :: STRING   */\n@@ -56,7 +59,7 @@ perror_sub (char *string, gfc_charlen_type string_len)\n   /* Make a null terminated copy of the strings.  */\n   str = gfc_alloca (string_len + 1);\n   memcpy (str, string, string_len);\n-  str[string_len] = '\\0'; \n+  str[string_len] = '\\0';\n \n   perror (str);\n }"}, {"sha": "1d21529b9a14fe1c37d17f4ef50cbc461cf42142", "filename": "libgfortran/intrinsics/stat.c", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fstat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fstat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fstat.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the STAT and FSTAT intrinsics.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -73,8 +73,6 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n   char *str;\n   struct stat sb;\n \n-  index_type stride[GFC_MAX_DIMENSIONS];\n-      \n   /* If the rank of the array is not 1, abort.  */\n   if (GFC_DESCRIPTOR_RANK (sarray) != 1)\n     runtime_error (\"Array rank of SARRAY is not 1.\");\n@@ -93,11 +91,11 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n   /* Make a null terminated copy of the string.  */\n   str = gfc_alloca (name_len + 1);\n   memcpy (str, name, name_len);\n-  str[name_len] = '\\0'; \n+  str[name_len] = '\\0';\n \n   val = stat(str, &sb);\n \n-  if (val == 0) \n+  if (val == 0)\n     {\n       /* Device ID  */\n       sarray->data[0 * sarray->dim[0].stride] = sb.st_dev;\n@@ -116,7 +114,7 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n \n       /* Owner's gid  */\n       sarray->data[5 * sarray->dim[0].stride] = sb.st_gid;\n-  \n+\n       /* ID of device containing directory entry for file (0 if not available) */\n #if HAVE_STRUCT_STAT_ST_RDEV\n       sarray->data[6 * sarray->dim[0].stride] = sb.st_rdev;\n@@ -151,7 +149,7 @@ stat_i4_sub (char *name, gfc_array_i4 *sarray, GFC_INTEGER_4 *status,\n #endif\n     }\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(stat_i4_sub);\n@@ -168,8 +166,6 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n   char *str;\n   struct stat sb;\n \n-  index_type stride[GFC_MAX_DIMENSIONS];\n-      \n   /* If the rank of the array is not 1, abort.  */\n   if (GFC_DESCRIPTOR_RANK (sarray) != 1)\n     runtime_error (\"Array rank of SARRAY is not 1.\");\n@@ -188,7 +184,7 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n   /* Make a null terminated copy of the string.  */\n   str = gfc_alloca (name_len + 1);\n   memcpy (str, name, name_len);\n-  str[name_len] = '\\0'; \n+  str[name_len] = '\\0';\n \n   val = stat(str, &sb);\n \n@@ -205,13 +201,13 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n \n       /* Number of (hard) links  */\n       sarray->data[3 * sarray->dim[0].stride] = sb.st_nlink;\n-  \n+\n       /* Owner's uid  */\n       sarray->data[4 * sarray->dim[0].stride] = sb.st_uid;\n \n       /* Owner's gid  */\n       sarray->data[5 * sarray->dim[0].stride] = sb.st_gid;\n-  \n+\n       /* ID of device containing directory entry for file (0 if not available) */\n #if HAVE_STRUCT_STAT_ST_RDEV\n       sarray->data[6 * sarray->dim[0].stride] = sb.st_rdev;\n@@ -246,7 +242,7 @@ stat_i8_sub (char *name, gfc_array_i8 *sarray, GFC_INTEGER_8 *status,\n #endif\n     }\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(stat_i8_sub);\n@@ -275,13 +271,13 @@ stat_i8 (char *name, gfc_array_i8 *sarray, gfc_charlen_type name_len)\n \n \n /* SUBROUTINE FSTAT(UNIT, SARRAY, STATUS)\n-   INTEGER, INTENT(IN) :: UNIT \n+   INTEGER, INTENT(IN) :: UNIT\n    INTEGER, INTENT(OUT) :: SARRAY(13)\n-   INTEGER, INTENT(OUT), OPTIONAL :: STATUS \n+   INTEGER, INTENT(OUT), OPTIONAL :: STATUS\n \n    FUNCTION FSTAT(UNIT, SARRAY)\n    INTEGER FSTAT\n-   INTEGER, INTENT(IN) :: UNIT \n+   INTEGER, INTENT(IN) :: UNIT\n    INTEGER, INTENT(OUT) :: SARRAY(13)  */\n \n extern void fstat_i4_sub (GFC_INTEGER_4 *, gfc_array_i4 *, GFC_INTEGER_4 *);\n@@ -293,8 +289,6 @@ fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n   int val;\n   struct stat sb;\n \n-  index_type stride[GFC_MAX_DIMENSIONS];\n-      \n   /* If the rank of the array is not 1, abort.  */\n   if (GFC_DESCRIPTOR_RANK (sarray) != 1)\n     runtime_error (\"Array rank of SARRAY is not 1.\");\n@@ -318,7 +312,7 @@ fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n \n       /* Inode number  */\n       sarray->data[1 * sarray->dim[0].stride] = sb.st_ino;\n-  \n+\n       /* File mode  */\n       sarray->data[2 * sarray->dim[0].stride] = sb.st_mode;\n \n@@ -330,7 +324,7 @@ fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n \n       /* Owner's gid  */\n       sarray->data[5 * sarray->dim[0].stride] = sb.st_gid;\n-  \n+\n       /* ID of device containing directory entry for file (0 if not available) */\n #if HAVE_STRUCT_STAT_ST_RDEV\n       sarray->data[6 * sarray->dim[0].stride] = sb.st_rdev;\n@@ -365,7 +359,7 @@ fstat_i4_sub (GFC_INTEGER_4 *unit, gfc_array_i4 *sarray, GFC_INTEGER_4 *status)\n #endif\n     }\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(fstat_i4_sub);\n@@ -379,8 +373,6 @@ fstat_i8_sub (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray, GFC_INTEGER_8 *status)\n   int val;\n   struct stat sb;\n \n-  index_type stride[GFC_MAX_DIMENSIONS];\n-      \n   /* If the rank of the array is not 1, abort.  */\n   if (GFC_DESCRIPTOR_RANK (sarray) != 1)\n     runtime_error (\"Array rank of SARRAY is not 1.\");\n@@ -416,7 +408,7 @@ fstat_i8_sub (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray, GFC_INTEGER_8 *status)\n \n       /* Owner's gid  */\n       sarray->data[5 * sarray->dim[0].stride] = sb.st_gid;\n-  \n+\n       /* ID of device containing directory entry for file (0 if not available) */\n #if HAVE_STRUCT_STAT_ST_RDEV\n       sarray->data[6 * sarray->dim[0].stride] = sb.st_rdev;\n@@ -451,7 +443,7 @@ fstat_i8_sub (GFC_INTEGER_8 *unit, gfc_array_i8 *sarray, GFC_INTEGER_8 *status)\n #endif\n     }\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(fstat_i8_sub);"}, {"sha": "66fa990412abe5198fab671bd40536e412f12cac", "filename": "libgfortran/intrinsics/symlnk.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fsymlnk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Fsymlnk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fsymlnk.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -35,6 +35,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"../io/io.h\"\n \n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#endif\n #ifdef HAVE_UNISTD_H\n #include <unistd.h>\n #endif\n@@ -64,15 +67,15 @@ symlnk_i4_sub (char *path1, char *path2, GFC_INTEGER_4 *status,\n   /* Make a null terminated copy of the strings.  */\n   str1 = gfc_alloca (path1_len + 1);\n   memcpy (str1, path1, path1_len);\n-  str1[path1_len] = '\\0'; \n+  str1[path1_len] = '\\0';\n \n   str2 = gfc_alloca (path2_len + 1);\n   memcpy (str2, path2, path2_len);\n-  str2[path2_len] = '\\0'; \n+  str2[path2_len] = '\\0';\n \n   val = symlink (str1, str2);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(symlnk_i4_sub);\n@@ -97,15 +100,15 @@ symlnk_i8_sub (char *path1, char *path2, GFC_INTEGER_8 *status,\n   /* Make a null terminated copy of the strings.  */\n   str1 = gfc_alloca (path1_len + 1);\n   memcpy (str1, path1, path1_len);\n-  str1[path1_len] = '\\0'; \n+  str1[path1_len] = '\\0';\n \n   str2 = gfc_alloca (path2_len + 1);\n   memcpy (str2, path2, path2_len);\n-  str2[path2_len] = '\\0'; \n+  str2[path2_len] = '\\0';\n \n   val = symlink (str1, str2);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (val == 0) ? 0 : errno;\n }\n iexport(symlnk_i8_sub);"}, {"sha": "52328de50f113e7649f917084bec66565f48e648", "filename": "libgfortran/intrinsics/unlink.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Funlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fintrinsics%2Funlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funlink.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,5 +1,5 @@\n /* Implementation of the UNLINK intrinsic.\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n    Contributed by Steven G. Kargl <kargls@comcast.net>.\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -51,7 +51,7 @@ iexport_proto(unlink_i4_sub);\n void\n unlink_i4_sub (char *name, GFC_INTEGER_4 *status, gfc_charlen_type name_len)\n {\n-  char *str, *s;\n+  char *str;\n   GFC_INTEGER_4 stat;\n \n   /* Trim trailing spaces from name.  */\n@@ -61,11 +61,11 @@ unlink_i4_sub (char *name, GFC_INTEGER_4 *status, gfc_charlen_type name_len)\n   /* Make a null terminated copy of the string.  */\n   str = gfc_alloca (name_len + 1);\n   memcpy (str, name, name_len);\n-  str[name_len] = '\\0'; \n+  str[name_len] = '\\0';\n \n   stat = unlink (str);\n \n-  if (status != NULL) \n+  if (status != NULL)\n     *status = (stat == 0) ? stat : errno;\n }\n iexport(unlink_i4_sub);"}, {"sha": "8fb62e34c13387ac5f6f8a31d5f5dfcd66289c4f", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -288,7 +288,6 @@ is_internal_unit ()\n void\n init_units (void)\n {\n-  gfc_offset m, n;\n   gfc_unit *u;\n   int i;\n "}, {"sha": "5fff97f5a3cacc68932c0fe9b8411c8c75be0dc5", "filename": "libgfortran/runtime/string.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fruntime%2Fstring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/deeab82073c53d3999f99bcb70a278756a79880d/libgfortran%2Fruntime%2Fstring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fstring.c?ref=deeab82073c53d3999f99bcb70a278756a79880d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2002-2003 Free Software Foundation, Inc.\n+/* Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -40,12 +40,11 @@ Boston, MA 02111-1307, USA.  */\n static int\n compare0 (const char *s1, int s1_len, const char *s2)\n {\n-  int i;\n   int len;\n \n   /* Strip trailing blanks from the Fortran string.  */\n-  len = fstrlen(s1, s1_len);\n-  return strncasecmp(s1,s2,len) == 0;\n+  len = fstrlen (s1, s1_len);\n+  return strncasecmp (s1, s2, len) == 0;\n }\n \n "}]}