{"sha": "9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlZmEwYWFjMjBiN2NhMDg4YjRkMmZhM2JmMWFiYWE4ZGY2OTFmMA==", "commit": {"author": {"name": "Taras Glek", "email": "tglek@mozilla.com", "date": "2009-05-21T17:34:43Z"}, "committer": {"name": "Taras Glek", "email": "tglek@gcc.gnu.org", "date": "2009-05-21T17:34:43Z"}, "message": "plugin.c (try_init_one_plugin): Updated to new plugin_init API.\n\ngcc/ChangeLog\n\t* plugin.c (try_init_one_plugin): Updated to new plugin_init API.\n\t* gcc-plugin.h (plugin_init): Updated signature.\n\t* gcc-plugin.h (plugin_name_args): Moved to this header.\n\t* doc/plugins.texi (plugin_init): Updated documention to reflect API change.\n\t* doc/plugins.texi (plugin_name_args): Added to documention.\ngcc/testsuite/ChangeLog\n\t* gcc.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n\t* g++.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n\t* g++.dg/plugin/dumb_plugin.c (plugin_init): Updated to new plugin_init signature.\n\t* g++.dg/plugin/attribute_plugin.c (plugin_init): Updated to new plugin_init signature.\n\nFrom-SVN: r147772", "tree": {"sha": "97cb00e10e01fbc57f7a018ec45a6b6c41fa22bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97cb00e10e01fbc57f7a018ec45a6b6c41fa22bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/comments", "author": null, "committer": null, "parents": [{"sha": "1ea9fe562c2e9c3a7772304e588aba86d8e58152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea9fe562c2e9c3a7772304e588aba86d8e58152", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea9fe562c2e9c3a7772304e588aba86d8e58152"}], "stats": {"total": 115, "additions": 76, "deletions": 39}, "files": [{"sha": "646ea22b32b74ceccabbcf6a508ddd4e2306155c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -1,3 +1,11 @@\n+2009-05-21  Taras Glek  <tglek@mozilla.com>\n+\n+\t* plugin.c (try_init_one_plugin): Updated to new plugin_init API.\n+\t* gcc-plugin.h (plugin_init): Updated signature.\n+\t* gcc-plugin.h (plugin_name_args): Moved to this header.\n+\t* doc/plugins.texi (plugin_init): Updated documention to reflect API change.\n+\t* doc/plugins.texi (plugin_name_args): Added to documention.\n+\n 2009-05-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/arm/neon.md (*mul<mode>3add<mode>_neon): New pattern."}, {"sha": "cf5d2af1221b52e6b7fc8d478c8acb57bcf1c382", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -41,11 +41,27 @@ This function is called from @code{compile_file} right before invoking\n the parser.  The arguments to @code{plugin_init} are:\n \n @itemize @bullet\n-@item @code{plugin_name}: Name of the plugin.\n-@item @code{argc}: Number of arguments specified with @option{-fplugin-arg-...}.\n-@item @code{argv}: Array of @code{argc} key-value pairs.\n+@item @code{plugin_info}: Plugin invocation information.\n+@item @code{version}: GCC version.\n @end itemize\n \n+The @code{plugin_info} struct is defined as follows:\n+\n+@smallexample\n+struct plugin_name_args\n+@{\n+  char *base_name;              /* Short name of the plugin\n+                                   (filename without .so suffix). */\n+  const char *full_name;        /* Path to the plugin as specified with\n+                                   -fplugin=. */\n+  int argc;                     /* Number of arguments specified with\n+                                   -fplugin-arg-.... */\n+  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */\n+  const char *version;          /* Version string provided by plugin. */\n+  const char *help;             /* Help string provided by plugin. */\n+@}\n+@end smallexample\n+\n If initialization fails, @code{plugin_init} must return a non-zero\n value.  Otherwise, it should return 0.\n \n@@ -120,7 +136,8 @@ struct plugin_pass\n \n /* Sample plugin code that registers a new pass.  */\n int\n-plugin_init (const char *plugin_name, int argc, struct plugin_argument *argv)\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n @{\n   struct plugin_pass pass_info;\n \n@@ -131,7 +148,7 @@ plugin_init (const char *plugin_name, int argc, struct plugin_argument *argv)\n   ...\n \n   /* Register the new pass.  */\n-  register_callback (plugin_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass_info);\n+  register_callback (plugin_info->base_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass_info);\n \n   ...\n @}"}, {"sha": "e788eb731bb8f63af73edb18d61bd520d34e0c7b", "filename": "gcc/gcc-plugin.h", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fgcc-plugin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fgcc-plugin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-plugin.h?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -79,6 +79,20 @@ struct plugin_gcc_version\n   const char *configuration_arguments;\n };\n \n+/* Object that keeps track of the plugin name and its arguments. */\n+struct plugin_name_args\n+{\n+  char *base_name;              /* Short name of the plugin (filename without\n+                                   .so suffix). */\n+  const char *full_name;        /* Path to the plugin as specified with\n+                                   -fplugin=. */\n+  int argc;                     /* Number of arguments specified with\n+                                   -fplugin-arg-... */\n+  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */\n+  const char *version;          /* Version string provided by plugin. */\n+  const char *help;             /* Help string provided by plugin. */\n+};\n+\n /* The default version check. Compares every field in VERSION. */\n \n extern bool plugin_default_version_check (struct plugin_gcc_version *,\n@@ -88,21 +102,18 @@ extern bool plugin_default_version_check (struct plugin_gcc_version *,\n    should define this as an externally-visible function with name\n    \"plugin_init.\"\n \n-   PLUGIN_NAME - name of the plugin (useful for error reporting)\n-   VERSION     - the plugin_gcc_version symbol of the plugin itself.\n-   ARGC        - the size of the ARGV array\n-   ARGV        - an array of key-value argument pair\n+   PLUGIN_INFO - plugin invocation information.\n+   VERSION     - the plugin_gcc_version symbol of GCC.\n \n    Returns 0 if initialization finishes successfully.  */\n \n-typedef int (*plugin_init_func) (const char *plugin_name,\n-                                 struct plugin_gcc_version *version,\n-                                 int argc, struct plugin_argument *argv);\n+typedef int (*plugin_init_func) (struct plugin_name_args *plugin_info,\n+                                 struct plugin_gcc_version *version);\n \n /* Declaration for \"plugin_init\" function so that it doesn't need to be\n    duplicated in every plugin.  */\n-extern int plugin_init (const char *, struct plugin_gcc_version *version,\n-\t\t\tint, struct plugin_argument *);\n+extern int plugin_init (struct plugin_name_args *plugin_info,\n+                        struct plugin_gcc_version *version);\n \n /* Function type for a plugin callback routine.\n "}, {"sha": "6cee526cf76d86a3465530fb829b57b63c8e4c8d", "filename": "gcc/plugin.c", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -54,19 +54,6 @@ const char *plugin_event_name[] =\n   \"PLUGIN_EVENT_LAST\"\n };\n \n-/* Object that keeps track of the plugin name and its arguments\n-   when parsing the command-line options -fplugin=/path/to/NAME.so and\n-   -fplugin-arg-NAME-<key>[=<value>].  */\n-struct plugin_name_args\n-{\n-  char *base_name;\n-  const char *full_name;\n-  int argc;\n-  struct plugin_argument *argv;\n-  const char *version;\n-  const char *help;\n-};\n-\n /* Hash table for the plugin_name_args objects created during command-line\n    parsing.  */\n static htab_t plugin_name_args_tab = NULL;\n@@ -596,8 +583,7 @@ try_init_one_plugin (struct plugin_name_args *plugin)\n     }\n \n   /* Call the plugin-provided initialization routine with the arguments.  */\n-  if ((*plugin_init) (plugin->base_name, &gcc_version, plugin->argc,\n-\t\t      plugin->argv))\n+  if ((*plugin_init) (plugin, &gcc_version))\n     {\n       error (\"Fail to initialize plugin %s\", plugin->full_name);\n       return false;"}, {"sha": "f477d318b8c701eb8bb88d4164cf596bbb70d441", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -1,3 +1,10 @@\n+2009-05-21  Taras Glek  <tglek@mozilla.com>\n+\n+\t* gcc.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n+\t* g++.dg/plugin/selfassign.c (plugin_init): Updated to new plugin_init signature.\n+\t* g++.dg/plugin/dumb_plugin.c (plugin_init): Updated to new plugin_init signature.\n+\t* g++.dg/plugin/attribute_plugin.c (plugin_init): Updated to new plugin_init signature.\n+\n 2009-05-21  Mark Mitchell  <mark@codesourcery.com>\n \n \t* gcc.dg/target/arm/neon-vmla-1.c: New."}, {"sha": "2624ea2da0c26a991830f9297a95d749bb1e83da", "filename": "gcc/testsuite/g++.dg/plugin/attribute_plugin.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fattribute_plugin.c?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -54,10 +54,10 @@ handle_pre_generic (void *event_data, void *data)\n }\n \n int\n-plugin_init (const char *plugin_name,\n-             struct plugin_gcc_version *version,\n-             int argc, struct plugin_argument *argv)\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n {\n+  const char *plugin_name = plugin_info->base_name;\n   register_callback (plugin_name, PLUGIN_CXX_CP_PRE_GENERICIZE,\n                      handle_pre_generic, NULL);\n "}, {"sha": "81e68eb5e51a4311636e6809427466a67e307e57", "filename": "gcc/testsuite/g++.dg/plugin/dumb_plugin.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdumb_plugin.c?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -78,11 +78,13 @@ static struct gimple_opt_pass pass_dumb_plugin_example =\n    both of which determine where the plugin pass should be inserted.  */\n \n int\n-plugin_init (const char *plugin_name,\n-             struct plugin_gcc_version *version __attribute__((unused)),\n-             int argc, struct plugin_argument *argv)\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n {\n   struct plugin_pass pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n   char *ref_pass_name = NULL;\n   int ref_instance_number = 0;\n   int i;"}, {"sha": "9e7e84c2db06285abb36ed774ac985743ef02e1e", "filename": "gcc/testsuite/g++.dg/plugin/selfassign.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fselfassign.c?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -294,10 +294,13 @@ static struct gimple_opt_pass pass_warn_self_assign =\n    Note that this function needs to be named exactly \"plugin_init\".  */\n \n int\n-plugin_init (const char *plugin_name, struct plugin_gcc_version *version,\n-\t     int argc, struct plugin_argument *argv)\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n {\n   struct plugin_pass pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n   bool enabled = true;\n   int i;\n "}, {"sha": "9e7e84c2db06285abb36ed774ac985743ef02e1e", "filename": "gcc/testsuite/gcc.dg/plugin/selfassign.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fselfassign.c?ref=9fefa0aac20b7ca088b4d2fa3bf1abaa8df691f0", "patch": "@@ -294,10 +294,13 @@ static struct gimple_opt_pass pass_warn_self_assign =\n    Note that this function needs to be named exactly \"plugin_init\".  */\n \n int\n-plugin_init (const char *plugin_name, struct plugin_gcc_version *version,\n-\t     int argc, struct plugin_argument *argv)\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n {\n   struct plugin_pass pass_info;\n+  const char *plugin_name = plugin_info->base_name;\n+  int argc = plugin_info->argc;\n+  struct plugin_argument *argv = plugin_info->argv;\n   bool enabled = true;\n   int i;\n "}]}