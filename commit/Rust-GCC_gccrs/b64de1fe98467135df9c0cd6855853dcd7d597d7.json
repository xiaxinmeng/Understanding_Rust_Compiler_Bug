{"sha": "b64de1fe98467135df9c0cd6855853dcd7d597d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0ZGUxZmU5ODQ2NzEzNWRmOWMwY2Q2ODU1ODUzZGNkN2Q1OTdkNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-12-05T11:21:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-12-05T11:21:48Z"}, "message": "alpha.c (alpha_does_function_need_gp): Return true if the function contains a nonlocal goto.\n\n        * config/alpha/alpha.c (alpha_does_function_need_gp): Return\n        true if the function contains a nonlocal goto.\n\t* gcc.c-torture/execute/nestfunc-6.c: New.\n\nFrom-SVN: r74327", "tree": {"sha": "7002e012176a27cccb63b90db5fccf3d0f8d9960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7002e012176a27cccb63b90db5fccf3d0f8d9960"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b64de1fe98467135df9c0cd6855853dcd7d597d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64de1fe98467135df9c0cd6855853dcd7d597d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b64de1fe98467135df9c0cd6855853dcd7d597d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b64de1fe98467135df9c0cd6855853dcd7d597d7/comments", "author": null, "committer": null, "parents": [{"sha": "e292dbb06b68cd9f03055dff06de8989715ac2b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292dbb06b68cd9f03055dff06de8989715ac2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e292dbb06b68cd9f03055dff06de8989715ac2b8"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c540d5a50805f1175ea47bfc9a028c0f7250dc54", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64de1fe98467135df9c0cd6855853dcd7d597d7/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64de1fe98467135df9c0cd6855853dcd7d597d7/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=b64de1fe98467135df9c0cd6855853dcd7d597d7", "patch": "@@ -6926,12 +6926,21 @@ alpha_does_function_need_gp (void)\n   if (! TARGET_ABI_OSF)\n     return 0;\n \n+  /* We need the gp to load the address of __mcount.  */\n   if (TARGET_PROFILING_NEEDS_GP && current_function_profile)\n     return 1;\n \n+  /* The code emitted by alpha_output_mi_thunk_osf uses the gp.  */\n   if (current_function_is_thunk)\n     return 1;\n \n+  /* The nonlocal receiver pattern assumes that the gp is valid for\n+     the nested function.  Reasonable because it's almost always set\n+     correctly already.  For the cases where that's wrong, make sure\n+     the nested function loads its gp on entry.  */\n+  if (current_function_has_nonlocal_goto)\n+    return 1;\n+\n   /* If we need a GP (we have a LDSYM insn or a CALL_INSN), load it first. \n      Even if we are a static function, we still need to do this in case\n      our address is taken and passed to something like qsort.  */"}, {"sha": "c8e82435ab1705fec016c441e6acff8f0f154a82", "filename": "gcc/testsuite/gcc.c-torture/execute/nestfunc-6.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b64de1fe98467135df9c0cd6855853dcd7d597d7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b64de1fe98467135df9c0cd6855853dcd7d597d7/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-6.c?ref=b64de1fe98467135df9c0cd6855853dcd7d597d7", "patch": "@@ -0,0 +1,29 @@\n+/* Test that the GP gets properly restored, either by the nonlocal\n+   receiver or the nested function.  */\n+\n+#ifndef NO_TRAMPOLINES\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern void abort (void);\n+extern void exit (int);\n+extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));\n+\n+int main ()\n+{\n+  __label__ nonlocal;\n+  int compare (const void *a, const void *b)\n+  {\n+    goto nonlocal;\n+  }\n+\n+  char array[3];\n+  qsort (array, 3, 1, compare);\n+  abort ();\n+\n+ nonlocal:\n+  exit (0);\n+}\n+\n+#else\n+int main() { return 0; }\n+#endif"}]}