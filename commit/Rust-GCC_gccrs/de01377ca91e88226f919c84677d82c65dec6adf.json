{"sha": "de01377ca91e88226f919c84677d82c65dec6adf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUwMTM3N2NhOTFlODgyMjZmOTE5Yzg0Njc3ZDgyYzY1ZGVjNmFkZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:33:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-19T11:33:35Z"}, "message": "Minor reformatting.\n\nFrom-SVN: r244615", "tree": {"sha": "75f286b99daa6edeabb59f7d8aa0363295a98310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75f286b99daa6edeabb59f7d8aa0363295a98310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de01377ca91e88226f919c84677d82c65dec6adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de01377ca91e88226f919c84677d82c65dec6adf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de01377ca91e88226f919c84677d82c65dec6adf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de01377ca91e88226f919c84677d82c65dec6adf/comments", "author": null, "committer": null, "parents": [{"sha": "d9049d04d5fa172848374e395bf283c164a0f7fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9049d04d5fa172848374e395bf283c164a0f7fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9049d04d5fa172848374e395bf283c164a0f7fd"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "b9840e2d25c7bbdec953212590e3128688a24800", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de01377ca91e88226f919c84677d82c65dec6adf/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de01377ca91e88226f919c84677d82c65dec6adf/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=de01377ca91e88226f919c84677d82c65dec6adf", "patch": "@@ -219,18 +219,18 @@ package body Exp_Ch6 is\n    --  reference to the object itself, and the call becomes a call to the\n    --  corresponding protected subprogram.\n \n+   procedure Expand_Simple_Function_Return (N : Node_Id);\n+   --  Expand simple return from function. In the case where we are returning\n+   --  from a function body this is called by Expand_N_Simple_Return_Statement.\n+\n    function Expression_Of_Expression_Function\n      (Subp : Entity_Id) return Node_Id;\n-   --  Return the expression of the expression function Subp\n+   --  Return the expression of expression function Subp\n \n    function Has_Unconstrained_Access_Discriminants\n      (Subtyp : Entity_Id) return Boolean;\n-   --  Returns True if the given subtype is unconstrained and has one\n-   --  or more access discriminants.\n-\n-   procedure Expand_Simple_Function_Return (N : Node_Id);\n-   --  Expand simple return from function. In the case where we are returning\n-   --  from a function body this is called by Expand_N_Simple_Return_Statement.\n+   --  Returns True if the given subtype is unconstrained and has one or more\n+   --  access discriminants.\n \n    procedure Rewrite_Function_Call_For_C (N : Node_Id);\n    --  When generating C code, replace a call to a function that returns an\n@@ -3943,7 +3943,7 @@ package body Exp_Ch6 is\n             null;\n \n          --  Frontend inlining of expression functions (performed also when\n-         --  backend inlining is enabled)\n+         --  backend inlining is enabled).\n \n          elsif Is_Inlinable_Expression_Function (Subp) then\n             Rewrite (N, New_Copy (Expression_Of_Expression_Function (Subp)));\n@@ -6982,13 +6982,13 @@ package body Exp_Ch6 is\n    begin\n       pragma Assert (Is_Expression_Function_Or_Completion (Subp));\n \n-      if Nkind (Original_Node (Subprogram_Spec (Subp)))\n-           = N_Expression_Function\n+      if Nkind (Original_Node (Subprogram_Spec (Subp))) =\n+           N_Expression_Function\n       then\n          Expr_Func := Original_Node (Subprogram_Spec (Subp));\n \n-      elsif Nkind (Original_Node (Subprogram_Body (Subp)))\n-              = N_Expression_Function\n+      elsif Nkind (Original_Node (Subprogram_Body (Subp))) =\n+              N_Expression_Function\n       then\n          Expr_Func := Original_Node (Subprogram_Body (Subp));\n \n@@ -7331,7 +7331,8 @@ package body Exp_Ch6 is\n    -- Is_Inlinable_Expression_Function --\n    --------------------------------------\n \n-   function Is_Inlinable_Expression_Function (Subp : Entity_Id) return Boolean\n+   function Is_Inlinable_Expression_Function\n+     (Subp : Entity_Id) return Boolean\n    is\n       Return_Expr : Node_Id;\n \n@@ -7353,8 +7354,9 @@ package body Exp_Ch6 is\n          --  nominal subtype must be statically compatible with the result\n          --  subtype of the expression function.\n \n-         return Nkind (Return_Expr) = N_Identifier\n-           and then Etype (Return_Expr) = Etype (Subp);\n+         return\n+           Nkind (Return_Expr) = N_Identifier\n+             and then Etype (Return_Expr) = Etype (Subp);\n       end if;\n \n       return False;"}, {"sha": "18a0af75348459fba1a18406912ce04e7c806b55", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de01377ca91e88226f919c84677d82c65dec6adf/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de01377ca91e88226f919c84677d82c65dec6adf/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=de01377ca91e88226f919c84677d82c65dec6adf", "patch": "@@ -1498,9 +1498,10 @@ package body Sem is\n              --  compiling a separate unit (this is to handle a situation\n              --  where this new processing causes trouble).\n \n-             or else ((Configurable_Run_Time_Mode or No_Run_Time_Mode)\n-                       and not Debug_Flag_Dot_ZZ\n-                       and Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit));\n+             or else\n+               ((Configurable_Run_Time_Mode or No_Run_Time_Mode)\n+                  and then not Debug_Flag_Dot_ZZ\n+                  and then Nkind (Unit (Cunit (Main_Unit))) /= N_Subunit));\n       end if;\n \n       Full_Analysis      := True;"}]}