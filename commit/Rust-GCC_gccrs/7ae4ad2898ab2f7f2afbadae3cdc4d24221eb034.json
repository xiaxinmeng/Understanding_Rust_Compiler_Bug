{"sha": "7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FlNGFkMjg5OGFiMmY3ZjJhZmJhZGFlM2NkYzRkMjQyMjFlYjAzNA==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-07-14T23:50:30Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-07-14T23:50:30Z"}, "message": "calls.c (expand_call): Fix typo in comment.\n\n2004-07-14  Eric Christopher  <echristo@redhat.com>\n\n\t* calls.c (expand_call): Fix typo in comment.\n\nFrom-SVN: r84719", "tree": {"sha": "ee9fce4edbff918f0790cd760f554f4dbcf4a1c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee9fce4edbff918f0790cd760f554f4dbcf4a1c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034/comments", "author": null, "committer": null, "parents": [{"sha": "b1346fa335a0ebcb11aae2d271f109dca38af973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1346fa335a0ebcb11aae2d271f109dca38af973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1346fa335a0ebcb11aae2d271f109dca38af973"}], "stats": {"total": 52, "additions": 28, "deletions": 24}, "files": [{"sha": "6f4c6c040b07865b5c573694370d7ee945d3abde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "patch": "@@ -1,3 +1,7 @@\n+2004-07-14  Eric Christopher  <echristo@redhat.com>\n+\n+\t* calls.c (expand_call): Fix typo in comment.\n+\n 2004-07-14  Steve Ellcey  <sje@cup.hp.com>\n \n \t* config/ia64/ia64.c (ia64_expand_compare): Allow ORDERED\n@@ -340,7 +344,7 @@\n \t* tree-data-ref.h: New file.\n \t* tree.c (int_cst_value, tree_fold_gcd): New functions.\n \t* tree.h (int_cst_value, tree_fold_gcd): Declared here.\n-\t\n+\n 2004-07-13  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/13926\n@@ -404,7 +408,7 @@\n \t* tree.h (must_pass_in_stack_var_size): Declare.\n \t(must_pass_in_stack_var_size_or_pad): Declare.\n \t* calls.c (must_pass_in_stack_var_size): New.\n-\t(must_pass_in_stack_var_size_or_pad): Rename from \n+\t(must_pass_in_stack_var_size_or_pad): Rename from\n \tdefault_must_pass_in_stack.\n \t* config/alpha/alpha.c (unicosmk_must_pass_in_stack): New.\n \t(TARGET_MUST_PASS_IN_STACK): New.\n@@ -501,7 +505,7 @@\n \t(NM_FOR_TARGET): Use $(NM) not nm for native.\n \t* configure.ac: Add AC_CHECK_PROG calls for NM and AR.\n \t* configure: Regenerate.\n-\t\n+\n 2004-07-12  David S. Miller  <davem@nuts.davemloft.net>\n \n \t* config/sparc/sparc.md (ashlsi3): Eliminate const 1\n@@ -523,7 +527,7 @@\n 2004-07-12  Devang Patel  <dpatel@apple.com>\n \n \t* doc/invoke.texi (Darwin Options): Document -gused and -gfull.\n-\t\n+\n 2004-07-12  Steve Ellcey  <sje@cup.hp.com>\n \n \t* function.c (expand_function_start): Ensure r_save is in Pmode.\n@@ -555,11 +559,11 @@\n 2004-07-12  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* cfgloop.h (struct loop): Add nb_iterations field.\n-\t(current_loops): Declare.  \n+\t(current_loops): Declare.\n \t* tree-chrec.c (chrec_not_analyzed_yet,\n \tchrec_dont_know, chrec_known, count_ev_in_wider_type,\n \tchrec_contains_symbols_defined_in_loop): Remove the temporary\n-\thooks. \n+\thooks.\n \t* tree-flow-inline.h (loop_containing_stmt): New function.\n \t* tree-scalar-evolution.c: Add implementation.\n \t* tree-scalar-evolution.h: Add declarations.\n@@ -568,7 +572,7 @@\n \n \tPR rtl-optimization/15921\n \t* Makefile.in (global.o): Add recog.h.\n-\t\n+\n \t* global.c (recog.h): Add the include-clause.\n \t(bb_info): New member earlyclobber.\n \t(allocate_bb_info, free_bb_info): Initialize/finish the new\n@@ -580,7 +584,7 @@\n \tNew functions.\n \t(calculate_local_reg_bb_info): Calculate value of earlyclobber.\n \t(make_accurate_live_analysis): Modify pavin.\n-\t\n+\n 2004-07-12  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-cfg.c (find_taken_edge): Statically compute the truth\n@@ -714,7 +718,7 @@\n \n 2004-07-11  Ulrich Weigand  <uweigand@de.ibm.com>\n \n-\t* config/s390/linux.h (MD_FALLBACK_FRAME_STATE_FOR): For SIGSEGV and \n+\t* config/s390/linux.h (MD_FALLBACK_FRAME_STATE_FOR): For SIGSEGV and\n \tSIGBUS signal frames, the PSW address points *to* the faulting\n \tinstruction, not after it.\n \n@@ -725,7 +729,7 @@\n \n 2004-07-11  Richard Henderson  <rth@redhat.com>\n \n-\t* expmed.c (init_expmed): Use stack-local structures for \n+\t* expmed.c (init_expmed): Use stack-local structures for\n \ttemporary rtl.  Don't recognize shifts.\n \n 2004-07-11  Richard Henderson  <rth@redhat.com>\n@@ -960,7 +964,7 @@\n \t(sparc_override_options): Set sparc_costs as appropriate.\n \t(sparc_rtx_costs): Use sparc_costs instead of messy\n \tconditionals.\n-\t\n+\n 2004-07-09  Steven Bosscher  <stevenb@suse.de>\n \n \t* doc/md.texi (Processor pipeline description): Mention that"}, {"sha": "231d69b0aff322c7fa72bf757d41d6187df454a4", "filename": "gcc/calls.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=7ae4ad2898ab2f7f2afbadae3cdc4d24221eb034", "patch": "@@ -479,7 +479,7 @@ special_function_p (tree fndecl, int flags)\n          hacky imitation of DECL_ASSEMBLER_NAME.  It's (also) wrong\n          because you can declare fork() inside a function if you\n          wish.  */\n-      && (DECL_CONTEXT (fndecl) == NULL_TREE \n+      && (DECL_CONTEXT (fndecl) == NULL_TREE\n \t  || TREE_CODE (DECL_CONTEXT (fndecl)) == TRANSLATION_UNIT_DECL)\n       && TREE_PUBLIC (fndecl))\n     {\n@@ -887,7 +887,7 @@ store_unaligned_arguments_into_pseudos (struct arg_data *args, int num_actuals)\n    and may be modified by this routine.\n \n    OLD_PENDING_ADJ, MUST_PREALLOCATE and FLAGS are pointers to integer\n-   flags which may may be modified by this routine. \n+   flags which may may be modified by this routine.\n \n    MAY_TAILCALL is cleared if we encounter an invisible pass-by-reference\n    that requires allocation of stack space.\n@@ -1241,7 +1241,7 @@ precompute_arguments (int flags, int num_actuals, struct arg_data *args)\n      get extraneous instructions emitted as part of the libcall sequence.  */\n   if ((flags & ECF_LIBCALL_BLOCK) == 0)\n     return;\n-    \n+\n   for (i = 0; i < num_actuals; i++)\n     {\n       enum machine_mode mode;\n@@ -2117,7 +2117,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  || (ACCUMULATE_OUTGOING_ARGS\n \t\t      && stack_arg_under_construction\n \t\t      && structure_value_addr == virtual_outgoing_args_rtx)\n-\t\t  ? copy_addr_to_reg (convert_memory_address \n+\t\t  ? copy_addr_to_reg (convert_memory_address\n \t\t\t\t      (Pmode, structure_value_addr))\n \t\t  : structure_value_addr);\n \n@@ -2223,7 +2223,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t  || (!ACCUMULATE_OUTGOING_ARGS && args_size.constant)))\n     structure_value_addr = copy_to_reg (structure_value_addr);\n \n-  /* Tail calls can make things harder to debug, and we're traditionally\n+  /* Tail calls can make things harder to debug, and we've traditionally\n      pushed these optimizations into -O2.  Don't try if we're already\n      expanding a call, as that means we're an argument.  Don't try if\n      there's cleanups, as we know there's code to follow the call.\n@@ -2342,7 +2342,7 @@ expand_call (tree exp, rtx target, int ignore)\n       int sibcall_failure = 0;\n       /* We want to emit any pending stack adjustments before the tail\n \t recursion \"call\".  That way we know any adjustment after the tail\n-\t recursion call can be ignored if we indeed use the tail \n+\t recursion call can be ignored if we indeed use the tail\n \t call expansion.  */\n       int save_pending_stack_adjust = 0;\n       int save_stack_pointer_delta = 0;\n@@ -2755,7 +2755,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t structure value.  */\n       if (pass != 0 && structure_value_addr && ! structure_value_addr_parm)\n \t{\n-\t  structure_value_addr \n+\t  structure_value_addr\n \t    = convert_memory_address (Pmode, structure_value_addr);\n \t  emit_move_insn (struct_value,\n \t\t\t  force_reg (Pmode,\n@@ -2840,8 +2840,8 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t  && (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRT\n \t\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRTF\n \t\t      || DECL_FUNCTION_CODE (fndecl) == BUILT_IN_SQRTL))\n-\t\tnote = gen_rtx_fmt_e (SQRT, \n-\t\t\t\t      GET_MODE (temp), \n+\t\tnote = gen_rtx_fmt_e (SQRT,\n+\t\t\t\t      GET_MODE (temp),\n \t\t\t\t      args[0].initial_value);\n \t      else\n \t\t{\n@@ -2852,7 +2852,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t\t    note = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t\t      args[i].initial_value, note);\n \t\t  note = gen_rtx_EXPR_LIST (VOIDmode, funexp, note);\n-\t\t  \n+\n \t\t  if (flags & ECF_PURE)\n \t\t    note = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\tgen_rtx_USE (VOIDmode,\n@@ -3940,7 +3940,7 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n \t  if (GET_CODE (valreg) == PARALLEL)\n \t    {\n \t      temp = gen_reg_rtx (outmode);\n-\t      emit_group_store (temp, valreg, NULL_TREE, \n+\t      emit_group_store (temp, valreg, NULL_TREE,\n \t\t\t\tGET_MODE_SIZE (outmode));\n \t      valreg = temp;\n \t    }\n@@ -4317,7 +4317,7 @@ store_one_arg (struct arg_data *arg, rtx argblock, int flags,\n \t    excess = (arg->locate.size.constant\n \t\t      - int_size_in_bytes (TREE_TYPE (pval))\n \t\t      + partial * GET_MODE_SIZE (GET_MODE (elt)));\n-\t  } \n+\t  }\n \t  else\n \t    excess = (arg->locate.size.constant\n \t\t      - int_size_in_bytes (TREE_TYPE (pval))\n@@ -4434,7 +4434,7 @@ must_pass_in_stack_var_size (enum machine_mode mode ATTRIBUTE_UNUSED,\n   return false;\n }\n \n-/* Another version of the TARGET_MUST_PASS_IN_STACK hook.  This one \n+/* Another version of the TARGET_MUST_PASS_IN_STACK hook.  This one\n    takes trailing padding of a structure into account.  */\n /* ??? Should be able to merge these two by examining BLOCK_REG_PADDING.  */\n "}]}